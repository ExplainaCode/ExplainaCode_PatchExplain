record_number,buggy_code,fixed_code,code_similarity
136001,"protected void addPages(){
  try {
    if (getContainer() instanceof CTabFolder) {
      ((CTabFolder)getContainer()).setTabPosition(SWT.TOP);
    }
    for (int i=0; i < pagesToAdd.length; i++) {
      addPage(pagesToAdd[i]);
      if (pagesToAdd[i].getPartControl() == null) {
        pagesToAdd[i].createPartControl(getContainer());
        setControl(i,pagesToAdd[i].getPartControl());
        pagesToAdd[i].getPartControl().setMenu(getContainer().getMenu());
      }
    }
    UIHelper.runUIAsync(validateRunable);
  }
 catch (  PartInitException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
  ModuleNode rootModule=SemanticHelper.getRootModuleNode();
  if (rootModule != null && rootModule.getVariableDecls().length == 0 && rootModule.getConstantDecls().length == 0) {
    showResultPage();
  }
}","protected void addPages(){
  try {
    if (getContainer() instanceof CTabFolder) {
      ((CTabFolder)getContainer()).setTabPosition(SWT.TOP);
      ((CTabFolder)getContainer()).addCTabFolder2Listener(listener);
    }
 else {
      TLCUIActivator.logDebug(""String_Node_Str"");
    }
    for (int i=0; i < pagesToAdd.length; i++) {
      addPage(pagesToAdd[i]);
      if (pagesToAdd[i].getPartControl() == null) {
        pagesToAdd[i].createPartControl(getContainer());
        setControl(i,pagesToAdd[i].getPartControl());
        pagesToAdd[i].getPartControl().setMenu(getContainer().getMenu());
      }
    }
    UIHelper.runUIAsync(validateRunable);
  }
 catch (  PartInitException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
  ModuleNode rootModule=SemanticHelper.getRootModuleNode();
  if (rootModule != null && rootModule.getVariableDecls().length == 0 && rootModule.getConstantDecls().length == 0) {
    showResultPage();
  }
}",0.9246458923512748
136002,"/** 
 * Installs a new marker on the obligation in the message or updates the existing marker on that obligation (if there is one) with the information contained in message. The message location should be for a module in the currently opened spec. If no such module exists, this method returns null. Returns the marker created or updated.
 * @param message must not be null
 */
public static IMarker newObligationStatus(ObligationStatusMessage message){
  Location location=message.getLocation();
  IResource module=ResourceHelper.getResourceByModuleName(location.source());
  if (module != null && module instanceof IFile && module.exists()) {
    FileEditorInput fileEditorInput=new FileEditorInput((IFile)module);
    FileDocumentProvider fileDocumentProvider=new FileDocumentProvider();
    try {
      IMarker[] markers=module.findMarkers(ProverHelper.OBLIGATION_MARKER,false,IResource.DEPTH_ZERO);
      for (int i=0; i < markers.length; i++) {
        if (markers[i].getAttribute(ProverHelper.OBLIGATION_ID,-1) == message.getID()) {
          markers[i].setAttribute(ProverHelper.OBLIGATION_STATUS,message.getStatus());
          markers[i].setAttribute(ProverHelper.OBLIGATION_METHOD,message.getMethod());
          return markers[i];
        }
      }
      IMarker marker=module.createMarker(ProverHelper.OBLIGATION_MARKER);
      marker.setAttribute(ProverHelper.OBLIGATION_ID,message.getID());
      marker.setAttribute(ProverHelper.OBLIGATION_METHOD,message.getMethod());
      marker.setAttribute(ProverHelper.OBLIGATION_STATUS,message.getStatus());
      marker.setAttribute(ProverHelper.OBLIGATION_STRING,message.getObString());
      fileDocumentProvider.connect(fileEditorInput);
      IDocument document=fileDocumentProvider.getDocument(fileEditorInput);
      IRegion obRegion=AdapterFactory.locationToRegion(document,location);
      marker.setAttribute(IMarker.CHAR_START,obRegion.getOffset());
      marker.setAttribute(IMarker.CHAR_END,obRegion.getOffset() + obRegion.getLength() - 1);
      return marker;
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
catch (    BadLocationException e) {
      e.printStackTrace();
    }
 finally {
      fileDocumentProvider.disconnect(fileEditorInput);
    }
  }
  return null;
}","/** 
 * Installs a new marker on the obligation in the message or updates the existing marker on that obligation (if there is one) with the information contained in message. The message location should be for a module in the currently opened spec. If no such module exists, this method returns null. Returns the marker created or updated.
 * @param message must not be null
 */
public static IMarker newObligationStatus(ObligationStatusMessage message){
  Location location=message.getLocation();
  IResource module=ResourceHelper.getResourceByModuleName(location.source());
  if (module != null && module instanceof IFile && module.exists()) {
    FileEditorInput fileEditorInput=new FileEditorInput((IFile)module);
    FileDocumentProvider fileDocumentProvider=new FileDocumentProvider();
    try {
      IMarker[] markers=module.findMarkers(ProverHelper.OBLIGATION_MARKER,false,IResource.DEPTH_ZERO);
      IMarker marker=null;
      for (int i=0; i < markers.length; i++) {
        if (markers[i].getAttribute(ProverHelper.OBLIGATION_ID,-1) == message.getID()) {
          marker=markers[i];
          break;
        }
      }
      if (marker == null) {
        marker=module.createMarker(ProverHelper.OBLIGATION_MARKER);
        marker.setAttribute(ProverHelper.OBLIGATION_ID,message.getID());
      }
      marker.setAttribute(ProverHelper.OBLIGATION_METHOD,message.getMethod());
      marker.setAttribute(ProverHelper.OBLIGATION_STATUS,message.getStatus());
      marker.setAttribute(ProverHelper.OBLIGATION_STRING,message.getObString());
      fileDocumentProvider.connect(fileEditorInput);
      IDocument document=fileDocumentProvider.getDocument(fileEditorInput);
      IRegion obRegion=AdapterFactory.locationToRegion(document,location);
      marker.setAttribute(IMarker.CHAR_START,obRegion.getOffset());
      marker.setAttribute(IMarker.CHAR_END,obRegion.getOffset() + obRegion.getLength() - 1);
      return marker;
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
catch (    BadLocationException e) {
      e.printStackTrace();
    }
 finally {
      fileDocumentProvider.disconnect(fileEditorInput);
    }
  }
  return null;
}",0.9376975169300226
136003,"public Object getAdapter(Class required){
  if (projectionSupport != null) {
    Object adapter=projectionSupport.getAdapter(getSourceViewer(),required);
    if (adapter != null)     return adapter;
  }
  return super.getAdapter(required);
}","public Object getAdapter(Class required){
  if (projectionSupport != null) {
    Object adapter=projectionSupport.getAdapter(getSourceViewer(),required);
    if (adapter != null)     return adapter;
  }
  if (ISelectionProvider.class.equals(required)) {
    return getSelectionProvider();
  }
  return super.getAdapter(required);
}",0.8076923076923077
136004,"public Object execute(ExecutionEvent event) throws ExecutionException {
  ISelection selection=UIHelper.getActivePage().getSelection();
  IEditorPart editor=HandlerUtil.getActiveEditor(event);
  if (selection instanceof ITextSelection) {
    ITextSelection textSelection=(ITextSelection)selection;
    IEditorInput edInput=editor.getEditorInput();
    if (edInput instanceof FileEditorInput) {
      String moduleName=ResourceHelper.getModuleName(((FileEditorInput)edInput).getFile());
      FileDocumentProvider fdp=new FileDocumentProvider();
      try {
        fdp.connect(edInput);
        document=fdp.getDocument(edInput);
      }
 catch (      CoreException e) {
        ProverUIActivator.logError(""String_Node_Str"" + moduleName,e);
      }
 finally {
        fdp.disconnect(edInput);
      }
      HashMap params=new HashMap();
      ParseResult parseResult=ParseResultBroadcaster.getParseResultBroadcaster().getParseResult(moduleName);
      if (parseResult != null) {
        SpecObj specObj=parseResult.getSpecObj();
        if (specObj == null) {
          return null;
        }
        Assert.isNotNull(specObj.getExternalModuleTable());
        ModuleNode moduleNode=specObj.getExternalModuleTable().getModuleNode(UniqueString.uniqueStringOf(moduleName));
        if (moduleNode == null) {
          return null;
        }
        TheoremNode[] theorems=moduleNode.getTheorems();
        TheoremNode stepWithCaret=null;
        for (int i=0; i < theorems.length; i++) {
          TheoremNode theoremNode=theorems[i];
          if (theoremNode.getLocation().source().equals(moduleName)) {
            TheoremNode step=getStepWithCaret(theoremNode,textSelection.getOffset() + textSelection.getLength());
            if (step != null) {
              stepWithCaret=step;
              break;
            }
          }
        }
        params.put(CheckProofHandler.PARAM_MODULE_NAME,moduleName);
        if (stepWithCaret != null) {
          ProofNode proof=stepWithCaret.getProof();
          if (proof != null) {
            params.put(CheckProofHandler.PARAM_BEGIN_LINE,""String_Node_Str"" + stepWithCaret.getLocation().beginLine());
            params.put(CheckProofHandler.PARAM_BEGIN_COLUMN,""String_Node_Str"" + stepWithCaret.getLocation().beginColumn());
            params.put(CheckProofHandler.PARAM_END_LINE,""String_Node_Str"" + proof.getLocation().endLine());
            params.put(CheckProofHandler.PARAM_END_COLUMN,""String_Node_Str"" + proof.getLocation().endColumn());
          }
        }
 else {
          try {
            params.put(CheckProofHandler.PARAM_BEGIN_LINE,""String_Node_Str"" + 1);
            params.put(CheckProofHandler.PARAM_BEGIN_COLUMN,""String_Node_Str"" + 1);
            params.put(CheckProofHandler.PARAM_END_LINE,""String_Node_Str"" + document.getNumberOfLines());
            params.put(CheckProofHandler.PARAM_END_COLUMN,""String_Node_Str"" + document.getLineInformation(document.getNumberOfLines() - 1).getLength());
          }
 catch (          BadLocationException e) {
            ProverUIActivator.logError(""String_Node_Str"" + moduleName,e);
            return null;
          }
        }
        UIHelper.runCommand(CheckProofHandler.COMMAND_ID,params);
      }
    }
  }
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  IEditorPart editor=HandlerUtil.getActiveEditor(event);
  Assert.isNotNull(editor,""String_Node_Str"");
  ISelectionProvider selectionProvider=(ISelectionProvider)editor.getAdapter(ISelectionProvider.class);
  Assert.isNotNull(selectionProvider,""String_Node_Str"");
  ISelection selection=selectionProvider.getSelection();
  if (selection instanceof ITextSelection) {
    ITextSelection textSelection=(ITextSelection)selection;
    IEditorInput edInput=editor.getEditorInput();
    if (edInput instanceof FileEditorInput) {
      String moduleName=ResourceHelper.getModuleName(((FileEditorInput)edInput).getFile());
      FileDocumentProvider fdp=new FileDocumentProvider();
      try {
        fdp.connect(edInput);
        document=fdp.getDocument(edInput);
      }
 catch (      CoreException e) {
        ProverUIActivator.logError(""String_Node_Str"" + moduleName,e);
      }
 finally {
        fdp.disconnect(edInput);
      }
      HashMap params=new HashMap();
      ParseResult parseResult=ParseResultBroadcaster.getParseResultBroadcaster().getParseResult(moduleName);
      if (parseResult != null) {
        SpecObj specObj=parseResult.getSpecObj();
        if (specObj == null) {
          return null;
        }
        Assert.isNotNull(specObj.getExternalModuleTable());
        ModuleNode moduleNode=specObj.getExternalModuleTable().getModuleNode(UniqueString.uniqueStringOf(moduleName));
        if (moduleNode == null) {
          return null;
        }
        TheoremNode[] theorems=moduleNode.getTheorems();
        TheoremNode stepWithCaret=null;
        for (int i=0; i < theorems.length; i++) {
          TheoremNode theoremNode=theorems[i];
          if (theoremNode.getLocation().source().equals(moduleName)) {
            TheoremNode step=getStepWithCaret(theoremNode,textSelection.getOffset() + textSelection.getLength());
            if (step != null) {
              stepWithCaret=step;
              break;
            }
          }
        }
        params.put(CheckProofHandler.PARAM_MODULE_NAME,moduleName);
        if (stepWithCaret != null) {
          ProofNode proof=stepWithCaret.getProof();
          if (proof != null) {
            params.put(CheckProofHandler.PARAM_BEGIN_LINE,""String_Node_Str"" + stepWithCaret.getLocation().beginLine());
            params.put(CheckProofHandler.PARAM_BEGIN_COLUMN,""String_Node_Str"" + stepWithCaret.getLocation().beginColumn());
            params.put(CheckProofHandler.PARAM_END_LINE,""String_Node_Str"" + proof.getLocation().endLine());
            params.put(CheckProofHandler.PARAM_END_COLUMN,""String_Node_Str"" + proof.getLocation().endColumn());
          }
        }
 else {
          try {
            params.put(CheckProofHandler.PARAM_BEGIN_LINE,""String_Node_Str"" + 1);
            params.put(CheckProofHandler.PARAM_BEGIN_COLUMN,""String_Node_Str"" + 1);
            params.put(CheckProofHandler.PARAM_END_LINE,""String_Node_Str"" + document.getNumberOfLines());
            params.put(CheckProofHandler.PARAM_END_COLUMN,""String_Node_Str"" + document.getLineInformation(document.getNumberOfLines() - 1).getLength());
          }
 catch (          BadLocationException e) {
            ProverUIActivator.logError(""String_Node_Str"" + moduleName,e);
            return null;
          }
        }
        UIHelper.runCommand(CheckProofHandler.COMMAND_ID,params);
      }
    }
  }
  return null;
}",0.9509129003292428
136005,"public void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  System.out.println(""String_Node_Str"");
  if (!MODE_TRACE_EXPLORE.equals(mode)) {
    throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,""String_Node_Str"" + mode));
  }
  IProject project=ResourceHelper.getProject(specName);
  if (project == null) {
    throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,""String_Node_Str"" + specName));
  }
  TLCJob tlcjob=new TLCProcessJob(specName,modelName,launch);
  tlcjob.setWorkers(1);
  tlcjob.setPriority(Job.LONG);
  tlcjob.setUser(true);
  tlcjob.setRule(mutexRule);
  tlcjob.schedule();
}","public void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  System.out.println(""String_Node_Str"");
  if (!MODE_TRACE_EXPLORE.equals(mode)) {
    throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,""String_Node_Str"" + mode));
  }
  IProject project=ResourceHelper.getProject(specName);
  if (project == null) {
    throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,""String_Node_Str"" + specName));
  }
  TLCJob tlcjob=new TraceExplorerJob(specName,modelName,launch);
  tlcjob.setWorkers(1);
  tlcjob.setPriority(Job.SHORT);
  tlcjob.setUser(true);
  tlcjob.setRule(mutexRule);
  tlcjob.schedule();
}",0.8730606488011283
136006,"private final void collectPrimedLocsAppl(OpApplNode pred,Context c,ObjLongTable tbl){
  ExprOrOpArgNode[] args=pred.getArgs();
  SymbolNode opNode=pred.getOperator();
  int opcode=BuiltInOPs.getOpCode(opNode.getName());
switch (opcode) {
case OPCODE_fa:
{
      this.collectPrimedLocs(args[0],c,tbl);
      break;
    }
case OPCODE_ite:
{
    this.collectPrimedLocs(args[1],c,tbl);
    this.collectPrimedLocs(args[2],c,tbl);
    break;
  }
case OPCODE_case:
{
  for (int i=0; i < args.length; i++) {
    OpApplNode pair=(OpApplNode)args[i];
    this.collectPrimedLocs(pair.getArgs()[1],c,tbl);
  }
  break;
}
case OPCODE_eq:
case OPCODE_in:
{
SymbolNode var=this.getPrimedVar(args[0],c,false);
if (var != null && var.getName().getVarLoc() != -1) {
  tbl.put(pred.toString(),0);
}
break;
}
case OPCODE_cl:
case OPCODE_dl:
case OPCODE_be:
case OPCODE_bf:
case OPCODE_land:
case OPCODE_lor:
case OPCODE_implies:
case OPCODE_nop:
{
for (int i=0; i < args.length; i++) {
this.collectPrimedLocs(args[i],c,tbl);
}
break;
}
case OPCODE_unchanged:
{
this.collectUnchangedLocs(args[0],c,tbl);
break;
}
case OPCODE_aa:
{
this.collectPrimedLocs(args[0],c,tbl);
break;
}
case OPCODE_sa:
{
this.collectPrimedLocs(args[0],c,tbl);
tbl.put(args[1].toString(),0);
break;
}
default :
{
if (opcode == 0) {
Object val=this.lookup(opNode,c,false);
if (val instanceof OpDefNode) {
OpDefNode opDef=(OpDefNode)val;
Context c1=this.getOpContext(opDef,args,c,true);
this.collectPrimedLocs(opDef.getBody(),c1,tbl);
}
 else if (val instanceof LazyValue) {
LazyValue lv=(LazyValue)val;
this.collectPrimedLocs(lv.expr,lv.con,tbl);
}
}
}
}
}","private final void collectPrimedLocsAppl(OpApplNode pred,Context c,ObjLongTable tbl){
  ExprOrOpArgNode[] args=pred.getArgs();
  SymbolNode opNode=pred.getOperator();
  int opcode=BuiltInOPs.getOpCode(opNode.getName());
switch (opcode) {
case OPCODE_fa:
{
      this.collectPrimedLocs(args[0],c,tbl);
      break;
    }
case OPCODE_ite:
{
    this.collectPrimedLocs(args[1],c,tbl);
    this.collectPrimedLocs(args[2],c,tbl);
    break;
  }
case OPCODE_case:
{
  for (int i=0; i < args.length; i++) {
    OpApplNode pair=(OpApplNode)args[i];
    this.collectPrimedLocs(pair.getArgs()[1],c,tbl);
  }
  break;
}
case OPCODE_eq:
case OPCODE_in:
{
SymbolNode var=this.getPrimedVar(args[0],c,false);
if (var != null && var.getName().getVarLoc() != -1) {
  tbl.put(pred.toString(),0);
}
break;
}
case OPCODE_cl:
case OPCODE_dl:
case OPCODE_be:
case OPCODE_bf:
case OPCODE_land:
case OPCODE_lor:
case OPCODE_implies:
case OPCODE_nop:
{
for (int i=0; i < args.length; i++) {
this.collectPrimedLocs(args[i],c,tbl);
}
break;
}
case OPCODE_unchanged:
{
this.collectUnchangedLocs(args[0],c,tbl);
break;
}
case OPCODE_aa:
{
this.collectPrimedLocs(args[0],c,tbl);
break;
}
case OPCODE_sa:
{
this.collectPrimedLocs(args[0],c,tbl);
tbl.put(args[1].toString(),0);
break;
}
default :
{
if (opcode == 0) {
Object val=this.lookup(opNode,c,false);
if (val instanceof OpDefNode) {
OpDefNode opDef=(OpDefNode)val;
if (opDef.getInRecursive()) {
return;
}
Context c1=this.getOpContext(opDef,args,c,true);
this.collectPrimedLocs(opDef.getBody(),c1,tbl);
}
 else if (val instanceof LazyValue) {
LazyValue lv=(LazyValue)val;
this.collectPrimedLocs(lv.expr,lv.con,tbl);
}
}
}
}
}",0.9877225291589932
136007,"/** 
 * Writes current unique string to the stream
 * @param dos
 * @return
 * @throws IOException
 */
public final void write(BufferedDataOutputStream dos) throws IOException {
  dos.writeInt(this.tok);
  dos.writeInt(this.loc);
  dos.writeInt(this.s.length());
  dos.writeString(this.s);
}","/** 
 * Writes current unique string to the stream
 * @param dos
 * @return
 * @throws IOException
 */
public final void write(BufferedDataOutputStream dos) throws IOException {
  dos.writeInt(this.tok);
  dos.writeInt(this.getVarLoc());
  dos.writeInt(this.s.length());
  dos.writeString(this.s);
}",0.8915254237288136
136008,"public static void main(String[] args){
  System.out.println(""String_Node_Str"" + TLCGlobals.versionOfTLC);
  String mainFile=null;
  String traceFile=null;
  boolean deadlock=true;
  String configFile=null;
  int traceDepth=10;
  int traceNum=10;
  boolean noSeed=true;
  long seed=0;
  long aril=0;
  int index=0;
  while (index < args.length) {
    if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index >= args.length) {
        printErrorMsg(""String_Node_Str"");
        return;
      }
      traceFile=args[index++];
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      deadlock=false;
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index >= args.length) {
        printErrorMsg(""String_Node_Str"");
        return;
      }
      traceDepth=Integer.parseInt(args[index]);
      index++;
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index >= args.length) {
        printErrorMsg(""String_Node_Str"");
        return;
      }
      traceNum=Integer.parseInt(args[index]);
      index++;
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index < args.length) {
        try {
          TLCGlobals.coverageInterval=Integer.parseInt(args[index]) * 60 * 1000;
          if (TLCGlobals.coverageInterval < 0) {
            printErrorMsg(""String_Node_Str"");
            return;
          }
          index++;
        }
 catch (        Exception e) {
          printErrorMsg(""String_Node_Str"" + ""String_Node_Str"" + args[index]);
          return;
        }
      }
 else {
        printErrorMsg(""String_Node_Str"");
        return;
      }
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index < args.length) {
        seed=Long.parseLong(args[index++]);
        noSeed=false;
      }
 else {
        printErrorMsg(""String_Node_Str"");
        return;
      }
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index < args.length) {
        aril=Long.parseLong(args[index++]);
      }
 else {
        printErrorMsg(""String_Node_Str"");
        return;
      }
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index < args.length) {
        configFile=args[index];
        int len=configFile.length();
        if (configFile.startsWith(""String_Node_Str"",len - 4)) {
          configFile=configFile.substring(0,len - 4);
        }
        index++;
      }
 else {
        printErrorMsg(""String_Node_Str"");
        return;
      }
    }
 else {
      if (args[index].charAt(0) == '-') {
        printErrorMsg(""String_Node_Str"" + args[index]);
        return;
      }
      if (mainFile != null) {
        printErrorMsg(""String_Node_Str"" + mainFile + ""String_Node_Str""+ args[index]);
        return;
      }
      mainFile=args[index++];
      int len=mainFile.length();
      if (mainFile.startsWith(""String_Node_Str"",len - 4)) {
        mainFile=mainFile.substring(0,len - 4);
      }
    }
  }
  if (mainFile == null) {
    printErrorMsg(""String_Node_Str"");
    return;
  }
  if (traceFile == null)   traceFile=mainFile + ""String_Node_Str"";
  if (configFile == null)   configFile=mainFile;
  try {
    RandomGenerator rng=new RandomGenerator();
    if (noSeed) {
      seed=rng.nextLong();
      rng.setSeed(seed);
    }
 else {
      rng.setSeed(seed,aril);
    }
    ToolIO.out.println(""String_Node_Str"" + seed + ""String_Node_Str"");
    Simulator simulator=new Simulator(mainFile,configFile,traceFile,deadlock,traceDepth,traceNum,rng,seed,true,null,null);
    simulator.simulate();
  }
 catch (  Exception e) {
    MP.printError(EC.GENERAL,e.getMessage());
  }
}","public static void main(String[] args){
  System.out.println(""String_Node_Str"" + TLCGlobals.versionOfTLC);
  String mainFile=null;
  String traceFile=null;
  boolean deadlock=true;
  String configFile=null;
  int traceDepth=10;
  int traceNum=10;
  boolean noSeed=true;
  long seed=0;
  long aril=0;
  int index=0;
  while (index < args.length) {
    if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index >= args.length) {
        printErrorMsg(""String_Node_Str"");
        return;
      }
      traceFile=args[index++];
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      deadlock=false;
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index >= args.length) {
        printErrorMsg(""String_Node_Str"");
        return;
      }
      traceDepth=Integer.parseInt(args[index]);
      index++;
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index >= args.length) {
        printErrorMsg(""String_Node_Str"");
        return;
      }
      traceNum=Integer.parseInt(args[index]);
      index++;
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index < args.length) {
        try {
          TLCGlobals.coverageInterval=Integer.parseInt(args[index]) * 60 * 1000;
          if (TLCGlobals.coverageInterval < 0) {
            printErrorMsg(""String_Node_Str"");
            return;
          }
          index++;
        }
 catch (        Exception e) {
          printErrorMsg(""String_Node_Str"" + ""String_Node_Str"" + args[index]);
          return;
        }
      }
 else {
        printErrorMsg(""String_Node_Str"");
        return;
      }
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index < args.length) {
        seed=Long.parseLong(args[index++]);
        noSeed=false;
      }
 else {
        printErrorMsg(""String_Node_Str"");
        return;
      }
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index < args.length) {
        aril=Long.parseLong(args[index++]);
      }
 else {
        printErrorMsg(""String_Node_Str"");
        return;
      }
    }
 else     if (args[index].equals(""String_Node_Str"")) {
      index++;
      if (index < args.length) {
        configFile=args[index];
        int len=configFile.length();
        if (configFile.startsWith(""String_Node_Str"",len - 4)) {
          configFile=configFile.substring(0,len - 4);
        }
        index++;
      }
 else {
        printErrorMsg(""String_Node_Str"");
        return;
      }
    }
 else {
      if (args[index].charAt(0) == '-') {
        printErrorMsg(""String_Node_Str"" + args[index]);
        return;
      }
      if (mainFile != null) {
        printErrorMsg(""String_Node_Str"" + mainFile + ""String_Node_Str""+ args[index]);
        return;
      }
      mainFile=args[index++];
      int len=mainFile.length();
      if (mainFile.startsWith(""String_Node_Str"",len - 4)) {
        mainFile=mainFile.substring(0,len - 4);
      }
    }
  }
  if (mainFile == null) {
    printErrorMsg(""String_Node_Str"");
    return;
  }
  if (traceFile == null)   traceFile=mainFile + ""String_Node_Str"";
  if (configFile == null)   configFile=mainFile;
  try {
    RandomGenerator rng=new RandomGenerator();
    if (noSeed) {
      seed=rng.nextLong();
      rng.setSeed(seed);
    }
 else {
      rng.setSeed(seed,aril);
    }
    ToolIO.out.println(""String_Node_Str"" + seed + ""String_Node_Str"");
    Simulator simulator=new Simulator(mainFile,configFile,traceFile,deadlock,traceDepth,traceNum,rng,seed,true,null,null);
    simulator.simulate();
  }
 catch (  Exception e) {
    MP.printError(EC.GENERAL,(e.getMessage() == null) ? e.toString() : e.getMessage());
  }
}",0.9943970117395944
136009,"public final boolean getTrace(){
  String rfname=this.traceFile + this.ticnt;
  File tfile=new File(rfname);
  ToolIO.out.println(""String_Node_Str"" + tfile + ""String_Node_Str"");
  if (!tfile.exists())   return false;
  SpecObj spec=new SpecObj(rfname,null);
  try {
    SANY.frontEndInitialize(spec,ToolIO.out);
    SANY.frontEndParse(spec,ToolIO.out);
    SANY.frontEndSemanticAnalysis(spec,ToolIO.out,true);
  }
 catch (  Throwable e) {
    String msg=e.getMessage();
    Assert.fail(EC.CHECK_COULD_NOT_READ_TRACE,msg);
  }
  if (!spec.initErrors.isSuccess() || !spec.parseErrors.isSuccess() || !spec.semanticErrors.isSuccess()) {
    Assert.fail(EC.TLC_PARSING_FAILED);
  }
  ExternalModuleTable mt=spec.getExternalModuleTable();
  ModuleNode module=mt.getModuleNode(UniqueString.uniqueStringOf(rfname));
  OpDefNode[] opDefs=module.getOpDefs();
  int len=opDefs.length;
  this.states=new TLCState[len];
  for (int i=0; i < len; i++) {
    TLCState state=this.tool.makeState(opDefs[i].getBody());
    this.states[i]=state;
  }
  this.sidx=0;
  this.ticnt++;
  return true;
}","public final boolean getTrace(){
  String rfname=this.traceFile + this.ticnt;
  File tfile=new File(rfname);
  ToolIO.out.println(""String_Node_Str"" + tfile + ""String_Node_Str"");
  if (!tfile.exists())   return false;
  SpecObj spec=new SpecObj(rfname,null);
  try {
    SANY.frontEndInitialize(spec,ToolIO.out);
    SANY.frontEndParse(spec,ToolIO.out);
    SANY.frontEndSemanticAnalysis(spec,ToolIO.out,true);
  }
 catch (  Throwable e) {
    String msg=(e.getMessage() == null) ? e.toString() : e.getMessage();
    Assert.fail(EC.CHECK_COULD_NOT_READ_TRACE,msg);
  }
  if (!spec.initErrors.isSuccess() || !spec.parseErrors.isSuccess() || !spec.semanticErrors.isSuccess()) {
    Assert.fail(EC.TLC_PARSING_FAILED);
  }
  ExternalModuleTable mt=spec.getExternalModuleTable();
  ModuleNode module=mt.getModuleNode(UniqueString.uniqueStringOf(rfname));
  OpDefNode[] opDefs=module.getOpDefs();
  int len=opDefs.length;
  this.states=new TLCState[len];
  for (int i=0; i < len; i++) {
    TLCState state=this.tool.makeState(opDefs[i].getBody());
    this.states[i]=state;
  }
  this.sidx=0;
  this.ticnt++;
  return true;
}",0.9808743169398908
136010,"/** 
 * This method does model checking on a TLA+ spec. All the visited states are stored in the variable theFPSet. All the states whose next states have not been explored are stored in the variable theStateQueue.
 */
public void modelCheck() throws Exception {
  report(""String_Node_Str"");
  if (this.checkLiveness) {
    report(""String_Node_Str"");
    LiveCheck.init(this.tool,this.actions,this.metadir);
    report(""String_Node_Str"");
  }
  boolean recovered=this.recover();
  if (!recovered) {
    if (!this.checkAssumptions())     return;
    try {
      report(""String_Node_Str"");
      MP.printMessage(EC.TLC_COMPUTING_INIT);
      if (!this.doInit(false)) {
        report(""String_Node_Str"");
        return;
      }
    }
 catch (    Throwable e) {
      report(""String_Node_Str"");
      report(e);
      if (this.errState != null) {
        MP.printError(EC.TLC_INITIAL_STATE,new String[]{e.getMessage(),this.errState.toString()});
      }
 else {
        MP.printError(EC.GENERAL,e.getMessage());
      }
      this.tool.setCallStack();
      try {
        this.numOfGenStates=0;
        this.doInit(true);
      }
 catch (      Throwable e1) {
        MP.printError(EC.TLC_NESTED_EXPRESSION,this.tool.getCallStack().toString());
      }
      this.printSummary(false);
      this.cleanup(false);
      report(""String_Node_Str"");
      return;
    }
    if (this.numOfGenStates == this.theFPSet.size()) {
      String plural=(this.numOfGenStates == 1) ? ""String_Node_Str"" : ""String_Node_Str"";
      MP.printMessage(EC.TLC_INIT_GENERATED1,new String[]{String.valueOf(this.numOfGenStates),plural});
    }
 else {
      MP.printMessage(EC.TLC_INIT_GENERATED1,new String[]{String.valueOf(this.numOfGenStates),String.valueOf(this.theFPSet.size())});
    }
  }
  report(""String_Node_Str"");
  if (this.actions.length == 0) {
    this.reportSuccess();
    this.printSummary(true);
    this.cleanup(true);
    report(""String_Node_Str"");
    return;
  }
  boolean success=false;
  try {
    report(""String_Node_Str"");
    success=this.runTLC(Integer.MAX_VALUE);
    if (!success) {
      report(""String_Node_Str"");
      return;
    }
    if (this.errState == null) {
      if (this.checkLiveness) {
        MP.printMessage(EC.TLC_CHECKING_TEMPORAL_PROPS,""String_Node_Str"");
        report(""String_Node_Str"");
        success=LiveCheck.check();
        report(""String_Node_Str"");
        if (!success) {
          report(""String_Node_Str"");
          return;
        }
      }
      success=true;
      this.reportSuccess();
    }
 else     if (this.keepCallStack) {
      this.tool.setCallStack();
      try {
        this.doNext(this.predErrState,new ObjLongTable(10));
      }
 catch (      Throwable e) {
        MP.printError(EC.TLC_NESTED_EXPRESSION,this.tool.getCallStack().toString());
      }
    }
  }
 catch (  Exception e) {
    report(""String_Node_Str"");
    success=false;
    MP.printError(EC.GENERAL,e.getMessage());
  }
 finally {
    this.printSummary(success);
    this.cleanup(success);
  }
  report(""String_Node_Str"");
}","/** 
 * This method does model checking on a TLA+ spec. All the visited states are stored in the variable theFPSet. All the states whose next states have not been explored are stored in the variable theStateQueue.
 */
public void modelCheck() throws Exception {
  report(""String_Node_Str"");
  if (this.checkLiveness) {
    report(""String_Node_Str"");
    LiveCheck.init(this.tool,this.actions,this.metadir);
    report(""String_Node_Str"");
  }
  boolean recovered=this.recover();
  if (!recovered) {
    if (!this.checkAssumptions())     return;
    try {
      report(""String_Node_Str"");
      MP.printMessage(EC.TLC_COMPUTING_INIT);
      if (!this.doInit(false)) {
        report(""String_Node_Str"");
        return;
      }
    }
 catch (    Throwable e) {
      report(""String_Node_Str"");
      report(e);
      String msg=e.getMessage();
      if (e instanceof StackOverflowError) {
        msg=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      }
      if (msg == null) {
        msg=e.toString();
      }
      if (this.errState != null) {
        MP.printError(EC.TLC_INITIAL_STATE,new String[]{msg,this.errState.toString()});
      }
 else {
        MP.printError(EC.GENERAL,msg);
      }
      this.tool.setCallStack();
      try {
        this.numOfGenStates=0;
        this.doInit(true);
      }
 catch (      Throwable e1) {
        MP.printError(EC.TLC_NESTED_EXPRESSION,this.tool.getCallStack().toString());
      }
      this.printSummary(false);
      this.cleanup(false);
      report(""String_Node_Str"");
      return;
    }
    if (this.numOfGenStates == this.theFPSet.size()) {
      String plural=(this.numOfGenStates == 1) ? ""String_Node_Str"" : ""String_Node_Str"";
      MP.printMessage(EC.TLC_INIT_GENERATED1,new String[]{String.valueOf(this.numOfGenStates),plural});
    }
 else {
      MP.printMessage(EC.TLC_INIT_GENERATED1,new String[]{String.valueOf(this.numOfGenStates),String.valueOf(this.theFPSet.size())});
    }
  }
  report(""String_Node_Str"");
  if (this.actions.length == 0) {
    this.reportSuccess();
    this.printSummary(true);
    this.cleanup(true);
    report(""String_Node_Str"");
    return;
  }
  boolean success=false;
  try {
    report(""String_Node_Str"");
    success=this.runTLC(Integer.MAX_VALUE);
    if (!success) {
      report(""String_Node_Str"");
      return;
    }
    if (this.errState == null) {
      if (this.checkLiveness) {
        MP.printMessage(EC.TLC_CHECKING_TEMPORAL_PROPS,""String_Node_Str"");
        report(""String_Node_Str"");
        success=LiveCheck.check();
        report(""String_Node_Str"");
        if (!success) {
          report(""String_Node_Str"");
          return;
        }
      }
      success=true;
      this.reportSuccess();
    }
 else     if (this.keepCallStack) {
      this.tool.setCallStack();
      try {
        this.doNext(this.predErrState,new ObjLongTable(10));
      }
 catch (      Throwable e) {
        MP.printError(EC.TLC_NESTED_EXPRESSION,this.tool.getCallStack().toString());
      }
    }
  }
 catch (  Exception e) {
    report(""String_Node_Str"");
    success=false;
    MP.printError(EC.GENERAL,(e.getMessage() == null) ? e.toString() : e.getMessage());
  }
 finally {
    this.printSummary(success);
    this.cleanup(success);
  }
  report(""String_Node_Str"");
}",0.9509386338539202
136011,"/** 
 * Compute the set of the next states.  For each next state, check that it is a valid state, check that the invariants are satisfied, check that it satisfies the constraints, and enqueue it in the state queue. Return true if the model checking should stop. This method is called from the workers on every step
 */
public final boolean doNext(TLCState curState,ObjLongTable counts) throws Throwable {
  if (this.cancellationFlag) {
    return false;
  }
  boolean deadLocked=true;
  TLCState succState=null;
  StateVec liveNextStates=null;
  LongVec liveNextFPs=null;
  if (this.checkLiveness) {
    liveNextStates=new StateVec(2);
    liveNextFPs=new LongVec(2);
  }
  try {
    int k=0;
    for (int i=0; i < this.actions.length; i++) {
      if (this.cancellationFlag) {
        return false;
      }
      StateVec nextStates=this.tool.getNextStates(this.actions[i],curState);
      int sz=nextStates.size();
      this.incNumOfGenStates(sz);
      deadLocked=deadLocked && (sz == 0);
      for (int j=0; j < sz; j++) {
        succState=nextStates.elementAt(j);
        if (!this.tool.isGoodState(succState)) {
          if (this.setErrState(curState,succState,false)) {
            MP.printError(EC.TLC_STATE_NOT_COMPLETELY_SPECIFIED_NEXT);
            this.trace.printTrace(curState.uid,curState,succState);
            this.theStateQueue.finishAll();
synchronized (this) {
              this.notify();
            }
          }
          return true;
        }
        if (TLCGlobals.coverageInterval >= 0) {
          ((TLCStateMutSource)succState).addCounts(counts);
        }
        boolean inModel=(this.tool.isInModel(succState) && this.tool.isInActions(curState,succState));
        boolean seen=false;
        if (inModel) {
          long fp=succState.fingerPrint();
          seen=this.theFPSet.put(fp);
          if (!seen) {
            if (this.allStateWriter != null) {
              this.allStateWriter.writeState(succState);
            }
            long loc=this.trace.writeState(curState.uid,fp);
            succState.uid=loc;
            this.theStateQueue.sEnqueue(succState);
          }
          if (this.checkLiveness) {
            liveNextStates.addElement(succState);
            liveNextFPs.addElement(fp);
          }
        }
        if (!seen) {
          try {
            int len=this.invariants.length;
            for (k=0; k < len; k++) {
              if (this.cancellationFlag) {
                return false;
              }
              if (!tool.isValid(this.invariants[k],succState)) {
synchronized (this) {
                  if (TLCGlobals.continuation) {
                    MP.printError(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,this.tool.getInvNames()[k]);
                    this.trace.printTrace(curState.uid,curState,succState);
                    break;
                  }
 else {
                    if (this.setErrState(curState,succState,false)) {
                      MP.printError(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,this.tool.getInvNames()[k]);
                      this.trace.printTrace(curState.uid,curState,succState);
                      this.theStateQueue.finishAll();
                      this.notify();
                    }
                    return true;
                  }
                }
              }
            }
            if (k < len)             continue;
          }
 catch (          Exception e) {
            if (this.setErrState(curState,succState,true)) {
              MP.printError(EC.TLC_INVARIANT_EVALUATION_FAILED,new String[]{this.tool.getInvNames()[k],e.getMessage()});
              this.trace.printTrace(curState.uid,curState,succState);
              this.theStateQueue.finishAll();
              this.notify();
            }
            throw e;
          }
        }
        try {
          int len=this.impliedActions.length;
          for (k=0; k < len; k++) {
            if (this.cancellationFlag) {
              return false;
            }
            if (!tool.isValid(this.impliedActions[k],curState,succState)) {
synchronized (this) {
                if (TLCGlobals.continuation) {
                  MP.printError(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,this.tool.getImpliedActNames()[k]);
                  this.trace.printTrace(curState.uid,curState,succState);
                  break;
                }
 else {
                  if (this.setErrState(curState,succState,false)) {
                    MP.printError(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,this.tool.getImpliedActNames()[k]);
                    this.trace.printTrace(curState.uid,curState,succState);
                    this.theStateQueue.finishAll();
                    this.notify();
                  }
                  return true;
                }
              }
            }
          }
          if (k < len)           continue;
        }
 catch (        Exception e) {
          if (this.setErrState(curState,succState,true)) {
            MP.printError(EC.TLC_ACTION_PROPERTY_EVALUATION_FAILED,new String[]{this.tool.getImpliedActNames()[k],e.getMessage()});
            this.trace.printTrace(curState.uid,curState,succState);
            this.theStateQueue.finishAll();
            this.notify();
          }
          throw e;
        }
      }
      succState=null;
    }
    if (deadLocked && this.checkDeadlock) {
synchronized (this) {
        if (this.setErrState(curState,null,false)) {
          MP.printError(EC.TLC_DEADLOCK_REACHED);
          this.trace.printTrace(curState.uid,curState,null);
          this.theStateQueue.finishAll();
          this.notify();
        }
      }
      return true;
    }
    if (this.checkLiveness) {
      long curStateFP=curState.fingerPrint();
      liveNextStates.addElement(curState);
      liveNextFPs.addElement(curStateFP);
      LiveCheck.addNextState(curState,curStateFP,liveNextStates,liveNextFPs);
    }
    return false;
  }
 catch (  Throwable e) {
    boolean keep=((e instanceof StackOverflowError) || (e instanceof OutOfMemoryError));
synchronized (this) {
      if (this.setErrState(curState,succState,!keep)) {
        if (e instanceof StackOverflowError) {
          MP.printError(EC.SYSTEM_STACK_OVERFLOW);
        }
 else         if (e instanceof OutOfMemoryError) {
          MP.printError(EC.SYSTEM_OUT_OF_MEMORY);
        }
 else {
          MP.printError(EC.GENERAL,e.getMessage());
        }
        this.trace.printTrace(curState.uid,curState,succState);
        this.theStateQueue.finishAll();
        this.notify();
      }
    }
    throw e;
  }
}","/** 
 * Compute the set of the next states.  For each next state, check that it is a valid state, check that the invariants are satisfied, check that it satisfies the constraints, and enqueue it in the state queue. Return true if the model checking should stop. This method is called from the workers on every step
 */
public final boolean doNext(TLCState curState,ObjLongTable counts) throws Throwable {
  if (this.cancellationFlag) {
    return false;
  }
  boolean deadLocked=true;
  TLCState succState=null;
  StateVec liveNextStates=null;
  LongVec liveNextFPs=null;
  if (this.checkLiveness) {
    liveNextStates=new StateVec(2);
    liveNextFPs=new LongVec(2);
  }
  try {
    int k=0;
    for (int i=0; i < this.actions.length; i++) {
      if (this.cancellationFlag) {
        return false;
      }
      StateVec nextStates=this.tool.getNextStates(this.actions[i],curState);
      int sz=nextStates.size();
      this.incNumOfGenStates(sz);
      deadLocked=deadLocked && (sz == 0);
      for (int j=0; j < sz; j++) {
        succState=nextStates.elementAt(j);
        if (!this.tool.isGoodState(succState)) {
          if (this.setErrState(curState,succState,false)) {
            MP.printError(EC.TLC_STATE_NOT_COMPLETELY_SPECIFIED_NEXT);
            this.trace.printTrace(curState.uid,curState,succState);
            this.theStateQueue.finishAll();
synchronized (this) {
              this.notify();
            }
          }
          return true;
        }
        if (TLCGlobals.coverageInterval >= 0) {
          ((TLCStateMutSource)succState).addCounts(counts);
        }
        boolean inModel=(this.tool.isInModel(succState) && this.tool.isInActions(curState,succState));
        boolean seen=false;
        if (inModel) {
          long fp=succState.fingerPrint();
          seen=this.theFPSet.put(fp);
          if (!seen) {
            if (this.allStateWriter != null) {
              this.allStateWriter.writeState(succState);
            }
            long loc=this.trace.writeState(curState.uid,fp);
            succState.uid=loc;
            this.theStateQueue.sEnqueue(succState);
          }
          if (this.checkLiveness) {
            liveNextStates.addElement(succState);
            liveNextFPs.addElement(fp);
          }
        }
        if (!seen) {
          try {
            int len=this.invariants.length;
            for (k=0; k < len; k++) {
              if (this.cancellationFlag) {
                return false;
              }
              if (!tool.isValid(this.invariants[k],succState)) {
synchronized (this) {
                  if (TLCGlobals.continuation) {
                    MP.printError(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,this.tool.getInvNames()[k]);
                    this.trace.printTrace(curState.uid,curState,succState);
                    break;
                  }
 else {
                    if (this.setErrState(curState,succState,false)) {
                      MP.printError(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,this.tool.getInvNames()[k]);
                      this.trace.printTrace(curState.uid,curState,succState);
                      this.theStateQueue.finishAll();
                      this.notify();
                    }
                    return true;
                  }
                }
              }
            }
            if (k < len)             continue;
          }
 catch (          Exception e) {
            if (this.setErrState(curState,succState,true)) {
              MP.printError(EC.TLC_INVARIANT_EVALUATION_FAILED,new String[]{this.tool.getInvNames()[k],(e.getMessage() == null) ? e.toString() : e.getMessage()});
              this.trace.printTrace(curState.uid,curState,succState);
              this.theStateQueue.finishAll();
              this.notify();
            }
            throw e;
          }
        }
        try {
          int len=this.impliedActions.length;
          for (k=0; k < len; k++) {
            if (this.cancellationFlag) {
              return false;
            }
            if (!tool.isValid(this.impliedActions[k],curState,succState)) {
synchronized (this) {
                if (TLCGlobals.continuation) {
                  MP.printError(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,this.tool.getImpliedActNames()[k]);
                  this.trace.printTrace(curState.uid,curState,succState);
                  break;
                }
 else {
                  if (this.setErrState(curState,succState,false)) {
                    MP.printError(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,this.tool.getImpliedActNames()[k]);
                    this.trace.printTrace(curState.uid,curState,succState);
                    this.theStateQueue.finishAll();
                    this.notify();
                  }
                  return true;
                }
              }
            }
          }
          if (k < len)           continue;
        }
 catch (        Exception e) {
          if (this.setErrState(curState,succState,true)) {
            MP.printError(EC.TLC_ACTION_PROPERTY_EVALUATION_FAILED,new String[]{this.tool.getImpliedActNames()[k],(e.getMessage() == null) ? e.toString() : e.getMessage()});
            this.trace.printTrace(curState.uid,curState,succState);
            this.theStateQueue.finishAll();
            this.notify();
          }
          throw e;
        }
      }
      succState=null;
    }
    if (deadLocked && this.checkDeadlock) {
synchronized (this) {
        if (this.setErrState(curState,null,false)) {
          MP.printError(EC.TLC_DEADLOCK_REACHED);
          this.trace.printTrace(curState.uid,curState,null);
          this.theStateQueue.finishAll();
          this.notify();
        }
      }
      return true;
    }
    if (this.checkLiveness) {
      long curStateFP=curState.fingerPrint();
      liveNextStates.addElement(curState);
      liveNextFPs.addElement(curStateFP);
      LiveCheck.addNextState(curState,curStateFP,liveNextStates,liveNextFPs);
    }
    return false;
  }
 catch (  Throwable e) {
    boolean keep=((e instanceof StackOverflowError) || (e instanceof OutOfMemoryError));
synchronized (this) {
      if (this.setErrState(curState,succState,!keep)) {
        if (e instanceof StackOverflowError) {
          MP.printError(EC.SYSTEM_STACK_OVERFLOW);
        }
 else         if (e instanceof OutOfMemoryError) {
          MP.printError(EC.SYSTEM_OUT_OF_MEMORY);
        }
 else         if (e.getMessage() != null) {
          MP.printError(EC.GENERAL,e.getMessage());
        }
 else {
          MP.printError(EC.GENERAL,e.toString());
        }
        this.trace.printTrace(curState.uid,curState,succState);
        this.theStateQueue.finishAll();
        this.notify();
      }
    }
    throw e;
  }
}",0.985811320754717
136012,"public void simulate() throws Exception {
  StateVec theInitStates=null;
  TLCState curState=null;
  if (isCancelled) {
    return;
  }
  try {
    theInitStates=this.tool.getInitStates();
    this.numOfGenStates=theInitStates.size();
    for (int i=0; i < theInitStates.size(); i++) {
      curState=theInitStates.elementAt(i);
      if (this.tool.isGoodState(curState)) {
        for (int j=0; j < this.invariants.length; j++) {
          if (!this.tool.isValid(this.invariants[j],curState)) {
            MP.printError(EC.TLC_INVARIANT_VIOLATED_INITIAL,new String[]{this.tool.getInvNames()[j],curState.toString()});
            return;
          }
        }
      }
 else {
        MP.printError(EC.TLC_STATE_NOT_COMPLETELY_SPECIFIED_INITIAL,curState.toString());
        return;
      }
    }
  }
 catch (  Exception e) {
    if (curState != null) {
      MP.printError(EC.TLC_INITIAL_STATE,new String[]{e.getMessage(),curState.toString()});
    }
 else {
      MP.printError(EC.GENERAL,e.getMessage());
    }
    this.printSummary();
    return;
  }
  if (this.numOfGenStates == 0) {
    MP.printError(EC.TLC_NO_STATES_SATISFYING_INIT);
    return;
  }
  theInitStates.deepNormalize();
  ProgressReport report=new ProgressReport();
  report.start();
  int traceIdx=0;
  int idx=0;
  try {
    for (int traceCnt=1; traceCnt <= this.traceNum; traceCnt++) {
      traceIdx=0;
      this.aril=rng.getAril();
      curState=this.randomState(theInitStates);
      boolean inConstraints=this.tool.isInModel(curState);
      while (traceIdx < this.traceDepth) {
        if (traceIdx < this.stateTrace.length) {
          this.stateTrace[traceIdx]=curState;
          traceIdx++;
        }
        if (!inConstraints)         break;
        StateVec nextStates=this.randomNextStates(curState);
        if (nextStates == null) {
          if (this.checkDeadlock) {
            this.printBehavior(EC.TLC_DEADLOCK_REACHED,null,curState,traceIdx);
            if (!TLCGlobals.continuation) {
              return;
            }
          }
          break;
        }
        for (int i=0; i < nextStates.size(); i++) {
          this.numOfGenStates++;
          TLCState state=nextStates.elementAt(i);
          if (TLCGlobals.coverageInterval >= 0) {
            ((TLCStateMutSource)state).addCounts(this.astCounts);
          }
          if (!this.tool.isGoodState(state)) {
            this.printBehavior(EC.TLC_STATE_NOT_COMPLETELY_SPECIFIED_NEXT,null,state,traceIdx);
            return;
          }
 else {
            try {
              for (idx=0; idx < this.invariants.length; idx++) {
                if (!this.tool.isValid(this.invariants[idx],state)) {
                  this.printBehavior(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,new String[]{this.tool.getInvNames()[idx]},state,traceIdx);
                  if (!TLCGlobals.continuation) {
                    return;
                  }
                }
              }
            }
 catch (            Exception e) {
              this.printBehavior(EC.TLC_INVARIANT_EVALUATION_FAILED,new String[]{this.tool.getInvNames()[idx],e.getMessage()},state,traceIdx);
              return;
            }
            try {
              for (idx=0; idx < this.impliedActions.length; idx++) {
                if (!this.tool.isValid(this.impliedActions[idx],curState,state)) {
                  this.printBehavior(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,new String[]{this.tool.getImpliedActNames()[idx]},state,traceIdx);
                  if (!TLCGlobals.continuation) {
                    return;
                  }
                }
              }
            }
 catch (            Exception e) {
              this.printBehavior(EC.TLC_ACTION_PROPERTY_EVALUATION_FAILED,new String[]{this.tool.getImpliedActNames()[idx],e.getMessage()},state,traceIdx);
              return;
            }
          }
        }
        TLCState s1=this.randomState(nextStates);
        inConstraints=(this.tool.isInModel(s1) && this.tool.isInActions(curState,s1));
        curState=s1;
      }
      if (this.checkLiveness) {
        LiveCheck1.checkTrace(stateTrace,traceIdx);
      }
      if (this.traceFile != null) {
        String fileName=this.traceFile + traceCnt;
        PrintWriter pw=new PrintWriter(FileUtil.newBFOS(fileName));
        pw.println(""String_Node_Str"" + fileName + ""String_Node_Str"");
        for (idx=0; idx < traceIdx; idx++) {
          pw.println(""String_Node_Str"" + (idx + 1) + ""String_Node_Str"");
          pw.println(this.stateTrace[idx] + ""String_Node_Str"");
        }
        pw.println(""String_Node_Str"");
        pw.close();
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof LiveException) {
      this.printSummary();
    }
 else {
      this.printBehavior(EC.GENERAL,new String[]{e.getMessage()},curState,traceIdx);
    }
  }
}","public void simulate() throws Exception {
  StateVec theInitStates=null;
  TLCState curState=null;
  if (isCancelled) {
    return;
  }
  try {
    theInitStates=this.tool.getInitStates();
    this.numOfGenStates=theInitStates.size();
    for (int i=0; i < theInitStates.size(); i++) {
      curState=theInitStates.elementAt(i);
      if (this.tool.isGoodState(curState)) {
        for (int j=0; j < this.invariants.length; j++) {
          if (!this.tool.isValid(this.invariants[j],curState)) {
            MP.printError(EC.TLC_INVARIANT_VIOLATED_INITIAL,new String[]{this.tool.getInvNames()[j],curState.toString()});
            return;
          }
        }
      }
 else {
        MP.printError(EC.TLC_STATE_NOT_COMPLETELY_SPECIFIED_INITIAL,curState.toString());
        return;
      }
    }
  }
 catch (  Exception e) {
    if (curState != null) {
      MP.printError(EC.TLC_INITIAL_STATE,new String[]{(e.getMessage() == null) ? e.toString() : e.getMessage(),curState.toString()});
    }
 else {
      MP.printError(EC.GENERAL,(e.getMessage() == null) ? e.toString() : e.getMessage());
    }
    this.printSummary();
    return;
  }
  if (this.numOfGenStates == 0) {
    MP.printError(EC.TLC_NO_STATES_SATISFYING_INIT);
    return;
  }
  theInitStates.deepNormalize();
  ProgressReport report=new ProgressReport();
  report.start();
  int traceIdx=0;
  int idx=0;
  try {
    for (int traceCnt=1; traceCnt <= this.traceNum; traceCnt++) {
      traceIdx=0;
      this.aril=rng.getAril();
      curState=this.randomState(theInitStates);
      boolean inConstraints=this.tool.isInModel(curState);
      while (traceIdx < this.traceDepth) {
        if (traceIdx < this.stateTrace.length) {
          this.stateTrace[traceIdx]=curState;
          traceIdx++;
        }
        if (!inConstraints)         break;
        StateVec nextStates=this.randomNextStates(curState);
        if (nextStates == null) {
          if (this.checkDeadlock) {
            this.printBehavior(EC.TLC_DEADLOCK_REACHED,null,curState,traceIdx);
            if (!TLCGlobals.continuation) {
              return;
            }
          }
          break;
        }
        for (int i=0; i < nextStates.size(); i++) {
          this.numOfGenStates++;
          TLCState state=nextStates.elementAt(i);
          if (TLCGlobals.coverageInterval >= 0) {
            ((TLCStateMutSource)state).addCounts(this.astCounts);
          }
          if (!this.tool.isGoodState(state)) {
            this.printBehavior(EC.TLC_STATE_NOT_COMPLETELY_SPECIFIED_NEXT,null,state,traceIdx);
            return;
          }
 else {
            try {
              for (idx=0; idx < this.invariants.length; idx++) {
                if (!this.tool.isValid(this.invariants[idx],state)) {
                  this.printBehavior(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,new String[]{this.tool.getInvNames()[idx]},state,traceIdx);
                  if (!TLCGlobals.continuation) {
                    return;
                  }
                }
              }
            }
 catch (            Exception e) {
              this.printBehavior(EC.TLC_INVARIANT_EVALUATION_FAILED,new String[]{this.tool.getInvNames()[idx],e.getMessage()},state,traceIdx);
              return;
            }
            try {
              for (idx=0; idx < this.impliedActions.length; idx++) {
                if (!this.tool.isValid(this.impliedActions[idx],curState,state)) {
                  this.printBehavior(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,new String[]{this.tool.getImpliedActNames()[idx]},state,traceIdx);
                  if (!TLCGlobals.continuation) {
                    return;
                  }
                }
              }
            }
 catch (            Exception e) {
              this.printBehavior(EC.TLC_ACTION_PROPERTY_EVALUATION_FAILED,new String[]{this.tool.getImpliedActNames()[idx],e.getMessage()},state,traceIdx);
              return;
            }
          }
        }
        TLCState s1=this.randomState(nextStates);
        inConstraints=(this.tool.isInModel(s1) && this.tool.isInActions(curState,s1));
        curState=s1;
      }
      if (this.checkLiveness) {
        LiveCheck1.checkTrace(stateTrace,traceIdx);
      }
      if (this.traceFile != null) {
        String fileName=this.traceFile + traceCnt;
        PrintWriter pw=new PrintWriter(FileUtil.newBFOS(fileName));
        pw.println(""String_Node_Str"" + fileName + ""String_Node_Str"");
        for (idx=0; idx < traceIdx; idx++) {
          pw.println(""String_Node_Str"" + (idx + 1) + ""String_Node_Str"");
          pw.println(this.stateTrace[idx] + ""String_Node_Str"");
        }
        pw.println(""String_Node_Str"");
        pw.close();
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof LiveException) {
      this.printSummary();
    }
 else {
      this.printBehavior(EC.GENERAL,new String[]{(e.getMessage() == null) ? e.toString() : e.getMessage()},curState,traceIdx);
    }
  }
}",0.9870769230769232
136013,"/** 
 * This method attempts to load the java class with the given name.
 */
public synchronized Class loadClass(String name){
  Class cl=null;
  try {
    try {
      cl=Class.forName(name);
    }
 catch (    Exception e) {
    }
    if (cl == null) {
      try {
        cl=Class.forName(this.pkg + name);
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  Throwable e) {
    Assert.fail(EC.TLC_ERROR_REPLACING_MODULES,new String[]{name,e.getMessage()});
  }
  return cl;
}","/** 
 * This method attempts to load the java class with the given name.
 */
public synchronized Class loadClass(String name){
  Class cl=null;
  try {
    try {
      cl=Class.forName(name);
    }
 catch (    Exception e) {
    }
    if (cl == null) {
      try {
        cl=Class.forName(this.pkg + name);
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  Throwable e) {
    Assert.fail(EC.TLC_ERROR_REPLACING_MODULES,new String[]{name,(e.getMessage() == null) ? e.toString() : e.getMessage()});
  }
  return cl;
}",0.9588235294117649
136014,"/** 
 * This method gets a state from the queue, generates all the possible next states of the state, checks the invariants, and updates the state set and state queue.
 */
public final void run(){
  TLCState curState=null;
  try {
    while (true) {
      curState=(TLCState)this.squeue.sDequeue();
      if (curState == null) {
synchronized (this.tlc) {
          this.tlc.setDone();
          this.tlc.notify();
        }
        this.squeue.finishAll();
        return;
      }
      if (this.tlc.doNext(curState,this.astCounts))       return;
    }
  }
 catch (  Throwable e) {
synchronized (this.tlc) {
      if (this.tlc.setErrState(curState,null,true)) {
        MP.printError(EC.GENERAL,e.getMessage());
      }
      this.squeue.finishAll();
      this.tlc.notify();
    }
    return;
  }
}","/** 
 * This method gets a state from the queue, generates all the possible next states of the state, checks the invariants, and updates the state set and state queue.
 */
public final void run(){
  TLCState curState=null;
  try {
    while (true) {
      curState=(TLCState)this.squeue.sDequeue();
      if (curState == null) {
synchronized (this.tlc) {
          this.tlc.setDone();
          this.tlc.notify();
        }
        this.squeue.finishAll();
        return;
      }
      if (this.tlc.doNext(curState,this.astCounts))       return;
    }
  }
 catch (  Throwable e) {
synchronized (this.tlc) {
      if (this.tlc.setErrState(curState,null,true)) {
        MP.printError(EC.GENERAL,(e.getMessage() == null) ? e.toString() : e.getMessage());
      }
      this.squeue.finishAll();
      this.tlc.notify();
    }
    return;
  }
}",0.974390243902439
136015,"public final void run(){
  try {
    while (true) {
      int idx=getNextOOS();
      if (idx == -1 || hasErrFound())       break;
      this.oos=LiveCheck.solutions[idx];
      this.dg=LiveCheck.dgraphs[idx];
      this.dg.createCache();
      PossibleErrorModel[] pems=this.oos.pems;
      for (int i=0; i < pems.length; i++) {
        if (!hasErrFound()) {
          this.pem=pems[i];
          this.checkSccs();
        }
      }
      this.dg.destroyCache();
    }
  }
 catch (  Exception e) {
    MP.printError(EC.GENERAL,e.getMessage());
    return;
  }
}","public final void run(){
  try {
    while (true) {
      int idx=getNextOOS();
      if (idx == -1 || hasErrFound())       break;
      this.oos=LiveCheck.solutions[idx];
      this.dg=LiveCheck.dgraphs[idx];
      this.dg.createCache();
      PossibleErrorModel[] pems=this.oos.pems;
      for (int i=0; i < pems.length; i++) {
        if (!hasErrFound()) {
          this.pem=pems[i];
          this.checkSccs();
        }
      }
      this.dg.destroyCache();
    }
  }
 catch (  Exception e) {
    MP.printError(EC.GENERAL,(e.getMessage() == null) ? e.toString() : e.getMessage());
    return;
  }
}",0.9639794168096056
136016,"final void enqueueInner(TLCState state){
  if (this.enqIndex == this.enqBuf.length) {
    try {
      String pstr=Integer.toString(this.hiPool);
      File file=new File(this.filePrefix + pstr);
      this.enqBuf=this.writer.doWork(this.enqBuf,file);
      this.hiPool++;
      this.enqIndex=0;
    }
 catch (    Exception e) {
      Assert.fail(EC.SYSTEM_ERROR_WRITING_STATES,new String[]{""String_Node_Str"",e.getMessage()});
    }
  }
  this.enqBuf[this.enqIndex++]=state;
}","final void enqueueInner(TLCState state){
  if (this.enqIndex == this.enqBuf.length) {
    try {
      String pstr=Integer.toString(this.hiPool);
      File file=new File(this.filePrefix + pstr);
      this.enqBuf=this.writer.doWork(this.enqBuf,file);
      this.hiPool++;
      this.enqIndex=0;
    }
 catch (    Exception e) {
      Assert.fail(EC.SYSTEM_ERROR_WRITING_STATES,new String[]{""String_Node_Str"",(e.getMessage() == null) ? e.toString() : e.getMessage()});
    }
  }
  this.enqBuf[this.enqIndex++]=state;
}",0.9576612903225806
136017,"private final void fillDeqBuffer(){
  try {
    if (this.loPool + 1 <= this.hiPool) {
      if (this.loPool + 1 >= this.hiPool) {
        this.writer.ensureWritten();
      }
      this.deqBuf=this.reader.doWork(this.deqBuf,this.loFile);
      this.deqIndex=0;
      this.loPool++;
      String pstr=Integer.toString(this.loPool);
      this.loFile=new File(this.filePrefix + pstr);
    }
 else {
      this.writer.ensureWritten();
      TLCState[] buf=this.reader.getCache(this.deqBuf,this.loFile);
      if (buf != null) {
        this.deqBuf=buf;
        this.deqIndex=0;
        this.loPool++;
        String pstr=Integer.toString(this.loPool);
        this.loFile=new File(this.filePrefix + pstr);
      }
 else {
        this.deqIndex=this.deqBuf.length - this.enqIndex;
        System.arraycopy(this.enqBuf,0,this.deqBuf,this.deqIndex,this.enqIndex);
        this.enqIndex=0;
      }
    }
  }
 catch (  Exception e) {
    Assert.fail(EC.SYSTEM_ERROR_READING_STATES,new String[]{""String_Node_Str"",e.getMessage()});
  }
}","private final void fillDeqBuffer(){
  try {
    if (this.loPool + 1 <= this.hiPool) {
      if (this.loPool + 1 >= this.hiPool) {
        this.writer.ensureWritten();
      }
      this.deqBuf=this.reader.doWork(this.deqBuf,this.loFile);
      this.deqIndex=0;
      this.loPool++;
      String pstr=Integer.toString(this.loPool);
      this.loFile=new File(this.filePrefix + pstr);
    }
 else {
      this.writer.ensureWritten();
      TLCState[] buf=this.reader.getCache(this.deqBuf,this.loFile);
      if (buf != null) {
        this.deqBuf=buf;
        this.deqIndex=0;
        this.loPool++;
        String pstr=Integer.toString(this.loPool);
        this.loFile=new File(this.filePrefix + pstr);
      }
 else {
        this.deqIndex=this.deqBuf.length - this.enqIndex;
        System.arraycopy(this.enqBuf,0,this.deqBuf,this.deqIndex,this.enqIndex);
        this.enqIndex=0;
      }
    }
  }
 catch (  Exception e) {
    Assert.fail(EC.SYSTEM_ERROR_READING_STATES,new String[]{""String_Node_Str"",(e.getMessage() == null) ? e.toString() : e.getMessage()});
  }
}",0.9799618320610688
136018,"private final boolean isAvail(){
  if (this.finish)   return false;
  while (this.len < 1 || this.stop) {
    this.numWaiting++;
    if (this.numWaiting >= TLCGlobals.getNumWorkers()) {
      if (this.len < 1) {
        this.numWaiting--;
        return false;
      }
synchronized (this.mu) {
        this.mu.notify();
      }
    }
    try {
      this.wait();
    }
 catch (    Exception e) {
      MP.printError(EC.GENERAL,e.getMessage());
      System.exit(1);
    }
    this.numWaiting--;
    if (this.finish)     return false;
  }
  return true;
}","private final boolean isAvail(){
  if (this.finish)   return false;
  while (this.len < 1 || this.stop) {
    this.numWaiting++;
    if (this.numWaiting >= TLCGlobals.getNumWorkers()) {
      if (this.len < 1) {
        this.numWaiting--;
        return false;
      }
synchronized (this.mu) {
        this.mu.notify();
      }
    }
    try {
      this.wait();
    }
 catch (    Exception e) {
      MP.printError(EC.GENERAL,(e.getMessage() == null) ? e.toString() : e.getMessage());
      System.exit(1);
    }
    this.numWaiting--;
    if (this.finish)     return false;
  }
  return true;
}",0.9634782608695652
136019,"public final boolean suspendAll(){
  boolean needWait=false;
synchronized (this) {
    if (this.finish)     return false;
    this.stop=true;
    needWait=this.numWaiting < TLCGlobals.getNumWorkers();
  }
  while (needWait) {
synchronized (this.mu) {
      try {
        this.mu.wait();
      }
 catch (      Exception e) {
        MP.printError(EC.GENERAL,e.getMessage());
        System.exit(1);
      }
    }
synchronized (this) {
      if (this.finish)       return false;
      needWait=this.numWaiting < TLCGlobals.getNumWorkers();
    }
  }
  return true;
}","public final boolean suspendAll(){
  boolean needWait=false;
synchronized (this) {
    if (this.finish)     return false;
    this.stop=true;
    needWait=this.numWaiting < TLCGlobals.getNumWorkers();
  }
  while (needWait) {
synchronized (this.mu) {
      try {
        this.mu.wait();
      }
 catch (      Exception e) {
        MP.printError(EC.GENERAL,(e.getMessage() == null) ? e.toString() : e.getMessage());
        System.exit(1);
      }
    }
synchronized (this) {
      if (this.finish)       return false;
      needWait=this.numWaiting < TLCGlobals.getNumWorkers();
    }
  }
  return true;
}",0.964102564102564
136020,"public SetPredValue(Object vars,Value inVal,SemanticNode pred,Tool tool,Context con,TLCState s0,TLCState s1,int control){
  this.vars=vars;
  this.inVal=inVal;
  this.pred=pred;
  this.tool=tool;
  this.con=con;
  this.state=s0;
  this.pstate=s1;
  this.control=control;
}","public SetPredValue(Object vars,Value inVal,SemanticNode pred,Tool tool,Context con,TLCState s0,TLCState s1,int control){
  this.vars=vars;
  this.inVal=inVal;
  this.pred=pred;
  this.tool=tool;
  this.con=con;
  this.state=s0.copy();
  if (s1 != null) {
    this.pstate=s1.copy();
  }
 else {
    this.pstate=null;
  }
  this.control=control;
}",0.7443365695792881
136021,"/** 
 * This method schedules a long running job that runs tla2tex on the file to translate and loads it in the browser that is part of the second tab of the tlaEditorAndPDFViewer. It is done as a long running job so that the UI thread is not locked while tla2tex runs. This handles any unrecoverable error in tla2tex translation and presents it to the user as an error message. If the user has the pdf file in the .toolbox directory open in another program, then the toolbox will show a warning stating that the new pdf file could not be created. It will display the old, unmodified pdf file to the user.
 * @param tlaEditorAndPDFViewer
 * @param fileToTranslate
 */
private void runPDFJob(final TLAEditorAndPDFViewer tlaEditorAndPDFViewer,final IResource fileToTranslate){
  Job tla2TexJob=new Job(""String_Node_Str""){
    protected IStatus run(    final IProgressMonitor monitor){
      try {
        Vector tla2texArgs=new Vector();
        IPreferenceStore preferenceStore=TLA2TeXActivator.getDefault().getPreferenceStore();
        if (preferenceStore.getBoolean(ITLA2TeXPreferenceConstants.SHADE_COMMENTS)) {
          tla2texArgs.add(""String_Node_Str"");
        }
        if (preferenceStore.getBoolean(ITLA2TeXPreferenceConstants.NUMBER_LINES)) {
          tla2texArgs.add(""String_Node_Str"");
        }
        tla2texArgs.add(""String_Node_Str"");
        String latexCommand=preferenceStore.getString(ITLA2TeXPreferenceConstants.LATEX_COMMAND);
        tla2texArgs.add(latexCommand);
        tla2texArgs.add(""String_Node_Str"");
        tla2texArgs.add(Double.toString(preferenceStore.getDouble(ITLA2TeXPreferenceConstants.GRAY_LEVEL)));
        tla2texArgs.add(""String_Node_Str"");
        tla2texArgs.add(TLA2TeX_Output_Extension);
        tla2texArgs.add(""String_Node_Str"");
        tla2texArgs.add(fileToTranslate.getProject().getLocation().toOSString());
        tla2texArgs.add(fileToTranslate.getLocation().toOSString());
        final long translationStartTime=System.currentTimeMillis();
        monitor.beginTask(""String_Node_Str"",2);
        monitor.subTask(""String_Node_Str"");
        TLA.runTranslation((String[])tla2texArgs.toArray(new String[tla2texArgs.size()]));
        monitor.worked(1);
        final String outputFileName=fileToTranslate.getProject().getLocation().toOSString() + File.separator + ResourceHelper.getModuleName(fileToTranslate)+ ""String_Node_Str""+ TLA2TeX_Output_Extension;
        final File outputFile=new File(outputFileName);
        if (outputFile.exists()) {
          UIHelper.runUISync(new Runnable(){
            public void run(){
              monitor.subTask(""String_Node_Str"");
              tlaEditorAndPDFViewer.setActivePage(TLAEditorAndPDFViewer.PDFPage_ID);
              tlaEditorAndPDFViewer.getPDFViewingPage().getBrowser().setUrl(outputFileName);
              monitor.worked(1);
              if (outputFile.lastModified() < translationStartTime) {
                MessageDialog.openWarning(UIHelper.getShellProvider().getShell(),""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + outputFileName + ""String_Node_Str"");
              }
            }
          }
);
        }
 else {
          UIHelper.runUISync(new Runnable(){
            public void run(){
              MessageDialog.openError(UIHelper.getShellProvider().getShell(),""String_Node_Str"",""String_Node_Str"");
            }
          }
);
        }
      }
 catch (      final TLA2TexException e) {
        Activator.logError(""String_Node_Str"" + e.getMessage(),e);
        UIHelper.runUISync(new Runnable(){
          public void run(){
            MessageDialog.openError(UIHelper.getShellProvider().getShell(),""String_Node_Str"",e.getMessage());
          }
        }
);
      }
 finally {
      }
      return Status.OK_STATUS;
    }
  }
;
  tla2TexJob.setUser(true);
  tla2TexJob.setPriority(Job.LONG);
  tla2TexJob.schedule();
}","/** 
 * This method schedules a long running job that runs tla2tex on the file to translate and loads it in the browser that is part of the second tab of the tlaEditorAndPDFViewer. It is done as a long running job so that the UI thread is not locked while tla2tex runs. This handles any unrecoverable error in tla2tex translation and presents it to the user as an error message. If the user has the pdf file in the .toolbox directory open in another program, then the toolbox will show a warning stating that the new pdf file could not be created. It will display the old, unmodified pdf file to the user.
 * @param tlaEditorAndPDFViewer
 * @param fileToTranslate
 */
private void runPDFJob(final TLAEditorAndPDFViewer tlaEditorAndPDFViewer,final IResource fileToTranslate){
  Job tla2TexJob=new Job(""String_Node_Str""){
    protected IStatus run(    final IProgressMonitor monitor){
      try {
        Vector tla2texArgs=new Vector();
        IPreferenceStore preferenceStore=TLA2TeXActivator.getDefault().getPreferenceStore();
        if (preferenceStore.getBoolean(ITLA2TeXPreferenceConstants.SHADE_COMMENTS)) {
          tla2texArgs.add(""String_Node_Str"");
          tla2texArgs.add(""String_Node_Str"");
        }
        if (preferenceStore.getBoolean(ITLA2TeXPreferenceConstants.NUMBER_LINES)) {
          tla2texArgs.add(""String_Node_Str"");
        }
        tla2texArgs.add(""String_Node_Str"");
        String latexCommand=preferenceStore.getString(ITLA2TeXPreferenceConstants.LATEX_COMMAND);
        tla2texArgs.add(latexCommand);
        tla2texArgs.add(""String_Node_Str"");
        tla2texArgs.add(Double.toString(preferenceStore.getDouble(ITLA2TeXPreferenceConstants.GRAY_LEVEL)));
        tla2texArgs.add(""String_Node_Str"");
        tla2texArgs.add(TLA2TeX_Output_Extension);
        tla2texArgs.add(""String_Node_Str"");
        tla2texArgs.add(fileToTranslate.getProject().getLocation().toOSString());
        tla2texArgs.add(fileToTranslate.getLocation().toOSString());
        final long translationStartTime=System.currentTimeMillis();
        monitor.beginTask(""String_Node_Str"",2);
        monitor.subTask(""String_Node_Str"");
        TLA.runTranslation((String[])tla2texArgs.toArray(new String[tla2texArgs.size()]));
        monitor.worked(1);
        final String outputFileName=fileToTranslate.getProject().getLocation().toOSString() + File.separator + ResourceHelper.getModuleName(fileToTranslate)+ ""String_Node_Str""+ TLA2TeX_Output_Extension;
        final File outputFile=new File(outputFileName);
        if (outputFile.exists()) {
          UIHelper.runUISync(new Runnable(){
            public void run(){
              monitor.subTask(""String_Node_Str"");
              tlaEditorAndPDFViewer.setActivePage(TLAEditorAndPDFViewer.PDFPage_ID);
              tlaEditorAndPDFViewer.getPDFViewingPage().getBrowser().setUrl(outputFileName);
              monitor.worked(1);
              if (outputFile.lastModified() < translationStartTime) {
                MessageDialog.openWarning(UIHelper.getShellProvider().getShell(),""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + outputFileName + ""String_Node_Str"");
              }
            }
          }
);
        }
 else {
          UIHelper.runUISync(new Runnable(){
            public void run(){
              MessageDialog.openError(UIHelper.getShellProvider().getShell(),""String_Node_Str"",""String_Node_Str"");
            }
          }
);
        }
      }
 catch (      final TLA2TexException e) {
        Activator.logError(""String_Node_Str"" + e.getMessage(),e);
        UIHelper.runUISync(new Runnable(){
          public void run(){
            MessageDialog.openError(UIHelper.getShellProvider().getShell(),""String_Node_Str"",e.getMessage());
          }
        }
);
      }
 finally {
      }
      return Status.OK_STATUS;
    }
  }
;
  tla2TexJob.setUser(true);
  tla2TexJob.setPriority(Job.LONG);
  tla2TexJob.schedule();
}",0.9940858832604784
136022,"private final ProofNode generateProof(TreeNode stn,ModuleNode cm) throws AbortException {
  int numberOfPops=0;
  if (stn.getKind() == N_TerminalProof) {
    return generateLeafProof(stn,cm);
  }
  ;
  Context pfCtxt=new Context(moduleTable,errors);
  symbolTable.pushContext(pfCtxt);
  TreeNode heirs[]=stn.heirs();
  int offset=0;
  if (heirs[0].getKind() == TLAplusParserConstants.PROOF) {
    offset=1;
  }
  ;
  LevelNode[] steps=new LevelNode[heirs.length - offset];
  Vector iVec=new Vector();
  boolean prevIsInfix=false;
  ExprNode prevRHS=null;
  for (int i=offset; i < heirs.length; i++) {
    boolean isAssumeProve=false;
    boolean isSuffices=false;
    Context assumeContext=null;
    boolean isPick=false;
    Context pickContext=null;
    TreeNode pfStepSTN=heirs[i];
    TreeNode stepNumSTN=pfStepSTN.heirs()[0];
    TreeNode stepBodySTN=pfStepSTN.heirs()[1];
    TreeNode stepPfSTN=null;
    if (pfStepSTN.heirs().length > 2) {
      stepPfSTN=pfStepSTN.heirs()[2];
    }
    ;
    LevelNode pfNumNode=null;
    boolean makePfNumNode=true;
    UniqueString stepNum=null;
switch (stepNumSTN.getKind()) {
case TLAplusParserConstants.ProofImplicitStepLexeme:
case TLAplusParserConstants.ProofStepLexeme:
      stepNum=stepNumSTN.getUS();
    break;
case TLAplusParserConstants.ProofStepDotLexeme:
  String stNum=stepNumSTN.getUS().toString();
stepNum=UniqueString.uniqueStringOf(stNum.substring(0,stNum.indexOf(""String_Node_Str"")));
break;
default :
makePfNumNode=false;
break;
}
;
if (stepNum != null) {
pushLS();
}
;
ThmOrAssumpDefNode tadn=null;
if (stepNum != null) {
tadn=new ThmOrAssumpDefNode(stepNum,stepNumSTN);
}
;
int stepKind=stepBodySTN.getKind();
if (stepKind != N_AssertStep) {
prevIsInfix=false;
}
;
switch (stepKind) {
case N_DefStep:
TreeNode[] defSTNs=stepBodySTN.heirs();
int defOffSet=0;
if (defSTNs[0].getKind() == DEFINE) {
defOffSet=1;
}
;
OpDefNode[] defs=new OpDefNode[defSTNs.length - defOffSet];
for (int j=defOffSet; j < defSTNs.length; j++) {
TreeNode defSTN=defSTNs[j];
;
Vector vec=new Vector();
switch (defSTN.getKind()) {
case N_FunctionDefinition:
processFunction(defSTN,vec,cm);
break;
case N_ModuleDefinition:
Vector defsVec=new Vector();
vec.addElement(processModuleDefinition(defSTN,defsVec,iVec,cm));
break;
case N_OperatorDefinition:
processOperator(defSTN,vec,cm);
break;
}
;
defs[j - defOffSet]=(OpDefNode)vec.elementAt(0);
}
;
pfNumNode=new DefStepNode(stepBodySTN,stepNum,defs);
steps[i - offset]=pfNumNode;
break;
case N_UseOrHide:
UseOrHideNode uohn=generateUseOrHide(stepBodySTN,cm);
if (uohn.facts.length + uohn.defs.length == 0) {
errors.addError(stepBodySTN.getLocation(),""String_Node_Str"");
}
;
uohn.factCheck();
pfNumNode=uohn;
steps[i - offset]=pfNumNode;
break;
case N_NonLocalInstance:
pfNumNode=generateInstance(stepBodySTN,cm,false);
steps[i - offset]=pfNumNode;
break;
default :
makePfNumNode=false;
TreeNode[] bodyHeirs=stepBodySTN.heirs();
LevelNode body=null;
UniqueString op=null;
ExprNode[] args;
switch (stepBodySTN.getKind()) {
case N_AssertStep:
int bodyNext=0;
if (bodyHeirs[0].getKind() == TLAplusParserConstants.SUFFICES) {
bodyNext=1;
isSuffices=true;
}
;
if (bodyHeirs[bodyNext].getKind() == N_AssumeProve) {
isAssumeProve=true;
symbolTable.pushContext(new Context(moduleTable,errors));
currentGoal=tadn;
body=generateAssumeProve(bodyHeirs[bodyNext],cm);
if (isSuffices) {
((AssumeProveNode)body).setSuffices();
}
;
currentGoal=null;
assumeContext=symbolTable.getContext();
symbolTable.popContext();
prevIsInfix=false;
}
 else {
TreeNode curExpr=bodyHeirs[bodyNext];
if (isSuffices) {
args=new ExprNode[1];
args[0]=generateExpression(curExpr,cm);
body=new OpApplNode(OP_suffices,args,stepBodySTN,cm);
}
 else {
SyntaxTreeNode curLHS=null;
if (curExpr.getKind() == N_InfixExpr) {
curLHS=(SyntaxTreeNode)curExpr.heirs()[0];
}
;
if (prevIsInfix && (curLHS != null) && (((SyntaxTreeNode)curLHS.heirs()[0]).heirs().length == 0)&& (curLHS.heirs()).length > 1 && (curLHS.heirs()[1].getKind() == IDENTIFIER) && (curLHS.heirs()[1].getUS() == AtUS)) {
TreeNode[] children=curExpr.heirs();
GenID genID=generateGenID(children[1],cm);
ExprNode[] sns=new ExprNode[2];
SymbolNode opn=symbolTable.resolveSymbol(Operators.resolveSynonym(genID.getCompoundIDUS()));
if (opn == null) {
errors.addError(curExpr.getLocation(),""String_Node_Str"" + genID.getCompoundIDUS() + ""String_Node_Str"");
return null;
}
;
sns[1]=generateExpression(children[2],cm);
ExprNode[] nopArgs=new ExprNode[1];
nopArgs[0]=prevRHS;
sns[0]=new OpApplNode(OP_nop,nopArgs,curLHS,cm);
body=new OpApplNode(opn,sns,curExpr,cm);
}
 else {
body=generateExpression(curExpr,cm);
}
;
prevIsInfix=false;
if ((curLHS != null) && (body != null) && (body.getKind() == OpApplKind)&& (((OpApplNode)body).getArgs().length > 1)) {
prevIsInfix=true;
prevRHS=(ExprNode)((OpApplNode)body).getArgs()[1];
}
}
}
;
break;
case N_HaveStep:
case N_CaseStep:
if (stepBodySTN.getKind() == N_HaveStep) {
op=OP_have;
}
 else {
op=OP_pfcase;
}
;
args=new ExprNode[1];
args[0]=generateExpression(bodyHeirs[1],cm);
body=new OpApplNode(op,args,stepBodySTN,cm);
break;
case N_TakeStep:
case N_PickStep:
if (stepBodySTN.getKind() == N_TakeStep) {
op=OP_take;
}
 else {
op=OP_pick;
isPick=true;
symbolTable.pushContext(new Context(moduleTable,errors));
}
;
if (bodyHeirs[1].getKind() == N_QuantBound) {
int quants=1;
int nextTok=2;
while ((nextTok < bodyHeirs.length) && (bodyHeirs[nextTok].getKind() == TLAplusParserConstants.COMMA)) {
quants++;
nextTok=nextTok + 2;
}
;
FormalParamNode[][] params=new FormalParamNode[quants][0];
boolean[] bt=new boolean[quants];
ExprNode[] paramBounds=new ExprNode[quants];
processQuantBoundArgs(bodyHeirs,1,params,bt,paramBounds,cm);
if (isPick) {
pickContext=symbolTable.getContext();
nextTok++;
args=new ExprNode[1];
pushFormalParams(flattenParams(params));
args[0]=generateExpression(bodyHeirs[nextTok],cm);
popFormalParams();
symbolTable.popContext();
}
 else {
args=new ExprNode[0];
}
;
body=new OpApplNode(op,null,args,params,bt,paramBounds,stepBodySTN,cm);
}
 else {
int ids=1;
while ((2 * ids < bodyHeirs.length) && (bodyHeirs[2 * ids].getKind() == TLAplusParserConstants.COMMA)) {
ids++;
}
;
FormalParamNode[] params=new FormalParamNode[ids];
for (int j=0; j < ids; j++) {
params[j]=new FormalParamNode(bodyHeirs[2 * j + 1].getUS(),0,bodyHeirs[2 * j + 1],symbolTable,cm);
}
;
if (isPick) {
pickContext=symbolTable.getContext();
pushFormalParams(params);
args=new ExprNode[1];
args[0]=generateExpression(bodyHeirs[2 * ids + 1],cm);
popFormalParams();
symbolTable.popContext();
}
 else {
args=new ExprNode[0];
}
;
body=new OpApplNode(op,args,params,stepBodySTN,cm);
}
;
break;
case N_WitnessStep:
int ids=1;
while ((2 * ids < bodyHeirs.length) && (bodyHeirs[2 * ids].getKind() == TLAplusParserConstants.COMMA)) {
ids++;
}
;
args=new ExprNode[ids];
for (int j=0; j < ids; j++) {
args[j]=generateExpression(bodyHeirs[2 * j + 1],cm);
}
;
body=new OpApplNode(OP_witness,args,stepBodySTN,cm);
break;
case N_QEDStep:
args=new ExprNode[0];
body=new OpApplNode(OP_qed,args,stepBodySTN,cm);
break;
default :
errors.addAbort(stn.getLocation(),""String_Node_Str"" + heirs[i].getKind());
break;
}
;
if (stepNum != null) {
tadn.construct(true,body,cm,symbolTable,null);
tadn.setLabels(popLabelNodeSet());
if (isSuffices) {
tadn.setSuffices();
}
;
}
;
ProofNode proof=null;
if (stepPfSTN != null) {
if (isAssumeProve && !isSuffices) {
symbolTable.pushContext(assumeContext);
}
;
proof=generateProof(stepPfSTN,cm);
if (isAssumeProve && !isSuffices) {
symbolTable.popContext();
}
;
}
;
if (isAssumeProve && isSuffices) {
numberOfPops++;
symbolTable.pushContext(assumeContext);
}
;
if (isAssumeProve) {
((AssumeProveNode)body).inProof=false;
}
;
TheoremNode thm=new TheoremNode(stepBodySTN,body,cm,proof,tadn);
thm.suffices=isSuffices;
steps[i - offset]=thm;
}
;
if (makePfNumNode) {
OpDefNode nodeMadeOnlyToBePutInSymbolTable=new OpDefNode(stepNum,pfNumNode,cm,symbolTable,pfStepSTN);
nodeMadeOnlyToBePutInSymbolTable.setLabels(popLabelNodeSet());
}
if (isPick) {
Enumeration e=pickContext.content();
while (e.hasMoreElements()) {
SymbolNode sym=((Context.Pair)(e.nextElement())).getSymbol();
symbolTable.addSymbol(sym.getName(),sym);
}
}
}
;
InstanceNode[] insts=new InstanceNode[iVec.size()];
for (int i=0; i < insts.length; i++) {
insts[i]=(InstanceNode)iVec.elementAt(i);
}
;
for (int i=0; i < numberOfPops; i++) {
symbolTable.popContext();
}
;
symbolTable.popContext();
return new NonLeafProofNode(stn,steps,insts,pfCtxt);
}","private final ProofNode generateProof(TreeNode stn,ModuleNode cm) throws AbortException {
  int numberOfPops=0;
  if (stn.getKind() == N_TerminalProof) {
    return generateLeafProof(stn,cm);
  }
  ;
  Context pfCtxt=new Context(moduleTable,errors);
  symbolTable.pushContext(pfCtxt);
  TreeNode heirs[]=stn.heirs();
  int offset=0;
  if (heirs[0].getKind() == TLAplusParserConstants.PROOF) {
    offset=1;
  }
  ;
  LevelNode[] steps=new LevelNode[heirs.length - offset];
  Vector iVec=new Vector();
  boolean prevIsInfix=false;
  ExprNode prevRHS=null;
  for (int i=offset; i < heirs.length; i++) {
    boolean isAssumeProve=false;
    boolean isSuffices=false;
    Context assumeContext=null;
    boolean isPick=false;
    Context pickContext=null;
    TreeNode pfStepSTN=heirs[i];
    TreeNode stepNumSTN=pfStepSTN.heirs()[0];
    TreeNode stepBodySTN=pfStepSTN.heirs()[1];
    TreeNode stepPfSTN=null;
    if (pfStepSTN.heirs().length > 2) {
      stepPfSTN=pfStepSTN.heirs()[2];
    }
    ;
    LevelNode pfNumNode=null;
    boolean makePfNumNode=true;
    UniqueString stepNum=null;
switch (stepNumSTN.getKind()) {
case TLAplusParserConstants.ProofImplicitStepLexeme:
case TLAplusParserConstants.ProofStepLexeme:
      stepNum=stepNumSTN.getUS();
    break;
case TLAplusParserConstants.ProofStepDotLexeme:
  String stNum=stepNumSTN.getUS().toString();
stepNum=UniqueString.uniqueStringOf(stNum.substring(0,stNum.indexOf(""String_Node_Str"")));
break;
default :
makePfNumNode=false;
break;
}
;
if (stepNum != null) {
pushLS();
}
;
ThmOrAssumpDefNode tadn=null;
if (stepNum != null) {
tadn=new ThmOrAssumpDefNode(stepNum,stepNumSTN);
}
;
int stepKind=stepBodySTN.getKind();
if (stepKind != N_AssertStep) {
prevIsInfix=false;
}
;
switch (stepKind) {
case N_DefStep:
TreeNode[] defSTNs=stepBodySTN.heirs();
int defOffSet=0;
if (defSTNs[0].getKind() == DEFINE) {
defOffSet=1;
}
;
OpDefNode[] defs=new OpDefNode[defSTNs.length - defOffSet];
for (int j=defOffSet; j < defSTNs.length; j++) {
TreeNode defSTN=defSTNs[j];
;
Vector vec=new Vector();
switch (defSTN.getKind()) {
case N_FunctionDefinition:
processFunction(defSTN,vec,cm);
break;
case N_ModuleDefinition:
Vector defsVec=new Vector();
vec.addElement(processModuleDefinition(defSTN,defsVec,iVec,cm));
break;
case N_OperatorDefinition:
processOperator(defSTN,vec,cm);
break;
}
;
defs[j - defOffSet]=(OpDefNode)vec.elementAt(0);
}
;
pfNumNode=new DefStepNode(stepBodySTN,stepNum,defs);
steps[i - offset]=pfNumNode;
break;
case N_UseOrHide:
UseOrHideNode uohn=generateUseOrHide(stepBodySTN,cm);
if (uohn.facts.length + uohn.defs.length == 0) {
errors.addError(stepBodySTN.getLocation(),""String_Node_Str"");
}
;
uohn.factCheck();
pfNumNode=uohn;
steps[i - offset]=pfNumNode;
break;
case N_NonLocalInstance:
pfNumNode=generateInstance(stepBodySTN,cm,false);
steps[i - offset]=pfNumNode;
break;
default :
makePfNumNode=false;
TreeNode[] bodyHeirs=stepBodySTN.heirs();
LevelNode body=null;
UniqueString op=null;
ExprNode[] args;
switch (stepBodySTN.getKind()) {
case N_AssertStep:
int bodyNext=0;
if (bodyHeirs[0].getKind() == TLAplusParserConstants.SUFFICES) {
bodyNext=1;
isSuffices=true;
}
;
if (bodyHeirs[bodyNext].getKind() == N_AssumeProve) {
isAssumeProve=true;
symbolTable.pushContext(new Context(moduleTable,errors));
currentGoal=tadn;
body=generateAssumeProve(bodyHeirs[bodyNext],cm);
if (isSuffices) {
((AssumeProveNode)body).setSuffices();
}
;
currentGoal=null;
assumeContext=symbolTable.getContext();
symbolTable.popContext();
prevIsInfix=false;
}
 else {
TreeNode curExpr=bodyHeirs[bodyNext];
if (isSuffices) {
args=new ExprNode[1];
args[0]=generateExpression(curExpr,cm);
body=new OpApplNode(OP_suffices,args,stepBodySTN,cm);
}
 else {
SyntaxTreeNode curLHS=null;
if (curExpr.getKind() == N_InfixExpr) {
curLHS=(SyntaxTreeNode)curExpr.heirs()[0];
}
;
if (prevIsInfix && (curLHS != null) && (curLHS.heirs().length > 0)&& (((SyntaxTreeNode)curLHS.heirs()[0]).heirs().length == 0)&& (curLHS.heirs()).length > 1 && (curLHS.heirs()[1].getKind() == IDENTIFIER) && (curLHS.heirs()[1].getUS() == AtUS)) {
TreeNode[] children=curExpr.heirs();
GenID genID=generateGenID(children[1],cm);
ExprNode[] sns=new ExprNode[2];
SymbolNode opn=symbolTable.resolveSymbol(Operators.resolveSynonym(genID.getCompoundIDUS()));
if (opn == null) {
errors.addError(curExpr.getLocation(),""String_Node_Str"" + genID.getCompoundIDUS() + ""String_Node_Str"");
return null;
}
;
sns[1]=generateExpression(children[2],cm);
ExprNode[] nopArgs=new ExprNode[1];
nopArgs[0]=prevRHS;
sns[0]=new OpApplNode(OP_nop,nopArgs,curLHS,cm);
body=new OpApplNode(opn,sns,curExpr,cm);
}
 else {
body=generateExpression(curExpr,cm);
}
;
prevIsInfix=false;
if ((curLHS != null) && (body != null) && (body.getKind() == OpApplKind)&& (((OpApplNode)body).getArgs().length > 1)) {
prevIsInfix=true;
prevRHS=(ExprNode)((OpApplNode)body).getArgs()[1];
}
}
}
;
break;
case N_HaveStep:
case N_CaseStep:
if (stepBodySTN.getKind() == N_HaveStep) {
op=OP_have;
}
 else {
op=OP_pfcase;
}
;
args=new ExprNode[1];
args[0]=generateExpression(bodyHeirs[1],cm);
body=new OpApplNode(op,args,stepBodySTN,cm);
break;
case N_TakeStep:
case N_PickStep:
if (stepBodySTN.getKind() == N_TakeStep) {
op=OP_take;
}
 else {
op=OP_pick;
isPick=true;
symbolTable.pushContext(new Context(moduleTable,errors));
}
;
if (bodyHeirs[1].getKind() == N_QuantBound) {
int quants=1;
int nextTok=2;
while ((nextTok < bodyHeirs.length) && (bodyHeirs[nextTok].getKind() == TLAplusParserConstants.COMMA)) {
quants++;
nextTok=nextTok + 2;
}
;
FormalParamNode[][] params=new FormalParamNode[quants][0];
boolean[] bt=new boolean[quants];
ExprNode[] paramBounds=new ExprNode[quants];
processQuantBoundArgs(bodyHeirs,1,params,bt,paramBounds,cm);
if (isPick) {
pickContext=symbolTable.getContext();
nextTok++;
args=new ExprNode[1];
pushFormalParams(flattenParams(params));
args[0]=generateExpression(bodyHeirs[nextTok],cm);
popFormalParams();
symbolTable.popContext();
}
 else {
args=new ExprNode[0];
}
;
body=new OpApplNode(op,null,args,params,bt,paramBounds,stepBodySTN,cm);
}
 else {
int ids=1;
while ((2 * ids < bodyHeirs.length) && (bodyHeirs[2 * ids].getKind() == TLAplusParserConstants.COMMA)) {
ids++;
}
;
FormalParamNode[] params=new FormalParamNode[ids];
for (int j=0; j < ids; j++) {
params[j]=new FormalParamNode(bodyHeirs[2 * j + 1].getUS(),0,bodyHeirs[2 * j + 1],symbolTable,cm);
}
;
if (isPick) {
pickContext=symbolTable.getContext();
pushFormalParams(params);
args=new ExprNode[1];
args[0]=generateExpression(bodyHeirs[2 * ids + 1],cm);
popFormalParams();
symbolTable.popContext();
}
 else {
args=new ExprNode[0];
}
;
body=new OpApplNode(op,args,params,stepBodySTN,cm);
}
;
break;
case N_WitnessStep:
int ids=1;
while ((2 * ids < bodyHeirs.length) && (bodyHeirs[2 * ids].getKind() == TLAplusParserConstants.COMMA)) {
ids++;
}
;
args=new ExprNode[ids];
for (int j=0; j < ids; j++) {
args[j]=generateExpression(bodyHeirs[2 * j + 1],cm);
}
;
body=new OpApplNode(OP_witness,args,stepBodySTN,cm);
break;
case N_QEDStep:
args=new ExprNode[0];
body=new OpApplNode(OP_qed,args,stepBodySTN,cm);
break;
default :
errors.addAbort(stn.getLocation(),""String_Node_Str"" + heirs[i].getKind());
break;
}
;
if (stepNum != null) {
tadn.construct(true,body,cm,symbolTable,null);
tadn.setLabels(popLabelNodeSet());
if (isSuffices) {
tadn.setSuffices();
}
;
}
;
ProofNode proof=null;
if (stepPfSTN != null) {
if (isAssumeProve && !isSuffices) {
symbolTable.pushContext(assumeContext);
}
;
proof=generateProof(stepPfSTN,cm);
if (isAssumeProve && !isSuffices) {
symbolTable.popContext();
}
;
}
;
if (isAssumeProve && isSuffices) {
numberOfPops++;
symbolTable.pushContext(assumeContext);
}
;
if (isAssumeProve) {
((AssumeProveNode)body).inProof=false;
}
;
TheoremNode thm=new TheoremNode(stepBodySTN,body,cm,proof,tadn);
thm.suffices=isSuffices;
steps[i - offset]=thm;
}
;
if (makePfNumNode) {
OpDefNode nodeMadeOnlyToBePutInSymbolTable=new OpDefNode(stepNum,pfNumNode,cm,symbolTable,pfStepSTN);
nodeMadeOnlyToBePutInSymbolTable.setLabels(popLabelNodeSet());
}
if (isPick) {
Enumeration e=pickContext.content();
while (e.hasMoreElements()) {
SymbolNode sym=((Context.Pair)(e.nextElement())).getSymbol();
symbolTable.addSymbol(sym.getName(),sym);
}
}
}
;
InstanceNode[] insts=new InstanceNode[iVec.size()];
for (int i=0; i < insts.length; i++) {
insts[i]=(InstanceNode)iVec.elementAt(i);
}
;
for (int i=0; i < numberOfPops; i++) {
symbolTable.popContext();
}
;
symbolTable.popContext();
return new NonLeafProofNode(stn,steps,insts,pfCtxt);
}",0.9982296707187536
136023,"public void selectionChanged(SelectionChangedEvent event){
  if (!((IStructuredSelection)event.getSelection()).isEmpty()) {
    Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
    valueViewer.setDocument(new Document(selection.toString()));
  }
 else {
    valueViewer.setDocument(EMPTY_DOCUMENT());
  }
}","public void selectionChanged(SelectionChangedEvent event){
  if (!((IStructuredSelection)event.getSelection()).isEmpty()) {
    Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
    valueViewer.setDocument(new Document(selection.toString()));
  }
 else {
    valueViewer.setDocument(NO_VALUE_DOCUMENT());
  }
}",0.9808541973490428
136024,"/** 
 * Creates the layout and fill it with data
 */
public void createPartControl(Composite parent){
  toolkit=new FormToolkit(parent.getDisplay());
  form=toolkit.createForm(parent);
  form.setText(""String_Node_Str"");
  toolkit.decorateFormHeading(form);
  GridLayout layout;
  GridData gd;
  Composite body=form.getBody();
  layout=new GridLayout(1,false);
  body.setLayout(layout);
  SashForm outerSashForm=new SashForm(body,SWT.VERTICAL);
  toolkit.adapt(outerSashForm);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  outerSashForm.setLayoutData(gd);
  errorViewer=FormHelper.createFormsOutputViewer(toolkit,outerSashForm,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  gd=new GridData(SWT.FILL,SWT.FILL,true,false);
  gd.heightHint=100;
  errorViewer.getControl().setLayoutData(gd);
  Composite belowErrorViewerComposite=toolkit.createComposite(outerSashForm);
  layout=new GridLayout(1,false);
  layout.marginWidth=0;
  belowErrorViewerComposite.setLayout(layout);
  traceExplorerComposite=new TraceExplorerComposite(belowErrorViewerComposite,""String_Node_Str"",""String_Node_Str"",toolkit,this);
  Section errorTraceSection=toolkit.createSection(belowErrorViewerComposite,Section.TITLE_BAR);
  errorTraceSection.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  errorTraceSection.setLayout(new GridLayout(1,true));
  errorTraceSection.setText(""String_Node_Str"");
  Composite errorTraceSectionClientArea=toolkit.createComposite(errorTraceSection);
  errorTraceSectionClientArea.setLayout(new GridLayout(1,true));
  errorTraceSection.setClient(errorTraceSectionClientArea);
  SashForm sashForm=new SashForm(errorTraceSectionClientArea,SWT.VERTICAL);
  toolkit.adapt(sashForm);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  sashForm.setLayoutData(gd);
  Tree tree=toolkit.createTree(sashForm,SWT.V_SCROLL | SWT.BORDER | SWT.FULL_SELECTION| SWT.SINGLE| SWT.VIRTUAL);
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  gd=new GridData(SWT.LEFT,SWT.TOP,true,false);
  gd.minimumHeight=300;
  tree.setLayoutData(gd);
  tree.setToolTipText(TOOLTIP);
  TraceDisplayResizer resizer=new TraceDisplayResizer();
  resizer.comp=sashForm;
  resizer.tree=tree;
  for (int i=0; i < StateLabelProvider.COLUMN_TEXTS.length; i++) {
    TreeColumn column=new TreeColumn(tree,SWT.LEFT);
    column.setText(StateLabelProvider.COLUMN_TEXTS[i]);
    column.setWidth(StateLabelProvider.COLUMN_WIDTH[i]);
    resizer.column[i]=column;
    column.setToolTipText(TOOLTIP);
  }
  tree.addControlListener(resizer);
  int eventType=SWT.Resize;
  resizer.column[0].addListener(eventType,resizer);
  variableViewer=new TreeViewer(tree);
  variableViewer.setContentProvider(new StateContentProvider());
  variableViewer.setFilters(new ViewerFilter[]{new StateFilter()});
  variableViewer.setLabelProvider(new StateLabelProvider());
  variableViewer.addDoubleClickListener(new ActionClickListener());
  variableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (!((IStructuredSelection)event.getSelection()).isEmpty()) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        valueViewer.setDocument(new Document(selection.toString()));
      }
 else {
        valueViewer.setDocument(EMPTY_DOCUMENT());
      }
    }
  }
);
  valueViewer=FormHelper.createFormsSourceViewer(toolkit,sashForm,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  valueViewer.setEditable(false);
  gd=new GridData(SWT.LEFT,SWT.TOP,true,false);
  valueViewer.getControl().setLayoutData(gd);
  int[] weights={1,4};
  outerSashForm.setWeights(weights);
  clear();
  TLCUIHelper.setHelp(parent,IHelpConstants.TLC_ERROR_VIEW);
}","/** 
 * Creates the layout and fill it with data
 */
public void createPartControl(Composite parent){
  toolkit=new FormToolkit(parent.getDisplay());
  form=toolkit.createForm(parent);
  form.setText(""String_Node_Str"");
  toolkit.decorateFormHeading(form);
  GridLayout layout;
  GridData gd;
  Composite body=form.getBody();
  layout=new GridLayout(1,false);
  body.setLayout(layout);
  SashForm outerSashForm=new SashForm(body,SWT.VERTICAL);
  toolkit.adapt(outerSashForm);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  outerSashForm.setLayoutData(gd);
  errorViewer=FormHelper.createFormsOutputViewer(toolkit,outerSashForm,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  gd=new GridData(SWT.FILL,SWT.FILL,true,false);
  gd.heightHint=100;
  errorViewer.getControl().setLayoutData(gd);
  Composite belowErrorViewerComposite=toolkit.createComposite(outerSashForm);
  layout=new GridLayout(1,false);
  layout.marginWidth=0;
  belowErrorViewerComposite.setLayout(layout);
  traceExplorerComposite=new TraceExplorerComposite(belowErrorViewerComposite,""String_Node_Str"",""String_Node_Str"",toolkit,this);
  Section errorTraceSection=toolkit.createSection(belowErrorViewerComposite,Section.TITLE_BAR);
  errorTraceSection.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  errorTraceSection.setLayout(new GridLayout(1,true));
  errorTraceSection.setText(""String_Node_Str"");
  Composite errorTraceSectionClientArea=toolkit.createComposite(errorTraceSection);
  errorTraceSectionClientArea.setLayout(new GridLayout(1,true));
  errorTraceSection.setClient(errorTraceSectionClientArea);
  SashForm sashForm=new SashForm(errorTraceSectionClientArea,SWT.VERTICAL);
  toolkit.adapt(sashForm);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  sashForm.setLayoutData(gd);
  Tree tree=toolkit.createTree(sashForm,SWT.V_SCROLL | SWT.BORDER | SWT.FULL_SELECTION| SWT.SINGLE| SWT.VIRTUAL);
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  gd=new GridData(SWT.LEFT,SWT.TOP,true,false);
  gd.minimumHeight=300;
  tree.setLayoutData(gd);
  tree.setToolTipText(TOOLTIP);
  TraceDisplayResizer resizer=new TraceDisplayResizer();
  resizer.comp=sashForm;
  resizer.tree=tree;
  for (int i=0; i < StateLabelProvider.COLUMN_TEXTS.length; i++) {
    TreeColumn column=new TreeColumn(tree,SWT.LEFT);
    column.setText(StateLabelProvider.COLUMN_TEXTS[i]);
    column.setWidth(StateLabelProvider.COLUMN_WIDTH[i]);
    resizer.column[i]=column;
    column.setToolTipText(TOOLTIP);
  }
  tree.addControlListener(resizer);
  int eventType=SWT.Resize;
  resizer.column[0].addListener(eventType,resizer);
  variableViewer=new TreeViewer(tree);
  variableViewer.setContentProvider(new StateContentProvider());
  variableViewer.setFilters(new ViewerFilter[]{new StateFilter()});
  variableViewer.setLabelProvider(new StateLabelProvider());
  variableViewer.addDoubleClickListener(new ActionClickListener());
  variableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (!((IStructuredSelection)event.getSelection()).isEmpty()) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        valueViewer.setDocument(new Document(selection.toString()));
      }
 else {
        valueViewer.setDocument(NO_VALUE_DOCUMENT());
      }
    }
  }
);
  valueViewer=FormHelper.createFormsSourceViewer(toolkit,sashForm,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  valueViewer.setEditable(false);
  gd=new GridData(SWT.LEFT,SWT.TOP,true,false);
  valueViewer.getControl().setLayoutData(gd);
  int[] weights={1,4};
  outerSashForm.setWeights(weights);
  form.getToolBarManager().add(new HelpAction());
  form.getToolBarManager().update(true);
  clear();
  TLCUIHelper.setHelp(parent,IHelpConstants.TLC_ERROR_VIEW);
}",0.9865612648221344
136025,"public Object execute(ExecutionEvent event) throws ExecutionException {
  BusyIndicator.showWhile(null,new Runnable(){
    public void run(){
      UIHelper.getActiveWindow().getWorkbench().getHelpSystem().displayDynamicHelp();
      IViewPart helpView=UIHelper.findView(""String_Node_Str"");
      if (helpView != null && UIHelper.getActiveWindow() != null && UIHelper.getActiveWindow().getActivePage() != null) {
        UIHelper.getActiveWindow().getActivePage().activate(helpView);
      }
    }
  }
);
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  UIHelper.showDynamicHelp();
  return null;
}",0.3630672926447574
136026,"public String getColumnText(Object element,int columnIndex){
  if (element instanceof TLCState) {
    TLCState state=(TLCState)element;
switch (columnIndex) {
case NAME:
      if (state.isStuttering()) {
        return ""String_Node_Str"";
      }
 else       if (state.isBackToState()) {
        return ""String_Node_Str"" + state.getStateNumber() + ""String_Node_Str"";
      }
    return state.getLabel();
case VALUE:
  return ""String_Node_Str"" + state.getStateNumber() + ""String_Node_Str"";
default :
break;
}
}
 else if (element instanceof TLCVariable) {
TLCVariable var=(TLCVariable)element;
switch (columnIndex) {
case NAME:
return var.getName();
case VALUE:
return var.getValue().toSimpleString();
default :
break;
}
}
 else if (element instanceof TLCSetVariableValue || element instanceof TLCSequenceVariableValue || element instanceof TLCSimpleVariableValue) {
TLCVariableValue varValue=(TLCVariableValue)element;
switch (columnIndex) {
case VALUE:
return varValue.toString();
case NAME:
return ""String_Node_Str"";
default :
break;
}
}
 else if (element instanceof TLCNamedVariableValue) {
TLCNamedVariableValue namedValue=(TLCNamedVariableValue)element;
switch (columnIndex) {
case NAME:
return namedValue.getName();
case VALUE:
return ((TLCVariableValue)namedValue.getValue()).toSimpleString();
default :
break;
}
}
 else if (element instanceof TLCFcnElementVariableValue) {
TLCFcnElementVariableValue fcnElementValue=(TLCFcnElementVariableValue)element;
switch (columnIndex) {
case NAME:
return fcnElementValue.getFrom().toSimpleString();
case VALUE:
return ((TLCVariableValue)fcnElementValue.getValue()).toSimpleString();
default :
break;
}
}
 else if (element instanceof TLCRecordVariableValue) {
TLCRecordVariableValue recordValue=(TLCRecordVariableValue)element;
switch (columnIndex) {
case NAME:
return ""String_Node_Str"";
case VALUE:
return recordValue.toSimpleString();
default :
break;
}
}
 else if (element instanceof TLCFunctionVariableValue) {
TLCFunctionVariableValue fcnValue=(TLCFunctionVariableValue)element;
switch (columnIndex) {
case NAME:
return ""String_Node_Str"";
case VALUE:
return fcnValue.toSimpleString();
default :
break;
}
}
return null;
}","public String getColumnText(Object element,int columnIndex){
  if (element instanceof TLCState) {
    TLCState state=(TLCState)element;
switch (columnIndex) {
case NAME:
      if (state.isStuttering()) {
        return ""String_Node_Str"";
      }
 else       if (state.isBackToState()) {
        return ""String_Node_Str"" + state.getStateNumber() + ""String_Node_Str"";
      }
    return state.getLabel();
case VALUE:
  return ""String_Node_Str"" + state.getStateNumber() + ""String_Node_Str"";
default :
break;
}
}
 else if (element instanceof TLCVariable) {
TLCVariable var=(TLCVariable)element;
switch (columnIndex) {
case NAME:
if (var.isTraceExplorerVar()) {
return var.getSingleLineName();
}
 else {
return var.getName();
}
case VALUE:
return var.getValue().toSimpleString();
default :
break;
}
}
 else if (element instanceof TLCSetVariableValue || element instanceof TLCSequenceVariableValue || element instanceof TLCSimpleVariableValue) {
TLCVariableValue varValue=(TLCVariableValue)element;
switch (columnIndex) {
case VALUE:
return varValue.toString();
case NAME:
return ""String_Node_Str"";
default :
break;
}
}
 else if (element instanceof TLCNamedVariableValue) {
TLCNamedVariableValue namedValue=(TLCNamedVariableValue)element;
switch (columnIndex) {
case NAME:
return namedValue.getName();
case VALUE:
return ((TLCVariableValue)namedValue.getValue()).toSimpleString();
default :
break;
}
}
 else if (element instanceof TLCFcnElementVariableValue) {
TLCFcnElementVariableValue fcnElementValue=(TLCFcnElementVariableValue)element;
switch (columnIndex) {
case NAME:
return fcnElementValue.getFrom().toSimpleString();
case VALUE:
return ((TLCVariableValue)fcnElementValue.getValue()).toSimpleString();
default :
break;
}
}
 else if (element instanceof TLCRecordVariableValue) {
TLCRecordVariableValue recordValue=(TLCRecordVariableValue)element;
switch (columnIndex) {
case NAME:
return ""String_Node_Str"";
case VALUE:
return recordValue.toSimpleString();
default :
break;
}
}
 else if (element instanceof TLCFunctionVariableValue) {
TLCFunctionVariableValue fcnValue=(TLCFunctionVariableValue)element;
switch (columnIndex) {
case NAME:
return ""String_Node_Str"";
case VALUE:
return fcnValue.toSimpleString();
default :
break;
}
}
return null;
}",0.9782510194834616
136027,"/** 
 * Launch TLC or SANY
 * @param mode
 * @param userPased true, if the action is performed on behalf of the user action (explicit click on the launch button)
 */
public void launchModel(String mode,boolean userPased){
  if (Activator.isSpecManagerInstantiated()) {
    Spec spec=Activator.getSpecManager().getSpecLoaded();
    if (spec == null || spec.getStatus() != IParseConstants.PARSED) {
      if (mode == TLCModelLaunchDelegate.MODE_MODELCHECK) {
        MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      }
 else       if (mode == TLCModelLaunchDelegate.MODE_GENERATE) {
        if (userPased) {
          MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
 else {
          MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
      }
      return;
    }
  }
 else {
    Activator.logDebug(""String_Node_Str"");
    return;
  }
  UIHelper.runUISync(validateRunable);
  IProgressMonitor monitor=new NullProgressMonitor();
  if (isDirty()) {
    doSave(new SubProgressMonitor(monitor,1));
  }
  if (!isComplete()) {
    if (userPased) {
      MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return;
    }
  }
 else {
    try {
      if (mode.equals(TLCModelLaunchDelegate.MODE_MODELCHECK)) {
        int autoLockTime=TLCUIActivator.getDefault().getPreferenceStore().getInt(ITLCPreferenceConstants.I_TLC_AUTO_LOCK_MODEL_TIME);
        getConfig().setAttribute(IConfigurationConstants.LAUNCH_AUTO_LOCK_MODEL_TIME,autoLockTime);
        getConfig().doSave();
      }
      getConfig().launch(mode,new SubProgressMonitor(monitor,1),true);
      TLCErrorView errorView=(TLCErrorView)UIHelper.findView(TLCErrorView.ID);
      if (errorView != null) {
        errorView.clear();
      }
    }
 catch (    CoreException e) {
      TLCUIActivator.logError(""String_Node_Str"" + getConfig().getName(),e);
    }
  }
}","/** 
 * Launch TLC or SANY
 * @param mode
 * @param userPased true, if the action is performed on behalf of the user action (explicit click on the launch button)
 */
public void launchModel(String mode,boolean userPased){
  if (Activator.isSpecManagerInstantiated()) {
    Spec spec=Activator.getSpecManager().getSpecLoaded();
    if (spec == null || spec.getStatus() != IParseConstants.PARSED) {
      if (mode == TLCModelLaunchDelegate.MODE_MODELCHECK) {
        MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      }
 else       if (mode == TLCModelLaunchDelegate.MODE_GENERATE) {
        if (userPased) {
          MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
 else {
          MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
        }
      }
      return;
    }
  }
 else {
    Activator.logDebug(""String_Node_Str"");
    return;
  }
  UIHelper.runUISync(validateRunable);
  IProgressMonitor monitor=new NullProgressMonitor();
  if (isDirty()) {
    doSave(new SubProgressMonitor(monitor,1));
  }
  if (!isComplete()) {
    if (userPased) {
      MessageDialog.openError(getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
      return;
    }
  }
 else {
    try {
      if (mode.equals(TLCModelLaunchDelegate.MODE_MODELCHECK)) {
        int autoLockTime=TLCUIActivator.getDefault().getPreferenceStore().getInt(ITLCPreferenceConstants.I_TLC_AUTO_LOCK_MODEL_TIME);
        getConfig().setAttribute(IConfigurationConstants.LAUNCH_AUTO_LOCK_MODEL_TIME,autoLockTime);
        getConfig().doSave();
      }
      getConfig().launch(mode,new SubProgressMonitor(monitor,1),true);
      if (mode.equals(TLCModelLaunchDelegate.MODE_MODELCHECK)) {
        TLCErrorView errorView=(TLCErrorView)UIHelper.findView(TLCErrorView.ID);
        if (errorView != null) {
          errorView.clear();
        }
      }
    }
 catch (    CoreException e) {
      TLCUIActivator.logError(""String_Node_Str"" + getConfig().getName(),e);
    }
  }
}",0.9798857710454432
136028,"/** 
 * Creates an error object <br>This is a factory method
 * @param tlcRegion a region marking the error information in the document
 * @param tlcOutputDocument the document containing the error description
 * @return the TLC Error representing the error
 */
private TLCError createError(TLCRegion tlcRegion,IDocument tlcOutputDocument){
  TLCError topError=new TLCError();
  if (tlcRegion instanceof TLCRegionContainer) {
    TLCRegionContainer container=(TLCRegionContainer)tlcRegion;
    ITypedRegion[] regions=container.getSubRegions();
    Assert.isTrue(regions.length < 3,""String_Node_Str"");
    for (int i=0; i < regions.length; i++) {
      if (regions[i] instanceof TLCRegion) {
        TLCError cause=createError((TLCRegion)regions[i],tlcOutputDocument);
        topError.setCause(cause);
      }
 else {
        String errorMessage;
        try {
          errorMessage=tlcOutputDocument.get(tlcRegion.getOffset(),tlcRegion.getLength());
          Document errorDocument=new Document();
          errorDocument.set(errorMessage);
          boolean markerInstalled=false;
          IFile mcFile=ModelHelper.getModelTLAFile(config);
          FileEditorInput mcFileEditorInput=new FileEditorInput((IFile)mcFile);
          FileDocumentProvider mcFileDocumentProvider=new FileDocumentProvider();
          mcFileDocumentProvider.connect(mcFileEditorInput);
          IDocument mcDocument=mcFileDocumentProvider.getDocument(mcFileEditorInput);
          FindReplaceDocumentAdapter mcSearcher=new FindReplaceDocumentAdapter(mcDocument);
          IRegion[] ids=ModelHelper.findIds(errorMessage);
          Hashtable[] props=new Hashtable[ids.length];
          for (int j=0; j < ids.length; j++) {
            String id=errorDocument.get(ids[j].getOffset(),ids[j].getLength());
            int[] coordinates=ModelHelper.calculateCoordinates(mcDocument,mcSearcher,id);
            if (ModelHelper.EMPTY_LOCATION.equals(coordinates)) {
              throw new CoreException(new Status(IStatus.ERROR,TLCUIActivator.PLUGIN_ID,""String_Node_Str"" + id + ""String_Node_Str""));
            }
            props[j]=ModelHelper.createMarkerDescription(config,mcDocument,mcSearcher,errorMessage,IMarker.SEVERITY_ERROR,coordinates);
            String attributeName=(String)props[j].get(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_NAME);
            Integer attributeIndex=(Integer)props[j].get(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_IDX);
            if (attributeName != null) {
              String idReplacement=null;
              if (ModelHelper.isListAttribute(attributeName)) {
                List attributeValue=(List)config.getAttribute(attributeName,new ArrayList());
                int attributeNumber=(attributeIndex != null) ? attributeIndex.intValue() : 0;
                if (IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS.equals(attributeName) || IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS.equals(attributeName)) {
                  idReplacement=""String_Node_Str"";
                }
 else {
                  List valueList=ModelHelper.deserializeFormulaList(attributeValue);
                  Formula value=(Formula)valueList.get(attributeNumber);
                  idReplacement=value.getFormula();
                }
              }
 else {
                idReplacement=config.getAttribute(attributeName,ModelHelper.EMPTY_STRING);
              }
              errorMessage=errorMessage.substring(0,errorMessage.indexOf(id)) + idReplacement + errorMessage.substring(errorMessage.indexOf(id) + id.length());
            }
 else {
              throw new CoreException(new Status(IStatus.ERROR,TLCUIActivator.PLUGIN_ID,""String_Node_Str"" + id + ""String_Node_Str""));
            }
          }
          IRegion[] locations=ModelHelper.findLocations(errorMessage);
          String[] regionContent=new String[locations.length];
          for (int j=0; j < locations.length; j++) {
            String locationString=errorDocument.get(locations[j].getOffset(),locations[j].getLength());
            Location location=Location.parseLocation(locationString);
            if (location.source().equals(mcFile.getName().substring(0,mcFile.getName().length() - ""String_Node_Str"".length()))) {
              IRegion region=ModelHelper.locationToRegion(mcDocument,location);
              regionContent[j]=mcDocument.get(region.getOffset(),region.getLength());
              if (locationString != null && regionContent[j] != null) {
                errorMessage=errorMessage.replace(locationString,regionContent[j]);
              }
            }
          }
          for (int j=0; j < props.length; j++) {
            props[j].put(IMarker.MESSAGE,errorMessage);
            ModelHelper.installModelProblemMarker(config.getFile(),props[j],ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);
            markerInstalled=true;
          }
          if (!markerInstalled) {
            Hashtable prop=ModelHelper.createMarkerDescription(errorMessage,IMarker.SEVERITY_ERROR);
            ModelHelper.installModelProblemMarker(config.getFile(),prop,ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);
          }
          topError.setMessage(errorMessage);
          topError.setErrorCode(tlcRegion.getMessageCode());
        }
 catch (        BadLocationException e) {
          TLCUIActivator.logError(""String_Node_Str"",e);
        }
catch (        CoreException e) {
          TLCUIActivator.logError(""String_Node_Str"",e);
        }
      }
    }
  }
  return topError;
}","/** 
 * Creates an error object <br>This is a factory method
 * @param tlcRegion a region marking the error information in the document
 * @param tlcOutputDocument the document containing the error description
 * @return the TLC Error representing the error
 */
protected TLCError createError(TLCRegion tlcRegion,IDocument tlcOutputDocument){
  TLCError topError=new TLCError();
  if (tlcRegion instanceof TLCRegionContainer) {
    TLCRegionContainer container=(TLCRegionContainer)tlcRegion;
    ITypedRegion[] regions=container.getSubRegions();
    Assert.isTrue(regions.length < 3,""String_Node_Str"");
    for (int i=0; i < regions.length; i++) {
      if (regions[i] instanceof TLCRegion) {
        TLCError cause=createError((TLCRegion)regions[i],tlcOutputDocument);
        topError.setCause(cause);
      }
 else {
        String errorMessage;
        try {
          errorMessage=tlcOutputDocument.get(tlcRegion.getOffset(),tlcRegion.getLength());
          Document errorDocument=new Document();
          errorDocument.set(errorMessage);
          boolean markerInstalled=false;
          IFile mcFile=ModelHelper.getModelTLAFile(config);
          FileEditorInput mcFileEditorInput=new FileEditorInput((IFile)mcFile);
          FileDocumentProvider mcFileDocumentProvider=new FileDocumentProvider();
          mcFileDocumentProvider.connect(mcFileEditorInput);
          IDocument mcDocument=mcFileDocumentProvider.getDocument(mcFileEditorInput);
          FindReplaceDocumentAdapter mcSearcher=new FindReplaceDocumentAdapter(mcDocument);
          IRegion[] ids=ModelHelper.findIds(errorMessage);
          Hashtable[] props=new Hashtable[ids.length];
          for (int j=0; j < ids.length; j++) {
            String id=errorDocument.get(ids[j].getOffset(),ids[j].getLength());
            int[] coordinates=ModelHelper.calculateCoordinates(mcDocument,mcSearcher,id);
            if (ModelHelper.EMPTY_LOCATION.equals(coordinates)) {
              throw new CoreException(new Status(IStatus.ERROR,TLCUIActivator.PLUGIN_ID,""String_Node_Str"" + id + ""String_Node_Str""));
            }
            props[j]=ModelHelper.createMarkerDescription(config,mcDocument,mcSearcher,errorMessage,IMarker.SEVERITY_ERROR,coordinates);
            String attributeName=(String)props[j].get(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_NAME);
            Integer attributeIndex=(Integer)props[j].get(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_IDX);
            if (attributeName != null) {
              String idReplacement=null;
              if (ModelHelper.isListAttribute(attributeName)) {
                List attributeValue=(List)config.getAttribute(attributeName,new ArrayList());
                int attributeNumber=(attributeIndex != null) ? attributeIndex.intValue() : 0;
                if (IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS.equals(attributeName) || IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS.equals(attributeName)) {
                  idReplacement=""String_Node_Str"";
                }
 else {
                  List valueList=ModelHelper.deserializeFormulaList(attributeValue);
                  Formula value=(Formula)valueList.get(attributeNumber);
                  idReplacement=value.getFormula();
                }
              }
 else {
                idReplacement=config.getAttribute(attributeName,ModelHelper.EMPTY_STRING);
              }
              errorMessage=errorMessage.substring(0,errorMessage.indexOf(id)) + idReplacement + errorMessage.substring(errorMessage.indexOf(id) + id.length());
            }
 else {
              throw new CoreException(new Status(IStatus.ERROR,TLCUIActivator.PLUGIN_ID,""String_Node_Str"" + id + ""String_Node_Str""));
            }
          }
          IRegion[] locations=ModelHelper.findLocations(errorMessage);
          String[] regionContent=new String[locations.length];
          for (int j=0; j < locations.length; j++) {
            String locationString=errorDocument.get(locations[j].getOffset(),locations[j].getLength());
            Location location=Location.parseLocation(locationString);
            if (location.source().equals(mcFile.getName().substring(0,mcFile.getName().length() - ""String_Node_Str"".length()))) {
              IRegion region=ModelHelper.locationToRegion(mcDocument,location);
              regionContent[j]=mcDocument.get(region.getOffset(),region.getLength());
              if (locationString != null && regionContent[j] != null) {
                errorMessage=errorMessage.replace(locationString,regionContent[j]);
              }
            }
          }
          for (int j=0; j < props.length; j++) {
            props[j].put(IMarker.MESSAGE,errorMessage);
            ModelHelper.installModelProblemMarker(config.getFile(),props[j],ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);
            markerInstalled=true;
          }
          if (!markerInstalled) {
            Hashtable prop=ModelHelper.createMarkerDescription(errorMessage,IMarker.SEVERITY_ERROR);
            ModelHelper.installModelProblemMarker(config.getFile(),prop,ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);
          }
          topError.setMessage(errorMessage);
          topError.setErrorCode(tlcRegion.getMessageCode());
        }
 catch (        BadLocationException e) {
          TLCUIActivator.logError(""String_Node_Str"",e);
        }
catch (        CoreException e) {
          TLCUIActivator.logError(""String_Node_Str"",e);
        }
      }
    }
  }
  return topError;
}",0.9989049096550464
136029,"/** 
 * Returns a string describing the state with the variables representing trace explorer expressions replaced with the expressions.
 * @return
 */
public String getDescriptionWithTraceExpressions(){
  return null;
}","/** 
 * Returns a string describing the state with the variables representing trace explorer expressions replaced with the expressions.
 * @return
 */
public String getDescriptionWithTraceExpressions(){
  StringBuffer result=new StringBuffer();
  for (int i=0; i < variables.length; i++) {
    TLCVariable var=variables[i];
    result.append(""String_Node_Str"");
    if (var.isTraceExplorerVar()) {
      result.append(var.getSingleLineName());
    }
 else {
      result.append(var.getName());
    }
    result.append(""String_Node_Str"");
    if (var.getValue().toString() != null) {
      result.append(var.getValue().toString()).append(""String_Node_Str"");
    }
 else {
      result.append(var.getValue().toSimpleString());
    }
  }
  return result.toString();
}",0.4191251271617497
136030,"public void selectionChanged(SelectionChangedEvent event){
  if (!((IStructuredSelection)event.getSelection()).isEmpty()) {
    Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
    valueViewer.setDocument(new Document(selection.toString()));
  }
 else {
    valueViewer.setDocument(NO_VALUE_DOCUMENT());
  }
}","public void selectionChanged(SelectionChangedEvent event){
  if (!((IStructuredSelection)event.getSelection()).isEmpty()) {
    Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
    if (selection instanceof TLCState) {
      TLCState state=(TLCState)selection;
      valueViewer.setDocument(new Document(state.getDescriptionWithTraceExpressions()));
    }
 else {
      valueViewer.setDocument(new Document(selection.toString()));
    }
  }
 else {
    valueViewer.setDocument(NO_VALUE_DOCUMENT());
  }
}",0.7397260273972602
136031,"/** 
 * Creates the layout and fill it with data
 */
public void createPartControl(Composite parent){
  toolkit=new FormToolkit(parent.getDisplay());
  form=toolkit.createForm(parent);
  form.setText(""String_Node_Str"");
  toolkit.decorateFormHeading(form);
  GridLayout layout;
  GridData gd;
  Composite body=form.getBody();
  layout=new GridLayout(1,false);
  body.setLayout(layout);
  SashForm outerSashForm=new SashForm(body,SWT.VERTICAL);
  toolkit.adapt(outerSashForm);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  outerSashForm.setLayoutData(gd);
  errorViewer=FormHelper.createFormsOutputViewer(toolkit,outerSashForm,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  gd=new GridData(SWT.FILL,SWT.FILL,true,false);
  gd.heightHint=100;
  errorViewer.getControl().setLayoutData(gd);
  Composite belowErrorViewerComposite=toolkit.createComposite(outerSashForm);
  layout=new GridLayout(1,false);
  layout.marginWidth=0;
  belowErrorViewerComposite.setLayout(layout);
  traceExplorerComposite=new TraceExplorerComposite(belowErrorViewerComposite,""String_Node_Str"",""String_Node_Str"",toolkit,this);
  Section errorTraceSection=toolkit.createSection(belowErrorViewerComposite,Section.TITLE_BAR);
  errorTraceSection.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  errorTraceSection.setLayout(new GridLayout(1,true));
  errorTraceSection.setText(""String_Node_Str"");
  Composite errorTraceSectionClientArea=toolkit.createComposite(errorTraceSection);
  errorTraceSectionClientArea.setLayout(new GridLayout(1,true));
  errorTraceSection.setClient(errorTraceSectionClientArea);
  SashForm sashForm=new SashForm(errorTraceSectionClientArea,SWT.VERTICAL);
  toolkit.adapt(sashForm);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  sashForm.setLayoutData(gd);
  Tree tree=toolkit.createTree(sashForm,SWT.V_SCROLL | SWT.BORDER | SWT.FULL_SELECTION| SWT.SINGLE| SWT.VIRTUAL);
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  gd=new GridData(SWT.LEFT,SWT.TOP,true,false);
  gd.minimumHeight=300;
  tree.setLayoutData(gd);
  tree.setToolTipText(TOOLTIP);
  TraceDisplayResizer resizer=new TraceDisplayResizer();
  resizer.comp=sashForm;
  resizer.tree=tree;
  for (int i=0; i < StateLabelProvider.COLUMN_TEXTS.length; i++) {
    TreeColumn column=new TreeColumn(tree,SWT.LEFT);
    column.setText(StateLabelProvider.COLUMN_TEXTS[i]);
    column.setWidth(StateLabelProvider.COLUMN_WIDTH[i]);
    resizer.column[i]=column;
    column.setToolTipText(TOOLTIP);
  }
  tree.addControlListener(resizer);
  int eventType=SWT.Resize;
  resizer.column[0].addListener(eventType,resizer);
  variableViewer=new TreeViewer(tree);
  variableViewer.setContentProvider(new StateContentProvider());
  variableViewer.setFilters(new ViewerFilter[]{new StateFilter()});
  variableViewer.setLabelProvider(new StateLabelProvider());
  variableViewer.addDoubleClickListener(new ActionClickListener());
  variableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (!((IStructuredSelection)event.getSelection()).isEmpty()) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        valueViewer.setDocument(new Document(selection.toString()));
      }
 else {
        valueViewer.setDocument(NO_VALUE_DOCUMENT());
      }
    }
  }
);
  valueViewer=FormHelper.createFormsSourceViewer(toolkit,sashForm,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  valueViewer.setEditable(false);
  gd=new GridData(SWT.LEFT,SWT.TOP,true,false);
  valueViewer.getControl().setLayoutData(gd);
  int[] weights={1,4};
  outerSashForm.setWeights(weights);
  form.getToolBarManager().add(new HelpAction());
  form.getToolBarManager().update(true);
  clear();
  TLCUIHelper.setHelp(parent,IHelpConstants.TLC_ERROR_VIEW);
}","/** 
 * Creates the layout and fill it with data
 */
public void createPartControl(Composite parent){
  toolkit=new FormToolkit(parent.getDisplay());
  form=toolkit.createForm(parent);
  form.setText(""String_Node_Str"");
  toolkit.decorateFormHeading(form);
  GridLayout layout;
  GridData gd;
  Composite body=form.getBody();
  layout=new GridLayout(1,false);
  body.setLayout(layout);
  SashForm outerSashForm=new SashForm(body,SWT.VERTICAL);
  toolkit.adapt(outerSashForm);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  outerSashForm.setLayoutData(gd);
  errorViewer=FormHelper.createFormsOutputViewer(toolkit,outerSashForm,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  gd=new GridData(SWT.FILL,SWT.FILL,true,false);
  gd.heightHint=100;
  errorViewer.getControl().setLayoutData(gd);
  Composite belowErrorViewerComposite=toolkit.createComposite(outerSashForm);
  layout=new GridLayout(1,false);
  layout.marginWidth=0;
  belowErrorViewerComposite.setLayout(layout);
  traceExplorerComposite=new TraceExplorerComposite(belowErrorViewerComposite,""String_Node_Str"",""String_Node_Str"",toolkit,this);
  Section errorTraceSection=toolkit.createSection(belowErrorViewerComposite,Section.TITLE_BAR);
  errorTraceSection.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  errorTraceSection.setLayout(new GridLayout(1,true));
  errorTraceSection.setText(""String_Node_Str"");
  Composite errorTraceSectionClientArea=toolkit.createComposite(errorTraceSection);
  errorTraceSectionClientArea.setLayout(new GridLayout(1,true));
  errorTraceSection.setClient(errorTraceSectionClientArea);
  SashForm sashForm=new SashForm(errorTraceSectionClientArea,SWT.VERTICAL);
  toolkit.adapt(sashForm);
  gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  sashForm.setLayoutData(gd);
  Tree tree=toolkit.createTree(sashForm,SWT.V_SCROLL | SWT.BORDER | SWT.FULL_SELECTION| SWT.SINGLE| SWT.VIRTUAL);
  tree.setHeaderVisible(true);
  tree.setLinesVisible(true);
  gd=new GridData(SWT.LEFT,SWT.TOP,true,false);
  gd.minimumHeight=300;
  tree.setLayoutData(gd);
  tree.setToolTipText(TOOLTIP);
  TraceDisplayResizer resizer=new TraceDisplayResizer();
  resizer.comp=sashForm;
  resizer.tree=tree;
  for (int i=0; i < StateLabelProvider.COLUMN_TEXTS.length; i++) {
    TreeColumn column=new TreeColumn(tree,SWT.LEFT);
    column.setText(StateLabelProvider.COLUMN_TEXTS[i]);
    column.setWidth(StateLabelProvider.COLUMN_WIDTH[i]);
    resizer.column[i]=column;
    column.setToolTipText(TOOLTIP);
  }
  tree.addControlListener(resizer);
  int eventType=SWT.Resize;
  resizer.column[0].addListener(eventType,resizer);
  variableViewer=new TreeViewer(tree);
  variableViewer.setContentProvider(new StateContentProvider());
  variableViewer.setFilters(new ViewerFilter[]{new StateFilter()});
  variableViewer.setLabelProvider(new StateLabelProvider());
  variableViewer.addDoubleClickListener(new ActionClickListener());
  variableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (!((IStructuredSelection)event.getSelection()).isEmpty()) {
        Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
        if (selection instanceof TLCState) {
          TLCState state=(TLCState)selection;
          valueViewer.setDocument(new Document(state.getDescriptionWithTraceExpressions()));
        }
 else {
          valueViewer.setDocument(new Document(selection.toString()));
        }
      }
 else {
        valueViewer.setDocument(NO_VALUE_DOCUMENT());
      }
    }
  }
);
  valueViewer=FormHelper.createFormsSourceViewer(toolkit,sashForm,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  valueViewer.setEditable(false);
  gd=new GridData(SWT.LEFT,SWT.TOP,true,false);
  valueViewer.getControl().setLayoutData(gd);
  int[] weights={1,4};
  outerSashForm.setWeights(weights);
  form.getToolBarManager().add(new HelpAction());
  form.getToolBarManager().update(true);
  clear();
  TLCUIHelper.setHelp(parent,IHelpConstants.TLC_ERROR_VIEW);
}",0.9673335021524436
136032,"/** 
 * This only changes the tla file. This method adds a variable declaration for each element of traceExpressionData and, if the flag addDefinitions is true, defines the identifier of each element to be the expression for that element. If the expressions are x' + y and x > 3, The tla file will contain something like \* comment line VARIABLES __trace_var_21034978347834, __trace_var_90234782309 \* comment line trace_def_3214234234234 == x' + y ---- \* comment line trace_def_2342342342342 == x > 3 ----
 * @param traceExpressionData information about the trace expressions
 * @param attributeName
 * @param addDefinitions whether or not to define each identifier as the expression
 */
public void addTEVariablesAndDefinitions(TraceExpressionInformationHolder[] traceExpressionData,String attributeName,boolean addDefinitions){
  StringBuffer variableDecls=new StringBuffer();
  StringBuffer definitions=new StringBuffer();
  for (int i=0; i < traceExpressionData.length; i++) {
    TraceExpressionInformationHolder expressionInfo=traceExpressionData[i];
    variableDecls.append(expressionInfo.getVariableName());
    if (i != traceExpressionData.length - 1) {
      variableDecls.append(COMMA);
    }
    if (addDefinitions) {
      definitions.append(COMMENT).append(""String_Node_Str"").append(ATTRIBUTE).append(attributeName).append(CR);
      definitions.append(expressionInfo.getIdentifier()).append(DEFINES_CR).append(expressionInfo.getExpression()).append(CR);
      definitions.append(SEP).append(CR).append(CR);
    }
  }
  tlaBuffer.append(COMMENT).append(""String_Node_Str"").append(ATTRIBUTE).append(attributeName).append(CR);
  tlaBuffer.append(""String_Node_Str"").append(variableDecls.toString()).append(CR);
  tlaBuffer.append(SEP).append(CR).append(CR);
  if (addDefinitions) {
    tlaBuffer.append(definitions.toString());
  }
}","/** 
 * This only changes the tla file. This method adds a variable declaration for each element of traceExpressionData and, if the flag addDefinitions is true, defines the identifier of each element to be the expression for that element. If the expressions are x' + y and x > 3, The tla file will contain something like \* comment line VARIABLES __trace_var_21034978347834, __trace_var_90234782309 \* comment line trace_def_3214234234234 == x' + y ---- \* comment line trace_def_2342342342342 == x > 3 ----
 * @param traceExpressionData information about the trace expressions
 * @param attributeName
 * @param addDefinitions whether or not to define each identifier as the expression
 */
public void addTEVariablesAndDefinitions(TraceExpressionInformationHolder[] traceExpressionData,String attributeName,boolean addDefinitions){
  if (traceExpressionData.length == 0) {
    return;
  }
  StringBuffer variableDecls=new StringBuffer();
  StringBuffer definitions=new StringBuffer();
  for (int i=0; i < traceExpressionData.length; i++) {
    TraceExpressionInformationHolder expressionInfo=traceExpressionData[i];
    variableDecls.append(expressionInfo.getVariableName());
    if (i != traceExpressionData.length - 1) {
      variableDecls.append(COMMA);
    }
    if (addDefinitions) {
      definitions.append(COMMENT).append(""String_Node_Str"").append(ATTRIBUTE).append(attributeName).append(CR);
      definitions.append(expressionInfo.getIdentifier()).append(DEFINES_CR).append(expressionInfo.getExpression()).append(CR);
      definitions.append(SEP).append(CR).append(CR);
    }
  }
  tlaBuffer.append(COMMENT).append(""String_Node_Str"").append(ATTRIBUTE).append(attributeName).append(CR);
  tlaBuffer.append(""String_Node_Str"").append(variableDecls.toString()).append(CR);
  tlaBuffer.append(SEP).append(CR).append(CR);
  if (addDefinitions) {
    tlaBuffer.append(definitions.toString());
  }
}",0.9847959455854894
136033,"/** 
 * Fill data into the view This includes loading expressions into the trace explorer table.
 * @param modelName name of the model displayed in the view title section
 * @param problems a list of  {@link TLCError} objects representing the errors.
 * @param isTraceExplorerData true if the new error data is from a run of the trace explorer
 */
protected void fill(String modelName,List problems,boolean isTraceExplorerData){
  try {
    traceExplorerComposite.getTableViewer().setInput(new Vector());
    FormHelper.setSerializedInput(traceExplorerComposite.getTableViewer(),configFileHandle.getAttribute(IModelConfigurationConstants.TRACE_EXPLORE_EXPRESSIONS,new Vector()));
  }
 catch (  CoreException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
  if (problems != null && !problems.isEmpty()) {
    List states=null;
    StringBuffer buffer=new StringBuffer();
    for (int i=0; i < problems.size(); i++) {
      TLCError error=(TLCError)problems.get(i);
      if (!isTraceExplorerData) {
        appendError(buffer,error);
      }
 else       if (error.getErrorCode() != EC.TLC_INVARIANT_VIOLATED_BEHAVIOR && error.getErrorCode() != EC.TLC_TEMPORAL_PROPERTY_VIOLATED) {
        buffer.append(""String_Node_Str"");
        appendError(buffer,error);
      }
      if (error.hasTrace()) {
        Assert.isTrue(states == null,""String_Node_Str"");
        states=error.getStates();
      }
    }
    if (states == null) {
      states=EMPTY_LIST();
    }
    List oldStates=(List)variableViewer.getInput();
    boolean isNewTrace=states != null && oldStates != null && !(states == oldStates);
    if (isNewTrace) {
      setDiffInfo(states);
    }
    if (!isTraceExplorerData || !(buffer.length() == 0)) {
      IDocument document=errorViewer.getDocument();
      try {
        document.replace(0,document.getLength(),buffer.toString());
      }
 catch (      BadLocationException e) {
        TLCUIActivator.logError(""String_Node_Str"" + buffer.toString(),e);
      }
    }
    if (isNewTrace) {
      this.variableViewer.setInput(states);
      traceExplorerComposite.changeExploreEnablement(true);
    }
    if (states != null && !states.isEmpty()) {
      variableViewer.expandToLevel(2);
    }
    this.form.setText(modelName);
  }
 else {
    clear();
  }
}","/** 
 * Fill data into the view This includes loading expressions into the trace explorer table.
 * @param modelName name of the model displayed in the view title section
 * @param problems a list of  {@link TLCError} objects representing the errors.
 * @param isTraceExplorerData true if the new error data is from a run of the trace explorer
 */
protected void fill(String modelName,List problems,boolean isTraceExplorerData){
  try {
    traceExplorerComposite.getTableViewer().setInput(new Vector());
    FormHelper.setSerializedInput(traceExplorerComposite.getTableViewer(),configFileHandle.getAttribute(IModelConfigurationConstants.TRACE_EXPLORE_EXPRESSIONS,new Vector()));
  }
 catch (  CoreException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
  if (problems != null && !problems.isEmpty()) {
    List states=null;
    StringBuffer buffer=new StringBuffer();
    for (int i=0; i < problems.size(); i++) {
      TLCError error=(TLCError)problems.get(i);
      if (!isTraceExplorerData) {
        appendError(buffer,error);
      }
 else       if (error.getErrorCode() != EC.TLC_INVARIANT_VIOLATED_BEHAVIOR && error.getErrorCode() != EC.TLC_TEMPORAL_PROPERTY_VIOLATED) {
        appendError(buffer,error);
      }
      if (error.hasTrace()) {
        Assert.isTrue(states == null,""String_Node_Str"");
        states=error.getStates();
      }
    }
    if (states == null) {
      states=EMPTY_LIST();
    }
    List oldStates=(List)variableViewer.getInput();
    boolean isNewTrace=states != null && oldStates != null && !(states == oldStates);
    if (isNewTrace) {
      setDiffInfo(states);
    }
    if (!isTraceExplorerData || buffer.length() > 0) {
      IDocument document=errorViewer.getDocument();
      try {
        if (isTraceExplorerData) {
          buffer.append(""String_Node_Str"");
        }
        document.replace(0,document.getLength(),buffer.toString());
      }
 catch (      BadLocationException e) {
        TLCUIActivator.logError(""String_Node_Str"" + buffer.toString(),e);
      }
    }
    if (isNewTrace) {
      this.variableViewer.setInput(states);
      traceExplorerComposite.changeExploreEnablement(true);
    }
    if (states != null && !states.isEmpty()) {
      variableViewer.expandToLevel(2);
    }
    this.form.setText(modelName);
  }
 else {
    clear();
  }
}",0.9702238643773092
136034,"public void onDone(){
  if (lastDetectedError != null) {
    this.errors.add(lastDetectedError);
    informPresenter(ITLCModelLaunchDataPresenter.ERRORS);
  }
  this.setCurrentStatus(NOT_RUNNING);
  informPresenter(ITLCModelLaunchDataPresenter.CURRENT_STATUS);
  isDone=true;
}","public void onDone(){
  if (lastDetectedError != null) {
    this.errors.add(lastDetectedError);
    informPresenter(ITLCModelLaunchDataPresenter.ERRORS);
  }
  registerTraceForTraceExplorer();
  this.setCurrentStatus(NOT_RUNNING);
  informPresenter(ITLCModelLaunchDataPresenter.CURRENT_STATUS);
  isDone=true;
}",0.9405772495755518
136035,"/** 
 * A factory for Back to state states
 * @param number2
 * @return
 */
private static TLCState BACK_TO_STATE(int number){
  TLCState state=new TLCState(number);
  state.isBackToState=true;
  return state;
}","/** 
 * A factory for Back to state states
 * @param number2
 * @return
 */
protected static TLCState BACK_TO_STATE(int number){
  TLCState state=new TLCState(number);
  state.isBackToState=true;
  return state;
}",0.9716981132075472
136036,"/** 
 * A factory for stuttering states
 */
public static TLCState STUTTERING_STATE(int number){
  TLCState state=new TLCState(number);
  state.stuttering=true;
  return state;
}","/** 
 * A factory for stuttering states
 */
protected static TLCState STUTTERING_STATE(int number){
  TLCState state=new TLCState(number);
  state.stuttering=true;
  return state;
}",0.9693593314763232
136037,"public TLCVariable(String name,TLCVariableValue value){
  this.name=name;
  this.value=value;
}","public TLCVariable(String name,TLCVariableValue value){
  this.name=name;
  this.value=value;
  this.isTraceExplorerVar=false;
}",0.852017937219731
136038,"/** 
 * Collects and stores trace expression information for later use.
 */
private void getTraceExpressionsInformation(){
  if (traceExpressionDataTable == null) {
    traceExpressionDataTable=new Hashtable();
  }
 else {
    traceExpressionDataTable.clear();
  }
  try {
    IFile teFile=ModelHelper.getTraceExplorerTLAFile(getConfig());
    FileEditorInput teFileEditorInput=new FileEditorInput((IFile)teFile);
    FileDocumentProvider teFileDocumentProvider=new FileDocumentProvider();
    teFileDocumentProvider.connect(teFileEditorInput);
    IDocument teDocument=teFileDocumentProvider.getDocument(teFileEditorInput);
    FindReplaceDocumentAdapter teSearcher=new FindReplaceDocumentAdapter(teDocument);
    String regularExpression=FindReplaceDocumentAdapter.escapeForRegExPattern(""String_Node_Str"") + ""String_Node_Str"" + ModelWriter.TRACE_EXPR_VAR_SCHEME+ ""String_Node_Str"";
    IRegion region=teSearcher.find(0,regularExpression,true,true,false,true);
    while (region != null) {
      System.out.println(teDocument.get(region.getOffset(),region.getLength()));
      String commentString=teDocument.get(region.getOffset(),region.getLength());
      String[] stringSections=commentString.split(""String_Node_Str"");
      int level=Integer.parseInt(stringSections[1]);
      String variableName=stringSections[2];
      String expression=stringSections[3];
      TraceExpressionInformationHolder expressionData=new TraceExpressionInformationHolder(expression,null,variableName);
      expressionData.setLevel(level);
      this.traceExpressionDataTable.put(variableName.trim(),expressionData);
      region=teSearcher.find(region.getOffset() + region.getLength(),regularExpression,true,true,false,true);
    }
  }
 catch (  CoreException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
catch (  BadLocationException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
}","/** 
 * Collects and stores trace expression information for later use.
 */
private void getTraceExpressionsInformation(){
  if (traceExpressionDataTable == null) {
    traceExpressionDataTable=new Hashtable();
  }
 else {
    traceExpressionDataTable.clear();
  }
  try {
    IFile teFile=ModelHelper.getTraceExplorerTLAFile(getConfig());
    FileEditorInput teFileEditorInput=new FileEditorInput((IFile)teFile);
    FileDocumentProvider teFileDocumentProvider=new FileDocumentProvider();
    teFileDocumentProvider.connect(teFileEditorInput);
    IDocument teDocument=teFileDocumentProvider.getDocument(teFileEditorInput);
    FindReplaceDocumentAdapter teSearcher=new FindReplaceDocumentAdapter(teDocument);
    String regularExpression=FindReplaceDocumentAdapter.escapeForRegExPattern(""String_Node_Str"") + ""String_Node_Str"" + ModelWriter.TRACE_EXPR_VAR_SCHEME+ ""String_Node_Str"";
    IRegion region=teSearcher.find(0,regularExpression,true,true,false,true);
    while (region != null) {
      System.out.println(teDocument.get(region.getOffset(),region.getLength()));
      String commentString=teDocument.get(region.getOffset(),region.getLength());
      String[] stringSections=commentString.split(""String_Node_Str"",4);
      int level=Integer.parseInt(stringSections[1]);
      String variableName=stringSections[2];
      String expression=stringSections[3];
      TraceExpressionInformationHolder expressionData=new TraceExpressionInformationHolder(expression,null,variableName);
      expressionData.setLevel(level);
      this.traceExpressionDataTable.put(variableName.trim(),expressionData);
      region=teSearcher.find(region.getOffset() + region.getLength(),regularExpression,true,true,false,true);
    }
  }
 catch (  CoreException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
catch (  BadLocationException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
}",0.9994725738396624
136039,"public ILaunchConfigurationWorkingCopy getConfig(){
  return configurationCopy;
}","/** 
 * Returns a working copy of the launch configuration for this model.
 * @return
 */
public ILaunchConfigurationWorkingCopy getConfig(){
  return configurationCopy;
}",0.6428571428571429
136040,"/** 
 * Saves the expressions in the table to the configuration whose errors are currently loaded in the error view where this composite appears.
 * @return a handle on the underlying configuration file, can return null
 */
private ILaunchConfiguration saveInput(){
  try {
    if (view.getCurrentConfigFileHandle() != null) {
      ILaunchConfigurationWorkingCopy configCopy=view.getCurrentConfigFileHandle().getWorkingCopy();
      configCopy.setAttribute(IModelConfigurationConstants.TRACE_EXPLORE_EXPRESSIONS,FormHelper.getSerializedInput(tableViewer));
      ILaunchConfiguration savedConfig=configCopy.doSave();
      return savedConfig;
    }
  }
 catch (  CoreException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
  return null;
}","/** 
 * Saves the expressions in the table to the configuration whose errors are currently loaded in the error view where this composite appears.
 * @return a handle on the underlying configuration file, can return null
 */
private ILaunchConfiguration saveInput(){
  try {
    if (view.getCurrentConfigFileHandle() != null) {
      ModelEditor modelEditor=((ModelEditor)ModelHelper.getEditorWithModelOpened(view.getCurrentConfigFileHandle()));
      ILaunchConfigurationWorkingCopy configCopy=null;
      if (modelEditor != null) {
        configCopy=modelEditor.getConfig();
      }
 else {
        configCopy=view.getCurrentConfigFileHandle().getWorkingCopy();
      }
      configCopy.setAttribute(IModelConfigurationConstants.TRACE_EXPLORE_EXPRESSIONS,FormHelper.getSerializedInput(tableViewer));
      ILaunchConfiguration savedConfig=configCopy.doSave();
      return savedConfig;
    }
  }
 catch (  CoreException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
  return null;
}",0.8605714285714285
136041,"/** 
 * We use this method to check for parsing errors and to determine the level of each trace explorer expression, i.e. whether there are primed variables or not. If an expression is a temporal formula, this should show an error to the user.
 */
public boolean finalLaunchCheck(ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"",4);
  IProject project=ResourceHelper.getProject(specName);
  IFolder launchDir=project.getFolder(modelName);
  IFile rootModule=launchDir.getFile(ModelHelper.TE_FILE_TLA);
  monitor.worked(1);
  IParseResult parseResult=ToolboxHandle.parseModule(rootModule,new SubProgressMonitor(monitor,1),false,false);
  Assert.isTrue(parseResult instanceof ParseResult,""String_Node_Str"");
  if (parseResult.getDetectedErrors().size() > 0) {
    StringBuffer errorMessage=new StringBuffer();
    Iterator it=parseResult.getDetectedErrors().iterator();
    while (it.hasNext()) {
      Object next=it.next();
      if (next instanceof TLAMarkerInformationHolder) {
        errorMessage.append(((TLAMarkerInformationHolder)next).getMessage() + ""String_Node_Str"");
      }
 else {
        TLCActivator.logDebug(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    MessageDialog.openError(UIHelper.getShellProvider().getShell(),""String_Node_Str"",errorMessage.toString());
    return false;
  }
  OpDefNode[] opDefNodes=((ParseResult)parseResult).getSpecObj().getExternalModuleTable().getRootModule().getOpDefs();
  Hashtable nodeTable=new Hashtable(opDefNodes.length);
  Assert.isNotNull(opDefNodes,""String_Node_Str"");
  for (int j=0; j < opDefNodes.length; j++) {
    String key=opDefNodes[j].getName().toString();
    nodeTable.put(key,opDefNodes[j]);
  }
  for (int i=0; i < traceExpressionData.length; i++) {
    OpDefNode opDefNode=(OpDefNode)nodeTable.get(traceExpressionData[i].getIdentifier());
    traceExpressionData[i].setLevel(opDefNode.getBody().getLevel());
  }
  ModelHelper.createOrClearFiles(new IFile[]{tlaFile,cfgFile,outFile},monitor);
  monitor.subTask(""String_Node_Str"");
  ModelWriter writer=new ModelWriter();
  writer.addTraceExplorerExpressionInfoComments(traceExpressionData);
  writer.addPrimer(ModelHelper.TE_MODEL_NAME,ResourceHelper.getModuleName(specRootFilename));
  writer.addTraceExprVarDecsAndDefsPostParse(traceExpressionData,TRACE_EXPLORE_EXPRESSIONS);
  writeModelInfo(configuration,writer);
  writer.addFormulaList(ModelWriter.createTraceInitContent(configuration.getAttribute(TRACE_INIT,EMPTY_STRING),traceExpressionData),""String_Node_Str"",""String_Node_Str"");
  writer.addFormulaList(ModelWriter.createTraceNextContent(configuration.getAttribute(TRACE_NEXT,new Vector()),traceExpressionData),""String_Node_Str"",""String_Node_Str"");
  boolean isBackToState=configuration.getAttribute(IS_TRACE_BACK_TO_STATE,false);
  boolean isStuttering=configuration.getAttribute(IS_TRACE_STUTTERING,false);
  String finalStateConj=configuration.getAttribute(TRACE_FINAL_STATE,EMPTY_STRING);
  if (isStuttering) {
    writer.addStutteringPropertyForTraceExplorer(finalStateConj);
  }
 else   if (isBackToState) {
    writer.addBackToStatePropertyForTraceExplorer(finalStateConj,configuration.getAttribute(TRACE_BACK_TO_STATE,EMPTY_STRING));
  }
 else {
    writer.addInvariantForTraceExplorer(finalStateConj);
  }
  writer.writeFiles(tlaFile,cfgFile,monitor);
  IFolder modelFolder=project.getFolder(modelName);
  modelFolder.refreshLocal(IResource.DEPTH_ONE,new SubProgressMonitor(monitor,100));
  return true;
}","/** 
 * We use this method to check for parsing errors and to determine the level of each trace explorer expression, i.e. whether there are primed variables or not. If an expression is a temporal formula, this should show an error to the user.
 */
public boolean finalLaunchCheck(ILaunchConfiguration configuration,String mode,IProgressMonitor monitor) throws CoreException {
  monitor.beginTask(""String_Node_Str"",4);
  IProject project=ResourceHelper.getProject(specName);
  IFolder launchDir=project.getFolder(modelName);
  IFile rootModule=launchDir.getFile(ModelHelper.TE_FILE_TLA);
  monitor.worked(1);
  IParseResult parseResult=ToolboxHandle.parseModule(rootModule,new SubProgressMonitor(monitor,1),false,false);
  Assert.isTrue(parseResult instanceof ParseResult,""String_Node_Str"");
  if (parseResult.getDetectedErrors().size() > 0) {
    StringBuffer errorMessage=new StringBuffer();
    Iterator it=parseResult.getDetectedErrors().iterator();
    while (it.hasNext()) {
      Object next=it.next();
      if (next instanceof TLAMarkerInformationHolder) {
        TLAMarkerInformationHolder errorInfo=(TLAMarkerInformationHolder)next;
        if (errorInfo.getModuleName().equals(ModelHelper.TE_MODEL_NAME)) {
          errorMessage.append(errorInfo.getMessage() + ""String_Node_Str"");
        }
 else {
          errorMessage.append(errorInfo.getMessage() + ""String_Node_Str"");
        }
      }
 else {
        TLCActivator.logDebug(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    MessageDialog.openError(UIHelper.getShellProvider().getShell(),""String_Node_Str"",errorMessage.toString());
    return false;
  }
  OpDefNode[] opDefNodes=((ParseResult)parseResult).getSpecObj().getExternalModuleTable().getRootModule().getOpDefs();
  Hashtable nodeTable=new Hashtable(opDefNodes.length);
  Assert.isNotNull(opDefNodes,""String_Node_Str"");
  for (int j=0; j < opDefNodes.length; j++) {
    String key=opDefNodes[j].getName().toString();
    nodeTable.put(key,opDefNodes[j]);
  }
  Vector levelThreeExpressions=new Vector();
  for (int i=0; i < traceExpressionData.length; i++) {
    OpDefNode opDefNode=(OpDefNode)nodeTable.get(traceExpressionData[i].getIdentifier());
    int level=opDefNode.getBody().getLevel();
    traceExpressionData[i].setLevel(level);
    if (level == 3) {
      levelThreeExpressions.add(traceExpressionData[i]);
    }
  }
  if (!levelThreeExpressions.isEmpty()) {
    StringBuffer errorBuffer=new StringBuffer();
    errorBuffer.append(""String_Node_Str"");
    Iterator it=levelThreeExpressions.iterator();
    while (it.hasNext()) {
      TraceExpressionInformationHolder expressionInfo=(TraceExpressionInformationHolder)it.next();
      errorBuffer.append(expressionInfo.getExpression() + ""String_Node_Str"");
    }
    MessageDialog.openError(UIHelper.getShellProvider().getShell(),""String_Node_Str"",errorBuffer.toString());
    return false;
  }
  ModelHelper.createOrClearFiles(new IFile[]{tlaFile,cfgFile,outFile},monitor);
  monitor.subTask(""String_Node_Str"");
  ModelWriter writer=new ModelWriter();
  writer.addTraceExplorerExpressionInfoComments(traceExpressionData);
  writer.addPrimer(ModelHelper.TE_MODEL_NAME,ResourceHelper.getModuleName(specRootFilename));
  writer.addTraceExprVarDecsAndDefsPostParse(traceExpressionData,TRACE_EXPLORE_EXPRESSIONS);
  writeModelInfo(configuration,writer);
  writer.addFormulaList(ModelWriter.createTraceInitContent(configuration.getAttribute(TRACE_INIT,EMPTY_STRING),traceExpressionData),""String_Node_Str"",""String_Node_Str"");
  writer.addFormulaList(ModelWriter.createTraceNextContent(configuration.getAttribute(TRACE_NEXT,new Vector()),traceExpressionData),""String_Node_Str"",""String_Node_Str"");
  boolean isBackToState=configuration.getAttribute(IS_TRACE_BACK_TO_STATE,false);
  boolean isStuttering=configuration.getAttribute(IS_TRACE_STUTTERING,false);
  String finalStateConj=configuration.getAttribute(TRACE_FINAL_STATE,EMPTY_STRING);
  if (isStuttering) {
    writer.addStutteringPropertyForTraceExplorer(finalStateConj);
  }
 else   if (isBackToState) {
    writer.addBackToStatePropertyForTraceExplorer(finalStateConj,configuration.getAttribute(TRACE_BACK_TO_STATE,EMPTY_STRING));
  }
 else {
    writer.addInvariantForTraceExplorer(finalStateConj);
  }
  writer.writeFiles(tlaFile,cfgFile,monitor);
  IFolder modelFolder=project.getFolder(modelName);
  modelFolder.refreshLocal(IResource.DEPTH_ONE,new SubProgressMonitor(monitor,100));
  return true;
}",0.8739201201953174
136042,"/** 
 * Converts four-int-location to a region TODO: unit test!
 * @param document
 * @param location
 * @return
 * @throws BadLocationException 
 */
public static IRegion locationToRegion(IDocument document,Location location) throws BadLocationException {
  int offset=document.getLineOffset(location.beginLine() - 1) + location.beginColumn() - 1;
  int length=location.endColumn() - location.beginColumn() + 1;
  for (int i=location.beginLine(); i < location.endLine(); i++) {
    length+=document.getLineOffset(i);
  }
  return new Region(offset,length);
}","/** 
 * Converts four-int-location to a region TODO: unit test!
 * @param document
 * @param location
 * @return
 * @throws BadLocationException 
 */
public static IRegion locationToRegion(IDocument document,Location location) throws BadLocationException {
  int offset=document.getLineOffset(location.beginLine() - 1) + location.beginColumn() - 1;
  int length=document.getLineOffset(location.endLine() - 1) + location.endColumn() - offset;
  return new Region(offset,length);
}",0.7552986512524085
136043,"private void updateLocation(){
  int lvi=0;
  location[0]=java.lang.Integer.MAX_VALUE;
  location[1]=java.lang.Integer.MAX_VALUE;
  location[2]=java.lang.Integer.MIN_VALUE;
  location[3]=java.lang.Integer.MIN_VALUE;
  if (zero != null) {
    for (lvi=0; lvi < zero.length; lvi++) {
      if (zero[lvi].location[0] != java.lang.Integer.MAX_VALUE) {
        location[0]=Math.min(location[0],zero[lvi].location[0]);
        if (location[0] == zero[lvi].location[0])         location[1]=Math.min(location[1],zero[lvi].location[1]);
        location[2]=Math.max(location[2],zero[lvi].location[2]);
        if (location[2] == zero[lvi].location[2])         location[3]=Math.max(location[3],zero[lvi].location[3]);
      }
    }
  }
  if (one != null) {
    for (lvi=0; lvi < one.length; lvi++) {
      if (one[lvi].location[0] != java.lang.Integer.MAX_VALUE) {
        location[0]=Math.min(location[0],one[lvi].location[0]);
        if (location[0] == one[lvi].location[0])         location[1]=Math.min(location[1],one[lvi].location[1]);
        location[2]=Math.max(location[2],one[lvi].location[2]);
        if (location[2] == one[lvi].location[2])         location[3]=Math.max(location[3],one[lvi].location[3]);
      }
    }
  }
}","/** 
 * updateLocation() computes the location field from the location fields of the heirs (descendants).  This would seem to be a matter of just copying the location fields of the first and last heirs, in the  obvious way.  However, there seem to be some nodes with no heirs that have their locations set to (java.lang.Integer.MAX_VALUE, ...MAX_VALUE, ...MIN_VALUE, ...MIN_VALUE) The only ones I've found are N_IdPrefix nodes, which don't have any corresponding tokens in the module.  Instead of being efficient and looking for the first and last heirs that have a real location, we write a simple loop that works regardless of how the heirs are ordered.   LL 26 Nov 2009
 */
private void updateLocation(){
  int lvi=0;
  location[0]=java.lang.Integer.MAX_VALUE;
  location[1]=java.lang.Integer.MAX_VALUE;
  location[2]=java.lang.Integer.MIN_VALUE;
  location[3]=java.lang.Integer.MIN_VALUE;
  if (zero != null) {
    for (lvi=0; lvi < zero.length; lvi++) {
      if ((zero[lvi].location[0] < location[0]) || (zero[lvi].location[0] == location[0] && zero[lvi].location[1] < location[1])) {
        location[0]=zero[lvi].location[0];
        location[1]=zero[lvi].location[1];
      }
      if ((zero[lvi].location[2] > location[2]) || (zero[lvi].location[2] == location[2] && zero[lvi].location[3] > location[3])) {
        location[2]=zero[lvi].location[2];
        location[3]=zero[lvi].location[3];
      }
    }
  }
  if (one != null) {
    for (lvi=0; lvi < one.length; lvi++) {
      if ((one[lvi].location[0] < location[0]) || (one[lvi].location[0] == location[0] && one[lvi].location[1] < location[1])) {
        location[0]=one[lvi].location[0];
        location[1]=one[lvi].location[1];
      }
      if ((one[lvi].location[2] > location[2]) || (one[lvi].location[2] == location[2] && one[lvi].location[3] > location[3])) {
        location[2]=one[lvi].location[2];
        location[3]=one[lvi].location[3];
      }
    }
  }
}",0.3562855337965888
136044,"/** 
 * Creates an error object <br>This is a factory method
 * @param tlcRegion a region marking the error information in the document
 * @param tlcOutputDocument the document containing the error description
 * @return the TLC Error representing the error
 */
private TLCError createError(TLCRegion tlcRegion,IDocument tlcOutputDocument){
  TLCError topError=new TLCError();
  if (tlcRegion instanceof TLCRegionContainer) {
    TLCRegionContainer container=(TLCRegionContainer)tlcRegion;
    ITypedRegion[] regions=container.getSubRegions();
    Assert.isTrue(regions.length < 3,""String_Node_Str"");
    for (int i=0; i < regions.length; i++) {
      if (regions[i] instanceof TLCRegion) {
        TLCError cause=createError((TLCRegion)regions[i],tlcOutputDocument);
        topError.setCause(cause);
      }
 else {
        String errorMessage;
        try {
          errorMessage=tlcOutputDocument.get(tlcRegion.getOffset(),tlcRegion.getLength());
          Document errorDocument=new Document();
          errorDocument.set(errorMessage);
          boolean markerInstalled=false;
          IFile mcFile=ModelHelper.getModelTLAFile(config);
          FileEditorInput mcFileEditorInput=new FileEditorInput((IFile)mcFile);
          FileDocumentProvider mcFileDocumentProvider=new FileDocumentProvider();
          mcFileDocumentProvider.connect(mcFileEditorInput);
          IDocument mcDocument=mcFileDocumentProvider.getDocument(mcFileEditorInput);
          FindReplaceDocumentAdapter mcSearcher=new FindReplaceDocumentAdapter(mcDocument);
          IRegion[] ids=ModelHelper.findIds(errorMessage);
          Hashtable[] props=new Hashtable[ids.length];
          for (int j=0; j < ids.length; j++) {
            String id=errorDocument.get(ids[j].getOffset(),ids[j].getLength());
            int[] coordinates=ModelHelper.calculateCoordinates(mcDocument,mcSearcher,id);
            if (ModelHelper.EMPTY_LOCATION.equals(coordinates)) {
              throw new CoreException(new Status(IStatus.ERROR,TLCUIActivator.PLUGIN_ID,""String_Node_Str"" + id + ""String_Node_Str""));
            }
            props[j]=ModelHelper.createMarkerDescription(config,mcDocument,mcSearcher,errorMessage,IMarker.SEVERITY_ERROR,coordinates);
            String attributeName=(String)props[j].get(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_NAME);
            Integer attributeIndex=(Integer)props[j].get(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_IDX);
            if (attributeName != null) {
              String idReplacement=null;
              if (ModelHelper.isListAttribute(attributeName)) {
                List attributeValue=(List)config.getAttribute(attributeName,new ArrayList());
                int attributeNumber=(attributeIndex != null) ? attributeIndex.intValue() : 0;
                if (IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS.equals(attributeName) || IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS.equals(attributeName)) {
                  idReplacement=""String_Node_Str"";
                }
 else {
                  List valueList=ModelHelper.deserializeFormulaList(attributeValue);
                  Formula value=(Formula)valueList.get(attributeNumber);
                  idReplacement=value.getFormula();
                }
              }
 else {
                idReplacement=config.getAttribute(attributeName,ModelHelper.EMPTY_STRING);
              }
              errorMessage=errorMessage.substring(0,errorMessage.indexOf(id)) + idReplacement + errorMessage.substring(errorMessage.indexOf(id) + id.length());
            }
 else {
              throw new CoreException(new Status(IStatus.ERROR,TLCUIActivator.PLUGIN_ID,""String_Node_Str"" + id + ""String_Node_Str""));
            }
          }
          IRegion[] locations=ModelHelper.findLocations(errorMessage);
          String[] regionContent=new String[locations.length];
          for (int j=0; j < locations.length; j++) {
            String locationString=errorDocument.get(locations[j].getOffset(),locations[j].getLength());
            Location location=Location.parseLocation(locationString);
            if (location.source().equals(mcFile.getName())) {
              IRegion region=ModelHelper.locationToRegion(mcDocument,location);
              regionContent[j]=mcDocument.get(region.getOffset(),region.getLength());
            }
          }
          for (int j=0; j < props.length; j++) {
            props[j].put(IMarker.MESSAGE,errorMessage);
            ModelHelper.installModelProblemMarker(config.getFile(),props[j],ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);
            markerInstalled=true;
          }
          if (!markerInstalled) {
            Hashtable prop=ModelHelper.createMarkerDescription(errorMessage,IMarker.SEVERITY_ERROR);
            ModelHelper.installModelProblemMarker(config.getFile(),prop,ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);
          }
          topError.setMessage(errorMessage);
          topError.setErrorCode(tlcRegion.getMessageCode());
        }
 catch (        BadLocationException e) {
          TLCUIActivator.logError(""String_Node_Str"",e);
        }
catch (        CoreException e) {
          TLCUIActivator.logError(""String_Node_Str"",e);
        }
      }
    }
  }
  return topError;
}","/** 
 * Creates an error object <br>This is a factory method
 * @param tlcRegion a region marking the error information in the document
 * @param tlcOutputDocument the document containing the error description
 * @return the TLC Error representing the error
 */
private TLCError createError(TLCRegion tlcRegion,IDocument tlcOutputDocument){
  TLCError topError=new TLCError();
  if (tlcRegion instanceof TLCRegionContainer) {
    TLCRegionContainer container=(TLCRegionContainer)tlcRegion;
    ITypedRegion[] regions=container.getSubRegions();
    Assert.isTrue(regions.length < 3,""String_Node_Str"");
    for (int i=0; i < regions.length; i++) {
      if (regions[i] instanceof TLCRegion) {
        TLCError cause=createError((TLCRegion)regions[i],tlcOutputDocument);
        topError.setCause(cause);
      }
 else {
        String errorMessage;
        try {
          errorMessage=tlcOutputDocument.get(tlcRegion.getOffset(),tlcRegion.getLength());
          Document errorDocument=new Document();
          errorDocument.set(errorMessage);
          boolean markerInstalled=false;
          IFile mcFile=ModelHelper.getModelTLAFile(config);
          FileEditorInput mcFileEditorInput=new FileEditorInput((IFile)mcFile);
          FileDocumentProvider mcFileDocumentProvider=new FileDocumentProvider();
          mcFileDocumentProvider.connect(mcFileEditorInput);
          IDocument mcDocument=mcFileDocumentProvider.getDocument(mcFileEditorInput);
          FindReplaceDocumentAdapter mcSearcher=new FindReplaceDocumentAdapter(mcDocument);
          IRegion[] ids=ModelHelper.findIds(errorMessage);
          Hashtable[] props=new Hashtable[ids.length];
          for (int j=0; j < ids.length; j++) {
            String id=errorDocument.get(ids[j].getOffset(),ids[j].getLength());
            int[] coordinates=ModelHelper.calculateCoordinates(mcDocument,mcSearcher,id);
            if (ModelHelper.EMPTY_LOCATION.equals(coordinates)) {
              throw new CoreException(new Status(IStatus.ERROR,TLCUIActivator.PLUGIN_ID,""String_Node_Str"" + id + ""String_Node_Str""));
            }
            props[j]=ModelHelper.createMarkerDescription(config,mcDocument,mcSearcher,errorMessage,IMarker.SEVERITY_ERROR,coordinates);
            String attributeName=(String)props[j].get(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_NAME);
            Integer attributeIndex=(Integer)props[j].get(ModelHelper.TLC_MODEL_ERROR_MARKER_ATTRIBUTE_IDX);
            if (attributeName != null) {
              String idReplacement=null;
              if (ModelHelper.isListAttribute(attributeName)) {
                List attributeValue=(List)config.getAttribute(attributeName,new ArrayList());
                int attributeNumber=(attributeIndex != null) ? attributeIndex.intValue() : 0;
                if (IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS.equals(attributeName) || IModelConfigurationConstants.MODEL_PARAMETER_CONSTANTS.equals(attributeName)) {
                  idReplacement=""String_Node_Str"";
                }
 else {
                  List valueList=ModelHelper.deserializeFormulaList(attributeValue);
                  Formula value=(Formula)valueList.get(attributeNumber);
                  idReplacement=value.getFormula();
                }
              }
 else {
                idReplacement=config.getAttribute(attributeName,ModelHelper.EMPTY_STRING);
              }
              errorMessage=errorMessage.substring(0,errorMessage.indexOf(id)) + idReplacement + errorMessage.substring(errorMessage.indexOf(id) + id.length());
            }
 else {
              throw new CoreException(new Status(IStatus.ERROR,TLCUIActivator.PLUGIN_ID,""String_Node_Str"" + id + ""String_Node_Str""));
            }
          }
          IRegion[] locations=ModelHelper.findLocations(errorMessage);
          String[] regionContent=new String[locations.length];
          for (int j=0; j < locations.length; j++) {
            String locationString=errorDocument.get(locations[j].getOffset(),locations[j].getLength());
            Location location=Location.parseLocation(locationString);
            if (location.source().equals(mcFile.getName().substring(0,mcFile.getName().length() - ""String_Node_Str"".length()))) {
              IRegion region=ModelHelper.locationToRegion(mcDocument,location);
              regionContent[j]=mcDocument.get(region.getOffset(),region.getLength());
              errorMessage=errorMessage.replace(locationString,regionContent[j]);
            }
          }
          for (int j=0; j < props.length; j++) {
            props[j].put(IMarker.MESSAGE,errorMessage);
            ModelHelper.installModelProblemMarker(config.getFile(),props[j],ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);
            markerInstalled=true;
          }
          if (!markerInstalled) {
            Hashtable prop=ModelHelper.createMarkerDescription(errorMessage,IMarker.SEVERITY_ERROR);
            ModelHelper.installModelProblemMarker(config.getFile(),prop,ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);
          }
          errorMessage=errorMessage.replaceAll(""String_Node_Str"",""String_Node_Str"");
          errorMessage=errorMessage.replaceAll(""String_Node_Str"",""String_Node_Str"");
          topError.setMessage(errorMessage);
          topError.setErrorCode(tlcRegion.getMessageCode());
        }
 catch (        BadLocationException e) {
          TLCUIActivator.logError(""String_Node_Str"",e);
        }
catch (        CoreException e) {
          TLCUIActivator.logError(""String_Node_Str"",e);
        }
      }
    }
  }
  return topError;
}",0.9703593923675436
136045,"/** 
 * Appends the error description to the buffer
 * @param buffer string buffer to append the error description to
 * @param error error object
 */
private static void appendError(StringBuffer buffer,TLCError error){
  String message=error.getMessage();
  if (message != null && !message.equals(""String_Node_Str"")) {
    buffer.append(message).append(""String_Node_Str"");
  }
  if (error.getCause() != null) {
    appendError(buffer,error.getCause());
  }
}","/** 
 * Appends the error description to the buffer
 * @param buffer string buffer to append the error description to
 * @param error error object
 */
private static void appendError(StringBuffer buffer,TLCError error){
  String message=error.getMessage();
  if (message != null && !message.equals(""String_Node_Str"")) {
    buffer.append(message).append(""String_Node_Str"");
  }
  TLCError cause=error.getCause();
  while (cause != null) {
    if (message == null || !message.contains(cause.getMessage())) {
      appendError(buffer,cause);
      break;
    }
 else {
      cause=cause.getCause();
    }
  }
}",0.8134957825679475
136046,"/** 
 * Converts four-int-location to a region TODO: unit test!
 * @param document
 * @param location
 * @return
 * @throws BadLocationException 
 */
public static IRegion locationToRegion(IDocument document,Location location) throws BadLocationException {
  int offset=document.getLineOffset(location.beginLine()) + location.beginColumn();
  int length=location.endColumn() - location.beginColumn();
  for (int i=location.beginLine(); i < location.endLine(); i++) {
    length+=document.getLineOffset(i);
  }
  return new Region(offset,length);
}","/** 
 * Converts four-int-location to a region TODO: unit test!
 * @param document
 * @param location
 * @return
 * @throws BadLocationException 
 */
public static IRegion locationToRegion(IDocument document,Location location) throws BadLocationException {
  int offset=document.getLineOffset(location.beginLine() - 1) + location.beginColumn();
  int length=location.endColumn() - location.beginColumn();
  for (int i=location.beginLine(); i < location.endLine(); i++) {
    length+=document.getLineOffset(i);
  }
  return new Region(offset,length);
}",0.9963570127504554
136047,"/** 
 * Finds the locations in the given text and return the array of  regions pointing to those or an empty array, if no location were found. A location is a pointer in the TLA file, e.G. ""line 11, col 8 to line 14, col 26 of module Foo""
 * @param text text containing locations (error text)
 * @return array of regions or empty array
 */
public static IRegion[] findLocations(String text){
  if (text == null || text.length() == 0) {
    return new IRegion[0];
  }
  Matcher matcher=Location.LOCATION_MATCHER.matcher(text);
  Vector regions=new Vector();
  while (matcher.find()) {
    regions.add(new Region(matcher.start(),matcher.end() - matcher.start()));
  }
  return (IRegion[])regions.toArray(new IRegion[regions.size()]);
}","/** 
 * Finds the locations in the given text and return the array of  regions pointing to those or an empty array, if no location were found. A location is a pointer in the TLA file, e.G. ""line 11, col 8 to line 14, col 26 of module Foo""
 * @param text text containing locations (error text)
 * @return array of regions or empty array
 */
public static IRegion[] findLocations(String text){
  if (text == null || text.length() == 0) {
    return new IRegion[0];
  }
  Matcher matcher=Location.LOCATION_MATCHER.matcher(text);
  Vector regions=new Vector();
  while (matcher.find()) {
    regions.add(new Region(matcher.start(),matcher.end() - matcher.start()));
  }
  matcher=Location.LOCATION_MATCHER4.matcher(text);
  while (matcher.find()) {
    regions.add(new Region(matcher.start(),matcher.end() - matcher.start()));
  }
  return (IRegion[])regions.toArray(new IRegion[regions.size()]);
}",0.9010448678549478
136048,"/** 
 * Parses location from its string representation  
 * @param locationString the string representation produced by {@link Location#toString()} method
 * @return location if it could be parsed, or a {@link Location#nullLoc} otherwise
 */
public static Location parseLocation(String locationString){
  if (locationString == null || locationString.length() == 0 || UNKNOWN_LOCATION.equals(locationString)) {
    return nullLoc;
  }
  Matcher matcher;
  if ((matcher=LOCATION_MATCHER2.matcher(locationString)).matches()) {
    return moduleLocation(matcher.group(1));
  }
 else   if ((matcher=LOCATION_MATCHER.matcher(locationString)).matches()) {
    try {
      return new Location(UniqueString.uniqueStringOf(matcher.group(5)),Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)),Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)));
    }
 catch (    NumberFormatException e) {
      return nullLoc;
    }
  }
 else   if ((matcher=LOCATION_MATCHER3.matcher(locationString.trim())).matches()) {
    try {
      return new Location(UniqueString.uniqueStringOf(matcher.group(5)),Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)),Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)));
    }
 catch (    NumberFormatException e) {
      return nullLoc;
    }
  }
 else {
    return nullLoc;
  }
}","/** 
 * Parses location from its string representation  
 * @param locationString the string representation produced by {@link Location#toString()} method
 * @return location if it could be parsed, or a {@link Location#nullLoc} otherwise
 */
public static Location parseLocation(String locationString){
  if (locationString == null || locationString.length() == 0 || UNKNOWN_LOCATION.equals(locationString)) {
    return nullLoc;
  }
  Matcher matcher;
  if ((matcher=LOCATION_MATCHER2.matcher(locationString)).matches()) {
    return moduleLocation(matcher.group(1));
  }
 else   if ((matcher=LOCATION_MATCHER.matcher(locationString)).matches()) {
    try {
      return new Location(UniqueString.uniqueStringOf(matcher.group(5)),Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)),Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)));
    }
 catch (    NumberFormatException e) {
      return nullLoc;
    }
  }
 else   if ((matcher=LOCATION_MATCHER3.matcher(locationString.trim())).matches()) {
    try {
      return new Location(UniqueString.uniqueStringOf(matcher.group(5)),Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)),Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)));
    }
 catch (    NumberFormatException e) {
      return nullLoc;
    }
  }
 else   if ((matcher=LOCATION_MATCHER4.matcher(locationString.trim())).matches()) {
    try {
      return new Location(UniqueString.uniqueStringOf(matcher.group(5)),Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)),Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)));
    }
 catch (    NumberFormatException e) {
      return nullLoc;
    }
  }
 else {
    return nullLoc;
  }
}",0.8676706183915411
136049,"private static void GetArguments(String[] args){
  boolean outOption=false;
  boolean alignOutOption=false;
  boolean psOption=false;
  boolean nopsOption=false;
  int nextArg=0;
  int maxArg=args.length - 1;
  if (maxArg < 0) {
    CommandLineError(""String_Node_Str"");
  }
  ;
  if ((args[maxArg].length() != 0) && (args[maxArg].charAt(0) == '-')) {
    maxArg=maxArg + 1;
  }
  ;
  while (nextArg < maxArg) {
    String option=args[nextArg];
    if (option.equals(""String_Node_Str"")) {
      OutputMessageFile(Parameters.HelpFile);
      System.exit(0);
    }
 else     if (option.equals(""String_Node_Str"")) {
      OutputMessageFile(Parameters.InfoFile);
      System.exit(0);
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      try {
        Parameters.PSGrayLevel=Misc.stringToFloat(args[nextArg]);
      }
 catch (      Exception e) {
        CommandLineError(""String_Node_Str"" + args[nextArg]);
      }
      ;
      if ((Parameters.PSGrayLevel > 1) || (Parameters.PSGrayLevel < 0)) {
        CommandLineError(""String_Node_Str"" + Misc.floatToString(Parameters.PSGrayLevel,3));
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      psOption=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nopsOption=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.PSCommand=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXCommand=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      outOption=true;
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXOutputFile=RemoveExtension(args[nextArg]);
      if (HasPathPrefix(Parameters.LaTeXOutputFile)) {
        CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.TLAOut=true;
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.TLAOutFile=args[nextArg];
      if (Parameters.TLAOutFile.indexOf(""String_Node_Str"") == -1) {
        Parameters.TLAOutFile=Parameters.TLAOutFile + ""String_Node_Str"";
      }
      if (HasPathPrefix(Parameters.TLAOutFile)) {
        CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      alignOutOption=true;
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXAlignmentFile=RemoveExtension(args[nextArg]);
      if (HasPathPrefix(Parameters.LaTeXAlignmentFile)) {
        CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.Debug=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.TLACommentOption=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.CommentShading=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.PrintProlog=false;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.PrintEpilog=false;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.PrintLineNumbers=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.UserStyleFile=RemoveExtension(args[nextArg]);
      if ((Parameters.UserStyleFile != args[nextArg]) && (args[nextArg].indexOf(""String_Node_Str"") != args[nextArg].length() - 4)) {
        CommandLineError(""String_Node_Str"");
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXptSize=GetIntArg(args[nextArg],option);
      if ((Parameters.LaTeXptSize < 10) || (Parameters.LaTeXptSize > 12)) {
        CommandLineError(""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXtextwidth=GetIntArg(args[nextArg],option);
      if ((Parameters.LaTeXtextwidth < 100) || (Parameters.LaTeXtextwidth > 1000)) {
        CommandLineError(""String_Node_Str"" + Parameters.LaTeXtextwidth + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXtextheight=GetIntArg(args[nextArg],option);
      if ((Parameters.LaTeXtextheight < 75) || (Parameters.LaTeXtextheight > 1500)) {
        CommandLineError(""String_Node_Str"" + Parameters.LaTeXtextheight + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXhoffset=GetIntArg(args[nextArg],option);
      if ((Parameters.LaTeXhoffset < -250) || (Parameters.LaTeXhoffset > 250)) {
        CommandLineError(""String_Node_Str"" + Parameters.LaTeXhoffset + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXvoffset=GetIntArg(args[nextArg],option);
      if ((Parameters.LaTeXvoffset < -250) || (Parameters.LaTeXvoffset > 250)) {
        CommandLineError(""String_Node_Str"" + Parameters.LaTeXvoffset + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.MetaDir=args[nextArg];
      Parameters.ParentDir=new File(Parameters.MetaDir);
      if (!Parameters.ParentDir.exists()) {
        CommandLineError(""String_Node_Str"" + Parameters.MetaDir + ""String_Node_Str"");
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      Parameters.LatexOutputExt=args[nextArg];
    }
 else {
      CommandLineError(""String_Node_Str"" + option);
    }
    ;
    nextArg=nextArg + 1;
  }
  if (nextArg > maxArg) {
    CommandLineError(""String_Node_Str"");
  }
  ;
  if (args[maxArg].indexOf(""String_Node_Str"") == -1) {
    Parameters.TLAInputFile=args[maxArg] + ""String_Node_Str"";
  }
 else {
    Parameters.TLAInputFile=args[maxArg];
  }
  ;
  if (Parameters.TLAOutFile.equals(Parameters.TLAInputFile)) {
    CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
  }
  ;
  if (!outOption) {
    Parameters.LaTeXOutputFile=RemoveExtension(RemovePathPrefix(Parameters.TLAInputFile));
  }
  ;
  if (!alignOutOption) {
    Parameters.LaTeXAlignmentFile=Parameters.LaTeXOutputFile;
  }
  ;
  if (psOption || (Parameters.CommentShading && !nopsOption)) {
    Parameters.PSOutput=true;
  }
}","private static void GetArguments(String[] args){
  boolean outOption=false;
  boolean alignOutOption=false;
  boolean psOption=false;
  boolean nopsOption=false;
  Parameters.CommentShading=false;
  Parameters.PrintLineNumbers=false;
  int nextArg=0;
  int maxArg=args.length - 1;
  if (maxArg < 0) {
    CommandLineError(""String_Node_Str"");
  }
  ;
  if ((args[maxArg].length() != 0) && (args[maxArg].charAt(0) == '-')) {
    maxArg=maxArg + 1;
  }
  ;
  while (nextArg < maxArg) {
    String option=args[nextArg];
    if (option.equals(""String_Node_Str"")) {
      OutputMessageFile(Parameters.HelpFile);
      System.exit(0);
    }
 else     if (option.equals(""String_Node_Str"")) {
      OutputMessageFile(Parameters.InfoFile);
      System.exit(0);
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      try {
        Parameters.PSGrayLevel=Misc.stringToFloat(args[nextArg]);
      }
 catch (      Exception e) {
        CommandLineError(""String_Node_Str"" + args[nextArg]);
      }
      ;
      if ((Parameters.PSGrayLevel > 1) || (Parameters.PSGrayLevel < 0)) {
        CommandLineError(""String_Node_Str"" + Misc.floatToString(Parameters.PSGrayLevel,3));
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      psOption=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nopsOption=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.PSCommand=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXCommand=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      outOption=true;
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXOutputFile=RemoveExtension(args[nextArg]);
      if (HasPathPrefix(Parameters.LaTeXOutputFile)) {
        CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.TLAOut=true;
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.TLAOutFile=args[nextArg];
      if (Parameters.TLAOutFile.indexOf(""String_Node_Str"") == -1) {
        Parameters.TLAOutFile=Parameters.TLAOutFile + ""String_Node_Str"";
      }
      if (HasPathPrefix(Parameters.TLAOutFile)) {
        CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      alignOutOption=true;
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXAlignmentFile=RemoveExtension(args[nextArg]);
      if (HasPathPrefix(Parameters.LaTeXAlignmentFile)) {
        CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.Debug=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.TLACommentOption=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.CommentShading=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.PrintProlog=false;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.PrintEpilog=false;
    }
 else     if (option.equals(""String_Node_Str"")) {
      Parameters.PrintLineNumbers=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.UserStyleFile=RemoveExtension(args[nextArg]);
      if ((Parameters.UserStyleFile != args[nextArg]) && (args[nextArg].indexOf(""String_Node_Str"") != args[nextArg].length() - 4)) {
        CommandLineError(""String_Node_Str"");
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXptSize=GetIntArg(args[nextArg],option);
      if ((Parameters.LaTeXptSize < 10) || (Parameters.LaTeXptSize > 12)) {
        CommandLineError(""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXtextwidth=GetIntArg(args[nextArg],option);
      if ((Parameters.LaTeXtextwidth < 100) || (Parameters.LaTeXtextwidth > 1000)) {
        CommandLineError(""String_Node_Str"" + Parameters.LaTeXtextwidth + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXtextheight=GetIntArg(args[nextArg],option);
      if ((Parameters.LaTeXtextheight < 75) || (Parameters.LaTeXtextheight > 1500)) {
        CommandLineError(""String_Node_Str"" + Parameters.LaTeXtextheight + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXhoffset=GetIntArg(args[nextArg],option);
      if ((Parameters.LaTeXhoffset < -250) || (Parameters.LaTeXhoffset > 250)) {
        CommandLineError(""String_Node_Str"" + Parameters.LaTeXhoffset + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.LaTeXvoffset=GetIntArg(args[nextArg],option);
      if ((Parameters.LaTeXvoffset < -250) || (Parameters.LaTeXvoffset > 250)) {
        CommandLineError(""String_Node_Str"" + Parameters.LaTeXvoffset + ""String_Node_Str"");
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      ;
      Parameters.MetaDir=args[nextArg];
      Parameters.ParentDir=new File(Parameters.MetaDir);
      if (!Parameters.ParentDir.exists()) {
        CommandLineError(""String_Node_Str"" + Parameters.MetaDir + ""String_Node_Str"");
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg >= args.length) {
        CommandLineError(""String_Node_Str"");
      }
      Parameters.LatexOutputExt=args[nextArg];
    }
 else {
      CommandLineError(""String_Node_Str"" + option);
    }
    ;
    nextArg=nextArg + 1;
  }
  if (nextArg > maxArg) {
    CommandLineError(""String_Node_Str"");
  }
  ;
  if (args[maxArg].indexOf(""String_Node_Str"") == -1) {
    Parameters.TLAInputFile=args[maxArg] + ""String_Node_Str"";
  }
 else {
    Parameters.TLAInputFile=args[maxArg];
  }
  ;
  if (Parameters.TLAOutFile.equals(Parameters.TLAInputFile)) {
    CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
  }
  ;
  if (!outOption) {
    Parameters.LaTeXOutputFile=RemoveExtension(RemovePathPrefix(Parameters.TLAInputFile));
  }
  ;
  if (!alignOutOption) {
    Parameters.LaTeXAlignmentFile=Parameters.LaTeXOutputFile;
  }
  ;
  if (psOption || (Parameters.CommentShading && !nopsOption)) {
    Parameters.PSOutput=true;
  }
}",0.9953614224971008
136050,"LevelNode selectorToNode(Selector sel,int expectedArity,boolean isFact,boolean isDef,ModuleNode cm) throws AbortException {
  Vector substInPrefix=new Vector();
  Vector params=new Vector();
  Vector allArgs=new Vector();
  UniqueString curName=null;
  UniqueString newName=null;
  SemanticNode curNode=null;
  SemanticNode newNode;
  int idx=0;
  int mode=FindingOpName;
  int prevMode=-999;
  Context letInContext=null;
  int opDefArityFound=0;
  Vector opDefArgs=new Vector();
  boolean firstFindingOpName=true;
  SymbolNode subExprOf=null;
  boolean inAPsuffices=false;
  while (idx < sel.args.length) {
    if ((((sel.ops[idx] != NameSel) && (sel.ops[idx] != NullSel)) || (expectedArity != 0)) && (sel.args[idx] != null)) {
      errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + selectorItemToString(sel,idx) + ""String_Node_Str"");
      return nullOAN;
    }
    if ((sel.args[idx] != null) && (sel.args[idx].getKind() != N_OpArgs)) {
      errors.addAbort(sel.args[idx].getLocation(),""String_Node_Str"");
    }
    ;
switch (mode) {
case FindingOpName:
      SymbolNode newSymbolNode=null;
    Vector tempArgs=new Vector();
  while (newSymbolNode == null && idx < sel.args.length) {
    if (sel.ops[idx] == NameSel) {
      if (curName == null) {
        newName=Operators.resolveSynonym(sel.opNames[idx]);
      }
 else {
        newName=UniqueString.uniqueStringOf(curName.toString() + ""String_Node_Str"" + Operators.resolveSynonym(sel.opNames[idx]).toString());
      }
      ;
    }
 else {
      newName=null;
    }
    ;
    if ((curName == null) && (sel.ops[idx] != NameSel)) {
      if (idx == 0) {
        errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx] + ""String_Node_Str"");
        return nullOAN;
      }
 else {
        errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
      }
      ;
    }
    ;
    if (newName != null) {
      if (letInContext == null) {
        newSymbolNode=symbolTable.resolveSymbol(newName);
      }
 else {
        newSymbolNode=letInContext.getSymbol(newName);
      }
      ;
    }
    ;
    if (newSymbolNode == null) {
      curName=newName;
      if (sel.args[idx] != null) {
        int numOfOpArgs=(sel.args[idx].heirs().length - 1) / 2;
        for (int i=0; i < numOfOpArgs; i++) {
          tempArgs.addElement(sel.args[idx].heirs()[2 * i + 1]);
        }
      }
      idx++;
    }
  }
if (newSymbolNode == null) {
  int eidx=(idx < sel.args.length) ? idx : (sel.args.length - 1);
  errors.addError(sel.opsSTN[eidx].getLocation(),""String_Node_Str"" + selectorItemToString(sel,eidx) + ""String_Node_Str"");
  return nullOAN;
}
;
if (newSymbolNode.getKind() == ModuleKind) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx].toString() + ""String_Node_Str"");
return nullOAN;
}
;
curNode=newSymbolNode;
SymbolNode curSymbolNode=newSymbolNode;
curName=newName;
switch (curSymbolNode.getKind()) {
case ConstantDeclKind:
case VariableDeclKind:
case FormalParamKind:
case BuiltInKind:
case NewConstantKind:
case NewVariableKind:
case NewStateKind:
case NewActionKind:
case NewTemporalKind:
case NumberedProofStepKind:
if (idx != 0) {
errors.addAbort(sel.selSTN.getLocation(),""String_Node_Str"");
}
 else if (sel.ops.length != 1) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + curName.toString() + ""String_Node_Str"");
return nullOAN;
}
case UserDefinedOpKind:
case ThmOrAssumpDefKind:
case ModuleInstanceKind:
int nodeArity=curSymbolNode.getArity();
if (expectedArity == 0) {
SyntaxTreeNode opArgs=sel.args[idx];
int numOfOpArgs=0;
if (opArgs != null) {
numOfOpArgs=(opArgs.heirs().length - 1) / 2;
for (int i=0; i < numOfOpArgs; i++) {
tempArgs.addElement(sel.args[idx].heirs()[2 * i + 1]);
}
;
}
;
if (opDefArityFound + tempArgs.size() != nodeArity) {
errors.addError((opArgs == null) ? sel.selSTN.getLocation() : sel.args[idx].getLocation(),""String_Node_Str"" + curName.toString() + ""String_Node_Str""+ (nodeArity - opDefArityFound)+ ""String_Node_Str"");
return nullOAN;
}
;
ExprOrOpArgNode[] opArgNodes=new ExprOrOpArgNode[tempArgs.size()];
for (int i=0; i < tempArgs.size(); i++) {
opDefArgs.addElement(generateExprOrOpArg(curSymbolNode,sel.opsSTN[idx],i + opDefArityFound,(TreeNode)tempArgs.elementAt(i),cm));
}
;
}
 else {
if (expectedArity > 0) {
}
}
;
opDefArityFound=nodeArity;
if (curNode.getKind() == ModuleInstanceKind) {
if ((idx == sel.ops.length - 1) && !(isDef || isFact)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + curName.toString() + ""String_Node_Str"");
return nullOAN;
}
;
}
 else {
if ((curNode.getKind() == UserDefinedOpKind) && (!((OpDefNode)curNode).isDefined) && (sel.ops.length != 1)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + curName.toString() + ""String_Node_Str"");
return nullOAN;
}
;
if (firstFindingOpName && ((curNode.getKind() == UserDefinedOpKind) || (curNode.getKind() == ThmOrAssumpDefKind))) {
subExprOf=(SymbolNode)curNode;
}
if (idx != sel.ops.length - 1) {
FormalParamNode[] opParams;
if (curNode.getKind() == UserDefinedOpKind) {
opParams=((OpDefNode)curNode).getParams();
newNode=((OpDefNode)curNode).getBody();
}
 else {
opParams=((ThmOrAssumpDefNode)curNode).getParams();
newNode=((ThmOrAssumpDefNode)curNode).getBody();
}
;
for (int i=0; i < opParams.length; i++) {
params.addElement(opParams[i]);
}
;
curName=null;
if (sel.ops[idx + 1] == NameSel) {
mode=FollowingLabels;
}
 else {
mode=FindingSubExpr;
}
;
for (int i=0; i < opDefArgs.size(); i++) {
allArgs.addElement(opDefArgs.elementAt(i));
}
;
opDefArityFound=0;
opDefArgs=new Vector();
if (newNode != null) {
while (newNode.getKind() == SubstInKind) {
substInPrefix.addElement(newNode);
newNode=((SubstInNode)newNode).getBody();
}
;
}
;
if (mode == FindingSubExpr) {
curNode=newNode;
}
;
}
}
prevMode=FindingOpName;
break;
default :
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
break;
}
;
break;
case FollowingLabels:
if (((prevMode == FindingOpName) && (curNode.getKind() != UserDefinedOpKind) && (curNode.getKind() != ThmOrAssumpDefKind)) || ((prevMode != FindingOpName) && (curNode.getKind() != LabelKind))) {
errors.addAbort(sel.selSTN.getLocation(),""String_Node_Str"");
}
;
LabelNode newLabelNode=((OpDefOrLabelNode)curNode).getLabel(sel.opNames[idx]);
if (newLabelNode == null) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx].toString() + ""String_Node_Str"");
return nullOAN;
}
;
curNode=newLabelNode;
if (illegalLabelRef(newLabelNode,sel.opsSTN[idx])) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx].toString() + ""String_Node_Str""+ ""String_Node_Str"");
return nullOAN;
}
;
if (expectedArity == 0) {
if (newLabelNode.getArity() != ((sel.args[idx] == null) ? 0 : (sel.args[idx].heirs().length - 1) / 2)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx].toString() + ""String_Node_Str"");
return nullOAN;
}
;
for (int i=0; i < newLabelNode.getArity(); i++) {
allArgs.addElement(generateExpression(sel.args[idx].heirs()[2 * i + 1],cm));
}
;
}
;
for (int i=0; i < newLabelNode.getArity(); i++) {
FormalParamNode pdecl=newLabelNode.params[i];
params.addElement(pdecl);
}
;
if ((idx < sel.ops.length - 1) && (sel.ops[idx + 1] != NameSel)) {
mode=FindingSubExpr;
}
;
if ((mode == FindingSubExpr) || (idx == sel.ops.length)) {
curNode=newLabelNode.getBody();
}
;
prevMode=FollowingLabels;
break;
case FindingSubExpr:
if (sel.ops[idx] == ColonSel) {
if ((prevMode == FindingSubExpr) || !(((idx == sel.ops.length - 1) && (prevMode == FindingOpName)) || ((idx < sel.ops.length - 1) && (sel.ops[idx + 1] == NameSel)))) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
}
 else if (curNode == null) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
 else if (curNode.getKind() == LetInKind) {
if (ArgNum(sel.ops[idx],1) == 1) {
curNode=((LetInNode)curNode).getBody();
}
 else {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
;
}
 else if (curNode.getKind() == OpApplKind) {
OpApplNode curOpApplNode=(OpApplNode)curNode;
ExprOrOpArgNode[] curArgs=curOpApplNode.getArgs();
SymbolNode opNode=curOpApplNode.getOperator();
if ((opNode.getKind() == FormalParamKind) || (opNode.getKind() == ConstantDeclKind) || (opNode.getKind() == UserDefinedOpKind)) {
int temp=ArgNum(sel.ops[idx],opNode.getArity());
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
curNode=curArgs[temp - 1];
}
 else if (opNode.getKind() == BuiltInKind) {
if ((opNode.getName() == OP_rc) || (opNode.getName() == OP_sor)) {
int temp=ArgNum(sel.ops[idx],curArgs.length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
curOpApplNode=(OpApplNode)curArgs[temp - 1];
if (curOpApplNode.getOperator().getName() != OP_pair) {
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
}
;
curNode=curOpApplNode.getArgs()[1];
}
 else if (opNode.getName() == OP_case) {
if (idx == sel.ops.length - 1) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
;
int temp=ArgNum(sel.ops[idx],curArgs.length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
curOpApplNode=(OpApplNode)curArgs[temp - 1];
if (curOpApplNode.getOperator().getName() != OP_pair) {
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
}
;
idx=idx + 1;
temp=ArgNum(sel.ops[idx],2);
if (temp == -1) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
;
curNode=curOpApplNode.getArgs()[temp - 1];
if (curNode == null) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
;
}
 else if (opNode.getName() == OP_exc) {
int temp=ArgNum(sel.ops[idx],curArgs.length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
if (temp > 1) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
;
curNode=curArgs[temp - 1];
if (isNullSelection(curNode,sel,idx)) {
return nullOAN;
}
;
if (temp > 1) {
curOpApplNode=(OpApplNode)curNode;
if (curOpApplNode.getOperator().getName() != OP_pair) {
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
}
;
curNode=curOpApplNode.getArgs()[1];
}
;
}
 else {
if ((curOpApplNode.getNumberOfBoundedBoundSymbols() == 0) && ((curOpApplNode.getUnbdedQuantSymbols() == null) || (curOpApplNode.getUnbdedQuantSymbols().length == 0))) {
int temp=ArgNum(sel.ops[idx],curOpApplNode.getArgs().length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
curNode=curOpApplNode.getArgs()[temp - 1];
}
 else {
if ((sel.ops[idx] == NullSel) || (sel.ops[idx] == AtSel)) {
FormalParamNode[] temp;
if (curOpApplNode.getNumberOfBoundedBoundSymbols() > 0) {
FormalParamNode[][] symbs=curOpApplNode.getBdedQuantSymbolLists();
int numSymbs=0;
for (int i=0; i < symbs.length; i++) {
numSymbs=numSymbs + symbs[i].length;
}
;
temp=new FormalParamNode[numSymbs];
int k=0;
for (int i=0; i < symbs.length; i++) {
for (int j=0; j < symbs[i].length; j++) {
temp[k]=symbs[i][j];
k++;
}
;
}
;
}
 else {
temp=curOpApplNode.getUnbdedQuantSymbols();
}
;
for (int i=0; i < temp.length; i++) {
params.addElement(temp[i]);
}
;
if (sel.ops[idx] == NullSel) {
int numOfArgs=(sel.args[idx].heirs().length - 1) / 2;
if (temp.length != numOfArgs) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + numOfArgs + ""String_Node_Str""+ temp.length+ ""String_Node_Str"");
return nullOAN;
}
;
for (int i=0; i < numOfArgs; i++) {
allArgs.addElement(generateExpression(sel.args[idx].heirs()[2 * i + 1],cm));
}
;
}
;
curNode=curOpApplNode.getArgs()[0];
}
 else {
int temp=ArgNum(sel.ops[idx],curOpApplNode.getBdedQuantBounds().length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
curNode=curOpApplNode.getBdedQuantBounds()[temp - 1];
}
;
}
;
}
;
}
 else {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + selectorItemToString(sel,idx) + ""String_Node_Str"");
return nullOAN;
}
;
}
 else if (curNode.getKind() == AssumeProveKind) {
AssumeProveNode curAPNode=(AssumeProveNode)curNode;
if ((curAPNode.isSuffices()) && (!inAPsuffices)) {
if (ArgNum(sel.ops[idx],1) != 1) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
;
inAPsuffices=true;
}
 else {
inAPsuffices=false;
int temp=ArgNum(sel.ops[idx],1 + curAPNode.getAssumes().length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
if (illegalAPPosRef(curAPNode,temp)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
;
if (temp <= curAPNode.getAssumes().length) {
curNode=curAPNode.getAssumes()[temp - 1];
if (isNullSelection(curNode,sel,idx)) {
return nullOAN;
}
;
if ((curNode.getKind() == NewSymbKind) && (idx != sel.args.length - 1)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
}
 else {
curNode=curAPNode.getProve();
}
;
}
}
 else if (curNode.getKind() == OpArgKind) {
SymbolNode opNode=((OpArgNode)curNode).getOp();
if ((opNode.getKind() != UserDefinedOpKind) || (opNode.getName() != S_lambda)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
;
OpDefNode opDefOpNode=(OpDefNode)opNode;
if ((sel.ops[idx] != NullSel) && (sel.ops[idx] != AtSel)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx].toString() + ""String_Node_Str"");
return nullOAN;
}
;
if (sel.ops[idx] == NullSel) {
int numOfArgs=(sel.args[idx].heirs().length - 1) / 2;
if (opDefOpNode.getArity() != numOfArgs) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + numOfArgs + ""String_Node_Str""+ opDefOpNode.getArity()+ ""String_Node_Str"");
return nullOAN;
}
;
for (int i=0; i < numOfArgs; i++) {
allArgs.addElement(generateExpression(sel.args[idx].heirs()[2 * i + 1],cm));
}
;
}
;
for (int i=0; i < opDefOpNode.getArity(); i++) {
params.addElement(opDefOpNode.getParams()[i]);
}
;
curNode=opDefOpNode.getBody();
}
 else if ((curNode.getKind() == UserDefinedOpKind) || (curNode.getKind() == BuiltInKind) || (curNode.getKind() == NumberedProofStepKind)) {
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
}
 else if ((curNode.getKind() == AtNodeKind) || (curNode.getKind() == DecimalKind) || (curNode.getKind() == NumeralKind)|| (curNode.getKind() == StringKind)|| (curNode.getKind() == FormalParamKind)|| (curNode.getKind() == ConstantDeclKind)|| (curNode.getKind() == VariableDeclKind)|| (curNode.getKind() == BoundSymbolKind)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
 else if (curNode.getKind() == LabelKind) {
curNode=((LabelNode)curNode).getBody();
idx=idx - 1;
}
 else {
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
}
;
if (isNullSelection(curNode,sel,idx)) {
return nullOAN;
}
;
if (idx != sel.ops.length - 1) {
if (sel.ops[idx + 1] == NameSel) {
while (curNode.getKind() == LabelKind) {
curNode=((LabelNode)curNode).getBody();
if (isNullSelection(curNode,sel,idx)) {
return nullOAN;
}
;
}
;
if (curNode.getKind() == LetInKind) {
letInContext=((LetInNode)curNode).context;
mode=FindingOpName;
firstFindingOpName=false;
}
 else {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
}
 else if (sel.ops[idx + 1] == ColonSel) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
}
;
prevMode=FindingSubExpr;
break;
default :
errors.addAbort(sel.selSTN.getLocation(),""String_Node_Str"");
}
idx++;
}
if (curNode.getKind() == AssumeProveKind) {
if (isFact) {
return (AssumeProveNode)curNode;
}
;
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
;
if (curNode.getKind() == NewSymbKind) {
if (isFact) {
return (LevelNode)curNode;
}
;
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
;
if (expectedArity < 0) {
if ((prevMode != FindingOpName) || !((curNode.getKind() == UserDefinedOpKind) || (curNode.getKind() == ThmOrAssumpDefKind) || (curNode.getKind() == NumberedProofStepKind)|| ((curNode.getKind() == ModuleInstanceKind) && isDef))) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
;
if ((curNode.getKind() == NumberedProofStepKind) && (((OpDefNode)curNode).getStepNode().getKind() != DefStepKind)) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
return (LevelNode)curNode;
}
;
if (curNode.getKind() == NumberedProofStepKind) {
errors.addError(sel.selSTN.getLocation(),isFact ? ""String_Node_Str"" : ""String_Node_Str"");
return nullOAN;
}
if (expectedArity > 0) {
int temp=params.size();
if (curNode.getKind() == OpArgKind) {
temp=temp + ((OpArgNode)curNode).getArity();
}
 else if (prevMode == FindingOpName) {
temp=temp + ((SymbolNode)curNode).getArity();
}
;
if (expectedArity != temp) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"" + expectedArity + ""String_Node_Str""+ temp+ ""String_Node_Str"");
return nullOAN;
}
;
}
;
ExprOrOpArgNode[] opDefArgArray=new ExprOrOpArgNode[opDefArgs.size()];
for (int i=0; i < opDefArgs.size(); i++) {
opDefArgArray[i]=(ExprOrOpArgNode)opDefArgs.elementAt(i);
}
;
if ((prevMode == FindingOpName) && (params.size() + substInPrefix.size() > 0)) {
FormalParamNode[] nodeParams=null;
if (curNode.getKind() == UserDefinedOpKind) {
nodeParams=((OpDefNode)curNode).getParams();
}
 else {
if (curNode.getKind() != ThmOrAssumpDefKind) {
errors.addAbort(sel.opsSTN[sel.opsSTN.length - 1].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
}
;
nodeParams=((ThmOrAssumpDefNode)curNode).getParams();
}
;
for (int i=0; i < opDefArgs.size(); i++) {
allArgs.addElement(opDefArgArray[i]);
}
;
ExprOrOpArgNode[] temp=new ExprOrOpArgNode[nodeParams.length];
for (int i=0; i < nodeParams.length; i++) {
FormalParamNode pm=nodeParams[i];
FormalParamNode newpm=new FormalParamNode(pm.getName(),pm.getArity(),pm.stn,null,cm);
ExprOrOpArgNode eoag=null;
if (pm.getArity() == 0) {
eoag=new OpApplNode(newpm,new ExprNode[0],sel.selSTN,cm);
}
 else {
eoag=new OpArgNode(newpm,sel.selSTN,cm);
}
;
temp[i]=eoag;
params.addElement(newpm);
}
;
SymbolNode curSymNode=(SymbolNode)curNode;
curNode=new OpApplNode(curSymNode,temp,sel.selSTN,cm);
}
;
if (curNode.getKind() == OpArgKind) {
OpArgNode curOpArgNode=(OpArgNode)curNode;
if (expectedArity == 0) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
;
int temp=params.size() + curOpArgNode.getArity();
if (expectedArity != temp) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"" + expectedArity + ""String_Node_Str""+ temp+ ""String_Node_Str"");
return nullOAN;
}
;
if (params.size() + substInPrefix.size() > 0) {
FormalParamNode[] temp2=new FormalParamNode[curOpArgNode.getArity()];
for (int i=0; i < temp2.length; i++) {
UniqueString temp3=UniqueString.uniqueStringOf(""String_Node_Str"" + i);
temp2[i]=new FormalParamNode(temp3,0,new SyntaxTreeNode(temp3),null,cm);
params.addElement(temp2[i]);
}
;
curNode=new OpApplNode(curOpArgNode.getOp(),opDefArgArray,sel.selSTN,cm);
}
;
}
;
if (!isFact && (((curNode.getKind() == ThmOrAssumpDefKind) && (((ThmOrAssumpDefNode)curNode).getBody().getKind() == AssumeProveKind)) || ((curNode.getKind() == LabelKind) && (((LabelNode)curNode).isAssumeProve)))) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
;
if ((!isFact) && (curNode.getKind() == ThmOrAssumpDefKind) && (((ThmOrAssumpDefNode)curNode).getBody().getKind() == OpApplKind)) {
UniqueString opName=((OpApplNode)((ThmOrAssumpDefNode)curNode).getBody()).getOperator().getName();
String exprType=null;
if (opName == OP_qed) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_pfcase) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_have) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_take) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_pick) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_witness) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_suffices) {
exprType=""String_Node_Str"";
}
;
if (exprType != null) {
errors.addError(sel.selSTN.getLocation(),exprType + ""String_Node_Str"");
return nullOAN;
}
;
}
if ((curNode.getKind() == UserDefinedOpKind) || (curNode.getKind() == ConstantDeclKind) || (curNode.getKind() == VariableDeclKind)|| (curNode.getKind() == FormalParamKind)|| (curNode.getKind() == BuiltInKind)|| (curNode.getKind() == BoundSymbolKind)|| (curNode.getKind() == ThmOrAssumpDefKind)|| (curNode.getKind() == NewConstantKind)|| (curNode.getKind() == NewVariableKind)|| (curNode.getKind() == NewStateKind)|| (curNode.getKind() == NewActionKind)|| (curNode.getKind() == NewTemporalKind)) {
SymbolNode curSymbolNode=(SymbolNode)curNode;
if (expectedArity > 0) {
return new OpArgNode(curSymbolNode,sel.selSTN,cm);
}
 else {
OpApplNode oan=new OpApplNode(curSymbolNode,opDefArgArray,sel.selSTN,cm);
oan.subExpressionOf=subExprOf;
return oan;
}
}
;
if (curNode.getKind() == OpArgKind) {
return (OpArgNode)curNode;
}
;
if (curNode.getKind() == ModuleInstanceKind) {
if (isFact || isDef) {
return (OpDefNode)curNode;
}
 else {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
}
;
if (!(curNode instanceof ExprNode)) {
errors.addAbort(sel.selSTN.getLocation(),""String_Node_Str"");
}
;
ExprNode curExprNode=(ExprNode)curNode;
int temp=substInPrefix.size();
while (temp > 0) {
SubstInNode subst=(SubstInNode)substInPrefix.elementAt(temp - 1);
curExprNode=new SubstInNode(subst.stn,subst.getSubsts(),curExprNode,subst.getInstantiatingModule(),subst.getInstantiatedModule());
temp=temp - 1;
}
;
FormalParamNode[] paramsArray=new FormalParamNode[params.size()];
for (int i=0; i < params.size(); i++) {
paramsArray[i]=(FormalParamNode)params.elementAt(i);
}
;
OpDefNode newLambda=null;
if (paramsArray.length > 0) {
newLambda=new OpDefNode(S_lambda,UserDefinedOpKind,paramsArray,false,curExprNode,cm,null,sel.selSTN,true,null);
}
;
if (expectedArity > 0) {
if (paramsArray.length != expectedArity) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"" + expectedArity + ""String_Node_Str""+ paramsArray.length+ ""String_Node_Str"");
return nullOAN;
}
;
return new OpArgNode(newLambda,sel.selSTN,cm);
}
if (paramsArray.length != allArgs.size()) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"" + paramsArray.length + ""String_Node_Str""+ allArgs.size()+ ""String_Node_Str"");
return nullOAN;
}
;
if (paramsArray.length == 0) {
ExprOrOpArgNode[] args=new ExprOrOpArgNode[1];
args[0]=curExprNode;
OpApplNode ln=new OpApplNode(OP_nop,args,sel.selSTN,cm);
ln.subExpressionOf=subExprOf;
return ln;
}
ExprOrOpArgNode[] allArgsArray=new ExprOrOpArgNode[allArgs.size()];
for (int i=0; i < allArgs.size(); i++) {
allArgsArray[i]=(ExprOrOpArgNode)allArgs.elementAt(i);
}
;
OpApplNode oan=new OpApplNode(newLambda,allArgsArray,sel.selSTN,cm);
oan.subExpressionOf=subExprOf;
return oan;
}","LevelNode selectorToNode(Selector sel,int expectedArity,boolean isFact,boolean isDef,ModuleNode cm) throws AbortException {
  Vector substInPrefix=new Vector();
  Vector params=new Vector();
  Vector allArgs=new Vector();
  UniqueString curName=null;
  UniqueString newName=null;
  SemanticNode curNode=null;
  SemanticNode newNode;
  int idx=0;
  int mode=FindingOpName;
  int prevMode=-999;
  Context letInContext=null;
  int opDefArityFound=0;
  Vector opDefArgs=new Vector();
  boolean firstFindingOpName=true;
  SymbolNode subExprOf=null;
  boolean inAPsuffices=false;
  while (idx < sel.args.length) {
    if ((((sel.ops[idx] != NameSel) && (sel.ops[idx] != NullSel)) || (expectedArity != 0)) && (sel.args[idx] != null)) {
      errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + selectorItemToString(sel,idx) + ""String_Node_Str"");
      return nullOAN;
    }
    if ((sel.args[idx] != null) && (sel.args[idx].getKind() != N_OpArgs)) {
      errors.addAbort(sel.args[idx].getLocation(),""String_Node_Str"");
    }
    ;
switch (mode) {
case FindingOpName:
      SymbolNode newSymbolNode=null;
    Vector tempArgs=new Vector();
  while (newSymbolNode == null && idx < sel.args.length) {
    if (sel.ops[idx] == NameSel) {
      if (curName == null) {
        newName=Operators.resolveSynonym(sel.opNames[idx]);
      }
 else {
        newName=UniqueString.uniqueStringOf(curName.toString() + ""String_Node_Str"" + Operators.resolveSynonym(sel.opNames[idx]).toString());
      }
      ;
    }
 else {
      newName=null;
    }
    ;
    if ((curName == null) && (sel.ops[idx] != NameSel)) {
      if (idx == 0) {
        errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx] + ""String_Node_Str"");
        return nullOAN;
      }
 else {
        errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
      }
      ;
    }
    ;
    if (newName != null) {
      if (letInContext == null) {
        newSymbolNode=symbolTable.resolveSymbol(newName);
      }
 else {
        newSymbolNode=letInContext.getSymbol(newName);
      }
      ;
    }
    ;
    if (newSymbolNode == null) {
      curName=newName;
      if (sel.args[idx] != null) {
        int numOfOpArgs=(sel.args[idx].heirs().length - 1) / 2;
        for (int i=0; i < numOfOpArgs; i++) {
          tempArgs.addElement(sel.args[idx].heirs()[2 * i + 1]);
        }
      }
      idx++;
    }
  }
if (newSymbolNode == null) {
  int eidx=(idx < sel.args.length) ? idx : (sel.args.length - 1);
  errors.addError(sel.opsSTN[eidx].getLocation(),""String_Node_Str"" + selectorItemToString(sel,eidx) + ""String_Node_Str"");
  return nullOAN;
}
;
if (newSymbolNode.getKind() == ModuleKind) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx].toString() + ""String_Node_Str"");
return nullOAN;
}
;
curNode=newSymbolNode;
SymbolNode curSymbolNode=newSymbolNode;
curName=newName;
switch (curSymbolNode.getKind()) {
case ConstantDeclKind:
case VariableDeclKind:
case FormalParamKind:
case BuiltInKind:
case NewConstantKind:
case NewVariableKind:
case NewStateKind:
case NewActionKind:
case NewTemporalKind:
case NumberedProofStepKind:
if (idx != 0) {
errors.addAbort(sel.selSTN.getLocation(),""String_Node_Str"");
}
 else if (sel.ops.length != 1) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + curName.toString() + ""String_Node_Str"");
return nullOAN;
}
case UserDefinedOpKind:
case ThmOrAssumpDefKind:
case ModuleInstanceKind:
int nodeArity=curSymbolNode.getArity();
if (expectedArity == 0) {
SyntaxTreeNode opArgs=sel.args[idx];
int numOfOpArgs=0;
if (opArgs != null) {
numOfOpArgs=(opArgs.heirs().length - 1) / 2;
for (int i=0; i < numOfOpArgs; i++) {
tempArgs.addElement(sel.args[idx].heirs()[2 * i + 1]);
}
;
}
;
if (opDefArityFound + tempArgs.size() != nodeArity) {
errors.addError((opArgs == null) ? sel.selSTN.getLocation() : sel.args[idx].getLocation(),""String_Node_Str"" + curName.toString() + ""String_Node_Str""+ (nodeArity - opDefArityFound)+ ""String_Node_Str"");
return nullOAN;
}
;
ExprOrOpArgNode[] opArgNodes=new ExprOrOpArgNode[tempArgs.size()];
for (int i=0; i < tempArgs.size(); i++) {
opDefArgs.addElement(generateExprOrOpArg(curSymbolNode,sel.opsSTN[idx],i + opDefArityFound,(TreeNode)tempArgs.elementAt(i),cm));
}
;
}
 else {
if (expectedArity > 0) {
}
}
;
opDefArityFound=nodeArity;
if (curNode.getKind() == ModuleInstanceKind) {
if ((idx == sel.ops.length - 1) && !(isDef || isFact)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + curName.toString() + ""String_Node_Str"");
return nullOAN;
}
;
}
 else {
if ((curNode.getKind() == UserDefinedOpKind) && (!((OpDefNode)curNode).isDefined) && (sel.ops.length != 1)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + curName.toString() + ""String_Node_Str"");
return nullOAN;
}
;
if (firstFindingOpName && ((curNode.getKind() == UserDefinedOpKind) || (curNode.getKind() == ThmOrAssumpDefKind))) {
subExprOf=(SymbolNode)curNode;
}
if (idx != sel.ops.length - 1) {
FormalParamNode[] opParams;
if (curNode.getKind() == UserDefinedOpKind) {
opParams=((OpDefNode)curNode).getParams();
newNode=((OpDefNode)curNode).getBody();
}
 else {
opParams=((ThmOrAssumpDefNode)curNode).getParams();
newNode=((ThmOrAssumpDefNode)curNode).getBody();
}
;
for (int i=0; i < opParams.length; i++) {
params.addElement(opParams[i]);
}
;
curName=null;
if (sel.ops[idx + 1] == NameSel) {
mode=FollowingLabels;
}
 else {
mode=FindingSubExpr;
}
;
for (int i=0; i < opDefArgs.size(); i++) {
allArgs.addElement(opDefArgs.elementAt(i));
}
;
opDefArityFound=0;
opDefArgs=new Vector();
if (newNode != null) {
while (newNode.getKind() == SubstInKind) {
substInPrefix.addElement(newNode);
newNode=((SubstInNode)newNode).getBody();
}
;
while (newNode.getKind() == APSubstInKind) {
substInPrefix.addElement(newNode);
newNode=((APSubstInNode)newNode).getBody();
}
;
}
;
if (mode == FindingSubExpr) {
curNode=newNode;
}
;
}
}
prevMode=FindingOpName;
break;
default :
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
break;
}
;
break;
case FollowingLabels:
if (((prevMode == FindingOpName) && (curNode.getKind() != UserDefinedOpKind) && (curNode.getKind() != ThmOrAssumpDefKind)) || ((prevMode != FindingOpName) && (curNode.getKind() != LabelKind))) {
errors.addAbort(sel.selSTN.getLocation(),""String_Node_Str"");
}
;
LabelNode newLabelNode=((OpDefOrLabelNode)curNode).getLabel(sel.opNames[idx]);
if (newLabelNode == null) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx].toString() + ""String_Node_Str"");
return nullOAN;
}
;
curNode=newLabelNode;
if (illegalLabelRef(newLabelNode,sel.opsSTN[idx])) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx].toString() + ""String_Node_Str""+ ""String_Node_Str"");
return nullOAN;
}
;
if (expectedArity == 0) {
if (newLabelNode.getArity() != ((sel.args[idx] == null) ? 0 : (sel.args[idx].heirs().length - 1) / 2)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx].toString() + ""String_Node_Str"");
return nullOAN;
}
;
for (int i=0; i < newLabelNode.getArity(); i++) {
allArgs.addElement(generateExpression(sel.args[idx].heirs()[2 * i + 1],cm));
}
;
}
;
for (int i=0; i < newLabelNode.getArity(); i++) {
FormalParamNode pdecl=newLabelNode.params[i];
params.addElement(pdecl);
}
;
if ((idx < sel.ops.length - 1) && (sel.ops[idx + 1] != NameSel)) {
mode=FindingSubExpr;
}
;
if ((mode == FindingSubExpr) || (idx == sel.ops.length)) {
curNode=newLabelNode.getBody();
}
;
prevMode=FollowingLabels;
break;
case FindingSubExpr:
if (sel.ops[idx] == ColonSel) {
if ((prevMode == FindingSubExpr) || !(((idx == sel.ops.length - 1) && (prevMode == FindingOpName)) || ((idx < sel.ops.length - 1) && (sel.ops[idx + 1] == NameSel)))) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
}
 else if (curNode == null) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
 else if (curNode.getKind() == LetInKind) {
if (ArgNum(sel.ops[idx],1) == 1) {
curNode=((LetInNode)curNode).getBody();
}
 else {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
;
}
 else if (curNode.getKind() == OpApplKind) {
OpApplNode curOpApplNode=(OpApplNode)curNode;
ExprOrOpArgNode[] curArgs=curOpApplNode.getArgs();
SymbolNode opNode=curOpApplNode.getOperator();
if ((opNode.getKind() == FormalParamKind) || (opNode.getKind() == ConstantDeclKind) || (opNode.getKind() == UserDefinedOpKind)) {
int temp=ArgNum(sel.ops[idx],opNode.getArity());
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
curNode=curArgs[temp - 1];
}
 else if (opNode.getKind() == BuiltInKind) {
if ((opNode.getName() == OP_rc) || (opNode.getName() == OP_sor)) {
int temp=ArgNum(sel.ops[idx],curArgs.length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
curOpApplNode=(OpApplNode)curArgs[temp - 1];
if (curOpApplNode.getOperator().getName() != OP_pair) {
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
}
;
curNode=curOpApplNode.getArgs()[1];
}
 else if (opNode.getName() == OP_case) {
if (idx == sel.ops.length - 1) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
;
int temp=ArgNum(sel.ops[idx],curArgs.length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
curOpApplNode=(OpApplNode)curArgs[temp - 1];
if (curOpApplNode.getOperator().getName() != OP_pair) {
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
}
;
idx=idx + 1;
temp=ArgNum(sel.ops[idx],2);
if (temp == -1) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
;
curNode=curOpApplNode.getArgs()[temp - 1];
if (curNode == null) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
;
}
 else if (opNode.getName() == OP_exc) {
int temp=ArgNum(sel.ops[idx],curArgs.length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
if (temp > 1) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
;
curNode=curArgs[temp - 1];
if (isNullSelection(curNode,sel,idx)) {
return nullOAN;
}
;
if (temp > 1) {
curOpApplNode=(OpApplNode)curNode;
if (curOpApplNode.getOperator().getName() != OP_pair) {
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
}
;
curNode=curOpApplNode.getArgs()[1];
}
;
}
 else {
if ((curOpApplNode.getNumberOfBoundedBoundSymbols() == 0) && ((curOpApplNode.getUnbdedQuantSymbols() == null) || (curOpApplNode.getUnbdedQuantSymbols().length == 0))) {
int temp=ArgNum(sel.ops[idx],curOpApplNode.getArgs().length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
curNode=curOpApplNode.getArgs()[temp - 1];
}
 else {
if ((sel.ops[idx] == NullSel) || (sel.ops[idx] == AtSel)) {
FormalParamNode[] temp;
if (curOpApplNode.getNumberOfBoundedBoundSymbols() > 0) {
FormalParamNode[][] symbs=curOpApplNode.getBdedQuantSymbolLists();
int numSymbs=0;
for (int i=0; i < symbs.length; i++) {
numSymbs=numSymbs + symbs[i].length;
}
;
temp=new FormalParamNode[numSymbs];
int k=0;
for (int i=0; i < symbs.length; i++) {
for (int j=0; j < symbs[i].length; j++) {
temp[k]=symbs[i][j];
k++;
}
;
}
;
}
 else {
temp=curOpApplNode.getUnbdedQuantSymbols();
}
;
for (int i=0; i < temp.length; i++) {
params.addElement(temp[i]);
}
;
if (sel.ops[idx] == NullSel) {
int numOfArgs=(sel.args[idx].heirs().length - 1) / 2;
if (temp.length != numOfArgs) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + numOfArgs + ""String_Node_Str""+ temp.length+ ""String_Node_Str"");
return nullOAN;
}
;
for (int i=0; i < numOfArgs; i++) {
allArgs.addElement(generateExpression(sel.args[idx].heirs()[2 * i + 1],cm));
}
;
}
;
curNode=curOpApplNode.getArgs()[0];
}
 else {
int temp=ArgNum(sel.ops[idx],curOpApplNode.getBdedQuantBounds().length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
curNode=curOpApplNode.getBdedQuantBounds()[temp - 1];
}
;
}
;
}
;
}
 else {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + selectorItemToString(sel,idx) + ""String_Node_Str"");
return nullOAN;
}
;
}
 else if (curNode.getKind() == AssumeProveKind) {
AssumeProveNode curAPNode=(AssumeProveNode)curNode;
if ((curAPNode.isSuffices()) && (!inAPsuffices)) {
if (ArgNum(sel.ops[idx],1) != 1) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
;
inAPsuffices=true;
}
 else {
inAPsuffices=false;
int temp=ArgNum(sel.ops[idx],1 + curAPNode.getAssumes().length);
if (temp == -1) {
reportSelectorError(sel,idx);
return nullOAN;
}
;
if (illegalAPPosRef(curAPNode,temp)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
return nullOAN;
}
;
if (temp <= curAPNode.getAssumes().length) {
curNode=curAPNode.getAssumes()[temp - 1];
if (isNullSelection(curNode,sel,idx)) {
return nullOAN;
}
;
if ((curNode.getKind() == NewSymbKind) && (idx != sel.args.length - 1)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
}
 else {
curNode=curAPNode.getProve();
}
;
}
}
 else if (curNode.getKind() == OpArgKind) {
SymbolNode opNode=((OpArgNode)curNode).getOp();
if ((opNode.getKind() != UserDefinedOpKind) || (opNode.getName() != S_lambda)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
;
OpDefNode opDefOpNode=(OpDefNode)opNode;
if ((sel.ops[idx] != NullSel) && (sel.ops[idx] != AtSel)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + sel.opNames[idx].toString() + ""String_Node_Str"");
return nullOAN;
}
;
if (sel.ops[idx] == NullSel) {
int numOfArgs=(sel.args[idx].heirs().length - 1) / 2;
if (opDefOpNode.getArity() != numOfArgs) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + numOfArgs + ""String_Node_Str""+ opDefOpNode.getArity()+ ""String_Node_Str"");
return nullOAN;
}
;
for (int i=0; i < numOfArgs; i++) {
allArgs.addElement(generateExpression(sel.args[idx].heirs()[2 * i + 1],cm));
}
;
}
;
for (int i=0; i < opDefOpNode.getArity(); i++) {
params.addElement(opDefOpNode.getParams()[i]);
}
;
curNode=opDefOpNode.getBody();
}
 else if ((curNode.getKind() == UserDefinedOpKind) || (curNode.getKind() == BuiltInKind) || (curNode.getKind() == NumberedProofStepKind)) {
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
}
 else if ((curNode.getKind() == AtNodeKind) || (curNode.getKind() == DecimalKind) || (curNode.getKind() == NumeralKind)|| (curNode.getKind() == StringKind)|| (curNode.getKind() == FormalParamKind)|| (curNode.getKind() == ConstantDeclKind)|| (curNode.getKind() == VariableDeclKind)|| (curNode.getKind() == BoundSymbolKind)) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
 else if (curNode.getKind() == LabelKind) {
curNode=((LabelNode)curNode).getBody();
idx=idx - 1;
}
 else {
errors.addAbort(sel.opsSTN[idx].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
}
;
if (isNullSelection(curNode,sel,idx)) {
return nullOAN;
}
;
if (idx != sel.ops.length - 1) {
if (sel.ops[idx + 1] == NameSel) {
while (curNode.getKind() == LabelKind) {
curNode=((LabelNode)curNode).getBody();
if (isNullSelection(curNode,sel,idx)) {
return nullOAN;
}
;
}
;
if (curNode.getKind() == LetInKind) {
letInContext=((LetInNode)curNode).context;
mode=FindingOpName;
firstFindingOpName=false;
}
 else {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
}
 else if (sel.ops[idx + 1] == ColonSel) {
errors.addError(sel.opsSTN[idx].getLocation(),""String_Node_Str"");
return nullOAN;
}
}
;
prevMode=FindingSubExpr;
break;
default :
errors.addAbort(sel.selSTN.getLocation(),""String_Node_Str"");
}
idx++;
}
if (curNode.getKind() == AssumeProveKind) {
if (isFact) {
return (AssumeProveNode)curNode;
}
;
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
;
if (curNode.getKind() == NewSymbKind) {
if (isFact) {
return (LevelNode)curNode;
}
;
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
;
if (expectedArity < 0) {
if ((prevMode != FindingOpName) || !((curNode.getKind() == UserDefinedOpKind) || (curNode.getKind() == ThmOrAssumpDefKind) || (curNode.getKind() == NumberedProofStepKind)|| ((curNode.getKind() == ModuleInstanceKind) && isDef))) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
;
if ((curNode.getKind() == NumberedProofStepKind) && (((OpDefNode)curNode).getStepNode().getKind() != DefStepKind)) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
return (LevelNode)curNode;
}
;
if (curNode.getKind() == NumberedProofStepKind) {
errors.addError(sel.selSTN.getLocation(),isFact ? ""String_Node_Str"" : ""String_Node_Str"");
return nullOAN;
}
if (expectedArity > 0) {
int temp=params.size();
if (curNode.getKind() == OpArgKind) {
temp=temp + ((OpArgNode)curNode).getArity();
}
 else if (prevMode == FindingOpName) {
temp=temp + ((SymbolNode)curNode).getArity();
}
;
if (expectedArity != temp) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"" + expectedArity + ""String_Node_Str""+ temp+ ""String_Node_Str"");
return nullOAN;
}
;
}
;
ExprOrOpArgNode[] opDefArgArray=new ExprOrOpArgNode[opDefArgs.size()];
for (int i=0; i < opDefArgs.size(); i++) {
opDefArgArray[i]=(ExprOrOpArgNode)opDefArgs.elementAt(i);
}
;
if ((prevMode == FindingOpName) && (params.size() + substInPrefix.size() > 0)) {
FormalParamNode[] nodeParams=null;
if (curNode.getKind() == UserDefinedOpKind) {
nodeParams=((OpDefNode)curNode).getParams();
}
 else {
if (curNode.getKind() != ThmOrAssumpDefKind) {
errors.addAbort(sel.opsSTN[sel.opsSTN.length - 1].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
}
;
nodeParams=((ThmOrAssumpDefNode)curNode).getParams();
}
;
for (int i=0; i < opDefArgs.size(); i++) {
allArgs.addElement(opDefArgArray[i]);
}
;
ExprOrOpArgNode[] temp=new ExprOrOpArgNode[nodeParams.length];
for (int i=0; i < nodeParams.length; i++) {
FormalParamNode pm=nodeParams[i];
FormalParamNode newpm=new FormalParamNode(pm.getName(),pm.getArity(),pm.stn,null,cm);
ExprOrOpArgNode eoag=null;
if (pm.getArity() == 0) {
eoag=new OpApplNode(newpm,new ExprNode[0],sel.selSTN,cm);
}
 else {
eoag=new OpArgNode(newpm,sel.selSTN,cm);
}
;
temp[i]=eoag;
params.addElement(newpm);
}
;
SymbolNode curSymNode=(SymbolNode)curNode;
curNode=new OpApplNode(curSymNode,temp,sel.selSTN,cm);
}
;
if (curNode.getKind() == OpArgKind) {
OpArgNode curOpArgNode=(OpArgNode)curNode;
if (expectedArity == 0) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
;
int temp=params.size() + curOpArgNode.getArity();
if (expectedArity != temp) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"" + expectedArity + ""String_Node_Str""+ temp+ ""String_Node_Str"");
return nullOAN;
}
;
if (params.size() + substInPrefix.size() > 0) {
FormalParamNode[] temp2=new FormalParamNode[curOpArgNode.getArity()];
for (int i=0; i < temp2.length; i++) {
UniqueString temp3=UniqueString.uniqueStringOf(""String_Node_Str"" + i);
temp2[i]=new FormalParamNode(temp3,0,new SyntaxTreeNode(temp3),null,cm);
params.addElement(temp2[i]);
}
;
curNode=new OpApplNode(curOpArgNode.getOp(),opDefArgArray,sel.selSTN,cm);
}
;
}
;
if (!isFact && (((curNode.getKind() == ThmOrAssumpDefKind) && (((ThmOrAssumpDefNode)curNode).getBody().getKind() == AssumeProveKind)) || ((curNode.getKind() == LabelKind) && (((LabelNode)curNode).isAssumeProve)))) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
;
if ((!isFact) && (curNode.getKind() == ThmOrAssumpDefKind) && (((ThmOrAssumpDefNode)curNode).getBody().getKind() == OpApplKind)) {
UniqueString opName=((OpApplNode)((ThmOrAssumpDefNode)curNode).getBody()).getOperator().getName();
String exprType=null;
if (opName == OP_qed) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_pfcase) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_have) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_take) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_pick) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_witness) {
exprType=""String_Node_Str"";
}
 else if (opName == OP_suffices) {
exprType=""String_Node_Str"";
}
;
if (exprType != null) {
errors.addError(sel.selSTN.getLocation(),exprType + ""String_Node_Str"");
return nullOAN;
}
;
}
if ((curNode.getKind() == UserDefinedOpKind) || (curNode.getKind() == ConstantDeclKind) || (curNode.getKind() == VariableDeclKind)|| (curNode.getKind() == FormalParamKind)|| (curNode.getKind() == BuiltInKind)|| (curNode.getKind() == BoundSymbolKind)|| (curNode.getKind() == ThmOrAssumpDefKind)|| (curNode.getKind() == NewConstantKind)|| (curNode.getKind() == NewVariableKind)|| (curNode.getKind() == NewStateKind)|| (curNode.getKind() == NewActionKind)|| (curNode.getKind() == NewTemporalKind)) {
SymbolNode curSymbolNode=(SymbolNode)curNode;
if (expectedArity > 0) {
return new OpArgNode(curSymbolNode,sel.selSTN,cm);
}
 else {
OpApplNode oan=new OpApplNode(curSymbolNode,opDefArgArray,sel.selSTN,cm);
oan.subExpressionOf=subExprOf;
return oan;
}
}
;
if (curNode.getKind() == OpArgKind) {
return (OpArgNode)curNode;
}
;
if (curNode.getKind() == ModuleInstanceKind) {
if (isFact || isDef) {
return (OpDefNode)curNode;
}
 else {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"");
return nullOAN;
}
}
;
if (!(curNode instanceof ExprNode)) {
errors.addAbort(sel.selSTN.getLocation(),""String_Node_Str"");
}
;
ExprNode curExprNode=(ExprNode)curNode;
int temp=substInPrefix.size();
while (temp > 0) {
Object substOb=substInPrefix.elementAt(temp - 1);
if (substOb instanceof SubstInNode) {
SubstInNode subst=(SubstInNode)substOb;
curExprNode=new SubstInNode(subst.stn,subst.getSubsts(),curExprNode,subst.getInstantiatingModule(),subst.getInstantiatedModule());
}
 else {
APSubstInNode subst=(APSubstInNode)substOb;
curExprNode=new SubstInNode(subst.stn,subst.getSubsts(),curExprNode,subst.getInstantiatingModule(),subst.getInstantiatedModule());
}
temp=temp - 1;
}
;
FormalParamNode[] paramsArray=new FormalParamNode[params.size()];
for (int i=0; i < params.size(); i++) {
paramsArray[i]=(FormalParamNode)params.elementAt(i);
}
;
OpDefNode newLambda=null;
if (paramsArray.length > 0) {
newLambda=new OpDefNode(S_lambda,UserDefinedOpKind,paramsArray,false,curExprNode,cm,null,sel.selSTN,true,null);
}
;
if (expectedArity > 0) {
if (paramsArray.length != expectedArity) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"" + expectedArity + ""String_Node_Str""+ paramsArray.length+ ""String_Node_Str"");
return nullOAN;
}
;
return new OpArgNode(newLambda,sel.selSTN,cm);
}
if (paramsArray.length != allArgs.size()) {
errors.addError(sel.selSTN.getLocation(),""String_Node_Str"" + paramsArray.length + ""String_Node_Str""+ allArgs.size()+ ""String_Node_Str"");
return nullOAN;
}
;
if (paramsArray.length == 0) {
ExprOrOpArgNode[] args=new ExprOrOpArgNode[1];
args[0]=curExprNode;
OpApplNode ln=new OpApplNode(OP_nop,args,sel.selSTN,cm);
ln.subExpressionOf=subExprOf;
return ln;
}
ExprOrOpArgNode[] allArgsArray=new ExprOrOpArgNode[allArgs.size()];
for (int i=0; i < allArgs.size(); i++) {
allArgsArray[i]=(ExprOrOpArgNode)allArgs.elementAt(i);
}
;
OpApplNode oan=new OpApplNode(newLambda,allArgsArray,sel.selSTN,cm);
oan.subExpressionOf=subExprOf;
return oan;
}",0.990236858552986
136051,"private final void processConfigProps(String name,ExprNode pred,Context c,List subs){
  if (pred instanceof SubstInNode) {
    SubstInNode pred1=(SubstInNode)pred;
    this.processConfigProps(name,pred1.getBody(),c,subs.cons(pred1));
    return;
  }
  if (pred instanceof OpApplNode) {
    OpApplNode pred1=(OpApplNode)pred;
    ExprOrOpArgNode[] args=pred1.getArgs();
    if (args.length == 0) {
      SymbolNode opNode=pred1.getOperator();
      Object val=this.lookup(opNode,c,false);
      if (val instanceof OpDefNode) {
        if (((OpDefNode)val).getArity() != 0) {
          Assert.fail(EC.TLC_CONFIG_OP_NO_ARGS,opNode.getName().toString());
        }
        this.processConfigProps(opNode.getName().toString(),((OpDefNode)val).getBody(),c,subs);
      }
 else       if (val == null) {
        Assert.fail(EC.TLC_CONFIG_OP_NOT_IN_SPEC,opNode.getName().toString());
      }
 else       if (val instanceof BoolValue) {
        if (!((BoolValue)val).val) {
          Assert.fail(EC.TLC_CONFIG_SPEC_IS_TRIVIAL,opNode.getName().toString());
        }
      }
 else {
        Assert.fail(EC.TLC_CONFIG_OP_IS_EQUAL,new String[]{opNode.getName().toString(),val.toString()});
      }
      return;
    }
    int opcode=BuiltInOPs.getOpCode(pred1.getOperator().getName());
    if (opcode == OPCODE_cl || opcode == OPCODE_land) {
      for (int i=0; i < args.length; i++) {
        ExprNode conj=(ExprNode)args[i];
        this.processConfigProps(conj.toString(),conj,c,subs);
      }
      return;
    }
    if (opcode == OPCODE_box) {
      ExprNode boxArg=(ExprNode)args[0];
      if ((boxArg instanceof OpApplNode) && BuiltInOPs.getOpCode(((OpApplNode)boxArg).getOperator().getName()) == OPCODE_sa) {
        OpApplNode boxArg1=(OpApplNode)boxArg;
        if (boxArg1.getArgs().length == 0) {
          name=boxArg1.getOperator().getName().toString();
        }
        this.impliedActNameVec.addElement(name);
        this.impliedActionVec.addElement(new Action(Spec.addSubsts(boxArg,subs),c));
      }
 else       if (this.getLevelBound(boxArg,c) < 2) {
        this.invVec.addElement(new Action(Spec.addSubsts(boxArg,subs),c));
        if ((boxArg instanceof OpApplNode) && (((OpApplNode)boxArg).getArgs().length == 0)) {
          name=((OpApplNode)boxArg).getOperator().getName().toString();
        }
        this.invNameVec.addElement(name);
      }
 else {
        this.impliedTemporalVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
        this.impliedTemporalNameVec.addElement(name);
      }
      return;
    }
  }
  int level=this.getLevelBound(pred,c);
  if (level <= 1) {
    this.impliedInitVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
    this.impliedInitNameVec.addElement(name);
  }
 else   if (level == 3) {
    this.impliedTemporalVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
    this.impliedTemporalNameVec.addElement(name);
  }
 else {
    Assert.fail(EC.TLC_CONFIG_PROPERTY_NOT_CORRECTLY_DEFINED,name);
  }
}","private final void processConfigProps(String name,ExprNode pred,Context c,List subs){
  if (pred instanceof SubstInNode) {
    SubstInNode pred1=(SubstInNode)pred;
    this.processConfigProps(name,pred1.getBody(),c,subs.cons(pred1));
    return;
  }
  if (pred instanceof OpApplNode) {
    OpApplNode pred1=(OpApplNode)pred;
    ExprOrOpArgNode[] args=pred1.getArgs();
    if (args.length == 0) {
      SymbolNode opNode=pred1.getOperator();
      Object val=this.lookup(opNode,c,false);
      if (val instanceof OpDefNode) {
        if (((OpDefNode)val).getArity() != 0) {
          Assert.fail(EC.TLC_CONFIG_OP_NO_ARGS,opNode.getName().toString());
        }
        this.processConfigProps(opNode.getName().toString(),((OpDefNode)val).getBody(),c,subs);
      }
 else       if (val == null) {
        Assert.fail(EC.TLC_CONFIG_OP_NOT_IN_SPEC,opNode.getName().toString());
      }
 else       if (val instanceof BoolValue) {
        if (!((BoolValue)val).val) {
          Assert.fail(EC.TLC_CONFIG_SPEC_IS_TRIVIAL,opNode.getName().toString());
        }
      }
 else {
        Assert.fail(EC.TLC_CONFIG_OP_IS_EQUAL,new String[]{opNode.getName().toString(),val.toString(),""String_Node_Str""});
      }
      return;
    }
    int opcode=BuiltInOPs.getOpCode(pred1.getOperator().getName());
    if (opcode == OPCODE_cl || opcode == OPCODE_land) {
      for (int i=0; i < args.length; i++) {
        ExprNode conj=(ExprNode)args[i];
        this.processConfigProps(conj.toString(),conj,c,subs);
      }
      return;
    }
    if (opcode == OPCODE_box) {
      ExprNode boxArg=(ExprNode)args[0];
      if ((boxArg instanceof OpApplNode) && BuiltInOPs.getOpCode(((OpApplNode)boxArg).getOperator().getName()) == OPCODE_sa) {
        OpApplNode boxArg1=(OpApplNode)boxArg;
        if (boxArg1.getArgs().length == 0) {
          name=boxArg1.getOperator().getName().toString();
        }
        this.impliedActNameVec.addElement(name);
        this.impliedActionVec.addElement(new Action(Spec.addSubsts(boxArg,subs),c));
      }
 else       if (this.getLevelBound(boxArg,c) < 2) {
        this.invVec.addElement(new Action(Spec.addSubsts(boxArg,subs),c));
        if ((boxArg instanceof OpApplNode) && (((OpApplNode)boxArg).getArgs().length == 0)) {
          name=((OpApplNode)boxArg).getOperator().getName().toString();
        }
        this.invNameVec.addElement(name);
      }
 else {
        this.impliedTemporalVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
        this.impliedTemporalNameVec.addElement(name);
      }
      return;
    }
    if (opcode == OPCODE_nop) {
      this.processConfigProps(name,(ExprNode)args[0],c,subs);
      return;
    }
  }
  int level=this.getLevelBound(pred,c);
  if (level <= 1) {
    this.impliedInitVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
    this.impliedInitNameVec.addElement(name);
  }
 else   if (level == 3) {
    this.impliedTemporalVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
    this.impliedTemporalNameVec.addElement(name);
  }
 else {
    Assert.fail(EC.TLC_CONFIG_PROPERTY_NOT_CORRECTLY_DEFINED,name);
  }
}",0.978246539222149
136052,"public final void collectPrimedLocs(SemanticNode pred,Context c,ObjLongTable tbl){
switch (pred.getKind()) {
case OpApplKind:
{
      OpApplNode pred1=(OpApplNode)pred;
      this.collectPrimedLocsAppl(pred1,c,tbl);
      return;
    }
case LetInKind:
{
    LetInNode pred1=(LetInNode)pred;
    this.collectPrimedLocs(pred1.getBody(),c,tbl);
    return;
  }
case SubstInKind:
{
  SubstInNode pred1=(SubstInNode)pred;
  Subst[] subs=pred1.getSubsts();
  Context c1=c;
  for (int i=0; i < subs.length; i++) {
    Subst sub=subs[i];
    c1=c1.cons(sub.getOp(),this.getVal(sub.getExpr(),c,true));
  }
  this.collectPrimedLocs(pred1.getBody(),c,tbl);
  return;
}
case LabelKind:
{
LabelNode pred1=(LabelNode)pred;
this.collectPrimedLocs(pred1.getBody(),c,tbl);
return;
}
}
}","public final void collectPrimedLocs(SemanticNode pred,Context c,ObjLongTable tbl){
switch (pred.getKind()) {
case OpApplKind:
{
      OpApplNode pred1=(OpApplNode)pred;
      this.collectPrimedLocsAppl(pred1,c,tbl);
      return;
    }
case LetInKind:
{
    LetInNode pred1=(LetInNode)pred;
    this.collectPrimedLocs(pred1.getBody(),c,tbl);
    return;
  }
case SubstInKind:
{
  SubstInNode pred1=(SubstInNode)pred;
  Subst[] subs=pred1.getSubsts();
  Context c1=c;
  for (int i=0; i < subs.length; i++) {
    Subst sub=subs[i];
    c1=c1.cons(sub.getOp(),this.getVal(sub.getExpr(),c,true));
  }
  this.collectPrimedLocs(pred1.getBody(),c,tbl);
  return;
}
case APSubstInKind:
{
APSubstInNode pred1=(APSubstInNode)pred;
Subst[] subs=pred1.getSubsts();
Context c1=c;
for (int i=0; i < subs.length; i++) {
  Subst sub=subs[i];
  c1=c1.cons(sub.getOp(),this.getVal(sub.getExpr(),c,true));
}
this.collectPrimedLocs(pred1.getBody(),c,tbl);
return;
}
case LabelKind:
{
LabelNode pred1=(LabelNode)pred;
this.collectPrimedLocs(pred1.getBody(),c,tbl);
return;
}
}
}",0.8258488499452354
136053,"/** 
 * The following method goes through all the nodes to set their            tool-specific fields.  It was modified on 1 May 2007 so it would find   the nodes in the body of a Lambda expression.  Obviously, if new        semantic node types are added, this method will have to be modified.    Less obviously, if a tool wants to call TLC on a specification that     was not all created inside a module, then this method may need to be    modified so TLC finds thos nodes not part of the module.                * Yuan claims that this is the only method in TLC that has to find all    the nodes in such a way.                                               
 */
private final void processConstants(SemanticNode expr){
switch (expr.getKind()) {
case ModuleKind:
{
      ModuleNode expr1=(ModuleNode)expr;
      OpDefNode[] opDefs=expr1.getOpDefs();
      for (int i=0; i < opDefs.length; i++) {
        Object def=opDefs[i].getToolObject(TLCGlobals.ToolId);
        if (def instanceof OpDefNode) {
          this.processConstants(((OpDefNode)def).getBody());
        }
        this.processConstants(opDefs[i].getBody());
      }
      ModuleNode[] imods=expr1.getInnerModules();
      for (int i=0; i < imods.length; i++) {
        this.processConstants(imods[i]);
      }
      AssumeNode[] assumps=expr1.getAssumptions();
      for (int i=0; i < assumps.length; i++) {
        this.processConstants(assumps[i]);
      }
      return;
    }
case OpApplKind:
{
    OpApplNode expr1=(OpApplNode)expr;
    SymbolNode opNode=expr1.getOperator();
    Object val=this.defns.get(opNode.getName());
    if (val != null) {
      opNode.setToolObject(TLCGlobals.ToolId,val);
    }
 else {
      SemanticNode[] args=expr1.getArgs();
      for (int i=0; i < args.length; i++) {
        if (args[i] != null) {
          this.processConstants(args[i]);
        }
      }
      ExprNode[] bnds=expr1.getBdedQuantBounds();
      for (int i=0; i < bnds.length; i++) {
        this.processConstants(bnds[i]);
      }
    }
    return;
  }
case LetInKind:
{
  LetInNode expr1=(LetInNode)expr;
  OpDefNode[] letDefs=expr1.getLets();
  for (int i=0; i < letDefs.length; i++) {
    this.processConstants(letDefs[i].getBody());
  }
  this.processConstants(expr1.getBody());
  return;
}
case SubstInKind:
{
SubstInNode expr1=(SubstInNode)expr;
Subst[] subs=expr1.getSubsts();
for (int i=0; i < subs.length; i++) {
  this.processConstants(subs[i].getExpr());
}
this.processConstants(expr1.getBody());
return;
}
case NumeralKind:
{
NumeralNode expr1=(NumeralNode)expr;
IntValue val=IntValue.gen(expr1.val());
expr1.setToolObject(TLCGlobals.ToolId,val);
return;
}
case DecimalKind:
{
DecimalNode expr1=(DecimalNode)expr;
Assert.fail(EC.TLC_CANT_HANDLE_REAL_NUMBERS,expr1.toString());
return;
}
case StringKind:
{
StringNode expr1=(StringNode)expr;
StringValue val=new StringValue(expr1.getRep());
expr1.setToolObject(TLCGlobals.ToolId,val);
return;
}
case AssumeKind:
{
AssumeNode expr1=(AssumeNode)expr;
this.processConstants(expr1.getAssume());
return;
}
case OpArgKind:
{
SymbolNode opArgNode=((OpArgNode)expr).getOp();
if (opArgNode.getKind() == UserDefinedOpKind) {
this.processConstants(((OpDefNode)opArgNode).getBody());
}
return;
}
case LabelKind:
{
LabelNode expr1=(LabelNode)expr;
this.processConstants(expr1.getBody());
}
}
}","/** 
 * The following method goes through all the nodes to set their            tool-specific fields.  It was modified on 1 May 2007 so it would find   the nodes in the body of a Lambda expression.  Obviously, if new        semantic node types are added, this method will have to be modified.    Less obviously, if a tool wants to call TLC on a specification that     was not all created inside a module, then this method may need to be    modified so TLC finds thos nodes not part of the module.                * Yuan claims that this is the only method in TLC that has to find all    the nodes in such a way.                                               
 */
private final void processConstants(SemanticNode expr){
switch (expr.getKind()) {
case ModuleKind:
{
      ModuleNode expr1=(ModuleNode)expr;
      OpDefNode[] opDefs=expr1.getOpDefs();
      for (int i=0; i < opDefs.length; i++) {
        Object def=opDefs[i].getToolObject(TLCGlobals.ToolId);
        if (def instanceof OpDefNode) {
          this.processConstants(((OpDefNode)def).getBody());
        }
        this.processConstants(opDefs[i].getBody());
      }
      ModuleNode[] imods=expr1.getInnerModules();
      for (int i=0; i < imods.length; i++) {
        this.processConstants(imods[i]);
      }
      AssumeNode[] assumps=expr1.getAssumptions();
      for (int i=0; i < assumps.length; i++) {
        this.processConstants(assumps[i]);
      }
      TheoremNode[] thms=expr1.getTheorems();
      for (int i=0; i < thms.length; i++) {
        this.processConstants(thms[i]);
      }
      return;
    }
case OpApplKind:
{
    OpApplNode expr1=(OpApplNode)expr;
    SymbolNode opNode=expr1.getOperator();
    Object val=this.defns.get(opNode.getName());
    if (val != null) {
      opNode.setToolObject(TLCGlobals.ToolId,val);
    }
 else {
      SemanticNode[] args=expr1.getArgs();
      for (int i=0; i < args.length; i++) {
        if (args[i] != null) {
          this.processConstants(args[i]);
        }
      }
      ExprNode[] bnds=expr1.getBdedQuantBounds();
      for (int i=0; i < bnds.length; i++) {
        this.processConstants(bnds[i]);
      }
    }
    return;
  }
case LetInKind:
{
  LetInNode expr1=(LetInNode)expr;
  OpDefNode[] letDefs=expr1.getLets();
  for (int i=0; i < letDefs.length; i++) {
    this.processConstants(letDefs[i].getBody());
  }
  this.processConstants(expr1.getBody());
  return;
}
case SubstInKind:
{
SubstInNode expr1=(SubstInNode)expr;
Subst[] subs=expr1.getSubsts();
for (int i=0; i < subs.length; i++) {
  this.processConstants(subs[i].getExpr());
}
this.processConstants(expr1.getBody());
return;
}
case APSubstInKind:
{
APSubstInNode expr1=(APSubstInNode)expr;
Subst[] subs=expr1.getSubsts();
for (int i=0; i < subs.length; i++) {
this.processConstants(subs[i].getExpr());
}
this.processConstants(expr1.getBody());
return;
}
case NumeralKind:
{
NumeralNode expr1=(NumeralNode)expr;
IntValue val=IntValue.gen(expr1.val());
expr1.setToolObject(TLCGlobals.ToolId,val);
return;
}
case DecimalKind:
{
DecimalNode expr1=(DecimalNode)expr;
Assert.fail(EC.TLC_CANT_HANDLE_REAL_NUMBERS,expr1.toString());
return;
}
case StringKind:
{
StringNode expr1=(StringNode)expr;
StringValue val=new StringValue(expr1.getRep());
expr1.setToolObject(TLCGlobals.ToolId,val);
return;
}
case AssumeKind:
{
AssumeNode expr1=(AssumeNode)expr;
this.processConstants(expr1.getAssume());
return;
}
case TheoremKind:
{
TheoremNode expr1=(TheoremNode)expr;
this.processConstants(expr1.getTheorem());
return;
}
case OpArgKind:
{
SymbolNode opArgNode=((OpArgNode)expr).getOp();
if (opArgNode.getKind() == UserDefinedOpKind) {
this.processConstants(((OpDefNode)opArgNode).getBody());
}
return;
}
case LabelKind:
{
LabelNode expr1=(LabelNode)expr;
this.processConstants(expr1.getBody());
}
}
}",0.9330325673198928
136054,"private final void processConfigSpec(ExprNode pred,Context c,List subs){
  if (pred instanceof SubstInNode) {
    SubstInNode pred1=(SubstInNode)pred;
    this.processConfigSpec(pred1.getBody(),c,subs.cons(pred1));
    return;
  }
  if (pred instanceof OpApplNode) {
    OpApplNode pred1=(OpApplNode)pred;
    ExprOrOpArgNode[] args=pred1.getArgs();
    if (args.length == 0) {
      SymbolNode opNode=pred1.getOperator();
      Object val=this.lookup(opNode,c,false);
      if (val instanceof OpDefNode) {
        if (((OpDefNode)val).getArity() != 0) {
          Assert.fail(EC.TLC_CONFIG_OP_NO_ARGS,new String[]{opNode.getName().toString()});
        }
        ExprNode body=((OpDefNode)val).getBody();
        if (this.getLevelBound(body,c) == 1) {
          this.initPredVec.addElement(new Action(Spec.addSubsts(body,subs),c));
        }
 else {
          this.processConfigSpec(body,c,subs);
        }
      }
 else       if (val == null) {
        Assert.fail(EC.TLC_CONFIG_OP_NOT_IN_SPEC,new String[]{opNode.getName().toString()});
      }
 else       if (val instanceof BoolValue) {
        if (!((BoolValue)val).val) {
          Assert.fail(EC.TLC_CONFIG_SPEC_IS_TRIVIAL,opNode.getName().toString());
        }
      }
 else {
        Assert.fail(EC.TLC_CONFIG_OP_IS_EQUAL,new String[]{opNode.getName().toString(),val.toString()});
      }
      return;
    }
    int opcode=BuiltInOPs.getOpCode(pred1.getOperator().getName());
    if (opcode == OPCODE_cl || opcode == OPCODE_land) {
      for (int i=0; i < args.length; i++) {
        this.processConfigSpec((ExprNode)args[i],c,subs);
      }
      return;
    }
    if (opcode == OPCODE_box) {
      SemanticNode boxArg=args[0];
      if ((boxArg instanceof OpApplNode) && BuiltInOPs.getOpCode(((OpApplNode)boxArg).getOperator().getName()) == OPCODE_sa) {
        ExprNode arg=(ExprNode)((OpApplNode)boxArg).getArgs()[0];
        ExprNode subscript=(ExprNode)((OpApplNode)boxArg).getArgs()[1];
        Vect varsInSubscript=null;
        try {
class SubscriptCollector {
            /** 
 * This class attempts to recover all variables that appear in (possibly nested) tuples in the subscript of the next-state relation. Variables that appear in other kinds of expressions are ignored. The idea is to make sure that the subscript is a tuple that contains at least the declared variables of this specification object -- otherwise TLC's analysis is incorrect.
 */
            Vect components;
            SubscriptCollector(){
              this.components=new Vect();
            }
            void enter(            ExprNode subscript,            Context c){
              SymbolNode var=getVar(subscript,c,false);
              if (var != null) {
                components.addElement(var);
                return;
              }
switch (subscript.getKind()) {
case OpApplKind:
{
                  OpApplNode subscript1=(OpApplNode)subscript;
                  SymbolNode opNode=subscript1.getOperator();
                  ExprOrOpArgNode[] args=subscript1.getArgs();
                  int opCode=BuiltInOPs.getOpCode(opNode.getName());
                  if (opCode == OPCODE_tup) {
                    for (int i=0; i < args.length; i++) {
                      this.enter((ExprNode)args[i],c);
                    }
                    return;
                  }
 else                   if (opCode != 0) {
                    return;
                  }
                  Object opDef=lookup(opNode,c,false);
                  if (opDef instanceof OpDefNode) {
                    OpDefNode opDef1=(OpDefNode)opDef;
                    this.enter(opDef1.getBody(),getOpContext(opDef1,args,c,false));
                    return;
                  }
                  if (opDef instanceof LazyValue) {
                    LazyValue lv=(LazyValue)opDef;
                    this.enter((ExprNode)lv.expr,lv.con);
                    return;
                  }
                  break;
                }
case SubstInKind:
{
                SubstInNode subscript1=(SubstInNode)subscript;
                Subst[] subs=subscript1.getSubsts();
                Context c1=c;
                for (int i=0; i < subs.length; i++) {
                  c1=c1.cons(subs[i].getOp(),getVal(subs[i].getExpr(),c,false));
                }
                this.enter(subscript1.getBody(),c1);
                return;
              }
case LetInKind:
{
              LetInNode subscript1=(LetInNode)subscript;
              this.enter(subscript1.getBody(),c);
              return;
            }
case LabelKind:
{
            LabelNode subscript1=(LabelNode)subscript;
            this.enter((ExprNode)subscript1.getBody(),c);
            return;
          }
default :
        Assert.fail(EC.TLC_CANT_HANDLE_SUBSCRIPT,subscript.toString());
      return;
  }
}
Vect getComponents(){
  return components;
}
}
SubscriptCollector collector=new SubscriptCollector();
Context c1=c;
List subs1=subs;
while (!subs1.isEmpty()) {
SubstInNode sn=(SubstInNode)subs1.car();
Subst[] snsubs=sn.getSubsts();
for (int i=0; i < snsubs.length; i++) {
  c1=c1.cons(snsubs[i].getOp(),getVal(snsubs[i].getExpr(),c,false));
}
subs1=subs1.cdr();
}
collector.enter(subscript,c1);
varsInSubscript=collector.getComponents();
}
 catch (Exception e) {
MP.printWarning(EC.TLC_COULD_NOT_DETERMINE_SUBSCRIPT,new String[0]);
varsInSubscript=null;
}
if (varsInSubscript != null) {
for (int i=0; i < this.variablesNodes.length; i++) {
if (!varsInSubscript.contains(this.variablesNodes[i])) {
  MP.printWarning(EC.TLC_SUBSCRIPT_CONTAIN_NO_STATE_VAR,new String[]{this.variablesNodes[i].getName().toString()});
}
}
}
if (this.nextPred == null) {
this.nextPred=new Action(Spec.addSubsts(arg,subs),c);
}
 else {
Assert.fail(EC.TLC_CANT_HANDLE_TOO_MANY_NEXT_STATE_RELS);
}
}
 else {
this.temporalVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
this.temporalNameVec.addElement(pred.toString());
}
return;
}
}
int level=this.getLevelBound(pred,c);
if (level <= 1) {
this.initPredVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
}
 else if (level == 3) {
this.temporalVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
this.temporalNameVec.addElement(pred.toString());
}
 else {
Assert.fail(EC.TLC_CANT_HANDLE_CONJUNCT,pred.toString());
}
}","private final void processConfigSpec(ExprNode pred,Context c,List subs){
  if (pred instanceof SubstInNode) {
    SubstInNode pred1=(SubstInNode)pred;
    this.processConfigSpec(pred1.getBody(),c,subs.cons(pred1));
    return;
  }
  if (pred instanceof OpApplNode) {
    OpApplNode pred1=(OpApplNode)pred;
    ExprOrOpArgNode[] args=pred1.getArgs();
    if (args.length == 0) {
      SymbolNode opNode=pred1.getOperator();
      Object val=this.lookup(opNode,c,false);
      if (val instanceof OpDefNode) {
        if (((OpDefNode)val).getArity() != 0) {
          Assert.fail(EC.TLC_CONFIG_OP_NO_ARGS,new String[]{opNode.getName().toString()});
        }
        ExprNode body=((OpDefNode)val).getBody();
        if (this.getLevelBound(body,c) == 1) {
          this.initPredVec.addElement(new Action(Spec.addSubsts(body,subs),c));
        }
 else {
          this.processConfigSpec(body,c,subs);
        }
      }
 else       if (val == null) {
        Assert.fail(EC.TLC_CONFIG_OP_NOT_IN_SPEC,new String[]{opNode.getName().toString()});
      }
 else       if (val instanceof BoolValue) {
        if (!((BoolValue)val).val) {
          Assert.fail(EC.TLC_CONFIG_SPEC_IS_TRIVIAL,opNode.getName().toString());
        }
      }
 else {
        Assert.fail(EC.TLC_CONFIG_OP_IS_EQUAL,new String[]{opNode.getName().toString(),val.toString(),""String_Node_Str""});
      }
      return;
    }
    int opcode=BuiltInOPs.getOpCode(pred1.getOperator().getName());
    if (opcode == OPCODE_cl || opcode == OPCODE_land) {
      for (int i=0; i < args.length; i++) {
        this.processConfigSpec((ExprNode)args[i],c,subs);
      }
      return;
    }
    if (opcode == OPCODE_box) {
      SemanticNode boxArg=args[0];
      if ((boxArg instanceof OpApplNode) && BuiltInOPs.getOpCode(((OpApplNode)boxArg).getOperator().getName()) == OPCODE_sa) {
        ExprNode arg=(ExprNode)((OpApplNode)boxArg).getArgs()[0];
        ExprNode subscript=(ExprNode)((OpApplNode)boxArg).getArgs()[1];
        Vect varsInSubscript=null;
        try {
class SubscriptCollector {
            /** 
 * This class attempts to recover all variables that appear in (possibly nested) tuples in the subscript of the next-state relation. Variables that appear in other kinds of expressions are ignored. The idea is to make sure that the subscript is a tuple that contains at least the declared variables of this specification object -- otherwise TLC's analysis is incorrect.
 */
            Vect components;
            SubscriptCollector(){
              this.components=new Vect();
            }
            void enter(            ExprNode subscript,            Context c){
              SymbolNode var=getVar(subscript,c,false);
              if (var != null) {
                components.addElement(var);
                return;
              }
switch (subscript.getKind()) {
case OpApplKind:
{
                  OpApplNode subscript1=(OpApplNode)subscript;
                  SymbolNode opNode=subscript1.getOperator();
                  ExprOrOpArgNode[] args=subscript1.getArgs();
                  int opCode=BuiltInOPs.getOpCode(opNode.getName());
                  if (opCode == OPCODE_tup) {
                    for (int i=0; i < args.length; i++) {
                      this.enter((ExprNode)args[i],c);
                    }
                    return;
                  }
 else                   if (opCode != 0) {
                    return;
                  }
                  Object opDef=lookup(opNode,c,false);
                  if (opDef instanceof OpDefNode) {
                    OpDefNode opDef1=(OpDefNode)opDef;
                    this.enter(opDef1.getBody(),getOpContext(opDef1,args,c,false));
                    return;
                  }
                  if (opDef instanceof LazyValue) {
                    LazyValue lv=(LazyValue)opDef;
                    this.enter((ExprNode)lv.expr,lv.con);
                    return;
                  }
                  break;
                }
case SubstInKind:
{
                SubstInNode subscript1=(SubstInNode)subscript;
                Subst[] subs=subscript1.getSubsts();
                Context c1=c;
                for (int i=0; i < subs.length; i++) {
                  c1=c1.cons(subs[i].getOp(),getVal(subs[i].getExpr(),c,false));
                }
                this.enter(subscript1.getBody(),c1);
                return;
              }
case LetInKind:
{
              LetInNode subscript1=(LetInNode)subscript;
              this.enter(subscript1.getBody(),c);
              return;
            }
case LabelKind:
{
            LabelNode subscript1=(LabelNode)subscript;
            this.enter((ExprNode)subscript1.getBody(),c);
            return;
          }
default :
        Assert.fail(EC.TLC_CANT_HANDLE_SUBSCRIPT,subscript.toString());
      return;
  }
}
Vect getComponents(){
  return components;
}
}
SubscriptCollector collector=new SubscriptCollector();
Context c1=c;
List subs1=subs;
while (!subs1.isEmpty()) {
SubstInNode sn=(SubstInNode)subs1.car();
Subst[] snsubs=sn.getSubsts();
for (int i=0; i < snsubs.length; i++) {
  c1=c1.cons(snsubs[i].getOp(),getVal(snsubs[i].getExpr(),c,false));
}
subs1=subs1.cdr();
}
collector.enter(subscript,c1);
varsInSubscript=collector.getComponents();
}
 catch (Exception e) {
MP.printWarning(EC.TLC_COULD_NOT_DETERMINE_SUBSCRIPT,new String[0]);
varsInSubscript=null;
}
if (varsInSubscript != null) {
for (int i=0; i < this.variablesNodes.length; i++) {
if (!varsInSubscript.contains(this.variablesNodes[i])) {
  MP.printWarning(EC.TLC_SUBSCRIPT_CONTAIN_NO_STATE_VAR,new String[]{this.variablesNodes[i].getName().toString()});
}
}
}
if (this.nextPred == null) {
this.nextPred=new Action(Spec.addSubsts(arg,subs),c);
}
 else {
Assert.fail(EC.TLC_CANT_HANDLE_TOO_MANY_NEXT_STATE_RELS);
}
}
 else {
this.temporalVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
this.temporalNameVec.addElement(pred.toString());
}
return;
}
if (opcode == OPCODE_nop) {
this.processConfigSpec((ExprNode)args[0],c,subs);
return;
}
}
int level=this.getLevelBound(pred,c);
if (level <= 1) {
this.initPredVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
}
 else if (level == 3) {
this.temporalVec.addElement(new Action(Spec.addSubsts(pred,subs),c));
this.temporalNameVec.addElement(pred.toString());
}
 else {
Assert.fail(EC.TLC_CANT_HANDLE_CONJUNCT,pred.toString());
}
}",0.9916086130462318
136055,"/** 
 * This method only returns an approximation of the level of the expression.  The ""real"" level is at most the return value. Adding <name, ValOne> to the context means that there is no need to compute level for name. Note that this method does not work if called on a part of an EXCEPT expression.
 */
public final int getLevelBound(SemanticNode expr,Context c){
switch (expr.getKind()) {
case OpApplKind:
{
      OpApplNode expr1=(OpApplNode)expr;
      return this.getLevelBoundAppl(expr1,c);
    }
case LetInKind:
{
    LetInNode expr1=(LetInNode)expr;
    OpDefNode[] letDefs=expr1.getLets();
    int letLen=letDefs.length;
    Context c1=c;
    int level=0;
    for (int i=0; i < letLen; i++) {
      OpDefNode opDef=letDefs[i];
      level=Math.max(level,this.getLevelBound(opDef.getBody(),c1));
      c1=c1.cons(opDef,ValOne);
    }
    return Math.max(level,this.getLevelBound(expr1.getBody(),c1));
  }
case SubstInKind:
{
  SubstInNode expr1=(SubstInNode)expr;
  Subst[] subs=expr1.getSubsts();
  int slen=subs.length;
  Context c1=c;
  for (int i=0; i < slen; i++) {
    Subst sub=subs[i];
    c1=c1.cons(sub.getOp(),this.getVal(sub.getExpr(),c,true));
  }
  return this.getLevelBound(expr1.getBody(),c1);
}
case LabelKind:
{
LabelNode expr1=(LabelNode)expr;
return this.getLevelBound(expr1.getBody(),c);
}
default :
{
return 0;
}
}
}","/** 
 * This method only returns an approximation of the level of the expression.  The ""real"" level is at most the return value. Adding <name, ValOne> to the context means that there is no need to compute level for name. Note that this method does not work if called on a part of an EXCEPT expression.
 */
public final int getLevelBound(SemanticNode expr,Context c){
switch (expr.getKind()) {
case OpApplKind:
{
      OpApplNode expr1=(OpApplNode)expr;
      return this.getLevelBoundAppl(expr1,c);
    }
case LetInKind:
{
    LetInNode expr1=(LetInNode)expr;
    OpDefNode[] letDefs=expr1.getLets();
    int letLen=letDefs.length;
    Context c1=c;
    int level=0;
    for (int i=0; i < letLen; i++) {
      OpDefNode opDef=letDefs[i];
      level=Math.max(level,this.getLevelBound(opDef.getBody(),c1));
      c1=c1.cons(opDef,ValOne);
    }
    return Math.max(level,this.getLevelBound(expr1.getBody(),c1));
  }
case SubstInKind:
{
  SubstInNode expr1=(SubstInNode)expr;
  Subst[] subs=expr1.getSubsts();
  int slen=subs.length;
  Context c1=c;
  for (int i=0; i < slen; i++) {
    Subst sub=subs[i];
    c1=c1.cons(sub.getOp(),this.getVal(sub.getExpr(),c,true));
  }
  return this.getLevelBound(expr1.getBody(),c1);
}
case APSubstInKind:
{
APSubstInNode expr1=(APSubstInNode)expr;
Subst[] subs=expr1.getSubsts();
int slen=subs.length;
Context c1=c;
for (int i=0; i < slen; i++) {
  Subst sub=subs[i];
  c1=c1.cons(sub.getOp(),this.getVal(sub.getExpr(),c,true));
}
return this.getLevelBound(expr1.getBody(),c1);
}
case LabelKind:
{
LabelNode expr1=(LabelNode)expr;
return this.getLevelBound(expr1.getBody(),c);
}
default :
{
return 0;
}
}
}",0.9013707790036776
136056,"private final void collectPrimedLocsAppl(OpApplNode pred,Context c,ObjLongTable tbl){
  ExprOrOpArgNode[] args=pred.getArgs();
  SymbolNode opNode=pred.getOperator();
  int opcode=BuiltInOPs.getOpCode(opNode.getName());
switch (opcode) {
case OPCODE_fa:
{
      this.collectPrimedLocs(args[0],c,tbl);
      break;
    }
case OPCODE_ite:
{
    this.collectPrimedLocs(args[1],c,tbl);
    this.collectPrimedLocs(args[2],c,tbl);
    break;
  }
case OPCODE_case:
{
  for (int i=0; i < args.length; i++) {
    OpApplNode pair=(OpApplNode)args[i];
    this.collectPrimedLocs(pair.getArgs()[1],c,tbl);
  }
  break;
}
case OPCODE_eq:
case OPCODE_in:
{
SymbolNode var=this.getPrimedVar(args[0],c,false);
if (var != null && var.getName().getVarLoc() != -1) {
  tbl.put(pred.toString(),0);
}
break;
}
case OPCODE_cl:
case OPCODE_dl:
case OPCODE_be:
case OPCODE_bf:
case OPCODE_land:
case OPCODE_lor:
case OPCODE_implies:
{
for (int i=0; i < args.length; i++) {
this.collectPrimedLocs(args[i],c,tbl);
}
break;
}
case OPCODE_unchanged:
{
this.collectUnchangedLocs(args[0],c,tbl);
break;
}
case OPCODE_aa:
{
this.collectPrimedLocs(args[0],c,tbl);
break;
}
case OPCODE_sa:
{
this.collectPrimedLocs(args[0],c,tbl);
tbl.put(args[1].toString(),0);
break;
}
default :
{
if (opcode == 0) {
Object val=this.lookup(opNode,c,false);
if (val instanceof OpDefNode) {
OpDefNode opDef=(OpDefNode)val;
Context c1=this.getOpContext(opDef,args,c,true);
this.collectPrimedLocs(opDef.getBody(),c1,tbl);
}
 else if (val instanceof LazyValue) {
LazyValue lv=(LazyValue)val;
this.collectPrimedLocs(lv.expr,lv.con,tbl);
}
}
}
}
}","private final void collectPrimedLocsAppl(OpApplNode pred,Context c,ObjLongTable tbl){
  ExprOrOpArgNode[] args=pred.getArgs();
  SymbolNode opNode=pred.getOperator();
  int opcode=BuiltInOPs.getOpCode(opNode.getName());
switch (opcode) {
case OPCODE_fa:
{
      this.collectPrimedLocs(args[0],c,tbl);
      break;
    }
case OPCODE_ite:
{
    this.collectPrimedLocs(args[1],c,tbl);
    this.collectPrimedLocs(args[2],c,tbl);
    break;
  }
case OPCODE_case:
{
  for (int i=0; i < args.length; i++) {
    OpApplNode pair=(OpApplNode)args[i];
    this.collectPrimedLocs(pair.getArgs()[1],c,tbl);
  }
  break;
}
case OPCODE_eq:
case OPCODE_in:
{
SymbolNode var=this.getPrimedVar(args[0],c,false);
if (var != null && var.getName().getVarLoc() != -1) {
  tbl.put(pred.toString(),0);
}
break;
}
case OPCODE_cl:
case OPCODE_dl:
case OPCODE_be:
case OPCODE_bf:
case OPCODE_land:
case OPCODE_lor:
case OPCODE_implies:
case OPCODE_nop:
{
for (int i=0; i < args.length; i++) {
this.collectPrimedLocs(args[i],c,tbl);
}
break;
}
case OPCODE_unchanged:
{
this.collectUnchangedLocs(args[0],c,tbl);
break;
}
case OPCODE_aa:
{
this.collectPrimedLocs(args[0],c,tbl);
break;
}
case OPCODE_sa:
{
this.collectPrimedLocs(args[0],c,tbl);
tbl.put(args[1].toString(),0);
break;
}
default :
{
if (opcode == 0) {
Object val=this.lookup(opNode,c,false);
if (val instanceof OpDefNode) {
OpDefNode opDef=(OpDefNode)val;
Context c1=this.getOpContext(opDef,args,c,true);
this.collectPrimedLocs(opDef.getBody(),c1,tbl);
}
 else if (val instanceof LazyValue) {
LazyValue lv=(LazyValue)val;
this.collectPrimedLocs(lv.expr,lv.con,tbl);
}
}
}
}
}",0.9946891596376132
136057,"public boolean canFinish(){
  return (assignmentPage.isCurrentPage() && !assignmentPage.isTypeInputPossible()) || !assignmentPage.isCurrentPage();
}","/** 
 * This returns whether the Finish button should be enabled. In order for this to be evaluated, getContainer().updateButtons() must be called by the page whose buttons are to be updated. For this particular wizard, that page is a AssignmentWizardPage. Within the method createControl a listener is added to the text field which calls updateButtons() whenever the input text is modified.
 */
public boolean canFinish(){
  String inputText=assignmentPage.getInputText();
  return (assignmentPage.isCurrentPage() && !assignmentPage.isTypeInputPossible() && inputText != null && inputText.trim().length() != 0) || !assignmentPage.isCurrentPage();
}",0.3713927227101631
136058,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NULL);
  GridLayout layout=new GridLayout(1,false);
  container.setLayout(layout);
  sourceViewer=FormHelper.createSourceViewer(container,SWT.BORDER | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL);
  GridData gd=new GridData(SWT.CENTER,SWT.CENTER,true,true);
  gd.heightHint=200;
  gd.widthHint=400;
  gd.grabExcessHorizontalSpace=true;
  gd.grabExcessVerticalSpace=true;
  StyledText control=sourceViewer.getTextWidget();
  control.setEditable(true);
  control.setLayoutData(gd);
  if (this.document == null) {
    this.document=new Document();
  }
  sourceViewer.setDocument(this.getDocument());
  setControl(container);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NULL);
  GridLayout layout=new GridLayout(1,false);
  container.setLayout(layout);
  sourceViewer=FormHelper.createSourceViewer(container,SWT.BORDER | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL);
  GridData gd=new GridData(SWT.CENTER,SWT.CENTER,true,true);
  gd.heightHint=200;
  gd.widthHint=400;
  gd.grabExcessHorizontalSpace=true;
  gd.grabExcessVerticalSpace=true;
  StyledText control=sourceViewer.getTextWidget();
  control.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      getContainer().updateButtons();
    }
  }
);
  control.setEditable(true);
  control.setLayoutData(gd);
  if (this.document == null) {
    this.document=new Document();
  }
  sourceViewer.setDocument(this.getDocument());
  setControl(container);
}",0.9017857142857144
136059,"/** 
 * Create the content for a single source element
 * @return a list with at most one String[] element
 * @throws CoreException 
 */
public static List createSourceContent(String propertyName,String labelingScheme,ILaunchConfiguration config) throws CoreException {
  Vector result=new Vector();
  String value=config.getAttribute(propertyName,EMPTY_STRING);
  if (EMPTY_STRING.equals(value)) {
    return result;
  }
  String identifier=getValidIdentifier(labelingScheme);
  StringBuffer buffer=new StringBuffer();
  buffer.append(identifier).append(DEFINES_CR);
  buffer.append(value);
  result.add(new String[]{identifier,buffer.toString()});
  return result;
}","/** 
 * Create the content for a single source element
 * @return a list with at most one String[] element
 * @throws CoreException 
 */
public static List createSourceContent(String propertyName,String labelingScheme,ILaunchConfiguration config) throws CoreException {
  Vector result=new Vector();
  String value=config.getAttribute(propertyName,EMPTY_STRING);
  if (value.trim().length() == 0) {
    return result;
  }
  String identifier=getValidIdentifier(labelingScheme);
  StringBuffer buffer=new StringBuffer();
  buffer.append(identifier).append(DEFINES_CR);
  buffer.append(value);
  result.add(new String[]{identifier,buffer.toString()});
  return result;
}",0.968562874251497
136060,"/** 
 * New definitions are added to the _MC.tla file only
 * @param elements
 */
public void addNewDefinitions(String definitions,String attributeName){
  if (definitions.length() == 0) {
    return;
  }
  tlaBuffer.append(COMMENT).append(""String_Node_Str"").append(ATTRIBUTE).append(attributeName).append(CR);
  tlaBuffer.append(definitions).append(CR).append(SEP).append(CR);
}","/** 
 * New definitions are added to the _MC.tla file only
 * @param elements
 */
public void addNewDefinitions(String definitions,String attributeName){
  if (definitions.trim().length() == 0) {
    return;
  }
  tlaBuffer.append(COMMENT).append(""String_Node_Str"").append(ATTRIBUTE).append(attributeName).append(CR);
  tlaBuffer.append(definitions).append(CR).append(SEP).append(CR);
}",0.9908496732026144
136061,"/** 
 * Calls SANY, that parses the root module. <br> <b>Note:</b> This method fills the error objects   {@link ParseSpecHandler#parseErrors} and{@link ParseSpecHandler#semanticErrors}. Call   {@link ParseSpecHandler#processParsingErrors(Spec)} to store thisinformation in the specification handle
 * @param doSemanticAnalysis if true, the semantical phase will be started
 * @param parseResource filename of the module to parse
 * @return status of parsing, one of the {@link IParseConstants} constants
 */
private ParseResult parseModule(IResource parseResource,boolean updateStorage){
  String moduleFilename=parseResource.getLocation().toOSString();
  int specStatus=0;
  Errors parseErrors=null;
  Errors semanticErrors=null;
  FilenameToStream resolver=new RCPNameToFileIStream(null);
  ToolIO.reset();
  ToolIO.setDefaultResolver(resolver);
  ToolIO.setMode(ToolIO.TOOL);
  SpecObj moduleSpec=new SpecObj(ResourceHelper.getModuleName(moduleFilename),resolver);
  PrintStream outputStr=ToolIO.out;
  try {
    SANY.frontEndInitialize(moduleSpec,outputStr);
    SANY.frontEndParse(moduleSpec,outputStr);
    SANY.frontEndSemanticAnalysis(moduleSpec,outputStr,true);
  }
 catch (  InitException e) {
    specStatus=IParseConstants.UNKNOWN_ERROR;
    return new ParseResult(specStatus,null,parseResource,parseErrors,semanticErrors);
  }
catch (  ParseException e) {
    specStatus=IParseConstants.SYNTAX_ERROR;
    parseErrors=moduleSpec.getParseErrors();
  }
catch (  SemanticException e) {
    specStatus=IParseConstants.SEMANTIC_ERROR;
  }
  if (specStatus > IParseConstants.SYNTAX_ERROR) {
    semanticErrors=moduleSpec.semanticErrors;
    if (semanticErrors != null) {
      if (semanticErrors.getNumMessages() > 0) {
        if (semanticErrors.isSuccess()) {
          specStatus=IParseConstants.SEMANTIC_WARNING;
        }
 else {
          specStatus=IParseConstants.SEMANTIC_ERROR;
        }
      }
    }
  }
  Vector userModules=new Vector();
  boolean rootModuleFound=false;
  final Vector resourcesToTimeStamp=new Vector();
  Enumeration enumerate=moduleSpec.parseUnitContext.keys();
  while (enumerate.hasMoreElements()) {
    String moduleName=(String)enumerate.nextElement();
    ParseUnit parseUnit=(ParseUnit)moduleSpec.parseUnitContext.get(moduleName);
    String absoluteFileName=null;
    if (parseUnit.getNis() != null && parseUnit.getNis().sourceFile() != null) {
      absoluteFileName=parseUnit.getNis().sourceFile().getAbsolutePath();
    }
    if (absoluteFileName == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Module module=new Module(absoluteFileName);
    if (!module.isStandardModule() && updateStorage) {
      IResource moduleResource=ResourceHelper.getResourceByModuleName(moduleName);
      if (moduleResource != null && moduleResource.exists()) {
        resourcesToTimeStamp.add(moduleResource);
      }
    }
    if (specStatus > IParseConstants.SEMANTIC_ERROR) {
      ExternalModuleTable.ExternalModuleTableEntry emt=(ExternalModuleTable.ExternalModuleTableEntry)moduleSpec.getExternalModuleTable().moduleHashTable.get(UniqueString.uniqueStringOf(module.getModuleName()));
      if (emt != null) {
        module.setNode(emt.getModuleNode());
      }
    }
    if (module.getModuleName().equals(ResourceHelper.getModuleName(moduleFilename))) {
      rootModuleFound=true;
      module.setRoot(true);
    }
    if (module.isStandardModule()) {
    }
 else {
      userModules.addElement(module);
      if (module.getAbsolutePath().indexOf(parseResource.getProject().getLocation().toOSString()) != 0) {
        ResourceHelper.getLinkedFile(parseResource.getProject(),module.getAbsolutePath(),true);
      }
    }
  }
  try {
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        Iterator iterator=resourcesToTimeStamp.iterator();
        while (iterator.hasNext()) {
          IResource resource=(IResource)iterator.next();
          resource.setPersistentProperty(TLAParsingBuilderConstants.LAST_BUILT,String.valueOf(System.currentTimeMillis()));
        }
      }
    }
,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    Activator.logError(""String_Node_Str"",e);
  }
  if (!rootModuleFound) {
    specStatus=IParseConstants.COULD_NOT_FIND_MODULE;
  }
  if (updateStorage) {
    Activator.getModuleDependencyStorage().put(parseResource.getName(),AdapterFactory.adaptModules(parseResource.getName(),userModules));
  }
  return new ParseResult(specStatus,moduleSpec,parseResource,parseErrors,semanticErrors);
}","/** 
 * Calls SANY, that parses the root module. <br> <b>Note:</b> This method fills the error objects   {@link ParseSpecHandler#parseErrors} and{@link ParseSpecHandler#semanticErrors}. Call   {@link ParseSpecHandler#processParsingErrors(Spec)} to store thisinformation in the specification handle
 * @param doSemanticAnalysis if true, the semantical phase will be started
 * @param parseResource filename of the module to parse
 * @return status of parsing, one of the {@link IParseConstants} constants
 */
private ParseResult parseModule(IResource parseResource,boolean updateStorage){
  String moduleFilename=parseResource.getLocation().toOSString();
  int specStatus=0;
  Errors parseErrors=null;
  Errors semanticErrors=null;
  FilenameToStream resolver=new RCPNameToFileIStream(null);
  ToolIO.reset();
  ToolIO.setDefaultResolver(resolver);
  ToolIO.setMode(ToolIO.TOOL);
  SpecObj moduleSpec=new SpecObj(ResourceHelper.getModuleName(moduleFilename),resolver);
  PrintStream outputStr=ToolIO.out;
  try {
    SANY.frontEndInitialize(moduleSpec,outputStr);
    SANY.frontEndParse(moduleSpec,outputStr);
    SANY.frontEndSemanticAnalysis(moduleSpec,outputStr,true);
  }
 catch (  InitException e) {
    specStatus=IParseConstants.UNKNOWN_ERROR;
    return new ParseResult(specStatus,null,parseResource,parseErrors,semanticErrors);
  }
catch (  ParseException e) {
    specStatus=IParseConstants.SYNTAX_ERROR;
    parseErrors=moduleSpec.getParseErrors();
  }
catch (  SemanticException e) {
    specStatus=IParseConstants.SEMANTIC_ERROR;
  }
  if (specStatus > IParseConstants.SYNTAX_ERROR) {
    semanticErrors=moduleSpec.semanticErrors;
    if (semanticErrors != null) {
      Errors globalContextErrors=moduleSpec.getGlobalContextErrors();
      String[] errors=globalContextErrors.getErrors();
      for (int i=0; i < errors.length; i++) {
        semanticErrors.addError(null,errors[i]);
      }
      String[] aborts=globalContextErrors.getAborts();
      for (int i=0; i < aborts.length; i++) {
        try {
          semanticErrors.addAbort(aborts[i],false);
        }
 catch (        AbortException e) {
          Activator.logDebug(""String_Node_Str"" + ""String_Node_Str"");
        }
      }
      String[] warnings=globalContextErrors.getWarnings();
      for (int i=0; i < warnings.length; i++) {
        semanticErrors.addWarning(null,warnings[i]);
      }
      if (semanticErrors.getNumMessages() > 0) {
        if (semanticErrors.isSuccess()) {
          specStatus=IParseConstants.SEMANTIC_WARNING;
        }
 else {
          specStatus=IParseConstants.SEMANTIC_ERROR;
        }
      }
    }
  }
  Vector userModules=new Vector();
  boolean rootModuleFound=false;
  final Vector resourcesToTimeStamp=new Vector();
  Enumeration enumerate=moduleSpec.parseUnitContext.keys();
  while (enumerate.hasMoreElements()) {
    String moduleName=(String)enumerate.nextElement();
    ParseUnit parseUnit=(ParseUnit)moduleSpec.parseUnitContext.get(moduleName);
    String absoluteFileName=null;
    if (parseUnit.getNis() != null && parseUnit.getNis().sourceFile() != null) {
      absoluteFileName=parseUnit.getNis().sourceFile().getAbsolutePath();
    }
    if (absoluteFileName == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Module module=new Module(absoluteFileName);
    if (!module.isStandardModule() && updateStorage) {
      IResource moduleResource=ResourceHelper.getResourceByModuleName(moduleName);
      if (moduleResource != null && moduleResource.exists()) {
        resourcesToTimeStamp.add(moduleResource);
      }
    }
    if (specStatus > IParseConstants.SEMANTIC_ERROR) {
      ExternalModuleTable.ExternalModuleTableEntry emt=(ExternalModuleTable.ExternalModuleTableEntry)moduleSpec.getExternalModuleTable().moduleHashTable.get(UniqueString.uniqueStringOf(module.getModuleName()));
      if (emt != null) {
        module.setNode(emt.getModuleNode());
      }
    }
    if (module.getModuleName().equals(ResourceHelper.getModuleName(moduleFilename))) {
      rootModuleFound=true;
      module.setRoot(true);
    }
    if (module.isStandardModule()) {
    }
 else {
      userModules.addElement(module);
      if (module.getAbsolutePath().indexOf(parseResource.getProject().getLocation().toOSString()) != 0) {
        ResourceHelper.getLinkedFile(parseResource.getProject(),module.getAbsolutePath(),true);
      }
    }
  }
  try {
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        Iterator iterator=resourcesToTimeStamp.iterator();
        while (iterator.hasNext()) {
          IResource resource=(IResource)iterator.next();
          resource.setPersistentProperty(TLAParsingBuilderConstants.LAST_BUILT,String.valueOf(System.currentTimeMillis()));
        }
      }
    }
,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    Activator.logError(""String_Node_Str"",e);
  }
  if (!rootModuleFound) {
    specStatus=IParseConstants.COULD_NOT_FIND_MODULE;
  }
  if (updateStorage) {
    Activator.getModuleDependencyStorage().put(parseResource.getName(),AdapterFactory.adaptModules(parseResource.getName(),userModules));
  }
  return new ParseResult(specStatus,moduleSpec,parseResource,parseErrors,semanticErrors);
}",0.9294975688816856
136062,"/** 
 * Installs a SANY problem marker on a given resource REFACTOR: remove runable....
 * @param resource resource handle to put the marker on
 * @param moduleName name of the module (usually the resource, but if module not found, the resource will be the project)
 * @param severityError one of the marker severity constants
 * @param coordinates 4 integer numbers (beginline, begincolumn, endline, endcolumn) 
 * @param message message of the marker
 * @param monitor monitor for progress 
 * @param type marker type: {@link TLAMarkerHelper#TOOLBOX_MARKERS_TLAPARSER_MARKER_ID} or {@link TLAMarkerHelper#TOOLBOX_MARKERS_TRANSLATOR_MARKER_ID} 
 */
public static void installProblemMarker(final IResource resource,final String moduleName,final int severityError,final int[] coordinates,final String message,IProgressMonitor monitor,final String type){
  Assert.isNotNull(resource);
  Assert.isNotNull(moduleName);
  Assert.isNotNull(coordinates);
  IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      IMarker marker=resource.createMarker(type);
      marker.setAttribute(IMarker.SEVERITY,severityError);
      marker.setAttribute(IMarker.MESSAGE,message);
      marker.setAttribute(IMarker.LOCATION,AdapterFactory.getFormattedLocation(coordinates,moduleName));
      marker.setAttribute(LOCATION_MODULENAME,moduleName);
      marker.setAttribute(LOCATION_BEGINLINE,coordinates[0]);
      marker.setAttribute(LOCATION_BEGINCOLUMN,coordinates[1]);
      marker.setAttribute(LOCATION_ENDLINE,coordinates[2]);
      marker.setAttribute(LOCATION_ENDCOLUMN,coordinates[3]);
      if (coordinates[0] == coordinates[3] || coordinates[3] == -1) {
        marker.setAttribute(IMarker.LINE_NUMBER,coordinates[0]);
      }
 else {
        IDocument document=null;
        FileEditorInput fileEditorInput=new FileEditorInput((IFile)resource);
        FileDocumentProvider fileDocumentProvider=new FileDocumentProvider();
        fileDocumentProvider.connect(fileEditorInput);
        document=fileDocumentProvider.getDocument(fileEditorInput);
        if (document != null) {
          try {
            IRegion lineRegion=document.getLineInformation(coordinates[0] - 1);
            String textLine=document.get(lineRegion.getOffset(),lineRegion.getLength());
            marker.setAttribute(IMarker.CHAR_START,lineRegion.getOffset() + getRealOffset(textLine,coordinates[1] - 1));
            marker.setAttribute(IMarker.CHAR_END,lineRegion.getOffset() + getRealOffset(textLine,coordinates[3]));
          }
 catch (          BadLocationException e) {
            Activator.logError(""String_Node_Str"",e);
          }
        }
      }
    }
  }
;
  try {
    resource.getWorkspace().run(runnable,null,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    Activator.logError(""String_Node_Str"",e);
  }
}","/** 
 * Installs a SANY problem marker on a given resource REFACTOR: remove runable....
 * @param resource resource handle to put the marker on
 * @param moduleName name of the module (usually the resource, but if module not found, the resource will be the project)
 * @param severityError one of the marker severity constants
 * @param coordinates 4 integer numbers (beginline, begincolumn, endline, endcolumn) 
 * @param message message of the marker
 * @param monitor monitor for progress 
 * @param type marker type: {@link TLAMarkerHelper#TOOLBOX_MARKERS_TLAPARSER_MARKER_ID} or {@link TLAMarkerHelper#TOOLBOX_MARKERS_TRANSLATOR_MARKER_ID} 
 */
public static void installProblemMarker(final IResource resource,final String moduleName,final int severityError,final int[] coordinates,final String message,IProgressMonitor monitor,final String type){
  Assert.isNotNull(resource);
  Assert.isNotNull(moduleName);
  Assert.isNotNull(coordinates);
  IWorkspaceRunnable runnable=new IWorkspaceRunnable(){
    public void run(    IProgressMonitor monitor) throws CoreException {
      IMarker marker=null;
      if (!resource.exists()) {
        if (Activator.isSpecManagerInstantiated() && Activator.getSpecManager().getSpecLoaded() != null && Activator.getSpecManager().getSpecLoaded().getProject() != null) {
          IProject project=Activator.getSpecManager().getSpecLoaded().getProject();
          marker=project.createMarker(type);
        }
 else {
          return;
        }
      }
 else {
        marker=resource.createMarker(type);
      }
      marker.setAttribute(IMarker.SEVERITY,severityError);
      marker.setAttribute(IMarker.MESSAGE,message);
      marker.setAttribute(IMarker.LOCATION,AdapterFactory.getFormattedLocation(coordinates,moduleName));
      marker.setAttribute(LOCATION_MODULENAME,moduleName);
      marker.setAttribute(LOCATION_BEGINLINE,coordinates[0]);
      marker.setAttribute(LOCATION_BEGINCOLUMN,coordinates[1]);
      marker.setAttribute(LOCATION_ENDLINE,coordinates[2]);
      marker.setAttribute(LOCATION_ENDCOLUMN,coordinates[3]);
      if (coordinates[0] == coordinates[3] || coordinates[3] == -1) {
        marker.setAttribute(IMarker.LINE_NUMBER,coordinates[0]);
      }
 else {
        IDocument document=null;
        FileEditorInput fileEditorInput=new FileEditorInput((IFile)resource);
        FileDocumentProvider fileDocumentProvider=new FileDocumentProvider();
        fileDocumentProvider.connect(fileEditorInput);
        document=fileDocumentProvider.getDocument(fileEditorInput);
        if (document != null) {
          try {
            IRegion lineRegion=document.getLineInformation(coordinates[0] - 1);
            String textLine=document.get(lineRegion.getOffset(),lineRegion.getLength());
            marker.setAttribute(IMarker.CHAR_START,lineRegion.getOffset() + getRealOffset(textLine,coordinates[1] - 1));
            marker.setAttribute(IMarker.CHAR_END,lineRegion.getOffset() + getRealOffset(textLine,coordinates[3]));
          }
 catch (          BadLocationException e) {
            Activator.logError(""String_Node_Str"",e);
          }
        }
      }
    }
  }
;
  try {
    resource.getWorkspace().run(runnable,null,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    Activator.logError(""String_Node_Str"",e);
  }
}",0.926475330538536
136063,"TLCSequenceVariableValue(List values){
  this.value=values;
  this.elements=this.innerGetElements();
}","TLCSequenceVariableValue(List values){
  this.value=values;
  this.elements=this.innerGetElements();
  elementValues=new TLCVariableValue[elements.length];
  for (int i=0; i < elements.length; i++) {
    elementValues[i]=(TLCVariableValue)elements[i].getValue();
  }
}",0.5513513513513514
136064,"/** 
 * LL BUG  Calling toSimpleString on a sequence <<a, b>> is producing  <<1:>a, 2:>b>>.  I think that in the following, getElements  should be returning an array of TLCVariableValue objects.  I have no idea what I was doing, but it looks like the code for getElements() here should essentially be the  same as for TLCSetVariableValue.
 * @return
 */
public TLCFcnElementVariableValue[] getElements(){
  return elements;
}","public TLCFcnElementVariableValue[] getElements(){
  return elements;
}",0.2862903225806452
136065,"public String toSimpleString(){
  TLCVariableValue[] elements=getElements();
  return arrayToSimpleStringBuffer(elements,DELIMETERS).toString();
}","public String toSimpleString(){
  return arrayToSimpleStringBuffer(elementValues,DELIMETERS).toString();
}",0.8015873015873016
136066,"public void onDone(){
  this.setCurrentStatus(NOT_RUNNING);
  informPresenter(ITLCModelLaunchDataPresenter.CURRENT_STATUS);
  isDone=true;
}","public void onDone(){
  if (lastDetectedError != null) {
    this.errors.add(lastDetectedError);
    informPresenter(ITLCModelLaunchDataPresenter.ERRORS);
  }
  this.setCurrentStatus(NOT_RUNNING);
  informPresenter(ITLCModelLaunchDataPresenter.CURRENT_STATUS);
  isDone=true;
}",0.5611510791366906
136067,"/** 
 * Resets the values to defaults
 */
private void initialize(){
  isDone=false;
  isTLCStarted=false;
  errors=new Vector();
  ModelHelper.removeModelProblemMarkers(this.config,ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);
  coverageInfo=new Vector();
  progressInformation=new Vector();
  startTimestamp=""String_Node_Str"";
  finishTimestamp=""String_Node_Str"";
  coverageTimestamp=""String_Node_Str"";
  progressOutput=new Document(NO_OUTPUT_AVAILABLE);
  userOutput=new Document(NO_OUTPUT_AVAILABLE);
}","/** 
 * Resets the values to defaults
 */
private void initialize(){
  isDone=false;
  isTLCStarted=false;
  errors=new Vector();
  ModelHelper.removeModelProblemMarkers(this.config,ModelHelper.TLC_MODEL_ERROR_MARKER_TLC);
  coverageInfo=new Vector();
  progressInformation=new Vector();
  startTimestamp=""String_Node_Str"";
  finishTimestamp=""String_Node_Str"";
  lastCheckpointTimeStamp=""String_Node_Str"";
  coverageTimestamp=""String_Node_Str"";
  progressOutput=new Document(NO_OUTPUT_AVAILABLE);
  userOutput=new Document(NO_OUTPUT_AVAILABLE);
}",0.9570200573065902
136068,"/** 
 * Reinitialize the fields has to be run in the UI thread
 */
private synchronized void reinit(){
  this.startTimestampText.setText(""String_Node_Str"");
  this.finishTimestampText.setText(""String_Node_Str"");
  this.errorStatusHyperLink.setText(TLCModelLaunchDataProvider.NO_ERRORS);
  this.coverage.setInput(new Vector());
  this.stateSpace.setInput(new Vector());
  this.progressOutput.setDocument(new Document(TLCModelLaunchDataProvider.NO_OUTPUT_AVAILABLE));
  this.userOutput.setDocument(new Document(TLCModelLaunchDataProvider.NO_OUTPUT_AVAILABLE));
}","/** 
 * Reinitialize the fields has to be run in the UI thread
 */
private synchronized void reinit(){
  this.startTimestampText.setText(""String_Node_Str"");
  this.finishTimestampText.setText(""String_Node_Str"");
  this.lastCheckpointTimeText.setText(""String_Node_Str"");
  this.errorStatusHyperLink.setText(TLCModelLaunchDataProvider.NO_ERRORS);
  this.coverage.setInput(new Vector());
  this.stateSpace.setInput(new Vector());
  this.progressOutput.setDocument(new Document(TLCModelLaunchDataProvider.NO_OUTPUT_AVAILABLE));
  this.userOutput.setDocument(new Document(TLCModelLaunchDataProvider.NO_OUTPUT_AVAILABLE));
}",0.9507640067911716
136069,"/** 
 * Checks if checkpoint information changed 
 */
private void updateCheckpoints(){
  IResource[] checkpoints=null;
  try {
    checkpoints=ModelHelper.getCheckpoints(getConfig());
  }
 catch (  CoreException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
  if (checkpoints != null && checkpoints.length > 0) {
    this.checkpointIdText.setText(checkpoints[0].getName());
  }
 else {
    this.checkpointIdText.setText(EMPTY_STRING);
  }
}","/** 
 * Checks if checkpoint information changed 
 */
private void updateCheckpoints(){
  IResource[] checkpoints=null;
  try {
    checkpoints=ModelHelper.getCheckpoints(getConfig(),true);
  }
 catch (  CoreException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
  }
  if (checkpoints != null && checkpoints.length > 0) {
    this.checkpointIdText.setText(checkpoints[0].getName());
  }
 else {
    this.checkpointIdText.setText(EMPTY_STRING);
  }
}",0.9945235487404164
136070,"/** 
 * Reads the model parameters and constructs the corresponding command line arguments
 * @return string array with arguments
 * @throws CoreException
 */
public String[] constructProgramArguments() throws CoreException {
  Vector arguments=new Vector();
  ILaunchConfiguration config=launch.getLaunchConfiguration();
  boolean checkDeadlock=config.getAttribute(IModelConfigurationConstants.MODEL_CORRECTNESS_CHECK_DEADLOCK,IModelConfigurationDefaults.MODEL_CORRECTNESS_CHECK_DEADLOCK_DEFAULT);
  if (!checkDeadlock) {
    arguments.add(""String_Node_Str"");
  }
  arguments.add(""String_Node_Str"");
  arguments.add(String.valueOf(CHECKPOINT_INTERVAL));
  boolean runAsModelCheck=config.getAttribute(IModelConfigurationConstants.LAUNCH_MC_MODE,IModelConfigurationDefaults.LAUNCH_MC_MODE_DEFAULT);
  if (runAsModelCheck) {
    boolean isDepthFirst=config.getAttribute(IModelConfigurationConstants.LAUNCH_DFID_MODE,IModelConfigurationDefaults.LAUNCH_DFID_MODE_DEFAULT);
    if (isDepthFirst) {
      int dfidDepth=config.getAttribute(IModelConfigurationConstants.LAUNCH_DFID_DEPTH,IModelConfigurationDefaults.LAUNCH_DFID_DEPTH_DEFAULT);
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(dfidDepth));
    }
  }
 else {
    arguments.add(""String_Node_Str"");
    int traceDepth=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_DEPTH,IModelConfigurationDefaults.LAUNCH_SIMU_DEPTH_DEFAULT);
    if (traceDepth != IModelConfigurationDefaults.LAUNCH_SIMU_DEPTH_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(traceDepth));
    }
    int aril=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_ARIL,IModelConfigurationDefaults.LAUNCH_SIMU_ARIL_DEFAULT);
    int seed=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_SEED,IModelConfigurationDefaults.LAUNCH_SIMU_SEED_DEFAULT);
    if (aril != IModelConfigurationDefaults.LAUNCH_SIMU_ARIL_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(aril));
    }
    if (seed != IModelConfigurationDefaults.LAUNCH_SIMU_SEED_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(seed));
    }
  }
  boolean recover=config.getAttribute(IModelConfigurationConstants.LAUNCH_RECOVER,IModelConfigurationDefaults.LAUNCH_RECOVER_DEFAULT);
  if (recover) {
    IResource[] checkpoints=ModelHelper.getCheckpoints(config);
    if (checkpoints.length > 0) {
      arguments.add(""String_Node_Str"");
      arguments.add(checkpoints[0].getName());
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.add(cfgFile.getName());
  if (config.getAttribute(MODEL_BEHAVIOR_SPEC_TYPE,MODEL_BEHAVIOR_TYPE_DEFAULT) != MODEL_BEHAVIOR_TYPE_NO_SPEC) {
    arguments.add(""String_Node_Str"");
    arguments.add(String.valueOf(COVERAGE_INTERVAL));
  }
  arguments.add(""String_Node_Str"");
  arguments.add(String.valueOf(workers));
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  arguments.add(launchDir.getLocation().toOSString());
  arguments.add(ResourceHelper.getModuleName(rootModule));
  return (String[])arguments.toArray(new String[arguments.size()]);
}","/** 
 * Reads the model parameters and constructs the corresponding command line arguments
 * @return string array with arguments
 * @throws CoreException
 */
public String[] constructProgramArguments() throws CoreException {
  Vector arguments=new Vector();
  ILaunchConfiguration config=launch.getLaunchConfiguration();
  boolean checkDeadlock=config.getAttribute(IModelConfigurationConstants.MODEL_CORRECTNESS_CHECK_DEADLOCK,IModelConfigurationDefaults.MODEL_CORRECTNESS_CHECK_DEADLOCK_DEFAULT);
  if (!checkDeadlock) {
    arguments.add(""String_Node_Str"");
  }
  arguments.add(""String_Node_Str"");
  arguments.add(String.valueOf(CHECKPOINT_INTERVAL));
  boolean runAsModelCheck=config.getAttribute(IModelConfigurationConstants.LAUNCH_MC_MODE,IModelConfigurationDefaults.LAUNCH_MC_MODE_DEFAULT);
  if (runAsModelCheck) {
    boolean isDepthFirst=config.getAttribute(IModelConfigurationConstants.LAUNCH_DFID_MODE,IModelConfigurationDefaults.LAUNCH_DFID_MODE_DEFAULT);
    if (isDepthFirst) {
      int dfidDepth=config.getAttribute(IModelConfigurationConstants.LAUNCH_DFID_DEPTH,IModelConfigurationDefaults.LAUNCH_DFID_DEPTH_DEFAULT);
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(dfidDepth));
    }
  }
 else {
    arguments.add(""String_Node_Str"");
    int traceDepth=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_DEPTH,IModelConfigurationDefaults.LAUNCH_SIMU_DEPTH_DEFAULT);
    if (traceDepth != IModelConfigurationDefaults.LAUNCH_SIMU_DEPTH_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(traceDepth));
    }
    int aril=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_ARIL,IModelConfigurationDefaults.LAUNCH_SIMU_ARIL_DEFAULT);
    int seed=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_SEED,IModelConfigurationDefaults.LAUNCH_SIMU_SEED_DEFAULT);
    if (aril != IModelConfigurationDefaults.LAUNCH_SIMU_ARIL_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(aril));
    }
    if (seed != IModelConfigurationDefaults.LAUNCH_SIMU_SEED_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(seed));
    }
  }
  boolean recover=config.getAttribute(IModelConfigurationConstants.LAUNCH_RECOVER,IModelConfigurationDefaults.LAUNCH_RECOVER_DEFAULT);
  if (recover) {
    IResource[] checkpoints=ModelHelper.getCheckpoints(config,false);
    if (checkpoints.length > 0) {
      arguments.add(""String_Node_Str"");
      arguments.add(checkpoints[0].getName());
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.add(cfgFile.getName());
  if (config.getAttribute(MODEL_BEHAVIOR_SPEC_TYPE,MODEL_BEHAVIOR_TYPE_DEFAULT) != MODEL_BEHAVIOR_TYPE_NO_SPEC) {
    arguments.add(""String_Node_Str"");
    arguments.add(String.valueOf(COVERAGE_INTERVAL));
  }
  arguments.add(""String_Node_Str"");
  arguments.add(String.valueOf(workers));
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  arguments.add(launchDir.getLocation().toOSString());
  arguments.add(ResourceHelper.getModuleName(rootModule));
  return (String[])arguments.toArray(new String[arguments.size()]);
}",0.9990491283676703
136071,"/** 
 * Instead of building, the model files are written to the disk.  The directory with the same name as the model is created as the sub-directory of the spec project. (if already present, the files inside will be deleted) Three new files are created: MC.tla, MC.cfg, MC.out All spec modules, including the root module are copied to this directory <br>3. method called on launch
 * @see org.eclipse.debug.core.model.ILaunchConfigurationDelegate2#buildForLaunch(org.eclipse.debug.core.ILaunchConfiguration,java.lang.String,org.eclipse.core.runtime.IProgressMonitor)
 */
public boolean buildForLaunch(ILaunchConfiguration config,String mode,IProgressMonitor monitor) throws CoreException {
  int STEP=100;
  try {
    monitor.beginTask(""String_Node_Str"",30);
    monitor.subTask(""String_Node_Str"");
    IProject project=ResourceHelper.getProject(specName);
    if (project == null) {
      throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,""String_Node_Str"" + specName));
    }
    IFile specRootFile=ResourceHelper.getLinkedFile(project,specRootFilename,false);
    if (specRootFile == null) {
      throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,""String_Node_Str"" + specRootFilename));
    }
    IFolder modelFolder=project.getFolder(modelName);
    IPath targetFolderPath=modelFolder.getProjectRelativePath().addTrailingSeparator();
    IFile tlaFile=project.getFile(targetFolderPath.append(ModelHelper.FILE_TLA));
    IFile cfgFile=project.getFile(targetFolderPath.append(ModelHelper.FILE_CFG));
    IFile outFile=project.getFile(targetFolderPath.append(ModelHelper.FILE_OUT));
    TLCActivator.logDebug(""String_Node_Str"" + targetFolderPath.toOSString());
    final IFile[] files=new IFile[]{tlaFile,cfgFile,outFile};
    if (modelFolder.exists()) {
      final IResource[] members=modelFolder.members();
      if (members.length == 0) {
        monitor.worked(STEP);
      }
 else {
        final boolean recover=config.getAttribute(LAUNCH_RECOVER,LAUNCH_RECOVER_DEFAULT);
        final IResource[] checkpoints=ModelHelper.getCheckpoints(config);
        ISchedulingRule deleteRule=ResourceHelper.getDeleteRule(members);
        ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            boolean checkFiles=recover;
            monitor.beginTask(""String_Node_Str"",members.length);
            for (int i=0; i < members.length; i++) {
              if (checkFiles) {
                if (checkpoints.length > 0 && checkpoints[0].equals(members[i])) {
                  checkFiles=false;
                  continue;
                }
              }
 else {
                try {
                  members[i].delete(IResource.FORCE,new SubProgressMonitor(monitor,1));
                }
 catch (                CoreException e) {
                  TLCActivator.logError(""String_Node_Str"" + members[i].getLocation(),e);
                }
              }
            }
            monitor.done();
          }
        }
,deleteRule,IWorkspace.AVOID_UPDATE,new SubProgressMonitor(monitor,STEP));
      }
    }
 else {
      modelFolder.create(IResource.DERIVED | IResource.FORCE,true,new SubProgressMonitor(monitor,STEP));
    }
    monitor.subTask(""String_Node_Str"");
    specRootFile.copy(targetFolderPath.append(specRootFile.getProjectRelativePath()),IResource.DERIVED | IResource.FORCE,new SubProgressMonitor(monitor,1));
    IResource specRootFileCopy=modelFolder.findMember(specRootFile.getProjectRelativePath());
    if (specRootFileCopy == null) {
      throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,""String_Node_Str"" + specRootFilename + ""String_Node_Str""+ targetFolderPath.toOSString()));
    }
    List extendedModules=ToolboxHandle.getExtendedModules(specRootFile.getName());
    IFile moduleFile=null;
    for (int i=0; i < extendedModules.size(); i++) {
      String module=(String)extendedModules.get(i);
      if (ToolboxHandle.isUserModule(module)) {
        moduleFile=ResourceHelper.getLinkedFile(project,module,false);
        if (moduleFile != null) {
          moduleFile.copy(targetFolderPath.append(moduleFile.getProjectRelativePath()),IResource.DERIVED | IResource.FORCE,new SubProgressMonitor(monitor,STEP / extendedModules.size()));
        }
      }
    }
    ISchedulingRule fileRule=MultiRule.combine(ResourceHelper.getModifyRule(files),ResourceHelper.getCreateRule(files));
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        for (int i=0; i < files.length; i++) {
          if (files[i].exists()) {
            files[i].setContents(new ByteArrayInputStream(""String_Node_Str"".getBytes()),IResource.DERIVED | IResource.FORCE,new SubProgressMonitor(monitor,1));
          }
 else {
            files[i].create(new ByteArrayInputStream(""String_Node_Str"".getBytes()),IResource.DERIVED | IResource.FORCE,new SubProgressMonitor(monitor,1));
          }
        }
      }
    }
,fileRule,IWorkspace.AVOID_UPDATE,new SubProgressMonitor(monitor,STEP));
    monitor.worked(STEP);
    monitor.subTask(""String_Node_Str"");
    ModelWriter writer=new ModelWriter();
    writer.addPrimer(ModelHelper.MC_MODEL_NAME,ResourceHelper.getModuleName(specRootFilename));
    List constants=ModelHelper.deserializeAssignmentList(config.getAttribute(MODEL_PARAMETER_CONSTANTS,new Vector()));
    TypedSet modelValues=TypedSet.parseSet(config.getAttribute(MODEL_PARAMETER_MODEL_VALUES,EMPTY_STRING));
    writer.addConstants(constants,modelValues,MODEL_PARAMETER_CONSTANTS,MODEL_PARAMETER_MODEL_VALUES);
    writer.addNewDefinitions(config.getAttribute(MODEL_PARAMETER_NEW_DEFINITIONS,EMPTY_STRING),MODEL_PARAMETER_NEW_DEFINITIONS);
    List overrides=ModelHelper.deserializeAssignmentList(config.getAttribute(MODEL_PARAMETER_DEFINITIONS,new Vector()));
    writer.addFormulaList(ModelWriter.createOverridesContent(overrides,ModelWriter.DEFOV_SCHEME),""String_Node_Str"",MODEL_PARAMETER_DEFINITIONS);
    writer.addFormulaList(ModelWriter.createSourceContent(MODEL_PARAMETER_CONSTRAINT,ModelWriter.CONSTRAINT_SCHEME,config),""String_Node_Str"",MODEL_PARAMETER_CONSTRAINT);
    writer.addFormulaList(ModelWriter.createSourceContent(MODEL_PARAMETER_ACTION_CONSTRAINT,ModelWriter.ACTIONCONSTRAINT_SCHEME,config),""String_Node_Str"",MODEL_PARAMETER_ACTION_CONSTRAINT);
    int specType=config.getAttribute(MODEL_BEHAVIOR_SPEC_TYPE,MODEL_BEHAVIOR_TYPE_DEFAULT);
switch (specType) {
case MODEL_BEHAVIOR_TYPE_NO_SPEC:
      break;
case MODEL_BEHAVIOR_TYPE_SPEC_CLOSED:
    writer.addFormulaList(ModelWriter.createSourceContent(MODEL_BEHAVIOR_CLOSED_SPECIFICATION,ModelWriter.SPEC_SCHEME,config),""String_Node_Str"",MODEL_BEHAVIOR_CLOSED_SPECIFICATION);
  break;
case MODEL_BEHAVIOR_TYPE_SPEC_INIT_NEXT:
writer.addFormulaList(ModelWriter.createSourceContent(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT,ModelWriter.INIT_SCHEME,config),""String_Node_Str"",MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT);
writer.addFormulaList(ModelWriter.createSourceContent(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT,ModelWriter.NEXT_SCHEME,config),""String_Node_Str"",MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT);
break;
}
writer.addFormulaList(ModelWriter.createFormulaListContent(config.getAttribute(MODEL_CORRECTNESS_INVARIANTS,new Vector()),ModelWriter.INVARIANT_SCHEME),""String_Node_Str"",MODEL_CORRECTNESS_INVARIANTS);
writer.addFormulaList(ModelWriter.createFormulaListContent(config.getAttribute(MODEL_CORRECTNESS_PROPERTIES,new Vector()),ModelWriter.PROP_SCHEME),""String_Node_Str"",MODEL_CORRECTNESS_PROPERTIES);
monitor.worked(STEP);
monitor.subTask(""String_Node_Str"");
writer.writeFiles(tlaFile,cfgFile,monitor);
modelFolder.refreshLocal(IResource.DEPTH_ONE,new SubProgressMonitor(monitor,STEP));
}
  finally {
monitor.done();
}
return false;
}","/** 
 * Instead of building, the model files are written to the disk.  The directory with the same name as the model is created as the sub-directory of the spec project. (if already present, the files inside will be deleted) Three new files are created: MC.tla, MC.cfg, MC.out All spec modules, including the root module are copied to this directory <br>3. method called on launch
 * @see org.eclipse.debug.core.model.ILaunchConfigurationDelegate2#buildForLaunch(org.eclipse.debug.core.ILaunchConfiguration,java.lang.String,org.eclipse.core.runtime.IProgressMonitor)
 */
public boolean buildForLaunch(ILaunchConfiguration config,String mode,IProgressMonitor monitor) throws CoreException {
  int STEP=100;
  try {
    monitor.beginTask(""String_Node_Str"",30);
    monitor.subTask(""String_Node_Str"");
    IProject project=ResourceHelper.getProject(specName);
    if (project == null) {
      throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,""String_Node_Str"" + specName));
    }
    IFile specRootFile=ResourceHelper.getLinkedFile(project,specRootFilename,false);
    if (specRootFile == null) {
      throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,""String_Node_Str"" + specRootFilename));
    }
    IFolder modelFolder=project.getFolder(modelName);
    IPath targetFolderPath=modelFolder.getProjectRelativePath().addTrailingSeparator();
    IFile tlaFile=project.getFile(targetFolderPath.append(ModelHelper.FILE_TLA));
    IFile cfgFile=project.getFile(targetFolderPath.append(ModelHelper.FILE_CFG));
    IFile outFile=project.getFile(targetFolderPath.append(ModelHelper.FILE_OUT));
    TLCActivator.logDebug(""String_Node_Str"" + targetFolderPath.toOSString());
    final IFile[] files=new IFile[]{tlaFile,cfgFile,outFile};
    if (modelFolder.exists()) {
      final IResource[] members=modelFolder.members();
      if (members.length == 0) {
        monitor.worked(STEP);
      }
 else {
        final boolean recover=config.getAttribute(LAUNCH_RECOVER,LAUNCH_RECOVER_DEFAULT);
        final IResource[] checkpoints=ModelHelper.getCheckpoints(config,true);
        ISchedulingRule deleteRule=ResourceHelper.getDeleteRule(members);
        ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            boolean checkFiles=recover;
            monitor.beginTask(""String_Node_Str"",members.length);
            for (int i=0; i < members.length; i++) {
              if (checkFiles) {
                if (checkpoints.length > 0 && checkpoints[0].equals(members[i])) {
                  checkFiles=false;
                  continue;
                }
              }
 else {
                try {
                  members[i].delete(IResource.FORCE,new SubProgressMonitor(monitor,1));
                }
 catch (                CoreException e) {
                  TLCActivator.logError(""String_Node_Str"" + members[i].getLocation(),e);
                }
              }
            }
            monitor.done();
          }
        }
,deleteRule,IWorkspace.AVOID_UPDATE,new SubProgressMonitor(monitor,STEP));
      }
    }
 else {
      modelFolder.create(IResource.DERIVED | IResource.FORCE,true,new SubProgressMonitor(monitor,STEP));
    }
    monitor.subTask(""String_Node_Str"");
    specRootFile.copy(targetFolderPath.append(specRootFile.getProjectRelativePath()),IResource.DERIVED | IResource.FORCE,new SubProgressMonitor(monitor,1));
    IResource specRootFileCopy=modelFolder.findMember(specRootFile.getProjectRelativePath());
    if (specRootFileCopy == null) {
      throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,""String_Node_Str"" + specRootFilename + ""String_Node_Str""+ targetFolderPath.toOSString()));
    }
    List extendedModules=ToolboxHandle.getExtendedModules(specRootFile.getName());
    IFile moduleFile=null;
    for (int i=0; i < extendedModules.size(); i++) {
      String module=(String)extendedModules.get(i);
      if (ToolboxHandle.isUserModule(module)) {
        moduleFile=ResourceHelper.getLinkedFile(project,module,false);
        if (moduleFile != null) {
          moduleFile.copy(targetFolderPath.append(moduleFile.getProjectRelativePath()),IResource.DERIVED | IResource.FORCE,new SubProgressMonitor(monitor,STEP / extendedModules.size()));
        }
      }
    }
    ISchedulingRule fileRule=MultiRule.combine(ResourceHelper.getModifyRule(files),ResourceHelper.getCreateRule(files));
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        for (int i=0; i < files.length; i++) {
          if (files[i].exists()) {
            files[i].setContents(new ByteArrayInputStream(""String_Node_Str"".getBytes()),IResource.DERIVED | IResource.FORCE,new SubProgressMonitor(monitor,1));
          }
 else {
            files[i].create(new ByteArrayInputStream(""String_Node_Str"".getBytes()),IResource.DERIVED | IResource.FORCE,new SubProgressMonitor(monitor,1));
          }
        }
      }
    }
,fileRule,IWorkspace.AVOID_UPDATE,new SubProgressMonitor(monitor,STEP));
    monitor.worked(STEP);
    monitor.subTask(""String_Node_Str"");
    ModelWriter writer=new ModelWriter();
    writer.addPrimer(ModelHelper.MC_MODEL_NAME,ResourceHelper.getModuleName(specRootFilename));
    List constants=ModelHelper.deserializeAssignmentList(config.getAttribute(MODEL_PARAMETER_CONSTANTS,new Vector()));
    TypedSet modelValues=TypedSet.parseSet(config.getAttribute(MODEL_PARAMETER_MODEL_VALUES,EMPTY_STRING));
    writer.addConstants(constants,modelValues,MODEL_PARAMETER_CONSTANTS,MODEL_PARAMETER_MODEL_VALUES);
    writer.addNewDefinitions(config.getAttribute(MODEL_PARAMETER_NEW_DEFINITIONS,EMPTY_STRING),MODEL_PARAMETER_NEW_DEFINITIONS);
    List overrides=ModelHelper.deserializeAssignmentList(config.getAttribute(MODEL_PARAMETER_DEFINITIONS,new Vector()));
    writer.addFormulaList(ModelWriter.createOverridesContent(overrides,ModelWriter.DEFOV_SCHEME),""String_Node_Str"",MODEL_PARAMETER_DEFINITIONS);
    writer.addFormulaList(ModelWriter.createSourceContent(MODEL_PARAMETER_CONSTRAINT,ModelWriter.CONSTRAINT_SCHEME,config),""String_Node_Str"",MODEL_PARAMETER_CONSTRAINT);
    writer.addFormulaList(ModelWriter.createSourceContent(MODEL_PARAMETER_ACTION_CONSTRAINT,ModelWriter.ACTIONCONSTRAINT_SCHEME,config),""String_Node_Str"",MODEL_PARAMETER_ACTION_CONSTRAINT);
    int specType=config.getAttribute(MODEL_BEHAVIOR_SPEC_TYPE,MODEL_BEHAVIOR_TYPE_DEFAULT);
switch (specType) {
case MODEL_BEHAVIOR_TYPE_NO_SPEC:
      break;
case MODEL_BEHAVIOR_TYPE_SPEC_CLOSED:
    writer.addFormulaList(ModelWriter.createSourceContent(MODEL_BEHAVIOR_CLOSED_SPECIFICATION,ModelWriter.SPEC_SCHEME,config),""String_Node_Str"",MODEL_BEHAVIOR_CLOSED_SPECIFICATION);
  break;
case MODEL_BEHAVIOR_TYPE_SPEC_INIT_NEXT:
writer.addFormulaList(ModelWriter.createSourceContent(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT,ModelWriter.INIT_SCHEME,config),""String_Node_Str"",MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT);
writer.addFormulaList(ModelWriter.createSourceContent(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT,ModelWriter.NEXT_SCHEME,config),""String_Node_Str"",MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT);
break;
}
writer.addFormulaList(ModelWriter.createFormulaListContent(config.getAttribute(MODEL_CORRECTNESS_INVARIANTS,new Vector()),ModelWriter.INVARIANT_SCHEME),""String_Node_Str"",MODEL_CORRECTNESS_INVARIANTS);
writer.addFormulaList(ModelWriter.createFormulaListContent(config.getAttribute(MODEL_CORRECTNESS_PROPERTIES,new Vector()),ModelWriter.PROP_SCHEME),""String_Node_Str"",MODEL_CORRECTNESS_PROPERTIES);
monitor.worked(STEP);
monitor.subTask(""String_Node_Str"");
writer.writeFiles(tlaFile,cfgFile,monitor);
modelFolder.refreshLocal(IResource.DEPTH_ONE,new SubProgressMonitor(monitor,STEP));
}
  finally {
monitor.done();
}
return false;
}",0.9996829623993404
136072,"/** 
 * Checks whether the checkpoint files exist for a given model 
 * @param launchConfig
 * @return the array of checkpoint directories, sorted from last to first
 */
public static IResource[] getCheckpoints(ILaunchConfiguration config) throws CoreException {
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Vector checkpoints=new Vector();
  IFolder directory=getModelTargetDirectory(config);
  if (directory != null && directory.exists()) {
    directory.refreshLocal(IResource.DEPTH_ONE,null);
    IResource[] members=directory.members();
    for (int i=0; i < members.length; i++) {
      if (members[i].getType() == IResource.FOLDER) {
        Matcher matcher=pattern.matcher(members[i].getName());
        if (matcher.matches()) {
          members[i].refreshLocal(IResource.DEPTH_ONE,null);
          if (((IFolder)members[i]).findMember(CHECKPOINT_QUEUE) != null && ((IFolder)members[i]).findMember(CHECKPOINT_VARS) != null && ((IFolder)members[i]).findMember(CHECKPOINT_STATES) != null) {
            checkpoints.add(members[i]);
          }
        }
      }
    }
  }
  IResource[] result=(IResource[])checkpoints.toArray(new IResource[checkpoints.size()]);
  Arrays.sort(result,new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      return ((IResource)arg0).getName().compareTo(((IResource)arg1).getName());
    }
  }
);
  return result;
}","/** 
 * Checks whether the checkpoint files exist for a given model If doRefresh is set to true, this method will refresh the model directory, and if a checkpoint folder is found, it will refresh the contents of that folder. This means that the eclipse workspace representation of that directory will synch with the file system. This is a long running job, so this method should not be called within the run method of another job unless the scheduling rule for refreshing the model directory is included in the scheduling rule of the job which is calling this method. This scheduling rule can be found by calling  {@link IResourceRuleFactory#refreshRule(IResource)}
 * @param config
 * @param doRefresh whether the model directory's contents and any checkpointfolders contents should be refreshed
 * @return the array of checkpoint directories, sorted from last to first
 */
public static IResource[] getCheckpoints(ILaunchConfiguration config,boolean doRefresh) throws CoreException {
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Vector checkpoints=new Vector();
  IFolder directory=getModelTargetDirectory(config);
  if (directory != null && directory.exists()) {
    if (doRefresh) {
      directory.refreshLocal(IResource.DEPTH_ONE,null);
    }
    IResource[] members=directory.members();
    for (int i=0; i < members.length; i++) {
      if (members[i].getType() == IResource.FOLDER) {
        Matcher matcher=pattern.matcher(members[i].getName());
        if (matcher.matches()) {
          if (doRefresh) {
            members[i].refreshLocal(IResource.DEPTH_ONE,null);
          }
          if (((IFolder)members[i]).findMember(CHECKPOINT_QUEUE) != null && ((IFolder)members[i]).findMember(CHECKPOINT_VARS) != null && ((IFolder)members[i]).findMember(CHECKPOINT_STATES) != null) {
            checkpoints.add(members[i]);
          }
        }
      }
    }
  }
  IResource[] result=(IResource[])checkpoints.toArray(new IResource[checkpoints.size()]);
  Arrays.sort(result,new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      return ((IResource)arg0).getName().compareTo(((IResource)arg1).getName());
    }
  }
);
  return result;
}",0.7710843373493976
136073,"/** 
 * Checks whether the checkpoint files exist for a given model 
 * @param launchConfig
 * @return the array of checkpoint directories, sorted from last to first
 */
public static IResource[] getCheckpoints(ILaunchConfiguration config) throws CoreException {
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Vector checkpoints=new Vector();
  IFolder directory=getModelTargetDirectory(config);
  if (directory != null && directory.exists()) {
    IResource[] members=directory.members();
    for (int i=0; i < members.length; i++) {
      if (members[i].getType() == IResource.FOLDER) {
        Matcher matcher=pattern.matcher(members[i].getName());
        if (matcher.matches()) {
          if (((IFolder)members[i]).findMember(CHECKPOINT_QUEUE) != null && ((IFolder)members[i]).findMember(CHECKPOINT_VARS) != null && ((IFolder)members[i]).findMember(CHECKPOINT_STATES) != null) {
            checkpoints.add(members[i]);
          }
        }
      }
    }
  }
  IResource[] result=(IResource[])checkpoints.toArray(new IResource[checkpoints.size()]);
  Arrays.sort(result,new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      return ((IResource)arg0).getName().compareTo(((IResource)arg1).getName());
    }
  }
);
  return result;
}","/** 
 * Checks whether the checkpoint files exist for a given model 
 * @param launchConfig
 * @return the array of checkpoint directories, sorted from last to first
 */
public static IResource[] getCheckpoints(ILaunchConfiguration config) throws CoreException {
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Vector checkpoints=new Vector();
  IFolder directory=getModelTargetDirectory(config);
  if (directory != null && directory.exists()) {
    directory.refreshLocal(IResource.DEPTH_ONE,null);
    IResource[] members=directory.members();
    for (int i=0; i < members.length; i++) {
      if (members[i].getType() == IResource.FOLDER) {
        Matcher matcher=pattern.matcher(members[i].getName());
        if (matcher.matches()) {
          members[i].refreshLocal(IResource.DEPTH_ONE,null);
          if (((IFolder)members[i]).findMember(CHECKPOINT_QUEUE) != null && ((IFolder)members[i]).findMember(CHECKPOINT_VARS) != null && ((IFolder)members[i]).findMember(CHECKPOINT_STATES) != null) {
            checkpoints.add(members[i]);
          }
        }
      }
    }
  }
  IResource[] result=(IResource[])checkpoints.toArray(new IResource[checkpoints.size()]);
  Arrays.sort(result,new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      return ((IResource)arg0).getName().compareTo(((IResource)arg1).getName());
    }
  }
);
  return result;
}",0.956783164223976
136074,"/** 
 */
public void validatePage(boolean switchToErrorPage){
  if (getManagedForm() == null) {
    return;
  }
  IMessageManager mm=getManagedForm().getMessageManager();
  mm.setAutoUpdate(false);
  mm.removeAllMessages();
  setComplete(true);
  getLookupHelper().resetModelNames(this);
  try {
    int dfidDepth=Integer.parseInt(dfidDepthText.getText());
    if (dfidDepth <= 0) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,dfidDepthText);
      setComplete(false);
      expandSection(SEC_LAUNCHING_SETUP);
    }
  }
 catch (  NumberFormatException e) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,dfidDepthText);
    setComplete(false);
    expandSection(SEC_LAUNCHING_SETUP);
  }
  try {
    int simuDepth=Integer.parseInt(simuDepthText.getText());
    if (simuDepth <= 0) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,simuDepthText);
      setComplete(false);
      expandSection(SEC_LAUNCHING_SETUP);
    }
  }
 catch (  NumberFormatException e) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,simuDepthText);
    setComplete(false);
    expandSection(SEC_LAUNCHING_SETUP);
  }
  if (!EMPTY_STRING.equals(simuArilText.getText())) {
    try {
      long simuAril=Long.parseLong(simuArilText.getText());
      if (simuAril <= 0) {
        mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,simuArilText);
        setComplete(false);
      }
    }
 catch (    NumberFormatException e) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,simuArilText);
      setComplete(false);
      expandSection(SEC_LAUNCHING_SETUP);
    }
  }
  if (!EMPTY_STRING.equals(simuSeedText.getText())) {
    try {
      Long.parseLong(simuSeedText.getText());
    }
 catch (    NumberFormatException e) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,simuSeedText);
      expandSection(SEC_LAUNCHING_SETUP);
      setComplete(false);
    }
  }
  DataBindingManager dm=getDataBindingManager();
  TypedSet modelValuesSet=TypedSet.parseSet(FormHelper.trimTrailingSpaces(modelValuesSource.getDocument().get()));
  if (modelValuesSet.getValueCount() > 0) {
    List values=modelValuesSet.getValuesAsList();
    validateUsage(MODEL_PARAMETER_MODEL_VALUES,values,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
    validateId(MODEL_PARAMETER_MODEL_VALUES,values,""String_Node_Str"",""String_Node_Str"");
    Control widget=UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_MODEL_VALUES));
    for (int j=0; j < values.size(); j++) {
      String value=(String)values.get(j);
      if (SemanticHelper.isConfigFileKeyword(value)) {
        mm.addMessage(value,""String_Node_Str"" + value + ""String_Node_Str"",null,IMessageProvider.ERROR,widget);
      }
    }
  }
  List definitions=(List)definitionsTable.getInput();
  for (int i=0; i < definitions.size(); i++) {
    Assignment definition=(Assignment)definitions.get(i);
    List values=Arrays.asList(definition.getParams());
    validateUsage(MODEL_PARAMETER_DEFINITIONS,values,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
    validateId(MODEL_PARAMETER_DEFINITIONS,values,""String_Node_Str"",""String_Node_Str"");
  }
  Control widget=UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_DEFINITIONS));
  for (int j=0; j < definitions.size(); j++) {
    Assignment definition=(Assignment)definitions.get(j);
    String label=definition.getLabel();
    if (SemanticHelper.isConfigFileKeyword(label)) {
      mm.addMessage(label,""String_Node_Str"" + label + ""String_Node_Str"",null,IMessageProvider.ERROR,widget);
    }
  }
  mm.setAutoUpdate(true);
  super.validatePage(switchToErrorPage);
}","/** 
 */
public void validatePage(boolean switchToErrorPage){
  if (getManagedForm() == null) {
    return;
  }
  IMessageManager mm=getManagedForm().getMessageManager();
  mm.setAutoUpdate(false);
  mm.removeAllMessages();
  setComplete(true);
  getLookupHelper().resetModelNames(this);
  try {
    int dfidDepth=Integer.parseInt(dfidDepthText.getText());
    if (dfidDepth <= 0) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,dfidDepthText);
      setComplete(false);
      expandSection(SEC_LAUNCHING_SETUP);
    }
  }
 catch (  NumberFormatException e) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,dfidDepthText);
    setComplete(false);
    expandSection(SEC_LAUNCHING_SETUP);
  }
  try {
    int simuDepth=Integer.parseInt(simuDepthText.getText());
    if (simuDepth <= 0) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,simuDepthText);
      setComplete(false);
      expandSection(SEC_LAUNCHING_SETUP);
    }
  }
 catch (  NumberFormatException e) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,simuDepthText);
    setComplete(false);
    expandSection(SEC_LAUNCHING_SETUP);
  }
  if (!EMPTY_STRING.equals(simuArilText.getText())) {
    try {
      long simuAril=Long.parseLong(simuArilText.getText());
      if (simuAril <= 0) {
        mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,simuArilText);
        setComplete(false);
      }
    }
 catch (    NumberFormatException e) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,simuArilText);
      setComplete(false);
      expandSection(SEC_LAUNCHING_SETUP);
    }
  }
  if (!EMPTY_STRING.equals(simuSeedText.getText())) {
    try {
      Long.parseLong(simuSeedText.getText());
    }
 catch (    NumberFormatException e) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,simuSeedText);
      expandSection(SEC_LAUNCHING_SETUP);
      setComplete(false);
    }
  }
  DataBindingManager dm=getDataBindingManager();
  TypedSet modelValuesSet=TypedSet.parseSet(FormHelper.trimTrailingSpaces(modelValuesSource.getDocument().get()));
  if (modelValuesSet.getValueCount() > 0) {
    List values=modelValuesSet.getValuesAsList();
    validateUsage(MODEL_PARAMETER_MODEL_VALUES,values,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
    validateId(MODEL_PARAMETER_MODEL_VALUES,values,""String_Node_Str"",""String_Node_Str"");
    Control widget=UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_MODEL_VALUES));
    for (int j=0; j < values.size(); j++) {
      String value=(String)values.get(j);
      if (SemanticHelper.isConfigFileKeyword(value)) {
        mm.addMessage(value,""String_Node_Str"" + value + ""String_Node_Str"",null,IMessageProvider.ERROR,widget);
      }
    }
  }
  SpecObj specObj=ToolboxHandle.getCurrentSpec().getValidRootModule();
  OpDefNode[] opDefNodes=specObj.getExternalModuleTable().getRootModule().getOpDefs();
  Hashtable nodeTable=new Hashtable(opDefNodes.length);
  for (int j=0; j < opDefNodes.length; j++) {
    String key=opDefNodes[j].getName().toString();
    nodeTable.put(key,opDefNodes[j]);
  }
  Control widget=UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_DEFINITIONS));
  List definitions=(List)definitionsTable.getInput();
  for (int i=0; i < definitions.size(); i++) {
    Assignment definition=(Assignment)definitions.get(i);
    List values=Arrays.asList(definition.getParams());
    validateUsage(MODEL_PARAMETER_DEFINITIONS,values,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
    validateId(MODEL_PARAMETER_DEFINITIONS,values,""String_Node_Str"",""String_Node_Str"");
    if (!nodeTable.containsKey(definition.getLabel())) {
      mm.addMessage(definition.getLabel(),""String_Node_Str"" + definition.getLabel().substring(definition.getLabel().lastIndexOf(""String_Node_Str"") + 1) + ""String_Node_Str""+ ""String_Node_Str"",null,IMessageProvider.ERROR,widget);
    }
 else {
      OpDefNode opDefNode=(OpDefNode)nodeTable.get(definition.getLabel());
      if (opDefNode.getSource().getNumberOfArgs() != definition.getParams().length) {
        mm.addMessage(definition.getLabel(),""String_Node_Str"" + opDefNode.getSource().getName() + ""String_Node_Str"",null,IMessageProvider.ERROR,widget);
      }
    }
  }
  for (int j=0; j < definitions.size(); j++) {
    Assignment definition=(Assignment)definitions.get(j);
    String label=definition.getLabel();
    if (SemanticHelper.isConfigFileKeyword(label)) {
      mm.addMessage(label,""String_Node_Str"" + label + ""String_Node_Str"",null,IMessageProvider.ERROR,widget);
    }
  }
  mm.setAutoUpdate(true);
  super.validatePage(switchToErrorPage);
}",0.7950151409270906
136075,"/** 
 * Creates the UI
 */
protected void createBodyContent(IManagedForm managedForm){
  DataBindingManager dm=getDataBindingManager();
  int sectionFlags=Section.TITLE_BAR | Section.DESCRIPTION | Section.TREE_NODE;
  FormToolkit toolkit=managedForm.getToolkit();
  Composite body=managedForm.getForm().getBody();
  GridData gd;
  TableWrapData twd;
  Composite left=toolkit.createComposite(body);
  twd=new TableWrapData(TableWrapData.FILL_GRAB);
  twd.grabHorizontal=true;
  left.setLayout(new GridLayout(1,false));
  left.setLayoutData(twd);
  Composite right=toolkit.createComposite(body);
  twd=new TableWrapData(TableWrapData.FILL_GRAB);
  twd.grabHorizontal=true;
  right.setLayoutData(twd);
  right.setLayout(new GridLayout(1,false));
  Section section;
  section=FormHelper.createSectionComposite(left,""String_Node_Str"",""String_Node_Str"",toolkit,sectionFlags,getExpansionListener());
  ValidateableSectionPart newDefinitionsPart=new ValidateableSectionPart(section,this,SEC_NEW_DEFINITION);
  managedForm.addPart(newDefinitionsPart);
  DirtyMarkingListener newDefinitionsListener=new DirtyMarkingListener(newDefinitionsPart,true);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  section.setLayoutData(gd);
  Composite newDefinitionsArea=(Composite)section.getClient();
  newDefinitionsSource=FormHelper.createFormsSourceViewer(toolkit,newDefinitionsArea,SWT.V_SCROLL);
  twd=new TableWrapData(TableWrapData.FILL);
  twd.heightHint=60;
  twd.grabHorizontal=true;
  newDefinitionsSource.getTextWidget().setLayoutData(twd);
  newDefinitionsSource.addTextListener(newDefinitionsListener);
  dm.bindAttribute(MODEL_PARAMETER_NEW_DEFINITIONS,newDefinitionsSource,newDefinitionsPart);
  ValidateableOverridesSectionPart definitionsPart=new ValidateableOverridesSectionPart(right,""String_Node_Str"",""String_Node_Str"",toolkit,sectionFlags,this);
  managedForm.addPart(definitionsPart);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  definitionsPart.getSection().setLayoutData(gd);
  gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=100;
  gd.verticalSpan=3;
  definitionsPart.getTableViewer().getTable().setLayoutData(gd);
  definitionsTable=definitionsPart.getTableViewer();
  dm.bindAttribute(MODEL_PARAMETER_DEFINITIONS,definitionsTable,definitionsPart);
  section=FormHelper.createSectionComposite(left,""String_Node_Str"",""String_Node_Str"",toolkit,sectionFlags,getExpansionListener());
  ValidateableSectionPart constraintPart=new ValidateableSectionPart(section,this,SEC_STATE_CONSTRAINT);
  managedForm.addPart(constraintPart);
  DirtyMarkingListener constraintListener=new DirtyMarkingListener(constraintPart,true);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  section.setLayoutData(gd);
  Composite constraintArea=(Composite)section.getClient();
  constraintSource=FormHelper.createFormsSourceViewer(toolkit,constraintArea,SWT.V_SCROLL);
  twd=new TableWrapData(TableWrapData.FILL);
  twd.heightHint=60;
  twd.grabHorizontal=true;
  constraintSource.getTextWidget().setLayoutData(twd);
  constraintSource.addTextListener(constraintListener);
  dm.bindAttribute(MODEL_PARAMETER_CONSTRAINT,constraintSource,constraintPart);
  section=FormHelper.createSectionComposite(right,""String_Node_Str"",""String_Node_Str"",toolkit,sectionFlags,getExpansionListener());
  ValidateableSectionPart actionConstraintPart=new ValidateableSectionPart(section,this,SEC_ACTION_CONSTRAINT);
  managedForm.addPart(actionConstraintPart);
  DirtyMarkingListener actionConstraintListener=new DirtyMarkingListener(actionConstraintPart,true);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  section.setLayoutData(gd);
  Composite actionConstraintArea=(Composite)section.getClient();
  actionConstraintSource=FormHelper.createFormsSourceViewer(toolkit,actionConstraintArea,SWT.V_SCROLL);
  twd=new TableWrapData(TableWrapData.FILL);
  twd.heightHint=60;
  twd.grabHorizontal=true;
  actionConstraintSource.getTextWidget().setLayoutData(twd);
  actionConstraintSource.addTextListener(actionConstraintListener);
  dm.bindAttribute(MODEL_PARAMETER_ACTION_CONSTRAINT,actionConstraintSource,actionConstraintPart);
  section=FormHelper.createSectionComposite(left,""String_Node_Str"",""String_Node_Str"",toolkit,sectionFlags,getExpansionListener());
  ValidateableSectionPart modelValuesPart=new ValidateableSectionPart(section,this,SEC_MODEL_VALUES);
  managedForm.addPart(modelValuesPart);
  DirtyMarkingListener modelValuesListener=new DirtyMarkingListener(modelValuesPart,true);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  section.setLayoutData(gd);
  Composite modelValueArea=(Composite)section.getClient();
  modelValuesSource=FormHelper.createFormsSourceViewer(toolkit,modelValueArea,SWT.V_SCROLL);
  twd=new TableWrapData(TableWrapData.FILL);
  twd.heightHint=60;
  twd.grabHorizontal=true;
  modelValuesSource.getTextWidget().setLayoutData(twd);
  modelValuesSource.addTextListener(modelValuesListener);
  dm.bindAttribute(MODEL_PARAMETER_MODEL_VALUES,modelValuesSource,modelValuesPart);
  section=createAdvancedLaunchSection(toolkit,right,sectionFlags);
  ValidateableSectionPart launchPart=new ValidateableSectionPart(section,this,SEC_LAUNCHING_SETUP);
  managedForm.addPart(launchPart);
  DirtyMarkingListener launchListener=new DirtyMarkingListener(launchPart,true);
  simuArilText.addModifyListener(launchListener);
  simuSeedText.addModifyListener(launchListener);
  simuDepthText.addModifyListener(launchListener);
  dfidDepthText.addModifyListener(launchListener);
  simulationOption.addSelectionListener(launchListener);
  dfidOption.addSelectionListener(launchListener);
  mcOption.addSelectionListener(launchListener);
  viewSource.addTextListener(launchListener);
  dirtyPartListeners.add(newDefinitionsListener);
  dirtyPartListeners.add(actionConstraintListener);
  dirtyPartListeners.add(modelValuesListener);
  dirtyPartListeners.add(constraintListener);
  dirtyPartListeners.add(launchListener);
}","/** 
 * Creates the UI
 */
protected void createBodyContent(IManagedForm managedForm){
  DataBindingManager dm=getDataBindingManager();
  int sectionFlags=Section.TITLE_BAR | Section.DESCRIPTION | Section.TREE_NODE;
  FormToolkit toolkit=managedForm.getToolkit();
  Composite body=managedForm.getForm().getBody();
  GridData gd;
  TableWrapData twd;
  Composite left=toolkit.createComposite(body);
  twd=new TableWrapData(TableWrapData.FILL_GRAB);
  twd.grabHorizontal=true;
  left.setLayout(new GridLayout(1,false));
  left.setLayoutData(twd);
  Composite right=toolkit.createComposite(body);
  twd=new TableWrapData(TableWrapData.FILL_GRAB);
  twd.grabHorizontal=true;
  right.setLayoutData(twd);
  right.setLayout(new GridLayout(1,false));
  Section section;
  section=FormHelper.createSectionComposite(left,""String_Node_Str"",""String_Node_Str"",toolkit,sectionFlags,getExpansionListener());
  ValidateableSectionPart newDefinitionsPart=new ValidateableSectionPart(section,this,SEC_NEW_DEFINITION);
  managedForm.addPart(newDefinitionsPart);
  DirtyMarkingListener newDefinitionsListener=new DirtyMarkingListener(newDefinitionsPart,true);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  section.setLayoutData(gd);
  Composite newDefinitionsArea=(Composite)section.getClient();
  newDefinitionsSource=FormHelper.createFormsSourceViewer(toolkit,newDefinitionsArea,SWT.V_SCROLL);
  twd=new TableWrapData(TableWrapData.FILL);
  twd.heightHint=60;
  twd.grabHorizontal=true;
  newDefinitionsSource.getTextWidget().setLayoutData(twd);
  newDefinitionsSource.addTextListener(newDefinitionsListener);
  dm.bindAttribute(MODEL_PARAMETER_NEW_DEFINITIONS,newDefinitionsSource,newDefinitionsPart);
  ValidateableOverridesSectionPart definitionsPart=new ValidateableOverridesSectionPart(right,""String_Node_Str"",""String_Node_Str"",toolkit,sectionFlags,this);
  managedForm.addPart(definitionsPart);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  definitionsPart.getSection().setLayoutData(gd);
  gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=100;
  gd.verticalSpan=3;
  definitionsPart.getTableViewer().getTable().setLayoutData(gd);
  definitionsTable=definitionsPart.getTableViewer();
  dm.bindSection(definitionsPart,DEF_OVERRIDES_PART,this.getId());
  dm.bindAttribute(MODEL_PARAMETER_DEFINITIONS,definitionsTable,definitionsPart);
  section=FormHelper.createSectionComposite(left,""String_Node_Str"",""String_Node_Str"",toolkit,sectionFlags,getExpansionListener());
  ValidateableSectionPart constraintPart=new ValidateableSectionPart(section,this,SEC_STATE_CONSTRAINT);
  managedForm.addPart(constraintPart);
  DirtyMarkingListener constraintListener=new DirtyMarkingListener(constraintPart,true);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  section.setLayoutData(gd);
  Composite constraintArea=(Composite)section.getClient();
  constraintSource=FormHelper.createFormsSourceViewer(toolkit,constraintArea,SWT.V_SCROLL);
  twd=new TableWrapData(TableWrapData.FILL);
  twd.heightHint=60;
  twd.grabHorizontal=true;
  constraintSource.getTextWidget().setLayoutData(twd);
  constraintSource.addTextListener(constraintListener);
  dm.bindAttribute(MODEL_PARAMETER_CONSTRAINT,constraintSource,constraintPart);
  section=FormHelper.createSectionComposite(right,""String_Node_Str"",""String_Node_Str"",toolkit,sectionFlags,getExpansionListener());
  ValidateableSectionPart actionConstraintPart=new ValidateableSectionPart(section,this,SEC_ACTION_CONSTRAINT);
  managedForm.addPart(actionConstraintPart);
  DirtyMarkingListener actionConstraintListener=new DirtyMarkingListener(actionConstraintPart,true);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  section.setLayoutData(gd);
  Composite actionConstraintArea=(Composite)section.getClient();
  actionConstraintSource=FormHelper.createFormsSourceViewer(toolkit,actionConstraintArea,SWT.V_SCROLL);
  twd=new TableWrapData(TableWrapData.FILL);
  twd.heightHint=60;
  twd.grabHorizontal=true;
  actionConstraintSource.getTextWidget().setLayoutData(twd);
  actionConstraintSource.addTextListener(actionConstraintListener);
  dm.bindAttribute(MODEL_PARAMETER_ACTION_CONSTRAINT,actionConstraintSource,actionConstraintPart);
  section=FormHelper.createSectionComposite(left,""String_Node_Str"",""String_Node_Str"",toolkit,sectionFlags,getExpansionListener());
  ValidateableSectionPart modelValuesPart=new ValidateableSectionPart(section,this,SEC_MODEL_VALUES);
  managedForm.addPart(modelValuesPart);
  DirtyMarkingListener modelValuesListener=new DirtyMarkingListener(modelValuesPart,true);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  section.setLayoutData(gd);
  Composite modelValueArea=(Composite)section.getClient();
  modelValuesSource=FormHelper.createFormsSourceViewer(toolkit,modelValueArea,SWT.V_SCROLL);
  twd=new TableWrapData(TableWrapData.FILL);
  twd.heightHint=60;
  twd.grabHorizontal=true;
  modelValuesSource.getTextWidget().setLayoutData(twd);
  modelValuesSource.addTextListener(modelValuesListener);
  dm.bindAttribute(MODEL_PARAMETER_MODEL_VALUES,modelValuesSource,modelValuesPart);
  section=createAdvancedLaunchSection(toolkit,right,sectionFlags);
  ValidateableSectionPart launchPart=new ValidateableSectionPart(section,this,SEC_LAUNCHING_SETUP);
  managedForm.addPart(launchPart);
  DirtyMarkingListener launchListener=new DirtyMarkingListener(launchPart,true);
  simuArilText.addModifyListener(launchListener);
  simuSeedText.addModifyListener(launchListener);
  simuDepthText.addModifyListener(launchListener);
  dfidDepthText.addModifyListener(launchListener);
  simulationOption.addSelectionListener(launchListener);
  dfidOption.addSelectionListener(launchListener);
  mcOption.addSelectionListener(launchListener);
  viewSource.addTextListener(launchListener);
  dirtyPartListeners.add(newDefinitionsListener);
  dirtyPartListeners.add(actionConstraintListener);
  dirtyPartListeners.add(modelValuesListener);
  dirtyPartListeners.add(constraintListener);
  dirtyPartListeners.add(launchListener);
}",0.9944338290271664
136076,"protected Assignment doEditFormula(Assignment formula){
  if (formula == null) {
    FilteredDefinitionSelectionDialog definitionSelection=new FilteredDefinitionSelectionDialog(this.getSection().getShell(),false,ToolboxHandle.getCurrentSpec().getValidRootModule());
    definitionSelection.setTitle(""String_Node_Str"");
    definitionSelection.setMessage(""String_Node_Str"");
    definitionSelection.setInitialPattern(""String_Node_Str"");
    if (Window.OK == definitionSelection.open()) {
      OpDefNode result=(OpDefNode)(definitionSelection.getResult())[0];
      formula=new Assignment(result.getName().toString(),Assignment.getArrayOfEmptyStrings(result.getSource().getNumberOfArgs()),""String_Node_Str"");
    }
 else {
      return null;
    }
  }
  AssignmentWizard wizard=new AssignmentWizard(getSection().getText(),getSection().getDescription(),(Assignment)formula,AssignmentWizard.NONE,AssignmentWizardPage.DEF_OVERRIDE_WIZARD_ID,""String_Node_Str"");
  WizardDialog dialog=new WizardDialog(getTableViewer().getTable().getShell(),wizard);
  dialog.setHelpAvailable(true);
  if (Window.OK == dialog.open()) {
    return wizard.getFormula();
  }
 else {
    return null;
  }
}","protected Assignment doEditFormula(Assignment formula){
  if (formula == null) {
    FilteredDefinitionSelectionDialog definitionSelection=new FilteredDefinitionSelectionDialog(this.getSection().getShell(),false,ToolboxHandle.getCurrentSpec().getValidRootModule());
    definitionSelection.setTitle(""String_Node_Str"");
    definitionSelection.setMessage(""String_Node_Str"");
    definitionSelection.setInitialPattern(""String_Node_Str"");
    if (Window.OK == definitionSelection.open()) {
      OpDefNode result=(OpDefNode)(definitionSelection.getResult())[0];
      formula=new Assignment(result.getName().toString(),Assignment.getArrayOfEmptyStrings(result.getSource().getNumberOfArgs()),""String_Node_Str"");
    }
 else {
      return null;
    }
  }
  OpDefNode opDefNode=(OpDefNode)ModelHelper.getOpDefNode(formula.getLabel());
  if (opDefNode.getSource().getNumberOfArgs() != formula.getParams().length) {
    String[] newParams=new String[opDefNode.getSource().getNumberOfArgs()];
    for (int i=0; i < newParams.length; i++) {
      newParams[i]=""String_Node_Str"";
    }
    formula.setParams(newParams);
  }
  AssignmentWizard wizard=new AssignmentWizard(getSection().getText(),getSection().getDescription(),(Assignment)formula,AssignmentWizard.NONE,AssignmentWizardPage.DEF_OVERRIDE_WIZARD_ID,""String_Node_Str"");
  WizardDialog dialog=new WizardDialog(getTableViewer().getTable().getShell(),wizard);
  dialog.setHelpAvailable(true);
  if (Window.OK == dialog.open()) {
    return wizard.getFormula();
  }
 else {
    return null;
  }
}",0.8665931642778391
136077,"public void validatePage(boolean switchToErrorPage){
  if (getManagedForm() == null) {
    return;
  }
  countXX++;
  System.out.println(""String_Node_Str"" + countXX);
  if (countXX == 60000) {
    countXX++;
    ModelEditor ourFavoriteEditor=(ModelEditor)this.getEditor();
    ourFavoriteEditor.removePage(0);
    System.out.println(""String_Node_Str"");
    MainModelPage newPage=new MainModelPage(ourFavoriteEditor);
    try {
      ourFavoriteEditor.addPage(0,newPage);
      ourFavoriteEditor.setUpPage(newPage,0);
    }
 catch (    PartInitException e) {
      TLCUIActivator.logError(""String_Node_Str"",e);
      e.printStackTrace();
    }
    ourFavoriteEditor.setActivePage(newPage.getId());
    newPage.setFocus();
    System.out.println(""String_Node_Str"");
  }
  DataBindingManager dm=getDataBindingManager();
  IMessageManager mm=getManagedForm().getMessageManager();
  resetAllMessages(false);
  ModuleNode rootModuleNode=SemanticHelper.getRootModuleNode();
  getLookupHelper().resetModelNames(this);
  List constants=(List)constantTable.getInput();
  if (rootModuleNode != null) {
    List toDelete=ModelHelper.mergeConstantLists(constants,ModelHelper.createConstantsList(rootModuleNode));
    if (!toDelete.isEmpty()) {
      SectionPart constantSection=dm.getSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
      if (constantSection != null) {
        constantSection.markDirty();
      }
    }
    constantTable.setInput(constants);
  }
  boolean symmetryUsed=false;
  for (int i=0; i < constants.size(); i++) {
    Assignment constant=(Assignment)constants.get(i);
    List values=Arrays.asList(constant.getParams());
    validateId(MODEL_PARAMETER_CONSTANTS,values,""String_Node_Str"",""String_Node_Str"");
    if (constant.getRight() == null || EMPTY_STRING.equals(constant.getRight())) {
      mm.addMessage(constant.getLabel(),""String_Node_Str"" + constant.getLabel(),constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
    }
 else {
      if (constant.isSetOfModelValues()) {
        if (symmetryUsed && constant.isSymmetricalSet()) {
          mm.addMessage(constant.getLabel(),""String_Node_Str"",constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
          setComplete(false);
          expandSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
        }
 else {
          if (constant.isSymmetricalSet()) {
            symmetryUsed=true;
          }
        }
        TypedSet modelValuesSet=TypedSet.parseSet(constant.getRight());
        if (modelValuesSet.getValueCount() > 0) {
          List mvList=modelValuesSet.getValuesAsList();
          validateUsage(MODEL_PARAMETER_CONSTANTS,mvList,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
          validateId(MODEL_PARAMETER_CONSTANTS,mvList,""String_Node_Str"",""String_Node_Str"");
          Control widget=UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS));
          for (int j=0; j < mvList.size(); j++) {
            String value=(String)mvList.get(j);
            if (SemanticHelper.isConfigFileKeyword(value)) {
              mm.addMessage(value,""String_Node_Str"" + value + ""String_Node_Str"",constant,IMessageProvider.ERROR,widget);
            }
          }
        }
      }
    }
    if (SemanticHelper.isConfigFileKeyword(constant.getLabel())) {
      mm.addMessage(constant.getLabel(),""String_Node_Str"" + constant.getLabel() + ""String_Node_Str"",constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
    }
  }
  for (int i=0; i < constants.size(); i++) {
    Assignment constant=(Assignment)constants.get(i);
    List values=Arrays.asList(constant.getParams());
    validateUsage(MODEL_PARAMETER_CONSTANTS,values,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
  String numberOfworkers=workers.getText();
  try {
    int number=Integer.parseInt(numberOfworkers);
    if (number <= 0) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
      setComplete(false);
      expandSection(SEC_HOW_TO_RUN);
    }
 else {
      if (number > Runtime.getRuntime().availableProcessors()) {
        mm.addMessage(""String_Node_Str"",""String_Node_Str"" + number + ""String_Node_Str""+ Runtime.getRuntime().availableProcessors()+ ""String_Node_Str"",null,IMessageProvider.WARNING,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
        expandSection(SEC_HOW_TO_RUN);
      }
    }
  }
 catch (  NumberFormatException e) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
    setComplete(false);
    expandSection(SEC_HOW_TO_RUN);
  }
  updateCheckpoints();
  if (checkpointButton.getSelection()) {
    if (EMPTY_STRING.equals(checkpointIdText.getText())) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_RECOVER)));
      setComplete(false);
      expandSection(SEC_HOW_TO_RUN);
    }
  }
  if (rootModuleNode != null) {
    if (rootModuleNode.getVariableDecls().length == 0) {
      setHasVariables(false);
      setSpecSelection(MODEL_BEHAVIOR_TYPE_NO_SPEC);
    }
 else {
      setHasVariables(true);
      if (noSpecRadio.getSelection()) {
        setSpecSelection(MODEL_BEHAVIOR_TYPE_DEFAULT);
      }
    }
  }
  if (closedFormulaRadio.getSelection() && specSource.getDocument().get().trim().equals(""String_Node_Str"")) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_CLOSED_SPECIFICATION)));
    setComplete(false);
    expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_CLOSED_SPECIFICATION));
  }
 else   if (initNextFairnessRadio.getSelection()) {
    String init=initFormulaSource.getDocument().get().trim();
    String next=nextFormulaSource.getDocument().get().trim();
    if (init.equals(""String_Node_Str"")) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT));
    }
    if (next.equals(""String_Node_Str"")) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT));
    }
  }
  mm.setAutoUpdate(true);
  super.validatePage(switchToErrorPage);
}","public void validatePage(boolean switchToErrorPage){
  if (getManagedForm() == null) {
    return;
  }
  DataBindingManager dm=getDataBindingManager();
  IMessageManager mm=getManagedForm().getMessageManager();
  resetAllMessages(false);
  ModuleNode rootModuleNode=SemanticHelper.getRootModuleNode();
  getLookupHelper().resetModelNames(this);
  List constants=(List)constantTable.getInput();
  if (rootModuleNode != null) {
    List toDelete=ModelHelper.mergeConstantLists(constants,ModelHelper.createConstantsList(rootModuleNode));
    if (!toDelete.isEmpty()) {
      SectionPart constantSection=dm.getSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
      if (constantSection != null) {
        constantSection.markDirty();
      }
    }
    constantTable.setInput(constants);
  }
  boolean symmetryUsed=false;
  for (int i=0; i < constants.size(); i++) {
    Assignment constant=(Assignment)constants.get(i);
    List values=Arrays.asList(constant.getParams());
    validateId(MODEL_PARAMETER_CONSTANTS,values,""String_Node_Str"",""String_Node_Str"");
    if (constant.getRight() == null || EMPTY_STRING.equals(constant.getRight())) {
      mm.addMessage(constant.getLabel(),""String_Node_Str"" + constant.getLabel(),constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
    }
 else {
      if (constant.isSetOfModelValues()) {
        if (symmetryUsed && constant.isSymmetricalSet()) {
          mm.addMessage(constant.getLabel(),""String_Node_Str"",constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
          setComplete(false);
          expandSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
        }
 else {
          if (constant.isSymmetricalSet()) {
            symmetryUsed=true;
          }
        }
        TypedSet modelValuesSet=TypedSet.parseSet(constant.getRight());
        if (modelValuesSet.getValueCount() > 0) {
          List mvList=modelValuesSet.getValuesAsList();
          validateUsage(MODEL_PARAMETER_CONSTANTS,mvList,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
          validateId(MODEL_PARAMETER_CONSTANTS,mvList,""String_Node_Str"",""String_Node_Str"");
          Control widget=UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS));
          for (int j=0; j < mvList.size(); j++) {
            String value=(String)mvList.get(j);
            if (SemanticHelper.isConfigFileKeyword(value)) {
              mm.addMessage(value,""String_Node_Str"" + value + ""String_Node_Str"",constant,IMessageProvider.ERROR,widget);
            }
          }
        }
      }
    }
    if (SemanticHelper.isConfigFileKeyword(constant.getLabel())) {
      mm.addMessage(constant.getLabel(),""String_Node_Str"" + constant.getLabel() + ""String_Node_Str"",constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
    }
  }
  for (int i=0; i < constants.size(); i++) {
    Assignment constant=(Assignment)constants.get(i);
    List values=Arrays.asList(constant.getParams());
    validateUsage(MODEL_PARAMETER_CONSTANTS,values,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
  String numberOfworkers=workers.getText();
  try {
    int number=Integer.parseInt(numberOfworkers);
    if (number <= 0) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
      setComplete(false);
      expandSection(SEC_HOW_TO_RUN);
    }
 else {
      if (number > Runtime.getRuntime().availableProcessors()) {
        mm.addMessage(""String_Node_Str"",""String_Node_Str"" + number + ""String_Node_Str""+ Runtime.getRuntime().availableProcessors()+ ""String_Node_Str"",null,IMessageProvider.WARNING,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
        expandSection(SEC_HOW_TO_RUN);
      }
    }
  }
 catch (  NumberFormatException e) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
    setComplete(false);
    expandSection(SEC_HOW_TO_RUN);
  }
  updateCheckpoints();
  if (checkpointButton.getSelection()) {
    if (EMPTY_STRING.equals(checkpointIdText.getText())) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_RECOVER)));
      setComplete(false);
      expandSection(SEC_HOW_TO_RUN);
    }
  }
  if (rootModuleNode != null) {
    if (rootModuleNode.getVariableDecls().length == 0) {
      setHasVariables(false);
      setSpecSelection(MODEL_BEHAVIOR_TYPE_NO_SPEC);
    }
 else {
      setHasVariables(true);
      if (noSpecRadio.getSelection()) {
        setSpecSelection(MODEL_BEHAVIOR_TYPE_DEFAULT);
      }
    }
  }
  if (closedFormulaRadio.getSelection() && specSource.getDocument().get().trim().equals(""String_Node_Str"")) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_CLOSED_SPECIFICATION)));
    setComplete(false);
    expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_CLOSED_SPECIFICATION));
  }
 else   if (initNextFairnessRadio.getSelection()) {
    String init=initFormulaSource.getDocument().get().trim();
    String next=nextFormulaSource.getDocument().get().trim();
    if (init.equals(""String_Node_Str"")) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT));
    }
    if (next.equals(""String_Node_Str"")) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT));
    }
  }
  mm.setAutoUpdate(true);
  super.validatePage(switchToErrorPage);
}",0.9496402877697842
136078,"/** 
 * Create the partial state space for given starting state up to the given depth or the number of states.
 */
public final boolean runTLC(int depth) throws Exception {
  if (this.cancellationFlag) {
    return false;
  }
  if (depth < 2) {
    return true;
  }
  IdThread[] workers=startWorkers(this,depth);
  int count=TLCGlobals.coverageInterval / TLCGlobals.progressInterval;
  runTLCPreLoop();
synchronized (this) {
    this.wait(30000);
  }
  while (!this.cancellationFlag) {
    long now=System.currentTimeMillis();
    if (now - this.lastChkpt >= TLCGlobals.chkptDuration) {
      if (!this.doPeriodicWork()) {
        return false;
      }
      this.lastChkpt=now;
    }
synchronized (this) {
      if (!this.done) {
        runTLCContinueDoing(count,depth);
        if (count == 0) {
          count=TLCGlobals.coverageInterval / TLCGlobals.progressInterval;
        }
 else {
          count--;
        }
      }
      if (this.done)       break;
    }
  }
  for (int i=0; i < workers.length; i++) {
    workers[i].join();
  }
  return true;
}","/** 
 * Create the partial state space for given starting state up to the given depth or the number of states.
 */
public final boolean runTLC(int depth) throws Exception {
  if (this.cancellationFlag) {
    return false;
  }
  if (depth < 2) {
    return true;
  }
  IdThread[] workers=startWorkers(this,depth);
  int count=TLCGlobals.coverageInterval / TLCGlobals.progressInterval;
  runTLCPreLoop();
  for (int i=0; i < 10; i++) {
synchronized (this) {
      if (this.done) {
        break;
      }
      this.wait(3000);
    }
  }
  while (!this.cancellationFlag) {
    long now=System.currentTimeMillis();
    if (now - this.lastChkpt >= TLCGlobals.chkptDuration) {
      if (!this.doPeriodicWork()) {
        return false;
      }
      this.lastChkpt=now;
    }
synchronized (this) {
      if (!this.done) {
        runTLCContinueDoing(count,depth);
        if (count == 0) {
          count=TLCGlobals.coverageInterval / TLCGlobals.progressInterval;
        }
 else {
          count--;
        }
      }
      if (this.done)       break;
    }
  }
  for (int i=0; i < workers.length; i++) {
    workers[i].join();
  }
  return true;
}",0.9591280653950952
136079,"/** 
 * Create the partial state space for given starting state up to the given depth or the number of states.
 */
public final boolean runTLC(int depth) throws Exception {
  if (this.cancellationFlag) {
    return false;
  }
  if (depth < 2) {
    return true;
  }
  IdThread[] workers=startWorkers(this,depth);
  int count=TLCGlobals.coverageInterval / TLCGlobals.progressInterval;
  runTLCPreLoop();
synchronized (this) {
    this.wait(30000);
  }
  while (!this.cancellationFlag) {
    long now=System.currentTimeMillis();
    if (now - this.lastChkpt >= TLCGlobals.chkptDuration) {
      if (!this.doPeriodicWork()) {
        return false;
      }
      this.lastChkpt=now;
    }
synchronized (this) {
      if (!this.done) {
        runTLCContinueDoing(count,depth);
      }
      if (this.done)       break;
    }
  }
  for (int i=0; i < workers.length; i++) {
    workers[i].join();
  }
  return true;
}","/** 
 * Create the partial state space for given starting state up to the given depth or the number of states.
 */
public final boolean runTLC(int depth) throws Exception {
  if (this.cancellationFlag) {
    return false;
  }
  if (depth < 2) {
    return true;
  }
  IdThread[] workers=startWorkers(this,depth);
  int count=TLCGlobals.coverageInterval / TLCGlobals.progressInterval;
  runTLCPreLoop();
synchronized (this) {
    this.wait(30000);
  }
  while (!this.cancellationFlag) {
    long now=System.currentTimeMillis();
    if (now - this.lastChkpt >= TLCGlobals.chkptDuration) {
      if (!this.doPeriodicWork()) {
        return false;
      }
      this.lastChkpt=now;
    }
synchronized (this) {
      if (!this.done) {
        runTLCContinueDoing(count,depth);
        if (count == 0) {
          count=TLCGlobals.coverageInterval / TLCGlobals.progressInterval;
        }
 else {
          count--;
        }
      }
      if (this.done)       break;
    }
  }
  for (int i=0; i < workers.length; i++) {
    workers[i].join();
  }
  return true;
}",0.9248730964467003
136080,"/** 
 * Process calculation 
 * @param count
 * @param depth
 * @throws Exception
 */
protected void runTLCContinueDoing(int count,int depth) throws Exception {
  int level=this.trace.getLevel();
  MP.printMessage(EC.TLC_PROGRESS_STATS,new String[]{String.valueOf(level),String.valueOf(this.numOfGenStates),String.valueOf(this.theFPSet.size()),String.valueOf(this.theStateQueue.size())});
  if (level > depth) {
    this.theStateQueue.finishAll();
    this.done=true;
  }
 else {
    if (count == 0) {
      super.reportCoverage(this.workers);
      count=TLCGlobals.coverageInterval / TLCGlobals.progressInterval;
    }
 else {
      count--;
    }
    this.wait(TLCGlobals.progressInterval);
  }
}","/** 
 * Process calculation 
 * @param count
 * @param depth
 * @throws Exception
 */
protected void runTLCContinueDoing(int count,int depth) throws Exception {
  int level=this.trace.getLevel();
  MP.printMessage(EC.TLC_PROGRESS_STATS,new String[]{String.valueOf(level),String.valueOf(this.numOfGenStates),String.valueOf(this.theFPSet.size()),String.valueOf(this.theStateQueue.size())});
  if (level > depth) {
    this.theStateQueue.finishAll();
    this.done=true;
  }
 else {
    if (count == 0) {
      super.reportCoverage(this.workers);
    }
    this.wait(TLCGlobals.progressInterval);
  }
}",0.884437596302003
136081,"public void resourceChanged(IResourceChangeEvent event){
  IResourceDelta delta=event.getDelta();
  if (delta != null) {
    OutOfBuildSpecModulesGatheringDeltaVisitor moduleFinder=new OutOfBuildSpecModulesGatheringDeltaVisitor();
    try {
      delta.accept(moduleFinder);
      List modules=moduleFinder.getModules();
      if (!modules.isEmpty()) {
        getSpecManager().getSpecLoaded().setStatus(IParseConstants.UNPARSED);
      }
    }
 catch (    CoreException e) {
      Activator.logError(""String_Node_Str"",e);
    }
  }
}","public void resourceChanged(IResourceChangeEvent event){
  IResourceDelta delta=event.getDelta();
  if (delta != null) {
    OutOfBuildSpecModulesGatheringDeltaVisitor moduleFinder=new OutOfBuildSpecModulesGatheringDeltaVisitor();
    try {
      if (Activator.isSpecManagerInstantiated()) {
        delta.accept(moduleFinder);
        List modules=moduleFinder.getModules();
        if (!modules.isEmpty()) {
          getSpecManager().getSpecLoaded().setStatus(IParseConstants.UNPARSED);
        }
      }
    }
 catch (    CoreException e) {
      Activator.logError(""String_Node_Str"",e);
    }
  }
}",0.9393139841688656
136082,"public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  UIHelper.runUIAsync(parseStatusUpdateRunable);
  workspace.addResourceChangeListener(new IResourceChangeListener(){
    public void resourceChanged(    IResourceChangeEvent event){
      ToolboxHandle.refreshToolboxExplorer();
    }
  }
);
  workspace.addResourceChangeListener(new IResourceChangeListener(){
    private boolean hasMarkerDelta(    IResourceChangeEvent event){
      IMarkerDelta[] deltas=event.findMarkerDeltas(TLAMarkerHelper.TOOLBOX_MARKERS_ALL_MARKER_ID,true);
      if (deltas.length > 0) {
        return true;
      }
      return false;
    }
    public void resourceChanged(    final IResourceChangeEvent event){
      if (!hasMarkerDelta(event)) {
        return;
      }
      UIHelper.runUIAsync(new Runnable(){
        public void run(){
          boolean showProblems=PreferenceStoreHelper.getInstancePreferenceStore().getBoolean(IPreferenceConstants.I_PARSER_POPUP_ERRORS);
          if (showProblems) {
            if (TLAMarkerHelper.currentSpecHasProblems()) {
              ProblemView view=(ProblemView)UIHelper.getActivePage().findView(ProblemView.ID);
              if (view != null) {
                UIHelper.hideView(ProblemView.ID);
              }
              UIHelper.openView(ProblemView.ID);
            }
 else {
              UIHelper.hideView(ProblemView.ID);
            }
          }
        }
      }
);
    }
  }
,IResourceChangeEvent.POST_BUILD);
  workspace.addResourceChangeListener(new IResourceChangeListener(){
    public void resourceChanged(    IResourceChangeEvent event){
      IResourceDelta delta=event.getDelta();
      if (delta != null) {
        OutOfBuildSpecModulesGatheringDeltaVisitor moduleFinder=new OutOfBuildSpecModulesGatheringDeltaVisitor();
        try {
          delta.accept(moduleFinder);
          List modules=moduleFinder.getModules();
          if (!modules.isEmpty()) {
            getSpecManager().getSpecLoaded().setStatus(IParseConstants.UNPARSED);
          }
        }
 catch (        CoreException e) {
          Activator.logError(""String_Node_Str"",e);
        }
      }
    }
  }
,IResourceChangeEvent.POST_CHANGE);
}","public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  UIHelper.runUIAsync(parseStatusUpdateRunable);
  workspace.addResourceChangeListener(new IResourceChangeListener(){
    public void resourceChanged(    IResourceChangeEvent event){
      ToolboxHandle.refreshToolboxExplorer();
    }
  }
);
  workspace.addResourceChangeListener(new IResourceChangeListener(){
    private boolean hasMarkerDelta(    IResourceChangeEvent event){
      IMarkerDelta[] deltas=event.findMarkerDeltas(TLAMarkerHelper.TOOLBOX_MARKERS_ALL_MARKER_ID,true);
      if (deltas.length > 0) {
        return true;
      }
      return false;
    }
    public void resourceChanged(    final IResourceChangeEvent event){
      if (!hasMarkerDelta(event)) {
        return;
      }
      UIHelper.runUIAsync(new Runnable(){
        public void run(){
          boolean showProblems=PreferenceStoreHelper.getInstancePreferenceStore().getBoolean(IPreferenceConstants.I_PARSER_POPUP_ERRORS);
          if (showProblems) {
            if (TLAMarkerHelper.currentSpecHasProblems()) {
              ProblemView view=(ProblemView)UIHelper.getActivePage().findView(ProblemView.ID);
              if (view != null) {
                UIHelper.hideView(ProblemView.ID);
              }
              UIHelper.openView(ProblemView.ID);
            }
 else {
              UIHelper.hideView(ProblemView.ID);
            }
          }
        }
      }
);
    }
  }
,IResourceChangeEvent.POST_BUILD);
  workspace.addResourceChangeListener(new IResourceChangeListener(){
    public void resourceChanged(    IResourceChangeEvent event){
      IResourceDelta delta=event.getDelta();
      if (delta != null) {
        OutOfBuildSpecModulesGatheringDeltaVisitor moduleFinder=new OutOfBuildSpecModulesGatheringDeltaVisitor();
        try {
          if (Activator.isSpecManagerInstantiated()) {
            delta.accept(moduleFinder);
            List modules=moduleFinder.getModules();
            if (!modules.isEmpty()) {
              getSpecManager().getSpecLoaded().setStatus(IParseConstants.UNPARSED);
            }
          }
        }
 catch (        CoreException e) {
          Activator.logError(""String_Node_Str"",e);
        }
      }
    }
  }
,IResourceChangeEvent.POST_CHANGE);
}",0.9833369400562648
136083,"/** 
 * Calls SANY, that parses the root module. <br> <b>Note:</b> This method fills the error objects   {@link ParseSpecHandler#parseErrors} and{@link ParseSpecHandler#semanticErrors}. Call   {@link ParseSpecHandler#processParsingErrors(Spec)} to store thisinformation in the specification handle
 * @param doSemanticAnalysis if true, the semantical phase will be started
 * @param parseResource filename of the module to parse
 * @return status of parsing, one of the {@link IParseConstants} constants
 */
private ParseResult parseModule(IResource parseResource,boolean updateStorage){
  String moduleFilename=parseResource.getLocation().toOSString();
  int specStatus=0;
  Errors parseErrors=null;
  Errors semanticErrors=null;
  FilenameToStream resolver=new RCPNameToFileIStream(null);
  ToolIO.reset();
  ToolIO.setDefaultResolver(resolver);
  ToolIO.setMode(ToolIO.TOOL);
  SpecObj moduleSpec=new SpecObj(ResourceHelper.getModuleName(moduleFilename),resolver);
  PrintStream outputStr=ToolIO.out;
  try {
    SANY.frontEndInitialize(moduleSpec,outputStr);
    SANY.frontEndParse(moduleSpec,outputStr);
    SANY.frontEndSemanticAnalysis(moduleSpec,outputStr,true);
  }
 catch (  InitException e) {
    specStatus=IParseConstants.UNKNOWN_ERROR;
    return new ParseResult(specStatus,null,parseResource,parseErrors,semanticErrors);
  }
catch (  ParseException e) {
    specStatus=IParseConstants.SYNTAX_ERROR;
    parseErrors=moduleSpec.getParseErrors();
  }
catch (  SemanticException e) {
    specStatus=IParseConstants.SEMANTIC_ERROR;
  }
  if (specStatus > IParseConstants.SYNTAX_ERROR) {
    semanticErrors=moduleSpec.semanticErrors;
    if (semanticErrors != null) {
      if (semanticErrors.getNumMessages() > 0) {
        if (semanticErrors.isSuccess()) {
          specStatus=IParseConstants.SEMANTIC_WARNING;
        }
 else {
          specStatus=IParseConstants.SEMANTIC_ERROR;
        }
      }
    }
  }
  Vector userModules=new Vector();
  boolean rootModuleFound=false;
  Enumeration enumerate=moduleSpec.parseUnitContext.keys();
  while (enumerate.hasMoreElements()) {
    String moduleName=(String)enumerate.nextElement();
    ParseUnit parseUnit=(ParseUnit)moduleSpec.parseUnitContext.get(moduleName);
    IResource moduleResource=ResourceHelper.getResourceByModuleName(moduleName);
    try {
      moduleResource.setPersistentProperty(TLAParsingBuilderConstants.LAST_BUILT,String.valueOf(System.currentTimeMillis()));
    }
 catch (    CoreException e) {
      Activator.logError(""String_Node_Str"",e);
    }
    String absoluteFileName=null;
    if (parseUnit.getNis() != null && parseUnit.getNis().sourceFile() != null) {
      absoluteFileName=parseUnit.getNis().sourceFile().getAbsolutePath();
    }
    if (absoluteFileName == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Module module=new Module(absoluteFileName);
    if (!module.isStandardModule()) {
    }
    if (specStatus > IParseConstants.SEMANTIC_ERROR) {
      ExternalModuleTable.ExternalModuleTableEntry emt=(ExternalModuleTable.ExternalModuleTableEntry)moduleSpec.getExternalModuleTable().moduleHashTable.get(UniqueString.uniqueStringOf(module.getModuleName()));
      if (emt != null) {
        module.setNode(emt.getModuleNode());
      }
    }
    if (module.getModuleName().equals(ResourceHelper.getModuleName(moduleFilename))) {
      rootModuleFound=true;
      module.setRoot(true);
    }
    if (module.isStandardModule()) {
    }
 else {
      userModules.addElement(module);
      if (module.getAbsolutePath().indexOf(parseResource.getProject().getLocation().toOSString()) != 0) {
        ResourceHelper.getLinkedFile(parseResource.getProject(),module.getAbsolutePath(),true);
      }
    }
  }
  if (!rootModuleFound) {
    specStatus=IParseConstants.COULD_NOT_FIND_MODULE;
  }
  if (updateStorage) {
    Activator.getModuleDependencyStorage().put(parseResource.getName(),AdapterFactory.adaptModules(parseResource.getName(),userModules));
  }
  return new ParseResult(specStatus,moduleSpec,parseResource,parseErrors,semanticErrors);
}","/** 
 * Calls SANY, that parses the root module. <br> <b>Note:</b> This method fills the error objects   {@link ParseSpecHandler#parseErrors} and{@link ParseSpecHandler#semanticErrors}. Call   {@link ParseSpecHandler#processParsingErrors(Spec)} to store thisinformation in the specification handle
 * @param doSemanticAnalysis if true, the semantical phase will be started
 * @param parseResource filename of the module to parse
 * @return status of parsing, one of the {@link IParseConstants} constants
 */
private ParseResult parseModule(IResource parseResource,boolean updateStorage){
  String moduleFilename=parseResource.getLocation().toOSString();
  int specStatus=0;
  Errors parseErrors=null;
  Errors semanticErrors=null;
  FilenameToStream resolver=new RCPNameToFileIStream(null);
  ToolIO.reset();
  ToolIO.setDefaultResolver(resolver);
  ToolIO.setMode(ToolIO.TOOL);
  SpecObj moduleSpec=new SpecObj(ResourceHelper.getModuleName(moduleFilename),resolver);
  PrintStream outputStr=ToolIO.out;
  try {
    SANY.frontEndInitialize(moduleSpec,outputStr);
    SANY.frontEndParse(moduleSpec,outputStr);
    SANY.frontEndSemanticAnalysis(moduleSpec,outputStr,true);
  }
 catch (  InitException e) {
    specStatus=IParseConstants.UNKNOWN_ERROR;
    return new ParseResult(specStatus,null,parseResource,parseErrors,semanticErrors);
  }
catch (  ParseException e) {
    specStatus=IParseConstants.SYNTAX_ERROR;
    parseErrors=moduleSpec.getParseErrors();
  }
catch (  SemanticException e) {
    specStatus=IParseConstants.SEMANTIC_ERROR;
  }
  if (specStatus > IParseConstants.SYNTAX_ERROR) {
    semanticErrors=moduleSpec.semanticErrors;
    if (semanticErrors != null) {
      if (semanticErrors.getNumMessages() > 0) {
        if (semanticErrors.isSuccess()) {
          specStatus=IParseConstants.SEMANTIC_WARNING;
        }
 else {
          specStatus=IParseConstants.SEMANTIC_ERROR;
        }
      }
    }
  }
  Vector userModules=new Vector();
  boolean rootModuleFound=false;
  Enumeration enumerate=moduleSpec.parseUnitContext.keys();
  while (enumerate.hasMoreElements()) {
    String moduleName=(String)enumerate.nextElement();
    ParseUnit parseUnit=(ParseUnit)moduleSpec.parseUnitContext.get(moduleName);
    String absoluteFileName=null;
    if (parseUnit.getNis() != null && parseUnit.getNis().sourceFile() != null) {
      absoluteFileName=parseUnit.getNis().sourceFile().getAbsolutePath();
    }
    if (absoluteFileName == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Module module=new Module(absoluteFileName);
    if (!module.isStandardModule()) {
      IResource moduleResource=ResourceHelper.getResourceByModuleName(moduleName);
      try {
        moduleResource.setPersistentProperty(TLAParsingBuilderConstants.LAST_BUILT,String.valueOf(System.currentTimeMillis()));
      }
 catch (      CoreException e) {
        Activator.logError(""String_Node_Str"",e);
      }
    }
    if (specStatus > IParseConstants.SEMANTIC_ERROR) {
      ExternalModuleTable.ExternalModuleTableEntry emt=(ExternalModuleTable.ExternalModuleTableEntry)moduleSpec.getExternalModuleTable().moduleHashTable.get(UniqueString.uniqueStringOf(module.getModuleName()));
      if (emt != null) {
        module.setNode(emt.getModuleNode());
      }
    }
    if (module.getModuleName().equals(ResourceHelper.getModuleName(moduleFilename))) {
      rootModuleFound=true;
      module.setRoot(true);
    }
    if (module.isStandardModule()) {
    }
 else {
      userModules.addElement(module);
      if (module.getAbsolutePath().indexOf(parseResource.getProject().getLocation().toOSString()) != 0) {
        ResourceHelper.getLinkedFile(parseResource.getProject(),module.getAbsolutePath(),true);
      }
    }
  }
  if (!rootModuleFound) {
    specStatus=IParseConstants.COULD_NOT_FIND_MODULE;
  }
  if (updateStorage) {
    Activator.getModuleDependencyStorage().put(parseResource.getName(),AdapterFactory.adaptModules(parseResource.getName(),userModules));
  }
  return new ParseResult(specStatus,moduleSpec,parseResource,parseErrors,semanticErrors);
}",0.9058736790366184
136084,"/** 
 * @see org.eclipse.core.resources.IResourceDeltaVisitor#visit(org.eclipse.core.resources.IResourceDelta)
 */
public boolean visit(IResourceDelta delta) throws CoreException {
  return false;
}","/** 
 * @see org.eclipse.core.resources.IResourceDeltaVisitor#visit(org.eclipse.core.resources.IResourceDelta)
 */
public boolean visit(IResourceDelta delta) throws CoreException {
  IResource resource=delta.getResource();
  if (resource.exists() && IResource.FILE == resource.getType()) {
    if (ResourceHelper.isModule(resource)) {
      if (spec == null) {
        modules.add(resource);
      }
 else       if (resource.getPersistentProperty(TLAParsingBuilderConstants.LAST_BUILT) == null) {
        if (spec.getStatus() < IParseConstants.PARSED && spec.getStatus() > IParseConstants.UNKNOWN) {
          modules.add(resource);
        }
      }
 else       if (Long.parseLong(resource.getPersistentProperty(TLAParsingBuilderConstants.LAST_BUILT)) < resource.getLocalTimeStamp() && (dependancyTable.containsKey(resource.getName()) || (spec.getStatus() < IParseConstants.PARSED && spec.getStatus() > IParseConstants.UNPARSED))) {
        modules.add(resource);
      }
    }
  }
  return true;
}",0.3124477861319966
136085,"public OutOfBuildSpecModulesGatheringDeltaVisitor(){
  String specRootFileName=spec.getRootFile().getName();
  List dependancyList=Activator.getModuleDependencyStorage().getListOfExtendedModules(specRootFileName);
  dependancyTable=new Hashtable(dependancyList.size());
  dependancyTable.put(specRootFileName,specRootFileName);
  Iterator iterator=dependancyList.iterator();
  while (iterator.hasNext()) {
    String moduleName=(String)iterator.next();
    dependancyTable.put(moduleName,moduleName);
  }
}","public OutOfBuildSpecModulesGatheringDeltaVisitor(){
  if (Activator.isSpecManagerInstantiated()) {
    spec=Activator.getSpecManager().getSpecLoaded();
    String specRootFileName=spec.getRootFile().getName();
    List dependancyList=Activator.getModuleDependencyStorage().getListOfExtendedModules(specRootFileName);
    dependancyTable=new Hashtable(dependancyList.size());
    dependancyTable.put(specRootFileName,specRootFileName);
    Iterator iterator=dependancyList.iterator();
    while (iterator.hasNext()) {
      String moduleName=(String)iterator.next();
      dependancyTable.put(moduleName,moduleName);
    }
  }
}",0.892416225749559
136086,"/** 
 * Calls SANY, that parses the root module. <br> <b>Note:</b> This method fills the error objects   {@link ParseSpecHandler#parseErrors} and{@link ParseSpecHandler#semanticErrors}. Call   {@link ParseSpecHandler#processParsingErrors(Spec)} to store thisinformation in the specification handle
 * @param doSemanticAnalysis if true, the semantical phase will be started
 * @param parseResource filename of the module to parse
 * @return status of parsing, one of the {@link IParseConstants} constants
 */
private ParseResult parseModule(IResource parseResource,boolean updateStorage){
  String moduleFilename=parseResource.getLocation().toOSString();
  int specStatus=0;
  Errors parseErrors=null;
  Errors semanticErrors=null;
  FilenameToStream resolver=new RCPNameToFileIStream(null);
  ToolIO.reset();
  ToolIO.setDefaultResolver(resolver);
  ToolIO.setMode(ToolIO.TOOL);
  SpecObj moduleSpec=new SpecObj(ResourceHelper.getModuleName(moduleFilename),resolver);
  PrintStream outputStr=ToolIO.out;
  try {
    SANY.frontEndInitialize(moduleSpec,outputStr);
    SANY.frontEndParse(moduleSpec,outputStr);
    SANY.frontEndSemanticAnalysis(moduleSpec,outputStr,true);
  }
 catch (  InitException e) {
    specStatus=IParseConstants.UNKNOWN_ERROR;
    return new ParseResult(specStatus,null,parseResource,parseErrors,semanticErrors);
  }
catch (  ParseException e) {
    specStatus=IParseConstants.SYNTAX_ERROR;
    parseErrors=moduleSpec.getParseErrors();
  }
catch (  SemanticException e) {
    specStatus=IParseConstants.SEMANTIC_ERROR;
  }
  if (specStatus > IParseConstants.SYNTAX_ERROR) {
    semanticErrors=moduleSpec.semanticErrors;
    if (semanticErrors != null) {
      if (semanticErrors.getNumMessages() > 0) {
        if (semanticErrors.isSuccess()) {
          specStatus=IParseConstants.SEMANTIC_WARNING;
        }
 else {
          specStatus=IParseConstants.SEMANTIC_ERROR;
        }
      }
    }
  }
  Vector userModules=new Vector();
  boolean rootModuleFound=false;
  Enumeration enumerate=moduleSpec.parseUnitContext.keys();
  while (enumerate.hasMoreElements()) {
    String moduleName=(String)enumerate.nextElement();
    ParseUnit parseUnit=(ParseUnit)moduleSpec.parseUnitContext.get(moduleName);
    String absoluteFileName=null;
    if (parseUnit.getNis() != null && parseUnit.getNis().sourceFile() != null) {
      absoluteFileName=parseUnit.getNis().sourceFile().getAbsolutePath();
    }
    if (absoluteFileName == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Module module=new Module(absoluteFileName);
    if (!module.isStandardModule() && updateStorage) {
      IResource moduleResource=ResourceHelper.getResourceByModuleName(moduleName);
      try {
        if (moduleResource != null) {
          moduleResource.setPersistentProperty(TLAParsingBuilderConstants.LAST_BUILT,String.valueOf(System.currentTimeMillis()));
        }
      }
 catch (      CoreException e) {
        Activator.logError(""String_Node_Str"",e);
      }
    }
    if (specStatus > IParseConstants.SEMANTIC_ERROR) {
      ExternalModuleTable.ExternalModuleTableEntry emt=(ExternalModuleTable.ExternalModuleTableEntry)moduleSpec.getExternalModuleTable().moduleHashTable.get(UniqueString.uniqueStringOf(module.getModuleName()));
      if (emt != null) {
        module.setNode(emt.getModuleNode());
      }
    }
    if (module.getModuleName().equals(ResourceHelper.getModuleName(moduleFilename))) {
      rootModuleFound=true;
      module.setRoot(true);
    }
    if (module.isStandardModule()) {
    }
 else {
      userModules.addElement(module);
      if (module.getAbsolutePath().indexOf(parseResource.getProject().getLocation().toOSString()) != 0) {
        ResourceHelper.getLinkedFile(parseResource.getProject(),module.getAbsolutePath(),true);
      }
    }
  }
  if (!rootModuleFound) {
    specStatus=IParseConstants.COULD_NOT_FIND_MODULE;
  }
  if (updateStorage) {
    Activator.getModuleDependencyStorage().put(parseResource.getName(),AdapterFactory.adaptModules(parseResource.getName(),userModules));
  }
  return new ParseResult(specStatus,moduleSpec,parseResource,parseErrors,semanticErrors);
}","/** 
 * Calls SANY, that parses the root module. <br> <b>Note:</b> This method fills the error objects   {@link ParseSpecHandler#parseErrors} and{@link ParseSpecHandler#semanticErrors}. Call   {@link ParseSpecHandler#processParsingErrors(Spec)} to store thisinformation in the specification handle
 * @param doSemanticAnalysis if true, the semantical phase will be started
 * @param parseResource filename of the module to parse
 * @return status of parsing, one of the {@link IParseConstants} constants
 */
private ParseResult parseModule(IResource parseResource,boolean updateStorage){
  String moduleFilename=parseResource.getLocation().toOSString();
  int specStatus=0;
  Errors parseErrors=null;
  Errors semanticErrors=null;
  FilenameToStream resolver=new RCPNameToFileIStream(null);
  ToolIO.reset();
  ToolIO.setDefaultResolver(resolver);
  ToolIO.setMode(ToolIO.TOOL);
  SpecObj moduleSpec=new SpecObj(ResourceHelper.getModuleName(moduleFilename),resolver);
  PrintStream outputStr=ToolIO.out;
  try {
    SANY.frontEndInitialize(moduleSpec,outputStr);
    SANY.frontEndParse(moduleSpec,outputStr);
    SANY.frontEndSemanticAnalysis(moduleSpec,outputStr,true);
  }
 catch (  InitException e) {
    specStatus=IParseConstants.UNKNOWN_ERROR;
    return new ParseResult(specStatus,null,parseResource,parseErrors,semanticErrors);
  }
catch (  ParseException e) {
    specStatus=IParseConstants.SYNTAX_ERROR;
    parseErrors=moduleSpec.getParseErrors();
  }
catch (  SemanticException e) {
    specStatus=IParseConstants.SEMANTIC_ERROR;
  }
  if (specStatus > IParseConstants.SYNTAX_ERROR) {
    semanticErrors=moduleSpec.semanticErrors;
    if (semanticErrors != null) {
      if (semanticErrors.getNumMessages() > 0) {
        if (semanticErrors.isSuccess()) {
          specStatus=IParseConstants.SEMANTIC_WARNING;
        }
 else {
          specStatus=IParseConstants.SEMANTIC_ERROR;
        }
      }
    }
  }
  Vector userModules=new Vector();
  boolean rootModuleFound=false;
  final Vector resourcesToTimeStamp=new Vector();
  Enumeration enumerate=moduleSpec.parseUnitContext.keys();
  while (enumerate.hasMoreElements()) {
    String moduleName=(String)enumerate.nextElement();
    ParseUnit parseUnit=(ParseUnit)moduleSpec.parseUnitContext.get(moduleName);
    String absoluteFileName=null;
    if (parseUnit.getNis() != null && parseUnit.getNis().sourceFile() != null) {
      absoluteFileName=parseUnit.getNis().sourceFile().getAbsolutePath();
    }
    if (absoluteFileName == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Module module=new Module(absoluteFileName);
    if (!module.isStandardModule() && updateStorage) {
      IResource moduleResource=ResourceHelper.getResourceByModuleName(moduleName);
      if (moduleResource != null && moduleResource.exists()) {
        resourcesToTimeStamp.add(moduleResource);
      }
    }
    if (specStatus > IParseConstants.SEMANTIC_ERROR) {
      ExternalModuleTable.ExternalModuleTableEntry emt=(ExternalModuleTable.ExternalModuleTableEntry)moduleSpec.getExternalModuleTable().moduleHashTable.get(UniqueString.uniqueStringOf(module.getModuleName()));
      if (emt != null) {
        module.setNode(emt.getModuleNode());
      }
    }
    if (module.getModuleName().equals(ResourceHelper.getModuleName(moduleFilename))) {
      rootModuleFound=true;
      module.setRoot(true);
    }
    if (module.isStandardModule()) {
    }
 else {
      userModules.addElement(module);
      if (module.getAbsolutePath().indexOf(parseResource.getProject().getLocation().toOSString()) != 0) {
        ResourceHelper.getLinkedFile(parseResource.getProject(),module.getAbsolutePath(),true);
      }
    }
  }
  try {
    ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        Iterator iterator=resourcesToTimeStamp.iterator();
        while (iterator.hasNext()) {
          IResource resource=(IResource)iterator.next();
          resource.setPersistentProperty(TLAParsingBuilderConstants.LAST_BUILT,String.valueOf(System.currentTimeMillis()));
        }
      }
    }
,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    Activator.logError(""String_Node_Str"",e);
  }
  if (!rootModuleFound) {
    specStatus=IParseConstants.COULD_NOT_FIND_MODULE;
  }
  if (updateStorage) {
    Activator.getModuleDependencyStorage().put(parseResource.getName(),AdapterFactory.adaptModules(parseResource.getName(),userModules));
  }
  return new ParseResult(specStatus,moduleSpec,parseResource,parseErrors,semanticErrors);
}",0.7545527430993013
136087,"public void resourceChanged(IResourceChangeEvent event){
  IResourceDelta delta=event.getDelta();
  ChangedSpecModulesGatheringDeltaVisitor visitor=new ChangedSpecModulesGatheringDeltaVisitor(){
    public IResource getModel(){
      return ModelEditor.this.getConfig().getFile();
    }
  }
;
  try {
    delta.accept(visitor);
    List modules=visitor.getModules();
    if (!modules.isEmpty()) {
      helper.resetSpecNames();
      UIHelper.runUIAsync(validateRunable);
      return;
    }
    if (visitor.isModelChanged()) {
      UIHelper.runUIAsync(new Runnable(){
        public void run(){
          for (int i=0; i < getPageCount(); i++) {
            BasicFormPage page=(BasicFormPage)pages.get(i);
            page.resetAllMessages(true);
          }
          handleProblemMarkers(true);
        }
      }
);
    }
  }
 catch (  CoreException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
    return;
  }
}","public void resourceChanged(IResourceChangeEvent event){
  IResourceDelta delta=event.getDelta();
  ChangedSpecModulesGatheringDeltaVisitor visitor=new ChangedSpecModulesGatheringDeltaVisitor(){
    public IResource getModel(){
      return ModelEditor.this.getConfig().getFile();
    }
  }
;
  try {
    delta.accept(visitor);
    List modules=visitor.getModules();
    if (!modules.isEmpty() || visitor.isModelChanged()) {
      helper.resetSpecNames();
      validateRunable.switchToErrorPage=visitor.isModelChanged();
      UIHelper.runUIAsync(validateRunable);
      return;
    }
  }
 catch (  CoreException e) {
    TLCUIActivator.logError(""String_Node_Str"",e);
    return;
  }
}",0.6972704714640199
136088,"/** 
 * Deletes messages (with bubbles) from the current page
 * @param applyChange iff set to <code>true</code> makes the changes visible
 */
public void resetAllMessages(boolean applyChange){
  getManagedForm().getMessageManager().setAutoUpdate(false);
  getManagedForm().getMessageManager().removeAllMessages();
  setComplete(true);
  getManagedForm().getMessageManager().setAutoUpdate(applyChange);
  System.out.println(""String_Node_Str"");
}","/** 
 * Deletes messages (with bubbles) from the current page
 * @param applyChange iff set to <code>true</code> makes the changes visible
 */
public void resetAllMessages(boolean applyChange){
  getManagedForm().getMessageManager().setAutoUpdate(false);
  getManagedForm().getMessageManager().removeAllMessages();
  setComplete(true);
  getManagedForm().getMessageManager().setAutoUpdate(applyChange);
}",0.9517078916372202
136089,"public void validate(){
  page.validate();
}","public void validate(){
  page.validatePage(false);
}",0.9072164948453608
136090,"public void validate(){
  page.validate();
}","public void validate(){
  page.validatePage(false);
}",0.9072164948453608
136091,"/** 
 * @see org.eclipse.ui.part.EditorPart#doSave(org.eclipse.core.runtime.IProgressMonitor) This method saves the model even if the spec is not parsed.  This is probably a good idea, since the user may want to quit in the middle of his work without losing what he's done to the model.
 */
public void doSave(IProgressMonitor monitor){
  this.commitPages(monitor,true);
  ModelHelper.doSaveConfigurationCopy(configurationCopy);
  ModelHelper.removeModelProblemMarkers(configurationCopy);
  boolean revalidate=TLCUIActivator.getDefault().getPreferenceStore().getBoolean(ITLCPreferenceConstants.I_TLC_REVALIDATE_ON_MODIFY);
  if (revalidate) {
    launchModel(TLCModelLaunchDelegate.MODE_GENERATE,false);
  }
  this.editorDirtyStateChanged();
}","/** 
 * This method saves the model even if the spec is not parsed.  This is probably a good idea, since the user may want to quit in the middle of his work without losing what he's done to the model.
 * @see org.eclipse.ui.part.EditorPart#doSave(org.eclipse.core.runtime.IProgressMonitor)
 */
public void doSave(IProgressMonitor monitor){
  this.commitPages(monitor,true);
  ModelHelper.doSaveConfigurationCopy(configurationCopy);
  ModelHelper.removeModelProblemMarkers(configurationCopy);
  boolean revalidate=TLCUIActivator.getDefault().getPreferenceStore().getBoolean(ITLCPreferenceConstants.I_TLC_REVALIDATE_ON_MODIFY);
  if (revalidate) {
    launchModel(TLCModelLaunchDelegate.MODE_GENERATE,false);
  }
  this.editorDirtyStateChanged();
}",0.7387508394895903
136092,"/** 
 * Simple editor constructor
 */
public ModelEditor(){
  helper=new SemanticHelper();
  pagesToAdd=new BasicFormPage[]{new MainModelPage(this),new AdvancedModelPage(this),new ResultPage(this)};
  System.out.println(""String_Node_Str"");
}","/** 
 * Simple editor constructor
 */
public ModelEditor(){
  helper=new SemanticHelper();
  pagesToAdd=new BasicFormPage[]{new MainModelPage(this),new AdvancedModelPage(this),new ResultPage(this)};
}",0.90702947845805
136093,"/** 
 * Save data back to config
 */
public void commit(boolean onSave){
  System.out.println(""String_Node_Str"");
  boolean isMCMode=mcOption.getSelection();
  getConfig().setAttribute(LAUNCH_MC_MODE,isMCMode);
  boolean isDFIDMode=dfidOption.getSelection();
  getConfig().setAttribute(LAUNCH_DFID_MODE,isDFIDMode);
  int dfidDepth=Integer.parseInt(dfidDepthText.getText());
  int simuDepth=Integer.parseInt(simuDepthText.getText());
  int simuAril=LAUNCH_SIMU_ARIL_DEFAULT;
  int simuSeed=LAUNCH_SIMU_SEED_DEFAULT;
  if (!""String_Node_Str"".equals(simuArilText.getText())) {
    simuAril=Integer.parseInt(simuArilText.getText());
  }
  if (!""String_Node_Str"".equals(simuSeedText.getText())) {
    simuSeed=Integer.parseInt(simuSeedText.getText());
  }
  getConfig().setAttribute(LAUNCH_DFID_DEPTH,dfidDepth);
  getConfig().setAttribute(LAUNCH_SIMU_DEPTH,simuDepth);
  getConfig().setAttribute(LAUNCH_SIMU_SEED,simuSeed);
  getConfig().setAttribute(LAUNCH_SIMU_ARIL,simuAril);
  List definitions=FormHelper.getSerializedInput(definitionsTable);
  getConfig().setAttribute(MODEL_PARAMETER_DEFINITIONS,definitions);
  String newDefinitions=FormHelper.trimTrailingSpaces(newDefinitionsSource.getDocument().get());
  getConfig().setAttribute(MODEL_PARAMETER_NEW_DEFINITIONS,newDefinitions);
  String modelValues=FormHelper.trimTrailingSpaces(modelValuesSource.getDocument().get());
  TypedSet modelValuesSet=TypedSet.parseSet(modelValues);
  getConfig().setAttribute(MODEL_PARAMETER_MODEL_VALUES,modelValuesSet.toString());
  String constraintFormula=FormHelper.trimTrailingSpaces(constraintSource.getDocument().get());
  getConfig().setAttribute(MODEL_PARAMETER_CONSTRAINT,constraintFormula);
  String viewFormula=FormHelper.trimTrailingSpaces(viewSource.getDocument().get());
  getConfig().setAttribute(LAUNCH_VIEW,viewFormula);
  String actionConstraintFormula=FormHelper.trimTrailingSpaces(actionConstraintSource.getDocument().get());
  getConfig().setAttribute(MODEL_PARAMETER_ACTION_CONSTRAINT,actionConstraintFormula);
  super.commit(onSave);
}","/** 
 * Save data back to config
 */
public void commit(boolean onSave){
  boolean isMCMode=mcOption.getSelection();
  getConfig().setAttribute(LAUNCH_MC_MODE,isMCMode);
  boolean isDFIDMode=dfidOption.getSelection();
  getConfig().setAttribute(LAUNCH_DFID_MODE,isDFIDMode);
  int dfidDepth=Integer.parseInt(dfidDepthText.getText());
  int simuDepth=Integer.parseInt(simuDepthText.getText());
  int simuAril=LAUNCH_SIMU_ARIL_DEFAULT;
  int simuSeed=LAUNCH_SIMU_SEED_DEFAULT;
  if (!""String_Node_Str"".equals(simuArilText.getText())) {
    simuAril=Integer.parseInt(simuArilText.getText());
  }
  if (!""String_Node_Str"".equals(simuSeedText.getText())) {
    simuSeed=Integer.parseInt(simuSeedText.getText());
  }
  getConfig().setAttribute(LAUNCH_DFID_DEPTH,dfidDepth);
  getConfig().setAttribute(LAUNCH_SIMU_DEPTH,simuDepth);
  getConfig().setAttribute(LAUNCH_SIMU_SEED,simuSeed);
  getConfig().setAttribute(LAUNCH_SIMU_ARIL,simuAril);
  List definitions=FormHelper.getSerializedInput(definitionsTable);
  getConfig().setAttribute(MODEL_PARAMETER_DEFINITIONS,definitions);
  String newDefinitions=FormHelper.trimTrailingSpaces(newDefinitionsSource.getDocument().get());
  getConfig().setAttribute(MODEL_PARAMETER_NEW_DEFINITIONS,newDefinitions);
  String modelValues=FormHelper.trimTrailingSpaces(modelValuesSource.getDocument().get());
  TypedSet modelValuesSet=TypedSet.parseSet(modelValues);
  getConfig().setAttribute(MODEL_PARAMETER_MODEL_VALUES,modelValuesSet.toString());
  String constraintFormula=FormHelper.trimTrailingSpaces(constraintSource.getDocument().get());
  getConfig().setAttribute(MODEL_PARAMETER_CONSTRAINT,constraintFormula);
  String viewFormula=FormHelper.trimTrailingSpaces(viewSource.getDocument().get());
  getConfig().setAttribute(LAUNCH_VIEW,viewFormula);
  String actionConstraintFormula=FormHelper.trimTrailingSpaces(actionConstraintSource.getDocument().get());
  getConfig().setAttribute(MODEL_PARAMETER_ACTION_CONSTRAINT,actionConstraintFormula);
  super.commit(onSave);
}",0.9898790422117996
136094,"public void validate(){
  if (getManagedForm() == null) {
    return;
  }
  countXX++;
  System.out.println(""String_Node_Str"" + countXX);
  if (countXX == 60000) {
    countXX++;
    ModelEditor ourFavoriteEditor=(ModelEditor)this.getEditor();
    ourFavoriteEditor.removePage(0);
    System.out.println(""String_Node_Str"");
    BasicFormPage newPage=new MainModelPage(ourFavoriteEditor);
    try {
      ourFavoriteEditor.addPage(0,newPage);
      ourFavoriteEditor.setUpPage(newPage,0);
    }
 catch (    PartInitException e) {
      TLCUIActivator.logError(""String_Node_Str"",e);
      e.printStackTrace();
    }
    ourFavoriteEditor.setActivePage(newPage.getId());
    newPage.setFocus();
    System.out.println(""String_Node_Str"");
  }
  DataBindingManager dm=getDataBindingManager();
  IMessageManager mm=getManagedForm().getMessageManager();
  resetAllMessages(false);
  ModuleNode rootModuleNode=SemanticHelper.getRootModuleNode();
  getLookupHelper().resetModelNames(this);
  List constants=(List)constantTable.getInput();
  if (rootModuleNode != null) {
    List toDelete=ModelHelper.mergeConstantLists(constants,ModelHelper.createConstantsList(rootModuleNode));
    if (!toDelete.isEmpty()) {
      SectionPart constantSection=dm.getSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
      if (constantSection != null) {
        constantSection.markDirty();
      }
    }
    constantTable.setInput(constants);
  }
  boolean symmetryUsed=false;
  for (int i=0; i < constants.size(); i++) {
    Assignment constant=(Assignment)constants.get(i);
    List values=Arrays.asList(constant.getParams());
    validateUsage(MODEL_PARAMETER_CONSTANTS,values,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    validateId(MODEL_PARAMETER_CONSTANTS,values,""String_Node_Str"",""String_Node_Str"");
    if (constant.getRight() == null || EMPTY_STRING.equals(constant.getRight())) {
      mm.addMessage(constant.getLabel(),""String_Node_Str"" + constant.getLabel(),constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
    }
 else {
      if (constant.isSetOfModelValues()) {
        if (symmetryUsed && constant.isSymmetricalSet()) {
          mm.addMessage(constant.getLabel(),""String_Node_Str"",constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
          setComplete(false);
          expandSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
        }
 else {
          if (constant.isSymmetricalSet()) {
            symmetryUsed=true;
          }
        }
        TypedSet modelValuesSet=TypedSet.parseSet(constant.getRight());
        if (modelValuesSet.getValueCount() > 0) {
          List mvList=modelValuesSet.getValuesAsList();
          validateUsage(MODEL_PARAMETER_CONSTANTS,mvList,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
          validateId(MODEL_PARAMETER_CONSTANTS,mvList,""String_Node_Str"",""String_Node_Str"");
          Control widget=UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS));
          for (int j=0; j < mvList.size(); j++) {
            String value=(String)mvList.get(j);
            if (SemanticHelper.isConfigFileKeyword(value)) {
              mm.addMessage(value,""String_Node_Str"" + value + ""String_Node_Str"",constant,IMessageProvider.ERROR,widget);
            }
          }
        }
      }
    }
    if (SemanticHelper.isConfigFileKeyword(constant.getLabel())) {
      mm.addMessage(constant.getLabel(),""String_Node_Str"" + constant.getLabel() + ""String_Node_Str"",constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
    }
  }
  String numberOfworkers=workers.getText();
  try {
    int number=Integer.parseInt(numberOfworkers);
    if (number <= 0) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
      setComplete(false);
      expandSection(SEC_HOW_TO_RUN);
    }
 else {
      if (number > Runtime.getRuntime().availableProcessors()) {
        mm.addMessage(""String_Node_Str"",""String_Node_Str"" + number + ""String_Node_Str""+ Runtime.getRuntime().availableProcessors()+ ""String_Node_Str"",null,IMessageProvider.WARNING,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
        expandSection(SEC_HOW_TO_RUN);
      }
    }
  }
 catch (  NumberFormatException e) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
    setComplete(false);
    expandSection(SEC_HOW_TO_RUN);
  }
  updateCheckpoints();
  if (checkpointButton.getSelection()) {
    if (EMPTY_STRING.equals(checkpointIdText.getText())) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_RECOVER)));
      setComplete(false);
      expandSection(SEC_HOW_TO_RUN);
    }
  }
  if (rootModuleNode != null) {
    if (rootModuleNode.getVariableDecls().length == 0) {
      setHasVariables(false);
      setSpecSelection(MODEL_BEHAVIOR_TYPE_NO_SPEC);
    }
 else {
      setHasVariables(true);
      if (noSpecRadio.getSelection()) {
        setSpecSelection(MODEL_BEHAVIOR_TYPE_DEFAULT);
      }
    }
  }
  if (closedFormulaRadio.getSelection() && specSource.getDocument().get().trim().equals(""String_Node_Str"")) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_CLOSED_SPECIFICATION)));
    setComplete(false);
    expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_CLOSED_SPECIFICATION));
  }
 else   if (initNextFairnessRadio.getSelection()) {
    String init=initFormulaSource.getDocument().get().trim();
    String next=nextFormulaSource.getDocument().get().trim();
    if (init.equals(""String_Node_Str"")) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT));
    }
    if (next.equals(""String_Node_Str"")) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT));
    }
  }
  mm.setAutoUpdate(true);
  super.validate();
}","public void validate(){
  if (getManagedForm() == null) {
    return;
  }
  countXX++;
  System.out.println(""String_Node_Str"" + countXX);
  if (countXX == 60000) {
    countXX++;
    ModelEditor ourFavoriteEditor=(ModelEditor)this.getEditor();
    ourFavoriteEditor.removePage(0);
    System.out.println(""String_Node_Str"");
    MainModelPage newPage=new MainModelPage(ourFavoriteEditor);
    try {
      ourFavoriteEditor.addPage(0,newPage);
      ourFavoriteEditor.setUpPage(newPage,0);
    }
 catch (    PartInitException e) {
      TLCUIActivator.logError(""String_Node_Str"",e);
      e.printStackTrace();
    }
    ourFavoriteEditor.setActivePage(newPage.getId());
    newPage.setFocus();
    System.out.println(""String_Node_Str"");
  }
  DataBindingManager dm=getDataBindingManager();
  IMessageManager mm=getManagedForm().getMessageManager();
  resetAllMessages(false);
  ModuleNode rootModuleNode=SemanticHelper.getRootModuleNode();
  getLookupHelper().resetModelNames(this);
  List constants=(List)constantTable.getInput();
  if (rootModuleNode != null) {
    List toDelete=ModelHelper.mergeConstantLists(constants,ModelHelper.createConstantsList(rootModuleNode));
    if (!toDelete.isEmpty()) {
      SectionPart constantSection=dm.getSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
      if (constantSection != null) {
        constantSection.markDirty();
      }
    }
    constantTable.setInput(constants);
  }
  boolean symmetryUsed=false;
  for (int i=0; i < constants.size(); i++) {
    Assignment constant=(Assignment)constants.get(i);
    List values=Arrays.asList(constant.getParams());
    validateUsage(MODEL_PARAMETER_CONSTANTS,values,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    validateId(MODEL_PARAMETER_CONSTANTS,values,""String_Node_Str"",""String_Node_Str"");
    if (constant.getRight() == null || EMPTY_STRING.equals(constant.getRight())) {
      mm.addMessage(constant.getLabel(),""String_Node_Str"" + constant.getLabel(),constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
    }
 else {
      if (constant.isSetOfModelValues()) {
        if (symmetryUsed && constant.isSymmetricalSet()) {
          mm.addMessage(constant.getLabel(),""String_Node_Str"",constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
          setComplete(false);
          expandSection(dm.getSectionForAttribute(MODEL_PARAMETER_CONSTANTS));
        }
 else {
          if (constant.isSymmetricalSet()) {
            symmetryUsed=true;
          }
        }
        TypedSet modelValuesSet=TypedSet.parseSet(constant.getRight());
        if (modelValuesSet.getValueCount() > 0) {
          List mvList=modelValuesSet.getValuesAsList();
          validateUsage(MODEL_PARAMETER_CONSTANTS,mvList,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
          validateId(MODEL_PARAMETER_CONSTANTS,mvList,""String_Node_Str"",""String_Node_Str"");
          Control widget=UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS));
          for (int j=0; j < mvList.size(); j++) {
            String value=(String)mvList.get(j);
            if (SemanticHelper.isConfigFileKeyword(value)) {
              mm.addMessage(value,""String_Node_Str"" + value + ""String_Node_Str"",constant,IMessageProvider.ERROR,widget);
            }
          }
        }
      }
    }
    if (SemanticHelper.isConfigFileKeyword(constant.getLabel())) {
      mm.addMessage(constant.getLabel(),""String_Node_Str"" + constant.getLabel() + ""String_Node_Str"",constant,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_PARAMETER_CONSTANTS)));
    }
  }
  String numberOfworkers=workers.getText();
  try {
    int number=Integer.parseInt(numberOfworkers);
    if (number <= 0) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
      setComplete(false);
      expandSection(SEC_HOW_TO_RUN);
    }
 else {
      if (number > Runtime.getRuntime().availableProcessors()) {
        mm.addMessage(""String_Node_Str"",""String_Node_Str"" + number + ""String_Node_Str""+ Runtime.getRuntime().availableProcessors()+ ""String_Node_Str"",null,IMessageProvider.WARNING,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
        expandSection(SEC_HOW_TO_RUN);
      }
    }
  }
 catch (  NumberFormatException e) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_NUMBER_OF_WORKERS)));
    setComplete(false);
    expandSection(SEC_HOW_TO_RUN);
  }
  updateCheckpoints();
  if (checkpointButton.getSelection()) {
    if (EMPTY_STRING.equals(checkpointIdText.getText())) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(LAUNCH_RECOVER)));
      setComplete(false);
      expandSection(SEC_HOW_TO_RUN);
    }
  }
  if (rootModuleNode != null) {
    if (rootModuleNode.getVariableDecls().length == 0) {
      setHasVariables(false);
      setSpecSelection(MODEL_BEHAVIOR_TYPE_NO_SPEC);
    }
 else {
      setHasVariables(true);
      if (noSpecRadio.getSelection()) {
        setSpecSelection(MODEL_BEHAVIOR_TYPE_DEFAULT);
      }
    }
  }
  if (closedFormulaRadio.getSelection() && specSource.getDocument().get().trim().equals(""String_Node_Str"")) {
    mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_CLOSED_SPECIFICATION)));
    setComplete(false);
    expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_CLOSED_SPECIFICATION));
  }
 else   if (initNextFairnessRadio.getSelection()) {
    String init=initFormulaSource.getDocument().get().trim();
    String next=nextFormulaSource.getDocument().get().trim();
    if (init.equals(""String_Node_Str"")) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_INIT));
    }
    if (next.equals(""String_Node_Str"")) {
      mm.addMessage(""String_Node_Str"",""String_Node_Str"",null,IMessageProvider.ERROR,UIHelper.getWidget(dm.getAttributeControl(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT)));
      setComplete(false);
      expandSection(dm.getSectionForAttribute(MODEL_BEHAVIOR_SEPARATE_SPECIFICATION_NEXT));
    }
  }
  mm.setAutoUpdate(true);
  super.validate();
}",0.99866031557011
136095,"/** 
 * Create a list of overrides. If the override is not in the spec's root module, then the config file will have     A <- [M] id . This means that A is defined in module M, and its definition is being overriden in the spec root module which is dependent upon M. The following is an example from Leslie Lamport that explains the code. Let's suppose we have ------ MODULE MA ---- IB == INSTANCE MB ... ================= ------ MODULE MB ---- IC == INSTANCE MC ... ================= ----- MODULE MC ------ Foo == ... ====================== where MA is the spec's root module.  The user will see in the override menu and override IB!IC!Foo Let OD be the OpDefNode for IB!IC!Foo in the semantic tree for module MA.  Then OD.getSource() is the OpDefNode for Foo in the semantic tree of module MC.  So we have OD.getSource().getOriginallyDefinedInModuleNode()  is the module node for MC, and OD.getSource().getOriginallyDefinedInModuleNode().getName().toString() = ""MC"" OD.getName().toString() = ""Foo"" and the config file should contain Foo <-[MC] ...
 * @param overrides
 * @param string
 * @return
 */
public static List createOverridesContent(List overrides,String labelingScheme){
  Vector resultContent=new Vector(overrides.size());
  String[] content;
  String id;
  Assignment formula;
  SpecObj specObj=ToolboxHandle.getCurrentSpec().getValidRootModule();
  OpDefNode[] opDefNodes=specObj.getExternalModuleTable().getRootModule().getOpDefs();
  Hashtable nodeTable=new Hashtable(opDefNodes.length);
  for (int j=0; j < opDefNodes.length; j++) {
    String key=opDefNodes[j].getName().toString();
    nodeTable.put(key,opDefNodes[j]);
  }
  for (int i=0; i < overrides.size(); i++) {
    id=getValidIdentifier(labelingScheme);
    formula=((Assignment)overrides.get(i));
    OpDefNode defNode=null;
    if (nodeTable.containsKey(formula.getLabel())) {
      defNode=(OpDefNode)nodeTable.get(formula.getLabel());
    }
    if (defNode == null) {
      content=null;
    }
 else {
      OpDefNode source=defNode.getSource();
      if (source == null) {
        content=new String[]{formula.getLabel() + ARROW + id,formula.getParametrizedLabel(id) + DEFINES_CR + formula.getRight()};
      }
 else       if (source.getSource() == source) {
        content=new String[]{source.getName().toString() + ARROW + ""String_Node_Str""+ source.getOriginallyDefinedInModuleNode().getName().toString()+ ""String_Node_Str""+ id,formula.getParametrizedLabel(id) + DEFINES_CR + formula.getRight()};
      }
 else {
        content=null;
      }
    }
    resultContent.add(content);
  }
  return resultContent;
}","/** 
 * Create a list of overrides. If the override is not in the spec's root module, then the config file will have     A <- [M] id . This means that A is defined in module M, and its definition is being overriden in the spec root module which is dependent upon M. The following is an example from Leslie Lamport that explains the code. Let's suppose we have ------ MODULE MA ---- IB == INSTANCE MB ... ================= ------ MODULE MB ---- IC == INSTANCE MC ... ================= ----- MODULE MC ------ Foo == ... ====================== where MA is the spec's root module.  The user will see in the override menu and override IB!IC!Foo Let OD be the OpDefNode for IB!IC!Foo in the semantic tree for module MA.  Then OD.getSource() is the OpDefNode for Foo in the semantic tree of module MC.  So we have OD.getSource().getOriginallyDefinedInModuleNode()  is the module node for MC, and OD.getSource().getOriginallyDefinedInModuleNode().getName().toString() = ""MC"" OD.getName().toString() = ""Foo"" and the config file should contain Foo <-[MC] ...
 * @param overrides
 * @param string
 * @return
 */
public static List createOverridesContent(List overrides,String labelingScheme){
  Vector resultContent=new Vector(overrides.size());
  String[] content;
  String id;
  Assignment formula;
  SpecObj specObj=ToolboxHandle.getCurrentSpec().getValidRootModule();
  OpDefNode[] opDefNodes=specObj.getExternalModuleTable().getRootModule().getOpDefs();
  Hashtable nodeTable=new Hashtable(opDefNodes.length);
  for (int j=0; j < opDefNodes.length; j++) {
    String key=opDefNodes[j].getName().toString();
    nodeTable.put(key,opDefNodes[j]);
  }
  for (int i=0; i < overrides.size(); i++) {
    id=getValidIdentifier(labelingScheme);
    formula=((Assignment)overrides.get(i));
    OpDefNode defNode=null;
    if (nodeTable.containsKey(formula.getLabel())) {
      defNode=(OpDefNode)nodeTable.get(formula.getLabel());
    }
    if (defNode == null) {
      content=null;
    }
 else {
      OpDefNode source=defNode.getSource();
      if (source == defNode) {
        content=new String[]{formula.getLabel() + ARROW + id,formula.getParametrizedLabel(id) + DEFINES_CR + formula.getRight()};
      }
 else       if (source.getSource() == source) {
        content=new String[]{source.getName().toString() + ARROW + ""String_Node_Str""+ source.getOriginallyDefinedInModuleNode().getName().toString()+ ""String_Node_Str""+ id,formula.getParametrizedLabel(id) + DEFINES_CR + formula.getRight()};
      }
 else {
        content=null;
      }
    }
    resultContent.add(content);
  }
  return resultContent;
}",0.9978817639129598
136096,"/** 
 * @param name
 */
public TranslatorJob(IResource fileToBuild){
  super(""String_Node_Str"");
  this.translator=new Translator();
  this.fileToBuild=fileToBuild;
  this.callParams=new Vector();
  Activator.logDebug(""String_Node_Str"" + fileToBuild.getLocation().toOSString());
  boolean hasPcalAlg=false;
  String[] params;
  try {
    hasPcalAlg=((Boolean)fileToBuild.getSessionProperty(ResourceHelper.getQName(IPreferenceConstants.CONTAINS_PCAL_ALGORITHM))).booleanValue();
    String paramString=((String)fileToBuild.getProject().getPersistentProperty(ResourceHelper.getQName(IPreferenceConstants.PCAL_CAL_PARAMS)));
    if (paramString != null) {
      params=paramString.split(""String_Node_Str"");
    }
 else {
      params=new String[0];
    }
  }
 catch (  CoreException e1) {
    e1.printStackTrace();
    params=new String[0];
  }
  if (!hasPcalAlg) {
    Activator.logDebug(""String_Node_Str"");
  }
 else {
    Activator.logDebug(""String_Node_Str"");
  }
  for (int i=0; i < params.length; i++) {
    if (params[i] != null && !params[i].equals(""String_Node_Str"")) {
      callParams.add(params[i]);
    }
  }
  callParams.add(fileToBuild.getLocation().toOSString());
}","/** 
 * @param name
 */
public TranslatorJob(IResource fileToBuild){
  super(""String_Node_Str"");
  this.translator=new Translator();
  this.fileToBuild=fileToBuild;
  this.callParams=new Vector();
  Activator.logDebug(""String_Node_Str"" + fileToBuild.getLocation().toOSString());
  boolean hasPcalAlg=false;
  String[] params;
  Object prop;
  try {
    prop=fileToBuild.getSessionProperty(ResourceHelper.getQName(IPreferenceConstants.CONTAINS_PCAL_ALGORITHM));
    if (prop != null) {
      hasPcalAlg=((Boolean)prop).booleanValue();
    }
    IPreferenceStore projectPreferenceStore=PreferenceStoreHelper.getProjectPreferenceStore(fileToBuild.getProject());
    String paramString=projectPreferenceStore.getString(IPreferenceConstants.PCAL_CAL_PARAMS);
    if (paramString != null) {
      params=paramString.split(""String_Node_Str"");
    }
 else {
      params=new String[0];
    }
  }
 catch (  CoreException e1) {
    Activator.logError(""String_Node_Str"",e1);
    params=new String[0];
  }
  if (!hasPcalAlg) {
    Activator.logDebug(""String_Node_Str"");
  }
 else {
    Activator.logDebug(""String_Node_Str"");
  }
  for (int i=0; i < params.length; i++) {
    if (params[i] != null && !params[i].equals(""String_Node_Str"")) {
      callParams.add(params[i]);
    }
  }
  callParams.add(fileToBuild.getLocation().toOSString());
}",0.8484848484848485
136097,"/** 
 * Retrieves preference store with the project scope
 * @return a store instance
 */
public static IPreferenceStore getProjectPreferenceStore(IProject project){
  ProjectScope scope=new ProjectScope(project);
  ScopedPreferenceStore store=new ScopedPreferenceStore(scope,Activator.getDefault().getBundle().getSymbolicName());
  return store;
}","/** 
 * Retrieves preference store with the project scope
 * @return a store instance
 */
public static IPreferenceStore getProjectPreferenceStore(IProject project){
  ProjectScope scope=new ProjectScope(project);
  ScopedPreferenceStore store=new ScopedPreferenceStore(scope,Activator.PLUGIN_ID);
  return store;
}",0.9260935143288084
136098,"/** 
 * Reads the model parameters and constructs the corresponding command line arguments
 * @return string array with arguments
 * @throws CoreException
 */
public String[] constructProgramArguments() throws CoreException {
  Vector arguments=new Vector();
  ILaunchConfiguration config=launch.getLaunchConfiguration();
  boolean checkDeadlock=config.getAttribute(IModelConfigurationConstants.MODEL_CORRECTNESS_CHECK_DEADLOCK,IModelConfigurationDefaults.MODEL_CORRECTNESS_CHECK_DEADLOCK_DEFAULT);
  if (checkDeadlock) {
    arguments.add(""String_Node_Str"");
  }
  arguments.add(""String_Node_Str"");
  arguments.add(String.valueOf(CHECKPOINT_INTERVAL));
  boolean runAsModelCheck=config.getAttribute(IModelConfigurationConstants.LAUNCH_MC_MODE,IModelConfigurationDefaults.LAUNCH_MC_MODE_DEFAULT);
  if (runAsModelCheck) {
    boolean isDepthFirst=config.getAttribute(IModelConfigurationConstants.LAUNCH_DFID_MODE,IModelConfigurationDefaults.LAUNCH_DFID_MODE_DEFAULT);
    if (isDepthFirst) {
      int dfidDepth=config.getAttribute(IModelConfigurationConstants.LAUNCH_DFID_DEPTH,IModelConfigurationDefaults.LAUNCH_DFID_DEPTH_DEFAULT);
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(dfidDepth));
    }
  }
 else {
    arguments.add(""String_Node_Str"");
    int traceDepth=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_DEPTH,IModelConfigurationDefaults.LAUNCH_SIMU_DEPTH_DEFAULT);
    if (traceDepth != IModelConfigurationDefaults.LAUNCH_SIMU_DEPTH_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(traceDepth));
    }
    int aril=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_ARIL,IModelConfigurationDefaults.LAUNCH_SIMU_ARIL_DEFAULT);
    int seed=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_SEED,IModelConfigurationDefaults.LAUNCH_SIMU_SEED_DEFAULT);
    if (aril != IModelConfigurationDefaults.LAUNCH_SIMU_ARIL_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(aril));
    }
    if (seed != IModelConfigurationDefaults.LAUNCH_SIMU_SEED_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(seed));
    }
  }
  boolean recover=config.getAttribute(IModelConfigurationConstants.LAUNCH_RECOVER,IModelConfigurationDefaults.LAUNCH_RECOVER_DEFAULT);
  if (recover) {
    IResource[] checkpoints=ModelHelper.getCheckpoints(config);
    if (checkpoints.length > 0) {
      arguments.add(""String_Node_Str"");
      arguments.add(checkpoints[0].getName());
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.add(cfgFile.getName());
  arguments.add(""String_Node_Str"");
  arguments.add(String.valueOf(COVERAGE_INTERVAL));
  arguments.add(""String_Node_Str"");
  arguments.add(String.valueOf(workers));
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  arguments.add(launchDir.getLocation().toOSString());
  arguments.add(ResourceHelper.getModuleName(rootModule));
  return (String[])arguments.toArray(new String[arguments.size()]);
}","/** 
 * Reads the model parameters and constructs the corresponding command line arguments
 * @return string array with arguments
 * @throws CoreException
 */
public String[] constructProgramArguments() throws CoreException {
  Vector arguments=new Vector();
  ILaunchConfiguration config=launch.getLaunchConfiguration();
  boolean checkDeadlock=config.getAttribute(IModelConfigurationConstants.MODEL_CORRECTNESS_CHECK_DEADLOCK,IModelConfigurationDefaults.MODEL_CORRECTNESS_CHECK_DEADLOCK_DEFAULT);
  if (!checkDeadlock) {
    arguments.add(""String_Node_Str"");
  }
  arguments.add(""String_Node_Str"");
  arguments.add(String.valueOf(CHECKPOINT_INTERVAL));
  boolean runAsModelCheck=config.getAttribute(IModelConfigurationConstants.LAUNCH_MC_MODE,IModelConfigurationDefaults.LAUNCH_MC_MODE_DEFAULT);
  if (runAsModelCheck) {
    boolean isDepthFirst=config.getAttribute(IModelConfigurationConstants.LAUNCH_DFID_MODE,IModelConfigurationDefaults.LAUNCH_DFID_MODE_DEFAULT);
    if (isDepthFirst) {
      int dfidDepth=config.getAttribute(IModelConfigurationConstants.LAUNCH_DFID_DEPTH,IModelConfigurationDefaults.LAUNCH_DFID_DEPTH_DEFAULT);
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(dfidDepth));
    }
  }
 else {
    arguments.add(""String_Node_Str"");
    int traceDepth=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_DEPTH,IModelConfigurationDefaults.LAUNCH_SIMU_DEPTH_DEFAULT);
    if (traceDepth != IModelConfigurationDefaults.LAUNCH_SIMU_DEPTH_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(traceDepth));
    }
    int aril=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_ARIL,IModelConfigurationDefaults.LAUNCH_SIMU_ARIL_DEFAULT);
    int seed=config.getAttribute(IModelConfigurationConstants.LAUNCH_SIMU_SEED,IModelConfigurationDefaults.LAUNCH_SIMU_SEED_DEFAULT);
    if (aril != IModelConfigurationDefaults.LAUNCH_SIMU_ARIL_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(aril));
    }
    if (seed != IModelConfigurationDefaults.LAUNCH_SIMU_SEED_DEFAULT) {
      arguments.add(""String_Node_Str"");
      arguments.add(String.valueOf(seed));
    }
  }
  boolean recover=config.getAttribute(IModelConfigurationConstants.LAUNCH_RECOVER,IModelConfigurationDefaults.LAUNCH_RECOVER_DEFAULT);
  if (recover) {
    IResource[] checkpoints=ModelHelper.getCheckpoints(config);
    if (checkpoints.length > 0) {
      arguments.add(""String_Node_Str"");
      arguments.add(checkpoints[0].getName());
    }
  }
  arguments.add(""String_Node_Str"");
  arguments.add(cfgFile.getName());
  arguments.add(""String_Node_Str"");
  arguments.add(String.valueOf(COVERAGE_INTERVAL));
  arguments.add(""String_Node_Str"");
  arguments.add(String.valueOf(workers));
  arguments.add(""String_Node_Str"");
  arguments.add(""String_Node_Str"");
  arguments.add(launchDir.getLocation().toOSString());
  arguments.add(ResourceHelper.getModuleName(rootModule));
  return (String[])arguments.toArray(new String[arguments.size()]);
}",0.9998349562634098
136099,"/** 
 * Compute the set of the next states.  For each next state, check if it is a valid state, if the invariants are satisfied, and if it satisfies the constraints. It also adds the states that have not been done in nextStates.  Return true if it finds a leaf successor of curState.
 */
public final boolean doNext(TLCState curState,long cfp,boolean isLeaf,ObjLongTable counts,StateVec states,LongVec fps) throws Throwable {
  boolean deadLocked=true;
  TLCState succState=null;
  StateVec liveNextStates=null;
  LongVec liveNextFPs=null;
  if (this.checkLiveness && isLeaf) {
    liveNextStates=new StateVec(2);
    liveNextFPs=new LongVec(2);
  }
  try {
    int k=0;
    boolean allSuccDone=true;
    boolean allSuccNonLeaf=true;
    for (int i=0; i < this.actions.length; i++) {
      StateVec nextStates=this.tool.getNextStates(this.actions[i],curState);
      int sz=nextStates.size();
      this.incNumOfGenStates(sz);
      deadLocked=deadLocked && (sz == 0);
      for (int j=0; j < sz; j++) {
        succState=nextStates.elementAt(j);
        if (!this.tool.isGoodState(succState)) {
          if (this.setErrState(curState,succState,false)) {
            this.printTrace(EC.TLC_STATE_NOT_COMPLETELY_SPECIFIED_NEXT,null,curState,succState);
synchronized (this) {
              this.notify();
            }
          }
          return allSuccNonLeaf;
        }
        if (TLCGlobals.coverageInterval >= 0) {
          ((TLCStateMutSource)succState).addCounts(counts);
        }
        boolean inModel=(this.tool.isInModel(succState) && this.tool.isInActions(curState,succState));
        int status=FPIntSet.NEW;
        if (inModel) {
          long fp=succState.fingerPrint();
          status=this.theFPSet.setStatus(fp,FPIntSet.NEW);
          allSuccDone=allSuccDone && FPIntSet.isDone(status);
          allSuccNonLeaf=allSuccNonLeaf && !FPIntSet.isLeaf(status);
          if (status == FPIntSet.NEW && this.allStateWriter != null) {
            this.allStateWriter.writeState(succState);
          }
          if (!FPIntSet.isCompleted(status)) {
            states.addElement(succState);
            fps.addElement(fp);
          }
          if (this.checkLiveness && isLeaf) {
            liveNextStates.addElement(succState);
            liveNextFPs.addElement(fp);
          }
        }
        if (status == FPIntSet.NEW) {
          try {
            int len=this.invariants.length;
            for (k=0; k < len; k++) {
              if (!tool.isValid(this.invariants[k],succState)) {
synchronized (this) {
                  if (TLCGlobals.continuation) {
                    this.printTrace(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,new String[]{this.tool.getInvNames()[k]},curState,succState);
                    break;
                  }
 else {
                    if (this.setErrState(curState,succState,false)) {
                      this.printTrace(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,new String[]{this.tool.getInvNames()[k]},curState,succState);
                      this.notify();
                    }
                    return allSuccNonLeaf;
                  }
                }
              }
            }
            if (k < len)             continue;
          }
 catch (          Exception e) {
            if (this.setErrState(curState,succState,true)) {
              this.printTrace(EC.TLC_INVARIANT_EVALUATION_FAILED,new String[]{this.tool.getInvNames()[k]},curState,succState);
              this.notify();
            }
            return allSuccNonLeaf;
          }
        }
        try {
          int len=this.impliedActions.length;
          for (k=0; k < len; k++) {
            if (!tool.isValid(this.impliedActions[k],curState,succState)) {
synchronized (this) {
                if (TLCGlobals.continuation) {
                  this.printTrace(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,new String[]{this.tool.getImpliedActNames()[k]},curState,succState);
                  break;
                }
 else {
                  if (this.setErrState(curState,succState,false)) {
                    this.printTrace(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,new String[]{this.tool.getImpliedActNames()[k]},curState,succState);
                    this.notify();
                  }
                  return allSuccNonLeaf;
                }
              }
            }
          }
          if (k < len)           continue;
        }
 catch (        Exception e) {
          if (this.setErrState(curState,succState,true)) {
            this.printTrace(EC.TLC_ACTION_PROPERTY_EVALUATION_FAILED,new String[]{this.tool.getImpliedActNames()[k]},curState,succState);
            this.notify();
          }
          return allSuccNonLeaf;
        }
      }
      succState=null;
    }
    if (deadLocked && this.checkDeadlock) {
synchronized (this) {
        if (this.setErrState(curState,null,false)) {
          this.printTrace(EC.TLC_DEADLOCK_REACHED,null,curState,null);
          this.notify();
        }
      }
      return allSuccNonLeaf;
    }
    if (this.checkLiveness && isLeaf) {
      long curStateFP=curState.fingerPrint();
      liveNextStates.addElement(curState);
      liveNextFPs.addElement(curStateFP);
      LiveCheck.addNextState(curState,curStateFP,liveNextStates,liveNextFPs);
    }
    if (allSuccDone || (isLeaf && allSuccNonLeaf)) {
      this.theFPSet.setStatus(cfp,FPIntSet.DONE);
    }
    return allSuccNonLeaf;
  }
 catch (  Throwable e) {
    boolean keep=((e instanceof StackOverflowError) || (e instanceof OutOfMemoryError));
synchronized (this) {
      if (this.setErrState(curState,succState,!keep)) {
        if (e instanceof StackOverflowError) {
          MP.printError(EC.SYSTEM_STACK_OVERFLOW);
        }
 else         if (e instanceof OutOfMemoryError) {
          MP.printError(EC.SYSTEM_OUT_OF_MEMORY);
        }
 else {
          MP.printError(EC.GENERAL,e.getMessage());
        }
        this.printTrace(EC.TLC_BEHAVIOR_UP_TO_THIS_POINT,null,curState,succState);
        this.notifyAll();
      }
    }
    throw e;
  }
}","/** 
 * Compute the set of the next states.  For each next state, check if it is a valid state, if the invariants are satisfied, and if it satisfies the constraints. It also adds the states that have not been done in nextStates.  Return true if it finds a leaf successor of curState.
 */
public final boolean doNext(TLCState curState,long cfp,boolean isLeaf,ObjLongTable counts,StateVec states,LongVec fps) throws Throwable {
  boolean deadLocked=true;
  TLCState succState=null;
  StateVec liveNextStates=null;
  LongVec liveNextFPs=null;
  if (this.checkLiveness && isLeaf) {
    liveNextStates=new StateVec(2);
    liveNextFPs=new LongVec(2);
  }
  try {
    int k=0;
    boolean allSuccDone=true;
    boolean allSuccNonLeaf=true;
    for (int i=0; i < this.actions.length; i++) {
      StateVec nextStates=this.tool.getNextStates(this.actions[i],curState);
      int sz=nextStates.size();
      this.incNumOfGenStates(sz);
      deadLocked=deadLocked && (sz == 0);
      for (int j=0; j < sz; j++) {
        succState=nextStates.elementAt(j);
        if (!this.tool.isGoodState(succState)) {
          if (this.setErrState(curState,succState,false)) {
            this.printTrace(EC.TLC_STATE_NOT_COMPLETELY_SPECIFIED_NEXT,null,curState,succState);
synchronized (this) {
              this.notify();
            }
          }
          return allSuccNonLeaf;
        }
        if (TLCGlobals.coverageInterval >= 0) {
          ((TLCStateMutSource)succState).addCounts(counts);
        }
        boolean inModel=(this.tool.isInModel(succState) && this.tool.isInActions(curState,succState));
        int status=FPIntSet.NEW;
        if (inModel) {
          long fp=succState.fingerPrint();
          status=this.theFPSet.setStatus(fp,FPIntSet.NEW);
          allSuccDone=allSuccDone && FPIntSet.isDone(status);
          allSuccNonLeaf=allSuccNonLeaf && !FPIntSet.isLeaf(status);
          if (status == FPIntSet.NEW && this.allStateWriter != null) {
            this.allStateWriter.writeState(succState);
          }
          if (!FPIntSet.isCompleted(status)) {
            states.addElement(succState);
            fps.addElement(fp);
          }
          if (this.checkLiveness && isLeaf) {
            liveNextStates.addElement(succState);
            liveNextFPs.addElement(fp);
          }
        }
        if (status == FPIntSet.NEW) {
          try {
            int len=this.invariants.length;
            for (k=0; k < len; k++) {
              if (!tool.isValid(this.invariants[k],succState)) {
synchronized (this) {
                  if (TLCGlobals.continuation) {
                    this.printTrace(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,new String[]{this.tool.getInvNames()[k]},curState,succState);
                    break;
                  }
 else {
                    if (this.setErrState(curState,succState,false)) {
                      this.printTrace(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,new String[]{this.tool.getInvNames()[k]},curState,succState);
                      this.notify();
                    }
                    return allSuccNonLeaf;
                  }
                }
              }
            }
            if (k < len)             continue;
          }
 catch (          Exception e) {
            if (this.setErrState(curState,succState,true)) {
              this.printTrace(EC.TLC_INVARIANT_EVALUATION_FAILED,new String[]{this.tool.getInvNames()[k]},curState,succState);
              this.notify();
            }
            return allSuccNonLeaf;
          }
        }
        try {
          int len=this.impliedActions.length;
          for (k=0; k < len; k++) {
            if (!tool.isValid(this.impliedActions[k],curState,succState)) {
synchronized (this) {
                if (TLCGlobals.continuation) {
                  this.printTrace(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,new String[]{this.tool.getImpliedActNames()[k]},curState,succState);
                  break;
                }
 else {
                  if (this.setErrState(curState,succState,false)) {
                    this.printTrace(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,new String[]{this.tool.getImpliedActNames()[k]},curState,succState);
                    this.notify();
                  }
                  return allSuccNonLeaf;
                }
              }
            }
          }
          if (k < len)           continue;
        }
 catch (        Exception e) {
          if (this.setErrState(curState,succState,true)) {
            this.printTrace(EC.TLC_ACTION_PROPERTY_EVALUATION_FAILED,new String[]{this.tool.getImpliedActNames()[k]},curState,succState);
            this.notify();
          }
          return allSuccNonLeaf;
        }
      }
      succState=null;
    }
    if (deadLocked && this.checkDeadlock) {
synchronized (this) {
        if (this.setErrState(curState,null,false)) {
          this.printTrace(EC.TLC_DEADLOCK_REACHED,null,curState,null);
          this.notify();
        }
      }
      return allSuccNonLeaf;
    }
    if (this.checkLiveness && isLeaf) {
      long curStateFP=curState.fingerPrint();
      liveNextStates.addElement(curState);
      liveNextFPs.addElement(curStateFP);
      LiveCheck.addNextState(curState,curStateFP,liveNextStates,liveNextFPs);
    }
    if (allSuccDone || (isLeaf && allSuccNonLeaf)) {
      this.theFPSet.setStatus(cfp,FPIntSet.DONE);
    }
    return allSuccNonLeaf;
  }
 catch (  Throwable e) {
    boolean keep=((e instanceof StackOverflowError) || (e instanceof OutOfMemoryError));
synchronized (this) {
      if (this.setErrState(curState,succState,!keep)) {
        String[] parameters=null;
        int errorCode;
        if (e instanceof StackOverflowError) {
          errorCode=EC.SYSTEM_STACK_OVERFLOW;
        }
 else         if (e instanceof OutOfMemoryError) {
          errorCode=EC.SYSTEM_OUT_OF_MEMORY;
        }
 else {
          errorCode=EC.GENERAL;
          parameters=new String[]{e.getMessage()};
        }
        this.printTrace(errorCode,parameters,curState,succState);
        this.notifyAll();
      }
    }
    throw e;
  }
}",0.9732947498966515
136100,"/** 
 * Prints the stacktrace
 * @param code error code
 * @param params params
 * @param s1 
 * @param s2
 */
public final void printTrace(int errorCode,String[] parameters,TLCState s1,TLCState s2){
  MP.printError(errorCode,parameters);
  MP.printMessage(EC.TLC_BEHAVIOR_UP_TO_THIS_POINT);
  int idx=0;
  while (idx < this.curLevel) {
    StatePrinter.printState(this.stateStack[idx],++idx);
  }
  if (s2 != null) {
    StatePrinter.printState(s2,idx + 1);
  }
}","/** 
 * Prints the stacktrace
 * @param code error code
 * @param params params
 * @param s1 
 * @param s2
 */
public final void printTrace(int errorCode,String[] parameters,TLCState s1,TLCState s2){
  MP.printError(errorCode,parameters);
  MP.printError(EC.TLC_BEHAVIOR_UP_TO_THIS_POINT);
  int idx=0;
  while (idx < this.curLevel) {
    StatePrinter.printState(this.stateStack[idx],++idx);
  }
  if (s2 != null) {
    StatePrinter.printState(s2,idx + 1);
  }
}",0.9870410367170628
136101,"/** 
 * Prints out the simulation behavior, in case of an error. (unless we're at maximum depth, in which case don't!)
 */
public final void printBehavior(int errorCode,String[] parameters,TLCState state,int traceIdx){
  MP.printMessage(errorCode,parameters);
  if (this.traceDepth == Long.MAX_VALUE) {
    MP.printMessage(EC.TLC_ERROR_STATE);
    StatePrinter.printState(state);
  }
 else {
    MP.printMessage(EC.TLC_BEHAVIOR_UP_TO_THIS_POINT);
    TLCState lastState=null;
    for (int i=0; i < traceIdx; i++) {
      StatePrinter.printState(this.stateTrace[i],lastState,i + 1);
      lastState=this.stateTrace[i];
    }
    StatePrinter.printState(state,null,traceIdx + 1);
  }
  this.printSummary();
}","/** 
 * Prints out the simulation behavior, in case of an error. (unless we're at maximum depth, in which case don't!)
 */
public final void printBehavior(int errorCode,String[] parameters,TLCState state,int traceIdx){
  MP.printMessage(errorCode,parameters);
  if (this.traceDepth == Long.MAX_VALUE) {
    MP.printMessage(EC.TLC_ERROR_STATE);
    StatePrinter.printState(state);
  }
 else {
    MP.printError(EC.TLC_BEHAVIOR_UP_TO_THIS_POINT);
    TLCState lastState=null;
    for (int i=0; i < traceIdx; i++) {
      StatePrinter.printState(this.stateTrace[i],lastState,i + 1);
      lastState=this.stateTrace[i];
    }
    StatePrinter.printState(state,null,traceIdx + 1);
  }
  this.printSummary();
}",0.9914893617021276
136102,"/** 
 * Write out a sequence of states that reaches s2 from an initial state, according to the spec. s2 is a next state of s1.
 */
public synchronized final void printTrace(long loc1,TLCState s1,TLCState s2) throws IOException, WorkerException {
  MP.printMessage(EC.TLC_BEHAVIOR_UP_TO_THIS_POINT);
  TLCState lastState=null;
  TLCStateInfo[] prefix=this.getTrace(loc1,false);
  int idx=0;
  while (idx < prefix.length) {
    StatePrinter.printState(prefix[idx],lastState,idx + 1);
    lastState=prefix[idx].state;
    idx++;
  }
  TLCStateInfo sinfo;
  if (prefix.length == 0) {
    sinfo=this.tool.getState(s1.fingerPrint());
    if (sinfo == null) {
      MP.printError(EC.TLC_FAILED_TO_RECOVER_INIT);
      MP.printError(EC.TLC_BUG,""String_Node_Str"");
      System.exit(1);
    }
  }
 else {
    TLCState s0=prefix[prefix.length - 1].state;
    sinfo=this.tool.getState(s1.fingerPrint(),s0);
    if (sinfo == null) {
      MP.printError(EC.TLC_FAILED_TO_RECOVER_INIT);
      MP.printError(EC.TLC_BUG,""String_Node_Str"");
      StatePrinter.printState(s1);
      System.exit(1);
    }
  }
  if (s2 == null) {
    lastState=null;
  }
  StatePrinter.printState(sinfo,lastState,++idx);
  lastState=sinfo.state;
  if (s2 != null) {
    sinfo=this.tool.getState(s2,s1);
    if (sinfo == null) {
      MP.printError(EC.TLC_FAILED_TO_RECOVER_INIT);
      MP.printError(EC.TLC_BUG,""String_Node_Str"");
      StatePrinter.printState(s2);
      System.exit(1);
    }
    StatePrinter.printState(sinfo,null,++idx);
  }
}","/** 
 * Write out a sequence of states that reaches s2 from an initial state, according to the spec. s2 is a next state of s1.
 */
public synchronized final void printTrace(long loc1,TLCState s1,TLCState s2) throws IOException, WorkerException {
  MP.printError(EC.TLC_BEHAVIOR_UP_TO_THIS_POINT);
  TLCState lastState=null;
  TLCStateInfo[] prefix=this.getTrace(loc1,false);
  int idx=0;
  while (idx < prefix.length) {
    StatePrinter.printState(prefix[idx],lastState,idx + 1);
    lastState=prefix[idx].state;
    idx++;
  }
  TLCStateInfo sinfo;
  if (prefix.length == 0) {
    sinfo=this.tool.getState(s1.fingerPrint());
    if (sinfo == null) {
      MP.printError(EC.TLC_FAILED_TO_RECOVER_INIT);
      MP.printError(EC.TLC_BUG,""String_Node_Str"");
      System.exit(1);
    }
  }
 else {
    TLCState s0=prefix[prefix.length - 1].state;
    sinfo=this.tool.getState(s1.fingerPrint(),s0);
    if (sinfo == null) {
      MP.printError(EC.TLC_FAILED_TO_RECOVER_INIT);
      MP.printError(EC.TLC_BUG,""String_Node_Str"");
      StatePrinter.printState(s1);
      System.exit(1);
    }
  }
  if (s2 == null) {
    lastState=null;
  }
  StatePrinter.printState(sinfo,lastState,++idx);
  lastState=sinfo.state;
  if (s2 != null) {
    sinfo=this.tool.getState(s2,s1);
    if (sinfo == null) {
      MP.printError(EC.TLC_FAILED_TO_RECOVER_INIT);
      MP.printError(EC.TLC_BUG,""String_Node_Str"");
      StatePrinter.printState(s2);
      System.exit(1);
    }
    StatePrinter.printState(sinfo,null,++idx);
  }
}",0.9960238568588468
136103,"/** 
 * Parse the configuration file
 */
public final void parse(){
  Vect constants=(Vect)this.configTbl.get(Constant);
  Vect constraints=(Vect)this.configTbl.get(Constraint);
  Vect actionConstraints=(Vect)this.configTbl.get(ActionConstraint);
  Vect invariants=(Vect)this.configTbl.get(Invariant);
  Vect props=(Vect)this.configTbl.get(Prop);
  try {
    FileInputStream fis=FileUtil.newFIS(resolver.resolve(this.configFileName,false));
    if (fis == null) {
      throw new ConfigFileException(EC.CFG_ERROR_READING_FILE,new String[]{this.configFileName,""String_Node_Str""});
    }
    SimpleCharStream scs=new SimpleCharStream(fis,1,1);
    TLAplusParserTokenManager tmgr=new TLAplusParserTokenManager(scs,2);
    Token tt=getNextToken(tmgr);
    while (tt.kind != TLAplusParserConstants.EOF) {
      String tval=tt.image;
      int loc=scs.getBeginLine();
      if (tval.equals(Init)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{Init,String.valueOf(loc)});
        }
        String old=(String)this.configTbl.put(Init,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{Spec,String.valueOf(loc)});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(Next)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{Next,String.valueOf(loc)});
        }
        String old=(String)this.configTbl.put(Next,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{Next,String.valueOf(loc)});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(Spec)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{Spec,String.valueOf(loc)});
        }
        String old=(String)this.configTbl.put(Spec,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{Spec,String.valueOf(loc)});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(View)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{View,String.valueOf(loc)});
        }
        String old=(String)this.configTbl.put(View,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{View,String.valueOf(loc)});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(Symmetry)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{Symmetry,String.valueOf(loc)});
        }
        String old=(String)this.configTbl.put(Symmetry,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{Symmetry,String.valueOf(loc)});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(Type)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{Type,String.valueOf(loc)});
        }
        String old=(String)this.configTbl.put(Type,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{Type,String.valueOf(loc)});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(TypeConstraint)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{TypeConstraint,String.valueOf(loc)});
        }
        String old=(String)this.configTbl.put(TypeConstraint,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{TypeConstraint,String.valueOf(loc)});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(Constant) || tval.equals(Constants)) {
        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {
          if (this.configTbl.get(tt.image) != null)           break;
          String lhs=tt.image;
          tt=getNextToken(tmgr);
          while (tt.image.equals(""String_Node_Str"")) {
            tt=getNextToken(tmgr);
            lhs=lhs + ""String_Node_Str"" + tt.image;
            tt=getNextToken(tmgr);
          }
          Vect line=new Vect();
          line.addElement(lhs);
          if (tt.image.equals(""String_Node_Str"")) {
            tt=getNextToken(tmgr);
            if (tt.image.equals(""String_Node_Str"")) {
              tt=getNextToken(tmgr);
              if (tt.kind == TLAplusParserConstants.EOF) {
                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              String modName=tt.image;
              tt=getNextToken(tmgr);
              if (!tt.image.equals(""String_Node_Str"")) {
                throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              tt=getNextToken(tmgr);
              if (tt.kind == TLAplusParserConstants.EOF) {
                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              Hashtable defs=(Hashtable)this.modOverrides.get(modName);
              if (defs == null) {
                defs=new Hashtable();
                this.modOverrides.put(modName,defs);
              }
              defs.put(line.elementAt(0),tt.image);
            }
 else {
              if (tt.kind == TLAplusParserConstants.EOF) {
                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              this.overrides.put(line.elementAt(0),tt.image);
            }
          }
 else {
            if (tt.image.equals(""String_Node_Str"")) {
              while (true) {
                tt=getNextToken(tmgr);
                Value arg=this.parseValue(tt,scs,tmgr);
                line.addElement(arg);
                tt=getNextToken(tmgr);
                if (!tt.image.equals(""String_Node_Str""))                 break;
              }
              if (!tt.image.equals(""String_Node_Str"")) {
                throw new ConfigFileException(EC.CFG_GENERAL,new String[]{String.valueOf(loc)});
              }
              tt=getNextToken(tmgr);
            }
            if (!tt.image.equals(""String_Node_Str"")) {
              throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
            }
            tt=getNextToken(tmgr);
            if (tt.image.equals(""String_Node_Str"")) {
              tt=getNextToken(tmgr);
              if (tt.kind == TLAplusParserConstants.EOF) {
                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              String modName=tt.image;
              tt=getNextToken(tmgr);
              if (!tt.image.equals(""String_Node_Str"")) {
                throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              tt=getNextToken(tmgr);
              line.addElement(this.parseValue(tt,scs,tmgr));
              Vect mConsts=(Vect)this.modConstants.get(modName);
              if (mConsts == null) {
                mConsts=new Vect();
                this.modConstants.put(modName,mConsts);
              }
              mConsts.addElement(line);
            }
 else {
              line.addElement(this.parseValue(tt,scs,tmgr));
              constants.addElement(line);
            }
          }
        }
      }
 else       if (tval.equals(Invariant) || tval.equals(Invariants)) {
        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {
          if (this.configTbl.get(tt.image) != null)           break;
          invariants.addElement(tt.image);
        }
      }
 else       if (tval.equals(Prop) || tval.equals(Props)) {
        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {
          if (this.configTbl.get(tt.image) != null)           break;
          props.addElement(tt.image);
        }
      }
 else       if (tval.equals(Constraint) || tval.equals(Constraints)) {
        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {
          if (this.configTbl.get(tt.image) != null)           break;
          constraints.addElement(tt.image);
        }
      }
 else       if (tval.equals(ActionConstraint) || tval.equals(ActionConstraints)) {
        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {
          if (this.configTbl.get(tt.image) != null)           break;
          actionConstraints.addElement(tt.image);
        }
      }
 else {
        throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
      }
    }
  }
 catch (  IOException e) {
    throw new ConfigFileException(EC.CFG_ERROR_READING_FILE,new String[]{this.configFileName,e.getMessage()},e);
  }
}","/** 
 * Parse the configuration file
 */
public final void parse(){
  Vect constants=(Vect)this.configTbl.get(Constant);
  Vect constraints=(Vect)this.configTbl.get(Constraint);
  Vect actionConstraints=(Vect)this.configTbl.get(ActionConstraint);
  Vect invariants=(Vect)this.configTbl.get(Invariant);
  Vect props=(Vect)this.configTbl.get(Prop);
  try {
    FileInputStream fis=FileUtil.newFIS(resolver.resolve(this.configFileName,false));
    if (fis == null) {
      throw new ConfigFileException(EC.CFG_ERROR_READING_FILE,new String[]{this.configFileName,""String_Node_Str""});
    }
    SimpleCharStream scs=new SimpleCharStream(fis,1,1);
    TLAplusParserTokenManager tmgr=new TLAplusParserTokenManager(scs,2);
    Token tt=getNextToken(tmgr);
    while (tt.kind != TLAplusParserConstants.EOF) {
      String tval=tt.image;
      int loc=scs.getBeginLine();
      if (tval.equals(Init)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),Init});
        }
        String old=(String)this.configTbl.put(Init,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),Spec});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(Next)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),Next});
        }
        String old=(String)this.configTbl.put(Next,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),Next});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(Spec)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),Spec});
        }
        String old=(String)this.configTbl.put(Spec,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),Spec});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(View)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),View});
        }
        String old=(String)this.configTbl.put(View,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),View});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(Symmetry)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),Symmetry});
        }
        String old=(String)this.configTbl.put(Symmetry,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),Symmetry});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(Type)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),Type});
        }
        String old=(String)this.configTbl.put(Type,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),Type});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(TypeConstraint)) {
        tt=getNextToken(tmgr);
        if (tt.kind == TLAplusParserConstants.EOF) {
          throw new ConfigFileException(EC.CFG_MISSING_ID,new String[]{String.valueOf(loc),TypeConstraint});
        }
        String old=(String)this.configTbl.put(TypeConstraint,tt.image);
        if (old.length() != 0) {
          throw new ConfigFileException(EC.CFG_TWICE_KEYWORD,new String[]{String.valueOf(loc),TypeConstraint});
        }
        tt=getNextToken(tmgr);
      }
 else       if (tval.equals(Constant) || tval.equals(Constants)) {
        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {
          if (this.configTbl.get(tt.image) != null)           break;
          String lhs=tt.image;
          tt=getNextToken(tmgr);
          while (tt.image.equals(""String_Node_Str"")) {
            tt=getNextToken(tmgr);
            lhs=lhs + ""String_Node_Str"" + tt.image;
            tt=getNextToken(tmgr);
          }
          Vect line=new Vect();
          line.addElement(lhs);
          if (tt.image.equals(""String_Node_Str"")) {
            tt=getNextToken(tmgr);
            if (tt.image.equals(""String_Node_Str"")) {
              tt=getNextToken(tmgr);
              if (tt.kind == TLAplusParserConstants.EOF) {
                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              String modName=tt.image;
              tt=getNextToken(tmgr);
              if (!tt.image.equals(""String_Node_Str"")) {
                throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              tt=getNextToken(tmgr);
              if (tt.kind == TLAplusParserConstants.EOF) {
                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              Hashtable defs=(Hashtable)this.modOverrides.get(modName);
              if (defs == null) {
                defs=new Hashtable();
                this.modOverrides.put(modName,defs);
              }
              defs.put(line.elementAt(0),tt.image);
            }
 else {
              if (tt.kind == TLAplusParserConstants.EOF) {
                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              this.overrides.put(line.elementAt(0),tt.image);
            }
          }
 else {
            if (tt.image.equals(""String_Node_Str"")) {
              while (true) {
                tt=getNextToken(tmgr);
                Value arg=this.parseValue(tt,scs,tmgr);
                line.addElement(arg);
                tt=getNextToken(tmgr);
                if (!tt.image.equals(""String_Node_Str""))                 break;
              }
              if (!tt.image.equals(""String_Node_Str"")) {
                throw new ConfigFileException(EC.CFG_GENERAL,new String[]{String.valueOf(loc)});
              }
              tt=getNextToken(tmgr);
            }
            if (!tt.image.equals(""String_Node_Str"")) {
              throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
            }
            tt=getNextToken(tmgr);
            if (tt.image.equals(""String_Node_Str"")) {
              tt=getNextToken(tmgr);
              if (tt.kind == TLAplusParserConstants.EOF) {
                throw new ConfigFileException(EC.CFG_EXPECT_ID,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              String modName=tt.image;
              tt=getNextToken(tmgr);
              if (!tt.image.equals(""String_Node_Str"")) {
                throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
              }
              tt=getNextToken(tmgr);
              line.addElement(this.parseValue(tt,scs,tmgr));
              Vect mConsts=(Vect)this.modConstants.get(modName);
              if (mConsts == null) {
                mConsts=new Vect();
                this.modConstants.put(modName,mConsts);
              }
              mConsts.addElement(line);
            }
 else {
              line.addElement(this.parseValue(tt,scs,tmgr));
              constants.addElement(line);
            }
          }
        }
      }
 else       if (tval.equals(Invariant) || tval.equals(Invariants)) {
        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {
          if (this.configTbl.get(tt.image) != null)           break;
          invariants.addElement(tt.image);
        }
      }
 else       if (tval.equals(Prop) || tval.equals(Props)) {
        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {
          if (this.configTbl.get(tt.image) != null)           break;
          props.addElement(tt.image);
        }
      }
 else       if (tval.equals(Constraint) || tval.equals(Constraints)) {
        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {
          if (this.configTbl.get(tt.image) != null)           break;
          constraints.addElement(tt.image);
        }
      }
 else       if (tval.equals(ActionConstraint) || tval.equals(ActionConstraints)) {
        while ((tt=getNextToken(tmgr)).kind != TLAplusParserConstants.EOF) {
          if (this.configTbl.get(tt.image) != null)           break;
          actionConstraints.addElement(tt.image);
        }
      }
 else {
        throw new ConfigFileException(EC.CFG_EXPECTED_SYMBOL,new String[]{String.valueOf(scs.getBeginLine()),""String_Node_Str""});
      }
    }
  }
 catch (  IOException e) {
    throw new ConfigFileException(EC.CFG_ERROR_READING_FILE,new String[]{this.configFileName,e.getMessage()},e);
  }
}",0.970857618651124
136104,"/** 
 * args: {markerId, attributeName} expectedValue: {value of the attribute}  
 */
public boolean test(Object receiver,String property,Object[] args,Object expectedValue){
  if (""String_Node_Str"".equals(property)) {
    if (args.length > 0 && args[0] instanceof String) {
      String markerId=(String)args[0];
      String attributeName=null;
      if (args.length > 1 && args[1] instanceof String) {
        attributeName=(String)args[1];
      }
      if (receiver != null && receiver instanceof ILaunchConfiguration) {
        try {
          IMarker[] foundMarkers=((ILaunchConfiguration)receiver).getFile().findMarkers(markerId,true,IResource.DEPTH_INFINITE);
          if (attributeName != null) {
            for (int i=0; i < foundMarkers.length; i++) {
              Object value=foundMarkers[i].getAttribute(attributeName);
              if (!value.equals(expectedValue)) {
                return false;
              }
            }
            return true;
          }
 else {
            boolean isPresent=true;
            if (expectedValue != null && expectedValue instanceof Boolean) {
              isPresent=((Boolean)expectedValue).booleanValue();
            }
            if (isPresent) {
              return foundMarkers.length > 0;
            }
 else {
              return foundMarkers.length == 0;
            }
          }
        }
 catch (        CoreException e) {
          TLCActivator.logError(""String_Node_Str"",e);
        }
      }
    }
  }
  return false;
}","/** 
 * args: {markerId, attributeName} expectedValue: {value of the attribute}  
 */
public boolean test(Object receiver,String property,Object[] args,Object expectedValue){
  if (""String_Node_Str"".equals(property)) {
    if (args.length > 0 && args[0] instanceof String) {
      String markerId=(String)args[0];
      String attributeName=null;
      if (args.length > 1 && args[1] instanceof String) {
        attributeName=(String)args[1];
      }
      if (receiver != null && receiver instanceof ILaunchConfiguration) {
        try {
          IMarker[] foundMarkers=((ILaunchConfiguration)receiver).getFile().findMarkers(markerId,true,IResource.DEPTH_INFINITE);
          if (attributeName != null) {
            for (int i=0; i < foundMarkers.length; i++) {
              Object value=foundMarkers[i].getAttribute(attributeName);
              if (value == null || !value.equals(expectedValue)) {
                return false;
              }
            }
            return foundMarkers.length > 0;
          }
 else {
            boolean result;
            int expectedCount=-1;
            if (expectedValue != null && expectedValue instanceof Integer) {
              expectedCount=((Integer)expectedValue).intValue();
            }
            if (expectedCount == -1) {
              result=foundMarkers.length > 0;
            }
 else {
              result=foundMarkers.length == expectedCount;
            }
            return result;
          }
        }
 catch (        CoreException e) {
          TLCActivator.logError(""String_Node_Str"",e);
        }
      }
    }
  }
  return false;
}",0.9160501769057576
136105,"public static IntValue Times(IntValue x,IntValue y){
  int n1=x.val;
  int n2=y.val;
  long res=n1 * n2;
  if (-2147483648 > res || res > 2147483647) {
    throw new EvalException(""String_Node_Str"" + n1 + ""String_Node_Str""+ n2);
  }
  return IntValue.gen((int)res);
}","public static IntValue Times(IntValue x,IntValue y){
  int n1=x.val;
  int n2=y.val;
  long res=((long)n1) * ((long)n2);
  if (-2147483648 > res || res > 2147483647) {
    throw new EvalException(""String_Node_Str"" + n1 + ""String_Node_Str""+ n2);
  }
  return IntValue.gen((int)res);
}",0.9563636363636364
136106,"protected void reportCoverage(IWorker[] workers){
  if (TLCGlobals.coverageInterval >= 0) {
    ToolIO.out.println(""String_Node_Str"");
    ObjLongTable counts=this.tool.getPrimedLocs();
    for (int i=0; i < workers.length; i++) {
      ObjLongTable counts1=workers[i].getCounts();
      ObjLongTable.Enumerator keys=counts1.keys();
      Object key;
      while ((key=keys.nextElement()) != null) {
        String loc=((SemanticNode)key).getLocation().toString();
        counts.add(loc,counts1.get(key));
      }
    }
    Object[] skeys=counts.sortStringKeys();
    for (int i=0; i < skeys.length; i++) {
      long val=counts.get(skeys[i]);
      ToolIO.out.println(""String_Node_Str"" + skeys[i] + ""String_Node_Str""+ val);
    }
  }
}","/** 
 * Responsible for printing the coverage information
 * @param workers
 */
protected void reportCoverage(IWorker[] workers){
  if (TLCGlobals.coverageInterval >= 0) {
    ToolIO.out.println(""String_Node_Str"");
    ObjLongTable counts=this.tool.getPrimedLocs();
    for (int i=0; i < workers.length; i++) {
      ObjLongTable counts1=workers[i].getCounts();
      ObjLongTable.Enumerator keys=counts1.keys();
      Object key;
      while ((key=keys.nextElement()) != null) {
        String loc=((SemanticNode)key).getLocation().toString();
        counts.add(loc,counts1.get(key));
      }
    }
    Object[] skeys=counts.sortStringKeys();
    for (int i=0; i < skeys.length; i++) {
      long val=counts.get(skeys[i]);
      ToolIO.out.println(""String_Node_Str"" + skeys[i] + ""String_Node_Str""+ val);
    }
  }
}",0.9485199485199484
136107,"public void printST(int indentLevel){
  String operator=""String_Node_Str"";
  TreeNode[] heirs=this.heirs();
  if (image != null && image.toString().equals(""String_Node_Str"")) {
    if (((SyntaxTreeNode)(heirs()[0])).image.toString().equals(""String_Node_Str"")) {
      operator=""String_Node_Str"" + ((SyntaxTreeNode)(((SyntaxTreeNode)(heirs()[0])).heirs()[0])).image.toString();
    }
    if (((SyntaxTreeNode)(heirs()[1])).image.toString().equals(""String_Node_Str"")) {
      operator=((SyntaxTreeNode)(((SyntaxTreeNode)(heirs()[1])).heirs()[0])).image.toString();
    }
    if (((SyntaxTreeNode)(heirs()[0])).image.toString().equals(""String_Node_Str"")) {
      operator=((SyntaxTreeNode)(((SyntaxTreeNode)(heirs()[0])).heirs()[1])).image.toString();
    }
  }
  for (int i=0; i < indentLevel; i++)   System.out.print(Strings.blanks[2]);
  System.out.print((image == null ? ""String_Node_Str"" + SyntaxNodeImage[kind].toString() + ""String_Node_Str"" : image.toString()) + ""String_Node_Str"" + (operator != ""String_Node_Str"" ? operator + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ heirs.length+ ""String_Node_Str""+ ""String_Node_Str""+ kind+ ((preComment.length != 0) ? (""String_Node_Str"" + preComment[0]) : (""String_Node_Str""))+ ""String_Node_Str"");
  for (int i=0; i < heirs.length; i++) {
    if (heirs[i] != null)     ((SyntaxTreeNode)heirs[i]).printST(indentLevel + 1);
 else {
      for (int j=0; j <= indentLevel; j++) {
        System.out.print(Strings.blanks[2]);
      }
      ;
      System.out.println(""String_Node_Str"");
    }
  }
}","public void printST(int indentLevel){
  String operator=""String_Node_Str"";
  TreeNode[] heirs=this.heirs();
  if (image != null && image.toString().equals(""String_Node_Str"")) {
    if (((SyntaxTreeNode)(heirs()[0])).image.toString().equals(""String_Node_Str"")) {
      operator=""String_Node_Str"" + ((SyntaxTreeNode)(((SyntaxTreeNode)(heirs()[0])).heirs()[0])).image.toString();
    }
    if (((SyntaxTreeNode)(heirs()[1])).image.toString().equals(""String_Node_Str"")) {
      operator=((SyntaxTreeNode)(((SyntaxTreeNode)(heirs()[1])).heirs()[0])).image.toString();
    }
    if (((SyntaxTreeNode)(heirs()[0])).image.toString().equals(""String_Node_Str"")) {
      operator=((SyntaxTreeNode)(((SyntaxTreeNode)(heirs()[0])).heirs()[1])).image.toString();
    }
  }
  for (int i=0; i < indentLevel; i++)   System.out.print(Strings.blanks[2]);
  System.out.print((image == null ? ""String_Node_Str"" + SyntaxNodeImage[kind].toString() + ""String_Node_Str"" : image.toString()) + ""String_Node_Str"" + (operator != ""String_Node_Str"" ? operator + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ heirs.length+ ""String_Node_Str""+ ""String_Node_Str""+ kind+ PreCommentToString(preComment)+ ""String_Node_Str"");
  for (int i=0; i < heirs.length; i++) {
    if (heirs[i] != null)     ((SyntaxTreeNode)heirs[i]).printST(indentLevel + 1);
 else {
      for (int j=0; j <= indentLevel; j++) {
        System.out.print(Strings.blanks[2]);
      }
      ;
      System.out.println(""String_Node_Str"");
    }
  }
}",0.9697766097240472
136108,"public final String[] getAttachedComments(){
  if (this.kind < SyntaxTreeConstants.NULL_ID) {
    return preComment;
  }
  ;
  if (this.heirs().length == 0) {
    String[] res=new String[1];
    res[0]=""String_Node_Str"";
    return res;
  }
  ;
  return ((SyntaxTreeNode)this.heirs()[0]).getAttachedComments();
}","/** 
 * For a token node, returns its pre-comments.  Otherwise, it returns    the pre-comments attached to the first token-node descendant of       this node.                                                           
 */
public final String[] getAttachedComments(){
  if (this.kind < SyntaxTreeConstants.NULL_ID) {
    return preComment;
  }
  ;
  if (this.heirs().length == 0) {
    String[] res=new String[1];
    res[0]=""String_Node_Str"";
    return res;
  }
  ;
  return ((SyntaxTreeNode)this.heirs()[0]).getAttachedComments();
}",0.7375886524822695
136109,"/** 
 * For a named assumption, that is one of the form                       ""ASSUME foo == ..."", this is the ThmOrAssumpDefNode for the           definition.                                                          
 */
public AssumeNode(TreeNode stn,ExprNode expr,ModuleNode mn,ThmOrAssumpDefNode opd){
  super(AssumeKind,stn);
  this.assumeExpr=expr;
  this.module=mn;
  this.def=opd;
}","/** 
 * The array of comments that precede the ASSUME token for an            outer-level theorem.                                                 
 */
public AssumeNode(TreeNode stn,ExprNode expr,ModuleNode mn,ThmOrAssumpDefNode opd){
  super(AssumeKind,stn);
  this.assumeExpr=expr;
  this.module=mn;
  this.def=opd;
}",0.6873239436619718
136110,"/** 
 * Displays this node as a String, implementing ExploreNode interface; depth parameter is a bound on the depth of the portion of the tree that is displayed.
 */
public final String toString(int depth){
  if (depth <= 0)   return ""String_Node_Str"";
  String res=Strings.indent(2,""String_Node_Str"" + super.toString(depth) + ((assumeExpr != null) ? Strings.indent(2,assumeExpr.toString(depth - 1)) : ""String_Node_Str""));
  if (def != null) {
    res=res + Strings.indent(4,""String_Node_Str"" + Strings.indent(2,this.def.toString(depth - 1)));
  }
  ;
  return res;
}","/** 
 * Displays this node as a String, implementing ExploreNode interface; depth parameter is a bound on the depth of the portion of the tree that is displayed.
 */
public final String toString(int depth){
  if (depth <= 0)   return ""String_Node_Str"";
  String res=Strings.indent(2,""String_Node_Str"" + super.toString(depth) + ((assumeExpr != null) ? Strings.indent(2,assumeExpr.toString(depth - 1)) : ""String_Node_Str""));
  res=res + SyntaxTreeNode.PreCommentToString(preComments);
  if (def != null) {
    res=res + Strings.indent(4,""String_Node_Str"" + Strings.indent(2,this.def.toString(depth - 1)));
  }
  ;
  return res;
}",0.949748743718593
136111,"private final void processFunction(TreeNode treeNode,Vector defs,ModuleNode cm) throws AbortException {
  TreeNode syntaxTreeNode=treeNode;
  boolean local=syntaxTreeNode.zero() != null;
  TreeNode[] ss=syntaxTreeNode.one();
  int ql=(ss.length - 4) / 2;
  OpApplNode oan;
  OpDefNode odn=null;
  FormalParamNode[][] quants=new FormalParamNode[ql][0];
  FormalParamNode[] fcnDeclForRecursion=new FormalParamNode[1];
  boolean[] tuples=new boolean[ql];
  ExprNode[] domains=new ExprNode[ql];
  ExprNode[] lhs=new ExprNode[1];
  Context newContext=new Context(moduleTable,errors);
  boolean isRecursive=false;
  symbolTable.pushContext(newContext);
  processQuantBoundArgs(ss,2,quants,tuples,domains,cm);
  UniqueString name=ss[0].getUS();
  SymbolNode symbolNode=symbolTable.resolveSymbol(name);
  SymbolTable st=null;
  if (symbolNode == null) {
    st=symbolTable;
  }
  ;
  fcnDeclForRecursion[0]=new FormalParamNode(name,0,treeNode,st,cm);
  symbolTable.popContext();
  oan=new OpApplNode(OP_nrfs,fcnDeclForRecursion,new ExprNode[0],quants,tuples,domains,syntaxTreeNode,cm);
  if (symbolNode == null) {
    odn=new OpDefNode(ss[0].getUS(),UserDefinedOpKind,nullParam,local,oan,cm,symbolTable,syntaxTreeNode,true,null);
    setOpDefNodeRecursionFields(odn,cm);
  }
 else {
    if (symbolNode instanceof OpDefNode) {
      odn=(OpDefNode)symbolNode;
    }
    ;
    if ((odn != null) && odn.inRecursive && (!odn.isDefined)) {
      if (odn.letInLevel == curLevel) {
        isRecursive=true;
        if (odn.getArity() == 0) {
          endOpDefNode(odn,oan,syntaxTreeNode);
        }
 else {
          errors.addError(treeNode.getLocation(),""String_Node_Str"" + odn.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
        ;
      }
 else {
        errors.addError(treeNode.getLocation(),""String_Node_Str"" + name.toString() + ""String_Node_Str"");
        odn=null;
      }
    }
 else {
      errors.addError(treeNode.getLocation(),""String_Node_Str"" + name.toString() + ""String_Node_Str"");
    }
  }
  if (odn != null) {
    cm.appendDef(odn);
    if (defs != null)     defs.addElement(odn);
    symbolTable.pushContext(newContext);
  }
  ;
  functions.push(ss[0].getUS(),oan);
  pushLS();
  pushFormalParams(flattenParams(quants));
  lhs[0]=generateExpression(ss[ss.length - 1],cm);
  popFormalParams();
  Hashtable ht=popLabelNodeSet();
  if (odn != null) {
    odn.setLabels(ht);
  }
  ;
  functions.pop();
  oan.setArgs(lhs);
  symbolTable.popContext();
  if (oan.getOperator().getName() == OP_nrfs) {
    oan.makeNonRecursive();
  }
}","private final void processFunction(TreeNode treeNode,Vector defs,ModuleNode cm) throws AbortException {
  TreeNode syntaxTreeNode=treeNode;
  boolean local=syntaxTreeNode.zero() != null;
  TreeNode[] ss=syntaxTreeNode.one();
  int ql=(ss.length - 4) / 2;
  OpApplNode oan;
  OpDefNode odn=null;
  FormalParamNode[][] quants=new FormalParamNode[ql][0];
  FormalParamNode[] fcnDeclForRecursion=new FormalParamNode[1];
  boolean[] tuples=new boolean[ql];
  ExprNode[] domains=new ExprNode[ql];
  ExprNode[] lhs=new ExprNode[1];
  Context newContext=new Context(moduleTable,errors);
  boolean isRecursive=false;
  symbolTable.pushContext(newContext);
  processQuantBoundArgs(ss,2,quants,tuples,domains,cm);
  UniqueString name=ss[0].getUS();
  SymbolNode symbolNode=symbolTable.resolveSymbol(name);
  SymbolTable st=null;
  if (symbolNode == null) {
    st=symbolTable;
  }
  ;
  fcnDeclForRecursion[0]=new FormalParamNode(name,0,treeNode,st,cm);
  symbolTable.popContext();
  oan=new OpApplNode(OP_nrfs,fcnDeclForRecursion,new ExprNode[0],quants,tuples,domains,syntaxTreeNode,cm);
  if (symbolNode == null) {
    odn=new OpDefNode(ss[0].getUS(),UserDefinedOpKind,nullParam,local,oan,cm,symbolTable,syntaxTreeNode,true,null);
    setOpDefNodeRecursionFields(odn,cm);
  }
 else {
    if (symbolNode instanceof OpDefNode) {
      odn=(OpDefNode)symbolNode;
    }
    ;
    if ((odn != null) && odn.inRecursive && (!odn.isDefined)) {
      if (odn.letInLevel == curLevel) {
        isRecursive=true;
        if (odn.getArity() == 0) {
          endOpDefNode(odn,oan,syntaxTreeNode);
        }
 else {
          errors.addError(treeNode.getLocation(),""String_Node_Str"" + odn.getName() + ""String_Node_Str""+ ""String_Node_Str"");
        }
        ;
      }
 else {
        errors.addError(treeNode.getLocation(),""String_Node_Str"" + name.toString() + ""String_Node_Str"");
        odn=null;
      }
    }
 else {
      errors.addError(treeNode.getLocation(),""String_Node_Str"" + name.toString() + ""String_Node_Str"");
    }
  }
  if (odn != null) {
    cm.appendDef(odn);
    if (defs != null)     defs.addElement(odn);
    symbolTable.pushContext(newContext);
  }
  ;
  functions.push(ss[0].getUS(),oan);
  pushLS();
  pushFormalParams(flattenParams(quants));
  lhs[0]=generateExpression(ss[ss.length - 1],cm);
  popFormalParams();
  Hashtable ht=popLabelNodeSet();
  if (odn != null) {
    odn.setLabels(ht);
  }
  ;
  functions.pop();
  oan.setArgs(lhs);
  if (odn != null) {
    symbolTable.popContext();
  }
  if (oan.getOperator().getName() == OP_nrfs) {
    oan.makeNonRecursive();
  }
}",0.994735815948528
136112,"private final OpDeclNode buildParameter(TreeNode treeNode,int declKind,int declLevel,ModuleNode cm,boolean declare){
  UniqueString us=null;
  int arity=0;
  TreeNode[] ss=treeNode.heirs();
  if (treeNode.isKind(N_IdentDecl)) {
    us=ss[0].getUS();
    arity=(ss.length - 1) / 2;
  }
 else   if (treeNode.isKind(N_PrefixDecl)) {
    us=ss[0].getUS();
    arity=1;
  }
 else   if (treeNode.isKind(N_InfixDecl)) {
    us=ss[1].getUS();
    arity=2;
  }
 else   if (treeNode.isKind(N_PostfixDecl)) {
    us=ss[1].getUS();
    arity=1;
  }
 else {
    errors.addError(treeNode.getLocation(),""String_Node_Str"" + treeNode.getUS() + ""String_Node_Str"");
  }
  SymbolTable st=null;
  if (declare) {
    st=symbolTable;
  }
  ;
  return new OpDeclNode(us,declKind,declLevel,arity,cm,st,treeNode);
}","private final OpDeclNode buildParameter(TreeNode treeNode,int declKind,int declLevel,ModuleNode cm,boolean declare){
  UniqueString us=null;
  int arity=0;
  TreeNode[] ss=treeNode.heirs();
  if (treeNode.isKind(N_IdentDecl)) {
    us=ss[0].getUS();
    arity=(ss.length - 1) / 2;
  }
 else   if (treeNode.isKind(N_PrefixDecl)) {
    us=ss[0].getUS();
    arity=1;
  }
 else   if (treeNode.isKind(N_InfixDecl)) {
    us=ss[1].getUS();
    arity=2;
  }
 else   if (treeNode.isKind(N_PostfixDecl)) {
    us=ss[1].getUS();
    arity=1;
  }
 else {
    errors.addError(treeNode.getLocation(),""String_Node_Str"" + treeNode.getUS() + ""String_Node_Str"");
  }
  SymbolTable st=null;
  if (declare) {
    st=symbolTable;
  }
  ;
  return new OpDeclNode(Operators.resolveSynonym(us),declKind,declLevel,arity,cm,st,treeNode);
}",0.9812967581047382
136113,"void finish() throws AbortException {
  int arrayLen=opVec.size();
  ops=new int[arrayLen];
  opNames=new UniqueString[arrayLen];
  opsSTN=new SyntaxTreeNode[arrayLen];
  args=new SyntaxTreeNode[arrayLen];
  for (int i=0; i < arrayLen; i++) {
    args[i]=(SyntaxTreeNode)argVec.elementAt(i);
    SyntaxTreeNode stn=(SyntaxTreeNode)opVec.elementAt(i);
    opsSTN[i]=stn;
    opNames[i]=stn.getUS();
switch (stn.getKind()) {
case IDENTIFIER:
case N_InfixOp:
case N_NonExpPrefixOp:
case N_PostfixOp:
case N_PrefixOp:
case ProofStepLexeme:
case ProofImplicitStepLexeme:
      ops[i]=NameSel;
    break;
case N_StructOp:
  if (stn.heirs().length > 0) {
    TreeNode numNode=stn.heirs()[0].heirs()[0];
    ops[i]=Integer.parseInt(numNode.getImage());
  }
 else {
    UniqueString us=stn.getUS();
    if (us == GGUS) {
      ops[i]=GGSel;
    }
 else     if (us == LLUS) {
      ops[i]=LLSel;
    }
 else     if (us == ColonUS) {
      ops[i]=ColonSel;
    }
 else     if (us == AtUS) {
      ops[i]=AtSel;
    }
 else {
      errors.addAbort(stn.getLocation(),""String_Node_Str"" + stn.getImage() + ""String_Node_Str"");
    }
  }
break;
case N_OpArgs:
ops[i]=NullSel;
break;
default :
errors.addAbort(stn.getLocation(),""String_Node_Str"" + stn.getKind());
break;
}
;
}
}","void finish() throws AbortException {
  int arrayLen=opVec.size();
  ops=new int[arrayLen];
  opNames=new UniqueString[arrayLen];
  opsSTN=new SyntaxTreeNode[arrayLen];
  args=new SyntaxTreeNode[arrayLen];
  for (int i=0; i < arrayLen; i++) {
    args[i]=(SyntaxTreeNode)argVec.elementAt(i);
    SyntaxTreeNode stn=(SyntaxTreeNode)opVec.elementAt(i);
    opsSTN[i]=stn;
    opNames[i]=stn.getUS();
switch (stn.getKind()) {
case IDENTIFIER:
case N_InfixOp:
case N_NonExpPrefixOp:
case N_PostfixOp:
case N_PrefixOp:
case ProofStepLexeme:
case ProofImplicitStepLexeme:
      ops[i]=NameSel;
    break;
case N_StructOp:
  if (stn.heirs().length > 0) {
    TreeNode numNode=stn.heirs()[0].heirs()[0];
    ops[i]=Integer.parseInt(numNode.getImage());
  }
 else {
    UniqueString us=stn.getUS();
    if (us == GGUS) {
      ops[i]=GGSel;
    }
 else     if (us == LLUS) {
      ops[i]=LLSel;
    }
 else     if (us == ColonUS) {
      ops[i]=ColonSel;
    }
 else     if (us == AtUS) {
      ops[i]=AtSel;
    }
 else {
      errors.addAbort(stn.getLocation(),""String_Node_Str"" + stn.getImage() + ""String_Node_Str"");
    }
  }
break;
case N_OpArgs:
ops[i]=NullSel;
break;
default :
errors.addError(stn.getLocation(),""String_Node_Str"");
break;
}
;
}
}",0.9896166134185304
136114,"private Selector genIdToSelector(SyntaxTreeNode genId) throws AbortException {
  Selector retval=new Selector(genId);
  TreeNode prefix=genId.heirs()[0];
  TreeNode[] prefixElts=prefix.heirs();
  SyntaxTreeNode lastOp=(SyntaxTreeNode)genId.heirs()[1];
  for (int i=0; i < prefixElts.length; i++) {
    SyntaxTreeNode thisPrefix=(SyntaxTreeNode)prefixElts[i].heirs()[0];
switch (thisPrefix.getKind()) {
case N_OpArgs:
      retval.addSelector(thisPrefix,thisPrefix);
    break;
case N_StructOp:
  retval.addSelector(thisPrefix,null);
break;
default :
if (prefixElts[i].heirs().length == 2) {
retval.addSelector(thisPrefix,null);
}
 else {
if (prefixElts[i].heirs().length != 3) {
  errors.addAbort(prefixElts[i].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
}
;
retval.addSelector(thisPrefix,(SyntaxTreeNode)prefixElts[i].heirs()[1]);
}
break;
}
}
;
if (lastOp.getKind() == N_OpArgs) {
retval.addSelector(lastOp,lastOp);
}
 else {
retval.addSelector(lastOp,null);
}
;
retval.finish();
return retval;
}","private Selector genIdToSelector(SyntaxTreeNode genId) throws AbortException {
  Selector retval=new Selector(genId);
  TreeNode prefix=genId.heirs()[0];
  TreeNode[] prefixElts=prefix.heirs();
  SyntaxTreeNode lastOp=(SyntaxTreeNode)genId.heirs()[1];
  for (int i=0; i < prefixElts.length; i++) {
    TreeNode[] pe=prefixElts[i].heirs();
    if (pe.length == 0) {
      errors.addError(genId.getLocation(),""String_Node_Str"");
      break;
    }
    ;
    SyntaxTreeNode thisPrefix=(SyntaxTreeNode)pe[0];
switch (thisPrefix.getKind()) {
case N_OpArgs:
      retval.addSelector(thisPrefix,thisPrefix);
    break;
case N_StructOp:
  retval.addSelector(thisPrefix,null);
break;
default :
if (prefixElts[i].heirs().length == 2) {
retval.addSelector(thisPrefix,null);
}
 else {
if (prefixElts[i].heirs().length != 3) {
  errors.addAbort(prefixElts[i].getLocation(),""String_Node_Str"" + ""String_Node_Str"");
}
;
retval.addSelector(thisPrefix,(SyntaxTreeNode)prefixElts[i].heirs()[1]);
}
break;
}
}
;
if (lastOp.getKind() == N_OpArgs) {
retval.addSelector(lastOp,lastOp);
}
 else {
retval.addSelector(lastOp,null);
}
;
retval.finish();
return retval;
}",0.9186424918642492
136115,"UseOrHideNode generateUseOrHide(TreeNode stn,ModuleNode cm) throws AbortException {
  int kind=UseKind;
  TreeNode heirs[]=stn.heirs();
  if (heirs[0].getKind() == TLAplusParserConstants.HIDE) {
    kind=HideKind;
  }
  ;
  int nextTok=1;
  if (heirs[0].getKind() == TLAplusParserConstants.PROOF) {
    nextTok++;
  }
  ;
  Vector vec=new Vector();
  if (heirs[nextTok].getKind() == TLAplusParserConstants.ONLY) {
    nextTok++;
  }
  ;
  while ((nextTok < heirs.length) && (heirs[nextTok].getKind() != TLAplusParserConstants.DF)) {
    if (heirs[nextTok].getKind() == TLAplusParserConstants.MODULE) {
      nextTok++;
      UniqueString moduleId=heirs[nextTok].getUS();
      ModuleNode moduleNode=symbolTable.resolveModule(moduleId);
      if ((moduleNode == null) && (moduleId == cm.getName())) {
        moduleNode=cm;
      }
      ;
      if (moduleNode != null) {
        vec.addElement(moduleNode);
      }
 else {
        errors.addError(heirs[nextTok].getLocation(),""String_Node_Str"" + moduleId + ""String_Node_Str"");
      }
    }
 else {
      if (heirs[nextTok].getKind() == N_GeneralId) {
        vec.addElement(selectorToNode(genIdToSelector((SyntaxTreeNode)heirs[nextTok]),0,true,false,cm));
      }
 else       if (heirs[nextTok].getKind() == N_AssumeProve) {
        vec.addElement(generateAssumeProve(heirs[nextTok],cm));
      }
 else {
        vec.addElement(generateExpression(heirs[nextTok],cm));
      }
    }
    nextTok++;
    if ((nextTok < heirs.length) && (heirs[nextTok].getKind() == TLAplusParserConstants.COMMA)) {
      nextTok++;
    }
    ;
  }
  ;
  LevelNode[] facts=new LevelNode[vec.size()];
  for (int i=0; i < vec.size(); i++) {
    facts[i]=(LevelNode)vec.elementAt(i);
  }
  ;
  SymbolNode[] defs;
  if (nextTok >= heirs.length) {
    defs=new SymbolNode[0];
  }
 else {
    vec=new Vector();
    nextTok++;
    while (nextTok < heirs.length) {
      if (heirs[nextTok].getKind() == TLAplusParserConstants.MODULE) {
        nextTok++;
        UniqueString moduleId=heirs[nextTok].getUS();
        ModuleNode moduleNode=symbolTable.resolveModule(moduleId);
        if ((moduleNode == null) && (moduleId == cm.getName())) {
          moduleNode=cm;
        }
        ;
        if (moduleNode != null) {
          vec.addElement(moduleNode);
        }
 else {
          errors.addError(heirs[nextTok].getLocation(),""String_Node_Str"" + moduleId + ""String_Node_Str"");
        }
      }
 else {
        Selector sel=genIdToSelector((SyntaxTreeNode)heirs[nextTok]);
        SemanticNode selToNd=selectorToNode(sel,-1,false,true,cm);
        if ((selToNd instanceof OpDefNode) || (selToNd instanceof ThmOrAssumpDefNode)) {
          SymbolNode def=(SymbolNode)selToNd;
          vec.addElement(def);
        }
 else {
          errors.addError(heirs[nextTok].getLocation(),""String_Node_Str"");
        }
      }
      nextTok++;
      if ((nextTok < heirs.length) && (heirs[nextTok].getKind() == TLAplusParserConstants.COMMA)) {
        nextTok++;
      }
      ;
    }
    ;
    defs=new SymbolNode[vec.size()];
    for (int i=0; i < vec.size(); i++) {
      defs[i]=(SymbolNode)vec.elementAt(i);
    }
    ;
  }
  return new UseOrHideNode(kind,stn,facts,defs);
}","UseOrHideNode generateUseOrHide(TreeNode stn,ModuleNode cm) throws AbortException {
  int kind=UseKind;
  TreeNode heirs[]=stn.heirs();
  boolean isOnly=false;
  if (heirs[0].getKind() == TLAplusParserConstants.HIDE) {
    kind=HideKind;
  }
  ;
  int nextTok=1;
  if (heirs[0].getKind() == TLAplusParserConstants.PROOF) {
    nextTok++;
  }
  ;
  Vector vec=new Vector();
  if (heirs[nextTok].getKind() == TLAplusParserConstants.ONLY) {
    isOnly=true;
    nextTok++;
  }
  ;
  while ((nextTok < heirs.length) && (heirs[nextTok].getKind() != TLAplusParserConstants.DF)) {
    if (heirs[nextTok].getKind() == TLAplusParserConstants.MODULE) {
      nextTok++;
      UniqueString moduleId=heirs[nextTok].getUS();
      ModuleNode moduleNode=symbolTable.resolveModule(moduleId);
      if ((moduleNode == null) && (moduleId == cm.getName())) {
        moduleNode=cm;
      }
      ;
      if (moduleNode != null) {
        vec.addElement(moduleNode);
      }
 else {
        errors.addError(heirs[nextTok].getLocation(),""String_Node_Str"" + moduleId + ""String_Node_Str"");
      }
    }
 else {
      if (heirs[nextTok].getKind() == N_GeneralId) {
        vec.addElement(selectorToNode(genIdToSelector((SyntaxTreeNode)heirs[nextTok]),0,true,false,cm));
      }
 else       if (heirs[nextTok].getKind() == N_AssumeProve) {
        vec.addElement(generateAssumeProve(heirs[nextTok],cm));
      }
 else {
        vec.addElement(generateExpression(heirs[nextTok],cm));
      }
    }
    nextTok++;
    if ((nextTok < heirs.length) && (heirs[nextTok].getKind() == TLAplusParserConstants.COMMA)) {
      nextTok++;
    }
    ;
  }
  ;
  LevelNode[] facts=new LevelNode[vec.size()];
  for (int i=0; i < vec.size(); i++) {
    facts[i]=(LevelNode)vec.elementAt(i);
  }
  ;
  SymbolNode[] defs;
  if (nextTok >= heirs.length) {
    defs=new SymbolNode[0];
  }
 else {
    vec=new Vector();
    nextTok++;
    while (nextTok < heirs.length) {
      if (heirs[nextTok].getKind() == TLAplusParserConstants.MODULE) {
        nextTok++;
        UniqueString moduleId=heirs[nextTok].getUS();
        ModuleNode moduleNode=symbolTable.resolveModule(moduleId);
        if ((moduleNode == null) && (moduleId == cm.getName())) {
          moduleNode=cm;
        }
        ;
        if (moduleNode != null) {
          vec.addElement(moduleNode);
        }
 else {
          errors.addError(heirs[nextTok].getLocation(),""String_Node_Str"" + moduleId + ""String_Node_Str"");
        }
      }
 else {
        Selector sel=genIdToSelector((SyntaxTreeNode)heirs[nextTok]);
        SemanticNode selToNd=selectorToNode(sel,-1,false,true,cm);
        if ((selToNd instanceof OpDefNode) || (selToNd instanceof ThmOrAssumpDefNode)) {
          SymbolNode def=(SymbolNode)selToNd;
          vec.addElement(def);
        }
 else {
          errors.addError(heirs[nextTok].getLocation(),""String_Node_Str"");
        }
      }
      nextTok++;
      if ((nextTok < heirs.length) && (heirs[nextTok].getKind() == TLAplusParserConstants.COMMA)) {
        nextTok++;
      }
      ;
    }
    ;
    defs=new SymbolNode[vec.size()];
    for (int i=0; i < vec.size(); i++) {
      defs[i]=(SymbolNode)vec.elementAt(i);
    }
    ;
  }
  return new UseOrHideNode(kind,stn,facts,defs,isOnly);
}",0.992548897857808
136116,"private final LeafProofNode generateLeafProof(TreeNode stn,ModuleNode cm) throws AbortException {
  TreeNode heirs[]=stn.heirs();
  LevelNode[] facts;
  SymbolNode[] defs;
  int nextTok=0;
  boolean omitted=false;
  if (heirs[0].getKind() == TLAplusParserConstants.PROOF) {
    nextTok++;
  }
  ;
  if (heirs[nextTok].getKind() == TLAplusParserConstants.BY) {
    UseOrHideNode uh=generateUseOrHide(stn,cm);
    facts=uh.facts;
    defs=uh.defs;
    if (facts.length + defs.length == 0) {
      errors.addError(stn.getLocation(),""String_Node_Str"");
    }
    ;
  }
 else {
    facts=new LevelNode[0];
    defs=new SymbolNode[0];
    if (heirs[nextTok].getKind() == TLAplusParserConstants.OMITTED) {
      omitted=true;
    }
    ;
  }
  ;
  return new LeafProofNode(stn,facts,defs,omitted);
}","private final LeafProofNode generateLeafProof(TreeNode stn,ModuleNode cm) throws AbortException {
  TreeNode heirs[]=stn.heirs();
  LevelNode[] facts;
  SymbolNode[] defs;
  int nextTok=0;
  boolean omitted=false;
  if (heirs[0].getKind() == TLAplusParserConstants.PROOF) {
    nextTok++;
  }
  ;
  boolean isOnly=false;
  if (heirs[nextTok].getKind() == TLAplusParserConstants.BY) {
    UseOrHideNode uh=generateUseOrHide(stn,cm);
    isOnly=uh.isOnly;
    facts=uh.facts;
    defs=uh.defs;
    if (facts.length + defs.length == 0) {
      errors.addError(stn.getLocation(),""String_Node_Str"");
    }
    ;
  }
 else {
    facts=new LevelNode[0];
    defs=new SymbolNode[0];
    if (heirs[nextTok].getKind() == TLAplusParserConstants.OMITTED) {
      omitted=true;
    }
    ;
  }
  ;
  return new LeafProofNode(stn,facts,defs,omitted,isOnly);
}",0.967623701893708
136117,"/** 
 * The constructor.                                                       
 */
public LeafProofNode(TreeNode stn,LevelNode[] theFacts,SymbolNode[] theDefs,boolean omit){
  super(LeafProofKind,stn);
  this.facts=theFacts;
  this.defs=theDefs;
  this.omitted=omit;
}","/** 
 * The constructor.                                                       
 */
public LeafProofNode(TreeNode stn,LevelNode[] theFacts,SymbolNode[] theDefs,boolean omit,boolean only){
  super(LeafProofKind,stn);
  this.facts=theFacts;
  this.defs=theDefs;
  this.omitted=omit;
  this.onlyFlag=only;
}",0.9389179755671904
136118,"public String toString(int depth){
  if (depth <= 0)   return ""String_Node_Str"";
  String ret=""String_Node_Str"" + super.toString(depth) + Strings.indent(2,""String_Node_Str"");
  for (int i=0; i < this.facts.length; i++) {
    ret+=Strings.indent(4,this.facts[i].toString(depth - 1));
  }
  ;
  ret+=Strings.indent(2,""String_Node_Str"");
  for (int i=0; i < this.defs.length; i++) {
    ret+=Strings.indent(4,this.defs[i].toString(depth - 1));
  }
  ;
  ret+=Strings.indent(2,""String_Node_Str"" + this.omitted);
  return ret;
}","public String toString(int depth){
  if (depth <= 0)   return ""String_Node_Str"";
  String ret=""String_Node_Str"" + super.toString(depth) + Strings.indent(2,""String_Node_Str"");
  for (int i=0; i < this.facts.length; i++) {
    ret+=Strings.indent(4,this.facts[i].toString(depth - 1));
  }
  ;
  ret+=Strings.indent(2,""String_Node_Str"");
  for (int i=0; i < this.defs.length; i++) {
    ret+=Strings.indent(4,this.defs[i].toString(depth - 1));
  }
  ;
  ret+=Strings.indent(2,""String_Node_Str"" + this.omitted) + Strings.indent(2,""String_Node_Str"" + this.onlyFlag);
  return ret;
}",0.9509090909090908
136119,"final void addAssumption(TreeNode stn,ExprNode ass,SymbolTable st,ThmOrAssumpDefNode tadn){
  AssumeNode an=new AssumeNode(stn,ass,this,tadn);
  assumptionVec.addElement(an);
  topLevelVec.addElement(an);
}","final void addAssumption(TreeNode stn,ExprNode ass,SymbolTable st,ThmOrAssumpDefNode tadn){
  AssumeNode an=new AssumeNode(stn,ass,this,tadn);
  an.setPreComments(((SyntaxTreeNode)stn).getAttachedComments());
  assumptionVec.addElement(an);
  topLevelVec.addElement(an);
}",0.8619246861924686
136120,"final void addTheorem(TreeNode stn,LevelNode thm,ProofNode pf,ThmOrAssumpDefNode tadn){
  TheoremNode tn=new TheoremNode(stn,thm,this,pf,tadn);
  theoremVec.addElement(tn);
  topLevelVec.addElement(tn);
}","final void addTheorem(TreeNode stn,LevelNode thm,ProofNode pf,ThmOrAssumpDefNode tadn){
  TheoremNode tn=new TheoremNode(stn,thm,this,pf,tadn);
  tn.setPreComments(((SyntaxTreeNode)stn).getAttachedComments());
  theoremVec.addElement(tn);
  topLevelVec.addElement(tn);
}",0.8607594936708861
136121,"/** 
 * toString() method; part of implementation of ExploreNode interface
 */
public String toString(int depth){
  if (depth <= 0)   return ""String_Node_Str"";
  return super.toString(depth) + ""String_Node_Str"" + arity+ ""String_Node_Str""+ (originallyDefinedInModule != null ? originallyDefinedInModule.getName().toString() : ""String_Node_Str"");
}","/** 
 * toString() method; part of implementation of ExploreNode interface
 */
public String toString(int depth){
  if (depth <= 0)   return ""String_Node_Str"";
  return super.toString(depth) + ""String_Node_Str"" + arity+ ""String_Node_Str""+ (originallyDefinedInModule != null ? originallyDefinedInModule.getName().toString() : ""String_Node_Str"")+ this.PreCommentsAsString();
}",0.9611111111111112
136122,"public boolean containsValue(Object value){
  return forwardStore.containsValue(value);
}","public boolean containsValue(Object value){
  return backwardStore.containsKey(value);
}",0.9265536723163842
136123,"public Object execute(ExecutionEvent event) throws ExecutionException {
  UIHelper.getActivePage().closeAllEditors(true);
  UIHelper.switchPerspective(InitialPerspective.ID);
  Activator.getSpecManager().setSpecLoaded(null);
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  UIHelper.getActivePage().closeAllEditors(true);
  UIHelper.hideView(ProblemView.ID);
  UIHelper.switchPerspective(InitialPerspective.ID);
  Activator.getSpecManager().setSpecLoaded(null);
  return null;
}",0.7938342967244701
136124,"/** 
 * Writes contents stored in the string buffer to the file, replacing the content 
 * @param file
 * @param buffer
 * @param monitor
 * @throws CoreException
 */
public static void replaceContent(IFile file,StringBuffer buffer,IProgressMonitor monitor) throws CoreException {
  boolean force=true;
  ByteArrayInputStream stream=new ByteArrayInputStream(buffer.toString().getBytes());
  if (file.exists()) {
    file.setContents(stream,force ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY,monitor);
  }
 else {
    file.create(stream,force,monitor);
  }
}","/** 
 * Writes contents stored in the string buffer to the file, replacing the content 
 * @param file
 * @param buffer
 * @param monitor
 * @throws CoreException
 */
public static void replaceContent(IFile file,StringBuffer buffer,IProgressMonitor monitor) throws CoreException {
  boolean force=true;
  ByteArrayInputStream stream=new ByteArrayInputStream(buffer.toString().getBytes());
  if (file.exists()) {
    file.setContents(stream,force ? IResource.FORCE | IResource.KEEP_HISTORY : IResource.KEEP_HISTORY,monitor);
  }
 else {
    throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,""String_Node_Str"" + file.getName() + ""String_Node_Str""));
  }
}",0.8785942492012779
136125,"private final TLCState getNextStatesAppl(OpApplNode pred,ActionItemList acts,Context c,TLCState s0,TLCState s1,StateVec nss){
  ExprOrOpArgNode[] args=pred.getArgs();
  int alen=args.length;
  SymbolNode opNode=pred.getOperator();
  int opcode=BuiltInOPs.getOpCode(opNode.getName());
  if (opcode == 0) {
    Object val=this.lookup(opNode,c,s0,false);
    if (val instanceof OpDefNode) {
      OpDefNode opDef=(OpDefNode)val;
      opcode=BuiltInOPs.getOpCode(opDef.getName());
      if (opcode == 0) {
        Context c1=this.getOpContext(opDef,args,c,true);
        return this.getNextStates(opDef.getBody(),acts,c1,s0,s1,nss);
      }
    }
    if (val instanceof LazyValue) {
      LazyValue lv=(LazyValue)val;
      if (lv.val == null || lv.val == ValUndef) {
        return this.getNextStates(lv.expr,acts,lv.con,s0,s1,nss);
      }
      val=lv.val;
    }
    Object bval=val;
    if (alen == 0) {
      if (val instanceof MethodValue) {
        bval=((MethodValue)val).apply(EmptyArgs,EvalControl.Clear);
      }
    }
 else {
      if (val instanceof OpValue) {
        Applicable opVal=(Applicable)val;
        Value[] argVals=new Value[alen];
        for (int i=0; i < alen; i++) {
          argVals[i]=this.eval(args[i],c,s0,s1,EvalControl.Clear);
        }
        bval=opVal.apply(argVals,EvalControl.Clear);
      }
    }
    if (opcode == 0) {
      if (!(bval instanceof BoolValue)) {
        Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + bval + ""String_Node_Str""+ pred);
      }
      if (((BoolValue)bval).val) {
        return this.getNextStates(acts,s0,s1,nss);
      }
      return s1;
    }
  }
  TLCState resState=s1;
switch (opcode) {
case OPCODE_cl:
case OPCODE_land:
{
      ActionItemList acts1=acts;
      for (int i=alen - 1; i > 0; i--) {
        acts1=acts1.cons(args[i],c,i);
      }
      if (this.callStack != null)       this.callStack.push(args[0]);
      resState=this.getNextStates(args[0],acts1,c,s0,s1,nss);
      if (this.callStack != null)       this.callStack.pop();
      return resState;
    }
case OPCODE_dl:
case OPCODE_lor:
{
    for (int i=0; i < alen; i++) {
      if (this.callStack != null)       this.callStack.push(args[i]);
      resState=this.getNextStates(args[i],acts,c,s0,resState,nss);
      if (this.callStack != null)       this.callStack.pop();
    }
    return resState;
  }
case OPCODE_be:
{
  SemanticNode body=args[0];
  ContextEnumerator Enum=this.contexts(pred,c,s0,s1,EvalControl.Clear);
  Context c1;
  while ((c1=Enum.nextElement()) != null) {
    resState=this.getNextStates(body,acts,c1,s0,resState,nss);
  }
  return resState;
}
case OPCODE_bf:
{
SemanticNode body=args[0];
ContextEnumerator Enum=this.contexts(pred,c,s0,s1,EvalControl.Clear);
Context c1=Enum.nextElement();
if (c1 == null) {
  resState=this.getNextStates(acts,s0,s1,nss);
}
 else {
  ActionItemList acts1=acts;
  Context c2;
  while ((c2=Enum.nextElement()) != null) {
    acts1=acts1.cons(body,c2,-1);
  }
  resState=this.getNextStates(body,acts1,c1,s0,s1,nss);
}
return resState;
}
case OPCODE_fa:
{
Value fval=this.eval(args[0],c,s0,s1,EvalControl.KeepLazy);
if (fval instanceof FcnLambdaValue) {
FcnLambdaValue fcn=(FcnLambdaValue)fval;
if (fcn.fcnRcd == null) {
  Context c1=this.getFcnContext(fcn,args,c,s0,s1,EvalControl.Clear);
  return this.getNextStates(fcn.body,acts,c1,s0,s1,nss);
}
fval=fcn.fcnRcd;
}
if (!(fval instanceof Applicable)) {
Assert.fail(""String_Node_Str"" + fval.getKindString() + ""String_Node_Str""+ pred);
}
Applicable fcn=(Applicable)fval;
Value argVal=this.eval(args[1],c,s0,s1,EvalControl.Clear);
Value bval=fcn.apply(argVal,EvalControl.Clear);
if (!(bval instanceof BoolValue)) {
Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + pred);
}
if (((BoolValue)bval).val) {
return this.getNextStates(acts,s0,s1,nss);
}
return resState;
}
case OPCODE_aa:
{
ActionItemList acts1=acts.cons(args[1],c,-3);
return this.getNextStates(args[0],acts1,c,s0,s1,nss);
}
case OPCODE_sa:
{
this.getNextStates(args[0],acts,c,s0,s1,nss);
return this.processUnchanged(args[1],acts,c,s0,s1,nss);
}
case OPCODE_ite:
{
Value guard=this.eval(args[0],c,s0,s1,EvalControl.Clear);
if (!(guard instanceof BoolValue)) {
Assert.fail(""String_Node_Str"" + guard.getKindString() + ""String_Node_Str""+ ""String_Node_Str""+ pred);
}
if (((BoolValue)guard).val) {
return this.getNextStates(args[1],acts,c,s0,s1,nss);
}
 else {
return this.getNextStates(args[2],acts,c,s0,s1,nss);
}
}
case OPCODE_case:
{
SemanticNode other=null;
for (int i=0; i < alen; i++) {
OpApplNode pair=(OpApplNode)args[i];
ExprOrOpArgNode[] pairArgs=pair.getArgs();
if (pairArgs[0] == null) {
other=pairArgs[1];
}
 else {
Value bval=this.eval(pairArgs[0],c,s0,s1,EvalControl.Clear);
if (!(bval instanceof BoolValue)) {
Assert.fail(""String_Node_Str"" + bval.getKindString() + ""String_Node_Str""+ ""String_Node_Str""+ pairArgs[1]);
}
if (((BoolValue)bval).val) {
return this.getNextStates(pairArgs[1],acts,c,s0,s1,nss);
}
}
}
if (other == null) {
Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + pred);
}
return this.getNextStates(other,acts,c,s0,s1,nss);
}
case OPCODE_eq:
{
SymbolNode var=this.getPrimedVar(args[0],c,false);
if (var == null) {
Value bval=this.eval(pred,c,s0,s1,EvalControl.Clear);
if (!((BoolValue)bval).val) {
return resState;
}
}
 else {
UniqueString varName=var.getName();
Value lval=s1.lookup(varName);
Value rval=this.eval(args[1],c,s0,s1,EvalControl.Clear);
if (lval == null) {
resState.bind(varName,rval,pred);
resState=this.getNextStates(acts,s0,resState,nss);
resState.unbind(varName);
return resState;
}
 else if (!lval.equals(rval)) {
return resState;
}
}
return this.getNextStates(acts,s0,s1,nss);
}
case OPCODE_in:
{
SymbolNode var=this.getPrimedVar(args[0],c,false);
if (var == null) {
Value bval=this.eval(pred,c,s0,s1,EvalControl.Clear);
if (!((BoolValue)bval).val) {
return resState;
}
}
 else {
UniqueString varName=var.getName();
Value lval=s1.lookup(varName);
Value rval=this.eval(args[1],c,s0,s1,EvalControl.Clear);
if (lval == null) {
if (!(rval instanceof Enumerable)) {
Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + pred);
}
ValueEnumeration Enum=((Enumerable)rval).elements();
Value elem;
while ((elem=Enum.nextElement()) != null) {
resState.bind(varName,elem,pred);
resState=this.getNextStates(acts,s0,resState,nss);
resState.unbind(varName);
}
return resState;
}
 else if (!rval.member(lval)) {
return resState;
}
}
return this.getNextStates(acts,s0,s1,nss);
}
case OPCODE_implies:
{
Value bval=this.eval(args[0],c,s0,s1,EvalControl.Clear);
if (!(bval instanceof BoolValue)) {
Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + bval.getKindString() + ""String_Node_Str""+ pred);
}
if (((BoolValue)bval).val) {
return this.getNextStates(args[1],acts,c,s0,s1,nss);
}
 else {
return this.getNextStates(acts,s0,s1,nss);
}
}
case OPCODE_unchanged:
{
return this.processUnchanged(args[0],acts,c,s0,s1,nss);
}
case OPCODE_cdot:
{
Assert.fail(""String_Node_Str"");
return s1;
}
default :
{
Value bval=this.eval(pred,c,s0,s1,EvalControl.Clear);
if (!(bval instanceof BoolValue)) {
Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + bval + ""String_Node_Str""+ pred);
}
if (((BoolValue)bval).val) {
resState=this.getNextStates(acts,s0,s1,nss);
}
return resState;
}
}
}","private final TLCState getNextStatesAppl(OpApplNode pred,ActionItemList acts,Context c,TLCState s0,TLCState s1,StateVec nss){
  ExprOrOpArgNode[] args=pred.getArgs();
  int alen=args.length;
  SymbolNode opNode=pred.getOperator();
  int opcode=BuiltInOPs.getOpCode(opNode.getName());
  if (opcode == 0) {
    Object val=this.lookup(opNode,c,s0,false);
    if (val instanceof OpDefNode) {
      OpDefNode opDef=(OpDefNode)val;
      opcode=BuiltInOPs.getOpCode(opDef.getName());
      if (opcode == 0) {
        Context c1=this.getOpContext(opDef,args,c,true);
        return this.getNextStates(opDef.getBody(),acts,c1,s0,s1,nss);
      }
    }
    if (val instanceof LazyValue) {
      LazyValue lv=(LazyValue)val;
      if (lv.val == null || lv.val == ValUndef) {
        return this.getNextStates(lv.expr,acts,lv.con,s0,s1,nss);
      }
      val=lv.val;
    }
    Object bval=val;
    if (alen == 0) {
      if (val instanceof MethodValue) {
        bval=((MethodValue)val).apply(EmptyArgs,EvalControl.Clear);
      }
    }
 else {
      if (val instanceof OpValue) {
        Applicable opVal=(Applicable)val;
        Value[] argVals=new Value[alen];
        for (int i=0; i < alen; i++) {
          argVals[i]=this.eval(args[i],c,s0,s1,EvalControl.Clear);
        }
        bval=opVal.apply(argVals,EvalControl.Clear);
      }
    }
    if (opcode == 0) {
      if (!(bval instanceof BoolValue)) {
        Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + bval + ""String_Node_Str""+ pred);
      }
      if (((BoolValue)bval).val) {
        return this.getNextStates(acts,s0,s1,nss);
      }
      return s1;
    }
  }
  TLCState resState=s1;
switch (opcode) {
case OPCODE_cl:
case OPCODE_land:
{
      ActionItemList acts1=acts;
      for (int i=alen - 1; i > 0; i--) {
        acts1=acts1.cons(args[i],c,i);
      }
      if (this.callStack != null)       this.callStack.push(args[0]);
      resState=this.getNextStates(args[0],acts1,c,s0,s1,nss);
      if (this.callStack != null)       this.callStack.pop();
      return resState;
    }
case OPCODE_dl:
case OPCODE_lor:
{
    for (int i=0; i < alen; i++) {
      if (this.callStack != null)       this.callStack.push(args[i]);
      resState=this.getNextStates(args[i],acts,c,s0,resState,nss);
      if (this.callStack != null)       this.callStack.pop();
    }
    return resState;
  }
case OPCODE_be:
{
  SemanticNode body=args[0];
  ContextEnumerator Enum=this.contexts(pred,c,s0,s1,EvalControl.Clear);
  Context c1;
  while ((c1=Enum.nextElement()) != null) {
    resState=this.getNextStates(body,acts,c1,s0,resState,nss);
  }
  return resState;
}
case OPCODE_bf:
{
SemanticNode body=args[0];
ContextEnumerator Enum=this.contexts(pred,c,s0,s1,EvalControl.Clear);
Context c1=Enum.nextElement();
if (c1 == null) {
  resState=this.getNextStates(acts,s0,s1,nss);
}
 else {
  ActionItemList acts1=acts;
  Context c2;
  while ((c2=Enum.nextElement()) != null) {
    acts1=acts1.cons(body,c2,-1);
  }
  resState=this.getNextStates(body,acts1,c1,s0,s1,nss);
}
return resState;
}
case OPCODE_fa:
{
Value fval=this.eval(args[0],c,s0,s1,EvalControl.KeepLazy);
if (fval instanceof FcnLambdaValue) {
FcnLambdaValue fcn=(FcnLambdaValue)fval;
if (fcn.fcnRcd == null) {
  Context c1=this.getFcnContext(fcn,args,c,s0,s1,EvalControl.Clear);
  return this.getNextStates(fcn.body,acts,c1,s0,s1,nss);
}
fval=fcn.fcnRcd;
}
if (!(fval instanceof Applicable)) {
Assert.fail(""String_Node_Str"" + fval.getKindString() + ""String_Node_Str""+ pred);
}
Applicable fcn=(Applicable)fval;
Value argVal=this.eval(args[1],c,s0,s1,EvalControl.Clear);
Value bval=fcn.apply(argVal,EvalControl.Clear);
if (!(bval instanceof BoolValue)) {
Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + pred);
}
if (((BoolValue)bval).val) {
return this.getNextStates(acts,s0,s1,nss);
}
return resState;
}
case OPCODE_aa:
{
ActionItemList acts1=acts.cons(args[1],c,-3);
return this.getNextStates(args[0],acts1,c,s0,s1,nss);
}
case OPCODE_sa:
{
resState=this.getNextStates(args[0],acts,c,s0,resState,nss);
return this.processUnchanged(args[1],acts,c,s0,resState,nss);
}
case OPCODE_ite:
{
Value guard=this.eval(args[0],c,s0,s1,EvalControl.Clear);
if (!(guard instanceof BoolValue)) {
Assert.fail(""String_Node_Str"" + guard.getKindString() + ""String_Node_Str""+ ""String_Node_Str""+ pred);
}
if (((BoolValue)guard).val) {
return this.getNextStates(args[1],acts,c,s0,s1,nss);
}
 else {
return this.getNextStates(args[2],acts,c,s0,s1,nss);
}
}
case OPCODE_case:
{
SemanticNode other=null;
for (int i=0; i < alen; i++) {
OpApplNode pair=(OpApplNode)args[i];
ExprOrOpArgNode[] pairArgs=pair.getArgs();
if (pairArgs[0] == null) {
other=pairArgs[1];
}
 else {
Value bval=this.eval(pairArgs[0],c,s0,s1,EvalControl.Clear);
if (!(bval instanceof BoolValue)) {
Assert.fail(""String_Node_Str"" + bval.getKindString() + ""String_Node_Str""+ ""String_Node_Str""+ pairArgs[1]);
}
if (((BoolValue)bval).val) {
return this.getNextStates(pairArgs[1],acts,c,s0,s1,nss);
}
}
}
if (other == null) {
Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + pred);
}
return this.getNextStates(other,acts,c,s0,s1,nss);
}
case OPCODE_eq:
{
SymbolNode var=this.getPrimedVar(args[0],c,false);
if (var == null) {
Value bval=this.eval(pred,c,s0,s1,EvalControl.Clear);
if (!((BoolValue)bval).val) {
return resState;
}
}
 else {
UniqueString varName=var.getName();
Value lval=s1.lookup(varName);
Value rval=this.eval(args[1],c,s0,s1,EvalControl.Clear);
if (lval == null) {
resState.bind(varName,rval,pred);
resState=this.getNextStates(acts,s0,resState,nss);
resState.unbind(varName);
return resState;
}
 else if (!lval.equals(rval)) {
return resState;
}
}
return this.getNextStates(acts,s0,s1,nss);
}
case OPCODE_in:
{
SymbolNode var=this.getPrimedVar(args[0],c,false);
if (var == null) {
Value bval=this.eval(pred,c,s0,s1,EvalControl.Clear);
if (!((BoolValue)bval).val) {
return resState;
}
}
 else {
UniqueString varName=var.getName();
Value lval=s1.lookup(varName);
Value rval=this.eval(args[1],c,s0,s1,EvalControl.Clear);
if (lval == null) {
if (!(rval instanceof Enumerable)) {
Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + pred);
}
ValueEnumeration Enum=((Enumerable)rval).elements();
Value elem;
while ((elem=Enum.nextElement()) != null) {
resState.bind(varName,elem,pred);
resState=this.getNextStates(acts,s0,resState,nss);
resState.unbind(varName);
}
return resState;
}
 else if (!rval.member(lval)) {
return resState;
}
}
return this.getNextStates(acts,s0,s1,nss);
}
case OPCODE_implies:
{
Value bval=this.eval(args[0],c,s0,s1,EvalControl.Clear);
if (!(bval instanceof BoolValue)) {
Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + bval.getKindString() + ""String_Node_Str""+ pred);
}
if (((BoolValue)bval).val) {
return this.getNextStates(args[1],acts,c,s0,s1,nss);
}
 else {
return this.getNextStates(acts,s0,s1,nss);
}
}
case OPCODE_unchanged:
{
return this.processUnchanged(args[0],acts,c,s0,s1,nss);
}
case OPCODE_cdot:
{
Assert.fail(""String_Node_Str"");
return s1;
}
default :
{
Value bval=this.eval(pred,c,s0,s1,EvalControl.Clear);
if (!(bval instanceof BoolValue)) {
Assert.fail(""String_Node_Str"" + ""String_Node_Str"" + bval + ""String_Node_Str""+ pred);
}
if (((BoolValue)bval).val) {
resState=this.getNextStates(acts,s0,s1,nss);
}
return resState;
}
}
}",0.9979934961599668
136126,"public void createFieldEditors(Composite composite){
  algorithmFoundEditor=new BooleanFieldEditor(IPreferenceConstants.CONTAINS_PCAL_ALGORITHM,""String_Node_Str"",composite);
  addEditor(algorithmFoundEditor);
}","public void createFieldEditors(Composite composite){
  pcalParamEditor=new StringFieldEditor(IPreferenceConstants.PCAL_CAL_PARAMS,""String_Node_Str"",composite);
  addEditor(pcalParamEditor);
}",0.8478802992518704
136127,"/** 
 * (non-Javadoc) Method declared on PreferencePage
 */
public Control createContents(Composite parent){
  Control contents=super.createContents(parent);
  noDefaultAndApplyButton();
  return contents;
}","/** 
 * (non-Javadoc) Method declared on PreferencePage
 */
public Control createContents(Composite parent){
  Control contents=super.createContents(parent);
  noDefaultAndApplyButton();
  UIHelper.setHelp(contents,IHelpConstants.MODULE_PROPERTY_PAGE);
  return contents;
}",0.8625
136128,"/** 
 */
public void createFieldEditors(Composite composite){
  StringFieldEditor rootFileEditor=new StringFieldEditor(IPreferenceConstants.P_PROJECT_ROOT_FILE,""String_Node_Str"",composite);
  addEditor(rootFileEditor);
}","public void createFieldEditors(Composite composite){
  StringFieldEditor rootFileEditor=new StringFieldEditor(IPreferenceConstants.P_PROJECT_ROOT_FILE,""String_Node_Str"",composite);
  addEditor(rootFileEditor);
}",0.9791183294663574
136129,"/** 
 * Retrieves the default resolver
 * @return
 */
public static FilenameToStream getDefaultResolver(){
  return defaultResolver;
}","/** 
 * Retrieves the default resolver
 * @return always not null
 */
public static FilenameToStream getDefaultResolver(){
  if (defaultResolver == null) {
    setDefaultResolver(null);
  }
  return defaultResolver;
}",0.7236467236467237
136130,"/** 
 * Return an OpArgNode constructed from a GeneralId tree to be used in the RHS of a substitution
 */
private OpArgNode generateOpArg(SymbolNode targetSymbol,TreeNode opArgSyntaxNode,ModuleNode mn) throws AbortException {
  if (opArgSyntaxNode.isKind(N_Lambda)) {
    return new OpArgNode(generateLambda(opArgSyntaxNode,mn),opArgSyntaxNode,mn);
  }
  ;
  if (!(opArgSyntaxNode.isKind(N_GeneralId) || opArgSyntaxNode.isKind(N_GenInfixOp) || opArgSyntaxNode.isKind(N_GenPrefixOp)|| opArgSyntaxNode.isKind(N_GenNonExpPrefixOp)|| opArgSyntaxNode.isKind(N_GenPostfixOp))) {
    errors.addError(opArgSyntaxNode.getLocation(),""String_Node_Str"" + targetSymbol.getArity() + ""String_Node_Str""+ ""String_Node_Str""+ targetSymbol.getName()+ ""String_Node_Str"");
    return nullOpArg;
  }
  if (opArgSyntaxNode.getKind() == N_GeneralId) {
    if (targetSymbol.getArity() <= 0) {
      errors.addAbort(opArgSyntaxNode.getLocation(),""String_Node_Str"",true);
    }
    ;
    return (OpArgNode)selectorToNode(genIdToSelector((SyntaxTreeNode)opArgSyntaxNode),targetSymbol.getArity(),false,false,mn);
  }
  ;
  GenID genID=generateGenID(opArgSyntaxNode,mn);
  if (genID.getFullyQualifiedOp() != null && genID.getArgs().length == 0) {
    return new OpArgNode(genID.getFullyQualifiedOp(),opArgSyntaxNode,mn);
  }
 else   if (genID.getArgs().length > 0) {
    errors.addError(opArgSyntaxNode.getLocation(),""String_Node_Str"" + targetSymbol.getArity() + ""String_Node_Str""+ ""String_Node_Str""+ targetSymbol.getName()+ ""String_Node_Str"");
    return nullOpArg;
  }
 else {
    return nullOpArg;
  }
}","/** 
 * Return an OpArgNode constructed from a GeneralId tree to be used in the RHS of a substitution
 */
private OpArgNode generateOpArg(SymbolNode targetSymbol,TreeNode opArgSyntaxNode,ModuleNode mn) throws AbortException {
  if (opArgSyntaxNode.isKind(N_Lambda)) {
    return new OpArgNode(generateLambda(opArgSyntaxNode,mn),opArgSyntaxNode,mn);
  }
  ;
  if (!(opArgSyntaxNode.isKind(N_GeneralId) || opArgSyntaxNode.isKind(N_GenInfixOp) || opArgSyntaxNode.isKind(N_GenPrefixOp)|| opArgSyntaxNode.isKind(N_GenNonExpPrefixOp)|| opArgSyntaxNode.isKind(N_GenPostfixOp))) {
    errors.addError(opArgSyntaxNode.getLocation(),""String_Node_Str"" + targetSymbol.getArity() + ""String_Node_Str""+ ""String_Node_Str""+ targetSymbol.getName()+ ""String_Node_Str"");
    return nullOpArg;
  }
  if (opArgSyntaxNode.getKind() == N_GeneralId) {
    if (targetSymbol.getArity() <= 0) {
      errors.addAbort(opArgSyntaxNode.getLocation(),""String_Node_Str"",true);
    }
    ;
    LevelNode ln=selectorToNode(genIdToSelector((SyntaxTreeNode)opArgSyntaxNode),targetSymbol.getArity(),false,false,mn);
    if (!(ln instanceof OpArgNode)) {
      if (errors.getNumErrors() > 0) {
        return nullOpArg;
      }
      errors.addAbort(opArgSyntaxNode.getLocation(),""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
    ;
    return (OpArgNode)ln;
  }
  ;
  GenID genID=generateGenID(opArgSyntaxNode,mn);
  if (genID.getFullyQualifiedOp() != null && genID.getArgs().length == 0) {
    return new OpArgNode(genID.getFullyQualifiedOp(),opArgSyntaxNode,mn);
  }
 else   if (genID.getArgs().length > 0) {
    errors.addError(opArgSyntaxNode.getLocation(),""String_Node_Str"" + targetSymbol.getArity() + ""String_Node_Str""+ ""String_Node_Str""+ targetSymbol.getName()+ ""String_Node_Str"");
    return nullOpArg;
  }
 else {
    return nullOpArg;
  }
}",0.9142689371697004
136131,"public final boolean levelCheck(int itr){
  if (this.levelChecked >= itr)   return this.levelCorrect;
  levelChecked=itr;
  this.levelCorrect=true;
  for (int i=0; i < this.opDefs.length; i++) {
    if ((this.opDefs[i].getKind() != ModuleInstanceKind) && !this.opDefs[i].levelCheck(itr)) {
      this.levelCorrect=false;
    }
  }
  if (!this.body.levelCheck(itr)) {
    this.levelCorrect=false;
  }
  for (int i=0; i < this.insts.length; i++) {
    if (!this.insts[i].levelCheck(itr)) {
      this.levelCorrect=false;
    }
  }
  this.level=this.body.getLevel();
  this.levelParams=this.body.getLevelParams();
  this.allParams=this.body.getAllParams();
  this.levelConstraints.putAll(this.body.getLevelConstraints());
  for (int i=0; i < this.opDefs.length; i++) {
    if (this.opDefs[i].getKind() != ModuleInstanceKind) {
      this.levelConstraints.putAll(opDefs[i].getLevelConstraints());
    }
    ;
  }
  this.argLevelConstraints.putAll(this.body.getArgLevelConstraints());
  for (int i=0; i < this.opDefs.length; i++) {
    if (this.opDefs[i].getKind() != ModuleInstanceKind) {
      this.argLevelConstraints.putAll(opDefs[i].getArgLevelConstraints());
    }
    ;
  }
  this.argLevelParams.addAll(this.body.getArgLevelParams());
  for (int i=0; i < this.opDefs.length; i++) {
    if (this.opDefs[i].getKind() != ModuleInstanceKind) {
      FormalParamNode[] params=new FormalParamNode[0];
      if (this.opDefs[i].getKind() != ThmOrAssumpDefKind) {
        params=((OpDefNode)this.opDefs[i]).getParams();
      }
      ;
      Iterator iter=this.opDefs[i].getArgLevelParams().iterator();
      while (iter.hasNext()) {
        ArgLevelParam alp=(ArgLevelParam)iter.next();
        if (!alp.occur(params)) {
          this.argLevelParams.add(alp);
        }
      }
    }
  }
  for (int i=0; i < this.insts.length; i++) {
    this.argLevelParams.addAll(this.insts[i].getArgLevelParams());
  }
  return this.levelCorrect;
}","public final boolean levelCheck(int itr){
  if (this.levelChecked >= itr)   return this.levelCorrect;
  levelChecked=itr;
  this.levelCorrect=true;
  for (int i=0; i < this.opDefs.length; i++) {
    if ((this.opDefs[i].getKind() != ModuleInstanceKind) && !this.opDefs[i].levelCheck(itr)) {
      this.levelCorrect=false;
    }
  }
  if (!this.body.levelCheck(itr)) {
    this.levelCorrect=false;
  }
  for (int i=0; i < this.insts.length; i++) {
    if (!this.insts[i].levelCheck(itr)) {
      this.levelCorrect=false;
    }
  }
  this.level=this.body.getLevel();
  this.levelParams=(HashSet)this.body.getLevelParams().clone();
  this.allParams=(HashSet)this.body.getAllParams().clone();
  this.levelConstraints.putAll(this.body.getLevelConstraints());
  for (int i=0; i < this.opDefs.length; i++) {
    if (this.opDefs[i].getKind() != ModuleInstanceKind) {
      this.levelConstraints.putAll(opDefs[i].getLevelConstraints());
    }
    ;
  }
  this.argLevelConstraints.putAll(this.body.getArgLevelConstraints());
  for (int i=0; i < this.opDefs.length; i++) {
    if (this.opDefs[i].getKind() != ModuleInstanceKind) {
      this.argLevelConstraints.putAll(opDefs[i].getArgLevelConstraints());
    }
    ;
  }
  this.argLevelParams.addAll(this.body.getArgLevelParams());
  for (int i=0; i < this.opDefs.length; i++) {
    if (this.opDefs[i].getKind() != ModuleInstanceKind) {
      FormalParamNode[] params=new FormalParamNode[0];
      if (this.opDefs[i].getKind() != ThmOrAssumpDefKind) {
        params=((OpDefNode)this.opDefs[i]).getParams();
      }
      ;
      Iterator iter=this.opDefs[i].getArgLevelParams().iterator();
      while (iter.hasNext()) {
        ArgLevelParam alp=(ArgLevelParam)iter.next();
        if (!alp.occur(params)) {
          this.argLevelParams.add(alp);
        }
      }
    }
  }
  for (int i=0; i < this.insts.length; i++) {
    this.argLevelParams.addAll(this.insts[i].getArgLevelParams());
  }
  return this.levelCorrect;
}",0.9912641315519012
136132,"public final boolean levelCheck(int itr){
  if (this.levelChecked >= itr)   return this.levelCorrect;
  this.levelChecked=itr;
  this.levelCorrect=true;
  if (!this.body.levelCheck(itr)) {
    this.levelCorrect=false;
  }
  for (int i=0; i < this.substs.length; i++) {
    if (!this.getSubWith(i).levelCheck(itr)) {
      this.levelCorrect=false;
    }
  }
  this.level=this.body.getLevel();
  HashSet lpSet=this.body.getLevelParams();
  for (int i=0; i < this.substs.length; i++) {
    if (lpSet.contains(this.getSubFor(i))) {
      this.level=Math.max(level,this.getSubWith(i).getLevel());
    }
  }
  Iterator iter=lpSet.iterator();
  while (iter.hasNext()) {
    Object param=iter.next();
    this.levelParams.addAll(Subst.paramSet(param,this.substs));
  }
  this.allParams=this.body.getAllParams();
  this.nonLeibnizParams=this.body.getNonLeibnizParams();
  for (int i=0; i < this.substs.length; i++) {
    OpDeclNode param=substs[i].getOp();
    if (this.allParams.contains(param)) {
      this.allParams.remove(param);
      this.allParams.addAll(substs[i].getExpr().getAllParams());
      this.nonLeibnizParams.addAll(substs[i].getExpr().getNonLeibnizParams());
      if (this.nonLeibnizParams.contains(param)) {
        this.nonLeibnizParams.remove(param);
        this.nonLeibnizParams.addAll(substs[i].getExpr().getAllParams());
      }
      ;
    }
    ;
  }
  ;
  boolean isConstant=this.instantiatedModule.isConstant();
  this.levelConstraints=Subst.getSubLCSet(this.body,this.substs,isConstant,itr);
  this.argLevelConstraints=Subst.getSubALCSet(this.body,this.substs,itr);
  this.argLevelParams=Subst.getSubALPSet(this.body,this.substs);
  return this.levelCorrect;
}","public final boolean levelCheck(int itr){
  if (this.levelChecked >= itr)   return this.levelCorrect;
  this.levelChecked=itr;
  this.levelCorrect=true;
  if (!this.body.levelCheck(itr)) {
    this.levelCorrect=false;
  }
  for (int i=0; i < this.substs.length; i++) {
    if (!this.getSubWith(i).levelCheck(itr)) {
      this.levelCorrect=false;
    }
  }
  this.level=this.body.getLevel();
  HashSet lpSet=this.body.getLevelParams();
  for (int i=0; i < this.substs.length; i++) {
    if (lpSet.contains(this.getSubFor(i))) {
      this.level=Math.max(level,this.getSubWith(i).getLevel());
    }
  }
  Iterator iter=lpSet.iterator();
  while (iter.hasNext()) {
    Object param=iter.next();
    this.levelParams.addAll(Subst.paramSet(param,this.substs));
  }
  this.allParams=(HashSet)this.body.getAllParams().clone();
  this.nonLeibnizParams=(HashSet)this.body.getNonLeibnizParams().clone();
  for (int i=0; i < this.substs.length; i++) {
    OpDeclNode param=substs[i].getOp();
    if (this.allParams.contains(param)) {
      this.allParams.remove(param);
      this.allParams.addAll(substs[i].getExpr().getAllParams());
      this.nonLeibnizParams.addAll(substs[i].getExpr().getNonLeibnizParams());
      if (this.nonLeibnizParams.contains(param)) {
        this.nonLeibnizParams.remove(param);
        this.nonLeibnizParams.addAll(substs[i].getExpr().getAllParams());
      }
      ;
    }
    ;
  }
  ;
  boolean isConstant=this.instantiatedModule.isConstant();
  this.levelConstraints=Subst.getSubLCSet(this.body,this.substs,isConstant,itr);
  this.argLevelConstraints=Subst.getSubALCSet(this.body,this.substs,itr);
  this.argLevelParams=Subst.getSubALPSet(this.body,this.substs);
  return this.levelCorrect;
}",0.9900058788947678
136133,"/** 
 * The portion of the next message written by invocations of print()     not followed by an invocation of println().                          
 */
public static synchronized String[] getAllMessages(){
  int retLen=length;
  if (!nextMessage.equals(""String_Node_Str"")) {
    retLen++;
  }
  ;
  String[] ret=new String[retLen];
  System.arraycopy(messages,0,ret,0,retLen);
  if (!nextMessage.equals(""String_Node_Str"")) {
    ret[length]=nextMessage;
  }
  ;
  return ret;
}","/** 
 * Retrieves the messages send to the err and out streams
 */
public static synchronized String[] getAllMessages(){
  int retLen=length;
  if (!nextMessage.equals(""String_Node_Str"")) {
    retLen++;
  }
  String[] ret=new String[retLen];
  System.arraycopy(messages,0,ret,0,retLen);
  if (!nextMessage.equals(""String_Node_Str"")) {
    ret[length]=nextMessage;
  }
  return ret;
}",0.7851335656213705
136134,"public void println(String str){
synchronized (this.getClass()) {
    String thisMessage=ToolIO.nextMessage + str;
    ToolIO.nextMessage=""String_Node_Str"";
    if (ToolIO.messages.length == ToolIO.length) {
      String[] newMessages=new String[2 * ToolIO.messages.length];
      System.arraycopy(ToolIO.messages,0,newMessages,0,ToolIO.messages.length);
      ToolIO.messages=newMessages;
    }
    ;
    ToolIO.messages[ToolIO.length]=thisMessage;
    ToolIO.length++;
    try {
      Class.forName(""String_Node_Str"").notifyAll();
    }
 catch (    Exception e) {
    }
    ;
  }
  ;
}","/** 
 * Prints a string in to the ToolIO buffer in a separate line
 * @param str String to be printed
 */
public void println(String str){
synchronized (ToolPrintStream.class) {
    String thisMessage=ToolIO.nextMessage + str;
    ToolIO.nextMessage=""String_Node_Str"";
    if (ToolIO.messages.length == ToolIO.length) {
      String[] newMessages=new String[2 * ToolIO.messages.length];
      System.arraycopy(ToolIO.messages,0,newMessages,0,ToolIO.messages.length);
      ToolIO.messages=newMessages;
    }
    ToolIO.messages[ToolIO.length]=thisMessage;
    ToolIO.length++;
    ToolPrintStream.class.notifyAll();
  }
}",0.7831125827814569
136135,"public synchronized void print(String str){
synchronized (this.getClass()) {
    ToolIO.nextMessage=ToolIO.nextMessage + ""String_Node_Str"";
    try {
      Class.forName(""String_Node_Str"").notifyAll();
    }
 catch (    Exception e) {
    }
    ;
  }
}","/** 
 * Prints a string to the ToolIO message buffer.
 * @param str The <code>String</code> to be printed
 */
public synchronized void print(String str){
synchronized (ToolPrintStream.class) {
    ToolIO.nextMessage+=str;
    ToolPrintStream.class.notifyAll();
  }
}",0.4247104247104247
136136,"public ToolPrintStream(){
  super(new PipedOutputStream());
  ToolIO.out=this;
  ToolIO.err=this;
}","/** 
 * Constructor
 */
public ToolPrintStream(){
  super(new PipedOutputStream());
  ToolIO.out=this;
  ToolIO.err=this;
}",0.8918918918918919
136137,"public static synchronized void printAllMessages(){
  System.out.println(""String_Node_Str"");
  String[] msgs=getAllMessages();
  for (int i=0; i < msgs.length; i++) {
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str"");
    System.out.println(msgs[i]);
  }
  System.out.println(""String_Node_Str"");
}","/** 
 * Prints all messages to system out
 */
public static synchronized void printAllMessages(){
  System.out.println(""String_Node_Str"");
  String[] msgs=getAllMessages();
  for (int i=0; i < msgs.length; i++) {
    System.out.println(""String_Node_Str"" + i + ""String_Node_Str"");
    System.out.println(msgs[i]);
  }
  System.out.println(""String_Node_Str"");
}",0.9315476190476192
136138,"public static boolean setMode(int m){
  if (m == SYSTEM) {
    mode=m;
    out=System.out;
    err=System.err;
    return true;
  }
 else   if (m == TOOL) {
    mode=m;
    out=new ToolPrintStream();
    err=new ToolPrintStream();
    return true;
  }
  ;
  return false;
}","/** 
 * Set the mode and returns true if the mode argument is legal,          otherwise does nothing and returns false.
 * @param m - the mode, use {@link ToolIO#SYSTEM},  {@link ToolIO#TOOL}
 */
public static boolean setMode(int m){
  if (m == SYSTEM) {
    mode=m;
    out=System.out;
    err=System.err;
    return true;
  }
 else   if (m == TOOL) {
    mode=m;
    out=new ToolPrintStream();
    err=new ToolPrintStream();
    return true;
  }
  return false;
}",0.7289972899728997
136139,"public static synchronized void reset(){
  messages=new String[InitialMaxLength];
  length=0;
  nextMessage=""String_Node_Str"";
}","/** 
 * Resets the ToolIO and deletes the messages  the mode and user directory are not changed 
 */
public static synchronized void reset(){
  messages=new String[InitialMaxLength];
  length=0;
  nextMessage=""String_Node_Str"";
}",0.7170868347338936
136140,"public static int getMode(){
  return mode;
}","/** 
 * Returns the mode of the ToolIO
 * @return one of {@link ToolIO#SYSTEM},  {@link ToolIO#TOOL} 
 */
public static int getMode(){
  return mode;
}",0.4591836734693877
136141,"/** 
 * The level number of a proof with steps numbered <n>x is n.  The value   of proofLevelStack[proofDepth] is the level number of the current       proof.  If we have started processing a proof haven't yet determined    its level, then proofLevelStack[proofDepth] equals -1.                 
 */
private int levelOfProofStepLexeme(Token tok){
  String im=tok.image;
  if (im.substring(1,2).equals(""String_Node_Str"")) {
    return -1;
  }
  ;
  if (im.substring(1,2).equals(""String_Node_Str"")) {
    return -2;
  }
  ;
  return new Integer(im.substring(1,im.indexOf('>')));
}","/** 
 * The level number of a proof with steps numbered <n>x is n.  The value   of proofLevelStack[proofDepth] is the level number of the current       proof.  If we have started processing a proof haven't yet determined    its level, then proofLevelStack[proofDepth] equals -1.                 
 */
private int levelOfProofStepLexeme(Token tok){
  String im=tok.image;
  if (im.substring(1,2).equals(""String_Node_Str"")) {
    return -1;
  }
  ;
  if (im.substring(1,2).equals(""String_Node_Str"")) {
    return -2;
  }
  ;
  return new Integer(im.substring(1,im.indexOf('>'))).intValue();
}",0.9905741216795202
136142,"/** 
 * React on typing in fields
 */
protected synchronized void dialogChanged(){
  if (fileTextDirty) {
    String rootfilePath=getRootFilename();
    if (""String_Node_Str"".equals(rootfilePath)) {
      reportError(""String_Node_Str"");
      return;
    }
 else     if (!new File(rootfilePath).exists()) {
      reportWarning(""String_Node_Str"");
    }
 else     if (new File(rootfilePath).isDirectory()) {
      reportError(""String_Node_Str"");
      return;
    }
 else     if (!rootfilePath.endsWith(""String_Node_Str"")) {
      reportError(""String_Node_Str"");
      return;
    }
 else {
      Spec existingSpec=Activator.getSpecManager().getSpecByRootModule(rootfilePath);
      if (existingSpec != null) {
        reportError(""String_Node_Str"" + existingSpec.getName());
        return;
      }
    }
  }
  if (specNameDirty) {
    String specName=getSpecName();
    if (""String_Node_Str"".equals(specName)) {
      reportError(""String_Node_Str"");
      return;
    }
 else {
      Spec existingSpec=Activator.getSpecManager().getSpecByName(specName);
      if (existingSpec != null) {
        reportError(""String_Node_Str"" + existingSpec.getRootFilename() + ""String_Node_Str"");
        return;
      }
    }
  }
 else {
    if (fileTextDirty) {
      String moduleName=ResourceHelper.getModuleNameChecked(getRootFilename(),false);
      Spec existingSpec=Activator.getSpecManager().getSpecByName(moduleName);
      if (existingSpec != null) {
        moduleName=Activator.getSpecManager().constructSpecName(moduleName,true);
      }
      specNameText.setText(moduleName);
    }
  }
  this.setMessage(null);
  if (!fileTextDirty || !specNameDirty) {
    return;
  }
  this.setPageComplete(true);
  IDialogSettings settings=Activator.getDefault().getDialogSettings();
  settings.put(""String_Node_Str"",getRootFilename());
}","/** 
 * React on typing in fields
 */
protected synchronized void dialogChanged(){
  String rootfilePath=null;
  if (fileTextDirty) {
    rootfilePath=getRootFilename();
    if (""String_Node_Str"".equals(rootfilePath)) {
      reportError(""String_Node_Str"");
      return;
    }
 else     if (new File(rootfilePath).isDirectory()) {
      reportError(""String_Node_Str"");
      return;
    }
 else     if (!rootfilePath.endsWith(""String_Node_Str"")) {
      reportError(""String_Node_Str"");
      return;
    }
 else {
      Spec existingSpec=Activator.getSpecManager().getSpecByRootModule(rootfilePath);
      if (existingSpec != null) {
        reportError(""String_Node_Str"" + existingSpec.getName());
        return;
      }
    }
  }
  if (specNameDirty) {
    String specName=getSpecName();
    if (""String_Node_Str"".equals(specName)) {
      reportError(""String_Node_Str"");
      return;
    }
 else {
      Spec existingSpec=Activator.getSpecManager().getSpecByName(specName);
      if (existingSpec != null) {
        reportError(""String_Node_Str"" + existingSpec.getRootFilename() + ""String_Node_Str"");
        return;
      }
    }
  }
 else {
    if (fileTextDirty) {
      String moduleName=ResourceHelper.getModuleNameChecked(getRootFilename(),false);
      Spec existingSpec=Activator.getSpecManager().getSpecByName(moduleName);
      if (existingSpec != null) {
        moduleName=Activator.getSpecManager().constructSpecName(moduleName,true);
      }
      specNameText.setText(moduleName);
    }
  }
  this.setMessage(null);
  if (rootfilePath != null && !new File(rootfilePath).exists()) {
    reportWarning(""String_Node_Str"");
  }
  if (!fileTextDirty || !specNameDirty) {
    return;
  }
  this.setPageComplete(true);
  IDialogSettings settings=Activator.getDefault().getDialogSettings();
  settings.put(""String_Node_Str"",getRootFilename());
}",0.9253326092859082
136143,"/** 
 * Reports a warning to the user
 * @param message
 */
private void reportWarning(String message){
  this.setPageComplete(false);
  this.setMessage(message,DialogPage.WARNING);
}","/** 
 * Reports a warning to the user
 * @param message
 */
private void reportWarning(String message){
  this.setPageComplete(true);
  this.setMessage(message,DialogPage.WARNING);
}",0.9808219178082191
136144,"/** 
 * Processes the command line arguments
 * @return status of processing. the status 1 indicates that no errors has been detected. the status 0 indicates that no errors has been found but translation should not be started (e.G -help call) the status -1 indicates errors 
 */
private static int GetArguments(String[] args){
  int nextArg=0;
  int maxArg=args.length - 1;
  if (maxArg < 0) {
    return CommandLineError(""String_Node_Str"");
  }
  ;
  if ((args[maxArg].length() != 0) && (args[maxArg].charAt(0) == '-')) {
    if (OutputHelpMessage()) {
      return STATUS_EXIT_WITHOUT_ERROR;
    }
 else {
      return STATUS_EXIT_WITH_ERRORS;
    }
  }
  ;
  while (nextArg < maxArg) {
    String option=args[nextArg];
    if (option.equals(""String_Node_Str"")) {
      if (OutputHelpMessage()) {
        return STATUS_EXIT_WITHOUT_ERROR;
      }
 else {
        return STATUS_EXIT_WITH_ERRORS;
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.WriteASTFlag=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.SpecOption=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.MyspecOption=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Spec2Option=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Myspec2Option=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Debug=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.CheckTermination=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Nocfg=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.LabelFlag=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.ReportLabelsFlag=true;
      PcalParams.LabelFlag=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.LabelRoot=args[nextArg];
    }
 else {
      return CommandLineError(""String_Node_Str"" + option);
    }
    ;
    nextArg=nextArg + 1;
  }
  if (nextArg > maxArg) {
    return CommandLineError(""String_Node_Str"");
  }
  ;
  File file=new File(args[maxArg]);
  if (file.exists()) {
    if (file.getName().lastIndexOf(""String_Node_Str"") == -1) {
      PcalParams.TLAInputFile=file.getPath();
    }
 else {
      if (file.getName().toLowerCase().endsWith(""String_Node_Str"")) {
        PcalParams.TLAInputFile=file.getPath().substring(0,file.getPath().lastIndexOf(""String_Node_Str""));
      }
 else {
        return CommandLineError(""String_Node_Str"");
      }
    }
  }
 else {
    return CommandLineError(""String_Node_Str"");
  }
  return STATUS_OK;
}","/** 
 * Processes the command line arguments
 * @return status of processing. the status 1 indicates that no errors has been detected. the status 0 indicates that no errors has been found but translation should not be started (e.G -help call) the status -1 indicates errors 
 */
private static int GetArguments(String[] args){
  int nextArg=0;
  int maxArg=args.length - 1;
  if (maxArg < 0) {
    return CommandLineError(""String_Node_Str"");
  }
  ;
  if ((args[maxArg].length() != 0) && (args[maxArg].charAt(0) == '-')) {
    if (OutputHelpMessage()) {
      return STATUS_EXIT_WITHOUT_ERROR;
    }
 else {
      return STATUS_EXIT_WITH_ERRORS;
    }
  }
  ;
  while (nextArg < maxArg) {
    String option=args[nextArg];
    if (option.equals(""String_Node_Str"")) {
      if (OutputHelpMessage()) {
        return STATUS_EXIT_WITHOUT_ERROR;
      }
 else {
        return STATUS_EXIT_WITH_ERRORS;
      }
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.WriteASTFlag=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.SpecOption=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.MyspecOption=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Spec2Option=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Myspec2Option=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Debug=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.CheckTermination=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Nocfg=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.LabelFlag=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.ReportLabelsFlag=true;
      PcalParams.LabelFlag=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.LabelRoot=args[nextArg];
    }
 else {
      return CommandLineError(""String_Node_Str"" + option);
    }
    ;
    nextArg=nextArg + 1;
  }
  if (nextArg > maxArg) {
    return CommandLineError(""String_Node_Str"");
  }
  ;
  int dotIndex=args[maxArg].lastIndexOf(""String_Node_Str"");
  if (dotIndex == -1) {
    PcalParams.TLAInputFile=args[maxArg];
  }
 else   if (args[maxArg].substring(dotIndex).equals(""String_Node_Str"")) {
    PcalParams.TLAInputFile=args[maxArg].substring(0,dotIndex);
  }
 else {
    CommandLineError(""String_Node_Str"");
  }
  File file=new File(PcalParams.TLAInputFile + ""String_Node_Str"");
  if (file.exists()) {
  }
 else {
    return CommandLineError(""String_Node_Str"");
  }
  return STATUS_OK;
}",0.9437609841827768
136145,"/** 
 * Processes the command line arguments
 * @return status of processing. the status 1 indicates that no errors has been detected. the status 0 indicates that no errors has been found but translation should not be started (e.G -help call) the status -1 indicates errors 
 */
private static int GetArguments(String[] args){
  int nextArg=0;
  int maxArg=args.length - 1;
  if (maxArg < 0) {
    return CommandLineError(""String_Node_Str"");
  }
  ;
  if ((args[maxArg].length() != 0) && (args[maxArg].charAt(0) == '-')) {
    OutputHelpMessage();
    return STATUS_EXIT_WITHOUT_ERROR;
  }
  ;
  while (nextArg < maxArg) {
    String option=args[nextArg];
    if (option.equals(""String_Node_Str"")) {
      OutputHelpMessage();
      return STATUS_EXIT_WITHOUT_ERROR;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.WriteASTFlag=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.SpecOption=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.MyspecOption=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Spec2Option=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Myspec2Option=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Debug=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.CheckTermination=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Nocfg=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.LabelFlag=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.ReportLabelsFlag=true;
      PcalParams.LabelFlag=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.LabelRoot=args[nextArg];
    }
 else {
      return CommandLineError(""String_Node_Str"" + option);
    }
    ;
    nextArg=nextArg + 1;
  }
  if (nextArg > maxArg) {
    return CommandLineError(""String_Node_Str"");
  }
  ;
  int dotIndex=args[maxArg].indexOf(""String_Node_Str"");
  if (dotIndex == -1) {
    PcalParams.TLAInputFile=args[maxArg];
  }
 else   if (args[maxArg].substring(dotIndex).equals(""String_Node_Str"")) {
    PcalParams.TLAInputFile=args[maxArg].substring(0,dotIndex);
  }
 else {
    return CommandLineError(""String_Node_Str"");
  }
  return STATUS_OK;
}","/** 
 * Processes the command line arguments
 * @return status of processing. the status 1 indicates that no errors has been detected. the status 0 indicates that no errors has been found but translation should not be started (e.G -help call) the status -1 indicates errors 
 */
private static int GetArguments(String[] args){
  int nextArg=0;
  int maxArg=args.length - 1;
  if (maxArg < 0) {
    return CommandLineError(""String_Node_Str"");
  }
  ;
  if ((args[maxArg].length() != 0) && (args[maxArg].charAt(0) == '-')) {
    OutputHelpMessage();
    return STATUS_EXIT_WITHOUT_ERROR;
  }
  ;
  while (nextArg < maxArg) {
    String option=args[nextArg];
    if (option.equals(""String_Node_Str"")) {
      OutputHelpMessage();
      return STATUS_EXIT_WITHOUT_ERROR;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.WriteASTFlag=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.SpecOption=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.MyspecOption=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Spec2Option=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Myspec2Option=true;
      if (CheckForConflictingSpecOptions()) {
        return STATUS_EXIT_WITH_ERRORS;
      }
      ;
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.SpecFile=args[nextArg];
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Debug=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.CheckTermination=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.Nocfg=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      if (!PcalParams.FairnessOption.equals(""String_Node_Str"")) {
        return CommandLineError(""String_Node_Str"" + ""String_Node_Str"");
      }
      ;
      PcalParams.FairnessOption=""String_Node_Str"";
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.LabelFlag=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      PcalParams.ReportLabelsFlag=true;
      PcalParams.LabelFlag=true;
    }
 else     if (option.equals(""String_Node_Str"")) {
      nextArg=nextArg + 1;
      if (nextArg == maxArg) {
        return CommandLineError(""String_Node_Str"");
      }
      ;
      PcalParams.LabelRoot=args[nextArg];
    }
 else {
      return CommandLineError(""String_Node_Str"" + option);
    }
    ;
    nextArg=nextArg + 1;
  }
  if (nextArg > maxArg) {
    return CommandLineError(""String_Node_Str"");
  }
  ;
  File file=new File(args[maxArg]);
  if (file.exists()) {
    if (file.getName().lastIndexOf(""String_Node_Str"") == -1) {
      PcalParams.TLAInputFile=file.getPath();
    }
 else {
      if (file.getName().toLowerCase().endsWith(""String_Node_Str"")) {
        PcalParams.TLAInputFile=file.getPath().substring(0,file.getPath().lastIndexOf(""String_Node_Str""));
      }
 else {
        return CommandLineError(""String_Node_Str"");
      }
    }
  }
 else {
    return CommandLineError(""String_Node_Str"");
  }
  return STATUS_OK;
}",0.9540499235863474
136146,"/** 
 * Adapts a list of modules including all dependent modules and the resource itself to the form, accepted by the dependency storage
 * @param name
 * @param userModules
 * @return TODO improve the storage
 */
public static List adaptModules(String name,Vector userModules){
  Vector dependents=new Vector(userModules.size() - 1);
  for (int i=0; i < userModules.size(); i++) {
    Module module=(Module)userModules.get(i);
    if (!module.getFile().getName().equals(name)) {
      dependents.add(module.getFile().getName());
    }
  }
  return dependents;
}","/** 
 * Adapts a list of modules including all dependent modules and the resource itself to the form, accepted by the dependency storage
 * @param name
 * @param userModules
 * @return TODO improve the storage
 */
public static List adaptModules(String name,Vector userModules){
  Vector dependents=new Vector(userModules.size());
  for (int i=0; i < userModules.size(); i++) {
    Module module=(Module)userModules.get(i);
    if (!module.getFile().getName().equals(name)) {
      dependents.add(module.getFile().getName());
    }
  }
  return dependents;
}",0.9964285714285714
136147,"public void run(){
  if (UIHelper.isPerspectiveShown(ProblemsPerspective.ID)) {
    UIHelper.closeWindow(ProblemsPerspective.ID);
  }
 else {
    Spec spec=Activator.getSpecManager().getSpecLoaded();
    if (AdapterFactory.isProblemStatus(spec.getStatus())) {
      UIHelper.openPerspectiveInWindowRight(ProblemsPerspective.ID,null,ProblemsPerspective.WIDTH);
    }
  }
}","public void run(){
  if (UIHelper.isPerspectiveShown(ProblemsPerspective.ID)) {
    UIHelper.closeWindow(ProblemsPerspective.ID);
  }
 else {
    if (TLAMarkerHelper.currentSpecHasProblems()) {
      UIHelper.openPerspectiveInWindowRight(ProblemsPerspective.ID,null,ProblemsPerspective.WIDTH);
    }
  }
}",0.7869822485207101
136148,"public Object execute(ExecutionEvent event) throws ExecutionException {
  UIHelper.runUIAsync(new Runnable(){
    public void run(){
      if (UIHelper.isPerspectiveShown(ProblemsPerspective.ID)) {
        UIHelper.closeWindow(ProblemsPerspective.ID);
      }
 else {
        Spec spec=Activator.getSpecManager().getSpecLoaded();
        if (AdapterFactory.isProblemStatus(spec.getStatus())) {
          UIHelper.openPerspectiveInWindowRight(ProblemsPerspective.ID,null,ProblemsPerspective.WIDTH);
        }
      }
    }
  }
);
  return null;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  UIHelper.runUIAsync(new Runnable(){
    public void run(){
      if (UIHelper.isPerspectiveShown(ProblemsPerspective.ID)) {
        UIHelper.closeWindow(ProblemsPerspective.ID);
      }
 else {
        if (TLAMarkerHelper.currentSpecHasProblems()) {
          UIHelper.openPerspectiveInWindowRight(ProblemsPerspective.ID,null,ProblemsPerspective.WIDTH);
        }
      }
    }
  }
);
  return null;
}",0.8705882352941177
136149,"/** 
 * Encode semantic error and create the marker on the corresponding resource 
 * @param spec
 * @param errorText
 * @param severityError
 * @param monitor
 */
private void encodeSematicErrorFromString(Spec spec,String errorText,int severityError,IProgressMonitor monitor){
  IFile module=null;
  int[] val=findLineAndColumn(0,errorText);
  int beginLine=val[0];
  int beginColumn=val[1];
  int endLine=0;
  int endColumn=0;
  val=findLineAndColumn(val[2],errorText);
  if ((val[0] > beginLine) || ((val[0] == beginLine) && (val[1] >= beginColumn))) {
    endLine=val[0];
    endColumn=val[1];
  }
  int beginModuleIdx=errorText.indexOf(""String_Node_Str"");
  if (beginModuleIdx != -1) {
    beginModuleIdx=beginModuleIdx + ""String_Node_Str"".length();
    int endModuleIdx=errorText.indexOf(""String_Node_Str"",beginModuleIdx);
    if (endModuleIdx != -1) {
      module=spec.findModule(errorText.substring(beginModuleIdx,endModuleIdx));
    }
  }
  int[] coordinates=new int[]{beginLine,beginColumn,endLine,endColumn};
  if (module == null) {
    TLAMarkerHelper.installProblemMarkerOnSpec(spec,severityError,coordinates,errorText,monitor);
  }
 else {
    TLAMarkerHelper.installProblemMarkerOnModule(module,severityError,coordinates,errorText,monitor);
  }
}","/** 
 * Encode semantic error and create the marker on the corresponding resource 
 * @param spec
 * @param errorText
 * @param severityError
 * @param monitor
 */
private void encodeSematicErrorFromString(Spec spec,String errorText,int severityError,IProgressMonitor monitor){
  IFile module=null;
  int[] val=findLineAndColumn(0,errorText);
  int beginLine=val[0];
  int beginColumn=val[1];
  int endLine=0;
  int endColumn=0;
  val=findLineAndColumn(val[2],errorText);
  if ((val[0] > beginLine) || ((val[0] == beginLine) && (val[1] >= beginColumn))) {
    endLine=val[0];
    endColumn=val[1];
  }
  int beginModuleIdx=errorText.indexOf(""String_Node_Str"");
  if (beginModuleIdx != -1) {
    beginModuleIdx=beginModuleIdx + ""String_Node_Str"".length();
    int endModuleIdx=errorText.indexOf(""String_Node_Str"",beginModuleIdx);
    if (endModuleIdx != -1) {
      module=spec.findModuleFile(errorText.substring(beginModuleIdx,endModuleIdx));
    }
  }
  int[] coordinates=new int[]{beginLine,beginColumn,endLine,endColumn};
  if (module == null) {
    TLAMarkerHelper.installProblemMarkerOnSpec(spec,severityError,coordinates,errorText,monitor);
  }
 else {
    TLAMarkerHelper.installProblemMarkerOnModule(module,severityError,coordinates,errorText,monitor);
  }
}",0.9984177215189872
136150,"/** 
 * Parses console outputs produced during the run of SANY and transform them into error object, which are stored inside the specification object <br> <b>Note:</b> this method is based on the status of the spec (  {@link Spec#getStatus()}) and cleans up the error objects   {@link ParseHandler#parseErrors} and {@link ParseHandler#semanticErrors}
 * @param spec specification handle
 */
private void processParsingErrors(Spec spec,IProgressMonitor monitor){
switch (spec.getStatus()) {
case IParseConstants.SYNTAX_ERROR:
    String[] output=ToolIO.getAllMessages();
  int nextMsg=0;
while ((nextMsg < output.length) && (output[nextMsg].indexOf(""String_Node_Str"") != -1)) {
  nextMsg++;
}
if ((nextMsg != 0) && (nextMsg != output.length)) {
int parsingModuleIndex=output[nextMsg - 1].indexOf(""String_Node_Str"") + 15;
IFile module=spec.findModule(output[nextMsg - 1].substring(parsingModuleIndex,output[nextMsg - 1].indexOf(""String_Node_Str"",parsingModuleIndex + 1)));
int[] coordinates=null;
String message=output[nextMsg];
if ((message.indexOf(""String_Node_Str"") != -1) || (message.indexOf(""String_Node_Str"") != -1)) {
  int[] val=findLineAndColumn(0,message);
  int beginLine=val[0];
  int beginColumn=val[1];
  int endLine=0;
  int endColumn=0;
  val=findLineAndColumn(val[2],message);
  if ((val[0] > beginLine) || ((val[0] == beginLine) && (val[1] >= beginColumn))) {
    endLine=val[0];
    endColumn=val[1];
  }
  coordinates=new int[]{beginLine,beginColumn,endLine,endColumn};
  TLAMarkerHelper.installProblemMarkerOnModule(module,IMarker.SEVERITY_ERROR,coordinates,message,monitor);
}
 else {
  if (parseErrors != null) {
    String[] aborts=parseErrors.getAborts();
    if (aborts.length > 0) {
      message=aborts[0];
    }
  }
  if (message != null && message.indexOf(""String_Node_Str"") == -1) {
    coordinates=new int[]{-1,-1,-1,-1};
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (module == null) {
    TLAMarkerHelper.installProblemMarkerOnSpec(spec,IMarker.SEVERITY_ERROR,coordinates,message,monitor);
  }
 else {
    TLAMarkerHelper.installProblemMarkerOnModule(module,IMarker.SEVERITY_ERROR,coordinates,message,monitor);
  }
}
}
 else {
throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
}
break;
case IParseConstants.SEMANTIC_ERROR:
case IParseConstants.SEMANTIC_WARNING:
if (semanticErrors != null) {
String[][] errors={semanticErrors.getAborts(),semanticErrors.getErrors(),semanticErrors.getWarnings()};
int[] holderType={IMarker.SEVERITY_ERROR,IMarker.SEVERITY_ERROR,IMarker.SEVERITY_WARNING};
for (int j=0; j < 3; j++) {
for (int i=0; i < errors[j].length; i++) {
encodeSematicErrorFromString(spec,errors[j][i],holderType[j],monitor);
}
}
}
 else {
throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
}
break;
case IParseConstants.COULD_NOT_FIND_MODULE:
TLAMarkerHelper.installProblemMarkerOnSpec(spec,IMarker.SEVERITY_ERROR,new int[]{-1,-1,-1,-1},""String_Node_Str"",monitor);
break;
case IParseConstants.PARSED:
break;
default :
throw new RuntimeException(""String_Node_Str"" + spec.getStatus());
}
cleanUp();
}","/** 
 * First try to get the information from parser's printed output.<br> Here's what I've found out about messages when there's a parsing error. The message with the error looks like one of the following: <br> - ""Lexical error at line n, column n."" + message<br> <br> - ""***Parse Error***""\n + Message + ""at line n, column n"" <br> + Message<br> <br> - ""Parse Error\n\n Precedence conflict between<br> ops /\ in block line n, col m to line m, col<br> of module Foo and \/ "" + message<br> <br> The preceding message is<br> <br> ""Parsing module Naturals in file<br> C:\\users\lamport ...\Naturals.tla""<br> <br> which is produced by a call to ToolIO.out.println in<br> ParseUnit.parseFile<br> <br> When such a message is produced, the parseErrors just contains<br> a single abort that is useless. However, the preceding kind of<br> error message isn't produced for the following kinds of errors:<br> <br> 1. A module's file can't be read.<br> 2. There's a circular EXTENDS/INSTANCES dependency.<br> 3. The module name is different from the file name.<br> <br> The abort is ""Unknown location\n\n"" + message, where message<br> is:<br> <br> 1. ""Cannot find source file for module Foo""<br> 2. ""Circular dependency among .tla files; dependency cycle...""<br> 3. ""File name 'Foo' does not match the name 'Foobar"""" of the<br> top level module it contains.""<br> In the first two errors, the last ""Parsing module"" message does not contain the name of the module with the error, and there seems to be no way to figure out in what module the error is.<br> The first type of message also includes the following rare variants.<br> <br> - ""Error: Failed to open output file Foo\n ..."" which occurs if there's an IOException.<br> - ""Error: source file 'Foo' has apparently been deleted."" which occurs I have no idea when<br> There's also<br> - ""Could not parse module Foo from file FooBar""<br> I have no idea when that is produced.
 */
private void processParsingErrors(Spec spec,IProgressMonitor monitor){
switch (spec.getStatus()) {
case IParseConstants.SYNTAX_ERROR:
    String[] output=ToolIO.getAllMessages();
  int nextMsg=0;
while ((nextMsg < output.length) && (output[nextMsg].indexOf(""String_Node_Str"") != -1)) {
  nextMsg++;
}
if ((nextMsg != 0) && (nextMsg != output.length)) {
int parsingModuleIndex=output[nextMsg - 1].indexOf(""String_Node_Str"") + 15;
IFile module=spec.findModuleFile(output[nextMsg - 1].substring(parsingModuleIndex,output[nextMsg - 1].indexOf(""String_Node_Str"",parsingModuleIndex + 1)));
int[] coordinates=null;
String message=output[nextMsg];
if ((message.indexOf(""String_Node_Str"") != -1) || (message.indexOf(""String_Node_Str"") != -1)) {
  int[] val=findLineAndColumn(0,message);
  int beginLine=val[0];
  int beginColumn=val[1];
  int endLine=0;
  int endColumn=0;
  val=findLineAndColumn(val[2],message);
  if ((val[0] > beginLine) || ((val[0] == beginLine) && (val[1] >= beginColumn))) {
    endLine=val[0];
    endColumn=val[1];
  }
  coordinates=new int[]{beginLine,beginColumn,endLine,endColumn};
  TLAMarkerHelper.installProblemMarkerOnModule(module,IMarker.SEVERITY_ERROR,coordinates,message,monitor);
}
 else {
  if (parseErrors != null) {
    String[] aborts=parseErrors.getAborts();
    if (aborts.length > 0) {
      message=aborts[0];
    }
  }
  if (message != null && message.indexOf(""String_Node_Str"") == -1) {
    coordinates=new int[]{-1,-1,-1,-1};
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (module == null) {
    TLAMarkerHelper.installProblemMarkerOnSpec(spec,IMarker.SEVERITY_ERROR,coordinates,message,monitor);
  }
 else {
    TLAMarkerHelper.installProblemMarkerOnModule(module,IMarker.SEVERITY_ERROR,coordinates,message,monitor);
  }
}
}
 else {
throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
}
break;
case IParseConstants.SEMANTIC_ERROR:
case IParseConstants.SEMANTIC_WARNING:
if (semanticErrors != null) {
String[][] errors={semanticErrors.getAborts(),semanticErrors.getErrors(),semanticErrors.getWarnings()};
int[] holderType={IMarker.SEVERITY_ERROR,IMarker.SEVERITY_ERROR,IMarker.SEVERITY_WARNING};
for (int j=0; j < 3; j++) {
for (int i=0; i < errors[j].length; i++) {
encodeSematicErrorFromString(spec,errors[j][i],holderType[j],monitor);
}
}
}
 else {
throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
}
break;
case IParseConstants.COULD_NOT_FIND_MODULE:
TLAMarkerHelper.installProblemMarkerOnSpec(spec,IMarker.SEVERITY_ERROR,new int[]{-1,-1,-1,-1},""String_Node_Str"",monitor);
break;
case IParseConstants.PARSED:
break;
default :
throw new RuntimeException(""String_Node_Str"" + spec.getStatus());
}
cleanUp();
}",0.7098613450822858
136151,"/** 
 * Calls SANY, that parses the root module. <br> <b>Note:</b> This method fills the error objects   {@link ParseHandler#parseErrors} and{@link ParseHandler#semanticErrors}. Call   {@link ParseHandler#processParsingErrors(Spec)} to store thisinformation in the specification handle
 * @param doSemanticAnalysis if true, the semantical phase will be started
 * @param rootFilename filename of the root module
 * @return status of parsing, one of the {@link IParseConstants} constants
 */
private int parseMainModule(boolean doSemanticAnalysis,Spec spec){
  String rootFilename=spec.getRootFilename();
  this.cleanUp();
  int specStatus=0;
  PrintStream outputStr=ToolIO.err;
  SpecObj moduleSpec=new SpecObj(ResourceHelper.getModuleName(rootFilename),new RCPNameToFileIStream(null));
  ToolIO.reset();
  ToolIO.setMode(ToolIO.TOOL);
  try {
    SANY.frontEndInitialize(moduleSpec,outputStr);
    SANY.frontEndParse(moduleSpec,outputStr);
    if (doSemanticAnalysis) {
      SANY.frontEndSemanticAnalysis(moduleSpec,outputStr,true);
    }
  }
 catch (  InitException e) {
    specStatus=IParseConstants.UNKNOWN_ERROR;
    return specStatus;
  }
catch (  ParseException e) {
    specStatus=IParseConstants.SYNTAX_ERROR;
    parseErrors=moduleSpec.getParseErrors();
  }
catch (  SemanticException e) {
    specStatus=IParseConstants.SEMANTIC_ERROR;
  }
  if (specStatus > IParseConstants.SYNTAX_ERROR) {
    semanticErrors=moduleSpec.semanticErrors;
    if (semanticErrors != null) {
      if (semanticErrors.getNumMessages() > 0) {
        if (semanticErrors.isSuccess()) {
          specStatus=IParseConstants.SEMANTIC_WARNING;
        }
 else {
          specStatus=IParseConstants.SEMANTIC_ERROR;
        }
      }
    }
  }
  Vector userModules=new Vector();
  Vector standardModules=new Vector();
  boolean rootModuleFound=false;
  Enumeration enumerate=moduleSpec.parseUnitContext.keys();
  while (enumerate.hasMoreElements()) {
    String moduleName=(String)enumerate.nextElement();
    ParseUnit parseUnit=(ParseUnit)moduleSpec.parseUnitContext.get(moduleName);
    String absoluteFileName=null;
    if (parseUnit.getNis() != null) {
      File sourceFile=parseUnit.getNis().sourceFile();
      if (sourceFile != null) {
        absoluteFileName=sourceFile.getAbsolutePath();
      }
    }
    if (absoluteFileName == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Module module=new Module(absoluteFileName);
    if (specStatus > IParseConstants.SEMANTIC_ERROR) {
      ExternalModuleTable.ExternalModuleTableEntry emt=(ExternalModuleTable.ExternalModuleTableEntry)moduleSpec.getExternalModuleTable().moduleHashTable.get(UniqueString.uniqueStringOf(module.getModuleName()));
      if (emt != null) {
        module.setNode(emt.getModuleNode());
      }
    }
    if (module.getModuleName().equals(ResourceHelper.getModuleName(rootFilename))) {
      rootModuleFound=true;
    }
    if (module.isStandardModule()) {
      standardModules.addElement(module);
    }
 else {
      userModules.addElement(module);
    }
  }
  if (!rootModuleFound) {
    specStatus=IParseConstants.COULD_NOT_FIND_MODULE;
  }
  return specStatus;
}","/** 
 * Calls SANY, that parses the root module. <br> <b>Note:</b> This method fills the error objects   {@link ParseHandler#parseErrors} and{@link ParseHandler#semanticErrors}. Call   {@link ParseHandler#processParsingErrors(Spec)} to store thisinformation in the specification handle
 * @param doSemanticAnalysis if true, the semantical phase will be started
 * @param rootFilename filename of the root module
 * @return status of parsing, one of the {@link IParseConstants} constants
 */
private int parseMainModule(boolean doSemanticAnalysis,Spec spec){
  String rootFilename=spec.getRootFilename();
  this.cleanUp();
  int specStatus=0;
  SpecObj moduleSpec=new SpecObj(ResourceHelper.getModuleName(rootFilename),new RCPNameToFileIStream(null));
  ToolIO.reset();
  ToolIO.setMode(ToolIO.TOOL);
  PrintStream outputStr=ToolIO.err;
  try {
    SANY.frontEndInitialize(moduleSpec,outputStr);
    SANY.frontEndParse(moduleSpec,outputStr);
    if (doSemanticAnalysis) {
      SANY.frontEndSemanticAnalysis(moduleSpec,outputStr,true);
    }
  }
 catch (  InitException e) {
    specStatus=IParseConstants.UNKNOWN_ERROR;
    return specStatus;
  }
catch (  ParseException e) {
    specStatus=IParseConstants.SYNTAX_ERROR;
    parseErrors=moduleSpec.getParseErrors();
  }
catch (  SemanticException e) {
    specStatus=IParseConstants.SEMANTIC_ERROR;
  }
  if (specStatus > IParseConstants.SYNTAX_ERROR) {
    semanticErrors=moduleSpec.semanticErrors;
    if (semanticErrors != null) {
      if (semanticErrors.getNumMessages() > 0) {
        if (semanticErrors.isSuccess()) {
          specStatus=IParseConstants.SEMANTIC_WARNING;
        }
 else {
          specStatus=IParseConstants.SEMANTIC_ERROR;
        }
      }
    }
  }
  Vector userModules=new Vector();
  Vector standardModules=new Vector();
  boolean rootModuleFound=false;
  Enumeration enumerate=moduleSpec.parseUnitContext.keys();
  while (enumerate.hasMoreElements()) {
    String moduleName=(String)enumerate.nextElement();
    ParseUnit parseUnit=(ParseUnit)moduleSpec.parseUnitContext.get(moduleName);
    String absoluteFileName=null;
    if (parseUnit.getNis() != null) {
      File sourceFile=parseUnit.getNis().sourceFile();
      if (sourceFile != null) {
        absoluteFileName=sourceFile.getAbsolutePath();
      }
    }
    if (absoluteFileName == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    Module module=new Module(absoluteFileName);
    ResourceHelper.getLinkedFile(spec.getProject(),module.getAbsolutePath(),true);
    if (specStatus > IParseConstants.SEMANTIC_ERROR) {
      ExternalModuleTable.ExternalModuleTableEntry emt=(ExternalModuleTable.ExternalModuleTableEntry)moduleSpec.getExternalModuleTable().moduleHashTable.get(UniqueString.uniqueStringOf(module.getModuleName()));
      if (emt != null) {
        module.setNode(emt.getModuleNode());
      }
    }
    if (module.getModuleName().equals(ResourceHelper.getModuleName(rootFilename))) {
      rootModuleFound=true;
    }
    if (module.isStandardModule()) {
      standardModules.addElement(module);
    }
 else {
      userModules.addElement(module);
    }
  }
  if (!rootModuleFound) {
    specStatus=IParseConstants.COULD_NOT_FIND_MODULE;
  }
  return specStatus;
}",0.975777465228942
136152,"/** 
 * Constructor
 */
public WorkspaceSpecManager(){
  IWorkspace ws=ResourcesPlugin.getWorkspace();
  IProject[] projects=ws.getRoot().getProjects();
  try {
    Spec spec=null;
    for (int i=0; i < projects.length; i++) {
      if (projects[i].isOpen() && projects[i].hasNature(TLANature.ID)) {
        spec=new Spec(projects[i]);
        addSpec(spec);
      }
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  ws.addResourceChangeListener(this);
}","/** 
 * Constructor
 */
public WorkspaceSpecManager(){
  IWorkspace ws=ResourcesPlugin.getWorkspace();
  IProject[] projects=ws.getRoot().getProjects();
  try {
    Spec spec=null;
    for (int i=0; i < projects.length; i++) {
      if (projects[i].isOpen()) {
        if (projects[i].hasNature(TLANature.ID)) {
          spec=new Spec(projects[i]);
          addSpec(spec);
        }
      }
 else {
        projects[i].delete(true,null);
      }
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
  ws.addResourceChangeListener(this);
}",0.913508260447036
136153,"public void setSpecLoaded(Spec loadedSpec){
  this.loadedSpec=loadedSpec;
  if (this.loadedSpec != null) {
    this.loadedSpec.setLastModified();
    Activator.getParserRegistry().parseResultChanged(this.loadedSpec.getStatus());
  }
 else {
    Activator.getParserRegistry().parseResultChanged(IParseConstants.UNKNOWN);
  }
}","public void setSpecLoaded(Spec loadedSpec){
  this.loadedSpec=loadedSpec;
  if (this.loadedSpec != null) {
    this.loadedSpec.setLastModified();
  }
}",0.634453781512605
136154,"public static String PeekAtAlgToken(int tokNum){
  while ((LATsize < tokNum)) {
    charReader.peek();
    curTokCol[LATsize]=charReader.getColumnNumber();
    curTokLine[LATsize]=charReader.getLineNumber();
    LAT[LATsize]=Tokenize.GetAlgorithmToken(charReader);
    LATsize=LATsize + 1;
  }
  ;
  return LAT[tokNum - 1];
}","public static String PeekAtAlgToken(int tokNum){
  while ((LATsize < tokNum)) {
    if (charReader.peek().equals(""String_Node_Str"")) {
      PcalDebug.ReportError(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + (curTokLine[LATsize] + 1) + ""String_Node_Str""+ (curTokCol[LATsize] + 1));
    }
    ;
    curTokCol[LATsize]=charReader.getColumnNumber();
    curTokLine[LATsize]=charReader.getLineNumber();
    LAT[LATsize]=Tokenize.GetAlgorithmToken(charReader);
    LATsize=LATsize + 1;
  }
  ;
  return LAT[tokNum - 1];
}",0.7593457943925234
136155,"/** 
 * Update all the type users (children) to the latest version of the parent library. Also update extension owners. <p> Library Provider node lists all of the parent's type users that are assigned types from the owner library.
 * @param providerLibNode
 */
private void updateLibrary(LibraryProviderNode providerLibNode){
  DefaultRepositoryController rc=(DefaultRepositoryController)mc.getRepositoryController();
  LibraryNode libToUpdate=(LibraryNode)providerLibNode.getParent();
  LibraryNode libProvidingTypes=providerLibNode.getOwner();
  List<TypeUser> usersToUpdate=new ArrayList<TypeUser>();
  List<ExtensionOwner> extensionsToUpdate=new ArrayList<ExtensionOwner>();
  List<ContextualFacetNode> facetsToUpdate=new ArrayList<ContextualFacetNode>();
  for (  Node user : providerLibNode.getChildren(false))   if (user instanceof TypeUserNode) {
    if (!usersToUpdate.contains(((TypeUserNode)user).getOwner()))     usersToUpdate.add(((TypeUserNode)user).getOwner());
  }
 else   if (user instanceof ExtensionUserNode) {
    if (!extensionsToUpdate.contains(((ExtensionUserNode)user).getOwner()))     extensionsToUpdate.add(((ExtensionUserNode)user).getOwner());
  }
 else   if (user instanceof ContextualFacetUserNode) {
    if (!facetsToUpdate.contains(((ContextualFacetUserNode)user).getOwner()))     facetsToUpdate.add(((ContextualFacetUserNode)user).getOwner());
  }
  if (usersToUpdate.isEmpty() && extensionsToUpdate.isEmpty() && facetsToUpdate.isEmpty()) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String question=""String_Node_Str"";
  String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int result=DialogUserNotifier.openQuestionWithButtons(""String_Node_Str"",question,buttons);
  boolean includeDrafts=false;
  if (result == 0)   includeDrafts=true;
 else   if (result == 2)   return;
  LibraryNode replacement=null;
  try {
    replacement=rc.getLatestVersion(libProvidingTypes,includeDrafts);
  }
 catch (  RepositoryException e1) {
    if (replacement == null)     try {
      replacement=rc.getLatestVersion(libProvidingTypes,includeDrafts);
    }
 catch (    RepositoryException e) {
      DialogUserNotifier.openWarning(""String_Node_Str"",e.getLocalizedMessage());
      return;
    }
  }
  if (replacement == null || replacement == libProvidingTypes) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  question=""String_Node_Str"" + libProvidingTypes.getNameWithPrefix() + ""String_Node_Str""+ replacement.getNameWithPrefix()+ ""String_Node_Str"";
  if (DialogUserNotifier.openQuestion(""String_Node_Str"",question)) {
    replacement.replaceAllUsers(usersToUpdate);
    replacement.replaceAllExtensions(extensionsToUpdate);
    replacement.replaceAllContributors(facetsToUpdate);
  }
  libToUpdate.getWhereUsedHandler().refreshUsedByNode();
  mc.refresh(libToUpdate);
}","/** 
 * Update all the type users (children) to the latest version of the parent library. Also update extension owners. <p> Library Provider node lists all of the parent's type users that are assigned types from the owner library.
 * @param providerLibNode - owner is the library that provides types to the parent lib
 */
private void updateLibrary(LibraryProviderNode providerLibNode){
  DefaultRepositoryController rc=(DefaultRepositoryController)mc.getRepositoryController();
  LibraryNode libToUpdate=(LibraryNode)providerLibNode.getParent();
  LibraryNode libProvidingTypes=providerLibNode.getOwner();
  LibraryUsersToUpdateHelper toUpdate=new LibraryUsersToUpdateHelper(providerLibNode);
  if (toUpdate.isEmpty()) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String question=""String_Node_Str"";
  String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int result=DialogUserNotifier.openQuestionWithButtons(""String_Node_Str"",question,buttons);
  boolean includeDrafts=false;
  if (result == 0)   includeDrafts=true;
 else   if (result == 2)   return;
  LibraryNode replacement=null;
  try {
    replacement=rc.getLatestVersion(libProvidingTypes,includeDrafts);
  }
 catch (  RepositoryException e1) {
    if (replacement == null)     try {
      replacement=rc.getLatestVersion(libProvidingTypes,includeDrafts);
    }
 catch (    RepositoryException e) {
      DialogUserNotifier.openWarning(""String_Node_Str"",e.getLocalizedMessage());
      return;
    }
  }
  if (replacement == null || replacement == libProvidingTypes) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  question=""String_Node_Str"" + libProvidingTypes.getNameWithPrefix() + ""String_Node_Str""+ replacement.getNameWithPrefix()+ ""String_Node_Str"";
  if (DialogUserNotifier.openQuestion(""String_Node_Str"",question)) {
    toUpdate.replace(replacement);
  }
  libToUpdate.getWhereUsedHandler().refreshUsedByNode();
  mc.refresh(libToUpdate);
}",0.2929108267316677
136156,"/** 
 * For each passed library find the latest version from the same repository. If different, add the passed library and latest version in the returned map. WARNING: each library will invoke a slow process on the repository
 * @param usedLibs
 * @param includeDrafts if true, draft libraries will be included as replacement candidate
 * @return maps of libraries, key is passed library and value is later version of library.
 * @throws RepositoryException
 */
@Deprecated public HashMap<LibraryNode,LibraryNode> getVersionUpdateMap(List<LibraryNode> usedLibs,boolean includeDrafts) throws RepositoryException {
  HashMap<LibraryNode,LibraryNode> replacementMap=new HashMap<>();
  HashMap<LibraryNode,RepositoryItem> itemMap=new HashMap<>();
  List<RepositoryItem> ll;
  for (  LibraryNode lib : usedLibs) {
    ProjectItem projItem=lib.getProjectItem();
    Repository lRepo=lib.getProjectItem().getRepository();
    String baseNS=projItem.getBaseNamespace();
    if (projItem == null || lRepo == null || baseNS.isEmpty())     continue;
    ll=lRepo.listItems(baseNS,true,includeDrafts);
    if (ll.size() > 0) {
      for (      RepositoryItem latest : ll)       if (latest != null && latest.getLibraryName().equals(projItem.getLibraryName()) && !latest.getNamespace().equals(projItem.getNamespace()))       itemMap.put(lib,latest);
    }
  }
  HashMap<String,LibraryNode> libraryMap=new HashMap<>();
  for (  LibraryNode lib : ModelNode.getAllUserLibraries())   libraryMap.put(lib.getNameWithPrefix(),lib);
  for (  Entry<LibraryNode,RepositoryItem> entry : itemMap.entrySet()) {
    String entryNwPrefix=entry.getKey().getNameWithPrefix();
    String latestNS=entry.getValue().getNamespace();
    String latestNwPrefix=entry.getKey().getNsHandler().getPrefix(latestNS) + ""String_Node_Str"" + entry.getValue().getLibraryName();
    if (libraryMap.containsKey(latestNwPrefix))     replacementMap.put(libraryMap.get(entryNwPrefix),libraryMap.get(latestNwPrefix));
 else {
      String message=""String_Node_Str"" + entry.getValue().getNamespace() + ""String_Node_Str""+ entry.getValue().getLibraryName()+ ""String_Node_Str"";
      mc.postStatus(message);
      ProjectItem newPI=mc.getProjectController().add(entry.getKey().getProject(),entry.getValue());
      for (      LibraryNode lib : ModelNode.getAllUserLibraries())       if (lib.getNameWithPrefix().equals(latestNwPrefix))       replacementMap.put(libraryMap.get(entryNwPrefix),lib);
    }
  }
  for (  Entry<LibraryNode,LibraryNode> entry : replacementMap.entrySet())   LOGGER.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
  return replacementMap;
}","/** 
 * For each passed library find the latest version from the same repository. If different, add the passed library and latest version in the returned map. WARNING: each library will invoke a slow process on the repository
 * @param usedLibs
 * @param includeDrafts if true, draft libraries will be included as replacement candidate
 * @return maps of libraries, key is passed library and value is later version of library.
 * @throws RepositoryException
 */
@Deprecated public HashMap<LibraryNode,LibraryNode> getVersionUpdateMap(List<LibraryNode> usedLibs,boolean includeDrafts) throws RepositoryException {
  HashMap<LibraryNode,LibraryNode> replacementMap=new HashMap<>();
  return replacementMap;
}",0.4112372982665869
136157,"/** 
 * {@link org.opentravel.schemas.actions.VersionMajorAction#run()}
 */
@Override public LibraryNode createMajorVersion(LibraryNode library){
}","/** 
 * {@link org.opentravel.schemas.actions.VersionMajorAction#run()}
 */
@Override public LibraryNode createMajorVersion(LibraryNode library){
  if (!versionPreparation(library))   return null;
  RepositoryNode rn=find(library.getProjectItem().getRepository());
  MajorVersionHelper mvh=new MajorVersionHelper(library.getProject().getTLProject());
  TLLibrary tlMajor=null;
  LibraryNode newLib=null;
  LibraryChainNode lcn=null;
  ProjectNode thisProject=library.getProject();
  try {
    tlMajor=mvh.createNewMajorVersion(library.getTLLibrary());
  }
 catch (  VersionSchemeException e) {
    postRepoException(e);
  }
catch (  ValidationException e) {
    postRepoException(e);
  }
catch (  LibrarySaveException e) {
    postRepoException(e);
  }
catch (  IllegalArgumentException e) {
    postRepoException(e);
  }
  if (tlMajor != null) {
    newLib=new LibraryNode(tlMajor,library.getProject());
    List<LibraryChainNode> chains=manage(rn,Collections.singletonList(newLib));
    lcn=findLibrary(chains,newLib.getLibrary().getName());
    if (lcn != null) {
      LibraryModelManager libMrg=Node.getLibraryModelManager();
      ProjectController pc=mc.getProjectController();
      List<ProjectNode> pList=libMrg.findProjects(library);
      LibraryNavNode lnnToRemove=null;
      for (      ProjectNode pn : pList) {
        if (pn != thisProject)         new LibraryNavNode(lcn,pn);
      }
      lock(newLib);
    }
    sync(rn);
  }
  return newLib;
}",0.1824953445065177
136158,"/** 
 * Prepare the library for new version. Preparation includes committing, unlocking and finalizing. User interactions is sought before making changes.
 * @param library
 * @return true if ready.
 */
private boolean versionPreparation(LibraryNode library){
  if (library.getProject() == null) {
    postRepoError(""String_Node_Str"");
    return false;
  }
  if (library.getProjectItem() == null) {
    postRepoError(""String_Node_Str"");
    return false;
  }
  RepositoryNode rn=find(library.getProjectItem().getRepository());
  if (rn == null) {
    postRepoError(""String_Node_Str"");
    return false;
  }
  if (!library.getStatus().equals(TLLibraryStatus.FINAL)) {
    postRepoError(""String_Node_Str"");
    return false;
  }
  if (!library.isReadyToVersion()) {
    postRepoError(""String_Node_Str"");
    return false;
  }
  if (library.getChain() == null) {
    LOGGER.warn(""String_Node_Str"" + library);
    return false;
  }
  String msgID=""String_Node_Str"";
  boolean isOK=false;
  boolean editable=library.getEditStatus().equals(NodeEditStatus.FULL);
  msgID=""String_Node_Str"";
  isOK=DialogUserNotifier.openConfirm(Messages.getString(""String_Node_Str""),Messages.getString(msgID));
  return isOK;
}","/** 
 * Prepare the library for new version. Preparation includes committing, unlocking and finalizing. User interactions is sought before making changes.
 * @param library
 * @return true if ready.
 */
private boolean versionPreparation(LibraryNode library){
  if (library == null) {
    LOGGER.warn(""String_Node_Str"");
    return false;
  }
  if (library.getProject() == null) {
    postRepoError(""String_Node_Str"");
    return false;
  }
  if (library.getProjectItem() == null) {
    postRepoError(""String_Node_Str"");
    return false;
  }
  RepositoryNode rn=find(library.getProjectItem().getRepository());
  if (rn == null) {
    postRepoError(""String_Node_Str"");
    return false;
  }
  if (!library.getStatus().equals(TLLibraryStatus.FINAL)) {
    postRepoError(""String_Node_Str"");
    return false;
  }
  if (!library.isReadyToVersion()) {
    postRepoError(""String_Node_Str"");
    return false;
  }
  if (library.getChain() == null) {
    LOGGER.warn(""String_Node_Str"" + library);
    return false;
  }
  String msgID=""String_Node_Str"";
  boolean isOK=false;
  boolean editable=library.getEditStatus().equals(NodeEditStatus.FULL);
  msgID=""String_Node_Str"";
  isOK=DialogUserNotifier.openConfirm(Messages.getString(""String_Node_Str""),Messages.getString(msgID));
  return isOK;
}",0.5042151746286632
136159,"@Override public void processValueChangeEvent(ValueChangeEvent<?,?> event){
  super.processValueChangeEvent(event);
switch (event.getType()) {
case LOCATION_MODIFIED:
case PARAM_GROUP_ADDED:
case PARAM_GROUP_MODIFIED:
case PARAM_GROUP_REMOVED:
case PAYLOAD_TYPE_MODIFIED:
case FACET_REF_MODIFIED:
    if (thisNode instanceof ActionRequest)     ((ActionRequest)thisNode).setPathTemplate();
  break;
case BASE_PATH_MODIFIED:
default :
}
}","@Override public void processValueChangeEvent(ValueChangeEvent<?,?> event){
  LOGGER.debug(""String_Node_Str"" + event.getType());
  super.processValueChangeEvent(event);
switch (event.getType()) {
case LOCATION_MODIFIED:
case PARAM_GROUP_ADDED:
case PARAM_GROUP_MODIFIED:
case PARAM_GROUP_REMOVED:
case PAYLOAD_TYPE_MODIFIED:
case FACET_REF_MODIFIED:
    if (thisNode instanceof ActionRequest)     ((ActionRequest)thisNode).setPathTemplate();
  break;
case BASE_PATH_MODIFIED:
default :
}
}",0.9427027027027028
136160,"/** 
 * Set Assigned Type. Sets the Assigned type node and add this owner to that user list via where used listener. This method assures there is a target and that the owner is editable. Sets the TLModel type If the target represents a complex type (BO, Core, facet, alias) then the owner's name is changed.
 * @return true if assignment could be made, false otherwise
 */
public boolean set(TypeProvider target){
  if (owner == null || !owner.isEditable())   return false;
  if (target instanceof SharedFacetNode) {
    target=(TypeProvider)target.getParent();
    LOGGER.debug(""String_Node_Str"");
  }
  TypeProvider oldProvider=owner.getAssignedType();
  if (owner.getRequiredType() != null)   return false;
  if (oldProvider == target) {
    if (!target.getWhereAssigned().contains(owner)) {
      target.addTypeUser(owner);
    }
    if (target != ModelNode.getUnassignedNode())     return true;
  }
  if (target == null || target == ModelNode.getUnassignedNode()) {
    oldProvider.removeWhereAssigned(owner);
    ModelNode.getUnassignedNode().addTypeUser(owner);
    return false;
  }
  TLModelElement tlTarget=target.getTLModelObject();
  if (target.getLibrary() != null && target.getLibrary().isBuiltIn() && target.getLibrary().getNamespace().equals(XMLConstants.W3C_XML_SCHEMA_NS_URI))   if (target.getXsdObjectHandler() != null)   tlTarget=target.getXsdObjectHandler().getTLLibraryMember();
  boolean result=owner.setAssignedTLType(tlTarget);
  if (result) {
    ModelNode.getUnassignedNode().removeWhereAssigned(owner);
    oldProvider.removeWhereAssigned(owner);
    target.addTypeUser(owner);
  }
  if (get().getTLModelObject() != tlTarget) {
    TypeProvider actual=get();
    if (actual.getXsdObjectHandler() == null || actual.getXsdObjectHandler().getTLLibraryMember() != tlTarget) {
      LOGGER.debug(""String_Node_Str"" + ((Node)target).getNameWithPrefix() + ""String_Node_Str""+ owner+ ""String_Node_Str""+ ((Node)get()).getNameWithPrefix());
      return false;
    }
  }
  return result;
}","/** 
 * Set Assigned Type. Sets the Assigned type node and add this owner to that user list via where used listener. This method assures there is a target and that the owner is editable. Sets the TLModel type If the target represents a complex type (BO, Core, facet, alias) then the owner's name is changed.
 * @return true if assignment could be made, false otherwise
 */
public boolean set(TypeProvider target){
  if (owner == null || !owner.isEditable())   return false;
  if (target instanceof SharedFacetNode) {
    target=(TypeProvider)target.getParent();
    LOGGER.debug(""String_Node_Str"");
  }
  TypeProvider oldProvider=owner.getAssignedType();
  if (owner.getRequiredType() != null)   return false;
  if (oldProvider == target) {
    if (!target.getWhereAssigned().contains(owner)) {
      target.addTypeUser(owner);
    }
    if (target != ModelNode.getUnassignedNode())     return true;
  }
  if (target == null || target == ModelNode.getUnassignedNode()) {
    oldProvider.removeWhereAssigned(owner);
    ModelNode.getUnassignedNode().addTypeUser(owner);
    return false;
  }
  TLModelElement tlTarget=target.getTLModelObject();
  if (target.getLibrary() != null && target.getLibrary().isBuiltIn() && target.getLibrary().getNamespace().equals(XMLConstants.W3C_XML_SCHEMA_NS_URI))   if (target.getXsdObjectHandler() != null)   tlTarget=target.getXsdObjectHandler().getTLLibraryMember();
  boolean result=owner.setAssignedTLType(tlTarget);
  if (result) {
    ModelNode.getUnassignedNode().removeWhereAssigned(owner);
    oldProvider.removeWhereAssigned(owner);
    target.addTypeUser(owner);
  }
 else   LOGGER.debug(""String_Node_Str"" + target + ""String_Node_Str""+ owner);
  if (get().getTLModelObject() != tlTarget) {
    TypeProvider actual=get();
    if (actual.getXsdObjectHandler() == null || actual.getXsdObjectHandler().getTLLibraryMember() != tlTarget) {
      LOGGER.debug(""String_Node_Str"" + ((Node)target).getNameWithPrefix() + ""String_Node_Str""+ owner+ ""String_Node_Str""+ ((Node)get()).getNameWithPrefix());
      return false;
    }
  }
  return result;
}",0.8671397112796673
136161,"/** 
 * If view is set return the current node from the view. Use navigator node otherwise.
 */
private void setSelected(){
  if (mc.getCurrentNode_NavigatorView() instanceof BusinessObjectNode)   predicate=(BusinessObjectNode)mc.getCurrentNode_NavigatorView();
  if (view != null)   selectedNode=(Node)view.getCurrentNode();
 else   selectedNode=mc.getCurrentNode_NavigatorView();
}","/** 
 * If view is set return the current node from the view. Use navigator node otherwise.
 */
private void setSelected(){
  if (mc.getCurrentNode_NavigatorView() instanceof BusinessObjectNode)   predicate=(BusinessObjectNode)mc.getCurrentNode_NavigatorView();
  selectedNode=getFirstSelected();
  if (selectedNode == null)   if (view != null)   selectedNode=(Node)view.getCurrentNode();
 else   selectedNode=mc.getCurrentNode_NavigatorView();
}",0.9240048250904704
136162,"private void postWarning(CommandType type){
switch (type) {
case DELETE:
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
  break;
default :
DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
}
}","private void postWarning(CommandType type){
switch (type) {
case DELETE:
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
  break;
case RESOURCE:
DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
break;
default :
DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
}
}",0.8389380530973451
136163,"@Override public boolean isEnabled(){
  Node n=mc.getGloballySelectNode();
  Node rn=mc.getCurrentNode_ResourceView();
  return true;
}","@Override public boolean isEnabled(){
  Node n=getFirstSelected();
  Node rn=mc.getCurrentNode_ResourceView();
  return n.isEditable();
}",0.875
136164,"@Override public Object execute(ExecutionEvent exEvent) throws ExecutionException {
  String filePathParam=exEvent.getParameter(""String_Node_Str"");
  view=OtmRegistry.getResourceView();
  setSelected();
  if (selectedNode == null)   return null;
  runCommand(getCmdType(exEvent.getCommand().getId()));
  if (view != null)   view.activate();
  return null;
}","@Override public Object execute(ExecutionEvent exEvent) throws ExecutionException {
  view=OtmRegistry.getResourceView();
  setSelected();
  if (selectedNode == null)   return null;
  runCommand(getCmdType(exEvent.getCommand().getId()));
  if (view != null)   view.activate();
  return null;
}",0.9015384615384616
136165,"/** 
 * @return true if older than version 1.6 OR user confirms saving
 */
public static boolean post16UpgradeConfirmation(){
  if (OTM16Upgrade.otm16Enabled) {
    if (!DialogUserNotifier.openConfirm(""String_Node_Str"",Messages.getString(""String_Node_Str"")))     return false;
    return true;
  }
  return true;
}","/** 
 * @return true if older than version 1.6 OR user confirms saving
 */
public static boolean post16UpgradeConfirmation(){
  return true;
}",0.6228070175438597
136166,"public List<Node> getAncestors(){
  List<Node> ancestors=new ArrayList<>();
  Node n=this;
  do {
    ancestors.add(n);
    n=n.getParent();
  }
 while (!(n instanceof ModelNode));
  return ancestors;
}","/** 
 * Get list of ancestors by traversing the parents of each node.
 * @return
 */
public List<Node> getAncestors(){
  List<Node> ancestors=new ArrayList<>();
  Node n=this;
  do {
    ancestors.add(n);
    n=n.getParent();
  }
 while (!(n instanceof ModelNode));
  return ancestors;
}",0.8261758691206544
136167,"protected boolean setParameterGroup(ParamGroup group){
  if (tlObj != null && tlObj.getParamGroup() != null)   ((ParamGroup)getNode(tlObj.getParamGroup().getListeners())).removeListeners(this);
  if (group != null) {
    tlObj.setParamGroup(group.tlObj);
    group.addListeners(this);
  }
 else {
    tlObj.setParamGroup(null);
  }
  pathTemplate.setParameters();
  return false;
}","protected boolean setParameterGroup(ParamGroup group){
  if (tlObj != null && tlObj.getParamGroup() != null) {
    Node n=getNode(tlObj.getParamGroup().getListeners());
    if (n instanceof ParamGroup)     ((ParamGroup)n).removeListeners(this);
  }
  if (group != null) {
    tlObj.setParamGroup(group.tlObj);
    group.addListeners(this);
  }
 else {
    tlObj.setParamGroup(null);
  }
  pathTemplate.setParameters();
  return false;
}",0.8886168910648715
136168,"@Override public List<ResourceField> getFields(){
  List<ResourceField> fields=new ArrayList<ResourceField>();
  new ResourceField(fields,getPayloadName(),MSGKEY + ""String_Node_Str"",ResourceFieldType.Enum,new PayloadTypeListener(),getOwningComponent().getActionFacetNames());
  new ResourceField(fields,tlObj.getMimeTypes().toString(),MSGKEY + ""String_Node_Str"",ResourceFieldType.EnumList,new MimeTypeListener(),getMimeTypeStrings());
  new ResourceField(fields,tlObj.getParamGroupName(),MSGKEY + ""String_Node_Str"",ResourceFieldType.Enum,new ParamGroupListener(),getOwningComponent().getParameterGroupNames(false));
  new ResourceField(fields,tlObj.getPathTemplate(),MSGKEY + ""String_Node_Str"",ResourceField.ResourceFieldType.String,new PathTemplateListener());
  new ResourceField(fields,getHttpMethodAsString(),MSGKEY + ""String_Node_Str"",ResourceFieldType.Enum,new HttpMethodListener(),getHttpMethodStrings());
  return fields;
}","@Override public List<ResourceField> getFields(){
  List<ResourceField> fields=new ArrayList<>();
  new ResourceField(fields,getPayloadName(),MSGKEY + ""String_Node_Str"",ResourceFieldType.Enum,new PayloadTypeListener(),getOwningComponent().getActionFacetNames());
  new ResourceField(fields,tlObj.getMimeTypes().toString(),MSGKEY + ""String_Node_Str"",ResourceFieldType.EnumList,new MimeTypeListener(),getMimeTypeStrings());
  new ResourceField(fields,tlObj.getParamGroupName(),MSGKEY + ""String_Node_Str"",ResourceFieldType.Enum,new ParamGroupListener(),getOwningComponent().getParameterGroupNames(false));
  new ResourceField(fields,tlObj.getPathTemplate(),MSGKEY + ""String_Node_Str"",ResourceField.ResourceFieldType.String,new PathTemplateListener());
  new ResourceField(fields,getHttpMethodAsString(),MSGKEY + ""String_Node_Str"",ResourceFieldType.Enum,new HttpMethodListener(),getHttpMethodStrings());
  return fields;
}",0.9929691725256896
136169,"public List<Node> getPossibleFields(){
  List<Node> fields=new ArrayList<Node>();
  for (  TLMemberField<?> field : ResourceCodegenUtils.getEligibleParameterFields((TLFacet)getFacetRef().getTLModelObject())) {
    Node f=this.getNode(((TLModelElement)field).getListeners());
    if (f != null)     fields.add(f);
 else     LOGGER.debug(""String_Node_Str"" + field.getName());
  }
  return fields;
}","public List<Node> getPossibleFields(){
  List<Node> fields=new ArrayList<>();
  for (  TLMemberField<?> field : ResourceCodegenUtils.getEligibleParameterFields((TLFacet)getFacetRef().getTLModelObject())) {
    Node f=this.getNode(((TLModelElement)field).getListeners());
    if (f != null)     fields.add(f);
 else     LOGGER.debug(""String_Node_Str"" + field.getName());
  }
  return fields;
}",0.9949238578680204
136170,"public ParamGroup(ResourceNode rn,ComponentNode fn,boolean idGroup){
  this(rn);
  setIdGroup(idGroup);
  if (fn != null && fn instanceof FacetInterface) {
    setName(fn.getLabel());
    setReferenceFacet((FacetInterface)fn);
  }
}","public ParamGroup(ResourceNode rn,ComponentNode fn,boolean idGroup){
  this(rn);
  setIdGroup(idGroup);
  if (fn != null && fn instanceof FacetInterface) {
    String name=fn.getLabel();
    if (fn instanceof ContextualFacetNode)     name=((ContextualFacetNode)fn).getName();
    setName(name);
    setReferenceFacet((FacetInterface)fn);
  }
}",0.7791304347826087
136171,"/** 
 * @return list of strings for the components of the query
 */
public List<String> getQueryTemplates(){
  ArrayList<String> contributions=new ArrayList<String>();
  boolean firstParam=true;
  for (  Node param : getChildren()) {
    if (((ResourceParameter)param).getLocation().equals(TLParamLocation.QUERY.toString()))     if (firstParam) {
      contributions.add(""String_Node_Str"" + getQueryParam(param));
      firstParam=false;
    }
 else     contributions.add(""String_Node_Str"" + getQueryParam(param));
  }
  return contributions;
}","/** 
 * @return list of strings for the components of the query
 */
public List<String> getQueryTemplates(){
  ArrayList<String> contributions=new ArrayList<>();
  boolean firstParam=true;
  for (  Node param : getChildren()) {
    if (((ResourceParameter)param).getLocation().equals(TLParamLocation.QUERY.toString()))     if (firstParam) {
      contributions.add(""String_Node_Str"" + getQueryParam(param));
      firstParam=false;
    }
 else     contributions.add(""String_Node_Str"" + getQueryParam(param));
  }
  return contributions;
}",0.9944547134935304
136172,"/** 
 * @return an array of string template contributions based on parameters in this group
 */
public List<String> getPathTemplates(){
  ArrayList<String> contributions=new ArrayList<String>();
  for (  Node param : getChildren()) {
    if (((ResourceParameter)param).isPathParam())     contributions.add(""String_Node_Str"" + param.getName() + ""String_Node_Str"");
  }
  return contributions;
}","/** 
 * @return an array of string template contributions based on parameters in this group
 */
public List<String> getPathTemplates(){
  ArrayList<String> contributions=new ArrayList<>();
  for (  Node param : getChildren()) {
    if (((ResourceParameter)param).isPathParam())     contributions.add(""String_Node_Str"" + param.getName() + ""String_Node_Str"");
  }
  return contributions;
}",0.9923076923076924
136173,"/** 
 * Get facet names from subject business object. Omit query facets if this is an ID Parameter Group.
 * @return a string array of subject facet names.
 */
public String[] getSubjectFacets(){
  List<FacetInterface> facets=new ArrayList<FacetInterface>();
  if (getOwningComponent().getSubject() != null)   for (  Node facet : getOwningComponent().getSubject().getChildren()) {
    if (!(facet instanceof FacetInterface))     continue;
    if (isIdGroup() && facet instanceof QueryFacetNode)     continue;
    facets.add((FacetInterface)facet);
  }
  int size=facets.size();
  String[] fs=new String[size];
  int i=0;
  for (  FacetInterface facet : facets)   fs[i++]=ResourceCodegenUtils.getActionFacetReferenceName((TLFacet)facet.getTLModelObject());
  return fs;
}","/** 
 * Get facet names from subject business object. Omit query facets if this is an ID Parameter Group.
 * @return a string array of subject facet names.
 */
public String[] getSubjectFacets(){
  List<FacetInterface> facets=new ArrayList<>();
  if (getOwningComponent().getSubject() != null)   for (  Node facet : getOwningComponent().getSubject().getChildren()) {
    if (!(facet instanceof FacetInterface))     continue;
    if (isIdGroup() && facet instanceof QueryFacetNode)     continue;
    facets.add((FacetInterface)facet);
  }
  int size=facets.size();
  String[] fs=new String[size];
  int i=0;
  for (  FacetInterface facet : facets)   fs[i++]=ResourceCodegenUtils.getActionFacetReferenceName((TLFacet)facet.getTLModelObject());
  return fs;
}",0.9908256880733946
136174,"@Override public List<ResourceField> getFields(){
  List<ResourceField> fields=new ArrayList<ResourceField>();
  new ResourceField(fields,getFacetLabel(),""String_Node_Str"",ResourceFieldType.Enum,new ReferenceFacetListener(),getSubjectFacets());
  new ResourceField(fields,Boolean.toString(tlObj.isIdGroup()),""String_Node_Str"",ResourceFieldType.CheckButton,new IdGroupListener());
  return fields;
}","@Override public List<ResourceField> getFields(){
  List<ResourceField> fields=new ArrayList<>();
  new ResourceField(fields,getFacetLabel(),""String_Node_Str"",ResourceFieldType.Enum,new ReferenceFacetListener(),getSubjectFacets());
  new ResourceField(fields,Boolean.toString(tlObj.isIdGroup()),""String_Node_Str"",ResourceFieldType.CheckButton,new IdGroupListener());
  return fields;
}",0.983397190293742
136175,"public void clearParameters(){
  List<Node> params=new ArrayList<Node>(getChildren());
  for (  Node p : params)   p.delete();
}","public void clearParameters(){
  List<Node> params=new ArrayList<>(getChildren());
  for (  Node p : params)   p.delete();
}",0.984126984126984
136176,"/** 
 * Populate the passed resource to represent the passed business object.
 * @param rn resource node to populate
 * @param bo business object to use as the subject
 */
public void build(ResourceNode rn,BusinessObjectNode bo){
  if (bo == null || rn == null)   return;
  TLResource rnTL=rn.getTLModelObject();
  rn.setSubject(bo);
  rn.setName(bo.getName() + ""String_Node_Str"");
  rn.setBasePath(""String_Node_Str"");
  rnTL.setAbstract(false);
  rnTL.setFirstClass(true);
  ActionFacet subAF=new ActionFacet(rn,null);
  ActionFacet idAF=new ActionFacet(rn,TLFacetType.ID);
  ActionFacet summaryAF=new ActionFacet(rn,TLFacetType.SUMMARY);
  ParamGroup idPG=new ParamGroup(rn,bo.getFacet_ID(),true);
  for (  ComponentNode fn : bo.getQueryFacets()) {
    ParamGroup qpg=new ParamGroup(rn,fn,false);
    ActionNode action=buildAction(rn,idAF,qpg,TLHttpMethod.GET);
    action.setName(fn.getLabel());
  }
  buildAction(rn,idAF,idPG,TLHttpMethod.GET);
  buildAction(rn,subAF,null,TLHttpMethod.POST);
  buildAction(rn,subAF,idPG,TLHttpMethod.PUT);
  buildAction(rn,null,idPG,TLHttpMethod.DELETE);
}","/** 
 * Populate the passed resource to represent the passed business object.
 * @param rn resource node to populate
 * @param bo business object to use as the subject
 */
public void build(ResourceNode rn,BusinessObjectNode bo){
  if (bo == null || rn == null)   return;
  TLResource rnTL=rn.getTLModelObject();
  rn.setSubject(bo);
  rn.setName(bo.getName() + ""String_Node_Str"");
  rn.setBasePath(""String_Node_Str"");
  rnTL.setAbstract(false);
  rnTL.setFirstClass(true);
  ActionFacet subAF=new ActionFacet(rn,null);
  subAF.setName(rn.getSubjectName() + ""String_Node_Str"");
  ActionFacet listAF=new ActionFacet(rn,null);
  listAF.setName(rn.getSubjectName() + ""String_Node_Str"");
  listAF.setReferenceRepeat(1000);
  listAF.setReferenceType(""String_Node_Str"");
  ActionFacet idAF=new ActionFacet(rn,TLFacetType.ID);
  ActionFacet summaryAF=new ActionFacet(rn,TLFacetType.SUMMARY);
  ParamGroup idPG=new ParamGroup(rn,bo.getFacet_ID(),true);
  for (  ComponentNode fn : bo.getQueryFacets()) {
    ParamGroup qpg=new ParamGroup(rn,fn,false);
    ActionNode action=buildAction(rn,idAF,qpg,TLHttpMethod.POST);
    action.setName(fn.getName());
    ActionFacet af=new ActionFacet(rn,null);
    af.setReferenceFacetName(((ContextualFacetNode)fn).getLocalName());
    af.setName(fn.getName());
  }
  for (  ComponentNode fn : bo.getCustomFacets()) {
    ParamGroup qpg=new ParamGroup(rn,fn,false);
    ActionFacet af=new ActionFacet(rn,null);
    af.setReferenceFacetName(((ContextualFacetNode)fn).getLocalName());
    af.setName(fn.getName());
  }
  buildAction(rn,idAF,idPG,TLHttpMethod.GET);
  buildAction(rn,subAF,null,TLHttpMethod.POST);
  buildAction(rn,subAF,idPG,TLHttpMethod.PUT);
  buildAction(rn,null,idPG,TLHttpMethod.DELETE);
}",0.7516778523489933
136177,"/** 
 * Get all libraries under <i>this</i> project. <p> Returns libraries in chains, not the chain.
 * @return new list of library nodes.
 */
public List<LibraryNode> getLibraries(){
  ArrayList<LibraryNode> libs=new ArrayList<LibraryNode>();
  if (getChildrenHandler() != null)   for (  Node n : getChildrenHandler().get()) {
    if (n instanceof LibraryNavNode) {
      LibraryNavNode lnn=(LibraryNavNode)n;
      libs.addAll(lnn.getLibraries());
    }
  }
  return libs;
}","/** 
 * Get all libraries under <i>this</i> project. <p> Returns libraries in chains, not the chain.
 * @return new list of library nodes.
 */
public List<LibraryNode> getLibraries(){
  ArrayList<LibraryNode> libs=new ArrayList<>();
  if (getChildrenHandler() != null)   for (  Node n : getChildrenHandler().get()) {
    if (n instanceof LibraryNavNode) {
      LibraryNavNode lnn=(LibraryNavNode)n;
      libs.addAll(lnn.getLibraries());
    }
  }
  return libs;
}",0.9883103081827844
136178,"@Override public void processOwnershipEvent(OwnershipEvent<?,?> event){
  Node affectedNode=getAffectedNode(event);
}","@Override public void processOwnershipEvent(OwnershipEvent<?,?> event){
}",0.7684210526315789
136179,"@Override public void processOwnershipEvent(OwnershipEvent<?,?> event){
  Node affectedNode=getAffectedNode(event);
  LibraryNode ln=(LibraryNode)thisNode;
switch (event.getType()) {
case MEMBER_ADDED:
    if (affectedNode == null)     return;
  if (affectedNode instanceof ContextualFacetNode)   if (!((ContextualFacetNode)affectedNode).canBeLibraryMember())   break;
ln.getChildrenHandler().add(affectedNode);
break;
case MEMBER_REMOVED:
if (affectedNode == null || affectedNode.getParent() == null) return;
for (TypeUser n : affectedNode.getDescendants_TypeUsers()) if (n.getAssignedType() != null) n.getAssignedType().getWhereAssignedHandler().removeUser(n);
if (affectedNode instanceof TypeUser) if (((TypeUser)affectedNode).getAssignedType() != null) ((TypeUser)affectedNode).getAssignedType().getWhereAssignedHandler().removeUser((TypeUser)affectedNode);
ln.getChildrenHandler().remove(affectedNode);
break;
default :
break;
}
}","@Override public void processOwnershipEvent(OwnershipEvent<?,?> event){
  Node affectedNode=getAffectedNode(event);
  LibraryNode ln=(LibraryNode)thisNode;
switch (event.getType()) {
case MEMBER_ADDED:
    if (affectedNode == null)     return;
  if (affectedNode instanceof ContextualFacetNode)   if (!((ContextualFacetNode)affectedNode).canBeLibraryMember())   break;
ln.getChildrenHandler().add(affectedNode);
addAssignedTypes(affectedNode);
break;
case MEMBER_REMOVED:
if (affectedNode == null || affectedNode.getParent() == null) return;
clearAssignedTypes(affectedNode);
ln.getChildrenHandler().remove(affectedNode);
break;
default :
break;
}
}",0.7386363636363636
136180,"@Override public boolean setAssignedTLType(TLModelElement simpleType){
  if (simpleType == getTLModelObject().getSimpleType())   return false;
  NamedEntity ne=null;
  if (simpleType == null || !(simpleType instanceof NamedEntity))   ne=(NamedEntity)getEmptyNode().getTLModelObject();
 else   ne=(NamedEntity)simpleType;
  getTLModelObject().setSimpleType(ne);
  return getTLModelObject().getSimpleType() == ne;
}","@Override public boolean setAssignedTLType(TLModelElement simpleType){
  if (getTLModelObject() == null || simpleType == getTLModelObject().getSimpleType())   return false;
  NamedEntity ne=null;
  if (simpleType == null || !(simpleType instanceof NamedEntity))   ne=(NamedEntity)getEmptyNode().getTLModelObject();
 else   ne=(NamedEntity)simpleType;
  getTLModelObject().setSimpleType(ne);
  return getTLModelObject().getSimpleType() == ne;
}",0.7616822429906542
136181,"/** 
 * Remove each library from Project node and tlProject. Close each library and save impacted projects.
 */
@Override public void remove(List<LibraryNavNode> list){
  Set<ProjectNode> impactedProjects=new HashSet<>();
  if (list.isEmpty())   return;
  ProjectNode pn=list.get(0).getProject();
  List<LibraryNode> nodes=pn.getLibraries();
  List<ProjectItem> itemsB=pn.getTLProject().getProjectItems();
  for (  LibraryNavNode lnn : list) {
    pn=lnn.getProject();
    impactedProjects.add(pn);
    for (    LibraryNode ln : lnn.getLibraries()) {
      try {
        removeTL(ln.getTLModelObject(),ln.getProjectItem(),pn.getTLProject());
      }
 catch (      IllegalStateException e) {
        LOGGER.debug(""String_Node_Str"" + ln + ""String_Node_Str""+ pn);
        LOGGER.debug(e.getLocalizedMessage());
        e.printStackTrace();
        DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + ln + ""String_Node_Str""+ pn);
      }
    }
    lnn.close();
    assert(!pn.getChildren().contains(lnn));
  }
  for (  ProjectNode imp : impactedProjects) {
    OtmRegistry.getNavigatorView().refresh(imp,true);
    save(pn);
    LOGGER.debug(""String_Node_Str"" + pn);
  }
  List<ProjectItem> itemsA=pn.getTLProject().getProjectItems();
}","/** 
 * Remove each library from Project node and tlProject. Close each library and save impacted projects.
 */
@Override public void remove(List<LibraryNavNode> list){
  Set<ProjectNode> impactedProjects=new HashSet<>();
  if (list.isEmpty())   return;
  for (  LibraryNavNode lnn : list)   impactedProjects.add(remove(lnn,false));
  for (  ProjectNode imp : impactedProjects) {
    OtmRegistry.getNavigatorView().refresh(imp,true);
    save(imp);
    LOGGER.debug(""String_Node_Str"" + imp + ""String_Node_Str"");
  }
}",0.3782559456398641
136182,"protected void createDefaultProject(){
  defaultNS=mc.getRepositoryController().getLocalRepository().getNamespace();
  defaultPath=DefaultPreferences.getDefaultProjectPath();
  defaultProject=create(new File(defaultPath),defaultNS,""String_Node_Str"",""String_Node_Str"");
  if (defaultProject == null) {
    DialogUserNotifier.openError(""String_Node_Str"",Messages.getString(""String_Node_Str"",defaultPath),null);
  }
  defaultPath=defaultProject.getTLProject().getProjectFile().getPath();
  mc.getModelNode().addProject(defaultProject);
}","protected void createDefaultProject(){
  defaultNS=mc.getRepositoryController().getLocalRepository().getNamespace();
  defaultPath=DefaultPreferences.getDefaultProjectPath();
  File df=new File(defaultPath);
  if (df.isFile() && df.canWrite()) {
    df.delete();
    LOGGER.debug(""String_Node_Str"");
  }
  defaultProject=create(new File(defaultPath),defaultNS,""String_Node_Str"",""String_Node_Str"");
  if (defaultProject == null) {
    DialogUserNotifier.openError(""String_Node_Str"",Messages.getString(""String_Node_Str"",defaultPath),null);
  }
  defaultPath=defaultProject.getTLProject().getProjectFile().getPath();
  mc.getModelNode().addProject(defaultProject);
}",0.8922305764411027
136183,"/** 
 * {@link org.opentravel.schemas.actions.VersionMajorAction#run()}
 */
@Override public LibraryNode createMajorVersion(LibraryNode library){
  if (!versionPreparation(library))   return null;
  RepositoryNode rn=find(library.getProjectItem().getRepository());
  MajorVersionHelper mvh=new MajorVersionHelper(library.getProject().getTLProject());
  TLLibrary tlMajor=null;
  LibraryNode newLib=null;
  LibraryChainNode lcn=null;
  ProjectNode thisProject=library.getProject();
  try {
    tlMajor=mvh.createNewMajorVersion(library.getTLLibrary());
  }
 catch (  VersionSchemeException e) {
    postRepoException(e);
  }
catch (  ValidationException e) {
    postRepoException(e);
  }
catch (  LibrarySaveException e) {
    postRepoException(e);
  }
catch (  IllegalArgumentException e) {
    postRepoException(e);
  }
  if (tlMajor != null) {
    newLib=new LibraryNode(tlMajor,library.getProject());
    List<LibraryChainNode> chains=manage(rn,Collections.singletonList(newLib));
    lcn=findLibrary(chains,newLib.getLibrary().getName());
    if (lcn != null) {
      LibraryModelManager libMrg=Node.getLibraryModelManager();
      ProjectController pc=mc.getProjectController();
      List<ProjectNode> pList=libMrg.findProjects(library);
      for (      ProjectNode pn : libMrg.findProjects(library)) {
        pc.remove(library,pn);
        if (pn != thisProject)         new LibraryNavNode(lcn,pn);
      }
      lock(newLib);
    }
    sync(rn);
  }
  return newLib;
}","/** 
 * {@link org.opentravel.schemas.actions.VersionMajorAction#run()}
 */
@Override public LibraryNode createMajorVersion(LibraryNode library){
}",0.1808118081180811
136184,"/** 
 * Model should be reset using   {@link ProjectController#closeAll()} not this since project controller has access toTLProjects.
 */
public void close(boolean includeBuiltins){
  List<ProjectNode> projects=getUserProjects();
  if (includeBuiltins)   projects=getAllProjects();
  for (  ProjectNode project : projects) {
    project.close();
    getChildrenHandler().clear(project);
  }
  libMgr.clear(includeBuiltins);
  undefinedNode.initialize(this);
  indicatorNode.initialize(this);
  unassignedNode.initialize(this);
  defaultStringNode.initialize(this);
}","/** 
 * Model should be reset using   {@link ProjectController#closeAll()} not this method since project controller hasaccess to TLProjects.
 */
public void close(boolean includeBuiltins){
  List<ProjectNode> projects=getUserProjects();
  if (includeBuiltins)   projects=getAllProjects();
  for (  ProjectNode project : projects) {
    project.close();
    getChildrenHandler().clear(project);
  }
  libMgr.clear(includeBuiltins);
  undefinedNode.initialize(this);
  indicatorNode.initialize(this);
  unassignedNode.initialize(this);
  defaultStringNode.initialize(this);
}",0.9271290605794557
136185,"public void remove(LibraryNavNode l){
  getChildrenHandler().clear(l);
}","/** 
 * Remove LibraryNavNode from children handler.
 * @param l
 */
public void remove(LibraryNavNode l){
  getChildrenHandler().clear(l);
}",0.676056338028169
136186,"/** 
 * Try to find the project item for the library. If not found, try to add it to the project.
 * @return the project item associated with this library
 */
public ProjectItem addToTL(AbstractLibrary tlLib){
}","/** 
 * Try to find the project item for the library. If not found, try to add it to the project.
 * @return the project item associated with this library
 */
public ProjectItem addToTL(AbstractLibrary tlLib){
  if (getTLProject() == null || getTLProject().getProjectManager() == null)   return null;
  ProjectItem pi=getProjectItem(tlLib);
  if (pi == null)   try {
    pi=getTLProject().getProjectManager().addUnmanagedProjectItem(tlLib,getTLProject());
  }
 catch (  RepositoryException e1) {
    e1.printStackTrace();
    LOGGER.error(""String_Node_Str"" + tlLib.getName() + ""String_Node_Str""+ e1.getLocalizedMessage());
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
    LOGGER.error(""String_Node_Str"" + tlLib.getName() + ""String_Node_Str""+ e.getLocalizedMessage());
  }
  return pi;
}",0.4137254901960784
136187,"/** 
 * Use the libraryModelManager to close the library in this project. Remove this libraryNavNode from its project.
 */
@Override public void close(){
  getModelNode().getLibraryManager().close(getThisLib(),getProject());
  deleted=true;
  getChildrenHandler().clear((Node)getThisLib());
}","/** 
 * Use the libraryModelManager to close the library in this project. Remove this libraryNavNode from its project.
 */
@Override public void close(){
  getModelNode().getLibraryManager().close(getThisLib(),getProject());
  deleted=true;
  getChildrenHandler().clear((Node)getThisLib());
  getParent().remove(this);
}",0.954248366013072
136188,"@Override public boolean unlock(LibraryNode ln){
  if (!post16UpgradeConfirmation())   return false;
  SetDocumentationWizard wizard=new SetDocumentationWizard(ln);
  wizard.run(OtmRegistry.getActiveShell());
  if (!wizard.wasCanceled()) {
    String remark=wizard.getDocText();
    UnlockThread ut=new UnlockThread(ln,mc,remark);
    BusyIndicator.showWhile(mc.getMainWindow().getDisplay(),ut);
    refreshAll(ln);
    mc.postStatus(""String_Node_Str"" + ln + ""String_Node_Str"");
    return ut.getResult();
  }
  return false;
}","@Override public boolean unlock(LibraryNode ln){
  if (!post16UpgradeConfirmation())   return false;
  SetDocumentationWizard wizard=new SetDocumentationWizard(ln);
  wizard.run(OtmRegistry.getActiveShell());
  if (!wizard.wasCanceled()) {
    String remark=wizard.getDocText();
    UnlockThread ut=new UnlockThread(ln,mc,remark);
    BusyIndicator.showWhile(mc.getMainWindow().getDisplay(),ut);
    refreshAll(ln);
    LOGGER.debug(""String_Node_Str"" + this);
    mc.postStatus(""String_Node_Str"" + ln + ""String_Node_Str"");
    return ut.getResult();
  }
  return false;
}",0.9271402550091076
136189,"@Override public void processOwnershipEvent(OwnershipEvent<?,?> event){
  LOGGER.debug(""String_Node_Str"" + event);
  super.processOwnershipEvent(event);
}","@Override public void processOwnershipEvent(OwnershipEvent<?,?> event){
  super.processOwnershipEvent(event);
}",0.8377358490566038
136190,"@Override public void processValueChangeEvent(ValueChangeEvent<?,?> event){
  LOGGER.debug(""String_Node_Str"" + event.getType());
  super.processValueChangeEvent(event);
switch (event.getType()) {
case LOCATION_MODIFIED:
case PARAM_GROUP_ADDED:
case PARAM_GROUP_MODIFIED:
case PARAM_GROUP_REMOVED:
case PAYLOAD_TYPE_MODIFIED:
case FACET_REF_MODIFIED:
    if (thisNode instanceof ActionRequest)     ((ActionRequest)thisNode).setPathTemplate();
  break;
case BASE_PATH_MODIFIED:
default :
}
}","@Override public void processValueChangeEvent(ValueChangeEvent<?,?> event){
  super.processValueChangeEvent(event);
switch (event.getType()) {
case LOCATION_MODIFIED:
case PARAM_GROUP_ADDED:
case PARAM_GROUP_MODIFIED:
case PARAM_GROUP_REMOVED:
case PAYLOAD_TYPE_MODIFIED:
case FACET_REF_MODIFIED:
    if (thisNode instanceof ActionRequest)     ((ActionRequest)thisNode).setPathTemplate();
  break;
case BASE_PATH_MODIFIED:
default :
}
}",0.8475675675675676
136191,"/** 
 * Resource members should call this <b>after</b> doing member specific deletes.
 */
@Override public void delete(){
  clearListeners();
  if (getParent() instanceof ResourceBase) {
    if (getParent().getChildrenHandler() != null)     getParent().getChildrenHandler().clear(this);
    ((ResourceBase<?>)getParent()).rChildren.remove(this);
  }
  deleted=true;
}","/** 
 * Resource members should call this <b>after</b> doing member specific deletes.
 */
@Override public void delete(){
  clearListeners();
  if (getParent() != null)   if (getParent().getChildrenHandler() != null)   getParent().getChildrenHandler().clear(this);
  if (getParent() instanceof ResourceBase) {
    ((ResourceBase<?>)getParent()).rChildren.remove(this);
  }
  deleted=true;
}",0.7846763540290621
136192,"/** 
 * Run the wizard AND do assign the type.
 * @param assign - if true assign the type to the node on finish
 * @return
 */
public boolean run(final Shell shell,boolean assign){
  if (curNode == null && curNodeList == null) {
    LOGGER.warn(""String_Node_Str"");
    return false;
  }
  dontFinish=true;
  if (assign)   dontFinish=false;
  dialog=new WizardDialog(shell,this);
  dialog.setPageSize(700,600);
  dialog.create();
  dialog.open();
  return true;
}","/** 
 * Run the wizard AND do assign the type.
 * @param assign - if true assign the type to the node on finish
 * @return
 */
@Deprecated public boolean run(final Shell shell,boolean assign){
  if (curNode == null && curNodeList == null) {
    LOGGER.warn(""String_Node_Str"");
    return false;
  }
  dontFinish=true;
  if (assign)   dontFinish=false;
  dialog=new WizardDialog(shell,this);
  dialog.setPageSize(700,600);
  dialog.create();
  dialog.open();
  return true;
}",0.9871794871794872
136193,"public static EditPart getEditPartToSelect(EditPart ep){
  SelectionRequest req=new SelectionRequest();
  req.setType(RequestConstants.REQ_SELECTION);
  return ep.getTargetEditPart(req);
}","public static EditPart getEditPartToSelect(EditPart ep){
  SelectionRequest req=new SelectionRequest();
  req.setType(RequestConstants.REQ_SELECTION);
  return ep != null ? ep.getTargetEditPart(req) : null;
}",0.9494949494949496
136194,"private void addToMap(ProjectItem pi,LibraryInterface li){
  String cn=getCanonicalName(pi);
  LibraryInterface entry=libMap.get(cn);
  if (!libMap.containsKey(getCanonicalName(pi)))   libMap.put(getCanonicalName(pi),li);
 else   LOGGER.warn(""String_Node_Str"" + getCanonicalName(pi));
}","private void addToMap(ProjectItem pi,LibraryInterface li){
  String cn=getCanonicalName(pi);
  LibraryInterface entry=libMap.get(cn);
  if (!libMap.containsKey(getCanonicalName(pi)))   libMap.put(getCanonicalName(pi),li);
}",0.8762278978388998
136195,"/** 
 * Adds node to the aggregate node's children list if appropriate. This only does the aggregate structure, not library or parent links.
 * @param nodeToAdd
 * @return
 */
public void add(ComponentNode nodeToAdd){
  if (nodeToAdd instanceof ServiceNode) {
    getChildren().add(nodeToAdd);
    return;
  }
  VersionNode vn=null;
  if (nodeToAdd.getVersionNode() != null)   if (getChildren().contains(nodeToAdd.getVersionNode()))   return;
  if (nodeToAdd instanceof ContextualFacetNode) {
    getChildrenHandler().add(new VersionNode(nodeToAdd));
    return;
  }
  final List<Node> duplicates=findExactMatches(getChildren(),nodeToAdd);
  if (duplicates.isEmpty())   getChildrenHandler().add(new VersionNode(nodeToAdd));
 else {
    vn=duplicates.get(0).getVersionNode();
    vn.add(nodeToAdd);
  }
  return;
}","/** 
 * Adds node to the aggregate node's children list if appropriate. This only does the aggregate structure, not library or parent links.
 * @param nodeToAdd
 * @return
 */
public void add(ComponentNode nodeToAdd){
  if (nodeToAdd instanceof ServiceNode) {
    getChildrenHandler().add(nodeToAdd);
    return;
  }
  VersionNode vn=null;
  if (nodeToAdd.getVersionNode() != null)   if (getChildren().contains(nodeToAdd.getVersionNode()))   return;
  if (nodeToAdd instanceof ContextualFacetNode) {
    getChildrenHandler().add(new VersionNode(nodeToAdd));
    return;
  }
  final List<Node> duplicates=findExactMatches(getChildren(),nodeToAdd);
  if (duplicates.isEmpty())   getChildrenHandler().add(new VersionNode(nodeToAdd));
 else {
    vn=duplicates.get(0).getVersionNode();
    vn.add(nodeToAdd);
  }
  return;
}",0.9957134109001836
136196,"/** 
 * Remove the version node or version node associated with the passed node from the aggregate child list.
 */
public void remove(Node node){
  if (!(node instanceof VersionNode))   node=node.getVersionNode();
  getChildrenHandler().remove(node);
}","/** 
 * Remove the version node or version node associated with the passed node from the aggregate child list.
 */
public void remove(Node node){
  if (!(node instanceof ServiceNode) && (!(node instanceof VersionNode)))   node=node.getVersionNode();
  getChildrenHandler().remove(node);
}",0.9333333333333332
136197,"public void add(LibraryMemberInterface lm){
  if (childrenHandler instanceof NavNodeChildrenHandler)   getChildrenHandler().add((Node)lm);
}","public void add(LibraryMemberInterface lm){
  getChildrenHandler().add((Node)lm);
}",0.7443946188340808
136198,"/** 
 * Create new Library Member Interface Node based on the passed TL object. <p> The TL LibraryMember listeners are used to look up the node. If the node doesn't exist, one is created. <p> For OTM version 1.6 and later, ContextualFacets are modeled as top-level ContextualFacetNodes. In version OTM version 1.5 contextual facets are skipped.
 * @return newly created node or null
 */
public static LibraryMemberInterface newLibraryMember(final LibraryMember mbr){
  LibraryMemberInterface lm=null;
  if (mbr == null)   return lm;
  Node n=Node.GetNode(mbr);
  if (n instanceof LibraryMemberInterface)   return (LibraryMemberInterface)n;
  if (n instanceof ContextualFacet15Node)   return null;
  if (mbr instanceof TLValueWithAttributes)   lm=new VWA_Node((TLValueWithAttributes)mbr);
 else   if (mbr instanceof TLBusinessObject)   lm=new BusinessObjectNode((TLBusinessObject)mbr);
 else   if (mbr instanceof TLCoreObject)   lm=new CoreObjectNode((TLCoreObject)mbr);
 else   if (mbr instanceof TLChoiceObject)   lm=new ChoiceObjectNode((TLChoiceObject)mbr);
 else   if (mbr instanceof TLSimple)   lm=new SimpleTypeNode((TLSimple)mbr);
 else   if (mbr instanceof TLOpenEnumeration)   lm=new EnumerationOpenNode((TLOpenEnumeration)mbr);
 else   if (mbr instanceof TLClosedEnumeration)   lm=new EnumerationClosedNode((TLClosedEnumeration)mbr);
 else   if (mbr instanceof TLExtensionPointFacet)   lm=new ExtensionPointNode((TLExtensionPointFacet)mbr);
 else   if (mbr instanceof TLResource)   lm=new ResourceNode((TLResource)mbr);
 else   if (mbr instanceof TLService)   lm=new ServiceNode((TLService)mbr,null);
 else   if (mbr instanceof TLContextualFacet) {
    if (OTM16Upgrade.otm16Enabled)     lm=createFacet((TLContextualFacet)mbr);
  }
 else   if (mbr instanceof XSDSimpleType)   lm=null;
 else   if (mbr instanceof XSDComplexType)   lm=null;
 else   if (mbr instanceof XSDElement)   lm=null;
 else {
    assert(false);
  }
  return lm;
}","/** 
 * Create new Library Member Interface Node based on the passed TL object. <p> The TL LibraryMember listeners are used to look up the node. If the node doesn't exist, one is created. <p> For OTM version 1.6 and later, ContextualFacets are modeled as top-level ContextualFacetNodes. In version OTM version 1.5 contextual facets are skipped.
 * @return newly created node or null
 */
public static LibraryMemberInterface newLibraryMember(final LibraryMember mbr){
  LibraryMemberInterface lm=null;
  if (mbr == null)   return lm;
  Node n=Node.GetNode(mbr);
  if (n instanceof LibraryMemberInterface)   return (LibraryMemberInterface)n;
  if (n instanceof ContextualFacet15Node)   return null;
  if (mbr instanceof TLValueWithAttributes)   lm=new VWA_Node((TLValueWithAttributes)mbr);
 else   if (mbr instanceof TLBusinessObject)   lm=new BusinessObjectNode((TLBusinessObject)mbr);
 else   if (mbr instanceof TLCoreObject)   lm=new CoreObjectNode((TLCoreObject)mbr);
 else   if (mbr instanceof TLChoiceObject)   lm=new ChoiceObjectNode((TLChoiceObject)mbr);
 else   if (mbr instanceof TLSimple)   lm=new SimpleTypeNode((TLSimple)mbr);
 else   if (mbr instanceof TLOpenEnumeration)   lm=new EnumerationOpenNode((TLOpenEnumeration)mbr);
 else   if (mbr instanceof TLClosedEnumeration)   lm=new EnumerationClosedNode((TLClosedEnumeration)mbr);
 else   if (mbr instanceof TLExtensionPointFacet)   lm=new ExtensionPointNode((TLExtensionPointFacet)mbr);
 else   if (mbr instanceof TLResource)   lm=new ResourceNode((TLResource)mbr);
 else   if (mbr instanceof TLService)   lm=new ServiceNode((TLService)mbr);
 else   if (mbr instanceof TLContextualFacet) {
    if (OTM16Upgrade.otm16Enabled)     lm=createFacet((TLContextualFacet)mbr);
  }
 else   if (mbr instanceof XSDSimpleType)   lm=null;
 else   if (mbr instanceof XSDComplexType)   lm=null;
 else   if (mbr instanceof XSDElement)   lm=null;
 else {
    assert(false);
  }
  return lm;
}",0.9987123358228174
136199,"public LibraryNavNode load(final List<ProjectItem> piList){
  LibraryModelManager manager=getParent().getLibraryManager();
  LibraryNavNode lnn=null;
  if (piList.isEmpty())   LOGGER.warn(this + ""String_Node_Str"");
  for (  ProjectItem pi : piList) {
    LOGGER.debug(""String_Node_Str"" + pi.getLibraryName() + ""String_Node_Str""+ this);
    lnn=manager.add(pi,this);
    if (lnn != null) {
      add(lnn);
    }
  }
  return lnn;
}","public LibraryNavNode load(final List<ProjectItem> piList){
  LibraryModelManager manager=getParent().getLibraryManager();
  LibraryNavNode lnn=null;
  for (  ProjectItem pi : piList) {
    lnn=manager.add(pi,this);
    if (lnn != null) {
      add(lnn);
    }
  }
  return lnn;
}",0.5746478873239437
136200,"public void add(Node child){
  if (!(child instanceof LibraryNavNode))   LOGGER.debug(""String_Node_Str"");
  getChildrenHandler().add(child);
  child.setParent(this);
}","public void add(Node child){
  getChildrenHandler().add(child);
  child.setParent(this);
}",0.7003891050583657
136201,"/** 
 * Try to find the project item for the library. If not found, try to add it to the project.
 * @return the project item associated with this library
 */
public ProjectItem addToTL(AbstractLibrary tlLib){
  if (getTLProject() == null)   return null;
  ProjectItem pi=getProjectItem(tlLib);
  if (pi == null)   try {
    pi=getTLProject().getProjectManager().addUnmanagedProjectItem(tlLib,getTLProject());
  }
 catch (  RepositoryException e1) {
    LOGGER.error(""String_Node_Str"" + tlLib.getName() + ""String_Node_Str""+ e1.getLocalizedMessage());
  }
catch (  IllegalArgumentException e) {
    LOGGER.error(""String_Node_Str"" + tlLib.getName() + ""String_Node_Str""+ e.getLocalizedMessage());
  }
  return pi;
}","/** 
 * Try to find the project item for the library. If not found, try to add it to the project.
 * @return the project item associated with this library
 */
public ProjectItem addToTL(AbstractLibrary tlLib){
}",0.457204767063922
136202,"/** 
 * Service created from TL Service already in a library.
 * @param tlSvc
 * @param ln
 */
public ServiceNode(final TLService tlSvc,LibraryNode ln){
  super(tlSvc);
  owningLibrary=ln;
  childrenHandler=new ServiceChildrenHandler(this);
  if (ln != null)   ln.setServiceNode(this);
}","/** 
 * Service constructor used in tests created from TL Service already in a library.
 * @param tlSvc
 * @param ln
 */
public ServiceNode(final TLService tlSvc,LibraryNode ln){
  this(tlSvc);
  owningLibrary=ln;
  if (ln != null)   ln.setServiceNode(this);
}",0.8409506398537477
136203,"@Override public String getLabel(){
  return getName() + ""String_Node_Str"" + getLibrary().getVersion()+ ""String_Node_Str"";
}","@Override public String getLabel(){
  return getLibrary() != null ? getName() + ""String_Node_Str"" + getLibrary().getVersion()+ ""String_Node_Str"" : ""String_Node_Str"";
}",0.852233676975945
136204,"@Override public void add(Node item){
  if (!children.contains(item))   children.add(item);
  item.setParent(owner);
  if (item instanceof LibraryMemberInterface)   ((LibraryMemberInterface)item).setLibrary(owner.getLibrary());
}","@Override public void add(Node item){
  if (!children.contains(item))   children.add(item);
  if (owner instanceof AggregateNode && item instanceof ServiceNode)   return;
  item.setParent(owner);
  if (item instanceof LibraryMemberInterface)   ((LibraryMemberInterface)item).setLibrary(owner.getLibrary());
}",0.8528864059590316
136205,"/** 
 * Import/Copy selected components into the destination library. User is asked about type assignment changes. Used by DND and right-click copy operations.
 * @param destination
 */
public void importSelectedToLibrary(LibraryNode destination){
  if (destination.isInChain())   destination=destination.getHead();
  if (destination == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  if (!destination.isTLLibrary()) {
    LOGGER.error(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!destination.isEditable()) {
    LOGGER.error(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final List<Node> sourceNodes=mc.getSelectedNodes_NavigatorView();
  if (sourceNodes == null || sourceNodes.size() <= 0) {
    LOGGER.error(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"" + sourceNodes.size() + ""String_Node_Str""+ destination);
  final List<Node> eligibleForImporting=new ArrayList<Node>();
  for (  Node n : sourceNodes) {
    if (n instanceof LibraryNode)     eligibleForImporting.addAll(n.getDescendants_LibraryMemberNodes());
 else     if (!(n.getLibrary()).equals(destination))     eligibleForImporting.add(n);
  }
  Node done=null;
  for (  Node n : sourceNodes)   if (n instanceof ResourceNode) {
    destination.copyMember((LibraryMemberInterface)n);
    done=n.getLibrary();
  }
 else   if (n instanceof ContextualFacetNode) {
    done=(Node)destination.copyMember((ContextualFacetNode)n);
    ContextualFacetOwnerInterface owner=askForNewCFOwner((ContextualFacetNode)done);
    if (owner != null)     ((ContextualFacetNode)done).setOwner(owner);
 else {
      done.delete();
      mc.refresh();
      return;
    }
  }
  if (done != null) {
    mc.refresh(done);
    return;
  }
  if (destination.hasService()) {
    for (    Node n : eligibleForImporting)     if (n instanceof ServiceNode) {
      eligibleForImporting.remove(n);
      break;
    }
  }
  if (eligibleForImporting == null || eligibleForImporting.size() <= 0) {
    LOGGER.error(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  int ans=DialogUserNotifier.openQuestionWithCancel(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
switch (ans) {
case 0:
    ArrayList<Node> selected=new ArrayList<Node>(eligibleForImporting);
  for (  Node n : selected) {
    for (    Node nn : n.getDescendants_AssignedTypes(true))     if (!eligibleForImporting.contains(nn))     eligibleForImporting.add(nn);
  }
case 1:
break;
case 2:
return;
}
LOGGER.info(""String_Node_Str"" + eligibleForImporting.size() + ""String_Node_Str"");
mc.postStatus(""String_Node_Str"" + eligibleForImporting.size() + ""String_Node_Str"");
GlobalDialogResult result=askGlobalLocalNone(eligibleForImporting,destination);
Collection<Node> importedNodesMap=null;
switch (result) {
case GLOBAL:
importedNodesMap=destination.importNodes(eligibleForImporting,true);
break;
case LOCAL:
importedNodesMap=destination.importNodes(eligibleForImporting,false);
break;
case NONE:
importedNodesMap=destination.importNodes(eligibleForImporting).values();
break;
case CANCEL:
default :
break;
}
selectImportedNodesInNavigation(importedNodesMap);
mc.postStatus(""String_Node_Str"" + eligibleForImporting.size() + ""String_Node_Str""+ destination);
mc.refresh(destination);
}","/** 
 * Import/Copy selected components into the destination library. User is asked about type assignment changes. Used by DND and right-click copy operations.
 * @param destination
 */
public void importSelectedToLibrary(LibraryNode destination){
  if (destination.isInChain())   destination=destination.getHead();
  if (destination == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  if (!destination.isTLLibrary()) {
    LOGGER.error(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!destination.isEditable()) {
    LOGGER.error(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final List<Node> sourceNodes=mc.getSelectedNodes_NavigatorView();
  if (sourceNodes == null || sourceNodes.size() <= 0) {
    LOGGER.error(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"" + sourceNodes.size() + ""String_Node_Str""+ destination);
  final List<Node> eligibleForImporting=new ArrayList<Node>();
  for (  Node n : sourceNodes) {
    if (n instanceof LibraryNode)     eligibleForImporting.addAll(n.getDescendants_LibraryMemberNodes());
 else     if (!(n.getLibrary()).equals(destination))     eligibleForImporting.add(n);
  }
  Node done=null;
  for (  Node n : sourceNodes)   if (n instanceof ResourceNode) {
    destination.copyMember((LibraryMemberInterface)n);
    done=n.getLibrary();
  }
 else   if (n instanceof ContributedFacetNode) {
    done=importNode(((ContributedFacetNode)n).getContributor(),destination);
  }
 else   if (n instanceof ContextualFacetNode) {
    done=importNode((ContextualFacetNode)n,destination);
  }
  if (done != null) {
    mc.refresh(done);
    return;
  }
  if (destination.hasService()) {
    for (    Node n : eligibleForImporting)     if (n instanceof ServiceNode) {
      eligibleForImporting.remove(n);
      break;
    }
  }
  if (eligibleForImporting == null || eligibleForImporting.size() <= 0) {
    LOGGER.error(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  int ans=DialogUserNotifier.openQuestionWithCancel(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
switch (ans) {
case 0:
    ArrayList<Node> selected=new ArrayList<Node>(eligibleForImporting);
  for (  Node n : selected) {
    for (    Node nn : n.getDescendants_AssignedTypes(true))     if (!eligibleForImporting.contains(nn))     eligibleForImporting.add(nn);
  }
case 1:
break;
case 2:
return;
}
LOGGER.info(""String_Node_Str"" + eligibleForImporting.size() + ""String_Node_Str"");
mc.postStatus(""String_Node_Str"" + eligibleForImporting.size() + ""String_Node_Str"");
GlobalDialogResult result=askGlobalLocalNone(eligibleForImporting,destination);
Collection<Node> importedNodesMap=null;
switch (result) {
case GLOBAL:
importedNodesMap=destination.importNodes(eligibleForImporting,true);
break;
case LOCAL:
importedNodesMap=destination.importNodes(eligibleForImporting,false);
break;
case NONE:
importedNodesMap=destination.importNodes(eligibleForImporting).values();
break;
case CANCEL:
default :
break;
}
selectImportedNodesInNavigation(importedNodesMap);
mc.postStatus(""String_Node_Str"" + eligibleForImporting.size() + ""String_Node_Str""+ destination);
mc.refresh(destination);
}",0.9409221902017292
136206,"@Override protected void removeFromTLParent(){
  if (getTLModelObject().getOwningEntity() instanceof TLChoiceObject)   ((TLChoiceObject)getTLModelObject().getOwningEntity()).removeChoiceFacet(getTLModelObject());
 else   if (getTLModelObject().getOwningEntity() instanceof TLContextualFacet)   ((TLContextualFacet)getTLModelObject().getOwningEntity()).removeChildFacet(getTLModelObject());
  if (getParent() != null)   getParent().getChildrenHandler().clear();
}","@Override protected void removeFromTLParent(){
  if (getTLModelObject() == null)   return;
  if (getTLModelObject().getOwningEntity() instanceof TLChoiceObject)   ((TLChoiceObject)getTLModelObject().getOwningEntity()).removeChoiceFacet(getTLModelObject());
 else   if (getTLModelObject().getOwningEntity() instanceof TLContextualFacet)   ((TLContextualFacet)getTLModelObject().getOwningEntity()).removeChildFacet(getTLModelObject());
  if (getParent() != null)   getParent().getChildrenHandler().clear();
  getTLModelObject().setOwningEntityName(""String_Node_Str"");
}",0.4314868804664723
136207,"/** 
 * Add this contextual facet to the owner. <p> Create contributed facet. Remove existing contributed facet if it existed.
 * @param owner
 * @param newFacet
 */
@Override public void add(ContextualFacetOwnerInterface owner){
  removeFromTLParent();
  addToTLParent(owner);
  if (getWhereContributed() != null)   getWhereContributed().clearContributor();
  if (getLibrary() == null)   owner.getLibrary().addMember(this);
  new ContributedFacetNode(this.getTLModelObject(),owner);
  if (owner != null && ((LibraryMemberInterface)owner).getChildrenHandler() != null)   ((Node)owner).getChildrenHandler().clear();
}","/** 
 * Add this contextual facet to the owner. <p> Create contributed facet. Remove existing contributed facet if it existed.
 * @param owner
 * @param newFacet
 */
@Override public void add(ContextualFacetOwnerInterface owner){
}",0.5454545454545454
136208,"@Override protected void removeFromTLParent(){
  if (getTLModelObject() == null)   return;
  if (getTLModelObject().getOwningEntity() instanceof TLBusinessObject)   ((TLBusinessObject)getTLModelObject().getOwningEntity()).removeCustomFacet(getTLModelObject());
 else   if (getTLModelObject().getOwningEntity() instanceof TLContextualFacet)   ((TLContextualFacet)getTLModelObject().getOwningEntity()).removeChildFacet(getTLModelObject());
}","@Override protected void removeFromTLParent(){
  if (getTLModelObject() == null)   return;
  if (getTLModelObject().getOwningEntity() instanceof TLBusinessObject)   ((TLBusinessObject)getTLModelObject().getOwningEntity()).removeCustomFacet(getTLModelObject());
 else   if (getTLModelObject().getOwningEntity() instanceof TLContextualFacet)   ((TLContextualFacet)getTLModelObject().getOwningEntity()).removeChildFacet(getTLModelObject());
  getTLModelObject().setOwningEntityName(""String_Node_Str"");
}",0.9350372736954208
136209,"@Override protected void addToTLParent(ContextualFacetOwnerInterface owner){
  if (owner == null || owner.getTLModelObject() == null)   return;
  TLFacetOwner tlOwner=owner.getTLModelObject();
  if (getTLModelObject() == null)   return;
  if (tlOwner instanceof TLBusinessObject)   ((TLBusinessObject)tlOwner).addCustomFacet(getTLModelObject());
 else   if (tlOwner instanceof TLContextualFacet)   ((TLContextualFacet)tlOwner).addChildFacet(getTLModelObject());
  if (owner.getChildrenHandler() != null)   owner.getChildrenHandler().clear();
}","@Override protected void addToTLParent(ContextualFacetOwnerInterface owner){
}",0.251207729468599
136210,"@Override protected void removeFromTLParent(){
  if (getTLModelObject().getOwningEntity() instanceof TLBusinessObject)   ((TLBusinessObject)getTLModelObject().getOwningEntity()).removeQueryFacet(getTLModelObject());
 else   if (getTLModelObject().getOwningEntity() instanceof TLContextualFacet)   ((TLContextualFacet)getTLModelObject().getOwningEntity()).removeChildFacet(getTLModelObject());
}","@Override protected void removeFromTLParent(){
}",0.2171945701357466
136211,"@Override protected void removeFromTLParent(){
  if (getTLModelObject().getOwningEntity() instanceof TLBusinessObject)   ((TLBusinessObject)getTLModelObject().getOwningEntity()).removeUpdateFacet(getTLModelObject());
 else   if (getTLModelObject().getOwningEntity() instanceof TLContextualFacet)   ((TLContextualFacet)getTLModelObject().getOwningEntity()).removeChildFacet(getTLModelObject());
}","@Override protected void removeFromTLParent(){
  if (getTLModelObject() == null)   return;
  if (getTLModelObject().getOwningEntity() instanceof TLBusinessObject)   ((TLBusinessObject)getTLModelObject().getOwningEntity()).removeUpdateFacet(getTLModelObject());
 else   if (getTLModelObject().getOwningEntity() instanceof TLContextualFacet)   ((TLContextualFacet)getTLModelObject().getOwningEntity()).removeChildFacet(getTLModelObject());
  getTLModelObject().setOwningEntityName(""String_Node_Str"");
}",0.88268156424581
136212,"/** 
 * @param node
 * @return true if given node should be displayed from ""Show used type"" action
 */
public static boolean showAsUsedType(Node node){
  boolean ret=node instanceof VWA_Node;
  ret=ret || node instanceof BusinessObjectNode;
  ret=ret || node instanceof CoreObjectNode;
  if (node instanceof SimpleComponentNode) {
    return isShowingSimpleObjectsAsUsedType();
  }
  return ret;
}","/** 
 * @param node
 * @return true if given node should be displayed from ""Show used type"" action
 */
public static boolean showAsUsedType(Node node){
  boolean ret=node instanceof VWA_Node;
  ret=ret || node instanceof BusinessObjectNode;
  ret=ret || node instanceof CoreObjectNode;
  if (node instanceof SimpleTypeNode) {
    return isShowingSimpleObjectsAsUsedType();
  }
  return ret;
}",0.9835234474017744
136213,"@Override public EditPart createEditPart(EditPart context,Object element){
  if (element instanceof Diagram) {
    return new DiagramEditPart((Diagram)element);
  }
  if (element instanceof Connection) {
    return new ConnectionEditPart((Connection)element);
  }
  UINode uiNode=(UINode)element;
  Node node=uiNode.getNode();
  if (node instanceof LibraryNode) {
    return new LibraryEditPart(uiNode);
  }
 else   if (node instanceof PropertyNode) {
    return new PropertyNodeEditPart(uiNode);
  }
 else   if (node instanceof SimpleComponentNode) {
    return new PropertyNodeEditPart(uiNode);
  }
 else   if (node instanceof ComponentNode) {
    return new ComponentNodeEditPart(uiNode);
  }
 else   if (node instanceof Node) {
    return new UnsupportedNodeEditPart(uiNode);
  }
  return null;
}","@Override public EditPart createEditPart(EditPart context,Object element){
  if (element instanceof Diagram) {
    return new DiagramEditPart((Diagram)element);
  }
  if (element instanceof Connection) {
    return new ConnectionEditPart((Connection)element);
  }
  UINode uiNode=(UINode)element;
  Node node=uiNode.getNode();
  if (node instanceof LibraryNode) {
    return new LibraryEditPart(uiNode);
  }
 else   if (node instanceof PropertyNode) {
    return new PropertyNodeEditPart(uiNode);
  }
 else   if (node instanceof SimpleTypeNode) {
    return new PropertyNodeEditPart(uiNode);
  }
 else   if (node instanceof ComponentNode) {
    return new ComponentNodeEditPart(uiNode);
  }
 else   if (node instanceof Node) {
    return new UnsupportedNodeEditPart(uiNode);
  }
  return null;
}",0.8426332288401254
136214,"private void saveDoc(Node n,SetDocumentationWizard.DocTypes type,String text){
  if (n == null || type == null || text.isEmpty())   return;
  DocumentationHandler dh=n.getDocHander();
  if (dh == null)   return;
switch (type) {
case Description:
    dh.addDescription(text);
  break;
case Deprecation:
dh.addDeprecation(text);
break;
case MoreInformation:
dh.addMoreInfo(text);
break;
case ReferenceLink:
dh.addReference(text);
break;
case Implementer:
dh.addImplementer(text);
break;
}
}","private void saveDoc(Node n,SetDocumentationWizard.DocTypes type,String text){
  if (n == null || type == null || text.isEmpty())   return;
  DocumentationHandler dh=n.getDocHandler();
  if (dh == null)   return;
switch (type) {
case Description:
    dh.addDescription(text);
  break;
case Deprecation:
dh.addDeprecation(text);
break;
case MoreInformation:
dh.addMoreInfo(text);
break;
case ReferenceLink:
dh.addReference(text);
break;
case Implementer:
dh.addImplementer(text);
break;
}
}",0.9989764585465712
136215,"@Override public boolean setAssignedType(TLModelElement simpleType){
  if (simpleType == getTLModelObject().getSimpleType())   return false;
  NamedEntity ne=null;
  if (simpleType == null || !(simpleType instanceof NamedEntity))   ne=(NamedEntity)emptyNode.getTLModelObject();
 else   ne=(NamedEntity)simpleType;
  getTLModelObject().setSimpleType(ne);
  return getTLModelObject().getSimpleType() == ne;
}","@Override public boolean setAssignedType(TLModelElement simpleType){
  if (simpleType == getTLModelObject().getSimpleType())   return false;
  NamedEntity ne=null;
  if (simpleType == null || !(simpleType instanceof NamedEntity))   ne=(NamedEntity)getEmptyNode().getTLModelObject();
 else   ne=(NamedEntity)simpleType;
  getTLModelObject().setSimpleType(ne);
  return getTLModelObject().getSimpleType() == ne;
}",0.9914320685434516
136216,"@Override public boolean setAssignedType(TLModelElement tla){
  if (tla == getTLModelObject().getType())   return false;
  if (tla instanceof TLPropertyType)   getTLModelObject().setType((TLPropertyType)tla);
  setName(getName());
  return getTLModelObject().getType() == tla;
}","@Override public boolean setAssignedType(TLModelElement tla){
  if (tla == null)   return false;
  if (tla == getTLModelObject().getType())   return false;
  if (tla instanceof TLPropertyType)   getTLModelObject().setType((TLPropertyType)tla);
  setName(getName());
  return getTLModelObject().getType() == tla;
}",0.9407783417935702
136217,"@Override public boolean setAssignedType(TLModelElement tla){
  if (tla == getTLModelObject().getType())   return false;
  if (canAssign(GetNode(tla)))   if (tla instanceof TLPropertyType)   getTLModelObject().setType((TLPropertyType)tla);
  return getTLModelObject().getType() == tla;
}","@Override public boolean setAssignedType(TLModelElement tla){
  if (tla == null)   return false;
  if (tla == getTLModelObject().getType())   return false;
  if (canAssign(GetNode(tla)))   if (tla instanceof TLPropertyType)   getTLModelObject().setType((TLPropertyType)tla);
  return getTLModelObject().getType() == tla;
}",0.942528735632184
136218,"@Override public TLLibraryMember getTLModelObject(){
  return (TLLibraryMember)tlObj;
}","@Override public TLLibraryMember getTLModelObject(){
  if (impliedType != null && impliedType.equals(ImpliedNodeType.UnassignedType))   return null;
  return (TLLibraryMember)tlObj;
}",0.6444444444444445
136219,"/** 
 * Set Assigned Type. Sets the Assigned type node and add this owner to that user list via where used listener. This method assures there is a target and that the owner is editable. Sets the TLModel type If the target represents a complex type (BO, Core, facet, alias) then the owner's name is changed.
 * @return true if assignment could be made, false otherwise
 */
public boolean set(TypeProvider target){
}","/** 
 * Set Assigned Type. Sets the Assigned type node and add this owner to that user list via where used listener. This method assures there is a target and that the owner is editable. Sets the TLModel type If the target represents a complex type (BO, Core, facet, alias) then the owner's name is changed.
 * @return true if assignment could be made, false otherwise
 */
public boolean set(TypeProvider target){
  if (owner == null || !owner.isEditable())   return false;
  if (target instanceof SharedFacetNode) {
    target=(TypeProvider)target.getParent();
    LOGGER.debug(""String_Node_Str"");
  }
  TypeProvider oldProvider=owner.getAssignedType();
  if (owner.getRequiredType() != null) {
    return false;
  }
  if (oldProvider == target) {
    if (!target.getWhereAssigned().contains(owner)) {
      target.addTypeUser(owner);
    }
    if (target != ModelNode.getUnassignedNode())     return false;
  }
  if (target == null || target == ModelNode.getUnassignedNode())   return false;
  TLModelElement tlTarget=target.getTLModelObject();
  if (target.getLibrary() != null && target.getLibrary().isBuiltIn() && target.getLibrary().getNamespace().equals(XMLConstants.W3C_XML_SCHEMA_NS_URI))   if (target.getXsdObjectHandler() != null)   tlTarget=target.getXsdObjectHandler().getTLLibraryMember();
  boolean result=owner.setAssignedType(tlTarget);
  if (result) {
    oldProvider.removeWhereAssigned(owner);
    target.addTypeUser(owner);
  }
  if (get().getTLModelObject() != tlTarget) {
    TypeProvider actual=get();
    if (actual.getXsdObjectHandler() == null || actual.getXsdObjectHandler().getTLLibraryMember() != tlTarget) {
      LOGGER.debug(""String_Node_Str"" + ((Node)target).getNameWithPrefix() + ""String_Node_Str""+ owner+ ""String_Node_Str""+ ((Node)get()).getNameWithPrefix());
      return false;
    }
  }
  return result;
}",0.367419212040726
136220,"/** 
 * @return list of contextual facets identified by the contributed facets in this object
 */
public List<ContextualFacetNode> getContextualFacets(){
  if (!(this instanceof ContextualFacetOwnerInterface))   return Collections.emptyList();
  ArrayList<ContextualFacetNode> facets=new ArrayList<ContextualFacetNode>();
  for (  ContributedFacetNode n : getContributedFacets())   facets.add(n.getContributor());
  return facets;
}","/** 
 * @return list of contextual facets identified by the contributed facets in this object
 */
public List<ContextualFacetNode> getContextualFacets(){
  if (!(this instanceof ContextualFacetOwnerInterface))   return Collections.emptyList();
  ArrayList<ContextualFacetNode> facets=new ArrayList<ContextualFacetNode>();
  for (  Node n : getChildren())   if (n instanceof ContributedFacetNode)   facets.add(((ContributedFacetNode)n).getContributor());
 else   if (n instanceof ContextualFacetNode)   facets.add((ContextualFacetNode)n);
  return facets;
}",0.7753036437246964
136221,"public void check(ChoiceObjectNode choice,boolean validate){
  assertTrue(choice instanceof ChoiceObjectNode);
  assertTrue(choice.getTLModelObject() instanceof TLChoiceObject);
  assertNotNull(choice.getTLModelObject().getListeners());
  TLChoiceObject tlChoice=(TLChoiceObject)choice.getTLModelObject();
  if (tlChoice.getOwningLibrary() != null)   Assert.assertNotNull(choice.getLibrary());
  String s=tlChoice.getName();
  assertNotNull(choice.getSharedFacet());
  s=((FacetNode)choice.getSharedFacet()).getName();
  s=((FacetNode)choice.getSharedFacet()).getLabel();
  List<PropertyOwnerInterface> choices=choice.getChoiceFacets();
  for (  PropertyOwnerInterface poi : choice.getChoiceFacets()) {
    assertTrue(poi instanceof FacetNode);
    FacetNode f=(FacetNode)poi;
    String name=f.getName();
    assertFalse(name.isEmpty());
    String label=f.getLabel();
    assertFalse(f.getLabel().isEmpty());
    assertTrue(((Node)poi).getParent() == choice);
  }
  boolean hasBaseClass=choice.getExtensionBase() != null;
  if (hasBaseClass) {
    Node baseClass=choice.getExtensionBase();
    if (choice.getName().equals(""String_Node_Str"")) {
      for (      Node n : choice.getChildren())       if (n instanceof FacetNode) {
        assertTrue(((Node)n).getParent() != null);
        List<TLAttribute> tlAttrs=PropertyCodegenUtils.getInheritedFacetAttributes((TLFacet)n.getTLModelObject());
        List<Node> inheritedList=n.getInheritedChildren();
        if (inheritedList.isEmpty()) {
          List<Node> x=n.getInheritedChildren();
        }
      }
    }
    assertNotNull(baseClass);
  }
  for (  Node n : choice.getChildren()) {
    ml.check(n,validate);
    assertTrue(!(n instanceof VersionNode));
    if (!OTM16Upgrade.otm16Enabled)     assertTrue(""String_Node_Str"",!(n instanceof ContributedFacetNode));
  }
  assertNotNull(choice.getAliases());
}","public void check(ChoiceObjectNode choice,boolean validate){
  assertTrue(choice instanceof ChoiceObjectNode);
  assertTrue(choice.getTLModelObject() instanceof TLChoiceObject);
  assertNotNull(choice.getTLModelObject().getListeners());
  TLChoiceObject tlChoice=(TLChoiceObject)choice.getTLModelObject();
  if (tlChoice.getOwningLibrary() != null)   Assert.assertNotNull(choice.getLibrary());
  String s=tlChoice.getName();
  assertNotNull(choice.getSharedFacet());
  s=((FacetNode)choice.getSharedFacet()).getName();
  s=((FacetNode)choice.getSharedFacet()).getLabel();
  List<PropertyOwnerInterface> choices=choice.getChoiceFacets();
  for (  PropertyOwnerInterface poi : choice.getChoiceFacets()) {
    assertTrue(poi instanceof FacetNode);
    FacetNode f=(FacetNode)poi;
    String name=f.getName();
    assertFalse(name.isEmpty());
    String label=f.getLabel();
    assertFalse(f.getLabel().isEmpty());
    if (poi instanceof ContributedFacetNode)     assertTrue(((Node)poi).getParent() == choice);
  }
  boolean hasBaseClass=choice.getExtensionBase() != null;
  if (hasBaseClass) {
    Node baseClass=choice.getExtensionBase();
    if (choice.getName().equals(""String_Node_Str"")) {
      for (      Node n : choice.getChildren())       if (n instanceof FacetNode) {
        assertTrue(((Node)n).getParent() != null);
        List<TLAttribute> tlAttrs=PropertyCodegenUtils.getInheritedFacetAttributes((TLFacet)n.getTLModelObject());
        List<Node> inheritedList=n.getInheritedChildren();
        if (inheritedList.isEmpty()) {
          List<Node> x=n.getInheritedChildren();
        }
      }
    }
    assertNotNull(baseClass);
  }
  for (  Node n : choice.getChildren()) {
    ml.check(n,validate);
    assertTrue(!(n instanceof VersionNode));
    if (!OTM16Upgrade.otm16Enabled)     assertTrue(""String_Node_Str"",!(n instanceof ContributedFacetNode));
  }
  assertNotNull(choice.getAliases());
}",0.9880794701986756
136222,"private static PropertyNode createAttribute(TLAttribute tlObj,PropertyOwnerInterface parent){
  PropertyNode nn;
  TLPropertyType type=tlObj.getType();
  if (type != null && type.getNamespace() != null && type.getNamespace().equals(ModelNode.XSD_NAMESPACE) && type.getLocalName().equals(""String_Node_Str""))   nn=new IdNode((TLModelElement)tlObj,parent);
  nn=new AttributeNode(tlObj,parent);
  return nn;
}","private static PropertyNode createAttribute(TLAttribute tlObj,PropertyOwnerInterface parent){
  PropertyNode nn;
  TLPropertyType type=tlObj.getType();
  if (type != null && type.getNamespace() != null && type.getNamespace().equals(ModelNode.XSD_NAMESPACE) && type.getLocalName().equals(""String_Node_Str""))   nn=new IdNode((TLModelElement)tlObj,parent);
 else   if (tlObj.isReference())   nn=new AttributeReferenceNode(tlObj,parent);
 else   nn=new AttributeNode(tlObj,parent);
  return nn;
}",0.9042316258351892
136223,"public AttributeReferenceNode(TLModelElement tlObj,PropertyOwnerInterface parent,PropertyNodeType type){
  super(tlObj,(INode)parent,type);
  getTLModelObject().setReference(true);
}","/** 
 * @param tlObj TLAttribute
 * @param parent can be null
 */
public AttributeReferenceNode(TLAttribute tlObj,PropertyOwnerInterface parent){
  super(tlObj,(INode)parent,PropertyNodeType.ID_ATTR_REF);
  getTLModelObject().setReference(true);
  assert(modelObject instanceof AttributeMO);
}",0.1768421052631578
136224,"/** 
 * Set the context to the owning library's defaultContextId.
 */
public void fixContext(){
  if (getLibrary() == null)   return;
  String contextID=getLibrary().getDefaultContextId();
  if (getExampleHandler() != null)   exampleHandler.fix(null);
  if (getEquivalentHandler() != null)   equivalentHandler.fix(null);
}","/** 
 * Set the context to the owning library's defaultContextId.
 */
public void fixContext(){
  if (getLibrary() == null)   return;
  if (isEditable()) {
    if (getExampleHandler() != null)     exampleHandler.fix(null);
    if (getEquivalentHandler() != null)     equivalentHandler.fix(null);
  }
}",0.8667736757624398
136225,"/** 
 * Release the lock and let validation run
 */
public static void unblock(){
  semaphore.release();
  LOGGER.debug(""String_Node_Str"");
}","/** 
 * Release the lock and let validation run
 */
public static void unblock(){
  semaphore.release();
}",0.8582995951417004
136226,"/** 
 * Prevent validation from running until released.
 */
public static void block(){
  try {
    semaphore.acquire();
  }
 catch (  InterruptedException e) {
    LOGGER.error(""String_Node_Str"",e.getLocalizedMessage());
    e.printStackTrace();
  }
  LOGGER.debug(""String_Node_Str"");
}","/** 
 * Prevent validation from running until released.
 */
public static void block(){
  try {
    semaphore.acquire();
  }
 catch (  InterruptedException e) {
    LOGGER.error(""String_Node_Str"",e.getLocalizedMessage());
    e.printStackTrace();
  }
}",0.935064935064935
136227,"/** 
 * Set the context to the passed context IF and ONLY IF that context is in the TL Library AND context controller. Uses default context otherwise.
 */
@Override public void fix(String sourceContext){
  if (sourceContext == null || !confirmContextExists(sourceContext))   sourceContext=owner.getLibrary().getDefaultContextId();
switch (type) {
case EXAMPLE:
    List<TLExample> examples=new ArrayList<TLExample>(((TLExampleOwner)tlOwner).getExamples());
  if (examples.isEmpty())   return;
TLExample keepThisTLE=examples.get(0);
if (examples.size() == 1) examples.get(0).setContext(sourceContext);
 else {
for (TLExample tle : examples) if (tle.getContext().equals(sourceContext)) keepThisTLE=tle;
for (TLExample tle : examples) if (tle != keepThisTLE) {
  convertToDoc(tle);
  tle.removeListener(this);
  ((TLExampleOwner)tlOwner).removeExample(tle);
}
 else tle.setContext(sourceContext);
}
break;
case EQUIVALENT:
List<TLEquivalent> equivalents=new ArrayList<TLEquivalent>(((TLEquivalentOwner)tlOwner).getEquivalents());
if (equivalents.isEmpty()) return;
TLEquivalent keepThisTLEq=equivalents.get(0);
if (equivalents.size() == 1) equivalents.get(0).setContext(sourceContext);
 else {
for (TLEquivalent tle : equivalents) if (tle.getContext().equals(sourceContext)) keepThisTLEq=tle;
for (TLEquivalent tle : equivalents) if (tle != keepThisTLEq) {
convertToDoc(tle);
tle.removeListener(this);
((TLEquivalentOwner)tlOwner).removeEquivalent(tle);
}
 else tle.setContext(sourceContext);
}
break;
}
}","/** 
 * Fix all the examples or equivalents on this property. Assures there is only one and it has the correct context. Set the context to the passed context IF and ONLY IF that context is in the TL Library AND context controller. Uses default context otherwise.
 */
@Override public void fix(String sourceContext){
  if (sourceContext == null || !confirmContextExists(sourceContext))   sourceContext=owner.getLibrary().getDefaultContextId();
switch (type) {
case EXAMPLE:
    List<TLExample> examples=new ArrayList<TLExample>(((TLExampleOwner)tlOwner).getExamples());
  if (examples.isEmpty())   return;
TLExample keepThisTLE=examples.get(0);
if (examples.size() == 1) examples.get(0).setContext(sourceContext);
 else {
for (TLExample tle : examples) if (tle.getContext().equals(sourceContext)) keepThisTLE=tle;
for (TLExample tle : examples) if (tle != keepThisTLE) {
  convertToDoc(tle);
  tle.removeListener(this);
  ((TLExampleOwner)tlOwner).removeExample(tle);
}
 else tle.setContext(sourceContext);
}
break;
case EQUIVALENT:
List<TLEquivalent> equivalents=new ArrayList<TLEquivalent>(((TLEquivalentOwner)tlOwner).getEquivalents());
if (equivalents.isEmpty()) return;
TLEquivalent keepThisTLEq=equivalents.get(0);
if (equivalents.size() == 1) equivalents.get(0).setContext(sourceContext);
 else {
for (TLEquivalent tle : equivalents) if (tle.getContext().equals(sourceContext)) keepThisTLEq=tle;
for (TLEquivalent tle : equivalents) if (tle != keepThisTLEq) {
convertToDoc(tle);
tle.removeListener(this);
((TLEquivalentOwner)tlOwner).removeEquivalent(tle);
}
 else tle.setContext(sourceContext);
}
break;
}
}",0.9640564826700898
136228,"/** 
 * Set the context to the owning library's defaultContextId.
 */
public void fixContext(){
  if (getLibrary() == null)   return;
  String contextID=getLibrary().getDefaultContextId();
  if (getExampleHandler() != null)   exampleHandler.set(exampleHandler.get(null),contextID);
  if (getEquivalentHandler() != null)   equivalentHandler.set(equivalentHandler.get(null),contextID);
}","/** 
 * Set the context to the owning library's defaultContextId.
 */
public void fixContext(){
  if (getLibrary() == null)   return;
  String contextID=getLibrary().getDefaultContextId();
  if (getExampleHandler() != null)   exampleHandler.fix(null);
  if (getEquivalentHandler() != null)   equivalentHandler.fix(null);
}",0.8656294200848657
136229,"private void applySelection(final IStructuredSelection iss){
  if (iss.getFirstElement() == null)   return;
  if (iss.getFirstElement() instanceof Node)   curNode=(Node)iss.getFirstElement();
  if (curNode instanceof VersionNode)   curNode=((VersionNode)curNode).get();
  selectedNodes.clear();
  for (  final Object o : iss.toList()) {
    if (o instanceof Node) {
      if (o instanceof VersionNode)       selectedNodes.add(((VersionNode)o).get());
 else       selectedNodes.add((Node)o);
      if (((Node)o).getLibrary() != null)       mc.postStatus(((Node)o).getEditStatusMsg());
    }
  }
}","private void applySelection(final IStructuredSelection iss){
  if (iss.getFirstElement() == null)   return;
  if (iss.getFirstElement() instanceof Node)   curNode=(Node)iss.getFirstElement();
  if (curNode instanceof VersionNode)   curNode=((VersionNode)curNode).get();
  selectedNodes.clear();
  for (  final Object o : iss.toList()) {
    if (o instanceof Node) {
      if (o instanceof VersionNode)       selectedNodes.add(((VersionNode)o).get());
 else       selectedNodes.add((Node)o);
      if (((Node)o).getLibrary() != null)       mc.postStatus(((Node)o).getEditStatusMsg());
    }
  }
  if (!ValidationManager.isValidNoWarnings(curNode)) {
    ValidationResultsView view=mc.getView_Validation();
    if (view != null)     view.setFindings(ValidationManager.validate(curNode),curNode);
  }
}",0.8536585365853658
136230,"@Override public void setCurrentNode(final INode n){
  prevNode=curNode;
  curNode=(Node)n;
}","@Override public void setCurrentNode(final INode n){
  prevNode=curNode;
  curNode=(Node)n;
  LOGGER.debug(""String_Node_Str"" + curNode + ""String_Node_Str""+ prevNode);
}",0.7126436781609196
136231,"private ValidationFindings validate(Node n){
  try {
    return TLModelCompileValidator.validateModelElement(n.getTLModelObject());
  }
 catch (  Exception e) {
    LOGGER.debug(""String_Node_Str"" + n + ""String_Node_Str""+ e.getLocalizedMessage());
  }
  mc.postStatus(""String_Node_Str"" + n.getLabel());
  return null;
}","private ValidationFindings validate(Node n){
  findings=ValidationManager.validate(n);
  mc.postStatus(""String_Node_Str"" + n.getLabel());
  return findings;
}",0.5756302521008403
136232,"public void setFindings(final ValidationFindings findings,final INode node){
  this.findings=findings;
  postFindings();
  currentNode=node;
}","/** 
 * Set the view global findings then post them.
 * @param findings
 * @param node
 */
public void setFindings(final ValidationFindings findings,final INode node){
  this.findings=findings;
  postFindings();
  currentNode=node;
}",0.7573333333333333
136233,"private void addOverlay(Node node,IDecoration decoration){
  if (!node.isValid())   decoration.addOverlay(errorDesc(),IDecoration.BOTTOM_LEFT);
 else   if (!node.isValid_NoWarnings())   decoration.addOverlay(warningDesc(),IDecoration.BOTTOM_LEFT);
}","private void addOverlay(Node node,IDecoration decoration){
  ValidationFindings findings=ValidationManager.validate(node);
  if (findings != null)   if (!ValidationManager.isValid(findings,FindingType.ERROR))   decoration.addOverlay(errorDesc,IDecoration.BOTTOM_LEFT);
 else   if (!ValidationManager.isValid(findings,FindingType.WARNING))   decoration.addOverlay(warningDesc,IDecoration.BOTTOM_LEFT);
}",0.5529953917050692
136234,"/** 
 * Update all the type users (children) to the latest version of the parent library. Also update extension owners. <p> Library Provider node lists all of the parent's type users that are assigned types from the owner library.
 * @param providerLibNode
 */
private void updateLibrary(LibraryProviderNode providerLibNode){
  DefaultRepositoryController rc=(DefaultRepositoryController)mc.getRepositoryController();
  LibraryNode libToUpdate=(LibraryNode)providerLibNode.getParent();
  List<TypeUser> usersToUpdate=new ArrayList<TypeUser>();
  List<ExtensionOwner> extensionsToUpdate=new ArrayList<ExtensionOwner>();
  for (  Node user : providerLibNode.getChildren())   if (user instanceof TypeUser) {
    if (!usersToUpdate.contains(((TypeUserNode)user).getOwner()))     usersToUpdate.add(((TypeUserNode)user).getOwner());
  }
 else   if (user instanceof ExtensionUserNode)   if (!extensionsToUpdate.contains(((ExtensionUserNode)user).getOwner()))   extensionsToUpdate.add(((ExtensionUserNode)user).getOwner());
  String question=""String_Node_Str"";
  String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int result=DialogUserNotifier.openQuestionWithButtons(""String_Node_Str"",question,buttons);
  boolean includeDrafts=false;
  if (result == 0)   includeDrafts=true;
 else   if (result == 2)   return;
  LibraryNode replacement=null;
  try {
    replacement=rc.getLatestVersion((LibraryNode)providerLibNode.getOwner(),includeDrafts);
  }
 catch (  RepositoryException e1) {
    if (replacement == null)     try {
      replacement=rc.getLatestVersion((LibraryNode)providerLibNode.getParent(),includeDrafts);
    }
 catch (    RepositoryException e) {
      DialogUserNotifier.openWarning(""String_Node_Str"",e1.getLocalizedMessage());
      return;
    }
  }
  if (replacement == null || replacement == providerLibNode.getOwner()) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  question=""String_Node_Str"" + providerLibNode.getOwner().getNameWithPrefix() + ""String_Node_Str""+ replacement.getNameWithPrefix()+ ""String_Node_Str"";
  if (DialogUserNotifier.openQuestion(""String_Node_Str"",question)) {
    replacement.replaceAllUsers(usersToUpdate);
    replacement.replaceAllExtensions(extensionsToUpdate);
  }
  libToUpdate.getWhereUsedHandler().refreshUsedByNode();
  mc.refresh(libToUpdate);
}","/** 
 * Update all the type users (children) to the latest version of the parent library. Also update extension owners. <p> Library Provider node lists all of the parent's type users that are assigned types from the owner library.
 * @param providerLibNode
 */
private void updateLibrary(LibraryProviderNode providerLibNode){
  DefaultRepositoryController rc=(DefaultRepositoryController)mc.getRepositoryController();
  LibraryNode libToUpdate=(LibraryNode)providerLibNode.getParent();
  LibraryNode libProvidingTypes=(LibraryNode)providerLibNode.getOwner();
  List<TypeUser> usersToUpdate=new ArrayList<TypeUser>();
  List<ExtensionOwner> extensionsToUpdate=new ArrayList<ExtensionOwner>();
  for (  Node user : providerLibNode.getChildren())   if (user instanceof TypeUserNode) {
    if (!usersToUpdate.contains(((TypeUserNode)user).getOwner()))     usersToUpdate.add(((TypeUserNode)user).getOwner());
  }
 else   if (user instanceof ExtensionUserNode)   if (!extensionsToUpdate.contains(((ExtensionUserNode)user).getOwner()))   extensionsToUpdate.add(((ExtensionUserNode)user).getOwner());
  if (usersToUpdate.isEmpty() && extensionsToUpdate.isEmpty()) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String question=""String_Node_Str"";
  String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int result=DialogUserNotifier.openQuestionWithButtons(""String_Node_Str"",question,buttons);
  boolean includeDrafts=false;
  if (result == 0)   includeDrafts=true;
 else   if (result == 2)   return;
  LibraryNode replacement=null;
  try {
    replacement=rc.getLatestVersion(libProvidingTypes,includeDrafts);
  }
 catch (  RepositoryException e1) {
    if (replacement == null)     try {
      replacement=rc.getLatestVersion(libProvidingTypes,includeDrafts);
    }
 catch (    RepositoryException e) {
      DialogUserNotifier.openWarning(""String_Node_Str"",e.getLocalizedMessage());
      return;
    }
  }
  if (replacement == null || replacement == libProvidingTypes) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  question=""String_Node_Str"" + libProvidingTypes.getNameWithPrefix() + ""String_Node_Str""+ replacement.getNameWithPrefix()+ ""String_Node_Str"";
  if (DialogUserNotifier.openQuestion(""String_Node_Str"",question)) {
    replacement.replaceAllUsers(usersToUpdate);
    replacement.replaceAllExtensions(extensionsToUpdate);
  }
  libToUpdate.getWhereUsedHandler().refreshUsedByNode();
  mc.refresh(libToUpdate);
}",0.8718053567777551
136235,"public LibraryNode getLatestVersion(LibraryNode lib,boolean includeDrafts) throws RepositoryException {
  LibraryNode replacement=null;
  ProjectItem projItem=lib.getProjectItem();
  Repository lRepo=lib.getProjectItem().getRepository();
  String baseNS=projItem.getBaseNamespace();
  if (projItem == null || lRepo == null || baseNS.isEmpty())   return null;
  List<RepositoryItem> ll;
  RepositoryItem replacementRI=null;
  String targetName=projItem.getContent().getName();
  if (includeDrafts)   replacementRI=getLatestRepoItem(lRepo,baseNS,TLLibraryStatus.DRAFT,targetName);
 else   replacementRI=getLatestRepoItem(lRepo,baseNS,TLLibraryStatus.UNDER_REVIEW,targetName);
  if (replacementRI == null)   replacementRI=getLatestRepoItem(lRepo,baseNS,TLLibraryStatus.FINAL,targetName);
  if (replacementRI == null)   return replacement;
  replacement=Node.getLibraryModelManager().get(replacementRI.getNamespace(),replacementRI.getLibraryName());
  if (replacement == null) {
    String message=""String_Node_Str"" + replacementRI.getNamespace() + ""String_Node_Str""+ replacementRI.getLibraryName();
    mc.postStatus(message);
    ProjectItem newPI=mc.getProjectController().add(lib.getProject(),replacementRI);
    replacement=Node.getLibraryModelManager().get(replacementRI.getNamespace(),replacementRI.getLibraryName());
  }
  return replacement;
}","public LibraryNode getLatestVersion(LibraryNode lib,boolean includeDrafts) throws RepositoryException {
  LibraryNode replacement=null;
  ProjectItem projItem=lib.getProjectItem();
  Repository lRepo=lib.getProjectItem().getRepository();
  String baseNS=projItem.getBaseNamespace();
  if (projItem == null || lRepo == null || baseNS.isEmpty())   return null;
  String message=""String_Node_Str"" + lib;
  mc.postStatus(message);
  mc.showBusy(true);
  mc.refresh();
  LOGGER.debug(message);
  List<RepositoryItem> ll;
  RepositoryItem replacementRI=null;
  String targetName=projItem.getContent().getName();
  if (includeDrafts)   replacementRI=getLatestRepoItem(lRepo,baseNS,TLLibraryStatus.DRAFT,targetName);
 else   replacementRI=getLatestRepoItem(lRepo,baseNS,TLLibraryStatus.UNDER_REVIEW,targetName);
  if (replacementRI == null)   replacementRI=getLatestRepoItem(lRepo,baseNS,TLLibraryStatus.FINAL,targetName);
  if (replacementRI == null) {
    mc.postStatus(""String_Node_Str"");
    mc.showBusy(false);
    return replacement;
  }
  replacement=Node.getLibraryModelManager().get(replacementRI.getNamespace(),replacementRI.getLibraryName());
  if (replacement == null) {
    message=""String_Node_Str"" + replacementRI.getNamespace() + ""String_Node_Str""+ replacementRI.getLibraryName();
    mc.postStatus(message);
    ProjectItem newPI=mc.getProjectController().add(lib.getProject(),replacementRI);
    replacement=Node.getLibraryModelManager().get(replacementRI.getNamespace(),replacementRI.getLibraryName());
  }
  mc.postStatus(""String_Node_Str"");
  mc.showBusy(false);
  return replacement;
}",0.8958262639972854
136236,"/** 
 * Get all of the components that use any aspect of the owning component. DO NOT make this a getChildren or the tree will become invalid with nodes having multiple parents which will break lots of getChildren() users.
 * @return new list of children
 */
@Override public List<Node> getChildren(){
  Set<Node> users=new HashSet<Node>();
  if (owner == null)   return Collections.emptyList();
  for (  Node l : owner.getWhereUsedHandler().getWhereUsed(true))   if (l instanceof LibraryNode)   users.add(new LibraryUserNode((LibraryNode)l,owner));
  return new ArrayList<Node>(users);
}","/** 
 * Get all of the components that use any aspect of the owning component. DO NOT make this a getChildren or the tree will become invalid with nodes having multiple parents which will break lots of getChildren() users.
 * @return new list of children
 */
@Override public List<Node> getChildren(){
  Set<Node> users=new HashSet<Node>();
  if (owner == null)   return Collections.emptyList();
  for (  Node l : owner.getWhereUsedHandler().getWhereUsed(true))   if (l instanceof LibraryNode && !l.isDeleted())   users.add(new LibraryUserNode((LibraryNode)l,owner));
  return new ArrayList<Node>(users);
}",0.984924623115578
136237,"/** 
 * Move one node to the new destination library. Links the node, the tl object and corrects context.
 * @param source
 * @param destination
 */
public void moveNode(final ComponentNode source,final LibraryNode destination){
  if (destination == null || source == null) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  if (!destination.isTLLibrary()) {
    LOGGER.warn(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (source.getChain() != null && source.getChain() == destination.getChain()) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (source.isInTLLibrary() && source.isTLLibraryMember()) {
    source.getLibrary().moveMember(source,destination);
  }
 else {
    LOGGER.warn(""String_Node_Str"" + source.getName() + ""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"" + source.isInTLLibrary() + ""String_Node_Str""+ source.isTLLibraryMember());
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"" + source.getName() + ""String_Node_Str""+ destination.getName());
}","/** 
 * Move one node to the new destination library. Links the node, the tl object and corrects context.
 * @param source
 * @param destination
 */
public void moveNode(final ComponentNode source,final LibraryNode destination){
  if (destination == null || source == null) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  if (!destination.isTLLibrary()) {
    LOGGER.warn(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (source.getChain() != null && source.getChain() == destination.getChain()) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!source.isInTLLibrary() || !source.isTLLibraryMember()) {
    LOGGER.warn(""String_Node_Str"" + source.getName() + ""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"" + source.isInTLLibrary() + ""String_Node_Str""+ source.isTLLibraryMember());
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  try {
    source.getLibrary().moveMember(source,destination);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"" + e.getLocalizedMessage());
    DialogUserNotifier.openError(""String_Node_Str"",e.getLocalizedMessage());
    return;
  }
  LOGGER.info(""String_Node_Str"" + source.getName() + ""String_Node_Str""+ destination.getName());
}",0.8699090549624358
136238,"@Override public boolean isTLLibrary(){
  return getTLaLib() instanceof TLLibrary;
}","@Override public boolean isTLLibrary(){
  return getTLModelObject() instanceof TLLibrary;
}",0.9257142857142856
136239,"/** 
 * Move a node from its library to a different library. Moves the node and underlying TL object.
 * @param source
 * @param destination
 */
public boolean moveMember(final Node source,LibraryNode destination) throws IllegalArgumentException {
  if (source == null || source.getModelObject() == null || source.getTLModelObject() == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!(source instanceof ComponentNode))   throw new IllegalArgumentException(source + ""String_Node_Str"");
  if (destination == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!(destination.getTLaLib() instanceof TLLibrary))   throw new IllegalArgumentException(""String_Node_Str"");
  if (source instanceof ServiceNode)   return false;
  addListeners();
  destination.addListeners();
  if (source instanceof ContextualFacetNode && !(source instanceof ContributedFacetNode)) {
    TLContextualFacet tlSource=((ContextualFacetNode)source).getTLModelObject();
    tlSource.getOwningLibrary().removeNamedMember(tlSource);
    destination.getTLLibrary().addNamedMember(tlSource);
  }
 else   try {
    source.getLibrary().getTLLibrary().moveNamedMember((TLLibraryMember)source.getTLModelObject(),destination.getLibrary().getTLLibrary());
  }
 catch (  Exception e) {
    destination=this;
  }
  removeListeners();
  destination.removeListeners();
  destination.collapseContexts();
  assert(destination.getTLLibrary().getContexts().size() == 1);
  return true;
}","/** 
 * Move a node from its library to a different library. Moves the node and underlying TL object.
 * @param source
 * @param destination
 */
public boolean moveMember(final Node source,LibraryNode destination) throws IllegalArgumentException {
  if (source == null || source.getModelObject() == null || source.getTLModelObject() == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!(source instanceof ComponentNode))   throw new IllegalArgumentException(source + ""String_Node_Str"");
  if (destination == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!(destination.getTLModelObject() instanceof TLLibrary))   throw new IllegalArgumentException(""String_Node_Str"");
  if (source.getLibrary() != this)   throw new IllegalArgumentException(""String_Node_Str"");
  if (source instanceof ServiceNode)   throw new IllegalArgumentException(""String_Node_Str"");
  if (Node.GetNode(getTLModelObject()) != this)   throw new IllegalArgumentException(""String_Node_Str"" + this);
  if (Node.GetNode(destination.getTLModelObject()) != destination)   throw new IllegalArgumentException(""String_Node_Str"" + destination);
  if (source instanceof ContextualFacetNode && !(source instanceof ContributedFacetNode)) {
    TLContextualFacet tlSource=((ContextualFacetNode)source).getTLModelObject();
    tlSource.getOwningLibrary().removeNamedMember(tlSource);
    destination.getTLLibrary().addNamedMember(tlSource);
  }
 else   try {
    getTLLibrary().moveNamedMember((TLLibraryMember)source.getTLModelObject(),destination.getTLLibrary());
  }
 catch (  Exception e) {
    destination=this;
    throw new IllegalArgumentException(""String_Node_Str"" + e.getLocalizedMessage());
  }
  destination.collapseContexts();
  assert(destination.getTLLibrary().getContexts().size() == 1);
  return true;
}",0.8025516403402188
136240,"/** 
 * Is this either of the built in libraries: XSD Schema or OTA_Common_v01_00
 */
@Override public boolean isBuiltIn(){
  return getTLaLib() instanceof BuiltInLibrary;
}","/** 
 * Is this either of the built in libraries: XSD Schema or OTA_Common_v01_00
 */
@Override public boolean isBuiltIn(){
  return getTLModelObject() instanceof BuiltInLibrary;
}",0.963172804532578
136241,"public AbstractLibrary getTLaLib(){
  return absTLLibrary;
}","/** 
 * Use   {@link #getTLModelObject()}
 * @return
 */
@Deprecated public AbstractLibrary getTLaLib(){
  return absTLLibrary;
}",0.6349206349206349
136242,"@Override public void processOwnershipEvent(OwnershipEvent<?,?> event){
  Node affectedNode=getAffectedNode(event);
  LibraryNode ln=(LibraryNode)thisNode;
switch (event.getType()) {
case MEMBER_ADDED:
    if (affectedNode == null)     return;
  if (affectedNode instanceof ContextualFacetNode) {
    if (affectedNode.getParent() != null)     break;
    if (!((ContextualFacetNode)affectedNode).canBeLibraryMember())     break;
  }
if (affectedNode instanceof VersionNode) ln.linkMember(((VersionNode)affectedNode).getNewestVersion());
 else ln.linkMember(affectedNode);
if (ln.isInChain()) {
ln.getChain().add((ComponentNode)affectedNode);
}
break;
case MEMBER_REMOVED:
if (affectedNode == null || affectedNode.getParent() == null) return;
Node parent=affectedNode.getParent();
if (parent instanceof VersionNode) parent=parent.getParent();
if (parent == null || parent instanceof ComponentNode) {
break;
}
if (ln.getChain() != null) ln.getChain().removeAggregate((ComponentNode)affectedNode);
affectedNode.unlinkNode();
break;
default :
break;
}
}","@Override public void processOwnershipEvent(OwnershipEvent<?,?> event){
  Node affectedNode=getAffectedNode(event);
  LOGGER.debug(""String_Node_Str"" + event.getType() + ""String_Node_Str""+ thisNode+ ""String_Node_Str""+ affectedNode);
  LibraryNode ln=(LibraryNode)thisNode;
switch (event.getType()) {
case MEMBER_ADDED:
    if (affectedNode == null)     return;
  if (affectedNode instanceof ContextualFacetNode) {
    if (affectedNode.getParent() != null)     break;
    if (!((ContextualFacetNode)affectedNode).canBeLibraryMember())     break;
  }
if (affectedNode instanceof VersionNode) ln.linkMember(((VersionNode)affectedNode).getNewestVersion());
 else ln.linkMember(affectedNode);
if (ln.isInChain()) {
ln.getChain().add((ComponentNode)affectedNode);
}
break;
case MEMBER_REMOVED:
if (affectedNode == null || affectedNode.getParent() == null) return;
Node parent=affectedNode.getParent();
if (parent instanceof VersionNode) parent=parent.getParent();
if (parent == null || parent instanceof ComponentNode) {
break;
}
if (ln.getChain() != null) ln.getChain().removeAggregate((ComponentNode)affectedNode);
affectedNode.unlinkNode();
break;
default :
break;
}
}",0.9475587703435804
136243,"@SuppressWarnings(""String_Node_Str"") @Test public void moveMemberTests() throws Exception {
  LibraryChainNode fromChain=ml.createNewManagedLibrary(""String_Node_Str"",defaultProject);
  LibraryChainNode toChain=ml.createNewManagedLibrary(""String_Node_Str"",defaultProject);
  LibraryNode fromLib=ml.createNewLibrary(""String_Node_Str"",""String_Node_Str"",defaultProject);
  LibraryNode toLib=ml.createNewLibrary(""String_Node_Str"",""String_Node_Str"",defaultProject);
  Assert.assertTrue(fromLib.isEditable());
  Assert.assertTrue(toLib.isEditable());
  List<TLContext> toLibContexts=toLib.getTLLibrary().getContexts();
  List<TLContext> fromLibContexts=fromLib.getTLLibrary().getContexts();
  Node object=addContextUsers(fromLib);
  Assert.assertEquals(2,fromLibContexts.size());
  object.getLibrary().moveMember(object,toLib);
  Assert.assertEquals(2,fromLibContexts.size());
  Assert.assertEquals(1,toLibContexts.size());
  Assert.assertEquals(2,toLib.getDescendants_LibraryMembers().size());
  ModelNode model=mc.getModelNode();
  lf.loadTestGroupA(mc);
  int count=toLib.getDescendants_LibraryMembers().size();
  for (  LibraryNode ln : model.getUserLibraries()) {
    if (ln != toLib && ln != fromLib) {
      LibraryChainNode lcn;
      if (ln.isInChain())       lcn=ln.getChain();
 else       lcn=new LibraryChainNode(ln);
      int libCount=ln.getDescendants_LibraryMembers().size();
      for (      Node n : ln.getDescendants_LibraryMembers()) {
        if (n instanceof ServiceNode)         continue;
        LOGGER.debug(""String_Node_Str"" + n + ""String_Node_Str""+ n.getLibrary()+ ""String_Node_Str""+ toLib);
        if (n.getLibrary().moveMember(n,toLib))         count++;
        if (libCount - 1 != ln.getDescendants_LibraryMembers().size()) {
          List<Node> dl=ln.getDescendants_LibraryMembers();
          LOGGER.debug(""String_Node_Str"" + dl.size());
        }
        int toCount=toLib.getDescendants_LibraryMembers().size();
        if (count != toCount) {
          LOGGER.debug(""String_Node_Str"" + n);
        }
      }
    }
  }
  Assert.assertEquals(1,toLibContexts.size());
  Assert.assertEquals(count,toLib.getDescendants_LibraryMembers().size());
}","@SuppressWarnings(""String_Node_Str"") @Test public void moveMemberTests() throws Exception {
  LibraryChainNode fromChain=ml.createNewManagedLibrary(""String_Node_Str"",defaultProject);
  LibraryChainNode toChain=ml.createNewManagedLibrary(""String_Node_Str"",defaultProject);
  LibraryNode fromLib=ml.createNewLibrary(""String_Node_Str"",""String_Node_Str"",defaultProject);
  LibraryNode toLib=ml.createNewLibrary(""String_Node_Str"",""String_Node_Str"",defaultProject);
  Assert.assertTrue(fromLib.isEditable());
  Assert.assertTrue(toLib.isEditable());
  List<TLContext> toLibContexts=toLib.getTLLibrary().getContexts();
  List<TLContext> fromLibContexts=fromLib.getTLLibrary().getContexts();
  assertTrue(Node.GetNode(toLib.getTLLibrary()) == toLib);
  assertTrue(Node.GetNode(fromLib.getTLLibrary()) == fromLib);
  Node object=addContextUsers(fromLib);
  Assert.assertEquals(2,fromLibContexts.size());
  object.getLibrary().moveMember(object,toLib);
  Assert.assertEquals(2,fromLibContexts.size());
  Assert.assertEquals(1,toLibContexts.size());
  Assert.assertEquals(2,toLib.getDescendants_LibraryMembers().size());
  ModelNode model=mc.getModelNode();
  lf.loadTestGroupA(mc);
  assertTrue(Node.GetNode(toLib.getTLLibrary()) == toLib);
  int count=toLib.getDescendants_LibraryMembers().size();
  for (  LibraryNode ln : model.getUserLibraries()) {
    if (ln != toLib && ln != fromLib) {
      int libCount=ln.getDescendants_LibraryMembers().size();
      assertTrue(Node.GetNode(ln.getTLLibrary()) == ln);
      for (      Node n : ln.getDescendants_LibraryMembers()) {
        if (n instanceof ServiceNode)         continue;
        LOGGER.debug(""String_Node_Str"" + n + ""String_Node_Str""+ n.getLibrary()+ ""String_Node_Str""+ toLib);
        assertTrue(n.getLibrary() == ln);
        if (n.getLibrary().moveMember(n,toLib))         count++;
        assertTrue(""String_Node_Str"",toLib.getDescendants_LibraryMembers().contains(n));
        if (libCount - 1 != ln.getDescendants_LibraryMembers().size()) {
          List<Node> dl=ln.getDescendants_LibraryMembers();
          LOGGER.debug(""String_Node_Str"" + dl.size());
        }
        int toCount=toLib.getDescendants_LibraryMembers().size();
        if (count != toCount) {
          LOGGER.debug(""String_Node_Str"" + n);
        }
      }
    }
  }
  Assert.assertEquals(1,toLibContexts.size());
  Assert.assertEquals(count,toLib.getDescendants_LibraryMembers().size());
}",0.8901960784313725
136244,"public void checkObject(Node node){
  assertTrue(node != null);
  if (node instanceof BusinessObjectNode)   new BusinessObjectTests().checkBusinessObject((BusinessObjectNode)node);
 else   if (node instanceof CoreObjectNode)   new CoreObjectTests().checkCore((CoreObjectNode)node);
 else   if (node instanceof VWA_Node)   new VWA_Tests().checkVWA((VWA_Node)node);
 else   if (node instanceof PropertyOwnerNode)   new FacetsTests().checkFacet((PropertyOwnerNode)node);
 else   if (node instanceof ServiceNode)   new ServiceTests().check((ServiceNode)node);
 else   if (node instanceof OperationNode)   new OperationTests().check((OperationNode)node);
  if (!node.isValid()) {
    printValidationFindings(node.getOwningComponent());
    assertTrue(""String_Node_Str"",node.isValid());
  }
}","public void checkObject(Node node){
  assertTrue(node != null);
  assertTrue(""String_Node_Str"",Node.GetNode(node.getTLModelObject()) == node);
  if (node instanceof BusinessObjectNode)   new BusinessObjectTests().checkBusinessObject((BusinessObjectNode)node);
 else   if (node instanceof CoreObjectNode)   new CoreObjectTests().checkCore((CoreObjectNode)node);
 else   if (node instanceof VWA_Node)   new VWA_Tests().checkVWA((VWA_Node)node);
 else   if (node instanceof PropertyOwnerNode)   new FacetsTests().checkFacet((PropertyOwnerNode)node);
 else   if (node instanceof ServiceNode)   new ServiceTests().check((ServiceNode)node);
 else   if (node instanceof OperationNode)   new OperationTests().check((OperationNode)node);
  if (!node.isValid()) {
    printValidationFindings(node.getOwningComponent());
    assertTrue(""String_Node_Str"",node.isValid());
  }
}",0.9521502119927316
136245,"/** 
 * Tests if a node can be added to based edit-ability and version status. Used in global selection tester. <b>Note,</b> a minor version might have to be created before properties can be added. (use isNewToChain() to test). • Values with Attributes (VWA) • Core Object • Business Object • Operation
 * @return true if the node can have properties added.
 */
public boolean isEnabled_AddProperties(){
  if (library == null || parent == null || !isEditable() || isDeleted())   return false;
  if (isEditable_inService() && getLibrary().getChain() != null && getLibrary().getChain().getHead() == getLibrary())   return !getLibrary().getChain().getHead().getEditStatus().equals(NodeEditStatus.PATCH);
  if (this instanceof VersionedObjectInterface)   return isEditable_isNewOrAsMinor();
  if (this instanceof Enumeration)   return isEditable_isNewOrAsMinor();
  if (this instanceof ExtensionPointNode)   return isEditable_newToChain();
  if (this instanceof ContextualFacetNode)   return isEditable_newToChain();
  if (this instanceof SimpleFacetNode || this instanceof ListFacetNode)   return false;
  if (this instanceof FacetNode)   return getOwningComponent().isEnabled_AddProperties();
  if (this instanceof VWA_AttributeFacetNode)   return getOwningComponent().isEnabled_AddProperties();
  if (this instanceof RoleFacetNode)   return getOwningComponent().isEnabled_AddProperties();
  if (this instanceof SimpleAttributeNode)   return false;
  if (this instanceof PropertyNode)   return this != getOwningComponent() ? getOwningComponent().isEnabled_AddProperties() : false;
  return false;
}","/** 
 * Tests if a node can be added to based edit-ability and version status. Used in global selection tester. <b>Note,</b> a minor version might have to be created before properties can be added. (use isNewToChain() to test). • Values with Attributes (VWA) • Core Object • Business Object • Operation
 * @return true if the node can have properties added.
 */
public boolean isEnabled_AddProperties(){
  if (library == null || parent == null || !isEditable() || isDeleted())   return false;
  if (isEditable_inService() && getLibrary().getChain() != null && getLibrary().getChain().getHead() == getLibrary())   return !getLibrary().getChain().getHead().getEditStatus().equals(NodeEditStatus.PATCH);
  if (this instanceof VersionedObjectInterface)   return isEditable_isNewOrAsMinor();
  if (this instanceof ExtensionPointNode)   return isEditable_newToChain();
  if (this instanceof SimpleFacetNode || this instanceof ListFacetNode)   return false;
  if (this instanceof FacetNode)   return getOwningComponent().isEnabled_AddProperties();
  if (this instanceof VWA_AttributeFacetNode)   return getOwningComponent().isEnabled_AddProperties();
  if (this instanceof RoleFacetNode)   return getOwningComponent().isEnabled_AddProperties();
  if (this instanceof SimpleAttributeNode)   return false;
  if (this instanceof PropertyNode)   return this != getOwningComponent() ? getOwningComponent().isEnabled_AddProperties() : false;
  return false;
}",0.95069033530572
136246,"@Override public String getDecoration(){
  String decoration=""String_Node_Str"";
  if (OTM16Upgrade.otm16Enabled) {
    decoration+=""String_Node_Str"" + getLabel();
    if (whereContributed != null && whereContributed.getParent() != null)     if (whereContributed.getParent().getLibrary() == getLibrary())     decoration+=""String_Node_Str"" + whereContributed.getParent().getName();
 else     decoration+=""String_Node_Str"" + whereContributed.getParent().getNameWithPrefix();
  }
  return decoration;
}","@Override public String getDecoration(){
  String decoration=""String_Node_Str"";
  if (OTM16Upgrade.otm16Enabled) {
    decoration+=""String_Node_Str"" + getLabel();
    if (whereContributed != null && whereContributed.getParent() != null)     if (whereContributed.getParent().getLibrary() == getLibrary())     decoration+=""String_Node_Str"" + whereContributed.getParent().getName();
 else     decoration+=""String_Node_Str"" + whereContributed.getParent().getNameWithPrefix();
    decoration+=""String_Node_Str"" + getTlVersion();
    if (!isInHead())     decoration+=""String_Node_Str"";
    decoration+=""String_Node_Str"";
  }
  return decoration;
}",0.874451273046532
136247,"/** 
 * Add this contextual facet to the owner. Removes existing contributed facet if needed.
 * @param owner
 * @param newFacet
 */
protected void add(ContextualFacetOwnerInterface owner,TLContextualFacet newFacet){
  if (getWhereContributed() != null)   getWhereContributed().unlinkNode();
  if (OTM16Upgrade.otm16Enabled) {
    owner.getLibrary().addMember(this);
    ContributedFacetNode contrib=new ContributedFacetNode(newFacet);
    ((Node)owner).linkChild(contrib);
  }
 else {
    ((Node)owner).linkChild(this);
  }
}","/** 
 * Add this contextual facet to the owner. Removes existing contributed facet if needed.
 * @param owner
 * @param newFacet
 */
protected void add(ContextualFacetOwnerInterface owner,TLContextualFacet newFacet){
  if (getWhereContributed() != null)   getWhereContributed().unlinkNode();
  if (OTM16Upgrade.otm16Enabled) {
    if (getLibrary() == null)     owner.getLibrary().addMember(this);
    ContributedFacetNode contrib=new ContributedFacetNode(newFacet);
    ((Node)owner).linkChild(contrib);
  }
 else {
    ((Node)owner).linkChild(this);
  }
}",0.9611829944547134
136248,"public void setOwner(ContextualFacetOwnerInterface owner){
  TLContextualFacet newFacet=getTLModelObject();
  newFacet.setOwningEntity(owner.getTLModelObject());
  newFacet.setOwningLibrary(owner.getLibrary().getTLLibrary());
  if (owner.getTLModelObject() instanceof TLBusinessObject)   ((TLBusinessObject)owner.getTLModelObject()).addQueryFacet(newFacet);
  super.add(owner,newFacet);
}","public void setOwner(ContextualFacetOwnerInterface owner){
  TLContextualFacet newFacet=getTLModelObject();
  newFacet.setOwningEntity(owner.getTLModelObject());
  if (getLibrary() != null)   newFacet.setOwningLibrary(getLibrary().getTLLibrary());
 else   newFacet.setOwningLibrary(owner.getLibrary().getTLLibrary());
  if (owner.getTLModelObject() instanceof TLBusinessObject)   ((TLBusinessObject)owner.getTLModelObject()).addQueryFacet(newFacet);
  super.add(owner,newFacet);
}",0.7465437788018433
136249,"private Node linkContextual(ContextualFacetNode cf,Node subject,LibraryNode lib,String name,String description){
  cf.setName(name);
  cf.setDescription(description);
  if (subject instanceof ContextualFacetOwnerInterface)   cf.setOwner((ContextualFacetOwnerInterface)subject);
 else   lib.addMember(cf);
  return cf;
}","private Node linkContextual(ContextualFacetNode cf,Node subject,LibraryNode lib,String name,String description){
  cf.setName(name);
  cf.setDescription(description);
  lib.addMember(cf);
  if (subject instanceof ContextualFacetOwnerInterface)   cf.setOwner((ContextualFacetOwnerInterface)subject);
  return cf;
}",0.9240506329113924
136250,"@Override public boolean isEnabled(){
  LibraryNode ln=null;
  Node n=mc.getSelectedNode_NavigatorView();
  if (n != null)   ln=n.getLibrary();
  if (ln == null)   return false;
  RepositoryItemState state=ln.getProjectItem().getState();
  TLLibraryStatus status=ln.getProjectItem().getStatus();
  LOGGER.debug(ln + ""String_Node_Str"" + status+ ""String_Node_Str""+ state+ ""String_Node_Str""+ ln.getStatus().nextStatus());
  if (!ln.isInProjectNS())   return false;
  if (ln.getProjectItem().getStatus() == null || ln.getProjectItem().getStatus().nextStatus() == null)   return false;
  if (!ln.getProjectItem().getStatus().nextStatus().equals(targetStatus))   return false;
  if (targetStatus.equals(TLLibraryStatus.OBSOLETE)) {
    if (!OTM16Upgrade.otm16Enabled)     return false;
    if (!RepositoryUtils.isOTM16Library(ln.getProjectItem().getContent()))     return false;
  }
  return ln.isManaged();
}","@Override public boolean isEnabled(){
  LibraryNode ln=null;
  Node n=mc.getSelectedNode_NavigatorView();
  if (n != null)   ln=n.getLibrary();
  if (ln == null)   return false;
  RepositoryItemState state=ln.getProjectItem().getState();
  TLLibraryStatus status=ln.getProjectItem().getStatus();
  if (!ln.isInProjectNS())   return false;
  if (ln.getProjectItem().getStatus() == null || ln.getProjectItem().getStatus().nextStatus() == null)   return false;
  if (!ln.getProjectItem().getStatus().nextStatus().equals(targetStatus))   return false;
  if (targetStatus.equals(TLLibraryStatus.OBSOLETE)) {
    if (!OTM16Upgrade.otm16Enabled)     return false;
    if (!RepositoryUtils.isOTM16Library(ln.getProjectItem().getContent()))     return false;
  }
  return ln.isManaged();
}",0.926916221033868
136251,"/** 
 * run repository controller create major version
 */
@Override public void run(){
  RepositoryController rc=mc.getRepositoryController();
  if (rc == null) {
    this.notifyResult(false);
    return;
  }
  for (  Node node : mc.getSelectedNodes_NavigatorView()) {
    node=node.getLibrary();
    if (!(node.getLibrary() instanceof LibraryNode)) {
      DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
      continue;
    }
    LibraryNode ln=node.getLibrary();
    if (ln.getTLaLib().getOwningModel() == null) {
      DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
      continue;
    }
switch (targetStatus) {
case FINAL:
      mc.postStatus(""String_Node_Str"" + ln);
    break;
case UNDER_REVIEW:
  mc.postStatus(""String_Node_Str"" + node);
break;
case OBSOLETE:
mc.postStatus(""String_Node_Str"" + node);
break;
default :
return;
}
this.notifyResult(rc.promote(ln,targetStatus));
}
}","/** 
 * run repository controller create major version
 */
@Override public void run(){
  RepositoryController rc=mc.getRepositoryController();
  if (rc == null) {
    this.notifyResult(false);
    return;
  }
  for (  Node node : mc.getSelectedNodes_NavigatorView()) {
    node=node.getLibrary();
    if (!(node.getLibrary() instanceof LibraryNode)) {
      DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
      continue;
    }
    LibraryNode ln=node.getLibrary();
    if (ln.getTLModelObject().getOwningModel() == null) {
      DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
      continue;
    }
switch (targetStatus) {
case FINAL:
      mc.postStatus(""String_Node_Str"" + ln);
    break;
case UNDER_REVIEW:
  mc.postStatus(""String_Node_Str"" + node);
break;
case OBSOLETE:
mc.postStatus(""String_Node_Str"" + node);
break;
default :
return;
}
this.notifyResult(rc.promote(ln,targetStatus));
}
}",0.993044408774746
136252,"@Override public boolean isEnabled(){
  Node n=mc.getSelectedNode_NavigatorView();
  if (n instanceof LibraryProviderNode)   return true;
  return n != null && n.isEditable() ? n instanceof TypeUserNode : false;
}","@Override public boolean isEnabled(){
  Node n=mc.getSelectedNode_NavigatorView();
  if (n instanceof LibraryProviderNode)   return ((LibraryProviderNode)n).getParent().isEditable();
  return n != null && n.isEditable() ? n instanceof TypeUserNode : false;
}",0.8874734607218684
136253,"private void updateLibrary(LibraryProviderNode providerLibNode){
  DefaultRepositoryController rc=(DefaultRepositoryController)mc.getRepositoryController();
  LibraryNode libToUpdate=(LibraryNode)providerLibNode.getParent();
  Set<LibraryNode> usedLibs=new HashSet<LibraryNode>();
  for (  Node n : providerLibNode.getChildren())   if (n instanceof TypeUserNode)   usedLibs.add(((TypeUserNode)n).getOwner().getAssignedType().getLibrary());
 else   if (n instanceof ExtensionUserNode)   usedLibs.add(((ExtensionUserNode)n).getOwner().getExtensionBase().getLibrary());
  String question=""String_Node_Str"";
  String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int result=DialogUserNotifier.openQuestionWithButtons(""String_Node_Str"",question,buttons);
  boolean includeDrafts=false;
  if (result == 0)   includeDrafts=true;
 else   if (result == 2)   return;
  HashMap<LibraryNode,LibraryNode> replacementMap;
  try {
    replacementMap=rc.getVersionUpdateMap(new ArrayList<LibraryNode>(usedLibs),includeDrafts);
  }
 catch (  RepositoryException e1) {
    DialogUserNotifier.openWarning(""String_Node_Str"",e1.getLocalizedMessage());
    return;
  }
  LibraryNode targetLib=null;
  LibraryNode oldLib=null;
  for (  Entry<LibraryNode,LibraryNode> e : replacementMap.entrySet()) {
    targetLib=e.getValue();
    oldLib=e.getKey();
  }
  if (targetLib == null) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  question=""String_Node_Str"" + oldLib.getNameWithPrefix() + ""String_Node_Str""+ targetLib.getNameWithPrefix()+ ""String_Node_Str"";
  if (DialogUserNotifier.openQuestion(""String_Node_Str"",question))   libToUpdate.replaceAllUsers(replacementMap);
  libToUpdate.getWhereUsedHandler().refreshUsedByNode();
  mc.refresh(libToUpdate);
}","/** 
 * Update all the type users (children) to the latest version of the parent library. Also update extension owners. <p> Library Provider node lists all of the parent's type users that are assigned types from the owner library.
 * @param providerLibNode
 */
private void updateLibrary(LibraryProviderNode providerLibNode){
  DefaultRepositoryController rc=(DefaultRepositoryController)mc.getRepositoryController();
  LibraryNode libToUpdate=(LibraryNode)providerLibNode.getParent();
  List<TypeUser> usersToUpdate=new ArrayList<TypeUser>();
  List<ExtensionOwner> extensionsToUpdate=new ArrayList<ExtensionOwner>();
  for (  Node user : providerLibNode.getChildren())   if (user instanceof TypeUser) {
    if (!usersToUpdate.contains(((TypeUserNode)user).getOwner()))     usersToUpdate.add(((TypeUserNode)user).getOwner());
  }
 else   if (user instanceof ExtensionUserNode)   if (!extensionsToUpdate.contains(((ExtensionUserNode)user).getOwner()))   extensionsToUpdate.add(((ExtensionUserNode)user).getOwner());
  String question=""String_Node_Str"";
  String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int result=DialogUserNotifier.openQuestionWithButtons(""String_Node_Str"",question,buttons);
  boolean includeDrafts=false;
  if (result == 0)   includeDrafts=true;
 else   if (result == 2)   return;
  LibraryNode replacement=null;
  try {
    replacement=rc.getLatestVersion((LibraryNode)providerLibNode.getOwner(),includeDrafts);
  }
 catch (  RepositoryException e1) {
    if (replacement == null)     try {
      replacement=rc.getLatestVersion((LibraryNode)providerLibNode.getParent(),includeDrafts);
    }
 catch (    RepositoryException e) {
      DialogUserNotifier.openWarning(""String_Node_Str"",e1.getLocalizedMessage());
      return;
    }
  }
  if (replacement == null || replacement == providerLibNode.getOwner()) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  question=""String_Node_Str"" + providerLibNode.getOwner().getNameWithPrefix() + ""String_Node_Str""+ replacement.getNameWithPrefix()+ ""String_Node_Str"";
  if (DialogUserNotifier.openQuestion(""String_Node_Str"",question)) {
    replacement.replaceAllUsers(usersToUpdate);
    replacement.replaceAllExtensions(extensionsToUpdate);
  }
  libToUpdate.getWhereUsedHandler().refreshUsedByNode();
  mc.refresh(libToUpdate);
}",0.5960105743811583
136254,"public HashMap<LibraryNode,LibraryNode> getVersionUpdateMap(List<LibraryNode> usedLibs,boolean includeDrafts) throws RepositoryException {
  HashMap<LibraryNode,LibraryNode> replacementMap=new HashMap<>();
  HashMap<LibraryNode,RepositoryItem> itemMap=new HashMap<>();
  List<RepositoryItem> ll;
  for (  LibraryNode lib : usedLibs) {
    ProjectItem projItem=lib.getProjectItem();
    Repository lRepo=lib.getProjectItem().getRepository();
    String baseNS=projItem.getBaseNamespace();
    if (projItem == null || lRepo == null || baseNS.isEmpty())     continue;
    ll=lRepo.listItems(baseNS,true,includeDrafts);
    if (ll.size() > 0) {
      for (      RepositoryItem latest : ll)       if (latest != null && latest.getLibraryName().equals(projItem.getLibraryName()) && !latest.getNamespace().equals(projItem.getNamespace()))       itemMap.put(lib,latest);
    }
  }
  HashMap<String,LibraryNode> libraryMap=new HashMap<>();
  for (  LibraryNode lib : ModelNode.getAllUserLibraries())   libraryMap.put(lib.getNameWithPrefix(),lib);
  for (  Entry<LibraryNode,RepositoryItem> entry : itemMap.entrySet()) {
    String entryNwPrefix=entry.getKey().getNameWithPrefix();
    String latestNS=entry.getValue().getNamespace();
    String latestNwPrefix=entry.getKey().getNsHandler().getPrefix(latestNS) + ""String_Node_Str"" + entry.getValue().getLibraryName();
    if (libraryMap.containsKey(latestNwPrefix))     replacementMap.put(libraryMap.get(entryNwPrefix),libraryMap.get(latestNwPrefix));
 else {
      String message=""String_Node_Str"" + entry.getValue().getNamespace() + ""String_Node_Str""+ entry.getValue().getLibraryName()+ ""String_Node_Str"";
      mc.postStatus(message);
      ProjectItem newPI=mc.getProjectController().add(entry.getKey().getProject(),entry.getValue());
      for (      LibraryNode lib : ModelNode.getAllUserLibraries())       if (lib.getNameWithPrefix().equals(latestNwPrefix))       replacementMap.put(libraryMap.get(entryNwPrefix),lib);
    }
  }
  return replacementMap;
}","/** 
 * For each passed library find the latest version from the same repository. If different, add the passed library and latest version in the returned map. WARNING: each library will invoke a slow process on the repository
 * @param usedLibs
 * @param includeDrafts if true, draft libraries will be included as replacement candidate
 * @return maps of libraries, key is passed library and value is later version of library.
 * @throws RepositoryException
 */
@Deprecated public HashMap<LibraryNode,LibraryNode> getVersionUpdateMap(List<LibraryNode> usedLibs,boolean includeDrafts) throws RepositoryException {
  HashMap<LibraryNode,LibraryNode> replacementMap=new HashMap<>();
  HashMap<LibraryNode,RepositoryItem> itemMap=new HashMap<>();
  List<RepositoryItem> ll;
  for (  LibraryNode lib : usedLibs) {
    ProjectItem projItem=lib.getProjectItem();
    Repository lRepo=lib.getProjectItem().getRepository();
    String baseNS=projItem.getBaseNamespace();
    if (projItem == null || lRepo == null || baseNS.isEmpty())     continue;
    ll=lRepo.listItems(baseNS,true,includeDrafts);
    if (ll.size() > 0) {
      for (      RepositoryItem latest : ll)       if (latest != null && latest.getLibraryName().equals(projItem.getLibraryName()) && !latest.getNamespace().equals(projItem.getNamespace()))       itemMap.put(lib,latest);
    }
  }
  HashMap<String,LibraryNode> libraryMap=new HashMap<>();
  for (  LibraryNode lib : ModelNode.getAllUserLibraries())   libraryMap.put(lib.getNameWithPrefix(),lib);
  for (  Entry<LibraryNode,RepositoryItem> entry : itemMap.entrySet()) {
    String entryNwPrefix=entry.getKey().getNameWithPrefix();
    String latestNS=entry.getValue().getNamespace();
    String latestNwPrefix=entry.getKey().getNsHandler().getPrefix(latestNS) + ""String_Node_Str"" + entry.getValue().getLibraryName();
    if (libraryMap.containsKey(latestNwPrefix))     replacementMap.put(libraryMap.get(entryNwPrefix),libraryMap.get(latestNwPrefix));
 else {
      String message=""String_Node_Str"" + entry.getValue().getNamespace() + ""String_Node_Str""+ entry.getValue().getLibraryName()+ ""String_Node_Str"";
      mc.postStatus(message);
      ProjectItem newPI=mc.getProjectController().add(entry.getKey().getProject(),entry.getValue());
      for (      LibraryNode lib : ModelNode.getAllUserLibraries())       if (lib.getNameWithPrefix().equals(latestNwPrefix))       replacementMap.put(libraryMap.get(entryNwPrefix),lib);
    }
  }
  for (  Entry<LibraryNode,LibraryNode> entry : replacementMap.entrySet())   LOGGER.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue());
  return replacementMap;
}",0.8597285067873304
136255,"public String getDecoration(){
  String decoration=""String_Node_Str"";
  if (this instanceof TypeProvider && !(this instanceof ImpliedNode))   decoration+=""String_Node_Str"" + ((TypeProvider)this).getWhereUsedAndDescendantsCount() + ""String_Node_Str"";
  if (isDeleted())   decoration+=""String_Node_Str"";
  if (isDeprecated())   decoration+=""String_Node_Str"";
  if (this instanceof ExtensionOwner) {
    if (getLibrary() != null)     getLibrary().checkExtension(this);
    String extensionTxt=""String_Node_Str"";
    ComponentNode exBase=(ComponentNode)getExtendsType();
    if (exBase != null) {
      extensionTxt+=""String_Node_Str"" + exBase.getNameWithPrefix() + ""String_Node_Str"";
      if (getChain() != null)       extensionTxt+=""String_Node_Str"";
    }
    if (getChain() != null) {
      if (isInHead())       if (getLibrary().isMajorVersion())       extensionTxt+=""String_Node_Str"";
 else       if (isNewToChain())       extensionTxt+=""String_Node_Str"";
 else       extensionTxt+=""String_Node_Str"";
 else       extensionTxt+=""String_Node_Str"" + getTlVersion();
      if (isEditable())       extensionTxt+=""String_Node_Str"";
    }
    if (isEditable()) {
      if (getChain() == null)       extensionTxt+=""String_Node_Str"";
 else       if (isInHead())       if (isNewToChain())       extensionTxt+=""String_Node_Str"";
 else       extensionTxt+=""String_Node_Str"";
 else       if (this instanceof VersionedObjectInterface)       extensionTxt+=""String_Node_Str"";
    }
    decoration+=surround(extensionTxt);
  }
  return decoration;
}","public String getDecoration(){
  String decoration=""String_Node_Str"";
  if (this instanceof TypeProvider && !(this instanceof ImpliedNode))   decoration+=""String_Node_Str"" + ((TypeProvider)this).getWhereUsedNode().getWhereUsedCount() + ""String_Node_Str"";
  if (isDeleted())   decoration+=""String_Node_Str"";
  if (isDeprecated())   decoration+=""String_Node_Str"";
  if (this instanceof ExtensionOwner) {
    if (getLibrary() != null)     getLibrary().checkExtension(this);
    String extensionTxt=""String_Node_Str"";
    ComponentNode exBase=(ComponentNode)getExtendsType();
    if (exBase != null) {
      extensionTxt+=""String_Node_Str"" + exBase.getNameWithPrefix() + ""String_Node_Str"";
      if (getChain() != null)       extensionTxt+=""String_Node_Str"";
    }
    if (getChain() != null) {
      if (isInHead())       if (getLibrary().isMajorVersion())       extensionTxt+=""String_Node_Str"";
 else       if (isNewToChain())       extensionTxt+=""String_Node_Str"";
 else       extensionTxt+=""String_Node_Str"";
 else       extensionTxt+=""String_Node_Str"" + getTlVersion();
      if (isEditable())       extensionTxt+=""String_Node_Str"";
    }
    if (isEditable()) {
      if (getChain() == null)       extensionTxt+=""String_Node_Str"";
 else       if (isInHead())       if (isNewToChain())       extensionTxt+=""String_Node_Str"";
 else       extensionTxt+=""String_Node_Str"";
 else       if (this instanceof VersionedObjectInterface)       extensionTxt+=""String_Node_Str"";
    }
    decoration+=surround(extensionTxt);
  }
  return decoration;
}",0.9892682926829268
136256,"/** 
 * {@link org.opentravel.schemas.actions.VersionMajorAction#run()}
 */
@Override public LibraryNode createMajorVersion(LibraryNode library){
  if (!versionPreparation(library))   return null;
  RepositoryNode rn=find(library.getProjectItem().getRepository());
  MajorVersionHelper mvh=new MajorVersionHelper(library.getProject().getTLProject());
  TLLibrary major=null;
  LibraryNode newLib=null;
  try {
    major=mvh.createNewMajorVersion(library.getTLLibrary());
  }
 catch (  VersionSchemeException e) {
    postRepoException(e);
  }
catch (  ValidationException e) {
    postRepoException(e);
  }
catch (  LibrarySaveException e) {
    postRepoException(e);
  }
  LibraryChainNode lcn=null;
  if (major != null) {
    newLib=new LibraryNode(major,library.getProject());
    List<LibraryChainNode> chains=manage(rn,Collections.singletonList(newLib));
    lcn=findLibrary(chains,newLib.getLibrary().getName());
    if (lcn != null) {
      lock(newLib);
    }
    sync(rn);
  }
  return newLib;
}","/** 
 * {@link org.opentravel.schemas.actions.VersionMajorAction#run()}
 */
@Override public LibraryNode createMajorVersion(LibraryNode library){
  if (!versionPreparation(library))   return null;
  RepositoryNode rn=find(library.getProjectItem().getRepository());
  MajorVersionHelper mvh=new MajorVersionHelper(library.getProject().getTLProject());
  TLLibrary tlMajor=null;
  LibraryNode newLib=null;
  LibraryChainNode lcn=null;
  ProjectNode thisProject=library.getProject();
  try {
    tlMajor=mvh.createNewMajorVersion(library.getTLLibrary());
  }
 catch (  VersionSchemeException e) {
    postRepoException(e);
  }
catch (  ValidationException e) {
    postRepoException(e);
  }
catch (  LibrarySaveException e) {
    postRepoException(e);
  }
catch (  IllegalArgumentException e) {
    postRepoException(e);
  }
  if (tlMajor != null) {
    newLib=new LibraryNode(tlMajor,library.getProject());
    List<LibraryChainNode> chains=manage(rn,Collections.singletonList(newLib));
    lcn=findLibrary(chains,newLib.getLibrary().getName());
    if (lcn != null) {
      LibraryModelManager libMrg=Node.getLibraryModelManager();
      ProjectController pc=mc.getProjectController();
      List<ProjectNode> pList=libMrg.findProjects(library);
      for (      ProjectNode pn : libMrg.findProjects(library)) {
        pc.remove(library,pn);
        if (pn != thisProject)         new LibraryNavNode(lcn,pn);
      }
      lock(newLib);
    }
    sync(rn);
  }
  return newLib;
}",0.7128473620620217
136257,"/** 
 * Create libraries and library chains from the project item. Will create library or chain if it has not already be added. Newly created libraries will have their parent set. Types are set but <b>not</b> resolved.
 * @param pi - project item to model
 * @param project - project node to associate with the Nav node (and newly create libraries and chains)
 * @return Return a LibraryNavNode to use as a child in a tree.
 */
public LibraryNavNode add(ProjectItem pi,ProjectNode project){
  LOGGER.debug(""String_Node_Str"" + pi.getLibraryName());
  LibraryInterface li=null;
  LibraryNavNode newLNN=null;
  Node n=Node.GetNode((TLModelElement)pi.getContent());
  if (n instanceof LibraryInterface)   li=((LibraryInterface)n);
  if (li != null)   assert(!((Node)li).isDeleted());
  if (li != null && project.getLibraries().contains(li)) {
    return null;
  }
  if (li == null) {
    newLNN=modelLibraryInterface(pi,project);
  }
 else {
    if (li instanceof LibraryNode)     if (((LibraryNode)li).isInChain())     newLNN=new LibraryNavNode(((LibraryNode)li).getChain(),project);
 else     newLNN=new LibraryNavNode((LibraryNode)li,project);
 else     if (li instanceof LibraryChainNode)     newLNN=new LibraryNavNode((LibraryChainNode)li,project);
  }
  assert(newLNN != null);
  assert(newLNN.getLibrary() != null);
  newLNN.getLibrary().updateLibraryStatus();
  assert(newLNN.getParent() == project);
  if (li instanceof LibraryNode) {
    if (!((LibraryNode)li).isInChain())     assert(newLNN.getLibrary() == li);
 else {
      LOGGER.debug(""String_Node_Str"");
      assert(newLNN.getThisLib() instanceof LibraryChainNode);
      ((LibraryChainNode)newLNN.getThisLib()).getLibraries().contains(li);
    }
  }
 else   if (li instanceof LibraryChainNode)   assert(((LibraryChainNode)li).getLibraries().contains(newLNN.getLibrary()));
  return newLNN;
}","/** 
 * Create libraries and library chains from the project item. Will create library or chain if it has not already be added. Newly created libraries will have their parent set. Types are set but <b>not</b> resolved.
 * @param pi - project item to model
 * @param project - project node to associate with the Nav node (and newly create libraries and chains)
 * @return Return a LibraryNavNode to use as a child in a tree.
 */
public LibraryNavNode add(ProjectItem pi,ProjectNode project){
  LOGGER.debug(""String_Node_Str"" + pi.getLibraryName());
  LibraryInterface li=null;
  LibraryNavNode newLNN=null;
  Node n=Node.GetNode((TLModelElement)pi.getContent());
  if (n instanceof LibraryInterface)   li=((LibraryInterface)n);
  if (li != null)   assert(!((Node)li).isDeleted());
  if (li != null && project.getLibraries().contains(li)) {
    return null;
  }
  if (li == null) {
    newLNN=modelLibraryInterface(pi,project);
  }
 else {
    if (li.getChain() == null)     newLNN=new LibraryNavNode((LibraryNode)li,project);
 else     newLNN=new LibraryNavNode(li.getChain(),project);
  }
  assert(newLNN != null);
  assert(newLNN.getLibrary() != null);
  newLNN.getLibrary().updateLibraryStatus();
  assert(newLNN.getParent() == project);
  if (li instanceof LibraryNode) {
    if (!((LibraryNode)li).isInChain())     assert(newLNN.getLibrary() == li);
 else     assert(newLNN.getThisLib() instanceof LibraryChainNode);
    ((LibraryChainNode)newLNN.getThisLib()).getLibraries().contains(li);
  }
 else   if (li instanceof LibraryChainNode)   assert(((LibraryChainNode)li).getLibraries().contains(newLNN.getLibrary()));
  LOGGER.debug(""String_Node_Str"" + pi.getLibraryName());
  return newLNN;
}",0.5970149253731343
136258,"private LibraryNavNode modelLibraryInterface(ProjectItem pi,ProjectNode project){
  LibraryInterface li=null;
  LOGGER.debug(""String_Node_Str"" + pi.getLibraryName());
  if (pi.getRepository() == null)   li=new LibraryNode(pi.getContent(),project);
 else {
    String chainName=project.makeChainIdentity(pi);
    LibraryChainNode chain=getChain(chainName);
    if (chain == null) {
      li=createNewChain(pi,project);
    }
 else {
      if (!libraries.contains(chain)) {
        LOGGER.debug(""String_Node_Str"");
        li=new LibraryChainNode(pi,project);
      }
 else       li=chain;
    }
  }
  LibraryNavNode newLNN=null;
  if (li != null) {
    if (!libraries.contains(li))     libraries.add(li);
    if (li.getParent() instanceof LibraryNavNode)     newLNN=(LibraryNavNode)li.getParent();
  }
 else   LOGGER.error(""String_Node_Str"");
  if (newLNN == null)   LOGGER.warn(""String_Node_Str"");
  return newLNN;
}","private LibraryNavNode modelLibraryInterface(ProjectItem pi,ProjectNode project){
  LibraryInterface li=null;
  LibraryNavNode newLNN=null;
  LOGGER.debug(""String_Node_Str"" + pi.getLibraryName());
  if (pi.getRepository() == null)   li=new LibraryNode(pi.getContent(),project);
 else {
    String chainName=project.makeChainIdentity(pi);
    LibraryChainNode chain=getChain(chainName);
    if (chain == null) {
      li=createNewChain(pi,project);
    }
 else {
      if (!libraries.contains(chain)) {
        LOGGER.debug(""String_Node_Str"");
        li=new LibraryChainNode(pi,project);
      }
 else {
        LOGGER.debug(""String_Node_Str"");
        li=chain;
        if (li.getParent() instanceof LibraryNavNode)         newLNN=new LibraryNavNode(chain,project);
      }
    }
  }
  if (li != null && newLNN == null) {
    if (!libraries.contains(li))     libraries.add(li);
    if (li.getParent() instanceof LibraryNavNode)     newLNN=(LibraryNavNode)li.getParent();
 else     LOGGER.error(""String_Node_Str"" + li + ""String_Node_Str"");
  }
  if (li == null)   LOGGER.error(""String_Node_Str"" + pi.getLibraryName() + ""String_Node_Str"");
  assert(newLNN != null);
  return newLNN;
}",0.6002858504049547
136259,"/** 
 * Remove the associated library from the associated project both in the TL and GUI models.
 */
public void remove(LibraryNavNode libraryNavNode);","/** 
 * Remove the passed library from the passed project.
 */
public void remove(LibraryInterface library,ProjectNode pn);",0.7518248175182481
136260,"public String getName(){
  if (parentObject instanceof TLSimpleFacet)   ((TLSimpleFacet)parentObject).getLocalName();
 else   if (parentObject instanceof TLCoreObject)   return ((TLCoreObject)parentObject).getLocalName() + ""String_Node_Str"";
  return ""String_Node_Str"";
}","public String getName(){
  if (parentObject instanceof TLSimpleFacet)   return ((TLSimpleFacet)parentObject).getLocalName();
 else   if (parentObject instanceof TLCoreObject)   return ((TLCoreObject)parentObject).getLocalName() + ""String_Node_Str"";
  return ""String_Node_Str"";
}",0.9872495446265938
136261,"/** 
 * Create libraries and library chains from the project item. Will create library or chain if it has not already be added. Newly created libraries will have their parent set. Types are set but <b>not</b> resolved.
 * @param pi - project item to model
 * @param project - project node to associate with the Nav node (and newly create libraries and chains)
 * @return Return a LibraryNavNode to use as a child in a tree.
 */
public LibraryNavNode add(ProjectItem pi,ProjectNode project){
  LOGGER.debug(""String_Node_Str"" + pi.getLibraryName());
  LibraryInterface li=null;
  LibraryNavNode newLNN=null;
  Node n=Node.GetNode((TLModelElement)pi.getContent());
  if (n instanceof LibraryInterface)   li=((LibraryInterface)n);
  if (li != null)   assert(!((Node)li).isDeleted());
  if (li != null && project.getLibraries().contains(li)) {
    return null;
  }
  if (li == null) {
    newLNN=modelLibraryInterface(pi,project);
  }
 else {
    if (li.getChain() == null)     newLNN=new LibraryNavNode((LibraryNode)li,project);
 else     newLNN=new LibraryNavNode(li.getChain(),project);
  }
  assert(newLNN != null);
  assert(newLNN.getLibrary() != null);
  newLNN.getLibrary().updateLibraryStatus();
  assert(newLNN.getParent() == project);
  if (li instanceof LibraryNode) {
    if (!((LibraryNode)li).isInChain())     assert(newLNN.getLibrary() == li);
 else     assert(newLNN.getThisLib() instanceof LibraryChainNode);
    ((LibraryChainNode)newLNN.getThisLib()).getLibraries().contains(li);
  }
 else   if (li instanceof LibraryChainNode)   assert(((LibraryChainNode)li).getLibraries().contains(newLNN.getLibrary()));
  LOGGER.debug(""String_Node_Str"" + pi.getLibraryName());
  return newLNN;
}","/** 
 * Create libraries and library chains from the project item. Will create library or chain if it has not already be added. Newly created libraries will have their parent set. Types are set but <b>not</b> resolved.
 * @param pi - project item to model
 * @param project - project node to associate with the Nav node (and newly create libraries and chains)
 * @return Return a LibraryNavNode to use as a child in a tree.
 */
public LibraryNavNode add(ProjectItem pi,ProjectNode project){
  LOGGER.debug(""String_Node_Str"" + pi.getLibraryName());
  LibraryInterface li=null;
  LibraryNavNode newLNN=null;
  Node n=Node.GetNode((TLModelElement)pi.getContent());
  if (n instanceof LibraryInterface)   li=((LibraryInterface)n);
  if (li != null)   assert(!((Node)li).isDeleted());
  if (li != null && project.getLibraries().contains(li)) {
    return null;
  }
  if (li == null) {
    newLNN=modelLibraryInterface(pi,project);
  }
 else {
    if (li.getChain() == null)     newLNN=new LibraryNavNode((LibraryNode)li,project);
 else     newLNN=new LibraryNavNode(li.getChain(),project);
  }
  assert(newLNN != null);
  assert(newLNN.getLibrary() != null);
  newLNN.getLibrary().updateLibraryStatus();
  assert(newLNN.getParent() == project);
  if (li instanceof LibraryNode) {
    if (!((LibraryNode)li).isInChain())     assert(newLNN.getLibrary() == li);
 else {
      assert(newLNN.getThisLib() instanceof LibraryChainNode);
      assert((LibraryChainNode)newLNN.getThisLib()).getLibraries().contains(li);
    }
  }
 else   if (li instanceof LibraryChainNode)   assert(((LibraryChainNode)li).getLibraries().contains(newLNN.getLibrary()));
  LOGGER.debug(""String_Node_Str"" + pi.getLibraryName());
  return newLNN;
}",0.9947214076246336
136262,"@Override public void delete(){
  removeBaseListener();
  if (getTLModelObj().getOwningEntity() == null) {
    return;
  }
  if ((getTLModelObj().getFacetType().equals(TLFacetType.REQUEST)) || (getTLModelObj().getFacetType().equals(TLFacetType.RESPONSE)) || (getTLModelObj().getFacetType().equals(TLFacetType.NOTIFICATION))) {
    getTLModelObj().clearFacet();
  }
 else   if (getTLModelObj().getFacetType().equals(TLFacetType.CHOICE))   ((TLChoiceObject)getTLModelObj().getOwningEntity()).removeChoiceFacet((TLContextualFacet)getTLModelObj());
  if (getTLModelObj().getFacetType().equals(TLFacetType.CUSTOM)) {
    ((TLBusinessObject)getTLModelObj().getOwningEntity()).removeCustomFacet((TLContextualFacet)getTLModelObj());
  }
 else   if (getTLModelObj().getFacetType().equals(TLFacetType.QUERY)) {
    ((TLBusinessObject)getTLModelObj().getOwningEntity()).removeQueryFacet((TLContextualFacet)getTLModelObj());
  }
 else {
    getTLModelObj().clearFacet();
  }
}","@Override public void delete(){
  removeBaseListener();
  if (getTLModelObj().getOwningEntity() == null) {
    return;
  }
  TLFacetOwner oe=getTLModelObj().getOwningEntity();
  AbstractLibrary ol=getTLModelObj().getOwningLibrary();
  TLFacetType facetType=getTLModelObj().getFacetType();
  if (facetType.equals(TLFacetType.REQUEST) || facetType.equals(TLFacetType.RESPONSE) || facetType.equals(TLFacetType.NOTIFICATION)) {
    getTLModelObj().clearFacet();
  }
 else   if (facetType.equals(TLFacetType.CHOICE)) {
    ((TLChoiceObject)oe).removeChoiceFacet((TLContextualFacet)getTLModelObj());
    ol.removeNamedMember((TLContextualFacet)getTLModelObj());
  }
 else   if (getTLModelObj().getFacetType().equals(TLFacetType.CUSTOM)) {
    ((TLBusinessObject)oe).removeCustomFacet((TLContextualFacet)getTLModelObj());
    ol.removeNamedMember((TLContextualFacet)getTLModelObj());
  }
 else   if (getTLModelObj().getFacetType().equals(TLFacetType.QUERY)) {
    ((TLBusinessObject)oe).removeQueryFacet((TLContextualFacet)getTLModelObj());
    ol.removeNamedMember((TLContextualFacet)getTLModelObj());
  }
 else {
    getTLModelObj().clearFacet();
  }
}",0.6972998578872572
136263,"/** 
 * Create a component node for a <b>non</b>-top-level model element. Only creates node and sets name and description.
 * @param obj
 */
public ComponentNode(final TLModelElement obj){
  super(obj);
  if (obj instanceof TLFacet)   addMOChildren();
  setListner();
}","/** 
 * Create a component node for a <b>non</b>-top-level model element. Only creates node and sets name and description.
 * @param obj
 */
public ComponentNode(final TLModelElement obj){
  super(obj);
  setListner();
}",0.8629856850715747
136264,"protected ComponentNode createMinorVersionComponent(ComponentNode newNode){
  if (newNode.getModelObject() instanceof EmptyMO) {
    return null;
  }
  Node owner=this.getOwningComponent();
  if (owner.isInHead())   return null;
  if (newNode instanceof ExtensionOwner)   ((ExtensionOwner)newNode).setExtension(owner);
  if (newNode.getName() == null || newNode.getName().isEmpty())   newNode.setName(owner.getName());
  owner.getChain().getHead().addMember(newNode);
  LibraryChainNode chain=owner.getChain();
  chain.getComplexAggregate().getChildren().remove(owner);
  return newNode;
}","protected ComponentNode createMinorVersionComponent(ComponentNode newNode){
  if (newNode.getModelObject() instanceof EmptyMO) {
    return null;
  }
  Node owner=this.getOwningComponent();
  if (owner.isInHead())   return null;
  if (newNode instanceof ExtensionOwner)   ((ExtensionOwner)newNode).setExtension(owner);
  if (newNode.getName() == null || newNode.getName().isEmpty())   newNode.setName(owner.getName());
  LibraryChainNode chain=owner.getChain();
  chain.getHead().addMember(newNode);
  chain.getComplexAggregate().getChildren().remove(owner);
  owner.getLibrary().checkExtension(owner);
  return newNode;
}",0.8753096614368291
136265,"@Override public void setExtension(final Node base){
  if (extensionHandler == null)   extensionHandler=new ExtensionHandler(this);
  extensionHandler.set(base);
}","@Override public void setExtension(final Node base){
}",0.4976958525345622
136266,"public String getDecoration(){
  String decoration=""String_Node_Str"";
  if (this instanceof TypeProvider && !(this instanceof ImpliedNode))   decoration+=""String_Node_Str"" + ((TypeProvider)this).getWhereUsedAndDescendantsCount() + ""String_Node_Str"";
  if (isDeleted())   decoration+=""String_Node_Str"";
  if (isDeprecated())   decoration+=""String_Node_Str"";
  if (this instanceof ExtensionOwner) {
    String extensionTxt=""String_Node_Str"";
    ComponentNode exBase=(ComponentNode)((ExtensionOwner)this).getExtensionBase();
    if (exBase != null)     extensionTxt+=""String_Node_Str"" + exBase.getNameWithPrefix() + ""String_Node_Str"";
    if (isEditable_isNewOrAsMinor()) {
      if (getLibrary().isInHead2() && !getLibrary().isMinorVersion())       extensionTxt+=""String_Node_Str"";
 else       if (isInHead2())       if (getLibrary().isNewToChain())       extensionTxt+=""String_Node_Str"";
 else       extensionTxt+=""String_Node_Str"";
 else       extensionTxt+=""String_Node_Str"" + getTlVersion() + ""String_Node_Str"";
    }
    decoration+=""String_Node_Str"" + extensionTxt;
  }
  return decoration;
}","public String getDecoration(){
  String decoration=""String_Node_Str"";
  if (this instanceof TypeProvider && !(this instanceof ImpliedNode))   decoration+=""String_Node_Str"" + ((TypeProvider)this).getWhereUsedAndDescendantsCount() + ""String_Node_Str"";
  if (isDeleted())   decoration+=""String_Node_Str"";
  if (isDeprecated())   decoration+=""String_Node_Str"";
  if (this instanceof ExtensionOwner) {
    String extensionTxt=""String_Node_Str"";
    ComponentNode exBase=null;
    if (!isVersioned())     exBase=(ComponentNode)((ExtensionOwner)this).getExtensionBase();
    if (getLibrary() != null)     getLibrary().checkExtension(this);
    if (exBase != null) {
      extensionTxt+=""String_Node_Str"" + exBase.getNameWithPrefix() + ""String_Node_Str"";
      if (getChain() != null)       extensionTxt+=""String_Node_Str"";
    }
    if (getChain() != null) {
      if (isInHead())       extensionTxt+=""String_Node_Str"";
 else       extensionTxt+=""String_Node_Str"" + getTlVersion();
      if (isEditable())       extensionTxt+=""String_Node_Str"";
    }
    if (isEditable()) {
      if (getChain() == null)       extensionTxt+=""String_Node_Str"";
 else       if (isInHead())       if (isNewToChain())       extensionTxt+=""String_Node_Str"";
 else       extensionTxt+=""String_Node_Str"";
 else       if (this instanceof VersionedObjectInterface)       extensionTxt+=""String_Node_Str"";
    }
    decoration+=surround(extensionTxt);
  }
  return decoration;
}",0.6524990161353798
136267,"/** 
 * Sets the library field in this node and all of its kids.
 * @param ln
 */
public void setLibrary(final LibraryNode ln){
  library=ln;
  if (!(this instanceof LibraryChainNode))   setKidsLibrary();
}","/** 
 * Sets the library field in this node and all of its kids.
 * @param ln
 */
public void setLibrary(final LibraryNode ln){
  library=ln;
  setKidsLibrary();
}",0.8834688346883469
136268,"/** 
 * @return true only if this object is in the version head library. false if not, false if owner is a service, orunmanaged. See also: isInHead2()
 */
public boolean isInHead(){
  Node owner=getOwningComponent();
  if (owner instanceof OperationNode)   owner=owner.getOwningComponent();
  if (owner instanceof ServiceNode)   return true;
  if (owner == null || owner.versionNode == null)   return false;
  if (getChain() == null || getChain().getHead() == null)   return false;
  return getChain().getHead().getDescendants_LibraryMembers().contains(owner);
}","/** 
 * @return true only if this object is in the version head library. false if not, false if owner is a service, orunmanaged. See also: isInHead2()
 */
public boolean isInHead(){
  Node owner=getOwningComponent();
  if (owner instanceof OperationNode)   owner=owner.getOwningComponent();
  if (owner instanceof ServiceNode)   return true;
  if (owner == null || owner.versionNode == null)   return false;
  if (getChain() == null || getChain().getHead() == null)   return false;
  List<Node> members=getChain().getHead().getDescendants_LibraryMembers();
  return getChain().getHead().getDescendants_LibraryMembers().contains(owner);
}",0.8990825688073395
136269,"/** 
 * New ComponentNode methods that also create new objects in underlying model
 * @return newly created node or null
 */
public static ComponentNode newComponent_UnTyped(final TLLibraryMember mbr){
  ComponentNode cn=null;
  if (mbr == null)   return cn;
  if (mbr instanceof TLValueWithAttributes)   cn=new VWA_Node((TLValueWithAttributes)mbr);
 else   if (mbr instanceof TLBusinessObject)   cn=new BusinessObjectNode(mbr);
 else   if (mbr instanceof TLCoreObject)   cn=new CoreObjectNode((TLCoreObject)mbr);
 else   if (mbr instanceof TLChoiceObject)   cn=new ChoiceObjectNode((TLChoiceObject)mbr);
 else   if (mbr instanceof TLSimple)   cn=new SimpleTypeNode((TLSimple)mbr);
 else   if (mbr instanceof TLOpenEnumeration)   cn=new EnumerationOpenNode(mbr);
 else   if (mbr instanceof TLClosedEnumeration)   cn=new EnumerationClosedNode(mbr);
 else   if (mbr instanceof TLExtensionPointFacet)   cn=new ExtensionPointNode((TLExtensionPointFacet)mbr);
 else   if (mbr instanceof TLResource)   cn=new ResourceNode(mbr);
 else   if (mbr instanceof XSDSimpleType)   cn=new SimpleTypeNode((TLSimple)Node.GetNode(mbr).getTLModelObject());
 else {
    assert(false);
  }
  return cn;
}","/** 
 * New ComponentNode methods that also create new objects in underlying model
 * @return newly created node or null
 */
public static ComponentNode newComponent_UnTyped(final TLLibraryMember mbr){
  ComponentNode cn=null;
  if (mbr == null)   return cn;
  LOGGER.debug(""String_Node_Str"" + mbr.getLocalName());
  if (mbr instanceof TLValueWithAttributes)   cn=new VWA_Node((TLValueWithAttributes)mbr);
 else   if (mbr instanceof TLBusinessObject)   cn=new BusinessObjectNode(mbr);
 else   if (mbr instanceof TLCoreObject)   cn=new CoreObjectNode((TLCoreObject)mbr);
 else   if (mbr instanceof TLChoiceObject)   cn=new ChoiceObjectNode((TLChoiceObject)mbr);
 else   if (mbr instanceof TLSimple)   cn=new SimpleTypeNode((TLSimple)mbr);
 else   if (mbr instanceof TLOpenEnumeration)   cn=new EnumerationOpenNode(mbr);
 else   if (mbr instanceof TLClosedEnumeration)   cn=new EnumerationClosedNode(mbr);
 else   if (mbr instanceof TLExtensionPointFacet)   cn=new ExtensionPointNode((TLExtensionPointFacet)mbr);
 else   if (mbr instanceof TLResource)   cn=new ResourceNode(mbr);
 else   if (mbr instanceof XSDSimpleType)   cn=new SimpleTypeNode((TLSimple)Node.GetNode(mbr).getTLModelObject());
 else {
    assert(false);
  }
  LOGGER.debug(""String_Node_Str"" + cn);
  return cn;
}",0.9609756097560976
136270,"public FacetNode(final TLFacet obj){
  super(obj);
  assert(modelObject instanceof FacetMO);
}","public FacetNode(final TLFacet obj){
  super(obj);
  addMOChildren();
  assert(modelObject instanceof FacetMO);
}",0.9082125603864736
136271,"@Override public void runWithEvent(Event event){
  Node owner;
  String value;
  if (event.data instanceof SetDescriptionEvent) {
    owner=((SetDescriptionEvent)event.data).owner;
    value=((SetDescriptionEvent)event.data).value;
    AddNodeHandler2 handler=new AddNodeHandler2();
    if (!owner.isEditable_newToChain()) {
      if (owner.getChain() != null) {
        DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + owner + ""String_Node_Str"");
        return;
      }
    }
switch (((SetDescriptionEvent)event.data).type) {
case DESCRIPTION:
      owner.setDescription(value);
    break;
case EXAMPLE:
  if (owner.getExampleHandler() != null)   owner.getExampleHandler().set(value,null);
break;
case EQUIVALENT:
if (owner.getEquivalentHandler() != null) owner.getEquivalentHandler().set(value,null);
break;
default :
break;
}
}
}","@Override public void runWithEvent(Event event){
  Node owner;
  String value;
  if (event.data instanceof SetDescriptionEvent) {
    owner=((SetDescriptionEvent)event.data).owner;
    value=((SetDescriptionEvent)event.data).value;
    if (!owner.isEditable()) {
      if (owner.getChain() != null) {
        DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + owner + ""String_Node_Str"");
        return;
      }
    }
switch (((SetDescriptionEvent)event.data).type) {
case DESCRIPTION:
      owner.setDescription(value);
    break;
case EXAMPLE:
  if (owner.getExampleHandler() != null)   owner.getExampleHandler().set(value,null);
break;
case EQUIVALENT:
if (owner.getEquivalentHandler() != null) owner.getEquivalentHandler().set(value,null);
break;
default :
break;
}
}
}",0.962287104622871
136272,"/** 
 * Create a component in the head library that versions (extends) the selected node. Prompts the user to confirm before creating node.
 * @return newly created node or null if user cancelled or error.
 */
public ComponentNode createVersionExtension(Node selectedNode){
  ComponentNode actOnNode=null;
  boolean result=false;
  if (selectedNode.getChain() == null)   return null;
  if (selectedNode.isInHead())   LOGGER.warn(""String_Node_Str"" + selectedNode + ""String_Node_Str"");
  if (selectedNode.getChain().getHead().isPatchVersion()) {
    if (!(selectedNode instanceof ExtensionPointNode)) {
      if (result=postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((ComponentNode)selectedNode).createPatchVersionComponent();
    }
  }
 else   if (selectedNode.getChain().getHead().isMinorOrMajorVersion()) {
    if (selectedNode instanceof VersionedObjectInterface) {
      if (result=postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((VersionedObjectInterface)selectedNode).createMinorVersionComponent();
    }
 else     if (selectedNode.isEditable_inService())     if (selectedNode.getLibrary().getChain().getHead() == selectedNode.getLibrary())     actOnNode=(ComponentNode)selectedNode;
 else     actOnNode=new OperationNode((ServiceNode)selectedNode.getLibrary().getServiceRoot().getChildren().get(0),""String_Node_Str"");
  }
  if (actOnNode == null && result == true)   DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + selectedNode + ""String_Node_Str"");
  return actOnNode;
}","/** 
 * Create a component in the head library that versions (extends) the selected node. Prompts the user to confirm before creating node.
 * @return newly created node or null if user cancelled or error.
 */
public ComponentNode createVersionExtension(Node selectedNode){
  ComponentNode actOnNode=null;
  FacetNode selectedFacet=null;
  boolean result=false;
  if (selectedNode.getChain() == null)   return null;
  if (selectedNode.isInHead())   LOGGER.warn(""String_Node_Str"" + selectedNode + ""String_Node_Str"");
  if (selectedNode.getChain().getHead().isPatchVersion()) {
    if (!(selectedNode instanceof ExtensionPointNode)) {
      if (result=postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((ComponentNode)selectedNode).createPatchVersionComponent();
    }
  }
 else   if (selectedNode.getChain().getHead().isMinorOrMajorVersion()) {
    if (selectedNode instanceof FacetNode) {
      selectedFacet=(FacetNode)selectedNode;
      selectedNode=selectedNode.getOwningComponent();
    }
    if (selectedNode instanceof VersionedObjectInterface) {
      if (result=postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((VersionedObjectInterface)selectedNode).createMinorVersionComponent();
    }
 else     if (selectedNode.isEditable_inService())     if (selectedNode.getLibrary().getChain().getHead() == selectedNode.getLibrary())     actOnNode=(ComponentNode)selectedNode;
 else     actOnNode=new OperationNode((ServiceNode)selectedNode.getLibrary().getServiceRoot().getChildren().get(0),""String_Node_Str"");
  }
  if (actOnNode == null && result == true)   DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + selectedNode + ""String_Node_Str"");
  if (selectedFacet != null) {
    for (    Node n : actOnNode.getChildren())     if (n.getName().equals(selectedFacet.getName()))     actOnNode=(ComponentNode)n;
  }
  return actOnNode;
}",0.8945048486629444
136273,"private void runCommand(CommandType type){
  ResourceNode rn=null;
  if (selectedNode.getOwningComponent() instanceof ResourceNode)   rn=(ResourceNode)selectedNode.getOwningComponent();
  if (selectedNode == null) {
    return;
  }
switch (type) {
case DELETE:
    Node owner=selectedNode.getOwningComponent();
  for (  Node n : view.getSelectedNodes())   if (owner.isEditable() && n.isDeleteable())   n.delete();
 else   postWarning(type,n);
view.refresh(owner);
if (owner instanceof ResourceNode) OtmRegistry.getNavigatorView().refresh();
break;
case RESOURCE:
LibraryNode effectiveLib=getEffectiveLibrary(selectedNode);
if (effectiveLib != null) {
ResourceNode newR=new ResourceNode(effectiveLib,predicate);
if (predicate == null) predicate=getBusinessObject(newR);
if (predicate == null) newR.setAbstract(true);
 else new ResourceBuilder().build(newR,predicate);
if (view != null) {
view.select(newR);
view.refresh(newR);
}
mc.refresh();
}
 else postWarning(type);
break;
case ACTION:
if (rn != null) view.refresh(new ActionNode(rn));
 else postWarning(type);
break;
case ACTIONFACET:
if (rn != null) view.refresh(new ActionFacet(rn));
 else postWarning(type);
break;
case PARAMGROUP:
if (rn != null) view.refresh(new ParamGroup(rn));
 else postWarning(type);
break;
case ACTIONRESPONSE:
if (selectedNode instanceof ActionNode) view.refresh(new ActionResponse((ActionNode)selectedNode));
 else postWarning(type);
break;
case PARENTREF:
if (selectedNode instanceof ResourceNode) view.refresh(new ParentRef((ResourceNode)selectedNode));
 else postWarning(type);
break;
case NONE:
default :
DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
}
}","private void runCommand(CommandType type){
  ResourceNode rn=null;
  if (selectedNode.getOwningComponent() instanceof ResourceNode)   rn=(ResourceNode)selectedNode.getOwningComponent();
  if (selectedNode == null) {
    return;
  }
switch (type) {
case DELETE:
    Node owner=selectedNode.getOwningComponent();
  for (  Node n : view.getSelectedNodes())   if (owner.isEditable() && n.isDeleteable())   n.delete();
 else   postWarning(type,n);
view.refresh(owner);
if (owner instanceof ResourceNode) OtmRegistry.getNavigatorView().refresh();
break;
case RESOURCE:
LibraryNode effectiveLib=getEffectiveLibrary(selectedNode);
if (effectiveLib != null) {
ResourceNode newR=new ResourceNode(effectiveLib,predicate);
if (predicate == null) predicate=getBusinessObject(newR);
if (predicate == null) newR.delete();
 else new ResourceBuilder().build(newR,predicate);
if (view != null) {
view.select(newR);
view.refresh(newR);
}
mc.refresh();
}
 else postWarning(type);
break;
case ACTION:
if (rn != null) view.refresh(new ActionNode(rn));
 else postWarning(type);
break;
case ACTIONFACET:
if (rn != null) view.refresh(new ActionFacet(rn));
 else postWarning(type);
break;
case PARAMGROUP:
if (rn != null) view.refresh(new ParamGroup(rn));
 else postWarning(type);
break;
case ACTIONRESPONSE:
if (selectedNode instanceof ActionNode) view.refresh(new ActionResponse((ActionNode)selectedNode));
 else postWarning(type);
break;
case PARENTREF:
if (selectedNode instanceof ResourceNode) view.refresh(new ParentRef((ResourceNode)selectedNode));
 else postWarning(type);
break;
case NONE:
default :
DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
}
}",0.9930702018680324
136274,"protected ComponentNode createMinorVersionComponent(ComponentNode newNode){
  if (newNode.getModelObject() instanceof EmptyMO) {
    return null;
  }
  Node owner=this.getOwningComponent();
  owner.getLibrary().checkExtension(owner);
  if (owner.isInHead())   return null;
  if (newNode instanceof ExtensionOwner)   ((ExtensionOwner)newNode).setExtension(owner);
  if (newNode.getName() == null || newNode.getName().isEmpty())   newNode.setName(owner.getName());
  LibraryChainNode chain=owner.getChain();
  chain.getHead().addMember(newNode);
  chain.getComplexAggregate().getChildren().remove(owner);
  owner.getLibrary().checkExtension(owner);
  return newNode;
}","protected ComponentNode createMinorVersionComponent(ComponentNode newNode){
}",0.2072678331090175
136275,"/** 
 * Return the actual node wrapped by this version node.
 * @return node or null
 */
public Node get(){
  return head;
}","/** 
 * Return the actual node wrapped by this version node.
 * @return node or null
 */
public Node get(){
  return getChildren().isEmpty() ? null : getChildren().get(0);
}",0.8282828282828283
136276,"public String getComments(){
  String comments=""String_Node_Str"";
  if (absTLLibrary instanceof TLLibrary) {
    comments=((TLLibrary)absTLLibrary).getComments();
  }
  return emptyIfNull(comments);
}","public String getComments(){
  String comments=""String_Node_Str"";
  if (absTLLibrary instanceof TLLibrary)   comments=((TLLibrary)absTLLibrary).getComments();
  return emptyIfNull(comments);
}",0.979591836734694
136277,"/** 
 * Guide the user through deleting the list of nodes. Inform them of which ones will not be deleted. Ask them to confirm deleting the rest. Use node to actually delete the nodes.
 * @param deleteList
 */
public void deleteNodes(final List<Node> deleteList){
  if (deleteList == null || deleteList.isEmpty())   return;
  final List<Node> toDelete=new ArrayList<Node>();
  final StringBuilder doNotDelete=new StringBuilder();
  int i=0;
  for (  final Node n : deleteList) {
    if (n.isDeleteable()) {
      toDelete.add(n);
    }
 else {
      if (i++ > 0)       doNotDelete.append(""String_Node_Str"");
      doNotDelete.append(n.getName());
    }
  }
  if (i > 0)   DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + doNotDelete);
  if (toDelete.size() > 0) {
    final String listing=Messages.getString(""String_Node_Str"");
    final StringBuilder sb=new StringBuilder();
    i=0;
    for (    final INode n : toDelete) {
      if (i++ > 0)       sb.append(""String_Node_Str"");
      sb.append(n.getName());
    }
    final boolean ans=DialogUserNotifier.openConfirm(Messages.getString(""String_Node_Str""),listing + sb.toString());
    if (ans) {
      Node currentNode=((Node)mc.getCurrentNode_TypeView());
      Node focusNode=null;
      if (currentNode != null) {
        focusNode=currentNode.getOwningComponent();
        while (toDelete.contains(focusNode)) {
          focusNode=focusNode.getParent();
        }
      }
      for (      final INode n : toDelete)       n.delete();
      mc.refresh(focusNode);
      mc.selectNavigatorNodeAndRefresh(focusNode);
    }
  }
}","/** 
 * Guide the user through deleting the list of nodes. Inform them of which ones will not be deleted. Ask them to confirm deleting the rest. Use node to actually delete the nodes.
 * @param deleteList
 */
public void deleteNodes(final List<Node> deleteList){
  if (deleteList == null || deleteList.isEmpty())   return;
  final List<Node> toDelete=new ArrayList<Node>();
  final StringBuilder doNotDelete=new StringBuilder();
  int i=0;
  for (  final Node n : deleteList) {
    if (n.isDeleteable()) {
      toDelete.add(n);
    }
 else {
      if (i++ > 0)       doNotDelete.append(""String_Node_Str"");
      doNotDelete.append(n.getName());
    }
  }
  if (i > 0)   DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + doNotDelete);
  if (toDelete.size() > 0) {
    final String listing=Messages.getString(""String_Node_Str"");
    final StringBuilder sb=new StringBuilder();
    i=0;
    for (    final INode n : toDelete) {
      if (i++ > 0)       sb.append(""String_Node_Str"");
      sb.append(n.getName());
    }
    if (DialogUserNotifier.openConfirm(Messages.getString(""String_Node_Str""),listing + sb.toString())) {
      Node currentNode=((Node)mc.getCurrentNode_TypeView());
      Node focusNode=null;
      if (currentNode != null) {
        focusNode=currentNode.getOwningComponent();
        while (toDelete.contains(focusNode)) {
          focusNode=focusNode.getParent();
        }
        if (focusNode instanceof VersionNode)         focusNode=focusNode.getParent();
      }
      for (      final INode n : toDelete)       n.delete();
      mc.refresh(focusNode);
      mc.selectNavigatorNodeAndRefresh(focusNode);
    }
  }
}",0.9061925199264256
136278,"/** 
 * Runs new component wizard and creates new node with TL type. Used by New Complex Type Action handler.
 */
public void newToLibrary(){
  MainController mc=OtmRegistry.getMainController();
  final Node selected=mc.getSelectedNode_NavigatorView();
  if (selected == null) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!selected.isInTLLibrary()) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (selected.getLibrary() == null) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!selected.isEditable()) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final NewComponentWizard wizard=new NewComponentWizard(selected);
  EditNode editNode=null;
  editNode=wizard.postNewComponentWizard(OtmRegistry.getActiveShell());
  if (editNode != null) {
    ComponentNodeType type=ComponentNodeType.fromString(editNode.getUseType());
    Node newOne=new NodeFactory().newComponent(editNode,type);
    newOne.setName(NodeNameUtils.fixComplexTypeName(newOne.getName()));
    Assert.notNull(newOne.getLibrary());
    if (editNode.getTLType() != null && newOne instanceof ServiceNode)     ((ServiceNode)newOne).addCRUDQ_Operations(editNode.getTLType());
    mc.selectNavigatorNodeAndRefresh(newOne);
  }
}","/** 
 * Runs new component wizard and creates new node with TL type. Used by New Complex Type Action handler.
 */
public void newToLibrary(){
  MainController mc=OtmRegistry.getMainController();
  final Node selected=mc.getSelectedNode_NavigatorView();
  if (selected == null) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!selected.isInTLLibrary()) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (selected.getLibrary() == null) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (!selected.isEditable()) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  final NewComponentWizard wizard=new NewComponentWizard(selected);
  EditNode editNode=null;
  editNode=wizard.postNewComponentWizard(OtmRegistry.getActiveShell());
  if (editNode != null) {
    ComponentNodeType type=ComponentNodeType.fromString(editNode.getUseType());
    Node newOne=new NodeFactory().newComponent(editNode,type);
    newOne.setName(NodeNameUtils.fixComplexTypeName(newOne.getName()));
    Assert.notNull(newOne.getLibrary());
    if (editNode.getTLType() != null && newOne instanceof ServiceNode)     ((ServiceNode)newOne).addCRUDQ_Operations(editNode.getTLType());
    mc.selectNavigatorNodeAndRefresh(newOne);
    assert(!editNode.getLibrary().contains(editNode));
  }
}",0.9806814190375834
136279,"/** 
 * @return the version node representing this node in the specific library in a chain.
 */
public VersionNode getVersionNode(){
  return versionNode;
}","/** 
 * Simple getter of the versionNode field.
 * @return the version node representing this node in the specific library in a chain.
 */
public VersionNode getVersionNode(){
  return versionNode;
}",0.8788732394366198
136280,"/** 
 * @return the newest version of the object (version head).
 */
public Node getNewestVersion(){
  return head;
}","/** 
 * Simple getter of the head field.
 * @return the newest version of the object (version head).
 */
public Node getNewestVersion(){
  return head;
}",0.8666666666666667
136281,"/** 
 * Create a node by reading data from the wizard pages.
 * @return
 */
private EditNode createNode(){
  if (ncPage1.getComponentType().equals(ComponentNodeType.EXTENSION_POINT.getDescription())) {
    editNode.setName(""String_Node_Str"");
  }
 else {
    editNode.setName(ncPage1.getName());
  }
  editNode.setDescription(ncPage1.getDescription());
  editNode.setUseType(ncPage1.getComponentType());
  editNode.setLibrary(targetNode.getLibrary());
  editNode.setParent(targetNode);
  editNode.setTLType(serviceSubjectSelectionPage.getSelectedNode());
  return editNode;
}","/** 
 * Create a node by reading data from the wizard pages.
 * @return
 */
private EditNode createNode(){
  if (ncPage1.getComponentType().equals(ComponentNodeType.EXTENSION_POINT.getDescription())) {
    editNode.setName(""String_Node_Str"");
  }
 else {
    editNode.setName(ncPage1.getName());
  }
  editNode.setDescription(ncPage1.getDescription());
  editNode.setUseType(ncPage1.getComponentType());
  editNode.setLibrary(targetNode.getLibrary().getHead());
  editNode.setParent(targetNode);
  editNode.setTLType(serviceSubjectSelectionPage.getSelectedNode());
  return editNode;
}",0.9913793103448276
136282,"private void postCombo(final String label){
  Label cl=new Label(container,SWT.NONE);
  cl.setText(label);
  combo=WidgetFactory.createCombo(container,SWT.BORDER | SWT.READ_ONLY);
  combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  ComponentNodeType targetType=contextGuess(targetNode);
  ComponentNodeType[] list=componentList;
  String tooltip=Messages.getString(""String_Node_Str"");
  LibraryNode lib=targetNode.getChain() == null ? targetNode.getLibrary() : targetNode.getChain().getHead();
  if (lib.getEditStatus().equals(NodeEditStatus.PATCH)) {
    list=PatchComponentList;
    tooltip=Messages.getString(""String_Node_Str"");
    targetType=ComponentNodeType.EXTENSION_POINT;
  }
  int index=0;
  for (  ComponentNodeType item : list) {
    combo.add(item.getDescription());
    if (item == targetType)     combo.select(index);
    index++;
  }
  boolean hasService=false;
  if (targetNode.getChain() != null)   hasService=targetNode.getChain().hasService();
 else   hasService=targetNode.getLibrary().hasService();
  if (!hasService && !targetNode.getEditStatus().equals(NodeEditStatus.PATCH)) {
    combo.add(ComponentNodeType.SERVICE.getDescription());
    tooltip=Messages.getString(""String_Node_Str"");
  }
  cl.setToolTipText(tooltip);
  combo.setToolTipText(tooltip);
  combo.addKeyListener(new FacetKeyListener());
  combo.addModifyListener(new TextModifyListener());
  combo.addTraverseListener(new TextTraverseListener());
}","private void postCombo(final String label){
  Label cl=new Label(container,SWT.NONE);
  cl.setText(label);
  combo=WidgetFactory.createCombo(container,SWT.BORDER | SWT.READ_ONLY);
  combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  ComponentNodeType targetType=contextGuess(targetNode);
  ComponentNodeType[] list=componentList;
  String tooltip=Messages.getString(""String_Node_Str"");
  LibraryNode lib=targetNode.getLibrary().getHead();
  if (lib.getEditStatus().equals(NodeEditStatus.PATCH)) {
    list=PatchComponentList;
    tooltip=Messages.getString(""String_Node_Str"");
    targetType=ComponentNodeType.EXTENSION_POINT;
  }
  int index=0;
  for (  ComponentNodeType item : list) {
    combo.add(item.getDescription());
    if (item == targetType)     combo.select(index);
    index++;
  }
  boolean hasService=false;
  if (targetNode.getChain() != null)   hasService=targetNode.getChain().hasService();
 else   hasService=targetNode.getLibrary().hasService();
  if (!hasService && !targetNode.getEditStatus().equals(NodeEditStatus.PATCH)) {
    combo.add(ComponentNodeType.SERVICE.getDescription());
    tooltip=Messages.getString(""String_Node_Str"");
  }
  cl.setToolTipText(tooltip);
  combo.setToolTipText(tooltip);
  combo.addKeyListener(new FacetKeyListener());
  combo.addModifyListener(new TextModifyListener());
  combo.addTraverseListener(new TextTraverseListener());
}",0.9754213483146068
136283,"private Composite createObjectTypeRadios(final Composite c){
  final GridLayout gl=new GridLayout();
  gl.numColumns=2;
  container.setLayout(gl);
  objectTypeButtons=new EnumMap<ComponentNodeType,Button>(ComponentNodeType.class);
  ArrayList<ComponentNodeType> list=new ArrayList<ComponentNodeType>();
  String tooltip=Messages.getString(""String_Node_Str"");
  if (!targetNode.getLibrary().hasService())   tooltip=Messages.getString(""String_Node_Str"");
  if (targetNode.getLibrary().getEditStatus().equals(NodeEditStatus.PATCH))   postButtons(PatchComponentList,tooltip,container);
 else {
    if (targetNode.getLibrary().hasService())     postButtons(serviceComponentList,tooltip,container);
 else     postButtons(noServiceComponentList,tooltip,container);
    postButtons(complexComponentList,tooltip,container);
    postButtons(simpleComponentList,tooltip,container);
  }
  return container;
}","private Composite createObjectTypeRadios(final Composite c){
  final GridLayout gl=new GridLayout();
  gl.numColumns=2;
  container.setLayout(gl);
  objectTypeButtons=new EnumMap<ComponentNodeType,Button>(ComponentNodeType.class);
  ArrayList<ComponentNodeType> list=new ArrayList<ComponentNodeType>();
  String tooltip=Messages.getString(""String_Node_Str"");
  if (!targetNode.getLibrary().hasService())   tooltip=Messages.getString(""String_Node_Str"");
  if (targetNode.getLibrary().getHead().getEditStatus().equals(NodeEditStatus.PATCH))   postButtons(PatchComponentList,tooltip,container);
 else {
    if (targetNode.getLibrary().hasService())     postButtons(serviceComponentList,tooltip,container);
 else     postButtons(noServiceComponentList,tooltip,container);
    postButtons(complexComponentList,tooltip,container);
    postButtons(simpleComponentList,tooltip,container);
  }
  return container;
}",0.9944506104328524
136284,"@Override public void createControl(final Composite parent){
  container=new Composite(parent,SWT.NULL);
  final GridLayout layout=new GridLayout();
  container.setLayout(layout);
  nCols=2;
  layout.numColumns=nCols;
  final Label label1=new Label(container,SWT.NULL);
  if (!targetNode.isEditable())   label1.setText(Messages.getString(""String_Node_Str""));
 else   label1.setText(Messages.getString(""String_Node_Str""));
  label1.setToolTipText(Messages.getString(""String_Node_Str""));
  final Label libraryField=new Label(container,SWT.NULL | SWT.READ_ONLY);
  libraryField.setText(targetNode.getLibrary().getLabel() + ""String_Node_Str"" + targetNode.getLibrary().getVersion()+ ""String_Node_Str"");
  libraryField.setToolTipText(Messages.getString(""String_Node_Str""));
  if (targetNode.getLibrary().getEditStatus().equals(NodeEditStatus.PATCH)) {
    label1.setText(Messages.getString(""String_Node_Str""));
    libraryField.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  postCombo(Messages.getString(""String_Node_Str""));
  postCommonFields();
  final GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  name.setLayoutData(gd);
  setControl(container);
  setPageComplete(false);
}","@Override public void createControl(final Composite parent){
  container=new Composite(parent,SWT.NULL);
  final GridLayout layout=new GridLayout();
  container.setLayout(layout);
  nCols=2;
  layout.numColumns=nCols;
  final Label label1=new Label(container,SWT.NULL);
  LibraryNode targetLib=targetNode.getLibrary().getHead();
  if (!targetNode.isEditable())   label1.setText(Messages.getString(""String_Node_Str""));
 else   label1.setText(Messages.getString(""String_Node_Str""));
  label1.setToolTipText(Messages.getString(""String_Node_Str""));
  final Label libraryField=new Label(container,SWT.NULL | SWT.READ_ONLY);
  libraryField.setText(targetLib.getLabel() + ""String_Node_Str"" + targetLib.getVersion()+ ""String_Node_Str"");
  libraryField.setToolTipText(Messages.getString(""String_Node_Str""));
  if (targetLib.getEditStatus().equals(NodeEditStatus.PATCH)) {
    label1.setText(Messages.getString(""String_Node_Str""));
    libraryField.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  postCombo(Messages.getString(""String_Node_Str""));
  postCommonFields();
  final GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  name.setLayoutData(gd);
  setControl(container);
  setPageComplete(false);
}",0.9504785684560966
136285,"@After public void afterEachTest() throws RepositoryException, IOException {
  pc.getDefaultProject().removeAllFromTLProject();
  pc.closeAll();
  for (  ProjectNode pn : projectsToClean) {
    RepositoryTestUtils.deleteContents(pn.getTLProject().getProjectFile().getParentFile());
  }
  projectsToClean.clear();
  assert(Node.getModelNode().getManagedLibraries().size() == pc.getBuiltInProject().getChildren().size());
}","@After public void afterEachTest() throws RepositoryException, IOException {
  pc.getDefaultProject().removeAllFromTLProject();
  pc.closeAll();
  for (  ProjectNode pn : projectsToClean) {
    System.out.println(""String_Node_Str"" + pn);
    RepositoryTestUtils.deleteContents(pn.getTLProject().getProjectFile().getParentFile());
  }
  projectsToClean.clear();
  assert(Node.getModelNode().getManagedLibraries().size() == pc.getBuiltInProject().getChildren().size());
}",0.946067415730337
136286,"/** 
 * @return new business object with properties or null if library is not editable
 */
public BusinessObjectNode addBusinessObjectToLibrary(LibraryNode ln,String name){
  for (  Node n : ln.getDescendants_LibraryMembers())   if (n.getName().equals(name)) {
    LOGGER.warn(""String_Node_Str"" + name);
    return (BusinessObjectNode)n;
  }
  BusinessObjectNode newNode=addBusinessObjectToLibrary_Empty(ln,name);
  if (newNode == null)   return null;
  TypeProvider string=(TypeProvider)NodeFinders.findNodeByName(""String_Node_Str"",ModelNode.XSD_NAMESPACE);
  new ElementNode(newNode.getIDFacet(),""String_Node_Str"" + name,string);
  new IdNode(newNode.getIDFacet(),""String_Node_Str"" + name);
  new ElementNode(newNode.getSummaryFacet(),""String_Node_Str"" + name,string);
  new AttributeNode(newNode.getSummaryFacet(),""String_Node_Str"" + name,string);
  new IndicatorElementNode(newNode.getSummaryFacet(),""String_Node_Str"" + name);
  new IndicatorNode(newNode.getSummaryFacet(),""String_Node_Str"" + name);
  new ElementReferenceNode(newNode.addFacet(""String_Node_Str"" + name,TLFacetType.CUSTOM),""String_Node_Str"" + name,newNode);
  new AttributeNode(newNode.addFacet(""String_Node_Str"" + name,TLFacetType.QUERY),""String_Node_Str"" + name,string);
  if (!ln.isValid()) {
    printValidationFindings(ln);
    assertTrue(""String_Node_Str"",ln.isValid());
  }
  LOGGER.debug(""String_Node_Str"" + name);
  return ln.isEditable() ? newNode : null;
}","public BusinessObjectNode addBusinessObjectToLibrary(LibraryNode ln,String name,boolean addID){
  for (  Node n : ln.getDescendants_LibraryMembers())   if (n.getName().equals(name)) {
    LOGGER.warn(""String_Node_Str"" + name);
    return (BusinessObjectNode)n;
  }
  BusinessObjectNode newNode=addBusinessObjectToLibrary_Empty(ln,name);
  if (newNode == null)   return null;
  TypeProvider string=(TypeProvider)NodeFinders.findNodeByName(""String_Node_Str"",ModelNode.XSD_NAMESPACE);
  new ElementNode(newNode.getIDFacet(),""String_Node_Str"" + name,string);
  IdNode idNode=new IdNode(newNode.getIDFacet(),""String_Node_Str"" + name);
  new ElementNode(newNode.getSummaryFacet(),""String_Node_Str"" + name,string);
  new AttributeNode(newNode.getSummaryFacet(),""String_Node_Str"" + name,string);
  new IndicatorElementNode(newNode.getSummaryFacet(),""String_Node_Str"" + name);
  new IndicatorNode(newNode.getSummaryFacet(),""String_Node_Str"" + name);
  new ElementReferenceNode(newNode.addFacet(""String_Node_Str"" + name,TLFacetType.CUSTOM),""String_Node_Str"" + name,newNode);
  new AttributeNode(newNode.addFacet(""String_Node_Str"" + name,TLFacetType.QUERY),""String_Node_Str"" + name,string);
  if (!ln.isValid()) {
    printValidationFindings(ln);
    assertTrue(""String_Node_Str"",ln.isValid());
  }
  if (!addID)   idNode.delete();
  LOGGER.debug(""String_Node_Str"" + name);
  return ln.isEditable() ? newNode : null;
}",0.9036568213783404
136287,"public CoreObjectNode addCoreObjectToLibrary(LibraryNode ln,String name){
  TypeProvider type=((TypeProvider)NodeFinders.findNodeByName(""String_Node_Str"",ModelNode.XSD_NAMESPACE));
  CoreObjectNode newNode=addCoreObjectToLibrary_Empty(ln,name);
  TypeUser newProp=new ElementNode(newNode.getSummaryFacet(),""String_Node_Str"",type);
  newNode.getRoleFacet().addRole(name + ""String_Node_Str"");
  return newNode;
}","public CoreObjectNode addCoreObjectToLibrary(LibraryNode ln,String name){
  TypeProvider type=((TypeProvider)NodeFinders.findNodeByName(""String_Node_Str"",ModelNode.XSD_NAMESPACE));
  CoreObjectNode newNode=addCoreObjectToLibrary_Empty(ln,name);
  TypeUser newProp=new ElementNode(newNode.getSummaryFacet(),""String_Node_Str"" + name,type);
  newNode.getRoleFacet().addRole(name + ""String_Node_Str"");
  return newNode;
}",0.9915356711003628
136288,"/** 
 * Create a choice object with an alias, summary and two choice facets all with properties.
 */
public ChoiceObjectNode addChoice(LibraryNode ln,String name){
  if (name.isEmpty())   name=""String_Node_Str"";
  TypeProvider string=(TypeProvider)NodeFinders.findNodeByName(""String_Node_Str"",ModelNode.XSD_NAMESPACE);
  ChoiceObjectNode choice=new ChoiceObjectNode(new TLChoiceObject());
  if (!ln.isEditable())   return choice;
  choice.setName(name);
  if (ln != null)   ln.addMember(choice);
  PropertyOwnerInterface shared=choice.getSharedFacet();
  new ElementNode(shared,""String_Node_Str"");
  FacetNode f1=choice.addFacet(""String_Node_Str"");
  new ElementNode(f1,""String_Node_Str"",string);
  new AttributeNode(f1,""String_Node_Str"");
  new IndicatorNode(f1,""String_Node_Str"");
  FacetNode f2=choice.addFacet(""String_Node_Str"");
  new ElementNode(f2,""String_Node_Str"");
  new AttributeNode(f2,""String_Node_Str"");
  new IndicatorNode(f2,""String_Node_Str"");
  return choice;
}","/** 
 * Create a choice object with an alias, summary and two choice facets all with properties.
 */
public ChoiceObjectNode addChoice(LibraryNode ln,String name){
  if (name.isEmpty())   name=""String_Node_Str"";
  TypeProvider string=(TypeProvider)NodeFinders.findNodeByName(""String_Node_Str"",ModelNode.XSD_NAMESPACE);
  ChoiceObjectNode choice=new ChoiceObjectNode(new TLChoiceObject());
  if (!ln.isEditable())   return choice;
  choice.setName(name);
  if (ln != null)   ln.addMember(choice);
  PropertyOwnerInterface shared=choice.getSharedFacet();
  new ElementNode(shared,""String_Node_Str"" + name);
  FacetNode f1=choice.addFacet(""String_Node_Str"");
  new ElementNode(f1,""String_Node_Str"" + name,string);
  new AttributeNode(f1,""String_Node_Str"" + name);
  new IndicatorNode(f1,""String_Node_Str"" + name);
  FacetNode f2=choice.addFacet(""String_Node_Str"");
  new ElementNode(f2,""String_Node_Str"" + name);
  new AttributeNode(f2,""String_Node_Str"" + name);
  new IndicatorNode(f2,""String_Node_Str"" + name);
  return choice;
}",0.9755854509217738
136289,"@Test public void updateVersionTest_AssignedTypes() throws RepositoryException {
  providerLib=lib2;
  SimpleTypeNode simpleType=ml.addSimpleTypeToLibrary(providerLib,""String_Node_Str"");
  LibraryNode userLib=lib1;
  ml.addOneOfEach(userLib,""String_Node_Str"");
  for (  TypeUser user : userLib.getDescendants_TypeUsers())   user.setAssignedType(simpleType);
  providerLib=rc.createMajorVersion(providerLib);
  assertTrue(""String_Node_Str"",providerLib != null);
  assertTrue(""String_Node_Str"",!providerLib.getDescendants_TypeProviders().isEmpty());
  assertTrue(""String_Node_Str"",providerLib != lib2);
  assertTrue(""String_Node_Str"",providerLib == providerLib.getChain().getHead());
  assertTrue(""String_Node_Str"",simpleType.getLibrary() != providerLib);
  for (  TypeUser user : userLib.getDescendants_TypeUsers())   if (!(user.getAssignedType() instanceof ImpliedNode) && user.getRequiredType() == null)   if (user.getAssignedType() != simpleType)   LOGGER.debug(""String_Node_Str"" + user.getAssignedType());
 else   assertTrue(""String_Node_Str"",user.getAssignedType() == simpleType);
  List<LibraryNode> usedLibs=userLib.getAssignedLibraries();
  assertTrue(""String_Node_Str"",usedLibs.contains(simpleType.getLibrary()));
  HashMap<LibraryNode,LibraryNode> replacementMap=rc.getVersionUpdateMap(usedLibs,true);
  assertTrue(""String_Node_Str"",replacementMap.get(simpleType.getLibrary()) == providerLib);
  userLib.replaceTypeUsers(replacementMap);
  assertTrue(simpleType.getWhereAssigned().isEmpty());
  for (  TypeUser user : userLib.getDescendants_TypeUsers()) {
    if (!(user.getAssignedType() instanceof ImpliedNode) && user.getRequiredType() == null) {
      if (user.getAssignedType().getLibrary() != providerLib)       LOGGER.debug(""String_Node_Str"" + user + ""String_Node_Str""+ ((Node)user.getAssignedType()).getNameWithPrefix());
      assertTrue(""String_Node_Str"",user.getAssignedType().getLibrary() == providerLib);
    }
  }
}","@Test public void updateVersionTest_AssignedTypes() throws RepositoryException {
  versionedLib2=lib2;
  SimpleTypeNode simpleType=ml.addSimpleTypeToLibrary(versionedLib2,""String_Node_Str"");
  LibraryNode userLib=lib1;
  ml.addOneOfEach(userLib,""String_Node_Str"");
  for (  TypeUser user : userLib.getDescendants_TypeUsers())   user.setAssignedType(simpleType);
  versionedLib2=rc.createMajorVersion(versionedLib2);
  assertTrue(""String_Node_Str"",versionedLib2 != null);
  assertTrue(""String_Node_Str"",!versionedLib2.getDescendants_TypeProviders().isEmpty());
  assertTrue(""String_Node_Str"",versionedLib2 != lib2);
  assertTrue(""String_Node_Str"",versionedLib2 == versionedLib2.getChain().getHead());
  assertTrue(""String_Node_Str"",simpleType.getLibrary() != versionedLib2);
  for (  TypeUser user : userLib.getDescendants_TypeUsers())   if (!(user.getAssignedType() instanceof ImpliedNode) && user.getRequiredType() == null)   if (user.getAssignedType() != simpleType)   LOGGER.debug(""String_Node_Str"" + user.getAssignedType());
 else   assertTrue(""String_Node_Str"",user.getAssignedType() == simpleType);
  List<LibraryNode> usedLibs=userLib.getAssignedLibraries();
  assertTrue(""String_Node_Str"",usedLibs.contains(simpleType.getLibrary()));
  HashMap<LibraryNode,LibraryNode> replacementMap=rc.getVersionUpdateMap(usedLibs,true);
  assertTrue(""String_Node_Str"",replacementMap.get(simpleType.getLibrary()) == versionedLib2);
  userLib.replaceTypeUsers(replacementMap);
  assertTrue(simpleType.getWhereAssigned().isEmpty());
  for (  TypeUser user : userLib.getDescendants_TypeUsers()) {
    if (!(user.getAssignedType() instanceof ImpliedNode) && user.getRequiredType() == null) {
      if (user.getAssignedType().getLibrary() != versionedLib2)       LOGGER.debug(""String_Node_Str"" + user + ""String_Node_Str""+ ((Node)user.getAssignedType()).getNameWithPrefix());
      assertTrue(""String_Node_Str"",user.getAssignedType().getLibrary() == versionedLib2);
    }
  }
}",0.9236289082521784
136290,"@Test public void updateVersionTest_BaseTypes() throws RepositoryException {
  BusinessObjectNode boType=ml.addBusinessObjectToLibrary(lib2,""String_Node_Str"");
  ChoiceObjectNode choiceType=ml.addChoice(lib2,""String_Node_Str"");
  CoreObjectNode coreType=ml.addCoreObjectToLibrary(lib2,""String_Node_Str"");
  EnumerationClosedNode ecType=ml.addClosedEnumToLibrary(lib2,""String_Node_Str"");
  EnumerationOpenNode eoType=ml.addOpenEnumToLibrary(lib2,""String_Node_Str"");
  VWA_Node vwaType=ml.addVWA_ToLibrary(lib2,""String_Node_Str"");
  LibraryNode userLib=lib1;
  BusinessObjectNode boExtension=ml.addBusinessObjectToLibrary(lib1,""String_Node_Str"");
  boExtension.setExtension(boType);
  assertTrue(""String_Node_Str"",boExtension.getExtensionBase() == boType);
  ChoiceObjectNode choiceExtension=ml.addChoice(lib1,""String_Node_Str"");
  choiceExtension.setExtension(choiceType);
  CoreObjectNode coreExtension=ml.addCoreObjectToLibrary(lib1,""String_Node_Str"");
  coreExtension.setExtension(coreType);
  EnumerationClosedNode ecExtension=ml.addClosedEnumToLibrary(lib1,""String_Node_Str"");
  ecExtension.setExtension(ecType);
  EnumerationOpenNode eoExtension=ml.addOpenEnumToLibrary(lib1,""String_Node_Str"");
  eoExtension.setExtension(eoType);
  VWA_Node vwaExtension=ml.addVWA_ToLibrary(lib1,""String_Node_Str"");
  vwaExtension.setExtension(vwaType);
  assertTrue(""String_Node_Str"",lib2.validate().isEmpty());
  providerLib=rc.createMajorVersion(lib2);
  assertTrue(""String_Node_Str"",providerLib != null);
  assertTrue(""String_Node_Str"",!providerLib.getDescendants_TypeProviders().isEmpty());
  assertTrue(""String_Node_Str"",providerLib != lib2);
  assertTrue(""String_Node_Str"",providerLib == providerLib.getChain().getHead());
  List<LibraryNode> usedLibs=userLib.getAssignedLibraries();
  assertTrue(""String_Node_Str"",!usedLibs.isEmpty());
  HashMap<LibraryNode,LibraryNode> replacementMap=rc.getVersionUpdateMap(usedLibs,true);
  userLib.replaceAllUsers(replacementMap);
  for (  ExtensionOwner owner : userLib.getDescendants_ExtensionOwners()) {
    if (!(owner.getExtensionBase() instanceof ImpliedNode)) {
      if (owner.getExtensionBase().getLibrary() != providerLib)       LOGGER.debug(""String_Node_Str"" + owner + ""String_Node_Str""+ ((Node)owner.getExtensionBase()).getNameWithPrefix());
      assertTrue(""String_Node_Str"",owner.getExtensionBase().getLibrary() == providerLib);
    }
  }
}","@Test public void updateVersionTest_BaseTypes() throws RepositoryException {
  BusinessObjectNode boType=ml.addBusinessObjectToLibrary(lib2,""String_Node_Str"");
  ChoiceObjectNode choiceType=ml.addChoice(lib2,""String_Node_Str"");
  CoreObjectNode coreType=ml.addCoreObjectToLibrary(lib2,""String_Node_Str"");
  EnumerationClosedNode ecType=ml.addClosedEnumToLibrary(lib2,""String_Node_Str"");
  EnumerationOpenNode eoType=ml.addOpenEnumToLibrary(lib2,""String_Node_Str"");
  VWA_Node vwaType=ml.addVWA_ToLibrary(lib2,""String_Node_Str"");
  BusinessObjectNode boExtension=ml.addBusinessObjectToLibrary(lib1,""String_Node_Str"",false);
  boExtension.setExtension(boType);
  assertTrue(""String_Node_Str"",boExtension.getExtensionBase() == boType);
  ChoiceObjectNode choiceExtension=ml.addChoice(lib1,""String_Node_Str"");
  choiceExtension.setExtension(choiceType);
  CoreObjectNode coreExtension=ml.addCoreObjectToLibrary(lib1,""String_Node_Str"");
  coreExtension.setExtension(coreType);
  EnumerationClosedNode ecExtension=ml.addClosedEnumToLibrary(lib1,""String_Node_Str"");
  ecExtension.setExtension(ecType);
  EnumerationOpenNode eoExtension=ml.addOpenEnumToLibrary(lib1,""String_Node_Str"");
  eoExtension.setExtension(eoType);
  VWA_Node vwaExtension=ml.addVWA_ToLibrary(lib1,""String_Node_Str"");
  vwaExtension.setExtension(vwaType);
  ValidationFindings findings1=lib1.validate();
  ValidationFindings findings2=lib2.validate();
  MockLibrary.printFindings(findings1);
  MockLibrary.printFindings(findings2);
  assertTrue(""String_Node_Str"",lib1.validate().isEmpty());
  assertTrue(""String_Node_Str"",lib2.validate().isEmpty());
  versionedLib2=rc.createMajorVersion(lib2);
  assertTrue(""String_Node_Str"",versionedLib2 != null);
  assertTrue(""String_Node_Str"",!versionedLib2.getDescendants_TypeProviders().isEmpty());
  assertTrue(""String_Node_Str"",versionedLib2 != lib2);
  assertTrue(""String_Node_Str"",versionedLib2 == versionedLib2.getChain().getHead());
  List<LibraryNode> usedLibs1=lib1.getAssignedLibraries();
  List<LibraryNode> usedLibs2=versionedLib2.getAssignedLibraries();
  assertTrue(""String_Node_Str"",!usedLibs2.isEmpty());
  HashMap<LibraryNode,LibraryNode> replacementMap=rc.getVersionUpdateMap(usedLibs1,true);
  lib1.replaceAllUsers(replacementMap);
  for (  ExtensionOwner owner : lib1.getDescendants_ExtensionOwners()) {
    if (!(owner.getExtensionBase() instanceof ImpliedNode)) {
      if (owner.getExtensionBase().getLibrary() != versionedLib2)       LOGGER.debug(""String_Node_Str"" + owner + ""String_Node_Str""+ ((Node)owner.getExtensionBase()).getNameWithPrefix());
      assertTrue(""String_Node_Str"",owner.getExtensionBase().getLibrary() == versionedLib2);
    }
  }
}",0.8916946143223515
136291,"private void runCommand(PropertyNodeType actionType){
  INode.CommandType type=selectedNode.getAddCommand();
  if (selectedNode instanceof CoreObjectNode && actionType == PropertyNodeType.ROLE)   type=INode.CommandType.ROLE;
 else   if (selectedNode instanceof ServiceNode)   type=INode.CommandType.OPERATION;
switch (type) {
case ROLE:
    addRoleToNode();
  break;
case PROPERTY:
addProperty();
break;
case ENUMERATION:
addEnumValue();
break;
case OPERATION:
addOperation();
break;
case NONE:
default :
DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
}
}","private void runCommand(PropertyNodeType actionType){
  INode.CommandType type=selectedNode.getAddCommand();
  if (selectedNode instanceof CoreObjectNode && actionType == PropertyNodeType.ROLE)   type=INode.CommandType.ROLE;
switch (type) {
case ROLE:
    addRoleToNode();
  break;
case PROPERTY:
addProperty();
break;
case ENUMERATION:
addEnumValue();
break;
case OPERATION:
addOperation();
break;
case NONE:
default :
DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
}
}",0.920486435921422
136292,"/** 
 * Create a component in the head library that versions (extends) the selected node. Prompts the user to confirm before creating node.
 * @return newly created node or null if user cancelled or error.
 */
public ComponentNode createVersionExtension(Node selectedNode){
  ComponentNode actOnNode=null;
  boolean result=false;
  if (selectedNode.getChain() == null)   return null;
  if (selectedNode.getChain().getHead().isPatchVersion()) {
    if (!selectedNode.isExtensionPointFacet()) {
      if (result=postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((ComponentNode)selectedNode).createPatchVersionComponent();
    }
  }
 else   if (selectedNode.getChain().getHead().isMinorOrMajorVersion()) {
    if (selectedNode instanceof VersionedObjectInterface) {
      if (result=postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((VersionedObjectInterface)selectedNode).createMinorVersionComponent();
    }
 else     if (selectedNode.isEditable_inService())     if (selectedNode.getLibrary().getChain().getHead() == selectedNode.getLibrary())     actOnNode=(ComponentNode)selectedNode;
 else     actOnNode=new OperationNode((ServiceNode)selectedNode.getLibrary().getServiceRoot().getChildren().get(0),""String_Node_Str"");
  }
  if (actOnNode == null && result == true)   DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + selectedNode + ""String_Node_Str"");
  return actOnNode;
}","/** 
 * Create a component in the head library that versions (extends) the selected node. Prompts the user to confirm before creating node.
 * @return newly created node or null if user cancelled or error.
 */
public ComponentNode createVersionExtension(Node selectedNode){
  ComponentNode actOnNode=null;
  boolean result=false;
  if (selectedNode.getChain() == null)   return null;
  if (selectedNode.isInHead())   LOGGER.warn(""String_Node_Str"" + selectedNode + ""String_Node_Str"");
  if (selectedNode.getChain().getHead().isPatchVersion()) {
    if (!selectedNode.isExtensionPointFacet()) {
      if (result=postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((ComponentNode)selectedNode).createPatchVersionComponent();
    }
  }
 else   if (selectedNode.getChain().getHead().isMinorOrMajorVersion()) {
    if (selectedNode instanceof VersionedObjectInterface) {
      if (result=postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((VersionedObjectInterface)selectedNode).createMinorVersionComponent();
    }
 else     if (selectedNode.isEditable_inService())     if (selectedNode.getLibrary().getChain().getHead() == selectedNode.getLibrary())     actOnNode=(ComponentNode)selectedNode;
 else     actOnNode=new OperationNode((ServiceNode)selectedNode.getLibrary().getServiceRoot().getChildren().get(0),""String_Node_Str"");
  }
  if (actOnNode == null && result == true)   DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + selectedNode + ""String_Node_Str"");
  return actOnNode;
}",0.9659632402995236
136293,"private void setOrNewPropertyType(final OtmEventData ed){
  final TableItem ti=(TableItem)ed.getWidget();
  if ((ti == null) || (ti.getData() == null) || (!(ti.getData() instanceof ComponentNode))) {
    LOGGER.warn(""String_Node_Str"");
    showInvalidTargetWarning();
    return;
  }
  ComponentNode tableNode=(ComponentNode)ti.getData();
  final Node sourceNode=NodeFinders.findNodeByID(ed.getText());
  if (sourceNode == null) {
    LOGGER.warn(""String_Node_Str"");
    showInvalidTargetWarning();
    return;
  }
  Node ownNode=getOwningNodeForDrop(tableNode);
  Node newNode=tableNode.addPropertyFromDND(sourceNode,ed.isDragCopy());
  if (newNode == null)   PostTypeChange.notyfications(tableNode,sourceNode);
 else {
    ownNode=getOwningNodeForDrop(newNode);
    if (tableNode.getLibrary() != ownNode.getLibrary())     DialogUserNotifier.openInformation(""String_Node_Str"",Messages.getString(""String_Node_Str""));
  }
  mc.refresh(ownNode);
}","private void setOrNewPropertyType(final OtmEventData ed){
  final TableItem ti=(TableItem)ed.getWidget();
  if ((ti == null) || (ti.getData() == null) || (!(ti.getData() instanceof ComponentNode))) {
    LOGGER.warn(""String_Node_Str"");
    showInvalidTargetWarning();
    return;
  }
  ComponentNode tableNode=(ComponentNode)ti.getData();
  final Node sourceNode=NodeFinders.findNodeByID(ed.getText());
  if (sourceNode == null) {
    LOGGER.warn(""String_Node_Str"");
    showInvalidTargetWarning();
    return;
  }
  if (ed.isDragCopy() || tableNode.isUnAssigned()) {
    if (tableNode instanceof TypeUser && sourceNode instanceof TypeProvider)     ((TypeUser)tableNode).setAssignedType((TypeProvider)sourceNode);
  }
 else {
    Event event=new Event();
    event.data=tableNode;
    new AddNodeHandler2().execute(event);
  }
}",0.5956006768189509
136294,"/** 
 * Add a new property from a Drag-and-Drop action. If version rules require, a new component is created.
 * @param isCopy - force a copy even if this node does not have assigned type
 * @return the new node or null if the type was only assigned.
 */
public Node addPropertyFromDND(Node sourceNode,boolean isCopy){
  if (sourceNode.isXsdType())   sourceNode=sourceNode.getOwningComponent();
  ComponentNode newNode=null;
  if (isCopy || !isUnAssigned()) {
    if (getChain() != null) {
      if (getChain().isPatch())       newNode=createPatchVersionComponent();
 else       if (getChain().isMinor() && this instanceof VersionedObjectInterface)       newNode=((VersionedObjectInterface)this).createMinorVersionComponent();
    }
    if (newNode != null)     newNode=(ComponentNode)newNode.createProperty(sourceNode);
 else     newNode=(ComponentNode)createProperty(sourceNode);
    if (this instanceof FacetNode && ((FacetNode)this).isSummaryFacet())     if (!getLibrary().isMinorVersion())     newNode.setMandatory(true);
  }
 else {
    if (this instanceof TypeUser && sourceNode instanceof TypeProvider)     ((TypeUser)this).setAssignedType((TypeProvider)sourceNode);
  }
  return newNode;
}","/** 
 * Add a new property from a Drag-and-Drop action. If version rules require, a new component is created.
 * @param isCopy - force a copy even if this node does not have assigned type
 * @return the new node or null if the type was only assigned.
 */
@Deprecated public Node addPropertyFromDND(Node sourceNode,boolean isCopy){
  if (sourceNode.isXsdType())   sourceNode=sourceNode.getOwningComponent();
  ComponentNode newNode=null;
  if (isCopy || !isUnAssigned()) {
    if (getChain() != null) {
      if (getChain().isPatch())       newNode=createPatchVersionComponent();
 else       if (getChain().isMinor() && this instanceof VersionedObjectInterface)       newNode=((VersionedObjectInterface)this).createMinorVersionComponent();
    }
    if (newNode != null)     newNode=(ComponentNode)newNode.createProperty(sourceNode);
 else     newNode=(ComponentNode)createProperty(sourceNode);
    if (this instanceof FacetNode && ((FacetNode)this).isSummaryFacet())     if (!getLibrary().isMinorVersion())     newNode.setMandatory(true);
  }
 else {
    if (this instanceof TypeUser && sourceNode instanceof TypeProvider)     ((TypeUser)this).setAssignedType((TypeProvider)sourceNode);
  }
  return newNode;
}",0.9950166112956812
136295,"private void generateLibrary(final TLLibrary tlLib){
  for (  final LibraryMember mbr : tlLib.getNamedMembers()) {
    ComponentNode n=(ComponentNode)GetNode(mbr);
    if (mbr instanceof TLContextualFacet) {
      LOGGER.debug(""String_Node_Str"" + mbr.getLocalName());
    }
 else     if (mbr instanceof TLService) {
      if (n instanceof ServiceNode)       ((ServiceNode)n).link((TLService)mbr,this);
 else       new ServiceNode((TLService)mbr,this);
    }
 else     if (mbr instanceof TLResource)     if (n instanceof ResourceNode) {
      n.getLibrary().remove(n);
      this.linkMember(n);
    }
 else     new ResourceNode((TLResource)mbr,this);
 else {
      if (n == null)       n=NodeFactory.newComponent_UnTyped((TLLibraryMember)mbr);
      linkMember(n);
    }
  }
  new TypeResolver().resolveTypes();
}","private void generateLibrary(final TLLibrary tlLib){
  for (  final LibraryMember mbr : tlLib.getNamedMembers()) {
    ComponentNode n=(ComponentNode)GetNode(mbr);
    if (mbr instanceof TLContextualFacet) {
      LOGGER.debug(""String_Node_Str"" + mbr.getLocalName() + ((TLContextualFacet)mbr).isLocalFacet());
    }
 else     if (mbr instanceof TLService) {
      if (n instanceof ServiceNode)       ((ServiceNode)n).link((TLService)mbr,this);
 else       new ServiceNode((TLService)mbr,this);
    }
 else     if (mbr instanceof TLResource)     if (n instanceof ResourceNode) {
      n.getLibrary().remove(n);
      this.linkMember(n);
    }
 else     new ResourceNode((TLResource)mbr,this);
 else {
      if (n == null)       n=NodeFactory.newComponent_UnTyped((TLLibraryMember)mbr);
      linkMember(n);
    }
  }
  new TypeResolver().resolveTypes();
}",0.9747899159663864
136296,"/** 
 * getChildren is used when a node that hasChildren() is selected
 */
@Override public Object[] getChildren(final Object element){
  if (element instanceof Node) {
    Node node=(Node)element;
    List<Node> navChildren=new ArrayList<Node>();
    navChildren.addAll(node.getNavChildren());
    if (node instanceof TypeProvider)     navChildren.add(((TypeProvider)node).getWhereUsedNode());
    if (node instanceof LibraryNode) {
      navChildren.add(((LibraryNode)node).getWhereUsedHandler().getWhereUsedNode());
      navChildren.add(((LibraryNode)node).getWhereUsedHandler().getUsedByNode());
    }
    if (node instanceof LibraryChainNode) {
      navChildren.add(((LibraryChainNode)node).getHead().getWhereUsedHandler().getWhereUsedNode());
      navChildren.add(((LibraryChainNode)node).getHead().getWhereUsedHandler().getUsedByNode());
    }
    navChildren.addAll(node.getInheritedChildren());
    return navChildren != null ? navChildren.toArray() : null;
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + element);
}","/** 
 * getChildren is used when a node that hasChildren() is selected
 */
@Override public Object[] getChildren(final Object element){
  if (element instanceof Node) {
    Node node=(Node)element;
    List<Node> navChildren=new ArrayList<Node>();
    if (node.isDeleted()) {
      LOGGER.debug(""String_Node_Str"" + node);
      return null;
    }
    navChildren.addAll(node.getNavChildren());
    if (node instanceof TypeProvider)     navChildren.add(((TypeProvider)node).getWhereUsedNode());
    if (node instanceof LibraryNode) {
      navChildren.add(((LibraryNode)node).getWhereUsedHandler().getWhereUsedNode());
      navChildren.add(((LibraryNode)node).getWhereUsedHandler().getUsedByNode());
    }
    if (node instanceof LibraryChainNode) {
      navChildren.add(((LibraryChainNode)node).getHead().getWhereUsedHandler().getWhereUsedNode());
      navChildren.add(((LibraryChainNode)node).getHead().getWhereUsedHandler().getUsedByNode());
    }
    navChildren.addAll(node.getInheritedChildren());
    return navChildren != null ? navChildren.toArray() : null;
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + element);
}",0.9548974943052392
136297,"@Override public StyledString getStyledText(Object element){
  return new StyledString(getText(element));
}","@Override public StyledString getStyledText(Object element){
  if (element instanceof INode) {
    if (!((INode)element).isDeleted())     return new StyledString(getText(element));
  }
  return new StyledString(""String_Node_Str"");
}",0.6312684365781711
136298,"@Override public String getText(final Object element){
  String label=""String_Node_Str"";
  if (element instanceof INode) {
    final Node n=(Node)element;
    label=n.getLabel();
    if (n.isDeleted())     label+=""String_Node_Str"";
    if (n.isLocal())     label=n.getName() + ""String_Node_Str"";
  }
  return label;
}","@Override public String getText(final Object element){
  String label=""String_Node_Str"";
  if (element instanceof INode) {
    final Node n=(Node)element;
    if (n.isDeleted()) {
      LOGGER.debug(""String_Node_Str"");
      return null;
    }
    label=n.getLabel();
    if (n.isLocal())     label=n.getName() + ""String_Node_Str"";
  }
  return label;
}",0.7940298507462686
136299,"@Test public void addPropertyFromDND_Tests(){
  ln.setEditable(true);
  BusinessObjectNode bo=mockLibrary.addBusinessObjectToLibrary(ln,""String_Node_Str"");
  PropertyOwnerInterface summary=bo.getSummaryFacet();
  Node aType=NodeFinders.findNodeByName(""String_Node_Str"",ModelNode.XSD_NAMESPACE);
  ComponentNode cn=(ComponentNode)summary;
  Node result=cn.addPropertyFromDND(aType,false);
  assertNotNull(result);
  assertTrue(bo.getSummaryFacet().getChildren().contains(result));
  result=cn.addPropertyFromDND(aType,true);
  assertNotNull(result);
  assertEquals(aType,result.getType());
  assertTrue(bo.getSummaryFacet().getChildren().contains(result));
  result=((ComponentNode)result).addPropertyFromDND(aType,false);
  assertNotNull(result);
  assertTrue(bo.getSummaryFacet().getChildren().contains(result));
  ((PropertyNode)result).setAssignedType();
  result=((ComponentNode)result).addPropertyFromDND(aType,false);
  assertNull(result);
}","@Test public void addPropertyFromDND_Tests(){
  ln.setEditable(true);
  BusinessObjectNode bo=mockLibrary.addBusinessObjectToLibrary(ln,""String_Node_Str"");
  PropertyOwnerInterface summary=bo.getSummaryFacet();
  Node aType=NodeFinders.findNodeByName(""String_Node_Str"",ModelNode.XSD_NAMESPACE);
  ComponentNode cn=(ComponentNode)summary;
}",0.5272161741835147
136300,"private void typeSelector(){
  List<Node> users=new ArrayList<Node>();
  List<Node> selections=getMainController().getSelectedNodes_NavigatorView();
  if (selections != null)   for (  Node s : selections) {
    if (s instanceof TypeNode)     addTypeUsers(s,users);
 else     users.add(s);
  }
  OtmAbstractHandler handler=new OtmAbstractHandler(){
    @Override public Object execute(    ExecutionEvent event) throws ExecutionException {
      return null;
    }
  }
;
  Node n=users.get(0);
  if (n.getChain() != null && !n.isInHead2())   n=handler.createVersionExtension(n);
  if (n == null)   return;
  final TypeSelectionWizard wizard=new TypeSelectionWizard(new ArrayList<Node>(users));
  if (wizard.run(OtmRegistry.getActiveShell())) {
    execute(wizard.getList(),wizard.getSelection());
  }
  mc.refresh(users.get(0));
}","private void typeSelector(){
  List<Node> users=new ArrayList<Node>();
  List<Node> selections=getMainController().getSelectedNodes_NavigatorView();
  if (selections != null)   for (  Node s : selections) {
    if (s instanceof TypeNode)     addTypeUsers((TypeNode)s,users);
 else     users.add(s);
  }
  OtmAbstractHandler handler=new OtmAbstractHandler(){
    @Override public Object execute(    ExecutionEvent event) throws ExecutionException {
      return null;
    }
  }
;
  if (users == null || users.isEmpty())   return;
  Node n=users.get(0);
  if (n.getChain() != null && !n.isInHead2())   n=handler.createVersionExtension(n);
  if (n == null)   return;
  final TypeSelectionWizard wizard=new TypeSelectionWizard(new ArrayList<Node>(users));
  if (wizard.run(OtmRegistry.getActiveShell())) {
    execute(wizard.getList(),wizard.getSelection());
  }
  mc.refresh(users.get(0));
}",0.965034965034965
136301,"private void addTypeUsers(INode n,List<Node> users){
  throw new IllegalStateException(""String_Node_Str"");
}","private void addTypeUsers(TypeNode tn,List<Node> users){
  if (tn.isUser()) {
    users.add(tn.getParent());
  }
}",0.5945945945945946
136302,"@Override public boolean isEnabled(){
  Node n=getMainController().getCurrentNode_NavigatorView();
  return n.getChain() == null ? n.isEditable() : n.getChain().isMajor();
}","@Override public boolean isEnabled(){
  Node n=getMainController().getCurrentNode_NavigatorView();
  if (n == null || !(n instanceof TypeNode) || !((TypeNode)n).isUser())   return false;
  return n.getChain() == null ? n.isEditable() : n.getChain().isMajor();
}",0.7972350230414746
136303,"private void updateLibrary(TypeUserNode userNode){
  DefaultRepositoryController rc=(DefaultRepositoryController)mc.getRepositoryController();
  List<LibraryNode> usedLibs=new ArrayList<LibraryNode>();
  usedLibs.add(userNode.getOwner());
  LibraryNode libToUpdate=(LibraryNode)userNode.getParent();
  boolean includeDrafts=false;
  String question=""String_Node_Str"";
  String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int result=DialogUserNotifier.openQuestionWithButtons(""String_Node_Str"",question,buttons);
  if (result == 1)   includeDrafts=true;
 else   if (result == 2)   return;
  HashMap<LibraryNode,LibraryNode> replacementMap;
  try {
    replacementMap=rc.getVersionUpdateMap(usedLibs,includeDrafts);
  }
 catch (  RepositoryException e1) {
    DialogUserNotifier.openWarning(""String_Node_Str"",e1.getLocalizedMessage());
    return;
  }
  LibraryNode targetLib=null;
  LibraryNode oldLib=null;
  for (  Entry<LibraryNode,LibraryNode> e : replacementMap.entrySet()) {
    targetLib=e.getValue();
    oldLib=e.getKey();
  }
  if (targetLib == null) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  question=""String_Node_Str"" + oldLib.getNameWithPrefix() + ""String_Node_Str""+ targetLib.getNameWithPrefix()+ ""String_Node_Str"";
  if (DialogUserNotifier.openQuestion(""String_Node_Str"",question))   libToUpdate.replaceTypeUsers(replacementMap);
  libToUpdate.getWhereUsedHandler().refreshUsedByNode();
  mc.refresh(libToUpdate);
}","private void updateLibrary(TypeUserNode userNode){
  DefaultRepositoryController rc=(DefaultRepositoryController)mc.getRepositoryController();
  List<LibraryNode> usedLibs=new ArrayList<LibraryNode>();
  usedLibs.add(userNode.getOwner());
  LibraryNode libToUpdate=(LibraryNode)userNode.getParent();
  String question=""String_Node_Str"";
  String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int result=DialogUserNotifier.openQuestionWithButtons(""String_Node_Str"",question,buttons);
  boolean includeDrafts=false;
  if (result == 0)   includeDrafts=true;
 else   if (result == 2)   return;
  HashMap<LibraryNode,LibraryNode> replacementMap;
  try {
    replacementMap=rc.getVersionUpdateMap(usedLibs,includeDrafts);
  }
 catch (  RepositoryException e1) {
    DialogUserNotifier.openWarning(""String_Node_Str"",e1.getLocalizedMessage());
    return;
  }
  LibraryNode targetLib=null;
  LibraryNode oldLib=null;
  for (  Entry<LibraryNode,LibraryNode> e : replacementMap.entrySet()) {
    targetLib=e.getValue();
    oldLib=e.getKey();
  }
  if (targetLib == null) {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  question=""String_Node_Str"" + oldLib.getNameWithPrefix() + ""String_Node_Str""+ targetLib.getNameWithPrefix()+ ""String_Node_Str"";
  if (DialogUserNotifier.openQuestion(""String_Node_Str"",question))   libToUpdate.replaceTypeUsers(replacementMap);
  libToUpdate.getWhereUsedHandler().refreshUsedByNode();
  mc.refresh(libToUpdate);
}",0.969435215946844
136304,"public static int openQuestionWithButtons(final String title,final String question,final String[] labels){
  if (!OtmRegistry.getMainWindow().hasDisplay())   return 2;
  final MessageDialog dg=new MessageDialog(OtmRegistry.getActiveShell(),title,null,question,MessageDialog.QUESTION,labels,0);
  return dg.open();
}","/** 
 * @param title
 * @param question
 * @param labels
 * @return - index to button pressed (0, 1, ...)
 */
public static int openQuestionWithButtons(final String title,final String question,final String[] labels){
  if (!OtmRegistry.getMainWindow().hasDisplay())   return 2;
  final MessageDialog dg=new MessageDialog(OtmRegistry.getActiveShell(),title,null,question,MessageDialog.QUESTION,labels,0);
  return dg.open();
}",0.8513513513513513
136305,"@Override protected void updateFamily(){
  final Node parent=getParent();
  if (getChildren().size() == 1) {
    final Node child=getChildren().get(0);
    parent.getChildren().add(child);
    if (!parent.getChildren().remove(this))     LOGGER.info(""String_Node_Str"" + this.getName() + ""String_Node_Str""+ parent.getName());
  }
}","@Override protected void updateFamily(){
  final Node parent=getParent();
  if (getChildren().size() == 1) {
    final Node child=getChildren().get(0);
    parent.getChildren().add(child);
    if (!parent.getChildren().remove(this))     LOGGER.info(""String_Node_Str"" + this.getName() + ""String_Node_Str""+ parent.getName());
    deleted=true;
    getChildren().clear();
  }
}",0.9359886201991464
136306,"protected void remove(Node node){
  getChildren().remove(node);
  updateFamily();
}","/** 
 * Attempt to remove passed node from this family. If successful, update the family and delete it if there is only one member.
 * @param node
 */
protected void remove(Node node){
  if (getChildren().remove(node))   updateFamily();
}",0.3738317757009345
136307,"protected void remove(Node node){
  if (!getChildren().remove(node)) {
    ArrayList<Node> kids=new ArrayList<Node>(getChildren());
    for (    Node n : kids) {
      if ((n instanceof AggregateFamilyNode) && (n.family.equals(node.family))) {
        ((AggregateFamilyNode)n).remove(node);
        if (n.getChildren().isEmpty())         getChildren().remove(n);
      }
    }
  }
}","protected void remove(Node node){
  if (!getChildren().remove(node)) {
    ArrayList<Node> kids=new ArrayList<Node>(getChildren());
    for (    Node n : kids) {
      if (n instanceof AggregateFamilyNode)       ((AggregateFamilyNode)n).remove(node);
    }
  }
}",0.7204968944099379
136308,"/** 
 * Set object, children, parent, add to parent's child list, listener(s)
 */
public ActionNode(TLAction tlAction){
  super(tlAction);
}","/** 
 * Create Action node including TL object and the request. Designed for resource command actions.
 * @param parent
 */
public ActionNode(ResourceNode parent){
  super(new TLAction(),parent);
  tlObj.setActionId(""String_Node_Str"");
  parent.getTLModelObject().addAction(tlObj);
  TLActionRequest tlr=new TLActionRequest();
  tlObj.setRequest(tlr);
  new ActionRequest(tlr);
}",0.0655105973025048
136309,"@Override public void delete(){
  List<Node> kids=new ArrayList<Node>(getChildren());
  for (  Node child : kids)   child.delete();
  tlObj.getOwner().removeAction(tlObj);
  super.delete();
}","@Override public void delete(){
  List<Node> kids=new ArrayList<Node>(getChildren());
  for (  Node child : kids)   child.delete();
  if (tlObj.getOwner() != null)   tlObj.getOwner().removeAction(tlObj);
  super.delete();
}",0.9227053140096618
136310,"/** 
 * Find all type providers in a library that have types assigned to owner library.
 * @return
 */
public List<Node> getUsersOfTypesFromOwnerLibrary(LibraryNode lib){
  List<Node> ul=new ArrayList<Node>();
  for (  TypeUser user : lib.getDescendants_TypeUsers()) {
    TypeProvider ut=user.getAssignedType();
    if (ut != null && ((Node)ut).getLibrary() == owner) {
      if (!ul.contains(user))       ul.add((Node)user);
    }
  }
  for (  ExtensionOwner o : lib.getDescendants_ExtensionOwners()) {
    Node extensionBase=o.getExtensionBase();
    if (extensionBase != null && extensionBase.getLibrary() == owner) {
      if (!ul.contains(extensionBase))       ul.add((Node)o);
    }
  }
  return ul;
}","/** 
 * Find all type providers in a library that have types assigned to owner library.
 * @return
 */
public List<Node> getUsersOfTypesFromOwnerLibrary(LibraryNode lib){
  List<Node> ul=new ArrayList<Node>();
  if (lib == null)   return ul;
  for (  TypeUser user : lib.getDescendants_TypeUsers()) {
    TypeProvider ut=user.getAssignedType();
    if (ut != null && ((Node)ut).getLibrary() == owner) {
      if (!ul.contains(user))       ul.add((Node)user);
    }
  }
  for (  ExtensionOwner o : lib.getDescendants_ExtensionOwners()) {
    Node extensionBase=o.getExtensionBase();
    if (extensionBase != null && extensionBase.getLibrary() == owner) {
      if (!ul.contains(extensionBase))       ul.add((Node)o);
    }
  }
  return ul;
}",0.9779005524861878
136311,"@Override public void remove(final Collection<? extends Node> libraries){
  Set<ProjectNode> projectsToSave=new HashSet<ProjectNode>();
  for (  LibraryNode ln : getLibrariesToClose(libraries)) {
    if (ln == null || ln.getParent() == null) {
      LOGGER.error(""String_Node_Str"" + ln + ""String_Node_Str"");
    }
 else {
      projectsToSave.add(ln.getProject());
      ln.close();
    }
  }
  for (  ProjectNode project : projectsToSave) {
    mc.getProjectController().save(project);
    mc.refresh(project);
  }
  mc.clearSelection();
}","@Override public void remove(final Collection<? extends Node> libraries){
  Set<ProjectNode> projectsToSave=new HashSet<ProjectNode>();
  Set<LibraryChainNode> chains=new HashSet<LibraryChainNode>();
  for (  Node n : libraries)   if (n instanceof LibraryChainNode)   chains.add((LibraryChainNode)n);
 else   if (n.getChain() != null)   chains.add(n.getChain());
  for (  LibraryNode ln : getLibrariesToClose(libraries)) {
    if (ln == null || ln.getParent() == null) {
      LOGGER.error(""String_Node_Str"" + ln + ""String_Node_Str"");
    }
 else {
      projectsToSave.add(ln.getProject());
      ln.close();
    }
  }
  for (  Node n : chains) {
    if (n.getParent() != null)     n.getParent().getChildren().remove(n);
    n.setParent(null);
  }
  for (  ProjectNode project : projectsToSave) {
    mc.getProjectController().save(project);
    mc.refresh(project);
  }
  mc.clearSelection();
}",0.7520891364902507
136312,"/** 
 * @return list of open user (TLLibrary) libraries. Returns empty list if there are no userlibraries.
 */
List<LibraryNode> getUserLibraries();","/** 
 * @return list of open user (TLLibrary) libraries. Returns empty list if there are no user libraries.
 */
List<LibraryNode> getUserLibraries();",0.9966329966329966
136313,"@Override public String getLabel(){
  if (getExtensionBase() == null)   return super.getLabel();
 else   if (isVersioned())   return super.getLabel() + ""String_Node_Str"" + getExtensionBase().getLibrary().getVersion()+ ""String_Node_Str"";
 else   return super.getLabel() + ""String_Node_Str"" + getExtensionBase().getNameWithPrefix()+ ""String_Node_Str"";
}","@Override public String getLabel(){
  if (getExtensionBase() == null)   return super.getLabel();
  return super.getLabel() + ""String_Node_Str"" + getExtensionBase().getNameWithPrefix()+ ""String_Node_Str"";
}",0.737410071942446
136314,"private org.opentravel.schemas.node.Node findOwningNode(){
  String nodeName=getNodeName();
  org.opentravel.schemas.node.Node result=null;
  if (nodeName.equals(getNode().getName()))   return result;
  if (getNode().getName().startsWith(""String_Node_Str""))   return result;
  org.opentravel.schemas.node.Node root=owningNode;
  if (owningNode == null)   root=getNode();
  for (  org.opentravel.schemas.node.Node n : root.getDescendants())   if (n.getName().equals(nodeName)) {
    result=n;
    break;
  }
 else   if (n instanceof FacetNode) {
    for (    org.opentravel.schemas.node.Node in : n.getInheritedChildren())     if (in.getName().equals(nodeName)) {
      result=in;
      break;
    }
  }
  return result;
}","private org.opentravel.schemas.node.Node findOwningNode(){
  String nodeName=getNodeName();
  org.opentravel.schemas.node.Node result=null;
  if (nodeName.equals(getNode().getName()))   return result;
  if (getNode().getName().startsWith(""String_Node_Str""))   return result;
  org.opentravel.schemas.node.Node root=getNode();
  if (owningNode != null)   if (owningNode instanceof TypeUser)   root=(org.opentravel.schemas.node.Node)((TypeUser)owningNode).getAssignedType();
 else   root=owningNode.getOwningComponent();
  for (  org.opentravel.schemas.node.Node n : root.getDescendants())   if (n.getName().equals(nodeName)) {
    result=n;
    break;
  }
 else   if (n instanceof FacetNode) {
    for (    org.opentravel.schemas.node.Node in : n.getInheritedChildren())     if (in.getName().equals(nodeName)) {
      result=in;
      break;
    }
  }
  return result;
}",0.8779874213836478
136315,"private Collection<? extends ExampleModel> createChildren(NodeList childNodes){
  List<ExampleModel> ret=new ArrayList<ExampleModel>(childNodes.getLength());
  for (int i=0; i < childNodes.getLength(); i++) {
    Node child=childNodes.item(i);
    if (child.getNodeType() != Node.TEXT_NODE) {
      DOMExampleModel childModel=new DOMExampleModel(getNode(),child);
      childModel.setXmlString(getXmlString());
      childModel.setJsonString(getJsonString());
      ret.add(childModel);
    }
  }
  return ret;
}","private Collection<? extends ExampleModel> createChildren(NodeList childNodes){
  List<ExampleModel> ret=new ArrayList<ExampleModel>(childNodes.getLength());
  for (int i=0; i < childNodes.getLength(); i++) {
    Node child=childNodes.item(i);
    if (child.getNodeType() != Node.TEXT_NODE) {
      DOMExampleModel childModel=new DOMExampleModel(getNode(),getOwningNode(),child);
      childModel.setXmlString(getXmlString());
      childModel.setJsonString(getJsonString());
      ret.add(childModel);
    }
  }
  return ret;
}",0.9846153846153848
136316,"/** 
 * @param lib
 * @param examples
 */
public DOMExampleModel(org.opentravel.schemas.node.Node lib,Node domNode){
  super(lib);
  this.domNode=domNode;
  this.owningNode=findOwningNode();
  this.setLabelProvider(new LabelProvider(){
    @Override public Image getImage(    Object element){
      DOMExampleModel e=(DOMExampleModel)element;
      if (e.isXSDComplexType()) {
        return Images.getImageRegistry().get(Images.XSDComplexType);
      }
 else       if (e.isService()) {
        return Images.getImageRegistry().get(Images.Service);
      }
 else       if (e.isFacet()) {
        return Images.getImageRegistry().get(Images.Facet);
      }
 else       if (e.isAttribute()) {
        return Images.getImageRegistry().get(Images.XSDAttribute);
      }
      return Images.getImageRegistry().get(Images.XSDElement);
    }
    @Override public String getText(    Object element){
      DOMExampleModel e=(DOMExampleModel)element;
      return e.getDisplayText();
    }
  }
);
}","/** 
 * @param lib
 * @param examples
 */
public DOMExampleModel(org.opentravel.schemas.node.Node lib,Node domNode){
  super(lib);
  this.domNode=domNode;
  this.owningNode=findOwningNode();
  this.setLabelProvider(new DOMExampleLabelProvider());
}",0.3718674211802749
136317,"private void addProperty(){
  if (selectedNode.getChain() != null) {
    if (actOnNode.isEnabled_AddProperties() && !actOnNode.isInHead())     actOnNode=createVersionExtension(selectedNode);
    if (actOnNode == null)     return;
    try {
      NewPropertiesWizard2 w2=new NewPropertiesWizard2(actOnNode);
      w2.setValidator(new NewPropertyValidator(actOnNode,null));
      w2.run(OtmRegistry.getActiveShell());
    }
 catch (    IllegalArgumentException e) {
      DialogUserNotifier.openError(""String_Node_Str"",e.getLocalizedMessage());
    }
  }
  mc.refresh(actOnNode.getOwningComponent());
}","private void addProperty(){
  if (selectedNode.getChain() != null) {
    if (actOnNode.isEnabled_AddProperties() && !actOnNode.isInHead())     actOnNode=createVersionExtension(selectedNode);
  }
  if (actOnNode == null)   return;
  try {
    NewPropertiesWizard2 w2=new NewPropertiesWizard2(actOnNode);
    w2.setValidator(new NewPropertyValidator(actOnNode,null));
    w2.run(OtmRegistry.getActiveShell());
  }
 catch (  IllegalArgumentException e) {
    DialogUserNotifier.openError(""String_Node_Str"",e.getLocalizedMessage());
  }
  mc.refresh(actOnNode.getOwningComponent());
}",0.905084745762712
136318,"/** 
 * Create a component in the head library that versions (extends) the selected node. Prompts the user to confirm before creating node.
 * @return newly created node or null if user cancelled or error.
 */
public ComponentNode createVersionExtension(Node selectedNode){
  ComponentNode actOnNode=null;
  if (selectedNode.getChain().getHead().isPatchVersion()) {
    if (!selectedNode.isExtensionPointFacet()) {
      if (postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((ComponentNode)selectedNode).createPatchVersionComponent();
    }
  }
 else   if (selectedNode.getChain().getHead().isMinorOrMajorVersion()) {
    if (selectedNode instanceof VersionedObjectInterface) {
      if (postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((VersionedObjectInterface)selectedNode).createMinorVersionComponent();
    }
 else     if (selectedNode.isEditable_inService())     if (selectedNode.getLibrary().getChain().getHead() == selectedNode.getLibrary())     actOnNode=(ComponentNode)selectedNode;
 else     actOnNode=new OperationNode((ServiceNode)selectedNode.getLibrary().getServiceRoot().getChildren().get(0),""String_Node_Str"");
  }
  if (actOnNode == null)   DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + selectedNode + ""String_Node_Str"");
  return actOnNode;
}","/** 
 * Create a component in the head library that versions (extends) the selected node. Prompts the user to confirm before creating node.
 * @return newly created node or null if user cancelled or error.
 */
public ComponentNode createVersionExtension(Node selectedNode){
  ComponentNode actOnNode=null;
  boolean result=false;
  if (selectedNode.getChain().getHead().isPatchVersion()) {
    if (!selectedNode.isExtensionPointFacet()) {
      if (result=postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((ComponentNode)selectedNode).createPatchVersionComponent();
    }
  }
 else   if (selectedNode.getChain().getHead().isMinorOrMajorVersion()) {
    if (selectedNode instanceof VersionedObjectInterface) {
      if (result=postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((VersionedObjectInterface)selectedNode).createMinorVersionComponent();
    }
 else     if (selectedNode.isEditable_inService())     if (selectedNode.getLibrary().getChain().getHead() == selectedNode.getLibrary())     actOnNode=(ComponentNode)selectedNode;
 else     actOnNode=new OperationNode((ServiceNode)selectedNode.getLibrary().getServiceRoot().getChildren().get(0),""String_Node_Str"");
  }
  if (actOnNode == null && result == true)   DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + selectedNode + ""String_Node_Str"");
  return actOnNode;
}",0.9790575916230366
136319,"/** 
 * Is the owning object editable and new to the chain. The object is represented by one or more nodes with the same name within the chain. Properties in an object in a head library are new and therefore editable.
 * @return True if this node is editable AND is not in a chain, OR it is in the latest library of the chain AND notin a previous version.
 */
public boolean isEditable_newToChain(){
  if (getLibrary() == null || isDeleted() || !isEditable())   return false;
  if (this instanceof NavNode && !(this instanceof FamilyNode))   return false;
  if (getChain() == null)   return true;
  if (getChain().getHead().isPatchVersion())   if (getOwningComponent() instanceof ExtensionPointNode)   return !isInheritedProperty();
 else   return false;
  if (isInService())   return getLibrary().getChain().getHead() == getLibrary();
  if (getOwningComponent().getVersionNode() == null)   return true;
  if (getLibrary() != getChain().getHead())   return false;
  if (this instanceof PropertyNode)   return !isInheritedProperty();
  return getOwningComponent().getVersionNode().getPreviousVersion() == null;
}","/** 
 * Is the owning object editable and new to the chain. The object is represented by one or more nodes with the same name within the chain. Properties in an object in a head library are new and therefore editable.
 * @return True if this node is editable AND is not in a chain, OR it is in the latest library of the chain AND notin a previous version.
 */
public boolean isEditable_newToChain(){
  if (getLibrary() == null || isDeleted() || !isEditable())   return false;
  if (getChain() == null)   return true;
  if (getChain().getHead().isPatchVersion())   if (getOwningComponent() instanceof ExtensionPointNode)   return !isInheritedProperty();
 else   return false;
  if (isInService())   return getLibrary().getChain().getHead() == getLibrary();
  if (getOwningComponent().getVersionNode() == null)   return true;
  if (getLibrary() != getChain().getHead())   return false;
  if (this instanceof PropertyNode)   return !isInheritedProperty();
  return getOwningComponent().getVersionNode().getPreviousVersion() == null;
}",0.480859010270775
136320,"public static boolean openConfirm(final String title,final String message){
  if (!OtmRegistry.getMainWindow().hasDisplay()) {
    LOGGER.warn(""String_Node_Str"" + message);
    return true;
  }
  boolean ret;
  ret=MessageDialog.openConfirm(OtmRegistry.getActiveShell(),title,message);
  return ret;
}","/** 
 * @return true if the user presses the OK button, false otherwise
 */
public static boolean openConfirm(final String title,final String message){
  if (!OtmRegistry.getMainWindow().hasDisplay()) {
    LOGGER.warn(""String_Node_Str"" + message);
    return true;
  }
  boolean ret;
  ret=MessageDialog.openConfirm(OtmRegistry.getActiveShell(),title,message);
  return ret;
}",0.887905604719764
136321,"public Node getSubject(){
  if (tlObj.getBusinessObjectRef() != null)   subject=this.getNode(tlObj.getBusinessObjectRef().getListeners());
  return subject;
}","public Node getSubject(){
  if (tlObj != null && tlObj.getBusinessObjectRef() != null)   subject=this.getNode(tlObj.getBusinessObjectRef().getListeners());
  return subject;
}",0.948948948948949
136322,"/** 
 * Create a resource in the library of the libraryMember.
 */
public ResourceNode(Node libraryMember){
  super(new TLResource());
  if (libraryMember.getName().isEmpty())   tlObj.setName(""String_Node_Str"");
 else   tlObj.setName(libraryMember.getName() + ""String_Node_Str"");
  libraryMember.getLibrary().addMember(this);
}","/** 
 * Create a resource in the library of the libraryMember.
 */
public ResourceNode(BusinessObjectNode businessObject){
  super(new ResourceBuilder().buildTL(businessObject));
  tlObj=getTLModelObject();
  businessObject.getLibrary().addMember(this);
}",0.4501718213058419
136323,"public boolean isValid(){
  ValidationFindings findings=TLModelCompileValidator.validateModelElement(tlObj);
  return findings.isEmpty();
}","public boolean isValid(){
  return TLModelCompileValidator.validateModelElement(tlObj).isEmpty();
}",0.7983193277310925
136324,"@Override public TLResource getTLModelObject(){
  return tlObj;
}","@Override public TLResource getTLModelObject(){
  if (tlObj == null)   tlObj=(TLResource)modelObject.getTLModelObj();
  return tlObj;
}",0.65
136325,"@Override protected void addMOChildren(){
  TLResource tlObj=(TLResource)getTLModelObject();
  for (  TLParamGroup tlp : tlObj.getParamGroups())   new ParamGroup(tlp);
  for (  TLAction action : tlObj.getActions())   new ActionNode(action);
  for (  TLActionFacet af : tlObj.getActionFacets())   new ActionFacet(af);
}","@Override protected void addMOChildren(){
  if (tlObj != null) {
    for (    TLParamGroup tlp : tlObj.getParamGroups())     new ParamGroup(tlp);
    for (    TLAction action : tlObj.getActions())     new ActionNode(action);
    for (    TLActionFacet af : tlObj.getActionFacets())     new ActionFacet(af);
  }
}",0.8222222222222222
136326,"private TLResource buildTLResource(){
  final String NAME=""String_Node_Str"";
  TLResource resource=new TLResource();
  resource.setName(NAME);
  TLParamGroup params=new TLParamGroup();
  resource.addParamGroup(params);
  params.setName(NAME);
  TLParameter parameter=new TLParameter();
  params.addParameter(parameter);
  parameter.setFieldRefName(NAME);
  TLAction action=new TLAction();
  resource.addAction(action);
  action.setActionId(NAME);
  TLActionResponse response=new TLActionResponse();
  action.addResponse(response);
  response.setPayloadTypeName(NAME);
  TLActionRequest request=new TLActionRequest();
  action.setRequest(request);
  request.setPayloadTypeName(NAME);
  TLActionFacet facet=new TLActionFacet();
  resource.addActionFacet(facet);
  facet.setName(NAME);
  return resource;
}","private TLResource buildTLResource(){
  return new ResourceBuilder().buildTL();
}",0.1380090497737556
136327,"private void setExample(final OtmEventData wd){
  final Node n=(Node)mc.getCurrentNode_PropertiesView();
  final String text=wd.getText();
  if (n instanceof PropertyNode && ((PropertyNode)n).getExampleHandler() != null)   ((PropertyNode)n).getExampleHandler().set(text,n.getLibrary().getDefaultContextId());
}","private void setExample(final OtmEventData wd){
  final Node n=(Node)mc.getCurrentNode_PropertiesView();
  final String text=wd.getText();
  if (n instanceof PropertyNode)   ((PropertyNode)n).setExample(text);
}",0.7754318618042226
136328,"private void setEquivalence(final OtmEventData wd){
  final Node n=(Node)mc.getCurrentNode_PropertiesView();
  final String text=wd.getText();
  if (n instanceof PropertyNode && ((PropertyNode)n).getEquivalentHandler() != null) {
    ((PropertyNode)n).getEquivalentHandler().set(text,n.getLibrary().getDefaultContextId());
  }
}","private void setEquivalence(final OtmEventData wd){
  final Node n=(Node)mc.getCurrentNode_PropertiesView();
  final String text=wd.getText();
  if (n instanceof PropertyNode)   ((PropertyNode)n).setEquivalent(text);
}",0.7838827838827839
136329,"/** 
 * Create a component in the head library that versions (extends) the selected node. Prompts the user to confirm before creating node.
 * @return newly created node or null if user cancelled or error.
 */
public ComponentNode createVersionExtension(Node selectedNode){
  ComponentNode actOnNode=null;
  if (selectedNode.getChain().getHead().isPatchVersion()) {
    if (!selectedNode.isExtensionPointFacet()) {
      if (postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((ComponentNode)selectedNode).createPatchVersionComponent();
    }
  }
 else   if (selectedNode.getChain().getHead().isMinorOrMajorVersion()) {
    if (selectedNode instanceof VersionedObjectInterface) {
      if (postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((VersionedObjectInterface)selectedNode).createMinorVersionComponent();
    }
 else     if (selectedNode.isEditable_inService())     if (selectedNode.getLibrary().getChain().getHead() == selectedNode.getLibrary())     actOnNode=(ComponentNode)selectedNode;
 else     actOnNode=new OperationNode((ServiceNode)selectedNode.getLibrary().getServiceRoot().getChildren().get(0),""String_Node_Str"");
  }
  return actOnNode;
}","/** 
 * Create a component in the head library that versions (extends) the selected node. Prompts the user to confirm before creating node.
 * @return newly created node or null if user cancelled or error.
 */
public ComponentNode createVersionExtension(Node selectedNode){
  ComponentNode actOnNode=null;
  if (selectedNode.getChain().getHead().isPatchVersion()) {
    if (!selectedNode.isExtensionPointFacet()) {
      if (postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((ComponentNode)selectedNode).createPatchVersionComponent();
    }
  }
 else   if (selectedNode.getChain().getHead().isMinorOrMajorVersion()) {
    if (selectedNode instanceof VersionedObjectInterface) {
      if (postConfirm(""String_Node_Str"",selectedNode))       actOnNode=((VersionedObjectInterface)selectedNode).createMinorVersionComponent();
    }
 else     if (selectedNode.isEditable_inService())     if (selectedNode.getLibrary().getChain().getHead() == selectedNode.getLibrary())     actOnNode=(ComponentNode)selectedNode;
 else     actOnNode=new OperationNode((ServiceNode)selectedNode.getLibrary().getServiceRoot().getChildren().get(0),""String_Node_Str"");
  }
  if (actOnNode == null)   DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"" + selectedNode + ""String_Node_Str"");
  return actOnNode;
}",0.9449135504624046
136330,"protected ComponentNode createMinorVersionComponent(ComponentNode newNode){
  Node owner=this.getOwningComponent();
  if (owner.getLibrary() == owner.getChain().getHead())   return null;
  newNode.getTypeClass().setBaseType(owner);
  if (newNode.getName() == null || newNode.getName().isEmpty())   newNode.setName(owner.getName());
  owner.getChain().getHead().addMember(newNode);
  return newNode;
}","protected ComponentNode createMinorVersionComponent(ComponentNode newNode){
  if (newNode.getModelObject() instanceof EmptyMO) {
    return null;
  }
  Node owner=this.getOwningComponent();
  if (owner.getLibrary() == owner.getChain().getHead())   return null;
  newNode.getTypeClass().setBaseType(owner);
  if (newNode.getName() == null || newNode.getName().isEmpty())   newNode.setName(owner.getName());
  owner.getChain().getHead().addMember(newNode);
  return newNode;
}",0.9153318077803204
136331,"/** 
 * Add node to this library. Links to library's complex/simple or element root. Adds underlying the TL object to this library's TLModel library. Handles adding nodes to chains. Adds context to the TL Model library if needed. Does not change type assignments. <p> Add to tlLibrary.addNamedMember() <br> linkMember() <br> getChain.add()
 */
public void addMember(final Node n){
  if (!isEditable()) {
    LOGGER.warn(""String_Node_Str"" + n + ""String_Node_Str""+ this);
    return;
  }
  if (n == null || n.getTLModelObject() == null) {
    LOGGER.warn(""String_Node_Str"" + n);
    return;
  }
  if (!(n.getTLModelObject() instanceof LibraryMember)) {
    LOGGER.warn(""String_Node_Str"" + n);
    return;
  }
  if (n.getParent() != null && n.getParent().getChildren().contains(n)) {
    LOGGER.warn(n + ""String_Node_Str"");
    return;
  }
 else   if ((n instanceof SimpleComponentInterface) && getSimpleRoot().getChildren().contains(n)) {
    LOGGER.warn(n + ""String_Node_Str"");
    return;
  }
 else   if ((n instanceof ComplexComponentInterface) && getComplexRoot().getChildren().contains(n)) {
    LOGGER.warn(n + ""String_Node_Str"");
    return;
  }
  if (n.getLibrary() != null && n.getLibrary() != this)   n.removeFromLibrary();
  getTLLibrary().addNamedMember((LibraryMember)n.getTLModelObject());
  if (linkMember(n)) {
    if (isInChain()) {
      getChain().add((ComponentNode)n);
    }
  }
  if (n.getParent().getChildren().indexOf(n) != n.getParent().getChildren().lastIndexOf(n))   LOGGER.error(n + ""String_Node_Str"");
}","/** 
 * Add node to this library. Links to library's complex/simple or element root. Adds underlying the TL object to this library's TLModel library. Handles adding nodes to chains. Adds context to the TL Model library if needed. Does not change type assignments. <p> Add to tlLibrary.addNamedMember() <br> linkMember() <br> getChain.add()
 */
public void addMember(final Node n){
  if (!isEditable()) {
    LOGGER.warn(""String_Node_Str"" + n + ""String_Node_Str""+ this);
    return;
  }
  if (n == null || n.getTLModelObject() == null) {
    LOGGER.warn(""String_Node_Str"" + n);
    return;
  }
  if (!(n.getTLModelObject() instanceof LibraryMember)) {
    LOGGER.warn(""String_Node_Str"" + n);
    return;
  }
  if (n.getParent() != null && n.getParent().getChildren().contains(n)) {
    LOGGER.warn(n + ""String_Node_Str"");
    return;
  }
 else   if ((n instanceof SimpleComponentInterface) && getSimpleRoot().getChildren().contains(n)) {
    LOGGER.warn(n + ""String_Node_Str"");
    return;
  }
 else   if ((n instanceof ComplexComponentInterface) && getComplexRoot().getChildren().contains(n)) {
    LOGGER.warn(n + ""String_Node_Str"");
    return;
  }
  if (n.getLibrary() != null && n.getLibrary() != this)   n.removeFromLibrary();
  AbstractLibrary owningLib=null;
  if (n.getTLModelObject() instanceof LibraryMember)   owningLib=((LibraryMember)n.getTLModelObject()).getOwningLibrary();
  if (owningLib != getTLLibrary()) {
    owningLib.removeNamedMember((LibraryMember)n.getTLModelObject());
    getTLLibrary().addNamedMember((LibraryMember)n.getTLModelObject());
  }
  if (owningLib == null)   getTLLibrary().addNamedMember((LibraryMember)n.getTLModelObject());
  if (linkMember(n)) {
    if (isInChain())     getChain().add((ComponentNode)n);
  }
  if (n.getParent().getChildren().indexOf(n) != n.getParent().getChildren().lastIndexOf(n))   LOGGER.error(n + ""String_Node_Str"");
}",0.890190336749634
136332,"/** 
 * @return False for node that can not be deleted: not-editable, facets, simpleFacets. Custom and Query Facets aredelete-able. Libraries are <b>always</b> delete-able
 */
public boolean isDeleteable(){
  if (getLibrary() == null)   return false;
  if (getLibrary().getChain() != null)   if (getLibrary().getChain().getHead().isPatchVersion() && !(getOwningComponent() instanceof ExtensionPointNode))   return false;
  if (getOwningComponent().getParent() == null)   return true;
  if (isInService())   return getLibrary().getChain().getHead() == getLibrary() && isEditable();
  return getLibrary().isManaged() ? isInHead() && isEditable() : isEditable();
}","/** 
 * @return False for node that can not be deleted: not-editable, facets, simpleFacets. Custom and Query Facets aredelete-able. Libraries are <b>always</b> delete-able
 */
public boolean isDeleteable(){
  if (getLibrary() == null)   return false;
  if (getLibrary().getChain() != null)   if (getLibrary().getChain().getHead().isPatchVersion() && !(getOwningComponent() instanceof ExtensionPointNode))   return false;
  if (getOwningComponent().getParent() == null)   return true;
  if (isInService() && getChain() != null)   return getLibrary().getChain().getHead() == getLibrary() && isEditable();
  return getLibrary().isManaged() ? isInHead() && isEditable() : isEditable();
}",0.9479166666666666
136333,"private void testNewVersion(LibraryNode ln,LibraryNode major){
  List<Node> namedTypes=major.getDescendants_NamedTypes();
  for (  Node n : namedTypes) {
    if (n instanceof VersionedObjectInterface) {
      LOGGER.debug(""String_Node_Str"" + n);
      Node nc=((VersionedObjectInterface)n).createMinorVersionComponent();
      assertNotNull(nc);
      assertNotNull(nc.getLibrary());
      assertNotNull(nc.getExtendsType());
      assertEquals(n,nc.getExtendsType());
    }
  }
}","private void testNewVersion(LibraryNode ln,LibraryNode major){
  List<Node> namedTypes=major.getDescendants_NamedTypes();
  for (  Node n : namedTypes) {
    if (n instanceof VersionedObjectInterface) {
      LOGGER.debug(""String_Node_Str"" + n);
      Node nc=((VersionedObjectInterface)n).createMinorVersionComponent();
      assertNotNull(nc);
      assertNotNull(nc.getLibrary());
      assertNotNull(nc.getExtendsType());
      assertEquals(n,nc.getExtendsType());
      for (      Node t : nc.getParent().getChildren())       if (t.getName().equals(nc.getName()))       LOGGER.debug(""String_Node_Str"" + t);
    }
  }
}",0.8703535811423391
136334,"/** 
 * <pre> 1. Manage Library in repository  2. Lock Library  3. Remove repository from step 1.  4. Reopen project with library </pre>
 * @throws LibrarySaveException
 * @throws RepositoryException
 */
@Test public void openLibraryWithMissingRepository() throws LibrarySaveException, RepositoryException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  LibraryChainNode chain=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  boolean locked=rc.lock(chain.getHead());
  Assert.assertTrue(locked);
  Assert.assertEquals(RepositoryItemState.MANAGED_WIP,chain.getHead().getProjectItem().getState());
  String namespace=getRepositoryForTest().getNamespace();
  try {
    rc.removeRemoteRepository(getRepositoryForTest());
    pc.close(uploadProject);
    DefaultProjectController dc=(DefaultProjectController)pc;
    ProjectNode reopenedProject=dc.open(uploadProject.getProject().getProjectFile().toString());
    Assert.assertNotNull(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",reopenedProject);
  }
  finally {
    readdRemoteRepository();
  }
}","/** 
 * <pre> 1. Manage Library in repository  2. Lock Library  3. Remove repository from step 1.  4. Reopen project with library </pre>
 * @throws LibrarySaveException
 * @throws RepositoryException
 */
@Test public void openLibraryWithMissingRepository() throws LibrarySaveException, RepositoryException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  LibraryChainNode chain=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  boolean locked=rc.lock(chain.getHead());
  Assert.assertTrue(locked);
  Assert.assertEquals(RepositoryItemState.MANAGED_WIP,chain.getHead().getProjectItem().getState());
  String namespace=getRepositoryForTest().getNamespace();
  try {
    rc.removeRemoteRepository(getRepositoryForTest());
    pc.close(uploadProject);
    DefaultProjectController dc=(DefaultProjectController)pc;
    ProjectNode reopenedProject=dc.open(uploadProject.getProject().getProjectFile().toString(),null);
    Assert.assertNotNull(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",reopenedProject);
  }
  finally {
    readdRemoteRepository();
  }
}",0.9981350242446848
136335,"@Override public boolean isEnabled(){
  Node node=mc.getSelectedNode_NavigatorView();
  if ((node instanceof ProjectNode))   project=(ProjectNode)node;
 else {
    node=node.getLibrary();
    if (node != null)     project=((LibraryNode)node).getProject();
  }
  return project != null ? !project.isBuiltIn() : false;
}","@Override public boolean isEnabled(){
  Node node=mc.getSelectedNode_NavigatorView();
  if (node == null)   return false;
  if ((node instanceof ProjectNode))   project=(ProjectNode)node;
 else {
    node=node.getLibrary();
    if (node != null)     project=((LibraryNode)node).getProject();
  }
  return project != null ? !project.isBuiltIn() : false;
}",0.9464285714285714
136336,"private void setEditState(INode node){
  bbManager.enable(node.isEditable());
  if (node.isEditable()) {
  }
 else {
  }
}","private void setEditState(INode node){
}",0.4938271604938271
136337,"public String getLibraryVersion(LibraryNode lib){
  NamespaceHandler nsHandler=lib.getNsHandler();
  ProjectItem projectItem=lib.getProjectItem();
  String version=""String_Node_Str"";
  if (projectItem != null && nsHandler != null && !RepositoryItemState.UNMANAGED.equals(projectItem.getState())) {
    version=nsHandler.getNSVersion(lib.getNamespace());
  }
  return version;
}","public String getLibraryVersion(LibraryNode lib){
  String version=""String_Node_Str"";
  NamespaceHandler nsHandler=null;
  if (lib != null) {
    nsHandler=lib.getNsHandler();
    ProjectItem projectItem=lib.getProjectItem();
    if (projectItem != null && nsHandler != null && !RepositoryItemState.UNMANAGED.equals(projectItem.getState())) {
      version=nsHandler.getNSVersion(lib.getNamespace());
    }
  }
  return version;
}",0.7335811648079306
136338,"private void expandAndSelect(Node node){
  LinkedList<Node> parents=new LinkedList<Node>();
  while (viewer.testFindItem(node) == null) {
    node=node.getParent();
    if (node == null) {
      return;
    }
    parents.addFirst(node);
  }
  for (  Node p : parents) {
    viewer.expandToLevel(p,1);
  }
}","private void expandAndSelect(Node node){
  if (node != null) {
    LinkedList<Node> parents=new LinkedList<Node>();
    while (viewer.testFindItem(node) == null) {
      node=node.getParent();
      if (node == null) {
        return;
      }
      parents.addFirst(node);
    }
    for (    Node p : parents) {
      viewer.expandToLevel(p,1);
    }
  }
}",0.9033232628398792
136339,"/** 
 * Actual node where the inherited child is declared.
 * @return type inherited from or null if no inheritance. Note, Open Enumerations have aninherited attribute but null for inherits from.
 */
public Node getInheritsFrom(){
  return inheritsFrom;
}","/** 
 * Actual node where the inherited child is declared.
 * @return type inherited from or null if no inheritance. Note, Open Enumerations have an inherited attribute butnull for inherits from.
 */
public Node getInheritsFrom(){
  return inheritsFrom;
}",0.996078431372549
136340,"/** 
 * Add a new property to <i>this</i>facet.
 * @param property node representing a TLProperty, TLIndicator, etc
 * @param index where to add the property in the child list.
 */
public void addProperty(final Node property,int index){
  if (!(this instanceof FacetNode)) {
    LOGGER.error(""String_Node_Str"" + this);
    return;
  }
  if (this.isSimpleFacet()) {
    if (property.isProperty())     getChildren().get(0).setAssignedType(property.getAssignedType());
 else     getChildren().get(0).setAssignedType(property);
  }
 else {
    property.setParent(this);
    if (index >= 0)     linkChild(property,index);
 else     linkChild(property,false);
    final ModelObject<?> propMO=property.getModelObject();
    final ModelObject<?> mo=getModelObject();
    if (propMO != null && mo != null) {
      if (index < 0) {
        propMO.addToTLParent(mo);
      }
 else {
        propMO.addToTLParent(mo,index);
      }
    }
  }
}","/** 
 * Add a new property to <i>this</i>facet.
 * @param property node representing a TLProperty, TLIndicator, etc
 * @param index where to add the property in the child list.
 */
public void addProperty(final Node property,int index){
  if (!(this instanceof FacetNode) && !(this.isEnumeration())) {
    LOGGER.error(""String_Node_Str"" + this);
    return;
  }
  if (this.isSimpleFacet()) {
    if (property.isProperty())     getChildren().get(0).setAssignedType(property.getAssignedType());
 else     getChildren().get(0).setAssignedType(property);
  }
 else {
    property.setParent(this);
    if (index >= 0)     linkChild(property,index);
 else     linkChild(property,false);
    final ModelObject<?> propMO=property.getModelObject();
    final ModelObject<?> mo=getModelObject();
    if (propMO != null && mo != null) {
      if (index < 0) {
        propMO.addToTLParent(mo);
      }
 else {
        propMO.addToTLParent(mo,index);
      }
    }
  }
}",0.9857067231339331
136341,"public EnumerationClosedNode(EnumerationOpenNode openEnum){
  this(new TLClosedEnumeration());
  if (openEnum.getLibrary() != null) {
    setLibrary(openEnum.getLibrary());
    getLibrary().getTLaLib().addNamedMember((LibraryMember)this.getTLModelObject());
    for (    Node lit : openEnum.getChildren()) {
      addProperty(lit.clone(this,null));
    }
    getLibrary().getTLaLib().removeNamedMember((LibraryMember)openEnum.getTLModelObject());
    openEnum.unlinkNode();
    openEnum.getTypeClass().replaceTypeProvider(this,null);
    getLibrary().getSimpleRoot().linkChild(this);
  }
  setDocumentation(openEnum.getDocumentation());
  setName(openEnum.getName());
  openEnum.delete();
}","public EnumerationClosedNode(EnumerationOpenNode openEnum){
  this(new TLClosedEnumeration());
  if (openEnum.getLibrary() != null) {
    setLibrary(openEnum.getLibrary());
    getLibrary().getTLaLib().addNamedMember((LibraryMember)this.getTLModelObject());
    for (    Node lit : openEnum.getChildren()) {
      addProperty(lit.clone(this,null));
    }
    getLibrary().getTLaLib().removeNamedMember((LibraryMember)openEnum.getTLModelObject());
    openEnum.unlinkNode();
    openEnum.getTypeClass().replaceTypeProvider(this,null);
    getLibrary().getSimpleRoot().linkChild(this);
    if (getLibrary().isInChain())     getChain().add(this);
    setDocumentation(openEnum.getDocumentation());
    setName(openEnum.getName());
    openEnum.delete();
  }
}",0.8146611341632088
136342,"/** 
 * Create a family node for type aggregates. There are no back links in type aggregates.
 * @param n
 * @param peer
 */
public AggregateFamilyNode(AggregateNode parent,Node n,Node peer){
  super(NodeNameUtils.makeFamilyName(n.getName()),parent);
  setLibrary(n.getLibrary());
  getChildren().add(n);
  getChildren().add(peer);
  parent.getChildren().remove(peer);
}","/** 
 * Create a family node for type aggregates. There are no back links in type aggregates.
 * @param parent
 * @param name
 */
public AggregateFamilyNode(AggregateNode parent,String name){
  super(name,parent);
  setLibrary(parent.getLibrary());
}",0.5612903225806452
136343,"/** 
 * Adds node to the aggregate node's children list if appropriate.
 * @param node
 * @return
 */
public boolean add(ComponentNode node){
switch (type) {
case ComplexTypes:
    if (!(node instanceof ComplexComponentInterface))     throw new IllegalStateException(""String_Node_Str"");
  break;
case SimpleTypes:
if (!(node instanceof SimpleComponentInterface)) throw new IllegalStateException(""String_Node_Str"");
break;
case Service:
if (!(node instanceof ServiceNode || (node instanceof OperationNode))) throw new IllegalStateException(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"" + node.getClass().getSimpleName());
}
boolean toBeAdded=true;
int doFamily=0;
String familyName=NodeNameUtils.makeFamilyName(node.getName());
for (Node n : getChildren()) {
if (n.getName().startsWith(familyName)) doFamily++;
if (!n.isFamily() && n.getName().equals(node.getName())) {
if (node.getLibrary().getTLaLib().isLaterVersion(n.getLibrary().getTLaLib())) {
getChildren().remove(n);
insertPreviousVersion(node,(ComponentNode)n);
toBeAdded=true;
doFamily--;
}
 else toBeAdded=false;
break;
}
}
if (toBeAdded) if (doFamily > 0) addToFamily(node);
 else {
getChildren().add(node);
}
return toBeAdded;
}","/** 
 * Adds node to the aggregate node's children list if appropriate.
 * @param node
 * @return
 */
public boolean add(ComponentNode node){
switch (type) {
case ComplexTypes:
    if (!(node instanceof ComplexComponentInterface))     throw new IllegalStateException(""String_Node_Str"");
  break;
case SimpleTypes:
if (!(node instanceof SimpleComponentInterface)) throw new IllegalStateException(""String_Node_Str"");
break;
case Service:
if (!(node instanceof ServiceNode || (node instanceof OperationNode))) throw new IllegalStateException(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"" + node.getClass().getSimpleName());
}
String familyName=NodeNameUtils.makeFamilyName(node.getName());
for (Node n : getChildren()) {
if (!n.isFamily() && n.getName().equals(node.getName())) {
if (node.getLibrary().getTLaLib().isLaterVersion(n.getLibrary().getTLaLib())) {
getChildren().remove(n);
insertPreviousVersion(node,(ComponentNode)n);
return true;
}
 else {
return false;
}
}
}
AggregateFamilyNode family=findFamilyNode(getChildren(),familyName);
List<Node> nodes=findPrefixedNodes(getChildren(),familyName + ""String_Node_Str"");
if (!nodes.isEmpty()) {
if (family == null) {
family=new AggregateFamilyNode(this,familyName);
}
List<Node> kids=new ArrayList<Node>(nodes);
for (Node n : kids) {
getChildren().remove(n);
family.getChildren().add(n);
}
}
if (family != null) {
family.getChildren().add(node);
}
 else {
getChildren().add(node);
}
return true;
}",0.7044117647058824
136344,"@Override public boolean isEnabled(Node currentNode){
  if (currentNode == null)   return false;
  if (!(currentNode instanceof ComponentNode))   return false;
  if (currentNode.getChain() != null)   return currentNode.getChain().getEditStatus().equals(NodeEditStatus.FULL);
  return currentNode.isEditable();
}","@Override public boolean isEnabled(Node currentNode){
  if (currentNode == null)   return false;
  if (!(currentNode instanceof ComponentNode))   return false;
  if (currentNode.isNewToChain())   return currentNode.isEditable();
  if (currentNode.getChain() != null)   return currentNode.getChain().getEditStatus().equals(NodeEditStatus.FULL);
  return currentNode.isEditable();
}",0.9001447178002895
136345,"/** 
 * @return False for node that can not be deleted: not-editable, facets, simpleFacets. Custom and Query Facets aredelete-able.
 */
public boolean isDeleteable(){
  if (getLibrary() == null)   return false;
  if (getOwningComponent().getParent().isOperation())   return isEditable();
  return getLibrary().isManaged() ? isInHead() && isEditable() : isEditable();
}","/** 
 * @return False for node that can not be deleted: not-editable, facets, simpleFacets. Custom and Query Facets aredelete-able.
 */
public boolean isDeleteable(){
  if (getLibrary() == null)   return false;
  if (getOwningComponent().getParent() == null)   return true;
  if (getOwningComponent().getParent().isOperation())   return isEditable();
  return getLibrary().isManaged() ? isInHead() && isEditable() : isEditable();
}",0.921151439299124
136346,"/** 
 * It is copy of   {@link FacetCodegenUtils#findGhostFacets(TLFacetOwner,TLFacetType)} but withthis difference that it returns all facet with given facet type from all extension hierarchy of facetOwner.
 * @param facetOwner the facet owner for which to return ""ghost facets""
 * @param facetType the type of ghost facets to retrieve
 * @return List<TLFacet>
 */
public List<TLFacet> findInheritedFacets(TLFacetOwner facetOwner,TLFacetType facetType){
  Set<String> inheritedFacetNames=new HashSet<String>();
  List<TLFacet> inheritedFacets=new ArrayList<TLFacet>();
  TLFacetOwner extendedOwner=FacetCodegenUtils.getFacetOwnerExtension(facetOwner);
  Set<TLFacetOwner> visitedOwners=new HashSet<TLFacetOwner>();
  while (extendedOwner != null) {
    List<TLFacet> facetList=FacetCodegenUtils.getAllFacetsOfType(extendedOwner,facetType);
    for (    TLFacet facet : facetList) {
      String facetKey=facetType.getIdentityName(facet.getContext(),facet.getLabel());
      if (!inheritedFacetNames.contains(facetKey)) {
        inheritedFacetNames.add(facetKey);
        inheritedFacets.add(facet);
      }
    }
    visitedOwners.add(extendedOwner);
    extendedOwner=FacetCodegenUtils.getFacetOwnerExtension(extendedOwner);
    if (visitedOwners.contains(extendedOwner)) {
      break;
    }
  }
  List<TLFacet> ghostFacets=new ArrayList<TLFacet>();
  for (  TLFacet inheritedFacet : inheritedFacets) {
    TLFacet ghostFacet=new TLFacet();
    ghostFacet.setFacetType(facetType);
    ghostFacet.setContext(inheritedFacet.getContext());
    ghostFacet.setLabel(inheritedFacet.getLabel());
    ghostFacet.setOwningEntity(facetOwner);
    ghostFacets.add(ghostFacet);
  }
  return ghostFacets;
}","/** 
 * It is copy of   {@link FacetCodegenUtils#findGhostFacets(TLFacetOwner,TLFacetType)} but with this difference thatit returns all facet with given facet type from all extension hierarchy of facetOwner.
 * @param facetOwner the facet owner for which to return ""ghost facets""
 * @param facetType the type of ghost facets to retrieve
 * @return List<TLFacet>
 */
public List<TLFacet> findInheritedFacets(TLFacetOwner facetOwner,TLFacetType facetType){
  Set<String> inheritedFacetNames=new HashSet<String>();
  List<TLFacet> inheritedFacets=new ArrayList<TLFacet>();
  TLFacetOwner extendedOwner=FacetCodegenUtils.getFacetOwnerExtension(facetOwner);
  Set<TLFacetOwner> visitedOwners=new HashSet<TLFacetOwner>();
  while (extendedOwner != null) {
    List<TLFacet> facetList=FacetCodegenUtils.getAllFacetsOfType(extendedOwner,facetType);
    for (    TLFacet facet : facetList) {
      String facetKey=facetType.getIdentityName(facet.getContext(),facet.getLabel());
      if (!inheritedFacetNames.contains(facetKey)) {
        inheritedFacetNames.add(facetKey);
        inheritedFacets.add(facet);
      }
    }
    visitedOwners.add(extendedOwner);
    extendedOwner=FacetCodegenUtils.getFacetOwnerExtension(extendedOwner);
    if (visitedOwners.contains(extendedOwner)) {
      break;
    }
  }
  List<TLFacet> ghostFacets=new ArrayList<TLFacet>();
  for (  TLFacet inheritedFacet : inheritedFacets) {
    TLFacet ghostFacet=new TLFacet();
    ghostFacet.setFacetType(facetType);
    ghostFacet.setContext(inheritedFacet.getContext());
    ghostFacet.setLabel(inheritedFacet.getLabel());
    ghostFacet.setOwningEntity(facetOwner);
    ghostFacets.add(ghostFacet);
  }
  return ghostFacets;
}",0.9876252209781968
136347,"public BusinessObjectNode(VWA_Node vwa){
  this(new TLBusinessObject());
  setLibrary(vwa.getLibrary());
  setName(vwa.getName());
  setDocumentation(vwa.getDocumentation());
  getSummaryFacet().copyFacet((FacetNode)vwa.getAttributeFacet());
}","public BusinessObjectNode(VWA_Node vwa){
  this(new TLBusinessObject());
  vwa.getLibrary().addMember(this);
  setName(vwa.getName());
  setDocumentation(vwa.getDocumentation());
  getSummaryFacet().copyFacet((FacetNode)vwa.getAttributeFacet());
}",0.9224489795918368
136348,"public CoreObjectNode(VWA_Node vwa){
  this(new TLCoreObject());
  setLibrary(vwa.getLibrary());
  setName(vwa.getName());
  setDocumentation(vwa.getDocumentation());
  ((FacetNode)getSummaryFacet()).copyFacet((FacetNode)vwa.getAttributeFacet());
  setSimpleType(vwa.getSimpleType());
}","public CoreObjectNode(VWA_Node vwa){
  this(new TLCoreObject());
  vwa.getLibrary().addMember(this);
  setName(vwa.getName());
  setDocumentation(vwa.getDocumentation());
  ((FacetNode)getSummaryFacet()).copyFacet((FacetNode)vwa.getAttributeFacet());
  setSimpleType(vwa.getSimpleType());
}",0.9340277777777778
136349,"/** 
 * Remove the node from the appropriate aggregate node. This does not delete the node, just remove it from aggregate list and takes care of family if needed.
 * @param n
 */
public void removeAggregate(ComponentNode node){
  if ((node instanceof ComplexComponentInterface))   complexRoot.remove(node);
 else   if ((node instanceof SimpleComponentInterface))   simpleRoot.remove(node);
 else   if ((node instanceof ServiceNode || (node instanceof OperationNode)))   serviceRoot.remove(node);
  add(findPreviousVersion(node));
}","/** 
 * Remove the node from the appropriate aggregate node. This does not delete the node, just remove it from aggregate list and takes care of family if needed. Replaces with previous version if found.
 * @param n
 */
public void removeAggregate(ComponentNode node){
  if ((node instanceof ComplexComponentInterface))   complexRoot.remove(node);
 else   if ((node instanceof SimpleComponentInterface))   simpleRoot.remove(node);
 else   if ((node instanceof ServiceNode || (node instanceof OperationNode)))   serviceRoot.remove(node);
  add(findPreviousVersion(node));
}",0.9628286491387126
136350,"/** 
 * Unlink this node from its parent and updates family node as needed. If this is a versioned object, it unlinks the verionNode as well. Does not change the TL model. Does not delete the node; caller is responsible to free resources.
 */
public void unlinkNode(){
  if (parent == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  VersionNode vn=null;
  if (parent instanceof VersionNode)   vn=(VersionNode)parent;
  if (!parent.children.remove(this))   LOGGER.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ parent.getName()+ ""String_Node_Str"");
  parent.updateFamily();
  parent=null;
  if (vn != null)   vn.unlinkNode();
}","/** 
 * Unlink this node from its parent and updates family node as needed. If this is a versioned object, it unlinks the verionNode as well. Does not change the TL model. Does not delete the node; caller is responsible to free resources.
 */
public void unlinkNode(){
  if (parent == null) {
    LOGGER.error(""String_Node_Str"");
    return;
  }
  VersionNode vn=null;
  if (parent instanceof VersionNode)   vn=(VersionNode)parent;
  if (!parent.children.remove(this))   LOGGER.debug(""String_Node_Str"" + getName() + ""String_Node_Str""+ parent.getName()+ ""String_Node_Str"");
  parent.updateFamily();
  parent=null;
  if (vn != null) {
    if (this instanceof ComponentNode)     getChain().removeAggregate((ComponentNode)this);
    vn.unlinkNode();
  }
}",0.92867332382311
136351,"public List<Node> getSiblings(){
  final List<Node> siblings=new LinkedList<Node>(parent.getChildren());
  siblings.remove(this);
  return siblings;
}","public List<Node> getSiblings(){
  if (parent == null)   return null;
  final List<Node> siblings=new LinkedList<Node>(parent.getChildren());
  siblings.remove(this);
  return siblings;
}",0.8902077151335311
136352,"/** 
 * Swap the replacement for this node. This node is replaced via   {@link #replaceWith()} and removed from parent.Replacement is added to parent.
 * @return Returns false if the swap was not made or the replacement could not be assigned. If false, the swappednode may still be used as a type but may not be in a library.
 */
public void swap(Node replacement){
  if (replacement != null && getLibrary() != null && parent != null) {
    Node thisParent=parent;
    if (!thisParent.children.add(replacement))     return;
    if (getTLModelObject() instanceof LibraryMember)     replacement.getModelObject().addToLibrary(((LibraryMember)this.getTLModelObject()).getOwningLibrary());
    replacement.setLibrary(this.getLibrary());
    replaceWith(replacement);
    replacement.parent=thisParent;
  }
}","/** 
 * Swap the replacement for this node. This node is replaced via   {@link #replaceWith()} and removed from parent.Replacement is added to parent. Note: this node's library is null on return. It can not be deleted.
 * @param replacement - should be in library, named and with all properties.
 * @return ?? void ?? Returns false if the swap was not made or the replacement could not be assigned. If false, theswapped node may still be used as a type but may not be in a library.
 */
public void swap(Node replacement){
  if (replacement != null && getLibrary() != null && parent != null) {
    Node thisParent=parent;
    if (!thisParent.children.add(replacement)) {
      LOGGER.warn(""String_Node_Str"");
      return;
    }
    if (getTLModelObject() instanceof LibraryMember) {
      if (((LibraryMember)replacement.getTLModelObject()).getOwningLibrary() != ((LibraryMember)getTLModelObject()).getOwningLibrary()) {
        LOGGER.debug(""String_Node_Str"");
        replacement.getModelObject().addToLibrary(((LibraryMember)this.getTLModelObject()).getOwningLibrary());
      }
 else       LOGGER.debug(""String_Node_Str"");
    }
 else     LOGGER.error(""String_Node_Str"");
    replacement.setLibrary(this.getLibrary());
    replaceWith(replacement);
    replacement.parent=thisParent;
  }
 else   LOGGER.warn(""String_Node_Str"");
}",0.6454332552693208
136353,"@Override public void delete(){
  if (isDeleteable()) {
    if (getLibrary() != null && getLibrary().isInChain())     getLibrary().getChain().removeAggregate((ComponentNode)this);
    NodeVisitor visitor=new NodeVisitors().new deleteVisitor();
    this.visitAllNodes(visitor);
  }
}","@Override public void delete(){
  if (isDeleteable()) {
    if (getLibrary() != null && getLibrary().isInChain())     getLibrary().getChain().removeAggregate((ComponentNode)this);
    NodeVisitor visitor=new NodeVisitors().new deleteVisitor();
    this.visitAllNodes(visitor);
  }
 else   if (!(this instanceof VersionNode) && (!(this instanceof FacetNode)) && !(this instanceof SimpleAttributeNode))   LOGGER.warn(this + ""String_Node_Str"" + isDeleteable());
}",0.7601078167115903
136354,"/** 
 * Adds node to the aggregate node's children list if appropriate.
 * @param node
 * @return
 */
public boolean add(ComponentNode node){
switch (type) {
case ComplexTypes:
    if (!(node instanceof ComplexComponentInterface))     throw new IllegalStateException(""String_Node_Str"");
  break;
case SimpleTypes:
if (!(node instanceof SimpleComponentInterface)) throw new IllegalStateException(""String_Node_Str"");
break;
case Service:
if (!(node instanceof ServiceNode || (node instanceof OperationNode))) throw new IllegalStateException(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"" + node.getClass().getSimpleName());
}
boolean toBeAdded=true;
int doFamily=0;
String familyName=NodeNameUtils.makeFamilyName(node.getName());
for (Node n : getChildren()) {
if (n.getName().startsWith(familyName)) doFamily++;
if (n.getName().equals(node.getName())) {
if (node.getLibrary().getTLaLib().isLaterVersion(n.getLibrary().getTLaLib())) {
getChildren().remove(n);
insertPreviousVersion(node,(ComponentNode)n);
toBeAdded=true;
doFamily--;
}
 else toBeAdded=false;
break;
}
}
if (toBeAdded) if (doFamily > 0) addToFamily(node);
 else {
getChildren().add(node);
}
return toBeAdded;
}","/** 
 * Adds node to the aggregate node's children list if appropriate.
 * @param node
 * @return
 */
public boolean add(ComponentNode node){
switch (type) {
case ComplexTypes:
    if (!(node instanceof ComplexComponentInterface))     throw new IllegalStateException(""String_Node_Str"");
  break;
case SimpleTypes:
if (!(node instanceof SimpleComponentInterface)) throw new IllegalStateException(""String_Node_Str"");
break;
case Service:
if (!(node instanceof ServiceNode || (node instanceof OperationNode))) throw new IllegalStateException(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"" + node.getClass().getSimpleName());
}
boolean toBeAdded=true;
int doFamily=0;
String familyName=NodeNameUtils.makeFamilyName(node.getName());
for (Node n : getChildren()) {
if (n.getName().startsWith(familyName)) doFamily++;
if (!n.isFamily() && n.getName().equals(node.getName())) {
if (node.getLibrary().getTLaLib().isLaterVersion(n.getLibrary().getTLaLib())) {
getChildren().remove(n);
insertPreviousVersion(node,(ComponentNode)n);
toBeAdded=true;
doFamily--;
}
 else toBeAdded=false;
break;
}
}
if (toBeAdded) if (doFamily > 0) addToFamily(node);
 else {
getChildren().add(node);
}
return toBeAdded;
}",0.993047034764826
136355,"@Override public boolean isEnabled(){
  Node n=mc.getCurrentNode_NavigatorView().getOwningComponent();
  return n.getVersionNode() == null || n.isInHead();
}","@Override public boolean isEnabled(){
  Node n=mc.getCurrentNode_NavigatorView().getOwningComponent();
  return n instanceof BusinessObjectNode ? n.isEditable() && n.isNewToChain() : false;
}",0.764367816091954
136356,"@Override public boolean isEnabled(){
  Node n=mc.getCurrentNode_NavigatorView().getOwningComponent();
  return n.getVersionNode() == null || n.isInHead();
}","@Override public boolean isEnabled(){
  Node n=mc.getCurrentNode_NavigatorView().getOwningComponent();
  return n instanceof BusinessObjectNode ? n.isEditable() && n.isNewToChain() : false;
}",0.764367816091954
136357,"/** 
 * Adds node to the aggregate node's children list if appropriate.
 * @param node
 * @return
 */
public boolean add(ComponentNode node){
switch (type) {
case ComplexTypes:
    if (!(node instanceof ComplexComponentInterface))     throw new IllegalStateException(""String_Node_Str"");
  break;
case SimpleTypes:
if (!(node instanceof SimpleComponentInterface)) throw new IllegalStateException(""String_Node_Str"");
break;
case Service:
if (!(node instanceof ServiceNode || (node instanceof OperationNode))) throw new IllegalStateException(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"" + node.getClass().getSimpleName());
}
boolean toBeAdded=true;
int doFamily=0;
String familyName=NodeNameUtils.makeFamilyName(node.getName());
for (Node n : getChildren()) {
if (n.getName().startsWith(familyName)) doFamily++;
if (n.getName().equals(node.getName())) {
if (node.getLibrary().getTLaLib().isLaterVersion(n.getLibrary().getTLaLib())) {
getChildren().remove(n);
toBeAdded=true;
doFamily--;
}
 else toBeAdded=false;
break;
}
}
if (toBeAdded) if (doFamily > 0) addToFamily(node);
 else getChildren().add(node);
return toBeAdded;
}","/** 
 * Adds node to the aggregate node's children list if appropriate.
 * @param node
 * @return
 */
public boolean add(ComponentNode node){
switch (type) {
case ComplexTypes:
    if (!(node instanceof ComplexComponentInterface))     throw new IllegalStateException(""String_Node_Str"");
  break;
case SimpleTypes:
if (!(node instanceof SimpleComponentInterface)) throw new IllegalStateException(""String_Node_Str"");
break;
case Service:
if (!(node instanceof ServiceNode || (node instanceof OperationNode))) throw new IllegalStateException(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"" + node.getClass().getSimpleName());
}
boolean toBeAdded=true;
int doFamily=0;
String familyName=NodeNameUtils.makeFamilyName(node.getName());
for (Node n : getChildren()) {
if (n.getName().startsWith(familyName)) doFamily++;
if (n.getName().equals(node.getName())) {
if (node.getLibrary().getTLaLib().isLaterVersion(n.getLibrary().getTLaLib())) {
getChildren().remove(n);
insertPreviousVersion(node,(ComponentNode)n);
toBeAdded=true;
doFamily--;
}
 else toBeAdded=false;
break;
}
}
if (toBeAdded) if (doFamily > 0) addToFamily(node);
 else getChildren().add(node);
return toBeAdded;
}",0.9806234203875316
136358,"@Override public List<Node> getNavChildren(){
  if (type.equals(AggregateType.Versions)) {
    return super.getChildren();
  }
 else {
    ArrayList<Node> kids=new ArrayList<Node>();
    for (    Node child : getChildren()) {
      if (child instanceof VersionNode)       kids.add(((VersionNode)child).getHead());
    }
    return kids;
  }
}","@Override public List<Node> getNavChildren(){
  if (type.equals(AggregateType.Versions)) {
    return super.getChildren();
  }
 else {
    ArrayList<Node> kids=new ArrayList<Node>();
    for (    Node child : getChildren()) {
      if (child instanceof VersionNode)       kids.add(((VersionNode)child).getNewestVersion());
    }
    return kids;
  }
}",0.9754689754689756
136359,"/** 
 * Find the ""latest"" previous version of the node.
 * @param node
 */
private ComponentNode findPreviousVersion(ComponentNode node){
  ComponentNode n, vn=null;
  for (  Node ln : versions.getChildren()) {
    n=(ComponentNode)ln.findNodeByName(node.getName());
    if (vn == null && n != node)     vn=n;
 else     if (n != null && n != node)     if (isLaterVersion(n,vn))     vn=n;
  }
  return vn;
}","/** 
 * Find the ""latest"" previous version of the node.
 * @param node
 */
private ComponentNode findPreviousVersion(ComponentNode node){
  return node.getVersionNode() != null ? node.getVersionNode().getPreviousVersion() : null;
}",0.4772370486656201
136360,"/** 
 * @return True if this node is not in a chain, OR it is in the latest library of the chain ANDnot in a previous version.
 */
public boolean isNewToChain(){
  if (getChain() == null)   return true;
  if (getLibrary() != getChain().getHead())   return false;
  return false;
}","/** 
 * Is the object new to the chain. The object is represented by one or more nodes with the same name within the chain.
 * @return True if this node is not in a chain, OR it is in the latest library of the chain ANDnot in a previous version. Note that node may or may not be editable.
 */
public boolean isNewToChain(){
  if (getChain() == null)   return true;
  if (getLibrary() != getChain().getHead())   return false;
  return getVersionNode().getPreviousVersion() == null ? true : false;
}",0.7207207207207207
136361,"/** 
 * Creates the version node and inserts into the library before the passed node.
 */
public VersionNode(ComponentNode node){
  super(node.getTLModelObject());
  getChildren().add(node);
  head=node;
  node.setVersionNode(this);
  if (node.getLibrary() == null)   throw new IllegalStateException(""String_Node_Str"");
  setLibrary(node.getLibrary());
  if (node.getParent() == null)   throw new IllegalStateException(""String_Node_Str"" + node + ""String_Node_Str"");
  setParent(node.getParent());
  node.getParent().getChildren().remove(node);
  node.getParent().getChildren().add(this);
  node.setParent(this);
}","/** 
 * Creates the version node and inserts into the library before the passed node. This does NOT place this node into the Aggregates. Set previous version to null (new to chain).
 */
public VersionNode(ComponentNode node){
  super(node.getTLModelObject());
  getChildren().add(node);
  head=node;
  prevVersion=null;
  node.setVersionNode(this);
  if (node.getLibrary() == null)   throw new IllegalStateException(""String_Node_Str"");
  setLibrary(node.getLibrary());
  if (node.getParent() == null)   throw new IllegalStateException(""String_Node_Str"" + node + ""String_Node_Str"");
  setParent(node.getParent());
  node.getParent().getChildren().remove(node);
  node.getParent().getChildren().add(this);
  node.setParent(this);
}",0.9135618479880776
136362,"private boolean canAdd(Node node){
  if (node == null || node.getParent() == null)   return false;
  if (node.isDeleted() || !node.isEditable())   return false;
  if (node instanceof ProjectNode)   return false;
  if (node instanceof LibraryChainNode)   return false;
  if (node instanceof OperationNode)   return false;
  if (node.isBusinessObject() || node.isCoreObject() || node.isExtensionPointFacet()) {
    return true;
  }
  if (node.isValueWithAttributes() || node.isEnumeration()) {
    if (node.getEditStatus().equals(NodeEditStatus.FULL) || node.getEditStatus().equals(NodeEditStatus.MINOR))     return true;
 else     return false;
  }
  if (node.isMessage()) {
    if (node.getEditStatus().equals(NodeEditStatus.FULL))     return true;
 else     return false;
  }
  if (node instanceof ServiceNode)   if (node.getEditStatus().equals(NodeEditStatus.FULL))   return true;
 else   return false;
  if (node.isSimpleFacet())   return false;
  if (node.isListFacet())   return false;
  if (node.isRoleFacet() && !node.getEditStatus().equals(NodeEditStatus.FULL))   return false;
  if (node.isFacet())   return canAdd(node.getParent());
  if (node instanceof SimpleAttributeNode)   return false;
  if (node.isRoleProperty() && !node.getEditStatus().equals(NodeEditStatus.FULL))   return false;
  if (node.isProperty())   if (node == node.getOwningComponent())   return false;
 else   return canAdd(node.getOwningComponent());
  return false;
}","private boolean canAdd(Node node){
  if (node == null || node.getParent() == null)   return false;
  if (node.isDeleted() || !node.isEditable())   return false;
  if (node instanceof ProjectNode)   return false;
  if (node instanceof LibraryChainNode)   return false;
  if (node instanceof OperationNode)   return false;
  if (node instanceof ExtensionPointNode || node instanceof VWA_Node) {
    return node.isNewToChain();
  }
  if (node.isBusinessObject() || node.isCoreObject() || node.isExtensionPointFacet()) {
    return true;
  }
  if (node.isValueWithAttributes() || node.isEnumeration()) {
    if (node.getEditStatus().equals(NodeEditStatus.FULL) || node.getEditStatus().equals(NodeEditStatus.MINOR))     return true;
 else     return false;
  }
  if (node.isMessage()) {
    if (node.getEditStatus().equals(NodeEditStatus.FULL))     return true;
 else     return false;
  }
  if (node instanceof ServiceNode)   if (node.getEditStatus().equals(NodeEditStatus.FULL))   return true;
 else   return false;
  if (node.isSimpleFacet())   return false;
  if (node.isListFacet())   return false;
  if (node.isRoleFacet() && !node.getEditStatus().equals(NodeEditStatus.FULL))   return false;
  if (node.isFacet())   return canAdd(node.getParent());
  if (node instanceof SimpleAttributeNode)   return false;
  if (node.isRoleProperty() && !node.getEditStatus().equals(NodeEditStatus.FULL))   return false;
  if (node.isProperty())   if (node == node.getOwningComponent())   return false;
 else   return canAdd(node.getOwningComponent());
  return false;
}",0.9640718562874252
136363,"@Override public void doubleClick(DoubleClickEvent dcEvent){
  Node node=null;
  if (dcEvent.getSelection() instanceof IStructuredSelection) {
    IStructuredSelection ss=(IStructuredSelection)dcEvent.getSelection();
    if (ss.getFirstElement() instanceof Node)     node=(Node)ss.getFirstElement();
  }
  if (node instanceof TypeNode)   node=node.getParent();
 else   if (node instanceof VersionNode)   node=(((VersionNode)node).getHead());
  if (node != null) {
    setCurrentNode(node);
    select(node);
    navigatorMenus.doubleClickNotification();
  }
}","@Override public void doubleClick(DoubleClickEvent dcEvent){
  Node node=null;
  if (dcEvent.getSelection() instanceof IStructuredSelection) {
    IStructuredSelection ss=(IStructuredSelection)dcEvent.getSelection();
    if (ss.getFirstElement() instanceof Node)     node=(Node)ss.getFirstElement();
  }
  if (node instanceof TypeNode)   node=node.getParent();
 else   if (node instanceof VersionNode)   node=(((VersionNode)node).getNewestVersion());
  if (node != null) {
    setCurrentNode(node);
    select(node);
    navigatorMenus.doubleClickNotification();
  }
}",0.9849157054126
136364,"/** 
 * Locates the source node for the selected finding in the library navigation view.
 */
private void selectFindingSource(ValidationFinding finding){
  Validatable findingSource=getNodeMappableFindingSource(finding);
  String validationIdentity=findingSource.getValidationIdentity();
  if (validationIdentity == null)   return;
  Node n=NodeFinders.findNodeByValidationIentity(validationIdentity);
  if (n == null)   return;
  LOGGER.debug(""String_Node_Str"" + validationIdentity);
  int e=finding.getMessageKey().lastIndexOf(""String_Node_Str"");
  String error=finding.getMessageKey().substring(++e);
  LOGGER.debug(""String_Node_Str"" + error);
  if (error.equals(TLValidationBuilder.UNRESOLVED_NAMED_ENTITY_REFERENCE)) {
    OtmEventData wd=new OtmEventData();
    wd.setBusinessEvent(OtmActions.typeSelector());
    wd.setNode(null);
    wd.setNodeList(findMatching(finding,error));
    if (wd.getNodeList() != null && !wd.getNodeList().isEmpty() && wd.getNodeList().get(0).isEditable())     otmActions.doEvent(wd);
    validateNode((Node)currentNode);
  }
  LOGGER.debug(""String_Node_Str"" + n + ""String_Node_Str""+ validationIdentity);
  mc.selectNavigatorNodeAndRefresh(n);
}","/** 
 * Locates the source node for the selected finding in the library navigation view.
 */
private void selectFindingSource(ValidationFinding finding){
  Validatable findingSource=getNodeMappableFindingSource(finding);
  String validationIdentity=findingSource.getValidationIdentity();
  if (validationIdentity == null)   return;
  Node n=NodeFinders.findNodeByValidationIentity(validationIdentity);
  if (n == null)   return;
  int e=finding.getMessageKey().lastIndexOf(""String_Node_Str"");
  String error=finding.getMessageKey().substring(++e);
  if (error.equals(TLValidationBuilder.UNRESOLVED_NAMED_ENTITY_REFERENCE)) {
    OtmEventData wd=new OtmEventData();
    wd.setBusinessEvent(OtmActions.typeSelector());
    wd.setNode(null);
    wd.setNodeList(findMatching(finding,error));
    Node target=null;
    if (wd.getNodeList() != null && !wd.getNodeList().isEmpty())     target=wd.getNodeList().get(0);
    if (target != null)     otmActions.doEvent(wd);
    validateNode((Node)currentNode);
  }
  mc.selectNavigatorNodeAndRefresh(n);
}",0.8273381294964028
136365,"/** 
 * @param children
 * @return
 */
private List<ExampleModel> generateExamplesForNode(List<Node> children,ValidationFindings findingsAggregator){
  List<ExampleModel> ret=new ArrayList<ExampleModel>();
  for (  Node child : children) {
    NamedEntity namedEntity=getNamedEntity(child);
    if (namedEntity != null) {
      ExampleModel childModel=null;
      try {
        Object[] examples=generateExample(namedEntity);
        if (child instanceof VersionNode) {
          child=((VersionNode)child).getHead();
        }
        if (child.isService()) {
          childModel=new ExampleModel(child);
          childModel.addChildren(generateExamplesForNode(child.getChildren(),findingsAggregator));
        }
 else         if (child.isOperation()) {
          childModel=new ExampleModel(child);
          childModel.addChildren(generateExamplesForNode(child.getChildren(),findingsAggregator));
        }
 else {
          if (namedEntity instanceof TLFacet) {
            TLFacet facet=(TLFacet)namedEntity;
            if (!facet.declaresContent()) {
              break;
            }
          }
          if (((Document)examples[0]).getDocumentElement() != null) {
            childModel=new DOMExampleModel(child,((Document)examples[0]).getDocumentElement());
            childModel.setXmlString((String)examples[1]);
          }
        }
      }
 catch (      ValidationException e) {
        childModel=new ErrorExampleModel(child);
        findingsAggregator.addAll(e.getFindings());
        LOGGER.debug(""String_Node_Str"" + Arrays.toString(e.getFindings().getAllValidationMessages(FindingMessageFormat.IDENTIFIED_FORMAT)));
      }
catch (      CodeGenerationException e) {
        DialogUserNotifier.openError(""String_Node_Str"",""String_Node_Str"" + e);
        LOGGER.error(""String_Node_Str"",e);
      }
      if (childModel != null)       ret.add(childModel);
    }
 else     if (!child.getChildren().isEmpty()) {
      ret.addAll(generateExamplesForNode(child.getChildren(),findingsAggregator));
    }
  }
  return ret;
}","/** 
 * @param children
 * @return
 */
private List<ExampleModel> generateExamplesForNode(List<Node> children,ValidationFindings findingsAggregator){
  List<ExampleModel> ret=new ArrayList<ExampleModel>();
  for (  Node child : children) {
    NamedEntity namedEntity=getNamedEntity(child);
    if (namedEntity != null) {
      ExampleModel childModel=null;
      try {
        Object[] examples=generateExample(namedEntity);
        if (child instanceof VersionNode) {
          child=((VersionNode)child).getNewestVersion();
        }
        if (child.isService()) {
          childModel=new ExampleModel(child);
          childModel.addChildren(generateExamplesForNode(child.getChildren(),findingsAggregator));
        }
 else         if (child.isOperation()) {
          childModel=new ExampleModel(child);
          childModel.addChildren(generateExamplesForNode(child.getChildren(),findingsAggregator));
        }
 else {
          if (namedEntity instanceof TLFacet) {
            TLFacet facet=(TLFacet)namedEntity;
            if (!facet.declaresContent()) {
              break;
            }
          }
          if (((Document)examples[0]).getDocumentElement() != null) {
            childModel=new DOMExampleModel(child,((Document)examples[0]).getDocumentElement());
            childModel.setXmlString((String)examples[1]);
          }
        }
      }
 catch (      ValidationException e) {
        childModel=new ErrorExampleModel(child);
        findingsAggregator.addAll(e.getFindings());
        LOGGER.debug(""String_Node_Str"" + Arrays.toString(e.getFindings().getAllValidationMessages(FindingMessageFormat.IDENTIFIED_FORMAT)));
      }
catch (      CodeGenerationException e) {
        DialogUserNotifier.openError(""String_Node_Str"",""String_Node_Str"" + e);
        LOGGER.error(""String_Node_Str"",e);
      }
      if (childModel != null)       ret.add(childModel);
    }
 else     if (!child.getChildren().isEmpty()) {
      ret.addAll(generateExamplesForNode(child.getChildren(),findingsAggregator));
    }
  }
  return ret;
}",0.9958445367880714
136366,"public LibraryNode(ProjectItem pi,LibraryChainNode chain){
  this(pi.getContent(),chain.getVersions());
  projectItem=pi;
  updateLibraryStatus();
}","public LibraryNode(ProjectItem pi,LibraryChainNode chain){
  this(pi.getContent(),chain.getVersions());
  for (  Node members : getDescendentsNamedTypes()) {
    if (members instanceof ComponentNode) {
      chain.add((ComponentNode)members);
    }
  }
  projectItem=pi;
  updateLibraryStatus();
}",0.6651685393258427
136367,"/** 
 * getChildren is used when a node that hasChildren() is selected
 */
@Override public Object[] getChildren(final Object element){
  if (element instanceof Node) {
    Node node=(Node)element;
    List<Node> navChildren=new ArrayList<Node>();
    if (node instanceof PropertyNode)     navChildren.addAll(node.getNavChildren());
 else     if (node instanceof VersionAggregateNode) {
      navChildren.addAll(node.getNavChildren());
    }
 else {
      navChildren.addAll(node.getChildren());
      if (node.isNamedType())       navChildren.add(node.getTypeClass().getTypeTreeNode());
      navChildren.addAll(node.getInheritedChildren());
      if (node instanceof ModelNode) {
        if (!navChildren.contains(ModelNode.getUnassignedNode())) {
          navChildren.add(ModelNode.getUnassignedNode());
        }
      }
    }
    return navChildren != null ? navChildren.toArray() : null;
  }
 else   if (element instanceof TypeNode) {
    ((TypeNode)element).getChildren();
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + element);
  return null;
}","/** 
 * getChildren is used when a node that hasChildren() is selected
 */
@Override public Object[] getChildren(final Object element){
  if (element instanceof Node) {
    Node node=(Node)element;
    List<Node> navChildren=new ArrayList<Node>();
    if (node instanceof PropertyNode || node instanceof VersionAggregateNode || node instanceof VersionNode) {
      navChildren.addAll(node.getNavChildren());
    }
 else {
      navChildren.addAll(node.getChildren());
      if (node.isNamedType())       navChildren.add(node.getTypeClass().getTypeTreeNode());
      navChildren.addAll(node.getInheritedChildren());
      if (node instanceof ModelNode) {
        if (!navChildren.contains(ModelNode.getUnassignedNode())) {
          navChildren.add(ModelNode.getUnassignedNode());
        }
      }
    }
    return navChildren != null ? navChildren.toArray() : null;
  }
 else   if (element instanceof TypeNode) {
    ((TypeNode)element).getChildren();
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + element);
  return null;
}",0.9462264150943396
136368,"@Test public void testMajor(){
  Assert.assertTrue(chain.isEditable());
  LibraryNode newMajor=rc.createMajorVersion(chain.getHead());
  TotalDescendents=TotalDescendents - 2;
  ActiveComplex--;
  Assert.assertFalse(chain.isEditable());
  LibraryChainNode newChain=newMajor.getChain();
  BusinessObjectNode majorBO=ml.addBusinessObjectToLibrary(newMajor,""String_Node_Str"");
  checkCounts(newChain);
  for (  Node n : newMajor.getDescendants_NamedTypes()) {
    if (n.getName().equals(bo.getName()))     bo=(BusinessObjectNode)n;
    if (n.getName().equals(co.getName()))     co=(CoreObjectNode)n;
  }
  Assert.assertTrue(majorBO.isDeleteable());
  Assert.assertTrue(bo.isDeleteable());
  Assert.assertTrue(co.isDeleteable());
}","@Test public void testMajor(){
  Assert.assertTrue(chain.isEditable());
  LibraryNode newMajor=rc.createMajorVersion(chain.getHead());
  TotalDescendents=TotalDescendents - 3;
  ActiveComplex--;
  Assert.assertFalse(chain.isEditable());
  LibraryChainNode newChain=newMajor.getChain();
  BusinessObjectNode majorBO=ml.addBusinessObjectToLibrary(newMajor,""String_Node_Str"");
  checkCounts(newChain);
  for (  Node n : newMajor.getDescendants_NamedTypes()) {
    if (n.getName().equals(bo.getName()))     bo=(BusinessObjectNode)n;
    if (n.getName().equals(co.getName()))     co=(CoreObjectNode)n;
  }
  Assert.assertTrue(majorBO.isDeleteable());
  Assert.assertTrue(bo.isDeleteable());
  Assert.assertTrue(co.isDeleteable());
}",0.998624484181568
136369,"@Before public void runBeforeEachTest() throws LibrarySaveException, RepositoryException {
  xsdStringNode=NodeFinders.findNodeByName(""String_Node_Str"",Node.XSD_NAMESPACE);
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  majorLibrary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  secondLib=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  chain=rc.manage(getRepositoryForTest(),Collections.singletonList(majorLibrary)).get(0);
  boolean locked=rc.lock(chain.getHead());
  Assert.assertTrue(locked);
  Assert.assertTrue(majorLibrary.isEditable());
  Assert.assertEquals(RepositoryItemState.MANAGED_WIP,chain.getHead().getProjectItem().getState());
  sbo=ml.addBusinessObjectToLibrary(secondLib,""String_Node_Str"");
  bo=ml.addBusinessObjectToLibrary(majorLibrary,""String_Node_Str"");
  co=ml.addCoreObjectToLibrary(majorLibrary,""String_Node_Str"");
  bo.setExtensible(true);
  vwa=ml.addVWA_ToLibrary(majorLibrary,""String_Node_Str"");
  ml.addSimpleTypeToLibrary(majorLibrary,""String_Node_Str"");
  ml.addClosedEnumToLibrary(majorLibrary,""String_Node_Str"");
  ml.addOpenEnumToLibrary(majorLibrary,""String_Node_Str"");
  ml.addNestedTypes(majorLibrary);
  core2=(CoreObjectNode)majorLibrary.findNodeByName(""String_Node_Str"");
  ServiceNode svc=new ServiceNode(bo);
  svc.setName(bo.getName() + ""String_Node_Str"");
  ExtensionPointNode ep=new ExtensionPointNode(new TLExtensionPointFacet());
  ep.setExtendsType(sbo.getSummaryFacet());
  majorLibrary.addMember(ep);
  Assert.assertTrue(majorLibrary.isValid());
  TotalDescendents=11;
  TotalLibraries=3;
  ActiveComplex=8;
  ActiveSimple=2;
  MinorComplex=0;
  patchLibrary=rc.createPatchVersion(chain.getHead());
  ml.addSimpleTypeToLibrary(patchLibrary,""String_Node_Str"");
  TotalDescendents+=1;
  ActiveSimple+=1;
  Assert.assertTrue(chain.isValid());
  checkCounts(chain);
  ExtensionPointNode ePatch=new ExtensionPointNode(new TLExtensionPointFacet());
  patchLibrary.addMember(ePatch);
  ePatch.setExtendsType(core2.getSummaryFacet());
  ePatch.addProperty(new IndicatorNode(ePatch,""String_Node_Str""));
  TotalDescendents+=1;
  ActiveComplex+=1;
  Assert.assertTrue(chain.isValid());
  checkCounts(chain);
  minorLibrary=rc.createMinorVersion(chain.getHead());
  MinorComplex++;
  TotalDescendents++;
  Assert.assertTrue(patchLibrary.getComplexRoot().getChildren().contains(ePatch.getParent()));
  mCo=null;
  for (  Node n : minorLibrary.getDescendants_NamedTypes()) {
    if (n.getName().equals(core2.getName())) {
      mCo=(CoreObjectNode)n;
      break;
    }
  }
  Assert.assertSame(core2,mCo.getExtendsType());
  if (!(mCo.getParent() instanceof VersionNode)) {
    VersionNode vn=new VersionNode(mCo);
    ((AggregateNode)chain.getComplexAggregate()).add(mCo);
  }
  checkCounts(chain);
  Assert.assertTrue(chain.isValid());
}","@Before public void runBeforeEachTest() throws LibrarySaveException, RepositoryException {
  xsdStringNode=NodeFinders.findNodeByName(""String_Node_Str"",Node.XSD_NAMESPACE);
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  majorLibrary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  secondLib=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  chain=rc.manage(getRepositoryForTest(),Collections.singletonList(majorLibrary)).get(0);
  boolean locked=rc.lock(chain.getHead());
  Assert.assertTrue(locked);
  Assert.assertTrue(majorLibrary.isEditable());
  Assert.assertEquals(RepositoryItemState.MANAGED_WIP,chain.getHead().getProjectItem().getState());
  sbo=ml.addBusinessObjectToLibrary(secondLib,""String_Node_Str"");
  bo=ml.addBusinessObjectToLibrary(majorLibrary,""String_Node_Str"");
  co=ml.addCoreObjectToLibrary(majorLibrary,""String_Node_Str"");
  bo.setExtensible(true);
  vwa=ml.addVWA_ToLibrary(majorLibrary,""String_Node_Str"");
  ml.addSimpleTypeToLibrary(majorLibrary,""String_Node_Str"");
  ml.addClosedEnumToLibrary(majorLibrary,""String_Node_Str"");
  ml.addOpenEnumToLibrary(majorLibrary,""String_Node_Str"");
  ml.addNestedTypes(majorLibrary);
  core2=(CoreObjectNode)majorLibrary.findNodeByName(""String_Node_Str"");
  ServiceNode svc=new ServiceNode(bo);
  svc.setName(bo.getName() + ""String_Node_Str"");
  ExtensionPointNode ep=new ExtensionPointNode(new TLExtensionPointFacet());
  ep.setExtendsType(sbo.getSummaryFacet());
  majorLibrary.addMember(ep);
  Assert.assertTrue(majorLibrary.isValid());
  TotalDescendents=11;
  TotalLibraries=3;
  ActiveComplex=8;
  ActiveSimple=2;
  MinorComplex=0;
  patchLibrary=rc.createPatchVersion(chain.getHead());
  ml.addSimpleTypeToLibrary(patchLibrary,""String_Node_Str"");
  TotalDescendents+=1;
  ActiveSimple+=1;
  Assert.assertTrue(chain.isValid());
  checkCounts(chain);
  ExtensionPointNode ePatch=new ExtensionPointNode(new TLExtensionPointFacet());
  patchLibrary.addMember(ePatch);
  ePatch.setExtendsType(core2.getSummaryFacet());
  ePatch.addProperty(new IndicatorNode(ePatch,""String_Node_Str""));
  TotalDescendents+=1;
  ActiveComplex+=1;
  Assert.assertTrue(chain.isValid());
  checkCounts(chain);
  minorLibrary=rc.createMinorVersion(chain.getHead());
  MinorComplex++;
  TotalDescendents++;
  TotalDescendents++;
  Assert.assertSame(((VersionNode)patchLibrary.getComplexRoot().getChildren().get(0)).getNewestVersion(),ePatch);
  checkCounts(chain);
  mCo=null;
  for (  Node n : minorLibrary.getDescendants_NamedTypes()) {
    if (n.getName().equals(core2.getName())) {
      mCo=(CoreObjectNode)n;
      break;
    }
  }
  Assert.assertSame(core2,mCo.getExtendsType());
  checkCounts(chain);
  Assert.assertTrue(chain.isValid());
}",0.955130320026394
136370,"@Test public void testFacets(){
  int facetCount=bo.getChildren().size();
  bo.addFacet(""String_Node_Str"",""String_Node_Str"",TLFacetType.CUSTOM);
  Assert.assertEquals(facetCount,bo.getChildren().size());
  nbo=(BusinessObjectNode)bo.createMinorVersionComponent();
  MinorComplex+=1;
  nbo.isInHead();
  List<String> contextIDs=minorLibrary.getContextIds();
  Assert.assertFalse(contextIDs.isEmpty());
  nbo.addFacet(""String_Node_Str"",contextIDs.get(0),TLFacetType.CUSTOM);
  Assert.assertEquals(4,nbo.getChildren().size());
  Assert.assertEquals(MinorComplex,minorLibrary.getDescendants_NamedTypes().size());
  Assert.assertTrue(chain.isValid());
  nbo.delete();
  MinorComplex-=1;
  checkCounts(chain);
}","@Test public void testFacets(){
  int facetCount=bo.getChildren().size();
  bo.addFacet(""String_Node_Str"",""String_Node_Str"",TLFacetType.CUSTOM);
  Assert.assertEquals(facetCount,bo.getChildren().size());
  nbo=(BusinessObjectNode)bo.createMinorVersionComponent();
  MinorComplex+=1;
  nbo.isInHead();
  List<String> contextIDs=minorLibrary.getContextIds();
  Assert.assertFalse(contextIDs.isEmpty());
  nbo.addFacet(""String_Node_Str"",contextIDs.get(0),TLFacetType.CUSTOM);
  Assert.assertEquals(4,nbo.getChildren().size());
  Assert.assertEquals(MinorComplex + 1,minorLibrary.getDescendants_NamedTypes().size());
  Assert.assertTrue(chain.isValid());
  nbo.delete();
  MinorComplex-=1;
  checkCounts(chain);
}",0.9971711456859972
136371,"@Test public void testHeirarchy(){
  CoreObjectNode nco=createCoreInMinor();
  Assert.assertTrue(nco.getParent() instanceof VersionNode);
  Assert.assertTrue(nco.getLibrary() == minorLibrary);
  Assert.assertTrue(nco.getParent() == nco.getVersionNode());
  Assert.assertTrue(nco.getVersionNode().getNewestVersion() == nco);
  Assert.assertTrue(co.getVersionNode().getNewestVersion() == nco);
  Assert.assertTrue(nco.getVersionNode().getPreviousVersion() == co);
  Assert.assertTrue(co.getVersionNode().getPreviousVersion() == null);
  Node head=chain.getHead();
  Assert.assertTrue(head instanceof LibraryNode);
  Assert.assertTrue(head.getParent().getParent() == chain);
  Assert.assertTrue(head.getChain() == chain);
  Node versionsAgg=chain.getVersions();
  Assert.assertTrue(versionsAgg instanceof VersionAggregateNode);
  Assert.assertEquals(TotalLibraries,versionsAgg.getChildren().size());
  Assert.assertEquals(TotalLibraries,versionsAgg.getNavChildren().size());
  Assert.assertTrue(versionsAgg.getParent() == chain);
  Assert.assertTrue(versionsAgg.getChain() == chain);
  for (  Node lib : versionsAgg.getChildren()) {
    Assert.assertTrue(lib.getParent() == versionsAgg);
    Assert.assertTrue(lib instanceof LibraryNode);
    if (lib == chain.getHead())     Assert.assertTrue(lib.isEditable());
 else     Assert.assertFalse(lib.isEditable());
    checkChildrenClassType(lib,NavNode.class,ServiceNode.class);
    for (    Node nn : lib.getChildren()) {
      if (nn instanceof NavNode) {
        Assert.assertTrue(nn.getParent() == lib);
        checkChildrenClassType(nn,VersionNode.class,null);
        for (        Node vn : nn.getChildren()) {
          Assert.assertTrue(vn.getParent() == nn);
          Assert.assertEquals(1,vn.getChildren().size());
          checkChildrenClassType(vn,ComponentNode.class,null);
          for (          Node cc : vn.getChildren())           Assert.assertTrue(cc.getParent() == vn);
        }
      }
 else {
        checkChildrenClassType(nn,OperationNode.class,null);
      }
    }
  }
  Node complexAgg=(Node)chain.getComplexAggregate();
  Assert.assertTrue(complexAgg.getParent() == chain);
  checkChildrenClassType(complexAgg,ComplexComponentInterface.class,null);
  for (  Node n : complexAgg.getChildren())   Assert.assertTrue(n.getParent() != complexAgg);
  Node simpleAgg=(Node)chain.getSimpleAggregate();
  Assert.assertTrue(simpleAgg.getParent() == chain);
  checkChildrenClassType(simpleAgg,SimpleComponentInterface.class,null);
  for (  Node n : simpleAgg.getChildren())   Assert.assertTrue(n.getParent() != simpleAgg);
  Node svcAgg=(Node)chain.getServiceAggregate();
  Assert.assertTrue(svcAgg.getParent() == chain);
}","@Test public void testHeirarchy(){
  CoreObjectNode nco=createCoreInMinor();
  Assert.assertTrue(nco.getParent() instanceof VersionNode);
  Assert.assertTrue(nco.getLibrary() == minorLibrary);
  Assert.assertTrue(nco.getParent() == nco.getVersionNode());
  Assert.assertTrue(nco.getVersionNode().getNewestVersion() == nco);
  Assert.assertTrue(co.getVersionNode().getNewestVersion() == nco);
  Assert.assertTrue(nco.getVersionNode().getPreviousVersion() == co);
  Assert.assertTrue(co.getVersionNode().getPreviousVersion() == null);
  Node head=chain.getHead();
  Assert.assertTrue(head instanceof LibraryNode);
  Assert.assertTrue(head.getParent().getParent() == chain);
  Assert.assertTrue(head.getChain() == chain);
  Node versionsAgg=chain.getVersions();
  Assert.assertTrue(versionsAgg instanceof VersionAggregateNode);
  Assert.assertEquals(TotalLibraries,versionsAgg.getChildren().size());
  Assert.assertEquals(TotalLibraries,versionsAgg.getNavChildren().size());
  Assert.assertTrue(versionsAgg.getParent() == chain);
  Assert.assertTrue(versionsAgg.getChain() == chain);
  for (  Node lib : versionsAgg.getChildren()) {
    Assert.assertTrue(lib.getParent() == versionsAgg);
    Assert.assertTrue(lib instanceof LibraryNode);
    if (lib == chain.getHead())     Assert.assertTrue(lib.isEditable());
 else     Assert.assertFalse(lib.isEditable());
    checkChildrenClassType(lib,NavNode.class,ServiceNode.class);
    for (    Node nn : lib.getChildren()) {
      if (nn instanceof NavNode) {
        Assert.assertTrue(nn.getParent() == lib);
        checkChildrenClassType(nn,VersionNode.class,null);
        for (        Node vn : nn.getChildren()) {
          Assert.assertTrue(vn.getParent() == nn);
          Assert.assertEquals(1,vn.getChildren().size());
          checkChildrenClassType(vn,ComponentNode.class,null);
          for (          Node cc : vn.getChildren()) {
            Assert.assertTrue(cc.getParent() == vn);
          }
        }
      }
 else {
        checkChildrenClassType(nn,OperationNode.class,null);
      }
    }
  }
  Node complexAgg=(Node)chain.getComplexAggregate();
  Assert.assertTrue(complexAgg.getParent() == chain);
  checkChildrenClassType(complexAgg,ComplexComponentInterface.class,null);
  for (  Node n : complexAgg.getChildren())   Assert.assertTrue(n.getParent() != complexAgg);
  Node simpleAgg=(Node)chain.getSimpleAggregate();
  Assert.assertTrue(simpleAgg.getParent() == chain);
  checkChildrenClassType(simpleAgg,SimpleComponentInterface.class,null);
  for (  Node n : simpleAgg.getChildren())   Assert.assertTrue(n.getParent() != simpleAgg);
  Node svcAgg=(Node)chain.getServiceAggregate();
  Assert.assertTrue(svcAgg.getParent() == chain);
}",0.9970315398886828
136372,"public boolean hasService(){
  return serviceRoot != null;
}","public boolean hasService(){
  return !serviceRoot.getChildren().isEmpty();
}",0.7737226277372263
136373,"public LibraryNode(ProjectItem pi,LibraryChainNode chain){
  this(pi.getContent(),chain.getVersions());
  for (  Node members : getDescendentsNamedTypes()) {
    if (members instanceof ComponentNode) {
      chain.add((ComponentNode)members);
    }
  }
  projectItem=pi;
  updateLibraryStatus();
}","public LibraryNode(ProjectItem pi,LibraryChainNode chain){
  this(pi.getContent(),chain.getVersions());
  for (  Node members : getDescendentsNamedTypes()) {
    if (members instanceof ComponentNode) {
      chain.add((ComponentNode)members);
    }
  }
  ServiceNode serviceNode=getService();
  if (serviceNode != null) {
    chain.add(serviceNode);
  }
  projectItem=pi;
  updateLibraryStatus();
}",0.8546762589928057
136374,"/** 
 * @return true only if this object is in the version head library. false if not or unmanaged.
 */
public boolean isInHead(){
  if (getOwningComponent().versionNode == null)   return false;
  return getChain().getHead().getDescendants_NamedTypes().contains(getOwningComponent());
}","/** 
 * @return true only if this object is in the version head library. false if not or unmanaged.
 */
public boolean isInHead(){
  Node owner=getOwningComponent();
  if (owner instanceof OperationNode) {
    owner=owner.getOwningComponent();
  }
  if (owner == null || owner.versionNode == null)   return false;
  return getChain().getHead().getDescendants_NamedTypes().contains(owner);
}",0.7751479289940828
136375,"public boolean hasService(){
  return serviceRoot != null;
}","public boolean hasService(){
  return !serviceRoot.getChildren().isEmpty();
}",0.7737226277372263
136376,"public LibraryNode(ProjectItem pi,LibraryChainNode chain){
  this(pi.getContent(),chain.getVersions());
  for (  Node members : getDescendentsNamedTypes()) {
    if (members instanceof ComponentNode) {
      chain.add((ComponentNode)members);
    }
  }
  projectItem=pi;
  updateLibraryStatus();
}","public LibraryNode(ProjectItem pi,LibraryChainNode chain){
  this(pi.getContent(),chain.getVersions());
  for (  Node members : getDescendentsNamedTypes()) {
    if (members instanceof ComponentNode) {
      chain.add((ComponentNode)members);
    }
  }
  ServiceNode serviceNode=getService();
  if (serviceNode != null) {
    chain.add(serviceNode);
  }
  projectItem=pi;
  updateLibraryStatus();
}",0.8546762589928057
136377,"/** 
 * @return true only if this object is in the version head library. false if not or unmanaged.
 */
public boolean isInHead(){
  if (getOwningComponent().versionNode == null)   return false;
  return getChain().getHead().getDescendants_NamedTypes().contains(getOwningComponent());
}","/** 
 * @return true only if this object is in the version head library. false if not or unmanaged.
 */
public boolean isInHead(){
  Node owner=getOwningComponent();
  if (owner instanceof OperationNode) {
    owner=owner.getOwningComponent();
  }
  if (owner == null || owner.versionNode == null)   return false;
  return getChain().getHead().getDescendants_NamedTypes().contains(owner);
}",0.7751479289940828
136378,"@Override public boolean isEnabled(){
  Node n=mc.getCurrentNode_NavigatorView().getOwningComponent();
  return n.getVersionNode() == null || n.isInHead();
}","@Override public boolean isEnabled(){
  Node n=mc.getCurrentNode_NavigatorView().getOwningComponent();
  return n instanceof BusinessObjectNode ? n.isEditable() && n.isNewToChain() : false;
}",0.764367816091954
136379,"@Override public boolean isEnabled(){
  Node n=mc.getCurrentNode_NavigatorView().getOwningComponent();
  return n.getVersionNode() == null || n.isInHead();
}","@Override public boolean isEnabled(){
  Node n=mc.getCurrentNode_NavigatorView().getOwningComponent();
  return n instanceof BusinessObjectNode ? n.isEditable() && n.isNewToChain() : false;
}",0.764367816091954
136380,"/** 
 * Adds node to the aggregate node's children list if appropriate.
 * @param node
 * @return
 */
public boolean add(ComponentNode node){
switch (type) {
case ComplexTypes:
    if (!(node instanceof ComplexComponentInterface))     throw new IllegalStateException(""String_Node_Str"");
  break;
case SimpleTypes:
if (!(node instanceof SimpleComponentInterface)) throw new IllegalStateException(""String_Node_Str"");
break;
case Service:
if (!(node instanceof ServiceNode || (node instanceof OperationNode))) throw new IllegalStateException(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"" + node.getClass().getSimpleName());
}
boolean toBeAdded=true;
int doFamily=0;
String familyName=NodeNameUtils.makeFamilyName(node.getName());
for (Node n : getChildren()) {
if (n.getName().startsWith(familyName)) doFamily++;
if (n.getName().equals(node.getName())) {
if (node.getLibrary().getTLaLib().isLaterVersion(n.getLibrary().getTLaLib())) {
getChildren().remove(n);
toBeAdded=true;
doFamily--;
}
 else toBeAdded=false;
break;
}
}
if (toBeAdded) if (doFamily > 0) addToFamily(node);
 else getChildren().add(node);
return toBeAdded;
}","/** 
 * Adds node to the aggregate node's children list if appropriate.
 * @param node
 * @return
 */
public boolean add(ComponentNode node){
switch (type) {
case ComplexTypes:
    if (!(node instanceof ComplexComponentInterface))     throw new IllegalStateException(""String_Node_Str"");
  break;
case SimpleTypes:
if (!(node instanceof SimpleComponentInterface)) throw new IllegalStateException(""String_Node_Str"");
break;
case Service:
if (!(node instanceof ServiceNode || (node instanceof OperationNode))) throw new IllegalStateException(""String_Node_Str"");
break;
default :
throw new IllegalStateException(""String_Node_Str"" + node.getClass().getSimpleName());
}
boolean toBeAdded=true;
int doFamily=0;
String familyName=NodeNameUtils.makeFamilyName(node.getName());
for (Node n : getChildren()) {
if (n.getName().startsWith(familyName)) doFamily++;
if (n.getName().equals(node.getName())) {
if (node.getLibrary().getTLaLib().isLaterVersion(n.getLibrary().getTLaLib())) {
getChildren().remove(n);
insertPreviousVersion(node,(ComponentNode)n);
toBeAdded=true;
doFamily--;
}
 else toBeAdded=false;
break;
}
}
if (toBeAdded) if (doFamily > 0) addToFamily(node);
 else getChildren().add(node);
return toBeAdded;
}",0.9806234203875316
136381,"@Override public List<Node> getNavChildren(){
  if (type.equals(AggregateType.Versions)) {
    return super.getChildren();
  }
 else {
    ArrayList<Node> kids=new ArrayList<Node>();
    for (    Node child : getChildren()) {
      if (child instanceof VersionNode)       kids.add(((VersionNode)child).getHead());
    }
    return kids;
  }
}","@Override public List<Node> getNavChildren(){
  if (type.equals(AggregateType.Versions)) {
    return super.getChildren();
  }
 else {
    ArrayList<Node> kids=new ArrayList<Node>();
    for (    Node child : getChildren()) {
      if (child instanceof VersionNode)       kids.add(((VersionNode)child).getNewestVersion());
    }
    return kids;
  }
}",0.9754689754689756
136382,"/** 
 * Find the ""latest"" previous version of the node.
 * @param node
 */
private ComponentNode findPreviousVersion(ComponentNode node){
  ComponentNode n, vn=null;
  for (  Node ln : versions.getChildren()) {
    n=(ComponentNode)ln.findNodeByName(node.getName());
    if (vn == null && n != node)     vn=n;
 else     if (n != null && n != node)     if (isLaterVersion(n,vn))     vn=n;
  }
  return vn;
}","/** 
 * Find the ""latest"" previous version of the node.
 * @param node
 */
private ComponentNode findPreviousVersion(ComponentNode node){
  return node.getVersionNode() != null ? node.getVersionNode().getPreviousVersion() : null;
}",0.4772370486656201
136383,"/** 
 * @return True if this node is not in a chain, OR it is in the latest library of the chain ANDnot in a previous version.
 */
public boolean isNewToChain(){
  if (getChain() == null)   return true;
  if (getLibrary() != getChain().getHead())   return false;
  return false;
}","/** 
 * Is the object new to the chain. The object is represented by one or more nodes with the same name within the chain.
 * @return True if this node is not in a chain, OR it is in the latest library of the chain ANDnot in a previous version. Note that node may or may not be editable.
 */
public boolean isNewToChain(){
  if (getChain() == null)   return true;
  if (getLibrary() != getChain().getHead())   return false;
  return getVersionNode().getPreviousVersion() == null ? true : false;
}",0.7207207207207207
136384,"/** 
 * Creates the version node and inserts into the library before the passed node.
 */
public VersionNode(ComponentNode node){
  super(node.getTLModelObject());
  getChildren().add(node);
  head=node;
  node.setVersionNode(this);
  if (node.getLibrary() == null)   throw new IllegalStateException(""String_Node_Str"");
  setLibrary(node.getLibrary());
  if (node.getParent() == null)   throw new IllegalStateException(""String_Node_Str"" + node + ""String_Node_Str"");
  setParent(node.getParent());
  node.getParent().getChildren().remove(node);
  node.getParent().getChildren().add(this);
  node.setParent(this);
}","/** 
 * Creates the version node and inserts into the library before the passed node. This does NOT place this node into the Aggregates. Set previous version to null (new to chain).
 */
public VersionNode(ComponentNode node){
  super(node.getTLModelObject());
  getChildren().add(node);
  head=node;
  prevVersion=null;
  node.setVersionNode(this);
  if (node.getLibrary() == null)   throw new IllegalStateException(""String_Node_Str"");
  setLibrary(node.getLibrary());
  if (node.getParent() == null)   throw new IllegalStateException(""String_Node_Str"" + node + ""String_Node_Str"");
  setParent(node.getParent());
  node.getParent().getChildren().remove(node);
  node.getParent().getChildren().add(this);
  node.setParent(this);
}",0.9135618479880776
136385,"private boolean canAdd(Node node){
  if (node == null || node.getParent() == null)   return false;
  if (node.isDeleted() || !node.isEditable())   return false;
  if (node instanceof ProjectNode)   return false;
  if (node instanceof LibraryChainNode)   return false;
  if (node instanceof OperationNode)   return false;
  if (node.isBusinessObject() || node.isCoreObject() || node.isExtensionPointFacet()) {
    return true;
  }
  if (node.isValueWithAttributes() || node.isEnumeration()) {
    if (node.getEditStatus().equals(NodeEditStatus.FULL) || node.getEditStatus().equals(NodeEditStatus.MINOR))     return true;
 else     return false;
  }
  if (node.isMessage()) {
    if (node.getEditStatus().equals(NodeEditStatus.FULL))     return true;
 else     return false;
  }
  if (node instanceof ServiceNode)   if (node.getEditStatus().equals(NodeEditStatus.FULL))   return true;
 else   return false;
  if (node.isSimpleFacet())   return false;
  if (node.isListFacet())   return false;
  if (node.isRoleFacet() && !node.getEditStatus().equals(NodeEditStatus.FULL))   return false;
  if (node.isFacet())   return canAdd(node.getParent());
  if (node instanceof SimpleAttributeNode)   return false;
  if (node.isRoleProperty() && !node.getEditStatus().equals(NodeEditStatus.FULL))   return false;
  if (node.isProperty())   if (node == node.getOwningComponent())   return false;
 else   return canAdd(node.getOwningComponent());
  return false;
}","private boolean canAdd(Node node){
  if (node == null || node.getParent() == null)   return false;
  if (node.isDeleted() || !node.isEditable())   return false;
  if (node instanceof ProjectNode)   return false;
  if (node instanceof LibraryChainNode)   return false;
  if (node instanceof OperationNode)   return false;
  if (node instanceof ExtensionPointNode || node instanceof VWA_Node) {
    return node.isNewToChain();
  }
  if (node.isBusinessObject() || node.isCoreObject() || node.isExtensionPointFacet()) {
    return true;
  }
  if (node.isValueWithAttributes() || node.isEnumeration()) {
    if (node.getEditStatus().equals(NodeEditStatus.FULL) || node.getEditStatus().equals(NodeEditStatus.MINOR))     return true;
 else     return false;
  }
  if (node.isMessage()) {
    if (node.getEditStatus().equals(NodeEditStatus.FULL))     return true;
 else     return false;
  }
  if (node instanceof ServiceNode)   if (node.getEditStatus().equals(NodeEditStatus.FULL))   return true;
 else   return false;
  if (node.isSimpleFacet())   return false;
  if (node.isListFacet())   return false;
  if (node.isRoleFacet() && !node.getEditStatus().equals(NodeEditStatus.FULL))   return false;
  if (node.isFacet())   return canAdd(node.getParent());
  if (node instanceof SimpleAttributeNode)   return false;
  if (node.isRoleProperty() && !node.getEditStatus().equals(NodeEditStatus.FULL))   return false;
  if (node.isProperty())   if (node == node.getOwningComponent())   return false;
 else   return canAdd(node.getOwningComponent());
  return false;
}",0.9640718562874252
136386,"@Override public void doubleClick(DoubleClickEvent dcEvent){
  Node node=null;
  if (dcEvent.getSelection() instanceof IStructuredSelection) {
    IStructuredSelection ss=(IStructuredSelection)dcEvent.getSelection();
    if (ss.getFirstElement() instanceof Node)     node=(Node)ss.getFirstElement();
  }
  if (node instanceof TypeNode)   node=node.getParent();
 else   if (node instanceof VersionNode)   node=(((VersionNode)node).getHead());
  if (node != null) {
    setCurrentNode(node);
    select(node);
    navigatorMenus.doubleClickNotification();
  }
}","@Override public void doubleClick(DoubleClickEvent dcEvent){
  Node node=null;
  if (dcEvent.getSelection() instanceof IStructuredSelection) {
    IStructuredSelection ss=(IStructuredSelection)dcEvent.getSelection();
    if (ss.getFirstElement() instanceof Node)     node=(Node)ss.getFirstElement();
  }
  if (node instanceof TypeNode)   node=node.getParent();
 else   if (node instanceof VersionNode)   node=(((VersionNode)node).getNewestVersion());
  if (node != null) {
    setCurrentNode(node);
    select(node);
    navigatorMenus.doubleClickNotification();
  }
}",0.9849157054126
136387,"/** 
 * Locates the source node for the selected finding in the library navigation view.
 */
private void selectFindingSource(ValidationFinding finding){
  Validatable findingSource=getNodeMappableFindingSource(finding);
  String validationIdentity=findingSource.getValidationIdentity();
  if (validationIdentity == null)   return;
  Node n=NodeFinders.findNodeByValidationIentity(validationIdentity);
  if (n == null)   return;
  LOGGER.debug(""String_Node_Str"" + validationIdentity);
  int e=finding.getMessageKey().lastIndexOf(""String_Node_Str"");
  String error=finding.getMessageKey().substring(++e);
  LOGGER.debug(""String_Node_Str"" + error);
  if (error.equals(TLValidationBuilder.UNRESOLVED_NAMED_ENTITY_REFERENCE)) {
    OtmEventData wd=new OtmEventData();
    wd.setBusinessEvent(OtmActions.typeSelector());
    wd.setNode(null);
    wd.setNodeList(findMatching(finding,error));
    if (wd.getNodeList() != null && !wd.getNodeList().isEmpty() && wd.getNodeList().get(0).isEditable())     otmActions.doEvent(wd);
    validateNode((Node)currentNode);
  }
  LOGGER.debug(""String_Node_Str"" + n + ""String_Node_Str""+ validationIdentity);
  mc.selectNavigatorNodeAndRefresh(n);
}","/** 
 * Locates the source node for the selected finding in the library navigation view.
 */
private void selectFindingSource(ValidationFinding finding){
  Validatable findingSource=getNodeMappableFindingSource(finding);
  String validationIdentity=findingSource.getValidationIdentity();
  if (validationIdentity == null)   return;
  Node n=NodeFinders.findNodeByValidationIentity(validationIdentity);
  if (n == null)   return;
  int e=finding.getMessageKey().lastIndexOf(""String_Node_Str"");
  String error=finding.getMessageKey().substring(++e);
  if (error.equals(TLValidationBuilder.UNRESOLVED_NAMED_ENTITY_REFERENCE)) {
    OtmEventData wd=new OtmEventData();
    wd.setBusinessEvent(OtmActions.typeSelector());
    wd.setNode(null);
    wd.setNodeList(findMatching(finding,error));
    Node target=null;
    if (wd.getNodeList() != null && !wd.getNodeList().isEmpty())     target=wd.getNodeList().get(0);
    if (target != null)     otmActions.doEvent(wd);
    validateNode((Node)currentNode);
  }
  mc.selectNavigatorNodeAndRefresh(n);
}",0.8273381294964028
136388,"/** 
 * @param children
 * @return
 */
private List<ExampleModel> generateExamplesForNode(List<Node> children,ValidationFindings findingsAggregator){
  List<ExampleModel> ret=new ArrayList<ExampleModel>();
  for (  Node child : children) {
    NamedEntity namedEntity=getNamedEntity(child);
    if (namedEntity != null) {
      ExampleModel childModel=null;
      try {
        Object[] examples=generateExample(namedEntity);
        if (child instanceof VersionNode) {
          child=((VersionNode)child).getHead();
        }
        if (child.isService()) {
          childModel=new ExampleModel(child);
          childModel.addChildren(generateExamplesForNode(child.getChildren(),findingsAggregator));
        }
 else         if (child.isOperation()) {
          childModel=new ExampleModel(child);
          childModel.addChildren(generateExamplesForNode(child.getChildren(),findingsAggregator));
        }
 else {
          if (namedEntity instanceof TLFacet) {
            TLFacet facet=(TLFacet)namedEntity;
            if (!facet.declaresContent()) {
              break;
            }
          }
          if (((Document)examples[0]).getDocumentElement() != null) {
            childModel=new DOMExampleModel(child,((Document)examples[0]).getDocumentElement());
            childModel.setXmlString((String)examples[1]);
          }
        }
      }
 catch (      ValidationException e) {
        childModel=new ErrorExampleModel(child);
        findingsAggregator.addAll(e.getFindings());
        LOGGER.debug(""String_Node_Str"" + Arrays.toString(e.getFindings().getAllValidationMessages(FindingMessageFormat.IDENTIFIED_FORMAT)));
      }
catch (      CodeGenerationException e) {
        DialogUserNotifier.openError(""String_Node_Str"",""String_Node_Str"" + e);
        LOGGER.error(""String_Node_Str"",e);
      }
      if (childModel != null)       ret.add(childModel);
    }
 else     if (!child.getChildren().isEmpty()) {
      ret.addAll(generateExamplesForNode(child.getChildren(),findingsAggregator));
    }
  }
  return ret;
}","/** 
 * @param children
 * @return
 */
private List<ExampleModel> generateExamplesForNode(List<Node> children,ValidationFindings findingsAggregator){
  List<ExampleModel> ret=new ArrayList<ExampleModel>();
  for (  Node child : children) {
    NamedEntity namedEntity=getNamedEntity(child);
    if (namedEntity != null) {
      ExampleModel childModel=null;
      try {
        Object[] examples=generateExample(namedEntity);
        if (child instanceof VersionNode) {
          child=((VersionNode)child).getNewestVersion();
        }
        if (child.isService()) {
          childModel=new ExampleModel(child);
          childModel.addChildren(generateExamplesForNode(child.getChildren(),findingsAggregator));
        }
 else         if (child.isOperation()) {
          childModel=new ExampleModel(child);
          childModel.addChildren(generateExamplesForNode(child.getChildren(),findingsAggregator));
        }
 else {
          if (namedEntity instanceof TLFacet) {
            TLFacet facet=(TLFacet)namedEntity;
            if (!facet.declaresContent()) {
              break;
            }
          }
          if (((Document)examples[0]).getDocumentElement() != null) {
            childModel=new DOMExampleModel(child,((Document)examples[0]).getDocumentElement());
            childModel.setXmlString((String)examples[1]);
          }
        }
      }
 catch (      ValidationException e) {
        childModel=new ErrorExampleModel(child);
        findingsAggregator.addAll(e.getFindings());
        LOGGER.debug(""String_Node_Str"" + Arrays.toString(e.getFindings().getAllValidationMessages(FindingMessageFormat.IDENTIFIED_FORMAT)));
      }
catch (      CodeGenerationException e) {
        DialogUserNotifier.openError(""String_Node_Str"",""String_Node_Str"" + e);
        LOGGER.error(""String_Node_Str"",e);
      }
      if (childModel != null)       ret.add(childModel);
    }
 else     if (!child.getChildren().isEmpty()) {
      ret.addAll(generateExamplesForNode(child.getChildren(),findingsAggregator));
    }
  }
  return ret;
}",0.9958445367880714
136389,"public LibraryNode(ProjectItem pi,LibraryChainNode chain){
  this(pi.getContent(),chain.getVersions());
  projectItem=pi;
  updateLibraryStatus();
}","public LibraryNode(ProjectItem pi,LibraryChainNode chain){
  this(pi.getContent(),chain.getVersions());
  for (  Node members : getDescendentsNamedTypes()) {
    if (members instanceof ComponentNode) {
      chain.add((ComponentNode)members);
    }
  }
  projectItem=pi;
  updateLibraryStatus();
}",0.6651685393258427
136390,"/** 
 * getChildren is used when a node that hasChildren() is selected
 */
@Override public Object[] getChildren(final Object element){
  if (element instanceof Node) {
    Node node=(Node)element;
    List<Node> navChildren=new ArrayList<Node>();
    if (node instanceof PropertyNode)     navChildren.addAll(node.getNavChildren());
 else     if (node instanceof VersionAggregateNode) {
      navChildren.addAll(node.getNavChildren());
    }
 else {
      navChildren.addAll(node.getChildren());
      if (node.isNamedType())       navChildren.add(node.getTypeClass().getTypeTreeNode());
      navChildren.addAll(node.getInheritedChildren());
      if (node instanceof ModelNode) {
        if (!navChildren.contains(ModelNode.getUnassignedNode())) {
          navChildren.add(ModelNode.getUnassignedNode());
        }
      }
    }
    return navChildren != null ? navChildren.toArray() : null;
  }
 else   if (element instanceof TypeNode) {
    ((TypeNode)element).getChildren();
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + element);
  return null;
}","/** 
 * getChildren is used when a node that hasChildren() is selected
 */
@Override public Object[] getChildren(final Object element){
  if (element instanceof Node) {
    Node node=(Node)element;
    List<Node> navChildren=new ArrayList<Node>();
    if (node instanceof PropertyNode || node instanceof VersionAggregateNode || node instanceof VersionNode) {
      navChildren.addAll(node.getNavChildren());
    }
 else {
      navChildren.addAll(node.getChildren());
      if (node.isNamedType())       navChildren.add(node.getTypeClass().getTypeTreeNode());
      navChildren.addAll(node.getInheritedChildren());
      if (node instanceof ModelNode) {
        if (!navChildren.contains(ModelNode.getUnassignedNode())) {
          navChildren.add(ModelNode.getUnassignedNode());
        }
      }
    }
    return navChildren != null ? navChildren.toArray() : null;
  }
 else   if (element instanceof TypeNode) {
    ((TypeNode)element).getChildren();
  }
 else   throw new IllegalArgumentException(""String_Node_Str"" + element);
  return null;
}",0.9462264150943396
136391,"@Test public void testMajor(){
  Assert.assertTrue(chain.isEditable());
  LibraryNode newMajor=rc.createMajorVersion(chain.getHead());
  TotalDescendents=TotalDescendents - 2;
  ActiveComplex--;
  Assert.assertFalse(chain.isEditable());
  LibraryChainNode newChain=newMajor.getChain();
  BusinessObjectNode majorBO=ml.addBusinessObjectToLibrary(newMajor,""String_Node_Str"");
  checkCounts(newChain);
  for (  Node n : newMajor.getDescendants_NamedTypes()) {
    if (n.getName().equals(bo.getName()))     bo=(BusinessObjectNode)n;
    if (n.getName().equals(co.getName()))     co=(CoreObjectNode)n;
  }
  Assert.assertTrue(majorBO.isDeleteable());
  Assert.assertTrue(bo.isDeleteable());
  Assert.assertTrue(co.isDeleteable());
}","@Test public void testMajor(){
  Assert.assertTrue(chain.isEditable());
  LibraryNode newMajor=rc.createMajorVersion(chain.getHead());
  TotalDescendents=TotalDescendents - 3;
  ActiveComplex--;
  Assert.assertFalse(chain.isEditable());
  LibraryChainNode newChain=newMajor.getChain();
  BusinessObjectNode majorBO=ml.addBusinessObjectToLibrary(newMajor,""String_Node_Str"");
  checkCounts(newChain);
  for (  Node n : newMajor.getDescendants_NamedTypes()) {
    if (n.getName().equals(bo.getName()))     bo=(BusinessObjectNode)n;
    if (n.getName().equals(co.getName()))     co=(CoreObjectNode)n;
  }
  Assert.assertTrue(majorBO.isDeleteable());
  Assert.assertTrue(bo.isDeleteable());
  Assert.assertTrue(co.isDeleteable());
}",0.998624484181568
136392,"@Before public void runBeforeEachTest() throws LibrarySaveException, RepositoryException {
  xsdStringNode=NodeFinders.findNodeByName(""String_Node_Str"",Node.XSD_NAMESPACE);
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  majorLibrary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  secondLib=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  chain=rc.manage(getRepositoryForTest(),Collections.singletonList(majorLibrary)).get(0);
  boolean locked=rc.lock(chain.getHead());
  Assert.assertTrue(locked);
  Assert.assertTrue(majorLibrary.isEditable());
  Assert.assertEquals(RepositoryItemState.MANAGED_WIP,chain.getHead().getProjectItem().getState());
  sbo=ml.addBusinessObjectToLibrary(secondLib,""String_Node_Str"");
  bo=ml.addBusinessObjectToLibrary(majorLibrary,""String_Node_Str"");
  co=ml.addCoreObjectToLibrary(majorLibrary,""String_Node_Str"");
  bo.setExtensible(true);
  vwa=ml.addVWA_ToLibrary(majorLibrary,""String_Node_Str"");
  ml.addSimpleTypeToLibrary(majorLibrary,""String_Node_Str"");
  ml.addClosedEnumToLibrary(majorLibrary,""String_Node_Str"");
  ml.addOpenEnumToLibrary(majorLibrary,""String_Node_Str"");
  ml.addNestedTypes(majorLibrary);
  core2=(CoreObjectNode)majorLibrary.findNodeByName(""String_Node_Str"");
  ServiceNode svc=new ServiceNode(bo);
  svc.setName(bo.getName() + ""String_Node_Str"");
  ExtensionPointNode ep=new ExtensionPointNode(new TLExtensionPointFacet());
  ep.setExtendsType(sbo.getSummaryFacet());
  majorLibrary.addMember(ep);
  Assert.assertTrue(majorLibrary.isValid());
  TotalDescendents=11;
  TotalLibraries=3;
  ActiveComplex=8;
  ActiveSimple=2;
  MinorComplex=0;
  patchLibrary=rc.createPatchVersion(chain.getHead());
  ml.addSimpleTypeToLibrary(patchLibrary,""String_Node_Str"");
  TotalDescendents+=1;
  ActiveSimple+=1;
  Assert.assertTrue(chain.isValid());
  checkCounts(chain);
  ExtensionPointNode ePatch=new ExtensionPointNode(new TLExtensionPointFacet());
  patchLibrary.addMember(ePatch);
  ePatch.setExtendsType(core2.getSummaryFacet());
  ePatch.addProperty(new IndicatorNode(ePatch,""String_Node_Str""));
  TotalDescendents+=1;
  ActiveComplex+=1;
  Assert.assertTrue(chain.isValid());
  checkCounts(chain);
  minorLibrary=rc.createMinorVersion(chain.getHead());
  MinorComplex++;
  TotalDescendents++;
  Assert.assertTrue(patchLibrary.getComplexRoot().getChildren().contains(ePatch.getParent()));
  mCo=null;
  for (  Node n : minorLibrary.getDescendants_NamedTypes()) {
    if (n.getName().equals(core2.getName())) {
      mCo=(CoreObjectNode)n;
      break;
    }
  }
  Assert.assertSame(core2,mCo.getExtendsType());
  if (!(mCo.getParent() instanceof VersionNode)) {
    VersionNode vn=new VersionNode(mCo);
    ((AggregateNode)chain.getComplexAggregate()).add(mCo);
  }
  checkCounts(chain);
  Assert.assertTrue(chain.isValid());
}","@Before public void runBeforeEachTest() throws LibrarySaveException, RepositoryException {
  xsdStringNode=NodeFinders.findNodeByName(""String_Node_Str"",Node.XSD_NAMESPACE);
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  majorLibrary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  secondLib=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  chain=rc.manage(getRepositoryForTest(),Collections.singletonList(majorLibrary)).get(0);
  boolean locked=rc.lock(chain.getHead());
  Assert.assertTrue(locked);
  Assert.assertTrue(majorLibrary.isEditable());
  Assert.assertEquals(RepositoryItemState.MANAGED_WIP,chain.getHead().getProjectItem().getState());
  sbo=ml.addBusinessObjectToLibrary(secondLib,""String_Node_Str"");
  bo=ml.addBusinessObjectToLibrary(majorLibrary,""String_Node_Str"");
  co=ml.addCoreObjectToLibrary(majorLibrary,""String_Node_Str"");
  bo.setExtensible(true);
  vwa=ml.addVWA_ToLibrary(majorLibrary,""String_Node_Str"");
  ml.addSimpleTypeToLibrary(majorLibrary,""String_Node_Str"");
  ml.addClosedEnumToLibrary(majorLibrary,""String_Node_Str"");
  ml.addOpenEnumToLibrary(majorLibrary,""String_Node_Str"");
  ml.addNestedTypes(majorLibrary);
  core2=(CoreObjectNode)majorLibrary.findNodeByName(""String_Node_Str"");
  ServiceNode svc=new ServiceNode(bo);
  svc.setName(bo.getName() + ""String_Node_Str"");
  ExtensionPointNode ep=new ExtensionPointNode(new TLExtensionPointFacet());
  ep.setExtendsType(sbo.getSummaryFacet());
  majorLibrary.addMember(ep);
  Assert.assertTrue(majorLibrary.isValid());
  TotalDescendents=11;
  TotalLibraries=3;
  ActiveComplex=8;
  ActiveSimple=2;
  MinorComplex=0;
  patchLibrary=rc.createPatchVersion(chain.getHead());
  ml.addSimpleTypeToLibrary(patchLibrary,""String_Node_Str"");
  TotalDescendents+=1;
  ActiveSimple+=1;
  Assert.assertTrue(chain.isValid());
  checkCounts(chain);
  ExtensionPointNode ePatch=new ExtensionPointNode(new TLExtensionPointFacet());
  patchLibrary.addMember(ePatch);
  ePatch.setExtendsType(core2.getSummaryFacet());
  ePatch.addProperty(new IndicatorNode(ePatch,""String_Node_Str""));
  TotalDescendents+=1;
  ActiveComplex+=1;
  Assert.assertTrue(chain.isValid());
  checkCounts(chain);
  minorLibrary=rc.createMinorVersion(chain.getHead());
  MinorComplex++;
  TotalDescendents++;
  TotalDescendents++;
  Assert.assertSame(((VersionNode)patchLibrary.getComplexRoot().getChildren().get(0)).getNewestVersion(),ePatch);
  checkCounts(chain);
  mCo=null;
  for (  Node n : minorLibrary.getDescendants_NamedTypes()) {
    if (n.getName().equals(core2.getName())) {
      mCo=(CoreObjectNode)n;
      break;
    }
  }
  Assert.assertSame(core2,mCo.getExtendsType());
  checkCounts(chain);
  Assert.assertTrue(chain.isValid());
}",0.955130320026394
136393,"@Test public void testFacets(){
  int facetCount=bo.getChildren().size();
  bo.addFacet(""String_Node_Str"",""String_Node_Str"",TLFacetType.CUSTOM);
  Assert.assertEquals(facetCount,bo.getChildren().size());
  nbo=(BusinessObjectNode)bo.createMinorVersionComponent();
  MinorComplex+=1;
  nbo.isInHead();
  List<String> contextIDs=minorLibrary.getContextIds();
  Assert.assertFalse(contextIDs.isEmpty());
  nbo.addFacet(""String_Node_Str"",contextIDs.get(0),TLFacetType.CUSTOM);
  Assert.assertEquals(4,nbo.getChildren().size());
  Assert.assertEquals(MinorComplex,minorLibrary.getDescendants_NamedTypes().size());
  Assert.assertTrue(chain.isValid());
  nbo.delete();
  MinorComplex-=1;
  checkCounts(chain);
}","@Test public void testFacets(){
  int facetCount=bo.getChildren().size();
  bo.addFacet(""String_Node_Str"",""String_Node_Str"",TLFacetType.CUSTOM);
  Assert.assertEquals(facetCount,bo.getChildren().size());
  nbo=(BusinessObjectNode)bo.createMinorVersionComponent();
  MinorComplex+=1;
  nbo.isInHead();
  List<String> contextIDs=minorLibrary.getContextIds();
  Assert.assertFalse(contextIDs.isEmpty());
  nbo.addFacet(""String_Node_Str"",contextIDs.get(0),TLFacetType.CUSTOM);
  Assert.assertEquals(4,nbo.getChildren().size());
  Assert.assertEquals(MinorComplex + 1,minorLibrary.getDescendants_NamedTypes().size());
  Assert.assertTrue(chain.isValid());
  nbo.delete();
  MinorComplex-=1;
  checkCounts(chain);
}",0.9971711456859972
136394,"@Test public void testHeirarchy(){
  CoreObjectNode nco=createCoreInMinor();
  Assert.assertTrue(nco.getParent() instanceof VersionNode);
  Assert.assertTrue(nco.getLibrary() == minorLibrary);
  Assert.assertTrue(nco.getParent() == nco.getVersionNode());
  Assert.assertTrue(nco.getVersionNode().getNewestVersion() == nco);
  Assert.assertTrue(co.getVersionNode().getNewestVersion() == nco);
  Assert.assertTrue(nco.getVersionNode().getPreviousVersion() == co);
  Assert.assertTrue(co.getVersionNode().getPreviousVersion() == null);
  Node head=chain.getHead();
  Assert.assertTrue(head instanceof LibraryNode);
  Assert.assertTrue(head.getParent().getParent() == chain);
  Assert.assertTrue(head.getChain() == chain);
  Node versionsAgg=chain.getVersions();
  Assert.assertTrue(versionsAgg instanceof VersionAggregateNode);
  Assert.assertEquals(TotalLibraries,versionsAgg.getChildren().size());
  Assert.assertEquals(TotalLibraries,versionsAgg.getNavChildren().size());
  Assert.assertTrue(versionsAgg.getParent() == chain);
  Assert.assertTrue(versionsAgg.getChain() == chain);
  for (  Node lib : versionsAgg.getChildren()) {
    Assert.assertTrue(lib.getParent() == versionsAgg);
    Assert.assertTrue(lib instanceof LibraryNode);
    if (lib == chain.getHead())     Assert.assertTrue(lib.isEditable());
 else     Assert.assertFalse(lib.isEditable());
    checkChildrenClassType(lib,NavNode.class,ServiceNode.class);
    for (    Node nn : lib.getChildren()) {
      if (nn instanceof NavNode) {
        Assert.assertTrue(nn.getParent() == lib);
        checkChildrenClassType(nn,VersionNode.class,null);
        for (        Node vn : nn.getChildren()) {
          Assert.assertTrue(vn.getParent() == nn);
          Assert.assertEquals(1,vn.getChildren().size());
          checkChildrenClassType(vn,ComponentNode.class,null);
          for (          Node cc : vn.getChildren())           Assert.assertTrue(cc.getParent() == vn);
        }
      }
 else {
        checkChildrenClassType(nn,OperationNode.class,null);
      }
    }
  }
  Node complexAgg=(Node)chain.getComplexAggregate();
  Assert.assertTrue(complexAgg.getParent() == chain);
  checkChildrenClassType(complexAgg,ComplexComponentInterface.class,null);
  for (  Node n : complexAgg.getChildren())   Assert.assertTrue(n.getParent() != complexAgg);
  Node simpleAgg=(Node)chain.getSimpleAggregate();
  Assert.assertTrue(simpleAgg.getParent() == chain);
  checkChildrenClassType(simpleAgg,SimpleComponentInterface.class,null);
  for (  Node n : simpleAgg.getChildren())   Assert.assertTrue(n.getParent() != simpleAgg);
  Node svcAgg=(Node)chain.getServiceAggregate();
  Assert.assertTrue(svcAgg.getParent() == chain);
}","@Test public void testHeirarchy(){
  CoreObjectNode nco=createCoreInMinor();
  Assert.assertTrue(nco.getParent() instanceof VersionNode);
  Assert.assertTrue(nco.getLibrary() == minorLibrary);
  Assert.assertTrue(nco.getParent() == nco.getVersionNode());
  Assert.assertTrue(nco.getVersionNode().getNewestVersion() == nco);
  Assert.assertTrue(co.getVersionNode().getNewestVersion() == nco);
  Assert.assertTrue(nco.getVersionNode().getPreviousVersion() == co);
  Assert.assertTrue(co.getVersionNode().getPreviousVersion() == null);
  Node head=chain.getHead();
  Assert.assertTrue(head instanceof LibraryNode);
  Assert.assertTrue(head.getParent().getParent() == chain);
  Assert.assertTrue(head.getChain() == chain);
  Node versionsAgg=chain.getVersions();
  Assert.assertTrue(versionsAgg instanceof VersionAggregateNode);
  Assert.assertEquals(TotalLibraries,versionsAgg.getChildren().size());
  Assert.assertEquals(TotalLibraries,versionsAgg.getNavChildren().size());
  Assert.assertTrue(versionsAgg.getParent() == chain);
  Assert.assertTrue(versionsAgg.getChain() == chain);
  for (  Node lib : versionsAgg.getChildren()) {
    Assert.assertTrue(lib.getParent() == versionsAgg);
    Assert.assertTrue(lib instanceof LibraryNode);
    if (lib == chain.getHead())     Assert.assertTrue(lib.isEditable());
 else     Assert.assertFalse(lib.isEditable());
    checkChildrenClassType(lib,NavNode.class,ServiceNode.class);
    for (    Node nn : lib.getChildren()) {
      if (nn instanceof NavNode) {
        Assert.assertTrue(nn.getParent() == lib);
        checkChildrenClassType(nn,VersionNode.class,null);
        for (        Node vn : nn.getChildren()) {
          Assert.assertTrue(vn.getParent() == nn);
          Assert.assertEquals(1,vn.getChildren().size());
          checkChildrenClassType(vn,ComponentNode.class,null);
          for (          Node cc : vn.getChildren()) {
            Assert.assertTrue(cc.getParent() == vn);
          }
        }
      }
 else {
        checkChildrenClassType(nn,OperationNode.class,null);
      }
    }
  }
  Node complexAgg=(Node)chain.getComplexAggregate();
  Assert.assertTrue(complexAgg.getParent() == chain);
  checkChildrenClassType(complexAgg,ComplexComponentInterface.class,null);
  for (  Node n : complexAgg.getChildren())   Assert.assertTrue(n.getParent() != complexAgg);
  Node simpleAgg=(Node)chain.getSimpleAggregate();
  Assert.assertTrue(simpleAgg.getParent() == chain);
  checkChildrenClassType(simpleAgg,SimpleComponentInterface.class,null);
  for (  Node n : simpleAgg.getChildren())   Assert.assertTrue(n.getParent() != simpleAgg);
  Node svcAgg=(Node)chain.getServiceAggregate();
  Assert.assertTrue(svcAgg.getParent() == chain);
}",0.9970315398886828
136395,"@Override public String getLabel(){
  String label=""String_Node_Str"";
  if (head != null) {
    label=head.getLabel();
  }
  return label;
}","@Override public String getLabel(){
  String label=""String_Node_Str"";
  if (getHead() != null) {
    label=getHead().getLabel();
  }
  return label;
}",0.9517241379310344
136396,"@Override public String getName(){
  String label=""String_Node_Str"";
  if (head != null) {
    NamespaceHandler handler=head.getNsHandler();
    if (handler != null)     label=head.getName() + ""String_Node_Str"" + handler.getNSVersion(head.getNamespace());
  }
  return label;
}","@Override public String getName(){
  String label=""String_Node_Str"";
  if (getHead() != null) {
    NamespaceHandler handler=getHead().getNsHandler();
    if (handler != null)     label=getHead().getName() + ""String_Node_Str"" + handler.getNSVersion(getHead().getNamespace());
  }
  return label;
}",0.4216027874564459
136397,"public LibraryNode getHead(){
  return head;
}","public LibraryNode getHead(){
  return getLibrary();
}",0.88
136398,"/** 
 * Create a new chain and add to passed project. Model the project item and add to the new chain.
 * @param pi - project item to be modeled and added to chain
 * @param project - parent of the chain
 */
public LibraryChainNode(ProjectItem pi,ProjectNode project){
  super();
  if (pi == null || pi.getContent() == null) {
    LOGGER.debug(""String_Node_Str"");
    return;
  }
  setIdentity(pi.getBaseNamespace());
  setParent(project);
  project.getChildren().add(this);
  head=null;
  chain=new ArrayList<LibraryNode>();
  createAggregates();
  List<ProjectItem> piChain=null;
  try {
    piChain=pi.getProjectManager().getVersionChain(pi);
  }
 catch (  VersionSchemeException e1) {
    throw (new IllegalStateException(""String_Node_Str""));
  }
  for (  ProjectItem item : piChain) {
    add(item);
  }
  setLibrary(head);
}","/** 
 * Create a new chain and add to passed project. Model the project item and add to the new chain.
 * @param pi - project item to be modeled and added to chain
 * @param project - parent of the chain
 */
public LibraryChainNode(ProjectItem pi,ProjectNode project){
  super();
  if (pi == null || pi.getContent() == null) {
    LOGGER.debug(""String_Node_Str"");
    return;
  }
  setIdentity(pi.getBaseNamespace());
  setParent(project);
  project.getChildren().add(this);
  setHead(null);
  chain=new ArrayList<LibraryNode>();
  createAggregates();
  List<ProjectItem> piChain=null;
  try {
    piChain=pi.getProjectManager().getVersionChain(pi);
  }
 catch (  VersionSchemeException e1) {
    throw (new IllegalStateException(""String_Node_Str""));
  }
  for (  ProjectItem item : piChain) {
    add(item);
  }
  setLibrary(getHead());
}",0.9838226482923906
136399,"/** 
 * See also   {@link ProjectNode#makeChainIdentity(ProjectItem)} 9/23/2013 - this method does notuse the repository for managed base namespaces. It matches the behavior or makeChainIdentity in ProjectNode.
 */
public String makeChainIdentity(){
  String name=head.getName();
  NamespaceHandler handler=head.getNsHandler();
  String baseNS=handler.removeVersion(head.getNamespace());
  return makeIdentity(name,baseNS,handler.getNS_Major(head.getNamespace()));
}","/** 
 * See also   {@link ProjectNode#makeChainIdentity(ProjectItem)} 9/23/2013 - this method does notuse the repository for managed base namespaces. It matches the behavior or makeChainIdentity in ProjectNode.
 */
public String makeChainIdentity(){
  String name=getHead().getName();
  NamespaceHandler handler=getHead().getNsHandler();
  String baseNS=handler.removeVersion(getHead().getNamespace());
  return makeIdentity(name,baseNS,handler.getNS_Major(getHead().getNamespace()));
}",0.9453781512605042
136400,"/** 
 * Return the Simple/Complex/Service navNode in the latest library that matches the type of this node. 
 * @param parent
 */
public NavNode getLatestNavNode(ComponentNode node){
  Node parent=node.getOwningNavNode();
  for (  Node nav : head.getChildren()) {
    if (parent.getComponentType().equals(nav.getComponentType()))     return (NavNode)nav;
  }
  return null;
}","/** 
 * Return the Simple/Complex/Service navNode in the latest library that matches the type of this node. 
 * @param parent
 */
public NavNode getLatestNavNode(ComponentNode node){
  Node parent=node.getOwningNavNode();
  for (  Node nav : getHead().getChildren()) {
    if (parent.getComponentType().equals(nav.getComponentType()))     return (NavNode)nav;
  }
  return null;
}",0.9827814569536424
136401,"public boolean isMinor(){
  return head.isMinorVersion();
}","public boolean isMinor(){
  return getHead().isMinorVersion();
}",0.943089430894309
136402,"/** 
 * All members of the chain must have the same name, base namespace and major version number.
 */
@Override public String getIdentity(){
  String identity=""String_Node_Str"";
  if (head != null) {
    NamespaceHandler handler=head.getNsHandler();
    if (handler != null)     identity=makeIdentity();
  }
  return identity;
}","/** 
 * All members of the chain must have the same name, base namespace and major version number.
 */
@Override public String getIdentity(){
  String identity=""String_Node_Str"";
  if (getHead() != null) {
    NamespaceHandler handler=getHead().getNsHandler();
    if (handler != null)     identity=makeIdentity();
  }
  return identity;
}",0.9610778443113772
136403,"public boolean isMajor(){
  return head.isMajorVersion();
}","public boolean isMajor(){
  return getHead().isMajorVersion();
}",0.943089430894309
136404,"public boolean isPatch(){
  return head.isPatchVersion();
}","public boolean isPatch(){
  return getHead().isPatchVersion();
}",0.943089430894309
136405,"@Test public void unlockWithCommitShouldCommitChanges() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  String coreObjectName=""String_Node_Str"";
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(coreObjectName).addProperty(""String_Node_Str"").setSimpleType().get());
  mc.getRepositoryController().unlock(library.getHead());
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  library.close();
  RepositoryItemNode nodeToRetrive=findRepositoryItem(library,getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(library.getName(),nodes.getName());
  Assert.assertEquals(library.getHead().getNamespace(),nodes.getHead().getNamespace());
  Assert.assertEquals(1,nodes.getDescendants_NamedTypes().size());
}","@Test public void unlockWithCommitShouldCommitChanges() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  String coreObjectName=""String_Node_Str"";
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(coreObjectName).addProperty(""String_Node_Str"").setSimpleType().get());
  mc.getRepositoryController().unlock(library.getHead());
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  String libraryName=library.getHead().getName();
  String libraryChainName=library.getName();
  String namespace=library.getNamespace();
  library.close();
  RepositoryItemNode nodeToRetrive=findRepositoryItem(libraryName,namespace,getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(libraryChainName,nodes.getName());
  Assert.assertEquals(namespace,nodes.getHead().getNamespace());
  Assert.assertEquals(1,nodes.getDescendants_NamedTypes().size());
}",0.9253521126760564
136406,"@Test public void unlockWithoutCommitShouldRevertChanges() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").setSimpleType().get());
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  ProjectNode revertProject=mc.getRepositoryController().unlockAndRevert(library.getHead());
  Assert.assertEquals(1,revertProject.getLibraries().size());
  LibraryNode revertedLib=revertProject.getLibraries().get(0);
  Assert.assertEquals(0,revertedLib.getDescendants_NamedTypes().size());
  RepositoryItemNode nodeToRetrive=findRepositoryItem(revertedLib.getChain(),getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(library.getName(),nodes.getName());
  Assert.assertEquals(library.getHead().getNamespace(),nodes.getHead().getNamespace());
  Assert.assertEquals(0,nodes.getDescendants_NamedTypes().size());
}","@Test public void unlockWithoutCommitShouldRevertChanges() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").setSimpleType().get());
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  String libraryName=library.getName();
  String namespace=library.getNamespace();
  ProjectNode revertProject=mc.getRepositoryController().unlockAndRevert(library.getHead());
  Assert.assertEquals(1,revertProject.getLibraries().size());
  LibraryNode revertedLib=revertProject.getLibraries().get(0);
  Assert.assertEquals(0,revertedLib.getDescendants_NamedTypes().size());
  RepositoryItemNode nodeToRetrive=findRepositoryItem(revertedLib.getChain(),getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(libraryName,nodes.getName());
  Assert.assertEquals(namespace,nodes.getNamespace());
  Assert.assertEquals(0,nodes.getDescendants_NamedTypes().size());
}",0.9490445859872612
136407,"@Test public void unlockWithoutCommitForDefaultProjectShouldRevertChanges() throws RepositoryException, LibrarySaveException {
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(pc.getDefaultProject(),pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").setSimpleType().get());
  List<Node> descendants=library.getDescendants_NamedTypes();
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  Assert.assertEquals(1,descendants.size());
  ProjectNode revertProject=mc.getRepositoryController().unlockAndRevert(library.getHead());
  Assert.assertEquals(1,revertProject.getLibraries().size());
  LibraryNode revertedLib=revertProject.getLibraries().get(0);
  Assert.assertEquals(0,revertedLib.getDescendants_NamedTypes().size());
  RepositoryItemNode nodeToRetrive=findRepositoryItem(revertedLib.getChain(),getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(library.getName(),nodes.getName());
  Assert.assertEquals(library.getHead().getNamespace(),nodes.getHead().getNamespace());
  Assert.assertEquals(0,nodes.getDescendants_NamedTypes().size());
}","@Test public void unlockWithoutCommitForDefaultProjectShouldRevertChanges() throws RepositoryException, LibrarySaveException {
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(pc.getDefaultProject(),pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").setSimpleType().get());
  List<Node> descendants=library.getDescendants_NamedTypes();
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  Assert.assertEquals(1,descendants.size());
  String libraryName=library.getName();
  String libraryNamespace=library.getNamespace();
  ProjectNode revertProject=mc.getRepositoryController().unlockAndRevert(library.getHead());
  Assert.assertEquals(1,revertProject.getLibraries().size());
  LibraryNode revertedLib=revertProject.getLibraries().get(0);
  Assert.assertEquals(0,revertedLib.getDescendants_NamedTypes().size());
  RepositoryItemNode nodeToRetrive=findRepositoryItem(revertedLib.getChain(),getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(libraryName,nodes.getName());
  Assert.assertEquals(libraryNamespace,nodes.getNamespace());
  Assert.assertEquals(0,nodes.getDescendants_NamedTypes().size());
}",0.9502177971375232
136408,"/** 
 * Versioning - major, minor, patch Project controller Legal library, illegal library (duplicate VWA namespace:name) Assure new version is in LibraryChain correctly. Assure old version is not directly in TLProject or projectNode.children Assure new version is in repository. Assure versions can start with 0.0.0 and variations.
 */
@Test public void createMajorVersionWithSimpleCoreWithoutType() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).makeFinal().build(uploadProject,pc);
  testLibary.addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").get());
  LibraryChainNode chain=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  LibraryNode newMajor=rc.createMajorVersion(chain.getHead());
  ValidationFindings findings=newMajor.validate();
  Assert.assertEquals(0,findings.getFindingsAsList(FindingType.ERROR).size());
}","@Test public void createMajorVersionWithSimpleCoreWithoutType() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).makeFinal().build(uploadProject,pc);
  testLibary.addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").get());
  LibraryChainNode chain=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  LibraryNode newMajor=rc.createMajorVersion(chain.getHead());
  ValidationFindings findings=newMajor.validate();
  Assert.assertEquals(0,findings.getFindingsAsList(FindingType.ERROR).size());
}",0.8325881768504719
136409,"private void assertAllLibrariesLoadedCorrectly(LibraryChainNode baseChain,LibraryChainNode extChain){
  mc.getLibraryController().remove(Collections.singletonList(baseChain));
  mc.getLibraryController().remove(Collections.singletonList(extChain));
  Assert.assertEquals(0,uploadProject.getChildren().size());
  RepositoryItemNode nodeToRetrive=findRepositoryItem(extChain,getRepositoryForTest());
  pc.add(uploadProject,nodeToRetrive.getItem());
  Assert.assertEquals(2,uploadProject.getChildren().size());
  LibraryChainNode lib=findLibrary(extLib.getName(),uploadProject.getChildren());
  VWA_Node vwaNode=(VWA_Node)lib.getDescendants_NamedTypes().get(0);
  AttributeNode attr=(AttributeNode)vwaNode.getAttributeFacet().getChildren().get(0);
  Assert.assertNotSame(ModelNode.getUnassignedNode(),attr.getTypeNode());
  Assert.assertSame(attr.getTypeNode().getModelObject().getTLModelObj(),attr.getTLTypeObject());
}","private void assertAllLibrariesLoadedCorrectly(LibraryChainNode baseChain,LibraryChainNode extChain){
  mc.getLibraryController().remove(Collections.singletonList(baseChain));
  RepositoryItemNode nodeToRetrive=findRepositoryItem(extChain,getRepositoryForTest());
  mc.getLibraryController().remove(Collections.singletonList(extChain));
  Assert.assertEquals(0,uploadProject.getChildren().size());
  pc.add(uploadProject,nodeToRetrive.getItem());
  Assert.assertEquals(2,uploadProject.getChildren().size());
  LibraryChainNode lib=findLibrary(extLib.getName(),uploadProject.getChildren());
  VWA_Node vwaNode=(VWA_Node)lib.getDescendants_NamedTypes().get(0);
  AttributeNode attr=(AttributeNode)vwaNode.getAttributeFacet().getChildren().get(0);
  Assert.assertNotSame(ModelNode.getUnassignedNode(),attr.getTypeNode());
  Assert.assertSame(attr.getTypeNode().getModelObject().getTLModelObj(),attr.getTLTypeObject());
}",0.9040348964013086
136410,"/** 
 * Move one node to the new destination library. Links the node, the tl object and corrects context.
 * @param source
 * @param destination
 */
public void moveNode(final ComponentNode source,final LibraryNode destination){
  if (destination == null || source == null) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  if (!destination.isTLLibrary()) {
    LOGGER.warn(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (source.isInTLLibrary() && source.isTopLevelObject()) {
    source.getLibrary().moveMember(source,destination);
  }
 else {
    LOGGER.warn(""String_Node_Str"" + source.getName() + ""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"" + source.isInTLLibrary() + ""String_Node_Str""+ source.isTopLevelObject());
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"" + source.getName() + ""String_Node_Str""+ destination.getName());
}","/** 
 * Move one node to the new destination library. Links the node, the tl object and corrects context.
 * @param source
 * @param destination
 */
public void moveNode(final ComponentNode source,final LibraryNode destination){
  if (destination == null || source == null) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  if (!destination.isTLLibrary()) {
    LOGGER.warn(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (source.getChain() == destination.getChain()) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (source.isInTLLibrary() && source.isTopLevelObject()) {
    source.getLibrary().moveMember(source,destination);
  }
 else {
    LOGGER.warn(""String_Node_Str"" + source.getName() + ""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"" + source.isInTLLibrary() + ""String_Node_Str""+ source.isTopLevelObject());
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"" + source.getName() + ""String_Node_Str""+ destination.getName());
}",0.9317118802619272
136411,"private void addFacet(final TLFacetType facetType){
  if (!(getSelectedNode_NavigatorView() instanceof ComponentNode))   return;
  final ComponentNode current=(ComponentNode)getSelectedNode_NavigatorView();
  if (current != null && current.isBusinessObject()) {
    final ComponentNode propertyOwner=facetType.equals(TLFacetType.CUSTOM) ? current.getDetailFacet() : current;
    String defaultContext=contextController.getDefaultContextId(current.getLibrary());
    String defaultName=""String_Node_Str"";
    boolean canBeEmpty=TLFacetType.QUERY.equals(facetType);
    if (TLFacetType.CUSTOM.equals(facetType)) {
      defaultName=defaultContext;
    }
    final NewFacetWizard wizard=new NewFacetWizard(propertyOwner,defaultName);
    wizard.setValidator(new NewFacetValidator(current,facetType,wizard));
    wizard.run(OtmRegistry.getActiveShell());
    if (!wizard.wasCanceled()) {
      LOGGER.info(""String_Node_Str"" + facetType + ""String_Node_Str""+ wizard.getSelectedProperties());
      BusinessObjectNode bo=(BusinessObjectNode)current;
      if (TLFacetType.QUERY.equals(facetType) && (wizard.getName() == null || wizard.getName().isEmpty())) {
        defaultContext=null;
      }
      FacetNode newFacet=bo.addFacet(wizard.getName(),defaultContext,facetType);
      for (      final PropertyNode n : wizard.getSelectedProperties()) {
        NodeFactory.newComponentMember(newFacet,n.cloneTLObj());
      }
      refresh(bo);
    }
  }
 else {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    LOGGER.warn(""String_Node_Str"" + current);
  }
}","private void addFacet(final TLFacetType facetType){
  if (!(getSelectedNode_NavigatorView() instanceof ComponentNode))   return;
  final ComponentNode current=(ComponentNode)getSelectedNode_NavigatorView();
  if (current != null && current.isBusinessObject()) {
    if (!current.getLibrary().isMajorVersion()) {
      LOGGER.debug(""String_Node_Str"");
      return;
    }
    final ComponentNode propertyOwner=facetType.equals(TLFacetType.CUSTOM) ? current.getDetailFacet() : current;
    String defaultContext=contextController.getDefaultContextId(current.getLibrary());
    String defaultName=""String_Node_Str"";
    boolean canBeEmpty=TLFacetType.QUERY.equals(facetType);
    if (TLFacetType.CUSTOM.equals(facetType)) {
      defaultName=defaultContext;
    }
    final NewFacetWizard wizard=new NewFacetWizard(propertyOwner,defaultName);
    wizard.setValidator(new NewFacetValidator(current,facetType,wizard));
    wizard.run(OtmRegistry.getActiveShell());
    if (!wizard.wasCanceled()) {
      LOGGER.info(""String_Node_Str"" + facetType + ""String_Node_Str""+ wizard.getSelectedProperties());
      BusinessObjectNode bo=(BusinessObjectNode)current;
      if (TLFacetType.QUERY.equals(facetType) && (wizard.getName() == null || wizard.getName().isEmpty())) {
        defaultContext=null;
      }
      FacetNode newFacet=bo.addFacet(wizard.getName(),defaultContext,facetType);
      for (      final PropertyNode n : wizard.getSelectedProperties()) {
        NodeFactory.newComponentMember(newFacet,n.cloneTLObj());
      }
      refresh(bo);
    }
  }
 else {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    LOGGER.warn(""String_Node_Str"" + current);
  }
}",0.2591117917304747
136412,"public FacetNode addFacet(String name,String context,TLFacetType type){
  if (getLibrary().isMajorVersion() || versionNode == null) {
    TLFacet newTlFacet=getModelObject().addFacet(name,context,type);
    FacetNode ff=(FacetNode)NodeFactory.newComponentMember(this,newTlFacet);
    return ff;
  }
  LOGGER.debug(""String_Node_Str"");
  return null;
}","public FacetNode addFacet(String name,String context,TLFacetType type){
  if (isInHead() || versionNode == null) {
    TLFacet newTlFacet=getModelObject().addFacet(name,context,type);
    FacetNode ff=(FacetNode)NodeFactory.newComponentMember(this,newTlFacet);
    return ff;
  }
  LOGGER.debug(""String_Node_Str"");
  return null;
}",0.9544787077826724
136413,"/** 
 * Remove the node from its library. Remove from the library node and from the underlying tl library. Navigation and family nodes are NOT deleted. Does NOT delete the node or its TL Object contents. TL type assignments are assured to match the assignments in TypeNode.
 */
protected void removeMember(final Node n){
  if (n == null || n.getTLModelObject() == null) {
    LOGGER.debug(""String_Node_Str"" + n.getName() + ""String_Node_Str""+ n.getClass().getSimpleName());
    return;
  }
  if (!(n.getTLModelObject() instanceof LibraryMember)) {
    LOGGER.warn(""String_Node_Str"" + n);
    return;
  }
  n.unlinkNode();
  n.getLibrary().getTLLibrary().removeNamedMember((LibraryMember)n.getTLModelObject());
  n.setLibrary(null);
  n.fixAssignments();
}","/** 
 * Remove the node from its library. Remove from the library node and from the underlying tl library. Navigation and family nodes are NOT deleted. Does NOT delete the node or its TL Object contents. TL type assignments are assured to match the assignments in TypeNode. NOTE - does not replace this node with an earlier version in a version chain.
 */
protected void removeMember(final Node n){
  if (n == null || n.getTLModelObject() == null) {
    LOGGER.debug(""String_Node_Str"" + n.getName() + ""String_Node_Str""+ n.getClass().getSimpleName());
    return;
  }
  if (!(n.getTLModelObject() instanceof LibraryMember)) {
    LOGGER.warn(""String_Node_Str"" + n);
    return;
  }
  n.unlinkNode();
  n.getLibrary().getTLLibrary().removeNamedMember((LibraryMember)n.getTLModelObject());
  n.setLibrary(null);
  n.fixAssignments();
}",0.9508196721311476
136414,"/** 
 * Move a node from its library to a different library. Moves the node and underlying TL object.
 * @param source
 * @param destination
 */
public void moveMember(final Node source,LibraryNode destination){
  if (source == null || source.getModelObject() == null || source.getTLModelObject() == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (destination == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!(destination.getTLaLib() instanceof TLLibrary))   throw new IllegalArgumentException(""String_Node_Str"");
  if (source.isService() && destination.hasService())   return;
  ContextController cc=OtmRegistry.getMainController().getContextController();
  cc.copyContext(source,destination);
  source.unlinkNode();
  source.getLibrary().getTLLibrary().moveNamedMember((LibraryMember)source.getTLModelObject(),destination.getLibrary().getTLLibrary());
  destination.linkMember(source);
  if (isInChain()) {
    destination.getChain().add((ComponentNode)source);
  }
}","/** 
 * Move a node from its library to a different library. Moves the node and underlying TL object.
 * @param source
 * @param destination
 */
public void moveMember(final Node source,LibraryNode destination){
  if (source == null || source.getModelObject() == null || source.getTLModelObject() == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (destination == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!(destination.getTLaLib() instanceof TLLibrary))   throw new IllegalArgumentException(""String_Node_Str"");
  if (source.isService() && destination.hasService())   return;
  ContextController cc=OtmRegistry.getMainController().getContextController();
  cc.copyContext(source,destination);
  if (isInChain()) {
    if (source instanceof ComplexComponentInterface)     getChain().getComplexAggregate().getChildren().remove(source);
 else     if (source instanceof SimpleComponentInterface)     getChain().getSimpleAggregate().getChildren().remove(source);
    LOGGER.debug(""String_Node_Str"" + source);
  }
  source.unlinkNode();
  source.getLibrary().getTLLibrary().moveNamedMember((LibraryMember)source.getTLModelObject(),destination.getLibrary().getTLLibrary());
  destination.linkMember(source);
  if (destination.isInChain()) {
    destination.getChain().add((ComponentNode)source);
  }
}",0.8611464968152867
136415,"@Override public List<Node> getDescendants_NamedTypes(){
  HashSet<Node> namedKids=new HashSet<Node>();
  for (  Node c : getChildren()) {
    if (c.isService())     namedKids.add(c);
 else     if (c.isTypeProvider()) {
      namedKids.add(c);
    }
 else     if (c.hasChildren())     namedKids.addAll(c.getDescendants_NamedTypes());
  }
  return new ArrayList<Node>(namedKids);
}","/** 
 * Traverse via hasChildren. For version chains, it uses the version node and does not touch aggregates.
 */
@Override public List<Node> getDescendants_NamedTypes(){
  HashSet<Node> namedKids=new HashSet<Node>();
  for (  Node c : getChildren()) {
    if (c.isService())     namedKids.add(c);
 else     if (c.isTypeProvider()) {
      namedKids.add(c);
    }
 else     if (c.hasChildren())     namedKids.addAll(c.getDescendants_NamedTypes());
  }
  return new ArrayList<Node>(namedKids);
}",0.8695652173913043
136416,"/** 
 * Get the editing status of the node based on chain and library.
 */
public NodeEditStatus getEditStatus(){
  NodeEditStatus status=NodeEditStatus.FULL;
  if (getLibrary() == null)   return status;
  if (getChain() == null) {
    if (getLibrary().isEditable())     status=NodeEditStatus.FULL;
 else     status=NodeEditStatus.NOT_EDITABLE;
  }
 else {
    if (!getChain().isEditable())     status=NodeEditStatus.MANAGED_READONLY;
 else     if (getChain().getHead().isMajorVersion())     status=NodeEditStatus.FULL;
 else     if (getChain().getHead().isMinorVersion())     status=NodeEditStatus.MINOR;
 else     status=NodeEditStatus.PATCH;
  }
  return status;
}","/** 
 * Get the editing status of the node based on chain head library or unmanaged library.
 */
public NodeEditStatus getEditStatus(){
  NodeEditStatus status=NodeEditStatus.FULL;
  if (getLibrary() == null)   return status;
  if (getChain() == null) {
    if (getLibrary().isEditable())     status=NodeEditStatus.FULL;
 else     status=NodeEditStatus.NOT_EDITABLE;
  }
 else {
    if (!getChain().isEditable())     status=NodeEditStatus.MANAGED_READONLY;
 else     if (getChain().getHead().isMajorVersion())     status=NodeEditStatus.FULL;
 else     if (getChain().getHead().isMinorVersion())     status=NodeEditStatus.MINOR;
 else     status=NodeEditStatus.PATCH;
  }
  return status;
}",0.9808259587020648
136417,"@Override public void delete(){
  if (getLibrary() != null && getLibrary().isInChain())   getLibrary().getChain().removeAggregate((ComponentNode)this);
  NodeVisitor visitor=new NodeVisitors().new deleteVisitor();
  this.visitAllNodes(visitor);
}","@Override public void delete(){
  if (isDeleteable() && getLibrary() != null && getLibrary().isInChain())   getLibrary().getChain().removeAggregate((ComponentNode)this);
  NodeVisitor visitor=new NodeVisitors().new deleteVisitor();
  this.visitAllNodes(visitor);
}",0.9647058823529412
136418,"/** 
 * Locates the source node for the selected finding in the library navigation view.
 */
private void selectFindingSource(ValidationFinding finding){
  Validatable findingSource=getNodeMappableFindingSource(finding);
  String validationIdentity=findingSource.getValidationIdentity();
  if (validationIdentity == null)   return;
  Node n=NodeFinders.findNodeByValidationIentity(validationIdentity);
  if (n == null)   return;
  LOGGER.debug(""String_Node_Str"" + validationIdentity);
  int e=finding.getMessageKey().lastIndexOf(""String_Node_Str"");
  String error=finding.getMessageKey().substring(++e);
  LOGGER.debug(""String_Node_Str"" + error);
  if (error.equals(TLValidationBuilder.UNRESOLVED_NAMED_ENTITY_REFERENCE)) {
    OtmEventData wd=new OtmEventData();
    wd.setBusinessEvent(OtmActions.typeSelector());
    wd.setNode(null);
    wd.setNodeList(findMatching(finding,error));
    if (!wd.getNodeList().isEmpty() && wd.getNodeList().get(0).isEditable())     otmActions.doEvent(wd);
    validateNode((Node)currentNode);
  }
  LOGGER.debug(""String_Node_Str"" + n + ""String_Node_Str""+ validationIdentity);
  mc.selectNavigatorNodeAndRefresh(n);
}","/** 
 * Locates the source node for the selected finding in the library navigation view.
 */
private void selectFindingSource(ValidationFinding finding){
  Validatable findingSource=getNodeMappableFindingSource(finding);
  String validationIdentity=findingSource.getValidationIdentity();
  if (validationIdentity == null)   return;
  Node n=NodeFinders.findNodeByValidationIentity(validationIdentity);
  if (n == null)   return;
  LOGGER.debug(""String_Node_Str"" + validationIdentity);
  int e=finding.getMessageKey().lastIndexOf(""String_Node_Str"");
  String error=finding.getMessageKey().substring(++e);
  LOGGER.debug(""String_Node_Str"" + error);
  if (error.equals(TLValidationBuilder.UNRESOLVED_NAMED_ENTITY_REFERENCE)) {
    OtmEventData wd=new OtmEventData();
    wd.setBusinessEvent(OtmActions.typeSelector());
    wd.setNode(null);
    wd.setNodeList(findMatching(finding,error));
    if (wd.getNodeList() != null && !wd.getNodeList().isEmpty() && wd.getNodeList().get(0).isEditable())     otmActions.doEvent(wd);
    validateNode((Node)currentNode);
  }
  LOGGER.debug(""String_Node_Str"" + n + ""String_Node_Str""+ validationIdentity);
  mc.selectNavigatorNodeAndRefresh(n);
}",0.9879931389365352
136419,"/** 
 * Move one node to the new destination library. Links the node, the tl object and corrects context.
 * @param source
 * @param destination
 */
public void moveNode(final ComponentNode source,final LibraryNode destination){
  if (destination == null || source == null) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  if (!destination.isTLLibrary()) {
    LOGGER.warn(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (source.isInTLLibrary() && source.isTopLevelObject()) {
    source.getLibrary().moveMember(source,destination);
  }
 else {
    LOGGER.warn(""String_Node_Str"" + source.getName() + ""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"" + source.isInTLLibrary() + ""String_Node_Str""+ source.isTopLevelObject());
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"" + source.getName() + ""String_Node_Str""+ destination.getName());
}","/** 
 * Move one node to the new destination library. Links the node, the tl object and corrects context.
 * @param source
 * @param destination
 */
public void moveNode(final ComponentNode source,final LibraryNode destination){
  if (destination == null || source == null) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  if (!destination.isTLLibrary()) {
    LOGGER.warn(""String_Node_Str"");
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (source.getChain() == destination.getChain()) {
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (source.isInTLLibrary() && source.isTopLevelObject()) {
    source.getLibrary().moveMember(source,destination);
  }
 else {
    LOGGER.warn(""String_Node_Str"" + source.getName() + ""String_Node_Str"");
    LOGGER.debug(""String_Node_Str"" + source.isInTLLibrary() + ""String_Node_Str""+ source.isTopLevelObject());
    DialogUserNotifier.openInformation(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  LOGGER.info(""String_Node_Str"" + source.getName() + ""String_Node_Str""+ destination.getName());
}",0.9317118802619272
136420,"private void addFacet(final TLFacetType facetType){
  if (!(getSelectedNode_NavigatorView() instanceof ComponentNode))   return;
  final ComponentNode current=(ComponentNode)getSelectedNode_NavigatorView();
  if (current != null && current.isBusinessObject()) {
    final ComponentNode propertyOwner=facetType.equals(TLFacetType.CUSTOM) ? current.getDetailFacet() : current;
    String defaultContext=contextController.getDefaultContextId(current.getLibrary());
    String defaultName=""String_Node_Str"";
    boolean canBeEmpty=TLFacetType.QUERY.equals(facetType);
    if (TLFacetType.CUSTOM.equals(facetType)) {
      defaultName=defaultContext;
    }
    final NewFacetWizard wizard=new NewFacetWizard(propertyOwner,defaultName);
    wizard.setValidator(new NewFacetValidator(current,facetType,wizard));
    wizard.run(OtmRegistry.getActiveShell());
    if (!wizard.wasCanceled()) {
      LOGGER.info(""String_Node_Str"" + facetType + ""String_Node_Str""+ wizard.getSelectedProperties());
      BusinessObjectNode bo=(BusinessObjectNode)current;
      if (TLFacetType.QUERY.equals(facetType) && (wizard.getName() == null || wizard.getName().isEmpty())) {
        defaultContext=null;
      }
      FacetNode newFacet=bo.addFacet(wizard.getName(),defaultContext,facetType);
      for (      final PropertyNode n : wizard.getSelectedProperties()) {
        NodeFactory.newComponentMember(newFacet,n.cloneTLObj());
      }
      refresh(bo);
    }
  }
 else {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    LOGGER.warn(""String_Node_Str"" + current);
  }
}","private void addFacet(final TLFacetType facetType){
  if (!(getSelectedNode_NavigatorView() instanceof ComponentNode))   return;
  final ComponentNode current=(ComponentNode)getSelectedNode_NavigatorView();
  if (current != null && current.isBusinessObject()) {
    if (!current.getLibrary().isMajorVersion()) {
      LOGGER.debug(""String_Node_Str"");
      return;
    }
    final ComponentNode propertyOwner=facetType.equals(TLFacetType.CUSTOM) ? current.getDetailFacet() : current;
    String defaultContext=contextController.getDefaultContextId(current.getLibrary());
    String defaultName=""String_Node_Str"";
    boolean canBeEmpty=TLFacetType.QUERY.equals(facetType);
    if (TLFacetType.CUSTOM.equals(facetType)) {
      defaultName=defaultContext;
    }
    final NewFacetWizard wizard=new NewFacetWizard(propertyOwner,defaultName);
    wizard.setValidator(new NewFacetValidator(current,facetType,wizard));
    wizard.run(OtmRegistry.getActiveShell());
    if (!wizard.wasCanceled()) {
      LOGGER.info(""String_Node_Str"" + facetType + ""String_Node_Str""+ wizard.getSelectedProperties());
      BusinessObjectNode bo=(BusinessObjectNode)current;
      if (TLFacetType.QUERY.equals(facetType) && (wizard.getName() == null || wizard.getName().isEmpty())) {
        defaultContext=null;
      }
      FacetNode newFacet=bo.addFacet(wizard.getName(),defaultContext,facetType);
      for (      final PropertyNode n : wizard.getSelectedProperties()) {
        NodeFactory.newComponentMember(newFacet,n.cloneTLObj());
      }
      refresh(bo);
    }
  }
 else {
    DialogUserNotifier.openWarning(""String_Node_Str"",""String_Node_Str"");
    LOGGER.warn(""String_Node_Str"" + current);
  }
}",0.2591117917304747
136421,"public FacetNode addFacet(String name,String context,TLFacetType type){
  if (getLibrary().isMajorVersion() || versionNode == null) {
    TLFacet newTlFacet=getModelObject().addFacet(name,context,type);
    FacetNode ff=(FacetNode)NodeFactory.newComponentMember(this,newTlFacet);
    return ff;
  }
  LOGGER.debug(""String_Node_Str"");
  return null;
}","public FacetNode addFacet(String name,String context,TLFacetType type){
  if (isInHead() || versionNode == null) {
    TLFacet newTlFacet=getModelObject().addFacet(name,context,type);
    FacetNode ff=(FacetNode)NodeFactory.newComponentMember(this,newTlFacet);
    return ff;
  }
  LOGGER.debug(""String_Node_Str"");
  return null;
}",0.9544787077826724
136422,"/** 
 * Remove the node from its library. Remove from the library node and from the underlying tl library. Navigation and family nodes are NOT deleted. Does NOT delete the node or its TL Object contents. TL type assignments are assured to match the assignments in TypeNode.
 */
protected void removeMember(final Node n){
  if (n == null || n.getTLModelObject() == null) {
    LOGGER.debug(""String_Node_Str"" + n.getName() + ""String_Node_Str""+ n.getClass().getSimpleName());
    return;
  }
  if (!(n.getTLModelObject() instanceof LibraryMember)) {
    LOGGER.warn(""String_Node_Str"" + n);
    return;
  }
  n.unlinkNode();
  n.getLibrary().getTLLibrary().removeNamedMember((LibraryMember)n.getTLModelObject());
  n.setLibrary(null);
  n.fixAssignments();
}","/** 
 * Remove the node from its library. Remove from the library node and from the underlying tl library. Navigation and family nodes are NOT deleted. Does NOT delete the node or its TL Object contents. TL type assignments are assured to match the assignments in TypeNode. NOTE - does not replace this node with an earlier version in a version chain.
 */
protected void removeMember(final Node n){
  if (n == null || n.getTLModelObject() == null) {
    LOGGER.debug(""String_Node_Str"" + n.getName() + ""String_Node_Str""+ n.getClass().getSimpleName());
    return;
  }
  if (!(n.getTLModelObject() instanceof LibraryMember)) {
    LOGGER.warn(""String_Node_Str"" + n);
    return;
  }
  n.unlinkNode();
  n.getLibrary().getTLLibrary().removeNamedMember((LibraryMember)n.getTLModelObject());
  n.setLibrary(null);
  n.fixAssignments();
}",0.9508196721311476
136423,"/** 
 * Move a node from its library to a different library. Moves the node and underlying TL object.
 * @param source
 * @param destination
 */
public void moveMember(final Node source,LibraryNode destination){
  if (source == null || source.getModelObject() == null || source.getTLModelObject() == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (destination == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!(destination.getTLaLib() instanceof TLLibrary))   throw new IllegalArgumentException(""String_Node_Str"");
  if (source.isService() && destination.hasService())   return;
  ContextController cc=OtmRegistry.getMainController().getContextController();
  cc.copyContext(source,destination);
  source.unlinkNode();
  source.getLibrary().getTLLibrary().moveNamedMember((LibraryMember)source.getTLModelObject(),destination.getLibrary().getTLLibrary());
  destination.linkMember(source);
  if (isInChain()) {
    destination.getChain().add((ComponentNode)source);
  }
}","/** 
 * Move a node from its library to a different library. Moves the node and underlying TL object.
 * @param source
 * @param destination
 */
public void moveMember(final Node source,LibraryNode destination){
  if (source == null || source.getModelObject() == null || source.getTLModelObject() == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (destination == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!(destination.getTLaLib() instanceof TLLibrary))   throw new IllegalArgumentException(""String_Node_Str"");
  if (source.isService() && destination.hasService())   return;
  ContextController cc=OtmRegistry.getMainController().getContextController();
  cc.copyContext(source,destination);
  if (isInChain()) {
    if (source instanceof ComplexComponentInterface)     getChain().getComplexAggregate().getChildren().remove(source);
 else     if (source instanceof SimpleComponentInterface)     getChain().getSimpleAggregate().getChildren().remove(source);
    LOGGER.debug(""String_Node_Str"" + source);
  }
  source.unlinkNode();
  source.getLibrary().getTLLibrary().moveNamedMember((LibraryMember)source.getTLModelObject(),destination.getLibrary().getTLLibrary());
  destination.linkMember(source);
  if (destination.isInChain()) {
    destination.getChain().add((ComponentNode)source);
  }
}",0.8611464968152867
136424,"@Override public List<Node> getDescendants_NamedTypes(){
  HashSet<Node> namedKids=new HashSet<Node>();
  for (  Node c : getChildren()) {
    if (c.isService())     namedKids.add(c);
 else     if (c.isTypeProvider()) {
      namedKids.add(c);
    }
 else     if (c.hasChildren())     namedKids.addAll(c.getDescendants_NamedTypes());
  }
  return new ArrayList<Node>(namedKids);
}","/** 
 * Traverse via hasChildren. For version chains, it uses the version node and does not touch aggregates.
 */
@Override public List<Node> getDescendants_NamedTypes(){
  HashSet<Node> namedKids=new HashSet<Node>();
  for (  Node c : getChildren()) {
    if (c.isService())     namedKids.add(c);
 else     if (c.isTypeProvider()) {
      namedKids.add(c);
    }
 else     if (c.hasChildren())     namedKids.addAll(c.getDescendants_NamedTypes());
  }
  return new ArrayList<Node>(namedKids);
}",0.8695652173913043
136425,"/** 
 * Get the editing status of the node based on chain and library.
 */
public NodeEditStatus getEditStatus(){
  NodeEditStatus status=NodeEditStatus.FULL;
  if (getLibrary() == null)   return status;
  if (getChain() == null) {
    if (getLibrary().isEditable())     status=NodeEditStatus.FULL;
 else     status=NodeEditStatus.NOT_EDITABLE;
  }
 else {
    if (!getChain().isEditable())     status=NodeEditStatus.MANAGED_READONLY;
 else     if (getChain().getHead().isMajorVersion())     status=NodeEditStatus.FULL;
 else     if (getChain().getHead().isMinorVersion())     status=NodeEditStatus.MINOR;
 else     status=NodeEditStatus.PATCH;
  }
  return status;
}","/** 
 * Get the editing status of the node based on chain head library or unmanaged library.
 */
public NodeEditStatus getEditStatus(){
  NodeEditStatus status=NodeEditStatus.FULL;
  if (getLibrary() == null)   return status;
  if (getChain() == null) {
    if (getLibrary().isEditable())     status=NodeEditStatus.FULL;
 else     status=NodeEditStatus.NOT_EDITABLE;
  }
 else {
    if (!getChain().isEditable())     status=NodeEditStatus.MANAGED_READONLY;
 else     if (getChain().getHead().isMajorVersion())     status=NodeEditStatus.FULL;
 else     if (getChain().getHead().isMinorVersion())     status=NodeEditStatus.MINOR;
 else     status=NodeEditStatus.PATCH;
  }
  return status;
}",0.9808259587020648
136426,"@Override public void delete(){
  if (getLibrary() != null && getLibrary().isInChain())   getLibrary().getChain().removeAggregate((ComponentNode)this);
  NodeVisitor visitor=new NodeVisitors().new deleteVisitor();
  this.visitAllNodes(visitor);
}","@Override public void delete(){
  if (isDeleteable() && getLibrary() != null && getLibrary().isInChain())   getLibrary().getChain().removeAggregate((ComponentNode)this);
  NodeVisitor visitor=new NodeVisitors().new deleteVisitor();
  this.visitAllNodes(visitor);
}",0.9647058823529412
136427,"/** 
 * Locates the source node for the selected finding in the library navigation view.
 */
private void selectFindingSource(ValidationFinding finding){
  Validatable findingSource=getNodeMappableFindingSource(finding);
  String validationIdentity=findingSource.getValidationIdentity();
  if (validationIdentity == null)   return;
  Node n=NodeFinders.findNodeByValidationIentity(validationIdentity);
  if (n == null)   return;
  LOGGER.debug(""String_Node_Str"" + validationIdentity);
  int e=finding.getMessageKey().lastIndexOf(""String_Node_Str"");
  String error=finding.getMessageKey().substring(++e);
  LOGGER.debug(""String_Node_Str"" + error);
  if (error.equals(TLValidationBuilder.UNRESOLVED_NAMED_ENTITY_REFERENCE)) {
    OtmEventData wd=new OtmEventData();
    wd.setBusinessEvent(OtmActions.typeSelector());
    wd.setNode(null);
    wd.setNodeList(findMatching(finding,error));
    if (!wd.getNodeList().isEmpty() && wd.getNodeList().get(0).isEditable())     otmActions.doEvent(wd);
    validateNode((Node)currentNode);
  }
  LOGGER.debug(""String_Node_Str"" + n + ""String_Node_Str""+ validationIdentity);
  mc.selectNavigatorNodeAndRefresh(n);
}","/** 
 * Locates the source node for the selected finding in the library navigation view.
 */
private void selectFindingSource(ValidationFinding finding){
  Validatable findingSource=getNodeMappableFindingSource(finding);
  String validationIdentity=findingSource.getValidationIdentity();
  if (validationIdentity == null)   return;
  Node n=NodeFinders.findNodeByValidationIentity(validationIdentity);
  if (n == null)   return;
  LOGGER.debug(""String_Node_Str"" + validationIdentity);
  int e=finding.getMessageKey().lastIndexOf(""String_Node_Str"");
  String error=finding.getMessageKey().substring(++e);
  LOGGER.debug(""String_Node_Str"" + error);
  if (error.equals(TLValidationBuilder.UNRESOLVED_NAMED_ENTITY_REFERENCE)) {
    OtmEventData wd=new OtmEventData();
    wd.setBusinessEvent(OtmActions.typeSelector());
    wd.setNode(null);
    wd.setNodeList(findMatching(finding,error));
    if (wd.getNodeList() != null && !wd.getNodeList().isEmpty() && wd.getNodeList().get(0).isEditable())     otmActions.doEvent(wd);
    validateNode((Node)currentNode);
  }
  LOGGER.debug(""String_Node_Str"" + n + ""String_Node_Str""+ validationIdentity);
  mc.selectNavigatorNodeAndRefresh(n);
}",0.9879931389365352
136428,"@Override public String getLabel(){
  String label=""String_Node_Str"";
  if (head != null) {
    label=head.getLabel();
  }
  return label;
}","@Override public String getLabel(){
  String label=""String_Node_Str"";
  if (getHead() != null) {
    label=getHead().getLabel();
  }
  return label;
}",0.9517241379310344
136429,"@Override public String getName(){
  String label=""String_Node_Str"";
  if (head != null) {
    NamespaceHandler handler=head.getNsHandler();
    if (handler != null)     label=head.getName() + ""String_Node_Str"" + handler.getNSVersion(head.getNamespace());
  }
  return label;
}","@Override public String getName(){
  String label=""String_Node_Str"";
  if (getHead() != null) {
    NamespaceHandler handler=getHead().getNsHandler();
    if (handler != null)     label=getHead().getName() + ""String_Node_Str"" + handler.getNSVersion(getHead().getNamespace());
  }
  return label;
}",0.4216027874564459
136430,"public LibraryNode getHead(){
  return head;
}","public LibraryNode getHead(){
  return getLibrary();
}",0.88
136431,"/** 
 * Create a new chain and add to passed project. Model the project item and add to the new chain.
 * @param pi - project item to be modeled and added to chain
 * @param project - parent of the chain
 */
public LibraryChainNode(ProjectItem pi,ProjectNode project){
  super();
  if (pi == null || pi.getContent() == null) {
    LOGGER.debug(""String_Node_Str"");
    return;
  }
  setIdentity(pi.getBaseNamespace());
  setParent(project);
  project.getChildren().add(this);
  head=null;
  chain=new ArrayList<LibraryNode>();
  createAggregates();
  List<ProjectItem> piChain=null;
  try {
    piChain=pi.getProjectManager().getVersionChain(pi);
  }
 catch (  VersionSchemeException e1) {
    throw (new IllegalStateException(""String_Node_Str""));
  }
  for (  ProjectItem item : piChain) {
    add(item);
  }
  setLibrary(head);
}","/** 
 * Create a new chain and add to passed project. Model the project item and add to the new chain.
 * @param pi - project item to be modeled and added to chain
 * @param project - parent of the chain
 */
public LibraryChainNode(ProjectItem pi,ProjectNode project){
  super();
  if (pi == null || pi.getContent() == null) {
    LOGGER.debug(""String_Node_Str"");
    return;
  }
  setIdentity(pi.getBaseNamespace());
  setParent(project);
  project.getChildren().add(this);
  setHead(null);
  chain=new ArrayList<LibraryNode>();
  createAggregates();
  List<ProjectItem> piChain=null;
  try {
    piChain=pi.getProjectManager().getVersionChain(pi);
  }
 catch (  VersionSchemeException e1) {
    throw (new IllegalStateException(""String_Node_Str""));
  }
  for (  ProjectItem item : piChain) {
    add(item);
  }
  setLibrary(getHead());
}",0.9838226482923906
136432,"/** 
 * See also   {@link ProjectNode#makeChainIdentity(ProjectItem)} 9/23/2013 - this method does notuse the repository for managed base namespaces. It matches the behavior or makeChainIdentity in ProjectNode.
 */
public String makeChainIdentity(){
  String name=head.getName();
  NamespaceHandler handler=head.getNsHandler();
  String baseNS=handler.removeVersion(head.getNamespace());
  return makeIdentity(name,baseNS,handler.getNS_Major(head.getNamespace()));
}","/** 
 * See also   {@link ProjectNode#makeChainIdentity(ProjectItem)} 9/23/2013 - this method does notuse the repository for managed base namespaces. It matches the behavior or makeChainIdentity in ProjectNode.
 */
public String makeChainIdentity(){
  String name=getHead().getName();
  NamespaceHandler handler=getHead().getNsHandler();
  String baseNS=handler.removeVersion(getHead().getNamespace());
  return makeIdentity(name,baseNS,handler.getNS_Major(getHead().getNamespace()));
}",0.9453781512605042
136433,"/** 
 * Return the Simple/Complex/Service navNode in the latest library that matches the type of this node. 
 * @param parent
 */
public NavNode getLatestNavNode(ComponentNode node){
  Node parent=node.getOwningNavNode();
  for (  Node nav : head.getChildren()) {
    if (parent.getComponentType().equals(nav.getComponentType()))     return (NavNode)nav;
  }
  return null;
}","/** 
 * Return the Simple/Complex/Service navNode in the latest library that matches the type of this node. 
 * @param parent
 */
public NavNode getLatestNavNode(ComponentNode node){
  Node parent=node.getOwningNavNode();
  for (  Node nav : getHead().getChildren()) {
    if (parent.getComponentType().equals(nav.getComponentType()))     return (NavNode)nav;
  }
  return null;
}",0.9827814569536424
136434,"public boolean isMinor(){
  return head.isMinorVersion();
}","public boolean isMinor(){
  return getHead().isMinorVersion();
}",0.943089430894309
136435,"/** 
 * All members of the chain must have the same name, base namespace and major version number.
 */
@Override public String getIdentity(){
  String identity=""String_Node_Str"";
  if (head != null) {
    NamespaceHandler handler=head.getNsHandler();
    if (handler != null)     identity=makeIdentity();
  }
  return identity;
}","/** 
 * All members of the chain must have the same name, base namespace and major version number.
 */
@Override public String getIdentity(){
  String identity=""String_Node_Str"";
  if (getHead() != null) {
    NamespaceHandler handler=getHead().getNsHandler();
    if (handler != null)     identity=makeIdentity();
  }
  return identity;
}",0.9610778443113772
136436,"public boolean isMajor(){
  return head.isMajorVersion();
}","public boolean isMajor(){
  return getHead().isMajorVersion();
}",0.943089430894309
136437,"public boolean isPatch(){
  return head.isPatchVersion();
}","public boolean isPatch(){
  return getHead().isPatchVersion();
}",0.943089430894309
136438,"@Test public void unlockWithCommitShouldCommitChanges() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  String coreObjectName=""String_Node_Str"";
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(coreObjectName).addProperty(""String_Node_Str"").setSimpleType().get());
  mc.getRepositoryController().unlock(library.getHead());
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  library.close();
  RepositoryItemNode nodeToRetrive=findRepositoryItem(library,getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(library.getName(),nodes.getName());
  Assert.assertEquals(library.getHead().getNamespace(),nodes.getHead().getNamespace());
  Assert.assertEquals(1,nodes.getDescendants_NamedTypes().size());
}","@Test public void unlockWithCommitShouldCommitChanges() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  String coreObjectName=""String_Node_Str"";
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(coreObjectName).addProperty(""String_Node_Str"").setSimpleType().get());
  mc.getRepositoryController().unlock(library.getHead());
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  String libraryName=library.getHead().getName();
  String libraryChainName=library.getName();
  String namespace=library.getNamespace();
  library.close();
  RepositoryItemNode nodeToRetrive=findRepositoryItem(libraryName,namespace,getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(libraryChainName,nodes.getName());
  Assert.assertEquals(namespace,nodes.getHead().getNamespace());
  Assert.assertEquals(1,nodes.getDescendants_NamedTypes().size());
}",0.9253521126760564
136439,"@Test public void unlockWithoutCommitShouldRevertChanges() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").setSimpleType().get());
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  ProjectNode revertProject=mc.getRepositoryController().unlockAndRevert(library.getHead());
  Assert.assertEquals(1,revertProject.getLibraries().size());
  LibraryNode revertedLib=revertProject.getLibraries().get(0);
  Assert.assertEquals(0,revertedLib.getDescendants_NamedTypes().size());
  RepositoryItemNode nodeToRetrive=findRepositoryItem(revertedLib.getChain(),getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(library.getName(),nodes.getName());
  Assert.assertEquals(library.getHead().getNamespace(),nodes.getHead().getNamespace());
  Assert.assertEquals(0,nodes.getDescendants_NamedTypes().size());
}","@Test public void unlockWithoutCommitShouldRevertChanges() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(uploadProject,pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").setSimpleType().get());
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  String libraryName=library.getName();
  String namespace=library.getNamespace();
  ProjectNode revertProject=mc.getRepositoryController().unlockAndRevert(library.getHead());
  Assert.assertEquals(1,revertProject.getLibraries().size());
  LibraryNode revertedLib=revertProject.getLibraries().get(0);
  Assert.assertEquals(0,revertedLib.getDescendants_NamedTypes().size());
  RepositoryItemNode nodeToRetrive=findRepositoryItem(revertedLib.getChain(),getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(libraryName,nodes.getName());
  Assert.assertEquals(namespace,nodes.getNamespace());
  Assert.assertEquals(0,nodes.getDescendants_NamedTypes().size());
}",0.9490445859872612
136440,"@Test public void unlockWithoutCommitForDefaultProjectShouldRevertChanges() throws RepositoryException, LibrarySaveException {
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(pc.getDefaultProject(),pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").setSimpleType().get());
  List<Node> descendants=library.getDescendants_NamedTypes();
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  Assert.assertEquals(1,descendants.size());
  ProjectNode revertProject=mc.getRepositoryController().unlockAndRevert(library.getHead());
  Assert.assertEquals(1,revertProject.getLibraries().size());
  LibraryNode revertedLib=revertProject.getLibraries().get(0);
  Assert.assertEquals(0,revertedLib.getDescendants_NamedTypes().size());
  RepositoryItemNode nodeToRetrive=findRepositoryItem(revertedLib.getChain(),getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(library.getName(),nodes.getName());
  Assert.assertEquals(library.getHead().getNamespace(),nodes.getHead().getNamespace());
  Assert.assertEquals(0,nodes.getDescendants_NamedTypes().size());
}","@Test public void unlockWithoutCommitForDefaultProjectShouldRevertChanges() throws RepositoryException, LibrarySaveException {
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).build(pc.getDefaultProject(),pc);
  LibraryChainNode library=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  library.getHead().lock();
  library.getHead().addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").setSimpleType().get());
  List<Node> descendants=library.getDescendants_NamedTypes();
  Assert.assertEquals(1,library.getDescendants_NamedTypes().size());
  Assert.assertEquals(1,descendants.size());
  String libraryName=library.getName();
  String libraryNamespace=library.getNamespace();
  ProjectNode revertProject=mc.getRepositoryController().unlockAndRevert(library.getHead());
  Assert.assertEquals(1,revertProject.getLibraries().size());
  LibraryNode revertedLib=revertProject.getLibraries().get(0);
  Assert.assertEquals(0,revertedLib.getDescendants_NamedTypes().size());
  RepositoryItemNode nodeToRetrive=findRepositoryItem(revertedLib.getChain(),getRepositoryForTest());
  pc.add(defaultProject,nodeToRetrive.getItem());
  Assert.assertEquals(1,defaultProject.getChildren().size());
  LibraryChainNode nodes=(LibraryChainNode)defaultProject.getChildren().get(0);
  Assert.assertEquals(libraryName,nodes.getName());
  Assert.assertEquals(libraryNamespace,nodes.getNamespace());
  Assert.assertEquals(0,nodes.getDescendants_NamedTypes().size());
}",0.9502177971375232
136441,"/** 
 * Versioning - major, minor, patch Project controller Legal library, illegal library (duplicate VWA namespace:name) Assure new version is in LibraryChain correctly. Assure old version is not directly in TLProject or projectNode.children Assure new version is in repository. Assure versions can start with 0.0.0 and variations.
 */
@Test public void createMajorVersionWithSimpleCoreWithoutType() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).makeFinal().build(uploadProject,pc);
  testLibary.addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").get());
  LibraryChainNode chain=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  LibraryNode newMajor=rc.createMajorVersion(chain.getHead());
  ValidationFindings findings=newMajor.validate();
  Assert.assertEquals(0,findings.getFindingsAsList(FindingType.ERROR).size());
}","@Test public void createMajorVersionWithSimpleCoreWithoutType() throws RepositoryException, LibrarySaveException {
  ProjectNode uploadProject=createProject(""String_Node_Str"",getRepositoryForTest(),""String_Node_Str"");
  LibraryNode testLibary=LibraryNodeBuilder.create(""String_Node_Str"",getRepositoryForTest().getNamespace() + ""String_Node_Str"",""String_Node_Str"",new Version(1,0,0)).makeFinal().build(uploadProject,pc);
  testLibary.addMember(ComponentNodeBuilder.createCoreObject(""String_Node_Str"").addProperty(""String_Node_Str"").get());
  LibraryChainNode chain=rc.manage(getRepositoryForTest(),Collections.singletonList(testLibary)).get(0);
  LibraryNode newMajor=rc.createMajorVersion(chain.getHead());
  ValidationFindings findings=newMajor.validate();
  Assert.assertEquals(0,findings.getFindingsAsList(FindingType.ERROR).size());
}",0.8325881768504719
136442,"private void assertAllLibrariesLoadedCorrectly(LibraryChainNode baseChain,LibraryChainNode extChain){
  mc.getLibraryController().remove(Collections.singletonList(baseChain));
  mc.getLibraryController().remove(Collections.singletonList(extChain));
  Assert.assertEquals(0,uploadProject.getChildren().size());
  RepositoryItemNode nodeToRetrive=findRepositoryItem(extChain,getRepositoryForTest());
  pc.add(uploadProject,nodeToRetrive.getItem());
  Assert.assertEquals(2,uploadProject.getChildren().size());
  LibraryChainNode lib=findLibrary(extLib.getName(),uploadProject.getChildren());
  VWA_Node vwaNode=(VWA_Node)lib.getDescendants_NamedTypes().get(0);
  AttributeNode attr=(AttributeNode)vwaNode.getAttributeFacet().getChildren().get(0);
  Assert.assertNotSame(ModelNode.getUnassignedNode(),attr.getTypeNode());
  Assert.assertSame(attr.getTypeNode().getModelObject().getTLModelObj(),attr.getTLTypeObject());
}","private void assertAllLibrariesLoadedCorrectly(LibraryChainNode baseChain,LibraryChainNode extChain){
  mc.getLibraryController().remove(Collections.singletonList(baseChain));
  RepositoryItemNode nodeToRetrive=findRepositoryItem(extChain,getRepositoryForTest());
  mc.getLibraryController().remove(Collections.singletonList(extChain));
  Assert.assertEquals(0,uploadProject.getChildren().size());
  pc.add(uploadProject,nodeToRetrive.getItem());
  Assert.assertEquals(2,uploadProject.getChildren().size());
  LibraryChainNode lib=findLibrary(extLib.getName(),uploadProject.getChildren());
  VWA_Node vwaNode=(VWA_Node)lib.getDescendants_NamedTypes().get(0);
  AttributeNode attr=(AttributeNode)vwaNode.getAttributeFacet().getChildren().get(0);
  Assert.assertNotSame(ModelNode.getUnassignedNode(),attr.getTypeNode());
  Assert.assertSame(attr.getTypeNode().getModelObject().getTLModelObj(),attr.getTLTypeObject());
}",0.9040348964013086
136443,"private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  int tableLimit=getLimit();
  int connLimit=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int limitValue=connLimit <= 0 ? tableLimit : (tableLimit < connLimit ? tableLimit : connLimit);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    int analysedColumnIndex[]=new int[analysisElementList.size()];
    MetadataColumn mColumn=(MetadataColumn)analysisElementList.get(0);
    MetadataTable metadataTable=ColumnHelper.getColumnOwnerAsMetadataTable(mColumn);
    EList<MetadataColumn> columns=metadataTable.getColumns();
    List<String> columnLabels=new ArrayList<String>();
    for (    MetadataColumn column : columns) {
      columnLabels.add(column.getLabel());
    }
    String[] analysedColumnName=new String[analysisElementList.size()];
    for (int j=0; j < analysisElementList.size(); j++) {
      analysedColumnName[j]=((MetadataColumn)analysisElementList.get(j)).getLabel();
      analysedColumnIndex[j]=columnLabels.indexOf(analysedColumnName[j]);
    }
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord++;
      if (currentRecord <= headValue) {
        limitValue++;
        continue;
      }
      if (limitValue != -1 && currentRecord > limitValue) {
        break;
      }
      String[] values=csvReader.getValues();
      String[] analysedValues=new String[analysisElementList.size()];
      for (int i=0; i < analysedColumnIndex.length; i++) {
        analysedValues[i]=values[analysedColumnIndex[i]];
      }
      handleRow(analysedValues);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}","private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  int tableLimit=getLimit();
  int connLimit=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int limitValue=connLimit <= 0 ? tableLimit : (tableLimit < connLimit ? tableLimit : connLimit);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    int analysedColumnIndex[]=new int[analysisElementList.size()];
    MetadataColumn mColumn=(MetadataColumn)analysisElementList.get(0);
    MetadataTable metadataTable=ColumnHelper.getColumnOwnerAsMetadataTable(mColumn);
    EList<MetadataColumn> columns=metadataTable.getColumns();
    List<String> columnLabels=new ArrayList<String>();
    for (    MetadataColumn column : columns) {
      columnLabels.add(column.getLabel());
    }
    String[] analysedColumnName=new String[analysisElementList.size()];
    for (int j=0; j < analysisElementList.size(); j++) {
      analysedColumnName[j]=((MetadataColumn)analysisElementList.get(j)).getLabel();
      analysedColumnIndex[j]=columnLabels.indexOf(analysedColumnName[j]);
    }
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord++;
      if (currentRecord <= headValue) {
        limitValue++;
        continue;
      }
      if (limitValue != -1 && currentRecord > limitValue) {
        break;
      }
      String[] values=csvReader.getValues();
      String[] analysedValues=new String[analysisElementList.size()];
      for (int i=0; i < analysedColumnIndex.length; i++) {
        if (values.length <= i) {
          analysedValues[i]=StringUtils.EMPTY;
        }
 else {
          analysedValues[i]=values[analysedColumnIndex[i]];
        }
      }
      handleRow(analysedValues);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}",0.9746979712787782
136444,"public Record next() throws IOException {
  currentRowIndex++;
  if (currentRowIndex < csvHeadValue) {
    if (hasNext()) {
      return next();
    }
 else {
      return null;
    }
  }
  if (csvLimitValue != -1 && currentRowIndex > csvLimitValue - 1) {
    return null;
  }
  String[] values=csvReader.getValues();
  String[] analysedValues=new String[analysedColumnIndex.length];
  for (int i=0; i < analysedColumnIndex.length; i++) {
    analysedValues[i]=values[analysedColumnIndex[i]];
  }
  return createRichRecord(analysedValues);
}","public Record next() throws IOException {
  currentRowIndex++;
  if (currentRowIndex < csvHeadValue) {
    if (hasNext()) {
      return next();
    }
 else {
      return null;
    }
  }
  if (csvLimitValue != -1 && currentRowIndex > csvLimitValue - 1) {
    return null;
  }
  String[] values=csvReader.getValues();
  String[] analysedValues=new String[analysedColumnIndex.length];
  for (int i=0; i < analysedColumnIndex.length; i++) {
    if (values.length <= i) {
      analysedValues[i]=StringUtils.EMPTY;
    }
 else {
      analysedValues[i]=values[analysedColumnIndex[i]];
    }
  }
  return createRichRecord(analysedValues);
}",0.91928632115548
136445,"@SuppressWarnings(""String_Node_Str"") private void handleReferenced(RepositoryNode parent){
  Project currentProject=((DQRepositoryNode)parent).getProject();
  if (parent.getType().equals(ENodeType.SYSTEM_FOLDER)) {
    for (    ProjectReference refProject : (List<ProjectReference>)currentProject.getEmfProject().getReferencedProjects()) {
      String parentBranch=ProjectManager.getInstance().getMainProjectBranch(currentProject);
      org.talend.core.model.properties.Project emfProject=refProject.getReferencedProject();
      if (emfProject.getUrl() != null && emfProject.getUrl().startsWith(""String_Node_Str"") || (refProject.getBranch() != null && refProject.getBranch().equals(parentBranch))) {
        DQRepositoryNode referencedProjectNode=new DQRepositoryNode(null,parent,ENodeType.REFERENCED_PROJECT,currentProject);
        referencedProjectNode.setProperties(EProperties.LABEL,emfProject.getLabel());
        referencedProjectNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
        parent.getChildren().add(referencedProjectNode);
        try {
          Object[] createWorkspaceRootChildren=createWorkspaceRootChildren(ResourceManager.getRoot(),emfProject.getTechnicalLabel());
          referencedProjectNode.getChildren().addAll((Collection<? extends IRepositoryNode>)Arrays.asList(createWorkspaceRootChildren));
        }
 catch (        CoreException e) {
          log.error(e,e);
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void handleReferenced(RepositoryNode parent){
  Project currentProject=((DQRepositoryNode)parent).getProject();
  if (parent.getType().equals(ENodeType.SYSTEM_FOLDER)) {
    for (    ProjectReference refProject : currentProject.getProjectReferenceList()) {
      if (ProjectManager.validReferenceProject(currentProject.getEmfProject(),refProject)) {
        org.talend.core.model.properties.Project emfProject=refProject.getReferencedProject();
        DQRepositoryNode referencedProjectNode=new DQRepositoryNode(null,parent,ENodeType.REFERENCED_PROJECT,currentProject);
        referencedProjectNode.setProperties(EProperties.LABEL,emfProject.getLabel());
        referencedProjectNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
        parent.getChildren().add(referencedProjectNode);
        try {
          Object[] createWorkspaceRootChildren=createWorkspaceRootChildren(ResourceManager.getRoot(),emfProject.getTechnicalLabel());
          referencedProjectNode.getChildren().addAll((Collection<? extends IRepositoryNode>)Arrays.asList(createWorkspaceRootChildren));
        }
 catch (        CoreException e) {
          log.error(e,e);
        }
      }
    }
  }
}",0.7876787678767877
136446,"/** 
 * DOC talend Comment method ""getWorkspaceRootChildren"".
 * @param element
 * @return
 * @throws CoreException
 */
private Object[] createWorkspaceRootChildren(Object element,String projectTechnicalLabel) throws CoreException {
  Project inWhichProject=ProxyRepositoryManager.getInstance().getProjectFromProjectTechnicalLabel(projectTechnicalLabel);
  Object currentOpenProject=null;
  for (  Object child : super.getChildren(element)) {
    if (child instanceof IProject) {
      if (((IProject)child).getName().equals(projectTechnicalLabel)) {
        currentOpenProject=child;
        break;
      }
    }
  }
  List<Object> folders=new ArrayList<Object>();
  Object[] rootFolders=new Object[0];
  if (currentOpenProject != null) {
    rootFolders=((IProject)currentOpenProject).members(false);
    for (    Object folder : rootFolders) {
      IRepositoryNode node=null;
      if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(RepositoryNodeHelper.PREFIX_TDQ)) {
        IFolder iFolder=(IFolder)folder;
        if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
          continue;
        }
        IPath relativePath=iFolder.getFullPath().makeRelativeTo(((IProject)currentOpenProject).getFullPath());
        ERepositoryObjectType respositoryObjectType=RepositoryNodeBuilder.getInstance().retrieveRepObjectTypeByPath(relativePath.toOSString());
        node=createNewRepNode(respositoryObjectType,inWhichProject);
      }
      if (folder instanceof IFolder) {
        String folderName=((IFolder)folder).getName();
        if (EResourceConstant.METADATA.getName().equals(folderName)) {
          node=createNewRepNode(ERepositoryObjectType.METADATA,inWhichProject);
        }
 else         if (PluginChecker.isTDQLoaded() && EResourceConstant.CONTEXT.getName().equals(folderName)) {
          node=createNewRepNode(ERepositoryObjectType.CONTEXT,inWhichProject);
        }
      }
      if (node != null) {
        folders.add(node);
      }
    }
  }
  if (inWhichProject.isMainProject()) {
    RecycleBinRepNode recycleBin=new RecycleBinRepNode(DefaultMessagesImpl.getString(""String_Node_Str""),inWhichProject);
    folders.add(recycleBin);
  }
  if (org.talend.core.PluginChecker.isRefProjectLoaded() && inWhichProject.getEmfProject() != null && inWhichProject.getEmfProject().getReferencedProjects().size() > 0) {
    if (!ProxyRepositoryManager.getInstance().isMergeRefProject()) {
      DQRepositoryNode refProjectNode=createNewRepNode(ERepositoryObjectType.REFERENCED_PROJECTS,inWhichProject);
      refProjectNode.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS.getLabel());
      refProjectNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
      folders.add(refProjectNode);
      handleReferenced(refProjectNode);
    }
  }
  return sortRepositoryNode(folders.toArray(),ComparatorsFactory.ROOT_NODES_COMPARATOR_ID);
}","/** 
 * DOC talend Comment method ""getWorkspaceRootChildren"".
 * @param element
 * @return
 * @throws CoreException
 */
private Object[] createWorkspaceRootChildren(Object element,String projectTechnicalLabel) throws CoreException {
  Project inWhichProject=ProxyRepositoryManager.getInstance().getProjectFromProjectTechnicalLabel(projectTechnicalLabel);
  Object currentOpenProject=null;
  for (  Object child : super.getChildren(element)) {
    if (child instanceof IProject) {
      if (((IProject)child).getName().equals(projectTechnicalLabel)) {
        currentOpenProject=child;
        break;
      }
    }
  }
  List<Object> folders=new ArrayList<Object>();
  Object[] rootFolders=new Object[0];
  if (currentOpenProject != null) {
    rootFolders=((IProject)currentOpenProject).members(false);
    for (    Object folder : rootFolders) {
      IRepositoryNode node=null;
      if (folder instanceof IFolder && ((IFolder)folder).getName().startsWith(RepositoryNodeHelper.PREFIX_TDQ)) {
        IFolder iFolder=(IFolder)folder;
        if (((IFolder)folder).getName().trim().equals(""String_Node_Str"")) {
          continue;
        }
        IPath relativePath=iFolder.getFullPath().makeRelativeTo(((IProject)currentOpenProject).getFullPath());
        ERepositoryObjectType respositoryObjectType=RepositoryNodeBuilder.getInstance().retrieveRepObjectTypeByPath(relativePath.toOSString());
        node=createNewRepNode(respositoryObjectType,inWhichProject);
      }
      if (folder instanceof IFolder) {
        String folderName=((IFolder)folder).getName();
        if (EResourceConstant.METADATA.getName().equals(folderName)) {
          node=createNewRepNode(ERepositoryObjectType.METADATA,inWhichProject);
        }
 else         if (PluginChecker.isTDQLoaded() && EResourceConstant.CONTEXT.getName().equals(folderName)) {
          node=createNewRepNode(ERepositoryObjectType.CONTEXT,inWhichProject);
        }
      }
      if (node != null) {
        folders.add(node);
      }
    }
  }
  if (inWhichProject.isMainProject()) {
    RecycleBinRepNode recycleBin=new RecycleBinRepNode(DefaultMessagesImpl.getString(""String_Node_Str""),inWhichProject);
    folders.add(recycleBin);
  }
  if (org.talend.core.PluginChecker.isRefProjectLoaded() && inWhichProject.getEmfProject() != null && inWhichProject.getProjectReferenceList().size() > 0) {
    if (!ProxyRepositoryManager.getInstance().isMergeRefProject()) {
      DQRepositoryNode refProjectNode=createNewRepNode(ERepositoryObjectType.REFERENCED_PROJECTS,inWhichProject);
      refProjectNode.setProperties(EProperties.LABEL,ERepositoryObjectType.REFERENCED_PROJECTS.getLabel());
      refProjectNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
      folders.add(refProjectNode);
      handleReferenced(refProjectNode);
    }
  }
  return sortRepositoryNode(folders.toArray(),ComparatorsFactory.ROOT_NODES_COMPARATOR_ID);
}",0.99079754601227
136447,"@Override public int compare(Viewer iviewer,Object o1,Object o2){
  DQRepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(((ItemRecord)o1).getElement());
  DQRepositoryNode recursiveFind2=RepositoryNodeHelper.recursiveFind(((ItemRecord)o2).getElement());
  return new RepositoryNodeComparator().compare(recursiveFind,recursiveFind2);
}","@Override public int compare(Viewer iviewer,Object o1,Object o2){
  DQRepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(((ItemRecord)o1).getElement());
  DQRepositoryNode recursiveFind2=RepositoryNodeHelper.recursiveFind(((ItemRecord)o2).getElement());
  return repositoryNodeComparator.compare(recursiveFind,recursiveFind2);
}",0.9883720930232558
136448,"/** 
 * DOC bZhou Comment method ""createRepositoryTree"".
 * @param top
 */
protected void createRepositoryTree(Composite top){
  Composite treeComposite=new Composite(top,SWT.NONE);
  treeComposite.setLayout(new GridLayout(2,false));
  treeComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  repositoryTree=new ContainerCheckedTreeViewer(treeComposite);
  repositoryTree.setContentProvider(new FileTreeContentProvider());
  repositoryTree.setLabelProvider(new FileTreeLabelProvider());
  repositoryTree.setInput(writer.computeInput(specifiedPath));
  repositoryTree.expandAll();
  repositoryTree.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  if (intCheckedElements != null) {
    List<ItemRecord> selectedItemRecords=new ArrayList<ItemRecord>();
    for (    Object intCheckedElement : intCheckedElements) {
      getFileFromNode(selectedItemRecords,(IRepositoryNode)intCheckedElement);
    }
    repositoryTree.setCheckedElements(selectedItemRecords.toArray());
  }
  repositoryTree.setComparator(new ViewerComparator(){
    @Override public int compare(    Viewer iviewer,    Object o1,    Object o2){
      DQRepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(((ItemRecord)o1).getElement());
      DQRepositoryNode recursiveFind2=RepositoryNodeHelper.recursiveFind(((ItemRecord)o2).getElement());
      return new RepositoryNodeComparator().compare(recursiveFind,recursiveFind2);
    }
  }
);
  createUtilityButtons(treeComposite);
}","/** 
 * DOC bZhou Comment method ""createRepositoryTree"".
 * @param top
 */
protected void createRepositoryTree(Composite top){
  Composite treeComposite=new Composite(top,SWT.NONE);
  treeComposite.setLayout(new GridLayout(2,false));
  treeComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  repositoryTree=new ContainerCheckedTreeViewer(treeComposite);
  repositoryTree.setContentProvider(new FileTreeContentProvider());
  repositoryTree.setLabelProvider(new FileTreeLabelProvider());
  repositoryTree.setInput(writer.computeInput(specifiedPath));
  repositoryTree.expandAll();
  repositoryTree.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  if (intCheckedElements != null) {
    List<ItemRecord> selectedItemRecords=new ArrayList<ItemRecord>();
    for (    Object intCheckedElement : intCheckedElements) {
      getFileFromNode(selectedItemRecords,(IRepositoryNode)intCheckedElement);
    }
    repositoryTree.setCheckedElements(selectedItemRecords.toArray());
  }
  final RepositoryNodeComparator repositoryNodeComparator=new RepositoryNodeComparator();
  repositoryTree.setComparator(new ViewerComparator(){
    @Override public int compare(    Viewer iviewer,    Object o1,    Object o2){
      DQRepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(((ItemRecord)o1).getElement());
      DQRepositoryNode recursiveFind2=RepositoryNodeHelper.recursiveFind(((ItemRecord)o2).getElement());
      return repositoryNodeComparator.compare(recursiveFind,recursiveFind2);
    }
  }
);
  createUtilityButtons(treeComposite);
}",0.9676567656765676
136449,"/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  SelectionListener modeSwitchListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(isDirState());
      setArchState(!isDirState());
    }
  }
;
  dirBTN.addSelectionListener(modeSwitchListener);
  archBTN.addSelectionListener(modeSwitchListener);
  ModifyListener populateListener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateBasePath();
    }
  }
;
  dirTxt.addModifyListener(populateListener);
  archTxt.addModifyListener(populateListener);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        IPath path=new Path(result);
        if (StringUtils.isBlank(path.getFileExtension())) {
          path=path.addFileExtension(""String_Node_Str"");
        }
        archTxt.setText(path.toOSString());
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      ItemRecord record=(ItemRecord)item.getData();
      if (record.getFile().isFile()) {
        boolean checked=item.getChecked();
        if (checked) {
          for (          File file : record.getDependencySet()) {
            if (!DqFileUtils.isLocalProjectFile(file)) {
              continue;
            }
            ItemRecord findRecord=ItemRecord.findRecord(file);
            if (findRecord != null) {
              repositoryTree.setChecked(findRecord,checked);
            }
 else {
              log.error(""String_Node_Str"" + file.getAbsolutePath());
            }
          }
        }
 else {
          ModelElement element=record.getElement();
          List<ModelElement> dependencyClients;
          if (element != null) {
            dependencyClients=EObjectHelper.getDependencyClients(element);
          }
 else {
            Property property=record.getProperty();
            dependencyClients=ImportAndExportUtils.getContextClientDepend(property.getId());
          }
          if (!dependencyClients.isEmpty()) {
            ImportAndExportUtils.iterateUncheckClientDependency(dependencyClients,repositoryTree);
          }
        }
      }
      repositoryTree.refresh();
      checkForErrors();
    }
  }
);
}","/** 
 * DOC bZhou Comment method ""addListeners"".
 */
private void addListeners(){
  SelectionListener modeSwitchListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirState(isDirState());
      setArchState(!isDirState());
    }
  }
;
  dirBTN.addSelectionListener(modeSwitchListener);
  archBTN.addSelectionListener(modeSwitchListener);
  ModifyListener populateListener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateBasePath();
    }
  }
;
  dirTxt.addModifyListener(populateListener);
  archTxt.addModifyListener(populateListener);
  browseDirBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openDirectoryDialog();
      if (result != null) {
        dirTxt.setText(result);
      }
    }
    private String openDirectoryDialog(){
      DirectoryDialog dialog=new DirectoryDialog(Display.getDefault().getActiveShell());
      if (dirTxt.getText() != null) {
        dialog.setFilterPath(dirTxt.getText());
      }
      return dialog.open();
    }
  }
);
  browseArchBTN.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String result=openFileDialog();
      if (result != null) {
        IPath path=new Path(result);
        if (StringUtils.isBlank(path.getFileExtension())) {
          path=path.addFileExtension(""String_Node_Str"");
        }
        archTxt.setText(path.toOSString());
      }
    }
    private String openFileDialog(){
      FileDialog dialog=new FileDialog(Display.getDefault().getActiveShell());
      dialog.setFilterExtensions(FILE_EXPORT_MASK);
      if (archTxt.getText() != null) {
        dialog.setFileName(archTxt.getText());
      }
      return dialog.open();
    }
  }
);
  repositoryTree.getTree().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      ItemRecord record=(ItemRecord)item.getData();
      if (record.getFile().isFile()) {
        boolean checked=item.getChecked();
        if (checked) {
          for (          File file : record.getDependencySet()) {
            if (!DqFileUtils.isLocalProjectFile(file)) {
              continue;
            }
            ItemRecord findRecord=ItemRecord.findRecord(file);
            if (findRecord != null) {
              repositoryTree.setChecked(findRecord,checked);
            }
 else {
              log.error(""String_Node_Str"" + file.getAbsolutePath());
            }
          }
        }
 else {
          ModelElement element=record.getElement();
          List<ModelElement> dependencyClients;
          if (element != null) {
            dependencyClients=EObjectHelper.getDependencyClients(element);
          }
 else {
            Property property=record.getProperty();
            dependencyClients=ImportAndExportUtils.getContextClientDepend(property.getId());
          }
          if (!dependencyClients.isEmpty()) {
            ImportAndExportUtils.iterateUncheckClientDependency(dependencyClients,repositoryTree);
          }
        }
      }
      checkForErrors();
    }
  }
);
}",0.9950769230769232
136450,"private void removeInvalidDependency(ModelElement modelElement){
  EList<Dependency> clientDependencys=modelElement.getSupplierDependency();
  for (  Dependency dependency : clientDependencys) {
    EList<ModelElement> clients=dependency.getClient();
    Iterator<ModelElement> dependencyIterator=clients.iterator();
    while (dependencyIterator.hasNext()) {
      ModelElement client=dependencyIterator.next();
      if (client == null || client.eIsProxy()) {
        dependencyIterator.remove();
      }
    }
  }
  Resource modEResource=modelElement.eResource();
  if (!clientDependencys.isEmpty() && modEResource != null) {
    EMFSharedResources.getInstance().saveResource(modEResource);
  }
}","private void removeInvalidDependency(ModelElement modelElement){
  EList<Dependency> supplierDependencys=modelElement.getSupplierDependency();
  for (  Dependency dependency : supplierDependencys) {
    EList<ModelElement> clients=dependency.getClient();
    Iterator<ModelElement> dependencyIterator=clients.iterator();
    while (dependencyIterator.hasNext()) {
      ModelElement client=dependencyIterator.next();
      if (client == null || client.eIsProxy()) {
        dependencyIterator.remove();
      }
    }
  }
  Resource modEResource=modelElement.eResource();
  if (modEResource != null) {
    Iterator<EObject> iterator=modEResource.getContents().iterator();
    while (iterator.hasNext()) {
      EObject eObject=iterator.next();
      if (eObject instanceof Dependency && !supplierDependencys.contains(eObject)) {
        iterator.remove();
      }
    }
  }
  Iterator<Dependency> ClientDependencyIterator=modelElement.getClientDependency().iterator();
  while (ClientDependencyIterator.hasNext()) {
    Dependency dependency=ClientDependencyIterator.next();
    EList<ModelElement> suppliers=dependency.getSupplier();
    if (suppliers.isEmpty()) {
      ClientDependencyIterator.remove();
      continue;
    }
    Iterator<ModelElement> suppLiterator=suppliers.iterator();
    while (suppLiterator.hasNext()) {
      ModelElement supplier=suppLiterator.next();
      if (supplier == null || supplier.eIsProxy()) {
        suppLiterator.remove();
      }
    }
  }
  if (!supplierDependencys.isEmpty() && modEResource != null) {
    EMFSharedResources.getInstance().saveResource(modEResource);
  }
}",0.5883369330453564
136451,"@Override protected Control createDialogArea(final Composite parent){
  final SashForm form=new SashForm(parent,SWT.SMOOTH | SWT.VERTICAL | SWT.FILL);
  form.setSize(Math.min(Display.getCurrent().getActiveShell().getSize().x,800),580);
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true,0,0);
  form.setLayoutData(data);
  Composite composite=(Composite)super.createDialogArea(form);
  getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (dialogType != SUGGEST_TYPE) {
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        Object[] array=selection.toArray();
        if (array.length == 1) {
          if (array[0] != null) {
            MatchRuleDefinition matchRuleDefinition=null;
            if (array[0] instanceof RuleRepNode) {
              RuleRepNode node=(RuleRepNode)array[0];
              matchRuleDefinition=(MatchRuleDefinition)node.getRule();
            }
            if (matchRuleDefinition != null) {
              if (blockingKeysTable != null) {
                blockingKeysTable.setInput(getBlockingKeysFromNodes(array,true));
              }
              if (matchingRulesTable != null) {
                matchRulesTableComposite.dispose();
                if (StringUtils.equals(RecordMatcherType.T_SwooshAlgorithm.name(),matchRuleDefinition.getRecordLinkageAlgorithm())) {
                  if (particularSurvivRulesTableComposite != null) {
                    particularSurvivRulesTableComposite.dispose();
                    particularSurvivRulesTableComposite=null;
                  }
                  createSelectMatchRulesTableTswoosh(form);
                  if (dialogType == MATCHGROUP_TYPE) {
                    createParticularSurvivorshipRulesTableTswoosh(form);
                    form.setWeights(new int[]{5,3,2});
                  }
 else                   if (dialogType == MATCH_ANALYSIS_TYPE) {
                    createParticularSurvivorshipRulesTableTswoosh(form);
                    form.setWeights(new int[]{4,2,2,2});
                  }
                  particularSurvivRulesTable.setInput(getParticularRulesFromNodes(array,true));
                  algorithmValue.setText(RecordMatcherType.T_SwooshAlgorithm.getLabel());
                }
 else {
                  createSelectMatchRulesTableVsr(form);
                  if (particularSurvivRulesTableComposite != null && dialogType == MATCHGROUP_TYPE) {
                    particularSurvivRulesTableComposite.dispose();
                    particularSurvivRulesTableComposite=null;
                    form.setWeights(new int[]{3,2});
                  }
 else                   if (particularSurvivRulesTableComposite != null && dialogType == MATCH_ANALYSIS_TYPE) {
                    particularSurvivRulesTableComposite.dispose();
                    particularSurvivRulesTableComposite=null;
                    form.setWeights(new int[]{5,3,2});
                  }
                  algorithmValue.setText(RecordMatcherType.simpleVSRMatcher.getLabel());
                }
                matchingRulesTable.setInput(getMatchRulesFromNodes(array,true));
                matchRulesTableComposite.getParent().layout();
                matchRulesTableComposite.getParent().redraw();
              }
            }
          }
        }
      }
    }
  }
);
  if (dialogType == GENKEY_TYPE) {
    createSelectBlockingKeysTable(form);
    form.setWeights(new int[]{3,2});
  }
 else   if (dialogType == MATCHGROUP_TYPE) {
    createSelectMatchRulesTableVsr(form);
    createParticularSurvivorshipRulesTableTswoosh(form);
    form.setWeights(new int[]{5,3,2});
  }
 else   if (dialogType == RECORD_MATCHING_TYPE) {
    createSelectMatchRulesTableVsr(form);
    form.setWeights(new int[]{3,2});
  }
 else   if (dialogType == MATCH_ANALYSIS_TYPE) {
    createSelectBlockingKeysTable(form);
    createSelectMatchRulesTableVsr(form);
    createParticularSurvivorshipRulesTableTswoosh(form);
    form.setWeights(new int[]{4,2,2,2});
  }
 else   if (dialogType == SUGGEST_TYPE) {
    createSelectBlockingKeysTable(form);
    createSelectMatchRulesTableVsr(form);
    form.setWeights(new int[]{5,2,3});
    if (blockingKeysTable != null) {
      blockingKeysTable.setInput(getBlockingKeysFromRules(matchRuleDefinitionInput,true));
    }
    if (matchingRulesTable != null) {
      matchingRulesTable.setInput(getMatchRulesFromRules(matchRuleDefinitionInput,true));
    }
  }
  createCheckerArea(composite);
  return composite;
}","@Override protected Control createDialogArea(final Composite parent){
  final SashForm form=new SashForm(parent,SWT.SMOOTH | SWT.VERTICAL | SWT.FILL);
  form.setSize(Math.min(Display.getCurrent().getActiveShell().getSize().x,800),580);
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true,0,0);
  form.setLayoutData(data);
  Composite composite=(Composite)super.createDialogArea(form);
  getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      if (dialogType != SUGGEST_TYPE) {
        IStructuredSelection selection=(IStructuredSelection)event.getSelection();
        Object[] array=selection.toArray();
        if (array.length == 1) {
          if (array[0] != null) {
            MatchRuleDefinition matchRuleDefinition=null;
            if (array[0] instanceof RuleRepNode) {
              RuleRepNode node=(RuleRepNode)array[0];
              matchRuleDefinition=(MatchRuleDefinition)node.getRule();
            }
            if (matchRuleDefinition != null) {
              algorithmValue.setText(RecordMatcherType.valueOf(matchRuleDefinition.getRecordLinkageAlgorithm()).getLabel());
              if (blockingKeysTable != null) {
                blockingKeysTable.setInput(getBlockingKeysFromNodes(array,true));
              }
              if (matchingRulesTable != null) {
                matchRulesTableComposite.dispose();
                if (StringUtils.equals(RecordMatcherType.T_SwooshAlgorithm.name(),matchRuleDefinition.getRecordLinkageAlgorithm())) {
                  if (particularSurvivRulesTableComposite != null) {
                    particularSurvivRulesTableComposite.dispose();
                    particularSurvivRulesTableComposite=null;
                  }
                  createSelectMatchRulesTableTswoosh(form);
                  if (dialogType == MATCHGROUP_TYPE) {
                    createParticularSurvivorshipRulesTableTswoosh(form);
                    form.setWeights(new int[]{5,3,2});
                  }
 else                   if (dialogType == MATCH_ANALYSIS_TYPE) {
                    createParticularSurvivorshipRulesTableTswoosh(form);
                    form.setWeights(new int[]{4,2,2,2});
                  }
                  if (particularSurvivRulesTable != null) {
                    particularSurvivRulesTable.setInput(getParticularRulesFromNodes(array,true));
                  }
                }
 else {
                  createSelectMatchRulesTableVsr(form);
                  if (particularSurvivRulesTableComposite != null && dialogType == MATCHGROUP_TYPE) {
                    particularSurvivRulesTableComposite.dispose();
                    particularSurvivRulesTableComposite=null;
                    form.setWeights(new int[]{3,2});
                  }
 else                   if (particularSurvivRulesTableComposite != null && dialogType == MATCH_ANALYSIS_TYPE) {
                    particularSurvivRulesTableComposite.dispose();
                    particularSurvivRulesTableComposite=null;
                    form.setWeights(new int[]{5,3,2});
                  }
                }
                matchingRulesTable.setInput(getMatchRulesFromNodes(array,true));
                matchRulesTableComposite.getParent().layout();
                matchRulesTableComposite.getParent().redraw();
              }
            }
          }
        }
      }
    }
  }
);
  if (dialogType == GENKEY_TYPE) {
    createSelectBlockingKeysTable(form);
    form.setWeights(new int[]{3,2});
  }
 else   if (dialogType == MATCHGROUP_TYPE) {
    createSelectMatchRulesTableVsr(form);
    createParticularSurvivorshipRulesTableTswoosh(form);
    form.setWeights(new int[]{5,3,2});
  }
 else   if (dialogType == RECORD_MATCHING_TYPE) {
    createSelectMatchRulesTableVsr(form);
    form.setWeights(new int[]{3,2});
  }
 else   if (dialogType == MATCH_ANALYSIS_TYPE) {
    createSelectBlockingKeysTable(form);
    createSelectMatchRulesTableVsr(form);
    createParticularSurvivorshipRulesTableTswoosh(form);
    form.setWeights(new int[]{4,2,2,2});
  }
 else   if (dialogType == SUGGEST_TYPE) {
    createSelectBlockingKeysTable(form);
    createSelectMatchRulesTableVsr(form);
    form.setWeights(new int[]{5,2,3});
    if (blockingKeysTable != null) {
      blockingKeysTable.setInput(getBlockingKeysFromRules(matchRuleDefinitionInput,true));
    }
    if (matchingRulesTable != null) {
      matchingRulesTable.setInput(getMatchRulesFromRules(matchRuleDefinitionInput,true));
    }
  }
  createCheckerArea(composite);
  return composite;
}",0.9620832425365003
136452,"public void selectionChanged(SelectionChangedEvent event){
  if (dialogType != SUGGEST_TYPE) {
    IStructuredSelection selection=(IStructuredSelection)event.getSelection();
    Object[] array=selection.toArray();
    if (array.length == 1) {
      if (array[0] != null) {
        MatchRuleDefinition matchRuleDefinition=null;
        if (array[0] instanceof RuleRepNode) {
          RuleRepNode node=(RuleRepNode)array[0];
          matchRuleDefinition=(MatchRuleDefinition)node.getRule();
        }
        if (matchRuleDefinition != null) {
          if (blockingKeysTable != null) {
            blockingKeysTable.setInput(getBlockingKeysFromNodes(array,true));
          }
          if (matchingRulesTable != null) {
            matchRulesTableComposite.dispose();
            if (StringUtils.equals(RecordMatcherType.T_SwooshAlgorithm.name(),matchRuleDefinition.getRecordLinkageAlgorithm())) {
              if (particularSurvivRulesTableComposite != null) {
                particularSurvivRulesTableComposite.dispose();
                particularSurvivRulesTableComposite=null;
              }
              createSelectMatchRulesTableTswoosh(form);
              if (dialogType == MATCHGROUP_TYPE) {
                createParticularSurvivorshipRulesTableTswoosh(form);
                form.setWeights(new int[]{5,3,2});
              }
 else               if (dialogType == MATCH_ANALYSIS_TYPE) {
                createParticularSurvivorshipRulesTableTswoosh(form);
                form.setWeights(new int[]{4,2,2,2});
              }
              particularSurvivRulesTable.setInput(getParticularRulesFromNodes(array,true));
              algorithmValue.setText(RecordMatcherType.T_SwooshAlgorithm.getLabel());
            }
 else {
              createSelectMatchRulesTableVsr(form);
              if (particularSurvivRulesTableComposite != null && dialogType == MATCHGROUP_TYPE) {
                particularSurvivRulesTableComposite.dispose();
                particularSurvivRulesTableComposite=null;
                form.setWeights(new int[]{3,2});
              }
 else               if (particularSurvivRulesTableComposite != null && dialogType == MATCH_ANALYSIS_TYPE) {
                particularSurvivRulesTableComposite.dispose();
                particularSurvivRulesTableComposite=null;
                form.setWeights(new int[]{5,3,2});
              }
              algorithmValue.setText(RecordMatcherType.simpleVSRMatcher.getLabel());
            }
            matchingRulesTable.setInput(getMatchRulesFromNodes(array,true));
            matchRulesTableComposite.getParent().layout();
            matchRulesTableComposite.getParent().redraw();
          }
        }
      }
    }
  }
}","public void selectionChanged(SelectionChangedEvent event){
  if (dialogType != SUGGEST_TYPE) {
    IStructuredSelection selection=(IStructuredSelection)event.getSelection();
    Object[] array=selection.toArray();
    if (array.length == 1) {
      if (array[0] != null) {
        MatchRuleDefinition matchRuleDefinition=null;
        if (array[0] instanceof RuleRepNode) {
          RuleRepNode node=(RuleRepNode)array[0];
          matchRuleDefinition=(MatchRuleDefinition)node.getRule();
        }
        if (matchRuleDefinition != null) {
          algorithmValue.setText(RecordMatcherType.valueOf(matchRuleDefinition.getRecordLinkageAlgorithm()).getLabel());
          if (blockingKeysTable != null) {
            blockingKeysTable.setInput(getBlockingKeysFromNodes(array,true));
          }
          if (matchingRulesTable != null) {
            matchRulesTableComposite.dispose();
            if (StringUtils.equals(RecordMatcherType.T_SwooshAlgorithm.name(),matchRuleDefinition.getRecordLinkageAlgorithm())) {
              if (particularSurvivRulesTableComposite != null) {
                particularSurvivRulesTableComposite.dispose();
                particularSurvivRulesTableComposite=null;
              }
              createSelectMatchRulesTableTswoosh(form);
              if (dialogType == MATCHGROUP_TYPE) {
                createParticularSurvivorshipRulesTableTswoosh(form);
                form.setWeights(new int[]{5,3,2});
              }
 else               if (dialogType == MATCH_ANALYSIS_TYPE) {
                createParticularSurvivorshipRulesTableTswoosh(form);
                form.setWeights(new int[]{4,2,2,2});
              }
              if (particularSurvivRulesTable != null) {
                particularSurvivRulesTable.setInput(getParticularRulesFromNodes(array,true));
              }
            }
 else {
              createSelectMatchRulesTableVsr(form);
              if (particularSurvivRulesTableComposite != null && dialogType == MATCHGROUP_TYPE) {
                particularSurvivRulesTableComposite.dispose();
                particularSurvivRulesTableComposite=null;
                form.setWeights(new int[]{3,2});
              }
 else               if (particularSurvivRulesTableComposite != null && dialogType == MATCH_ANALYSIS_TYPE) {
                particularSurvivRulesTableComposite.dispose();
                particularSurvivRulesTableComposite=null;
                form.setWeights(new int[]{5,3,2});
              }
            }
            matchingRulesTable.setInput(getMatchRulesFromNodes(array,true));
            matchRulesTableComposite.getParent().layout();
            matchRulesTableComposite.getParent().redraw();
          }
        }
      }
    }
  }
}",0.9382806759735488
136453,"@Override protected String getNonJavaIndicatorMessage(){
  String dialogMessage=""String_Node_Str"";
  if (isExistSqlExpr) {
    dialogMessage=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
 else {
    DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(ColumnAnalysisDetailsPage.this.getCurrentModelElement(),ExecutionLanguage.SQL);
    dialogMessage=DefaultMessagesImpl.getString(""String_Node_Str"",dbmsLanguage.getDbmsName());
    ;
  }
  return dialogMessage;
}","@Override protected String getNonJavaIndicatorMessage(){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(ColumnAnalysisDetailsPage.this.getCurrentModelElement(),ExecutionLanguage.SQL);
  return DefaultMessagesImpl.getString(""String_Node_Str"",dbmsLanguage.getDbmsName());
}",0.7347994825355757
136454,"/** 
 * Judge whether there are java indicator exist.
 * @return whether there are java indicator exist.
 */
@Override protected boolean includeJavaEngineIndicator(){
  for (  ModelElementIndicator modelElementIndicator : this.treeViewer.getModelElementIndicator()) {
    if (modelElementIndicator.containsAny(IndicatorEnum.getJavaIndicatorsEnum()) || (modelElementIndicator.contains(IndicatorEnum.UserDefinedIndicatorEnum) && searchJUDI(modelElementIndicator,true))) {
      return true;
    }
  }
  return false;
}","/** 
 * Judge whether there are java indicator exist.
 * @return whether there are java indicator exist.
 */
@Override protected boolean includeJavaEngineIndicator(){
  for (  ModelElementIndicator modelElementIndicator : this.treeViewer.getModelElementIndicator()) {
    if (modelElementIndicator.containsAny(IndicatorEnum.getJavaIndicatorsEnum()) || (modelElementIndicator.contains(IndicatorEnum.UserDefinedIndicatorEnum) && checkUDIInvalid(modelElementIndicator,true))) {
      return true;
    }
  }
  return false;
}",0.9816779170684669
136455,"@Override protected boolean checkSqlEngineIndicatorExist(){
  for (  ModelElementIndicator modelElementIndicator : this.treeViewer.getModelElementIndicator()) {
    if (modelElementIndicator.contains(IndicatorEnum.SqlPatternMatchingIndicatorEnum) || (modelElementIndicator.contains(IndicatorEnum.UserDefinedIndicatorEnum) && searchJUDI(modelElementIndicator,false))) {
      return true;
    }
  }
  return super.checkSqlEngineIndicatorExist();
}","@Override protected boolean checkSqlEngineIndicatorExist(){
  for (  ModelElementIndicator modelElementIndicator : this.treeViewer.getModelElementIndicator()) {
    if (modelElementIndicator.contains(IndicatorEnum.SqlPatternMatchingIndicatorEnum) || (modelElementIndicator.contains(IndicatorEnum.UserDefinedIndicatorEnum) && checkUDIInvalid(modelElementIndicator,false))) {
      return true;
    }
  }
  return super.checkSqlEngineIndicatorExist();
}",0.9832775919732442
136456,"public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements,String where) throws SQLException {
  getDataFromTable().clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return getDataFromTable();
  }
  int columnListSize=analysedElements.size();
  TypedReturnCode<java.sql.Connection> sqlconnection=getSQLConnection(connection);
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=sqlconnection.getObject().createStatement();
    statement.execute(createSqlStatement(connection,analysedElements,where));
    resultSet=statement.getResultSet();
    while (resultSet.next()) {
      Object[] oneRow=new Object[columnListSize];
      for (int i=0; i < columnListSize; i++) {
        oneRow[i]=ResultSetUtils.getObject(resultSet,i + 1);
      }
      handleRow(oneRow);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    if (SQLException.class.isInstance(e)) {
      throw (SQLException)e;
    }
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    ReturnCode closed=ConnectionUtils.closeConnection(sqlconnection.getObject());
    if (!closed.isOk()) {
      log.error(closed.getMessage());
    }
  }
  try {
    endQuery();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return getDataFromTable();
}","public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements,String where) throws SQLException {
  getDataFromTable().clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return getDataFromTable();
  }
  int columnListSize=analysedElements.size();
  TypedReturnCode<java.sql.Connection> sqlconnection=getSQLConnection(connection);
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=sqlconnection.getObject().createStatement();
    statement.execute(createSqlStatement(connection,analysedElements,where));
    resultSet=statement.getResultSet();
    while (resultSet.next()) {
      Object[] oneRow=new Object[columnListSize];
      for (int i=0; i < columnListSize; i++) {
        oneRow[i]=ResultSetUtils.getBigObject(resultSet,i + 1);
      }
      handleRow(oneRow);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    if (SQLException.class.isInstance(e)) {
      throw (SQLException)e;
    }
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    ReturnCode closed=ConnectionUtils.closeConnection(sqlconnection.getObject());
    if (!closed.isOk()) {
      log.error(closed.getMessage());
    }
  }
  try {
    endQuery();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return getDataFromTable();
}",0.9989469989469988
136457,"/** 
 * @param catalogName (can be null)
 * @param connection
 * @param queryStmt
 * @return
 * @throws SQLException
 */
protected List<Object[]> executeQuery(String catalogName,Connection connection,String queryStmt) throws SQLException {
  ClassLoader currClassLoader=Thread.currentThread().getContextClassLoader();
  org.talend.core.model.metadata.builder.connection.Connection dbConn=this.getAnalysisDataProvider(cachedAnalysis);
  IMetadataConnection metadataBean=ConvertionHelper.convert(dbConn);
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataBean.getDbType())) {
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataBean);
    Thread.currentThread().setContextClassLoader(hiveClassLoader);
  }
  List<Object[]> myResultSet=new ArrayList<Object[]>();
  Statement statement=null;
  try {
    if (catalogName != null) {
      changeCatalog(catalogName,connection);
    }
    if (continueRun()) {
      statement=connection.createStatement();
      statement.execute(queryStmt);
      ResultSet resultSet=statement.getResultSet();
      if (resultSet == null) {
        String mess=Messages.getString(""String_Node_Str"") + queryStmt;
        log.warn(mess);
        return null;
      }
      ResultSetMetaData metaData=resultSet.getMetaData();
      int columnCount=metaData.getColumnCount();
      while (resultSet.next()) {
        Object[] result=new Object[columnCount];
        for (int i=0; i < columnCount; i++) {
          result[i]=resultSet.getObject(i + 1);
        }
        myResultSet.add(result);
      }
      resultSet.close();
    }
  }
 catch (  NullPointerException nullExc) {
    if (getMonitor() != null && getMonitor().isCanceled()) {
      log.error(nullExc);
    }
 else {
      throw nullExc;
    }
  }
 finally {
    if (statement != null) {
      statement.close();
    }
    Thread.currentThread().setContextClassLoader(currClassLoader);
  }
  return myResultSet;
}","/** 
 * @param catalogName (can be null)
 * @param connection
 * @param queryStmt
 * @return
 * @throws SQLException
 */
protected List<Object[]> executeQuery(String catalogName,Connection connection,String queryStmt) throws SQLException {
  ClassLoader currClassLoader=Thread.currentThread().getContextClassLoader();
  org.talend.core.model.metadata.builder.connection.Connection dbConn=this.getAnalysisDataProvider(cachedAnalysis);
  IMetadataConnection metadataBean=ConvertionHelper.convert(dbConn);
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataBean.getDbType())) {
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataBean);
    Thread.currentThread().setContextClassLoader(hiveClassLoader);
  }
  List<Object[]> myResultSet=new ArrayList<Object[]>();
  Statement statement=null;
  try {
    if (catalogName != null) {
      changeCatalog(catalogName,connection);
    }
    if (continueRun()) {
      statement=connection.createStatement();
      statement.execute(queryStmt);
      ResultSet resultSet=statement.getResultSet();
      if (resultSet == null) {
        String mess=Messages.getString(""String_Node_Str"") + queryStmt;
        log.warn(mess);
        return null;
      }
      ResultSetMetaData metaData=resultSet.getMetaData();
      int columnCount=metaData.getColumnCount();
      while (resultSet.next()) {
        Object[] result=new Object[columnCount];
        for (int i=0; i < columnCount; i++) {
          result[i]=ResultSetUtils.getBigObject(resultSet,i + 1);
        }
        myResultSet.add(result);
      }
      resultSet.close();
    }
  }
 catch (  NullPointerException nullExc) {
    if (getMonitor() != null && getMonitor().isCanceled()) {
      log.error(nullExc);
    }
 else {
      throw nullExc;
    }
  }
 finally {
    if (statement != null) {
      statement.close();
    }
    Thread.currentThread().setContextClassLoader(currClassLoader);
  }
  return myResultSet;
}",0.9888097660223804
136458,"/** 
 * orgnize EList 'objectLs' by SQL.
 * @param sqlStatement
 * @param ok
 * @return
 * @throws SQLException
 */
private ReturnCode evaluateBySql(String sqlStatement,ReturnCode ok) throws SQLException {
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=createStatement();
    if (continueRun()) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + sqlStatement);
      }
      statement.execute(sqlStatement);
    }
    resultSet=statement.getResultSet();
    List<String> columnNames=getAnalyzedElementsName();
    if (resultSet == null) {
      String mess=Messages.getString(""String_Node_Str"",sqlStatement);
      log.warn(mess);
      ok.setReturnCode(mess,false);
      return ok;
    }
    EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
    indicToRowMap.clear();
    while (resultSet.next()) {
      if (!continueRun()) {
        break;
      }
      EList<Object> objectLs=new BasicEList<Object>();
      Iterator<String> it=columnNames.iterator();
      while (it.hasNext()) {
        Object obj=ResultSetUtils.getObject(resultSet,it.next());
        objectLs.add(obj);
      }
      if (objectLs.size() == 0) {
        continue;
      }
      handleObjects(objectLs,resultSet);
    }
  }
  finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    closeConnection();
  }
  return ok;
}","/** 
 * orgnize EList 'objectLs' by SQL.
 * @param sqlStatement
 * @param ok
 * @return
 * @throws SQLException
 */
private ReturnCode evaluateBySql(String sqlStatement,ReturnCode ok) throws SQLException {
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=createStatement();
    if (continueRun()) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + sqlStatement);
      }
      statement.execute(sqlStatement);
    }
    resultSet=statement.getResultSet();
    List<String> columnNames=getAnalyzedElementsName();
    if (resultSet == null) {
      String mess=Messages.getString(""String_Node_Str"",sqlStatement);
      log.warn(mess);
      ok.setReturnCode(mess,false);
      return ok;
    }
    EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
    indicToRowMap.clear();
    while (resultSet.next()) {
      if (!continueRun()) {
        break;
      }
      EList<Object> objectLs=new BasicEList<Object>();
      Iterator<String> it=columnNames.iterator();
      while (it.hasNext()) {
        Object obj=ResultSetUtils.getBigObject(resultSet,it.next());
        objectLs.add(obj);
      }
      if (objectLs.size() == 0) {
        continue;
      }
      handleObjects(objectLs,resultSet);
    }
  }
  finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    closeConnection();
  }
  return ok;
}",0.998975059788179
136459,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=createStatement();
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"",sqlStatement);
    log.warn(mess);
    ok.setReturnCode(mess,false);
    statement.close();
    return ok;
  }
  ok=getMessageForInvalidJUDIs();
  int columnCount=resultSet.getMetaData().getColumnCount();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int columnListSize=columnlist.size();
  label:   while (resultSet.next()) {
    for (int i=0; i < columnListSize; i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(col);
      Object object=ResultSetUtils.getObject(resultSet,col);
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      if (object instanceof Date) {
        if (object instanceof Time) {
          object=new TalendFormatTime((Time)object);
        }
 else {
          object=new TalendFormatDate((Date)object);
        }
      }
      for (      Indicator indicator : indicators) {
        if (!continueRun()) {
          break label;
        }
        if (indicator instanceof DuplicateCountIndicator) {
          ((DuplicateCountIndicator)indicator).handle(object,resultSet,columnCount);
        }
 else {
          indicator.handle(object);
        }
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData()) {
          if (indicator.mustStoreRow()) {
            List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
            recordIncrement=valueObjectList.size();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnList=ColumnSetHelper.getColumns(doSwitch);
            List<Object> inputRowList=new ArrayList<Object>();
            for (int j=0; j < columnCount; j++) {
              String newcol=columnList.get(j).getName();
              Object newobject=ResultSetUtils.getObject(resultSet,newcol);
              if (newobject instanceof Date) {
                if (newobject instanceof Time) {
                  newobject=new TalendFormatTime((Time)newobject);
                }
 else {
                  newobject=new TalendFormatDate((Date)newobject);
                }
              }
              if (indicator.isUsedMapDBMode()) {
                inputRowList.add(newobject == null ? PluginConstant.NULL_STRING : newobject);
                continue;
              }
 else {
                if (recordIncrement < maxNumberRows) {
                  if (recordIncrement < valueObjectList.size()) {
                    valueObjectList.get(recordIncrement)[j]=newobject;
                  }
 else {
                    Object[] valueObject=new Object[columnCount];
                    valueObject[j]=newobject;
                    valueObjectList.add(valueObject);
                  }
                }
 else {
                  break;
                }
              }
            }
            if (indicator.isUsedMapDBMode()) {
              MapDBUtils.handleDrillDownData(object,inputRowList,indicator);
            }
          }
 else           if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
            List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnElementList=ColumnSetHelper.getColumns(doSwitch);
            int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
            for (            Object[] dataObject : removeValueObjectList) {
              if (dataObject[offsetting].equals(object)) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
          }
        }
      }
    }
  }
  resultSet.close();
  statement.close();
  getConnection().close();
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=createStatement();
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"",sqlStatement);
    log.warn(mess);
    ok.setReturnCode(mess,false);
    statement.close();
    return ok;
  }
  ok=getMessageForInvalidJUDIs();
  int columnCount=resultSet.getMetaData().getColumnCount();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int columnListSize=columnlist.size();
  label:   while (resultSet.next()) {
    for (int i=0; i < columnListSize; i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(col);
      Object object=ResultSetUtils.getBigObject(resultSet,col);
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      if (object instanceof Date) {
        if (object instanceof Time) {
          object=new TalendFormatTime((Time)object);
        }
 else {
          object=new TalendFormatDate((Date)object);
        }
      }
      for (      Indicator indicator : indicators) {
        if (!continueRun()) {
          break label;
        }
        if (indicator instanceof DuplicateCountIndicator) {
          ((DuplicateCountIndicator)indicator).handle(object,resultSet,columnCount);
        }
 else {
          indicator.handle(object);
        }
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData()) {
          if (indicator.mustStoreRow()) {
            List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
            recordIncrement=valueObjectList.size();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnList=ColumnSetHelper.getColumns(doSwitch);
            List<Object> inputRowList=new ArrayList<Object>();
            for (int j=0; j < columnCount; j++) {
              String newcol=columnList.get(j).getName();
              Object newobject=ResultSetUtils.getBigObject(resultSet,newcol);
              if (newobject instanceof Date) {
                if (newobject instanceof Time) {
                  newobject=new TalendFormatTime((Time)newobject);
                }
 else {
                  newobject=new TalendFormatDate((Date)newobject);
                }
              }
              if (indicator.isUsedMapDBMode()) {
                inputRowList.add(newobject == null ? PluginConstant.NULL_STRING : newobject);
                continue;
              }
 else {
                if (recordIncrement < maxNumberRows) {
                  if (recordIncrement < valueObjectList.size()) {
                    valueObjectList.get(recordIncrement)[j]=newobject;
                  }
 else {
                    Object[] valueObject=new Object[columnCount];
                    valueObject[j]=newobject;
                    valueObjectList.add(valueObject);
                  }
                }
 else {
                  break;
                }
              }
            }
            if (indicator.isUsedMapDBMode()) {
              MapDBUtils.handleDrillDownData(object,inputRowList,indicator);
            }
          }
 else           if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
            List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnElementList=ColumnSetHelper.getColumns(doSwitch);
            int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
            for (            Object[] dataObject : removeValueObjectList) {
              if (dataObject[offsetting].equals(object)) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
          }
        }
      }
    }
  }
  resultSet.close();
  statement.close();
  getConnection().close();
  return ok;
}",0.9994319257716342
136460,"/** 
 * DOC xqliu Comment method ""canParallel"".
 * @return
 */
private boolean canParallel(Connection connection){
  try {
    @SuppressWarnings(""String_Node_Str"") DatabaseMetaData connectionMetadata=org.talend.utils.sql.ConnectionUtils.getConnectionMetadata(connection);
    if (connectionMetadata.getDriverName() != null && connectionMetadata.getDriverName().toLowerCase().startsWith(DatabaseConstant.ODBC_DRIVER_NAME)) {
      return false;
    }
    if (""String_Node_Str"".equals(connection.getMetaData().getDatabaseProductName())) {
      return false;
    }
    if (ExtractMetaDataUtils.getInstance().isHiveConnection(connection)) {
      org.talend.core.model.metadata.builder.connection.Connection analysisDataProvider=getAnalysisDataProvider(cachedAnalysis);
      DatabaseConnection dbConn=((DatabaseConnection)analysisDataProvider);
      String hiveVersion=dbConn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
      if (HiveServerVersionInfo.HIVE_SERVER_1.getKey().equals(hiveVersion)) {
        return false;
      }
      return true;
    }
  }
 catch (  SQLException e) {
    log.warn(e,e);
  }
  return this.parallel;
}","/** 
 * DOC xqliu Comment method ""canParallel"".
 * @return
 */
private boolean canParallel(Connection connection){
  try {
    @SuppressWarnings(""String_Node_Str"") DatabaseMetaData connectionMetadata=org.talend.utils.sql.ConnectionUtils.getConnectionMetadata(connection);
    if (connectionMetadata.getDriverName() != null && connectionMetadata.getDriverName().toLowerCase().startsWith(DatabaseConstant.ODBC_DRIVER_NAME)) {
      return false;
    }
    if (""String_Node_Str"".equals(connection.getMetaData().getDatabaseProductName())) {
      return false;
    }
    if (ExtractMetaDataUtils.getInstance().isHiveConnection(connection)) {
      org.talend.core.model.metadata.builder.connection.Connection analysisDataProvider=getAnalysisDataProvider(cachedAnalysis);
      DatabaseConnection dbConn=((DatabaseConnection)analysisDataProvider);
      String hiveVersion=dbConn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
      if (HiveServerVersionInfo.HIVE_SERVER_1.getKey().equals(hiveVersion)) {
        return false;
      }
      String jdbcProperties=dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
      List<Map<String,Object>> hiveJDBCPropertiesList=HadoopRepositoryUtil.getHadoopPropertiesList(jdbcProperties);
      if (!hiveJDBCPropertiesList.isEmpty()) {
        List keyList=new ArrayList();
        List valueList=new ArrayList();
        for (        Map<String,Object> propertyMap : hiveJDBCPropertiesList) {
          keyList.add(propertyMap.get(""String_Node_Str""));
          valueList.add(propertyMap.get(""String_Node_Str""));
        }
        if (keyList.contains(""String_Node_Str"") && valueList.contains(""String_Node_Str"")) {
          return false;
        }
      }
      return true;
    }
  }
 catch (  SQLException e) {
    log.warn(e,e);
  }
  return this.parallel;
}",0.7676362420595119
136461,"/** 
 * change ExecutionLanuage to Java.
 */
public void changeExecuteLanguageToJava(boolean isDisabled){
  if (this.execCombo == null) {
    return;
  }
  if (currentModelIsSqlEngin()) {
    int i=0;
    for (    ExecutionLanguage language : ExecutionLanguage.VALUES) {
      if (language.compareTo(ExecutionLanguage.JAVA) == 0 && this.execCombo.getSelectionIndex() != i) {
        this.execCombo.select(i);
        refreshEnginSection();
      }
 else {
        i++;
      }
    }
  }
  if (isDisabled) {
    execCombo.setEnabled(false);
  }
}","/** 
 * change ExecutionLanuage to Java.
 */
public void changeExecuteLanguageToJava(boolean isDisabled){
  if (this.execCombo == null) {
    return;
  }
  if (currentModelIsSqlEngine()) {
    int i=0;
    for (    ExecutionLanguage language : ExecutionLanguage.VALUES) {
      if (language.compareTo(ExecutionLanguage.JAVA) == 0 && this.execCombo.getSelectionIndex() != i) {
        this.execCombo.select(i);
        refreshEnginSection();
      }
 else {
        i++;
      }
    }
  }
  if (isDisabled) {
    execCombo.setEnabled(false);
  }
}",0.999083409715857
136462,"/** 
 * DOC xqliu Comment method ""changeExecuteLanguageToSql"".
 * @param enabled
 */
public void changeExecuteLanguageToSql(boolean enabled){
  if (this.execCombo == null) {
    return;
  }
  if (!currentModelIsSqlEngin()) {
    int i=0;
    for (    ExecutionLanguage language : ExecutionLanguage.VALUES) {
      if (language.compareTo(ExecutionLanguage.SQL) == 0 && execCombo.getSelectionIndex() != i) {
        this.execCombo.select(i);
        refreshEnginSection();
      }
 else {
        i++;
      }
    }
  }
  execCombo.setEnabled(enabled);
}","/** 
 * DOC xqliu Comment method ""changeExecuteLanguageToSql"".
 * @param enabled
 */
public void changeExecuteLanguageToSql(boolean enabled){
  if (this.execCombo == null) {
    return;
  }
  if (!currentModelIsSqlEngine()) {
    int i=0;
    for (    ExecutionLanguage language : ExecutionLanguage.VALUES) {
      if (language.compareTo(ExecutionLanguage.SQL) == 0 && execCombo.getSelectionIndex() != i) {
        this.execCombo.select(i);
        refreshEnginSection();
      }
 else {
        i++;
      }
    }
  }
  execCombo.setEnabled(enabled);
}",0.9990950226244344
136463,"/** 
 * DOC zshen Comment method ""createRunSampleDataButton"".
 * @param buttonComposite
 */
protected void createRunSampleDataButton(Composite buttonComposite){
  runWithSampleBtn=toolkit.createButton(buttonComposite,DefaultMessagesImpl.getString(""String_Node_Str""),SWT.CHECK);
  runWithSampleBtn.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  runWithSampleBtn.setSelection(isRunWithSampleData);
  runWithSampleBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      isRunWithSampleData=((Button)e.getSource()).getSelection();
      if (isRunWithSampleData && checkSqlEnginIndicatorExist()) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        runWithSampleBtn.setSelection(!isRunWithSampleData);
        isRunWithSampleData=false;
        return;
      }
 else       if (includeJavaEnginIndicator()) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        runWithSampleBtn.setSelection(!isRunWithSampleData);
        isRunWithSampleData=true;
        return;
      }
      doCheckOption();
      AbstractAnalysisMetadataPage.this.setDirty(true);
    }
  }
);
}","/** 
 * DOC zshen Comment method ""createRunSampleDataButton"".
 * @param buttonComposite
 */
protected void createRunSampleDataButton(Composite buttonComposite){
  runWithSampleBtn=toolkit.createButton(buttonComposite,DefaultMessagesImpl.getString(""String_Node_Str""),SWT.CHECK);
  runWithSampleBtn.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  runWithSampleBtn.setSelection(isRunWithSampleData);
  runWithSampleBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Boolean isSqlSelected=TaggedValueHelper.getValueBoolean(TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,getCurrentModelElement());
      isRunWithSampleData=((Button)e.getSource()).getSelection();
      if (isRunWithSampleData && checkSqlEngineIndicatorExist()) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        runWithSampleBtn.setSelection(!isRunWithSampleData);
        isRunWithSampleData=false;
        return;
      }
 else       if (!isRunWithSampleData && isSqlSelected && includeJavaEngineIndicator()) {
        MessageUI.openWarning(getNonJavaIndicatorMessage());
        runWithSampleBtn.setSelection(!isRunWithSampleData);
        isRunWithSampleData=true;
        return;
      }
      doCheckOption();
      AbstractAnalysisMetadataPage.this.setDirty(true);
    }
  }
);
}",0.9089506172839508
136464,"@Override public void widgetSelected(SelectionEvent e){
  isRunWithSampleData=((Button)e.getSource()).getSelection();
  if (isRunWithSampleData && checkSqlEnginIndicatorExist()) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    runWithSampleBtn.setSelection(!isRunWithSampleData);
    isRunWithSampleData=false;
    return;
  }
 else   if (includeJavaEnginIndicator()) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    runWithSampleBtn.setSelection(!isRunWithSampleData);
    isRunWithSampleData=true;
    return;
  }
  doCheckOption();
  AbstractAnalysisMetadataPage.this.setDirty(true);
}","@Override public void widgetSelected(SelectionEvent e){
  Boolean isSqlSelected=TaggedValueHelper.getValueBoolean(TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,getCurrentModelElement());
  isRunWithSampleData=((Button)e.getSource()).getSelection();
  if (isRunWithSampleData && checkSqlEngineIndicatorExist()) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    runWithSampleBtn.setSelection(!isRunWithSampleData);
    isRunWithSampleData=false;
    return;
  }
 else   if (!isRunWithSampleData && isSqlSelected && includeJavaEngineIndicator()) {
    MessageUI.openWarning(getNonJavaIndicatorMessage());
    runWithSampleBtn.setSelection(!isRunWithSampleData);
    isRunWithSampleData=true;
    return;
  }
  doCheckOption();
  AbstractAnalysisMetadataPage.this.setDirty(true);
}",0.8415300546448088
136465,"@Override public void widgetSelected(SelectionEvent e){
  execLang=execCombo1.getText();
  ExecutionLanguage currentLanguage=ExecutionLanguage.get(execLang);
  if (ExecutionLanguage.SQL.equals(currentLanguage) && includeJavaEnginIndicator()) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    changeExecuteLanguageToJava(false);
    execLang=execCombo1.getText();
    return;
  }
 else   if (ExecutionLanguage.JAVA.equals(currentLanguage) && checkSqlEnginIndicatorExist()) {
    if (isRunWithSampleData) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
    changeExecuteLanguageToSql(true);
    execLang=execCombo1.getText();
    return;
  }
  refreshEnginSection(javaEnginSection,currentLanguage);
}","@Override public void widgetSelected(SelectionEvent e){
  execLang=execCombo1.getText();
  ExecutionLanguage currentLanguage=ExecutionLanguage.get(execLang);
  if (ExecutionLanguage.SQL.equals(currentLanguage) && includeJavaEngineIndicator()) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    changeExecuteLanguageToJava(false);
    execLang=execCombo1.getText();
    return;
  }
 else   if (ExecutionLanguage.JAVA.equals(currentLanguage) && checkSqlEngineIndicatorExist()) {
    if (isRunWithSampleData) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
    changeExecuteLanguageToSql(true);
    execLang=execCombo1.getText();
    return;
  }
  refreshEnginSection(javaEnginSection,currentLanguage);
}",0.9988425925925926
136466,"private void addListenerToExecuteEngine(final CCombo execCombo1,final Composite javaEnginSection){
  execCombo1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      execLang=execCombo1.getText();
      ExecutionLanguage currentLanguage=ExecutionLanguage.get(execLang);
      if (ExecutionLanguage.SQL.equals(currentLanguage) && includeJavaEnginIndicator()) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        changeExecuteLanguageToJava(false);
        execLang=execCombo1.getText();
        return;
      }
 else       if (ExecutionLanguage.JAVA.equals(currentLanguage) && checkSqlEnginIndicatorExist()) {
        if (isRunWithSampleData) {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        }
 else {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        }
        changeExecuteLanguageToSql(true);
        execLang=execCombo1.getText();
        return;
      }
      refreshEnginSection(javaEnginSection,currentLanguage);
    }
  }
);
}","private void addListenerToExecuteEngine(final CCombo execCombo1,final Composite javaEnginSection){
  execCombo1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      execLang=execCombo1.getText();
      ExecutionLanguage currentLanguage=ExecutionLanguage.get(execLang);
      if (ExecutionLanguage.SQL.equals(currentLanguage) && includeJavaEngineIndicator()) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        changeExecuteLanguageToJava(false);
        execLang=execCombo1.getText();
        return;
      }
 else       if (ExecutionLanguage.JAVA.equals(currentLanguage) && checkSqlEngineIndicatorExist()) {
        if (isRunWithSampleData) {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        }
 else {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        }
        changeExecuteLanguageToSql(true);
        execLang=execCombo1.getText();
        return;
      }
      refreshEnginSection(javaEnginSection,currentLanguage);
    }
  }
);
}",0.9991055456171736
136467,"@Override protected void doCheckOption(){
  Boolean isSqlSelected=TaggedValueHelper.getValueBoolean(TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,getCurrentModelElement());
  if (isRunWithSampleData) {
    if (currentModelIsSqlEngin()) {
      changeExecuteLanguageToJava(false);
      if (!isSqlSelected) {
        TaggedValueHelper.setTaggedValue(getCurrentModelElement(),TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,""String_Node_Str"");
      }
    }
    execCombo.setEnabled(false);
  }
 else {
    if (isSqlSelected) {
      changeExecuteLanguageToSql(true);
      if (!isRunWithSampleData) {
        TaggedValueHelper.setTaggedValue(getCurrentModelElement(),TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,""String_Node_Str"");
      }
    }
    if (!isFileConnection()) {
      execCombo.setEnabled(true);
    }
  }
}","@Override protected void doCheckOption(){
  Boolean isSqlSelected=TaggedValueHelper.getValueBoolean(TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,getCurrentModelElement());
  if (isRunWithSampleData) {
    if (currentModelIsSqlEngine()) {
      changeExecuteLanguageToJava(false);
      if (!isSqlSelected) {
        TaggedValueHelper.setTaggedValue(getCurrentModelElement(),TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,""String_Node_Str"");
      }
    }
    execCombo.setEnabled(false);
  }
 else {
    if (isSqlSelected) {
      changeExecuteLanguageToSql(true);
      if (!isRunWithSampleData) {
        TaggedValueHelper.setTaggedValue(getCurrentModelElement(),TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,""String_Node_Str"");
      }
    }
    if (!isFileConnection()) {
      execCombo.setEnabled(true);
    }
  }
}",0.9993861264579496
136468,"@Override protected void doCheckOption(){
  Boolean isSqlSelected=TaggedValueHelper.getValueBoolean(TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,getCurrentModelElement());
  if (isRunWithSampleData) {
    if (currentModelIsSqlEngin()) {
      changeExecuteLanguageToJava(false);
      if (!isSqlSelected) {
        TaggedValueHelper.setTaggedValue(getCurrentModelElement(),TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,""String_Node_Str"");
      }
    }
    execCombo.setEnabled(false);
  }
 else {
    if (isSqlSelected) {
      changeExecuteLanguageToSql(true);
      if (!isRunWithSampleData) {
        TaggedValueHelper.setTaggedValue(getCurrentModelElement(),TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,""String_Node_Str"");
      }
    }
    if (!isFileConnection()) {
      execCombo.setEnabled(true);
    }
  }
}","@Override protected void doCheckOption(){
  Boolean isSqlSelected=TaggedValueHelper.getValueBoolean(TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,getCurrentModelElement());
  if (isRunWithSampleData) {
    if (currentModelIsSqlEngine()) {
      changeExecuteLanguageToJava(false);
      if (!isSqlSelected) {
        TaggedValueHelper.setTaggedValue(getCurrentModelElement(),TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,""String_Node_Str"");
      }
    }
    execCombo.setEnabled(false);
  }
 else {
    if (isSqlSelected) {
      changeExecuteLanguageToSql(true);
      if (!isRunWithSampleData) {
        TaggedValueHelper.setTaggedValue(getCurrentModelElement(),TaggedValueHelper.IS_SQL_ENGIN_BEFORE_CHECK,""String_Node_Str"");
      }
    }
    if (!isFileConnection()) {
      execCombo.setEnabled(true);
    }
  }
}",0.9993861264579496
136469,"@Override protected void eBasicSetContainer(InternalEObject newContainer,int newContainerFeatureID){
  super.eBasicSetContainer(newContainer,newContainerFeatureID);
  if (this.hasSet == false && newContainer instanceof FrequencyIndicator) {
    if (newContainer instanceof LowFrequencyIndicator) {
      this.setTopN(IndicatorDefaultValueServiceUtil.getIstance().getIndicatorDVService().getLowFrequencyLimitResult());
    }
 else {
      this.setTopN(IndicatorDefaultValueServiceUtil.getIstance().getIndicatorDVService().getFrequencyLimitResult());
    }
  }
}","@Override protected void eBasicSetContainer(InternalEObject newContainer,int newContainerFeatureID){
  super.eBasicSetContainer(newContainer,newContainerFeatureID);
  if (this.hasSet == false && newContainer instanceof FrequencyIndicator) {
    if (Platform.isRunning()) {
      if (newContainer instanceof LowFrequencyIndicator) {
        this.setTopN(IndicatorDefaultValueServiceUtil.getIstance().getIndicatorDVService().getLowFrequencyLimitResult());
      }
 else {
        this.setTopN(IndicatorDefaultValueServiceUtil.getIstance().getIndicatorDVService().getFrequencyLimitResult());
      }
    }
  }
}",0.958904109589041
136470,"public IIndicatorDefaultValueService getIndicatorDVService(){
  if (indicatorDV == null) {
    BundleContext context=DataQualityPlugin.getDefault().getBundleContext();
    if (context != null) {
      ServiceReference serviceReference=context.getServiceReference(IIndicatorDefaultValueService.class.getName());
      if (serviceReference != null) {
        Object obj=context.getService(serviceReference);
        if (obj != null) {
          this.indicatorDV=(IIndicatorDefaultValueService)obj;
        }
      }
    }
  }
  return this.indicatorDV;
}","public IIndicatorDefaultValueService getIndicatorDVService(){
  DataQualityPlugin defaultDQPlugin=DataQualityPlugin.getDefault();
  if (indicatorDV == null && defaultDQPlugin != null) {
    BundleContext context=defaultDQPlugin.getBundleContext();
    if (context != null) {
      ServiceReference serviceReference=context.getServiceReference(IIndicatorDefaultValueService.class.getName());
      if (serviceReference != null) {
        Object obj=context.getService(serviceReference);
        if (obj != null) {
          this.indicatorDV=(IIndicatorDefaultValueService)obj;
        }
      }
    }
  }
  return this.indicatorDV;
}",0.8209459459459459
136471,"@Override public List<IRepositoryNode> getChildren(){
  afterGlobalFilter=new ArrayList<IRepositoryNode>();
  DatabaseConnection databaseConnection=getDatabaseConnection();
  EList<Package> dataPackage=databaseConnection.getDataPackage();
  if (dataPackage != null && dataPackage.size() > 0) {
    Package pack=dataPackage.get(0);
    String filterCharater=ConnectionHelper.getPackageFilter(databaseConnection);
    List<IRepositoryNode> afterPackageFilter=null;
    if (pack instanceof Schema) {
      afterGlobalFilter=filterResultsIfAny(createRepositoryNodeSchema(dataPackage));
      afterPackageFilter=filterPackages(filterCharater,afterGlobalFilter);
      return afterPackageFilter == null ? afterGlobalFilter : afterPackageFilter;
    }
 else     if (pack instanceof Catalog) {
      afterGlobalFilter=filterResultsIfAny(createRepositoryNodeCatalog(dataPackage));
      afterPackageFilter=filterPackages(filterCharater,afterGlobalFilter);
      return afterPackageFilter == null ? afterGlobalFilter : afterPackageFilter;
    }
  }
  return new ArrayList<IRepositoryNode>();
}","@Override public List<IRepositoryNode> getChildren(){
  afterGlobalFilter=new ArrayList<IRepositoryNode>();
  DatabaseConnection databaseConnection=getDatabaseConnection();
  if (databaseConnection != null) {
    EList<Package> dataPackage=databaseConnection.getDataPackage();
    if (dataPackage != null && dataPackage.size() > 0) {
      Package pack=dataPackage.get(0);
      String filterCharater=ConnectionHelper.getPackageFilter(databaseConnection);
      List<IRepositoryNode> afterPackageFilter=null;
      if (pack instanceof Schema) {
        afterGlobalFilter=filterResultsIfAny(createRepositoryNodeSchema(dataPackage));
        afterPackageFilter=filterPackages(filterCharater,afterGlobalFilter);
        return afterPackageFilter == null ? afterGlobalFilter : afterPackageFilter;
      }
 else       if (pack instanceof Catalog) {
        afterGlobalFilter=filterResultsIfAny(createRepositoryNodeCatalog(dataPackage));
        afterPackageFilter=filterPackages(filterCharater,afterGlobalFilter);
        return afterPackageFilter == null ? afterGlobalFilter : afterPackageFilter;
      }
    }
  }
  return new ArrayList<IRepositoryNode>();
}",0.967828418230563
136472,"public DatabaseConnection getDatabaseConnection(){
  Property property=this.getObject().getProperty();
  if (property != null && property.getItem() != null) {
    return (DatabaseConnection)((ConnectionItem)property.getItem()).getConnection();
  }
  return null;
}","public DatabaseConnection getDatabaseConnection(){
  Property property=this.getObject().getProperty();
  if (property != null && property.getItem() != null && ((ConnectionItem)property.getItem()).getConnection() instanceof DatabaseConnection) {
    return (DatabaseConnection)((ConnectionItem)property.getItem()).getConnection();
  }
  return null;
}",0.8599348534201955
136473,"/** 
 * this method is used to create a DBCatalogRepNode. And Sybase is a specal case because we don't create schema level when the version of stdio is lower than 5.0.0.So we will create DBSybaseCatalogRepNode to deal with this special case
 * @param viewObject
 * @param parent parent of repositoryNode
 * @param type
 * @return
 */
public static RepositoryNode createDBCatalogRepNode(IRepositoryViewObject viewObject,RepositoryNode parent,ENodeType type,org.talend.core.model.general.Project inWhichProject){
  Item databaseItem=viewObject.getProperty().getItem();
  DatabaseConnection dbConnection=(DatabaseConnection)((DatabaseConnectionItem)databaseItem).getConnection();
  SupportDBUrlType dbTypeByKey=SupportDBUrlType.getDBTypeByKey(dbConnection.getDatabaseType());
switch (dbTypeByKey) {
case SYBASEDEFAULTURL:
    return new DBSybaseCatalogRepNode(viewObject,parent,type,inWhichProject);
default :
  return new DBCatalogRepNode(viewObject,parent,type,inWhichProject);
}
}","/** 
 * this method is used to create a DBCatalogRepNode. And Sybase is a specal case because we don't create schema level when the version of stdio is lower than 5.0.0.So we will create DBSybaseCatalogRepNode to deal with this special case
 * @param viewObject
 * @param parent parent of repositoryNode
 * @param type
 * @return
 */
public static RepositoryNode createDBCatalogRepNode(IRepositoryViewObject viewObject,RepositoryNode parent,ENodeType type,org.talend.core.model.general.Project inWhichProject){
  Item databaseItem=viewObject.getProperty().getItem();
  DatabaseConnection dbConnection=(DatabaseConnection)((DatabaseConnectionItem)databaseItem).getConnection();
  SupportDBUrlType dbTypeByKey=SupportDBUrlType.getDBTypeByKey(dbConnection.getDatabaseType());
switch (dbTypeByKey == null ? SupportDBUrlType.MYSQLDEFAULTURL : dbTypeByKey) {
case SYBASEDEFAULTURL:
    return new DBSybaseCatalogRepNode(viewObject,parent,type,inWhichProject);
default :
  return new DBCatalogRepNode(viewObject,parent,type,inWhichProject);
}
}",0.9717402082300446
136474,"/** 
 * get the ItemEditorInput according to the repNode, if there no ItemEditorInput return null.
 * @param repNode
 * @param isOpenItemEditorAction
 * @return IEditorInput
 * @throws PersistenceException
 */
public IEditorInput computeEditorInput(IRepositoryNode repNode,boolean isOpenItemEditorAction) throws BusinessException {
  if (repNode != null && !isOpenItemEditorAction) {
    IRepositoryNode currentNode=repNode;
    do {
      RepositoryNode parentNode=currentNode.getParent();
      if (parentNode != null && parentNode instanceof RecycleBinRepNode) {
        return null;
      }
      currentNode=parentNode;
    }
 while (currentNode != null);
  }
  IEditorInput result=null;
  IRepositoryViewObject repViewObj=repNode.getObject();
  if (repViewObj != null) {
    String key=repViewObj.getRepositoryObjectType().getKey();
    Item item=repViewObj.getProperty().getItem();
    if (item instanceof TDQItem && !(item instanceof TDQFileItem)) {
      ModelElement modelElement=PropertyHelper.getModelElement(repViewObj.getProperty());
      if (modelElement.eIsProxy() && repNode != null) {
        modelElement=EMFSharedResources.getInstance().reloadModelElementInNode(repNode);
        item=repViewObj.getProperty().getItem();
      }
      if (modelElement == null || modelElement.eResource() == null) {
        throw ExceptionFactory.getInstance().createBusinessException(((TDQItem)item).getFilename());
      }
    }
    if (ERepositoryObjectType.METADATA_CONNECTIONS.getKey().equals(key)) {
      result=new ConnectionItemEditorInput(repNode);
      editorID=ConnectionEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT.getKey().equals(key)) {
      result=new AnalysisItemEditorInput(repNode);
      Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
      if (analysis == null || analysis.getContext() == null) {
        throw ExceptionFactory.getInstance().createBusinessException(repViewObj);
      }
      EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
      RepositoryNode connectionRepositoryNode=null;
      if (!analysedElements.isEmpty()) {
        Connection connection=null;
        ModelElement modelElement=analysedElements.get(0);
        if (modelElement instanceof Connection) {
          connection=(Connection)modelElement;
        }
 else         if (modelElement instanceof Catalog) {
          Catalog catalog=SwitchHelpers.CATALOG_SWITCH.caseCatalog((Catalog)modelElement);
          connection=ConnectionHelper.getConnection(catalog);
        }
 else         if (modelElement instanceof Schema) {
          Schema schema=SwitchHelpers.SCHEMA_SWITCH.caseSchema((Schema)modelElement);
          if (schema != null) {
            connection=ConnectionHelper.getConnection(schema);
          }
        }
 else         if (modelElement instanceof TdTable) {
          TdTable tdTable=SwitchHelpers.TABLE_SWITCH.caseTdTable((TdTable)modelElement);
          connection=ConnectionHelper.getConnection(tdTable);
        }
 else         if (modelElement instanceof TdView) {
          TdView tdView=SwitchHelpers.VIEW_SWITCH.caseTdView((TdView)modelElement);
          connection=ConnectionHelper.getConnection(tdView);
        }
 else         if (modelElement instanceof TdColumn) {
          TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.caseTdColumn((TdColumn)modelElement);
          connection=ConnectionHelper.getConnection(tdColumn);
        }
 else         if (modelElement instanceof MetadataColumn) {
          MetadataColumn mColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(modelElement);
          connection=ConnectionHelper.getTdDataProvider(mColumn);
        }
        connectionRepositoryNode=RepositoryNodeHelper.recursiveFind(connection);
      }
      ((AnalysisItemEditorInput)result).setConnectionNode(connectionRepositoryNode);
      if (analysis.getParameters() != null && analysis.getParameters().getAnalysisType().equals(AnalysisType.MATCH_ANALYSIS)) {
        editorID=MatchAnalysisEditor.class.getName();
      }
 else {
        editorID=AnalysisEditor.class.getName();
      }
    }
 else     if (ERepositoryObjectType.TDQ_INDICATOR_ELEMENT.getKey().equals(key)) {
      result=new IndicatorDefinitionItemEditorInput(repNode);
      TDQIndicatorDefinitionItem definitionItem=(TDQIndicatorDefinitionItem)item;
      if (definitionItem.getIndicatorDefinition().eResource() == null) {
        throw ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
      }
      if (UDIHelper.getUDICategory(definitionItem.getIndicatorDefinition()) == null) {
        throw ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
      }
      editorID=IndicatorEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_RULES_SQL.getKey().equals(key) || ERepositoryObjectType.TDQ_RULES_PARSER.getKey().equals(key) || ERepositoryObjectType.TDQ_RULES_MATCHER.getKey().equals(key)) {
      result=new BusinessRuleItemEditorInput(repNode);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_PATTERN_ELEMENT.getKey().equals(key)) {
      result=new PatternItemEditorInput(repNode);
      TDQPatternItem patternItem=(TDQPatternItem)item;
      if (patternItem.getPattern() == null || patternItem.getPattern().eResource() == null) {
        throw ExceptionFactory.getInstance().createBusinessException(patternItem.getFilename());
      }
      editorID=PatternEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_REPORT_ELEMENT.getKey().equals(key)) {
      result=new ReportItemEditorInput(repNode);
      TDQReportItem reportItem=(TDQReportItem)item;
      if (!(reportItem.getReport() instanceof TdReport)) {
        throw ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
      }
      for (      AnalysisMap anaMap : ((TdReport)reportItem.getReport()).getAnalysisMap()) {
        Analysis analysis=anaMap.getAnalysis();
        if (analysis.eResource() == null) {
          throw ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
        }
      }
      editorID=""String_Node_Str"";
    }
 else     if (ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key) || ERepositoryObjectType.TDQ_JRAXML_ELEMENT.getKey().equals(key)) {
      IPath append=WorkbenchUtils.getFilePath(repViewObj.getRepositoryNode());
      DQRepositoryNode node=(DQRepositoryNode)repViewObj.getRepositoryNode();
      file=ResourceManager.getRoot().getProject(node.getProject().getTechnicalLabel()).getFile(append);
      if (!file.exists()) {
        throw ExceptionFactory.getInstance().createBusinessException(repViewObj);
      }
      if (ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key)) {
        editorID=SqlExplorerUtils.SQLEDITOR_ID;
      }
 else {
        editorID=TDQFileEditorInput.DEFAULT_EDITOR_ID;
      }
      result=new TDQFileEditorInput(file);
      ((TDQFileEditorInput)result).setFileItem(item);
      CorePlugin.getDefault().refreshDQView(repNode);
    }
    if (!isOpenItemEditorAction) {
      if (ERepositoryObjectType.TDQ_JRAXML_ELEMENT.getKey().equals(key) || ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key)) {
        result=new FileEditorInput(file);
        editorID=FileEditorInput.class.getName();
      }
    }
  }
  return result;
}","/** 
 * get the ItemEditorInput according to the repNode, if there no ItemEditorInput return null.
 * @param repNode
 * @param isOpenItemEditorAction
 * @return IEditorInput
 * @throws PersistenceException
 */
public IEditorInput computeEditorInput(IRepositoryNode repNode,boolean isOpenItemEditorAction) throws BusinessException {
  if (repNode != null && !isOpenItemEditorAction) {
    IRepositoryNode currentNode=repNode;
    do {
      RepositoryNode parentNode=currentNode.getParent();
      if (parentNode != null && parentNode instanceof RecycleBinRepNode) {
        return null;
      }
      currentNode=parentNode;
    }
 while (currentNode != null);
  }
  IEditorInput result=null;
  IRepositoryViewObject repViewObj=repNode.getObject();
  if (repViewObj != null) {
    String key=repViewObj.getRepositoryObjectType().getKey();
    Item item=repViewObj.getProperty().getItem();
    if (item instanceof TDQItem && !(item instanceof TDQFileItem)) {
      ModelElement modelElement=PropertyHelper.getModelElement(repViewObj.getProperty());
      if (modelElement.eIsProxy() && repNode != null) {
        modelElement=EMFSharedResources.getInstance().reloadModelElementInNode(repNode);
        item=repViewObj.getProperty().getItem();
      }
      if (modelElement == null || modelElement.eResource() == null) {
        throw ExceptionFactory.getInstance().createBusinessException(((TDQItem)item).getFilename());
      }
    }
    if (ERepositoryObjectType.METADATA_CONNECTIONS.getKey().equals(key)) {
      result=new ConnectionItemEditorInput(repNode);
      Connection connection=((ConnectionItem)item).getConnection();
      if (connection == null || connection.getDataPackage().size() == 0) {
        throw ExceptionFactory.getInstance().createBusinessException(repViewObj);
      }
      editorID=ConnectionEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT.getKey().equals(key)) {
      result=new AnalysisItemEditorInput(repNode);
      Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
      if (analysis == null || analysis.getContext() == null) {
        throw ExceptionFactory.getInstance().createBusinessException(repViewObj);
      }
      EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
      RepositoryNode connectionRepositoryNode=null;
      if (!analysedElements.isEmpty()) {
        Connection connection=null;
        ModelElement modelElement=analysedElements.get(0);
        if (modelElement instanceof Connection) {
          connection=(Connection)modelElement;
        }
 else         if (modelElement instanceof Catalog) {
          Catalog catalog=SwitchHelpers.CATALOG_SWITCH.caseCatalog((Catalog)modelElement);
          connection=ConnectionHelper.getConnection(catalog);
        }
 else         if (modelElement instanceof Schema) {
          Schema schema=SwitchHelpers.SCHEMA_SWITCH.caseSchema((Schema)modelElement);
          if (schema != null) {
            connection=ConnectionHelper.getConnection(schema);
          }
        }
 else         if (modelElement instanceof TdTable) {
          TdTable tdTable=SwitchHelpers.TABLE_SWITCH.caseTdTable((TdTable)modelElement);
          connection=ConnectionHelper.getConnection(tdTable);
        }
 else         if (modelElement instanceof TdView) {
          TdView tdView=SwitchHelpers.VIEW_SWITCH.caseTdView((TdView)modelElement);
          connection=ConnectionHelper.getConnection(tdView);
        }
 else         if (modelElement instanceof TdColumn) {
          TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.caseTdColumn((TdColumn)modelElement);
          connection=ConnectionHelper.getConnection(tdColumn);
        }
 else         if (modelElement instanceof MetadataColumn) {
          MetadataColumn mColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(modelElement);
          connection=ConnectionHelper.getTdDataProvider(mColumn);
        }
        connectionRepositoryNode=RepositoryNodeHelper.recursiveFind(connection);
      }
      ((AnalysisItemEditorInput)result).setConnectionNode(connectionRepositoryNode);
      if (analysis.getParameters() != null && analysis.getParameters().getAnalysisType().equals(AnalysisType.MATCH_ANALYSIS)) {
        editorID=MatchAnalysisEditor.class.getName();
      }
 else {
        editorID=AnalysisEditor.class.getName();
      }
    }
 else     if (ERepositoryObjectType.TDQ_INDICATOR_ELEMENT.getKey().equals(key)) {
      result=new IndicatorDefinitionItemEditorInput(repNode);
      TDQIndicatorDefinitionItem definitionItem=(TDQIndicatorDefinitionItem)item;
      if (definitionItem.getIndicatorDefinition().eResource() == null) {
        throw ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
      }
      if (UDIHelper.getUDICategory(definitionItem.getIndicatorDefinition()) == null) {
        throw ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
      }
      editorID=IndicatorEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_RULES_SQL.getKey().equals(key) || ERepositoryObjectType.TDQ_RULES_PARSER.getKey().equals(key) || ERepositoryObjectType.TDQ_RULES_MATCHER.getKey().equals(key)) {
      result=new BusinessRuleItemEditorInput(repNode);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_PATTERN_ELEMENT.getKey().equals(key)) {
      result=new PatternItemEditorInput(repNode);
      TDQPatternItem patternItem=(TDQPatternItem)item;
      if (patternItem.getPattern() == null || patternItem.getPattern().eResource() == null) {
        throw ExceptionFactory.getInstance().createBusinessException(patternItem.getFilename());
      }
      editorID=PatternEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_REPORT_ELEMENT.getKey().equals(key)) {
      result=new ReportItemEditorInput(repNode);
      TDQReportItem reportItem=(TDQReportItem)item;
      if (!(reportItem.getReport() instanceof TdReport)) {
        throw ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
      }
      for (      AnalysisMap anaMap : ((TdReport)reportItem.getReport()).getAnalysisMap()) {
        Analysis analysis=anaMap.getAnalysis();
        if (analysis.eResource() == null) {
          throw ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
        }
      }
      editorID=""String_Node_Str"";
    }
 else     if (ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key) || ERepositoryObjectType.TDQ_JRAXML_ELEMENT.getKey().equals(key)) {
      IPath append=WorkbenchUtils.getFilePath(repViewObj.getRepositoryNode());
      DQRepositoryNode node=(DQRepositoryNode)repViewObj.getRepositoryNode();
      file=ResourceManager.getRoot().getProject(node.getProject().getTechnicalLabel()).getFile(append);
      if (!file.exists()) {
        throw ExceptionFactory.getInstance().createBusinessException(repViewObj);
      }
      if (ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key)) {
        editorID=SqlExplorerUtils.SQLEDITOR_ID;
      }
 else {
        editorID=TDQFileEditorInput.DEFAULT_EDITOR_ID;
      }
      result=new TDQFileEditorInput(file);
      ((TDQFileEditorInput)result).setFileItem(item);
      CorePlugin.getDefault().refreshDQView(repNode);
    }
    if (!isOpenItemEditorAction) {
      if (ERepositoryObjectType.TDQ_JRAXML_ELEMENT.getKey().equals(key) || ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key)) {
        result=new FileEditorInput(file);
        editorID=FileEditorInput.class.getName();
      }
    }
  }
  return result;
}",0.9845213578688632
136475,"/** 
 * Judge whether there are JUDI or not
 * @param modelElementIndicator
 * @return
 */
private boolean searchJUDI(ModelElementIndicator modelElementIndicator,boolean isExist){
  isExistMappingExpr=true;
  for (  IndicatorUnit indicatorUnit : modelElementIndicator.getIndicatorUnits()) {
    if (IndicatorEnum.UserDefinedIndicatorEnum == indicatorUnit.getType() && !UDIHelper.isJavaUDI(indicatorUnit.getIndicator()) ^ isExist) {
      ExecutionLanguage executionLanguage=((AnalysisEditor)this.getEditor()).getUIExecuteEngin();
      DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(this.getCurrentModelElement(),executionLanguage);
      if (dbmsLanguage.getExpression(indicatorUnit.getIndicator()) == null) {
        isExistMappingExpr=false;
        return isExist;
      }
      return !isExist;
    }
  }
  return false;
}","/** 
 * Judge whether there are JUDI or not
 * @param modelElementIndicator
 * @return
 */
private boolean searchJUDI(ModelElementIndicator modelElementIndicator,boolean isExist){
  isExistSqlExpr=false;
  for (  IndicatorUnit indicatorUnit : modelElementIndicator.getIndicatorUnits()) {
    if (IndicatorEnum.UserDefinedIndicatorEnum == indicatorUnit.getType()) {
      if (!isExistSqlExpr && indicatorUnit.getIndicator().getIndicatorDefinition().getSqlGenericExpression().isEmpty()) {
        isExistSqlExpr=true;
      }
      if (isExist && UDIHelper.isJavaUDI(indicatorUnit.getIndicator())) {
        return true;
      }
 else       if (!isExist && UDIHelper.isJavaUDI(indicatorUnit.getIndicator())) {
        return false;
      }
    }
  }
  return !isExist;
}",0.5319280843149411
136476,"@Override public void widgetSelected(SelectionEvent e){
  execLang=execCombo1.getText();
  ExecutionLanguage currentLanguage=ExecutionLanguage.get(execLang);
  if (ExecutionLanguage.SQL.equals(currentLanguage) && includeJavaEngineIndicator()) {
    String dialogMessage=""String_Node_Str"";
    if (isExistMappingExpr) {
      dialogMessage=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
 else {
      ExecutionLanguage executionLanguage=((AnalysisEditor)ColumnAnalysisDetailsPage.this.getEditor()).getUIExecuteEngin();
      DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(ColumnAnalysisDetailsPage.this.getCurrentModelElement(),executionLanguage);
      dialogMessage=DefaultMessagesImpl.getString(""String_Node_Str"",dbmsLanguage.getDbmsName());
      ;
    }
    MessageUI.openWarning(dialogMessage);
    changeExecuteLanguageToJava(false);
    execLang=execCombo1.getText();
    return;
  }
 else   if (ExecutionLanguage.JAVA.equals(currentLanguage) && checkSqlEngineIndicatorExist()) {
    if (isRunWithSampleData) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
    changeExecuteLanguageToSql(true);
    execLang=execCombo1.getText();
    return;
  }
  refreshEnginSection(javaEnginSection,currentLanguage);
}","@Override public void widgetSelected(SelectionEvent e){
  execLang=execCombo1.getText();
  ExecutionLanguage currentLanguage=ExecutionLanguage.get(execLang);
  if (ExecutionLanguage.SQL.equals(currentLanguage) && includeJavaEngineIndicator()) {
    String dialogMessage=getNonJavaIndicatorMessage();
    MessageUI.openWarning(dialogMessage);
    changeExecuteLanguageToJava(false);
    execLang=execCombo1.getText();
    return;
  }
 else   if (ExecutionLanguage.JAVA.equals(currentLanguage) && checkSqlEngineIndicatorExist()) {
    if (isRunWithSampleData) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
 else {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    }
    changeExecuteLanguageToSql(true);
    execLang=execCombo1.getText();
    return;
  }
  refreshEnginSection(javaEnginSection,currentLanguage);
}",0.7618625277161862
136477,"private void addListenerToExecuteEngine(final CCombo execCombo1,final Composite javaEnginSection){
  execCombo1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      execLang=execCombo1.getText();
      ExecutionLanguage currentLanguage=ExecutionLanguage.get(execLang);
      if (ExecutionLanguage.SQL.equals(currentLanguage) && includeJavaEngineIndicator()) {
        String dialogMessage=""String_Node_Str"";
        if (isExistMappingExpr) {
          dialogMessage=DefaultMessagesImpl.getString(""String_Node_Str"");
        }
 else {
          ExecutionLanguage executionLanguage=((AnalysisEditor)ColumnAnalysisDetailsPage.this.getEditor()).getUIExecuteEngin();
          DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(ColumnAnalysisDetailsPage.this.getCurrentModelElement(),executionLanguage);
          dialogMessage=DefaultMessagesImpl.getString(""String_Node_Str"",dbmsLanguage.getDbmsName());
          ;
        }
        MessageUI.openWarning(dialogMessage);
        changeExecuteLanguageToJava(false);
        execLang=execCombo1.getText();
        return;
      }
 else       if (ExecutionLanguage.JAVA.equals(currentLanguage) && checkSqlEngineIndicatorExist()) {
        if (isRunWithSampleData) {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        }
 else {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        }
        changeExecuteLanguageToSql(true);
        execLang=execCombo1.getText();
        return;
      }
      refreshEnginSection(javaEnginSection,currentLanguage);
    }
  }
);
}","private void addListenerToExecuteEngine(final CCombo execCombo1,final Composite javaEnginSection){
  execCombo1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      execLang=execCombo1.getText();
      ExecutionLanguage currentLanguage=ExecutionLanguage.get(execLang);
      if (ExecutionLanguage.SQL.equals(currentLanguage) && includeJavaEngineIndicator()) {
        String dialogMessage=getNonJavaIndicatorMessage();
        MessageUI.openWarning(dialogMessage);
        changeExecuteLanguageToJava(false);
        execLang=execCombo1.getText();
        return;
      }
 else       if (ExecutionLanguage.JAVA.equals(currentLanguage) && checkSqlEngineIndicatorExist()) {
        if (isRunWithSampleData) {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        }
 else {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
        }
        changeExecuteLanguageToSql(true);
        execLang=execCombo1.getText();
        return;
      }
      refreshEnginSection(javaEnginSection,currentLanguage);
    }
  }
);
}",0.7970032108455226
136478,"/** 
 * regenerate all indexes recursively.
 * @param inputFolder
 * @param outputFolder
 * @throws java.io.IOException
 */
private int regenerate(File inputFolder,File outputFolder) throws IOException {
  FSDirectory inputDir=FSDirectory.open(inputFolder);
  CheckIndex check=new CheckIndex(inputDir);
  Status status=check.checkIndex();
  if (status.missingSegments) {
    for (    File f : inputFolder.listFiles()) {
      if (f.isDirectory()) {
        File out=new File(outputFolder.getAbsolutePath() + ""String_Node_Str"" + f.getName());
        out.mkdir();
        regenerate(f,out);
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"" + inputFolder.getPath());
    FSDirectory outputDir=FSDirectory.open(outputFolder);
    analyzer=new StandardAnalyzer(CharArraySet.EMPTY_SET);
    IndexWriterConfig config=new IndexWriterConfig(Version.LATEST,analyzer);
    IndexWriter writer=new IndexWriter(outputDir,config);
    IndexReader reader=DirectoryReader.open(inputDir);
    Collection<String> fieldNames=new ArrayList<String>();
    int count=0;
    Bits liveDocs=MultiFields.getLiveDocs(reader);
    for (int i=0; i < reader.maxDoc(); i++) {
      if (liveDocs != null && !liveDocs.get(i)) {
        continue;
      }
      Document doc=reader.document(i);
      List<IndexableField> fields=doc.getFields();
      for (int k=0; k < fields.size(); k++) {
        fieldNames.add(fields.get(k).name());
      }
      if (fieldNames.contains(F_WORD) && fieldNames.contains(F_SYN)) {
        String word=doc.getValues(F_WORD)[0];
        String[] synonyms=doc.getValues(F_SYN);
        Set<String> synonymSet=new HashSet<String>();
        for (        String syn : synonyms) {
          if (!syn.equals(word)) {
            synonymSet.add(syn);
          }
        }
        Document newDoc=generateDocument(word,synonymSet);
        writer.addDocument(newDoc);
      }
 else {
        writer.addDocument(doc);
      }
      count++;
    }
    System.out.println(""String_Node_Str"" + count);
    reader.close();
    writer.commit();
    writer.close();
    outputDir.close();
    for (    File file : inputFolder.listFiles()) {
      if (file.isFile() && !isLuceneIndexFile(file)) {
        copyFile(file,outputFolder);
      }
    }
  }
  return 0;
}","/** 
 * regenerate all indexes recursively.
 * @param inputFolder
 * @param outputFolder
 * @throws java.io.IOException
 */
private int regenerate(File inputFolder,File outputFolder) throws IOException {
  FSDirectory inputDir=FSDirectory.open(inputFolder);
  CheckIndex check=new CheckIndex(inputDir);
  Status status=check.checkIndex();
  if (status.missingSegments) {
    for (    File f : inputFolder.listFiles()) {
      if (f.isDirectory()) {
        File out=new File(outputFolder.getAbsolutePath() + ""String_Node_Str"" + f.getName());
        out.mkdir();
        regenerate(f,out);
      }
    }
  }
 else {
    System.out.println(""String_Node_Str"" + inputFolder.getPath());
    FSDirectory outputDir=FSDirectory.open(outputFolder);
    analyzer=new StandardAnalyzer(CharArraySet.EMPTY_SET);
    IndexWriterConfig config=new IndexWriterConfig(Version.LATEST,analyzer);
    IndexWriter writer=new IndexWriter(outputDir,config);
    IndexReader reader=DirectoryReader.open(inputDir);
    Collection<String> fieldNames=new ArrayList<String>();
    int count=0;
    Bits liveDocs=MultiFields.getLiveDocs(reader);
    for (int i=0; i < reader.maxDoc(); i++) {
      if (liveDocs != null && !liveDocs.get(i)) {
        continue;
      }
      Document doc=reader.document(i);
      List<IndexableField> fields=doc.getFields();
      for (int k=0; k < fields.size(); k++) {
        fieldNames.add(fields.get(k).name());
      }
      if (fieldNames.contains(F_WORD)) {
        String word=doc.getValues(F_WORD)[0];
        String[] synonyms=doc.getValues(F_SYN);
        Set<String> synonymSet=new HashSet<String>();
        for (        String syn : synonyms) {
          if (!syn.equals(word)) {
            synonymSet.add(syn);
          }
        }
        Document newDoc=generateDocument(word,synonymSet);
        writer.addDocument(newDoc);
      }
 else {
        writer.addDocument(doc);
      }
      count++;
    }
    System.out.println(""String_Node_Str"" + count);
    reader.close();
    writer.commit();
    writer.close();
    outputDir.close();
    for (    File file : inputFolder.listFiles()) {
      if (file.isFile() && !isLuceneIndexFile(file)) {
        copyFile(file,outputFolder);
      }
    }
  }
  return 0;
}",0.9933392539964476
136479,"/** 
 * DOC zshen Comment method ""initProxyRepository"".
 */
public ReturnCode initProxyRepository(){
  ReturnCode rc=new ReturnCode();
  Project project=null;
  RepositoryContext repositoryContext=(RepositoryContext)org.talend.core.runtime.CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext != null) {
    project=repositoryContext.getProject();
    User user=repositoryContext.getUser();
    ReponsitoryContextBridge.initialized(project.getEmfProject(),user);
  }
 else {
    Location instanceLoc=Platform.getInstanceLocation();
    try {
      if (instanceLoc.isLocked()) {
        rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
        rc.setOk(false);
        return rc;
      }
 else {
        instanceLoc.lock();
      }
    }
 catch (    IOException e) {
      log.error(e,e);
    }
    ProxyRepositoryFactory proxyRepository=ProxyRepositoryFactory.getInstance();
    IRepositoryFactory repository=RepositoryFactoryProvider.getRepositoriyById(RepositoryConstants.REPOSITORY_LOCAL_ID);
    if (repository == null) {
      log.fatal(DefaultMessagesImpl.getString(""String_Node_Str""));
      rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      rc.setOk(false);
      return rc;
    }
    proxyRepository.setRepositoryFactoryFromProvider(repository);
    try {
      proxyRepository.checkAvailability();
      proxyRepository.initialize();
      XmiResourceManager xmiResourceManager=new XmiResourceManager();
      IProject rootProject=ResourceManager.getRootProject();
      if (rootProject.getFile(FileConstants.LOCAL_PROJECT_FILENAME).exists()) {
        new EMFUtil();
        project=new Project(xmiResourceManager.loadProject(rootProject));
      }
 else {
        User user=PropertiesFactoryImpl.eINSTANCE.createUser();
        user.setLogin(""String_Node_Str"");
        user.setPassword(""String_Node_Str"".getBytes());
        String projectName=ResourceManager.getRootProjectName();
        String projectDesc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName).getComment();
        Project projectInfor=ProjectHelper.createProject(projectName,projectDesc,ECodeLanguage.JAVA.getName(),user);
        checkFileName(projectInfor.getLabel(),RepositoryConstants.PROJECT_PATTERN);
        project=proxyRepository.getRepositoryFactoryFromProvider().createProject(projectInfor);
      }
      if (project != null) {
        initRepositoryContext(project);
        String defaultTechnicalStatusList=""String_Node_Str"";
        List<Status> statusList=StatusHelper.parse(defaultTechnicalStatusList);
        proxyRepository.setTechnicalStatus(statusList);
        if (org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
            IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
            if (mavenUIService != null) {
              mavenUIService.checkUserSettings(new NullProgressMonitor());
              mavenUIService.updateMavenResolver(false);
              mavenUIService.addMavenConfigurationChangeListener();
            }
          }
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
            ILibrariesService librariesService=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
            if (librariesService != null) {
              librariesService.syncLibraries();
              librariesService.checkLibraries();
            }
          }
        }
        CWMPlugin.getDefault().createLibFolderIfNotExist();
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
      rc.setMessage(e.getMessage());
      rc.setOk(false);
      return rc;
    }
  }
  return rc;
}","/** 
 * DOC zshen Comment method ""initProxyRepository"".
 */
public ReturnCode initProxyRepository(){
  ReturnCode rc=new ReturnCode();
  Project project=null;
  RepositoryContext repositoryContext=(RepositoryContext)org.talend.core.runtime.CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext != null) {
    project=repositoryContext.getProject();
    User user=repositoryContext.getUser();
    ReponsitoryContextBridge.initialized(project.getEmfProject(),user);
  }
 else {
    Location instanceLoc=Platform.getInstanceLocation();
    try {
      if (instanceLoc.isLocked()) {
        rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
        rc.setOk(false);
        return rc;
      }
 else {
        instanceLoc.lock();
      }
    }
 catch (    IOException e) {
      log.error(e,e);
    }
    ProxyRepositoryFactory proxyRepository=ProxyRepositoryFactory.getInstance();
    IRepositoryFactory repository=RepositoryFactoryProvider.getRepositoriyById(RepositoryConstants.REPOSITORY_LOCAL_ID);
    if (repository == null) {
      log.fatal(DefaultMessagesImpl.getString(""String_Node_Str""));
      rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
      rc.setOk(false);
      return rc;
    }
    proxyRepository.setRepositoryFactoryFromProvider(repository);
    try {
      proxyRepository.checkAvailability();
      proxyRepository.initialize();
      XmiResourceManager xmiResourceManager=proxyRepository.getRepositoryFactoryFromProvider().getResourceManager();
      IProject rootProject=ResourceManager.getRootProject();
      if (rootProject.getFile(FileConstants.LOCAL_PROJECT_FILENAME).exists()) {
        new EMFUtil();
        project=new Project(xmiResourceManager.loadProject(rootProject));
      }
 else {
        User user=PropertiesFactoryImpl.eINSTANCE.createUser();
        user.setLogin(""String_Node_Str"");
        user.setPassword(""String_Node_Str"".getBytes());
        String projectName=ResourceManager.getRootProjectName();
        String projectDesc=ResourcesPlugin.getWorkspace().newProjectDescription(projectName).getComment();
        Project projectInfor=ProjectHelper.createProject(projectName,projectDesc,ECodeLanguage.JAVA.getName(),user);
        checkFileName(projectInfor.getLabel(),RepositoryConstants.PROJECT_PATTERN);
        project=proxyRepository.getRepositoryFactoryFromProvider().createProject(projectInfor);
      }
      if (project != null) {
        initRepositoryContext(project);
        String defaultTechnicalStatusList=""String_Node_Str"";
        List<Status> statusList=StatusHelper.parse(defaultTechnicalStatusList);
        proxyRepository.setTechnicalStatus(statusList);
        if (org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
            IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
            if (mavenUIService != null) {
              mavenUIService.checkUserSettings(new NullProgressMonitor());
              mavenUIService.updateMavenResolver(false);
              mavenUIService.addMavenConfigurationChangeListener();
            }
          }
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibrariesService.class)) {
            ILibrariesService librariesService=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
            if (librariesService != null) {
              librariesService.syncLibraries();
              librariesService.checkLibraries();
            }
          }
        }
        CWMPlugin.getDefault().createLibFolderIfNotExist();
      }
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
      rc.setMessage(e.getMessage());
      rc.setOk(false);
      return rc;
    }
  }
  return rc;
}",0.9924907725595012
136480,"public static FileInputDelimited createFileInputDelimited(DelimitedFileConnection delimitedFileconnection,int limit) throws IOException {
  String rowSeparator=JavaSqlFactory.getRowSeparatorValue(delimitedFileconnection);
  String encoding=JavaSqlFactory.getEncoding(delimitedFileconnection);
  String fieldSeparatorValue=JavaSqlFactory.getFieldSeparatorValue(delimitedFileconnection);
  boolean isSpliteRecord=delimitedFileconnection.isSplitRecord();
  boolean isSkipeEmptyRow=delimitedFileconnection.isRemoveEmptyRow();
  String languageName=LanguageManager.getCurrentLanguage().getName();
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  int footValue=JavaSqlFactory.getFooterValue(delimitedFileconnection);
  String path=JavaSqlFactory.getURL(delimitedFileconnection);
  return new FileInputDelimited(ParameterUtil.trimParameter(path),ParameterUtil.trimParameter(encoding),ParameterUtil.trimParameter(StringUtils.loadConvert(fieldSeparatorValue,languageName)),ParameterUtil.trimParameter(StringUtils.loadConvert(rowSeparator,languageName)),isSkipeEmptyRow,headValue,footValue,limitValue < limit ? limitValue : limit,-1,isSpliteRecord);
}","public static FileInputDelimited createFileInputDelimited(DelimitedFileConnection delimitedFileconnection,int limit) throws IOException {
  String rowSeparator=JavaSqlFactory.getRowSeparatorValue(delimitedFileconnection);
  String encoding=JavaSqlFactory.getEncoding(delimitedFileconnection);
  String fieldSeparatorValue=JavaSqlFactory.getFieldSeparatorValue(delimitedFileconnection);
  boolean isSpliteRecord=delimitedFileconnection.isSplitRecord();
  boolean isSkipeEmptyRow=delimitedFileconnection.isRemoveEmptyRow();
  String languageName=LanguageManager.getCurrentLanguage().getName();
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  if (limitValue <= 0) {
    limitValue=limit;
  }
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  int footValue=JavaSqlFactory.getFooterValue(delimitedFileconnection);
  String path=JavaSqlFactory.getURL(delimitedFileconnection);
  return new FileInputDelimited(ParameterUtil.trimParameter(path),ParameterUtil.trimParameter(encoding),ParameterUtil.trimParameter(StringUtils.loadConvert(fieldSeparatorValue,languageName)),ParameterUtil.trimParameter(StringUtils.loadConvert(rowSeparator,languageName)),isSkipeEmptyRow,headValue,footValue,limitValue < limit ? limitValue : limit,-1,isSpliteRecord);
}",0.9797859690844232
136481,"@Override protected int getCsvReaderLimit(){
  int connLimit=super.getCsvReaderLimit();
  int analysisLimit=getLimitNumber(this.analysis);
  return analysisLimit < connLimit ? analysisLimit : connLimit;
}","@Override protected int getCsvReaderLimit(){
  int connLimit=super.getCsvReaderLimit();
  int analysisLimit=getLimitNumber(this.analysis);
  if (connLimit <= 0) {
    return analysisLimit;
  }
  return analysisLimit < connLimit ? analysisLimit : connLimit;
}",0.8181818181818182
136482,"/** 
 * DOC klliu Comment method ""wapperInput"". relations
 * @param indicatorTableList
 * @param parentNode
 * @return
 */
private List<OverviewIndUIElement> wapperInput(EList<TableIndicator> indicatorTableList,IRepositoryNode parentNode){
  List<OverviewIndUIElement> cataUIEleList=new ArrayList<OverviewIndUIElement>();
  List<IRepositoryNode> children=parentNode.getChildren();
  for (  IRepositoryNode folderNode : children) {
    if (folderNode instanceof DBTableFolderRepNode) {
      List<IRepositoryNode> tableNodes=folderNode.getChildren();
      for (      TableIndicator indicator : indicatorTableList) {
        boolean equals=false;
        for (        IRepositoryNode tableNode : tableNodes) {
          MetadataTable table=((MetadataTableRepositoryObject)tableNode.getObject()).getTable();
          String name=table.getName();
          String tableName=indicator.getTableName();
          equals=name.equals(tableName);
          if (equals) {
            OverviewIndUIElement tableUIEle=new OverviewIndUIElement();
            tableUIEle.setNode(tableNode);
            tableUIEle.setOverviewIndicator(indicator);
            try {
              if (DqRepositoryViewService.getColumns(getTdDataProvider(),(ColumnSet)table,true).isEmpty()) {
                tableUIEle.setVirtualNode(true);
              }
            }
 catch (            Exception e) {
              log.error(e,e);
            }
            cataUIEleList.add(tableUIEle);
            break;
          }
        }
        if (!equals) {
          OverviewIndUIElement tableUIEle=new OverviewIndUIElement();
          tableUIEle.setOverviewIndicator(indicator);
          tableUIEle.setVirtualNode(true);
          cataUIEleList.add(tableUIEle);
        }
      }
    }
  }
  return cataUIEleList;
}","/** 
 * DOC klliu Comment method ""wapperInput"". relations
 * @param indicatorTableList
 * @param parentNode
 * @return
 */
private List<OverviewIndUIElement> wapperInput(EList<TableIndicator> indicatorTableList,IRepositoryNode parentNode){
  List<OverviewIndUIElement> cataUIEleList=new ArrayList<OverviewIndUIElement>();
  List<IRepositoryNode> children=parentNode.getChildren();
  for (  IRepositoryNode folderNode : children) {
    if (folderNode instanceof DBTableFolderRepNode) {
      List<IRepositoryNode> tableNodes=folderNode.getChildren();
      for (      TableIndicator indicator : indicatorTableList) {
        boolean equals=false;
        for (        IRepositoryNode tableNode : tableNodes) {
          MetadataTable table=((MetadataTableRepositoryObject)tableNode.getObject()).getTable();
          String name=table.getName();
          String tableName=indicator.getTableName();
          equals=name.equals(tableName);
          if (equals) {
            OverviewIndUIElement tableUIEle=new OverviewIndUIElement();
            tableUIEle.setNode(tableNode);
            tableUIEle.setOverviewIndicator(indicator);
            if (DqRepositoryViewService.isComeFromRefrenceProject(getTdDataProvider()) && ColumnSetHelper.getColumns((ColumnSet)table).isEmpty()) {
              tableUIEle.setVirtualNode(true);
            }
            cataUIEleList.add(tableUIEle);
            break;
          }
        }
        if (!equals) {
          OverviewIndUIElement tableUIEle=new OverviewIndUIElement();
          tableUIEle.setOverviewIndicator(indicator);
          tableUIEle.setVirtualNode(true);
          cataUIEleList.add(tableUIEle);
        }
      }
    }
  }
  return cataUIEleList;
}",0.9085191538021726
136483,"public static SurvivorShipAlgorithmParams createSurvivorShipAlgorithmParams(AnalysisMatchRecordGrouping analysisMatchRecordGrouping,RecordMatchingIndicator recordMatchingIndicator,Map<MetadataColumn,String> columnMap){
  SurvivorShipAlgorithmParams survivorShipAlgorithmParams=new SurvivorShipAlgorithmParams();
  List<SurvivorshipKeyDefinition> survivorshipKeyDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getSurvivorshipKeys();
  List<SurvivorshipFunction> survFunctions=new ArrayList<SurvivorshipFunction>();
  for (  SurvivorshipKeyDefinition survDef : survivorshipKeyDefs) {
    SurvivorshipFunction func=survivorShipAlgorithmParams.new SurvivorshipFunction();
    func.setSurvivorShipKey(survDef.getName());
    func.setParameter(survDef.getFunction().getAlgorithmParameters());
    func.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.getTypeBySavedValue(survDef.getFunction().getAlgorithmType()));
    survFunctions.add(func);
  }
  survivorShipAlgorithmParams.setSurviorShipAlgos(survFunctions.toArray(new SurvivorshipFunction[survivorshipKeyDefs.size()]));
  List<DefaultSurvivorshipDefinition> defSurvDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getDefaultSurvivorshipDefinitions();
  Map<Integer,SurvivorshipFunction> defaultSurvRules=new HashMap<Integer,SurvivorshipFunction>();
  for (  MetadataColumn metaColumn : columnMap.keySet()) {
    String dataTypeName=metaColumn.getTalendType();
    for (    DefaultSurvivorshipDefinition defSurvDef : defSurvDefs) {
      if (StringUtils.equals(dataTypeName,""String_Node_Str"" + defSurvDef.getDataType())) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
 else       if (StringUtils.equals(defSurvDef.getDataType(),""String_Node_Str"") && JavaTypesManager.isNumber(dataTypeName)) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
    }
  }
  survivorShipAlgorithmParams.setDefaultSurviorshipRules(defaultSurvRules);
  CombinedRecordMatcher combinedRecordMatcher=analysisMatchRecordGrouping.getCombinedRecordMatcher();
  survivorShipAlgorithmParams.setRecordMatcher(combinedRecordMatcher);
  Map<IRecordMatcher,SurvivorshipFunction[]> survAlgos=new HashMap<IRecordMatcher,SurvivorshipFunction[]>();
  SurvivorshipFunction[] survFuncs=survivorShipAlgorithmParams.getSurviorShipAlgos();
  Map<Integer,SurvivorshipFunction> colIdx2DefaultSurvFunc=survivorShipAlgorithmParams.getDefaultSurviorshipRules();
  int matchRuleIdx=-1;
  List<List<Map<String,String>>> multiRules=analysisMatchRecordGrouping.getMultiMatchRules();
  for (  List<Map<String,String>> matchrule : multiRules) {
    matchRuleIdx++;
    if (matchrule == null) {
      continue;
    }
    SurvivorshipFunction[] surFuncsInMatcher=new SurvivorshipFunction[matchrule.size()];
    int idx=0;
    for (    Map<String,String> mkDef : matchrule) {
      String matcherType=mkDef.get(IRecordGrouping.MATCHING_TYPE);
      if (AttributeMatcherType.DUMMY.name().equals(matcherType)) {
        surFuncsInMatcher[idx]=colIdx2DefaultSurvFunc.get(Integer.valueOf(mkDef.get(IRecordGrouping.COLUMN_IDX)));
        if (surFuncsInMatcher[idx] == null) {
          surFuncsInMatcher[idx]=survivorShipAlgorithmParams.new SurvivorshipFunction();
          surFuncsInMatcher[idx].setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.CONCATENATE);
          surFuncsInMatcher[idx].setParameter(SurvivorshipUtils.DEFAULT_CONCATENATE_PARAMETER);
        }
      }
 else {
        for (        SurvivorshipFunction survFunc : survFuncs) {
          String keyName=mkDef.get(IRecordGrouping.MATCH_KEY_NAME);
          if (keyName.equals(survFunc.getSurvivorShipKey())) {
            surFuncsInMatcher[idx]=survFunc;
            break;
          }
        }
      }
      idx++;
    }
    survAlgos.put(combinedRecordMatcher.getMatchers().get(matchRuleIdx),surFuncsInMatcher);
  }
  survivorShipAlgorithmParams.setSurvivorshipAlgosMap(survAlgos);
  return survivorShipAlgorithmParams;
}","/** 
 * DOC zshen Comment method ""createSurvivorShipAlgorithmParams"". Same with   {@link SurvivorshipUtils#createSurvivorShipAlgorithmParams(AnalysisMatchRecordGrouping,List,List,Map,Map)} sothat any modify need to synchronization them with same time
 * @param analysisMatchRecordGrouping
 * @param recordMatchingIndicator
 * @param columnMap
 * @return
 */
public static SurvivorShipAlgorithmParams createSurvivorShipAlgorithmParams(AnalysisMatchRecordGrouping analysisMatchRecordGrouping,RecordMatchingIndicator recordMatchingIndicator,Map<MetadataColumn,String> columnMap){
  SurvivorShipAlgorithmParams survivorShipAlgorithmParams=new SurvivorShipAlgorithmParams();
  List<SurvivorshipKeyDefinition> survivorshipKeyDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getSurvivorshipKeys();
  List<SurvivorshipFunction> survFunctions=new ArrayList<SurvivorshipFunction>();
  for (  SurvivorshipKeyDefinition survDef : survivorshipKeyDefs) {
    SurvivorshipFunction func=survivorShipAlgorithmParams.new SurvivorshipFunction();
    func.setSurvivorShipKey(survDef.getName());
    func.setParameter(survDef.getFunction().getAlgorithmParameters());
    func.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.getTypeBySavedValue(survDef.getFunction().getAlgorithmType()));
    survFunctions.add(func);
  }
  survivorShipAlgorithmParams.setSurviorShipAlgos(survFunctions.toArray(new SurvivorshipFunction[survivorshipKeyDefs.size()]));
  List<DefaultSurvivorshipDefinition> defSurvDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getDefaultSurvivorshipDefinitions();
  Map<Integer,SurvivorshipFunction> defaultSurvRules=new HashMap<Integer,SurvivorshipFunction>();
  for (  MetadataColumn metaColumn : columnMap.keySet()) {
    String dataTypeName=metaColumn.getTalendType();
    for (    DefaultSurvivorshipDefinition defSurvDef : defSurvDefs) {
      if (StringUtils.equals(dataTypeName,""String_Node_Str"" + defSurvDef.getDataType()) || StringUtils.equals(defSurvDef.getDataType(),""String_Node_Str"") && JavaTypesManager.isNumber(dataTypeName)) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
    }
  }
  survivorShipAlgorithmParams.setDefaultSurviorshipRules(defaultSurvRules);
  CombinedRecordMatcher combinedRecordMatcher=analysisMatchRecordGrouping.getCombinedRecordMatcher();
  survivorShipAlgorithmParams.setRecordMatcher(combinedRecordMatcher);
  Map<IRecordMatcher,SurvivorshipFunction[]> survAlgos=new HashMap<IRecordMatcher,SurvivorshipFunction[]>();
  SurvivorshipFunction[] survFuncs=survivorShipAlgorithmParams.getSurviorShipAlgos();
  Map<Integer,SurvivorshipFunction> colIdx2DefaultSurvFunc=survivorShipAlgorithmParams.getDefaultSurviorshipRules();
  int matchRuleIdx=-1;
  List<List<Map<String,String>>> multiRules=analysisMatchRecordGrouping.getMultiMatchRules();
  for (  List<Map<String,String>> matchrule : multiRules) {
    matchRuleIdx++;
    if (matchrule == null) {
      continue;
    }
    SurvivorshipFunction[] surFuncsInMatcher=new SurvivorshipFunction[matchrule.size()];
    int idx=0;
    for (    Map<String,String> mkDef : matchrule) {
      String matcherType=mkDef.get(IRecordGrouping.MATCHING_TYPE);
      if (AttributeMatcherType.DUMMY.name().equalsIgnoreCase(matcherType)) {
        surFuncsInMatcher[idx]=colIdx2DefaultSurvFunc.get(Integer.valueOf(mkDef.get(IRecordGrouping.COLUMN_IDX)));
        if (surFuncsInMatcher[idx] == null) {
          surFuncsInMatcher[idx]=survivorShipAlgorithmParams.new SurvivorshipFunction();
          surFuncsInMatcher[idx].setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.CONCATENATE);
          surFuncsInMatcher[idx].setParameter(SurvivorshipUtils.DEFAULT_CONCATENATE_PARAMETER);
        }
      }
 else {
        for (        SurvivorshipFunction survFunc : survFuncs) {
          String keyName=mkDef.get(IRecordGrouping.MATCH_KEY_NAME);
          if (keyName.equals(survFunc.getSurvivorShipKey())) {
            surFuncsInMatcher[idx]=survFunc;
            break;
          }
        }
      }
      idx++;
    }
    survAlgos.put(combinedRecordMatcher.getMatchers().get(matchRuleIdx),surFuncsInMatcher);
  }
  survivorShipAlgorithmParams.setSurvivorshipAlgosMap(survAlgos);
  return survivorShipAlgorithmParams;
}",0.9381060696755656
136484,"@Override public void addListenerToChartComp(Object chartComposite,final String referenceLink,final String menuText){
  final ChartComposite chartComp=(ChartComposite)chartComposite;
  ChartMouseListener listener=new ChartMouseListener(){
    @Override public void chartMouseClicked(    ChartMouseEvent event){
      if (event.getTrigger().getButton() == 1 && referenceLink != null) {
        Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
        chartComp.setMenu(menu);
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(menuText);
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            ChartUtils.openReferenceLink(referenceLink);
          }
        }
);
        menu.setVisible(true);
      }
    }
    @Override public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
;
  chartComp.addChartMouseListener(listener);
  chartComp.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      chartComp.removeChartMouseListener(listener);
      chartComp.dispose();
    }
  }
);
}","@Override public void addListenerToChartComp(Object chartComposite,final String referenceLink,final String menuText){
  final ChartComposite chartComp=(ChartComposite)chartComposite;
  final ChartMouseListener listener=new ChartMouseListener(){
    @Override public void chartMouseClicked(    ChartMouseEvent event){
      if (event.getTrigger().getButton() == 1 && referenceLink != null) {
        Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
        chartComp.setMenu(menu);
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(menuText);
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            ChartUtils.openReferenceLink(referenceLink);
          }
        }
);
        menu.setVisible(true);
      }
    }
    @Override public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
;
  chartComp.addChartMouseListener(listener);
  chartComp.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      chartComp.removeChartMouseListener(listener);
      chartComp.dispose();
    }
  }
);
}",0.9974182444061962
136485,"@Override public void addMouseListenerForChart(Object chartComposite,final Map<String,Object> menuMap,final boolean useRowFirst){
  final ChartComposite chartComp=(ChartComposite)chartComposite;
  ChartMouseListener listener=new ChartMouseListener(){
    @Override public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        Menu menu=getCurrentMenu(cateEntity);
        if (menu != null) {
          chartComp.setMenu(menu);
          menu.setVisible(true);
        }
      }
    }
    private Menu getCurrentMenu(    CategoryItemEntity cateEntity){
      if (useRowFirst) {
        return findCurrentMenu(cateEntity.getRowKey(),cateEntity.getColumnKey());
      }
 else {
        return findCurrentMenu(cateEntity.getColumnKey(),cateEntity.getRowKey());
      }
    }
    /** 
 * DOC yyin Comment method ""findCurrentMenu"".
 * @param firstKey
 * @param secondKey
 * @return
 */
    private Menu findCurrentMenu(    final Object firstKey,    Object secondKey){
      Object menu=menuMap.get(firstKey);
      if (menu != null) {
        return (Menu)menu;
      }
      menu=menuMap.get(secondKey);
      if (menu != null) {
        return (Menu)menu;
      }
      return null;
    }
    @Override public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
;
  chartComp.addChartMouseListener(listener);
  chartComp.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      chartComp.removeChartMouseListener(listener);
      chartComp.dispose();
    }
  }
);
}","@Override public void addMouseListenerForChart(Object chartComposite,final Map<String,Object> menuMap,final boolean useRowFirst){
  final ChartComposite chartComp=(ChartComposite)chartComposite;
  final ChartMouseListener listener=new ChartMouseListener(){
    @Override public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        Menu menu=getCurrentMenu(cateEntity);
        if (menu != null) {
          chartComp.setMenu(menu);
          menu.setVisible(true);
        }
      }
    }
    private Menu getCurrentMenu(    CategoryItemEntity cateEntity){
      if (useRowFirst) {
        return findCurrentMenu(cateEntity.getRowKey(),cateEntity.getColumnKey());
      }
 else {
        return findCurrentMenu(cateEntity.getColumnKey(),cateEntity.getRowKey());
      }
    }
    /** 
 * DOC yyin Comment method ""findCurrentMenu"".
 * @param firstKey
 * @param secondKey
 * @return
 */
    private Menu findCurrentMenu(    final Object firstKey,    Object secondKey){
      Object menu=menuMap.get(firstKey);
      if (menu != null) {
        return (Menu)menu;
      }
      menu=menuMap.get(secondKey);
      if (menu != null) {
        return (Menu)menu;
      }
      return null;
    }
    @Override public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
;
  chartComp.addChartMouseListener(listener);
  chartComp.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      chartComp.removeChartMouseListener(listener);
      chartComp.dispose();
    }
  }
);
}",0.998439937597504
136486,"@Override public void addMouseListenerForConceptChart(Object chartComposite,final Map<String,Object> actionMap){
  final ChartComposite chartComp=(ChartComposite)chartComposite;
  ChartMouseListener listener=new ChartMouseListener(){
    @Override public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() == MouseEvent.BUTTON1;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (!flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        Plot plot=event.getChart().getPlot();
        if (plot != null) {
          CustomConceptRenderer render=new CustomConceptRenderer(cateEntity.getCategoryIndex());
          render.setShadowVisible(false);
          render.setDrawBarOutline(false);
          ((CategoryPlot)plot).setRenderer(render);
        }
        Object action=getCurrentAction(cateEntity);
        Class<? extends Object> actionClass=action.getClass();
        try {
          Method actionRunMethod=actionClass.getDeclaredMethod(""String_Node_Str"");
          actionRunMethod.invoke(action);
        }
 catch (        NoSuchMethodException e) {
          log.error(e,e);
        }
catch (        SecurityException e) {
          log.error(e,e);
        }
catch (        IllegalAccessException e) {
          log.error(e,e);
        }
catch (        IllegalArgumentException e) {
          log.error(e,e);
        }
catch (        InvocationTargetException e) {
          log.error(e,e);
        }
      }
    }
    private Object getCurrentAction(    CategoryItemEntity cateEntity){
      return findCurrentAction(cateEntity.getColumnKey(),cateEntity.getRowKey());
    }
    /** 
 * Find current action
 * @param firstKey
 * @param secondKey
 * @return
 */
    private Object findCurrentAction(    final Object firstKey,    Object secondKey){
      Object action=actionMap.get(firstKey);
      if (action != null) {
        return action;
      }
      action=actionMap.get(secondKey);
      if (action != null) {
        return action;
      }
      return null;
    }
    @Override public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
;
  chartComp.addChartMouseListener(listener);
  chartComp.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      chartComp.removeChartMouseListener(listener);
      chartComp.dispose();
    }
  }
);
}","@Override public void addMouseListenerForConceptChart(Object chartComposite,final Map<String,Object> actionMap){
  final ChartComposite chartComp=(ChartComposite)chartComposite;
  final ChartMouseListener listener=new ChartMouseListener(){
    @Override public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() == MouseEvent.BUTTON1;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (!flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        Plot plot=event.getChart().getPlot();
        if (plot != null) {
          CustomConceptRenderer render=new CustomConceptRenderer(cateEntity.getCategoryIndex());
          render.setShadowVisible(false);
          render.setDrawBarOutline(false);
          ((CategoryPlot)plot).setRenderer(render);
        }
        Object action=getCurrentAction(cateEntity);
        Class<? extends Object> actionClass=action.getClass();
        try {
          Method actionRunMethod=actionClass.getDeclaredMethod(""String_Node_Str"");
          actionRunMethod.invoke(action);
        }
 catch (        NoSuchMethodException e) {
          log.error(e,e);
        }
catch (        SecurityException e) {
          log.error(e,e);
        }
catch (        IllegalAccessException e) {
          log.error(e,e);
        }
catch (        IllegalArgumentException e) {
          log.error(e,e);
        }
catch (        InvocationTargetException e) {
          log.error(e,e);
        }
      }
    }
    private Object getCurrentAction(    CategoryItemEntity cateEntity){
      return findCurrentAction(cateEntity.getColumnKey(),cateEntity.getRowKey());
    }
    /** 
 * Find current action
 * @param firstKey
 * @param secondKey
 * @return
 */
    private Object findCurrentAction(    final Object firstKey,    Object secondKey){
      Object action=actionMap.get(firstKey);
      if (action != null) {
        return action;
      }
      action=actionMap.get(secondKey);
      if (action != null) {
        return action;
      }
      return null;
    }
    @Override public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
;
  chartComp.addChartMouseListener(listener);
  chartComp.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      chartComp.removeChartMouseListener(listener);
      chartComp.dispose();
    }
  }
);
}",0.9988416988416988
136487,"/** 
 * unregister the update execution event Added 20130725 TDQ-7639
 */
@Override public void dispose(){
  EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement(),EventEnum.DQ_ANALYSIS_CHECK_BEFORERUN);
  EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement(),EventEnum.DQ_ANALYSIS_RUN_FROM_MENU);
  EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement().getName(),EventEnum.DQ_ANALYSIS_REOPEN_EDITOR);
  if (analysisType.equals(AnalysisType.COLUMN_SET)) {
    EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement(),EventEnum.DQ_COLUMNSET_SHOW_MATCH_INDICATORS);
  }
  if (masterPage instanceof DynamicAnalysisMasterPage) {
    EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement(),EventEnum.DQ_DYNAMIC_REGISTER_DYNAMIC_CHART);
    EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement(),EventEnum.DQ_DYNAMIC_REGISTER_DYNAMIC_CHART);
  }
  super.dispose();
}","/** 
 * unregister the update execution event Added 20130725 TDQ-7639
 */
@Override public void dispose(){
  EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement(),EventEnum.DQ_ANALYSIS_CHECK_BEFORERUN);
  EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement(),EventEnum.DQ_ANALYSIS_RUN_FROM_MENU);
  EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement().getName(),EventEnum.DQ_ANALYSIS_REOPEN_EDITOR);
  if (analysisType.equals(AnalysisType.COLUMN_SET)) {
    EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement(),EventEnum.DQ_COLUMNSET_SHOW_MATCH_INDICATORS);
  }
  if (masterPage instanceof DynamicAnalysisMasterPage) {
    EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement(),EventEnum.DQ_DYNAMIC_REGISTER_DYNAMIC_CHART);
    EventManager.getInstance().clearEvent(getMasterPage().getCurrentModelElement(),EventEnum.DQ_DYNAMIC_UNREGISTER_DYNAMIC_CHART);
  }
  super.dispose();
}",0.999003984063745
136488,"/** 
 * DOC zshen Comment method ""computePagination"".
 */
private void computePagination(){
  disposeChartComposite();
  if (uiPagination == null) {
    uiPagination=new UIPagination(toolkit);
    uiPagination.setComposite(navigationComposite);
  }
 else {
    lastTimePageNumber=uiPagination.getCurrentPageNumber();
    uiPagination.reset();
  }
  final ModelElementIndicator[] modelElementIndicatorArrary=this.getCurrentModelElementIndicators();
  int pageSize=IndicatorPaginationInfo.getPageSize();
  int totalPages=modelElementIndicatorArrary.length / pageSize;
  List<ModelElementIndicator> modelElementIndicatorList=null;
  for (int index=0; index < totalPages; index++) {
    modelElementIndicatorList=new ArrayList<ModelElementIndicator>();
    for (int idx=0; idx < pageSize; idx++) {
      modelElementIndicatorList.add(modelElementIndicatorArrary[index * pageSize + idx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicatorList,uiPagination,treeViewer);
    uiPagination.addPage(pginfo);
  }
  int left=modelElementIndicatorArrary.length % pageSize;
  if (left != 0 || totalPages == 0) {
    modelElementIndicatorList=new ArrayList<ModelElementIndicator>();
    for (int leftIdx=0; leftIdx < left; leftIdx++) {
      modelElementIndicatorList.add(modelElementIndicatorArrary[totalPages * pageSize + leftIdx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicatorList,uiPagination,treeViewer);
    uiPagination.addPage(pginfo);
    totalPages++;
  }
  uiPagination.init();
}","/** 
 * DOC zshen Comment method ""computePagination"".
 */
private void computePagination(){
  disposeChartComposite();
  if (uiPagination == null) {
    uiPagination=new UIPagination(toolkit,navigationComposite);
  }
 else {
    lastTimePageNumber=uiPagination.getCurrentPageNumber();
    uiPagination.reset();
  }
  final ModelElementIndicator[] modelElementIndicatorArrary=this.getCurrentModelElementIndicators();
  int pageSize=IndicatorPaginationInfo.getPageSize();
  int totalPages=modelElementIndicatorArrary.length / pageSize;
  List<ModelElementIndicator> modelElementIndicatorList=null;
  for (int index=0; index < totalPages; index++) {
    modelElementIndicatorList=new ArrayList<ModelElementIndicator>();
    for (int idx=0; idx < pageSize; idx++) {
      modelElementIndicatorList.add(modelElementIndicatorArrary[index * pageSize + idx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicatorList,uiPagination,treeViewer);
    uiPagination.addPage(pginfo);
  }
  int left=modelElementIndicatorArrary.length % pageSize;
  if (left != 0 || totalPages == 0) {
    modelElementIndicatorList=new ArrayList<ModelElementIndicator>();
    for (int leftIdx=0; leftIdx < left; leftIdx++) {
      modelElementIndicatorList.add(modelElementIndicatorArrary[totalPages * pageSize + leftIdx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicatorList,uiPagination,treeViewer);
    uiPagination.addPage(pginfo);
    totalPages++;
  }
  uiPagination.init();
}",0.9892676767676768
136489,"@Override public void dispose(){
  super.dispose();
  if (this.treeViewer != null) {
    this.treeViewer.removePropertyChangeListener(this);
  }
  if (dataFilterComp != null) {
    this.dataFilterComp.removePropertyChangeListener(this);
  }
  EventManager.getInstance().clearEvent(dataPreviewSection,EventEnum.DQ_SELECT_ELEMENT_AFTER_CREATE_CONNECTION);
  MapDBManager.getInstance().closeDB(getCurrentModelElement());
  if (oldConn != null && isDirty()) {
    getCurrentModelElement().getContext().setConnection(oldConn);
  }
  if (this.getSampleTable().getExistPreviewData() != null) {
    this.getSampleTable().getExistPreviewData().clear();
  }
}","@Override public void dispose(){
  super.dispose();
  if (this.treeViewer != null) {
    this.treeViewer.removePropertyChangeListener(this);
  }
  if (dataFilterComp != null) {
    this.dataFilterComp.removePropertyChangeListener(this);
  }
  EventManager.getInstance().clearEvent(dataPreviewSection,EventEnum.DQ_SELECT_ELEMENT_AFTER_CREATE_CONNECTION);
  if (AnalysisHelper.isJavaExecutionEngine(getCurrentModelElement())) {
    MapDBManager.getInstance().closeDB(getCurrentModelElement());
  }
  if (oldConn != null && isDirty()) {
    getCurrentModelElement().getContext().setConnection(oldConn);
  }
  if (this.getSampleTable().getExistPreviewData() != null) {
    this.getSampleTable().getExistPreviewData().clear();
  }
}",0.943313953488372
136490,"private void disposeComposite(){
  if (summaryComp != null && !summaryComp.isDisposed()) {
    summaryComp.dispose();
  }
  if (resultComp != null && !resultComp.isDisposed()) {
    resultComp.dispose();
  }
  if (chartComposite != null && !chartComposite.isDisposed()) {
    for (    Control control : chartComposite.getChildren()) {
      control.dispose();
    }
  }
}","private void disposeComposite(){
  if (summaryComp != null && !summaryComp.isDisposed()) {
    summaryComp.dispose();
  }
  if (resultComp != null && !resultComp.isDisposed()) {
    resultComp.dispose();
  }
}",0.7206896551724138
136491,"@Override protected void createResultSection(Composite parent){
  resultSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite collapseExpandComposite=toolkit.createComposite(resultSection);
  GridLayout gdLayout=new GridLayout();
  gdLayout.numColumns=2;
  collapseExpandComposite.setLayout(gdLayout);
  createCollapseAllLink(collapseExpandComposite);
  createExpandAllLink(collapseExpandComposite);
  resultSection.setTextClient(collapseExpandComposite);
  chartTableComposite=toolkit.createComposite(resultSection);
  chartTableComposite.setLayout(new GridLayout());
  chartTableComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final ModelElementIndicator[] modelElementIndicatores=masterPage.getCurrentModelElementIndicators();
  uiPagination=new UIPagination(toolkit,chartTableComposite);
  int pageSize=IndicatorPaginationInfo.getPageSize();
  int totalPages=modelElementIndicatores.length / pageSize;
  List<ModelElementIndicator> modelElementIndLs=null;
  for (int index=0; index < totalPages; index++) {
    modelElementIndLs=new ArrayList<ModelElementIndicator>();
    for (int idx=0; idx < pageSize; idx++) {
      modelElementIndLs.add(modelElementIndicatores[index * pageSize + idx]);
    }
    IndicatorPaginationInfo pginfo=new ResultPaginationInfo(form,modelElementIndLs,masterPage,uiPagination);
    uiPagination.addPage(pginfo);
  }
  int left=modelElementIndicatores.length % pageSize;
  if (left != 0) {
    modelElementIndLs=new ArrayList<ModelElementIndicator>();
    for (int leftIdx=0; leftIdx < left; leftIdx++) {
      modelElementIndLs.add(modelElementIndicatores[totalPages * pageSize + leftIdx]);
    }
    IndicatorPaginationInfo pginfo=new ResultPaginationInfo(form,modelElementIndLs,masterPage,uiPagination);
    uiPagination.addPage(pginfo);
  }
  chartComposite=toolkit.createComposite(chartTableComposite);
  chartComposite.setLayout(new GridLayout());
  chartComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  resultSection.setClient(chartTableComposite);
  uiPagination.setChartComposite(chartComposite);
  uiPagination.init();
  chartComposite.layout();
  chartComposite.pack();
}","@Override protected void createResultSection(Composite parent){
  resultSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite collapseExpandComposite=toolkit.createComposite(resultSection);
  GridLayout gdLayout=new GridLayout();
  gdLayout.numColumns=2;
  collapseExpandComposite.setLayout(gdLayout);
  createCollapseAllLink(collapseExpandComposite);
  createExpandAllLink(collapseExpandComposite);
  resultSection.setTextClient(collapseExpandComposite);
  Composite chartTableComposite=toolkit.createComposite(resultSection);
  chartTableComposite.setLayout(new GridLayout());
  chartTableComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final ModelElementIndicator[] modelElementIndicatores=masterPage.getCurrentModelElementIndicators();
  uiPagination=new UIPagination(toolkit,chartTableComposite);
  int pageSize=IndicatorPaginationInfo.getPageSize();
  int totalPages=modelElementIndicatores.length / pageSize;
  List<ModelElementIndicator> modelElementIndLs=null;
  for (int index=0; index < totalPages; index++) {
    modelElementIndLs=new ArrayList<ModelElementIndicator>();
    for (int idx=0; idx < pageSize; idx++) {
      modelElementIndLs.add(modelElementIndicatores[index * pageSize + idx]);
    }
    IndicatorPaginationInfo pginfo=new ResultPaginationInfo(form,modelElementIndLs,masterPage,uiPagination);
    uiPagination.addPage(pginfo);
  }
  int left=modelElementIndicatores.length % pageSize;
  if (left != 0) {
    modelElementIndLs=new ArrayList<ModelElementIndicator>();
    for (int leftIdx=0; leftIdx < left; leftIdx++) {
      modelElementIndLs.add(modelElementIndicatores[totalPages * pageSize + leftIdx]);
    }
    IndicatorPaginationInfo pginfo=new ResultPaginationInfo(form,modelElementIndLs,masterPage,uiPagination);
    uiPagination.addPage(pginfo);
  }
  chartComposite=toolkit.createComposite(chartTableComposite);
  chartComposite.setLayout(new GridLayout());
  chartComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  resultSection.setClient(chartTableComposite);
  uiPagination.setChartComposite(chartComposite);
  uiPagination.init();
  chartComposite.layout();
  chartComposite.pack();
}",0.9977189781021898
136492,"@Override public void dispose(){
  if (bg != null) {
    bg.dispose();
  }
  MapDBManager.getInstance().closeDB(masterPage.getCurrentModelElement());
  super.dispose();
}","@Override public void dispose(){
  if (bg != null) {
    bg.dispose();
  }
  if (AnalysisHelper.isJavaExecutionEngine(masterPage.getCurrentModelElement())) {
    MapDBManager.getInstance().closeDB(masterPage.getCurrentModelElement());
  }
  super.dispose();
}",0.7925407925407926
136493,"/** 
 * DOC yyin Comment method ""createMenuForAllDataEntity"".
 * @param shell
 * @param dataExplorer
 * @param analysis
 * @param chartDataEntities
 * @return
 */
protected Map<String,Object> createMenuForAllDataEntity(Shell shell,DataExplorer dataExplorer,Analysis analysis,ChartDataEntity[] chartDataEntities){
  Map<String,Object> menuMap=new HashMap<String,Object>();
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return menuMap;
  }
  for (  ChartDataEntity oneDataEntity : chartDataEntities) {
    Indicator indicator=oneDataEntity.getIndicator();
    Menu menu=TOPChartUtils.getInstance().createMenu(shell,dataExplorer,analysis,currentEngine,oneDataEntity,indicator,false);
    ChartTableFactory.addJobGenerationMenu(menu,analysis,indicator);
    menuMap.put(oneDataEntity.getLabel(),menu);
  }
  return menuMap;
}","/** 
 * DOC yyin Comment method ""createMenuForAllDataEntity"".
 * @param shell
 * @param dataExplorer
 * @param analysis
 * @param chartDataEntities
 * @return
 */
protected Map<String,Object> createMenuForAllDataEntity(Composite composite,DataExplorer dataExplorer,Analysis analysis,ChartDataEntity[] chartDataEntities){
  Map<String,Object> menuMap=new HashMap<String,Object>();
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return menuMap;
  }
  for (  ChartDataEntity oneDataEntity : chartDataEntities) {
    Indicator indicator=oneDataEntity.getIndicator();
    Menu menu=TOPChartUtils.getInstance().createMenu(composite,dataExplorer,analysis,currentEngine,oneDataEntity,indicator,false);
    ChartTableFactory.addJobGenerationMenu(menu,analysis,indicator);
    menuMap.put(oneDataEntity.getLabel(),menu);
  }
  return menuMap;
}",0.9772256728778468
136494,"@Override protected void render(){
  if (treeViewer != null) {
    treeViewer.setElements(modelElementIndicators.toArray(new ModelElementIndicator[modelElementIndicators.size()]),false);
  }
  if (previewChartList == null || uiPagination.getChartComposite() == null) {
    return;
  }
  previewChartList.clear();
  clearDynamicList();
  if (EditorPreferencePage.isHideGraphicsSectionForSettingsPage() || !TOPChartUtils.getInstance().isTOPChartInstalled()) {
    return;
  }
  for (  final ModelElementIndicator modelElementIndicator : modelElementIndicators) {
    final ExpandableComposite exComp=uiPagination.getToolkit().createExpandableComposite(uiPagination.getChartComposite(),ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    needDispostWidgets.add(exComp);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",modelElementIndicator.getElementName()));
    exComp.setLayout(new GridLayout());
    exComp.setData(modelElementIndicator);
    previewChartList.add(exComp);
    Composite comp=uiPagination.getToolkit().createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(modelElementIndicator);
    for (    EIndicatorChartType chartType : indicatorComposite.keySet()) {
      List<IndicatorUnit> units=indicatorComposite.get(chartType);
      if (!units.isEmpty()) {
        if (chartType == EIndicatorChartType.UDI_FREQUENCY) {
          for (          IndicatorUnit unit : units) {
            List<IndicatorUnit> specialUnit=new ArrayList<IndicatorUnit>();
            specialUnit.add(unit);
            createChart(comp,chartType,specialUnit);
          }
        }
 else {
          createChart(comp,chartType,units);
        }
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        uiPagination.getChartComposite().layout();
        form.reflow(true);
        if (e.getState()) {
          exComp.setExpanded(e.getState());
          exComp.getParent().pack();
        }
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
    uiPagination.getChartComposite().layout();
  }
}","@Override protected void render(){
  if (treeViewer != null) {
    treeViewer.setElements(modelElementIndicators.toArray(new ModelElementIndicator[modelElementIndicators.size()]),false);
  }
  if (previewChartList == null || uiPagination.getChartComposite() == null) {
    return;
  }
  previewChartList.clear();
  clearDynamicList();
  if (EditorPreferencePage.isHideGraphicsSectionForSettingsPage() || !TOPChartUtils.getInstance().isTOPChartInstalled()) {
    return;
  }
  for (  ModelElementIndicator modelElementIndicator : modelElementIndicators) {
    final ExpandableComposite exComp=uiPagination.getToolkit().createExpandableComposite(uiPagination.getChartComposite(),ExpandableComposite.TREE_NODE | ExpandableComposite.CLIENT_INDENT);
    needDispostWidgets.add(exComp);
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",modelElementIndicator.getElementName()));
    exComp.setLayout(new GridLayout());
    exComp.setData(modelElementIndicator);
    previewChartList.add(exComp);
    Composite comp=uiPagination.getToolkit().createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(modelElementIndicator);
    for (    EIndicatorChartType chartType : indicatorComposite.keySet()) {
      List<IndicatorUnit> units=indicatorComposite.get(chartType);
      if (!units.isEmpty()) {
        if (chartType == EIndicatorChartType.UDI_FREQUENCY) {
          for (          IndicatorUnit unit : units) {
            List<IndicatorUnit> specialUnit=new ArrayList<IndicatorUnit>();
            specialUnit.add(unit);
            createChart(comp,chartType,specialUnit);
          }
        }
 else {
          createChart(comp,chartType,units);
        }
      }
    }
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        uiPagination.getChartComposite().layout();
        form.reflow(true);
        if (e.getState()) {
          exComp.setExpanded(e.getState());
          exComp.getParent().pack();
        }
      }
    }
);
    exComp.setExpanded(true);
    exComp.setClient(comp);
    uiPagination.getChartComposite().layout();
  }
}",0.9987129987129988
136495,"private void createResultDataComposite(final Composite comp,final ModelElementIndicator modelElementIndicator){
  if (modelElementIndicator.getIndicators().length != 0) {
    Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(modelElementIndicator);
    for (    EIndicatorChartType chartType : indicatorComposite.keySet()) {
      List<IndicatorUnit> units=indicatorComposite.get(chartType);
      if (!units.isEmpty()) {
        if (chartType == EIndicatorChartType.UDI_FREQUENCY) {
          for (          IndicatorUnit unit : units) {
            List<IndicatorUnit> specialUnit=new ArrayList<IndicatorUnit>();
            specialUnit.add(unit);
            createChart(comp,chartType,specialUnit);
          }
        }
 else {
          createChart(comp,chartType,units);
        }
      }
    }
  }
}","private void createResultDataComposite(Composite comp,ModelElementIndicator modelElementIndicator){
  if (modelElementIndicator.getIndicators().length != 0) {
    Map<EIndicatorChartType,List<IndicatorUnit>> indicatorComposite=CompositeIndicator.getInstance().getIndicatorComposite(modelElementIndicator);
    for (    EIndicatorChartType chartType : indicatorComposite.keySet()) {
      List<IndicatorUnit> units=indicatorComposite.get(chartType);
      if (!units.isEmpty()) {
        if (chartType == EIndicatorChartType.UDI_FREQUENCY) {
          for (          IndicatorUnit unit : units) {
            List<IndicatorUnit> specialUnit=new ArrayList<IndicatorUnit>();
            specialUnit.add(unit);
            createChart(comp,chartType,specialUnit);
          }
        }
 else {
          createChart(comp,chartType,units);
        }
      }
    }
  }
}",0.993103448275862
136496,"/** 
 * DOC bZhou Comment method ""createChart"".
 * @param comp
 * @param chartType
 * @param units
 */
private void createChart(final Composite comp,EIndicatorChartType chartType,List<IndicatorUnit> units){
  DynamicIndicatorModel dyModel=new DynamicIndicatorModel();
  Object chart=null;
  Object dataset=null;
  IEventReceiver event=EventManager.getInstance().findRegisteredEvent(units.get(0).getIndicator(),EventEnum.DQ_DYMANIC_CHART,0);
  if (event != null) {
    dataset=((DynamicChartEventReceiver)event).getDataset();
  }
  List<Indicator> indicators=null;
  dyModel.setChartType(chartType);
  this.dynamicList.add(dyModel);
  if (EIndicatorChartType.SUMMARY_STATISTICS.equals(chartType)) {
    dyModel.setSummaryIndicators(getIndicatorsForTable(units,true));
  }
  ExpandableComposite subComp=uiPagination.getToolkit().createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
  subComp.setText(chartType.getLiteral());
  subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  subComp.setExpanded(EditorPreferencePage.isUnfoldingIndicatorsResultPage());
  final Composite composite=uiPagination.getToolkit().createComposite(subComp,SWT.NULL);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
  ITableTypeStates tableTypeState=TableTypeStatesFactory.getInstance().getTableState(chartType,units);
  ChartDataEntity[] dataEntities=tableTypeState.getDataEntity();
  TableWithData chartData=new TableWithData(chartType,dataEntities);
  TableViewer tableviewer=tableTypeState.getTableForm(composite);
  tableviewer.setInput(chartData);
  tableviewer.getTable().pack();
  dyModel.setTableViewer(tableviewer);
  DataExplorer dataExplorer=tableTypeState.getDataExplorer();
  ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
  if (EIndicatorChartType.TEXT_STATISTICS.equals(chartType) && dataEntities != null && dataEntities.length > 0) {
    indicators=getIndicators(dataEntities);
  }
 else {
    indicators=getIndicators(units);
  }
  dyModel.setIndicatorList(indicators);
  try {
    if (!EditorPreferencePage.isHideGraphicsForResultPage() && TOPChartUtils.getInstance().isTOPChartInstalled()) {
      IChartTypeStates chartTypeState=ChartTypeStatesFactory.getChartState(chartType,units);
      boolean isPattern=chartTypeState instanceof PatternStatisticsState;
      if (event == null) {
        chart=chartTypeState.getChart();
        if (chart != null && isSQLMode) {
          if (EIndicatorChartType.BENFORD_LAW_STATISTICS.equals(chartType)) {
            dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,2);
            if (dataset == null) {
              dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,1);
            }
            dyModel.setSecondDataset(TOPChartUtils.getInstance().getDatasetFromChart(chart,0));
          }
 else {
            dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,1);
            if (dataset == null) {
              dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,-1);
            }
          }
        }
      }
 else {
        chart=chartTypeState.getChart(dataset);
      }
      dyModel.setDataset(dataset);
      if (chart != null) {
        if (!isPattern) {
          TOPChartUtils.getInstance().decorateChart(chart,false);
        }
 else {
          TOPChartUtils.getInstance().decoratePatternMatching(chart);
        }
        Object chartComposite=TOPChartUtils.getInstance().createTalendChartComposite(composite,SWT.NONE,chart,true);
        dyModel.setBawParentChartComp(chartComposite);
        Map<String,Object> menuMap=createMenuForAllDataEntity(((Composite)chartComposite).getShell(),dataExplorer,analysis,((ICustomerDataset)chartTypeState.getDataset()).getDataEntities());
        if (EIndicatorChartType.BENFORD_LAW_STATISTICS.equals(chartType) || EIndicatorChartType.FREQUENCE_STATISTICS.equals(chartType)) {
          TOPChartUtils.getInstance().addMouseListenerForChart(chartComposite,menuMap,false);
        }
 else {
          TOPChartUtils.getInstance().addMouseListenerForChart(chartComposite,menuMap,true);
        }
      }
    }
  }
 catch (  Error e) {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str""),e);
  }
catch (  Exception exp) {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str""),exp);
  }
  subComp.setClient(composite);
  subComp.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      form.reflow(true);
    }
  }
);
  masterPage.registerSection(subComp);
}","/** 
 * DOC bZhou Comment method ""createChart"".
 * @param comp
 * @param chartType
 * @param units
 */
private void createChart(Composite comp,EIndicatorChartType chartType,List<IndicatorUnit> units){
  DynamicIndicatorModel dyModel=new DynamicIndicatorModel();
  Object chart=null;
  Object dataset=null;
  IEventReceiver event=EventManager.getInstance().findRegisteredEvent(units.get(0).getIndicator(),EventEnum.DQ_DYMANIC_CHART,0);
  if (event != null) {
    dataset=((DynamicChartEventReceiver)event).getDataset();
  }
  List<Indicator> indicators=null;
  dyModel.setChartType(chartType);
  this.dynamicList.add(dyModel);
  if (EIndicatorChartType.SUMMARY_STATISTICS.equals(chartType)) {
    dyModel.setSummaryIndicators(getIndicatorsForTable(units,true));
  }
  ExpandableComposite subComp=uiPagination.getToolkit().createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
  subComp.setText(chartType.getLiteral());
  subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  subComp.setExpanded(EditorPreferencePage.isUnfoldingIndicatorsResultPage());
  final Composite composite=uiPagination.getToolkit().createComposite(subComp,SWT.NULL);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
  ITableTypeStates tableTypeState=TableTypeStatesFactory.getInstance().getTableState(chartType,units);
  ChartDataEntity[] dataEntities=tableTypeState.getDataEntity();
  TableWithData chartData=new TableWithData(chartType,dataEntities);
  TableViewer tableviewer=tableTypeState.getTableForm(composite);
  tableviewer.setInput(chartData);
  tableviewer.getTable().pack();
  dyModel.setTableViewer(tableviewer);
  DataExplorer dataExplorer=tableTypeState.getDataExplorer();
  ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
  if (EIndicatorChartType.TEXT_STATISTICS.equals(chartType) && dataEntities != null && dataEntities.length > 0) {
    indicators=getIndicators(dataEntities);
  }
 else {
    indicators=getIndicators(units);
  }
  dyModel.setIndicatorList(indicators);
  try {
    if (!EditorPreferencePage.isHideGraphicsForResultPage() && TOPChartUtils.getInstance().isTOPChartInstalled()) {
      IChartTypeStates chartTypeState=ChartTypeStatesFactory.getChartState(chartType,units);
      boolean isPattern=chartTypeState instanceof PatternStatisticsState;
      if (event == null) {
        chart=chartTypeState.getChart();
        if (chart != null && isSQLMode) {
          if (EIndicatorChartType.BENFORD_LAW_STATISTICS.equals(chartType)) {
            dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,2);
            if (dataset == null) {
              dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,1);
            }
            dyModel.setSecondDataset(TOPChartUtils.getInstance().getDatasetFromChart(chart,0));
          }
 else {
            dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,1);
            if (dataset == null) {
              dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,-1);
            }
          }
        }
      }
 else {
        chart=chartTypeState.getChart(dataset);
      }
      dyModel.setDataset(dataset);
      if (chart != null) {
        if (!isPattern) {
          TOPChartUtils.getInstance().decorateChart(chart,false);
        }
 else {
          TOPChartUtils.getInstance().decoratePatternMatching(chart);
        }
        Object chartComposite=TOPChartUtils.getInstance().createTalendChartComposite(composite,SWT.NONE,chart,true);
        dyModel.setBawParentChartComp(chartComposite);
        Map<String,Object> menuMap=createMenuForAllDataEntity((Composite)chartComposite,dataExplorer,analysis,((ICustomerDataset)chartTypeState.getDataset()).getDataEntities());
        if (EIndicatorChartType.BENFORD_LAW_STATISTICS.equals(chartType) || EIndicatorChartType.FREQUENCE_STATISTICS.equals(chartType)) {
          TOPChartUtils.getInstance().addMouseListenerForChart(chartComposite,menuMap,false);
        }
 else {
          TOPChartUtils.getInstance().addMouseListenerForChart(chartComposite,menuMap,true);
        }
      }
    }
  }
 catch (  Error e) {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str""),e);
  }
catch (  Exception exp) {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str""),exp);
  }
  subComp.setClient(composite);
  subComp.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      form.reflow(true);
    }
  }
);
  masterPage.registerSection(subComp);
}",0.9928746144847388
136497,"@Override protected void render(){
  clearDynamicList();
  allExpandableCompositeList.clear();
  columnCompositeMap.clear();
  for (  final ModelElementIndicator modelElementIndicator : modelElementIndicators) {
    ExpandableComposite exComp=uiPagination.getToolkit().createExpandableComposite(uiPagination.getChartComposite(),ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED| ExpandableComposite.LEFT_TEXT_CLIENT_ALIGNMENT);
    needDispostWidgets.add(exComp);
    allExpandableCompositeList.add(exComp);
    IRepositoryNode modelElementRepositoryNode=modelElementIndicator.getModelElementRepositoryNode();
    IRepositoryNode parentNodeForColumnNode=RepositoryNodeHelper.getParentNodeForColumnNode(modelElementRepositoryNode);
    String label=parentNodeForColumnNode.getObject().getLabel();
    if (label != null && !label.equals(""String_Node_Str"")) {
      label=label.concat(""String_Node_Str"").concat(modelElementIndicator.getElementName());
    }
 else {
      label=modelElementIndicator.getElementName();
    }
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",label));
    exComp.setLayout(new GridLayout());
    exComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    exComp.setExpanded(EditorPreferencePage.isUnfoldingAnalyzedEelementsResultPage());
    Composite collapseExpandComposite=uiPagination.getToolkit().createComposite(exComp);
    GridLayout gdLayout=new GridLayout();
    gdLayout.numColumns=2;
    collapseExpandComposite.setLayout(gdLayout);
    createCollapseAllLink(collapseExpandComposite,label);
    createExpandAllLink(collapseExpandComposite,label);
    exComp.setTextClient(collapseExpandComposite);
    final Composite comp=uiPagination.getToolkit().createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    exComp.setClient(comp);
    createResultDataComposite(comp,modelElementIndicator);
    columnCompositeMap.put(label,comp);
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        uiPagination.getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    uiPagination.getChartComposite().layout();
    masterPage.registerSection(exComp);
  }
}","@Override protected void render(){
  clearDynamicList();
  allExpandableCompositeList.clear();
  columnCompositeMap.clear();
  for (  ModelElementIndicator modelElementIndicator : modelElementIndicators) {
    ExpandableComposite exComp=uiPagination.getToolkit().createExpandableComposite(uiPagination.getChartComposite(),ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED| ExpandableComposite.LEFT_TEXT_CLIENT_ALIGNMENT);
    needDispostWidgets.add(exComp);
    allExpandableCompositeList.add(exComp);
    IRepositoryNode modelElementRepositoryNode=modelElementIndicator.getModelElementRepositoryNode();
    IRepositoryNode parentNodeForColumnNode=RepositoryNodeHelper.getParentNodeForColumnNode(modelElementRepositoryNode);
    String label=parentNodeForColumnNode.getObject().getLabel();
    if (label != null && !label.equals(""String_Node_Str"")) {
      label=label.concat(""String_Node_Str"").concat(modelElementIndicator.getElementName());
    }
 else {
      label=modelElementIndicator.getElementName();
    }
    exComp.setText(DefaultMessagesImpl.getString(""String_Node_Str"",label));
    exComp.setLayout(new GridLayout());
    exComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    exComp.setExpanded(EditorPreferencePage.isUnfoldingAnalyzedEelementsResultPage());
    Composite collapseExpandComposite=uiPagination.getToolkit().createComposite(exComp);
    GridLayout gdLayout=new GridLayout();
    gdLayout.numColumns=2;
    collapseExpandComposite.setLayout(gdLayout);
    createCollapseAllLink(collapseExpandComposite,label);
    createExpandAllLink(collapseExpandComposite,label);
    exComp.setTextClient(collapseExpandComposite);
    Composite comp=uiPagination.getToolkit().createComposite(exComp);
    comp.setLayout(new GridLayout());
    comp.setLayoutData(new GridData(GridData.FILL_BOTH));
    exComp.setClient(comp);
    createResultDataComposite(comp,modelElementIndicator);
    columnCompositeMap.put(label,comp);
    exComp.addExpansionListener(new ExpansionAdapter(){
      @Override public void expansionStateChanged(      ExpansionEvent e){
        uiPagination.getChartComposite().layout();
        form.reflow(true);
      }
    }
);
    uiPagination.getChartComposite().layout();
    masterPage.registerSection(exComp);
  }
}",0.9974048442906576
136498,"@Override public void mouseDown(MouseEvent e){
  if (table.getMenu() != null) {
    table.getMenu().setVisible(false);
  }
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
    if (indicator != null && dataEntity != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
      if (!isJAVALanguage) {
        boolean showExtraMenu=false;
        for (        final MenuItemEntity itemEntity : itemEntities) {
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(itemEntity.geti18nLabel());
          item.setImage(itemEntity.getIcon());
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e1){
              if (isPatternMatchingIndicator(indicator) && !((PatternExplorer)explorer).isImplementRegexFunction(itemEntity.getLabel())) {
                MessageDialog.openInformation(new Shell(),itemEntity.getLabel(),DefaultMessagesImpl.getString(""String_Node_Str""));
                return;
              }
              String query=itemEntity.getQuery();
              String editorName=indicator.getName();
              SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
          if (IndicatorHelper.isWhereRuleIndicator(indicator)) {
            WhereRuleIndicator ind=(WhereRuleIndicator)indicator;
            EList<JoinElement> joinConditions=ind.getJoinConditions();
            if (joinConditions.size() > 0) {
              showExtraMenu=true;
            }
          }
          if (isPatternFrequencyIndicator(indicator) && !isEastAsiaPatternFrequencyIndicator(indicator)) {
            createMenuOfGenerateRegularPattern(analysis,menu,dataEntity);
          }
        }
        if (showExtraMenu) {
          MenuItem itemCreateWhereRule=new MenuItem(menu,SWT.PUSH);
          itemCreateWhereRule.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreateWhereRule.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e1){
              final StructuredSelection selectionOne=(StructuredSelection)tbViewer.getSelection();
              Object firstElement=selectionOne.getFirstElement();
              if (firstElement instanceof WhereRuleChartDataEntity) {
                WhereRuleChartDataEntity wrChartDataEntity=(WhereRuleChartDataEntity)firstElement;
                WhereRuleIndicator wrInd=(WhereRuleIndicator)wrChartDataEntity.getIndicator();
                CreateDuplicatesAnalysisAction action=new CreateDuplicatesAnalysisAction(buildColumnsMap(wrInd));
                action.run();
              }
            }
            /** 
 * DOC xqliu Comment method ""buildColumnsMap"".
 * @param wrInd
 * @return
 */
            private Map<ColumnSet,List<TdColumn>> buildColumnsMap(            WhereRuleIndicator wrInd){
              Map<ColumnSet,List<TdColumn>> map=new HashMap<ColumnSet,List<TdColumn>>();
              List<TdColumn> columns=new ArrayList<TdColumn>();
              EList<JoinElement> joinConditions=wrInd.getJoinConditions();
              for (              JoinElement joinElement : joinConditions) {
                TdColumn tempColumn=(TdColumn)joinElement.getColA();
                if (!columns.contains(tempColumn)) {
                  columns.add(tempColumn);
                }
                tempColumn=(TdColumn)joinElement.getColB();
                if (!columns.contains(tempColumn)) {
                  columns.add(tempColumn);
                }
              }
              for (              TdColumn column : columns) {
                ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
                List<TdColumn> list=map.get(columnSet);
                if (list == null) {
                  list=new ArrayList<TdColumn>();
                  map.put(columnSet,list);
                }
                list.add(column);
              }
              return getUserSelectedMap(map);
            }
            /** 
 * DOC xqliu Comment method ""getUserSelectedMap"".
 * @param map
 * @return
 */
            private Map<ColumnSet,List<TdColumn>> getUserSelectedMap(            Map<ColumnSet,List<TdColumn>> map){
              Map<ColumnSet,List<TdColumn>> userMap=new HashMap<ColumnSet,List<TdColumn>>();
              List<RepositoryNode> columnNodes=getColumnNodes(map);
              RepositoryNode rootNode=getConnectionNode(map);
              if (!columnNodes.isEmpty() && rootNode != null) {
                ColumnsMapSelectionDialog dialog=new ColumnsMapSelectionDialog(null,PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),columnNodes,rootNode,DefaultMessagesImpl.getString(""String_Node_Str""));
                dialog.setAllMap(map);
                if (dialog.open() == Window.OK) {
                  userMap=dialog.getUserMap();
                }
              }
              return userMap;
            }
            /** 
 * DOC xqliu Comment method ""getConnectionNode"".
 * @param map
 * @return
 */
            private RepositoryNode getConnectionNode(            Map<ColumnSet,List<TdColumn>> map){
              RepositoryNode node=null;
              if (map != null && !map.isEmpty()) {
                Connection connection=ConnectionHelper.getConnection(map.keySet().iterator().next());
                if (connection != null) {
                  node=RepositoryNodeHelper.recursiveFind(connection);
                }
              }
              return node;
            }
            /** 
 * DOC xqliu Comment method ""getColumnNodes"".
 * @param map
 * @return
 */
            private List<RepositoryNode> getColumnNodes(            Map<ColumnSet,List<TdColumn>> map){
              List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
              if (map != null && !map.isEmpty()) {
                List<TdColumn> columns=new ArrayList<TdColumn>();
                Set<ColumnSet> keySet=map.keySet();
                for (                ColumnSet cs : keySet) {
                  columns.addAll(map.get(cs));
                }
                if (!columns.isEmpty()) {
                  for (                  TdColumn column : columns) {
                    nodes.add(RepositoryNodeHelper.recursiveFind(column));
                  }
                }
              }
              return nodes;
            }
          }
);
        }
      }
 else {
        if (analysis.getParameters().isStoreData()) {
          if (indicator.isUsedMapDBMode()) {
            DrillDownUtils.createDrillDownMenuForMapDB(dataEntity,menu,itemEntities,analysis);
          }
 else {
            DrillDownUtils.createDrillDownMenuForJava(dataEntity,menu,itemEntities,analysis);
          }
          if (isPatternFrequencyIndicator(indicator) && !isEastAsiaPatternFrequencyIndicator(indicator)) {
            for (            final MenuItemEntity itemEntity : itemEntities) {
              createMenuOfGenerateRegularPattern(analysis,menu,dataEntity);
            }
          }
        }
        if (isDatePatternFrequencyIndicator(indicator)) {
          final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e1){
              DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
              IFolder folder=ResourceManager.getPatternRegexFolder();
              String model=dataEntity.getLabel();
              String regex=dateIndicator.getRegex(model);
              new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",model == null ? ""String_Node_Str"" : ""String_Node_Str"" + model + ""String_Node_Str"",language.getDbmsName()).run();
            }
          }
);
        }
      }
      addJobGenerationMenu(menu,analysis,indicator);
      menu.setVisible(true);
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  if (table.getMenu() != null) {
    table.getMenu().setVisible(false);
  }
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
    if (indicator != null && dataEntity != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
      if (ExecutionLanguage.SQL == analysis.getParameters().getExecutionLanguage()) {
        boolean showExtraMenu=false;
        for (        final MenuItemEntity itemEntity : itemEntities) {
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(itemEntity.geti18nLabel());
          item.setImage(itemEntity.getIcon());
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e1){
              if (isPatternMatchingIndicator(indicator) && !((PatternExplorer)explorer).isImplementRegexFunction(itemEntity.getLabel())) {
                MessageDialog.openInformation(null,itemEntity.getLabel(),DefaultMessagesImpl.getString(""String_Node_Str""));
                return;
              }
              String query=itemEntity.getQuery();
              String editorName=indicator.getName();
              Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
              SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
          if (IndicatorHelper.isWhereRuleIndicator(indicator)) {
            WhereRuleIndicator ind=(WhereRuleIndicator)indicator;
            EList<JoinElement> joinConditions=ind.getJoinConditions();
            if (joinConditions.size() > 0) {
              showExtraMenu=true;
            }
          }
          if (isPatternFrequencyIndicator(indicator) && !isEastAsiaPatternFrequencyIndicator(indicator)) {
            createMenuOfGenerateRegularPattern(analysis,menu,dataEntity);
          }
        }
        if (showExtraMenu) {
          MenuItem itemCreateWhereRule=new MenuItem(menu,SWT.PUSH);
          itemCreateWhereRule.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreateWhereRule.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e1){
              final StructuredSelection selectionOne=(StructuredSelection)tbViewer.getSelection();
              Object firstElement=selectionOne.getFirstElement();
              if (firstElement instanceof WhereRuleChartDataEntity) {
                WhereRuleChartDataEntity wrChartDataEntity=(WhereRuleChartDataEntity)firstElement;
                WhereRuleIndicator wrInd=(WhereRuleIndicator)wrChartDataEntity.getIndicator();
                CreateDuplicatesAnalysisAction action=new CreateDuplicatesAnalysisAction(buildColumnsMap(wrInd));
                action.run();
              }
            }
            /** 
 * DOC xqliu Comment method ""buildColumnsMap"".
 * @param wrInd
 * @return
 */
            private Map<ColumnSet,List<TdColumn>> buildColumnsMap(            WhereRuleIndicator wrInd){
              Map<ColumnSet,List<TdColumn>> map=new HashMap<ColumnSet,List<TdColumn>>();
              List<TdColumn> columns=new ArrayList<TdColumn>();
              EList<JoinElement> joinConditions=wrInd.getJoinConditions();
              for (              JoinElement joinElement : joinConditions) {
                TdColumn tempColumn=(TdColumn)joinElement.getColA();
                if (!columns.contains(tempColumn)) {
                  columns.add(tempColumn);
                }
                tempColumn=(TdColumn)joinElement.getColB();
                if (!columns.contains(tempColumn)) {
                  columns.add(tempColumn);
                }
              }
              for (              TdColumn column : columns) {
                ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
                List<TdColumn> list=map.get(columnSet);
                if (list == null) {
                  list=new ArrayList<TdColumn>();
                  map.put(columnSet,list);
                }
                list.add(column);
              }
              return getUserSelectedMap(map);
            }
            /** 
 * DOC xqliu Comment method ""getUserSelectedMap"".
 * @param map
 * @return
 */
            private Map<ColumnSet,List<TdColumn>> getUserSelectedMap(            Map<ColumnSet,List<TdColumn>> map){
              Map<ColumnSet,List<TdColumn>> userMap=new HashMap<ColumnSet,List<TdColumn>>();
              List<RepositoryNode> columnNodes=getColumnNodes(map);
              RepositoryNode rootNode=getConnectionNode(map);
              if (!columnNodes.isEmpty() && rootNode != null) {
                ColumnsMapSelectionDialog dialog=new ColumnsMapSelectionDialog(null,PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),columnNodes,rootNode,DefaultMessagesImpl.getString(""String_Node_Str""));
                dialog.setAllMap(map);
                if (dialog.open() == Window.OK) {
                  userMap=dialog.getUserMap();
                }
              }
              return userMap;
            }
            /** 
 * DOC xqliu Comment method ""getConnectionNode"".
 * @param map
 * @return
 */
            private RepositoryNode getConnectionNode(            Map<ColumnSet,List<TdColumn>> map){
              RepositoryNode node=null;
              if (map != null && !map.isEmpty()) {
                Connection connection=ConnectionHelper.getConnection(map.keySet().iterator().next());
                if (connection != null) {
                  node=RepositoryNodeHelper.recursiveFind(connection);
                }
              }
              return node;
            }
            /** 
 * DOC xqliu Comment method ""getColumnNodes"".
 * @param map
 * @return
 */
            private List<RepositoryNode> getColumnNodes(            Map<ColumnSet,List<TdColumn>> map){
              List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
              if (map != null && !map.isEmpty()) {
                List<TdColumn> columns=new ArrayList<TdColumn>();
                Set<ColumnSet> keySet=map.keySet();
                for (                ColumnSet cs : keySet) {
                  columns.addAll(map.get(cs));
                }
                if (!columns.isEmpty()) {
                  for (                  TdColumn column : columns) {
                    nodes.add(RepositoryNodeHelper.recursiveFind(column));
                  }
                }
              }
              return nodes;
            }
          }
);
        }
      }
 else {
        if (analysis.getParameters().isStoreData()) {
          if (indicator.isUsedMapDBMode()) {
            DrillDownUtils.createDrillDownMenuForMapDB(dataEntity,menu,itemEntities,analysis);
          }
 else {
            DrillDownUtils.createDrillDownMenuForJava(dataEntity,menu,itemEntities,analysis);
          }
          if (isPatternFrequencyIndicator(indicator) && !isEastAsiaPatternFrequencyIndicator(indicator)) {
            for (            final MenuItemEntity itemEntity : itemEntities) {
              createMenuOfGenerateRegularPattern(analysis,menu,dataEntity);
            }
          }
        }
        if (isDatePatternFrequencyIndicator(indicator)) {
          final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e1){
              DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
              IFolder folder=ResourceManager.getPatternRegexFolder();
              String model=dataEntity.getLabel();
              String regex=dateIndicator.getRegex(model);
              new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",model == null ? ""String_Node_Str"" : ""String_Node_Str"" + model + ""String_Node_Str"",language.getDbmsName()).run();
            }
          }
);
        }
      }
      addJobGenerationMenu(menu,analysis,indicator);
      menu.setVisible(true);
    }
  }
}",0.9899129632831865
136499,"public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  final boolean isJAVALanguage=ExecutionLanguage.JAVA == currentEngine;
  final Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
  final Table table=tbViewer.getTable();
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      if (e.button == 3) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
        if (indicator != null && dataEntity != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          if (!isJAVALanguage) {
            boolean showExtraMenu=false;
            for (            final MenuItemEntity itemEntity : itemEntities) {
              MenuItem item=new MenuItem(menu,SWT.PUSH);
              item.setText(itemEntity.geti18nLabel());
              item.setImage(itemEntity.getIcon());
              item.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e1){
                  if (isPatternMatchingIndicator(indicator) && !((PatternExplorer)explorer).isImplementRegexFunction(itemEntity.getLabel())) {
                    MessageDialog.openInformation(new Shell(),itemEntity.getLabel(),DefaultMessagesImpl.getString(""String_Node_Str""));
                    return;
                  }
                  String query=itemEntity.getQuery();
                  String editorName=indicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
              if (IndicatorHelper.isWhereRuleIndicator(indicator)) {
                WhereRuleIndicator ind=(WhereRuleIndicator)indicator;
                EList<JoinElement> joinConditions=ind.getJoinConditions();
                if (joinConditions.size() > 0) {
                  showExtraMenu=true;
                }
              }
              if (isPatternFrequencyIndicator(indicator) && !isEastAsiaPatternFrequencyIndicator(indicator)) {
                createMenuOfGenerateRegularPattern(analysis,menu,dataEntity);
              }
            }
            if (showExtraMenu) {
              MenuItem itemCreateWhereRule=new MenuItem(menu,SWT.PUSH);
              itemCreateWhereRule.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreateWhereRule.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e1){
                  final StructuredSelection selectionOne=(StructuredSelection)tbViewer.getSelection();
                  Object firstElement=selectionOne.getFirstElement();
                  if (firstElement instanceof WhereRuleChartDataEntity) {
                    WhereRuleChartDataEntity wrChartDataEntity=(WhereRuleChartDataEntity)firstElement;
                    WhereRuleIndicator wrInd=(WhereRuleIndicator)wrChartDataEntity.getIndicator();
                    CreateDuplicatesAnalysisAction action=new CreateDuplicatesAnalysisAction(buildColumnsMap(wrInd));
                    action.run();
                  }
                }
                /** 
 * DOC xqliu Comment method ""buildColumnsMap"".
 * @param wrInd
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> buildColumnsMap(                WhereRuleIndicator wrInd){
                  Map<ColumnSet,List<TdColumn>> map=new HashMap<ColumnSet,List<TdColumn>>();
                  List<TdColumn> columns=new ArrayList<TdColumn>();
                  EList<JoinElement> joinConditions=wrInd.getJoinConditions();
                  for (                  JoinElement joinElement : joinConditions) {
                    TdColumn tempColumn=(TdColumn)joinElement.getColA();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                    tempColumn=(TdColumn)joinElement.getColB();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                  }
                  for (                  TdColumn column : columns) {
                    ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
                    List<TdColumn> list=map.get(columnSet);
                    if (list == null) {
                      list=new ArrayList<TdColumn>();
                      map.put(columnSet,list);
                    }
                    list.add(column);
                  }
                  return getUserSelectedMap(map);
                }
                /** 
 * DOC xqliu Comment method ""getUserSelectedMap"".
 * @param map
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> getUserSelectedMap(                Map<ColumnSet,List<TdColumn>> map){
                  Map<ColumnSet,List<TdColumn>> userMap=new HashMap<ColumnSet,List<TdColumn>>();
                  List<RepositoryNode> columnNodes=getColumnNodes(map);
                  RepositoryNode rootNode=getConnectionNode(map);
                  if (!columnNodes.isEmpty() && rootNode != null) {
                    ColumnsMapSelectionDialog dialog=new ColumnsMapSelectionDialog(null,PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),columnNodes,rootNode,DefaultMessagesImpl.getString(""String_Node_Str""));
                    dialog.setAllMap(map);
                    if (dialog.open() == Window.OK) {
                      userMap=dialog.getUserMap();
                    }
                  }
                  return userMap;
                }
                /** 
 * DOC xqliu Comment method ""getConnectionNode"".
 * @param map
 * @return
 */
                private RepositoryNode getConnectionNode(                Map<ColumnSet,List<TdColumn>> map){
                  RepositoryNode node=null;
                  if (map != null && !map.isEmpty()) {
                    Connection connection=ConnectionHelper.getConnection(map.keySet().iterator().next());
                    if (connection != null) {
                      node=RepositoryNodeHelper.recursiveFind(connection);
                    }
                  }
                  return node;
                }
                /** 
 * DOC xqliu Comment method ""getColumnNodes"".
 * @param map
 * @return
 */
                private List<RepositoryNode> getColumnNodes(                Map<ColumnSet,List<TdColumn>> map){
                  List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
                  if (map != null && !map.isEmpty()) {
                    List<TdColumn> columns=new ArrayList<TdColumn>();
                    Set<ColumnSet> keySet=map.keySet();
                    for (                    ColumnSet cs : keySet) {
                      columns.addAll(map.get(cs));
                    }
                    if (!columns.isEmpty()) {
                      for (                      TdColumn column : columns) {
                        nodes.add(RepositoryNodeHelper.recursiveFind(column));
                      }
                    }
                  }
                  return nodes;
                }
              }
);
            }
          }
 else {
            if (analysis.getParameters().isStoreData()) {
              if (indicator.isUsedMapDBMode()) {
                DrillDownUtils.createDrillDownMenuForMapDB(dataEntity,menu,itemEntities,analysis);
              }
 else {
                DrillDownUtils.createDrillDownMenuForJava(dataEntity,menu,itemEntities,analysis);
              }
              if (isPatternFrequencyIndicator(indicator) && !isEastAsiaPatternFrequencyIndicator(indicator)) {
                for (                final MenuItemEntity itemEntity : itemEntities) {
                  createMenuOfGenerateRegularPattern(analysis,menu,dataEntity);
                }
              }
            }
            if (isDatePatternFrequencyIndicator(indicator)) {
              final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e1){
                  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                  IFolder folder=ResourceManager.getPatternRegexFolder();
                  String model=dataEntity.getLabel();
                  String regex=dateIndicator.getRegex(model);
                  new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",model == null ? ""String_Node_Str"" : ""String_Node_Str"" + model + ""String_Node_Str"",language.getDbmsName()).run();
                }
              }
);
            }
          }
          addJobGenerationMenu(menu,analysis,indicator);
          menu.setVisible(true);
        }
      }
    }
  }
);
  TableUtils.addTooltipForTable(table);
  TableUtils.addActionTooltip(table);
}","public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final Table table=tbViewer.getTable();
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      if (e.button == 3) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
        if (indicator != null && dataEntity != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          if (ExecutionLanguage.SQL == analysis.getParameters().getExecutionLanguage()) {
            boolean showExtraMenu=false;
            for (            final MenuItemEntity itemEntity : itemEntities) {
              MenuItem item=new MenuItem(menu,SWT.PUSH);
              item.setText(itemEntity.geti18nLabel());
              item.setImage(itemEntity.getIcon());
              item.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e1){
                  if (isPatternMatchingIndicator(indicator) && !((PatternExplorer)explorer).isImplementRegexFunction(itemEntity.getLabel())) {
                    MessageDialog.openInformation(null,itemEntity.getLabel(),DefaultMessagesImpl.getString(""String_Node_Str""));
                    return;
                  }
                  String query=itemEntity.getQuery();
                  String editorName=indicator.getName();
                  Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
              if (IndicatorHelper.isWhereRuleIndicator(indicator)) {
                WhereRuleIndicator ind=(WhereRuleIndicator)indicator;
                EList<JoinElement> joinConditions=ind.getJoinConditions();
                if (joinConditions.size() > 0) {
                  showExtraMenu=true;
                }
              }
              if (isPatternFrequencyIndicator(indicator) && !isEastAsiaPatternFrequencyIndicator(indicator)) {
                createMenuOfGenerateRegularPattern(analysis,menu,dataEntity);
              }
            }
            if (showExtraMenu) {
              MenuItem itemCreateWhereRule=new MenuItem(menu,SWT.PUSH);
              itemCreateWhereRule.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreateWhereRule.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e1){
                  final StructuredSelection selectionOne=(StructuredSelection)tbViewer.getSelection();
                  Object firstElement=selectionOne.getFirstElement();
                  if (firstElement instanceof WhereRuleChartDataEntity) {
                    WhereRuleChartDataEntity wrChartDataEntity=(WhereRuleChartDataEntity)firstElement;
                    WhereRuleIndicator wrInd=(WhereRuleIndicator)wrChartDataEntity.getIndicator();
                    CreateDuplicatesAnalysisAction action=new CreateDuplicatesAnalysisAction(buildColumnsMap(wrInd));
                    action.run();
                  }
                }
                /** 
 * DOC xqliu Comment method ""buildColumnsMap"".
 * @param wrInd
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> buildColumnsMap(                WhereRuleIndicator wrInd){
                  Map<ColumnSet,List<TdColumn>> map=new HashMap<ColumnSet,List<TdColumn>>();
                  List<TdColumn> columns=new ArrayList<TdColumn>();
                  EList<JoinElement> joinConditions=wrInd.getJoinConditions();
                  for (                  JoinElement joinElement : joinConditions) {
                    TdColumn tempColumn=(TdColumn)joinElement.getColA();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                    tempColumn=(TdColumn)joinElement.getColB();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                  }
                  for (                  TdColumn column : columns) {
                    ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
                    List<TdColumn> list=map.get(columnSet);
                    if (list == null) {
                      list=new ArrayList<TdColumn>();
                      map.put(columnSet,list);
                    }
                    list.add(column);
                  }
                  return getUserSelectedMap(map);
                }
                /** 
 * DOC xqliu Comment method ""getUserSelectedMap"".
 * @param map
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> getUserSelectedMap(                Map<ColumnSet,List<TdColumn>> map){
                  Map<ColumnSet,List<TdColumn>> userMap=new HashMap<ColumnSet,List<TdColumn>>();
                  List<RepositoryNode> columnNodes=getColumnNodes(map);
                  RepositoryNode rootNode=getConnectionNode(map);
                  if (!columnNodes.isEmpty() && rootNode != null) {
                    ColumnsMapSelectionDialog dialog=new ColumnsMapSelectionDialog(null,PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),columnNodes,rootNode,DefaultMessagesImpl.getString(""String_Node_Str""));
                    dialog.setAllMap(map);
                    if (dialog.open() == Window.OK) {
                      userMap=dialog.getUserMap();
                    }
                  }
                  return userMap;
                }
                /** 
 * DOC xqliu Comment method ""getConnectionNode"".
 * @param map
 * @return
 */
                private RepositoryNode getConnectionNode(                Map<ColumnSet,List<TdColumn>> map){
                  RepositoryNode node=null;
                  if (map != null && !map.isEmpty()) {
                    Connection connection=ConnectionHelper.getConnection(map.keySet().iterator().next());
                    if (connection != null) {
                      node=RepositoryNodeHelper.recursiveFind(connection);
                    }
                  }
                  return node;
                }
                /** 
 * DOC xqliu Comment method ""getColumnNodes"".
 * @param map
 * @return
 */
                private List<RepositoryNode> getColumnNodes(                Map<ColumnSet,List<TdColumn>> map){
                  List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
                  if (map != null && !map.isEmpty()) {
                    List<TdColumn> columns=new ArrayList<TdColumn>();
                    Set<ColumnSet> keySet=map.keySet();
                    for (                    ColumnSet cs : keySet) {
                      columns.addAll(map.get(cs));
                    }
                    if (!columns.isEmpty()) {
                      for (                      TdColumn column : columns) {
                        nodes.add(RepositoryNodeHelper.recursiveFind(column));
                      }
                    }
                  }
                  return nodes;
                }
              }
);
            }
          }
 else {
            if (analysis.getParameters().isStoreData()) {
              if (indicator.isUsedMapDBMode()) {
                DrillDownUtils.createDrillDownMenuForMapDB(dataEntity,menu,itemEntities,analysis);
              }
 else {
                DrillDownUtils.createDrillDownMenuForJava(dataEntity,menu,itemEntities,analysis);
              }
              if (isPatternFrequencyIndicator(indicator) && !isEastAsiaPatternFrequencyIndicator(indicator)) {
                for (                final MenuItemEntity itemEntity : itemEntities) {
                  createMenuOfGenerateRegularPattern(analysis,menu,dataEntity);
                }
              }
            }
            if (isDatePatternFrequencyIndicator(indicator)) {
              final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e1){
                  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                  IFolder folder=ResourceManager.getPatternRegexFolder();
                  String model=dataEntity.getLabel();
                  String regex=dateIndicator.getRegex(model);
                  new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",model == null ? ""String_Node_Str"" : ""String_Node_Str"" + model + ""String_Node_Str"",language.getDbmsName()).run();
                }
              }
);
            }
          }
          addJobGenerationMenu(menu,analysis,indicator);
          menu.setVisible(true);
        }
      }
    }
  }
);
  TableUtils.addTooltipForTable(table);
  TableUtils.addActionTooltip(table);
}",0.9782619814843232
136500,"@Override public void widgetSelected(SelectionEvent e1){
  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
  PatternTransformer pattTransformer=new PatternTransformer(language);
  createPattern(analysis,query,pattTransformer);
}","@Override public void widgetSelected(SelectionEvent e1){
  String query=dataEntity.getKey() == null ? dataEntity.getLabel() : dataEntity.getKey().toString();
  createPattern(analysis,query);
}",0.4549549549549549
136501,"/** 
 * DOC yyin Comment method ""createMenuOfGenerateRegularPattern"".
 * @param analysis
 * @param menu
 * @param itemEntity
 */
public static void createMenuOfGenerateRegularPattern(final Analysis analysis,Menu menu,final ChartDataEntity dataEntity){
  final String query=dataEntity.getKey() == null ? dataEntity.getLabel() : dataEntity.getKey().toString();
  MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
  itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
  itemCreatePatt.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e1){
      DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
      PatternTransformer pattTransformer=new PatternTransformer(language);
      createPattern(analysis,query,pattTransformer);
    }
  }
);
}","/** 
 * DOC yyin Comment method ""createMenuOfGenerateRegularPattern"".
 * @param analysis
 * @param menu
 * @param itemEntity
 */
public static void createMenuOfGenerateRegularPattern(final Analysis analysis,Menu menu,final ChartDataEntity dataEntity){
  MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
  itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
  itemCreatePatt.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e1){
      String query=dataEntity.getKey() == null ? dataEntity.getLabel() : dataEntity.getKey().toString();
      createPattern(analysis,query);
    }
  }
);
}",0.7797437461866992
136502,"/** 
 * DOC bZhou Comment method ""createPattern"".
 * @param analysis
 * @param itemEntity
 * @param pattTransformer
 */
public static void createPattern(Analysis analysis,String query,final PatternTransformer pattTransformer){
  String language=pattTransformer.getDbmsLanguage().getDbmsName();
  String regex=pattTransformer.getRegexp(query);
  IFolder folder=ResourceManager.getPatternRegexFolder();
  new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",language).run();
}","/** 
 * DOC bZhou Comment method ""createPattern"".
 * @param analysis
 * @param itemEntity
 * @param pattTransformer
 */
public static void createPattern(Analysis analysis,String query){
  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
  PatternTransformer pattTransformer=new PatternTransformer(language);
  String regex=pattTransformer.getRegexp(query);
  IFolder folder=ResourceManager.getPatternRegexFolder();
  new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",language.getDbmsName()).run();
}",0.7937671860678277
136503,"/** 
 * add contextual menu for job generation.
 * @param menu
 * @param analysis
 * @param currentIndicator
 */
public static void addJobGenerationMenu(final Menu menu,final Analysis analysis,final Indicator currentIndicator){
  final Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
  final boolean isDelimitedFileAnalysis=ConnectionUtils.isDelimitedFileConnection(tdDataProvider);
  final boolean isHiveConnection=ConnectionHelper.isHive(tdDataProvider);
  final boolean isVertica=ConnectionHelper.isVertica(tdDataProvider);
  if (PluginChecker.isTDCPLoaded() && !(isDelimitedFileAnalysis || isHiveConnection)) {
    final IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
    if (service != null) {
      service.setIndicator(currentIndicator);
      service.setAnalysis(analysis);
      MenuItem item=null;
      if (isDUDIndicator(currentIndicator) && AnalysisType.COLUMN_SET != analysis.getParameters().getAnalysisType()) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (isPatternMatchingIndicator(currentIndicator) && !isVertica) {
        if (!isSQLPatternMatchingIndicator(currentIndicator)) {
          item=new MenuItem(menu,SWT.PUSH);
          item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
        }
      }
 else       if (isAllMatchIndicator(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (isPhonseNumberIndicator(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (isDqRule(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (item != null) {
        item.setImage(ImageLib.getImage(ImageLib.ICON_PROCESS));
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            service.executeJob();
          }
        }
);
      }
    }
  }
}","/** 
 * add contextual menu for job generation.
 * @param menu
 * @param analysis
 * @param currentIndicator
 */
public static void addJobGenerationMenu(final Menu menu,final Analysis analysis,final Indicator currentIndicator){
  Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
  boolean isDelimitedFileAnalysis=ConnectionUtils.isDelimitedFileConnection(tdDataProvider);
  boolean isHiveConnection=ConnectionHelper.isHive(tdDataProvider);
  boolean isVertica=ConnectionHelper.isVertica(tdDataProvider);
  if (PluginChecker.isTDCPLoaded() && !(isDelimitedFileAnalysis || isHiveConnection)) {
    final IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
    if (service != null) {
      service.setIndicator(currentIndicator);
      service.setAnalysis(analysis);
      MenuItem item=null;
      if (isDUDIndicator(currentIndicator) && AnalysisType.COLUMN_SET != analysis.getParameters().getAnalysisType()) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (isPatternMatchingIndicator(currentIndicator) && !isVertica) {
        if (!isSQLPatternMatchingIndicator(currentIndicator)) {
          item=new MenuItem(menu,SWT.PUSH);
          item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
        }
      }
 else       if (isAllMatchIndicator(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (isPhonseNumberIndicator(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (isDqRule(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (item != null) {
        item.setImage(ImageLib.getImage(ImageLib.ICON_PROCESS));
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            service.executeJob();
          }
        }
);
      }
    }
  }
}",0.9946547884187082
136504,"/** 
 * reload analysis connection.
 */
private void reloadConnection(TDQAnalysisItem runItem){
  if (AnalysisHelper.getReloadDatabases(runItem.getAnalysis())) {
    Connection conntion=(Connection)runItem.getAnalysis().getContext().getConnection();
    if (conntion != null) {
      try {
        RepositoryNode connectionNode=RepositoryNodeHelper.recursiveFind(conntion);
        ComparisonLevelFactory.creatComparisonLevel(connectionNode).reloadCurrentLevelElement();
      }
 catch (      ReloadCompareException e) {
        log.error(e,e);
      }
    }
  }
}","/** 
 * reload analysis connection.
 */
private void reloadConnection(TDQAnalysisItem runItem){
  if (AnalysisHelper.getReloadDatabases(runItem.getAnalysis())) {
    Connection conntion=(Connection)runItem.getAnalysis().getContext().getConnection();
    if (conntion != null) {
      try {
        RepositoryNode connectionNode=RepositoryNodeHelper.recursiveFind(conntion);
        ComparisonLevelFactory.creatComparisonLevel(connectionNode).reloadCurrentLevelElement();
        CorePlugin.getDefault().refreshDQView(connectionNode);
      }
 catch (      ReloadCompareException e) {
        log.error(e,e);
      }
    }
  }
}",0.947103274559194
136505,"public AnalysisHandler getAnalysisHandler(){
  AnalysisHandler analysisHandler=new AnalysisHandler();
  analysisHandler.setAnalysis(getCurrentModelElement());
  return analysisHandler;
}","@Override public AnalysisHandler getAnalysisHandler(){
  AnalysisHandler analysisHandler=new AnalysisHandler();
  analysisHandler.setAnalysis(getCurrentModelElement());
  return analysisHandler;
}",0.9738219895287958
136506,"/** 
 * DOC xqliu Comment method ""createReloadDatabasesButton"".
 * @param sectionClient
 */
private void createReloadDatabasesButton(Composite sectionClient){
  if (isConnectionAnalysis()) {
    reloadDatabasesBtn=new Button(sectionClient,SWT.CHECK);
    reloadDatabasesBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    reloadDatabasesBtn.setSelection(AnalysisHelper.getReloadDatabases(getCurrentModelElement()));
    reloadDatabasesBtn.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        setDirty(true);
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
  }
}","/** 
 * DOC xqliu Comment method ""createReloadDatabasesButton"".
 * @param sectionClient
 */
private void createReloadDatabasesButton(Composite sectionClient){
  if (isConnectionAnalysis()) {
    reloadDatabasesBtn=new Button(sectionClient,SWT.CHECK);
    reloadDatabasesBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    if (DqRepositoryViewService.isComeFromRefrenceProject(this.getTdDataProvider())) {
      reloadDatabasesBtn.setEnabled(false);
      reloadDatabasesBtn.setSelection(false);
    }
 else {
      reloadDatabasesBtn.setSelection(AnalysisHelper.getReloadDatabases(getCurrentModelElement()));
    }
    reloadDatabasesBtn.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        setDirty(true);
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
  }
}",0.8764742396027312
136507,"public ConnectionAnalysisDetailsPage(FormEditor editor,String id,String title){
  super(editor,id,title);
}","public ConnectionAnalysisDetailsPage(FormEditor editor,String id,String title){
  super(editor,id,title);
  fillDataProvider();
}",0.9067796610169492
136508,"@Override public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    if (tableCatalogOrSchemaView.getItemCount() > 0 && tableCatalogOrSchemaView.getSelectionIndex() != -1) {
      final Menu menu=new Menu(tableCatalogOrSchemaView.getShell(),SWT.POP_UP);
      tableCatalogOrSchemaView.setMenu(menu);
      MenuItem tableAnalysisMenuItem=new MenuItem(menu,SWT.PUSH);
      tableAnalysisMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      tableAnalysisMenuItem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
      tableAnalysisMenuItem.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          TableItem tableItem=tableCatalogOrSchemaView.getItem(tableCatalogOrSchemaView.getSelectionIndex());
          ViewIndicator viewIndicator=(ViewIndicator)tableItem.getData();
          runTableAnalysis(viewIndicator.getTableName());
        }
      }
);
    }
 else {
      tableCatalogOrSchemaView.setMenu(null);
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  if (e.button == 3) {
    TableItem tableItem=tableCatalogOrSchemaView.getItem(tableCatalogOrSchemaView.getSelectionIndex());
    final OverviewIndUIElement data=(OverviewIndUIElement)tableItem.getData();
    if (tableCatalogOrSchemaView.getItemCount() > 0 && tableCatalogOrSchemaView.getSelectionIndex() != -1) {
      final Menu menu=new Menu(tableCatalogOrSchemaView.getShell(),SWT.POP_UP);
      tableCatalogOrSchemaView.setMenu(menu);
      MenuItem tableAnalysisMenuItem=new MenuItem(menu,SWT.PUSH);
      tableAnalysisMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      tableAnalysisMenuItem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
      tableAnalysisMenuItem.addSelectionListener(new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          ViewIndicator viewIndicator=(ViewIndicator)data.getOverviewIndicator();
          runTableAnalysis(viewIndicator.getTableName());
        }
      }
);
      if (data.isVirtualNode()) {
        tableAnalysisMenuItem.setEnabled(false);
      }
    }
 else {
      tableCatalogOrSchemaView.setMenu(null);
    }
  }
}",0.6702702702702703
136509,"/** 
 * DOC klliu Comment method ""displayTableAndViewComp"".
 * @param schemaIndicator
 * @param parentNode
 */
protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator,final IRepositoryNode parentNode){
  tableAndViewComposite.setVisible(true);
  EList<TableIndicator> indicatorTableList=schemaIndicator.getTableIndicators();
  List<OverviewIndUIElement> tableElements=wapperInput(indicatorTableList,parentNode);
  if (tableOfCatalogOrSchemaViewer == null || tableOfCatalogOrSchemaViewer.getTable().isDisposed()) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    TableUtils.addActionTooltip(catalogOrSchemaTable);
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider tableProvider=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(tableProvider);
    tableOfCatalogOrSchemaViewer.setContentProvider(tableProvider);
    catalogOrSchemaTable.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        if (e.button == 3) {
          if (catalogOrSchemaTable.getItemCount() > 0 && catalogOrSchemaTable.getSelectionIndex() != -1) {
            final Menu menu=new Menu(catalogOrSchemaTable.getShell(),SWT.POP_UP);
            catalogOrSchemaTable.setMenu(menu);
            MenuItem viewKeyMenuItem=new MenuItem(menu,SWT.PUSH);
            viewKeyMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            viewKeyMenuItem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
            viewKeyMenuItem.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                runMenu(catalogOrSchemaTable,DefaultMessagesImpl.getString(""String_Node_Str""));
              }
            }
);
            MenuItem viewIndexMenuItem=new MenuItem(menu,SWT.PUSH);
            viewIndexMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            viewIndexMenuItem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
            viewIndexMenuItem.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                runMenu(catalogOrSchemaTable,DefaultMessagesImpl.getString(""String_Node_Str""));
              }
            }
);
            MenuItem tableAnalysisMenuItem=new MenuItem(menu,SWT.PUSH);
            tableAnalysisMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            tableAnalysisMenuItem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
            tableAnalysisMenuItem.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                TableItem tableItem=catalogOrSchemaTable.getItem(catalogOrSchemaTable.getSelectionIndex());
                OverviewIndUIElement data=(OverviewIndUIElement)tableItem.getData();
                runTableAnalysis(data);
              }
            }
);
          }
 else {
            catalogOrSchemaTable.setMenu(null);
          }
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    final Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    TableUtils.addActionTooltip(tableCatalogOrSchemaView);
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
    tableCatalogOrSchemaView.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        if (e.button == 3) {
          if (tableCatalogOrSchemaView.getItemCount() > 0 && tableCatalogOrSchemaView.getSelectionIndex() != -1) {
            final Menu menu=new Menu(tableCatalogOrSchemaView.getShell(),SWT.POP_UP);
            tableCatalogOrSchemaView.setMenu(menu);
            MenuItem tableAnalysisMenuItem=new MenuItem(menu,SWT.PUSH);
            tableAnalysisMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            tableAnalysisMenuItem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
            tableAnalysisMenuItem.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                TableItem tableItem=tableCatalogOrSchemaView.getItem(tableCatalogOrSchemaView.getSelectionIndex());
                ViewIndicator viewIndicator=(ViewIndicator)tableItem.getData();
                runTableAnalysis(viewIndicator.getTableName());
              }
            }
);
          }
 else {
            tableCatalogOrSchemaView.setMenu(null);
          }
        }
      }
    }
);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(tableElements);
  List<ViewIndicator> indicatorViewList=schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  viewOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}","/** 
 * DOC klliu Comment method ""displayTableAndViewComp"".
 * @param schemaIndicator
 * @param parentNode
 */
protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator,final IRepositoryNode parentNode){
  tableAndViewComposite.setVisible(true);
  EList<TableIndicator> indicatorTableList=schemaIndicator.getTableIndicators();
  List<OverviewIndUIElement> tableElements=wapperInput(indicatorTableList,parentNode);
  if (tableOfCatalogOrSchemaViewer == null || tableOfCatalogOrSchemaViewer.getTable().isDisposed()) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    TableUtils.addActionTooltip(catalogOrSchemaTable);
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider tableProvider=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(tableProvider);
    tableOfCatalogOrSchemaViewer.setContentProvider(tableProvider);
    catalogOrSchemaTable.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        if (e.button == 3) {
          TableItem item=catalogOrSchemaTable.getItem(catalogOrSchemaTable.getSelectionIndex());
          if (catalogOrSchemaTable.getItemCount() > 0 && catalogOrSchemaTable.getSelectionIndex() != -1) {
            final Menu menu=new Menu(catalogOrSchemaTable.getShell(),SWT.POP_UP);
            catalogOrSchemaTable.setMenu(menu);
            MenuItem viewKeyMenuItem=new MenuItem(menu,SWT.PUSH);
            viewKeyMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            viewKeyMenuItem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
            viewKeyMenuItem.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                runMenu(catalogOrSchemaTable,DefaultMessagesImpl.getString(""String_Node_Str""));
              }
            }
);
            MenuItem viewIndexMenuItem=new MenuItem(menu,SWT.PUSH);
            viewIndexMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            viewIndexMenuItem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
            viewIndexMenuItem.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                runMenu(catalogOrSchemaTable,DefaultMessagesImpl.getString(""String_Node_Str""));
              }
            }
);
            TableItem tableItem=catalogOrSchemaTable.getItem(catalogOrSchemaTable.getSelectionIndex());
            final OverviewIndUIElement data=(OverviewIndUIElement)tableItem.getData();
            MenuItem tableAnalysisMenuItem=new MenuItem(menu,SWT.PUSH);
            tableAnalysisMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            tableAnalysisMenuItem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
            tableAnalysisMenuItem.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                runTableAnalysis(data);
              }
            }
);
            if (data.isVirtualNode()) {
              tableAnalysisMenuItem.setEnabled(false);
            }
          }
 else {
            catalogOrSchemaTable.setMenu(null);
          }
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    final Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    TableUtils.addActionTooltip(tableCatalogOrSchemaView);
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
    tableCatalogOrSchemaView.addMouseListener(new MouseAdapter(){
      @Override public void mouseDown(      MouseEvent e){
        if (e.button == 3) {
          TableItem tableItem=tableCatalogOrSchemaView.getItem(tableCatalogOrSchemaView.getSelectionIndex());
          final OverviewIndUIElement data=(OverviewIndUIElement)tableItem.getData();
          if (tableCatalogOrSchemaView.getItemCount() > 0 && tableCatalogOrSchemaView.getSelectionIndex() != -1) {
            final Menu menu=new Menu(tableCatalogOrSchemaView.getShell(),SWT.POP_UP);
            tableCatalogOrSchemaView.setMenu(menu);
            MenuItem tableAnalysisMenuItem=new MenuItem(menu,SWT.PUSH);
            tableAnalysisMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            tableAnalysisMenuItem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
            tableAnalysisMenuItem.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                ViewIndicator viewIndicator=(ViewIndicator)data.getOverviewIndicator();
                runTableAnalysis(viewIndicator.getTableName());
              }
            }
);
            if (data.isVirtualNode()) {
              tableAnalysisMenuItem.setEnabled(false);
            }
          }
 else {
            tableCatalogOrSchemaView.setMenu(null);
          }
        }
      }
    }
);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(tableElements);
  List<ViewIndicator> indicatorViewList=schemaIndicator.getViewIndicators();
  List<OverviewIndUIElement> viewElements=wapperInput(indicatorViewList,parentNode);
  viewOfCatalogOrSchemaViewer.setInput(viewElements);
  viewOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}",0.8899192342207598
136510,"@Override public void widgetSelected(SelectionEvent e){
  TableItem tableItem=tableCatalogOrSchemaView.getItem(tableCatalogOrSchemaView.getSelectionIndex());
  ViewIndicator viewIndicator=(ViewIndicator)tableItem.getData();
  runTableAnalysis(viewIndicator.getTableName());
}","@Override public void widgetSelected(SelectionEvent e){
  ViewIndicator viewIndicator=(ViewIndicator)data.getOverviewIndicator();
  runTableAnalysis(viewIndicator.getTableName());
}",0.7192982456140351
136511,"/** 
 * DOC klliu Comment method ""wapperInput"". relations
 * @param indicatorTableList
 * @param parentNode
 * @return
 */
private List<OverviewIndUIElement> wapperInput(EList<TableIndicator> indicatorTableList,IRepositoryNode parentNode){
  List<OverviewIndUIElement> cataUIEleList=new ArrayList<OverviewIndUIElement>();
  List<IRepositoryNode> children=parentNode.getChildren();
  for (  IRepositoryNode folderNode : children) {
    if (folderNode instanceof DBTableFolderRepNode) {
      List<IRepositoryNode> tableNodes=folderNode.getChildren();
      for (      TableIndicator indicator : indicatorTableList) {
        for (        IRepositoryNode tableNode : tableNodes) {
          MetadataTable table=((MetadataTableRepositoryObject)tableNode.getObject()).getTable();
          String name=table.getName();
          String tableName=indicator.getTableName();
          boolean equals=name.equals(tableName);
          if (equals) {
            OverviewIndUIElement tableUIEle=new OverviewIndUIElement();
            tableUIEle.setNode(tableNode);
            tableUIEle.setOverviewIndicator(indicator);
            cataUIEleList.add(tableUIEle);
            break;
          }
        }
      }
    }
  }
  return cataUIEleList;
}","/** 
 * DOC klliu Comment method ""wapperInput"". relations
 * @param indicatorTableList
 * @param parentNode
 * @return
 */
private List<OverviewIndUIElement> wapperInput(EList<TableIndicator> indicatorTableList,IRepositoryNode parentNode){
  List<OverviewIndUIElement> cataUIEleList=new ArrayList<OverviewIndUIElement>();
  List<IRepositoryNode> children=parentNode.getChildren();
  for (  IRepositoryNode folderNode : children) {
    if (folderNode instanceof DBTableFolderRepNode) {
      List<IRepositoryNode> tableNodes=folderNode.getChildren();
      for (      TableIndicator indicator : indicatorTableList) {
        boolean equals=false;
        for (        IRepositoryNode tableNode : tableNodes) {
          MetadataTable table=((MetadataTableRepositoryObject)tableNode.getObject()).getTable();
          String name=table.getName();
          String tableName=indicator.getTableName();
          equals=name.equals(tableName);
          if (equals) {
            OverviewIndUIElement tableUIEle=new OverviewIndUIElement();
            tableUIEle.setNode(tableNode);
            tableUIEle.setOverviewIndicator(indicator);
            try {
              if (DqRepositoryViewService.getColumns(getTdDataProvider(),(ColumnSet)table,true).isEmpty()) {
                tableUIEle.setVirtualNode(true);
              }
            }
 catch (            Exception e) {
              log.error(e,e);
            }
            cataUIEleList.add(tableUIEle);
            break;
          }
        }
        if (!equals) {
          OverviewIndUIElement tableUIEle=new OverviewIndUIElement();
          tableUIEle.setOverviewIndicator(indicator);
          tableUIEle.setVirtualNode(true);
          cataUIEleList.add(tableUIEle);
        }
      }
    }
  }
  return cataUIEleList;
}",0.813615333773959
136512,"public Image getColumnImage(Object element,int columnIndex){
  if (element instanceof ViewIndicator && columnIndex == 0) {
    return CWMImageEnum.View.getImg();
  }
  return null;
}","public Image getColumnImage(Object element,int columnIndex){
  if (element instanceof OverviewIndUIElement && columnIndex == 0) {
    return CWMImageEnum.View.getImg();
  }
  return null;
}",0.9487870619946092
136513,"public String getColumnText(Object element,int columnIndex){
  if (element instanceof ViewIndicator) {
    ViewIndicator indicatorUIEle=(ViewIndicator)element;
switch (columnIndex) {
case 0:
      return indicatorUIEle.getTableName();
case 1:
    return PluginConstant.EMPTY_STRING + indicatorUIEle.getRowCount();
default :
  break;
}
}
return PluginConstant.EMPTY_STRING;
}","public String getColumnText(Object element,int columnIndex){
  if (element instanceof OverviewIndUIElement) {
    ViewIndicator indicatorUIEle=(ViewIndicator)((OverviewIndUIElement)element).getOverviewIndicator();
switch (columnIndex) {
case 0:
      return indicatorUIEle.getTableName();
case 1:
    return PluginConstant.EMPTY_STRING + indicatorUIEle.getRowCount();
default :
  break;
}
}
return PluginConstant.EMPTY_STRING;
}",0.830423940149626
136514,"public Color getBackground(Object element,int columnIndex){
  if (element instanceof ViewIndicator) {
    ViewIndicator indicator=(ViewIndicator)element;
    if (indicator.getRowCount() == 0) {
      return bg;
    }
  }
  return null;
}","public Color getBackground(Object element,int columnIndex){
  if (element instanceof OverviewIndUIElement) {
    ViewIndicator indicator=(ViewIndicator)((OverviewIndUIElement)element).getOverviewIndicator();
    if (indicator.getRowCount() == 0) {
      return bg;
    }
  }
  return null;
}",0.7424242424242424
136515,"private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    int analysedColumnIndex[]=new int[analysisElementList.size()];
    MetadataColumn mColumn=(MetadataColumn)analysisElementList.get(0);
    MetadataTable metadataTable=ColumnHelper.getColumnOwnerAsMetadataTable(mColumn);
    EList<MetadataColumn> columns=metadataTable.getColumns();
    List<String> columnLabels=new ArrayList<String>();
    for (    MetadataColumn column : columns) {
      columnLabels.add(column.getLabel());
    }
    String[] analysedColumnName=new String[analysisElementList.size()];
    for (int j=0; j < analysisElementList.size(); j++) {
      analysedColumnName[j]=((MetadataColumn)analysisElementList.get(j)).getLabel();
      analysedColumnIndex[j]=columnLabels.indexOf(analysedColumnName[j]);
    }
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord++;
      if (currentRecord <= headValue) {
        continue;
      }
      if (limitValue != -1 && currentRecord > limitValue) {
        break;
      }
      String[] values=csvReader.getValues();
      String[] analysedValues=new String[analysisElementList.size()];
      for (int i=0; i < analysedColumnIndex.length; i++) {
        analysedValues[i]=values[analysedColumnIndex[i]];
      }
      handleRow(analysedValues);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}","private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  int tableLimit=getLimit();
  int connLimit=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int limitValue=tableLimit < connLimit ? tableLimit : connLimit;
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    int analysedColumnIndex[]=new int[analysisElementList.size()];
    MetadataColumn mColumn=(MetadataColumn)analysisElementList.get(0);
    MetadataTable metadataTable=ColumnHelper.getColumnOwnerAsMetadataTable(mColumn);
    EList<MetadataColumn> columns=metadataTable.getColumns();
    List<String> columnLabels=new ArrayList<String>();
    for (    MetadataColumn column : columns) {
      columnLabels.add(column.getLabel());
    }
    String[] analysedColumnName=new String[analysisElementList.size()];
    for (int j=0; j < analysisElementList.size(); j++) {
      analysedColumnName[j]=((MetadataColumn)analysisElementList.get(j)).getLabel();
      analysedColumnIndex[j]=columnLabels.indexOf(analysedColumnName[j]);
    }
    long currentRecord=0;
    while (csvReader.readNext()) {
      if (currentRecord <= headValue) {
        continue;
      }
      currentRecord++;
      if (limitValue != -1 && currentRecord > limitValue) {
        break;
      }
      String[] values=csvReader.getValues();
      String[] analysedValues=new String[analysisElementList.size()];
      for (int i=0; i < analysedColumnIndex.length; i++) {
        analysedValues[i]=values[analysedColumnIndex[i]];
      }
      handleRow(analysedValues);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}",0.9396170839469808
136516,"/** 
 * return Column or TdXMLElement analysis executor. ADD xqliu bug 10238 2009-12-24
 * @param analysis
 * @param executionEngine
 * @return
 */
private static AnalysisExecutor getModelElementAnalysisExecutor(Analysis analysis,ExecutionLanguage executionEngine){
  boolean isDelimitedFile=ConnectionUtils.isDelimitedFileConnection((DataProvider)analysis.getContext().getConnection());
  boolean sql=ExecutionLanguage.SQL.equals(executionEngine);
  if (isDelimitedFile) {
    return new DelimitedFileAnalysisExecutor();
  }
 else {
    boolean isValid=hasSampleDataValid(analysis);
    if (isValid) {
      return new ColumnAnalysisExecutorWithSampleData();
    }
 else {
      return sql ? new ColumnAnalysisSqlExecutor() : new ColumnAnalysisExecutor();
    }
  }
}","/** 
 * return Column or TdXMLElement analysis executor. ADD xqliu bug 10238 2009-12-24
 * @param analysis
 * @param executionEngine
 * @return
 */
private static AnalysisExecutor getModelElementAnalysisExecutor(Analysis analysis,ExecutionLanguage executionEngine){
  boolean isDelimitedFile=ConnectionUtils.isDelimitedFileConnection((DataProvider)analysis.getContext().getConnection());
  boolean sql=ExecutionLanguage.SQL.equals(executionEngine);
  boolean isValid=hasSampleDataValid(analysis);
  if (isDelimitedFile) {
    if (isValid) {
      return new DelimitedFileAnalysisExecutorWithSampleData();
    }
 else {
      return new DelimitedFileAnalysisExecutor();
    }
  }
 else {
    if (isValid) {
      return new ColumnAnalysisExecutorWithSampleData();
    }
 else {
      return sql ? new ColumnAnalysisSqlExecutor() : new ColumnAnalysisExecutor();
    }
  }
}",0.8212324588163514
136517,"public static FileInputDelimited createFileInputDelimited(DelimitedFileConnection delimitedFileconnection) throws IOException {
  String rowSeparator=JavaSqlFactory.getRowSeparatorValue(delimitedFileconnection);
  String encoding=JavaSqlFactory.getEncoding(delimitedFileconnection);
  String fieldSeparatorValue=JavaSqlFactory.getFieldSeparatorValue(delimitedFileconnection);
  boolean isSpliteRecord=delimitedFileconnection.isSplitRecord();
  boolean isSkipeEmptyRow=delimitedFileconnection.isRemoveEmptyRow();
  String languageName=LanguageManager.getCurrentLanguage().getName();
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  int footValue=JavaSqlFactory.getFooterValue(delimitedFileconnection);
  String path=JavaSqlFactory.getURL(delimitedFileconnection);
  return new FileInputDelimited(ParameterUtil.trimParameter(path),ParameterUtil.trimParameter(encoding),ParameterUtil.trimParameter(StringUtils.loadConvert(fieldSeparatorValue,languageName)),ParameterUtil.trimParameter(StringUtils.loadConvert(rowSeparator,languageName)),isSkipeEmptyRow,headValue,footValue,limitValue,-1,isSpliteRecord);
}","public static FileInputDelimited createFileInputDelimited(DelimitedFileConnection delimitedFileconnection,int limit) throws IOException {
  String rowSeparator=JavaSqlFactory.getRowSeparatorValue(delimitedFileconnection);
  String encoding=JavaSqlFactory.getEncoding(delimitedFileconnection);
  String fieldSeparatorValue=JavaSqlFactory.getFieldSeparatorValue(delimitedFileconnection);
  boolean isSpliteRecord=delimitedFileconnection.isSplitRecord();
  boolean isSkipeEmptyRow=delimitedFileconnection.isRemoveEmptyRow();
  String languageName=LanguageManager.getCurrentLanguage().getName();
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  int footValue=JavaSqlFactory.getFooterValue(delimitedFileconnection);
  String path=JavaSqlFactory.getURL(delimitedFileconnection);
  return new FileInputDelimited(ParameterUtil.trimParameter(path),ParameterUtil.trimParameter(encoding),ParameterUtil.trimParameter(StringUtils.loadConvert(fieldSeparatorValue,languageName)),ParameterUtil.trimParameter(StringUtils.loadConvert(rowSeparator,languageName)),isSkipeEmptyRow,headValue,footValue,limitValue < limit ? limitValue : limit,-1,isSpliteRecord);
}",0.9839704069050554
136518,"/** 
 * DOC talend Comment method ""useDelimitedReader"".
 * @param file
 * @param delimitedFileconnection2
 * @param analysisElementList
 * @param columnElementList
 * @param indicToRowMap
 * @return
 */
private ReturnCode useDelimitedReader(List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  ReturnCode returnCode=new ReturnCode(true);
  try {
    FileInputDelimited fileInputDelimited=AnalysisExecutorHelper.createFileInputDelimited(delimitedFileconnection);
    long currentRow=JavaSqlFactory.getHeadValue(delimitedFileconnection);
    while (fileInputDelimited.nextRecord()) {
      if (!continueRun()) {
        break;
      }
      currentRow++;
      int columsCount=fileInputDelimited.getColumnsCountOfCurrentRow();
      String[] rowValues=new String[columsCount];
      for (int i=0; i < columsCount; i++) {
        rowValues[i]=fileInputDelimited.get(i);
      }
      returnCode.setOk(returnCode.isOk() && handleByARow(rowValues,currentRow,analysisElementList,columnElementList,indicToRowMap).isOk());
    }
    fileInputDelimited.close();
  }
 catch (  IOException e) {
    log.error(e,e);
  }
  return returnCode;
}","/** 
 * DOC talend Comment method ""useDelimitedReader"".
 * @param file
 * @param delimitedFileconnection2
 * @param analysisElementList
 * @param columnElementList
 * @param indicToRowMap
 * @return
 */
private ReturnCode useDelimitedReader(List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  ReturnCode returnCode=new ReturnCode(true);
  try {
    FileInputDelimited fileInputDelimited=createFileInputDelimited();
    long currentRow=JavaSqlFactory.getHeadValue(delimitedFileconnection);
    while (fileInputDelimited.nextRecord()) {
      if (!continueRun()) {
        break;
      }
      currentRow++;
      int columsCount=fileInputDelimited.getColumnsCountOfCurrentRow();
      String[] rowValues=new String[columsCount];
      for (int i=0; i < columsCount; i++) {
        rowValues[i]=fileInputDelimited.get(i);
      }
      returnCode.setOk(returnCode.isOk() && handleByARow(rowValues,currentRow,analysisElementList,columnElementList,indicToRowMap).isOk());
    }
    fileInputDelimited.close();
  }
 catch (  IOException e) {
    log.error(e,e);
  }
  return returnCode;
}",0.9805414551607444
136519,"private ReturnCode useCsvReader(File file,List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  ReturnCode returnCode=new ReturnCode(true);
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
    }
    String[] rowValues=null;
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord++;
      if (!continueRun() || limitValue != -1 && currentRecord > limitValue) {
        break;
      }
      rowValues=csvReader.getValues();
      returnCode.setOk(returnCode.isOk() && handleByARow(rowValues,currentRecord,analysisElementList,columnElementList,indicToRowMap).isOk());
    }
  }
 catch (  IOException e) {
    log.error(e,e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
  return returnCode;
}","private ReturnCode useCsvReader(File file,List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  ReturnCode returnCode=new ReturnCode(true);
  int limitValue=getCsvReaderLimit();
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
    }
    String[] rowValues=null;
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord++;
      if (!continueRun() || limitValue != -1 && currentRecord > limitValue) {
        break;
      }
      rowValues=csvReader.getValues();
      returnCode.setOk(returnCode.isOk() && handleByARow(rowValues,currentRecord,analysisElementList,columnElementList,indicToRowMap).isOk());
    }
  }
 catch (  IOException e) {
    log.error(e,e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
  return returnCode;
}",0.9779591836734692
136520,"public static String getImageNameByRepositoryNode(IRepositoryNode node){
  String imageName=null;
  IRepositoryViewObject viewObject=node.getObject();
  ENodeType type=node.getType();
  if (node instanceof ReportAnalysisRepNode) {
    imageName=ImageLib.ANALYSIS_OBJECT;
  }
  if (node instanceof RecycleBinRepNode) {
    imageName=ImageLib.RECYCLEBIN_EMPTY;
  }
 else   if (type.equals(ENodeType.SYSTEM_FOLDER)) {
    String label=viewObject.getLabel();
    if (label.equals(EResourceConstant.DATA_PROFILING.getName())) {
      imageName=ImageLib.DATA_PROFILING;
    }
 else     if (label.equals(EResourceConstant.METADATA.getName())) {
      imageName=ImageLib.METADATA;
    }
 else     if (node instanceof DBConnectionFolderRepNode) {
      imageName=ImageLib.CONNECTION;
    }
 else     if (label.equals(EResourceConstant.FILEDELIMITED.getName())) {
      imageName=ImageLib.FILE_DELIMITED;
    }
 else     if (label.equals(EResourceConstant.HADOOP_CLUSTER.getName())) {
      imageName=ImageLib.HADOOP_CLUSTER;
    }
 else     if (label.equals(EResourceConstant.LIBRARIES.getName())) {
      imageName=ImageLib.LIBRARIES;
    }
 else     if (label.equals(EResourceConstant.EXCHANGE.getName())) {
      imageName=ImageLib.EXCHANGE;
    }
 else {
      imageName=ImageLib.FOLDERNODE_IMAGE;
    }
  }
 else   if (type.equals(ENodeType.SIMPLE_FOLDER)) {
    imageName=ImageLib.FOLDERNODE_IMAGE;
  }
 else   if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
    if (node instanceof DBConnectionRepNode) {
      imageName=ImageLib.TD_DATAPROVIDER;
    }
 else     if (node instanceof DFConnectionRepNode) {
      imageName=ImageLib.FILE_DELIMITED;
    }
 else     if (node instanceof AnalysisRepNode) {
      imageName=ImageLib.ANALYSIS_OBJECT;
    }
 else     if (node instanceof ReportRepNode) {
      imageName=ImageLib.REPORT_OBJECT;
    }
 else     if (node instanceof SysIndicatorDefinitionRepNode) {
      imageName=ImageLib.IND_DEFINITION;
    }
 else     if (node instanceof PatternRepNode) {
      imageName=ImageLib.PATTERN_REG;
    }
 else     if (node instanceof RuleRepNode) {
      imageName=ImageLib.DQ_RULE;
    }
 else     if (node instanceof SourceFileRepNode) {
      imageName=ImageLib.SOURCE_FILE;
    }
 else     if (node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
      imageName=ImageLib.EXCHANGE;
    }
 else     if (node instanceof JrxmlTempleteRepNode) {
      imageName=ImageLib.JRXML_ICON;
    }
  }
 else   if (type.equals(ENodeType.TDQ_REPOSITORY_ELEMENT)) {
    if (node instanceof DBCatalogRepNode) {
      imageName=ImageLib.CATALOG;
    }
 else     if (node instanceof DBSchemaRepNode) {
      imageName=ImageLib.SCHEMA;
    }
 else     if (node instanceof DBTableFolderRepNode) {
      imageName=ImageLib.FOLDERNODE_IMAGE;
    }
 else     if (node instanceof DBViewFolderRepNode) {
      imageName=ImageLib.FOLDERNODE_IMAGE;
    }
 else     if (node instanceof DBTableRepNode || node instanceof DFTableRepNode) {
      imageName=ImageLib.TABLE;
    }
 else     if (node instanceof DBViewRepNode) {
      imageName=ImageLib.VIEW;
    }
 else     if (node instanceof DBColumnRepNode) {
      if (((DBColumnRepNode)node).isKey()) {
        imageName=ImageLib.PK_COLUMN;
      }
 else {
        imageName=ImageLib.TD_COLUMN;
      }
    }
 else     if (node instanceof DFColumnRepNode) {
      imageName=ImageLib.TD_COLUMN;
    }
 else     if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
      imageName=ImageLib.FOLDERNODE_IMAGE;
    }
  }
  return imageName;
}","public static String getImageNameByRepositoryNode(IRepositoryNode node){
  String imageName=null;
  IRepositoryViewObject viewObject=node.getObject();
  ENodeType type=node.getType();
  if (node instanceof ReportAnalysisRepNode) {
    imageName=ImageLib.ANALYSIS_OBJECT;
  }
 else   if (node instanceof RecycleBinRepNode) {
    imageName=ImageLib.RECYCLEBIN_EMPTY;
  }
 else   if (type.equals(ENodeType.SYSTEM_FOLDER)) {
    String label=viewObject.getLabel();
    if (label.equals(EResourceConstant.DATA_PROFILING.getName())) {
      imageName=ImageLib.DATA_PROFILING;
    }
 else     if (label.equals(EResourceConstant.METADATA.getName())) {
      imageName=ImageLib.METADATA;
    }
 else     if (node instanceof DBConnectionFolderRepNode) {
      imageName=ImageLib.CONNECTION;
    }
 else     if (label.equals(EResourceConstant.FILEDELIMITED.getName())) {
      imageName=ImageLib.FILE_DELIMITED;
    }
 else     if (label.equals(EResourceConstant.HADOOP_CLUSTER.getName())) {
      imageName=ImageLib.HADOOP_CLUSTER;
    }
 else     if (label.equals(EResourceConstant.LIBRARIES.getName())) {
      imageName=ImageLib.LIBRARIES;
    }
 else     if (label.equals(EResourceConstant.EXCHANGE.getName())) {
      imageName=ImageLib.EXCHANGE;
    }
 else {
      imageName=ImageLib.FOLDERNODE_IMAGE;
    }
  }
 else   if (type.equals(ENodeType.SIMPLE_FOLDER)) {
    imageName=ImageLib.FOLDERNODE_IMAGE;
  }
 else   if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
    if (node instanceof DBConnectionRepNode) {
      imageName=ImageLib.TD_DATAPROVIDER;
    }
 else     if (node instanceof DFConnectionRepNode) {
      imageName=ImageLib.FILE_DELIMITED;
    }
 else     if (node instanceof AnalysisRepNode) {
      imageName=ImageLib.ANALYSIS_OBJECT;
    }
 else     if (node instanceof ReportRepNode) {
      imageName=ImageLib.REPORT_OBJECT;
    }
 else     if (node instanceof SysIndicatorDefinitionRepNode) {
      imageName=ImageLib.IND_DEFINITION;
    }
 else     if (node instanceof PatternRepNode) {
      imageName=ImageLib.PATTERN_REG;
    }
 else     if (node instanceof RuleRepNode) {
      imageName=ImageLib.DQ_RULE;
    }
 else     if (node instanceof SourceFileRepNode) {
      imageName=ImageLib.SOURCE_FILE;
    }
 else     if (node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
      imageName=ImageLib.EXCHANGE;
    }
 else     if (node instanceof JrxmlTempleteRepNode) {
      imageName=ImageLib.JRXML_ICON;
    }
  }
 else   if (type.equals(ENodeType.TDQ_REPOSITORY_ELEMENT)) {
    if (node instanceof DBCatalogRepNode) {
      imageName=ImageLib.CATALOG;
    }
 else     if (node instanceof DBSchemaRepNode) {
      imageName=ImageLib.SCHEMA;
    }
 else     if (node instanceof DBTableFolderRepNode) {
      imageName=ImageLib.FOLDERNODE_IMAGE;
    }
 else     if (node instanceof DBViewFolderRepNode) {
      imageName=ImageLib.FOLDERNODE_IMAGE;
    }
 else     if (node instanceof DBTableRepNode || node instanceof DFTableRepNode) {
      imageName=ImageLib.TABLE;
    }
 else     if (node instanceof DBViewRepNode) {
      imageName=ImageLib.VIEW;
    }
 else     if (node instanceof DBColumnRepNode) {
      if (((DBColumnRepNode)node).isKey()) {
        imageName=ImageLib.PK_COLUMN;
      }
 else {
        imageName=ImageLib.TD_COLUMN;
      }
    }
 else     if (node instanceof DFColumnRepNode) {
      imageName=ImageLib.TD_COLUMN;
    }
 else     if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
      imageName=ImageLib.FOLDERNODE_IMAGE;
    }
  }
  return imageName;
}",0.9991603694374476
136521,"private void validateWhithspace(Text field){
  if (field.getText().length() > 0 && PluginConstant.EMPTY_STRING.equals(field.getText().trim())) {
    getManagedForm().getMessageManager().addMessage(WHITESPACE_CHECK_MSG,WHITESPACE_CHECK_MSG,null,IMessageProvider.ERROR,field);
    checkWhitespaceTextFields.add(field);
  }
 else {
    getManagedForm().getMessageManager().removeMessage(WHITESPACE_CHECK_MSG,field);
    checkWhitespaceTextFields.remove(field);
  }
}","private void validateWhithspace(Text field){
  String WHITESPACE_CHECK_MSG=DefaultMessagesImpl.getString(""String_Node_Str"");
  if (field.getText().length() > 0 && PluginConstant.EMPTY_STRING.equals(field.getText().trim())) {
    getManagedForm().getMessageManager().addMessage(WHITESPACE_CHECK_MSG,WHITESPACE_CHECK_MSG,null,IMessageProvider.ERROR,field);
    checkWhitespaceTextFields.add(field);
  }
 else {
    getManagedForm().getMessageManager().removeMessage(WHITESPACE_CHECK_MSG,field);
    checkWhitespaceTextFields.remove(field);
  }
}",0.9204771371769384
136522,"/** 
 * check if the nameText is a dupilcate name.
 * @return
 */
protected ReturnCode canModifyName(ERepositoryObjectType objectType){
  String elementName=this.nameText.getText();
  Property oldProperty=null;
  oldProperty=getProperty();
  ReturnCode ret=new ReturnCode();
  if (oldProperty == null || objectType == null) {
    return ret;
  }
  if (PluginConstant.EMPTY_STRING.equals(elementName.trim())) {
    this.nameText.setText(oldProperty.getDisplayName());
    ret.setReturnCode(NAMECONNOTBEEMPTY,false);
    return ret;
  }
  boolean exist=PropertyHelper.existDuplicateName(elementName,oldProperty.getDisplayName(),objectType);
  if (exist) {
    Property duplicateObject=PropertyHelper.getDuplicateObject(elementName,objectType);
    IPath path=PropertyHelper.getItemPath(duplicateObject);
    if (duplicateObject.getItem().getState().isDeleted()) {
      path=new Path(path.segment(0)).append(new Path(""String_Node_Str"")).append(path.lastSegment());
    }
    ret.setReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",elementName,path.toOSString()),false);
    return ret;
  }
  return ret;
}","/** 
 * check if the nameText is a dupilcate name.
 * @return
 */
protected ReturnCode canModifyName(ERepositoryObjectType objectType){
  String elementName=this.nameText.getText();
  Property oldProperty=null;
  oldProperty=getProperty();
  ReturnCode ret=new ReturnCode();
  if (oldProperty == null || objectType == null) {
    return ret;
  }
  if (PluginConstant.EMPTY_STRING.equals(elementName.trim())) {
    this.nameText.setText(oldProperty.getDisplayName());
    String NAMECONNOTBEEMPTY=DefaultMessagesImpl.getString(""String_Node_Str"");
    ret.setReturnCode(NAMECONNOTBEEMPTY,false);
    return ret;
  }
  boolean exist=PropertyHelper.existDuplicateName(elementName,oldProperty.getDisplayName(),objectType);
  if (exist) {
    Property duplicateObject=PropertyHelper.getDuplicateObject(elementName,objectType);
    IPath path=PropertyHelper.getItemPath(duplicateObject);
    if (duplicateObject.getItem().getState().isDeleted()) {
      path=new Path(path.segment(0)).append(new Path(""String_Node_Str"")).append(path.lastSegment());
    }
    ret.setReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",elementName,path.toOSString()),false);
    return ret;
  }
  return ret;
}",0.9501084598698482
136523,"protected Section creatMetadataSection(final ScrolledForm currentform,Composite parentCom){
  Section section=createSection(currentform,topComp,getMetadataSectionTitle(),getMetadataSectionDescription());
  Composite parent=toolkit.createComposite(section);
  parent.setLayout(new GridLayout(2,false));
  nameText=createMetadataTextFiled(NAME_LABEL,parent);
  nameText.setTextLimit(EmfHelper.getStringMaxSize(CorePackage.Literals.MODEL_ELEMENT__NAME,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  purposeText=createMetadataTextFiled(PURPOSE_LABEL,parent);
  purposeText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.PURPOSE,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  toolkit.createLabel(parent,DESCRIPTION_LABEL);
  descriptionText=toolkit.createText(parent,null,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  GridDataFactory.fillDefaults().hint(META_FIELD_WIDTH,60).applyTo(descriptionText);
  descriptionText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.DESCRIPTION,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  authorText=createMetadataTextFiled(AUTHOR_LABEL,parent);
  authorText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.AUTHOR,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  if (!ReponsitoryContextBridge.isDefautProject()) {
    authorText.setEnabled(false);
    authorText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
  toolkit.createLabel(parent,STATUS_LABEL);
  statusCombo=new CCombo(parent,SWT.BORDER);
  statusCombo.setEditable(false);
  String statusValue=getProperty() != null ? getProperty().getStatusCode() : DevelopmentStatus.DRAFT.getLiteral();
  List<org.talend.core.model.properties.Status> statusList=MetadataHelper.getTechnicalStatus();
  if (statusList != null && statusList.size() > 0) {
    List<String> statusArray=MetadataHelper.toArray(statusList);
    String[] tempString=new String[statusList.size()];
    statusCombo.setItems(statusArray.toArray(tempString));
    if (statusArray.contains(statusValue)) {
      statusCombo.remove(statusValue);
      statusCombo.add(statusValue,0);
    }
  }
 else {
    for (    DevelopmentStatus status : DevelopmentStatus.values()) {
      statusCombo.add(status.getLiteral());
    }
    statusCombo.add(statusValue,0);
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isRefreshText) {
        modify=true;
        setDirty(true);
        if (PluginConstant.EMPTY_STRING.equals(nameText.getText())) {
          getManagedForm().getMessageManager().addMessage(NAMECONNOTBEEMPTY,NAMECONNOTBEEMPTY,null,IMessageProvider.ERROR,nameText);
        }
 else {
          getManagedForm().getMessageManager().removeMessage(NAMECONNOTBEEMPTY,nameText);
        }
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  addWhitespaceValidate(nameText,purposeText,descriptionText,authorText,purposeText);
  section.setClient(parent);
  return section;
}","protected Section creatMetadataSection(final ScrolledForm currentform,Composite parentCom){
  Section section=createSection(currentform,topComp,getMetadataSectionTitle(),getMetadataSectionDescription());
  Composite parent=toolkit.createComposite(section);
  parent.setLayout(new GridLayout(2,false));
  nameText=createMetadataTextFiled(DefaultMessagesImpl.getString(""String_Node_Str""),parent);
  nameText.setTextLimit(EmfHelper.getStringMaxSize(CorePackage.Literals.MODEL_ELEMENT__NAME,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  purposeText=createMetadataTextFiled(DefaultMessagesImpl.getString(""String_Node_Str""),parent);
  purposeText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.PURPOSE,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  toolkit.createLabel(parent,DefaultMessagesImpl.getString(""String_Node_Str""));
  descriptionText=toolkit.createText(parent,null,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  GridDataFactory.fillDefaults().hint(META_FIELD_WIDTH,60).applyTo(descriptionText);
  descriptionText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.DESCRIPTION,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  authorText=createMetadataTextFiled(DefaultMessagesImpl.getString(""String_Node_Str""),parent);
  authorText.setTextLimit(TaggedValueHelper.getStringMaxSize(TaggedValueHelper.AUTHOR,MAX_TEXT_FIELD_STRING_SIZE_FOR_USUAL_STRING));
  if (!ReponsitoryContextBridge.isDefautProject()) {
    authorText.setEnabled(false);
    authorText.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
  toolkit.createLabel(parent,DefaultMessagesImpl.getString(""String_Node_Str""));
  statusCombo=new CCombo(parent,SWT.BORDER);
  statusCombo.setEditable(false);
  String statusValue=getProperty() != null ? getProperty().getStatusCode() : DevelopmentStatus.DRAFT.getLiteral();
  List<org.talend.core.model.properties.Status> statusList=MetadataHelper.getTechnicalStatus();
  if (statusList != null && statusList.size() > 0) {
    List<String> statusArray=MetadataHelper.toArray(statusList);
    String[] tempString=new String[statusList.size()];
    statusCombo.setItems(statusArray.toArray(tempString));
    if (statusArray.contains(statusValue)) {
      statusCombo.remove(statusValue);
      statusCombo.add(statusValue,0);
    }
  }
 else {
    for (    DevelopmentStatus status : DevelopmentStatus.values()) {
      statusCombo.add(status.getLiteral());
    }
    statusCombo.add(statusValue,0);
  }
  initMetaTextFied();
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isRefreshText) {
        modify=true;
        setDirty(true);
        String NAMECONNOTBEEMPTY=DefaultMessagesImpl.getString(""String_Node_Str"");
        if (PluginConstant.EMPTY_STRING.equals(nameText.getText())) {
          getManagedForm().getMessageManager().addMessage(NAMECONNOTBEEMPTY,NAMECONNOTBEEMPTY,null,IMessageProvider.ERROR,nameText);
        }
 else {
          getManagedForm().getMessageManager().removeMessage(NAMECONNOTBEEMPTY,nameText);
        }
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  authorText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  statusCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  addWhitespaceValidate(nameText,purposeText,descriptionText,authorText,purposeText);
  section.setClient(parent);
  return section;
}",0.8905289052890529
136524,"private void createCatalogTableColumns(Table table){
  TableColumn tableColumn=new TableColumn(table,SWT.LEFT | SWT.FILL);
  tableColumn.setText(CATALOG);
  tableColumn.setWidth(COL1_WIDTH);
  createNbRowsCol(table,CATALOG);
  createCommonStatisticalColumns(table);
}","private void createCatalogTableColumns(Table table){
  TableColumn tableColumn=new TableColumn(table,SWT.LEFT | SWT.FILL);
  tableColumn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  tableColumn.setWidth(COL1_WIDTH);
  createNbRowsCol(table,DefaultMessagesImpl.getString(""String_Node_Str""));
  createCommonStatisticalColumns(table);
}",0.8214285714285714
136525,"private void createCatalogSchemaColumns(Table table){
  TableColumn tableColumn=new TableColumn(table,SWT.LEFT);
  tableColumn.setText(CATALOG);
  tableColumn.setWidth(COL1_WIDTH);
  createNbRowsCol(table,CATALOG);
  tableColumn=new TableColumn(table,SWT.LEFT);
  tableColumn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  tableColumn.setWidth(COL_WIDTH);
  tableColumn=new TableColumn(table,SWT.LEFT);
  tableColumn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  tableColumn.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  tableColumn.setWidth(COL_WIDTH);
  createCommonStatisticalColumns(table);
}","private void createCatalogSchemaColumns(Table table){
  TableColumn tableColumn=new TableColumn(table,SWT.LEFT);
  tableColumn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  tableColumn.setWidth(COL1_WIDTH);
  createNbRowsCol(table,DefaultMessagesImpl.getString(""String_Node_Str""));
  tableColumn=new TableColumn(table,SWT.LEFT);
  tableColumn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  tableColumn.setWidth(COL_WIDTH);
  tableColumn=new TableColumn(table,SWT.LEFT);
  tableColumn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  tableColumn.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  tableColumn.setWidth(COL_WIDTH);
  createCommonStatisticalColumns(table);
}",0.9200581395348836
136526,"private void createSchemaTableColumns(Table table){
  TableColumn tableColumn=new TableColumn(table,SWT.LEFT);
  tableColumn.setText(SCHEMA);
  tableColumn.setWidth(COL1_WIDTH);
  createNbRowsCol(table,SCHEMA);
  createCommonStatisticalColumns(table);
}","private void createSchemaTableColumns(Table table){
  TableColumn tableColumn=new TableColumn(table,SWT.LEFT);
  tableColumn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  tableColumn.setWidth(COL1_WIDTH);
  createNbRowsCol(table,DefaultMessagesImpl.getString(""String_Node_Str""));
  createCommonStatisticalColumns(table);
}",0.823728813559322
136527,"/** 
 * DOC xqliu Comment method ""createTable"".
 * @param parent
 */
private Table createTable(Composite parent){
  int style=SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.HIDE_SELECTION;
  final Table table=new Table(parentComposite,style);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  for (int i=0; i < headers.length; ++i) {
    TableColumn tableColumn=new TableColumn(table,SWT.LEFT,i);
    tableColumn.setText(headers[i]);
    tableColumn.setWidth(widths[i]);
  }
  myTableViewer=new TableViewer(table);
  myTableViewer.setUseHashlookup(true);
  myTableViewer.setColumnProperties(headers);
  CellEditor[] editors=new CellEditor[headers.length];
  for (int i=0; i < editors.length; ++i) {
switch (i) {
case 1:
case 5:
      editors[i]=new TextCellEditor(table);
    break;
case 3:
  editors[i]=new ComboBoxCellEditor(table,OPERATORS,SWT.READ_ONLY);
break;
default :
editors[i]=null;
}
}
myTableViewer.setCellEditors(editors);
myTableViewer.setCellModifier(new JoinElementCellModifier(headers,myTableViewer));
myTableViewer.setContentProvider(new JoinElementContentProvider());
myTableViewer.setLabelProvider(new JoinElementLabelProvider());
myTableViewer.setInput(this.myJoinElement);
table.setMenu(createMenus(table));
ColumnViewerDND.installDND(table);
table.setData(this);
GridData tableGD=new GridData(GridData.FILL_BOTH);
tableGD.heightHint=130;
table.setLayoutData(tableGD);
return table;
}","/** 
 * DOC xqliu Comment method ""createTable"".
 * @param parent
 */
private Table createTable(Composite parent){
  int style=SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.HIDE_SELECTION;
  final Table table=new Table(parentComposite,style);
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  String[] headers={DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
  int[] widths={100,100,100,70,100,100,100};
  for (int i=0; i < headers.length; ++i) {
    TableColumn tableColumn=new TableColumn(table,SWT.LEFT,i);
    tableColumn.setText(headers[i]);
    tableColumn.setWidth(widths[i]);
  }
  myTableViewer=new TableViewer(table);
  myTableViewer.setUseHashlookup(true);
  myTableViewer.setColumnProperties(headers);
  CellEditor[] editors=new CellEditor[headers.length];
  for (int i=0; i < editors.length; ++i) {
switch (i) {
case 1:
case 5:
      editors[i]=new TextCellEditor(table);
    break;
case 3:
  editors[i]=new ComboBoxCellEditor(table,PluginConstant.OPERATORS,SWT.READ_ONLY);
break;
default :
editors[i]=null;
}
}
myTableViewer.setCellEditors(editors);
myTableViewer.setCellModifier(new JoinElementCellModifier(headers,myTableViewer));
myTableViewer.setContentProvider(new JoinElementContentProvider());
myTableViewer.setLabelProvider(new JoinElementLabelProvider());
myTableViewer.setInput(this.myJoinElement);
table.setMenu(createMenus(table));
ColumnViewerDND.installDND(table);
table.setData(this);
GridData tableGD=new GridData(GridData.FILL_BOTH);
tableGD.heightHint=130;
table.setLayoutData(tableGD);
return table;
}",0.8765611385419693
136528,"/** 
 * DOC xqliu Comment method ""addJoinElement"".
 * @return
 */
public JoinElement addJoinElement(){
  JoinElement newJoinElement=RulesFactory.eINSTANCE.createJoinElement();
  newJoinElement.setOperator(DEFAULT_OPERATOR);
  this.myTableViewer.add(newJoinElement);
  this.myJoinElement.add(newJoinElement);
  this.masterPage.setDirty(true);
  return newJoinElement;
}","/** 
 * DOC xqliu Comment method ""addJoinElement"".
 * @return
 */
public JoinElement addJoinElement(){
  JoinElement newJoinElement=RulesFactory.eINSTANCE.createJoinElement();
  newJoinElement.setOperator(PluginConstant.DEFAULT_OPERATOR);
  this.myTableViewer.add(newJoinElement);
  this.myJoinElement.add(newJoinElement);
  this.masterPage.setDirty(true);
  return newJoinElement;
}",0.9800266311584552
136529,"public Object getValue(Object element,String property){
  int columnIndex=columeNames.indexOf(property);
  Object result=null;
  JoinElement join=(JoinElement)element;
  TdColumn colA=(TdColumn)join.getColA();
  TdColumn colB=(TdColumn)join.getColB();
  ColumnSet tabA=colA == null ? null : ColumnHelper.getColumnSetOwner(colA);
  ColumnSet tabB=colB == null ? null : ColumnHelper.getColumnSetOwner(colB);
switch (columnIndex) {
case 0:
    result=tabA == null ? ""String_Node_Str"" : tabA.getName();
  break;
case 1:
result=join.getTableAliasA() == null ? ""String_Node_Str"" : join.getTableAliasA();
break;
case 2:
result=colA == null ? ""String_Node_Str"" : colA.getName();
break;
case 3:
String stringValue=join.getOperator();
int i=OPERATORS.length - 1;
while (!stringValue.equals(OPERATORS[i]) && i > 0) {
--i;
}
result=new Integer(i);
break;
case 4:
result=tabB == null ? ""String_Node_Str"" : tabB.getName();
break;
case 5:
result=join.getTableAliasB() == null ? ""String_Node_Str"" : join.getTableAliasB();
break;
case 6:
result=colB == null ? ""String_Node_Str"" : colB.getName();
break;
default :
result=""String_Node_Str"";
}
return result;
}","public Object getValue(Object element,String property){
  int columnIndex=columeNames.indexOf(property);
  Object result=null;
  JoinElement join=(JoinElement)element;
  TdColumn colA=(TdColumn)join.getColA();
  TdColumn colB=(TdColumn)join.getColB();
  ColumnSet tabA=colA == null ? null : ColumnHelper.getColumnSetOwner(colA);
  ColumnSet tabB=colB == null ? null : ColumnHelper.getColumnSetOwner(colB);
switch (columnIndex) {
case 0:
    result=tabA == null ? ""String_Node_Str"" : tabA.getName();
  break;
case 1:
result=join.getTableAliasA() == null ? ""String_Node_Str"" : join.getTableAliasA();
break;
case 2:
result=colA == null ? ""String_Node_Str"" : colA.getName();
break;
case 3:
String stringValue=join.getOperator();
int i=PluginConstant.OPERATORS.length - 1;
while (!stringValue.equals(PluginConstant.OPERATORS[i]) && i > 0) {
--i;
}
result=new Integer(i);
break;
case 4:
result=tabB == null ? ""String_Node_Str"" : tabB.getName();
break;
case 5:
result=join.getTableAliasB() == null ? ""String_Node_Str"" : join.getTableAliasB();
break;
case 6:
result=colB == null ? ""String_Node_Str"" : colB.getName();
break;
default :
result=""String_Node_Str"";
}
return result;
}",0.987012987012987
136530,"public void modify(Object element,String property,Object value){
  int columnIndex=this.columeNames.indexOf(property);
  TableItem tableItem=(TableItem)element;
  if (tableItem != null) {
    JoinElement join=(JoinElement)tableItem.getData();
    if (join != null) {
      String valueString=String.valueOf(value).trim();
switch (columnIndex) {
case 1:
        join.setTableAliasA(valueString);
      break;
case 3:
    valueString=OPERATORS[((Integer)value).intValue()].trim();
  if (!join.getOperator().equals(valueString)) {
    join.setOperator(valueString);
  }
join.setOperator(valueString);
break;
case 5:
join.setTableAliasB(valueString);
break;
default :
}
tableViewer.update(join,null);
JoinConditionTableViewer.this.masterPage.setDirty(true);
}
}
}","public void modify(Object element,String property,Object value){
  int columnIndex=this.columeNames.indexOf(property);
  TableItem tableItem=(TableItem)element;
  if (tableItem != null) {
    JoinElement join=(JoinElement)tableItem.getData();
    if (join != null) {
      String valueString=String.valueOf(value).trim();
switch (columnIndex) {
case 1:
        join.setTableAliasA(valueString);
      break;
case 3:
    valueString=PluginConstant.OPERATORS[((Integer)value).intValue()].trim();
  if (!join.getOperator().equals(valueString)) {
    join.setOperator(valueString);
  }
join.setOperator(valueString);
break;
case 5:
join.setTableAliasB(valueString);
break;
default :
}
tableViewer.update(join,null);
JoinConditionTableViewer.this.masterPage.setDirty(true);
}
}
}",0.9902152641878668
136531,"/** 
 * DOC xqliu Comment method ""checkValus"".
 * @return
 */
private boolean checkValus(){
  boolean ret=true;
  String msg=""String_Node_Str"";
  String cl=getCriticalityLevelText().getText();
  if (cl == null || ""String_Node_Str"".equals(cl)) {
    ret=false;
    msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
  }
 else {
    try {
      int i=Integer.valueOf(cl).intValue();
      if (!(i >= CRITICALITY_LEVEL_MIN && i <= CRITICALITY_LEVEL_MAX)) {
        ret=false;
        msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
      }
    }
 catch (    NumberFormatException e) {
      ret=false;
      msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
    }
  }
  String wh=getWhereText().getText();
  if (wh == null || ""String_Node_Str"".equals(wh)) {
    ret=false;
    msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
  }
 else {
    if (wh.startsWith(WHERE)) {
      ret=false;
      msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
    }
  }
  for (  JoinElement join : this.tempJoinElements) {
    String tableAliasA=join.getTableAliasA();
    String tableAliasB=join.getTableAliasB();
    if (tableAliasA == null || ""String_Node_Str"".equals(tableAliasA) || tableAliasB == null || ""String_Node_Str"".equals(tableAliasB)) {
      ret=false;
      msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
      break;
    }
 else     if (tableAliasA.equals(tableAliasB)) {
      ret=false;
      String tableA=ColumnHelper.getColumnSetOwner(join.getColA()).getName();
      String tableB=ColumnHelper.getColumnSetOwner(join.getColB()).getName();
      msg+=DefaultMessagesImpl.getString(""String_Node_Str"",tableA,tableB) + ""String_Node_Str"";
    }
 else {
      if (!checkAlias(tableAliasA)) {
        ret=false;
        msg+=DefaultMessagesImpl.getString(""String_Node_Str"",tableAliasA) + ""String_Node_Str"";
      }
      if (!checkAlias(tableAliasB)) {
        ret=false;
        msg+=DefaultMessagesImpl.getString(""String_Node_Str"",tableAliasB) + ""String_Node_Str"";
      }
    }
  }
  if (!ret) {
    MessageUI.openWarning(msg);
  }
  return ret;
}","/** 
 * DOC xqliu Comment method ""checkValus"".
 * @return
 */
private boolean checkValus(){
  boolean ret=true;
  String msg=""String_Node_Str"";
  String cl=getCriticalityLevelText().getText();
  if (cl == null || ""String_Node_Str"".equals(cl)) {
    ret=false;
    msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
  }
 else {
    try {
      int i=Integer.valueOf(cl).intValue();
      if (!(i >= PluginConstant.CRITICALITY_LEVEL_MIN && i <= PluginConstant.CRITICALITY_LEVEL_MAX)) {
        ret=false;
        msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
      }
    }
 catch (    NumberFormatException e) {
      ret=false;
      msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
    }
  }
  String wh=getWhereText().getText();
  if (wh == null || ""String_Node_Str"".equals(wh)) {
    ret=false;
    msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
  }
 else {
    if (wh.startsWith(PluginConstant.WHERE)) {
      ret=false;
      msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
    }
  }
  for (  JoinElement join : this.tempJoinElements) {
    String tableAliasA=join.getTableAliasA();
    String tableAliasB=join.getTableAliasB();
    if (tableAliasA == null || ""String_Node_Str"".equals(tableAliasA) || tableAliasB == null || ""String_Node_Str"".equals(tableAliasB)) {
      ret=false;
      msg+=DefaultMessagesImpl.getString(""String_Node_Str"") + ""String_Node_Str"";
      break;
    }
 else     if (tableAliasA.equals(tableAliasB)) {
      ret=false;
      String tableA=ColumnHelper.getColumnSetOwner(join.getColA()).getName();
      String tableB=ColumnHelper.getColumnSetOwner(join.getColB()).getName();
      msg+=DefaultMessagesImpl.getString(""String_Node_Str"",tableA,tableB) + ""String_Node_Str"";
    }
 else {
      if (!checkAlias(tableAliasA)) {
        ret=false;
        msg+=DefaultMessagesImpl.getString(""String_Node_Str"",tableAliasA) + ""String_Node_Str"";
      }
      if (!checkAlias(tableAliasB)) {
        ret=false;
        msg+=DefaultMessagesImpl.getString(""String_Node_Str"",tableAliasB) + ""String_Node_Str"";
      }
    }
  }
  if (!ret) {
    MessageUI.openWarning(msg);
  }
  return ret;
}",0.9898808185293456
136532,"/** 
 * DOC xqliu Comment method ""createAddButton"".
 * @param parent top composite
 */
private void createAddButton(Composite parent){
  final Button addButton=new Button(parent,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      JoinElement newJoinElement=RulesFactory.eINSTANCE.createJoinElement();
      newJoinElement.setOperator(DEFAULT_OPERATOR);
      creatNewJoinElementLine(newJoinElement);
      tempJoinElements.add(newJoinElement);
      joinConditionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
}","/** 
 * DOC xqliu Comment method ""createAddButton"".
 * @param parent top composite
 */
private void createAddButton(Composite parent){
  final Button addButton=new Button(parent,SWT.NONE);
  addButton.setImage(ImageLib.getImage(ImageLib.ADD_ACTION));
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.widthHint=65;
  addButton.setLayoutData(labelGd);
  addButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      JoinElement newJoinElement=RulesFactory.eINSTANCE.createJoinElement();
      newJoinElement.setOperator(PluginConstant.DEFAULT_OPERATOR);
      creatNewJoinElementLine(newJoinElement);
      tempJoinElements.add(newJoinElement);
      joinConditionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
}",0.9916341327384272
136533,"public JoinElement getJoinElement(){
  if (joinElement == null) {
    joinElement=RulesFactory.eINSTANCE.createJoinElement();
    joinElement.setOperator(DEFAULT_OPERATOR);
  }
  return joinElement;
}","public JoinElement getJoinElement(){
  if (joinElement == null) {
    joinElement=RulesFactory.eINSTANCE.createJoinElement();
    joinElement.setOperator(PluginConstant.DEFAULT_OPERATOR);
  }
  return joinElement;
}",0.963855421686747
136534,"/** 
 * DOC xqliu Comment method ""creatNewJoinElementLine"".
 * @param joinElement
 */
private void creatNewJoinElementLine(JoinElement joinElement){
  final Composite expressComp=new Composite(joinElementComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(6,false));
  final JoinElement fje=joinElement;
  boolean flag=false;
  if (fje.getColA() != null && fje.getColB() != null && fje.getOperator() != null) {
    flag=true;
  }
  final Label labelL=new Label(expressComp,SWT.NONE);
  labelL.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(labelL);
  final Text textL=new Text(expressComp,SWT.BORDER);
  textL.setEditable(false);
  textL.setText(flag ? fje.getColA().getName() : PluginConstant.EMPTY_STRING);
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(textL);
  ((GridData)textL.getLayoutData()).widthHint=100;
  DropTarget targetL=new DropTarget(textL,DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT);
  targetL.setTransfer(new Transfer[]{transfer});
  targetL.addDropListener(new ColumnDropTargetListener(fje,ColumnDropTargetListener.LEFT));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(OPERATORS);
  combo.setText(flag ? fje.getOperator() : DEFAULT_OPERATOR);
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      fje.setOperator(combo.getText());
      setDirty(true);
    }
  }
);
  final Label labelR=new Label(expressComp,SWT.NONE);
  labelR.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(labelR);
  final Text textR=new Text(expressComp,SWT.BORDER);
  textR.setEditable(false);
  textR.setText(flag ? fje.getColB().getName() : PluginConstant.EMPTY_STRING);
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(textR);
  ((GridData)textR.getLayoutData()).widthHint=100;
  DropTarget targetR=new DropTarget(textR,DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT);
  targetR.setTransfer(new Transfer[]{transfer});
  targetR.addDropListener(new ColumnDropTargetListener(fje,ColumnDropTargetListener.RIGHT));
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tempJoinElements.remove(fje);
      expressComp.dispose();
      joinConditionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}","/** 
 * DOC xqliu Comment method ""creatNewJoinElementLine"".
 * @param joinElement
 */
private void creatNewJoinElementLine(JoinElement joinElement){
  final Composite expressComp=new Composite(joinElementComp,SWT.NONE);
  expressComp.setLayout(new GridLayout(6,false));
  final JoinElement fje=joinElement;
  boolean flag=false;
  if (fje.getColA() != null && fje.getColB() != null && fje.getOperator() != null) {
    flag=true;
  }
  final Label labelL=new Label(expressComp,SWT.NONE);
  labelL.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(labelL);
  final Text textL=new Text(expressComp,SWT.BORDER);
  textL.setEditable(false);
  textL.setText(flag ? fje.getColA().getName() : PluginConstant.EMPTY_STRING);
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(textL);
  ((GridData)textL.getLayoutData()).widthHint=100;
  DropTarget targetL=new DropTarget(textL,DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT);
  targetL.setTransfer(new Transfer[]{transfer});
  targetL.addDropListener(new ColumnDropTargetListener(fje,ColumnDropTargetListener.LEFT));
  final CCombo combo=new CCombo(expressComp,SWT.BORDER);
  combo.setEditable(false);
  combo.setItems(PluginConstant.OPERATORS);
  combo.setText(flag ? fje.getOperator() : PluginConstant.DEFAULT_OPERATOR);
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(combo);
  combo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      fje.setOperator(combo.getText());
      setDirty(true);
    }
  }
);
  final Label labelR=new Label(expressComp,SWT.NONE);
  labelR.setImage(ImageLib.getImage(ImageLib.TD_COLUMN));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(labelR);
  final Text textR=new Text(expressComp,SWT.BORDER);
  textR.setEditable(false);
  textR.setText(flag ? fje.getColB().getName() : PluginConstant.EMPTY_STRING);
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).applyTo(textR);
  ((GridData)textR.getLayoutData()).widthHint=100;
  DropTarget targetR=new DropTarget(textR,DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_DEFAULT);
  targetR.setTransfer(new Transfer[]{transfer});
  targetR.addDropListener(new ColumnDropTargetListener(fje,ColumnDropTargetListener.RIGHT));
  Button delButton=new Button(expressComp,SWT.NONE);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  delButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).applyTo(delButton);
  delButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      tempJoinElements.remove(fje);
      expressComp.dispose();
      joinConditionSection.setExpanded(true);
      setDirty(true);
    }
  }
);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,false).applyTo(expressComp);
}",0.9949290060851927
136535,"public void mouseDown(MouseEvent e){
  List<Indicator> indicatorsList=masterPage.getCurrentModelElement().getResults().getIndicators();
  SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
  wizard.setFilterType(filterType);
  wizard.setOldTableInputList(ColumnSetAnalysisResultPage.this.tableFilterResult);
  WizardDialog dialog=new WizardDialog(null,wizard);
  dialog.setPageSize(300,400);
  wizard.setContainer(dialog);
  wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  if (WizardDialog.OK == dialog.open()) {
    ColumnSetAnalysisResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
    filterType=wizard.getPatternSelectPage().getFilterType();
    columnsElementViewer.refresh();
  }
}","public void mouseDown(MouseEvent e){
  List<Indicator> indicatorsList=masterPage.getCurrentModelElement().getResults().getIndicators();
  SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
  wizard.setFilterType(filterType);
  wizard.setOldTableInputList(ColumnSetAnalysisResultPage.this.tableFilterResult.getTableFilterResult());
  WizardDialog dialog=new WizardDialog(null,wizard);
  dialog.setPageSize(300,400);
  wizard.setContainer(dialog);
  wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  if (WizardDialog.OK == dialog.open()) {
    ColumnSetAnalysisResultPage.this.tableFilterResult=new TableFilterResult(wizard.getPatternSelectPage().getTableInputList());
    filterType=wizard.getPatternSelectPage().getFilterType();
    columnsElementViewer.refresh();
    redrawController();
  }
}",0.9153175591531756
136536,"public List<Map<Integer,RegexpMatchingIndicator>> getTableFilterResult(){
  return tableFilterResult;
}","public List<Map<Integer,RegexpMatchingIndicator>> getTableFilterResult(){
  return tableFilterResult.getTableFilterResult();
}",0.8995633187772926
136537,"public void setTableFilterResult(List<Map<Integer,RegexpMatchingIndicator>> tableFilterResult){
  this.tableFilterResult=tableFilterResult;
}","public void setTableFilterResult(List<Map<Integer,RegexpMatchingIndicator>> tableFilterResult){
  this.tableFilterResult=new TableFilterResult(tableFilterResult);
}",0.9245901639344264
136538,"private Section createTableSectionPart(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator());
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.getCurrentModelElement().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetAnalysisResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetAnalysisResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    List<String> tableColumnNames=ssIndicator.getColumnHeaders();
    for (    String tableColumnName : tableColumnNames) {
      final TableColumn columnHeader=new TableColumn(table,SWT.NONE);
      columnHeader.setText(tableColumnName);
    }
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    List<Object[]> tableRows=ssIndicator.getListRows();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.setLabelProvider(provider);
    columnsElementViewer.setInput(tableRows);
    columnsElementViewer.addFilter(new PatternDataFilter());
    for (int i=0; i < tableColumnNames.size(); i++) {
      table.getColumn(i).pack();
    }
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    setupTableGridDataLimitedSize(table,tableRows.size());
    addColumnSorters(columnsElementViewer,table.getColumns(),this.buildSorter(tableRows));
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}","private Section createTableSectionPart(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator());
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.getCurrentModelElement().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetAnalysisResultPage.this.tableFilterResult.getTableFilterResult());
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetAnalysisResultPage.this.tableFilterResult=new TableFilterResult(wizard.getPatternSelectPage().getTableInputList());
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    List<String> tableColumnNames=ssIndicator.getColumnHeaders();
    for (    String tableColumnName : tableColumnNames) {
      final TableColumn columnHeader=new TableColumn(table,SWT.NONE);
      columnHeader.setText(tableColumnName);
    }
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    List<Object[]> tableRows=ssIndicator.getListRows();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.setLabelProvider(provider);
    columnsElementViewer.setInput(tableRows);
    for (int i=0; i < tableColumnNames.size(); i++) {
      table.getColumn(i).pack();
    }
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    setupTableGridDataLimitedSize(table,tableRows.size());
    addColumnSorters(columnsElementViewer,table.getColumns(),this.buildSorter(tableRows));
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}",0.9833099360474185
136539,"private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    AbstractDB<Object> mapDB=null;
    try {
      mapDB=MapDBUtils.getMapDB(StandardDBName.dataSection.name(),ssIndicator);
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator() && mapDB != null);
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.getCurrentModelElement().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetAnalysisResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetAnalysisResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
    if (mapDB != null) {
      final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object>(mapDB);
      controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
      ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
      resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}","private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    try {
      mapDB=MapDBUtils.getMapDB(StandardDBName.dataSection.name(),ssIndicator);
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator() && mapDB != null);
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.getCurrentModelElement().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetAnalysisResultPage.this.tableFilterResult.getTableFilterResult());
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetAnalysisResultPage.this.tableFilterResult=new TableFilterResult(wizard.getPatternSelectPage().getTableInputList());
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
          redrawController();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
    if (mapDB != null) {
      redrawPagationComposite(sectionTableComp,null,true);
    }
    createColumns(controller,ssIndicator);
    controller.reset();
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}",0.8043067074057908
136540,"/** 
 * zshen Comment method ""getMatchColor"".
 * @param element
 * @param columnIndex
 * @return get the color of the element.
 */
private Color getMatchColor(Object element,int columnIndex){
  if (tableFilterResult != null) {
    for (    Map<Integer,RegexpMatchingIndicator> tableItem : this.tableFilterResult) {
      RegexpMatchingIndicator regMatIndicator=tableItem.get(columnIndex);
      if (regMatIndicator == null) {
        continue;
      }
      String regex=regMatIndicator.getRegex();
      Pattern p=java.util.regex.Pattern.compile(regex);
      if (element instanceof Object[]) {
        Object theElement=((Object[])element)[columnIndex];
        if (theElement == null) {
          theElement=""String_Node_Str"";
        }
        Matcher m=p.matcher(String.valueOf(theElement));
        if (!m.find()) {
          return new Color(null,255,0,0);
        }
      }
    }
  }
  return new Color(null,0,0,0);
}","/** 
 * zshen Comment method ""getMatchColor"".
 * @param element
 * @param columnIndex
 * @return get the color of the element.
 */
private Color getMatchColor(Object element,int columnIndex){
  if (tableFilterResult.getTableFilterResult() != null) {
    for (    Map<Integer,RegexpMatchingIndicator> tableItem : this.tableFilterResult.getTableFilterResult()) {
      RegexpMatchingIndicator regMatIndicator=tableItem.get(columnIndex);
      if (regMatIndicator == null) {
        continue;
      }
      String regex=regMatIndicator.getRegex();
      Pattern p=java.util.regex.Pattern.compile(regex);
      if (element instanceof Object[]) {
        Object theElement=((Object[])element)[columnIndex];
        if (theElement == null) {
          theElement=""String_Node_Str"";
        }
        Matcher m=p.matcher(String.valueOf(theElement));
        if (!m.find()) {
          return new Color(null,255,0,0);
        }
      }
    }
  }
  return new Color(null,0,0,0);
}",0.9757383966244726
136541,"/** 
 * DOC xqliu Comment method ""saveNumberOfConnectionsPerAnalysis"".
 * @throws DataprofilerCoreException
 */
protected void saveNumberOfConnectionsPerAnalysis() throws DataprofilerCoreException {
  String numberStr=numberOfConnectionsPerAnalysisText.getText().trim();
  if (StringUtils.isBlank(numberStr) || Integer.parseInt(numberStr) == 0) {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
  }
  TaggedValueHelper.setTaggedValue(getCurrentModelElement(),TdqAnalysisConnectionPool.NUMBER_OF_CONNECTIONS_PER_ANALYSIS,this.numberOfConnectionsPerAnalysisText.getText());
}","/** 
 * DOC xqliu Comment method ""saveNumberOfConnectionsPerAnalysis"".
 * @throws DataprofilerCoreException
 */
protected void saveNumberOfConnectionsPerAnalysis() throws DataprofilerCoreException {
  String numberStr=numberOfConnectionsPerAnalysisText.getText().trim();
  if (StringUtils.isBlank(numberStr) || Integer.parseInt(ContextHelper.getAnalysisContextValue(getCurrentModelElement(),numberStr)) == 0) {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
  }
  TaggedValueHelper.setTaggedValue(getCurrentModelElement(),TdqAnalysisConnectionPool.NUMBER_OF_CONNECTIONS_PER_ANALYSIS,this.numberOfConnectionsPerAnalysisText.getText());
}",0.9540889526542324
136542,"/** 
 * change Column Color By Current selected Keys.
 * @param currentMatchKeyColumn
 */
protected void changeColumnColorByCurrentKeys(List<String> currentKeyColumn,boolean isMatchKey){
  if (currentKeyColumn == null || currentKeyColumn.size() < 1) {
    setAllColumnColorToBlack();
    return;
  }
  String keyName=isMatchKey ? DataSampleTable.MATCH_EKY : DataSampleTable.BLOCK_EKY;
  for (  ModelElement column : getSelectedColumnsFromHandler()) {
    if (currentKeyColumn.contains(column.getName())) {
      sampleTable.changeColumnHeaderLabelColor(column.getName(),isMatchKey ? DataSampleTable.COLOR_RED : DataSampleTable.COLOR_GREEN,keyName);
    }
 else {
      sampleTable.changeColumnHeaderLabelColor(column.getName(),DataSampleTable.COLOR_BLACK,keyName);
    }
  }
  sampleTable.setNatTableFont(sampleTable.getNatTable());
  sampleTable.refresh();
}","/** 
 * change Column Color By Current selected Keys.
 * @param currentMatchKeyColumn
 */
protected void changeColumnColorByCurrentKeys(List<String> currentKeyColumn,boolean isMatchKey){
  if (currentKeyColumn == null || currentKeyColumn.size() < 1) {
    setAllColumnColorToBlack();
    return;
  }
  String keyName=isMatchKey ? DataSampleTable.MATCH_EKY : DataSampleTable.BLOCK_EKY;
  for (  ModelElement column : getSelectedColumnsFromHandler()) {
    if (currentKeyColumn.contains(column.getName())) {
      sampleTable.changeColumnHeaderLabelColor(column.getName(),isMatchKey ? GUIHelper.COLOR_RED : GUIHelper.COLOR_GREEN,keyName);
    }
 else {
      sampleTable.changeColumnHeaderLabelColor(column.getName(),GUIHelper.COLOR_BLACK,keyName);
    }
  }
  sampleTable.setNatTableFont(sampleTable.getNatTable());
  sampleTable.refresh();
}",0.9576470588235294
136543,"/** 
 * handle the add/delete column for the BlockKey Selection.
 * @param columnName
 */
private void handleBlockKeySelection(String columnName){
  Boolean isAdded=Boolean.FALSE;
  try {
    isAdded=this.blockingKeySection.isKeyDefinitionAdded(columnName);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
  if (isAdded) {
    blockingKeySection.removeBlockingKey(columnName);
    sampleTable.changeColumnHeaderLabelColor(columnName,DataSampleTable.COLOR_BLACK,DataSampleTable.BLOCK_EKY);
  }
 else {
    blockingKeySection.createBlockingKey(columnName);
    sampleTable.changeColumnHeaderLabelColor(columnName,DataSampleTable.COLOR_GREEN,DataSampleTable.BLOCK_EKY);
  }
}","/** 
 * handle the add/delete column for the BlockKey Selection.
 * @param columnName
 */
private void handleBlockKeySelection(String columnName){
  Boolean isAdded=Boolean.FALSE;
  try {
    isAdded=this.blockingKeySection.isKeyDefinitionAdded(columnName);
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
  if (isAdded) {
    blockingKeySection.removeBlockingKey(columnName);
    sampleTable.changeColumnHeaderLabelColor(columnName,GUIHelper.COLOR_BLACK,DataSampleTable.BLOCK_EKY);
  }
 else {
    blockingKeySection.createBlockingKey(columnName);
    sampleTable.changeColumnHeaderLabelColor(columnName,GUIHelper.COLOR_GREEN,DataSampleTable.BLOCK_EKY);
  }
}",0.9648093841642228
136544,"private void setAllColumnColorToBlack(){
  for (  ModelElement column : getSelectedColumnsFromHandler()) {
    sampleTable.changeColumnHeaderLabelColor(column.getName(),DataSampleTable.COLOR_BLACK,PluginConstant.EMPTY_STRING);
  }
  sampleTable.setNatTableFont(sampleTable.getNatTable());
  sampleTable.refresh();
}","private void setAllColumnColorToBlack(){
  for (  ModelElement column : getSelectedColumnsFromHandler()) {
    sampleTable.changeColumnHeaderLabelColor(column.getName(),GUIHelper.COLOR_BLACK,PluginConstant.EMPTY_STRING);
  }
  sampleTable.setNatTableFont(sampleTable.getNatTable());
  sampleTable.refresh();
}",0.9615384615384616
136545,"/** 
 * handle the add/remove column for the Match Key Selection.
 * @param columnName
 */
private void handleMatchKeySelection(String columnName){
  try {
    Boolean isAdded=isKeyAlreadyAdded(columnName);
    if (isAdded) {
      removeCurrentKeyFromCurrentMatchRule(columnName);
      sampleTable.changeColumnHeaderLabelColor(columnName,DataSampleTable.COLOR_BLACK,DataSampleTable.MATCH_EKY);
    }
 else {
      addCurrentKeyFromCurrentMatchRule(columnName);
      sampleTable.changeColumnHeaderLabelColor(columnName,DataSampleTable.COLOR_RED,DataSampleTable.MATCH_EKY);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
}","/** 
 * handle the add/remove column for the Match Key Selection.
 * @param columnName
 */
private void handleMatchKeySelection(String columnName){
  try {
    Boolean isAdded=isKeyAlreadyAdded(columnName);
    if (isAdded) {
      removeCurrentKeyFromCurrentMatchRule(columnName);
      sampleTable.changeColumnHeaderLabelColor(columnName,GUIHelper.COLOR_BLACK,DataSampleTable.MATCH_EKY);
    }
 else {
      addCurrentKeyFromCurrentMatchRule(columnName);
      sampleTable.changeColumnHeaderLabelColor(columnName,GUIHelper.COLOR_RED,DataSampleTable.MATCH_EKY);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
}",0.9685863874345548
136546,"/** 
 * Create page links ""Previous 1 2 ...10 Next"" with   {@link GC}.
 * @param parent
 */
private void createRightContainer(Composite parent){
  Composite right=createComposite(parent,SWT.BORDER);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  if (!keepLeft) {
    gridData=new GridData(SWT.END,SWT.CENTER,true,false,2,1);
    gridData.widthHint=760;
  }
  right.setLayoutData(gridData);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  right.setLayout(layout);
  navigationPage=new ColumnSetNavigationPageGraphics(right,SWT.NONE,configurator){
    @Override protected void handleSelection(    NavigationPageGraphicsItem pageItem){
      Integer newCurrentPage=null;
      if (!pageItem.isEnabled()) {
        return;
      }
      if (pageItem.isNext()) {
        newCurrentPage=getController().getCurrentPage() + 1;
      }
 else       if (pageItem.isPrevious()) {
        newCurrentPage=getController().getCurrentPage() - 1;
      }
 else {
        newCurrentPage=pageItem.getIndex();
      }
      if (newCurrentPage != null) {
        getController().setCurrentPage(newCurrentPage);
      }
    }
  }
;
  navigationPage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","/** 
 * Create page links ""Previous 1 2 ...10 Next"" with   {@link GC}.
 * @param parent
 */
private void createRightContainer(Composite parent){
  Composite right=createComposite(parent,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  if (!keepLeft) {
    gridData=new GridData(SWT.END,SWT.CENTER,true,false,2,1);
    gridData.widthHint=760;
  }
  right.setLayoutData(gridData);
  GridLayout layout=new GridLayout();
  layout.marginHeight=0;
  right.setLayout(layout);
  navigationPage=new ColumnSetNavigationPageGraphics(right,SWT.NONE,configurator){
    @Override protected void handleSelection(    NavigationPageGraphicsItem pageItem){
      Integer newCurrentPage=null;
      if (!pageItem.isEnabled()) {
        return;
      }
      if (pageItem.isNext()) {
        newCurrentPage=getController().getCurrentPage() + 1;
      }
 else       if (pageItem.isPrevious()) {
        newCurrentPage=getController().getCurrentPage() - 1;
      }
 else {
        newCurrentPage=pageItem.getIndex();
      }
      if (newCurrentPage != null) {
        getController().setCurrentPage(newCurrentPage);
      }
    }
  }
;
  navigationPage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9975267930750206
136547,"/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importObject
 * @param selectionFolder
 * @param skip
 * @param rename
 * @param importItemName
 * @return
 */
public static List<ReturnCode> importIndicatorToStucture(ImportObject importObject,IFolder selectionFolder,boolean skip,boolean rename,String importItemName){
  List<ReturnCode> information=new ArrayList<ReturnCode>();
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  File importFile=importObject.getObjFile();
  String fileExtName=getFileExtName(importFile);
  if (FileUtils.isCSV(fileExtName)) {
    String name=PluginConstant.EMPTY_STRING;
    try {
      CSVReader reader=FileUtils.createCSVReader(importFile,FileUtils.TEXT_QUAL,FileUtils.TEXT_QUAL);
      reader.setSkipEmptyRecords(true);
      reader.readHeaders();
      java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
      while (reader.readNext()) {
        name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
          }
        }
        UDIParameters udiParameters=new ImportFactory().new UDIParameters();
        udiParameters.name=name;
        udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
        udiParameters.javaClassName=reader.get(PatternToExcelEnum.JavaClassName.getLiteral());
        udiParameters.javaJarPath=reader.get(PatternToExcelEnum.JavaJarPath.getLiteral());
        String[] headers=reader.getHeaders();
        String[] columnsValue=reader.getValues();
        HashMap<String,String> record=new HashMap<String,String>();
        for (int i=0; i < headers.length; i++) {
          if (columnsValue[i] != null && columnsValue[i].length() > 0) {
            record.put(headers[i],columnsValue[i]);
          }
        }
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=record.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            udiParameters.regex.put(languagetype.getLiteral(),trimQuote(cellStr));
          }
        }
        udiParameters.setParaMap(buildIndDefPara(record));
        TypedReturnCode<Object> create=createAndStoreUDI(udiParameters,selectionFolder);
        if (create.isOk()) {
          names.add(name);
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",((TDQItem)create.getObject()).getProperty().getDisplayName(),selectionFolder.getProjectRelativePath().toString()),true));
        }
 else {
          throw new TalendInternalPersistenceException(create.getMessage());
        }
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
    }
  }
  if (FactoriesUtil.DEFINITION.equalsIgnoreCase(fileExtName)) {
    String propFilePath=importFile.getPath().replaceFirst(PluginConstant.DOT_STRING + fileExtName,PluginConstant.DOT_STRING + FactoriesUtil.PROPERTIES_EXTENSION);
    File propFile=new File(propFilePath);
    if (!propFile.exists()) {
      return information;
    }
    String name=importFile.getName();
    try {
      if (names.contains(name)) {
        if (skip) {
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
          return information;
        }
        if (rename) {
          name=name + ""String_Node_Str"" + new Date()+ Math.random()+ ""String_Node_Str"";
        }
      }
      IFile elementFile=selectionFolder.getFile(name);
      if (!elementFile.exists()) {
        elementFile.create(new FileInputStream(importFile),false,null);
        ModelElement modelElement=ModelElementFileFactory.getModelElement(elementFile);
        if (modelElement != null) {
          ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().create(modelElement,selectionFolder);
          DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
          names.add(name);
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),true));
        }
      }
    }
 catch (    Exception e) {
      log.error(e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
    }
  }
  importObject.copyJarFiles();
  checkImportEvent(importItemName,information);
  return information;
}","/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importObject
 * @param selectionFolder
 * @param skip
 * @param rename
 * @param importItemName
 * @return
 */
public static List<ReturnCode> importIndicatorToStucture(ImportObject importObject,IFolder selectionFolder,boolean skip,boolean rename,String importItemName){
  List<ReturnCode> information=new ArrayList<ReturnCode>();
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  File importFile=importObject.getObjFile();
  String fileExtName=getFileExtName(importFile);
  if (FileUtils.isCSV(fileExtName)) {
    String name=PluginConstant.EMPTY_STRING;
    try {
      CSVReader reader=FileUtils.createCSVReader(importFile,FileUtils.TEXT_QUAL,FileUtils.TEXT_QUAL);
      reader.setSkipEmptyRecords(true);
      reader.readHeaders();
      java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
      while (reader.readNext()) {
        name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
          }
        }
        UDIParameters udiParameters=new ImportFactory().new UDIParameters();
        udiParameters.name=name;
        udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
        udiParameters.javaClassName=reader.get(PatternToExcelEnum.JavaClassName.getLiteral());
        udiParameters.javaJarPath=reader.get(PatternToExcelEnum.JavaJarPath.getLiteral());
        String[] headers=reader.getHeaders();
        String[] columnsValue=reader.getValues();
        HashMap<String,String> record=new HashMap<String,String>();
        for (int i=0; i < headers.length; i++) {
          if (i >= columnsValue.length) {
            record.put(headers[i],""String_Node_Str"");
          }
 else {
            if (columnsValue[i] != null && columnsValue[i].length() > 0) {
              record.put(headers[i],columnsValue[i]);
            }
          }
        }
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=record.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            udiParameters.regex.put(languagetype.getLiteral(),trimQuote(cellStr));
          }
        }
        udiParameters.setParaMap(buildIndDefPara(record));
        TypedReturnCode<Object> create=createAndStoreUDI(udiParameters,selectionFolder);
        if (create.isOk()) {
          names.add(name);
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",((TDQItem)create.getObject()).getProperty().getDisplayName(),selectionFolder.getProjectRelativePath().toString()),true));
        }
 else {
          throw new TalendInternalPersistenceException(create.getMessage());
        }
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
    }
  }
  if (FactoriesUtil.DEFINITION.equalsIgnoreCase(fileExtName)) {
    String propFilePath=importFile.getPath().replaceFirst(PluginConstant.DOT_STRING + fileExtName,PluginConstant.DOT_STRING + FactoriesUtil.PROPERTIES_EXTENSION);
    File propFile=new File(propFilePath);
    if (!propFile.exists()) {
      return information;
    }
    String name=importFile.getName();
    try {
      if (names.contains(name)) {
        if (skip) {
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
          return information;
        }
        if (rename) {
          name=name + ""String_Node_Str"" + new Date()+ Math.random()+ ""String_Node_Str"";
        }
      }
      IFile elementFile=selectionFolder.getFile(name);
      if (!elementFile.exists()) {
        elementFile.create(new FileInputStream(importFile),false,null);
        ModelElement modelElement=ModelElementFileFactory.getModelElement(elementFile);
        if (modelElement != null) {
          ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().create(modelElement,selectionFolder);
          DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
          names.add(name);
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),true));
        }
      }
    }
 catch (    Exception e) {
      log.error(e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
    }
  }
  importObject.copyJarFiles();
  checkImportEvent(importItemName,information);
  return information;
}",0.9871005005775896
136548,"@Override public boolean setInstantiatedExpression(Expression expression){
  int index=0;
  for (  RowCountIndicator rci : this.rowCountIndiSet) {
    rci.setInstantiatedExpression(expression);
    index++;
  }
  if (index == 0 || index != rowCountIndiSet.size()) {
    return false;
  }
  return super.setInstantiatedExpression(expression);
}","@Override public boolean setInstantiatedExpression(Expression expression){
  int index=0;
  for (  RowCountIndicator rci : this.rowCountIndiSet) {
    TdExpression copySqlExpression=BooleanExpressionHelper.createTdExpression(expression.getLanguage(),expression.getBody());
    rci.setInstantiatedExpression(copySqlExpression);
    index++;
  }
  if (index == 0 || index != rowCountIndiSet.size()) {
    return false;
  }
  return super.setInstantiatedExpression(expression);
}",0.7619047619047619
136549,"@Override public List<IRepositoryNode> getChildren(){
  EList<Package> dataPackage=getDfConnection().getDataPackage();
  if (dataPackage != null && dataPackage.size() > 0) {
    Package pack=dataPackage.get(0);
    if (pack instanceof RecordFile) {
      return filterResultsIfAny(createRepositoryNodeSchema());
    }
  }
  return new ArrayList<IRepositoryNode>();
}","@Override public List<IRepositoryNode> getChildren(){
  DelimitedFileConnection dfConnection=getDfConnection();
  if (dfConnection != null) {
    EList<Package> dataPackage=dfConnection.getDataPackage();
    if (dataPackage != null && dataPackage.size() > 0) {
      Package pack=dataPackage.get(0);
      if (pack instanceof RecordFile) {
        return filterResultsIfAny(createRepositoryNodeSchema());
      }
    }
  }
  return new ArrayList<IRepositoryNode>();
}",0.8355342136854742
136550,"public DelimitedFileConnection getDfConnection(){
  DelimitedFileConnection dfConnection=null;
  Property property=getObject().getProperty();
  dfConnection=(DelimitedFileConnection)((DelimitedFileConnectionItem)property.getItem()).getConnection();
  return dfConnection;
}","public DelimitedFileConnection getDfConnection(){
  DelimitedFileConnection dfConnection=null;
  Property property=getObject().getProperty();
  Item item=property.getItem();
  if (item instanceof DelimitedFileConnectionItem) {
    dfConnection=(DelimitedFileConnection)((DelimitedFileConnectionItem)item).getConnection();
  }
  return dfConnection;
}",0.6613162118780096
136551,"/** 
 * check whether the connection is available.
 * @param datamanager
 * @return boolean
 */
public static boolean checkConnection(DataManager datamanager){
  Connection analysisDataProvider=ConnectionUtils.getConnectionFromDatamanager(datamanager);
  ReturnCode connectionAvailable=isConnectionAvailable(analysisDataProvider);
  if (!connectionAvailable.isOk()) {
    log.error(connectionAvailable.getMessage());
    return false;
  }
  return true;
}","/** 
 * check whether the connection is available.
 * @param datamanager
 * @param analysisName
 * @return boolean
 */
public static boolean checkConnection(DataManager datamanager,String analysisName){
  Connection analysisDataProvider=ConnectionUtils.getConnectionFromDatamanager(datamanager);
  ReturnCode connectionAvailable=isConnectionAvailable(analysisDataProvider);
  if (!connectionAvailable.isOk()) {
    log.error(connectionAvailable.getMessage());
    MessageDialogWithToggle.openWarning(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",analysisName));
    return false;
  }
  return true;
}",0.8057040998217468
136552,"public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements,String where) throws SQLException {
  getDataFromTable().clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return getDataFromTable();
  }
  DelimitedFileConnection delimitedFileconnection=(DelimitedFileConnection)connection;
  String path=JavaSqlFactory.getURL(delimitedFileconnection);
  IPath iPath=new Path(path);
  try {
    File file=iPath.toFile();
    if (!file.exists()) {
      return null;
    }
    if (Escape.CSV.equals(delimitedFileconnection.getEscapeType())) {
      useCsvReader(file,delimitedFileconnection,analysedElements);
    }
 else {
      useFileInputDelimited(analysedElements,delimitedFileconnection);
    }
    endQuery();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return getDataFromTable();
}","public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements,String where) throws SQLException {
  getDataFromTable().clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return getDataFromTable();
  }
  DelimitedFileConnection delimitedFileconnection=(DelimitedFileConnection)connection;
  String path=JavaSqlFactory.getURL(delimitedFileconnection);
  IPath iPath=new Path(path);
  try {
    File file=iPath.toFile();
    if (!file.exists()) {
      return new ArrayList<Object[]>();
    }
    if (Escape.CSV.equals(delimitedFileconnection.getEscapeType())) {
      useCsvReader(file,delimitedFileconnection,analysedElements);
    }
 else {
      useFileInputDelimited(analysedElements,delimitedFileconnection);
    }
    endQuery();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return getDataFromTable();
}",0.986046511627907
136553,"@Override public boolean storeIndicator(String elementToAnalyze,Indicator indicator){
  boolean ok=true;
  final List<Indicator> indicatorLeaves=IndicatorHelper.getIndicatorLeaves(indicator);
  this.allIndicators.addAll(indicatorLeaves);
  for (  Indicator leaf : indicatorLeaves) {
    if (!MultiMapHelper.addUniqueObjectToListMap(elementToAnalyze,leaf,elementToIndicators)) {
      ok=false;
    }
  }
  return ok;
}","@Override public boolean storeIndicator(String elementToAnalyze,Indicator indicator){
  boolean ok=true;
  final List<Indicator> indicatorLeaves=IndicatorHelper.getIndicatorLeaves(indicator);
  for (  Indicator leaf : indicatorLeaves) {
    if (!this.allIndicators.contains(leaf) && !MultiMapHelper.addUniqueObjectToListMap(elementToAnalyze,leaf,elementToIndicators)) {
      ok=false;
    }
  }
  this.allIndicators.addAll(indicatorLeaves);
  return ok;
}",0.7780320366132724
136554,"/** 
 * Method ""getIndicatorLeaves"".
 * @param result
 * @return all the leaf indicators
 */
public static List<Indicator> getIndicatorLeaves(AnalysisResult result){
  List<Indicator> leafIndicators=new ArrayList<Indicator>();
  EList<Indicator> indicators=result.getIndicators();
  for (  Indicator indicator : indicators) {
    leafIndicators.addAll(getIndicatorLeaves(indicator));
  }
  return leafIndicators;
}","/** 
 * Method ""getIndicatorLeaves"".
 * @param result
 * @return all the leaf indicators
 */
public static List<Indicator> getIndicatorLeaves(AnalysisResult result){
  List<Indicator> leafIndicators=new ArrayList<>();
  EList<Indicator> indicators=result.getIndicators();
  RowCountIndicatorsAdapter.getInstance().clear();
  for (  Indicator indicator : indicators) {
    for (    Indicator indi : getIndicatorLeaves(indicator)) {
      if (!leafIndicators.contains(indi)) {
        leafIndicators.add(indi);
      }
    }
  }
  return leafIndicators;
}",0.7631851085832472
136555,"/** 
 * DOC zshen Comment method ""getCurrentModelElement"".
 */
private ModelElement getCurrentModelElement(){
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof FileEditorInput) {
    FileEditorInput fileEditorInput=(FileEditorInput)editorInput;
    IFile file=fileEditorInput.getFile();
    if (FactoriesUtil.isDQRuleFile(file.getFileExtension())) {
      return DQRuleResourceFileHelper.getInstance().findIndicatorDefinition(file);
    }
  }
 else   if (editorInput instanceof BusinessRuleItemEditorInput) {
    return ((BusinessRuleItemEditorInput)editorInput).getModel();
  }
  return null;
}","/** 
 * DOC zshen Comment method ""getCurrentModelElement"".
 */
private ModelElement getCurrentModelElement(){
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof FileEditorInput) {
    FileEditorInput fileEditorInput=(FileEditorInput)editorInput;
    IFile file=fileEditorInput.getFile();
    if (FactoriesUtil.isDQRuleFile(file.getFileExtension())) {
      return DQRuleResourceFileHelper.getInstance().findIndicatorDefinition(file);
    }
  }
 else   if (editorInput instanceof BusinessRuleItemEditorInput) {
    return ((BusinessRuleItemEditorInput)editorInput).getModel();
  }
 else   if (editorInput instanceof MatchRuleItemEditorInput) {
    return ((MatchRuleItemEditorInput)editorInput).getMatchRule();
  }
  return null;
}",0.8856729377713459
136556,"/** 
 * the modelelement can belong to current project or referenced project.
 * @param analysis
 * @return
 */
private static org.talend.core.model.general.Project getInWhichProject(ModelElement modelElement){
  if (modelElement instanceof DatabaseConnection || modelElement instanceof DelimitedFileConnection) {
    if (modelElement.eIsProxy()) {
      modelElement=(ModelElement)EObjectHelper.resolveObject(modelElement);
    }
    String projectName=modelElement.eResource().getURI().segment(1);
    java.util.Set<Project> allProjects=ProxyRepositoryManager.getInstance().getAllProjects();
    for (    Project project : allProjects) {
      if (project.getTechnicalLabel().equals(projectName)) {
        return project;
      }
    }
  }
  Property property=PropertyHelper.getProperty(modelElement);
  org.talend.core.model.properties.Project project=ProjectManager.getInstance().getProject(property);
  return new org.talend.core.model.general.Project(project);
}","/** 
 * the modelelement can belong to current project or referenced project.
 * @param analysis
 * @return
 */
private static org.talend.core.model.general.Project getInWhichProject(ModelElement modelElement){
  if (modelElement instanceof DatabaseConnection || modelElement instanceof DelimitedFileConnection) {
    if (modelElement.eIsProxy()) {
      modelElement=(ModelElement)EObjectHelper.resolveObject(modelElement);
    }
    String projectName=EObjectHelper.getURI(modelElement).segment(1);
    java.util.Set<Project> allProjects=ProxyRepositoryManager.getInstance().getAllProjects();
    for (    Project project : allProjects) {
      if (project.getTechnicalLabel().equals(projectName)) {
        return project;
      }
    }
  }
  Property property=PropertyHelper.getProperty(modelElement);
  org.talend.core.model.properties.Project project=ProjectManager.getInstance().getProject(property);
  return new org.talend.core.model.general.Project(project);
}",0.9747292418772564
136557,"private Boolean setIndicatorDefinition(Indicator indicator,String definitionLabel){
  IndicatorDefinition indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(definitionLabel);
  if (indicatorDefinition == null) {
    return false;
  }
  indicator.setIndicatorDefinition(indicatorDefinition);
  return true;
}","private Boolean setIndicatorDefinition(Indicator indicator,String definitionLabel){
  if (definitionLabel == null) {
    return false;
  }
  IndicatorDefinition indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(definitionLabel);
  if (indicatorDefinition == null) {
    return false;
  }
  indicator.setIndicatorDefinition(indicatorDefinition);
  return true;
}",0.9232914923291492
136558,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.imex.model.ItemRecord#loadProperty()}.
 * @throws PersistenceException
 */
@Test public void testLoadProperty() throws PersistenceException {
  Property analysisProperty=createAnalysis(""String_Node_Str"");
  TDQAnalysisItem item=(TDQAnalysisItem)analysisProperty.getItem();
  Analysis analysis=item.getAnalysis();
  AnalysisResult createAnalysisResult=analysis.getResults();
  Assert.assertEquals(0,createAnalysisResult.getIndicators().size());
  RowCountIndicator rowCountIndicator=IndicatorsFactory.eINSTANCE.createRowCountIndicator();
  String rowCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(rowCountPropertyID,""String_Node_Str"");
  rowCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(rowCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  Assert.assertNotNull(""String_Node_Str"",rowCountIndicator.getIndicatorDefinition());
  System.out.println(""String_Node_Str"" + rowCountIndicator.getIndicatorDefinition().getLabel());
  Assert.assertEquals(""String_Node_Str"",rowCountIndicator.getIndicatorDefinition().getLabel());
  createAnalysisResult.getIndicators().add(rowCountIndicator);
  Assert.assertEquals(1,createAnalysisResult.getIndicators().size());
  ReturnCode saveAnalysis=saveAnalysis(analysis);
  Assert.assertEquals(1,((TDQAnalysisItem)analysisProperty.getItem()).getAnalysis().getResults().getIndicators().size());
  Assert.assertTrue(""String_Node_Str"",saveAnalysis.isOk());
  File analysisFile=WorkspaceUtils.ifileToFile(PropertyHelper.getItemFile(analysisProperty));
  ItemRecord itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  NullCountIndicator nullCountIndicator=IndicatorsFactory.eINSTANCE.createNullCountIndicator();
  String nullCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(nullCountPropertyID,""String_Node_Str"");
  nullCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(nullCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  analysis=item.getAnalysis();
  analysis.getResults().getIndicators().add(nullCountIndicator);
  ReturnCode saveAnalysis2=saveAnalysis(analysis);
  Assert.assertTrue(""String_Node_Str"",saveAnalysis2.isOk());
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  ItemRecord.clear();
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(2,itemRecord.getDependencySet().size());
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.imex.model.ItemRecord#loadProperty()}.
 * @throws PersistenceException
 */
@Test public void testLoadProperty() throws PersistenceException {
  Property analysisProperty=createAnalysis(""String_Node_Str"");
  TDQAnalysisItem item=(TDQAnalysisItem)analysisProperty.getItem();
  Analysis analysis=item.getAnalysis();
  AnalysisResult createAnalysisResult=analysis.getResults();
  Assert.assertEquals(0,createAnalysisResult.getIndicators().size());
  RowCountIndicator rowCountIndicator=IndicatorsFactory.eINSTANCE.createRowCountIndicator();
  String rowCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(rowCountPropertyID,""String_Node_Str"");
  rowCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(rowCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  Assert.assertNotNull(""String_Node_Str"",rowCountIndicator.getIndicatorDefinition());
  Assert.assertEquals(""String_Node_Str"",rowCountIndicator.getIndicatorDefinition().getLabel());
  createAnalysisResult.getIndicators().add(rowCountIndicator);
  Assert.assertEquals(1,createAnalysisResult.getIndicators().size());
  ReturnCode saveAnalysis=saveAnalysis(analysis);
  Assert.assertEquals(1,((TDQAnalysisItem)analysisProperty.getItem()).getAnalysis().getResults().getIndicators().size());
  Assert.assertTrue(""String_Node_Str"",saveAnalysis.isOk());
  File analysisFile=WorkspaceUtils.ifileToFile(PropertyHelper.getItemFile(analysisProperty));
  ItemRecord itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  NullCountIndicator nullCountIndicator=IndicatorsFactory.eINSTANCE.createNullCountIndicator();
  String nullCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(nullCountPropertyID,""String_Node_Str"");
  nullCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(nullCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  analysis=item.getAnalysis();
  analysis.getResults().getIndicators().add(nullCountIndicator);
  ReturnCode saveAnalysis2=saveAnalysis(analysis);
  Assert.assertTrue(""String_Node_Str"",saveAnalysis2.isOk());
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  ItemRecord.clear();
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(2,itemRecord.getDependencySet().size());
}",0.9811979065710408
136559,"/** 
 * Test method for   {@link org.talend.dataprofiler.ecos.service.EcosystemService#getBranch(java.lang.String)}.
 */
@Test public void testGetBranch(){
  try {
    String[] branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 3);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    Assert.assertEquals(""String_Node_Str"",branch[1]);
    Assert.assertEquals(""String_Node_Str"",branch[2]);
    Assert.assertEquals(""String_Node_Str"",branch[3]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 3);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    Assert.assertEquals(""String_Node_Str"",branch[1]);
    Assert.assertEquals(""String_Node_Str"",branch[2]);
    Assert.assertEquals(""String_Node_Str"",branch[3]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 3);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    Assert.assertEquals(""String_Node_Str"",branch[1]);
    Assert.assertEquals(""String_Node_Str"",branch[2]);
    Assert.assertEquals(""String_Node_Str"",branch[3]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(null);
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(StringUtils.EMPTY);
    Assert.assertNull(branch);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Test method for   {@link org.talend.dataprofiler.ecos.service.EcosystemService#getBranch(java.lang.String)}.
 */
@Test public void testGetBranch(){
  try {
    String[] branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 0);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 0);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 0);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(null);
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(StringUtils.EMPTY);
    Assert.assertNull(branch);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.792017987633502
136560,"/** 
 * Test method for  {@link org.talend.dataprofiler.ecos.service.EcosystemService#getRevisionList(java.lang.String,java.lang.String)}.
 */
@Test public void testGetRevisionList(){
  try {
    List<RevisionInfo> revisionList=EcosystemService.getRevisionList(""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",revisionList.size() >= 14);
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
}","/** 
 * Test method for  {@link org.talend.dataprofiler.ecos.service.EcosystemService#getRevisionList(java.lang.String,java.lang.String)} .
 */
@Test public void testGetRevisionList(){
  try {
    List<RevisionInfo> revisionList=EcosystemService.getRevisionList(""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",revisionList.size() >= 14);
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
}",0.9988304093567252
136561,"/** 
 * Test method for  {@link org.talend.dataprofiler.core.ui.views.provider.ResourceViewLabelProvider#getFileCount(org.eclipse.core.resources.IFolder,java.lang.String[])}
 */
@Test public void testGetFileCount(){
  deleteCurrentProject();
  IFolder anaFolder=initFolder(EResourceConstant.ANALYSIS.getPath());
  IFolder repFolder=initFolder(EResourceConstant.REPORTS.getPath());
  ResourceViewLabelProvider reViewLabelProvider=new ResourceViewLabelProvider();
  int AnalysisNum=reViewLabelProvider.getFileCount(anaFolder,filterExtensions);
  int reportNum=reViewLabelProvider.getFileCount(repFolder,filterExtensions);
  assertEquals(AnalysisNum,3);
  assertEquals(reportNum,3);
}","/** 
 * Test method for  {@link org.talend.dataprofiler.core.ui.views.provider.ResourceViewLabelProvider#getFileCount(org.eclipse.core.resources.IFolder,java.lang.String[])}
 */
@Test public void testGetFileCount(){
  IFolder anaFolder=initFolder(EResourceConstant.ANALYSIS.getPath());
  IFolder repFolder=initFolder(EResourceConstant.REPORTS.getPath());
  ResourceViewLabelProvider reViewLabelProvider=new ResourceViewLabelProvider();
  int AnalysisNum=reViewLabelProvider.getFileCount(anaFolder,filterExtensions);
  int reportNum=reViewLabelProvider.getFileCount(repFolder,filterExtensions);
  assertEquals(AnalysisNum,3);
  assertEquals(reportNum,3);
}",0.9805389221556886
136562,"/** 
 * DOC mzhao 2009-06-12 feature 5887 Comment method ""removeSupplierDependenciesBetweenModels"". This method removes supplier dependencies. See   {@link DependenciesHandler#removeDependenciesBetweenModels(ModelElement,List)}
 * @param elementFromRemove
 * @param elementToRemove
 * @return
 */
public List<Resource> removeSupplierDependenciesBetweenModels(ModelElement elementFromRemove,List<? extends ModelElement> elementToRemove){
  EList<Dependency> supplierDependencies;
  List<Resource> toRemoveResources=new ArrayList<Resource>();
  for (  ModelElement modelElement : elementToRemove) {
    toRemoveResources.add(modelElement.eResource());
  }
  supplierDependencies=elementFromRemove.getSupplierDependency();
  List<Resource> modifiedResources=new ArrayList<Resource>();
  for (  Dependency dependency : supplierDependencies) {
    EList<ModelElement> client=dependency.getClient();
    Iterator<ModelElement> dependencyIterator=client.iterator();
    while (dependencyIterator.hasNext()) {
      Resource clientResource=dependencyIterator.next().eResource();
      if (clientResource != null) {
        if (toRemoveResources.contains(clientResource)) {
          modifiedResources.add(clientResource);
          dependencyIterator.remove();
        }
      }
    }
  }
  return modifiedResources;
}","/** 
 * This method removes supplier dependencies. See  {@link DependenciesHandler#removeDependenciesBetweenModels(ModelElement,List)}
 * @param rule
 * @param analyses
 * @return
 */
public boolean removeSupplierDependenciesBetweenModels(ModelElement rule,List<? extends ModelElement> analyses){
  List<Resource> toRemoveResources=new ArrayList<Resource>();
  for (  ModelElement modelElement : analyses) {
    toRemoveResources.add(modelElement.eResource());
  }
  EList<Dependency> supplierDependencies=rule.getSupplierDependency();
  for (  Dependency dependency : supplierDependencies) {
    EList<ModelElement> client=dependency.getClient();
    Iterator<ModelElement> dependencyIterator=client.iterator();
    while (dependencyIterator.hasNext()) {
      Resource clientResource=dependencyIterator.next().eResource();
      if (clientResource != null) {
        if (toRemoveResources.contains(clientResource)) {
          dependencyIterator.remove();
        }
      }
    }
  }
  return true;
}",0.6487889273356401
136563,"/** 
 * DOC zshen Comment method ""removeClientDependency"".
 * @param client
 * @param supplier
 */
private void removeClientDependency(ModelElement client,ModelElement supplier){
  for (  Dependency dependency : client.getClientDependency()) {
    if (dependency.getKind() != null && USAGE.compareTo(dependency.getKind()) == 0) {
      EObject resolvedObject=ResourceHelper.resolveObject(dependency.getSupplier(),supplier);
      if (resolvedObject != null) {
        client.getClientDependency().remove(dependency);
        return;
      }
    }
  }
}","/** 
 * DOC zshen Comment method ""removeClientDependency"".
 * @param client
 * @param supplier
 */
public void removeClientDependency(ModelElement client,ModelElement supplier){
  for (  Dependency dependency : client.getClientDependency()) {
    if (dependency.getKind() != null && USAGE.compareTo(dependency.getKind()) == 0) {
      EObject resolvedObject=ResourceHelper.resolveObject(dependency.getSupplier(),supplier);
      if (resolvedObject != null) {
        client.getClientDependency().remove(dependency);
        return;
      }
    }
  }
}",0.9900271985494108
136564,"@Override protected ReturnCode removeDependencies(Item item){
  ReturnCode rc=new ReturnCode();
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  Analysis analysis=anaItem.getAnalysis();
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(anaItem.getProperty());
  List<ModelElement> clientDepListByResultList=getClientDepListByResult(analysis);
  for (  Property currentClient : clintDependency) {
    ModelElement modelElement=PropertyHelper.getModelElement(currentClient);
    if (!clientDepListByResultList.contains(modelElement)) {
      boolean isSuccess=DependenciesHandler.getInstance().removeDependenciesBetweenModel(analysis,modelElement);
      if (isSuccess) {
        try {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(modelElement.eResource());
        }
 catch (        PersistenceException e) {
          log.error(e,e);
          rc.setOk(false);
          rc.setMessage(e.getMessage());
        }
      }
 else {
        rc.setOk(false);
        rc.setMessage(Messages.getString(""String_Node_Str"",analysis.getName(),modelElement.getName()));
      }
    }
  }
  return rc;
}","@Override protected ReturnCode removeDependencies(Item item){
  ReturnCode rc=new ReturnCode();
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  Analysis analysis=anaItem.getAnalysis();
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(anaItem.getProperty());
  List<ModelElement> clientDepListByResultList=DependenciesHandler.getInstance().getClientDepListByResult(analysis);
  for (  Property currentClient : clintDependency) {
    ModelElement modelElement=PropertyHelper.getModelElement(currentClient);
    if (!clientDepListByResultList.contains(modelElement)) {
      boolean isSuccess=DependenciesHandler.getInstance().removeDependenciesBetweenModel(analysis,modelElement);
      if (isSuccess) {
        try {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(modelElement.eResource());
        }
 catch (        PersistenceException e) {
          log.error(e,e);
          rc.setOk(false);
          rc.setMessage(e.getMessage());
        }
      }
 else {
        rc.setOk(false);
        rc.setMessage(Messages.getString(""String_Node_Str"",analysis.getName(),modelElement.getName()));
      }
    }
  }
  return rc;
}",0.9860082304526748
136565,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.imex.model.ItemRecord#loadProperty()}.
 * @throws PersistenceException
 */
@Test public void testLoadProperty() throws PersistenceException {
  Property analysisProperty=createAnalysis(""String_Node_Str"");
  TDQAnalysisItem item=(TDQAnalysisItem)analysisProperty.getItem();
  Analysis analysis=item.getAnalysis();
  AnalysisResult createAnalysisResult=analysis.getResults();
  RowCountIndicator rowCountIndicator=IndicatorsFactory.eINSTANCE.createRowCountIndicator();
  String rowCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(rowCountPropertyID,""String_Node_Str"");
  rowCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(rowCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  createAnalysisResult.getIndicators().add(rowCountIndicator);
  ReturnCode saveAnalysis=saveAnalysis(analysis);
  Assert.assertTrue(""String_Node_Str"",saveAnalysis.isOk());
  File analysisFile=WorkspaceUtils.ifileToFile(PropertyHelper.getItemFile(analysisProperty));
  ItemRecord itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  NullCountIndicator nullCountIndicator=IndicatorsFactory.eINSTANCE.createNullCountIndicator();
  String nullCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(nullCountPropertyID,""String_Node_Str"");
  nullCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(nullCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  analysis=item.getAnalysis();
  analysis.getResults().getIndicators().add(nullCountIndicator);
  ReturnCode saveAnalysis2=saveAnalysis(analysis);
  Assert.assertTrue(""String_Node_Str"",saveAnalysis2.isOk());
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  ItemRecord.clear();
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(2,itemRecord.getDependencySet().size());
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.imex.model.ItemRecord#loadProperty()}.
 * @throws PersistenceException
 */
@Test public void testLoadProperty() throws PersistenceException {
  Property analysisProperty=createAnalysis(""String_Node_Str"");
  TDQAnalysisItem item=(TDQAnalysisItem)analysisProperty.getItem();
  Analysis analysis=item.getAnalysis();
  AnalysisResult createAnalysisResult=analysis.getResults();
  Assert.assertEquals(0,createAnalysisResult.getIndicators().size());
  RowCountIndicator rowCountIndicator=IndicatorsFactory.eINSTANCE.createRowCountIndicator();
  String rowCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(rowCountPropertyID,""String_Node_Str"");
  rowCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(rowCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  Assert.assertNotNull(""String_Node_Str"",rowCountIndicator.getIndicatorDefinition());
  System.out.println(""String_Node_Str"" + rowCountIndicator.getIndicatorDefinition().getLabel());
  Assert.assertEquals(""String_Node_Str"",rowCountIndicator.getIndicatorDefinition().getLabel());
  createAnalysisResult.getIndicators().add(rowCountIndicator);
  Assert.assertEquals(1,createAnalysisResult.getIndicators().size());
  ReturnCode saveAnalysis=saveAnalysis(analysis);
  Assert.assertEquals(1,((TDQAnalysisItem)analysisProperty.getItem()).getAnalysis().getResults().getIndicators().size());
  Assert.assertTrue(""String_Node_Str"",saveAnalysis.isOk());
  File analysisFile=WorkspaceUtils.ifileToFile(PropertyHelper.getItemFile(analysisProperty));
  ItemRecord itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  NullCountIndicator nullCountIndicator=IndicatorsFactory.eINSTANCE.createNullCountIndicator();
  String nullCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(nullCountPropertyID,""String_Node_Str"");
  nullCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(nullCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  analysis=item.getAnalysis();
  analysis.getResults().getIndicators().add(nullCountIndicator);
  ReturnCode saveAnalysis2=saveAnalysis(analysis);
  Assert.assertTrue(""String_Node_Str"",saveAnalysis2.isOk());
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  ItemRecord.clear();
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(2,itemRecord.getDependencySet().size());
}",0.864050901378579
136566,"private void saveIndicatorDefintion(String uuid,String name) throws PersistenceException {
  IndicatorDefinition createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  TDQIndicatorDefinitionItem createTDQIndicatorDefinitionItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  createTDQIndicatorDefinitionItem.setIndicatorDefinition(createIndicatorDefinition);
  Property createProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createProperty.setLabel(name);
  createTDQIndicatorDefinitionItem.setProperty(createProperty);
  createProperty.setId(uuid);
  ProxyRepositoryFactory.getInstance().create(createTDQIndicatorDefinitionItem,new Path(ERepositoryObjectType.TDQ_SYSTEM_INDICATORS.getFolder()).removeFirstSegments(2),false);
}","private void saveIndicatorDefintion(String uuid,String name) throws PersistenceException {
  IndicatorDefinition createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  TDQIndicatorDefinitionItem createTDQIndicatorDefinitionItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  createTDQIndicatorDefinitionItem.setIndicatorDefinition(createIndicatorDefinition);
  Property createProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createProperty.setLabel(name);
  createIndicatorDefinition.setLabel(name);
  createIndicatorDefinition.setName(name);
  createTDQIndicatorDefinitionItem.setProperty(createProperty);
  createProperty.setId(uuid);
  ProxyRepositoryFactory.getInstance().create(createTDQIndicatorDefinitionItem,new Path(ERepositoryObjectType.TDQ_SYSTEM_INDICATORS.getFolder()).removeFirstSegments(2),false);
}",0.9494479953515398
136567,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.imex.model.ItemRecord#loadProperty()}.
 * @throws PersistenceException
 */
@Test public void testLoadProperty() throws PersistenceException {
  Property analysisProperty=createAnalysis(""String_Node_Str"");
  TDQAnalysisItem item=(TDQAnalysisItem)analysisProperty.getItem();
  Analysis analysis=item.getAnalysis();
  AnalysisResult createAnalysisResult=analysis.getResults();
  Assert.assertEquals(0,createAnalysisResult.getIndicators().size());
  RowCountIndicator rowCountIndicator=IndicatorsFactory.eINSTANCE.createRowCountIndicator();
  String rowCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(rowCountPropertyID,""String_Node_Str"");
  rowCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(rowCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  Assert.assertNotNull(""String_Node_Str"",rowCountIndicator.getIndicatorDefinition());
  Assert.assertEquals(""String_Node_Str"",rowCountIndicator.getIndicatorDefinition().getLabel());
  createAnalysisResult.getIndicators().add(rowCountIndicator);
  Assert.assertEquals(1,createAnalysisResult.getIndicators().size());
  ReturnCode saveAnalysis=saveAnalysis(analysis);
  Assert.assertEquals(1,((TDQAnalysisItem)analysisProperty.getItem()).getAnalysis().getResults().getIndicators().size());
  Assert.assertTrue(""String_Node_Str"",saveAnalysis.isOk());
  File analysisFile=WorkspaceUtils.ifileToFile(PropertyHelper.getItemFile(analysisProperty));
  ItemRecord itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  NullCountIndicator nullCountIndicator=IndicatorsFactory.eINSTANCE.createNullCountIndicator();
  String nullCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(nullCountPropertyID,""String_Node_Str"");
  nullCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(nullCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  analysis=item.getAnalysis();
  analysis.getResults().getIndicators().add(nullCountIndicator);
  ReturnCode saveAnalysis2=saveAnalysis(analysis);
  Assert.assertTrue(""String_Node_Str"",saveAnalysis2.isOk());
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  ItemRecord.clear();
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(2,itemRecord.getDependencySet().size());
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.imex.model.ItemRecord#loadProperty()}.
 * @throws PersistenceException
 */
@Test public void testLoadProperty() throws PersistenceException {
  chooseRightProject();
  Property analysisProperty=createAnalysis(""String_Node_Str"");
  TDQAnalysisItem item=(TDQAnalysisItem)analysisProperty.getItem();
  Analysis analysis=item.getAnalysis();
  AnalysisResult createAnalysisResult=analysis.getResults();
  Assert.assertEquals(0,createAnalysisResult.getIndicators().size());
  RowCountIndicator rowCountIndicator=IndicatorsFactory.eINSTANCE.createRowCountIndicator();
  String rowCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(rowCountPropertyID,""String_Node_Str"");
  rowCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(rowCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  Assert.assertNotNull(""String_Node_Str"",rowCountIndicator.getIndicatorDefinition());
  Assert.assertEquals(""String_Node_Str"",rowCountIndicator.getIndicatorDefinition().getLabel());
  createAnalysisResult.getIndicators().add(rowCountIndicator);
  Assert.assertEquals(1,createAnalysisResult.getIndicators().size());
  ReturnCode saveAnalysis=saveAnalysis(analysis);
  Assert.assertEquals(1,((TDQAnalysisItem)analysisProperty.getItem()).getAnalysis().getResults().getIndicators().size());
  Assert.assertTrue(""String_Node_Str"",saveAnalysis.isOk());
  File analysisFile=WorkspaceUtils.ifileToFile(PropertyHelper.getItemFile(analysisProperty));
  ItemRecord itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  NullCountIndicator nullCountIndicator=IndicatorsFactory.eINSTANCE.createNullCountIndicator();
  String nullCountPropertyID=EcoreUtil.generateUUID();
  saveIndicatorDefintion(nullCountPropertyID,""String_Node_Str"");
  nullCountIndicator.setIndicatorDefinition(((TDQIndicatorDefinitionItem)ProxyRepositoryFactory.getInstance().getLastVersion(nullCountPropertyID).getProperty().getItem()).getIndicatorDefinition());
  analysis=item.getAnalysis();
  analysis.getResults().getIndicators().add(nullCountIndicator);
  ReturnCode saveAnalysis2=saveAnalysis(analysis);
  Assert.assertTrue(""String_Node_Str"",saveAnalysis2.isOk());
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(1,itemRecord.getDependencySet().size());
  ItemRecord.clear();
  itemRecord=new ItemRecord(analysisFile);
  Assert.assertEquals(2,itemRecord.getDependencySet().size());
}",0.9952811639795516
136568,"private void createReport(String name,IFolder folder,Boolean isDelete){
  IPath createPath=Path.EMPTY;
  if (folder != null) {
    createPath=new Path(folder.getFullPath().lastSegment());
  }
  Report report1=ReportHelper.createReport(name);
  TDQReportItem item1=PropertiesFactoryImpl.eINSTANCE.createTDQReportItem();
  org.talend.core.model.properties.Property property1=PropertiesFactory.eINSTANCE.createProperty();
  property1.setId(EcoreUtil.generateUUID());
  property1.setItem(item1);
  property1.setLabel(report1.getName());
  item1.setProperty(property1);
  item1.setReport(report1);
  ItemState itemState=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createItemState();
  itemState.setDeleted(isDelete);
  item1.setState(itemState);
  try {
    ProxyRepositoryFactory.getInstance().create(item1,createPath,false);
  }
 catch (  PersistenceException e) {
    Assert.fail(e.getMessage());
  }
}","private void createReport(String name,IPath createPath,Boolean isDelete){
  Report report1=ReportHelper.createReport(name);
  TDQReportItem item1=PropertiesFactoryImpl.eINSTANCE.createTDQReportItem();
  org.talend.core.model.properties.Property property1=PropertiesFactory.eINSTANCE.createProperty();
  property1.setId(EcoreUtil.generateUUID());
  property1.setItem(item1);
  property1.setLabel(report1.getName());
  item1.setProperty(property1);
  item1.setReport(report1);
  ItemState itemState=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createItemState();
  itemState.setDeleted(isDelete);
  item1.setState(itemState);
  try {
    ProxyRepositoryFactory.getInstance().create(item1,createPath,false);
  }
 catch (  PersistenceException e) {
    Assert.fail(e.getMessage());
  }
}",0.9137529137529138
136569,"private void createAnalysis(String name,IFolder folder,Boolean isDelete){
  IPath createPath=Path.EMPTY;
  if (folder != null) {
    createPath=new Path(folder.getFullPath().lastSegment());
  }
  Analysis analysis1=AnalysisHelper.createAnalysis(name);
  TDQAnalysisItem item1=PropertiesFactoryImpl.eINSTANCE.createTDQAnalysisItem();
  org.talend.core.model.properties.Property property1=PropertiesFactory.eINSTANCE.createProperty();
  property1.setId(EcoreUtil.generateUUID());
  property1.setItem(item1);
  property1.setLabel(analysis1.getName());
  item1.setProperty(property1);
  item1.setAnalysis(analysis1);
  ItemState itemState=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createItemState();
  itemState.setDeleted(isDelete);
  item1.setState(itemState);
  AnalysisResult analysisResult1=AnalysisFactory.eINSTANCE.createAnalysisResult();
  analysis1.setResults(analysisResult1);
  try {
    ProxyRepositoryFactory.getInstance().create(item1,createPath,false);
  }
 catch (  PersistenceException e) {
    Assert.fail(e.getMessage());
  }
}","private void createAnalysis(String name,IPath createPath,Boolean isDelete){
  Analysis analysis1=AnalysisHelper.createAnalysis(name);
  TDQAnalysisItem item1=PropertiesFactoryImpl.eINSTANCE.createTDQAnalysisItem();
  org.talend.core.model.properties.Property property1=PropertiesFactory.eINSTANCE.createProperty();
  property1.setId(EcoreUtil.generateUUID());
  property1.setItem(item1);
  property1.setLabel(analysis1.getName());
  item1.setProperty(property1);
  item1.setAnalysis(analysis1);
  ItemState itemState=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createItemState();
  itemState.setDeleted(isDelete);
  item1.setState(itemState);
  AnalysisResult analysisResult1=AnalysisFactory.eINSTANCE.createAnalysisResult();
  analysis1.setResults(analysisResult1);
  try {
    ProxyRepositoryFactory.getInstance().create(item1,createPath,false);
  }
 catch (  PersistenceException e) {
    Assert.fail(e.getMessage());
  }
}",0.9261477045908184
136570,"/** 
 * DOC zshen Comment method ""initFolder"". init the folder which contain ana and rep files
 * @param folderName
 * @return
 */
public IFolder initFolder(String folderName){
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  if (!rootProject.exists()) {
    initProxyRepository(rootProject);
  }
  if (DQStructureManager.getInstance().isNeedCreateStructure()) {
    DQStructureManager.getInstance().createDQStructure();
  }
  IFolder aa=rootProject.getFolder(folderName);
  if (!aa.exists()) {
    try {
      aa.create(true,true,null);
    }
 catch (    CoreException e) {
      Assert.fail(e.getMessage());
    }
  }
  if (anaFolderName.equals(folderName)) {
    IFolder subfolder1=createFolder(aa,""String_Node_Str"");
    IFolder subfolder2=createFolder(aa,""String_Node_Str"");
    createAnalysis(""String_Node_Str"",null,true);
    createAnalysis(""String_Node_Str"",null,false);
    createAnalysis(""String_Node_Str"",subfolder2,false);
    createAnalysis(""String_Node_Str"",subfolder1,false);
  }
  if (repFolderName.equals(folderName)) {
    IFolder subfolder1=createFolder(aa,""String_Node_Str"");
    IFolder subfolder2=createFolder(aa,""String_Node_Str"");
    createReport(""String_Node_Str"",null,true);
    createReport(""String_Node_Str"",null,false);
    createReport(""String_Node_Str"",subfolder2,false);
    createReport(""String_Node_Str"",subfolder1,false);
  }
  return aa;
}","/** 
 * DOC zshen Comment method ""initFolder"". init the folder which contain ana and rep files
 * @param folderName
 * @return
 */
public IFolder initFolder(String folderName){
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  if (!rootProject.exists()) {
    log.debug(""String_Node_Str"");
    initProxyRepository(rootProject);
  }
  if (DQStructureManager.getInstance().isNeedCreateStructure()) {
    DQStructureManager.getInstance().createDQStructure();
  }
  IFolder elementRootFolder=rootProject.getFolder(folderName);
  if (!elementRootFolder.exists()) {
    try {
      elementRootFolder.create(true,true,null);
    }
 catch (    CoreException e) {
      Assert.fail(e.getMessage());
    }
  }
  if (anaFolderName.equals(folderName)) {
    IFolder analysisFolder=createFolder(elementRootFolder,""String_Node_Str"");
    IFolder subfolder1=createFolder(analysisFolder,""String_Node_Str"");
    IFolder subfolder2=createFolder(analysisFolder,""String_Node_Str"");
    elementRootFolder=analysisFolder;
    createAnalysis(""String_Node_Str"",new Path(analysisFolder.getFullPath().lastSegment()),true);
    createAnalysis(""String_Node_Str"",new Path(analysisFolder.getFullPath().lastSegment()),false);
    createAnalysis(""String_Node_Str"",new Path(analysisFolder.getFullPath().lastSegment()).append(subfolder2.getFullPath().lastSegment()),false);
    createAnalysis(""String_Node_Str"",new Path(analysisFolder.getFullPath().lastSegment()).append(subfolder1.getFullPath().lastSegment()),false);
  }
  if (repFolderName.equals(folderName)) {
    IFolder reportFolder=createFolder(elementRootFolder,""String_Node_Str"");
    IFolder subfolder1=createFolder(reportFolder,""String_Node_Str"");
    IFolder subfolder2=createFolder(reportFolder,""String_Node_Str"");
    elementRootFolder=reportFolder;
    createReport(""String_Node_Str"",new Path(reportFolder.getFullPath().lastSegment()),true);
    createReport(""String_Node_Str"",new Path(reportFolder.getFullPath().lastSegment()),false);
    createReport(""String_Node_Str"",new Path(reportFolder.getFullPath().lastSegment()).append(subfolder2.getFullPath().lastSegment()),false);
    createReport(""String_Node_Str"",new Path(reportFolder.getFullPath().lastSegment()).append(subfolder1.getFullPath().lastSegment()),false);
  }
  return elementRootFolder;
}",0.7375541125541125
136571,"/** 
 * Test method for  {@link org.talend.dataprofiler.core.ui.views.provider.ResourceViewLabelProvider#getFileCount(org.eclipse.core.resources.IFolder,java.lang.String[])}
 */
@Test public void testGetFileCount(){
  IFolder anaFolder=initFolder(EResourceConstant.ANALYSIS.getPath());
  IFolder repFolder=initFolder(EResourceConstant.REPORTS.getPath());
  ResourceViewLabelProvider reViewLabelProvider=new ResourceViewLabelProvider();
  int AnalysisNum=reViewLabelProvider.getFileCount(anaFolder,filterExtensions);
  int reportNum=reViewLabelProvider.getFileCount(repFolder,filterExtensions);
  assertEquals(AnalysisNum,3);
  assertEquals(reportNum,3);
}","/** 
 * Test method for  {@link org.talend.dataprofiler.core.ui.views.provider.ResourceViewLabelProvider#getFileCount(org.eclipse.core.resources.IFolder,java.lang.String[])}
 */
@Test public void testGetFileCount(){
  log.debug(""String_Node_Str"");
  IFolder repFolder=initFolder(EResourceConstant.REPORTS.getPath());
  IFolder anaFolder=initFolder(EResourceConstant.ANALYSIS.getPath());
  ResourceViewLabelProvider reViewLabelProvider=new ResourceViewLabelProvider();
  int analysisNum=reViewLabelProvider.getFileCount(anaFolder,filterExtensions);
  int reportNum=reViewLabelProvider.getFileCount(repFolder,filterExtensions);
  log.debug(""String_Node_Str"" + analysisNum);
  log.debug(""String_Node_Str"" + reportNum);
  assertEquals(3,analysisNum);
  assertEquals(3,reportNum);
}",0.8100558659217877
136572,"public String getValue(){
  if (value != null) {
    return StringFormatUtil.format(value,StringFormatUtil.NUMBER).toString();
  }
 else {
    return null;
  }
}","public String getValue(){
  return value;
}",0.4215686274509804
136573,"/** 
 * DOC xqliu Comment method ""handleMatchingValue"".
 * @param indicator
 * @return
 */
private static Object handleMatchingValue(Indicator indicator){
  Object tempObject;
  PatternMatchingExt patternExt=new PatternMatchingExt();
  if (UDIHelper.isUDI(indicator)) {
    UserDefIndicator udi=(UserDefIndicator)indicator;
    if (udi.getMatchingValueCount() != null) {
      patternExt.setMatchingValueCount(udi.getMatchingValueCount());
    }
    if (udi.getNotMatchingValueCount() != null) {
      patternExt.setNotMatchingValueCount(udi.getNotMatchingValueCount());
    }
  }
 else {
    patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
    patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
  }
  tempObject=patternExt;
  return tempObject;
}","/** 
 * DOC xqliu Comment method ""handleMatchingValue"".
 * @param indicator
 * @return
 */
public static PatternMatchingExt handleMatchingValue(Indicator indicator){
  PatternMatchingExt patternExt=new PatternMatchingExt();
  if (UDIHelper.isUDI(indicator)) {
    UserDefIndicator udi=(UserDefIndicator)indicator;
    if (udi.getMatchingValueCount() != null) {
      patternExt.setMatchingValueCount(udi.getMatchingValueCount());
    }
    if (udi.getNotMatchingValueCount() != null) {
      patternExt.setNotMatchingValueCount(udi.getNotMatchingValueCount());
    }
  }
 else {
    patternExt.setMatchingValueCount(((PatternMatchingIndicator)indicator).getMatchingValueCount());
    patternExt.setNotMatchingValueCount(((PatternMatchingIndicator)indicator).getNotMatchingValueCount());
  }
  return patternExt;
}",0.9440096327513546
136574,"/** 
 * Added TDQ-8787 20140613 yyin: create all charts before running, register each chart with its related indicator.
 */
public void registerDynamicEvent(){
  List<DynamicIndicatorModel> indiAndDatasets=uiPagination.getAllIndcatorAndDatasetOfCurrentPage();
  for (  DynamicIndicatorModel oneCategoryIndicatorModel : indiAndDatasets) {
    TableViewer tableViewer=oneCategoryIndicatorModel.getTableViewer();
    if (EIndicatorChartType.SUMMARY_STATISTICS.equals(oneCategoryIndicatorModel.getChartType())) {
      DynamicBAWChartEventReceiver bawReceiver=AnalysisUtils.createDynamicBAWChartEventReceiver(oneCategoryIndicatorModel,eventReceivers);
      bawReceiver.setChartComposite(chartComposite);
      bawReceiver.refreshChart();
      bawReceiver.setTableViewer(tableViewer);
    }
 else {
      int index=0;
      for (      Indicator oneIndicator : oneCategoryIndicatorModel.getIndicatorList()) {
        DynamicChartEventReceiver eReceiver=AnalysisUtils.createDynamicChartEventReceiver(oneCategoryIndicatorModel,index++,oneIndicator);
        eReceiver.setChartComposite(chartComposite);
        eReceiver.setParentChartComposite((Composite)oneCategoryIndicatorModel.getBawParentChartComp());
        eReceiver.refreshChart();
        eReceiver.setTableViewer(tableViewer);
        eReceiver.clearValue();
        registerIndicatorEvent(oneIndicator,eReceiver);
      }
    }
  }
  reLayoutChartComposite();
  registerOtherDynamicEvent();
}","/** 
 * Added TDQ-8787 20140613 yyin: create all charts before running, register each chart with its related indicator.
 */
public void registerDynamicEvent(){
  List<DynamicIndicatorModel> indiAndDatasets=uiPagination.getAllIndcatorAndDatasetOfCurrentPage();
  for (  DynamicIndicatorModel oneCategoryIndicatorModel : indiAndDatasets) {
    TableViewer tableViewer=oneCategoryIndicatorModel.getTableViewer();
    if (EIndicatorChartType.SUMMARY_STATISTICS.equals(oneCategoryIndicatorModel.getChartType())) {
      DynamicBAWChartEventReceiver bawReceiver=AnalysisUtils.createDynamicBAWChartEventReceiver(oneCategoryIndicatorModel,eventReceivers);
      bawReceiver.setChartComposite(chartComposite);
      bawReceiver.setParentChartComposite((Composite)oneCategoryIndicatorModel.getBawParentChartComp());
      bawReceiver.refreshChart();
      bawReceiver.setTableViewer(tableViewer);
    }
 else {
      int index=0;
      for (      Indicator oneIndicator : oneCategoryIndicatorModel.getIndicatorList()) {
        DynamicChartEventReceiver eReceiver=AnalysisUtils.createDynamicChartEventReceiver(oneCategoryIndicatorModel,index++,oneIndicator);
        eReceiver.setChartComposite(chartComposite);
        eReceiver.setParentChartComposite((Composite)oneCategoryIndicatorModel.getBawParentChartComp());
        eReceiver.refreshChart();
        eReceiver.setTableViewer(tableViewer);
        eReceiver.clearValue();
        registerIndicatorEvent(oneIndicator,eReceiver);
      }
    }
  }
  reLayoutChartComposite();
  registerOtherDynamicEvent();
}",0.965034965034965
136575,"public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    String label=unit.getIndicator().getName();
    PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
    String notMathCount=PatternStatisticeStateUtil.getNotMatchCount(patternExt);
    String machCount=PatternStatisticeStateUtil.getMatchCount(patternExt);
    customerdataset.addValue(Double.parseDouble(notMathCount),DefaultMessagesImpl.getString(""String_Node_Str""),label);
    customerdataset.addValue(Double.parseDouble(machCount),DefaultMessagesImpl.getString(""String_Node_Str""),label);
    PatternChartDataEntity patternEntity=PatternStatisticeStateUtil.createDataEntity(unit,label,notMathCount,machCount);
    customerdataset.addDataEntity(patternEntity);
  }
  return customerdataset;
}","public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    String label=unit.getIndicator().getName();
    PatternMatchingExt patternExt=PatternStatisticeStateUtil.getUnitValue(unit.getIndicator(),unit.getValue());
    String notMathCount=PatternStatisticeStateUtil.getNotMatchCount(patternExt);
    String machCount=PatternStatisticeStateUtil.getMatchCount(patternExt);
    customerdataset.addValue(Double.parseDouble(notMathCount),DefaultMessagesImpl.getString(""String_Node_Str""),label);
    customerdataset.addValue(Double.parseDouble(machCount),DefaultMessagesImpl.getString(""String_Node_Str""),label);
    PatternChartDataEntity patternEntity=PatternStatisticeStateUtil.createDataEntity(unit,label,notMathCount,machCount);
    customerdataset.addDataEntity(patternEntity);
  }
  return customerdataset;
}",0.9552238805970148
136576,"@Override public ChartDataEntity[] getDataEntity(){
  List<ChartDataEntity> dataEnities=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : units) {
    PatternMatchingExt patternExt=(PatternMatchingExt)unit.getValue();
    String notMathCount=PatternStatisticeStateUtil.getNotMatchCount(patternExt);
    String machCount=PatternStatisticeStateUtil.getMatchCount(patternExt);
    PatternChartDataEntity patternEntity=PatternStatisticeStateUtil.createDataEntity(unit,unit.getIndicator().getName(),notMathCount,machCount);
    dataEnities.add(patternEntity);
  }
  return dataEnities.toArray(new ChartDataEntity[dataEnities.size()]);
}","@Override public ChartDataEntity[] getDataEntity(){
  List<ChartDataEntity> dataEnities=new ArrayList<ChartDataEntity>();
  for (  IndicatorUnit unit : units) {
    PatternMatchingExt patternExt=PatternStatisticeStateUtil.getUnitValue(unit.getIndicator(),unit.getValue());
    String notMathCount=PatternStatisticeStateUtil.getNotMatchCount(patternExt);
    String machCount=PatternStatisticeStateUtil.getMatchCount(patternExt);
    PatternChartDataEntity patternEntity=PatternStatisticeStateUtil.createDataEntity(unit,unit.getIndicator().getName(),notMathCount,machCount);
    dataEnities.add(patternEntity);
  }
  return dataEnities.toArray(new ChartDataEntity[dataEnities.size()]);
}",0.9391435011269722
136577,"public DynamicChartEventReceiver createEventReceiver(IndicatorEnum type,Indicator oneIndicator){
  DynamicChartEventReceiver eReceiver=new DynamicChartEventReceiver(){
    @Override public boolean handle(    Object value){
      super.handle(value);
      addToSummaryMap(getIndicatorType(),value);
      if (isIntact()) {
        if (this.getTableViewer() != null) {
          String str=value == null ? String.valueOf(Double.NaN) : String.valueOf(value);
          this.refreshTable(str);
        }
      }
 else {
        updateValueOfIRQAndRange();
      }
      return true;
    }
  }
;
  eReceiver.setIndicatorType(type);
  eReceiver.setIndicatorName(oneIndicator.getName());
  indicators.add(new ColumnIndicatorUnit(type,oneIndicator,null));
  if (IndicatorEnum.IQRIndicatorEnum.equals(type)) {
    this.IRQIndicator=oneIndicator;
    this.IRQIndicatorEvent=eReceiver;
  }
 else   if (IndicatorEnum.RangeIndicatorEnum.equals(type)) {
    this.rangeIndicator=oneIndicator;
    this.rangeIndicatorEvent=eReceiver;
  }
  return eReceiver;
}","public DynamicChartEventReceiver createEventReceiver(IndicatorEnum type,Indicator oneIndicator){
  DynamicChartEventReceiver eReceiver=new DynamicChartEventReceiver(){
    @Override public boolean handle(    Object value){
      super.handle(value);
      addToSummaryMap(getIndicatorType(),value);
      if (isIntact()) {
        if (this.getTableViewer() != null) {
          String str=value == null ? String.valueOf(Double.NaN) : String.valueOf(value);
          this.refreshTable(str);
          if (isLastIndicator()) {
            updateValueOfIRQAndRange();
          }
        }
      }
 else {
        updateValueOfIRQAndRange();
      }
      return true;
    }
  }
;
  eReceiver.setIndicatorType(type);
  eReceiver.setIndicatorName(oneIndicator.getName());
  indicators.add(new ColumnIndicatorUnit(type,oneIndicator,null));
  if (IndicatorEnum.IQRIndicatorEnum.equals(type)) {
    this.IRQIndicator=oneIndicator;
    this.IRQIndicatorEvent=eReceiver;
  }
 else   if (IndicatorEnum.RangeIndicatorEnum.equals(type)) {
    this.rangeIndicator=oneIndicator;
    this.rangeIndicatorEvent=eReceiver;
  }
  return eReceiver;
}",0.9462068965517242
136578,"@Override public void refreshChart(){
  Map<IndicatorUnit,String> indicators2ValueMap=converIndicatorListToMap();
  SummaryStatisticsState state=new SummaryStatisticsState(indicators,indicators2ValueMap);
  state.setSupportDynamicChart(true);
  state.setSqltype(Types.DOUBLE);
  Object chart=state.getChart();
  TOPChartUtils.getInstance().decorateChart(chart,false);
  if (BAWparentComposite != null) {
    TOPChartUtils.getInstance().refrechChart(BAWparentComposite,chart);
  }
  EventManager.getInstance().publish(chartComposite,EventEnum.DQ_DYNAMIC_REFRESH_DYNAMIC_CHART,null);
}","@Override public void refreshChart(){
  Map<IndicatorUnit,String> indicators2ValueMap=converIndicatorListToMap();
  SummaryStatisticsState state=new SummaryStatisticsState(indicators,indicators2ValueMap);
  if (!isLastIndicator()) {
    state.setSupportDynamicChart(true);
  }
  state.setSqltype(Types.DOUBLE);
  Object chart=state.getChart();
  TOPChartUtils.getInstance().decorateChart(chart,false);
  if (BAWparentComposite != null) {
    TOPChartUtils.getInstance().refrechChart(BAWparentComposite,chart);
  }
  EventManager.getInstance().publish(chartComposite,EventEnum.DQ_DYNAMIC_REFRESH_DYNAMIC_CHART,null);
}",0.9716666666666668
136579,"@Override public boolean handle(Object value){
  Object indValue=value;
  if (value == null) {
    indValue=0;
  }
  if (dataset != null) {
    if (indValue instanceof Number) {
      TOPChartUtils.getInstance().setValue(dataset,(Number)indValue,indicatorName,indicatorName);
    }
 else     if (indValue instanceof String) {
      if (!(indicator instanceof ModeIndicator)) {
        TOPChartUtils.getInstance().setValue(dataset,Double.parseDouble((String)indValue),indicatorName,indicatorName);
      }
    }
 else     if (indValue instanceof PatternMatchingExt) {
      PatternMatchingExt patternExt=(PatternMatchingExt)indValue;
      TOPChartUtils.getInstance().setValue(dataset,patternExt.getNotMatchingValueCount(),DefaultMessagesImpl.getString(""String_Node_Str""),this.indicatorName);
      TOPChartUtils.getInstance().setValue(dataset,patternExt.getMatchingValueCount(),DefaultMessagesImpl.getString(""String_Node_Str""),this.indicatorName);
    }
 else {
      TOPChartUtils.getInstance().setValue(dataset,(Number)StringFormatUtil.format(indValue,StringFormatUtil.DOUBLE_NUMBER),indicatorName,indicatorName);
    }
  }
  if (tableViewer != null) {
    refreshTable(value == null ? NAN_STRING : String.valueOf(indValue));
  }
  EventManager.getInstance().publish(chartComposite,EventEnum.DQ_DYNAMIC_REFRESH_DYNAMIC_CHART,null);
  return true;
}","@Override public boolean handle(Object value){
  Object indValue=value;
  if (value == null) {
    indValue=0;
  }
  if (dataset != null) {
    settingDatasetValue(indValue);
  }
  if (tableViewer != null) {
    refreshTable(value == null ? NAN_STRING : String.valueOf(indValue));
  }
  EventManager.getInstance().publish(chartComposite,EventEnum.DQ_DYNAMIC_REFRESH_DYNAMIC_CHART,null);
  return true;
}",0.4278379920136908
136580,"public void clearValue(){
  if (dataset != null) {
    TOPChartUtils.getInstance().setValue(dataset,0.0,indicatorName,indicatorName);
  }
  if (tableViewer != null) {
    refreshTable(NAN_STRING);
  }
}","public void clearValue(){
  if (dataset != null) {
    clearDataset();
  }
  if (tableViewer != null) {
    refreshTable(NAN_STRING);
  }
}",0.7859237536656891
136581,"private void setFrequecyToDataset(Object customerdataset,FrequencyExt[] frequencyExt,Indicator indicator){
  int numOfShown=frequencyExt.length;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    if (parameters.getTopN() < numOfShown) {
      numOfShown=parameters.getTopN();
    }
  }
  FrequencyExt[] tempFreq=handleFrequency(frequencyExt);
  boolean withRowCountIndicator=FrequencyTypeStateUtil.isWithRowCountIndicator(indicator);
  for (int i=0; i < numOfShown; i++) {
    FrequencyExt freqExt=tempFreq[i];
    String keyLabel=String.valueOf(freqExt.getKey());
    if (""String_Node_Str"".equals(keyLabel)) {
      keyLabel=SpecialValueDisplay.NULL_FIELD;
    }
    if (""String_Node_Str"".equals(keyLabel)) {
      keyLabel=SpecialValueDisplay.EMPTY_FIELD;
    }
    addValueToDataset(customerdataset,freqExt,keyLabel);
    ChartDataEntity entity=FrequencyTypeStateUtil.createChartEntity(indicator,freqExt,keyLabel,withRowCountIndicator);
    if (customerdataset instanceof CustomerDefaultCategoryDataset) {
      ((CustomerDefaultCategoryDataset)customerdataset).addDataEntity(entity);
    }
  }
}","private void setFrequecyToDataset(Object customerdataset,FrequencyExt[] frequencyExt,Indicator indicator){
  int numOfShown=frequencyExt.length;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    if (parameters.getTopN() < numOfShown) {
      numOfShown=parameters.getTopN();
    }
  }
  FrequencyExt[] tempFreq=handleFrequency(frequencyExt);
  clearDataEntity(customerdataset);
  boolean withRowCountIndicator=FrequencyTypeStateUtil.isWithRowCountIndicator(indicator);
  for (int i=0; i < numOfShown; i++) {
    FrequencyExt freqExt=tempFreq[i];
    String keyLabel=String.valueOf(freqExt.getKey());
    if (""String_Node_Str"".equals(keyLabel)) {
      keyLabel=SpecialValueDisplay.NULL_FIELD;
    }
    if (""String_Node_Str"".equals(keyLabel)) {
      keyLabel=SpecialValueDisplay.EMPTY_FIELD;
    }
    ChartDataEntity entity=FrequencyTypeStateUtil.createChartEntity(indicator,freqExt,keyLabel,withRowCountIndicator);
    if (customerdataset instanceof CustomerDefaultCategoryDataset) {
      ((CustomerDefaultCategoryDataset)customerdataset).addDataEntity(entity);
      addValueToDataset(((CustomerDefaultCategoryDataset)customerdataset).getDataset(),freqExt,keyLabel);
    }
 else {
      ICustomerDataset customerDataset=TOPChartUtils.getInstance().getCustomerDataset(customerdataset);
      if (customerDataset != null && customerDataset instanceof CustomerDefaultCategoryDataset) {
        customerDataset.addDataEntity(entity);
        addValueToDataset(((CustomerDefaultCategoryDataset)customerDataset).getDataset(),freqExt,keyLabel);
      }
    }
  }
}",0.6253644314868805
136582,"/** 
 * DOC mzhao 2009-06-12 feature 5887 Comment method ""removeSupplierDependenciesBetweenModels"". This method removes supplier dependencies. See   {@link DependenciesHandler#removeDependenciesBetweenModels(ModelElement,List)}
 * @param elementFromRemove
 * @param elementToRemove
 * @return
 */
public List<Resource> removeSupplierDependenciesBetweenModels(ModelElement elementFromRemove,List<? extends ModelElement> elementToRemove){
  EList<Dependency> supplierDependencies;
  List<Resource> toRemoveResources=new ArrayList<Resource>();
  for (  ModelElement modelElement : elementToRemove) {
    toRemoveResources.add(modelElement.eResource());
  }
  supplierDependencies=elementFromRemove.getSupplierDependency();
  List<Resource> modifiedResources=new ArrayList<Resource>();
  for (  Dependency dependency : supplierDependencies) {
    EList<ModelElement> client=dependency.getClient();
    Iterator<ModelElement> dependencyIterator=client.iterator();
    while (dependencyIterator.hasNext()) {
      Resource clientResource=dependencyIterator.next().eResource();
      if (clientResource != null) {
        if (toRemoveResources.contains(clientResource)) {
          modifiedResources.add(clientResource);
          dependencyIterator.remove();
        }
      }
    }
  }
  return modifiedResources;
}","/** 
 * This method removes supplier dependencies. See  {@link DependenciesHandler#removeDependenciesBetweenModels(ModelElement,List)}
 * @param rule
 * @param analyses
 * @return
 */
public boolean removeSupplierDependenciesBetweenModels(ModelElement rule,List<? extends ModelElement> analyses){
  List<Resource> toRemoveResources=new ArrayList<Resource>();
  for (  ModelElement modelElement : analyses) {
    toRemoveResources.add(modelElement.eResource());
  }
  EList<Dependency> supplierDependencies=rule.getSupplierDependency();
  for (  Dependency dependency : supplierDependencies) {
    EList<ModelElement> client=dependency.getClient();
    Iterator<ModelElement> dependencyIterator=client.iterator();
    while (dependencyIterator.hasNext()) {
      Resource clientResource=dependencyIterator.next().eResource();
      if (clientResource != null) {
        if (toRemoveResources.contains(clientResource)) {
          dependencyIterator.remove();
        }
      }
    }
  }
  return true;
}",0.6487889273356401
136583,"/** 
 * DOC zshen Comment method ""removeClientDependency"".
 * @param client
 * @param supplier
 */
private void removeClientDependency(ModelElement client,ModelElement supplier){
  for (  Dependency dependency : client.getClientDependency()) {
    if (dependency.getKind() != null && USAGE.compareTo(dependency.getKind()) == 0) {
      EObject resolvedObject=ResourceHelper.resolveObject(dependency.getSupplier(),supplier);
      if (resolvedObject != null) {
        client.getClientDependency().remove(dependency);
        return;
      }
    }
  }
}","/** 
 * DOC zshen Comment method ""removeClientDependency"".
 * @param client
 * @param supplier
 */
public void removeClientDependency(ModelElement client,ModelElement supplier){
  for (  Dependency dependency : client.getClientDependency()) {
    if (dependency.getKind() != null && USAGE.compareTo(dependency.getKind()) == 0) {
      EObject resolvedObject=ResourceHelper.resolveObject(dependency.getSupplier(),supplier);
      if (resolvedObject != null) {
        client.getClientDependency().remove(dependency);
        return;
      }
    }
  }
}",0.9900271985494108
136584,"@Override protected ReturnCode removeDependencies(Item item){
  ReturnCode rc=new ReturnCode();
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  Analysis analysis=anaItem.getAnalysis();
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(anaItem.getProperty());
  List<ModelElement> clientDepListByResultList=getClientDepListByResult(analysis);
  for (  Property currentClient : clintDependency) {
    ModelElement modelElement=PropertyHelper.getModelElement(currentClient);
    if (!clientDepListByResultList.contains(modelElement)) {
      boolean isSuccess=DependenciesHandler.getInstance().removeDependenciesBetweenModel(analysis,modelElement);
      if (isSuccess) {
        try {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(modelElement.eResource());
        }
 catch (        PersistenceException e) {
          log.error(e,e);
          rc.setOk(false);
          rc.setMessage(e.getMessage());
        }
      }
 else {
        rc.setOk(false);
        rc.setMessage(Messages.getString(""String_Node_Str"",analysis.getName(),modelElement.getName()));
      }
    }
  }
  return rc;
}","@Override protected ReturnCode removeDependencies(Item item){
  ReturnCode rc=new ReturnCode();
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  Analysis analysis=anaItem.getAnalysis();
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(anaItem.getProperty());
  List<ModelElement> clientDepListByResultList=DependenciesHandler.getInstance().getClientDepListByResult(analysis);
  for (  Property currentClient : clintDependency) {
    ModelElement modelElement=PropertyHelper.getModelElement(currentClient);
    if (!clientDepListByResultList.contains(modelElement)) {
      boolean isSuccess=DependenciesHandler.getInstance().removeDependenciesBetweenModel(analysis,modelElement);
      if (isSuccess) {
        try {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(modelElement.eResource());
        }
 catch (        PersistenceException e) {
          log.error(e,e);
          rc.setOk(false);
          rc.setMessage(e.getMessage());
        }
      }
 else {
        rc.setOk(false);
        rc.setMessage(Messages.getString(""String_Node_Str"",analysis.getName(),modelElement.getName()));
      }
    }
  }
  return rc;
}",0.9860082304526748
136585,"/** 
 * Save item with dependencies.
 * @param element
 * @throws PersistenceException
 */
protected ReturnCode saveWithDependencies(Item item,ModelElement element) throws PersistenceException {
  ReturnCode rc=new ReturnCode();
  removeDependencies(item);
  addDependencies(element);
  addResourceContent(element.eResource(),element);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(element.eResource());
  Set<EObject> needSaves=new HashSet<EObject>();
  for (  EObject object : find.keySet()) {
    Resource re=object.eResource();
    if (re == null) {
      continue;
    }
    DQRepositoryNode node=RepositoryNodeHelper.recursiveFind((ModelElement)object);
    if (node != null && !node.getProject().isMainProject()) {
      continue;
    }
    if (!re.getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
      continue;
    }
    EcoreUtil.resolveAll(re);
    needSaves.add(object);
  }
  if (item instanceof TDQItem) {
    setTDQItemFileName(element,item);
  }
  ProxyRepositoryFactory.getInstance().save(item);
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    for (    EObject toSave : needSaves) {
      DQRepositoryNode node=RepositoryNodeHelper.recursiveFind((ModelElement)toSave);
      if (node != null && !node.getProject().isMainProject()) {
        continue;
      }
      toSave=EObjectHelper.resolveObject(toSave);
      if (!toSave.eResource().getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
        continue;
      }
      resChangeService.saveResourceByEMFShared(toSave.eResource());
    }
  }
  return rc;
}","/** 
 * Save item with dependencies.
 * @param element
 * @throws PersistenceException
 */
protected ReturnCode saveWithDependencies(Item item,ModelElement element) throws PersistenceException {
  ReturnCode rc=new ReturnCode();
  removeDependencies(item);
  addDependencies(element);
  addResourceContent(element.eResource(),element);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(element.eResource());
  Set<EObject> needSaves=new HashSet<EObject>();
  for (  EObject object : find.keySet()) {
    Resource re=object.eResource();
    if (re == null) {
      continue;
    }
    if (ProjectManager.getInstance().getCurrentProject().isMainProject()) {
      continue;
    }
    if (!re.getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
      continue;
    }
    EcoreUtil.resolveAll(re);
    needSaves.add(object);
  }
  if (item instanceof TDQItem) {
    setTDQItemFileName(element,item);
  }
  ProxyRepositoryFactory.getInstance().save(item);
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    for (    EObject toSave : needSaves) {
      if (ProjectManager.getInstance().getCurrentProject().isMainProject()) {
        continue;
      }
      toSave=EObjectHelper.resolveObject(toSave);
      if (!toSave.eResource().getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
        continue;
      }
      resChangeService.saveResourceByEMFShared(toSave.eResource());
    }
  }
  return rc;
}",0.9113043478260868
136586,"@Override public boolean handle(Object value){
  Object indValue=value;
  if (value == null) {
    indValue=0;
  }
  if (dataset != null) {
    if (indValue instanceof FrequencyExt[]) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])indValue;
      setFrequecyToDataset(dataset,frequencyExt,indicator);
    }
  }
  if (tableViewer != null) {
    TableWithData input=(TableWithData)tableViewer.getInput();
    if (input != null) {
      if (this.indicator instanceof ModeIndicator) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setIndicator(indicator);
        entity.setLabel(this.indicatorName);
        entity.setValue(String.valueOf(indValue));
        input.setEntities(new ChartDataEntity[]{entity});
      }
 else {
        ICustomerDataset customerDataset=TOPChartUtils.getInstance().getCustomerDataset(dataset);
        if (customerDataset != null) {
          input.setEntities((customerDataset).getDataEntities());
        }
 else {
          input.setEntities(((ICustomerDataset)dataset).getDataEntities());
        }
      }
    }
    if (!tableViewer.getTable().isDisposed()) {
      tableViewer.getTable().clearAll();
      tableViewer.setInput(input);
    }
  }
  if (registerChart != TOPChartUtils.getInstance().getChartFromChartComposite(parentChartComposite)) {
    restoreChart();
  }
  if (!(indicator instanceof ModeIndicator)) {
    EventManager.getInstance().publish(chartComposite,EventEnum.DQ_DYNAMIC_REFRESH_DYNAMIC_CHART,null);
  }
  return true;
}","@Override public boolean handle(Object value){
  Object indValue=value;
  if (value == null) {
    indValue=0;
  }
  if (dataset != null) {
    if (indValue instanceof FrequencyExt[]) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])indValue;
      setFrequecyToDataset(dataset,frequencyExt,indicator);
    }
  }
  if (tableViewer != null && dataset != null) {
    TableWithData input=(TableWithData)tableViewer.getInput();
    if (input != null) {
      if (this.indicator instanceof ModeIndicator) {
        ChartDataEntity entity=new ChartDataEntity();
        entity.setIndicator(indicator);
        entity.setLabel(this.indicatorName);
        entity.setValue(String.valueOf(indValue));
        input.setEntities(new ChartDataEntity[]{entity});
      }
 else {
        ICustomerDataset customerDataset=TOPChartUtils.getInstance().getCustomerDataset(dataset);
        if (customerDataset != null) {
          input.setEntities((customerDataset).getDataEntities());
        }
 else {
          input.setEntities(((ICustomerDataset)dataset).getDataEntities());
        }
      }
    }
    if (!tableViewer.getTable().isDisposed()) {
      tableViewer.getTable().clearAll();
      tableViewer.setInput(input);
    }
  }
  if (registerChart != TOPChartUtils.getInstance().getChartFromChartComposite(parentChartComposite)) {
    restoreChart();
  }
  if (!(indicator instanceof ModeIndicator)) {
    EventManager.getInstance().publish(chartComposite,EventEnum.DQ_DYNAMIC_REFRESH_DYNAMIC_CHART,null);
  }
  return true;
}",0.9937190082644628
136587,"/** 
 * @param contentProvider, use diffirent ContentProvider for Match analysis and column analysis.
 */
public ColumnAnalysisDOSelectionPage(ResourceViewContentProvider contentProvider){
  super(DefaultMessagesImpl.getString(""String_Node_Str""),chooseConnStr,DefaultMessagesImpl.getString(""String_Node_Str""),contentProvider,true);
  setPageComplete(true);
}","/** 
 * @param contentProvider, use diffirent ContentProvider for Match analysis and column analysis.
 */
public ColumnAnalysisDOSelectionPage(ResourceViewContentProvider contentProvider){
  super(DefaultMessagesImpl.getString(""String_Node_Str""),chooseConnStr,DefaultMessagesImpl.getString(""String_Node_Str""),contentProvider,true);
  setPageComplete(false);
}",0.99023709902371
136588,public void fireRuningItemChanged(boolean status);,"public void fireRuningItemChanged(boolean status,boolean isSupportDynamicChart);",0.7692307692307693
136589,"@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  final boolean isSupportDynamicChart=isSupportDynamicChart();
  monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",item.getAnalysis().getName()),5);
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      if (listener != null) {
        listener.fireRuningItemChanged(false);
      }
      if (isSupportDynamicChart) {
        EventManager.getInstance().publish(item.getAnalysis(),EventEnum.DQ_DYNAMIC_REGISTER_DYNAMIC_CHART,null);
      }
    }
  }
);
  ReturnCode executed=null;
  try {
    executed=AnalysisExecutorSelector.executeAnalysis(item,monitor);
    if (monitor.isCanceled()) {
      TdqAnalysisConnectionPool.closeConnectionPool(item.getAnalysis());
      executed=new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      monitor.done();
      if (isNeedUnlock) {
        unlockAnalysis();
      }
      return Status.CANCEL_STATUS;
    }
    if (isNeedUnlock) {
      unlockAnalysis();
    }
  }
  finally {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        if (isSupportDynamicChart) {
          EventManager.getInstance().publish(item.getAnalysis(),EventEnum.DQ_DYNAMIC_UNREGISTER_DYNAMIC_CHART,null);
        }
        if (listener != null) {
          listener.fireRuningItemChanged(true);
        }
 else {
          EventManager.getInstance().publish(item.getAnalysis(),EventEnum.DQ_ANALYSIS_RUN_FROM_MENU,null);
        }
      }
    }
);
  }
  displayResultStatus(executed);
  addAnalysisToRef(item.getAnalysis());
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
  final boolean isSupportDynamicChart=isSupportDynamicChart();
  monitor.beginTask(DefaultMessagesImpl.getString(""String_Node_Str"",item.getAnalysis().getName()),5);
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      if (listener != null) {
        listener.fireRuningItemChanged(false,isSupportDynamicChart);
      }
      if (isSupportDynamicChart) {
        EventManager.getInstance().publish(item.getAnalysis(),EventEnum.DQ_DYNAMIC_REGISTER_DYNAMIC_CHART,null);
      }
    }
  }
);
  ReturnCode executed=null;
  try {
    executed=AnalysisExecutorSelector.executeAnalysis(item,monitor);
    if (monitor.isCanceled()) {
      TdqAnalysisConnectionPool.closeConnectionPool(item.getAnalysis());
      executed=new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false);
      monitor.done();
      if (isNeedUnlock) {
        unlockAnalysis();
      }
      return Status.CANCEL_STATUS;
    }
    if (isNeedUnlock) {
      unlockAnalysis();
    }
  }
  finally {
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        if (isSupportDynamicChart) {
          EventManager.getInstance().publish(item.getAnalysis(),EventEnum.DQ_DYNAMIC_UNREGISTER_DYNAMIC_CHART,null);
        }
        if (listener != null) {
          listener.fireRuningItemChanged(true);
        }
 else {
          EventManager.getInstance().publish(item.getAnalysis(),EventEnum.DQ_ANALYSIS_RUN_FROM_MENU,null);
        }
      }
    }
);
  }
  displayResultStatus(executed);
  addAnalysisToRef(item.getAnalysis());
  monitor.done();
  return Status.OK_STATUS;
}",0.9934289127837514
136590,"public void fireRuningItemChanged(boolean status){
  ((AnalysisEditor)currentEditor).setRunActionButtonState(status);
  ((AnalysisEditor)currentEditor).setRefreshResultPage(status);
  if (!status) {
    switchToResultPage();
  }
}","public void fireRuningItemChanged(boolean status,boolean isSupportDynamicChart){
  ((AnalysisEditor)currentEditor).setRunActionButtonState(status);
  ((AnalysisEditor)currentEditor).setRefreshResultPage(isSupportDynamicChart);
  if (!status) {
    switchToResultPage();
  }
}",0.8871287128712871
136591,"public void fireRuningItemChanged(boolean status){
  ((AnalysisEditor)currentEditor).setRunActionButtonState(status);
  ((AnalysisEditor)currentEditor).setRefreshResultPage(status);
  IEditorPart editor=CorePlugin.getDefault().getCurrentActiveEditor();
  if (editor instanceof AnalysisEditor && status) {
    refresh(((AnalysisEditor)editor).getMasterPage());
  }
}","public void fireRuningItemChanged(boolean status,boolean isSupportDynamicChart){
  ((AnalysisEditor)currentEditor).setRunActionButtonState(status);
  ((AnalysisEditor)currentEditor).setRefreshResultPage(isSupportDynamicChart);
  IEditorPart editor=CorePlugin.getDefault().getCurrentActiveEditor();
  if (editor instanceof AnalysisEditor && status) {
    refresh(((AnalysisEditor)editor).getMasterPage());
  }
}",0.9264516129032258
136592,"/** 
 * Added TDQ-8787 20140613 yyin: create all charts before running, register each chart with its related indicator.
 */
public void registerDynamicEvent(){
  List<DynamicIndicatorModel> indiAndDatasets=uiPagination.getAllIndcatorAndDatasetOfCurrentPage();
  for (  DynamicIndicatorModel oneCategoryIndicatorModel : indiAndDatasets) {
    TableViewer tableViewer=oneCategoryIndicatorModel.getTableViewer();
    if (EIndicatorChartType.SUMMARY_STATISTICS.equals(oneCategoryIndicatorModel.getChartType())) {
      DynamicBAWChartEventReceiver bawReceiver=AnalysisUtils.createDynamicBAWChartEventReceiver(oneCategoryIndicatorModel,eventReceivers);
      bawReceiver.setChartComposite(chartComposite);
      bawReceiver.setTableViewer(tableViewer);
    }
 else {
      int index=0;
      for (      Indicator oneIndicator : oneCategoryIndicatorModel.getIndicatorList()) {
        DynamicChartEventReceiver eReceiver=AnalysisUtils.createDynamicChartEventReceiver(oneCategoryIndicatorModel,index++,oneIndicator);
        eReceiver.setChartComposite(chartComposite);
        eReceiver.setTableViewer(tableViewer);
        eReceiver.clearValue();
        registerIndicatorEvent(oneIndicator,eReceiver);
      }
    }
  }
  reLayoutChartComposite();
  registerOtherDynamicEvent();
}","/** 
 * Added TDQ-8787 20140613 yyin: create all charts before running, register each chart with its related indicator.
 */
public void registerDynamicEvent(){
  List<DynamicIndicatorModel> indiAndDatasets=uiPagination.getAllIndcatorAndDatasetOfCurrentPage();
  for (  DynamicIndicatorModel oneCategoryIndicatorModel : indiAndDatasets) {
    TableViewer tableViewer=oneCategoryIndicatorModel.getTableViewer();
    if (EIndicatorChartType.SUMMARY_STATISTICS.equals(oneCategoryIndicatorModel.getChartType())) {
      DynamicBAWChartEventReceiver bawReceiver=AnalysisUtils.createDynamicBAWChartEventReceiver(oneCategoryIndicatorModel,eventReceivers);
      bawReceiver.setChartComposite(chartComposite);
      bawReceiver.refreshChart();
      bawReceiver.setTableViewer(tableViewer);
    }
 else {
      int index=0;
      for (      Indicator oneIndicator : oneCategoryIndicatorModel.getIndicatorList()) {
        DynamicChartEventReceiver eReceiver=AnalysisUtils.createDynamicChartEventReceiver(oneCategoryIndicatorModel,index++,oneIndicator);
        eReceiver.setChartComposite(chartComposite);
        eReceiver.setParentChartComposite((Composite)oneCategoryIndicatorModel.getBawParentChartComp());
        eReceiver.refreshChart();
        eReceiver.setTableViewer(tableViewer);
        eReceiver.clearValue();
        registerIndicatorEvent(oneIndicator,eReceiver);
      }
    }
  }
  reLayoutChartComposite();
  registerOtherDynamicEvent();
}",0.93651376146789
136593,"/** 
 * DOC bZhou Comment method ""createChart"".
 * @param comp
 * @param chartType
 * @param units
 */
private void createChart(final Composite comp,EIndicatorChartType chartType,List<IndicatorUnit> units){
  DynamicIndicatorModel dyModel=new DynamicIndicatorModel();
  Object chart=null;
  Object dataset=null;
  IEventReceiver event=EventManager.getInstance().findRegisteredEvent(units.get(0).getIndicator(),EventEnum.DQ_DYMANIC_CHART,0);
  if (event != null) {
    dataset=((DynamicChartEventReceiver)event).getDataset();
  }
  List<Indicator> indicators=null;
  dyModel.setChartType(chartType);
  this.dynamicList.add(dyModel);
  if (EIndicatorChartType.SUMMARY_STATISTICS.equals(chartType)) {
    dyModel.setSummaryIndicators(getIndicatorsForTable(units,true));
  }
  ExpandableComposite subComp=uiPagination.getToolkit().createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
  subComp.setText(chartType.getLiteral());
  subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  subComp.setExpanded(EditorPreferencePage.isUnfoldingIndicatorsResultPage());
  final Composite composite=uiPagination.getToolkit().createComposite(subComp,SWT.NULL);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
  ITableTypeStates tableTypeState=TableTypeStatesFactory.getInstance().getTableState(chartType,units);
  ChartDataEntity[] dataEntities=tableTypeState.getDataEntity();
  TableWithData chartData=new TableWithData(chartType,dataEntities);
  TableViewer tableviewer=tableTypeState.getTableForm(composite);
  tableviewer.setInput(chartData);
  tableviewer.getTable().pack();
  dyModel.setTableViewer(tableviewer);
  DataExplorer dataExplorer=tableTypeState.getDataExplorer();
  ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
  if (EIndicatorChartType.TEXT_STATISTICS.equals(chartType) && dataEntities != null && dataEntities.length > 0) {
    indicators=getIndicators(dataEntities);
  }
 else {
    indicators=getIndicators(units);
  }
  dyModel.setIndicatorList(indicators);
  try {
    if (!EditorPreferencePage.isHideGraphicsForResultPage() && TOPChartUtils.getInstance().isTOPChartInstalled()) {
      IChartTypeStates chartTypeState=ChartTypeStatesFactory.getChartState(chartType,units);
      boolean isPattern=chartTypeState instanceof PatternStatisticsState;
      if (event == null) {
        chart=chartTypeState.getChart();
        if (chart != null && isSQLMode) {
          if (EIndicatorChartType.BENFORD_LAW_STATISTICS.equals(chartType)) {
            dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,1);
            dyModel.setSecondDataset(TOPChartUtils.getInstance().getDatasetFromChart(chart,0));
          }
 else {
            dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,-1);
          }
        }
      }
 else {
        chart=chartTypeState.getChart(dataset);
      }
      dyModel.setDataset(dataset);
      if (chart != null) {
        if (!isPattern) {
          TOPChartUtils.getInstance().decorateChart(chart,false);
        }
 else {
          TOPChartUtils.getInstance().decoratePatternMatching(chart);
        }
        Object chartComposite=TOPChartUtils.getInstance().createTalendChartComposite(composite,SWT.NONE,chart,true);
        if (EIndicatorChartType.SUMMARY_STATISTICS.equals(chartType)) {
          dyModel.setBawParentChartComp(chartComposite);
        }
        Map<String,Object> menuMap=createMenuForAllDataEntity(((Composite)chartComposite).getShell(),dataExplorer,analysis,((ICustomerDataset)chartTypeState.getDataset()).getDataEntities());
        if (EIndicatorChartType.BENFORD_LAW_STATISTICS.equals(chartType) || EIndicatorChartType.FREQUENCE_STATISTICS.equals(chartType)) {
          TOPChartUtils.getInstance().addMouseListenerForChart(chartComposite,menuMap,false);
        }
 else {
          TOPChartUtils.getInstance().addMouseListenerForChart(chartComposite,menuMap,true);
        }
      }
    }
  }
 catch (  Error e) {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str""),e);
  }
catch (  Exception exp) {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str""),exp);
  }
  subComp.setClient(composite);
  subComp.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      form.reflow(true);
    }
  }
);
  masterPage.registerSection(subComp);
}","/** 
 * DOC bZhou Comment method ""createChart"".
 * @param comp
 * @param chartType
 * @param units
 */
private void createChart(final Composite comp,EIndicatorChartType chartType,List<IndicatorUnit> units){
  DynamicIndicatorModel dyModel=new DynamicIndicatorModel();
  Object chart=null;
  Object dataset=null;
  IEventReceiver event=EventManager.getInstance().findRegisteredEvent(units.get(0).getIndicator(),EventEnum.DQ_DYMANIC_CHART,0);
  if (event != null) {
    dataset=((DynamicChartEventReceiver)event).getDataset();
  }
  List<Indicator> indicators=null;
  dyModel.setChartType(chartType);
  this.dynamicList.add(dyModel);
  if (EIndicatorChartType.SUMMARY_STATISTICS.equals(chartType)) {
    dyModel.setSummaryIndicators(getIndicatorsForTable(units,true));
  }
  ExpandableComposite subComp=uiPagination.getToolkit().createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
  subComp.setText(chartType.getLiteral());
  subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  subComp.setExpanded(EditorPreferencePage.isUnfoldingIndicatorsResultPage());
  final Composite composite=uiPagination.getToolkit().createComposite(subComp,SWT.NULL);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
  ITableTypeStates tableTypeState=TableTypeStatesFactory.getInstance().getTableState(chartType,units);
  ChartDataEntity[] dataEntities=tableTypeState.getDataEntity();
  TableWithData chartData=new TableWithData(chartType,dataEntities);
  TableViewer tableviewer=tableTypeState.getTableForm(composite);
  tableviewer.setInput(chartData);
  tableviewer.getTable().pack();
  dyModel.setTableViewer(tableviewer);
  DataExplorer dataExplorer=tableTypeState.getDataExplorer();
  ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
  if (EIndicatorChartType.TEXT_STATISTICS.equals(chartType) && dataEntities != null && dataEntities.length > 0) {
    indicators=getIndicators(dataEntities);
  }
 else {
    indicators=getIndicators(units);
  }
  dyModel.setIndicatorList(indicators);
  try {
    if (!EditorPreferencePage.isHideGraphicsForResultPage() && TOPChartUtils.getInstance().isTOPChartInstalled()) {
      IChartTypeStates chartTypeState=ChartTypeStatesFactory.getChartState(chartType,units);
      boolean isPattern=chartTypeState instanceof PatternStatisticsState;
      if (event == null) {
        chart=chartTypeState.getChart();
        if (chart != null && isSQLMode) {
          if (EIndicatorChartType.BENFORD_LAW_STATISTICS.equals(chartType)) {
            dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,2);
            if (dataset == null) {
              dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,1);
            }
            dyModel.setSecondDataset(TOPChartUtils.getInstance().getDatasetFromChart(chart,0));
          }
 else {
            dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,1);
            if (dataset == null) {
              dataset=TOPChartUtils.getInstance().getDatasetFromChart(chart,-1);
            }
          }
        }
      }
 else {
        chart=chartTypeState.getChart(dataset);
      }
      dyModel.setDataset(dataset);
      if (chart != null) {
        if (!isPattern) {
          TOPChartUtils.getInstance().decorateChart(chart,false);
        }
 else {
          TOPChartUtils.getInstance().decoratePatternMatching(chart);
        }
        Object chartComposite=TOPChartUtils.getInstance().createTalendChartComposite(composite,SWT.NONE,chart,true);
        dyModel.setBawParentChartComp(chartComposite);
        Map<String,Object> menuMap=createMenuForAllDataEntity(((Composite)chartComposite).getShell(),dataExplorer,analysis,((ICustomerDataset)chartTypeState.getDataset()).getDataEntities());
        if (EIndicatorChartType.BENFORD_LAW_STATISTICS.equals(chartType) || EIndicatorChartType.FREQUENCE_STATISTICS.equals(chartType)) {
          TOPChartUtils.getInstance().addMouseListenerForChart(chartComposite,menuMap,false);
        }
 else {
          TOPChartUtils.getInstance().addMouseListenerForChart(chartComposite,menuMap,true);
        }
      }
    }
  }
 catch (  Error e) {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str""),e);
  }
catch (  Exception exp) {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str""),exp);
  }
  subComp.setClient(composite);
  subComp.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      form.reflow(true);
    }
  }
);
  masterPage.registerSection(subComp);
}",0.954152249134948
136594,"public CustomerDefaultBAWDataset(Double mean,Double median,Double q1,Double q3,Double minRegularValue,Double maxRegularValue){
  dataEnities=new ArrayList<ChartDataEntity>();
  bawDataset=TOPChartUtils.getInstance().createDefaultBoxAndWhiskerCategoryDataset(mean,median,q1,q3,minRegularValue,maxRegularValue);
}","/** 
 * DOC zshen CustomerDefaultBAWDataset constructor comment.
 * @param mean
 * @param median
 * @param q1
 * @param q3
 * @param minRegularValue
 * @param maxRegularValue
 * @param defaultCategoryDataset should be DefaultCategoryDataset type
 */
public CustomerDefaultBAWDataset(Double mean,Double median,Double q1,Double q3,Double minRegularValue,Double maxRegularValue,Object defaultCategoryDataset){
  this(mean,median,q1,q3,minRegularValue,maxRegularValue);
  this.defaultCategoryDataset=defaultCategoryDataset;
}",0.2451923076923076
136595,"public ICustomerDataset getCustomerDataset(){
  Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    String value=summaryUtil.getUnitValue(unit);
    if (Java2SqlType.isNumbericInSQL(sqltype)) {
      try {
        map.put(unit.getType(),Double.parseDouble(value));
      }
 catch (      Exception e) {
        log.error(e.getMessage(),e);
      }
    }
    ChartDataEntity entity=summaryUtil.createDataEntity(unit,value);
    customerdataset.addDataEntity(entity);
  }
  if (isIntact()) {
    CustomerDefaultBAWDataset dataset=new CustomerDefaultBAWDataset(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum));
    dataset.addDataEntity(customerdataset.getDataEntities());
    return dataset;
  }
 else {
    map.remove(IndicatorEnum.RangeIndicatorEnum);
    map.remove(IndicatorEnum.IQRIndicatorEnum);
    for (    IndicatorEnum indicatorEnum : map.keySet()) {
      customerdataset.addValue(map.get(indicatorEnum),indicatorEnum.getLabel(),indicatorEnum.getLabel());
    }
    return customerdataset;
  }
}","public ICustomerDataset getCustomerDataset(){
  Map<IndicatorEnum,Double> map=new HashMap<IndicatorEnum,Double>();
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  for (  IndicatorUnit unit : units) {
    String value=null;
    if (indicators2ValueMap.containsKey(unit)) {
      value=indicators2ValueMap.get(unit);
    }
 else {
      value=summaryUtil.getUnitValue(unit);
    }
    if (Java2SqlType.isNumbericInSQL(sqltype)) {
      try {
        map.put(unit.getType(),Double.parseDouble(value));
      }
 catch (      Exception e) {
        log.error(e.getMessage(),e);
      }
    }
    ChartDataEntity entity=summaryUtil.createDataEntity(unit,value);
    customerdataset.addDataEntity(entity);
  }
  if (isIntact() && !isSupportDynamicChart) {
    CustomerDefaultBAWDataset dataset=new CustomerDefaultBAWDataset(map.get(IndicatorEnum.MeanIndicatorEnum),map.get(IndicatorEnum.MedianIndicatorEnum),map.get(IndicatorEnum.LowerQuartileIndicatorEnum),map.get(IndicatorEnum.UpperQuartileIndicatorEnum),map.get(IndicatorEnum.MinValueIndicatorEnum),map.get(IndicatorEnum.MaxValueIndicatorEnum),customerdataset);
    dataset.addDataEntity(customerdataset.getDataEntities());
    return dataset;
  }
 else {
    if (!isIntact()) {
      map.remove(IndicatorEnum.RangeIndicatorEnum);
      map.remove(IndicatorEnum.IQRIndicatorEnum);
    }
    for (    IndicatorEnum indicatorEnum : map.keySet()) {
      customerdataset.addValue(map.get(indicatorEnum),indicatorEnum.getLabel(),indicatorEnum.getLabel());
    }
    return customerdataset;
  }
}",0.9305790721300372
136596,"public SummaryStatisticsState(List<IndicatorUnit> units){
  summaryUtil=new SummaryStatisticsStateUtil();
  if (units != null) {
    this.units.addAll(summaryUtil.check(units));
  }
  sqltype=summaryUtil.findSqlType(units);
}","public SummaryStatisticsState(List<IndicatorUnit> units,Map<IndicatorUnit,String> indicators2ValueMap){
  this(units);
  this.indicators2ValueMap=indicators2ValueMap;
}",0.376590330788804
136597,"/** 
 * DOC yyin Comment method ""createChart"".
 * @param dataset
 * @return
 */
private Object createChart(Object dataset){
  String categoryAxisLabel=DefaultMessagesImpl.getString(""String_Node_Str"");
  String axisXLabel=DefaultMessagesImpl.getString(""String_Node_Str"");
  return TOPChartUtils.getInstance().createBenfordChart(axisXLabel,categoryAxisLabel,dataset,dotChartLabels,formalValues,axisXLabel);
}","/** 
 * DOC yyin Comment method ""createChart"".
 * @param dataset
 * @return
 */
private Object createChart(Object dataset){
  String categoryAxisLabel=DefaultMessagesImpl.getString(""String_Node_Str"");
  String axisXLabel=DefaultMessagesImpl.getString(""String_Node_Str"");
  return TOPChartUtils.getInstance().createBenfordChartByKCD(axisXLabel,categoryAxisLabel,dataset,dotChartLabels,formalValues,axisXLabel);
}",0.9938800489596084
136598,"public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  boolean withRowCountIndicator=isWithRowCountIndicator();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted()) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      sortIndicator(frequencyExt);
      int numOfShown=FrequencyTypeStateUtil.getNumberOfShown(unit,frequencyExt);
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=FrequencyTypeStateUtil.getKeyLabel(freqExt);
        setValueToDataset(customerdataset,freqExt,keyLabel);
        ChartDataEntity entity=FrequencyTypeStateUtil.createChartEntity(unit.getIndicator(),freqExt,keyLabel,withRowCountIndicator);
        customerdataset.addDataEntity(entity);
      }
    }
 else {
      ChartDataEntity entity=FrequencyTypeStateUtil.createChartEntity(unit.getIndicator(),null,SpecialValueDisplay.EMPTY_FIELD,false);
      FrequencyExt fre=new FrequencyExt();
      fre.setValue(0l);
      fre.setFrequency(0d);
      setValueToDataset(customerdataset,fre,unit.getIndicatorName());
      customerdataset.addDataEntity(entity);
    }
  }
  return customerdataset;
}","public ICustomerDataset getCustomerDataset(){
  CustomerDefaultCategoryDataset customerdataset=new CustomerDefaultCategoryDataset();
  boolean withRowCountIndicator=isWithRowCountIndicator();
  for (  IndicatorUnit unit : units) {
    if (unit.isExcuted() && !this.isSupportDynamicChart) {
      FrequencyExt[] frequencyExt=(FrequencyExt[])unit.getValue();
      sortIndicator(frequencyExt);
      int numOfShown=FrequencyTypeStateUtil.getNumberOfShown(unit,frequencyExt);
      for (int i=0; i < numOfShown; i++) {
        FrequencyExt freqExt=frequencyExt[i];
        String keyLabel=FrequencyTypeStateUtil.getKeyLabel(freqExt);
        setValueToDataset(customerdataset,freqExt,keyLabel);
        ChartDataEntity entity=FrequencyTypeStateUtil.createChartEntity(unit.getIndicator(),freqExt,keyLabel,withRowCountIndicator);
        customerdataset.addDataEntity(entity);
      }
    }
 else {
      ChartDataEntity entity=FrequencyTypeStateUtil.createChartEntity(unit.getIndicator(),null,SpecialValueDisplay.EMPTY_FIELD,false);
      FrequencyExt fre=new FrequencyExt();
      fre.setValue(0l);
      fre.setFrequency(0d);
      setValueToDataset(customerdataset,fre,unit.getIndicatorName());
      customerdataset.addDataEntity(entity);
    }
  }
  return customerdataset;
}",0.9877032923443078
136599,"@Override public Object getChart(Object dataset){
  return TOPChartUtils.getInstance().createBarChart(DefaultMessagesImpl.getString(""String_Node_Str""),dataset);
}","@Override public Object getChart(Object dataset){
  return TOPChartUtils.getInstance().createBarChartByKCD(DefaultMessagesImpl.getString(""String_Node_Str""),dataset);
}",0.9848024316109424
136600,"public DynamicChartEventReceiver createEventReceiver(IndicatorEnum type,Indicator oneIndicator){
  DynamicChartEventReceiver eReceiver=new DynamicChartEventReceiver(){
    @Override public boolean handle(    Object value){
      if (isIntact()) {
        addToSummaryMap(getIndicatorType(),value);
        if (this.getTableViewer() != null) {
          String str=value == null ? String.valueOf(Double.NaN) : String.valueOf(value);
          this.refreshTable(str);
        }
      }
 else {
        super.handle(value);
        updateValueOfIRQAndRange();
      }
      return true;
    }
  }
;
  eReceiver.setIndicatorType(type);
  eReceiver.setIndicatorName(oneIndicator.getName());
  indicators.add(new ColumnIndicatorUnit(type,oneIndicator,null));
  if (IndicatorEnum.IQRIndicatorEnum.equals(type)) {
    this.IRQIndicator=oneIndicator;
    this.IRQIndicatorEvent=eReceiver;
  }
 else   if (IndicatorEnum.RangeIndicatorEnum.equals(type)) {
    this.rangeIndicator=oneIndicator;
    this.rangeIndicatorEvent=eReceiver;
  }
  return eReceiver;
}","public DynamicChartEventReceiver createEventReceiver(IndicatorEnum type,Indicator oneIndicator){
  DynamicChartEventReceiver eReceiver=new DynamicChartEventReceiver(){
    @Override public boolean handle(    Object value){
      super.handle(value);
      addToSummaryMap(getIndicatorType(),value);
      if (isIntact()) {
        if (this.getTableViewer() != null) {
          String str=value == null ? String.valueOf(Double.NaN) : String.valueOf(value);
          this.refreshTable(str);
        }
      }
 else {
        updateValueOfIRQAndRange();
      }
      return true;
    }
  }
;
  eReceiver.setIndicatorType(type);
  eReceiver.setIndicatorName(oneIndicator.getName());
  indicators.add(new ColumnIndicatorUnit(type,oneIndicator,null));
  if (IndicatorEnum.IQRIndicatorEnum.equals(type)) {
    this.IRQIndicator=oneIndicator;
    this.IRQIndicatorEvent=eReceiver;
  }
 else   if (IndicatorEnum.RangeIndicatorEnum.equals(type)) {
    this.rangeIndicator=oneIndicator;
    this.rangeIndicatorEvent=eReceiver;
  }
  return eReceiver;
}",0.9550669216061184
136601,"private void refreshChart(){
  if (isIntact()) {
    updateValueOfIRQAndRange();
  }
 else {
    if (summaryValues.size() == SummaryStatisticsState.FULL_CHART) {
      SummaryStatisticsState state=new SummaryStatisticsState(indicators);
      state.setSqltype(Types.DOUBLE);
      Object chart=state.getChart();
      TOPChartUtils.getInstance().decorateChart(chart,false);
      if (BAWparentComposite != null) {
        TOPChartUtils.getInstance().refrechChart(BAWparentComposite,chart);
      }
      EventManager.getInstance().publish(chartComposite,EventEnum.DQ_DYNAMIC_REFRESH_DYNAMIC_CHART,null);
      updateValueOfIRQAndRange();
      summaryValues.clear();
      indicators.clear();
    }
  }
}","@Override public void refreshChart(){
  Map<IndicatorUnit,String> indicators2ValueMap=converIndicatorListToMap();
  SummaryStatisticsState state=new SummaryStatisticsState(indicators,indicators2ValueMap);
  state.setSupportDynamicChart(true);
  state.setSqltype(Types.DOUBLE);
  Object chart=state.getChart();
  TOPChartUtils.getInstance().decorateChart(chart,false);
  if (BAWparentComposite != null) {
    TOPChartUtils.getInstance().refrechChart(BAWparentComposite,chart);
  }
  EventManager.getInstance().publish(chartComposite,EventEnum.DQ_DYNAMIC_REFRESH_DYNAMIC_CHART,null);
}",0.5936285936285937
136602,"/** 
 * zshen Comment method ""initializeIndicator"".
 * @param indicator
 */
public void initializeIndicator(Indicator indicator){
  if (indicator.getIndicatorDefinition() == null || indicator.getIndicatorDefinition().eIsProxy()) {
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
  }
  if (indicator instanceof CompositeIndicator) {
    for (    Indicator child : ((CompositeIndicator)indicator).getChildIndicators()) {
      if (child.getAnalyzedElement() == null) {
        child.setAnalyzedElement(indicator.getAnalyzedElement());
      }
      initializeIndicator(child);
    }
  }
  if (indicator instanceof PatternMatchingIndicator) {
    Pattern pattern=indicator.getParameters().getDataValidDomain().getPatterns().get(0);
    if (!StringUtils.equals(indicator.getName(),pattern.getName())) {
      indicator.setName(pattern.getName());
    }
  }
  if (indicator instanceof UserDefIndicator) {
    String defName=indicator.getIndicatorDefinition().getName();
    if (!StringUtils.equals(indicator.getName(),defName)) {
      indicator.setName(defName);
    }
  }
}","/** 
 * zshen Comment method ""initializeIndicator"".
 * @param indicator
 */
public void initializeIndicator(Indicator indicator){
  if (indicator.getIndicatorDefinition() == null || indicator.getIndicatorDefinition().eIsProxy()) {
    DefinitionHandler.getInstance().setDefaultIndicatorDefinition(indicator);
  }
  if (indicator instanceof CompositeIndicator) {
    for (    Indicator child : ((CompositeIndicator)indicator).getChildIndicators()) {
      if (child.getAnalyzedElement() == null) {
        child.setAnalyzedElement(indicator.getAnalyzedElement());
      }
      initializeIndicator(child);
    }
  }
  if (indicator instanceof PatternMatchingIndicator && indicator.getParameters() != null) {
    Pattern pattern=indicator.getParameters().getDataValidDomain().getPatterns().get(0);
    if (!StringUtils.equals(indicator.getName(),pattern.getName())) {
      indicator.setName(pattern.getName());
    }
  }
  if (indicator instanceof UserDefIndicator) {
    String defName=indicator.getIndicatorDefinition().getName();
    if (!StringUtils.equals(indicator.getName(),defName)) {
      indicator.setName(defName);
    }
  }
}",0.9834599910594546
136603,"@Override protected void saveContext(){
  Analysis analysis=getAnalysis();
  analysis.getContextType().clear();
  IContextManager contextManager=currentEditor.getContextManager();
  contextManager.saveToEmf(analysis.getContextType());
  analysis.setDefaultContext(getDefaultContextGroupName((SupportContextEditor)currentEditor));
  AnalysisHelper.setLastRunContext(currentEditor.getLastRunContextGroupName(),analysis);
}","@Override protected void saveContext(){
  Analysis analysis=getAnalysis();
  IContextManager contextManager=currentEditor.getContextManager();
  contextManager.saveToEmf(analysis.getContextType());
  analysis.setDefaultContext(getDefaultContextGroupName((SupportContextEditor)currentEditor));
  AnalysisHelper.setLastRunContext(currentEditor.getLastRunContextGroupName(),analysis);
}",0.953922789539228
136604,"@Override public boolean isShowMenu(){
  boolean showMenu=super.isShowMenu();
  if (showMenu && CorePlugin.getDefault().getSemanticStudioService() == null) {
    return false;
  }
  return showMenu;
}","@Override public boolean isShowMenu(){
  if (CorePlugin.getDefault().getSemanticStudioService() == null) {
    return false;
  }
  return super.isShowMenu();
}",0.83008356545961
136605,"@Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  Object firstElement=currentSelection.getFirstElement();
  if (firstElement instanceof DBTableRepNode) {
    DBTableRepNode node=(DBTableRepNode)firstElement;
    semanticDiscoveryAction=new SemanticDiscoveryAction(node.getTdTable());
  }
 else   if (firstElement instanceof DBViewRepNode) {
    DBViewRepNode node=(DBViewRepNode)firstElement;
    semanticDiscoveryAction=new SemanticDiscoveryAction(node.getTdView());
  }
 else   if (firstElement instanceof DFTableRepNode) {
    DFTableRepNode node=(DFTableRepNode)firstElement;
    semanticDiscoveryAction=new SemanticDiscoveryAction(node.getMetadataTable());
  }
 else {
    Set<String> currentTableSet=new HashSet<String>();
    MetadataTable createTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    List<String> filterNames=new ArrayList<String>();
    Iterator<Object> columnIterator=currentSelection.iterator();
    while (columnIterator.hasNext()) {
      Object columnNode=columnIterator.next();
      MetadataColumn metadataColumn=null;
      if (DBColumnRepNode.class.isInstance(columnNode)) {
        metadataColumn=((DBColumnRepNode)columnNode).getTdColumn();
        createTable=ColumnHelper.getColumnOwnerAsMetadataTable(metadataColumn);
      }
 else       if (DFColumnRepNode.class.isInstance(columnNode)) {
        metadataColumn=((DFColumnRepNode)columnNode).getMetadataColumn();
        createTable=ColumnHelper.getColumnOwnerAsMetadataTable(metadataColumn);
      }
 else {
        return;
      }
      currentTableSet.add(ResourceHelper.getUUID(createTable));
      if (currentTableSet.size() > 1) {
        return;
      }
      filterNames.add(metadataColumn.getName());
    }
    MetadataTable metadataTableWithFilter=new MetadataTableWithFilter(filterNames,createTable);
    semanticDiscoveryAction=new SemanticDiscoveryAction(metadataTableWithFilter);
  }
  menu.add(semanticDiscoveryAction);
}","@Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  TreeSelection currentSelection=((TreeSelection)this.getContext().getSelection());
  Object firstElement=currentSelection.getFirstElement();
  boolean selectedMoreThanOne=currentSelection.size() > 1;
  if (selectedMoreThanOne || firstElement instanceof ColumnRepNode) {
    Set<String> currentTableSet=new HashSet<String>();
    MetadataTable createTable=ConnectionFactory.eINSTANCE.createMetadataTable();
    List<String> filterNames=new ArrayList<String>();
    Iterator<Object> columnIterator=currentSelection.iterator();
    while (columnIterator.hasNext()) {
      Object columnNode=columnIterator.next();
      MetadataColumn metadataColumn=null;
      if (DBColumnRepNode.class.isInstance(columnNode)) {
        metadataColumn=((DBColumnRepNode)columnNode).getTdColumn();
        createTable=ColumnHelper.getColumnOwnerAsMetadataTable(metadataColumn);
      }
 else       if (DFColumnRepNode.class.isInstance(columnNode)) {
        metadataColumn=((DFColumnRepNode)columnNode).getMetadataColumn();
        createTable=ColumnHelper.getColumnOwnerAsMetadataTable(metadataColumn);
      }
 else {
        return;
      }
      currentTableSet.add(ResourceHelper.getUUID(createTable));
      if (currentTableSet.size() > 1) {
        return;
      }
      filterNames.add(metadataColumn.getName());
    }
    MetadataTable metadataTableWithFilter=new MetadataTableWithFilter(filterNames,createTable);
    semanticDiscoveryAction=new SemanticDiscoveryAction(metadataTableWithFilter);
  }
 else {
    if (firstElement instanceof DBTableRepNode) {
      DBTableRepNode node=(DBTableRepNode)firstElement;
      semanticDiscoveryAction=new SemanticDiscoveryAction(node.getTdTable());
    }
 else     if (firstElement instanceof DBViewRepNode) {
      DBViewRepNode node=(DBViewRepNode)firstElement;
      semanticDiscoveryAction=new SemanticDiscoveryAction(node.getTdView());
    }
 else     if (firstElement instanceof DFTableRepNode) {
      DFTableRepNode node=(DFTableRepNode)firstElement;
      semanticDiscoveryAction=new SemanticDiscoveryAction(node.getMetadataTable());
    }
  }
  menu.add(semanticDiscoveryAction);
}",0.7095871238628412
136606,"private void createTableViewerMenu(final TableViewer columnsElementViewer,final List<RepositoryNode> columnList,final Button[] buttons,final boolean isLeftPart){
  Table table=columnsElementViewer.getTable();
  Menu menu=new Menu(table);
  MenuItem menuItem=new MenuItem(menu,SWT.PUSH);
  menuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  menuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  menuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (columnList.remove(((IStructuredSelection)columnsElementViewer.getSelection()).getFirstElement())) {
        columnsElementViewer.setInput(columnList);
        enabledButtons(buttons,false);
        masterPage.setDirty(true);
        computeRefreshDataPreviewPart(isLeftPart,columnList);
      }
    }
  }
);
  MenuItem showMenuItem=new MenuItem(menu,SWT.CASCADE);
  showMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  showMenuItem.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
  showMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      showSelectedElements(columnsElementViewer);
    }
  }
);
  table.setMenu(menu);
}","private void createTableViewerMenu(final TableViewer columnsElementViewer,final List<RepositoryNode> columnList,final Button[] buttons,final boolean isLeftPart){
  Table table=columnsElementViewer.getTable();
  Menu menu=new Menu(table);
  MenuItem menuItem=new MenuItem(menu,SWT.PUSH);
  menuItem.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  menuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  menuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (columnList.remove(((IStructuredSelection)columnsElementViewer.getSelection()).getFirstElement())) {
        columnsElementViewer.setInput(columnList);
        enabledButtons(buttons,false);
        masterPage.setDirty(true);
        computeRefreshDataPreviewPart(isLeftPart,columnList,columnsElementViewer);
      }
    }
  }
);
  MenuItem showMenuItem=new MenuItem(menu,SWT.CASCADE);
  showMenuItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  showMenuItem.setImage(ImageLib.getImage(ImageLib.EXPLORE_IMAGE));
  showMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      showSelectedElements(columnsElementViewer);
    }
  }
);
  table.setMenu(menu);
}",0.9917872506843958
136607,"/** 
 * DOC msjian Comment method ""computeRefreshDataPreviewPart"".
 * @param isLeftPart
 * @param columnSet
 * @return
 */
protected ColumnSet computeRefreshDataPreviewPart(boolean isLeftPart,List<RepositoryNode> columnSet){
  ColumnSet columnOwner=null;
  if (columnSet != null && columnSet.size() > 0) {
    RepositoryNode node=columnSet.get(0);
    columnOwner=RepositoryNodeHelper.getColumnOwner(node);
  }
  if (isLeftPart) {
    if ((previewDataColumnOwner == null && columnOwner != null) || (previewDataColumnOwner != null && columnOwner == null) || (!previewDataColumnOwner.equals(columnOwner))) {
      previewDataColumnOwner=columnOwner;
      notifyObservers();
    }
  }
  return columnOwner;
}","/** 
 * DOC msjian Comment method ""computeRefreshDataPreviewPart"".
 * @param isLeftPart
 * @param columnSet
 * @return
 */
protected ColumnSet computeRefreshDataPreviewPart(boolean isLeftPart,List<RepositoryNode> columnSet,TableViewer columnsElementViewer){
  ColumnSet columnOwner=null;
  if (columnSet != null && columnSet.size() > 0) {
    RepositoryNode node=columnSet.get(0);
    columnOwner=RepositoryNodeHelper.getColumnOwner(node);
  }
  if (isLeftPart) {
    if ((previewDataColumnOwner == null && columnOwner != null) || (previewDataColumnOwner != null && columnOwner == null) || (!previewDataColumnOwner.equals(columnOwner))) {
      previewDataColumnOwner=columnOwner;
      notifyObservers();
    }
  }
  String tableName=columnOwner == null ? ""String_Node_Str"" : columnOwner.getName();
  columnsElementViewer.getTable().getColumn(0).setText(DefaultMessagesImpl.getString(""String_Node_Str"",tableName));
  return columnOwner;
}",0.8364741641337387
136608,"private TableViewer createSectionPart(Composite parentComp,final List<RepositoryNode> columnList,String sectionTitle,String buttonText,String buttonTooltipText,final boolean isLeftPart){
  Section columnSetElementSection=masterPage.createSection(form,parentComp,sectionTitle,null);
  Composite sectionComp=toolkit.createComposite(columnSetElementSection);
  sectionComp.setLayout(new GridLayout());
  Button selectColumnBtn=toolkit.createButton(sectionComp,buttonText,SWT.NONE);
  selectColumnBtn.setToolTipText(buttonTooltipText);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(selectColumnBtn);
  Composite columsComp=toolkit.createComposite(sectionComp,SWT.NULL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).grab(true,true).applyTo(columsComp);
  columsComp.setLayout(new GridLayout());
  final TableViewer columnsElementViewer=createTreeViewer(columnList,columsComp);
  tableViewerPosStack.add(columnsElementViewer);
  ComparisonTableViewerDNDDecorate dndDecorate=new ComparisonTableViewerDNDDecorate(this,masterPage,tableViewerPosStack,allowColumnDupcation);
  dndDecorate.installDND(columnsElementViewer,true,ComparisonTableViewerDNDDecorate.COLUMN_VALIDATETYPE);
  Composite buttonsComp=toolkit.createComposite(columsComp,SWT.NULL);
  buttonsComp.setLayout(new GridLayout(4,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  GridData buttonGridData=new GridData(GridData.FILL_BOTH);
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  Button sortButton=new Button(buttonsComp,SWT.NULL);
  sortButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sortButton.setLayoutData(buttonGridData);
  final Button[] buttons=new Button[]{delButton,moveUpButton,moveDownButton};
  columnsElementViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      enabledButtons(buttons,event.getSelection() != null);
      showDetailView(columnsElementViewer);
    }
  }
);
  createTableViewerMenu(columnsElementViewer,columnList,buttons,isLeftPart);
  delButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnList.removeAll(((IStructuredSelection)columnsElementViewer.getSelection()).toList());
      columnsElementViewer.setInput(columnList);
      enabledButtons(buttons,false);
      masterPage.setDirty(true);
      computeRefreshDataPreviewPart(isLeftPart,columnList);
    }
  }
);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,false);
      computeRefreshDataPreviewPart(isLeftPart,columnList);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,true);
      computeRefreshDataPreviewPart(isLeftPart,columnList);
    }
  }
);
  sortButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      sortElement(columnList,columnsElementViewer);
      computeRefreshDataPreviewPart(isLeftPart,columnList);
    }
  }
);
  this.enabledButtons(new Button[]{delButton,moveUpButton,moveDownButton},false);
  final List<RepositoryNode> columnsOfSectionPart=columnList;
  selectColumnBtn.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openColumnsSelectionDialog(columnsElementViewer,columnsOfSectionPart,isLeftPart);
      enabledButtons(buttons,false);
    }
  }
);
  columnSetElementSection.setClient(sectionComp);
  return columnsElementViewer;
}","private TableViewer createSectionPart(Composite parentComp,final List<RepositoryNode> columnList,String sectionTitle,String buttonText,String buttonTooltipText,final boolean isLeftPart){
  Section columnSetElementSection=masterPage.createSection(form,parentComp,sectionTitle,null);
  Composite sectionComp=toolkit.createComposite(columnSetElementSection);
  sectionComp.setLayout(new GridLayout());
  Button selectColumnBtn=toolkit.createButton(sectionComp,buttonText,SWT.NONE);
  selectColumnBtn.setToolTipText(buttonTooltipText);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(selectColumnBtn);
  Composite columsComp=toolkit.createComposite(sectionComp,SWT.NULL);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.BEGINNING).grab(true,true).applyTo(columsComp);
  columsComp.setLayout(new GridLayout());
  final TableViewer columnsElementViewer=createTreeViewer(columnList,columsComp);
  tableViewerPosStack.add(columnsElementViewer);
  ComparisonTableViewerDNDDecorate dndDecorate=new ComparisonTableViewerDNDDecorate(this,masterPage,tableViewerPosStack,allowColumnDupcation);
  dndDecorate.installDND(columnsElementViewer,true,ComparisonTableViewerDNDDecorate.COLUMN_VALIDATETYPE,isLeftPart);
  Composite buttonsComp=toolkit.createComposite(columsComp,SWT.NULL);
  buttonsComp.setLayout(new GridLayout(4,true));
  buttonsComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  final Button delButton=new Button(buttonsComp,SWT.NULL);
  delButton.setImage(ImageLib.getImage(ImageLib.DELETE_ACTION));
  GridData buttonGridData=new GridData(GridData.FILL_BOTH);
  delButton.setLayoutData(buttonGridData);
  final Button moveUpButton=new Button(buttonsComp,SWT.NULL);
  moveUpButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveUpButton.setLayoutData(buttonGridData);
  final Button moveDownButton=new Button(buttonsComp,SWT.NULL);
  moveDownButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  moveDownButton.setLayoutData(buttonGridData);
  Button sortButton=new Button(buttonsComp,SWT.NULL);
  sortButton.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  sortButton.setLayoutData(buttonGridData);
  final Button[] buttons=new Button[]{delButton,moveUpButton,moveDownButton};
  columnsElementViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      enabledButtons(buttons,event.getSelection() != null);
      showDetailView(columnsElementViewer);
    }
  }
);
  createTableViewerMenu(columnsElementViewer,columnList,buttons,isLeftPart);
  delButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      columnList.removeAll(((IStructuredSelection)columnsElementViewer.getSelection()).toList());
      columnsElementViewer.setInput(columnList);
      enabledButtons(buttons,false);
      masterPage.setDirty(true);
      computeRefreshDataPreviewPart(isLeftPart,columnList,columnsElementViewer);
    }
  }
);
  moveUpButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,false);
      computeRefreshDataPreviewPart(isLeftPart,columnList,columnsElementViewer);
    }
  }
);
  moveDownButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      moveElement(columnList,columnsElementViewer,true);
      computeRefreshDataPreviewPart(isLeftPart,columnList,columnsElementViewer);
    }
  }
);
  sortButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      sortElement(columnList,columnsElementViewer);
      computeRefreshDataPreviewPart(isLeftPart,columnList,columnsElementViewer);
    }
  }
);
  this.enabledButtons(new Button[]{delButton,moveUpButton,moveDownButton},false);
  final List<RepositoryNode> columnsOfSectionPart=columnList;
  selectColumnBtn.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      openColumnsSelectionDialog(columnsElementViewer,columnsOfSectionPart,isLeftPart);
      enabledButtons(buttons,false);
    }
  }
);
  columnSetElementSection.setClient(sectionComp);
  return columnsElementViewer;
}",0.9889186982386564
136609,"/** 
 * MOD mzhao 2009-02-03,remove the first parameter, extract it to class property filed for the convenience of invoking this method from cheat sheets.
 */
public void openColumnsSelectionDialog(TableViewer columnsElementViewer,List<RepositoryNode> columnsOfSectionPart,boolean isLeftPart){
  RepositoryNode connNode=masterPage.getConnComboSelectNode();
  ColumnsSelectionDialog dialog=new ColumnsSelectionDialog(masterPage,null,DefaultMessagesImpl.getString(""String_Node_Str""),columnsOfSectionPart,connNode,DefaultMessagesImpl.getString(""String_Node_Str""));
  if (dialog.open() == Window.OK) {
    Object[] columns=dialog.getResult();
    List<RepositoryNode> columnSet=new ArrayList<RepositoryNode>();
    for (    Object obj : columns) {
      if (obj instanceof DBColumnRepNode) {
        columnSet.add((RepositoryNode)obj);
      }
    }
    columnsElementViewer.setInput(columnSet);
    columnsOfSectionPart.clear();
    columnsOfSectionPart.addAll(columnSet);
    if (columnSet.size() != 0 && columnSet.get(0).getObject() instanceof MetadataColumnRepositoryObject) {
      ColumnSet columnOwner=computeRefreshDataPreviewPart(isLeftPart,columnSet);
      String tableName=columnOwner.getName();
      columnsElementViewer.getTable().getColumn(0).setText(DefaultMessagesImpl.getString(""String_Node_Str"",tableName));
    }
    updateBindConnection(masterPage,tableViewerPosStack);
  }
}","/** 
 * MOD mzhao 2009-02-03,remove the first parameter, extract it to class property filed for the convenience of invoking this method from cheat sheets.
 */
public void openColumnsSelectionDialog(TableViewer columnsElementViewer,List<RepositoryNode> columnsOfSectionPart,boolean isLeftPart){
  RepositoryNode connNode=masterPage.getConnComboSelectNode();
  ColumnsSelectionDialog dialog=new ColumnsSelectionDialog(masterPage,null,DefaultMessagesImpl.getString(""String_Node_Str""),columnsOfSectionPart,connNode,DefaultMessagesImpl.getString(""String_Node_Str""));
  if (dialog.open() == Window.OK) {
    Object[] columns=dialog.getResult();
    List<RepositoryNode> columnSet=new ArrayList<RepositoryNode>();
    for (    Object obj : columns) {
      if (obj instanceof DBColumnRepNode) {
        columnSet.add((RepositoryNode)obj);
      }
    }
    columnsElementViewer.setInput(columnSet);
    columnsOfSectionPart.clear();
    columnsOfSectionPart.addAll(columnSet);
    computeRefreshDataPreviewPart(isLeftPart,columnSet,columnsElementViewer);
    updateBindConnection(masterPage,tableViewerPosStack);
  }
}",0.8346645367412141
136610,"@Override public void addElements(final ModelElementIndicator[] elements){
  RepositoryNode[] columns=new RepositoryNode[elements.length];
  for (int i=0; i < elements.length; i++) {
    columns[i]=(RepositoryNode)elements[i].getModelElementRepositoryNode();
  }
  List<IRepositoryNode> oriColumns=getColumnSetMultiValueList();
  for (  RepositoryNode column : columns) {
    if (!RepositoryNodeHelper.containsModelElementNode(oriColumns,column)) {
      oriColumns.add(column);
    }
  }
  setInput(oriColumns.toArray());
  updateBindConnection(masterPage,tree);
}","@Override public void addElements(final ModelElementIndicator[] elements){
  RepositoryNode[] columns=new RepositoryNode[elements.length];
  for (int i=0; i < elements.length; i++) {
    columns[i]=(RepositoryNode)elements[i].getModelElementRepositoryNode();
  }
  List<IRepositoryNode> oriColumns=getColumnSetMultiValueList();
  for (  RepositoryNode column : columns) {
    if (!RepositoryNodeHelper.containsModelElementNode(oriColumns,column)) {
      oriColumns.add(column);
    }
  }
  setInput(oriColumns.toArray());
  updateBindConnection(masterPage,tree);
  ModelElementIndicator[] newsArray=new ModelElementIndicator[getAllTheElementIndicator().length + elements.length];
  System.arraycopy(getAllTheElementIndicator(),0,newsArray,0,getAllTheElementIndicator().length);
  for (int i=0; i < elements.length; i++) {
    newsArray[getAllTheElementIndicator().length + i]=elements[i];
  }
  masterPage.refreshPreviewTable(newsArray,true);
}",0.7483443708609272
136611,"@SuppressWarnings(""String_Node_Str"") public void drop(DropTargetEvent event,LocalSelectionTransfer transfer){
  List inputElements=(List)targetViewer.getInput();
  if (inputElements == null) {
    inputElements=new ArrayList();
  }
  if (dragSelectedElement != null) {
    TableItem item=(TableItem)event.item;
    TableItem[] items=targetViewer.getTable().getItems();
    int index=0;
    for (int i=0; i < items.length; i++) {
      if (items[i] == item) {
        index=i;
        break;
      }
    }
    inputElements.remove(dragSelectedElement);
    inputElements.add(index,dragSelectedElement);
    dragSelectedElement=null;
  }
 else {
    StructuredSelection selection=(StructuredSelection)transfer.getSelection();
    List selectionElements=selection.toList();
    inputElements.addAll(selectionElements);
  }
  targetViewer.setInput(inputElements);
  compareTreeViewer.updateBindConnection(masterPage,tableViewerPosStack);
  compareTreeViewer.setDirty(true);
}","@Override @SuppressWarnings(""String_Node_Str"") public void drop(DropTargetEvent event,LocalSelectionTransfer transfer){
  List inputElements=(List)targetViewer.getInput();
  if (inputElements == null) {
    inputElements=new ArrayList();
  }
  if (dragSelectedElement != null) {
    TableItem item=(TableItem)event.item;
    TableItem[] items=targetViewer.getTable().getItems();
    int index=0;
    for (int i=0; i < items.length; i++) {
      if (items[i] == item) {
        index=i;
        break;
      }
    }
    inputElements.remove(dragSelectedElement);
    inputElements.add(index,dragSelectedElement);
    dragSelectedElement=null;
  }
 else {
    StructuredSelection selection=(StructuredSelection)transfer.getSelection();
    List selectionElements=selection.toList();
    inputElements.addAll(selectionElements);
  }
  targetViewer.setInput(inputElements);
  compareTreeViewer.updateBindConnection(masterPage,tableViewerPosStack);
  compareTreeViewer.setDirty(true);
  compareTreeViewer.computeRefreshDataPreviewPart(isLeftPart,inputElements,targetViewer);
}",0.951028403525955
136612,"/** 
 * Install a drag&drop function for target table viewer.
 * @param targetViewer the target table viewer for installing drag&drop, it's input value must a <code>List</code>type.
 * @param installDragListener decide to whether install a drag listener for targetViewer: if true, will install thelistener; else, will not install.
 * @param validateType
 * @see ComparisonTableViewerDNDDecorate#NON_VALIDATETYPE
 * @see ComparisonTableViewerDNDDecorate#COLUMN_VALIDATETYPE
 */
public void installDND(final TableViewer targetViewer,final boolean installDragListener,final int validateType){
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  if (installDragListener) {
    installDragListener(targetViewer,operations);
  }
  DropTarget dropTarget=new DropTarget(targetViewer.getTable(),operations);
  dropTarget.setTransfer(transferTypes);
  DropTargetListener dndListener=new AbstractSelectionReceiver(targetViewer.getTable(),null){
    @SuppressWarnings(""String_Node_Str"") public void drop(    DropTargetEvent event,    LocalSelectionTransfer transfer){
      List inputElements=(List)targetViewer.getInput();
      if (inputElements == null) {
        inputElements=new ArrayList();
      }
      if (dragSelectedElement != null) {
        TableItem item=(TableItem)event.item;
        TableItem[] items=targetViewer.getTable().getItems();
        int index=0;
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
        inputElements.remove(dragSelectedElement);
        inputElements.add(index,dragSelectedElement);
        dragSelectedElement=null;
      }
 else {
        StructuredSelection selection=(StructuredSelection)transfer.getSelection();
        List selectionElements=selection.toList();
        inputElements.addAll(selectionElements);
      }
      targetViewer.setInput(inputElements);
      compareTreeViewer.updateBindConnection(masterPage,tableViewerPosStack);
      compareTreeViewer.setDirty(true);
    }
    public boolean doDropValidation(    DropTargetEvent event,    LocalSelectionTransfer transfer){
      StructuredSelection selection=(StructuredSelection)transfer.getSelection();
      if (dragSelectedElement != null && selection != null) {
        return true;
      }
      boolean doDropValidation=false;
switch (validateType) {
case COLUMN_VALIDATETYPE:
        doDropValidation=validateColumnType(selection,targetViewer);
      break;
default :
    doDropValidation=true;
}
return doDropValidation;
}
}
;
dropTarget.addDropListener(dndListener);
}","/** 
 * Install a drag&drop function for target table viewer.
 * @param targetViewer the target table viewer for installing drag&drop, it's input value must a <code>List</code>type.
 * @param installDragListener decide to whether install a drag listener for targetViewer: if true, will install thelistener; else, will not install.
 * @param validateType
 * @see ComparisonTableViewerDNDDecorate#NON_VALIDATETYPE
 * @see ComparisonTableViewerDNDDecorate#COLUMN_VALIDATETYPE
 */
public void installDND(final TableViewer targetViewer,final boolean installDragListener,final int validateType,final boolean isLeftPart){
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  if (installDragListener) {
    installDragListener(targetViewer,operations);
  }
  DropTarget dropTarget=new DropTarget(targetViewer.getTable(),operations);
  dropTarget.setTransfer(transferTypes);
  DropTargetListener dndListener=new AbstractSelectionReceiver(targetViewer.getTable(),null){
    @Override @SuppressWarnings(""String_Node_Str"") public void drop(    DropTargetEvent event,    LocalSelectionTransfer transfer){
      List inputElements=(List)targetViewer.getInput();
      if (inputElements == null) {
        inputElements=new ArrayList();
      }
      if (dragSelectedElement != null) {
        TableItem item=(TableItem)event.item;
        TableItem[] items=targetViewer.getTable().getItems();
        int index=0;
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
        inputElements.remove(dragSelectedElement);
        inputElements.add(index,dragSelectedElement);
        dragSelectedElement=null;
      }
 else {
        StructuredSelection selection=(StructuredSelection)transfer.getSelection();
        List selectionElements=selection.toList();
        inputElements.addAll(selectionElements);
      }
      targetViewer.setInput(inputElements);
      compareTreeViewer.updateBindConnection(masterPage,tableViewerPosStack);
      compareTreeViewer.setDirty(true);
      compareTreeViewer.computeRefreshDataPreviewPart(isLeftPart,inputElements,targetViewer);
    }
    @Override public boolean doDropValidation(    DropTargetEvent event,    LocalSelectionTransfer transfer){
      StructuredSelection selection=(StructuredSelection)transfer.getSelection();
      if (dragSelectedElement != null && selection != null) {
        return true;
      }
      boolean doDropValidation=false;
switch (validateType) {
case COLUMN_VALIDATETYPE:
        doDropValidation=validateColumnType(selection,targetViewer);
      break;
default :
    doDropValidation=true;
}
return doDropValidation;
}
}
;
dropTarget.addDropListener(dndListener);
}",0.9737190395159766
136613,"public boolean doDropValidation(DropTargetEvent event,LocalSelectionTransfer transfer){
  StructuredSelection selection=(StructuredSelection)transfer.getSelection();
  if (dragSelectedElement != null && selection != null) {
    return true;
  }
  boolean doDropValidation=false;
switch (validateType) {
case COLUMN_VALIDATETYPE:
    doDropValidation=validateColumnType(selection,targetViewer);
  break;
default :
doDropValidation=true;
}
return doDropValidation;
}","@Override public boolean doDropValidation(DropTargetEvent event,LocalSelectionTransfer transfer){
  StructuredSelection selection=(StructuredSelection)transfer.getSelection();
  if (dragSelectedElement != null && selection != null) {
    return true;
  }
  boolean doDropValidation=false;
switch (validateType) {
case COLUMN_VALIDATETYPE:
    doDropValidation=validateColumnType(selection,targetViewer);
  break;
default :
doDropValidation=true;
}
return doDropValidation;
}",0.9893390191897654
136614,"@Override public void openEditor(Item item){
  super.openEditor(item);
  if (this.selectionPage != null) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      AbstractAnalysisMetadataPage masterPage=editor.getMasterPage();
      List<IRepositoryNode> nodes=this.selectionPage.nodes;
      if (nodes != null && nodes.size() > 0) {
        if (masterPage instanceof ColumnAnalysisDetailsPage) {
          ((ColumnAnalysisDetailsPage)masterPage).setTreeViewInput(nodes.toArray(new RepositoryNode[nodes.size()]));
          ModelElementIndicator[] predefinedColumnIndicator=this.getPredefinedColumnIndicator();
          if (predefinedColumnIndicator != null) {
            ((ColumnAnalysisDetailsPage)masterPage).refreshPreviewTable(predefinedColumnIndicator,false);
            ((ColumnAnalysisDetailsPage)masterPage).refreshTheTree(predefinedColumnIndicator);
          }
        }
 else {
          masterPage.getTreeViewer().setInput(nodes.toArray(new RepositoryNode[nodes.size()]));
        }
        masterPage.doSave(new NullProgressMonitor());
      }
    }
  }
}","@Override public void openEditor(Item item){
  super.openEditor(item);
  if (this.selectionPage != null) {
    AnalysisEditor editor=(AnalysisEditor)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
    if (editor != null) {
      AbstractAnalysisMetadataPage masterPage=editor.getMasterPage();
      List<IRepositoryNode> nodes=this.selectionPage.nodes;
      if (nodes != null && nodes.size() > 0) {
        if (masterPage instanceof ColumnAnalysisDetailsPage) {
          ((ColumnAnalysisDetailsPage)masterPage).setTreeViewInput(nodes.toArray(new RepositoryNode[nodes.size()]));
          ModelElementIndicator[] predefinedColumnIndicator=this.getPredefinedColumnIndicator();
          if (predefinedColumnIndicator != null) {
            ((ColumnAnalysisDetailsPage)masterPage).refreshPreviewTable(predefinedColumnIndicator,false);
            ((ColumnAnalysisDetailsPage)masterPage).refreshTheTree(predefinedColumnIndicator);
          }
        }
 else         if (masterPage instanceof ColumnSetAnalysisDetailsPage) {
          ((ColumnSetAnalysisDetailsPage)masterPage).setTreeViewInput(nodes.toArray(new RepositoryNode[nodes.size()]));
        }
 else {
          masterPage.getTreeViewer().setInput(nodes.toArray(new RepositoryNode[nodes.size()]));
        }
        masterPage.doSave(new NullProgressMonitor());
      }
    }
  }
}",0.90539483971853
136615,"@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  this.form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  topComposite=form.getBody();
  topComposite.setLayout(new GridLayout());
  summaryComp=toolkit.createComposite(topComposite);
  summaryComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING));
  summaryComp.setLayout(new GridLayout());
  createSummarySection(form,summaryComp,getAnalysisHandler());
}","@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  if (this.form != null && !this.form.isDisposed()) {
    this.form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    topComposite=form.getBody();
    topComposite.setLayout(new GridLayout());
    summaryComp=toolkit.createComposite(topComposite);
    summaryComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING));
    summaryComp.setLayout(new GridLayout());
    createSummarySection(form,summaryComp,getAnalysisHandler());
  }
}",0.9347826086956522
136616,"@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  resultComp=toolkit.createComposite(topComposite);
  resultComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING));
  resultComp.setLayout(new GridLayout());
  createResultSection(resultComp);
  form.reflow(true);
}","@Override protected void createFormContent(IManagedForm managedForm){
  super.createFormContent(managedForm);
  if (topComposite != null && !topComposite.isDisposed()) {
    resultComp=toolkit.createComposite(topComposite);
    resultComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING));
    resultComp.setLayout(new GridLayout());
    createResultSection(resultComp);
    form.reflow(true);
  }
}",0.8830845771144279
136617,"/** 
 * Method ""setUsageDependencyOn"".
 * @param client the element which depends on the supplier
 * @param supplier the element needed by the client element
 * @return the dependency object between the two given elements
 */
public TypedReturnCode<Dependency> setUsageDependencyOn(ModelElement client,ModelElement supplier){
  EList<Dependency> supplierDependencies=supplier.getSupplierDependency();
  for (  Dependency dependency : supplierDependencies) {
    if (dependency.getKind() != null && USAGE.compareTo(dependency.getKind()) == 0) {
      EObject resolvedObject=ResourceHelper.resolveObject(dependency.getClient(),client);
      if (resolvedObject == null) {
        dependency.getClient().add(client);
      }
      TypedReturnCode<Dependency> rc=new TypedReturnCode<Dependency>();
      rc.setObject(dependency);
      return rc;
    }
  }
  return createUsageDependencyOn(client,supplier);
}","/** 
 * Method ""setUsageDependencyOn"".
 * @param client the element which depends on the supplier
 * @param supplier the element needed by the client element
 * @return the dependency object between the two given elements
 */
public TypedReturnCode<Dependency> setUsageDependencyOn(ModelElement client,ModelElement supplier){
  EList<Dependency> supplierDependencies=supplier.getSupplierDependency();
  for (  Dependency dependency : supplierDependencies) {
    if (dependency.getKind() != null && USAGE.compareTo(dependency.getKind()) == 0) {
      EObject resolvedObject=ResourceHelper.resolveObject(dependency.getClient(),client);
      if (resolvedObject == null) {
        if (checkClientDependencyExist(client,supplier)) {
          removeClientDependency(client,supplier);
        }
        dependency.getClient().add(client);
      }
      TypedReturnCode<Dependency> rc=new TypedReturnCode<Dependency>();
      rc.setObject(dependency);
      return rc;
    }
  }
  return createUsageDependencyOn(client,supplier);
}",0.9378238341968912
136618,"/** 
 * @param file the file which we want to import or export
 * @param rootFolder the location which file is come from
 */
public ItemRecord(File file,IPath rootFolder){
  this.file=file;
  this.rootFolder=rootFolder;
  if (resourceSet == null) {
    resourceSet=new ResourceSetImpl();
  }
  if (allItemRecords == null) {
    allItemRecords=new ArrayList<ItemRecord>();
  }
  if (FILE_ELEMENT_MAP == null) {
    FILE_ELEMENT_MAP=new HashMap<File,ModelElement>();
  }
  try {
    initialize();
  }
 catch (  Exception e) {
    String errorMessage=DefaultMessagesImpl.getString(""String_Node_Str"",getName(),e.getMessage());
    addError(errorMessage);
    log.error(errorMessage);
  }
}","/** 
 * the resourceSet attribute is static so that notice call   {@link #clear()} method when next time
 * @param file the file which we want to import or export
 * @param rootFolder the location which file is come from
 */
public ItemRecord(File file,IPath rootFolder){
  this.file=file;
  this.rootFolder=rootFolder;
  if (resourceSet == null) {
    resourceSet=new ResourceSetImpl();
  }
  if (allItemRecords == null) {
    allItemRecords=new ArrayList<ItemRecord>();
  }
  if (FILE_ELEMENT_MAP == null) {
    FILE_ELEMENT_MAP=new HashMap<File,ModelElement>();
  }
  try {
    initialize();
  }
 catch (  Exception e) {
    String errorMessage=DefaultMessagesImpl.getString(""String_Node_Str"",getName(),e.getMessage());
    addError(errorMessage);
    log.error(errorMessage);
  }
}",0.9319727891156464
136619,"/** 
 * find in analysis's parameter if has: DefaultLoadedRowCount"".if has:get its value, if not, create one
 * @return
 */
public String getDefaultLoadedRowCount(){
  return String.valueOf(analysis.getParameters().getMaxNumberRows());
}","/** 
 * find in analysis's parameter if has: DefaultLoadedRowCount"".if has:get its value, if not, create one
 * @return
 */
public String getDefaultLoadedRowCount(){
  if (this.analysis != null) {
    TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.PREVIEW_ROW_NUMBER,this.analysis.getTaggedValue());
    if (taggedValue != null) {
      return taggedValue.getValue();
    }
  }
  return IParameterConstant.ANALYSIS_PREVIEW_NUMBER_ROW;
}",0.4935805991440798
136620,"/** 
 * Change the max number of rows
 * @param text
 */
public void changeDefaultRowLoaded(String text){
  analysis.getParameters().setMaxNumberRows(Integer.valueOf(text));
}","/** 
 * Change the max number of rows
 * @param text
 */
public void changeDefaultRowLoaded(String text){
  TaggedValueHelper.setTaggedValue(analysis,TaggedValueHelper.PREVIEW_ROW_NUMBER,text);
}",0.7081081081081081
136621,"@Override public ModelElement initCWMResourceBuilder(){
  Analysis analysis=(Analysis)super.initCWMResourceBuilder();
  Indicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  analysis.getResults().getIndicators().add(blockKeyIndicator);
  RecordMatchingIndicator matchRuleIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDefinition=RulesFactory.eINSTANCE.createMatchRuleDefinition();
  matchRuleIndicator.setBuiltInMatchRuleDefinition(matchRuleDefinition);
  analysis.getResults().getIndicators().add(matchRuleIndicator);
  IPreferenceStore preferenceStore=CorePlugin.getDefault().getPreferenceStore();
  int maxRows=preferenceStore.getInt(PluginConstant.MAX_NB_ROWS_ANALYSIS_EDITOR);
  analysis.getParameters().setMaxNumberRows(maxRows);
  return analysis;
}","@Override public ModelElement initCWMResourceBuilder(){
  Analysis analysis=(Analysis)super.initCWMResourceBuilder();
  Indicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  analysis.getResults().getIndicators().add(blockKeyIndicator);
  RecordMatchingIndicator matchRuleIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDefinition=RulesFactory.eINSTANCE.createMatchRuleDefinition();
  matchRuleIndicator.setBuiltInMatchRuleDefinition(matchRuleDefinition);
  analysis.getResults().getIndicators().add(matchRuleIndicator);
  IPreferenceStore preferenceStore=CorePlugin.getDefault().getPreferenceStore();
  int maxRows=preferenceStore.getInt(PluginConstant.MAX_NB_ROWS_ANALYSIS_EDITOR);
  TaggedValueHelper.setTaggedValue(analysis,TaggedValueHelper.PREVIEW_ROW_NUMBER,String.valueOf(maxRows));
  return analysis;
}",0.9209463358338142
136622,"/** 
 * Test method for  {@link org.talend.dq.analysis.MatchAnalysisExecutor#execute(org.talend.dataquality.analysis.Analysis)}.
 */
@SuppressWarnings(""String_Node_Str"") @Test public void testExecute(){
  MatchAnalysisExecutor matchAnalysisExecutor=new MatchAnalysisExecutor();
  Analysis analysis=AnalysisPackage.eINSTANCE.getAnalysisFactory().createAnalysis();
  AnalysisContext context=AnalysisPackage.eINSTANCE.getAnalysisFactory().createAnalysisContext();
  analysis.setContext(context);
  AnalysisParameters params=AnalysisPackage.eINSTANCE.getAnalysisFactory().createAnalysisParameters();
  params.setMaxNumberRows(100);
  analysis.setParameters(params);
  context.setConnection(delimitedFileconnection);
  URL fileUrl=this.getClass().getResource(""String_Node_Str"");
  metadataTable=UnitTestBuildHelper.getDefault().initFileConnection(fileUrl,delimitedFileconnection);
  this.name=UnitTestBuildHelper.getDefault().initColumns(context,this.metadataTable);
  double groupQualityThreshold=0.9d;
  double matchInterval=0.95d;
  assertScenario1(matchAnalysisExecutor,analysis,name,""String_Node_Str"",groupQualityThreshold,matchInterval);
  matchInterval=0.8d;
  assertScenario2(matchAnalysisExecutor,analysis,name,""String_Node_Str"",groupQualityThreshold,matchInterval);
  groupQualityThreshold=0.95d;
  assertScenario3(matchAnalysisExecutor,analysis,name,""String_Node_Str"",groupQualityThreshold,matchInterval);
  assertScenario4(matchAnalysisExecutor,analysis,name,""String_Node_Str"",groupQualityThreshold,matchInterval);
}","/** 
 * Test method for  {@link org.talend.dq.analysis.MatchAnalysisExecutor#execute(org.talend.dataquality.analysis.Analysis)}.
 */
@SuppressWarnings(""String_Node_Str"") @Test public void testExecute(){
  MatchAnalysisExecutor matchAnalysisExecutor=new MatchAnalysisExecutor();
  Analysis analysis=AnalysisPackage.eINSTANCE.getAnalysisFactory().createAnalysis();
  AnalysisContext context=AnalysisPackage.eINSTANCE.getAnalysisFactory().createAnalysisContext();
  analysis.setContext(context);
  AnalysisParameters params=AnalysisPackage.eINSTANCE.getAnalysisFactory().createAnalysisParameters();
  analysis.setParameters(params);
  TaggedValueHelper.setTaggedValue(analysis,TaggedValueHelper.PREVIEW_ROW_NUMBER,String.valueOf(100));
  context.setConnection(delimitedFileconnection);
  URL fileUrl=this.getClass().getResource(""String_Node_Str"");
  metadataTable=UnitTestBuildHelper.getDefault().initFileConnection(fileUrl,delimitedFileconnection);
  this.name=UnitTestBuildHelper.getDefault().initColumns(context,this.metadataTable);
  double groupQualityThreshold=0.9d;
  double matchInterval=0.95d;
  assertScenario1(matchAnalysisExecutor,analysis,name,""String_Node_Str"",groupQualityThreshold,matchInterval);
  matchInterval=0.8d;
  assertScenario2(matchAnalysisExecutor,analysis,name,""String_Node_Str"",groupQualityThreshold,matchInterval);
  groupQualityThreshold=0.95d;
  assertScenario3(matchAnalysisExecutor,analysis,name,""String_Node_Str"",groupQualityThreshold,matchInterval);
  assertScenario4(matchAnalysisExecutor,analysis,name,""String_Node_Str"",groupQualityThreshold,matchInterval);
}",0.9464228424767404
136623,"/** 
 * DOC zshen Comment method ""filterAdaptColumnHeader"".
 * @returnget the name of column which will be displayed on the drill down editor.
 */
public List<String> filterAdaptColumnHeader(){
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  String menuType=this.getMenuType();
  List<String> columnElementList=new ArrayList<String>();
  if (analysisElement == null && indicator.eContainer() instanceof SimpleStatIndicator) {
    columnElementList=columnHeaderForColumnSet((SimpleStatIndicator)indicator.eContainer());
  }
 else {
    if (DrillDownUtils.judgeMenuType(menuType,DrillDownUtils.MENU_VALUE_TYPE)) {
      columnElementList.add(ModelElementHelper.getName(indicator.getAnalyzedElement()));
    }
 else     if (analysisElement instanceof TdColumn) {
      for (      TdColumn column : TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()))) {
        columnElementList.add(column.getName());
      }
    }
 else     if (analysisElement instanceof MetadataColumn) {
      MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
      for (      MetadataColumn mColumn : mTable.getColumns()) {
        columnElementList.add(mColumn.getLabel());
      }
    }
  }
  return columnElementList;
}","/** 
 * DOC zshen Comment method ""filterAdaptColumnHeader"".
 * @returnget the name of column which will be displayed on the drill down editor.
 */
public List<String> filterAdaptColumnHeader(){
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  String menuType=this.getMenuType();
  List<String> columnElementList=new ArrayList<String>();
  if (analysisElement == null && indicator.eContainer() instanceof SimpleStatIndicator) {
    columnElementList=columnHeaderForColumnSet((SimpleStatIndicator)indicator.eContainer());
  }
 else {
    if (DrillDownUtils.judgeMenuType(menuType,DrillDownUtils.MENU_VALUE_TYPE)) {
      columnElementList.add(ModelElementHelper.getName(indicator.getAnalyzedElement()));
    }
 else     if (analysisElement instanceof TdColumn) {
      for (      TdColumn column : getColumnsByTdColumn((TdColumn)analysisElement)) {
        columnElementList.add(column.getName());
      }
    }
 else     if (analysisElement instanceof MetadataColumn) {
      MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
      for (      MetadataColumn mColumn : mTable.getColumns()) {
        columnElementList.add(mColumn.getLabel());
      }
    }
  }
  return columnElementList;
}",0.9453860640301318
136624,"/** 
 * Get index of column whiche will be used on the dirll down. Note that One indicator only belong one column so that the array of retrun value just contain one element. And if we create new map for view values menu rather than used same map with view rows menu then method can be removed
 * @return
 */
public Integer[] getColumnIndexArray(){
  if (!DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_VALUE_TYPE) || !UniqueCountIndicator.class.isInstance(currIndicator)) {
    return null;
  }
  List<Integer> indexArray=new ArrayList<Integer>();
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  int index=0;
  if (analysisElement instanceof TdColumn) {
    TdTable tdTable=ColumnHelper.getColumnOwnerAsTdTable((TdColumn)analysisElement);
    for (    TdColumn column : TableHelper.getColumns(tdTable)) {
      if (column.getName().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
 else   if (analysisElement instanceof MetadataColumn) {
    MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
    for (    MetadataColumn mColumn : mTable.getColumns()) {
      if (mColumn.getLabel().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
  return indexArray.toArray(new Integer[indexArray.size()]);
}","/** 
 * Get index of column whiche will be used on the dirll down. Note that One indicator only belong one column so that the array of retrun value just contain one element. And if we create new map for view values menu rather than used same map with view rows menu then method can be removed
 * @return
 */
public Integer[] getColumnIndexArray(){
  if (!DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_VALUE_TYPE) || !UniqueCountIndicator.class.isInstance(currIndicator)) {
    return null;
  }
  List<Integer> indexArray=new ArrayList<Integer>();
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  int index=0;
  if (analysisElement instanceof TdColumn) {
    List<TdColumn> columns=getColumnsByTdColumn((TdColumn)analysisElement);
    for (    TdColumn column : columns) {
      if (column.getName().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
 else   if (analysisElement instanceof MetadataColumn) {
    MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
    for (    MetadataColumn mColumn : mTable.getColumns()) {
      if (mColumn.getLabel().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
  return indexArray.toArray(new Integer[indexArray.size()]);
}",0.9276065119501212
136625,"@SuppressWarnings(""String_Node_Str"") @Override public void partDeactivated(IWorkbenchPart part){
  super.partDeactivated(part);
  if (part instanceof org.eclipse.ui.internal.ViewIntroAdapterPart) {
    if (CheatSheetUtils.getInstance().isFirstTime() && !PlatformUI.getWorkbench().isClosing() && firstTime) {
      firstTime=false;
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(PluginConstant.GETTING_STARTED_CHEAT_SHEET_ID);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void partDeactivated(IWorkbenchPart part){
  super.partDeactivated(part);
  if (part instanceof org.eclipse.ui.internal.ViewIntroAdapterPart) {
    if (CheatSheetUtils.getInstance().isFirstTime() && !PlatformUI.getWorkbench().isClosing() && firstTime) {
      firstTime=false;
      String cheatSheetID=PluginConstant.START_HERE_CHEAT_SHEET_ID;
      if (PluginChecker.isOnlyTopLoaded()) {
        cheatSheetID=PluginConstant.GETTING_STARTED_CHEAT_SHEET_ID;
      }
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(cheatSheetID);
    }
  }
}",0.7462406015037594
136626,"/** 
 * Copy The jar file if it is not exist or not new one.
 */
private void CopyTheJarFile(){
  try {
    File sourceFile=null;
    try {
      sourceFile=new File(FileLocator.toFileURL(CWMPlugin.getDefault().getBundle().getResource(""String_Node_Str"")).toURI());
    }
 catch (    URISyntaxException e) {
      Assert.fail(e.getMessage());
    }
    if (sourceFile == null) {
      Assert.fail(""String_Node_Str"");
    }
    String tempLibPath=ExtractMetaDataUtils.getInstance().getJavaLibPath();
    File targetFile=new File(tempLibPath + ""String_Node_Str"");
    FilesUtils.copyFile(sourceFile,targetFile);
  }
 catch (  IOException e1) {
    Assert.fail(e1.getMessage());
  }
}","/** 
 * Copy The jar file if it is not exist or not new one.
 */
private void CopyTheJarFile(){
  try {
    File sourceFile=null;
    try {
      URL resource=CWMPlugin.getDefault().getBundle().getResource(""String_Node_Str"" + Path.SEPARATOR + ""String_Node_Str"");
      System.out.println(resource.toString());
      URL fileURL=FileLocator.toFileURL(resource);
      System.out.println(fileURL.toString());
      URI uri=fileURL.toURI();
      System.out.println(uri.toString());
      sourceFile=new File(uri);
    }
 catch (    URISyntaxException e) {
      Assert.fail(e.getMessage());
    }
    if (sourceFile == null) {
      Assert.fail(""String_Node_Str"");
    }
    String tempLibPath=ExtractMetaDataUtils.getInstance().getJavaLibPath();
    File targetFile=new File(tempLibPath + ""String_Node_Str"");
    FilesUtils.copyFile(sourceFile,targetFile);
  }
 catch (  IOException e1) {
    Assert.fail(e1.getMessage());
  }
}",0.7878033602986932
136627,"/** 
 * DOC bZhou Comment method ""getIndicatorValue"".
 * @param indicator
 * @return
 */
public static String getIndicatorValue(Indicator indicator){
  IndicatorsSwitch<String> mySwitch=new IndicatorsSwitch<String>(){
    @Override public String caseAverageLengthIndicator(    AverageLengthIndicator object){
      return createStandardNumber(object.getAverageLength());
    }
    @Override public String caseBlankCountIndicator(    BlankCountIndicator object){
      return String.valueOf(object.getBlankCount());
    }
    @Override public String caseDefValueCountIndicator(    DefValueCountIndicator object){
      return String.valueOf(object.getDefaultValCount());
    }
    @Override public String caseDistinctCountIndicator(    DistinctCountIndicator object){
      return String.valueOf(object.getDistinctValueCount());
    }
    @Override public String caseDuplicateCountIndicator(    DuplicateCountIndicator object){
      return String.valueOf(object.getDuplicateValueCount());
    }
    @Override public String caseMaxLengthIndicator(    MaxLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseMeanIndicator(    MeanIndicator object){
      return createStandardNumber(object.getMean());
    }
    @Override public String caseMedianIndicator(    MedianIndicator object){
      return createStandardNumber(object.getMedian());
    }
    @Override public String caseMinLengthIndicator(    MinLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseModeIndicator(    ModeIndicator object){
      return String.valueOf(object.getMode());
    }
    @Override public String caseNullCountIndicator(    NullCountIndicator object){
      return String.valueOf(object.getNullCount());
    }
    @Override public String casePatternMatchingIndicator(    PatternMatchingIndicator object){
      return String.valueOf(object.getMatchingValueCount());
    }
    @Override public String caseRowCountIndicator(    RowCountIndicator object){
      return String.valueOf(object.getCount());
    }
    @Override public String caseUniqueCountIndicator(    UniqueCountIndicator object){
      return String.valueOf(object.getUniqueValueCount());
    }
    @Override public String caseValueIndicator(    ValueIndicator object){
      return object.getValue();
    }
    @Override public String caseValidPhoneCountIndicator(    ValidPhoneCountIndicator object){
      return String.valueOf(object.getValidPhoneNumCount());
    }
    @Override public String casePossiblePhoneCountIndicator(    PossiblePhoneCountIndicator object){
      return String.valueOf(object.getPossiblePhoneCount());
    }
    @Override public String caseValidRegCodeCountIndicator(    ValidRegCodeCountIndicator object){
      return String.valueOf(object.getValidRegCount());
    }
    @Override public String caseInvalidRegCodeCountIndicator(    InvalidRegCodeCountIndicator object){
      return String.valueOf(object.getInvalidRegCount());
    }
    @Override public String caseWellFormE164PhoneCountIndicator(    WellFormE164PhoneCountIndicator object){
      return String.valueOf(object.getWellFormE164PhoneCount());
    }
    @Override public String caseWellFormIntePhoneCountIndicator(    WellFormIntePhoneCountIndicator object){
      return String.valueOf(object.getWellFormIntePhoneCount());
    }
    @Override public String caseWellFormNationalPhoneCountIndicator(    WellFormNationalPhoneCountIndicator object){
      return String.valueOf(object.getWellFormNatiPhoneCount());
    }
  }
;
  IndicatorSqlSwitch<String> sqlSwitch=new IndicatorSqlSwitch<String>(){
    @Override public String caseWhereRuleIndicator(    WhereRuleIndicator object){
      return String.valueOf(object.getUserCount());
    }
    @Override public String caseUserDefIndicator(    UserDefIndicator object){
      if (object instanceof UserDefIndicator) {
        UserDefIndicator userDefineIndicator=object;
        IndicatorCategory category=IndicatorCategoryHelper.getCategory(userDefineIndicator.getIndicatorDefinition());
        if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
          return String.valueOf(userDefineIndicator.getRealValue());
        }
      }
      return String.valueOf(object.getUserCount());
    }
    @Override public String caseJavaUserDefIndicator(    JavaUserDefIndicator object){
      return String.valueOf(object.getUserCount());
    }
  }
;
  String result=mySwitch.doSwitch(indicator);
  return result == null ? sqlSwitch.doSwitch(indicator) : result;
}","/** 
 * DOC bZhou Comment method ""getIndicatorValue"".
 * @param indicator
 * @return
 */
public static String getIndicatorValue(Indicator indicator){
  IndicatorsSwitch<String> mySwitch=new IndicatorsSwitch<String>(){
    @Override public String caseAverageLengthIndicator(    AverageLengthIndicator object){
      return createStandardNumber(object.getAverageLength());
    }
    @Override public String caseBlankCountIndicator(    BlankCountIndicator object){
      return String.valueOf(object.getBlankCount());
    }
    @Override public String caseDefValueCountIndicator(    DefValueCountIndicator object){
      return String.valueOf(object.getDefaultValCount());
    }
    @Override public String caseDistinctCountIndicator(    DistinctCountIndicator object){
      return String.valueOf(object.getDistinctValueCount());
    }
    @Override public String caseDuplicateCountIndicator(    DuplicateCountIndicator object){
      return String.valueOf(object.getDuplicateValueCount());
    }
    @Override public String caseMaxLengthIndicator(    MaxLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseMeanIndicator(    MeanIndicator object){
      return createStandardNumber(object.getMean());
    }
    @Override public String caseMedianIndicator(    MedianIndicator object){
      return createStandardNumber(object.getMedian());
    }
    @Override public String caseMinLengthIndicator(    MinLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseModeIndicator(    ModeIndicator object){
      return String.valueOf(object.getMode());
    }
    @Override public String caseNullCountIndicator(    NullCountIndicator object){
      return String.valueOf(object.getNullCount());
    }
    @Override public String casePatternMatchingIndicator(    PatternMatchingIndicator object){
      return String.valueOf(object.getMatchingValueCount());
    }
    @Override public String caseRowCountIndicator(    RowCountIndicator object){
      return String.valueOf(object.getCount());
    }
    @Override public String caseUniqueCountIndicator(    UniqueCountIndicator object){
      return String.valueOf(object.getUniqueValueCount());
    }
    @Override public String caseValueIndicator(    ValueIndicator object){
      return object.getValue();
    }
    @Override public String caseValidPhoneCountIndicator(    ValidPhoneCountIndicator object){
      return String.valueOf(object.getValidPhoneNumCount());
    }
    @Override public String casePossiblePhoneCountIndicator(    PossiblePhoneCountIndicator object){
      return String.valueOf(object.getPossiblePhoneCount());
    }
    @Override public String caseValidRegCodeCountIndicator(    ValidRegCodeCountIndicator object){
      return String.valueOf(object.getValidRegCount());
    }
    @Override public String caseInvalidRegCodeCountIndicator(    InvalidRegCodeCountIndicator object){
      return String.valueOf(object.getInvalidRegCount());
    }
    @Override public String caseWellFormE164PhoneCountIndicator(    WellFormE164PhoneCountIndicator object){
      return String.valueOf(object.getWellFormE164PhoneCount());
    }
    @Override public String caseWellFormIntePhoneCountIndicator(    WellFormIntePhoneCountIndicator object){
      return String.valueOf(object.getWellFormIntePhoneCount());
    }
    @Override public String caseWellFormNationalPhoneCountIndicator(    WellFormNationalPhoneCountIndicator object){
      return String.valueOf(object.getWellFormNatiPhoneCount());
    }
  }
;
  IndicatorSqlSwitch<String> sqlSwitch=new IndicatorSqlSwitch<String>(){
    @Override public String caseWhereRuleIndicator(    WhereRuleIndicator object){
      return String.valueOf(object.getUserCount());
    }
    @Override public String caseUserDefIndicator(    UserDefIndicator object){
      if (object instanceof UserDefIndicator) {
        UserDefIndicator userDefineIndicator=object;
        IndicatorCategory category=IndicatorCategoryHelper.getCategory(userDefineIndicator.getIndicatorDefinition());
        if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
          return String.valueOf(userDefineIndicator.getRealValue());
        }
      }
      return String.valueOf(object.getIntegerValue());
    }
    @Override public String caseJavaUserDefIndicator(    JavaUserDefIndicator object){
      return String.valueOf(object.getUserCount());
    }
  }
;
  String result=mySwitch.doSwitch(indicator);
  return result == null ? sqlSwitch.doSwitch(indicator) : result;
}",0.9977036632039366
136628,"@Override public String caseUserDefIndicator(UserDefIndicator object){
  if (object instanceof UserDefIndicator) {
    UserDefIndicator userDefineIndicator=object;
    IndicatorCategory category=IndicatorCategoryHelper.getCategory(userDefineIndicator.getIndicatorDefinition());
    if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
      return String.valueOf(userDefineIndicator.getRealValue());
    }
  }
  return String.valueOf(object.getUserCount());
}","@Override public String caseUserDefIndicator(UserDefIndicator object){
  if (object instanceof UserDefIndicator) {
    UserDefIndicator userDefineIndicator=object;
    IndicatorCategory category=IndicatorCategoryHelper.getCategory(userDefineIndicator.getIndicatorDefinition());
    if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
      return String.valueOf(userDefineIndicator.getRealValue());
    }
  }
  return String.valueOf(object.getIntegerValue());
}",0.9775401069518715
136629,"/** 
 * DOC bZhou Comment method ""getIndicatorValue"".
 * @param indicator
 * @return
 */
public static String getIndicatorValue(Indicator indicator){
  IndicatorsSwitch<String> mySwitch=new IndicatorsSwitch<String>(){
    @Override public String caseAverageLengthIndicator(    AverageLengthIndicator object){
      return createStandardNumber(object.getAverageLength());
    }
    @Override public String caseBlankCountIndicator(    BlankCountIndicator object){
      return String.valueOf(object.getBlankCount());
    }
    @Override public String caseDefValueCountIndicator(    DefValueCountIndicator object){
      return String.valueOf(object.getDefaultValCount());
    }
    @Override public String caseDistinctCountIndicator(    DistinctCountIndicator object){
      return String.valueOf(object.getDistinctValueCount());
    }
    @Override public String caseDuplicateCountIndicator(    DuplicateCountIndicator object){
      return String.valueOf(object.getDuplicateValueCount());
    }
    @Override public String caseMaxLengthIndicator(    MaxLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseMeanIndicator(    MeanIndicator object){
      return createStandardNumber(object.getMean());
    }
    @Override public String caseMedianIndicator(    MedianIndicator object){
      return createStandardNumber(object.getMedian());
    }
    @Override public String caseMinLengthIndicator(    MinLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseModeIndicator(    ModeIndicator object){
      return String.valueOf(object.getMode());
    }
    @Override public String caseNullCountIndicator(    NullCountIndicator object){
      return String.valueOf(object.getNullCount());
    }
    @Override public String casePatternMatchingIndicator(    PatternMatchingIndicator object){
      return String.valueOf(object.getMatchingValueCount());
    }
    @Override public String caseRowCountIndicator(    RowCountIndicator object){
      return String.valueOf(object.getCount());
    }
    @Override public String caseUniqueCountIndicator(    UniqueCountIndicator object){
      return String.valueOf(object.getUniqueValueCount());
    }
    @Override public String caseValueIndicator(    ValueIndicator object){
      return object.getValue();
    }
    @Override public String caseValidPhoneCountIndicator(    ValidPhoneCountIndicator object){
      return String.valueOf(object.getValidPhoneNumCount());
    }
    @Override public String casePossiblePhoneCountIndicator(    PossiblePhoneCountIndicator object){
      return String.valueOf(object.getPossiblePhoneCount());
    }
    @Override public String caseValidRegCodeCountIndicator(    ValidRegCodeCountIndicator object){
      return String.valueOf(object.getValidRegCount());
    }
    @Override public String caseInvalidRegCodeCountIndicator(    InvalidRegCodeCountIndicator object){
      return String.valueOf(object.getInvalidRegCount());
    }
    @Override public String caseWellFormE164PhoneCountIndicator(    WellFormE164PhoneCountIndicator object){
      return String.valueOf(object.getWellFormE164PhoneCount());
    }
    @Override public String caseWellFormIntePhoneCountIndicator(    WellFormIntePhoneCountIndicator object){
      return String.valueOf(object.getWellFormIntePhoneCount());
    }
    @Override public String caseWellFormNationalPhoneCountIndicator(    WellFormNationalPhoneCountIndicator object){
      return String.valueOf(object.getWellFormNatiPhoneCount());
    }
  }
;
  IndicatorSqlSwitch<String> sqlSwitch=new IndicatorSqlSwitch<String>(){
    @Override public String caseWhereRuleIndicator(    WhereRuleIndicator object){
      return String.valueOf(object.getUserCount());
    }
    @Override public String caseUserDefIndicator(    UserDefIndicator object){
      if (object instanceof UserDefIndicator) {
        UserDefIndicator userDefineIndicator=object;
        IndicatorCategory category=IndicatorCategoryHelper.getCategory(userDefineIndicator.getIndicatorDefinition());
        if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
          return String.valueOf(userDefineIndicator.getRealValue());
        }
      }
      return String.valueOf(object.getUserCount());
    }
    @Override public String caseJavaUserDefIndicator(    JavaUserDefIndicator object){
      return String.valueOf(object.getUserCount());
    }
  }
;
  String result=mySwitch.doSwitch(indicator);
  return result == null ? sqlSwitch.doSwitch(indicator) : result;
}","/** 
 * DOC bZhou Comment method ""getIndicatorValue"".
 * @param indicator
 * @return
 */
public static String getIndicatorValue(Indicator indicator){
  IndicatorsSwitch<String> mySwitch=new IndicatorsSwitch<String>(){
    @Override public String caseAverageLengthIndicator(    AverageLengthIndicator object){
      return createStandardNumber(object.getAverageLength());
    }
    @Override public String caseBlankCountIndicator(    BlankCountIndicator object){
      return String.valueOf(object.getBlankCount());
    }
    @Override public String caseDefValueCountIndicator(    DefValueCountIndicator object){
      return String.valueOf(object.getDefaultValCount());
    }
    @Override public String caseDistinctCountIndicator(    DistinctCountIndicator object){
      return String.valueOf(object.getDistinctValueCount());
    }
    @Override public String caseDuplicateCountIndicator(    DuplicateCountIndicator object){
      return String.valueOf(object.getDuplicateValueCount());
    }
    @Override public String caseMaxLengthIndicator(    MaxLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseMeanIndicator(    MeanIndicator object){
      return createStandardNumber(object.getMean());
    }
    @Override public String caseMedianIndicator(    MedianIndicator object){
      return createStandardNumber(object.getMedian());
    }
    @Override public String caseMinLengthIndicator(    MinLengthIndicator object){
      return String.valueOf(object.getLength());
    }
    @Override public String caseModeIndicator(    ModeIndicator object){
      return String.valueOf(object.getMode());
    }
    @Override public String caseNullCountIndicator(    NullCountIndicator object){
      return String.valueOf(object.getNullCount());
    }
    @Override public String casePatternMatchingIndicator(    PatternMatchingIndicator object){
      return String.valueOf(object.getMatchingValueCount());
    }
    @Override public String caseRowCountIndicator(    RowCountIndicator object){
      return String.valueOf(object.getCount());
    }
    @Override public String caseUniqueCountIndicator(    UniqueCountIndicator object){
      return String.valueOf(object.getUniqueValueCount());
    }
    @Override public String caseValueIndicator(    ValueIndicator object){
      return object.getValue();
    }
    @Override public String caseValidPhoneCountIndicator(    ValidPhoneCountIndicator object){
      return String.valueOf(object.getValidPhoneNumCount());
    }
    @Override public String casePossiblePhoneCountIndicator(    PossiblePhoneCountIndicator object){
      return String.valueOf(object.getPossiblePhoneCount());
    }
    @Override public String caseValidRegCodeCountIndicator(    ValidRegCodeCountIndicator object){
      return String.valueOf(object.getValidRegCount());
    }
    @Override public String caseInvalidRegCodeCountIndicator(    InvalidRegCodeCountIndicator object){
      return String.valueOf(object.getInvalidRegCount());
    }
    @Override public String caseWellFormE164PhoneCountIndicator(    WellFormE164PhoneCountIndicator object){
      return String.valueOf(object.getWellFormE164PhoneCount());
    }
    @Override public String caseWellFormIntePhoneCountIndicator(    WellFormIntePhoneCountIndicator object){
      return String.valueOf(object.getWellFormIntePhoneCount());
    }
    @Override public String caseWellFormNationalPhoneCountIndicator(    WellFormNationalPhoneCountIndicator object){
      return String.valueOf(object.getWellFormNatiPhoneCount());
    }
  }
;
  IndicatorSqlSwitch<String> sqlSwitch=new IndicatorSqlSwitch<String>(){
    @Override public String caseWhereRuleIndicator(    WhereRuleIndicator object){
      return String.valueOf(object.getUserCount());
    }
    @Override public String caseUserDefIndicator(    UserDefIndicator object){
      if (object instanceof UserDefIndicator) {
        UserDefIndicator userDefineIndicator=object;
        IndicatorCategory category=IndicatorCategoryHelper.getCategory(userDefineIndicator.getIndicatorDefinition());
        if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
          return String.valueOf(userDefineIndicator.getRealValue());
        }
      }
      return String.valueOf(object.getIntegerValue());
    }
    @Override public String caseJavaUserDefIndicator(    JavaUserDefIndicator object){
      return String.valueOf(object.getUserCount());
    }
  }
;
  String result=mySwitch.doSwitch(indicator);
  return result == null ? sqlSwitch.doSwitch(indicator) : result;
}",0.9977036632039366
136630,"@Override public String caseUserDefIndicator(UserDefIndicator object){
  if (object instanceof UserDefIndicator) {
    UserDefIndicator userDefineIndicator=object;
    IndicatorCategory category=IndicatorCategoryHelper.getCategory(userDefineIndicator.getIndicatorDefinition());
    if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
      return String.valueOf(userDefineIndicator.getRealValue());
    }
  }
  return String.valueOf(object.getUserCount());
}","@Override public String caseUserDefIndicator(UserDefIndicator object){
  if (object instanceof UserDefIndicator) {
    UserDefIndicator userDefineIndicator=object;
    IndicatorCategory category=IndicatorCategoryHelper.getCategory(userDefineIndicator.getIndicatorDefinition());
    if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
      return String.valueOf(userDefineIndicator.getRealValue());
    }
  }
  return String.valueOf(object.getIntegerValue());
}",0.9775401069518715
136631,"/** 
 * Copy The jar file if it is not exist or not new one.
 */
private void CopyTheJarFile(){
  try {
    File sourceFile=null;
    try {
      URL resource=CWMPlugin.getDefault().getBundle().getResource(""String_Node_Str"" + Path.SEPARATOR + ""String_Node_Str"");
      System.out.println(resource.toString());
      URL fileURL=FileLocator.toFileURL(resource);
      System.out.println(fileURL.toString());
      URI uri=fileURL.toURI();
      System.out.println(uri.toString());
      sourceFile=new File(uri);
    }
 catch (    URISyntaxException e) {
      Assert.fail(e.getMessage());
    }
    if (sourceFile == null) {
      Assert.fail(""String_Node_Str"");
    }
    String tempLibPath=ExtractMetaDataUtils.getInstance().getJavaLibPath();
    File targetFile=new File(tempLibPath + ""String_Node_Str"");
    FilesUtils.copyFile(sourceFile,targetFile);
  }
 catch (  IOException e1) {
    Assert.fail(e1.getMessage());
  }
}","/** 
 * Copy The jar file if it is not exist or not new one.
 * @throws URISyntaxException
 */
private void CopyTheJarFile(){
  try {
    File sourceFile=null;
    URL fileURL=null;
    try {
      URL resource=CWMPlugin.getDefault().getBundle().getResource(""String_Node_Str"" + Path.SEPARATOR + ""String_Node_Str"");
      System.out.println(resource.toString());
      fileURL=FileLocator.toFileURL(resource);
      System.out.println(fileURL.toString());
      URI uri=fileURL.toURI();
      System.out.println(uri.toString());
      sourceFile=new File(uri);
    }
 catch (    IllegalArgumentException e) {
      try {
        Assert.fail(""String_Node_Str"" + fileURL.toString() + ""String_Node_Str""+ fileURL.toURI().toString());
      }
 catch (      URISyntaxException e1) {
        Assert.fail(e1.getMessage());
      }
    }
catch (    URISyntaxException e) {
      Assert.fail(e.getMessage());
    }
    if (sourceFile == null) {
      Assert.fail(""String_Node_Str"");
    }
    String tempLibPath=ExtractMetaDataUtils.getInstance().getJavaLibPath();
    File targetFile=new File(tempLibPath + ""String_Node_Str"");
    FilesUtils.copyFile(sourceFile,targetFile);
  }
 catch (  IOException e1) {
    Assert.fail(e1.getMessage());
  }
}",0.8534442903374942
136632,"/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case3: between Rule and analysis
 */
@Test public void testSaveAnalysisCase3() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  WhereRuleIndicator whereRuleIndicator=IndicatorSqlFactory.eINSTANCE.createWhereRuleIndicator();
  createAnalysisResult.getIndicators().add(whereRuleIndicator);
  DQRule dqRule=RulesFactory.eINSTANCE.createDQRule();
  whereRuleIndicator.setIndicatorDefinition(dqRule);
  TDQBusinessRuleItem createTDQBusinessRuleItem=PropertiesFactory.eINSTANCE.createTDQBusinessRuleItem();
  createTDQBusinessRuleItem.setDqrule(dqRule);
  Property createPatternProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createPatternProperty.setLabel(""String_Node_Str"");
  createTDQBusinessRuleItem.setProperty(createPatternProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQBusinessRuleItem,Path.EMPTY,false);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(whereRuleIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(0,dqRule.getSupplierDependency().get(0).getClient().size());
}","/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case3: between Rule and analysis
 */
@Test public void testSaveAnalysisCase3() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  WhereRuleIndicator whereRuleIndicator=IndicatorSqlFactory.eINSTANCE.createWhereRuleIndicator();
  createAnalysisResult.getIndicators().add(whereRuleIndicator);
  DQRule dqRule=RulesFactory.eINSTANCE.createWhereRule();
  whereRuleIndicator.setIndicatorDefinition(dqRule);
  TDQBusinessRuleItem createTDQBusinessRuleItem=PropertiesFactory.eINSTANCE.createTDQBusinessRuleItem();
  createTDQBusinessRuleItem.setDqrule(dqRule);
  Property createPatternProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createPatternProperty.setLabel(""String_Node_Str"");
  createTDQBusinessRuleItem.setProperty(createPatternProperty);
  createPatternProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQBusinessRuleItem,Path.EMPTY,false);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(whereRuleIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(0,dqRule.getSupplierDependency().get(0).getClient().size());
}",0.9880014998125234
136633,"/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case2: between Pattern and analysis
 */
@Test public void testSaveAnalysisCase2() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  RegexpMatchingIndicator regexMatchingIndicator=IndicatorsFactory.eINSTANCE.createRegexpMatchingIndicator();
  IndicatorParameters createIndicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  regexMatchingIndicator.setParameters(createIndicatorParameters);
  IndicatorDefinition createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  regexMatchingIndicator.setIndicatorDefinition(createIndicatorDefinition);
  TDQIndicatorDefinitionItem createTDQIndicatorDefinitionItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  createTDQIndicatorDefinitionItem.setIndicatorDefinition(createIndicatorDefinition);
  Property createProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createProperty.setLabel(""String_Node_Str"");
  createTDQIndicatorDefinitionItem.setProperty(createProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQIndicatorDefinitionItem,Path.EMPTY,false);
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  createAnalysisResult.getIndicators().add(regexMatchingIndicator);
  TDQPatternItem createTDQPatternItem=PropertiesFactory.eINSTANCE.createTDQPatternItem();
  createTDQPatternItem.setPattern(pattern);
  Property createPatternProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createPatternProperty.setLabel(""String_Node_Str"");
  createTDQPatternItem.setProperty(createPatternProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQPatternItem,Path.EMPTY,false);
  Domain createDomain=DomainFactory.eINSTANCE.createDomain();
  createIndicatorParameters.setDataValidDomain(createDomain);
  createIndicatorParameters.getDataValidDomain().getPatterns().add(pattern);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(regexMatchingIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().size());
  Assert.assertEquals(0,pattern.getSupplierDependency().get(0).getClient().size());
}","/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case2: between Pattern and analysis
 */
@Test public void testSaveAnalysisCase2() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  createAnalysisProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  RegexpMatchingIndicator regexMatchingIndicator=IndicatorsFactory.eINSTANCE.createRegexpMatchingIndicator();
  IndicatorParameters createIndicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  regexMatchingIndicator.setParameters(createIndicatorParameters);
  IndicatorDefinition createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  regexMatchingIndicator.setIndicatorDefinition(createIndicatorDefinition);
  TDQIndicatorDefinitionItem createTDQIndicatorDefinitionItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  createTDQIndicatorDefinitionItem.setIndicatorDefinition(createIndicatorDefinition);
  Property createProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createProperty.setLabel(""String_Node_Str"");
  createTDQIndicatorDefinitionItem.setProperty(createProperty);
  createProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQIndicatorDefinitionItem,Path.EMPTY,false);
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  createAnalysisResult.getIndicators().add(regexMatchingIndicator);
  TDQPatternItem createTDQPatternItem=PropertiesFactory.eINSTANCE.createTDQPatternItem();
  createTDQPatternItem.setPattern(pattern);
  Property createPatternProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createPatternProperty.setLabel(""String_Node_Str"");
  createTDQPatternItem.setProperty(createPatternProperty);
  createPatternProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQPatternItem,new Path(ERepositoryObjectType.TDQ_PATTERN_REGEX.getFolder()).removeFirstSegments(2),false);
  Domain createDomain=DomainFactory.eINSTANCE.createDomain();
  createIndicatorParameters.setDataValidDomain(createDomain);
  createIndicatorParameters.getDataValidDomain().getPatterns().add(pattern);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(regexMatchingIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().size());
  Assert.assertEquals(0,pattern.getSupplierDependency().get(0).getClient().size());
}",0.9671200316915356
136634,"/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case1: between analysis and report
 */
@Test public void testSaveReportCase1() throws PersistenceException {
  ReportWriter createReportWriter=ElementWriterFactory.getInstance().createReportWriter();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  TdReport createTdReport=ReportsFactory.eINSTANCE.createTdReport();
  TDQReportItem createTDQReportItem=PropertiesFactory.eINSTANCE.createTDQReportItem();
  createTDQReportItem.setReport(createTdReport);
  Property createReportProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createReportProperty.setLabel(""String_Node_Str"");
  createTDQReportItem.setProperty(createReportProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQReportItem,Path.EMPTY,false);
  createTdReport.addAnalysis(createAnalysis);
  ReturnCode save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().get(0).getClient().size());
  createTdReport.removeAnalysis(createAnalysis);
  save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(0,createAnalysis.getSupplierDependency().get(0).getClient().size());
}","/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case1: between analysis and report
 */
@Test public void testSaveReportCase1() throws PersistenceException {
  ReportWriter createReportWriter=ElementWriterFactory.getInstance().createReportWriter();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createAnalysisProperty.setId(EcoreUtil.generateUUID());
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  TdReport createTdReport=ReportsFactory.eINSTANCE.createTdReport();
  TDQReportItem createTDQReportItem=PropertiesFactory.eINSTANCE.createTDQReportItem();
  createTDQReportItem.setReport(createTdReport);
  Property createReportProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createReportProperty.setLabel(""String_Node_Str"");
  createTDQReportItem.setProperty(createReportProperty);
  createReportProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQReportItem,Path.EMPTY,false);
  createTdReport.addAnalysis(createAnalysis);
  ReturnCode save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().get(0).getClient().size());
  createTdReport.removeAnalysis(createAnalysis);
  save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(0,createAnalysis.getSupplierDependency().get(0).getClient().size());
}",0.9759087066779376
136635,"/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case1: between UDI and analysis
 */
@Test public void testSaveAnalysisCase1() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  UserDefIndicator createUserDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  createAnalysisResult.getIndicators().add(createUserDefIndicator);
  UDIndicatorDefinition createUDIndicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  createUserDefIndicator.setIndicatorDefinition(createUDIndicatorDefinition);
  TDQIndicatorDefinitionItem createTDQIndicatorDefinitionItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  createTDQIndicatorDefinitionItem.setIndicatorDefinition(createUDIndicatorDefinition);
  Property createProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createProperty.setLabel(""String_Node_Str"");
  createTDQIndicatorDefinitionItem.setProperty(createProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQIndicatorDefinitionItem,Path.EMPTY,false);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(createUserDefIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().size());
  Assert.assertEquals(0,createUDIndicatorDefinition.getSupplierDependency().get(0).getClient().size());
}","/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case1: between UDI and analysis
 */
@Test public void testSaveAnalysisCase1() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  createAnalysisProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  UserDefIndicator createUserDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  createAnalysisResult.getIndicators().add(createUserDefIndicator);
  UDIndicatorDefinition createUDIndicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  createUserDefIndicator.setIndicatorDefinition(createUDIndicatorDefinition);
  createAnalysisResult.getIndicators().add(createUserDefIndicator);
  TDQIndicatorDefinitionItem createTDQIndicatorDefinitionItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  createTDQIndicatorDefinitionItem.setIndicatorDefinition(createUDIndicatorDefinition);
  Property createProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createProperty.setLabel(""String_Node_Str"");
  createTDQIndicatorDefinitionItem.setProperty(createProperty);
  createProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQIndicatorDefinitionItem,new Path(ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS.getFolder()).removeFirstSegments(2),false);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(createUserDefIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().size());
  Assert.assertEquals(0,createUDIndicatorDefinition.getSupplierDependency().get(0).getClient().size());
}",0.9555629802873372
136636,"@Before public void setup(){
  indiDefinition=mock(IndicatorDefinition.class);
  EList<TdExpression> tdExpessionLs=new BasicEList<TdExpression>();
  TdExpression tdExpression1=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",""String_Node_Str"");
  TdExpression tdExpression2=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",""String_Node_Str"");
  tdExpessionLs.add(tdExpression1);
  tdExpessionLs.add(tdExpression2);
  when(indiDefinition.getSqlGenericExpression()).thenReturn(tdExpessionLs);
  UnitTestBuildHelper.initProjectStructure();
}","@Before public void setup(){
  indiDefinition=DefinitionFactoryImpl.eINSTANCE.createIndicatorDefinition();
  EList<TdExpression> tdExpessionLs=new BasicEList<TdExpression>();
  TdExpression tdExpression1=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",""String_Node_Str"");
  TdExpression tdExpression2=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",""String_Node_Str"");
  tdExpessionLs.add(tdExpression1);
  tdExpessionLs.add(tdExpression2);
  indiDefinition.getSqlGenericExpression().add(tdExpression1);
  indiDefinition.getSqlGenericExpression().add(tdExpression2);
  UnitTestBuildHelper.initProjectStructure();
}",0.8668885191347754
136637,"/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case3: between Rule and analysis
 */
@Test public void testSaveAnalysisCase3() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  WhereRuleIndicator whereRuleIndicator=IndicatorSqlFactory.eINSTANCE.createWhereRuleIndicator();
  createAnalysisResult.getIndicators().add(whereRuleIndicator);
  DQRule dqRule=RulesFactory.eINSTANCE.createWhereRule();
  whereRuleIndicator.setIndicatorDefinition(dqRule);
  TDQBusinessRuleItem createTDQBusinessRuleItem=PropertiesFactory.eINSTANCE.createTDQBusinessRuleItem();
  createTDQBusinessRuleItem.setDqrule(dqRule);
  Property createPatternProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createPatternProperty.setLabel(""String_Node_Str"");
  createTDQBusinessRuleItem.setProperty(createPatternProperty);
  createPatternProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQBusinessRuleItem,Path.EMPTY,false);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(whereRuleIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(0,dqRule.getSupplierDependency().get(0).getClient().size());
}","/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case3: between Rule and analysis
 */
@Test public void testSaveAnalysisCase3() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  createAnalysisProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  WhereRuleIndicator whereRuleIndicator=IndicatorSqlFactory.eINSTANCE.createWhereRuleIndicator();
  createAnalysisResult.getIndicators().add(whereRuleIndicator);
  DQRule dqRule=RulesFactory.eINSTANCE.createWhereRule();
  whereRuleIndicator.setIndicatorDefinition(dqRule);
  TDQBusinessRuleItem createTDQBusinessRuleItem=PropertiesFactory.eINSTANCE.createTDQBusinessRuleItem();
  createTDQBusinessRuleItem.setDqrule(dqRule);
  Property createPatternProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createPatternProperty.setLabel(""String_Node_Str"");
  createTDQBusinessRuleItem.setProperty(createPatternProperty);
  createPatternProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQBusinessRuleItem,Path.EMPTY,false);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(whereRuleIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(0,dqRule.getSupplierDependency().get(0).getClient().size());
}",0.9893617021276596
136638,"/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case3: between Rule and analysis
 */
@Test public void testSaveAnalysisCase3() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  WhereRuleIndicator whereRuleIndicator=IndicatorSqlFactory.eINSTANCE.createWhereRuleIndicator();
  createAnalysisResult.getIndicators().add(whereRuleIndicator);
  DQRule dqRule=RulesFactory.eINSTANCE.createDQRule();
  whereRuleIndicator.setIndicatorDefinition(dqRule);
  TDQBusinessRuleItem createTDQBusinessRuleItem=PropertiesFactory.eINSTANCE.createTDQBusinessRuleItem();
  createTDQBusinessRuleItem.setDqrule(dqRule);
  Property createPatternProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createPatternProperty.setLabel(""String_Node_Str"");
  createTDQBusinessRuleItem.setProperty(createPatternProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQBusinessRuleItem,Path.EMPTY,false);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(whereRuleIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(0,dqRule.getSupplierDependency().get(0).getClient().size());
}","/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case3: between Rule and analysis
 */
@Test public void testSaveAnalysisCase3() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  WhereRuleIndicator whereRuleIndicator=IndicatorSqlFactory.eINSTANCE.createWhereRuleIndicator();
  createAnalysisResult.getIndicators().add(whereRuleIndicator);
  DQRule dqRule=RulesFactory.eINSTANCE.createWhereRule();
  whereRuleIndicator.setIndicatorDefinition(dqRule);
  TDQBusinessRuleItem createTDQBusinessRuleItem=PropertiesFactory.eINSTANCE.createTDQBusinessRuleItem();
  createTDQBusinessRuleItem.setDqrule(dqRule);
  Property createPatternProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createPatternProperty.setLabel(""String_Node_Str"");
  createTDQBusinessRuleItem.setProperty(createPatternProperty);
  createPatternProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQBusinessRuleItem,Path.EMPTY,false);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(whereRuleIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,dqRule.getSupplierDependency().size());
  Assert.assertEquals(0,dqRule.getSupplierDependency().get(0).getClient().size());
}",0.9880014998125234
136639,"/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case2: between Pattern and analysis
 */
@Test public void testSaveAnalysisCase2() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  RegexpMatchingIndicator regexMatchingIndicator=IndicatorsFactory.eINSTANCE.createRegexpMatchingIndicator();
  IndicatorParameters createIndicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  regexMatchingIndicator.setParameters(createIndicatorParameters);
  IndicatorDefinition createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  regexMatchingIndicator.setIndicatorDefinition(createIndicatorDefinition);
  TDQIndicatorDefinitionItem createTDQIndicatorDefinitionItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  createTDQIndicatorDefinitionItem.setIndicatorDefinition(createIndicatorDefinition);
  Property createProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createProperty.setLabel(""String_Node_Str"");
  createTDQIndicatorDefinitionItem.setProperty(createProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQIndicatorDefinitionItem,Path.EMPTY,false);
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  createAnalysisResult.getIndicators().add(regexMatchingIndicator);
  TDQPatternItem createTDQPatternItem=PropertiesFactory.eINSTANCE.createTDQPatternItem();
  createTDQPatternItem.setPattern(pattern);
  Property createPatternProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createPatternProperty.setLabel(""String_Node_Str"");
  createTDQPatternItem.setProperty(createPatternProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQPatternItem,Path.EMPTY,false);
  Domain createDomain=DomainFactory.eINSTANCE.createDomain();
  createIndicatorParameters.setDataValidDomain(createDomain);
  createIndicatorParameters.getDataValidDomain().getPatterns().add(pattern);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(regexMatchingIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().size());
  Assert.assertEquals(0,pattern.getSupplierDependency().get(0).getClient().size());
}","/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case2: between Pattern and analysis
 */
@Test public void testSaveAnalysisCase2() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  createAnalysisProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  RegexpMatchingIndicator regexMatchingIndicator=IndicatorsFactory.eINSTANCE.createRegexpMatchingIndicator();
  IndicatorParameters createIndicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  regexMatchingIndicator.setParameters(createIndicatorParameters);
  IndicatorDefinition createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  regexMatchingIndicator.setIndicatorDefinition(createIndicatorDefinition);
  TDQIndicatorDefinitionItem createTDQIndicatorDefinitionItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  createTDQIndicatorDefinitionItem.setIndicatorDefinition(createIndicatorDefinition);
  Property createProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createProperty.setLabel(""String_Node_Str"");
  createTDQIndicatorDefinitionItem.setProperty(createProperty);
  createProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQIndicatorDefinitionItem,Path.EMPTY,false);
  Pattern pattern=PatternFactory.eINSTANCE.createPattern();
  createAnalysisResult.getIndicators().add(regexMatchingIndicator);
  TDQPatternItem createTDQPatternItem=PropertiesFactory.eINSTANCE.createTDQPatternItem();
  createTDQPatternItem.setPattern(pattern);
  Property createPatternProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createPatternProperty.setLabel(""String_Node_Str"");
  createTDQPatternItem.setProperty(createPatternProperty);
  createPatternProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQPatternItem,new Path(ERepositoryObjectType.TDQ_PATTERN_REGEX.getFolder()).removeFirstSegments(2),false);
  Domain createDomain=DomainFactory.eINSTANCE.createDomain();
  createIndicatorParameters.setDataValidDomain(createDomain);
  createIndicatorParameters.getDataValidDomain().getPatterns().add(pattern);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(regexMatchingIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,pattern.getSupplierDependency().size());
  Assert.assertEquals(0,pattern.getSupplierDependency().get(0).getClient().size());
}",0.9671200316915356
136640,"/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case1: between analysis and report
 */
@Test public void testSaveReportCase1() throws PersistenceException {
  ReportWriter createReportWriter=ElementWriterFactory.getInstance().createReportWriter();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  TdReport createTdReport=ReportsFactory.eINSTANCE.createTdReport();
  TDQReportItem createTDQReportItem=PropertiesFactory.eINSTANCE.createTDQReportItem();
  createTDQReportItem.setReport(createTdReport);
  Property createReportProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createReportProperty.setLabel(""String_Node_Str"");
  createTDQReportItem.setProperty(createReportProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQReportItem,Path.EMPTY,false);
  createTdReport.addAnalysis(createAnalysis);
  ReturnCode save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().get(0).getClient().size());
  createTdReport.removeAnalysis(createAnalysis);
  save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(0,createAnalysis.getSupplierDependency().get(0).getClient().size());
}","/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case1: between analysis and report
 */
@Test public void testSaveReportCase1() throws PersistenceException {
  ReportWriter createReportWriter=ElementWriterFactory.getInstance().createReportWriter();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createAnalysisProperty.setId(EcoreUtil.generateUUID());
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  TdReport createTdReport=ReportsFactory.eINSTANCE.createTdReport();
  TDQReportItem createTDQReportItem=PropertiesFactory.eINSTANCE.createTDQReportItem();
  createTDQReportItem.setReport(createTdReport);
  Property createReportProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createReportProperty.setLabel(""String_Node_Str"");
  createTDQReportItem.setProperty(createReportProperty);
  createReportProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQReportItem,Path.EMPTY,false);
  createTdReport.addAnalysis(createAnalysis);
  ReturnCode save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().get(0).getClient().size());
  createTdReport.removeAnalysis(createAnalysis);
  save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(0,createAnalysis.getSupplierDependency().get(0).getClient().size());
}",0.9759087066779376
136641,"/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case1: between UDI and analysis
 */
@Test public void testSaveAnalysisCase1() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  UserDefIndicator createUserDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  createAnalysisResult.getIndicators().add(createUserDefIndicator);
  UDIndicatorDefinition createUDIndicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  createUserDefIndicator.setIndicatorDefinition(createUDIndicatorDefinition);
  TDQIndicatorDefinitionItem createTDQIndicatorDefinitionItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  createTDQIndicatorDefinitionItem.setIndicatorDefinition(createUDIndicatorDefinition);
  Property createProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createProperty.setLabel(""String_Node_Str"");
  createTDQIndicatorDefinitionItem.setProperty(createProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQIndicatorDefinitionItem,Path.EMPTY,false);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(createUserDefIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().size());
  Assert.assertEquals(0,createUDIndicatorDefinition.getSupplierDependency().get(0).getClient().size());
}","/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case1: between UDI and analysis
 */
@Test public void testSaveAnalysisCase1() throws PersistenceException {
  AnalysisWriter createAnalysisWriter=ElementWriterFactory.getInstance().createAnalysisWrite();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  AnalysisContext createAnalysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setContext(createAnalysisContext);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  createAnalysisProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  UserDefIndicator createUserDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  createAnalysisResult.getIndicators().add(createUserDefIndicator);
  UDIndicatorDefinition createUDIndicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  createUserDefIndicator.setIndicatorDefinition(createUDIndicatorDefinition);
  createAnalysisResult.getIndicators().add(createUserDefIndicator);
  TDQIndicatorDefinitionItem createTDQIndicatorDefinitionItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  createTDQIndicatorDefinitionItem.setIndicatorDefinition(createUDIndicatorDefinition);
  Property createProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createProperty.setLabel(""String_Node_Str"");
  createTDQIndicatorDefinitionItem.setProperty(createProperty);
  createProperty.setId(EcoreUtil.generateUUID());
  ProxyRepositoryFactory.getInstance().create(createTDQIndicatorDefinitionItem,new Path(ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS.getFolder()).removeFirstSegments(2),false);
  ReturnCode save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().get(0).getClient().size());
  createAnalysisResult.getIndicators().remove(createUserDefIndicator);
  save=createAnalysisWriter.save(createTDQAnalysisItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createAnalysis.getClientDependency().size());
  Assert.assertEquals(1,createUDIndicatorDefinition.getSupplierDependency().size());
  Assert.assertEquals(0,createUDIndicatorDefinition.getSupplierDependency().get(0).getClient().size());
}",0.9555629802873372
136642,"/** 
 * Test method for   {@link org.talend.dataprofiler.ecos.service.EcosystemService#getBranch(java.lang.String)}.
 */
@Test public void testGetBranch(){
  try {
    String[] branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertEquals(1,branch.length);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertEquals(1,branch.length);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertEquals(1,branch.length);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(null);
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(StringUtils.EMPTY);
    Assert.assertNull(branch);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Test method for   {@link org.talend.dataprofiler.ecos.service.EcosystemService#getBranch(java.lang.String)}.
 */
@Test public void testGetBranch(){
  try {
    String[] branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 3);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    Assert.assertEquals(""String_Node_Str"",branch[1]);
    Assert.assertEquals(""String_Node_Str"",branch[2]);
    Assert.assertEquals(""String_Node_Str"",branch[3]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 3);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    Assert.assertEquals(""String_Node_Str"",branch[1]);
    Assert.assertEquals(""String_Node_Str"",branch[2]);
    Assert.assertEquals(""String_Node_Str"",branch[3]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 3);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    Assert.assertEquals(""String_Node_Str"",branch[1]);
    Assert.assertEquals(""String_Node_Str"",branch[2]);
    Assert.assertEquals(""String_Node_Str"",branch[3]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(null);
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(StringUtils.EMPTY);
    Assert.assertNull(branch);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8321917808219178
136643,"/** 
 * if the DriverClassName is empty or Jar File Path is invalid return false.
 * @param dbConn a General JDBC database connection
 * @return
 * @throws MalformedURLException
 */
public static ReturnCode checkGeneralJdbcJarFilePathDriverClassName(DatabaseConnection dbConn) throws MalformedURLException {
  ReturnCode returnCode=new ReturnCode();
  String driverClass=JavaSqlFactory.getDriverClass(dbConn);
  String driverJarPath=JavaSqlFactory.getDriverJarPath(dbConn);
  if (driverClass == null || driverClass.trim().equals(""String_Node_Str"")) {
    returnCode.setOk(false);
    returnCode.setMessage(Messages.getString(""String_Node_Str""));
  }
 else {
    if (driverJarPath == null || driverJarPath.trim().equals(""String_Node_Str"")) {
      returnCode.setOk(false);
      returnCode.setMessage(Messages.getString(""String_Node_Str""));
    }
 else {
      List<String> driverJarNameList=new ArrayList<String>();
      String[] splits=driverJarPath.split(""String_Node_Str"");
      for (      String str : splits) {
        if (!StringUtils.isBlank(str)) {
          driverJarNameList.add(str);
        }
      }
      LinkedList<String> driverJarRealPaths=getDriverJarRealPaths(driverJarNameList);
      for (      String str : driverJarRealPaths) {
        File jarFile=new File(str);
        if (!jarFile.exists() || jarFile.isDirectory()) {
          returnCode.setOk(false);
          returnCode.setMessage(Messages.getString(""String_Node_Str""));
          break;
        }
      }
    }
  }
  return returnCode;
}","/** 
 * if the DriverClassName is empty or Jar File Path is invalid return false.
 * @param dbConn a General JDBC database connection
 * @return
 * @throws MalformedURLException
 */
public static ReturnCode checkGeneralJdbcJarFilePathDriverClassName(DatabaseConnection dbConn) throws MalformedURLException {
  ReturnCode returnCode=new ReturnCode();
  String driverClass=JavaSqlFactory.getDriverClass(dbConn);
  String driverJarPath=JavaSqlFactory.getDriverJarPath(dbConn);
  if (driverClass == null || driverClass.trim().equals(""String_Node_Str"")) {
    returnCode.setOk(false);
    returnCode.setMessage(Messages.getString(""String_Node_Str""));
  }
 else {
    if (driverJarPath == null || driverJarPath.trim().equals(""String_Node_Str"")) {
      returnCode.setOk(false);
      returnCode.setMessage(Messages.getString(""String_Node_Str""));
    }
 else {
      List<String> driverJarNameList=new ArrayList<String>();
      String[] splits=driverJarPath.split(""String_Node_Str"");
      for (      String str : splits) {
        if (!StringUtils.isBlank(str)) {
          driverJarNameList.add(str);
        }
      }
      LinkedList<String> driverJarRealPaths=getDriverJarRealPaths(driverJarNameList);
      if (driverJarRealPaths.isEmpty()) {
        returnCode.setOk(false);
        returnCode.setMessage(Messages.getString(""String_Node_Str""));
      }
      for (      String str : driverJarRealPaths) {
        File jarFile=new File(str);
        if (!jarFile.exists() || jarFile.isDirectory()) {
          returnCode.setOk(false);
          returnCode.setMessage(Messages.getString(""String_Node_Str""));
          break;
        }
      }
    }
  }
  return returnCode;
}",0.952112676056338
136644,"/** 
 * Test method for  {@link org.talend.dataquality.indicators.columnset.impl.ColumnSetMultiValueIndicatorImpl#getColumnHeaders()}.
 */
@Test public void testGetColumnHeaders(){
  ColumnSetMultiValueIndicatorImpl columnSetMultiValueIndicatorImpl=new ColumnSetMultiValueIndicatorImpl();
  EList<ModelElement> analyzedColumns=columnSetMultiValueIndicatorImpl.getAnalyzedColumns();
  EList<String> columnHeaders=columnSetMultiValueIndicatorImpl.getColumnHeaders();
  Assert.assertFalse(columnHeaders.isEmpty());
  Assert.assertTrue(columnHeaders.size() == 1);
  Assert.assertTrue(COUNT_STAR.equals(columnHeaders.get(0)));
  analyzedColumns.add(createColumn11());
  analyzedColumns.add(createColumn12());
  analyzedColumns.add(createColumn2());
  analyzedColumns.add(createColumn3());
  columnHeaders=columnSetMultiValueIndicatorImpl.getColumnHeaders();
  Assert.assertFalse(columnHeaders.isEmpty());
  Assert.assertTrue(columnHeaders.size() == 6);
  Assert.assertTrue(COLUMN_NAME_11.equals(columnHeaders.get(0)));
  Assert.assertTrue(COLUMN_NAME_12.equals(columnHeaders.get(1)));
  Assert.assertTrue(COLUMN_NAME_2.equals(columnHeaders.get(2)));
  Assert.assertTrue(COLUMN_NAME_3.equals(columnHeaders.get(3)));
  Assert.assertTrue(COLUMN_NAME_4.equals(columnHeaders.get(4)));
  Assert.assertTrue(COUNT_STAR.equals(columnHeaders.get(5)));
}","/** 
 * Test method for  {@link org.talend.dataquality.indicators.columnset.impl.ColumnSetMultiValueIndicatorImpl#getColumnHeaders()}.
 */
@Test public void testGetColumnHeaders(){
  ColumnSetMultiValueIndicatorImpl columnSetMultiValueIndicatorImpl=new ColumnSetMultiValueIndicatorImpl();
  EList<ModelElement> analyzedColumns=columnSetMultiValueIndicatorImpl.getAnalyzedColumns();
  EList<String> columnHeaders=columnSetMultiValueIndicatorImpl.getColumnHeaders();
  Assert.assertFalse(columnHeaders.isEmpty());
  Assert.assertTrue(columnHeaders.size() == 1);
  Assert.assertTrue(COUNT_STAR.equals(columnHeaders.get(0)));
  analyzedColumns.add(createColumn11());
  analyzedColumns.add(createColumn12());
  analyzedColumns.add(createColumn2());
  analyzedColumns.add(createColumn3());
  analyzedColumns.add(createColumn4());
  columnHeaders=columnSetMultiValueIndicatorImpl.getColumnHeaders();
  Assert.assertFalse(columnHeaders.isEmpty());
  Assert.assertTrue(columnHeaders.size() == 6);
  Assert.assertTrue(COLUMN_NAME_11.equals(columnHeaders.get(0)));
  Assert.assertTrue(COLUMN_NAME_12.equals(columnHeaders.get(1)));
  Assert.assertTrue(COLUMN_NAME_2.equals(columnHeaders.get(2)));
  Assert.assertTrue(COLUMN_NAME_3.equals(columnHeaders.get(3)));
  Assert.assertTrue(COLUMN_NAME_4.equals(columnHeaders.get(4)));
  Assert.assertTrue(COUNT_STAR.equals(columnHeaders.get(5)));
}",0.9852724594992636
136645,"/** 
 * Test method for  {@link org.talend.dataquality.indicators.columnset.impl.ColumnSetMultiValueIndicatorImpl#getColumnHeaders()}.
 */
@Test public void testGetColumnHeaders(){
  ColumnSetMultiValueIndicatorImpl columnSetMultiValueIndicatorImpl=new ColumnSetMultiValueIndicatorImpl();
  EList<ModelElement> analyzedColumns=columnSetMultiValueIndicatorImpl.getAnalyzedColumns();
  EList<String> columnHeaders=columnSetMultiValueIndicatorImpl.getColumnHeaders();
  Assert.assertFalse(columnHeaders.isEmpty());
  Assert.assertTrue(columnHeaders.size() == 1);
  Assert.assertTrue(COUNT_STAR.equals(columnHeaders.get(0)));
  analyzedColumns.add(createColumn11());
  analyzedColumns.add(createColumn12());
  analyzedColumns.add(createColumn2());
  analyzedColumns.add(createColumn3());
  columnHeaders=columnSetMultiValueIndicatorImpl.getColumnHeaders();
  Assert.assertFalse(columnHeaders.isEmpty());
  Assert.assertTrue(columnHeaders.size() == 6);
  Assert.assertTrue(COLUMN_NAME_11.equals(columnHeaders.get(0)));
  Assert.assertTrue(COLUMN_NAME_12.equals(columnHeaders.get(1)));
  Assert.assertTrue(COLUMN_NAME_2.equals(columnHeaders.get(2)));
  Assert.assertTrue(COLUMN_NAME_3.equals(columnHeaders.get(3)));
  Assert.assertTrue(COLUMN_NAME_4.equals(columnHeaders.get(4)));
  Assert.assertTrue(COUNT_STAR.equals(columnHeaders.get(5)));
}","/** 
 * Test method for  {@link org.talend.dataquality.indicators.columnset.impl.ColumnSetMultiValueIndicatorImpl#getColumnHeaders()}.
 */
@Test public void testGetColumnHeaders(){
  ColumnSetMultiValueIndicatorImpl columnSetMultiValueIndicatorImpl=new ColumnSetMultiValueIndicatorImpl();
  EList<ModelElement> analyzedColumns=columnSetMultiValueIndicatorImpl.getAnalyzedColumns();
  EList<String> columnHeaders=columnSetMultiValueIndicatorImpl.getColumnHeaders();
  Assert.assertFalse(columnHeaders.isEmpty());
  Assert.assertTrue(columnHeaders.size() == 1);
  Assert.assertTrue(COUNT_STAR.equals(columnHeaders.get(0)));
  analyzedColumns.add(createColumn11());
  analyzedColumns.add(createColumn12());
  analyzedColumns.add(createColumn2());
  analyzedColumns.add(createColumn3());
  analyzedColumns.add(createColumn4());
  columnHeaders=columnSetMultiValueIndicatorImpl.getColumnHeaders();
  Assert.assertFalse(columnHeaders.isEmpty());
  Assert.assertTrue(columnHeaders.size() == 6);
  Assert.assertTrue(COLUMN_NAME_11.equals(columnHeaders.get(0)));
  Assert.assertTrue(COLUMN_NAME_12.equals(columnHeaders.get(1)));
  Assert.assertTrue(COLUMN_NAME_2.equals(columnHeaders.get(2)));
  Assert.assertTrue(COLUMN_NAME_3.equals(columnHeaders.get(3)));
  Assert.assertTrue(COLUMN_NAME_4.equals(columnHeaders.get(4)));
  Assert.assertTrue(COUNT_STAR.equals(columnHeaders.get(5)));
}",0.9852724594992636
136646,"public DQRespositoryView(){
  super();
  try {
    manager=DQStructureManager.getInstance();
    if (manager.isNeedCreateStructure()) {
      ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(new RepositoryWorkUnit<Object>(""String_Node_Str""){
        @Override protected void run(){
          manager.createDQStructure();
        }
      }
);
    }
    if (manager.isNeedMigration()) {
      IRunnableWithProgress op=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          ProductVersion wVersion=WorkspaceVersionHelper.getVesion();
          new MigrationTaskManager(wVersion).doMigrationTask(monitor);
        }
      }
;
      ProgressUI.popProgressDialog(op);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public DQRespositoryView(){
  super();
  try {
    manager=DQStructureManager.getInstance();
    if (manager.isNeedCreateStructure()) {
      RepositoryWorkUnit<Object> dQRepositoryWorkUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
        @Override protected void run(){
          final IWorkspaceRunnable op=new IWorkspaceRunnable(){
            public void run(            IProgressMonitor monitor) throws CoreException {
              manager.createDQStructure();
            }
          }
;
          IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
            public void run(            final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
              IWorkspace workspace=ResourcesPlugin.getWorkspace();
              try {
                ISchedulingRule schedulingRule=workspace.getRoot();
                workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
              }
 catch (              CoreException e) {
                throw new InvocationTargetException(e);
              }
            }
          }
;
          try {
            iRunnableWithProgress.run(new NullProgressMonitor());
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
      }
;
      dQRepositoryWorkUnit.setForceTransaction(true);
      ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(dQRepositoryWorkUnit);
    }
    if (manager.isNeedMigration()) {
      IRunnableWithProgress op=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          ProductVersion wVersion=WorkspaceVersionHelper.getVesion();
          new MigrationTaskManager(wVersion).doMigrationTask(monitor);
        }
      }
;
      ProgressUI.popProgressDialog(op);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.5196679898953447
136647,"/** 
 * Test method for   {@link org.talend.dataprofiler.ecos.service.EcosystemService#getBranch(java.lang.String)}.
 */
@Test public void testGetBranch(){
  try {
    String[] branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertEquals(1,branch.length);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertEquals(1,branch.length);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertEquals(1,branch.length);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(null);
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(StringUtils.EMPTY);
    Assert.assertNull(branch);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Test method for   {@link org.talend.dataprofiler.ecos.service.EcosystemService#getBranch(java.lang.String)}.
 */
@Test public void testGetBranch(){
  try {
    String[] branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 3);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    Assert.assertEquals(""String_Node_Str"",branch[1]);
    Assert.assertEquals(""String_Node_Str"",branch[2]);
    Assert.assertEquals(""String_Node_Str"",branch[3]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 3);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    Assert.assertEquals(""String_Node_Str"",branch[1]);
    Assert.assertEquals(""String_Node_Str"",branch[2]);
    Assert.assertEquals(""String_Node_Str"",branch[3]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",branch.length > 3);
    Assert.assertEquals(""String_Node_Str"",branch[0]);
    Assert.assertEquals(""String_Node_Str"",branch[1]);
    Assert.assertEquals(""String_Node_Str"",branch[2]);
    Assert.assertEquals(""String_Node_Str"",branch[3]);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(""String_Node_Str"");
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(null);
    Assert.assertNull(branch);
    branch=EcosystemService.getBranch(StringUtils.EMPTY);
    Assert.assertNull(branch);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8321917808219178
136648,"@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
case FILEDELIMITED:
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
break;
case HADOOP_CLUSTER:
image=ImageLib.getImage(ImageLib.HADOOP_CLUSTER);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
if (record.getElement() instanceof MatchRuleDefinition) {
image=ImageLib.getImage(ImageLib.MATCH_RULE_ICON);
}
 else {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
}
 else if (fileName.endsWith(FactoriesUtil.ITEM_EXTENSION)) {
if (file.getParentFile().getName().equals(EResourceConstant.FILEDELIMITED.getName())) {
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
}
 else {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
 else if (fileName.endsWith(FactoriesUtil.SQL)) {
image=ImageLib.getImage(ImageLib.SOURCE_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JAR)) {
image=ImageLib.getImage(ImageLib.JAR_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JRXML)) {
image=ImageLib.getImage(ImageLib.JRXML_ICON);
}
}
}
return image != null ? image : super.getImage(element);
}","@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
case FILEDELIMITED:
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
break;
case HADOOP_CLUSTER:
image=ImageLib.getImage(ImageLib.HADOOP_CLUSTER);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
if (record.getElement() instanceof MatchRuleDefinition) {
image=ImageLib.getImage(ImageLib.MATCH_RULE_ICON);
}
 else {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
}
 else if (fileName.endsWith(FactoriesUtil.ITEM_EXTENSION)) {
if (record.getElement() instanceof DelimitedFileConnection) {
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
}
 else {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
 else if (fileName.endsWith(FactoriesUtil.SQL)) {
image=ImageLib.getImage(ImageLib.SOURCE_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JAR)) {
image=ImageLib.getImage(ImageLib.JAR_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JRXML)) {
image=ImageLib.getImage(ImageLib.JRXML_ICON);
}
}
}
return image != null ? image : super.getImage(element);
}",0.9735915492957746
136649,"@Override public void doRun(){
  if (deleteElements.length == 0) {
    return;
  }
  setSpecialSelection(deletionSelProv);
  deleteElements=checkSourceFilesEditorOpening(deleteElements);
  for (  Object obj : deleteElements) {
    RepositoryNode node=(RepositoryNode)obj;
    selectedNodes.add(node);
  }
  if (DQRepositoryNode.isOnFilterring()) {
    setPreviousFilteredNode(selectedNodes.get(0));
  }
  if (selectedNodes.size() > 0) {
    IRepositoryNode firstNode=selectedNodes.get(0);
    boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(firstNode);
    if (!isStateDeleted) {
      logicDelete();
    }
 else {
      Collection<IRepositoryNode> shownNodes=null;
      Collection<IRepositoryNode> allDeleteNodes=null;
      if (DQRepositoryNode.isOnFilterring()) {
        shownNodes=RepositoryNodeHelper.findAllChildrenNodes(selectedNodes);
        selectedNodes=rebuildNodes(selectedNodes);
        allDeleteNodes=RepositoryNodeHelper.findAllChildrenNodes(selectedNodes);
      }
      if (DQRepositoryNode.isOnFilterring() && isShowFilteredOutWarning()) {
        setShowFilteredOutWarning(false);
        if (!RepositoryNodeHelper.canDeleteWhenFiltering(allDeleteNodes,shownNodes)) {
          return;
        }
      }
      if (showConfirmDialog()) {
        sortNodesBeforePhysicalDelete();
        physicalDelete();
      }
    }
  }
  if (DQRepositoryNode.isOnFilterring()) {
    RepositoryNodeHelper.regainRecycleBinFilteredNode();
  }
  refreshWorkspaceAndRecycleBinNodes();
}","@Override public void doRun(){
  repositoryObjectCRUD.refreshDQViewForRemoteProject();
  if (deleteElements.length == 0) {
    return;
  }
  setSpecialSelection(deletionSelProv);
  deleteElements=checkSourceFilesEditorOpening(deleteElements);
  for (  Object obj : deleteElements) {
    RepositoryNode node=(RepositoryNode)obj;
    selectedNodes.add(node);
  }
  if (DQRepositoryNode.isOnFilterring()) {
    setPreviousFilteredNode(selectedNodes.get(0));
  }
  if (selectedNodes.size() > 0) {
    IRepositoryNode firstNode=selectedNodes.get(0);
    boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(firstNode);
    if (!isStateDeleted) {
      logicDelete();
    }
 else {
      Collection<IRepositoryNode> shownNodes=null;
      Collection<IRepositoryNode> allDeleteNodes=null;
      if (DQRepositoryNode.isOnFilterring()) {
        shownNodes=RepositoryNodeHelper.findAllChildrenNodes(selectedNodes);
        selectedNodes=rebuildNodes(selectedNodes);
        allDeleteNodes=RepositoryNodeHelper.findAllChildrenNodes(selectedNodes);
      }
      if (DQRepositoryNode.isOnFilterring() && isShowFilteredOutWarning()) {
        setShowFilteredOutWarning(false);
        if (!RepositoryNodeHelper.canDeleteWhenFiltering(allDeleteNodes,shownNodes)) {
          return;
        }
      }
      if (showConfirmDialog()) {
        sortNodesBeforePhysicalDelete();
        physicalDelete();
      }
    }
  }
  if (DQRepositoryNode.isOnFilterring()) {
    RepositoryNodeHelper.regainRecycleBinFilteredNode();
  }
  refreshWorkspaceAndRecycleBinNodes();
}",0.8338783518639634
136650,"@Override protected void doRun(){
  try {
    String newLabel=null;
    Item lastDuplicateItem=null;
    for (    final IRepositoryNode node : nodeArray) {
      IRepositoryViewObject viewObject=node.getObject();
      validateOriginalObject(viewObject);
      final IDuplicateHandle handle=ActionHandleFactory.getInstance().createDuplicateHandle(node);
      if (handle != null) {
        String initLabel=generateInitialLabel(node);
        InputDialog dialog=createInputNewNameDialog(node,initLabel);
        if (dialog.open() == Window.OK) {
          newLabel=dialog.getValue().trim();
          lastDuplicateItem=handle.duplicateItem(viewObject.getProperty().getItem(),newLabel);
        }
      }
 else {
        log.error(DefaultMessagesImpl.getString(""String_Node_Str"",node.getLabel()));
      }
    }
    if (lastDuplicateItem != null) {
      CorePlugin.getDefault().refreshWorkSpace();
      selectAndReveal(newLabel,lastDuplicateItem);
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
}","@Override protected void doRun(){
  repositoryObjectCRUD.refreshDQViewForRemoteProject();
  try {
    String newLabel=null;
    Item lastDuplicateItem=null;
    for (    final IRepositoryNode node : nodeArray) {
      IRepositoryViewObject viewObject=node.getObject();
      validateOriginalObject(viewObject);
      final IDuplicateHandle handle=ActionHandleFactory.getInstance().createDuplicateHandle(node);
      if (handle != null) {
        String initLabel=generateInitialLabel(node);
        InputDialog dialog=createInputNewNameDialog(node,initLabel);
        if (dialog.open() == Window.OK) {
          newLabel=dialog.getValue().trim();
          lastDuplicateItem=handle.duplicateItem(viewObject.getProperty().getItem(),newLabel);
        }
      }
 else {
        log.error(DefaultMessagesImpl.getString(""String_Node_Str"",node.getLabel()));
      }
    }
    if (lastDuplicateItem != null) {
      CorePlugin.getDefault().refreshWorkSpace();
      selectAndReveal(newLabel,lastDuplicateItem);
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
}",0.9738317757009346
136651,"@Override public ISelection getSelection(){
  return getRepositorySelection();
}","@Override public ISelection getSelection(){
  repositoryObjectCRUD.refreshDQViewForRemoteProject();
  return repositoryObjectCRUD.getUISelection();
}",0.6637554585152838
136652,"@Override public void run(){
  ProxyRepositoryManager.getInstance().refresh();
  getCommonViewer().refresh();
  super.run();
}","@Override protected void run() throws LoginException, PersistenceException {
  CorePlugin.getDefault().refreshWorkSpace();
  ProxyRepositoryManager.getInstance().refresh();
  getCommonViewer().refresh();
}",0.5861027190332326
136653,"public void refresh(){
  RefreshDQReponsitoryViewAction refresh=new RefreshDQReponsitoryViewAction();
  refresh.run();
}","public void refresh(){
  new RefreshDQReponsitoryViewAction().run();
}",0.7368421052631579
136654,"/** 
 * refresh Workspace and DQView.
 */
protected void refreshWorkspaceDQView(){
  IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  if (activePart instanceof DQRespositoryView) {
    ((DQRespositoryView)activePart).refresh();
  }
  CorePlugin.getDefault().refreshWorkSpace();
}","/** 
 * refresh Workspace and DQView.
 */
protected void refreshWorkspaceDQView(){
  IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  if (activePart instanceof DQRespositoryView) {
    ((DQRespositoryView)activePart).refresh();
  }
}",0.9283489096573208
136655,"public Map<IPath,IPath> mapping(ItemRecord record){
  Map<IPath,IPath> toExportMap=new HashMap<IPath,IPath>();
  IPath itemResPath=new Path(record.getFile().getAbsolutePath());
  Property property=record.getProperty();
  IPath itemDesPath=null;
  if (property != null) {
    itemDesPath=PropertyHelper.getItemPath(property).makeRelative();
  }
 else {
    itemDesPath=record.getFullPath();
  }
  IPath propResPath=record.getPropertyPath();
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  toExportMap.put(itemResPath,itemDesPath);
  if (!propResPath.toFile().exists()) {
    return toExportMap;
  }
  toExportMap.put(propResPath,propDesPath);
  return toExportMap;
}","public Map<IPath,IPath> mapping(ItemRecord record){
  Map<IPath,IPath> toExportMap=new HashMap<IPath,IPath>();
  IPath itemResPath=new Path(record.getFile().getAbsolutePath());
  Property property=record.getProperty();
  IPath itemDesPath=null;
  if (property != null) {
    itemDesPath=PropertyHelper.getItemPath(property).makeRelative();
  }
 else {
    itemDesPath=itemResPath.makeRelativeTo(ResourceManager.getRootProject().getLocation().removeLastSegments(1));
  }
  IPath propResPath=record.getPropertyPath();
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  toExportMap.put(itemResPath,itemDesPath);
  if (!propResPath.toFile().exists()) {
    return toExportMap;
  }
  toExportMap.put(propResPath,propDesPath);
  return toExportMap;
}",0.9267973856209152
136656,"@Override public void doRun(){
  if (deleteElements.length == 0) {
    return;
  }
  setSpecialSelection(deletionSelProv);
  deleteElements=checkSourceFilesEditorOpening(deleteElements);
  for (  Object obj : deleteElements) {
    RepositoryNode node=(RepositoryNode)obj;
    selectedNodes.add(node);
  }
  if (DQRepositoryNode.isOnFilterring()) {
    setPreviousFilteredNode(selectedNodes.get(0));
  }
  if (selectedNodes.size() > 0) {
    IRepositoryNode firstNode=selectedNodes.get(0);
    boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(firstNode);
    if (!isStateDeleted) {
      logicDelete();
    }
 else {
      Collection<IRepositoryNode> shownNodes=null;
      Collection<IRepositoryNode> allDeleteNodes=null;
      if (DQRepositoryNode.isOnFilterring()) {
        shownNodes=RepositoryNodeHelper.findAllChildrenNodes(selectedNodes);
        selectedNodes=rebuildNodes(selectedNodes);
        allDeleteNodes=RepositoryNodeHelper.findAllChildrenNodes(selectedNodes);
      }
      if (DQRepositoryNode.isOnFilterring() && isShowFilteredOutWarning()) {
        setShowFilteredOutWarning(false);
        if (!RepositoryNodeHelper.canDeleteWhenFiltering(allDeleteNodes,shownNodes)) {
          return;
        }
      }
      if (showConfirmDialog()) {
        sortNodesBeforePhysicalDelete();
        physicalDelete();
      }
    }
  }
  if (DQRepositoryNode.isOnFilterring()) {
    RepositoryNodeHelper.regainRecycleBinFilteredNode();
  }
  refreshWorkspaceAndRecycleBinNodes();
}","@Override public void doRun(){
  repositoryObjectCRUD.refreshDQViewForRemoteProject();
  if (deleteElements.length == 0) {
    return;
  }
  setSpecialSelection(deletionSelProv);
  deleteElements=checkSourceFilesEditorOpening(deleteElements);
  for (  Object obj : deleteElements) {
    RepositoryNode node=(RepositoryNode)obj;
    selectedNodes.add(node);
  }
  if (DQRepositoryNode.isOnFilterring()) {
    setPreviousFilteredNode(selectedNodes.get(0));
  }
  if (selectedNodes.size() > 0) {
    IRepositoryNode firstNode=selectedNodes.get(0);
    boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(firstNode);
    if (!isStateDeleted) {
      logicDelete();
    }
 else {
      Collection<IRepositoryNode> shownNodes=null;
      Collection<IRepositoryNode> allDeleteNodes=null;
      if (DQRepositoryNode.isOnFilterring()) {
        shownNodes=RepositoryNodeHelper.findAllChildrenNodes(selectedNodes);
        selectedNodes=rebuildNodes(selectedNodes);
        allDeleteNodes=RepositoryNodeHelper.findAllChildrenNodes(selectedNodes);
      }
      if (DQRepositoryNode.isOnFilterring() && isShowFilteredOutWarning()) {
        setShowFilteredOutWarning(false);
        if (!RepositoryNodeHelper.canDeleteWhenFiltering(allDeleteNodes,shownNodes)) {
          return;
        }
      }
      if (showConfirmDialog()) {
        sortNodesBeforePhysicalDelete();
        physicalDelete();
      }
    }
  }
  if (DQRepositoryNode.isOnFilterring()) {
    RepositoryNodeHelper.regainRecycleBinFilteredNode();
  }
  refreshWorkspaceAndRecycleBinNodes();
}",0.8338783518639634
136657,"@Override protected void doRun(){
  try {
    String newLabel=null;
    Item lastDuplicateItem=null;
    for (    final IRepositoryNode node : nodeArray) {
      IRepositoryViewObject viewObject=node.getObject();
      validateOriginalObject(viewObject);
      final IDuplicateHandle handle=ActionHandleFactory.getInstance().createDuplicateHandle(node);
      if (handle != null) {
        String initLabel=generateInitialLabel(node);
        InputDialog dialog=createInputNewNameDialog(node,initLabel);
        if (dialog.open() == Window.OK) {
          newLabel=dialog.getValue().trim();
          lastDuplicateItem=handle.duplicateItem(viewObject.getProperty().getItem(),newLabel);
        }
      }
 else {
        log.error(DefaultMessagesImpl.getString(""String_Node_Str"",node.getLabel()));
      }
    }
    if (lastDuplicateItem != null) {
      CorePlugin.getDefault().refreshWorkSpace();
      selectAndReveal(newLabel,lastDuplicateItem);
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
}","@Override protected void doRun(){
  repositoryObjectCRUD.refreshDQViewForRemoteProject();
  try {
    String newLabel=null;
    Item lastDuplicateItem=null;
    for (    final IRepositoryNode node : nodeArray) {
      IRepositoryViewObject viewObject=node.getObject();
      validateOriginalObject(viewObject);
      final IDuplicateHandle handle=ActionHandleFactory.getInstance().createDuplicateHandle(node);
      if (handle != null) {
        String initLabel=generateInitialLabel(node);
        InputDialog dialog=createInputNewNameDialog(node,initLabel);
        if (dialog.open() == Window.OK) {
          newLabel=dialog.getValue().trim();
          lastDuplicateItem=handle.duplicateItem(viewObject.getProperty().getItem(),newLabel);
        }
      }
 else {
        log.error(DefaultMessagesImpl.getString(""String_Node_Str"",node.getLabel()));
      }
    }
    if (lastDuplicateItem != null) {
      CorePlugin.getDefault().refreshWorkSpace();
      selectAndReveal(newLabel,lastDuplicateItem);
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
}",0.9738317757009346
136658,"@Override public ISelection getSelection(){
  return getRepositorySelection();
}","@Override public ISelection getSelection(){
  repositoryObjectCRUD.refreshDQViewForRemoteProject();
  return repositoryObjectCRUD.getUISelection();
}",0.6637554585152838
136659,"@Override public void run(){
  ProxyRepositoryManager.getInstance().refresh();
  getCommonViewer().refresh();
  super.run();
}","@Override protected void run() throws LoginException, PersistenceException {
  CorePlugin.getDefault().refreshWorkSpace();
  ProxyRepositoryManager.getInstance().refresh();
  getCommonViewer().refresh();
}",0.5861027190332326
136660,"public void refresh(){
  RefreshDQReponsitoryViewAction refresh=new RefreshDQReponsitoryViewAction();
  refresh.run();
}","public void refresh(){
  new RefreshDQReponsitoryViewAction().run();
}",0.7368421052631579
136661,"/** 
 * refresh Workspace and DQView.
 */
protected void refreshWorkspaceDQView(){
  IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  if (activePart instanceof DQRespositoryView) {
    ((DQRespositoryView)activePart).refresh();
  }
  CorePlugin.getDefault().refreshWorkSpace();
}","/** 
 * refresh Workspace and DQView.
 */
protected void refreshWorkspaceDQView(){
  IWorkbenchPart activePart=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  if (activePart instanceof DQRespositoryView) {
    ((DQRespositoryView)activePart).refresh();
  }
}",0.9283489096573208
136662,"@Override public boolean reset(){
  if (this.isUsedMapDBMode()) {
    if (needReconnect((AbstractDB<?>)distinctMap)) {
      distinctMap=initValueForDBMap(StandardDBName.computeProcess.name());
    }
    distinctMap.clear();
    if (needReconnect((AbstractDB<?>)duplicateObjects)) {
      duplicateObjects=initValueForSet(StandardDBName.computeProcessSet.name());
    }
    duplicateObjects.clear();
    drillDownValueCount=0l;
  }
 else {
    distinctMap=initValueForDBMap(StandardDBName.computeProcess.name());
    duplicateObjects=initValueForSet(StandardDBName.computeProcessSet.name());
    distinctMap.clear();
    duplicateObjects.clear();
  }
  return super.reset();
}","@Override public boolean reset(){
  if (this.isUsedMapDBMode()) {
    if (needReconnect((AbstractDB<?>)distinctMap)) {
      distinctMap=initValueForDBMap(StandardDBName.computeProcess.name());
    }
    distinctMap.clear();
    if (needReconnect((AbstractDB<?>)duplicateObjects)) {
      duplicateObjects=initValueForSet(StandardDBName.computeProcessSet.name());
    }
    duplicateObjects.clear();
    drillDownValueCount=0l;
  }
 else {
    distinctMap=new HashMap<>();
    duplicateObjects=new HashSet<>();
    distinctMap.clear();
    duplicateObjects.clear();
  }
  return super.reset();
}",0.8166797797010228
136663,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public void setDuplicateValueCount(Long newDuplicateValueCount){
  Long oldDuplicateValueCount=duplicateValueCount;
  duplicateValueCount=newDuplicateValueCount;
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,IndicatorsPackage.DUPLICATE_COUNT_INDICATOR__DUPLICATE_VALUE_COUNT,oldDuplicateValueCount,duplicateValueCount));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public void setDuplicateValueCount(Long newDuplicateValueCount){
  Long oldDuplicateValueCount=duplicateValueCount;
  duplicateValueCount=newDuplicateValueCount;
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,IndicatorsPackage.DUPLICATE_COUNT_INDICATOR__DUPLICATE_VALUE_COUNT,oldDuplicateValueCount,duplicateValueCount));
  }
}",0.9910514541387024
136664,"@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
case FILEDELIMITED:
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
break;
case HADOOP_CLUSTER:
image=ImageLib.getImage(ImageLib.HADOOP_CLUSTER);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
if (record.getElement() instanceof MatchRuleDefinition) {
image=ImageLib.getImage(ImageLib.MATCH_RULE_ICON);
}
 else {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
}
 else if (fileName.endsWith(FactoriesUtil.ITEM_EXTENSION)) {
if (file.getParentFile().getName().equals(EResourceConstant.FILEDELIMITED.getName())) {
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
}
 else {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
 else if (fileName.endsWith(FactoriesUtil.SQL)) {
image=ImageLib.getImage(ImageLib.SOURCE_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JAR)) {
image=ImageLib.getImage(ImageLib.JAR_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JRXML)) {
image=ImageLib.getImage(ImageLib.JRXML_ICON);
}
}
}
return image != null ? image : super.getImage(element);
}","@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
case FILEDELIMITED:
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
break;
case HADOOP_CLUSTER:
image=ImageLib.getImage(ImageLib.HADOOP_CLUSTER);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
if (record.getElement() instanceof MatchRuleDefinition) {
image=ImageLib.getImage(ImageLib.MATCH_RULE_ICON);
}
 else {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
}
 else if (fileName.endsWith(FactoriesUtil.ITEM_EXTENSION)) {
if (record.getElement() instanceof DelimitedFileConnection) {
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
}
 else {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
 else if (fileName.endsWith(FactoriesUtil.SQL)) {
image=ImageLib.getImage(ImageLib.SOURCE_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JAR)) {
image=ImageLib.getImage(ImageLib.JAR_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JRXML)) {
image=ImageLib.getImage(ImageLib.JRXML_ICON);
}
}
}
return image != null ? image : super.getImage(element);
}",0.9735915492957746
136665,"@Before public void setUp() throws Exception {
  possiblePhoneCountIndicatorImpl=new PossiblePhoneCountIndicatorImpl();
  IndicatorParameters createIndicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  TextParameters textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  textParameters.setCountryCode(java.util.Locale.getDefault().getCountry());
  createIndicatorParameters.setTextParameter(textParameters);
  possiblePhoneCountIndicatorImpl.setParameters(createIndicatorParameters);
}","@Before public void setUp() throws Exception {
  possiblePhoneCountIndicatorImpl=new PossiblePhoneCountIndicatorImpl();
  IndicatorParameters createIndicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  TextParameters textParameters=IndicatorsFactory.eINSTANCE.createTextParameters();
  textParameters.setCountryCode(java.util.Locale.CHINA.getCountry());
  createIndicatorParameters.setTextParameter(textParameters);
  possiblePhoneCountIndicatorImpl.setParameters(createIndicatorParameters);
}",0.9817833173537872
136666,"public Map<IPath,IPath> mapping(ItemRecord record){
  Map<IPath,IPath> toExportMap=new HashMap<IPath,IPath>();
  IPath itemResPath=new Path(record.getFile().getAbsolutePath());
  Property property=record.getProperty();
  IPath itemDesPath=null;
  if (property != null) {
    itemDesPath=PropertyHelper.getItemPath(property).makeRelative();
  }
 else {
    itemDesPath=record.getFullPath();
  }
  IPath propResPath=record.getPropertyPath();
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  toExportMap.put(itemResPath,itemDesPath);
  if (!propResPath.toFile().exists()) {
    return toExportMap;
  }
  toExportMap.put(propResPath,propDesPath);
  return toExportMap;
}","public Map<IPath,IPath> mapping(ItemRecord record){
  Map<IPath,IPath> toExportMap=new HashMap<IPath,IPath>();
  IPath itemResPath=new Path(record.getFile().getAbsolutePath());
  Property property=record.getProperty();
  IPath itemDesPath=null;
  if (property != null) {
    itemDesPath=PropertyHelper.getItemPath(property).makeRelative();
  }
 else {
    itemDesPath=itemResPath.makeRelativeTo(ResourceManager.getRootProject().getLocation().removeLastSegments(1));
  }
  IPath propResPath=record.getPropertyPath();
  IPath propDesPath=itemDesPath.removeFileExtension().addFileExtension(FactoriesUtil.PROPERTIES_EXTENSION);
  toExportMap.put(itemResPath,itemDesPath);
  if (!propResPath.toFile().exists()) {
    return toExportMap;
  }
  toExportMap.put(propResPath,propDesPath);
  return toExportMap;
}",0.9267973856209152
136667,"@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
case FILEDELIMITED:
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
break;
case HADOOP_CLUSTER:
image=ImageLib.getImage(ImageLib.HADOOP_CLUSTER);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
if (record.getElement() instanceof MatchRuleDefinition) {
image=ImageLib.getImage(ImageLib.MATCH_RULE_ICON);
}
 else {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
}
 else if (fileName.endsWith(FactoriesUtil.ITEM_EXTENSION)) {
if (file.getParentFile().getName().equals(EResourceConstant.FILEDELIMITED.getName())) {
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
}
 else {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
 else if (fileName.endsWith(FactoriesUtil.SQL)) {
image=ImageLib.getImage(ImageLib.SOURCE_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JAR)) {
image=ImageLib.getImage(ImageLib.JAR_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JRXML)) {
image=ImageLib.getImage(ImageLib.JRXML_ICON);
}
}
}
return image != null ? image : super.getImage(element);
}","@Override public Image getImage(Object element){
  Image image=null;
  if (element instanceof ItemRecord) {
    ItemRecord record=(ItemRecord)element;
    File file=record.getFile();
    String fileName=file.getName();
    if (file.isDirectory()) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      EResourceConstant constant=resolveResourceConstant(fileName);
      if (constant != null) {
switch (constant) {
case DATA_PROFILING:
          image=ImageLib.getImage(ImageLib.DATA_PROFILING);
        break;
case METADATA:
      image=ImageLib.getImage(ImageLib.METADATA);
    break;
case LIBRARIES:
  image=ImageLib.getImage(ImageLib.LIBRARIES);
break;
case ANALYSIS:
break;
case REPORTS:
break;
case EXCHANGE:
image=ImageLib.getImage(ImageLib.EXCHANGE);
break;
case DB_CONNECTIONS:
image=ImageLib.getImage(ImageLib.CONNECTION);
break;
case FILEDELIMITED:
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
break;
case HADOOP_CLUSTER:
image=ImageLib.getImage(ImageLib.HADOOP_CLUSTER);
break;
default :
break;
}
}
}
 else {
if (fileName.endsWith(FactoriesUtil.ANA)) {
image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.REP)) {
image=ImageLib.getImage(ImageLib.REPORT_OBJECT);
}
 else if (fileName.endsWith(FactoriesUtil.PATTERN)) {
image=ImageLib.getImage(ImageLib.PATTERN_REG);
}
 else if (fileName.endsWith(FactoriesUtil.DQRULE)) {
if (record.getElement() instanceof MatchRuleDefinition) {
image=ImageLib.getImage(ImageLib.MATCH_RULE_ICON);
}
 else {
image=ImageLib.getImage(ImageLib.DQ_RULE);
}
}
 else if (fileName.endsWith(FactoriesUtil.ITEM_EXTENSION)) {
if (record.getElement() instanceof DelimitedFileConnection) {
image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
}
 else {
image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
}
}
 else if (fileName.endsWith(FactoriesUtil.DEFINITION)) {
image=ImageLib.getImage(ImageLib.IND_DEFINITION);
}
 else if (fileName.endsWith(FactoriesUtil.SQL)) {
image=ImageLib.getImage(ImageLib.SOURCE_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JAR)) {
image=ImageLib.getImage(ImageLib.JAR_FILE);
}
 else if (fileName.endsWith(FactoriesUtil.JRXML)) {
image=ImageLib.getImage(ImageLib.JRXML_ICON);
}
}
}
return image != null ? image : super.getImage(element);
}",0.9735915492957746
136668,"/** 
 * Save item with dependencies.
 * @param element
 * @throws PersistenceException
 */
protected ReturnCode saveWithDependencies(Item item,ModelElement element) throws PersistenceException {
  ReturnCode rc=new ReturnCode();
  removeDependencies(item);
  addDependencies(element);
  addResourceContent(element.eResource(),element);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(element.eResource());
  Set<EObject> needSaves=new HashSet<EObject>();
  for (  EObject object : find.keySet()) {
    Resource re=object.eResource();
    if (re == null) {
      continue;
    }
    DQRepositoryNode node=RepositoryNodeHelper.recursiveFind((ModelElement)object);
    if (node != null && !node.getProject().isMainProject()) {
      continue;
    }
    if (!re.getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
      continue;
    }
    EcoreUtil.resolveAll(re);
    needSaves.add(object);
  }
  if (item instanceof TDQItem) {
    setTDQItemFileName(element,item);
  }
  ProxyRepositoryFactory.getInstance().save(item);
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    for (    EObject toSave : needSaves) {
      DQRepositoryNode node=RepositoryNodeHelper.recursiveFind((ModelElement)toSave);
      if (node != null && !node.getProject().isMainProject()) {
        continue;
      }
      if (!toSave.eResource().getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
        continue;
      }
      resChangeService.saveResourceByEMFShared(toSave.eResource());
    }
  }
  return rc;
}","/** 
 * Save item with dependencies.
 * @param element
 * @throws PersistenceException
 */
protected ReturnCode saveWithDependencies(Item item,ModelElement element) throws PersistenceException {
  ReturnCode rc=new ReturnCode();
  removeDependencies(item);
  addDependencies(element);
  addResourceContent(element.eResource(),element);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(element.eResource());
  Set<EObject> needSaves=new HashSet<EObject>();
  for (  EObject object : find.keySet()) {
    Resource re=object.eResource();
    if (re == null) {
      continue;
    }
    DQRepositoryNode node=RepositoryNodeHelper.recursiveFind((ModelElement)object);
    if (node != null && !node.getProject().isMainProject()) {
      continue;
    }
    if (!re.getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
      continue;
    }
    EcoreUtil.resolveAll(re);
    needSaves.add(object);
  }
  if (item instanceof TDQItem) {
    setTDQItemFileName(element,item);
  }
  ProxyRepositoryFactory.getInstance().save(item);
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    for (    EObject toSave : needSaves) {
      DQRepositoryNode node=RepositoryNodeHelper.recursiveFind((ModelElement)toSave);
      if (node != null && !node.getProject().isMainProject()) {
        continue;
      }
      toSave=EObjectHelper.resolveObject(toSave);
      if (!toSave.eResource().getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
        continue;
      }
      resChangeService.saveResourceByEMFShared(toSave.eResource());
    }
  }
  return rc;
}",0.9858836815358556
136669,"@Override protected boolean doExecute() throws Exception {
  File oldFolder=ResourceManager.getSystemIndicatorFolder().getRawLocation().append(PATTERN_FINDER).toFile();
  File newFolder=WorkspaceUtils.ifolderToFile(ResourceManager.getSysIndicatorPatternFinderFolder());
  boolean result=oldFolder.renameTo(newFolder);
  try {
    String[] indicatorProFileExtentionName={FactoriesUtil.PROPERTIES_EXTENSION};
    result&=FilesUtils.migrateFolder(newFolder,indicatorProFileExtentionName,initIndicatorReplaceMap(),log);
    File analysisFolder=WorkspaceUtils.ifolderToFile(ResourceManager.getAnalysisFolder());
    String[] analysisFileExtentionName={FactoriesUtil.ANA};
    result&=FilesUtils.migrateFolder(analysisFolder,analysisFileExtentionName,initIndicatorReplaceMap(),log);
    ResourceService.refreshStructure();
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  IFile file=ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME);
  file.delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
  EMFSharedResources.getInstance().reloadResource(uri);
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  return result;
}","@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  File newFolder=WorkspaceUtils.ifolderToFile(ResourceManager.getSysIndicatorPatternFrequnceyStatisticsFolder());
  if (!ResourceManager.getSysIndicatorPatternFrequnceyStatisticsFolder().exists()) {
    File oldFolder=ResourceManager.getSystemIndicatorFolder().getRawLocation().append(PATTERN_FINDER).toFile();
    result&=oldFolder.renameTo(newFolder);
  }
  try {
    String[] indicatorProFileExtentionName={FactoriesUtil.PROPERTIES_EXTENSION};
    result&=FilesUtils.migrateFolder(newFolder,indicatorProFileExtentionName,initIndicatorReplaceMap(),log);
    File analysisFolder=WorkspaceUtils.ifolderToFile(ResourceManager.getAnalysisFolder());
    String[] analysisFileExtentionName={FactoriesUtil.ANA};
    result&=FilesUtils.migrateFolder(analysisFolder,analysisFileExtentionName,initIndicatorReplaceMap(),log);
    ResourceService.refreshStructure();
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  IFile file=ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME);
  file.delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
  EMFSharedResources.getInstance().reloadResource(uri);
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  return result;
}",0.858470335954253
136670,"/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (desFile.exists()) {
    boolean needReloadResource=false;
    IFile desIFile=ResourceService.file2IFile(desFile);
    String fileExt=desIFile.getFileExtension();
    if (FactoriesUtil.isEmfFile(fileExt)) {
      needReloadResource=true;
      if (!StringUtils.equals(projectName,curProjectLabel)) {
        String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
        content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
        FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
      }
    }
    if (fileExt.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      needReloadResource=true;
      Property property=PropertyHelper.getProperty(desIFile,true);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
    if (isCovered && needReloadResource) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
    }
  }
 else {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str"",desFile.getAbsolutePath()));
  }
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (desFile.exists()) {
    boolean needReloadResource=false;
    IFile desIFile=ResourceService.file2IFile(desFile);
    String fileExt=desIFile.getFileExtension();
    if (FactoriesUtil.isEmfFile(fileExt)) {
      needReloadResource=true;
      if (!StringUtils.equals(projectName,curProjectLabel)) {
        String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
        content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
        FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
      }
    }
    if (fileExt.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      needReloadResource=true;
      Property property=PropertyHelper.getProperty(desIFile,true);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor().getLogin() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
    if (isCovered && needReloadResource) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
    }
  }
 else {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str"",desFile.getAbsolutePath()));
  }
}",0.9971166448230668
136671,"/** 
 * Added: (20120808 yyin, TDQ-4189) The system indicators are not read-only because the user may want to write his own SQL template. so this task deals with the modified SI from imported one, and merge them with the current studio. 1)only when the user select the""Overwrite existing items"" on the import wizard(and the modifydate is newer than the current studio's SI), the conflict modification in imported SI will overwrite the ones in current studio, otherwise, the SI in current studio will keep. 2)If a language does not exist in the system indicator but exists in the user modified indicator, then we add it 3)if a language exists in the system indicator but has been removed in the user modified indicator, then we keep the system indicator definition. [for Indicator matadata(Purpose, Description, Author, Status): 1) will replace old value with new value if new value is not blank; 2) will keep old value if new value is blank][for IndicatorDefinitionParameter: 1) will replace the same name old parameter with new parameter; 2) will keep the old parameter if new one don't include the same name parameter ]
 * @param record imported modified system indicator
 * @param siDef the system indicator in the current studio
 */
protected void mergeSystemIndicator(ItemRecord record,TDQIndicatorDefinitionItem siDefItem){
  boolean isModified=false;
  IndicatorDefinition siDef=siDefItem.getIndicatorDefinition();
  Property siProp=siDefItem.getProperty();
  IndicatorDefinition indDef=(IndicatorDefinition)record.getElement();
  Property indDefProp=record.getProperty();
  EList<TdExpression> importedExs=indDef.getSqlGenericExpression();
  for (  TdExpression importedEx : importedExs) {
    if (importedEx.getModificationDate() == null) {
      continue;
    }
    TdExpression systemExpression=null;
    for (    TdExpression ex : siDef.getSqlGenericExpression()) {
      if (ex.getLanguage().equals(importedEx.getLanguage())) {
        systemExpression=ex;
        break;
      }
    }
    if (systemExpression == null) {
      IndicatorDefinitionFileHelper.addSqlExpression(siDef,importedEx.getLanguage(),importedEx.getBody(),importedEx.getModificationDate());
      isModified=true;
    }
 else {
      if (replaceExpression(systemExpression,importedEx)) {
        IndicatorDefinitionFileHelper.removeSqlExpression(siDef,importedEx.getLanguage());
        IndicatorDefinitionFileHelper.addSqlExpression(siDef,importedEx.getLanguage(),importedEx.getBody(),importedEx.getModificationDate());
        isModified=true;
      }
    }
  }
  IndicatorCategory siDefCategory=IndicatorCategoryHelper.getCategory(siDef);
  IndicatorCategory indDefCategory=IndicatorCategoryHelper.getCategory(indDef);
  if (siDefCategory != null && indDefCategory != null && !indDefCategory.eIsProxy()) {
    if (!siDefCategory.equals(indDefCategory)) {
      IndicatorCategoryHelper.setCategory(siDef,indDefCategory);
      isModified=true;
    }
  }
  if (siProp != null && indDefProp != null) {
    if (!StringUtils.isBlank(indDefProp.getPurpose())) {
      siProp.setPurpose(indDefProp.getPurpose());
    }
    if (!StringUtils.isBlank(indDefProp.getDescription())) {
      siProp.setDescription(indDefProp.getDescription());
    }
    siProp.setAuthor(indDefProp.getAuthor());
    siProp.setStatusCode(indDefProp.getStatusCode());
    isModified=true;
  }
  String jarFilePath=TaggedValueHelper.getJarFilePath(indDef);
  if (!StringUtils.isBlank(jarFilePath)) {
    TaggedValueHelper.setJarFilePath(jarFilePath,siDef);
    isModified=true;
  }
  String classNameText=TaggedValueHelper.getClassNameText(indDef);
  if (!StringUtils.isBlank(classNameText)) {
    TaggedValueHelper.setClassNameText(classNameText,siDef);
    isModified=true;
  }
  EList<IndicatorDefinitionParameter> siParameter=siDef.getIndicatorDefinitionParameter();
  EList<IndicatorDefinitionParameter> indDefParameter=indDef.getIndicatorDefinitionParameter();
  List<IndicatorDefinitionParameter> tempParameter=new ArrayList<IndicatorDefinitionParameter>();
  for (  IndicatorDefinitionParameter indDefPara : indDefParameter) {
    boolean include=false;
    String key=indDefPara.getKey();
    for (    IndicatorDefinitionParameter siPara : siParameter) {
      if (key.equals(siPara.getKey())) {
        include=true;
        siPara.setValue(indDefPara.getValue());
        isModified=true;
      }
    }
    if (!include) {
      tempParameter.add(indDefPara);
      isModified=true;
    }
  }
  if (isModified && !tempParameter.isEmpty()) {
    siParameter.addAll(tempParameter);
  }
  if (isModified) {
    try {
      ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().save(siDefItem,false);
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
}","/** 
 * Added: (20120808 yyin, TDQ-4189) The system indicators are not read-only because the user may want to write his own SQL template. so this task deals with the modified SI from imported one, and merge them with the current studio. 1)only when the user select the""Overwrite existing items"" on the import wizard(and the modifydate is newer than the current studio's SI), the conflict modification in imported SI will overwrite the ones in current studio, otherwise, the SI in current studio will keep. 2)If a language does not exist in the system indicator but exists in the user modified indicator, then we add it 3)if a language exists in the system indicator but has been removed in the user modified indicator, then we keep the system indicator definition. [for Indicator matadata(Purpose, Description, Author, Status): 1) will replace old value with new value if new value is not blank; 2) will keep old value if new value is blank][for IndicatorDefinitionParameter: 1) will replace the same name old parameter with new parameter; 2) will keep the old parameter if new one don't include the same name parameter ]
 * @param record imported modified system indicator
 * @param siDef the system indicator in the current studio
 */
protected void mergeSystemIndicator(ItemRecord record,TDQIndicatorDefinitionItem siDefItem){
  boolean isModified=false;
  IndicatorDefinition siDef=siDefItem.getIndicatorDefinition();
  Property siProp=siDefItem.getProperty();
  IndicatorDefinition indDef=(IndicatorDefinition)record.getElement();
  Property indDefProp=record.getProperty();
  EList<TdExpression> importedExs=indDef.getSqlGenericExpression();
  for (  TdExpression importedEx : importedExs) {
    if (importedEx.getModificationDate() == null) {
      continue;
    }
    TdExpression systemExpression=null;
    for (    TdExpression ex : siDef.getSqlGenericExpression()) {
      if (ex.getLanguage().equals(importedEx.getLanguage())) {
        systemExpression=ex;
        break;
      }
    }
    if (systemExpression == null) {
      IndicatorDefinitionFileHelper.addSqlExpression(siDef,importedEx.getLanguage(),importedEx.getBody(),importedEx.getModificationDate());
      isModified=true;
    }
 else {
      if (replaceExpression(systemExpression,importedEx)) {
        IndicatorDefinitionFileHelper.removeSqlExpression(siDef,importedEx.getLanguage());
        IndicatorDefinitionFileHelper.addSqlExpression(siDef,importedEx.getLanguage(),importedEx.getBody(),importedEx.getModificationDate());
        isModified=true;
      }
    }
  }
  IndicatorCategory siDefCategory=IndicatorCategoryHelper.getCategory(siDef);
  IndicatorCategory indDefCategory=IndicatorCategoryHelper.getCategory(indDef);
  siDefCategory=(IndicatorCategory)EObjectHelper.resolveObject(siDefCategory);
  indDefCategory=(IndicatorCategory)EObjectHelper.resolveObject(indDefCategory);
  if (!ModelElementHelper.compareUUID(siDefCategory,indDefCategory)) {
    IndicatorCategoryHelper.setCategory(siDef,indDefCategory);
    isModified=true;
  }
 else {
    if (siDefCategory != null && indDefCategory != null && !siDefCategory.eIsProxy()) {
      if (!indDefCategory.equals(siDefCategory)) {
        if (!indDefCategory.getLabel().equals(""String_Node_Str"")) {
          IndicatorCategoryHelper.setCategory(siDef,indDefCategory);
          isModified=true;
        }
      }
    }
  }
  if (siProp != null && indDefProp != null) {
    if (!StringUtils.isBlank(indDefProp.getPurpose())) {
      siProp.setPurpose(indDefProp.getPurpose());
    }
    if (!StringUtils.isBlank(indDefProp.getDescription())) {
      siProp.setDescription(indDefProp.getDescription());
    }
    siProp.setAuthor(indDefProp.getAuthor());
    siProp.setStatusCode(indDefProp.getStatusCode());
    isModified=true;
  }
  String jarFilePath=TaggedValueHelper.getJarFilePath(indDef);
  if (!StringUtils.isBlank(jarFilePath)) {
    TaggedValueHelper.setJarFilePath(jarFilePath,siDef);
    isModified=true;
  }
  String classNameText=TaggedValueHelper.getClassNameText(indDef);
  if (!StringUtils.isBlank(classNameText)) {
    TaggedValueHelper.setClassNameText(classNameText,siDef);
    isModified=true;
  }
  EList<IndicatorDefinitionParameter> siParameter=siDef.getIndicatorDefinitionParameter();
  EList<IndicatorDefinitionParameter> indDefParameter=indDef.getIndicatorDefinitionParameter();
  List<IndicatorDefinitionParameter> tempParameter=new ArrayList<IndicatorDefinitionParameter>();
  for (  IndicatorDefinitionParameter indDefPara : indDefParameter) {
    boolean include=false;
    String key=indDefPara.getKey();
    for (    IndicatorDefinitionParameter siPara : siParameter) {
      if (key.equals(siPara.getKey())) {
        include=true;
        siPara.setValue(indDefPara.getValue());
        isModified=true;
      }
    }
    if (!include) {
      tempParameter.add(indDefPara);
      isModified=true;
    }
  }
  if (isModified && !tempParameter.isEmpty()) {
    siParameter.addAll(tempParameter);
  }
  if (isModified) {
    try {
      ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().save(siDefItem,false);
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
}",0.9555914412595882
136672,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  need2MergeModelElementMap.clear();
  allDeletedItems.clear();
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicatorDefinition(modEle)) {
                if (isDQRule(modEle)) {
                  if (isParserRule(modEle)) {
                    mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                    isDelete=false;
                  }
 else                   if (isWhereRule(modEle)) {
                  }
                }
 else                 if (isMatchRuleDefinition(modEle)) {
                }
 else {
                  TDQIndicatorDefinitionItem indItem=(TDQIndicatorDefinitionItem)object.getProperty().getItem();
                  mergeSystemIndicator(record,indItem);
                  if (record.getElement() instanceof UDIndicatorDefinition) {
                    need2MergeModelElementMap.put(indItem,record.getElement());
                  }
                  isDelete=false;
                }
              }
 else               if (isPattern(modEle)) {
                TDQPatternItem patternItem=(TDQPatternItem)object.getProperty().getItem();
                mergePattern(record,patternItem);
                need2MergeModelElementMap.put(patternItem,record.getElement());
                isDelete=false;
              }
 else {
                EObjectHelper.removeDependencys(PropertyHelper.getModelElement(object.getProperty()));
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              updateFiles.clear();
              updateFilesCoverd.clear();
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
                allDeletedItems.add(desPath);
              }
              for (              File file : updateFiles) {
                update(file,false);
              }
              for (              File file : updateFilesCoverd) {
                update(file,true);
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
  RepositoryWorkUnit<Object> workUnitFinish=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        postFinish();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
;
  workUnitFinish.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnitFinish);
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  need2MergeModelElementMap.clear();
  allImportItems.clear();
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicatorDefinition(modEle)) {
                if (isDQRule(modEle)) {
                  if (isParserRule(modEle)) {
                    mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                    isDelete=false;
                  }
 else                   if (isWhereRule(modEle)) {
                  }
                }
 else                 if (isMatchRuleDefinition(modEle)) {
                }
 else {
                  TDQIndicatorDefinitionItem indItem=(TDQIndicatorDefinitionItem)object.getProperty().getItem();
                  mergeSystemIndicator(record,indItem);
                  if (record.getElement() instanceof UDIndicatorDefinition) {
                    need2MergeModelElementMap.put(indItem,record.getElement());
                  }
                  isDelete=false;
                }
              }
 else               if (isPattern(modEle)) {
                TDQPatternItem patternItem=(TDQPatternItem)object.getProperty().getItem();
                mergePattern(record,patternItem);
                need2MergeModelElementMap.put(patternItem,record.getElement());
                isDelete=false;
              }
 else {
                EObjectHelper.removeDependencys(PropertyHelper.getModelElement(object.getProperty()));
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              updateFiles.clear();
              updateFilesCoverd.clear();
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
                allImportItems.add(desPath);
              }
              for (              File file : updateFiles) {
                update(file,false);
              }
              for (              File file : updateFilesCoverd) {
                update(file,true);
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
  RepositoryWorkUnit<Object> workUnitFinish=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        postFinish();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
;
  workUnitFinish.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnitFinish);
}",0.996804326450344
136673,"public void postFinish() throws IOException {
  for (  IPath path : this.allDeletedItems) {
    IFile desIFile=ResourceService.file2IFile(path.toFile());
    if (desIFile != null && desIFile.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile,true);
      if (property != null) {
        try {
          ProxyRepositoryFactory.getInstance().save(property.getItem(),true);
        }
 catch (        PersistenceException e) {
          log.error(e);
        }
      }
    }
  }
  if (!need2MergeModelElementMap.isEmpty()) {
    for (    TDQItem item : need2MergeModelElementMap.keySet()) {
      ModelElement recordMe=need2MergeModelElementMap.get(item);
      mergeClientDependency2PatternOrUdi(item,recordMe);
    }
  }
  ItemRecord.clear();
  deleteTempProjectFolder();
}","public void postFinish() throws IOException {
  for (  IPath path : this.allImportItems) {
    IFile desIFile=ResourceService.file2IFile(path.toFile());
    if (desIFile != null && desIFile.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile,true);
      if (property != null) {
        try {
          ProxyRepositoryFactory.getInstance().reload(property,desIFile);
        }
 catch (        PersistenceException e) {
          log.error(e);
        }
      }
    }
  }
  if (!need2MergeModelElementMap.isEmpty()) {
    for (    TDQItem item : need2MergeModelElementMap.keySet()) {
      ModelElement recordMe=need2MergeModelElementMap.get(item);
      mergeClientDependency2PatternOrUdi(item,recordMe);
    }
  }
  ItemRecord.clear();
  deleteTempProjectFolder();
}",0.9637982195845696
136674,"@Override public Boolean handleDrop(final IRepositoryNode targetNode){
  boolean result=Boolean.FALSE;
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      String[] pathBeforeRefresh=getSelectedNodePaths();
      if (pathBeforeRefresh.length == 0) {
        showWarningDialog();
        return;
      }
      refreshDQViewForRemoteProject();
      String[] pathAfterRefresh=getSelectedNodePaths();
      if (pathAfterRefresh.length == 0) {
        showWarningDialog();
        return;
      }
      IRepositoryNode[] selectedRepositoryNodes=getSelectedRepositoryNodes();
      if (selectedRepositoryNodes.length == 0) {
        showWarningDialog();
        return;
      }
      for (int i=0; i < getSelectedRepositoryNodes().length; i++) {
        if (!pathBeforeRefresh[i].equals(pathAfterRefresh[i])) {
          showWarningDialog();
          return;
        }
      }
      result=superHandle(targetNode);
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  return result;
}","@Override public Boolean handleDrop(final IRepositoryNode targetNode){
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      String[] pathBeforeRefresh=getSelectedNodePaths();
      if (pathBeforeRefresh.length == 0) {
        showWarningDialog();
        return;
      }
      refreshDQViewForRemoteProject();
      String[] pathAfterRefresh=getSelectedNodePaths();
      if (pathAfterRefresh.length == 0) {
        showWarningDialog();
        return;
      }
      IRepositoryNode[] selectedRepositoryNodes=getSelectedRepositoryNodes();
      if (selectedRepositoryNodes.length == 0) {
        showWarningDialog();
        return;
      }
      for (int i=0; i < getSelectedRepositoryNodes().length; i++) {
        if (!pathBeforeRefresh[i].equals(pathAfterRefresh[i])) {
          showWarningDialog();
          return;
        }
      }
      result=superHandle(targetNode);
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  return (Boolean)repositoryWorkUnit.getResult();
}",0.9689641273679968
136675,"/** 
 * Save item with dependencies.
 * @param element
 * @throws PersistenceException
 */
protected ReturnCode saveWithDependencies(Item item,ModelElement element) throws PersistenceException {
  ReturnCode rc=new ReturnCode();
  removeDependencies(item);
  addDependencies(element);
  addResourceContent(element.eResource(),element);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(element.eResource());
  Set<EObject> needSaves=new HashSet<EObject>();
  for (  EObject object : find.keySet()) {
    Resource re=object.eResource();
    if (re == null) {
      continue;
    }
    DQRepositoryNode node=RepositoryNodeHelper.recursiveFind((ModelElement)object);
    if (node != null && !node.getProject().isMainProject()) {
      continue;
    }
    if (!re.getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
      continue;
    }
    EcoreUtil.resolveAll(re);
    needSaves.add(object);
  }
  if (item instanceof TDQItem) {
    setTDQItemFileName(element,item);
  }
  ProxyRepositoryFactory.getInstance().save(item);
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    for (    EObject toSave : needSaves) {
      DQRepositoryNode node=RepositoryNodeHelper.recursiveFind((ModelElement)toSave);
      if (node != null && !node.getProject().isMainProject()) {
        continue;
      }
      if (!toSave.eResource().getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
        continue;
      }
      resChangeService.saveResourceByEMFShared(toSave.eResource());
    }
  }
  return rc;
}","/** 
 * Save item with dependencies.
 * @param element
 * @throws PersistenceException
 */
protected ReturnCode saveWithDependencies(Item item,ModelElement element) throws PersistenceException {
  ReturnCode rc=new ReturnCode();
  removeDependencies(item);
  addDependencies(element);
  addResourceContent(element.eResource(),element);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(element.eResource());
  Set<EObject> needSaves=new HashSet<EObject>();
  for (  EObject object : find.keySet()) {
    Resource re=object.eResource();
    if (re == null) {
      continue;
    }
    DQRepositoryNode node=RepositoryNodeHelper.recursiveFind((ModelElement)object);
    if (node != null && !node.getProject().isMainProject()) {
      continue;
    }
    if (!re.getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
      continue;
    }
    EcoreUtil.resolveAll(re);
    needSaves.add(object);
  }
  if (item instanceof TDQItem) {
    setTDQItemFileName(element,item);
  }
  ProxyRepositoryFactory.getInstance().save(item);
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    for (    EObject toSave : needSaves) {
      DQRepositoryNode node=RepositoryNodeHelper.recursiveFind((ModelElement)toSave);
      if (node != null && !node.getProject().isMainProject()) {
        continue;
      }
      toSave=EObjectHelper.resolveObject(toSave);
      if (!toSave.eResource().getURI().segment(1).equals(ProjectManager.getInstance().getCurrentProject().getTechnicalLabel())) {
        continue;
      }
      resChangeService.saveResourceByEMFShared(toSave.eResource());
    }
  }
  return rc;
}",0.9858836815358556
136676,"@Override protected boolean doExecute() throws Exception {
  File oldFolder=ResourceManager.getSystemIndicatorFolder().getRawLocation().append(PATTERN_FINDER).toFile();
  File newFolder=WorkspaceUtils.ifolderToFile(ResourceManager.getSysIndicatorPatternFinderFolder());
  boolean result=oldFolder.renameTo(newFolder);
  try {
    String[] indicatorProFileExtentionName={FactoriesUtil.PROPERTIES_EXTENSION};
    result&=FilesUtils.migrateFolder(newFolder,indicatorProFileExtentionName,initIndicatorReplaceMap(),log);
    File analysisFolder=WorkspaceUtils.ifolderToFile(ResourceManager.getAnalysisFolder());
    String[] analysisFileExtentionName={FactoriesUtil.ANA};
    result&=FilesUtils.migrateFolder(analysisFolder,analysisFileExtentionName,initIndicatorReplaceMap(),log);
    ResourceService.refreshStructure();
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  IFile file=ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME);
  file.delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
  EMFSharedResources.getInstance().reloadResource(uri);
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  return result;
}","@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  File newFolder=WorkspaceUtils.ifolderToFile(ResourceManager.getSysIndicatorPatternFrequnceyStatisticsFolder());
  if (!ResourceManager.getSysIndicatorPatternFrequnceyStatisticsFolder().exists()) {
    File oldFolder=ResourceManager.getSystemIndicatorFolder().getRawLocation().append(PATTERN_FINDER).toFile();
    result&=oldFolder.renameTo(newFolder);
  }
  try {
    String[] indicatorProFileExtentionName={FactoriesUtil.PROPERTIES_EXTENSION};
    result&=FilesUtils.migrateFolder(newFolder,indicatorProFileExtentionName,initIndicatorReplaceMap(),log);
    File analysisFolder=WorkspaceUtils.ifolderToFile(ResourceManager.getAnalysisFolder());
    String[] analysisFileExtentionName={FactoriesUtil.ANA};
    result&=FilesUtils.migrateFolder(analysisFolder,analysisFileExtentionName,initIndicatorReplaceMap(),log);
    ResourceService.refreshStructure();
  }
 catch (  Exception e) {
    result=false;
    log.error(e,e);
  }
  IFile file=ResourceManager.getLibrariesFolder().getFile(DefinitionHandler.FILENAME);
  file.delete(true,new NullProgressMonitor());
  DefinitionHandler.getInstance().copyDefinitionsIntoFolder(ResourceManager.getLibrariesFolder());
  URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
  EMFSharedResources.getInstance().reloadResource(uri);
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  return result;
}",0.858470335954253
136677,"/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (desFile.exists()) {
    boolean needReloadResource=false;
    IFile desIFile=ResourceService.file2IFile(desFile);
    String fileExt=desIFile.getFileExtension();
    if (FactoriesUtil.isEmfFile(fileExt)) {
      needReloadResource=true;
      if (!StringUtils.equals(projectName,curProjectLabel)) {
        String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
        content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
        FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
      }
    }
    if (fileExt.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      needReloadResource=true;
      Property property=PropertyHelper.getProperty(desIFile,true);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
    if (isCovered && needReloadResource) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
    }
  }
 else {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str"",desFile.getAbsolutePath()));
  }
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (desFile.exists()) {
    boolean needReloadResource=false;
    IFile desIFile=ResourceService.file2IFile(desFile);
    String fileExt=desIFile.getFileExtension();
    if (FactoriesUtil.isEmfFile(fileExt)) {
      needReloadResource=true;
      if (!StringUtils.equals(projectName,curProjectLabel)) {
        String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
        content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
        FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
      }
    }
    if (fileExt.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      needReloadResource=true;
      Property property=PropertyHelper.getProperty(desIFile,true);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor().getLogin() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
    if (isCovered && needReloadResource) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
    }
  }
 else {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str"",desFile.getAbsolutePath()));
  }
}",0.9971166448230668
136678,"/** 
 * Added: (20120808 yyin, TDQ-4189) The system indicators are not read-only because the user may want to write his own SQL template. so this task deals with the modified SI from imported one, and merge them with the current studio. 1)only when the user select the""Overwrite existing items"" on the import wizard(and the modifydate is newer than the current studio's SI), the conflict modification in imported SI will overwrite the ones in current studio, otherwise, the SI in current studio will keep. 2)If a language does not exist in the system indicator but exists in the user modified indicator, then we add it 3)if a language exists in the system indicator but has been removed in the user modified indicator, then we keep the system indicator definition. [for Indicator matadata(Purpose, Description, Author, Status): 1) will replace old value with new value if new value is not blank; 2) will keep old value if new value is blank][for IndicatorDefinitionParameter: 1) will replace the same name old parameter with new parameter; 2) will keep the old parameter if new one don't include the same name parameter ]
 * @param record imported modified system indicator
 * @param siDef the system indicator in the current studio
 */
protected void mergeSystemIndicator(ItemRecord record,TDQIndicatorDefinitionItem siDefItem){
  boolean isModified=false;
  IndicatorDefinition siDef=siDefItem.getIndicatorDefinition();
  Property siProp=siDefItem.getProperty();
  IndicatorDefinition indDef=(IndicatorDefinition)record.getElement();
  Property indDefProp=record.getProperty();
  EList<TdExpression> importedExs=indDef.getSqlGenericExpression();
  for (  TdExpression importedEx : importedExs) {
    if (importedEx.getModificationDate() == null) {
      continue;
    }
    TdExpression systemExpression=null;
    for (    TdExpression ex : siDef.getSqlGenericExpression()) {
      if (ex.getLanguage().equals(importedEx.getLanguage())) {
        systemExpression=ex;
        break;
      }
    }
    if (systemExpression == null) {
      IndicatorDefinitionFileHelper.addSqlExpression(siDef,importedEx.getLanguage(),importedEx.getBody(),importedEx.getModificationDate());
      isModified=true;
    }
 else {
      if (replaceExpression(systemExpression,importedEx)) {
        IndicatorDefinitionFileHelper.removeSqlExpression(siDef,importedEx.getLanguage());
        IndicatorDefinitionFileHelper.addSqlExpression(siDef,importedEx.getLanguage(),importedEx.getBody(),importedEx.getModificationDate());
        isModified=true;
      }
    }
  }
  IndicatorCategory siDefCategory=IndicatorCategoryHelper.getCategory(siDef);
  IndicatorCategory indDefCategory=IndicatorCategoryHelper.getCategory(indDef);
  if (siDefCategory != null && indDefCategory != null && !indDefCategory.eIsProxy()) {
    if (!siDefCategory.equals(indDefCategory)) {
      IndicatorCategoryHelper.setCategory(siDef,indDefCategory);
      isModified=true;
    }
  }
  if (siProp != null && indDefProp != null) {
    if (!StringUtils.isBlank(indDefProp.getPurpose())) {
      siProp.setPurpose(indDefProp.getPurpose());
    }
    if (!StringUtils.isBlank(indDefProp.getDescription())) {
      siProp.setDescription(indDefProp.getDescription());
    }
    siProp.setAuthor(indDefProp.getAuthor());
    siProp.setStatusCode(indDefProp.getStatusCode());
    isModified=true;
  }
  String jarFilePath=TaggedValueHelper.getJarFilePath(indDef);
  if (!StringUtils.isBlank(jarFilePath)) {
    TaggedValueHelper.setJarFilePath(jarFilePath,siDef);
    isModified=true;
  }
  String classNameText=TaggedValueHelper.getClassNameText(indDef);
  if (!StringUtils.isBlank(classNameText)) {
    TaggedValueHelper.setClassNameText(classNameText,siDef);
    isModified=true;
  }
  EList<IndicatorDefinitionParameter> siParameter=siDef.getIndicatorDefinitionParameter();
  EList<IndicatorDefinitionParameter> indDefParameter=indDef.getIndicatorDefinitionParameter();
  List<IndicatorDefinitionParameter> tempParameter=new ArrayList<IndicatorDefinitionParameter>();
  for (  IndicatorDefinitionParameter indDefPara : indDefParameter) {
    boolean include=false;
    String key=indDefPara.getKey();
    for (    IndicatorDefinitionParameter siPara : siParameter) {
      if (key.equals(siPara.getKey())) {
        include=true;
        siPara.setValue(indDefPara.getValue());
        isModified=true;
      }
    }
    if (!include) {
      tempParameter.add(indDefPara);
      isModified=true;
    }
  }
  if (isModified && !tempParameter.isEmpty()) {
    siParameter.addAll(tempParameter);
  }
  if (isModified) {
    try {
      ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().save(siDefItem,false);
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
}","/** 
 * Added: (20120808 yyin, TDQ-4189) The system indicators are not read-only because the user may want to write his own SQL template. so this task deals with the modified SI from imported one, and merge them with the current studio. 1)only when the user select the""Overwrite existing items"" on the import wizard(and the modifydate is newer than the current studio's SI), the conflict modification in imported SI will overwrite the ones in current studio, otherwise, the SI in current studio will keep. 2)If a language does not exist in the system indicator but exists in the user modified indicator, then we add it 3)if a language exists in the system indicator but has been removed in the user modified indicator, then we keep the system indicator definition. [for Indicator matadata(Purpose, Description, Author, Status): 1) will replace old value with new value if new value is not blank; 2) will keep old value if new value is blank][for IndicatorDefinitionParameter: 1) will replace the same name old parameter with new parameter; 2) will keep the old parameter if new one don't include the same name parameter ]
 * @param record imported modified system indicator
 * @param siDef the system indicator in the current studio
 */
protected void mergeSystemIndicator(ItemRecord record,TDQIndicatorDefinitionItem siDefItem){
  boolean isModified=false;
  IndicatorDefinition siDef=siDefItem.getIndicatorDefinition();
  Property siProp=siDefItem.getProperty();
  IndicatorDefinition indDef=(IndicatorDefinition)record.getElement();
  Property indDefProp=record.getProperty();
  EList<TdExpression> importedExs=indDef.getSqlGenericExpression();
  for (  TdExpression importedEx : importedExs) {
    if (importedEx.getModificationDate() == null) {
      continue;
    }
    TdExpression systemExpression=null;
    for (    TdExpression ex : siDef.getSqlGenericExpression()) {
      if (ex.getLanguage().equals(importedEx.getLanguage())) {
        systemExpression=ex;
        break;
      }
    }
    if (systemExpression == null) {
      IndicatorDefinitionFileHelper.addSqlExpression(siDef,importedEx.getLanguage(),importedEx.getBody(),importedEx.getModificationDate());
      isModified=true;
    }
 else {
      if (replaceExpression(systemExpression,importedEx)) {
        IndicatorDefinitionFileHelper.removeSqlExpression(siDef,importedEx.getLanguage());
        IndicatorDefinitionFileHelper.addSqlExpression(siDef,importedEx.getLanguage(),importedEx.getBody(),importedEx.getModificationDate());
        isModified=true;
      }
    }
  }
  IndicatorCategory siDefCategory=IndicatorCategoryHelper.getCategory(siDef);
  IndicatorCategory indDefCategory=IndicatorCategoryHelper.getCategory(indDef);
  siDefCategory=(IndicatorCategory)EObjectHelper.resolveObject(siDefCategory);
  indDefCategory=(IndicatorCategory)EObjectHelper.resolveObject(indDefCategory);
  if (!ModelElementHelper.compareUUID(siDefCategory,indDefCategory)) {
    IndicatorCategoryHelper.setCategory(siDef,indDefCategory);
    isModified=true;
  }
 else {
    if (siDefCategory != null && indDefCategory != null && !siDefCategory.eIsProxy()) {
      if (!indDefCategory.equals(siDefCategory)) {
        if (!indDefCategory.getLabel().equals(RenamePatternFinderFolderTask.PATTERN_FINDER)) {
          IndicatorCategoryHelper.setCategory(siDef,indDefCategory);
          isModified=true;
        }
      }
    }
  }
  if (siProp != null && indDefProp != null) {
    if (!StringUtils.isBlank(indDefProp.getPurpose())) {
      siProp.setPurpose(indDefProp.getPurpose());
    }
    if (!StringUtils.isBlank(indDefProp.getDescription())) {
      siProp.setDescription(indDefProp.getDescription());
    }
    siProp.setAuthor(indDefProp.getAuthor());
    siProp.setStatusCode(indDefProp.getStatusCode());
    isModified=true;
  }
  String jarFilePath=TaggedValueHelper.getJarFilePath(indDef);
  if (!StringUtils.isBlank(jarFilePath)) {
    TaggedValueHelper.setJarFilePath(jarFilePath,siDef);
    isModified=true;
  }
  String classNameText=TaggedValueHelper.getClassNameText(indDef);
  if (!StringUtils.isBlank(classNameText)) {
    TaggedValueHelper.setClassNameText(classNameText,siDef);
    isModified=true;
  }
  EList<IndicatorDefinitionParameter> siParameter=siDef.getIndicatorDefinitionParameter();
  EList<IndicatorDefinitionParameter> indDefParameter=indDef.getIndicatorDefinitionParameter();
  List<IndicatorDefinitionParameter> tempParameter=new ArrayList<IndicatorDefinitionParameter>();
  for (  IndicatorDefinitionParameter indDefPara : indDefParameter) {
    boolean include=false;
    String key=indDefPara.getKey();
    for (    IndicatorDefinitionParameter siPara : siParameter) {
      if (key.equals(siPara.getKey())) {
        include=true;
        siPara.setValue(indDefPara.getValue());
        isModified=true;
      }
    }
    if (!include) {
      tempParameter.add(indDefPara);
      isModified=true;
    }
  }
  if (isModified && !tempParameter.isEmpty()) {
    siParameter.addAll(tempParameter);
  }
  if (isModified) {
    try {
      ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().save(siDefItem,false);
    }
 catch (    Exception e) {
      log.error(e);
    }
  }
}",0.9529944640161048
136679,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  need2MergeModelElementMap.clear();
  allDeletedItems.clear();
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicatorDefinition(modEle)) {
                if (isDQRule(modEle)) {
                  if (isParserRule(modEle)) {
                    mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                    isDelete=false;
                  }
 else                   if (isWhereRule(modEle)) {
                  }
                }
 else                 if (isMatchRuleDefinition(modEle)) {
                }
 else {
                  TDQIndicatorDefinitionItem indItem=(TDQIndicatorDefinitionItem)object.getProperty().getItem();
                  mergeSystemIndicator(record,indItem);
                  if (record.getElement() instanceof UDIndicatorDefinition) {
                    need2MergeModelElementMap.put(indItem,record.getElement());
                  }
                  isDelete=false;
                }
              }
 else               if (isPattern(modEle)) {
                TDQPatternItem patternItem=(TDQPatternItem)object.getProperty().getItem();
                mergePattern(record,patternItem);
                need2MergeModelElementMap.put(patternItem,record.getElement());
                isDelete=false;
              }
 else {
                EObjectHelper.removeDependencys(PropertyHelper.getModelElement(object.getProperty()));
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              updateFiles.clear();
              updateFilesCoverd.clear();
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
                allDeletedItems.add(desPath);
              }
              for (              File file : updateFiles) {
                update(file,false);
              }
              for (              File file : updateFilesCoverd) {
                update(file,true);
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
  RepositoryWorkUnit<Object> workUnitFinish=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        postFinish();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
;
  workUnitFinish.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnitFinish);
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  need2MergeModelElementMap.clear();
  allImportItems.clear();
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicatorDefinition(modEle)) {
                if (isDQRule(modEle)) {
                  if (isParserRule(modEle)) {
                    mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                    isDelete=false;
                  }
 else                   if (isWhereRule(modEle)) {
                  }
                }
 else                 if (isMatchRuleDefinition(modEle)) {
                }
 else {
                  TDQIndicatorDefinitionItem indItem=(TDQIndicatorDefinitionItem)object.getProperty().getItem();
                  mergeSystemIndicator(record,indItem);
                  if (record.getElement() instanceof UDIndicatorDefinition) {
                    need2MergeModelElementMap.put(indItem,record.getElement());
                  }
                  isDelete=false;
                }
              }
 else               if (isPattern(modEle)) {
                TDQPatternItem patternItem=(TDQPatternItem)object.getProperty().getItem();
                mergePattern(record,patternItem);
                need2MergeModelElementMap.put(patternItem,record.getElement());
                isDelete=false;
              }
 else {
                EObjectHelper.removeDependencys(PropertyHelper.getModelElement(object.getProperty()));
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              updateFiles.clear();
              updateFilesCoverd.clear();
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
                allImportItems.add(desPath);
              }
              for (              File file : updateFiles) {
                update(file,false);
              }
              for (              File file : updateFilesCoverd) {
                update(file,true);
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
  RepositoryWorkUnit<Object> workUnitFinish=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        postFinish();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
;
  workUnitFinish.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnitFinish);
}",0.996804326450344
136680,"public void postFinish() throws IOException {
  for (  IPath path : this.allDeletedItems) {
    IFile desIFile=ResourceService.file2IFile(path.toFile());
    if (desIFile != null && desIFile.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile,true);
      if (property != null) {
        try {
          ProxyRepositoryFactory.getInstance().save(property.getItem(),true);
        }
 catch (        PersistenceException e) {
          log.error(e);
        }
      }
    }
  }
  if (!need2MergeModelElementMap.isEmpty()) {
    for (    TDQItem item : need2MergeModelElementMap.keySet()) {
      ModelElement recordMe=need2MergeModelElementMap.get(item);
      mergeClientDependency2PatternOrUdi(item,recordMe);
    }
  }
  ItemRecord.clear();
  deleteTempProjectFolder();
}","public void postFinish() throws IOException {
  for (  IPath path : this.allImportItems) {
    IFile desIFile=ResourceService.file2IFile(path.toFile());
    if (desIFile != null && desIFile.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile,true);
      if (property != null) {
        try {
          ProxyRepositoryFactory.getInstance().reload(property,desIFile);
        }
 catch (        PersistenceException e) {
          log.error(e);
        }
      }
    }
  }
  if (!need2MergeModelElementMap.isEmpty()) {
    for (    TDQItem item : need2MergeModelElementMap.keySet()) {
      ModelElement recordMe=need2MergeModelElementMap.get(item);
      mergeClientDependency2PatternOrUdi(item,recordMe);
    }
  }
  ItemRecord.clear();
  deleteTempProjectFolder();
}",0.9637982195845696
136681,"@Override public Boolean handleDrop(final IRepositoryNode targetNode){
  boolean result=Boolean.FALSE;
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      String[] pathBeforeRefresh=getSelectedNodePaths();
      if (pathBeforeRefresh.length == 0) {
        showWarningDialog();
        return;
      }
      refreshDQViewForRemoteProject();
      String[] pathAfterRefresh=getSelectedNodePaths();
      if (pathAfterRefresh.length == 0) {
        showWarningDialog();
        return;
      }
      IRepositoryNode[] selectedRepositoryNodes=getSelectedRepositoryNodes();
      if (selectedRepositoryNodes.length == 0) {
        showWarningDialog();
        return;
      }
      for (int i=0; i < getSelectedRepositoryNodes().length; i++) {
        if (!pathBeforeRefresh[i].equals(pathAfterRefresh[i])) {
          showWarningDialog();
          return;
        }
      }
      result=superHandle(targetNode);
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  return result;
}","@Override public Boolean handleDrop(final IRepositoryNode targetNode){
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(""String_Node_Str"",this){
    @Override protected void run() throws LoginException, PersistenceException {
      String[] pathBeforeRefresh=getSelectedNodePaths();
      if (pathBeforeRefresh.length == 0) {
        showWarningDialog();
        return;
      }
      refreshDQViewForRemoteProject();
      String[] pathAfterRefresh=getSelectedNodePaths();
      if (pathAfterRefresh.length == 0) {
        showWarningDialog();
        return;
      }
      IRepositoryNode[] selectedRepositoryNodes=getSelectedRepositoryNodes();
      if (selectedRepositoryNodes.length == 0) {
        showWarningDialog();
        return;
      }
      for (int i=0; i < getSelectedRepositoryNodes().length; i++) {
        if (!pathBeforeRefresh[i].equals(pathAfterRefresh[i])) {
          showWarningDialog();
          return;
        }
      }
      result=superHandle(targetNode);
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  return (Boolean)repositoryWorkUnit.getResult();
}",0.9689641273679968
136682,"/** 
 * DOC talend Comment method ""getCurrentColorList"".
 * @param columnKeys
 * @return
 */
private static List<Color> getCurrentColorList(List<?> columnKeys){
  List<Color> colorList=new ArrayList<>();
  int colorSize=ChartDecorator.COLOR_LIST.size();
  for (  Object columnKey : columnKeys) {
    int groupSize=Integer.parseInt(columnKey.toString());
    colorList.add(ChartDecorator.COLOR_LIST.get(groupSize % colorSize));
  }
  return colorList;
}","/** 
 * DOC talend Comment method ""getCurrentColorList"".
 * @param columnKeys
 * @return
 */
private static List<Color> getCurrentColorList(List<?> columnKeys){
  List<Color> colorList=new ArrayList<>();
  int colorSize=ChartDecorator.COLOR_LIST.size();
  for (  Object columnKey : columnKeys) {
    int groupSize=Integer.parseInt(columnKey.toString());
    colorList.add(ChartDecorator.COLOR_LIST.get(Math.abs((groupSize - 1) % colorSize)));
  }
  return colorList;
}",0.982608695652174
136683,"@Override protected Color getBackgroundColour(ILayerCell cell,IConfigRegistry configRegistry){
  int grpSizeValue=getGrpSize(cell);
  if (grpSizeValue == 0) {
    return GUIHelper.COLOR_LIST_BACKGROUND;
  }
  return COLOR_LIST[grpSizeValue % COLOR_LIST.length];
}","@Override protected Color getBackgroundColour(ILayerCell cell,IConfigRegistry configRegistry){
  int grpSizeValue=getGrpSize(cell);
  if (grpSizeValue == 0) {
    return GUIHelper.COLOR_LIST_BACKGROUND;
  }
  return COLOR_LIST[Math.abs((grpSizeValue - 1) % COLOR_LIST.length)];
}",0.970479704797048
136684,"@Override public org.eclipse.swt.graphics.Color getBackground(Object element,int columnIndex){
  int grpSizeValue=getGrpSize(((String[])element)[gidColumn]);
  return COLOR_LIST[grpSizeValue % COLOR_LIST.length];
}","@Override public org.eclipse.swt.graphics.Color getBackground(Object element,int columnIndex){
  int grpSizeValue=getGrpSize(((String[])element)[gidColumn]);
  return COLOR_LIST[Math.abs((grpSizeValue - 1) % COLOR_LIST.length)];
}",0.963963963963964
136685,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void initializeDefaultPreferences(){
  String migrationPreference=MarkerSupportInternalUtilities.MIGRATE_TASK_FILTERS;
  if (IDEWorkbenchPlugin.getDefault().getPreferenceStore().getBoolean(migrationPreference)) {
    return;
  }
  IDEWorkbenchPlugin.getDefault().getPreferenceStore().setValue(migrationPreference,true);
  String writer=""String_Node_Str"";
  IDEWorkbenchPlugin.getDefault().getPreferenceStore().putValue(""String_Node_Str"",writer);
  IDEWorkbenchPlugin.getDefault().savePluginPreferences();
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void initializeDefaultPreferences(){
  if (CommonUIPlugin.isFullyHeadless()) {
    return;
  }
  String migrationPreference=MarkerSupportInternalUtilities.MIGRATE_TASK_FILTERS;
  if (IDEWorkbenchPlugin.getDefault().getPreferenceStore().getBoolean(migrationPreference)) {
    return;
  }
  IDEWorkbenchPlugin.getDefault().getPreferenceStore().setValue(migrationPreference,true);
  String writer=""String_Node_Str"";
  IDEWorkbenchPlugin.getDefault().getPreferenceStore().putValue(""String_Node_Str"",writer);
  IDEWorkbenchPlugin.getDefault().savePluginPreferences();
}",0.9523809523809524
136686,"protected void init(){
  try {
    in=new Scanner(new FileReader(parameters[0]));
    while (in.hasNext()) {
      StringTokens.add(in.next().trim());
    }
    in.close();
  }
 catch (  FileNotFoundException|NullPointerException e) {
  }
}","protected void init(){
  try {
    in=new BufferedReader(new FileReader(parameters[0]));
    while (in.ready()) {
      StringTokens.add(in.readLine().trim());
    }
    in.close();
  }
 catch (  IOException|NullPointerException e) {
  }
}",0.8851774530271399
136687,"/** 
 * DOC zshen Comment method ""getClassName"".
 * @param classPathParameter
 * @return
 */
public static String getClassName(String classPathParameter){
  return CustomAttributeMatcherClassNameConvert.getClassName(classPathParameter);
}","/** 
 * DOC zshen Comment method ""getClassName"".
 * @param classPathParameter like ""CustomMatcherTest.jar||MycustomMatch.jar||testCustomMatcher.myCustomMatcher"" lastone is fully qualified name(""testCustomMatcher"" is package name and ""myCustomMatcher"" is class name).
 * @return the class name as the demo will return testCustomMatcher.myCustomMatcher
 */
public static String getClassName(String classPathParameter){
  return CustomAttributeMatcherClassNameConvert.getClassName(classPathParameter);
}",0.6449864498644986
136688,"/** 
 * DOC zshen Comment method ""getClassName"".
 * @param classPathParameter
 * @return
 */
public static String getClassName(String classPathParameter){
  String[] allElements=classPathParameter.split(REGEXKEY);
  if (allElements.length > 0) {
    return allElements[allElements.length - 1];
  }
 else {
    return classPathParameter;
  }
}","/** 
 * DOC zshen Comment method ""getClassName"".
 * @param classPathParameter like ""CustomMatcherTest.jar||MycustomMatch.jar||testCustomMatcher.myCustomMatcher"" lastone is fully qualified name(""testCustomMatcher"" is package name and ""myCustomMatcher"" is class name).
 * @return the class name as the demo will return testCustomMatcher.myCustomMatcher
 */
public static String getClassName(String classPathParameter){
  String[] allElements=classPathParameter.split(REGEXKEY);
  if (allElements.length > 0) {
    return allElements[allElements.length - 1];
  }
 else {
    return classPathParameter;
  }
}",0.7230443974630021
136689,"private void updateColor(ISourceViewer viewer){
  if (fColor != null)   fColor.dispose();
  StyledText text=viewer.getTextWidget();
  if (text == null || text.isDisposed())   return;
  Display display=text.getDisplay();
  fColor=new Color(display,new RGB(0,0,255));
}","private void updateColor(ISourceViewer viewer){
  if (fColor != null)   fColor.dispose();
  StyledText text=viewer.getTextWidget();
  if (text == null || text.isDisposed())   return;
  Display display=text.getDisplay();
  fColor=display.getSystemColor(SWT.COLOR_BLUE);
}",0.8752327746741154
136690,"/** 
 * Creates the text editor in the top half
 * @param parent
 * @return
 */
private Composite createEditor(Composite parent){
  final Composite editorParent=new Composite(parent,SWT.NONE);
  editorParent.setLayout(new FillLayout());
  textEditor.createPartControl(editorParent);
  textEditor.addPropertyListener(new IPropertyListener(){
    public void propertyChanged(    Object source,    int propertyId){
      SQLEditor.this.firePropertyChange(propertyId);
    }
  }
);
  return editorParent;
}","/** 
 * Creates the text editor in the top half
 * @param parent
 * @return
 */
private Composite createEditor(Composite parent){
  final Composite editorParent=new Composite(parent,SWT.NONE);
  editorParent.setLayout(new FillLayout());
  textEditor.createPartControl(editorParent);
  textEditor.addPropertyListener(new IPropertyListener(){
    @Override public void propertyChanged(    Object source,    int propertyId){
      SQLEditor.this.firePropertyChange(propertyId);
    }
  }
);
  return editorParent;
}",0.990138067061144
136691,"public void widgetDefaultSelected(SelectionEvent e){
  widgetSelected(e);
}","@Override public void widgetDefaultSelected(SelectionEvent e){
  widgetSelected(e);
}",0.9375
136692,"public void controlMoved(ControlEvent e){
}","@Override public void controlMoved(ControlEvent e){
}",0.8958333333333334
136693,"public void refreshToolbars(){
  getEditorToolBar().refresh();
}","@Override public void refreshToolbars(){
  getEditorToolBar().refresh();
}",0.927536231884058
136694,"public void controlResized(ControlEvent e){
  parent.getParent().layout(true);
  parent.layout(true);
}","@Override public void controlResized(ControlEvent e){
  parent.getParent().layout(true);
  parent.layout(true);
}",0.9537037037037036
136695,"/** 
 * Sets the session to use for executing queries
 * @param session The new Session
 */
public void setSession(Session session){
  if (session == this.session) {
    return;
  }
  if (getSession() != null && session != this.session) {
    this.session.close();
  }
  this.session=session;
  if (textEditor != null) {
    textEditor.onEditorSessionChanged(session);
  }
  if (toolBar != null) {
    toolBar.onEditorSessionChanged(session);
  }
}","/** 
 * Sets the session to use for executing queries
 * @param session The new Session
 */
@Override public void setSession(Session session){
  if (session == this.session) {
    return;
  }
  if (getSession() != null && session != this.session) {
    this.session.close();
  }
  this.session=session;
  if (textEditor != null) {
    textEditor.onEditorSessionChanged(session);
  }
  if (toolBar != null) {
    toolBar.onEditorSessionChanged(session);
  }
}",0.9889624724061812
136696,"/** 
 * Creates the sash (the draggable splitter) between the editor and the results tab
 * @param parent
 * @return
 */
private Sash createSash(Composite parent){
  final Sash sash=new Sash(parent,SWT.HORIZONTAL);
  sash.setBackground(SASH_COLOR);
  sash.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
    public void widgetSelected(    SelectionEvent e){
      FormData data=(FormData)sash.getLayoutData();
      Rectangle rect=sash.getParent().getBounds();
      data.top=new FormAttachment(e.y,rect.height,0);
      sash.getParent().layout();
      sash.getParent().getParent().layout();
    }
  }
);
  return sash;
}","/** 
 * Creates the sash (the draggable splitter) between the editor and the results tab
 * @param parent
 * @return
 */
private Sash createSash(Composite parent){
  final Sash sash=new Sash(parent,SWT.HORIZONTAL);
  sash.setBackground(SASH_COLOR);
  sash.addSelectionListener(new SelectionListener(){
    @Override public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
    @Override public void widgetSelected(    SelectionEvent e){
      FormData data=(FormData)sash.getLayoutData();
      Rectangle rect=sash.getParent().getBounds();
      data.top=new FormAttachment(e.y,rect.height,0);
      sash.getParent().layout();
      sash.getParent().getParent().layout();
    }
  }
);
  return sash;
}",0.9861495844875346
136697,"/** 
 * Creates the toolbar
 * @param parent
 */
private void createToolbar(final Composite parent){
  toolBar=new SQLEditorToolBar(parent,this);
  toolBar.addResizeListener(new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      parent.getParent().layout(true);
      parent.layout(true);
    }
  }
);
}","/** 
 * Creates the toolbar
 * @param parent
 */
private void createToolbar(final Composite parent){
  toolBar=new SQLEditorToolBar(parent,this);
  toolBar.addResizeListener(new ControlListener(){
    @Override public void controlMoved(    ControlEvent e){
    }
    @Override public void controlResized(    ControlEvent e){
      parent.getParent().layout(true);
      parent.layout(true);
    }
  }
);
}",0.9746835443037974
136698,"/** 
 * Creates the results tabs in the bottom half
 * @param parent
 * @return
 */
private CTabFolder createResultTabs(Composite parent){
  tabFolder=new CTabFolder(parent,SWT.TOP | SWT.CLOSE);
  tabFolder.setBorderVisible(true);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  Display display=getSite().getShell().getDisplay();
  tabFolder.setSelectionBackground(new Color[]{display.getSystemColor(SWT.COLOR_WHITE),new Color(null,211,225,250),new Color(null,175,201,246),IConstants.TAB_BORDER_COLOR},new int[]{25,50,75},true);
  messagesTab=new CTabItem(tabFolder,SWT.NONE);
  messagesTab.setText(Messages.getString(""String_Node_Str""));
  messagesTable=new Table(tabFolder,SWT.SINGLE | SWT.BORDER | SWT.FULL_SELECTION);
  messagesTab.setControl(messagesTable);
  messagesTable.setLinesVisible(true);
  messagesTable.setHeaderVisible(true);
  messagesTable.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      super.widgetSelected(e);
      Message message=(Message)((TableItem)e.item).getData();
      setCursorPosition(message.getLineNo(),message.getCharNo());
    }
  }
);
  TableColumn col=new TableColumn(messagesTable,SWT.NONE);
  col.setText(Messages.getString(""String_Node_Str""));
  col.pack();
  col=new TableColumn(messagesTable,SWT.NONE);
  col.setText(Messages.getString(""String_Node_Str""));
  col.pack();
  col=new TableColumn(messagesTable,SWT.NONE);
  col.setText(Messages.getString(""String_Node_Str""));
  col.pack();
  col=new TableColumn(messagesTable,SWT.NONE);
  col.setText(Messages.getString(""String_Node_Str""));
  col.pack();
  tabFolder.setSelection(messagesTab);
  tabFolder.addCTabFolder2Listener(new CTabFolder2Adapter(){
    @Override public void close(    CTabFolderEvent event){
      super.close(event);
      CTabItem tabItem=(CTabItem)event.item;
      event.doit=onCloseTab(tabItem);
    }
  }
);
  return tabFolder;
}","/** 
 * Creates the results tabs in the bottom half
 * @param parent
 * @return
 */
private CTabFolder createResultTabs(Composite parent){
  tabFolder=new CTabFolder(parent,SWT.TOP | SWT.CLOSE);
  tabFolder.setBorderVisible(true);
  tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));
  Display display=getSite().getShell().getDisplay();
  tabFolder.setSelectionBackground(new Color[]{display.getSystemColor(SWT.COLOR_WHITE),firstColor,secondColor,IConstants.TAB_BORDER_COLOR},new int[]{25,50,75},true);
  messagesTab=new CTabItem(tabFolder,SWT.NONE);
  messagesTab.setText(Messages.getString(""String_Node_Str""));
  messagesTable=new Table(tabFolder,SWT.SINGLE | SWT.BORDER | SWT.FULL_SELECTION);
  messagesTab.setControl(messagesTable);
  messagesTable.setLinesVisible(true);
  messagesTable.setHeaderVisible(true);
  messagesTable.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      super.widgetSelected(e);
      Message message=(Message)((TableItem)e.item).getData();
      setCursorPosition(message.getLineNo(),message.getCharNo());
    }
  }
);
  TableColumn col=new TableColumn(messagesTable,SWT.NONE);
  col.setText(Messages.getString(""String_Node_Str""));
  col.pack();
  col=new TableColumn(messagesTable,SWT.NONE);
  col.setText(Messages.getString(""String_Node_Str""));
  col.pack();
  col=new TableColumn(messagesTable,SWT.NONE);
  col.setText(Messages.getString(""String_Node_Str""));
  col.pack();
  col=new TableColumn(messagesTable,SWT.NONE);
  col.setText(Messages.getString(""String_Node_Str""));
  col.pack();
  tabFolder.setSelection(messagesTab);
  tabFolder.addCTabFolder2Listener(new CTabFolder2Adapter(){
    @Override public void close(    CTabFolderEvent event){
      super.close(event);
      CTabItem tabItem=(CTabItem)event.item;
      event.doit=onCloseTab(tabItem);
    }
  }
);
  return tabFolder;
}",0.9803921568627452
136699,"public void propertyChanged(Object source,int propertyId){
  SQLEditor.this.firePropertyChange(propertyId);
}","@Override public void propertyChanged(Object source,int propertyId){
  SQLEditor.this.firePropertyChange(propertyId);
}",0.956140350877193
136700,"@Override public void dispose(){
  setSession(null);
  super.dispose();
}","@Override public void dispose(){
  setSession(null);
  if (this.textEditor.getTitleImage() != null) {
    this.textEditor.getTitleImage().dispose();
  }
  super.dispose();
}",0.5934959349593496
136701,"/** 
 * @return the session
 */
public Session getSession(){
  if (session != null && session.getUser() == null) {
    session=null;
  }
  return session;
}","/** 
 * @return the session
 */
@Override public Session getSession(){
  if (session != null && session.getUser() == null) {
    session=null;
  }
  return session;
}",0.968944099378882
136702,"public void run(){
  if (sqlTextViewer != null) {
    sqlTextViewer.setNewDictionary(dictionary);
  }
}","@Override public void run(){
  if (sqlTextViewer != null && !editor.getTitleImage().isDisposed()) {
    sqlTextViewer.setNewDictionary(dictionary);
  }
}",0.8046875
136703,"public void setNewDictionary(final Dictionary dictionary){
  if (editor.getSite() != null && editor.getSite().getShell() != null && editor.getSite().getShell().getDisplay() != null) {
    editor.getSite().getShell().getDisplay().asyncExec(new Runnable(){
      public void run(){
        if (sqlTextViewer != null) {
          sqlTextViewer.setNewDictionary(dictionary);
        }
      }
    }
);
  }
}","public void setNewDictionary(final Dictionary dictionary){
  if (editor.getSite() != null && editor.getSite().getShell() != null && editor.getSite().getShell().getDisplay() != null) {
    editor.getSite().getShell().getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (sqlTextViewer != null && !editor.getTitleImage().isDisposed()) {
          sqlTextViewer.setNewDictionary(dictionary);
        }
      }
    }
);
  }
}",0.9415887850467288
136704,"public void verifyKey(VerifyEvent event){
  if (event.stateMask == SWT.CTRL && event.keyCode == 13) {
    event.doit=false;
    _execSQLAction.run();
  }
}","@Override public void verifyKey(VerifyEvent event){
  if (event.stateMask == SWT.CTRL && event.keyCode == 13) {
    event.doit=false;
    _execSQLAction.run();
  }
}",0.96875
136705,"@Override protected ISourceViewer createSourceViewer(final Composite parent,IVerticalRuler ruler,int style){
  parent.setLayout(new FillLayout());
  final Composite myParent=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=layout.marginWidth=layout.horizontalSpacing=layout.verticalSpacing=0;
  myParent.setLayout(layout);
  Composite div1=new Composite(myParent,SWT.NONE);
  GridData lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=1;
  div1.setLayoutData(lgid);
  div1.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  GridData gid=new GridData();
  gid.grabExcessHorizontalSpace=gid.grabExcessVerticalSpace=true;
  gid.horizontalAlignment=gid.verticalAlignment=GridData.FILL;
  Dictionary dictionary=null;
  if (editor.getSession() != null && _enableContentAssist) {
    dictionary=editor.getSession().getUser().getMetaDataSession().getDictionary();
  }
  sqlTextViewer=new SQLTextViewer(myParent,style,store,dictionary,ruler);
  sqlTextViewer.getControl().setLayoutData(gid);
  Composite div2=new Composite(myParent,SWT.NONE);
  lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=0;
  div2.setLayoutData(lgid);
  div2.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  final SQLEditor thisEditor=editor;
  sqlTextViewer.getTextWidget().addVerifyKeyListener(new VerifyKeyListener(){
    private ExecSQLAction _execSQLAction=new ExecSQLAction(thisEditor);
    public void verifyKey(    VerifyEvent event){
      if (event.stateMask == SWT.CTRL && event.keyCode == 13) {
        event.doit=false;
        _execSQLAction.run();
      }
    }
  }
);
  sqlTextViewer.getTextWidget().addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
    }
  }
);
  myParent.layout();
  IDocument dc=new Document();
  sqlTextViewer.setDocument(dc);
  mcl.install(sqlTextViewer);
  return sqlTextViewer;
}","@Override protected ISourceViewer createSourceViewer(final Composite parent,IVerticalRuler ruler,int style){
  parent.setLayout(new FillLayout());
  final Composite myParent=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=layout.marginWidth=layout.horizontalSpacing=layout.verticalSpacing=0;
  myParent.setLayout(layout);
  Composite div1=new Composite(myParent,SWT.NONE);
  GridData lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=1;
  div1.setLayoutData(lgid);
  div1.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  GridData gid=new GridData();
  gid.grabExcessHorizontalSpace=gid.grabExcessVerticalSpace=true;
  gid.horizontalAlignment=gid.verticalAlignment=GridData.FILL;
  Dictionary dictionary=null;
  if (editor.getSession() != null && _enableContentAssist) {
    dictionary=editor.getSession().getUser().getMetaDataSession().getDictionary();
  }
  sqlTextViewer=new SQLTextViewer(myParent,style,store,dictionary,ruler);
  sqlTextViewer.getControl().setLayoutData(gid);
  Composite div2=new Composite(myParent,SWT.NONE);
  lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=0;
  div2.setLayoutData(lgid);
  div2.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  final SQLEditor thisEditor=editor;
  sqlTextViewer.getTextWidget().addVerifyKeyListener(new VerifyKeyListener(){
    private ExecSQLAction _execSQLAction=new ExecSQLAction(thisEditor);
    @Override public void verifyKey(    VerifyEvent event){
      if (event.stateMask == SWT.CTRL && event.keyCode == 13) {
        event.doit=false;
        _execSQLAction.run();
      }
    }
  }
);
  sqlTextViewer.getTextWidget().addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
    }
  }
);
  myParent.layout();
  IDocument dc=new Document();
  sqlTextViewer.setDocument(dc);
  mcl.install(sqlTextViewer);
  return sqlTextViewer;
}",0.9978184991273996
136706,"public void dispose(){
}","public void dispose(){
  dispose(Display.getCurrent());
}",0.5925925925925926
136707,"/** 
 * make the original image name and overlay image name as a key, find the image from ImageLib.imageRegistry by this key. if not found,create a new Overlay image and put it into imageRegistry.
 * @param originalName
 * @param overImgName
 * @return
 */
public static ImageDescriptor getOverlayIcon(String originalName,String overImgName){
  String orininal_over_name=originalName + PluginConstant.UNDER_LINE + overImgName;
  if (imageRegistry == null) {
    initialize();
  }
  ImageDescriptor originalOverImg=imageRegistry.getDescriptor(orininal_over_name);
  if (originalOverImg == null) {
    ImageDescriptor orignalImg=getImageDescriptor(originalName);
    ImageDescriptor overImg=getImageDescriptor(overImgName);
    if (orignalImg != null && overImg != null) {
      originalOverImg=createIcon(orignalImg.createImage(),overImg);
      imageRegistry.put(orininal_over_name,originalOverImg);
    }
  }
  return originalOverImg;
}","/** 
 * make the original image name and overlay image name as a key, find the image from ImageLib.imageRegistry by this key. if not found,create a new Overlay image and put it's ImageDescriptor into imageRegistry.
 * @param originalName
 * @param overImgName
 * @return the image
 */
public static Image getOverlayIcon(String originalName,String overImgName){
  String orininal_over_name=originalName + PluginConstant.UNDER_LINE + overImgName;
  if (imageRegistry == null) {
    initialize();
  }
  Image originalOverImg=imageRegistry.get(orininal_over_name);
  if (originalOverImg == null) {
    ImageDescriptor orignalImg=getImageDescriptor(originalName);
    ImageDescriptor overImg=getImageDescriptor(overImgName);
    if (orignalImg != null && overImg != null) {
      ImageDescriptor originalOverImgDes=createIcon(orignalImg.createImage(),overImg);
      imageRegistry.put(orininal_over_name,originalOverImgDes);
      originalOverImg=imageRegistry.get(orininal_over_name);
    }
  }
  return originalOverImg;
}",0.9278772378516624
136708,"protected ILabelProvider getLabelProvider(){
  if (labelProvider == null) {
    labelProvider=new LabelProvider(){
      @Override public String getText(      Object obj){
        if (obj == null) {
          return ""String_Node_Str"";
        }
        if (obj instanceof ImpactNode) {
          return ((ImpactNode)obj).toString();
        }
 else         if (obj instanceof IFile) {
          IFile file=(IFile)obj;
          ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
          return modelElement != null ? PropertyHelper.getProperty(modelElement).getDisplayName() : file.getName();
        }
 else         if (obj instanceof RepositoryViewObject) {
          return ((IRepositoryViewObject)obj).getLabel();
        }
 else         if (obj instanceof MetadataTable) {
          return ((ModelElement)obj).getName();
        }
        Property property=PropertyHelper.getProperty((ModelElement)obj);
        return property == null ? ((ModelElement)obj).getName() : property.getDisplayName();
      }
      @Override public Image getImage(      Object obj){
        ModelElement modelElement=null;
        if (obj instanceof ModelElement) {
          modelElement=(ModelElement)obj;
        }
 else         if (obj instanceof ImpactNode) {
          modelElement=((ImpactNode)obj).getNodeElement();
        }
 else         if (obj instanceof IFile) {
          modelElement=ModelElementFileFactory.getModelElement((IFile)obj);
        }
 else         if (obj instanceof RepositoryViewObject) {
          return ImageLib.getImage(ImageLib.JRXML_ICON);
        }
        if (modelElement == null) {
          if (((ImpactNode)obj).getNode() != null) {
            return ImageLib.getImage(ImageLib.JRXML_ICON);
          }
          return super.getImage(obj);
        }
        Image modelElementImage=null;
        String imgName=null;
        if (modelElement instanceof Analysis) {
          imgName=ImageLib.ANALYSIS_OBJECT;
        }
 else         if (modelElement instanceof TdReport) {
          imgName=ImageLib.REPORT_OBJECT;
        }
 else         if (modelElement instanceof DatabaseConnection) {
          imgName=ImageLib.CONNECTION;
        }
 else         if (modelElement instanceof DelimitedFileConnection) {
          imgName=ImageLib.FILE_DELIMITED;
        }
 else         if (modelElement instanceof Pattern) {
          imgName=ImageLib.PATTERN_REG;
        }
 else         if (modelElement instanceof IndicatorDefinition) {
          if (modelElement instanceof DQRule) {
            imgName=ImageLib.DQ_RULE;
          }
 else           if (modelElement instanceof MatchRuleDefinition) {
            imgName=ImageLib.MATCH_RULE_ICON;
          }
 else {
            imgName=ImageLib.IND_DEFINITION;
          }
        }
 else         if (modelElement instanceof MetadataTable) {
          imgName=ImageLib.TABLE;
        }
        if (imgName != null) {
          modelElementImage=ImageLib.getImage(imgName);
        }
        if (modelElementImage != null) {
          if (modelElement != null) {
            Property property=PropertyHelper.getProperty(modelElement);
            if (property != null) {
              Item item=property.getItem();
              if (item != null) {
                if (ProxyRepositoryManager.getInstance().isLockByUserOwn(item)) {
                  modelElementImage=ImageLib.createLockedByOwnIcon(imgName).createImage();
                  imagesNeedDisposedList.add(modelElementImage);
                }
 else                 if (ProxyRepositoryManager.getInstance().isLockByOthers(item)) {
                  modelElementImage=ImageLib.createLockedByOtherIcon(imgName).createImage();
                  imagesNeedDisposedList.add(modelElementImage);
                }
              }
            }
          }
          return modelElementImage;
        }
        return super.getImage(obj);
      }
    }
;
  }
  return labelProvider;
}","protected ILabelProvider getLabelProvider(){
  if (labelProvider == null) {
    labelProvider=new LabelProvider(){
      @Override public String getText(      Object obj){
        if (obj == null) {
          return ""String_Node_Str"";
        }
        if (obj instanceof ImpactNode) {
          return ((ImpactNode)obj).toString();
        }
 else         if (obj instanceof IFile) {
          IFile file=(IFile)obj;
          ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
          return modelElement != null ? PropertyHelper.getProperty(modelElement).getDisplayName() : file.getName();
        }
 else         if (obj instanceof RepositoryViewObject) {
          return ((IRepositoryViewObject)obj).getLabel();
        }
 else         if (obj instanceof MetadataTable) {
          return ((ModelElement)obj).getName();
        }
        Property property=PropertyHelper.getProperty((ModelElement)obj);
        return property == null ? ((ModelElement)obj).getName() : property.getDisplayName();
      }
      @Override public Image getImage(      Object obj){
        ModelElement modelElement=null;
        if (obj instanceof ModelElement) {
          modelElement=(ModelElement)obj;
        }
 else         if (obj instanceof ImpactNode) {
          modelElement=((ImpactNode)obj).getNodeElement();
        }
 else         if (obj instanceof IFile) {
          modelElement=ModelElementFileFactory.getModelElement((IFile)obj);
        }
 else         if (obj instanceof RepositoryViewObject) {
          return ImageLib.getImage(ImageLib.JRXML_ICON);
        }
        if (modelElement == null) {
          if (((ImpactNode)obj).getNode() != null) {
            return ImageLib.getImage(ImageLib.JRXML_ICON);
          }
          return super.getImage(obj);
        }
        Image modelElementImage=null;
        String imgName=null;
        if (modelElement instanceof Analysis) {
          imgName=ImageLib.ANALYSIS_OBJECT;
        }
 else         if (modelElement instanceof TdReport) {
          imgName=ImageLib.REPORT_OBJECT;
        }
 else         if (modelElement instanceof DatabaseConnection) {
          imgName=ImageLib.CONNECTION;
        }
 else         if (modelElement instanceof DelimitedFileConnection) {
          imgName=ImageLib.FILE_DELIMITED;
        }
 else         if (modelElement instanceof Pattern) {
          imgName=ImageLib.PATTERN_REG;
        }
 else         if (modelElement instanceof IndicatorDefinition) {
          if (modelElement instanceof DQRule) {
            imgName=ImageLib.DQ_RULE;
          }
 else           if (modelElement instanceof MatchRuleDefinition) {
            imgName=ImageLib.MATCH_RULE_ICON;
          }
 else {
            imgName=ImageLib.IND_DEFINITION;
          }
        }
 else         if (modelElement instanceof MetadataTable) {
          imgName=ImageLib.TABLE;
        }
        if (imgName != null) {
          modelElementImage=ImageLib.getImage(imgName);
        }
        if (modelElementImage != null) {
          if (modelElement != null) {
            Property property=PropertyHelper.getProperty(modelElement);
            if (property != null) {
              Item item=property.getItem();
              if (item != null) {
                if (ProxyRepositoryManager.getInstance().isLockByUserOwn(item)) {
                  modelElementImage=ImageLib.createLockedByOwnIcon(imgName);
                  imagesNeedDisposedList.add(modelElementImage);
                }
 else                 if (ProxyRepositoryManager.getInstance().isLockByOthers(item)) {
                  modelElementImage=ImageLib.createLockedByOtherIcon(imgName);
                  imagesNeedDisposedList.add(modelElementImage);
                }
              }
            }
          }
          return modelElementImage;
        }
        return super.getImage(obj);
      }
    }
;
  }
  return labelProvider;
}",0.9430686750063824
136709,"@Override public Image getImage(Object obj){
  ModelElement modelElement=null;
  if (obj instanceof ModelElement) {
    modelElement=(ModelElement)obj;
  }
 else   if (obj instanceof ImpactNode) {
    modelElement=((ImpactNode)obj).getNodeElement();
  }
 else   if (obj instanceof IFile) {
    modelElement=ModelElementFileFactory.getModelElement((IFile)obj);
  }
 else   if (obj instanceof RepositoryViewObject) {
    return ImageLib.getImage(ImageLib.JRXML_ICON);
  }
  if (modelElement == null) {
    if (((ImpactNode)obj).getNode() != null) {
      return ImageLib.getImage(ImageLib.JRXML_ICON);
    }
    return super.getImage(obj);
  }
  Image modelElementImage=null;
  String imgName=null;
  if (modelElement instanceof Analysis) {
    imgName=ImageLib.ANALYSIS_OBJECT;
  }
 else   if (modelElement instanceof TdReport) {
    imgName=ImageLib.REPORT_OBJECT;
  }
 else   if (modelElement instanceof DatabaseConnection) {
    imgName=ImageLib.CONNECTION;
  }
 else   if (modelElement instanceof DelimitedFileConnection) {
    imgName=ImageLib.FILE_DELIMITED;
  }
 else   if (modelElement instanceof Pattern) {
    imgName=ImageLib.PATTERN_REG;
  }
 else   if (modelElement instanceof IndicatorDefinition) {
    if (modelElement instanceof DQRule) {
      imgName=ImageLib.DQ_RULE;
    }
 else     if (modelElement instanceof MatchRuleDefinition) {
      imgName=ImageLib.MATCH_RULE_ICON;
    }
 else {
      imgName=ImageLib.IND_DEFINITION;
    }
  }
 else   if (modelElement instanceof MetadataTable) {
    imgName=ImageLib.TABLE;
  }
  if (imgName != null) {
    modelElementImage=ImageLib.getImage(imgName);
  }
  if (modelElementImage != null) {
    if (modelElement != null) {
      Property property=PropertyHelper.getProperty(modelElement);
      if (property != null) {
        Item item=property.getItem();
        if (item != null) {
          if (ProxyRepositoryManager.getInstance().isLockByUserOwn(item)) {
            modelElementImage=ImageLib.createLockedByOwnIcon(imgName).createImage();
            imagesNeedDisposedList.add(modelElementImage);
          }
 else           if (ProxyRepositoryManager.getInstance().isLockByOthers(item)) {
            modelElementImage=ImageLib.createLockedByOtherIcon(imgName).createImage();
            imagesNeedDisposedList.add(modelElementImage);
          }
        }
      }
    }
    return modelElementImage;
  }
  return super.getImage(obj);
}","@Override public Image getImage(Object obj){
  ModelElement modelElement=null;
  if (obj instanceof ModelElement) {
    modelElement=(ModelElement)obj;
  }
 else   if (obj instanceof ImpactNode) {
    modelElement=((ImpactNode)obj).getNodeElement();
  }
 else   if (obj instanceof IFile) {
    modelElement=ModelElementFileFactory.getModelElement((IFile)obj);
  }
 else   if (obj instanceof RepositoryViewObject) {
    return ImageLib.getImage(ImageLib.JRXML_ICON);
  }
  if (modelElement == null) {
    if (((ImpactNode)obj).getNode() != null) {
      return ImageLib.getImage(ImageLib.JRXML_ICON);
    }
    return super.getImage(obj);
  }
  Image modelElementImage=null;
  String imgName=null;
  if (modelElement instanceof Analysis) {
    imgName=ImageLib.ANALYSIS_OBJECT;
  }
 else   if (modelElement instanceof TdReport) {
    imgName=ImageLib.REPORT_OBJECT;
  }
 else   if (modelElement instanceof DatabaseConnection) {
    imgName=ImageLib.CONNECTION;
  }
 else   if (modelElement instanceof DelimitedFileConnection) {
    imgName=ImageLib.FILE_DELIMITED;
  }
 else   if (modelElement instanceof Pattern) {
    imgName=ImageLib.PATTERN_REG;
  }
 else   if (modelElement instanceof IndicatorDefinition) {
    if (modelElement instanceof DQRule) {
      imgName=ImageLib.DQ_RULE;
    }
 else     if (modelElement instanceof MatchRuleDefinition) {
      imgName=ImageLib.MATCH_RULE_ICON;
    }
 else {
      imgName=ImageLib.IND_DEFINITION;
    }
  }
 else   if (modelElement instanceof MetadataTable) {
    imgName=ImageLib.TABLE;
  }
  if (imgName != null) {
    modelElementImage=ImageLib.getImage(imgName);
  }
  if (modelElementImage != null) {
    if (modelElement != null) {
      Property property=PropertyHelper.getProperty(modelElement);
      if (property != null) {
        Item item=property.getItem();
        if (item != null) {
          if (ProxyRepositoryManager.getInstance().isLockByUserOwn(item)) {
            modelElementImage=ImageLib.createLockedByOwnIcon(imgName);
            imagesNeedDisposedList.add(modelElementImage);
          }
 else           if (ProxyRepositoryManager.getInstance().isLockByOthers(item)) {
            modelElementImage=ImageLib.createLockedByOtherIcon(imgName);
            imagesNeedDisposedList.add(modelElementImage);
          }
        }
      }
    }
    return modelElementImage;
  }
  return super.getImage(obj);
}",0.9941544885177452
136710,"/** 
 * DOC zshen Comment method ""getClassName"".
 * @param classPathParameter
 * @return
 */
public static String getClassName(String classPathParameter){
  return CustomAttributeMatcherClassNameConvert.getClassName(classPathParameter);
}","/** 
 * DOC zshen Comment method ""getClassName"".
 * @param classPathParameter like ""CustomMatcherTest.jar||MycustomMatch.jar||testCustomMatcher.myCustomMatcher"" lastone is fully qualified name(""testCustomMatcher"" is package name and ""myCustomMatcher"" is class name).
 * @return the class name as the demo will return testCustomMatcher.myCustomMatcher
 */
public static String getClassName(String classPathParameter){
  return CustomAttributeMatcherClassNameConvert.getClassName(classPathParameter);
}",0.6449864498644986
136711,"/** 
 * DOC zshen Comment method ""getClassName"".
 * @param classPathParameter
 * @return
 */
public static String getClassName(String classPathParameter){
  String[] allElements=classPathParameter.split(REGEXKEY);
  if (allElements.length > 0) {
    return allElements[allElements.length - 1];
  }
 else {
    return classPathParameter;
  }
}","/** 
 * DOC zshen Comment method ""getClassName"".
 * @param classPathParameter like ""CustomMatcherTest.jar||MycustomMatch.jar||testCustomMatcher.myCustomMatcher"" lastone is fully qualified name(""testCustomMatcher"" is package name and ""myCustomMatcher"" is class name).
 * @return the class name as the demo will return testCustomMatcher.myCustomMatcher
 */
public static String getClassName(String classPathParameter){
  String[] allElements=classPathParameter.split(REGEXKEY);
  if (allElements.length > 0) {
    return allElements[allElements.length - 1];
  }
 else {
    return classPathParameter;
  }
}",0.7230443974630021
136712,"/** 
 * DOC zshen Comment method ""createMatchRuleBarChart"".
 * @param title
 * @param dataset
 * @return
 */
public static JFreeChart createMatchRuleBarChart(String categoryAxisLabel,String valueAxisLabel,CategoryDataset dataset){
  ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
  JFreeChart localJFreeChart=ChartFactory.createBarChart(null,categoryAxisLabel,valueAxisLabel,dataset,PlotOrientation.VERTICAL,false,true,false);
  localJFreeChart.addSubtitle(new TextTitle(Messages.getString(""String_Node_Str"",sumItemCount(dataset),sumGroupCount(dataset))));
  CategoryPlot plot=(CategoryPlot)localJFreeChart.getPlot();
  BarRenderer barRenderer=new TalendBarRenderer(true,ChartDecorator.COLOR_LIST);
  barRenderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
  barRenderer.setBaseItemLabelsVisible(true);
  barRenderer.setShadowVisible(Boolean.FALSE);
  plot.setRenderer(barRenderer);
  CategoryAxis localCategoryAxis=plot.getDomainAxis();
  localCategoryAxis.setCategoryMargin(0.25D);
  localCategoryAxis.setUpperMargin(0.02D);
  localCategoryAxis.setLowerMargin(0.02D);
  NumberAxis localNumberAxis=(NumberAxis)plot.getRangeAxis();
  localNumberAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
  localNumberAxis.setUpperMargin(0.1D);
  return localJFreeChart;
}","/** 
 * DOC zshen Comment method ""createMatchRuleBarChart"".
 * @param title
 * @param dataset
 * @return
 */
public static JFreeChart createMatchRuleBarChart(String categoryAxisLabel,String valueAxisLabel,CategoryDataset dataset){
  ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
  JFreeChart localJFreeChart=ChartFactory.createBarChart(null,categoryAxisLabel,valueAxisLabel,dataset,PlotOrientation.VERTICAL,false,true,false);
  localJFreeChart.addSubtitle(new TextTitle(Messages.getString(""String_Node_Str"",sumItemCount(dataset),sumGroupCount(dataset))));
  CategoryPlot plot=(CategoryPlot)localJFreeChart.getPlot();
  List<Color> currentColorList=null;
  try {
    currentColorList=getCurrentColorList(dataset.getColumnKeys());
  }
 catch (  NumberFormatException e) {
    log.warn(e,e);
    currentColorList=ChartDecorator.COLOR_LIST;
  }
  BarRenderer barRenderer=new TalendBarRenderer(true,currentColorList);
  barRenderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
  barRenderer.setBaseItemLabelsVisible(true);
  barRenderer.setShadowVisible(Boolean.FALSE);
  plot.setRenderer(barRenderer);
  CategoryAxis localCategoryAxis=plot.getDomainAxis();
  localCategoryAxis.setCategoryMargin(0.25D);
  localCategoryAxis.setUpperMargin(0.02D);
  localCategoryAxis.setLowerMargin(0.02D);
  NumberAxis localNumberAxis=(NumberAxis)plot.getRangeAxis();
  localNumberAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
  localNumberAxis.setUpperMargin(0.1D);
  return localJFreeChart;
}",0.8926197971318642
136713,"@Override public org.eclipse.swt.graphics.Color getBackground(Object element,int columnIndex){
  int grpSizeValue=getGrpSize(((String[])element)[gidColumn]);
  return COLOR_LIST[groupSizeList.indexOf(grpSizeValue) % COLOR_LIST.length];
}","@Override public org.eclipse.swt.graphics.Color getBackground(Object element,int columnIndex){
  int grpSizeValue=getGrpSize(((String[])element)[gidColumn]);
  return COLOR_LIST[grpSizeValue % COLOR_LIST.length];
}",0.9490022172949002
136714,"@Test public void testDummyGood(){
  dv.parameters=""String_Node_Str"".split(""String_Node_Str"");
  String output=sdf.format(dv.generateMaskedRow(input));
  assertEquals(output,""String_Node_Str"");
}","public void testDummyGood() throws ParseException {
  dv.parameters=""String_Node_Str"".split(""String_Node_Str"");
  dv.parse(""String_Node_Str"",false,rand);
  for (int index=0; index < 20; index++) {
    String output=sdf.format(dv.generateMaskedRow(input));
    boolean result=checkResult(output,""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"" + output,result);
  }
}",0.4610169491525424
136715,"@Test public void testBad(){
  dv.parameters=""String_Node_Str"".split(""String_Node_Str"");
  String output=sdf.format(dv.generateMaskedRow(input));
  assertEquals(output,""String_Node_Str"");
}","@Test public void testBad() throws ParseException {
  dv.parameters=""String_Node_Str"".split(""String_Node_Str"");
  dv.parse(""String_Node_Str"",false,rand);
  for (int index=0; index < 20; index++) {
    String output=sdf.format(dv.generateMaskedRow(input));
    boolean result=checkResult(output,""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"" + output,result);
  }
}",0.4657534246575342
136716,"@Before public void setUp() throws Exception {
  input=sdf.parse(""String_Node_Str"");
  dv.setRandomWrapper(new RandomWrapper(42));
}","@Before public void setUp() throws Exception {
  input=sdf.parse(""String_Node_Str"");
  dv=new DateVariance();
}",0.831275720164609
136717,"@Override public boolean prepare(){
  final TextParameters textParameter=this.getParameters() == null ? null : this.getParameters().getTextParameter();
  if (textParameter != null) {
    hasBeanCustomized=true;
    String replacementCharacters=textParameter.getReplacementCharacters();
    if (!StringUtils.isBlank(replacementCharacters)) {
      this.replacementChars=replacementCharacters;
    }
    String charactersToReplace=textParameter.getCharactersToReplace();
    if (!StringUtils.isBlank(charactersToReplace)) {
      this.charsToReplace=charactersToReplace;
    }
  }
  return super.prepare();
}","@Override public boolean prepare(){
  final TextParameters textParameter=this.getParameters() == null ? null : this.getParameters().getTextParameter();
  if (textParameter != null) {
    String replacementCharacters=textParameter.getReplacementCharacters();
    if (!StringUtils.isBlank(replacementCharacters)) {
      this.replacementChars=replacementCharacters;
      hasBeanCustomized=true;
    }
 else {
      replacementChars=REPLACEMENT_CHARS;
      hasBeanCustomized=false;
    }
    String charactersToReplace=textParameter.getCharactersToReplace();
    if (!StringUtils.isBlank(charactersToReplace)) {
      this.charsToReplace=charactersToReplace;
    }
 else {
      charsToReplace=CHARS_TO_REPLACE;
    }
  }
  return super.prepare();
}",0.8183161004431314
136718,"@Override public boolean prepare(){
  final TextParameters textParameter=this.getParameters() == null ? null : this.getParameters().getTextParameter();
  if (textParameter != null) {
    hasBeanCustomized=true;
    String replacementCharacters=textParameter.getReplacementCharacters();
    if (!StringUtils.isBlank(replacementCharacters)) {
      this.replacementChars=replacementCharacters;
    }
    String charactersToReplace=textParameter.getCharactersToReplace();
    if (!StringUtils.isBlank(charactersToReplace)) {
      this.charsToReplace=charactersToReplace;
    }
  }
  return super.prepare();
}","@Override public boolean prepare(){
  final TextParameters textParameter=this.getParameters() == null ? null : this.getParameters().getTextParameter();
  if (textParameter != null) {
    String replacementCharacters=textParameter.getReplacementCharacters();
    if (!StringUtils.isBlank(replacementCharacters)) {
      this.replacementChars=replacementCharacters;
      hasBeanCustomized=true;
    }
 else {
      replacementChars=""String_Node_Str"";
      hasBeanCustomized=false;
    }
    String charactersToReplace=textParameter.getCharactersToReplace();
    if (!StringUtils.isBlank(charactersToReplace)) {
      this.charsToReplace=charactersToReplace;
    }
 else {
      charsToReplace=""String_Node_Str"";
    }
  }
  return super.prepare();
}",0.8177121771217712
136719,"public Object[] getRecord(){
  Object[] oneRow=new Object[columnSize];
  for (int i=0; i < columnSize; i++) {
    oneRow[i]=csvReader.get(oldFullColumns.indexOf(columnIndexMap.get(i)));
  }
  return oneRow;
}","public Object[] getRecord(){
  Object[] oneRow=new Object[columnSize];
  try {
    for (int i=0; i < columnSize; i++) {
      String headerName=columnIndexMap.get(i);
      oneRow[i]=csvReader.get(headerName);
    }
  }
 catch (  IOException e) {
    log.error(e,e);
  }
  return oneRow;
}",0.5593561368209256
136720,"@Test public void testGetRecord() throws Exception {
  List<String> columnNames=new ArrayList<String>();
  fileDataSource=new FileSamplingDataSource(columnNames);
  DelimitedFileConnection createDelimitedFileConnection=ConnectionFactory.eINSTANCE.createDelimitedFileConnection();
  fileDataSource.setDataSource(createDelimitedFileConnection);
  int idx=0;
  while (fileDataSource.hasNext()) {
    String value=getString(fileDataSource.getRecord());
    System.out.println(value);
    if (0 == idx) {
      assertEquals(""String_Node_Str"",value);
    }
 else     if (1 == idx) {
      assertEquals(""String_Node_Str"",value);
    }
 else     if (5 == idx) {
      assertEquals(""String_Node_Str"",value);
    }
 else     if (9 == idx) {
      assertEquals(""String_Node_Str"",value);
    }
    idx++;
  }
}","@Test public void testGetRecord() throws Exception {
  fileDataSource=new FileSamplingDataSource();
  DelimitedFileConnection createDelimitedFileConnection=ConnectionFactory.eINSTANCE.createDelimitedFileConnection();
  fileDataSource.setDataSource(createDelimitedFileConnection);
  int idx=0;
  while (fileDataSource.hasNext()) {
    String value=getString(fileDataSource.getRecord());
    System.out.println(value);
    if (0 == idx) {
      assertEquals(""String_Node_Str"",value);
    }
 else     if (1 == idx) {
      assertEquals(""String_Node_Str"",value);
    }
 else     if (5 == idx) {
      assertEquals(""String_Node_Str"",value);
    }
 else     if (9 == idx) {
      assertEquals(""String_Node_Str"",value);
    }
    idx++;
  }
}",0.958904109589041
136721,"@SuppressWarnings(""String_Node_Str"") @Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
    tdqRepositoryService.addSoftwareSystemUpdateListener();
  }
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  PreferenceManager preferenceManager=workbenchWindowConfigurer.getWindow().getWorkbench().getPreferenceManager();
  preferenceManager.remove(""String_Node_Str"" + WorkbenchPlugin.PREFERENCE_PAGE_CATEGORY_SEPARATOR + ""String_Node_Str"");
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  ICoolBarManager coolBarManager=actionBarConfigurer.getCoolBarManager();
  IContributionItem toolBarItem=coolBarManager.find(""String_Node_Str"");
  if (toolBarItem != null) {
    coolBarManager.remove(toolBarItem);
  }
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
    if (!(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  PreferenceManager preferenceManager=workbenchWindowConfigurer.getWindow().getWorkbench().getPreferenceManager();
  preferenceManager.remove(""String_Node_Str"" + WorkbenchPlugin.PREFERENCE_PAGE_CATEGORY_SEPARATOR + ""String_Node_Str"");
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  ICoolBarManager coolBarManager=actionBarConfigurer.getCoolBarManager();
  IContributionItem toolBarItem=coolBarManager.find(""String_Node_Str"");
  if (toolBarItem != null) {
    coolBarManager.remove(toolBarItem);
  }
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
    tdqRepositoryService.addSoftwareSystemUpdateListener();
  }
}",0.7031158142269254
136722,"@Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
    tdqRepositoryService.addSoftwareSystemUpdateListener();
  }
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  PreferenceManager preferenceManager=workbenchWindowConfigurer.getWindow().getWorkbench().getPreferenceManager();
  preferenceManager.remove(""String_Node_Str"" + WorkbenchPlugin.PREFERENCE_PAGE_CATEGORY_SEPARATOR + ""String_Node_Str"");
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  ICoolBarManager coolBarManager=actionBarConfigurer.getCoolBarManager();
  IContributionItem toolBarItem=coolBarManager.find(""String_Node_Str"");
  if (toolBarItem != null) {
    coolBarManager.remove(toolBarItem);
  }
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null) {
    if (CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
    tdqRepositoryService.addSoftwareSystemUpdateListener();
  }
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  PreferenceManager preferenceManager=workbenchWindowConfigurer.getWindow().getWorkbench().getPreferenceManager();
  preferenceManager.remove(""String_Node_Str"" + WorkbenchPlugin.PREFERENCE_PAGE_CATEGORY_SEPARATOR + ""String_Node_Str"");
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  ICoolBarManager coolBarManager=actionBarConfigurer.getCoolBarManager();
  IContributionItem toolBarItem=coolBarManager.find(""String_Node_Str"");
  if (toolBarItem != null) {
    coolBarManager.remove(toolBarItem);
  }
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
    if (!(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}",0.959655728886498
136723,"@Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
    tdqRepositoryService.addSoftwareSystemUpdateListener();
  }
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  PreferenceManager preferenceManager=workbenchWindowConfigurer.getWindow().getWorkbench().getPreferenceManager();
  preferenceManager.remove(""String_Node_Str"" + WorkbenchPlugin.PREFERENCE_PAGE_CATEGORY_SEPARATOR + ""String_Node_Str"");
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  ICoolBarManager coolBarManager=actionBarConfigurer.getCoolBarManager();
  IContributionItem toolBarItem=coolBarManager.find(""String_Node_Str"");
  if (toolBarItem != null) {
    coolBarManager.remove(toolBarItem);
  }
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null) {
    if (CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
    tdqRepositoryService.addSoftwareSystemUpdateListener();
  }
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  PreferenceManager preferenceManager=workbenchWindowConfigurer.getWindow().getWorkbench().getPreferenceManager();
  preferenceManager.remove(""String_Node_Str"" + WorkbenchPlugin.PREFERENCE_PAGE_CATEGORY_SEPARATOR + ""String_Node_Str"");
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  ICoolBarManager coolBarManager=actionBarConfigurer.getCoolBarManager();
  IContributionItem toolBarItem=coolBarManager.find(""String_Node_Str"");
  if (toolBarItem != null) {
    coolBarManager.remove(toolBarItem);
  }
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
    if (!(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}",0.959655728886498
136724,"public String getNameTextValue(){
  return nameText.getText();
}","public String getNameTextValue(){
  return nameText != null ? nameText.getText() : ""String_Node_Str"";
}",0.7664670658682635
136725,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  AnalysisType analysisType=this.analysis.getParameters().getAnalysisType();
  boolean isHive=dbmsLanguage instanceof HiveDbmsLanguage;
switch (this.indicatorEnum) {
case RowCountIndicatorEnum:
    if (isSqlEngine) {
      map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getRowsStatement());
    }
  break;
case NullCountIndicatorEnum:
case BlankCountIndicatorEnum:
case DefValueCountIndicatorEnum:
case UserDefinedIndicatorEnum:
IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + (indicatorDefinition instanceof UDIndicatorDefinition ? getQueryForViewRows(indicatorDefinition) : getRowsStatement()) : null);
break;
case UniqueIndicatorEnum:
if (analysisType != AnalysisType.COLUMN_SET) {
if (!isHive) {
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getRowsStatementWithSubQuery() : null);
}
 else if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getValuesStatement(this.columnName) : null);
break;
case DistinctCountIndicatorEnum:
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getDistinctValuesStatement(this.columnName) : null);
break;
case DuplicateCountIndicatorEnum:
if (analysisType != AnalysisType.COLUMN_SET) {
if (!isHive) {
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getRowsStatementWithSubQuery() : null);
}
 else if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getValuesStatement(this.columnName) : null);
break;
default :
}
return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  AnalysisType analysisType=this.analysis.getParameters().getAnalysisType();
  boolean isHive=dbmsLanguage instanceof HiveDbmsLanguage;
switch (this.indicatorEnum) {
case RowCountIndicatorEnum:
    if (isSqlEngine) {
      map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getRowsStatement());
    }
  break;
case NullCountIndicatorEnum:
case BlankCountIndicatorEnum:
case DefValueCountIndicatorEnum:
case UserDefinedIndicatorEnum:
IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + (indicatorDefinition instanceof UDIndicatorDefinition ? getQueryForViewRows(indicatorDefinition) : getRowsStatement()) : null);
break;
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
if (analysisType != AnalysisType.COLUMN_SET) {
if (!isHive) {
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getRowsStatementWithSubQuery() : null);
}
 else if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getValuesStatement(this.columnName) : null);
break;
case DistinctCountIndicatorEnum:
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getDistinctValuesStatement(this.columnName) : null);
break;
default :
}
return map;
}",0.8642266824085005
136726,"@Override public void addMouseListenerForChart(Object chartComposite,final Map<String,Object> menuMap,final boolean useRowFirst){
  final ChartComposite chartComp=(ChartComposite)chartComposite;
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @Override public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        Menu menu=getCurrentMenu(cateEntity);
        chartComp.setMenu(menu);
        menu.setVisible(true);
      }
    }
    private Menu getCurrentMenu(    CategoryItemEntity cateEntity){
      if (useRowFirst) {
        return findCurrentMenu(cateEntity.getRowKey(),cateEntity.getColumnKey());
      }
 else {
        return findCurrentMenu(cateEntity.getColumnKey(),cateEntity.getRowKey());
      }
    }
    /** 
 * DOC yyin Comment method ""findCurrentMenu"".
 * @param firstKey
 * @param secondKey
 * @return
 */
    private Menu findCurrentMenu(    final Object firstKey,    Object secondKey){
      Object menu=menuMap.get(firstKey);
      if (menu != null) {
        return (Menu)menu;
      }
      menu=menuMap.get(secondKey);
      if (menu != null) {
        return (Menu)menu;
      }
      return null;
    }
    @Override public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}","@Override public void addMouseListenerForChart(Object chartComposite,final Map<String,Object> menuMap,final boolean useRowFirst){
  final ChartComposite chartComp=(ChartComposite)chartComposite;
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @Override public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        Menu menu=getCurrentMenu(cateEntity);
        if (menu != null) {
          chartComp.setMenu(menu);
          menu.setVisible(true);
        }
      }
    }
    private Menu getCurrentMenu(    CategoryItemEntity cateEntity){
      if (useRowFirst) {
        return findCurrentMenu(cateEntity.getRowKey(),cateEntity.getColumnKey());
      }
 else {
        return findCurrentMenu(cateEntity.getColumnKey(),cateEntity.getRowKey());
      }
    }
    /** 
 * DOC yyin Comment method ""findCurrentMenu"".
 * @param firstKey
 * @param secondKey
 * @return
 */
    private Menu findCurrentMenu(    final Object firstKey,    Object secondKey){
      Object menu=menuMap.get(firstKey);
      if (menu != null) {
        return (Menu)menu;
      }
      menu=menuMap.get(secondKey);
      if (menu != null) {
        return (Menu)menu;
      }
      return null;
    }
    @Override public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}",0.9883785279468732
136727,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  AnalysisType analysisType=this.analysis.getParameters().getAnalysisType();
  boolean isHive=dbmsLanguage instanceof HiveDbmsLanguage;
switch (this.indicatorEnum) {
case RowCountIndicatorEnum:
    if (isSqlEngine) {
      map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getRowsStatement());
    }
  break;
case NullCountIndicatorEnum:
case BlankCountIndicatorEnum:
case DefValueCountIndicatorEnum:
case UserDefinedIndicatorEnum:
IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + (indicatorDefinition instanceof UDIndicatorDefinition ? getQueryForViewRows(indicatorDefinition) : getRowsStatement()) : null);
break;
case UniqueIndicatorEnum:
if (analysisType != AnalysisType.COLUMN_SET) {
if (!isHive) {
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getRowsStatementWithSubQuery() : null);
}
 else if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getValuesStatement(this.columnName) : null);
break;
case DistinctCountIndicatorEnum:
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getDistinctValuesStatement(this.columnName) : null);
break;
case DuplicateCountIndicatorEnum:
if (analysisType != AnalysisType.COLUMN_SET) {
if (!isHive) {
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getRowsStatementWithSubQuery() : null);
}
 else if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getValuesStatement(this.columnName) : null);
break;
default :
}
return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  AnalysisType analysisType=this.analysis.getParameters().getAnalysisType();
  boolean isHive=dbmsLanguage instanceof HiveDbmsLanguage;
switch (this.indicatorEnum) {
case RowCountIndicatorEnum:
    if (isSqlEngine) {
      map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getRowsStatement());
    }
  break;
case NullCountIndicatorEnum:
case BlankCountIndicatorEnum:
case DefValueCountIndicatorEnum:
case UserDefinedIndicatorEnum:
IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + (indicatorDefinition instanceof UDIndicatorDefinition ? getQueryForViewRows(indicatorDefinition) : getRowsStatement()) : null);
break;
case UniqueIndicatorEnum:
case DuplicateCountIndicatorEnum:
if (analysisType != AnalysisType.COLUMN_SET) {
if (!isHive) {
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getRowsStatementWithSubQuery() : null);
}
 else if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getValuesStatement(this.columnName) : null);
break;
case DistinctCountIndicatorEnum:
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getDistinctValuesStatement(this.columnName) : null);
break;
default :
}
return map;
}",0.8642266824085005
136728,"@Override public void addMouseListenerForChart(Object chartComposite,final Map<String,Object> menuMap,final boolean useRowFirst){
  final ChartComposite chartComp=(ChartComposite)chartComposite;
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @Override public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        Menu menu=getCurrentMenu(cateEntity);
        chartComp.setMenu(menu);
        menu.setVisible(true);
      }
    }
    private Menu getCurrentMenu(    CategoryItemEntity cateEntity){
      if (useRowFirst) {
        return findCurrentMenu(cateEntity.getRowKey(),cateEntity.getColumnKey());
      }
 else {
        return findCurrentMenu(cateEntity.getColumnKey(),cateEntity.getRowKey());
      }
    }
    /** 
 * DOC yyin Comment method ""findCurrentMenu"".
 * @param firstKey
 * @param secondKey
 * @return
 */
    private Menu findCurrentMenu(    final Object firstKey,    Object secondKey){
      Object menu=menuMap.get(firstKey);
      if (menu != null) {
        return (Menu)menu;
      }
      menu=menuMap.get(secondKey);
      if (menu != null) {
        return (Menu)menu;
      }
      return null;
    }
    @Override public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}","@Override public void addMouseListenerForChart(Object chartComposite,final Map<String,Object> menuMap,final boolean useRowFirst){
  final ChartComposite chartComp=(ChartComposite)chartComposite;
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @Override public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        Menu menu=getCurrentMenu(cateEntity);
        if (menu != null) {
          chartComp.setMenu(menu);
          menu.setVisible(true);
        }
      }
    }
    private Menu getCurrentMenu(    CategoryItemEntity cateEntity){
      if (useRowFirst) {
        return findCurrentMenu(cateEntity.getRowKey(),cateEntity.getColumnKey());
      }
 else {
        return findCurrentMenu(cateEntity.getColumnKey(),cateEntity.getRowKey());
      }
    }
    /** 
 * DOC yyin Comment method ""findCurrentMenu"".
 * @param firstKey
 * @param secondKey
 * @return
 */
    private Menu findCurrentMenu(    final Object firstKey,    Object secondKey){
      Object menu=menuMap.get(firstKey);
      if (menu != null) {
        return (Menu)menu;
      }
      menu=menuMap.get(secondKey);
      if (menu != null) {
        return (Menu)menu;
      }
      return null;
    }
    @Override public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}",0.9883785279468732
136729,"/** 
 * Creates a single analyzer with provided   {@link Analyzer<?> analyzers}.
 * @param analyzers The analyzers to be combined together.
 * @return A single analyzer that ensure all underlying analyzers get called.
 */
public static Analyzer<Analyzers.Result> with(Analyzer<?>... analyzers){
  return new Analyzers(analyzers);
}","/** 
 * Creates a single analyzer with provided   {@link Analyzer analyzers}.
 * @param analyzers The analyzers to be combined together.
 * @return A single analyzer that ensure all underlying analyzers get called.
 */
public static Analyzer<Analyzers.Result> with(Analyzer<?>... analyzers){
  return new Analyzers(analyzers);
}",0.9954476479514416
136730,"@Override public void close() throws Exception {
}","@Override public void close() throws Exception {
  for (  Analyzer<?> analyzer : analyzers) {
    try {
      analyzer.close();
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"" + analyzer,e);
    }
  }
}",0.3576642335766423
136731,"@Override public void init(){
  Analyzer<T> analyzer=get();
  analyzer.init();
  returnObject(analyzer);
}","@Override public void init(){
  Analyzer<T> analyzer=pool.get();
  analyzer.init();
}",0.837696335078534
136732,"@Override public boolean analyze(String... record){
  Analyzer<T> analyzer=get();
  boolean result=analyzer.analyze(record);
  returnObject(analyzer);
  return result;
}","@Override public boolean analyze(String... record){
  Analyzer<T> analyzer=pool.get();
  return analyzer.analyze(record);
}",0.7808219178082192
136733,"@Override public List<T> getResult(){
  Analyzer<T> analyzer=get();
  List<T> result=analyzer.getResult();
  returnObject(analyzer);
  return result;
}","@Override public List<T> getResult(){
  Analyzer<T> analyzer=pool.get();
  return analyzer.getResult();
}",0.75
136734,"@Override public Analyzer<T> merge(Analyzer<T> another){
  Analyzer<T> analyzer=get();
  Analyzer<T> result=analyzer.merge(another);
  returnObject(analyzer);
  return result;
}","@Override public Analyzer<T> merge(Analyzer<T> another){
  Analyzer<T> analyzer=pool.get();
  return analyzer.merge(another);
}",0.7763157894736842
136735,"private ConcurrentAnalyzer(int maxSize,AnalyzerSupplier<Analyzer<T>> supplier){
  GenericKeyedObjectPool.Config config=new GenericKeyedObjectPool.Config();
  config.maxTotal=maxSize;
  config.maxActive=maxSize;
  config.maxIdle=maxSize;
  config.maxWait=3000;
  this.pool=new GenericKeyedObjectPool<>(new Factory<>(supplier),config);
}","private ConcurrentAnalyzer(int maxSize,AnalyzerSupplier<Analyzer<T>> supplier){
  GenericKeyedObjectPool.Config config=new GenericKeyedObjectPool.Config();
  config.maxTotal=maxSize;
  config.maxActive=maxSize;
  config.maxIdle=maxSize / 2;
  config.minIdle=maxSize / 2;
  config.maxWait=-1;
  final KeyedObjectPool<Thread,Analyzer<T>> pool=new GenericKeyedObjectPool<>(new Factory<>(supplier),config);
  this.pool=new ThreadLocal<Analyzer<T>>(){
    @Override protected Analyzer<T> initialValue(){
      try {
        return pool.borrowObject(Thread.currentThread());
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void remove(){
      try {
        pool.returnObject(Thread.currentThread(),get());
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
 finally {
        super.remove();
      }
    }
  }
;
}",0.4810330912025827
136736,"@Override public void end(){
  Analyzer<T> analyzer=get();
  analyzer.end();
  returnObject(analyzer);
}","@Override public void end(){
  Analyzer<T> analyzer=pool.get();
  analyzer.end();
}",0.8342245989304813
136737,"@Override public void close() throws Exception {
  try {
    pool.clear(Thread.currentThread());
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public void close() throws Exception {
  pool.remove();
}",0.5099601593625498
136738,"@Test public void testGood(){
  output=gffhi.generateMaskedRow(null).toString();
  assertEquals(output,""String_Node_Str"");
}","@Test public void testGood(){
  assertEquals(9,gffhi.generateMaskedRow(null).intValue());
}",0.6604651162790698
136739,"@Test public void testNull(){
  gffhi.keepNull=true;
  output=gffhi.generateMaskedRow(0).toString();
  assertEquals(output,""String_Node_Str"");
}","@Test public void testNull(){
  gffhi.keepNull=true;
  assertEquals(1,gffhi.generateMaskedRow(0).intValue());
  assertEquals(null,gffhi.generateMaskedRow(null));
}",0.7166123778501629
136740,"@Test public void testGood(){
  output=gffhl.generateMaskedRow(null).toString();
  assertEquals(output,""String_Node_Str"");
}","@Test public void testGood(){
  assertEquals(18,gffhl.generateMaskedRow(101L).longValue());
  assertEquals(9,gffhl.generateMaskedRow(null).longValue());
}",0.539568345323741
136741,"@Test public void testBad(){
  gffhl.keepNull=true;
  output=gffhl.generateMaskedRow(0L).toString();
  assertEquals(output,""String_Node_Str"");
}","@Test public void testBad(){
  gffhl.keepNull=true;
  assertEquals(null,gffhl.generateMaskedRow(null));
}",0.6827309236947792
136742,"@Test public void testGood(){
  output=gffhs.generateMaskedRow(null);
  assertEquals(output,""String_Node_Str"");
}","@Test public void testGood(){
  output=gffhs.generateMaskedRow(null);
  assertEquals(""String_Node_Str"",output);
}",0.9380530973451328
136743,"@Test public void testNull(){
  gffhs.keepNull=true;
  output=gffhs.generateMaskedRow(null);
  assertEquals(output,null);
}","@Test public void testNull(){
  gffhs.keepNull=true;
  output=gffhs.generateMaskedRow(null);
  assertEquals(null,output);
}",0.959349593495935
136744,"@Test public void testGood(){
  gffi.parse(path,false,new RandomWrapper(42));
  output=gffi.generateMaskedRow(0).toString();
  assertEquals(output,""String_Node_Str"");
}","@Test public void testGood(){
  gffi.parse(path,false,new RandomWrapper(42));
  assertEquals(9,gffi.generateMaskedRow(0).intValue());
}",0.759075907590759
136745,"@Test public void testNull(){
  gffi.parse(gffi.EMPTY_STRING,false,new RandomWrapper(42));
  output=gffi.generateMaskedRow(0).toString();
  assertEquals(output,""String_Node_Str"");
}","@Test public void testNull(){
  gffi.parse(gffi.EMPTY_STRING,false,new RandomWrapper(42));
  gffi.setKeepNull(true);
  assertEquals(0,gffi.generateMaskedRow(0).intValue());
  assertEquals(null,gffi.generateMaskedRow(null));
}",0.5665024630541872
136746,"@Test public void testGood(){
  gffl.parse(path,false,new RandomWrapper(42));
  output=gffl.generateMaskedRow(0L).toString();
  assertEquals(output,""String_Node_Str"");
}","@Test public void testGood(){
  gffl.parse(path,false,new RandomWrapper(42));
  assertEquals(9,gffl.generateMaskedRow(0L).longValue());
}",0.7647058823529411
136747,"@Test public void testNull(){
  gffl.parse(gffl.EMPTY_STRING,false,new RandomWrapper(42));
  output=gffl.generateMaskedRow(0L).toString();
  assertEquals(output,""String_Node_Str"");
}","@Test public void testNull(){
  gffl.parse(gffl.EMPTY_STRING,false,new RandomWrapper(42));
  gffl.setKeepNull(true);
  assertEquals(0,gffl.generateMaskedRow(0L).longValue());
  assertEquals(null,gffl.generateMaskedRow(null));
}",0.6943765281173594
136748,"@Test public void testGood(){
  output=gffs.generateMaskedRow(null);
  assertEquals(output,""String_Node_Str"");
}","@Test public void testGood(){
  output=gffs.generateMaskedRow(null);
  assertEquals(""String_Node_Str"",output);
}",0.9375
136749,"@Test public void testNull(){
  gffs.keepNull=true;
  output=gffs.generateMaskedRow(null);
  assertEquals(output,null);
}","@Test public void testNull(){
  gffs.keepNull=true;
  output=gffs.generateMaskedRow(null);
  assertEquals(null,output);
}",0.9586776859504132
136750,"public void selectionChanged(SelectionChangedEvent event){
  try {
    Object object=((IStructuredSelection)event.getSelection()).getFirstElement();
    nodes=new ArrayList<IRepositoryNode>();
    if (object instanceof IRepositoryNode) {
      List<IRepositoryNode> list=((IStructuredSelection)event.getSelection()).toList();
      nodes.addAll(list);
      updateCompleteState();
    }
 else {
      setPageComplete(false);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","public void selectionChanged(SelectionChangedEvent event){
  try {
    Object object=((IStructuredSelection)event.getSelection()).getFirstElement();
    nodes=new ArrayList<IRepositoryNode>();
    if (object instanceof IRepositoryNode) {
      List<IRepositoryNode> list=((IStructuredSelection)event.getSelection()).toList();
      nodes.addAll(list);
      updateCompleteState();
      notifyObservers();
    }
 else {
      setPageComplete(false);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.9748743718592964
136751,"@Override protected void addListeners(){
  addListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      Object object=((IStructuredSelection)event.getSelection()).getFirstElement();
      if (object instanceof DBCatalogRepNode) {
        advanceToNextPageOrFinish();
      }
    }
  }
);
  addListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      try {
        Object object=((IStructuredSelection)event.getSelection()).getFirstElement();
        nodes=new ArrayList<IRepositoryNode>();
        if (object instanceof IRepositoryNode) {
          List<IRepositoryNode> list=((IStructuredSelection)event.getSelection()).toList();
          nodes.addAll(list);
          updateCompleteState();
        }
 else {
          setPageComplete(false);
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
);
}","@Override protected void addListeners(){
  addListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      Object object=((IStructuredSelection)event.getSelection()).getFirstElement();
      if (object instanceof DBCatalogRepNode) {
        advanceToNextPageOrFinish();
      }
    }
  }
);
  addListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      try {
        Object object=((IStructuredSelection)event.getSelection()).getFirstElement();
        nodes=new ArrayList<IRepositoryNode>();
        if (object instanceof IRepositoryNode) {
          List<IRepositoryNode> list=((IStructuredSelection)event.getSelection()).toList();
          nodes.addAll(list);
          updateCompleteState();
          notifyObservers();
        }
 else {
          setPageComplete(false);
        }
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
);
}",0.984792868379654
136752,"@Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
    tdqRepositoryService.addSoftwareSystemUpdateListener();
  }
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  PreferenceManager preferenceManager=workbenchWindowConfigurer.getWindow().getWorkbench().getPreferenceManager();
  preferenceManager.remove(""String_Node_Str"" + WorkbenchPlugin.PREFERENCE_PAGE_CATEGORY_SEPARATOR + ""String_Node_Str"");
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  ICoolBarManager coolBarManager=actionBarConfigurer.getCoolBarManager();
  IContributionItem toolBarItem=coolBarManager.find(""String_Node_Str"");
  if (toolBarItem != null) {
    coolBarManager.remove(toolBarItem);
  }
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null) {
    if (CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet();
    }
  }
}","@Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
    tdqRepositoryService.addSoftwareSystemUpdateListener();
  }
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  PreferenceManager preferenceManager=workbenchWindowConfigurer.getWindow().getWorkbench().getPreferenceManager();
  preferenceManager.remove(""String_Node_Str"" + WorkbenchPlugin.PREFERENCE_PAGE_CATEGORY_SEPARATOR + ""String_Node_Str"");
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  ICoolBarManager coolBarManager=actionBarConfigurer.getCoolBarManager();
  IContributionItem toolBarItem=coolBarManager.find(""String_Node_Str"");
  if (toolBarItem != null) {
    coolBarManager.remove(toolBarItem);
  }
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null) {
    if (CheatSheetUtils.getInstance().isFirstTime() && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID)) {
      CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet(""String_Node_Str"");
    }
  }
}",0.9952447552447552
136753,"/** 
 * DOC xqliu Comment method ""buildGroupSizeArray"".
 * @param groupSize2groupFrequency
 * @param minGroupSize
 */
private void initGroupSizeArray(TreeMap<Object,Long> groupSize2groupFrequency,int minGroupSize){
  groupSizeList.clear();
  for (  Object obj : groupSize2groupFrequency.keySet()) {
    int grpSize=Integer.valueOf(obj.toString());
    if (grpSize >= minGroupSize) {
      groupSizeList.add(grpSize);
    }
  }
  groupSizeList.sort(new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return o1 - o2;
    }
  }
);
}","/** 
 * DOC xqliu Comment method ""buildGroupSizeArray"".
 * @param groupSize2groupFrequency
 * @param minGroupSize
 */
private void initGroupSizeArray(TreeMap<Object,Long> groupSize2groupFrequency,int minGroupSize){
  groupSizeList.clear();
  for (  Object obj : groupSize2groupFrequency.keySet()) {
    int grpSize=Integer.valueOf(obj.toString());
    if (grpSize >= minGroupSize) {
      groupSizeList.add(grpSize);
    }
  }
  Collections.sort(groupSizeList,new Comparator<Integer>(){
    @Override public int compare(    Integer o1,    Integer o2){
      return o1 - o2;
    }
  }
);
}",0.979381443298969
136754,"@Override protected void notifyhandleColumnHighlight(MouseEvent e){
  if (observers == null) {
    return;
  }
  for (  TDQObserver<ObserverEvent> observer : observers) {
    ObserverEvent observerEvent=new ObserverEvent(ObserverEventEnum.ColumnHighlight);
    GridColumn currentColumn=this.getColumn(new Point(e.x,e.y));
    observerEvent.putData(ObserverEvent.COLUMN_HIGH_LIGHT,this.indexOf(currentColumn));
    observer.update(observerEvent);
  }
}","@Override protected void notifyhandleColumnHighlight(MouseEvent e){
  if (observers == null) {
    return;
  }
  for (  TDQObserver<ObserverEvent> observer : observers) {
    ObserverEvent observerEvent=new ObserverEvent(ObserverEventEnum.ColumnHighlight);
    GridColumn currentColumn=this.getColumn(new Point(e.x,e.y));
    if (currentColumn != null) {
      observerEvent.putData(ObserverEvent.COLUMN_HIGH_LIGHT,this.indexOf(currentColumn));
      observer.update(observerEvent);
    }
  }
}",0.9544973544973544
136755,"@Override protected void notifyhandleColumnHighlight(MouseEvent e){
  if (observers == null) {
    return;
  }
  for (  TDQObserver<ObserverEvent> observer : observers) {
    ObserverEvent observerEvent=new ObserverEvent(ObserverEventEnum.ColumnHighlight);
    GridColumn currentColumn=this.getColumn(new Point(e.x,e.y));
    observerEvent.putData(ObserverEvent.COLUMN_HIGH_LIGHT,this.indexOf(currentColumn));
    observer.update(observerEvent);
  }
}","@Override protected void notifyhandleColumnHighlight(MouseEvent e){
  if (observers == null) {
    return;
  }
  for (  TDQObserver<ObserverEvent> observer : observers) {
    ObserverEvent observerEvent=new ObserverEvent(ObserverEventEnum.ColumnHighlight);
    GridColumn currentColumn=this.getColumn(new Point(e.x,e.y));
    if (currentColumn != null) {
      observerEvent.putData(ObserverEvent.COLUMN_HIGH_LIGHT,this.indexOf(currentColumn));
      observer.update(observerEvent);
    }
  }
}",0.9544973544973544
136756,"@Override protected void notifyhandleColumnHighlight(MouseEvent e){
  if (observers == null) {
    return;
  }
  for (  TDQObserver<ObserverEvent> observer : observers) {
    ObserverEvent observerEvent=new ObserverEvent(ObserverEventEnum.ColumnHighlight);
    GridColumn currentColumn=this.getColumn(new Point(e.x,e.y));
    observerEvent.putData(ObserverEvent.COLUMN_HIGH_LIGHT,this.indexOf(currentColumn));
    observer.update(observerEvent);
  }
}","@Override protected void notifyhandleColumnHighlight(MouseEvent e){
  if (observers == null) {
    return;
  }
  for (  TDQObserver<ObserverEvent> observer : observers) {
    ObserverEvent observerEvent=new ObserverEvent(ObserverEventEnum.ColumnHighlight);
    GridColumn currentColumn=this.getColumn(new Point(e.x,e.y));
    if (currentColumn != null) {
      observerEvent.putData(ObserverEvent.COLUMN_HIGH_LIGHT,this.indexOf(currentColumn));
      observer.update(observerEvent);
    }
  }
}",0.9544973544973544
136757,"@Override protected void notifyhandleColumnHighlight(MouseEvent e){
  if (observers == null) {
    return;
  }
  for (  TDQObserver<ObserverEvent> observer : observers) {
    ObserverEvent observerEvent=new ObserverEvent(ObserverEventEnum.ColumnHighlight);
    GridColumn currentColumn=this.getColumn(new Point(e.x,e.y));
    observerEvent.putData(ObserverEvent.COLUMN_HIGH_LIGHT,this.indexOf(currentColumn));
    observer.update(observerEvent);
  }
}","@Override protected void notifyhandleColumnHighlight(MouseEvent e){
  if (observers == null) {
    return;
  }
  for (  TDQObserver<ObserverEvent> observer : observers) {
    ObserverEvent observerEvent=new ObserverEvent(ObserverEventEnum.ColumnHighlight);
    GridColumn currentColumn=this.getColumn(new Point(e.x,e.y));
    if (currentColumn != null) {
      observerEvent.putData(ObserverEvent.COLUMN_HIGH_LIGHT,this.indexOf(currentColumn));
      observer.update(observerEvent);
    }
  }
}",0.9544973544973544
136758,"/** 
 * Detect if the given value is a date type. <br> Date regex used to match: http://regexlib.com/REDetails.aspx?regexp_id=361 ,and regex matching yyy-MM-dd HH:mm:ss.SSS
 * @param value the value to be detected.
 * @return true if the value is a date type, false otherwise.
 */
public static boolean isDate(String value){
  if (value != null) {
    try {
      new DateTime(value);
      return true;
    }
 catch (    Exception e) {
      return false;
    }
  }
 else {
    return false;
  }
}","/** 
 * Detect if the given value is a date type. <br> Date regex used to match: http://regexlib.com/REDetails.aspx?regexp_id=361 ,and regex matching yyy-MM-dd HH:mm:ss.SSS
 * @param value the value to be detected.
 * @return true if the value is a date type, false otherwise.
 */
public static boolean isDate(String value){
  if (value != null) {
    try {
      if (patternDateA.matcher(value).find() || patternDateB.matcher(value).find()) {
        return true;
      }
      new DateTime(value);
      return true;
    }
 catch (    Exception e) {
      return false;
    }
  }
 else {
    return false;
  }
}",0.8964896489648965
136759,"@Test public void testHandle(){
  InputStream in=null;
  try {
    in=new FileInputStream(new File(""String_Node_Str""));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  BufferedReader inBuffReader=new BufferedReader(new InputStreamReader(in));
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String line=null;
  try {
    start=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + start);
    boolean isFirstLine=true;
    while ((line=inBuffReader.readLine()) != null) {
      String[] record=StringUtils.splitByWholeSeparatorPreserveAllTokens(line,""String_Node_Str"");
      if (isFirstLine) {
        isFirstLine=false;
        semanticInferExecutor.init(record);
      }
      semanticInferExecutor.handle(record);
    }
    end=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + end);
    double timeDiff=TypeInferenceUtilsTest.getTimeDifference(start,end);
    printline(""String_Node_Str"" + timeDiff);
    Assert.assertTrue(timeDiff < 6);
    List<ColumnTypeBean> semanticTypeList=semanticInferExecutor.getResults();
    for (    ColumnTypeBean bean : semanticTypeList) {
      if (bean.getColumnIdx() == 1) {
        Map<String,Long> semanticTypeToCount=bean.getSemanticNameToCountMap();
        Iterator<String> semanticTypes=semanticTypeToCount.keySet().iterator();
        while (semanticTypes.hasNext()) {
          String semanticName=semanticTypes.next();
          if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(2l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(3l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(1l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(1l,semanticTypeToCount.get(semanticName),0l);
          }
        }
      }
 else       if (bean.getColumnIdx() == 10) {
        Assert.assertEquals(""String_Node_Str"",bean.getSemanticNameToCountMap().keySet().toArray()[0].toString());
        Assert.assertEquals(1000,bean.getSemanticTypeCount(""String_Node_Str""),0);
      }
    }
    try {
      in=new FileInputStream(new File(""String_Node_Str""));
    }
 catch (    FileNotFoundException e1) {
      e1.printStackTrace();
    }
    inBuffReader=new BufferedReader(new InputStreamReader(in));
    start=""String_Node_Str"";
    end=""String_Node_Str"";
    line=null;
    start=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + start);
    isFirstLine=true;
    while ((line=inBuffReader.readLine()) != null) {
      String[] record=StringUtils.splitByWholeSeparatorPreserveAllTokens(line,""String_Node_Str"");
      if (isFirstLine) {
        isFirstLine=false;
        semanticInferExecutor.init(record);
      }
      semanticInferExecutor.handle(record);
    }
    end=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + end);
    timeDiff=TypeInferenceUtilsTest.getTimeDifference(start,end);
    printline(""String_Node_Str"" + timeDiff);
    Assert.assertTrue(timeDiff < 8);
    semanticTypeList=semanticInferExecutor.getResults();
    for (    ColumnTypeBean bean : semanticTypeList) {
      if (bean.getColumnIdx() == 1) {
        Map<String,Long> semanticTypeToCount=bean.getSemanticNameToCountMap();
        Iterator<String> semanticTypes=semanticTypeToCount.keySet().iterator();
        while (semanticTypes.hasNext()) {
          String semanticName=semanticTypes.next();
          if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(20l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(30l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(10l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(10l,semanticTypeToCount.get(semanticName),0l);
          }
        }
      }
 else       if (bean.getColumnIdx() == 10) {
        Assert.assertEquals(""String_Node_Str"",bean.getSemanticNameToCountMap().keySet().toArray()[0].toString());
        Assert.assertEquals(10000,bean.getSemanticTypeCount(""String_Node_Str""),0);
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Test public void testHandle(){
  InputStream in=this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  BufferedReader inBuffReader=new BufferedReader(new InputStreamReader(in));
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String line=null;
  try {
    start=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + start);
    boolean isFirstLine=true;
    while ((line=inBuffReader.readLine()) != null) {
      String[] record=StringUtils.splitByWholeSeparatorPreserveAllTokens(line,""String_Node_Str"");
      if (isFirstLine) {
        isFirstLine=false;
        semanticInferExecutor.init(record);
      }
      semanticInferExecutor.handle(record);
    }
    end=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + end);
    double timeDiff=TypeInferenceUtilsTest.getTimeDifference(start,end);
    printline(""String_Node_Str"" + timeDiff);
    Assert.assertTrue(timeDiff < 7);
    List<ColumnTypeBean> semanticTypeList=semanticInferExecutor.getResults();
    for (    ColumnTypeBean bean : semanticTypeList) {
      if (bean.getColumnIdx() == 1) {
        Map<String,Long> semanticTypeToCount=bean.getSemanticNameToCountMap();
        Iterator<String> semanticTypes=semanticTypeToCount.keySet().iterator();
        while (semanticTypes.hasNext()) {
          String semanticName=semanticTypes.next();
          if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(2l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(3l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(1l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(1l,semanticTypeToCount.get(semanticName),0l);
          }
        }
      }
 else       if (bean.getColumnIdx() == 10) {
        Assert.assertEquals(""String_Node_Str"",bean.getSemanticNameToCountMap().keySet().toArray()[0].toString());
        Assert.assertEquals(1000,bean.getSemanticTypeCount(""String_Node_Str""),0);
      }
    }
    in=this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
    inBuffReader=new BufferedReader(new InputStreamReader(in));
    start=""String_Node_Str"";
    end=""String_Node_Str"";
    line=null;
    start=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + start);
    isFirstLine=true;
    while ((line=inBuffReader.readLine()) != null) {
      String[] record=StringUtils.splitByWholeSeparatorPreserveAllTokens(line,""String_Node_Str"");
      if (isFirstLine) {
        isFirstLine=false;
        semanticInferExecutor.init(record);
      }
      semanticInferExecutor.handle(record);
    }
    end=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + end);
    timeDiff=TypeInferenceUtilsTest.getTimeDifference(start,end);
    printline(""String_Node_Str"" + timeDiff);
    Assert.assertTrue(timeDiff < 9);
    semanticTypeList=semanticInferExecutor.getResults();
    for (    ColumnTypeBean bean : semanticTypeList) {
      if (bean.getColumnIdx() == 1) {
        Map<String,Long> semanticTypeToCount=bean.getSemanticNameToCountMap();
        Iterator<String> semanticTypes=semanticTypeToCount.keySet().iterator();
        while (semanticTypes.hasNext()) {
          String semanticName=semanticTypes.next();
          if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(20l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(30l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(10l,semanticTypeToCount.get(semanticName),0l);
          }
 else           if (""String_Node_Str"".equalsIgnoreCase(semanticName)) {
            Assert.assertEquals(10l,semanticTypeToCount.get(semanticName),0l);
          }
        }
      }
 else       if (bean.getColumnIdx() == 10) {
        Assert.assertEquals(""String_Node_Str"",bean.getSemanticNameToCountMap().keySet().toArray()[0].toString());
        Assert.assertEquals(10000,bean.getSemanticTypeCount(""String_Node_Str""),0);
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9540810839875256
136760,"@Test public void testInferTypesPerformance(){
  InputStream in=null;
  ;
  try {
    in=new FileInputStream(new File(""String_Node_Str""));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  BufferedReader inBuffReader=new BufferedReader(new InputStreamReader(in));
  List<String[]> records=new ArrayList<String[]>();
  String line=null;
  String start, end;
  try {
    while ((line=inBuffReader.readLine()) != null) {
      String[] record=StringUtils.splitByWholeSeparatorPreserveAllTokens(line,""String_Node_Str"");
      records.add(record);
    }
    start=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + start);
    inferExector.inferTypes(records);
    end=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + end);
    double timeDiff=TypeInferenceUtilsTest.getTimeDifference(start,end);
    printline(""String_Node_Str"" + timeDiff);
    Assert.assertTrue(timeDiff < 0.9);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  in=null;
  ;
  try {
    in=new FileInputStream(new File(""String_Node_Str""));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  inBuffReader=new BufferedReader(new InputStreamReader(in));
  records=new ArrayList<String[]>();
  try {
    while ((line=inBuffReader.readLine()) != null) {
      String[] record=StringUtils.splitByWholeSeparatorPreserveAllTokens(line,""String_Node_Str"");
      records.add(record);
    }
    start=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + start);
    inferExector.inferTypes(records);
    end=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + end);
    double timeDiff=TypeInferenceUtilsTest.getTimeDifference(start,end);
    printline(""String_Node_Str"" + timeDiff);
    Assert.assertTrue(timeDiff < 4.8);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  in=null;
  ;
  try {
    in=new FileInputStream(new File(""String_Node_Str""));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  inBuffReader=new BufferedReader(new InputStreamReader(in));
  try {
    start=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + start);
    boolean isFirstLine=true;
    while ((line=inBuffReader.readLine()) != null) {
      String[] record=StringUtils.splitByWholeSeparatorPreserveAllTokens(line,""String_Node_Str"");
      if (isFirstLine) {
        isFirstLine=false;
        inferExector.init(record);
      }
      inferExector.handle(record);
    }
    end=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + end);
    double timeDiff=TypeInferenceUtilsTest.getTimeDifference(start,end);
    printline(""String_Node_Str"" + timeDiff);
    Assert.assertTrue(timeDiff < 45);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","@Ignore public void testInferTypesPerformance(){
  InputStream in=this.getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  BufferedReader inBuffReader=new BufferedReader(new InputStreamReader(in));
  List<String[]> records=new ArrayList<String[]>();
  String line=null;
  String start, end;
  try {
    while ((line=inBuffReader.readLine()) != null) {
      String[] record=StringUtils.splitByWholeSeparatorPreserveAllTokens(line,""String_Node_Str"");
      records.add(record);
    }
    start=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + start);
    inferExector.inferTypes(records);
    end=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + end);
    double timeDiff=TypeInferenceUtilsTest.getTimeDifference(start,end);
    printline(""String_Node_Str"" + timeDiff);
    Assert.assertTrue(timeDiff < 0.9);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  in=null;
  try {
    in=new FileInputStream(new File(""String_Node_Str""));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  inBuffReader=new BufferedReader(new InputStreamReader(in));
  records=new ArrayList<String[]>();
  try {
    while ((line=inBuffReader.readLine()) != null) {
      String[] record=StringUtils.splitByWholeSeparatorPreserveAllTokens(line,""String_Node_Str"");
      records.add(record);
    }
    start=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + start);
    inferExector.inferTypes(records);
    end=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + end);
    double timeDiff=TypeInferenceUtilsTest.getTimeDifference(start,end);
    printline(""String_Node_Str"" + timeDiff);
    Assert.assertTrue(timeDiff < 4.8);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  in=null;
  try {
    in=new FileInputStream(new File(""String_Node_Str""));
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  inBuffReader=new BufferedReader(new InputStreamReader(in));
  try {
    start=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + start);
    boolean isFirstLine=true;
    while ((line=inBuffReader.readLine()) != null) {
      String[] record=StringUtils.splitByWholeSeparatorPreserveAllTokens(line,""String_Node_Str"");
      if (isFirstLine) {
        isFirstLine=false;
        inferExector.init(record);
      }
      inferExector.handle(record);
    }
    end=TypeInferenceUtilsTest.getCurrentTimeStamp();
    printline(""String_Node_Str"" + end);
    double timeDiff=TypeInferenceUtilsTest.getTimeDifference(start,end);
    printline(""String_Node_Str"" + timeDiff);
    Assert.assertTrue(timeDiff < 45);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9648687012065296
136761,"/** 
 * DOC talend Comment method ""addVscrollBarListener"".
 */
private void addVscrollBarListener(){
  getVerticalBar().addListener(SWT.Show,new Listener(){
    public void handleEvent(    Event event){
      fillWidth();
      if (getVerticalBar().isVisible()) {
        notifyVerticalBarShown(true);
      }
    }
  }
);
  getVerticalBar().addListener(SWT.Hide,new Listener(){
    public void handleEvent(    Event event){
      beginningWidth();
      if (!getVerticalBar().isVisible()) {
        notifyVerticalBarShown(false);
      }
    }
  }
);
}","/** 
 * DOC talend Comment method ""addVscrollBarListener"".
 */
protected void addVscrollBarListener(){
  getVerticalBar().addListener(SWT.Show,new Listener(){
    public void handleEvent(    Event event){
      fillWidth();
      if (getVerticalBar().isVisible()) {
        notifyVerticalBarShown(true);
      }
    }
  }
);
  getVerticalBar().addListener(SWT.Hide,new Listener(){
    public void handleEvent(    Event event){
      beginningWidth();
      if (!getVerticalBar().isVisible()) {
        notifyVerticalBarShown(false);
      }
    }
  }
);
}",0.9891696750902528
136762,"private boolean handleCellHighlight(MouseEvent e,GridVisibleRange range){
  Point cell=getCell(new Point(e.x,e.y));
  if (cell != null) {
    List<GridColumn> columnList=Arrays.asList(range.getColumns());
    cell.x=columnList.indexOf(getColumn(cell.x)) + 2;
    for (    GridItem item : range.getItems()) {
      int i=indexOf(item);
      if (i == cell.y) {
        item.setBackground(0,yellow);
        item.setBackground(1,lightYellow);
      }
 else {
        item.setBackground(0,gray);
        item.setBackground(1,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
        if (item.getCheckable(1)) {
          item.setBackground(yellow);
        }
      }
      for (      GridColumn column : range.getColumns()) {
        int realIdx=columnList.indexOf(column) + 2;
        int j=indexOf(column);
        if (i == cell.y && realIdx == cell.x) {
          item.setBackground(j,yellow);
        }
 else         if (i == cell.y && realIdx < cell.x || realIdx == cell.x && i < cell.y) {
          item.setBackground(j,lightYellow);
        }
 else {
          item.setBackground(j,null);
        }
      }
    }
    for (    GridColumn column : range.getColumns()) {
      int realIdx=columnList.indexOf(column) + 2;
      column.getHeaderRenderer().setSelected(realIdx == cell.x);
    }
    return true;
  }
  return false;
}","private boolean handleCellHighlight(MouseEvent e,GridVisibleRange range){
  Point cell=getCell(new Point(e.x,e.y));
  if (cell != null) {
    List<GridColumn> columnList=Arrays.asList(range.getColumns());
    cell.x=columnList.indexOf(getColumn(cell.x)) + 2;
    for (    GridItem item : range.getItems()) {
      int i=indexOf(item);
      if (i == cell.y) {
        item.setBackground(0,TalendColorPalette.PRIMARY_GREEN);
        item.setBackground(1,TalendColorPalette.PRIMARY_GREEN);
      }
 else {
        item.setBackground(0,gray);
        item.setBackground(1,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
        if (item.getCheckable(1)) {
          item.setBackground(TalendColorPalette.PRIMARY_GREEN);
        }
      }
      for (      GridColumn column : range.getColumns()) {
        int realIdx=columnList.indexOf(column) + 2;
        int j=indexOf(column);
        if (i == cell.y && realIdx == cell.x) {
          item.setBackground(j,TalendColorPalette.PRIMARY_GREEN);
        }
 else         if (i == cell.y && realIdx < cell.x || realIdx == cell.x && i < cell.y) {
          item.setBackground(j,TalendColorPalette.PRIMARY_GREEN);
        }
 else {
          item.setBackground(j,null);
        }
      }
    }
    for (    GridColumn column : range.getColumns()) {
      int realIdx=columnList.indexOf(column) + 2;
      column.getHeaderRenderer().setSelected(realIdx == cell.x);
    }
    return true;
  }
  return false;
}",0.9298998569384836
136763,"private void initializeGrid(){
  createIndicatorLabelColumn();
  createRowSelectColumn();
  for (  ModelElementIndicator _modelElementIndicator : _modelElementIndicators) {
    final GridColumn newCol=new GridColumn(this,SWT.CHECK);
    AbstractColumnHerderRenderer headerRenderer=getColumnHeaderRenderer();
    headerRenderer.setRotation(COLUMN_HEADER_ROTATION);
    newCol.setHeaderRenderer(headerRenderer);
    newCol.setCellRenderer(getCellRenderer());
    newCol.setText(ModelElementIndicatorHelper.getModelElementDisplayName(_modelElementIndicator));
    newCol.setWidth(COLUMN_WIDTH);
    newCol.setData(_modelElementIndicator);
    newCol.setMoveable(true);
    newCol.setResizeable(true);
    newCol.setHeaderFont(font);
    IRepositoryNode repNode=_modelElementIndicator.getModelElementRepositoryNode();
    if (repNode instanceof DBColumnRepNode && ((DBColumnRepNode)repNode).isKey()) {
      newCol.setImage(pkImage);
    }
    newCol.addListener(SWT.Resize,new Listener(){
      public void handleEvent(      Event event){
        notifyObservers(event);
      }
    }
);
    newCol.addListener(SWT.Move,new Listener(){
      public void handleEvent(      Event event){
        notifyObservers(event);
      }
    }
);
  }
  recalculateHeader();
  createTableContent();
  setHeaderVisible(true);
  setTopLeftRenderer(new TdTopLeftRenderer());
  setEmptyColumnHeaderRenderer(new TdEmptyColumnHeaderRenderer());
  setEmptyRowHeaderRenderer(new TdEmptyCellRenderer());
  setEmptyCellRenderer(new TdEmptyCellRenderer());
  TdRowHeaderRenderer rowHeaderRenderer=new TdRowHeaderRenderer();
  setRowHeaderRenderer(rowHeaderRenderer);
  rowHeaderRenderer.setTree(true);
  rowHeaderRenderer.setWordWrap(false);
  setRowHeaderVisible(true);
  setLinesVisible(true);
  setColumnScrolling(true);
  setSelectionEnabled(false);
  setCellSelectionEnabled(false);
  setRowsResizeable(false);
  setItemHeight(21);
  setLineColor(IndicatorSelectGrid.lightBlue);
  setFocusRenderer(null);
  for (  GridItem gridItem : getItems()) {
    gridItem.setBackground(0,gray);
  }
}","protected void initializeGrid(){
  createIndicatorLabelColumn();
  createRowSelectColumn();
  for (int index=0; index < _modelElementIndicators.length; index++) {
    ModelElementIndicator _modelElementIndicator=_modelElementIndicators[index];
    final GridColumn newCol=new GridColumn(this,SWT.CHECK);
    AbstractColumnHerderRenderer headerRenderer=getColumnHeaderRenderer();
    headerRenderer.setRotation(COLUMN_HEADER_ROTATION);
    newCol.setHeaderRenderer(headerRenderer);
    newCol.setCellRenderer(getCellRenderer());
    newCol.setText(ModelElementIndicatorHelper.getModelElementDisplayName(_modelElementIndicator));
    newCol.setWidth(getPreferWidth(index));
    newCol.setData(_modelElementIndicator);
    newCol.setMoveable(true);
    newCol.setResizeable(true);
    newCol.setHeaderFont(font);
    IRepositoryNode repNode=_modelElementIndicator.getModelElementRepositoryNode();
    if (repNode instanceof DBColumnRepNode && ((DBColumnRepNode)repNode).isKey()) {
      newCol.setImage(pkImage);
    }
    newCol.addListener(SWT.Resize,new Listener(){
      public void handleEvent(      Event event){
        notifyObservers(event);
      }
    }
);
    newCol.addListener(SWT.Move,new Listener(){
      public void handleEvent(      Event event){
        notifyObservers(event);
      }
    }
);
  }
  recalculateHeader();
  createTableContent();
  setHeaderVisible(true);
  setTopLeftRenderer(new TdTopLeftRenderer());
  setEmptyColumnHeaderRenderer(new TdEmptyColumnHeaderRenderer());
  setEmptyRowHeaderRenderer(new TdEmptyCellRenderer());
  setEmptyCellRenderer(new TdEmptyCellRenderer());
  TdRowHeaderRenderer rowHeaderRenderer=new TdRowHeaderRenderer();
  setRowHeaderRenderer(rowHeaderRenderer);
  rowHeaderRenderer.setTree(true);
  rowHeaderRenderer.setWordWrap(false);
  setRowHeaderVisible(true);
  setLinesVisible(true);
  setColumnScrolling(true);
  setSelectionEnabled(false);
  setCellSelectionEnabled(false);
  setRowsResizeable(false);
  setItemHeight(21);
  setLineColor(IndicatorSelectGrid.lightBlue);
  setFocusRenderer(null);
  for (  GridItem gridItem : getItems()) {
    gridItem.setBackground(0,gray);
  }
}",0.9700996677740864
136764,"private boolean handleRowHeaderHighlight(MouseEvent e,GridVisibleRange range){
  GridItem currentItem=getItem(new Point(e.x,e.y));
  if (currentItem != null) {
    if (overRowSelect(currentItem,new Point(e.x,e.y))) {
      for (      GridItem item : range.getItems()) {
        int i=indexOf(item);
        if (item.getCheckable(0)) {
          if (i == indexOf(currentItem)) {
            item.setBackground(0,yellow);
            item.setBackground(1,yellow);
          }
 else {
            item.setBackground(0,gray);
            item.setBackground(1,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
          }
        }
        for (        GridColumn column : range.getColumns()) {
          int j=indexOf(column);
          if (i == indexOf(currentItem)) {
            item.setBackground(j,lightYellow);
          }
 else {
            item.setBackground(j,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
          }
        }
      }
      for (      GridColumn column : range.getColumns()) {
        column.getHeaderRenderer().setSelected(false);
      }
    }
    return true;
  }
  return false;
}","private boolean handleRowHeaderHighlight(MouseEvent e,GridVisibleRange range){
  GridItem currentItem=getItem(new Point(e.x,e.y));
  if (currentItem != null) {
    if (overRowSelect(currentItem,new Point(e.x,e.y))) {
      for (      GridItem item : range.getItems()) {
        int i=indexOf(item);
        if (item.getCheckable(0)) {
          if (i == indexOf(currentItem)) {
            item.setBackground(0,TalendColorPalette.PRIMARY_GREEN);
            item.setBackground(1,TalendColorPalette.PRIMARY_GREEN);
          }
 else {
            item.setBackground(0,gray);
            item.setBackground(1,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
          }
        }
        for (        GridColumn column : range.getColumns()) {
          int j=indexOf(column);
          if (i == indexOf(currentItem)) {
            item.setBackground(j,TalendColorPalette.PRIMARY_GREEN);
          }
 else {
            item.setBackground(j,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
          }
        }
      }
      for (      GridColumn column : range.getColumns()) {
        column.getHeaderRenderer().setSelected(false);
      }
    }
    return true;
  }
  return false;
}",0.9496774193548388
136765,"private void onMouseMove(MouseEvent e){
  GridVisibleRange range=getVisibleRange();
  if (handleCellHighlight(e,range)) {
    return;
  }
  if (handleRowHeaderHighlight(e,range)) {
    return;
  }
  handleColumnHeaderHighlight(e,range);
}","private void onMouseMove(MouseEvent e){
  GridVisibleRange range=getVisibleRange();
  if (handleCellHighlight(e,range)) {
    notifyhandleColumnHighlight(e);
    return;
  }
  if (handleRowHeaderHighlight(e,range)) {
    return;
  }
  handleColumnHeaderHighlight(e,range);
  notifyhandleColumnHighlight(e);
}",0.8717948717948718
136766,"private void handleColumnHeaderHighlight(MouseEvent e,GridVisibleRange range){
  GridColumn currentColumn=getColumn(new Point(e.x,e.y));
  if (currentColumn != null && !isDraggingColumn()) {
    int currentColumnIndex=indexOf(currentColumn);
    for (    GridItem item : range.getItems()) {
      for (      GridColumn column : range.getColumns()) {
        int j=indexOf(column);
        if (j == currentColumnIndex) {
          item.setBackground(j,lightYellow);
        }
 else {
          item.setBackground(j,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
        }
      }
      item.setBackground(0,gray);
      item.setBackground(1,null);
    }
    for (    GridColumn column : range.getColumns()) {
      int j=indexOf(column);
      column.getHeaderRenderer().setSelected(j == currentColumnIndex);
    }
  }
}","private void handleColumnHeaderHighlight(MouseEvent e,GridVisibleRange range){
  GridColumn currentColumn=getColumn(new Point(e.x,e.y));
  if (currentColumn != null && !isDraggingColumn()) {
    int currentColumnIndex=indexOf(currentColumn);
    for (    GridItem item : range.getItems()) {
      for (      GridColumn column : range.getColumns()) {
        int j=indexOf(column);
        if (j == currentColumnIndex) {
          item.setBackground(j,TalendColorPalette.PRIMARY_GREEN);
        }
 else {
          item.setBackground(j,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
        }
      }
      item.setBackground(0,gray);
      item.setBackground(1,null);
    }
    for (    GridColumn column : range.getColumns()) {
      int j=indexOf(column);
      column.getHeaderRenderer().setSelected(j == currentColumnIndex);
    }
  }
}",0.9755807027992852
136767,"public void update(ObserverEvent observer){
switch (observer.getEventType()) {
case ItemHeaderWidth:
    Object width=observer.getData(ObserverEvent.ITEM_HEADER_WIDTH);
  if (width == null) {
    return;
  }
this.setItemHeaderWidth(Integer.parseInt(width.toString()));
break;
case HSrcollMove:
Object selection=observer.getData(ObserverEvent.HORIZONTAL_SCROLLBAR_MOVE);
if (selection == null) {
return;
}
this.getHorizontalBar().setSelection(Integer.parseInt(selection.toString()));
redraw(getClientArea().x,getClientArea().y,getClientArea().width,getClientArea().height,false);
break;
case VSrcollVisible:
Object show=observer.getData(ObserverEvent.VERTICAL_SRCOLL_VISABLE);
if (show == null || getVerticalBar() == null) {
return;
}
if (!getVerticalBar().isVisible() && Boolean.parseBoolean(show.toString())) {
GridData previewGridData=(GridData)this.getLayoutData();
previewGridData.widthHint=this.getBounds().width - 50 - getVerticalBar().getSize().x;
previewGridData.minimumWidth=this.getBounds().width - 50 - getVerticalBar().getSize().x;
previewGridData.horizontalAlignment=SWT.BEGINNING;
this.getParent().layout();
}
if (!getVerticalBar().isVisible() && !Boolean.parseBoolean(show.toString())) {
GridData previewGridData=(GridData)this.getLayoutData();
if (previewGridData.horizontalAlignment == SWT.FILL) {
return;
}
previewGridData.minimumWidth=650;
previewGridData.horizontalAlignment=SWT.FILL;
notifyVerticalBarShown(false);
this.getParent().layout();
}
break;
}
}","public void update(ObserverEvent observer){
switch (observer.getEventType()) {
case ItemHeaderWidth:
    Object width=observer.getData(ObserverEvent.ITEM_HEADER_WIDTH);
  if (width == null) {
    return;
  }
this.setItemHeaderWidth(Integer.parseInt(width.toString()));
break;
case HSrcollMove:
Object selection=observer.getData(ObserverEvent.HORIZONTAL_SCROLLBAR_MOVE);
if (selection == null) {
return;
}
this.getHorizontalBar().setSelection(Integer.parseInt(selection.toString()));
redraw(getClientArea().x,getClientArea().y,getClientArea().width,getClientArea().height,false);
break;
case VSrcollVisible:
Object show=observer.getData(ObserverEvent.VERTICAL_SRCOLL_VISABLE);
if (show == null || getVerticalBar() == null) {
return;
}
if (!getVerticalBar().isVisible() && Boolean.parseBoolean(show.toString())) {
GridData previewGridData=(GridData)this.getLayoutData();
previewGridData.widthHint=this.getBounds().width - 50 - getVerticalBar().getSize().x;
previewGridData.minimumWidth=this.getBounds().width - 50 - getVerticalBar().getSize().x;
previewGridData.horizontalAlignment=SWT.BEGINNING;
this.getParent().layout();
}
if (!getVerticalBar().isVisible() && !Boolean.parseBoolean(show.toString())) {
GridData previewGridData=(GridData)this.getLayoutData();
if (previewGridData.horizontalAlignment == SWT.FILL) {
return;
}
previewGridData.minimumWidth=650;
previewGridData.horizontalAlignment=SWT.FILL;
notifyVerticalBarShown(false);
this.getParent().layout();
}
break;
case ColumnHighlight:
Object data=observer.getData(ObserverEvent.COLUMN_HIGH_LIGHT);
handleColumnHighlight(((Integer)data));
break;
}
}",0.9571706683971448
136768,"/** 
 * DOC talend Comment method ""processNodePrivew"".
 * @param object
 * @param previewItem
 * @throws SQLException
 */
private void processNodePrivew(Object object,GridItem parentItem) throws SQLException {
  if (!checkSameTable()) {
    return;
  }
  try {
    for (int j=0; j < limitNumber; j++) {
      TalendGridItem currentItem=new TalendGridItem(parentItem,SWT.NONE);
      currentItem.setCheckable(0,false);
      currentItem.setCheckable(1,false);
      for (int i=2; i < this.getColumnCount(); i++) {
        GridColumn column=getColumn(i);
        currentItem.setCheckable(i,false);
        String columnValue=getColumnValue(column,currentItem);
        if (columnValue == null) {
          this.remove(this.indexOf(currentItem));
          return;
        }
        currentItem.setText(i,columnValue);
      }
    }
  }
  finally {
    ITalendResultSet rs=(ITalendResultSet)this.getData(COLUMN_RESULT_KEY);
    ModelElementIndicator modelElementIndicator=(ModelElementIndicator)getColumn(2).getData();
    closeConnection(rs,modelElementIndicator);
  }
}","/** 
 * DOC talend Comment method ""processNodePrivew"".
 * @param object
 * @param previewItem
 * @throws SQLException
 */
private void processNodePrivew(Object object,GridItem parentItem) throws SQLException {
  if (!checkSameTable()) {
    return;
  }
  try {
    for (int j=0; j < limitNumber; j++) {
      TalendGridItem currentItem=new TalendGridItem(parentItem,SWT.NONE);
      currentItem.setCheckable(0,false);
      currentItem.setCheckable(1,false);
      for (int i=2; i < this.getColumnCount(); i++) {
        GridColumn column=getColumn(i);
        currentItem.setCheckable(i,false);
        String columnValue=getColumnValue(column,currentItem);
        if (columnValue == null) {
          this.remove(this.indexOf(currentItem));
          return;
        }
        int minWith=columnValue.length() * 7 > 100 ? 100 : columnValue.length() * 7;
        column.setWidth(COLUMN_WIDTH < minWith ? minWith : COLUMN_WIDTH);
        currentItem.setText(i,columnValue);
      }
    }
  }
  finally {
    ITalendResultSet rs=(ITalendResultSet)this.getData(COLUMN_RESULT_KEY);
    ModelElementIndicator modelElementIndicator=(ModelElementIndicator)getColumn(2).getData();
    closeConnection(rs,modelElementIndicator);
  }
}",0.930718954248366
136769,"/** 
 * ColumnPreviewGrid constructor comment.
 * @param dialog
 * @param parent
 * @param style
 * @param modelElementIndicators
 */
public ColumnPreviewGrid(IndicatorSelectDialog dialog,Composite parent,int style,ModelElementIndicator[] modelElementIndicators,int limit){
  super(dialog,parent,style,modelElementIndicators,limit);
}","/** 
 * ColumnPreviewGrid constructor comment.
 * @param dialog
 * @param parent
 * @param style
 * @param modelElementIndicators
 */
public ColumnPreviewGrid(IndicatorSelectDialog dialog,Composite parent,int style,ModelElementIndicator[] modelElementIndicators,int limit){
  super(dialog,parent,style,modelElementIndicators,limit);
  initializeGrid();
  addVscrollBarListener();
}",0.9342657342657342
136770,"@Override protected Control createDialogArea(Composite parent){
  redrewComp=(Composite)super.createDialogArea(parent);
  int style=SWT.NONE;
  style|=SWT.V_SCROLL;
  style|=SWT.H_SCROLL;
  style|=SWT.BORDER;
  style|=SWT.SINGLE;
  gridPrview=new ColumnPreviewGrid(this,redrewComp,style,modelElementIndicators,this.limitNumber);
  gridIndicator=new IndicatorSelectGrid(this,redrewComp,style,modelElementIndicators);
  gridIndicator.setHeaderVisible(false);
  gridIndicator.addObserver(gridPrview);
  gridPrview.addObserver(gridIndicator);
  gridPrview.getParent().addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      GridData indicatorGridData=(GridData)gridIndicator.getLayoutData();
      GridData previewGridData=(GridData)gridPrview.getLayoutData();
      previewGridData.horizontalAlignment=SWT.FILL;
      previewGridData.minimumWidth=650;
      indicatorGridData.horizontalAlignment=SWT.FILL;
      indicatorGridData.minimumWidth=650;
      gridPrview.getParent().layout();
      if (gridIndicator.getVerticalBar().isVisible() ^ gridPrview.getVerticalBar().isVisible()) {
        if (gridPrview.getVerticalBar().isVisible()) {
          indicatorGridData.widthHint=gridPrview.getBounds().width - 70;
          indicatorGridData.minimumWidth=gridPrview.getBounds().width - 70;
          indicatorGridData.horizontalAlignment=SWT.BEGINNING;
        }
 else {
          previewGridData.widthHint=gridIndicator.getBounds().width - 70;
          previewGridData.minimumWidth=gridIndicator.getBounds().width - 70;
          previewGridData.horizontalAlignment=SWT.BEGINNING;
        }
        gridPrview.getParent().layout();
      }
    }
  }
);
  GridData previewGridData=new GridData(SWT.FILL,SWT.FILL,true,true);
  previewGridData.minimumWidth=650;
  previewGridData.minimumHeight=gridPrview.getItemHeight() * 10 + gridPrview.getHeaderHeight();
  previewGridData.widthHint=Math.min(IndicatorSelectGrid.COLUMN_WIDTH * modelElementIndicators.length + 400,getParentShell().getClientArea().width - 350);
  previewGridData.heightHint=gridPrview.getHeaderHeight() + gridPrview.getItemHeight() * 10;
  GridData indicatorGridData=new GridData(SWT.FILL,SWT.FILL,true,true);
  indicatorGridData.minimumWidth=650;
  indicatorGridData.minimumHeight=gridIndicator.getItemHeight() * 10;
  indicatorGridData.widthHint=Math.min(IndicatorSelectGrid.COLUMN_WIDTH * modelElementIndicators.length + 400,getParentShell().getClientArea().width - 350);
  indicatorGridData.heightHint=getParentShell().getClientArea().height - previewGridData.heightHint;
  gridIndicator.setLayoutData(indicatorGridData);
  gridPrview.setLayoutData(previewGridData);
  Composite buttomComp=new Composite(redrewComp,SWT.BORDER);
  buttomComp.setLayout(new GridLayout());
  buttomComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createHideInvalidItemButton(buttomComp);
  purposeLabel=new Label(buttomComp,SWT.WRAP);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(purposeLabel);
  descriptionLabel=new Label(buttomComp,SWT.WRAP);
  GridDataFactory.fillDefaults().minSize(400,30).grab(true,true).applyTo(descriptionLabel);
  gridIndicator.redraw();
  return redrewComp;
}","@Override protected Control createDialogArea(Composite parent){
  redrewComp=(Composite)super.createDialogArea(parent);
  int style=SWT.NONE;
  style|=SWT.V_SCROLL;
  style|=SWT.H_SCROLL;
  style|=SWT.BORDER;
  style|=SWT.SINGLE;
  gridPrview=new ColumnPreviewGrid(this,redrewComp,style,modelElementIndicators,this.limitNumber);
  gridIndicator=new IndicatorSelectGrid(this,redrewComp,style,modelElementIndicators,gridPrview.getColumnsWidth());
  gridIndicator.setHeaderVisible(false);
  gridIndicator.addObserver(gridPrview);
  gridPrview.addObserver(gridIndicator);
  gridPrview.getParent().addControlListener(new ControlAdapter(){
    @Override public void controlResized(    ControlEvent e){
      GridData indicatorGridData=(GridData)gridIndicator.getLayoutData();
      GridData previewGridData=(GridData)gridPrview.getLayoutData();
      previewGridData.horizontalAlignment=SWT.FILL;
      previewGridData.minimumWidth=650;
      indicatorGridData.horizontalAlignment=SWT.FILL;
      indicatorGridData.minimumWidth=650;
      gridPrview.getParent().layout();
      if (gridIndicator.getVerticalBar().isVisible() ^ gridPrview.getVerticalBar().isVisible()) {
        if (gridPrview.getVerticalBar().isVisible()) {
          indicatorGridData.widthHint=gridPrview.getBounds().width - 70;
          indicatorGridData.minimumWidth=gridPrview.getBounds().width - 70;
          indicatorGridData.horizontalAlignment=SWT.BEGINNING;
        }
 else {
          previewGridData.widthHint=gridIndicator.getBounds().width - 70;
          previewGridData.minimumWidth=gridIndicator.getBounds().width - 70;
          previewGridData.horizontalAlignment=SWT.BEGINNING;
        }
        gridPrview.getParent().layout();
      }
    }
  }
);
  GridData previewGridData=new GridData(SWT.FILL,SWT.FILL,true,true);
  previewGridData.minimumWidth=650;
  previewGridData.minimumHeight=gridPrview.getItemHeight() * 10 + gridPrview.getHeaderHeight();
  previewGridData.widthHint=Math.min(IndicatorSelectGrid.COLUMN_WIDTH * modelElementIndicators.length + 400,getParentShell().getClientArea().width - 350);
  previewGridData.heightHint=gridPrview.getHeaderHeight() + gridPrview.getItemHeight() * 10;
  GridData indicatorGridData=new GridData(SWT.FILL,SWT.FILL,true,true);
  indicatorGridData.minimumWidth=650;
  indicatorGridData.minimumHeight=gridIndicator.getItemHeight() * 10;
  indicatorGridData.widthHint=Math.min(IndicatorSelectGrid.COLUMN_WIDTH * modelElementIndicators.length + 400,getParentShell().getClientArea().width - 350);
  indicatorGridData.heightHint=getParentShell().getClientArea().height - previewGridData.heightHint;
  gridIndicator.setLayoutData(indicatorGridData);
  gridPrview.setLayoutData(previewGridData);
  Composite buttomComp=new Composite(redrewComp,SWT.BORDER);
  buttomComp.setLayout(new GridLayout());
  buttomComp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createHideInvalidItemButton(buttomComp);
  purposeLabel=new Label(buttomComp,SWT.WRAP);
  GridDataFactory.fillDefaults().grab(true,true).applyTo(purposeLabel);
  descriptionLabel=new Label(buttomComp,SWT.WRAP);
  GridDataFactory.fillDefaults().minSize(400,30).grab(true,true).applyTo(descriptionLabel);
  gridIndicator.redraw();
  return redrewComp;
}",0.9955045729344288
136771,"public void update(ObserverEvent observerEvent){
switch (observerEvent.getEventType()) {
case ColumnResize:
    Object data=observerEvent.getData(ObserverEvent.COLUMN_HEADER_RESIZE);
  if (data == null) {
    return;
  }
GridColumn sourceGridColumn=((GridColumn)data);
for (GridColumn currColumn : this.getColumns()) {
Object oldmodelElementIndicator=sourceGridColumn.getData();
if (oldmodelElementIndicator == currColumn.getData()) {
  currColumn.setWidth(sourceGridColumn.getWidth());
  break;
}
}
break;
case MoveColumn:
data=observerEvent.getData(ObserverEvent.COLUMN_HEADER_MOVE);
if (data == null) {
return;
}
this.setColumnOrder((int[])data);
if (result == null) {
result=new ModelElementIndicator[getColumnCount() - 2];
}
int[] order=getColumnOrder();
int j=0;
for (int columnIndex : order) {
if (columnIndex > 1) {
result[j]=_modelElementIndicators[columnIndex - 2];
j++;
}
}
redraw();
break;
case HSrcollMove:
data=observerEvent.getData(ObserverEvent.HORIZONTAL_SCROLLBAR_MOVE);
if (data == null || getHorizontalBar() == null) {
return;
}
getHorizontalBar().setSelection(Integer.parseInt(data.toString()));
redraw(getClientArea().x,getClientArea().y,getClientArea().width,getClientArea().height,false);
break;
case VSrcollVisible:
data=observerEvent.getData(ObserverEvent.VERTICAL_SRCOLL_VISABLE);
if (data == null || getVerticalBar() == null) {
return;
}
if (!getVerticalBar().isVisible() && Boolean.parseBoolean(data.toString())) {
GridData previewGridData=(GridData)this.getLayoutData();
previewGridData.widthHint=this.getBounds().width - 50 - getVerticalBar().getSize().x;
previewGridData.minimumWidth=this.getBounds().width - 50 - getVerticalBar().getSize().x;
previewGridData.horizontalAlignment=SWT.BEGINNING;
this.getParent().layout();
}
if (!getVerticalBar().isVisible() && !Boolean.parseBoolean(data.toString())) {
GridData previewGridData=(GridData)this.getLayoutData();
if (previewGridData.horizontalAlignment == SWT.FILL) {
return;
}
previewGridData.minimumWidth=650;
previewGridData.horizontalAlignment=SWT.FILL;
notifyVerticalBarShown(false);
}
break;
}
}","public void update(ObserverEvent observerEvent){
switch (observerEvent.getEventType()) {
case ColumnResize:
    Object data=observerEvent.getData(ObserverEvent.COLUMN_HEADER_RESIZE);
  if (data == null) {
    return;
  }
GridColumn sourceGridColumn=((GridColumn)data);
for (GridColumn currColumn : this.getColumns()) {
Object oldmodelElementIndicator=sourceGridColumn.getData();
if (oldmodelElementIndicator == currColumn.getData()) {
  currColumn.setWidth(sourceGridColumn.getWidth());
  break;
}
}
break;
case MoveColumn:
data=observerEvent.getData(ObserverEvent.COLUMN_HEADER_MOVE);
if (data == null) {
return;
}
this.setColumnOrder((int[])data);
if (result == null) {
result=new ModelElementIndicator[getColumnCount() - 2];
}
int[] order=getColumnOrder();
int j=0;
for (int columnIndex : order) {
if (columnIndex > 1) {
result[j]=_modelElementIndicators[columnIndex - 2];
j++;
}
}
redraw();
break;
case HSrcollMove:
data=observerEvent.getData(ObserverEvent.HORIZONTAL_SCROLLBAR_MOVE);
if (data == null || getHorizontalBar() == null) {
return;
}
getHorizontalBar().setSelection(Integer.parseInt(data.toString()));
redraw(getClientArea().x,getClientArea().y,getClientArea().width,getClientArea().height,false);
break;
case VSrcollVisible:
data=observerEvent.getData(ObserverEvent.VERTICAL_SRCOLL_VISABLE);
if (data == null || getVerticalBar() == null) {
return;
}
if (!getVerticalBar().isVisible() && Boolean.parseBoolean(data.toString())) {
GridData previewGridData=(GridData)this.getLayoutData();
previewGridData.widthHint=this.getBounds().width - 50 - getVerticalBar().getSize().x;
previewGridData.minimumWidth=this.getBounds().width - 50 - getVerticalBar().getSize().x;
previewGridData.horizontalAlignment=SWT.BEGINNING;
this.getParent().layout();
}
if (!getVerticalBar().isVisible() && !Boolean.parseBoolean(data.toString())) {
GridData previewGridData=(GridData)this.getLayoutData();
if (previewGridData.horizontalAlignment == SWT.FILL) {
return;
}
previewGridData.minimumWidth=650;
previewGridData.horizontalAlignment=SWT.FILL;
notifyVerticalBarShown(false);
}
break;
case ColumnHighlight:
data=observerEvent.getData(ObserverEvent.COLUMN_HIGH_LIGHT);
handleColumnHighlight(((Integer)data));
break;
}
}",0.9696969696969696
136772,"/** 
 * DOC talend IndicatorSelectGrid constructor comment.
 * @param dialog
 * @param parent
 * @param style
 * @param modelElementIndicators
 */
public IndicatorSelectGrid(IndicatorSelectDialog dialog,Composite parent,int style,ModelElementIndicator[] modelElementIndicators){
  super(dialog,parent,style,modelElementIndicators);
}","/** 
 * DOC talend IndicatorSelectGrid constructor comment.
 * @param dialog
 * @param parent
 * @param style
 * @param modelElementIndicators
 */
public IndicatorSelectGrid(IndicatorSelectDialog dialog,Composite parent,int style,ModelElementIndicator[] modelElementIndicators,int[] preferColumnsWidth){
  super(dialog,parent,style,modelElementIndicators);
  this.preferColumnsWidth=preferColumnsWidth;
  initializeGrid();
  addVscrollBarListener();
}",0.8494897959183674
136773,"/** 
 * {@inheritDoc}
 */
public void paint(GC gc,Object value){
  gc.setAntialias(SWT.ON);
  gc.setTransform(_transform);
  float[] original={(float)getBounds().x - 2,(float)getBounds().y + (float)getBounds().height - 2};
  _transformInv.transform(original);
  GridColumn column=(GridColumn)value;
  gc.setFont(column.getHeaderFont());
  gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  if (isSelected()) {
    gc.setBackground(IndicatorSelectGrid.yellow);
    gc.fillRectangle((int)original[0],(int)original[1] + 2,(int)(getBounds().height / sinRotation) + getBounds().width,(int)(getBounds().width * sinRotation));
  }
  int x=leftMargin;
  int width=getBounds().width - x;
  width-=rightMargin;
  float[] cords={(getBounds().x + width / 2 - leftMargin),(getBounds().y + (float)getBounds().height - topMargin)};
  _transformInv.transform(cords);
  if (column.getImage() != null) {
    gc.drawImage(column.getImage(),(int)cords[0] + leftMargin + imageSpacing,(int)cords[1]);
    x+=column.getImage().getBounds().width;
  }
  gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_FOREGROUND));
  String text=column.getText();
  if (column.getAlignment() == SWT.RIGHT) {
    int len=gc.stringExtent(text).x;
    if (len < width) {
      x+=width - len;
    }
  }
 else   if (column.getAlignment() == SWT.CENTER) {
    int len=gc.stringExtent(text).x;
    if (len < width) {
      x+=(width - len) / 2;
    }
  }
  gc.drawString(text,(int)cords[0] + x + imageSpacing,(int)cords[1] + topMargin);
  gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  gc.drawLine((int)(original[0]),(int)(original[1]),(int)(original[0] + getBounds().height / sinRotation - imageSpacing),(int)(original[1]));
  gc.drawLine((int)(original[0]),(int)(original[1] + getBounds().width * sinRotation),(int)(original[0] + getBounds().height / sinRotation + getBounds().width * cosRotation - imageSpacing - leftMargin),(int)(original[1] + getBounds().width * sinRotation));
  gc.setTransform(null);
  gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_FOREGROUND));
  gc.drawLine(getBounds().x,getBounds().y + getBounds().height - 1,getBounds().x + getBounds().width,getBounds().y + getBounds().height - 1);
}","/** 
 * {@inheritDoc}
 */
public void paint(GC gc,Object value){
  gc.setAntialias(SWT.ON);
  gc.setTransform(_transform);
  float[] original={(float)getBounds().x - 2,(float)getBounds().y + (float)getBounds().height - 2};
  _transformInv.transform(original);
  GridColumn column=(GridColumn)value;
  gc.setFont(column.getHeaderFont());
  gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
  if (isSelected()) {
    gc.setBackground(TalendColorPalette.PRIMARY_GREEN);
    gc.fillRectangle((int)original[0],(int)original[1] + 2,(int)(getBounds().height / sinRotation) + getBounds().width,(int)(getBounds().width * sinRotation));
  }
  int x=leftMargin;
  int width=getBounds().width - x;
  width-=rightMargin;
  float[] cords={(getBounds().x + width / 2 - leftMargin),(getBounds().y + (float)getBounds().height - topMargin)};
  _transformInv.transform(cords);
  if (column.getImage() != null) {
    gc.drawImage(column.getImage(),(int)cords[0] + leftMargin + imageSpacing,(int)cords[1]);
    x+=column.getImage().getBounds().width;
  }
  gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_FOREGROUND));
  String text=column.getText();
  if (column.getAlignment() == SWT.RIGHT) {
    int len=gc.stringExtent(text).x;
    if (len < width) {
      x+=width - len;
    }
  }
 else   if (column.getAlignment() == SWT.CENTER) {
    int len=gc.stringExtent(text).x;
    if (len < width) {
      x+=(width - len) / 2;
    }
  }
  gc.drawString(text,(int)cords[0] + x + imageSpacing,(int)cords[1] + topMargin);
  gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  gc.drawLine((int)(original[0]),(int)(original[1]),(int)(original[0] + getBounds().height / sinRotation - imageSpacing),(int)(original[1]));
  gc.drawLine((int)(original[0]),(int)(original[1] + getBounds().width * sinRotation),(int)(original[0] + getBounds().height / sinRotation + getBounds().width * cosRotation - imageSpacing - leftMargin),(int)(original[1] + getBounds().width * sinRotation));
  gc.setTransform(null);
  gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_FOREGROUND));
  gc.drawLine(getBounds().x,getBounds().y + getBounds().height - 1,getBounds().x + getBounds().width,getBounds().y + getBounds().height - 1);
}",0.9880636604774536
136774,"private void addKeys(String[] para){
  if (para.length > 0) {
    Scanner in;
    try {
      in=new Scanner(new FileReader(para[0]));
      while (in.hasNext()) {
        keys.add(in.next().trim());
      }
      in.close();
    }
 catch (    FileNotFoundException|NullPointerException e) {
      for (      String element : para) {
        keys.add(element);
      }
    }
  }
}","private void addKeys(String[] para){
  if (para.length > 0) {
    Scanner in;
    try {
      in=new Scanner(new FileReader(para[0]));
      while (in.hasNext()) {
        keys.add(in.next().trim());
      }
      in.close();
    }
 catch (    FileNotFoundException|NullPointerException e) {
      for (      String element : para) {
        keys.add(element.trim());
      }
    }
  }
}",0.9335071707953064
136775,"@Override public String generateMaskedRow(String str){
  if ((str == null) || EMPTY_STRING.equals(str) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str)) {
      addKeys(parameters);
      StringBuilder sb=new StringBuilder(str);
      int count=str.lastIndexOf('@');
      if (count == -1) {
        count=str.length();
      }
      if (keys.size() == 1 && keys.get(0).equals(EMPTY_STRING) || keys.size() == 0) {
        for (int i=0; i < count; ++i) {
          sb.setCharAt(i,'X');
        }
      }
 else {
        sb.replace(0,count,keys.get(rnd.nextInt(keys.size())));
      }
      return sb.toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  if ((str == null) || EMPTY_STRING.equals(str) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str)) {
      StringBuilder sb=new StringBuilder(str);
      int count=str.lastIndexOf('@');
      if (count == -1) {
        count=str.length();
      }
      if (keys.size() == 1 && keys.get(0).equals(EMPTY_STRING) || keys.size() == 0) {
        for (int i=0; i < count; ++i) {
          sb.setCharAt(i,'X');
        }
      }
 else {
        sb.replace(0,count,keys.get(rnd.nextInt(keys.size())));
      }
      return sb.toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.9805054151624548
136776,"@Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
    tdqRepositoryService.addSoftwareSystemUpdateListener();
  }
}","@Override public void postWindowOpen(){
  this.getWindowConfigurer().getWindow().getShell().setMaximized(true);
  super.postWindowOpen();
  ChangePerspectiveAction.getAction().switchTitle();
  ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
  if (tdqRepositoryService != null) {
    tdqRepositoryService.addPartListener();
    tdqRepositoryService.addSoftwareSystemUpdateListener();
  }
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  PreferenceManager preferenceManager=workbenchWindowConfigurer.getWindow().getWorkbench().getPreferenceManager();
  preferenceManager.remove(""String_Node_Str"" + WorkbenchPlugin.PREFERENCE_PAGE_CATEGORY_SEPARATOR + ""String_Node_Str"");
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  ICoolBarManager coolBarManager=actionBarConfigurer.getCoolBarManager();
  IContributionItem toolBarItem=coolBarManager.find(""String_Node_Str"");
  if (toolBarItem != null) {
    coolBarManager.remove(toolBarItem);
  }
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId()) || ""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
}",0.5131375579598145
136777,"/** 
 * Get query string with prefix (catalog/schema.table.column) given column array.
 * @param columns
 * @return
 */
public String getQueryColumnsWithPrefix(TdColumn[] columns){
  String columnClause=PluginConstant.EMPTY_STRING;
  if (columns.length == 0) {
    return columnClause;
  }
  ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(columns[0]);
  String tableName=getQueryColumnSetWithPrefix(columnSet);
  for (  TdColumn column : columns) {
    columnClause+=tableName + DOT + quote(column.getName())+ PluginConstant.COMMA_STRING;
  }
  columnClause=columnClause.substring(0,columnClause.length() - 1);
  return columnClause;
}","/** 
 * Get query string with prefix (catalog/schema.table.column) given column array.
 * @param columns
 * @return
 */
public String getQueryColumnsWithPrefix(TdColumn[] columns){
  String columnClause=PluginConstant.EMPTY_STRING;
  if (columns.length == 0) {
    return columnClause;
  }
  ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(columns[0]);
  String tableName=getQueryColumnSetWithPrefix(columnSet);
  for (  TdColumn column : columns) {
    columnClause+=tableName + DOT + quote(column.getName())+ getSeparatedCharacter();
  }
  columnClause=columnClause.substring(0,columnClause.length() - 1);
  return columnClause;
}",0.9612403100775194
136778,"protected String getQueryColumns(TdColumn[] columns){
  String columnClause=PluginConstant.EMPTY_STRING;
  for (  TdColumn column : columns) {
    columnClause+=quote(column.getName()) + PluginConstant.COMMA_STRING;
  }
  columnClause=columnClause.substring(0,columnClause.length() - 1);
  return columnClause;
}","protected String getQueryColumns(TdColumn[] columns){
  String columnClause=PluginConstant.EMPTY_STRING;
  for (  TdColumn column : columns) {
    columnClause+=quote(column.getName()) + getSeparatedCharacter();
  }
  columnClause=columnClause.substring(0,columnClause.length() - 1);
  return columnClause;
}",0.9225806451612903
136779,"protected String getRegexLike(String regexPatternString){
  return dbmsLanguage.regexLike(columnName,regexPatternString);
}",abstract protected String getRegexLike(String regexPatternString);,0.6031746031746031
136780,"protected String getRegexNotLike(String regexPatternString){
  return dbmsLanguage.regexNotLike(columnName,regexPatternString);
}",abstract protected String getRegexNotLike(String regexPatternString);,0.6060606060606061
136781,"/** 
 * get the Valid Rows Statement.
 * @return
 */
public String getValidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=getRegexLike(regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  return getRowsStatement(regexCmp);
}","/** 
 * get the Valid Rows Statement.
 * @return
 */
public String getValidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=getRegexLike(regexPatternString);
  return getRowsStatement(regexCmp);
}",0.9663865546218487
136782,"/** 
 * get the Invalid Rows Statement.
 * @return
 */
public String getInvalidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=getRegexNotLike(regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getRowsStatement(pattCondStr);
}","/** 
 * get the Invalid Rows Statement.
 * @return
 */
public String getInvalidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=getRegexNotLike(regexPatternString);
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getRowsStatement(pattCondStr);
}",0.9738903394255874
136783,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=indicator.getInstantiatedExpressions();
  if (instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String regexp=dbmsLanguage.getRegexPatternString(indicator);
    dbmsLanguage.setRegularExpressionFunction(dbmsLanguage.extractRegularExpressionFunction(expression,regexp));
    dbmsLanguage.setFunctionReturnValue(dbmsLanguage.extractRegularExpressionFunctionReturnValue(expression,regexp));
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(analysis.getParameters().getExecutionLanguage());
  initRegularExpressionParameter();
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}",0.7693032015065914
136784,"/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the valid Value of select column
 */
public String getValidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=getRegexLike(regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  return getValuesStatement(columnName,regexCmp);
}","/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the valid Value of select column
 */
public String getValidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=getRegexLike(regexPatternString);
  return getValuesStatement(columnName,regexCmp);
}",0.9700598802395208
136785,"/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the invalid Value of select column
 */
public String getInvalidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=getRegexNotLike(regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getValuesStatement(columnName,pattCondStr);
}","/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the invalid Value of select column
 */
public String getInvalidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=getRegexNotLike(regexPatternString);
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getValuesStatement(columnName,pattCondStr);
}",0.9761620977353992
136786,"/** 
 * Extract the return value of regular Expression Function If current database type need to use UDF deal regular expression, the expresssion which will definition on ""Regular Expression Matching.definition"" should like below: ""* + when REGULAR_FUNCTION(+ * +) + return value + then"". else this method will not return correct result which you want
 * @param expression
 * @return the return value of regular Expression Function or empty string when the expression is invalid
 */
public String extractRegularExpressionFunctionReturnValue(Expression expression,String regexp){
  return PluginConstant.EMPTY_STRING;
}","/** 
 * Extract the return value of regular Expression Function If current database type need to use UDF deal regular expression, the expresssion which will definition on ""Regular Expression Matching.definition"" should like below: ""* + when REGULAR_FUNCTION(+ * +) + return value + then"". else this method will not return correct result which you want
 * @param expression
 * @return the return value of regular Expression Function or empty string when the expression is invalid
 */
public String extractRegularExpressionFunctionReturnValue(Expression expression,String regexp){
  String tempString=splictExpression(expression);
  if (regexp == null) {
    return tempString;
  }
  String splitKey=regexp.toUpperCase() + ""String_Node_Str"";
  int keyIndex=tempString.indexOf(splitKey) + splitKey.length();
  tempString=tempString.indexOf(splitKey) > -1 ? tempString.substring(keyIndex) : PluginConstant.EMPTY_STRING;
  tempString=tempString.split(""String_Node_Str"").length > 1 ? tempString.split(""String_Node_Str"")[0] : PluginConstant.EMPTY_STRING;
  return tempString.trim();
}",0.7221238938053097
136787,"/** 
 * Extract the name of regular Expression Function If current database type need to use UDF deal regular expression, the expresssion which will definition on ""Regular Expression Matching.definition"" should like below: ""* + when REGULAR_FUNCTION(+ * +) + *"". else this method will not return correct result which you want
 * @param expression
 * @return the name of regular Expression Function or empty string when the expression is invalid
 * @exception If current language is not implement this method will thorw UnsupportedOperationException
 */
public String extractRegularExpressionFunction(Expression expression,String regexp){
  throw new UnsupportedOperationException();
}","/** 
 * Extract the name of regular Expression Function If current database type need to use UDF deal regular expression, the expresssion which will definition on ""Regular Expression Matching.definition"" should like below: ""* + when REGULAR_FUNCTION(+ * +) + *"". else this method will not return correct result which you want
 * @param expression
 * @return the name of regular Expression Function or empty string when the expression is invalid
 */
public String extractRegularExpressionFunction(Expression expression,String regexp){
  String functionName=null;
  try {
    String tempString=splictExpression(expression);
    functionName=tempString.split(""String_Node_Str"").length > 1 ? tempString.split(""String_Node_Str"")[0] : PluginConstant.EMPTY_STRING;
    functionName=functionName.trim();
  }
 catch (  NullPointerException e) {
    log.error(e,e);
  }
  return functionName;
}",0.6900510204081632
136788,"public static DataExplorer getDataExplorer(){
  return new PatternExplorer();
}","public static DataExplorer getDataExplorer(){
  return new RegexPatternExplorer();
}",0.9693251533742332
136789,"/** 
 * Mock Test method for   {@link org.talend.dq.analysis.explore.PatternExplorer#getInvalidValuesStatement()}. when the test for indicator is user define indicator
 */
@Test public void testGetInvalidValuesStatement_2(){
  Analysis analysis=mock(Analysis.class);
  AnalysisParameters parameters=mock(AnalysisParameters.class);
  when(parameters.getExecutionLanguage()).thenReturn(ExecutionLanguage.SQL);
  when(analysis.getParameters()).thenReturn(parameters);
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DataManager dataManager=mock(DataManager.class);
  when(context.getConnection()).thenReturn(dataManager);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getDbmsName()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getDbVersion()).thenReturn(null);
  TdTable table=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdTable();
  table.setName(""String_Node_Str"");
  TdColumn column=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdColumn();
  column.setName(""String_Node_Str"");
  TdSqlDataType tdsql=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdSqlDataType();
  tdsql.setName(""String_Node_Str"");
  tdsql.setJavaDataType(Types.DATE);
  column.setSqlDataType(tdsql);
  table.getOwnedElement().add(column);
  column.setOwner(table);
  UserDefIndicator userDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  UDIndicatorDefinition indicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  indicatorDefinition.setName(""String_Node_Str"");
  userDefIndicator.setName(indicatorDefinition.getName());
  userDefIndicator.setIndicatorDefinition(indicatorDefinition);
  TdExpression newTdExp=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",ViewInvalidValues,null);
  newTdExp.setModificationDate(DateUtils.getCurrentDate(DateUtils.PATTERN_5));
  indicatorDefinition.getViewInvalidValuesExpression().add(newTdExp);
  ChartDataEntity chartDataEntity=new ChartDataEntity(userDefIndicator,""String_Node_Str"",""String_Node_Str"");
  chartDataEntity.setLabelNull(false);
  chartDataEntity.setKey(""String_Node_Str"");
  assertFalse(chartDataEntity.isLabelNull());
  userDefIndicator.setAnalyzedElement(column);
  IndicatorParameters indicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  indicatorParameters.setDateParameters(null);
  userDefIndicator.setParameters(indicatorParameters);
  assertNull(indicatorParameters.getDateParameters());
  PowerMockito.mockStatic(DbmsLanguageFactory.class);
  when(DbmsLanguageFactory.createDbmsLanguage(dataManager)).thenReturn(dbmsLanguage);
  when(DbmsLanguageFactory.compareDbmsLanguage(""String_Node_Str"",""String_Node_Str"")).thenReturn(true);
  when(dbmsLanguage.toQualifiedName(null,null,""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.fillGenericQueryWithColumnsAndTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  PatternExplorer freqExp=new PatternExplorer();
  Assert.assertTrue(freqExp.setAnalysis(analysis));
  freqExp.setEnitty(chartDataEntity);
  String clause=freqExp.getInvalidValuesStatement();
  assertEquals(""String_Node_Str"",clause);
}","/** 
 * Mock Test method for   {@link org.talend.dq.analysis.explore.PatternExplorer#getInvalidValuesStatement()}. when the test for indicator is user define indicator
 */
@Test public void testGetInvalidValuesStatement_2(){
  Analysis analysis=mock(Analysis.class);
  AnalysisParameters parameters=mock(AnalysisParameters.class);
  when(parameters.getExecutionLanguage()).thenReturn(ExecutionLanguage.SQL);
  when(analysis.getParameters()).thenReturn(parameters);
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DataManager dataManager=mock(DataManager.class);
  when(context.getConnection()).thenReturn(dataManager);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getDbmsName()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getDbVersion()).thenReturn(null);
  TdTable table=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdTable();
  table.setName(""String_Node_Str"");
  TdColumn column=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdColumn();
  column.setName(""String_Node_Str"");
  TdSqlDataType tdsql=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdSqlDataType();
  tdsql.setName(""String_Node_Str"");
  tdsql.setJavaDataType(Types.DATE);
  column.setSqlDataType(tdsql);
  table.getOwnedElement().add(column);
  column.setOwner(table);
  UserDefIndicator userDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  UDIndicatorDefinition indicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  indicatorDefinition.setName(""String_Node_Str"");
  userDefIndicator.setName(indicatorDefinition.getName());
  userDefIndicator.setIndicatorDefinition(indicatorDefinition);
  TdExpression newTdExp=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",ViewInvalidValues,null);
  newTdExp.setModificationDate(DateUtils.getCurrentDate(DateUtils.PATTERN_5));
  indicatorDefinition.getViewInvalidValuesExpression().add(newTdExp);
  ChartDataEntity chartDataEntity=new ChartDataEntity(userDefIndicator,""String_Node_Str"",""String_Node_Str"");
  chartDataEntity.setLabelNull(false);
  chartDataEntity.setKey(""String_Node_Str"");
  assertFalse(chartDataEntity.isLabelNull());
  userDefIndicator.setAnalyzedElement(column);
  IndicatorParameters indicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  indicatorParameters.setDateParameters(null);
  userDefIndicator.setParameters(indicatorParameters);
  assertNull(indicatorParameters.getDateParameters());
  PowerMockito.mockStatic(DbmsLanguageFactory.class);
  when(DbmsLanguageFactory.createDbmsLanguage(dataManager)).thenReturn(dbmsLanguage);
  when(DbmsLanguageFactory.compareDbmsLanguage(""String_Node_Str"",""String_Node_Str"")).thenReturn(true);
  when(dbmsLanguage.toQualifiedName(null,null,""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.fillGenericQueryWithColumnsAndTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  RegexPatternExplorer freqExp=new RegexPatternExplorer();
  Assert.assertTrue(freqExp.setAnalysis(analysis));
  freqExp.setEnitty(chartDataEntity);
  String clause=freqExp.getInvalidValuesStatement();
  assertEquals(""String_Node_Str"",clause);
}",0.998468137254902
136790,"/** 
 * Mock Test method for   {@link org.talend.dq.analysis.explore.PatternExplorer#getInvalidRowsStatement()}. when the test for indicator is user define indicator
 */
@Test public void testGetInvalidRowsStatement_2(){
  Analysis analysis=mock(Analysis.class);
  AnalysisParameters parameters=mock(AnalysisParameters.class);
  when(parameters.getExecutionLanguage()).thenReturn(ExecutionLanguage.SQL);
  when(analysis.getParameters()).thenReturn(parameters);
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DataManager dataManager=mock(DataManager.class);
  when(context.getConnection()).thenReturn(dataManager);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getDbmsName()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getDbVersion()).thenReturn(null);
  TdTable table=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdTable();
  table.setName(""String_Node_Str"");
  TdColumn column=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdColumn();
  column.setName(""String_Node_Str"");
  TdSqlDataType tdsql=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdSqlDataType();
  tdsql.setName(""String_Node_Str"");
  tdsql.setJavaDataType(Types.DATE);
  column.setSqlDataType(tdsql);
  table.getOwnedElement().add(column);
  column.setOwner(table);
  UserDefIndicator userDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  UDIndicatorDefinition indicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  indicatorDefinition.setName(""String_Node_Str"");
  userDefIndicator.setName(indicatorDefinition.getName());
  userDefIndicator.setIndicatorDefinition(indicatorDefinition);
  TdExpression newTdExp=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",ViewInvalidRows,null);
  newTdExp.setModificationDate(DateUtils.getCurrentDate(DateUtils.PATTERN_5));
  indicatorDefinition.getViewInvalidRowsExpression().add(newTdExp);
  ChartDataEntity chartDataEntity=new ChartDataEntity(userDefIndicator,""String_Node_Str"",""String_Node_Str"");
  chartDataEntity.setLabelNull(false);
  chartDataEntity.setKey(""String_Node_Str"");
  assertFalse(chartDataEntity.isLabelNull());
  userDefIndicator.setAnalyzedElement(column);
  IndicatorParameters indicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  indicatorParameters.setDateParameters(null);
  userDefIndicator.setParameters(indicatorParameters);
  assertNull(indicatorParameters.getDateParameters());
  PowerMockito.mockStatic(DbmsLanguageFactory.class);
  when(DbmsLanguageFactory.createDbmsLanguage(dataManager)).thenReturn(dbmsLanguage);
  when(DbmsLanguageFactory.compareDbmsLanguage(""String_Node_Str"",""String_Node_Str"")).thenReturn(true);
  when(dbmsLanguage.toQualifiedName(null,null,""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.fillGenericQueryWithColumnsAndTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  PatternExplorer freqExp=new PatternExplorer();
  Assert.assertTrue(freqExp.setAnalysis(analysis));
  freqExp.setEnitty(chartDataEntity);
  String clause=freqExp.getInvalidRowsStatement();
  assertEquals(""String_Node_Str"",clause);
}","/** 
 * Mock Test method for   {@link org.talend.dq.analysis.explore.PatternExplorer#getInvalidRowsStatement()}. when the test for indicator is user define indicator
 */
@Test public void testGetInvalidRowsStatement_2(){
  Analysis analysis=mock(Analysis.class);
  AnalysisParameters parameters=mock(AnalysisParameters.class);
  when(parameters.getExecutionLanguage()).thenReturn(ExecutionLanguage.SQL);
  when(analysis.getParameters()).thenReturn(parameters);
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DataManager dataManager=mock(DataManager.class);
  when(context.getConnection()).thenReturn(dataManager);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getDbmsName()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getDbVersion()).thenReturn(null);
  TdTable table=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdTable();
  table.setName(""String_Node_Str"");
  TdColumn column=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdColumn();
  column.setName(""String_Node_Str"");
  TdSqlDataType tdsql=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdSqlDataType();
  tdsql.setName(""String_Node_Str"");
  tdsql.setJavaDataType(Types.DATE);
  column.setSqlDataType(tdsql);
  table.getOwnedElement().add(column);
  column.setOwner(table);
  UserDefIndicator userDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  UDIndicatorDefinition indicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  indicatorDefinition.setName(""String_Node_Str"");
  userDefIndicator.setName(indicatorDefinition.getName());
  userDefIndicator.setIndicatorDefinition(indicatorDefinition);
  TdExpression newTdExp=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",ViewInvalidRows,null);
  newTdExp.setModificationDate(DateUtils.getCurrentDate(DateUtils.PATTERN_5));
  indicatorDefinition.getViewInvalidRowsExpression().add(newTdExp);
  ChartDataEntity chartDataEntity=new ChartDataEntity(userDefIndicator,""String_Node_Str"",""String_Node_Str"");
  chartDataEntity.setLabelNull(false);
  chartDataEntity.setKey(""String_Node_Str"");
  assertFalse(chartDataEntity.isLabelNull());
  userDefIndicator.setAnalyzedElement(column);
  IndicatorParameters indicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  indicatorParameters.setDateParameters(null);
  userDefIndicator.setParameters(indicatorParameters);
  assertNull(indicatorParameters.getDateParameters());
  PowerMockito.mockStatic(DbmsLanguageFactory.class);
  when(DbmsLanguageFactory.createDbmsLanguage(dataManager)).thenReturn(dbmsLanguage);
  when(DbmsLanguageFactory.compareDbmsLanguage(""String_Node_Str"",""String_Node_Str"")).thenReturn(true);
  when(dbmsLanguage.toQualifiedName(null,null,""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.fillGenericQueryWithColumnsAndTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  RegexPatternExplorer freqExp=new RegexPatternExplorer();
  Assert.assertTrue(freqExp.setAnalysis(analysis));
  freqExp.setEnitty(chartDataEntity);
  String clause=freqExp.getInvalidRowsStatement();
  assertEquals(""String_Node_Str"",clause);
}",0.9984634296250768
136791,"/** 
 * Mock Test method for   {@link org.talend.dq.analysis.explore.PatternExplorer#getValidRowsStatement()}. when the test for indicator is user define indicator
 */
@Test public void testGetValidRowsStatement_2(){
  Analysis analysis=mock(Analysis.class);
  AnalysisParameters parameters=mock(AnalysisParameters.class);
  when(parameters.getExecutionLanguage()).thenReturn(ExecutionLanguage.SQL);
  when(analysis.getParameters()).thenReturn(parameters);
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DataManager dataManager=mock(DataManager.class);
  when(context.getConnection()).thenReturn(dataManager);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getDbmsName()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getDbVersion()).thenReturn(null);
  TdTable table=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdTable();
  table.setName(""String_Node_Str"");
  TdColumn column=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdColumn();
  column.setName(""String_Node_Str"");
  TdSqlDataType tdsql=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdSqlDataType();
  tdsql.setName(""String_Node_Str"");
  tdsql.setJavaDataType(Types.DATE);
  column.setSqlDataType(tdsql);
  table.getOwnedElement().add(column);
  column.setOwner(table);
  UserDefIndicator userDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  UDIndicatorDefinition indicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  indicatorDefinition.setName(""String_Node_Str"");
  userDefIndicator.setName(indicatorDefinition.getName());
  userDefIndicator.setIndicatorDefinition(indicatorDefinition);
  TdExpression newTdExp=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",ViewValidRows,null);
  newTdExp.setModificationDate(DateUtils.getCurrentDate(DateUtils.PATTERN_5));
  indicatorDefinition.getViewValidRowsExpression().add(newTdExp);
  ChartDataEntity chartDataEntity=new ChartDataEntity(userDefIndicator,""String_Node_Str"",""String_Node_Str"");
  chartDataEntity.setLabelNull(false);
  chartDataEntity.setKey(""String_Node_Str"");
  assertFalse(chartDataEntity.isLabelNull());
  userDefIndicator.setAnalyzedElement(column);
  IndicatorParameters indicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  indicatorParameters.setDateParameters(null);
  userDefIndicator.setParameters(indicatorParameters);
  assertNull(indicatorParameters.getDateParameters());
  PowerMockito.mockStatic(DbmsLanguageFactory.class);
  when(DbmsLanguageFactory.createDbmsLanguage(dataManager)).thenReturn(dbmsLanguage);
  when(DbmsLanguageFactory.compareDbmsLanguage(""String_Node_Str"",""String_Node_Str"")).thenReturn(true);
  when(dbmsLanguage.toQualifiedName(null,null,""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.fillGenericQueryWithColumnsAndTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  PatternExplorer freqExp=new PatternExplorer();
  Assert.assertTrue(freqExp.setAnalysis(analysis));
  freqExp.setEnitty(chartDataEntity);
  String clause=freqExp.getValidRowsStatement();
  assertEquals(""String_Node_Str"",clause);
}","/** 
 * Mock Test method for   {@link org.talend.dq.analysis.explore.PatternExplorer#getValidRowsStatement()}. when the test for indicator is user define indicator
 */
@Test public void testGetValidRowsStatement_2(){
  Analysis analysis=mock(Analysis.class);
  AnalysisParameters parameters=mock(AnalysisParameters.class);
  when(parameters.getExecutionLanguage()).thenReturn(ExecutionLanguage.SQL);
  when(analysis.getParameters()).thenReturn(parameters);
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DataManager dataManager=mock(DataManager.class);
  when(context.getConnection()).thenReturn(dataManager);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getDbmsName()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getDbVersion()).thenReturn(null);
  TdTable table=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdTable();
  table.setName(""String_Node_Str"");
  TdColumn column=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdColumn();
  column.setName(""String_Node_Str"");
  TdSqlDataType tdsql=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdSqlDataType();
  tdsql.setName(""String_Node_Str"");
  tdsql.setJavaDataType(Types.DATE);
  column.setSqlDataType(tdsql);
  table.getOwnedElement().add(column);
  column.setOwner(table);
  UserDefIndicator userDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  UDIndicatorDefinition indicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  indicatorDefinition.setName(""String_Node_Str"");
  userDefIndicator.setName(indicatorDefinition.getName());
  userDefIndicator.setIndicatorDefinition(indicatorDefinition);
  TdExpression newTdExp=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",ViewValidRows,null);
  newTdExp.setModificationDate(DateUtils.getCurrentDate(DateUtils.PATTERN_5));
  indicatorDefinition.getViewValidRowsExpression().add(newTdExp);
  ChartDataEntity chartDataEntity=new ChartDataEntity(userDefIndicator,""String_Node_Str"",""String_Node_Str"");
  chartDataEntity.setLabelNull(false);
  chartDataEntity.setKey(""String_Node_Str"");
  assertFalse(chartDataEntity.isLabelNull());
  userDefIndicator.setAnalyzedElement(column);
  IndicatorParameters indicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  indicatorParameters.setDateParameters(null);
  userDefIndicator.setParameters(indicatorParameters);
  assertNull(indicatorParameters.getDateParameters());
  PowerMockito.mockStatic(DbmsLanguageFactory.class);
  when(DbmsLanguageFactory.createDbmsLanguage(dataManager)).thenReturn(dbmsLanguage);
  when(DbmsLanguageFactory.compareDbmsLanguage(""String_Node_Str"",""String_Node_Str"")).thenReturn(true);
  when(dbmsLanguage.toQualifiedName(null,null,""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.fillGenericQueryWithColumnsAndTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  RegexPatternExplorer freqExp=new RegexPatternExplorer();
  Assert.assertTrue(freqExp.setAnalysis(analysis));
  freqExp.setEnitty(chartDataEntity);
  String clause=freqExp.getValidRowsStatement();
  assertEquals(""String_Node_Str"",clause);
}",0.99845869297164
136792,"/** 
 * Test method for   {@link org.talend.dq.analysis.explore.PatternExplorer#PatternExplorer()}.
 */
@Test public void testPatternExplorer(){
  try {
    PatternExplorer pe=new PatternExplorer();
    Assert.assertNotNull(pe);
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
}","/** 
 * Test method for   {@link org.talend.dq.analysis.explore.PatternExplorer#PatternExplorer()}.
 */
@Test public void testPatternExplorer(){
  try {
    RegexPatternExplorer pe=new RegexPatternExplorer();
    Assert.assertNotNull(pe);
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
}",0.9829931972789115
136793,"/** 
 * DOC msjian Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  DataExplorerTestHelper.initDataExplorer();
  patternExplorer=new PatternExplorer();
  PatternMatchingIndicator indicator=mock(PatternMatchingIndicator.class);
  when(indicator.eClass()).thenReturn(null);
  ModelElement element=mock(ModelElement.class);
  when(element.getName()).thenReturn(""String_Node_Str"");
  when(indicator.getAnalyzedElement()).thenReturn(element);
  indicator.setAnalyzedElement(element);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getRegexPatternString(indicator)).thenReturn(RES_VALIED_ROWS);
  when(dbmsLanguage.quote(anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexNotLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getFunctionReturnValue()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.where()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.and()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.from()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.or()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.isNull()).thenReturn(""String_Node_Str"");
  Analysis analysis=DataExplorerTestHelper.getAnalysis(indicator,dbmsLanguage);
  patternExplorer.setAnalysis(analysis);
  ChartDataEntity cdEntity=mock(ChartDataEntity.class);
  when(cdEntity.getIndicator()).thenReturn(indicator);
  PowerMockito.mockStatic(IndicatorEnum.class);
  when(IndicatorEnum.findIndicatorEnum(indicator.eClass())).thenReturn(IndicatorEnum.RowCountIndicatorEnum);
  patternExplorer.setEnitty(cdEntity);
  Expression instantiatedExpression=mock(Expression.class);
  when(dbmsLanguage.getInstantiatedExpression(indicator)).thenReturn(instantiatedExpression);
  when(instantiatedExpression.getBody()).thenReturn(""String_Node_Str"");
}","/** 
 * DOC msjian Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  DataExplorerTestHelper.initDataExplorer();
  patternExplorer=new RegexPatternExplorer();
  PatternMatchingIndicator indicator=mock(PatternMatchingIndicator.class);
  when(indicator.eClass()).thenReturn(null);
  ModelElement element=mock(ModelElement.class);
  when(element.getName()).thenReturn(""String_Node_Str"");
  when(indicator.getAnalyzedElement()).thenReturn(element);
  indicator.setAnalyzedElement(element);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getRegexPatternString(indicator)).thenReturn(RES_VALIED_ROWS);
  when(dbmsLanguage.quote(anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexNotLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getFunctionReturnValue()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.where()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.and()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.from()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.or()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.isNull()).thenReturn(""String_Node_Str"");
  Analysis analysis=DataExplorerTestHelper.getAnalysis(indicator,dbmsLanguage);
  patternExplorer.setAnalysis(analysis);
  ChartDataEntity cdEntity=mock(ChartDataEntity.class);
  when(cdEntity.getIndicator()).thenReturn(indicator);
  PowerMockito.mockStatic(IndicatorEnum.class);
  when(IndicatorEnum.findIndicatorEnum(indicator.eClass())).thenReturn(IndicatorEnum.RowCountIndicatorEnum);
  patternExplorer.setEnitty(cdEntity);
  Expression instantiatedExpression=mock(Expression.class);
  when(dbmsLanguage.getInstantiatedExpression(indicator)).thenReturn(instantiatedExpression);
  when(instantiatedExpression.getBody()).thenReturn(""String_Node_Str"");
}",0.998719590268886
136794,"/** 
 * Mock Test method for   {@link org.talend.dq.analysis.explore.PatternExplorer#getValidValuesStatement()}. when the test for indicator is user define indicator
 */
@Test public void testGetValidValuesStatement_2(){
  Analysis analysis=mock(Analysis.class);
  AnalysisParameters parameters=mock(AnalysisParameters.class);
  when(parameters.getExecutionLanguage()).thenReturn(ExecutionLanguage.SQL);
  when(analysis.getParameters()).thenReturn(parameters);
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DataManager dataManager=mock(DataManager.class);
  when(context.getConnection()).thenReturn(dataManager);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getDbmsName()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getDbVersion()).thenReturn(null);
  TdTable table=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdTable();
  table.setName(""String_Node_Str"");
  TdColumn column=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdColumn();
  column.setName(""String_Node_Str"");
  TdSqlDataType tdsql=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdSqlDataType();
  tdsql.setName(""String_Node_Str"");
  tdsql.setJavaDataType(Types.DATE);
  column.setSqlDataType(tdsql);
  table.getOwnedElement().add(column);
  column.setOwner(table);
  UserDefIndicator userDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  UDIndicatorDefinition indicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  indicatorDefinition.setName(""String_Node_Str"");
  userDefIndicator.setName(indicatorDefinition.getName());
  userDefIndicator.setIndicatorDefinition(indicatorDefinition);
  TdExpression newTdExp=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",ViewValidValues,null);
  newTdExp.setModificationDate(DateUtils.getCurrentDate(DateUtils.PATTERN_5));
  indicatorDefinition.getViewValidValuesExpression().add(newTdExp);
  ChartDataEntity chartDataEntity=new ChartDataEntity(userDefIndicator,""String_Node_Str"",""String_Node_Str"");
  chartDataEntity.setLabelNull(false);
  chartDataEntity.setKey(""String_Node_Str"");
  assertFalse(chartDataEntity.isLabelNull());
  userDefIndicator.setAnalyzedElement(column);
  IndicatorParameters indicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  indicatorParameters.setDateParameters(null);
  userDefIndicator.setParameters(indicatorParameters);
  assertNull(indicatorParameters.getDateParameters());
  PowerMockito.mockStatic(DbmsLanguageFactory.class);
  when(DbmsLanguageFactory.createDbmsLanguage(dataManager)).thenReturn(dbmsLanguage);
  when(DbmsLanguageFactory.compareDbmsLanguage(""String_Node_Str"",""String_Node_Str"")).thenReturn(true);
  when(dbmsLanguage.toQualifiedName(null,null,""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.fillGenericQueryWithColumnsAndTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  PatternExplorer freqExp=new PatternExplorer();
  Assert.assertTrue(freqExp.setAnalysis(analysis));
  freqExp.setEnitty(chartDataEntity);
  String clause=freqExp.getValidValuesStatement();
  assertEquals(""String_Node_Str"",clause);
}","/** 
 * Mock Test method for   {@link org.talend.dq.analysis.explore.PatternExplorer#getValidValuesStatement()}. when the test for indicator is user define indicator
 */
@Test public void testGetValidValuesStatement_2(){
  Analysis analysis=mock(Analysis.class);
  AnalysisParameters parameters=mock(AnalysisParameters.class);
  when(parameters.getExecutionLanguage()).thenReturn(ExecutionLanguage.SQL);
  when(analysis.getParameters()).thenReturn(parameters);
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DataManager dataManager=mock(DataManager.class);
  when(context.getConnection()).thenReturn(dataManager);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getDbmsName()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getDbVersion()).thenReturn(null);
  TdTable table=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdTable();
  table.setName(""String_Node_Str"");
  TdColumn column=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdColumn();
  column.setName(""String_Node_Str"");
  TdSqlDataType tdsql=org.talend.cwm.relational.RelationalFactory.eINSTANCE.createTdSqlDataType();
  tdsql.setName(""String_Node_Str"");
  tdsql.setJavaDataType(Types.DATE);
  column.setSqlDataType(tdsql);
  table.getOwnedElement().add(column);
  column.setOwner(table);
  UserDefIndicator userDefIndicator=IndicatorSqlFactory.eINSTANCE.createUserDefIndicator();
  UDIndicatorDefinition indicatorDefinition=UserdefineFactory.eINSTANCE.createUDIndicatorDefinition();
  indicatorDefinition.setName(""String_Node_Str"");
  userDefIndicator.setName(indicatorDefinition.getName());
  userDefIndicator.setIndicatorDefinition(indicatorDefinition);
  TdExpression newTdExp=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",ViewValidValues,null);
  newTdExp.setModificationDate(DateUtils.getCurrentDate(DateUtils.PATTERN_5));
  indicatorDefinition.getViewValidValuesExpression().add(newTdExp);
  ChartDataEntity chartDataEntity=new ChartDataEntity(userDefIndicator,""String_Node_Str"",""String_Node_Str"");
  chartDataEntity.setLabelNull(false);
  chartDataEntity.setKey(""String_Node_Str"");
  assertFalse(chartDataEntity.isLabelNull());
  userDefIndicator.setAnalyzedElement(column);
  IndicatorParameters indicatorParameters=IndicatorsFactory.eINSTANCE.createIndicatorParameters();
  indicatorParameters.setDateParameters(null);
  userDefIndicator.setParameters(indicatorParameters);
  assertNull(indicatorParameters.getDateParameters());
  PowerMockito.mockStatic(DbmsLanguageFactory.class);
  when(DbmsLanguageFactory.createDbmsLanguage(dataManager)).thenReturn(dbmsLanguage);
  when(DbmsLanguageFactory.compareDbmsLanguage(""String_Node_Str"",""String_Node_Str"")).thenReturn(true);
  when(dbmsLanguage.toQualifiedName(null,null,""String_Node_Str"")).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.fillGenericQueryWithColumnsAndTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")).thenReturn(""String_Node_Str"");
  RegexPatternExplorer freqExp=new RegexPatternExplorer();
  Assert.assertTrue(freqExp.setAnalysis(analysis));
  freqExp.setEnitty(chartDataEntity);
  String clause=freqExp.getValidValuesStatement();
  assertEquals(""String_Node_Str"",clause);
}",0.9984634296250768
136795,"/** 
 * {@link org.talend.dq.dbms.DbmsLanguage#extractRegularExpressionFunction(Expression)}. case 7:Other database expression
 */
@Test public void testExtractRegularExpressionFunctionForOthers(){
  DbmsLanguage netezzaDbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(""String_Node_Str"",""String_Node_Str"");
  Expression createExpression=CoreFactory.eINSTANCE.createExpression();
  createExpression.setBody(""String_Node_Str"");
  try {
    netezzaDbmsLanguage.extractRegularExpressionFunction(createExpression,""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    return;
  }
  Assert.fail(""String_Node_Str"");
}","/** 
 * {@link org.talend.dq.dbms.DbmsLanguage#extractRegularExpressionFunction(Expression)}. case 7:Other database expression
 */
@Test public void testExtractRegularExpressionFunctionForOthers(){
  DbmsLanguage netezzaDbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(""String_Node_Str"",""String_Node_Str"");
  Expression createExpression=CoreFactory.eINSTANCE.createExpression();
  createExpression.setBody(""String_Node_Str"");
  try {
    netezzaDbmsLanguage.extractRegularExpressionFunction(createExpression,""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    Assert.fail(""String_Node_Str"");
  }
}",0.9440894568690096
136796,"/** 
 * {@link org.talend.dq.dbms.DbmsLanguage#extractRegularExpressionFunction(Expression)}. case 6:Netezza database expression
 */
@Test public void testExtractRegularExpressionFunctionForNetezza(){
  DbmsLanguage netezzaDbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(SupportDBUrlType.NETEZZADEFAULTURL);
  Expression createExpression=CoreFactory.eINSTANCE.createExpression();
  createExpression.setBody(""String_Node_Str"");
  try {
    netezzaDbmsLanguage.extractRegularExpressionFunction(createExpression,""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    return;
  }
  Assert.fail(""String_Node_Str"");
}","/** 
 * {@link org.talend.dq.dbms.DbmsLanguage#extractRegularExpressionFunction(Expression)}. case 6:Netezza database expression
 */
@Test public void testExtractRegularExpressionFunctionForNetezza(){
  DbmsLanguage netezzaDbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(SupportDBUrlType.NETEZZADEFAULTURL);
  Expression createExpression=CoreFactory.eINSTANCE.createExpression();
  createExpression.setBody(""String_Node_Str"");
  try {
    netezzaDbmsLanguage.extractRegularExpressionFunction(createExpression,""String_Node_Str"");
  }
 catch (  UnsupportedOperationException e) {
    Assert.fail(""String_Node_Str"");
  }
}",0.9442675159235668
136797,"/** 
 * {@link org.talend.dq.dbms.DbmsLanguage#setFunctionReturnValue(Expression)}. case 6: dbmsLanguage is sql
 */
@Test public void testSetFunctionReturnValueCase6(){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(""String_Node_Str"",""String_Node_Str"");
  Expression createExpression=CoreFactory.eINSTANCE.createExpression();
  createExpression.setBody(""String_Node_Str"");
  dbmsLanguage.setFunctionReturnValue(dbmsLanguage.extractRegularExpressionFunctionReturnValue(createExpression,""String_Node_Str""));
  String regularfunctionReturnValue=dbmsLanguage.getFunctionReturnValue();
  Assert.assertEquals(PluginConstant.EMPTY_STRING,regularfunctionReturnValue);
}","/** 
 * {@link org.talend.dq.dbms.DbmsLanguage#setFunctionReturnValue(Expression)}. case 6: dbmsLanguage is sql
 */
@Test public void testSetFunctionReturnValueCase6(){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(""String_Node_Str"",""String_Node_Str"");
  Expression createExpression=CoreFactory.eINSTANCE.createExpression();
  createExpression.setBody(""String_Node_Str"");
  dbmsLanguage.setFunctionReturnValue(dbmsLanguage.extractRegularExpressionFunctionReturnValue(createExpression,""String_Node_Str""));
  String regularfunctionReturnValue=dbmsLanguage.getFunctionReturnValue();
  Assert.assertEquals(""String_Node_Str"",regularfunctionReturnValue);
}",0.9689349112426036
136798,"private void setConnectionState(final AbstractAnalysisMetadataPage masterPage,final DataManager dataManager){
  DataManager newDataManager=dataManager;
  final DataManager fianlDataManager;
  if (newDataManager != null) {
    if (newDataManager.eIsProxy()) {
      newDataManager=(DataManager)EObjectHelper.resolveObject(newDataManager);
    }
    Property prop=PropertyHelper.getProperty(newDataManager);
    masterPage.reloadDataproviderAndFillConnCombo();
    fianlDataManager=newDataManager;
    Integer index=0;
    if (SwitchHelpers.CONNECTION_SWITCH.doSwitch(newDataManager) != null) {
      index=(Integer)masterPage.getConnCombo().getData(prop.getDisplayName() + RepositoryNodeHelper.getConnectionType(newDataManager));
    }
    if (index != null) {
      masterPage.getConnCombo().select(index);
    }
    if (prop != null && prop.getItem() != null && prop.getItem().getState() != null && prop.getItem().getState().isDeleted()) {
      masterPage.getLabelConnDeleted().setVisible(true);
      masterPage.getLabelConnDeleted().setText(DefaultMessagesImpl.getString(""String_Node_Str"",prop.getDisplayName()));
    }
 else {
      masterPage.getLabelConnDeleted().setVisible(false);
    }
    if (selectionListener == null) {
      selectionListener=new SelectionListener(){
        private int prevSelect=masterPage.getConnCombo().getSelectionIndex();
        private Connection dataProvider=(Connection)fianlDataManager;
        public void widgetDefaultSelected(        SelectionEvent e){
          widgetSelected(e);
        }
        public void widgetSelected(        SelectionEvent e){
          ReturnCode rc=selectedObjectAvailable();
          if (rc.isOk()) {
            if (dataProvider.eIsProxy()) {
              dataProvider=(Connection)EObjectHelper.resolveObject(dataProvider);
            }
            dataProvider=callChangeConnectionAction(masterPage,prevSelect,dataProvider);
            prevSelect=masterPage.getConnCombo().getSelectionIndex();
          }
 else {
            MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",rc.getMessage()));
            masterPage.reloadDataproviderAndFillConnCombo();
            masterPage.getConnCombo().removeSelectionListener(selectionListener);
            String uuid=ResourceHelper.getUUID(dataProvider);
            if (uuid != null) {
              int itemCount=masterPage.getConnCombo().getItemCount();
              for (int i=0; i < itemCount; i++) {
                Object connectionObj=masterPage.getConnCombo().getData(String.valueOf(i));
                RepositoryNode repoNode=(RepositoryNode)connectionObj;
                Connection connection=getConnectionFromRepositoryNode(repoNode);
                if (connection != null && uuid.endsWith(ResourceHelper.getUUID(connection))) {
                  masterPage.getConnCombo().select(i);
                  break;
                }
              }
            }
            masterPage.getConnCombo().addSelectionListener(selectionListener);
          }
        }
        /** 
 * check the connection is available or not(the connection is exist and not proxy, don't check the connection).
 * @return a ReturnCode, the message is the connection label
 */
        private ReturnCode selectedObjectAvailable(){
          ReturnCode rc=new ReturnCode(""String_Node_Str"",Boolean.FALSE);
          RepositoryNode repoNode=masterPage.getConnComboSelectNode();
          rc.setMessage(repoNode.getLabel());
          Connection connection=getConnectionFromRepositoryNode(repoNode);
          if (connection != null && !connection.eIsProxy()) {
            rc.setOk(true);
          }
          return rc;
        }
        /** 
 * DOC xqliu Comment method ""getConnectionFromRepositoryNode"".
 * @param repoNode
 * @return
 */
        private Connection getConnectionFromRepositoryNode(        RepositoryNode repoNode){
          Connection connection=null;
          IRepositoryViewObject repoViewObject=repoNode.getObject();
          if (repoViewObject != null) {
            Property property=repoViewObject.getProperty();
            if (property != null) {
              Item item=property.getItem();
              if (item != null && item instanceof ConnectionItem) {
                connection=((ConnectionItem)item).getConnection();
              }
            }
          }
          return connection;
        }
      }
;
      masterPage.getConnCombo().addSelectionListener(selectionListener);
    }
  }
 else {
    masterPage.getConnCombo().setText(""String_Node_Str"");
  }
}","private void setConnectionState(final AbstractAnalysisMetadataPage masterPage,final DataManager dataManager){
  DataManager newDataManager=dataManager;
  final DataManager fianlDataManager;
  if (newDataManager != null) {
    if (newDataManager.eIsProxy()) {
      newDataManager=(DataManager)EObjectHelper.resolveObject(newDataManager);
    }
    Property prop=PropertyHelper.getProperty(newDataManager);
    masterPage.reloadDataproviderAndFillConnCombo();
    fianlDataManager=newDataManager;
    Integer index=0;
    if (SwitchHelpers.CONNECTION_SWITCH.doSwitch(newDataManager) != null) {
      String displayName=prop.getDisplayName();
      DQRepositoryNode node=(DQRepositoryNode)RepositoryNodeHelper.recursiveFind(prop);
      if (!node.getProject().isMainProject()) {
        displayName+=node.getDisplayProjectName();
      }
      index=(Integer)masterPage.getConnCombo().getData(displayName + RepositoryNodeHelper.getConnectionType(newDataManager));
    }
    if (index != null) {
      masterPage.getConnCombo().select(index);
    }
    if (prop != null && prop.getItem() != null && prop.getItem().getState() != null && prop.getItem().getState().isDeleted()) {
      masterPage.getLabelConnDeleted().setVisible(true);
      masterPage.getLabelConnDeleted().setText(DefaultMessagesImpl.getString(""String_Node_Str"",prop.getDisplayName()));
    }
 else {
      masterPage.getLabelConnDeleted().setVisible(false);
    }
    if (selectionListener == null) {
      selectionListener=new SelectionListener(){
        private int prevSelect=masterPage.getConnCombo().getSelectionIndex();
        private Connection dataProvider=(Connection)fianlDataManager;
        public void widgetDefaultSelected(        SelectionEvent e){
          widgetSelected(e);
        }
        public void widgetSelected(        SelectionEvent e){
          ReturnCode rc=selectedObjectAvailable();
          if (rc.isOk()) {
            if (dataProvider.eIsProxy()) {
              dataProvider=(Connection)EObjectHelper.resolveObject(dataProvider);
            }
            dataProvider=callChangeConnectionAction(masterPage,prevSelect,dataProvider);
            prevSelect=masterPage.getConnCombo().getSelectionIndex();
          }
 else {
            MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",rc.getMessage()));
            masterPage.reloadDataproviderAndFillConnCombo();
            masterPage.getConnCombo().removeSelectionListener(selectionListener);
            String uuid=ResourceHelper.getUUID(dataProvider);
            if (uuid != null) {
              int itemCount=masterPage.getConnCombo().getItemCount();
              for (int i=0; i < itemCount; i++) {
                Object connectionObj=masterPage.getConnCombo().getData(String.valueOf(i));
                RepositoryNode repoNode=(RepositoryNode)connectionObj;
                Connection connection=getConnectionFromRepositoryNode(repoNode);
                if (connection != null && uuid.endsWith(ResourceHelper.getUUID(connection))) {
                  masterPage.getConnCombo().select(i);
                  break;
                }
              }
            }
            masterPage.getConnCombo().addSelectionListener(selectionListener);
          }
        }
        /** 
 * check the connection is available or not(the connection is exist and not proxy, don't check the connection).
 * @return a ReturnCode, the message is the connection label
 */
        private ReturnCode selectedObjectAvailable(){
          ReturnCode rc=new ReturnCode(""String_Node_Str"",Boolean.FALSE);
          RepositoryNode repoNode=masterPage.getConnComboSelectNode();
          rc.setMessage(repoNode.getLabel());
          Connection connection=getConnectionFromRepositoryNode(repoNode);
          if (connection != null && !connection.eIsProxy()) {
            rc.setOk(true);
          }
          return rc;
        }
        /** 
 * DOC xqliu Comment method ""getConnectionFromRepositoryNode"".
 * @param repoNode
 * @return
 */
        private Connection getConnectionFromRepositoryNode(        RepositoryNode repoNode){
          Connection connection=null;
          IRepositoryViewObject repoViewObject=repoNode.getObject();
          if (repoViewObject != null) {
            Property property=repoViewObject.getProperty();
            if (property != null) {
              Item item=property.getItem();
              if (item != null && item instanceof ConnectionItem) {
                connection=((ConnectionItem)item).getConnection();
              }
            }
          }
          return connection;
        }
      }
;
      masterPage.getConnCombo().addSelectionListener(selectionListener);
    }
  }
 else {
    masterPage.getConnCombo().setText(""String_Node_Str"");
  }
}",0.972961509914113
136799,"/** 
 * Get query string with prefix (catalog/schema.table.column) given column array.
 * @param columns
 * @return
 */
public String getQueryColumnsWithPrefix(TdColumn[] columns){
  String columnClause=PluginConstant.EMPTY_STRING;
  if (columns.length == 0) {
    return columnClause;
  }
  ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(columns[0]);
  String tableName=getQueryColumnSetWithPrefix(columnSet);
  for (  TdColumn column : columns) {
    columnClause+=tableName + DOT + quote(column.getName())+ PluginConstant.COMMA_STRING;
  }
  columnClause=columnClause.substring(0,columnClause.length() - 1);
  return columnClause;
}","/** 
 * Get query string with prefix (catalog/schema.table.column) given column array.
 * @param columns
 * @return
 */
public String getQueryColumnsWithPrefix(TdColumn[] columns){
  String columnClause=PluginConstant.EMPTY_STRING;
  if (columns.length == 0) {
    return columnClause;
  }
  ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(columns[0]);
  String tableName=getQueryColumnSetWithPrefix(columnSet);
  for (  TdColumn column : columns) {
    columnClause+=tableName + DOT + quote(column.getName())+ getSeparatedCharacter();
  }
  columnClause=columnClause.substring(0,columnClause.length() - 1);
  return columnClause;
}",0.9612403100775194
136800,"protected String getQueryColumns(TdColumn[] columns){
  String columnClause=PluginConstant.EMPTY_STRING;
  for (  TdColumn column : columns) {
    columnClause+=quote(column.getName()) + PluginConstant.COMMA_STRING;
  }
  columnClause=columnClause.substring(0,columnClause.length() - 1);
  return columnClause;
}","protected String getQueryColumns(TdColumn[] columns){
  String columnClause=PluginConstant.EMPTY_STRING;
  for (  TdColumn column : columns) {
    columnClause+=quote(column.getName()) + getSeparatedCharacter();
  }
  columnClause=columnClause.substring(0,columnClause.length() - 1);
  return columnClause;
}",0.9225806451612903
136801,"/** 
 * the modelelement can belong to current project or referenced project.
 * @param analysis
 * @return
 */
private static org.talend.core.model.general.Project getInWhichProject(ModelElement modelElement){
  if (modelElement instanceof DatabaseConnection) {
    if (modelElement.eIsProxy()) {
      modelElement=(ModelElement)EObjectHelper.resolveObject(modelElement);
    }
    String projectName=modelElement.eResource().getURI().segment(1);
    java.util.Set<Project> allProjects=ProxyRepositoryManager.getInstance().getAllProjects();
    for (    Project project : allProjects) {
      if (project.getTechnicalLabel().equals(projectName)) {
        return project;
      }
    }
  }
  Property property=PropertyHelper.getProperty(modelElement);
  org.talend.core.model.properties.Project project=ProjectManager.getInstance().getProject(property);
  return new org.talend.core.model.general.Project(project);
}","/** 
 * the modelelement can belong to current project or referenced project.
 * @param analysis
 * @return
 */
private static org.talend.core.model.general.Project getInWhichProject(ModelElement modelElement){
  if (modelElement instanceof DatabaseConnection || modelElement instanceof DelimitedFileConnection) {
    if (modelElement.eIsProxy()) {
      modelElement=(ModelElement)EObjectHelper.resolveObject(modelElement);
    }
    String projectName=modelElement.eResource().getURI().segment(1);
    java.util.Set<Project> allProjects=ProxyRepositoryManager.getInstance().getAllProjects();
    for (    Project project : allProjects) {
      if (project.getTechnicalLabel().equals(projectName)) {
        return project;
      }
    }
  }
  Property property=PropertyHelper.getProperty(modelElement);
  org.talend.core.model.properties.Project project=ProjectManager.getInstance().getProject(property);
  return new org.talend.core.model.general.Project(project);
}",0.972972972972973
136802,"@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
      StringBuilder sbu=new StringBuilder(i.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < parameter; ++j) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,parameter,remp.toString());
      return Integer.parseInt(sbu.toString());
    }
 else {
      return 0;
    }
  }
}","@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      if (i == 0) {
        return rnd.nextInt(9);
      }
 else {
        parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
        StringBuilder sbu=new StringBuilder(i.toString());
        StringBuilder remp=new StringBuilder(EMPTY_STRING);
        for (int j=0; j < parameter; ++j) {
          remp.append(rnd.nextInt(9));
        }
        sbu.replace(0,parameter,remp.toString());
        return Integer.parseInt(sbu.toString());
      }
    }
 else {
      return 0;
    }
  }
}",0.925255704169945
136803,"@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
      StringBuilder sbu=new StringBuilder(l.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < parameter; ++i) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,parameter,remp.toString());
      return Long.parseLong(sbu.toString());
    }
 else {
      return 0L;
    }
  }
}","@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      if (l == 0L) {
        return (long)rnd.nextInt(9);
      }
 else {
        parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
        StringBuilder sbu=new StringBuilder(l.toString());
        StringBuilder remp=new StringBuilder(EMPTY_STRING);
        for (int i=0; i < parameter; ++i) {
          remp.append(rnd.nextInt(9));
        }
        sbu.replace(0,parameter,remp.toString());
        return Long.parseLong(sbu.toString());
      }
    }
 else {
      return 0L;
    }
  }
}",0.9193037974683544
136804,"@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
      StringBuilder sbui=new StringBuilder(i.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < parameter; ++j) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
      return Integer.parseInt(sbui.toString());
    }
 else {
      return 0;
    }
  }
}","@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      if (i == 0) {
        return rnd.nextInt(9);
      }
 else {
        parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
        StringBuilder sbui=new StringBuilder(i.toString());
        StringBuilder rempl=new StringBuilder(EMPTY_STRING);
        for (int j=0; j < parameter; ++j) {
          rempl.append(rnd.nextInt(9));
        }
        sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
        return Integer.parseInt(sbui.toString());
      }
    }
 else {
      return 0;
    }
  }
}",0.9320388349514565
136805,"@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
      StringBuilder sbui=new StringBuilder(l.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < parameter; ++i) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
      return Long.parseLong(sbui.toString());
    }
 else {
      return 0L;
    }
  }
}","@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      if (l == 0L) {
        return (long)rnd.nextInt(9);
      }
 else {
        parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
        StringBuilder sbui=new StringBuilder(l.toString());
        StringBuilder rempl=new StringBuilder(EMPTY_STRING);
        for (int i=0; i < parameter; ++i) {
          rempl.append(rnd.nextInt(9));
        }
        sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
        return Long.parseLong(sbui.toString());
      }
    }
 else {
      return 0L;
    }
  }
}",0.9264264264264264
136806,"@Override public String generateMaskedRow(String str){
  StringBuilder sb=new StringBuilder(EMPTY_STRING);
  if ((str == null) || EMPTY_STRING.equals(str) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str)) {
      String[] address=str.split(""String_Node_Str"");
      for (      String tmp : address) {
        if (Arrays.asList(keys).contains(tmp)) {
          sb.append(tmp + ""String_Node_Str"");
        }
 else {
          for (int i=0; i < tmp.length(); ++i) {
            if (Character.isDigit(tmp.charAt(i))) {
              sb.append(Character.forDigit(rnd.nextInt(9),10));
            }
 else {
              sb.append(""String_Node_Str"");
            }
          }
          sb.append(""String_Node_Str"");
        }
      }
      return sb.deleteCharAt(sb.length() - 1).toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  StringBuilder sb=new StringBuilder(EMPTY_STRING);
  if ((str == null) || EMPTY_STRING.equals(str) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && !(""String_Node_Str"").equals(str)) {
      String[] address=str.split(""String_Node_Str"");
      for (      String tmp : address) {
        if (Arrays.asList(keys).contains(tmp)) {
          sb.append(tmp + ""String_Node_Str"");
        }
 else {
          for (int i=0; i < tmp.length(); ++i) {
            if (Character.isDigit(tmp.charAt(i))) {
              sb.append(Character.forDigit(rnd.nextInt(9),10));
            }
 else {
              sb.append(""String_Node_Str"");
            }
          }
          sb.append(""String_Node_Str"");
        }
      }
      return sb.deleteCharAt(sb.length() - 1).toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.98
136807,"@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      if (integerParam > str.length()) {
        integerParam=str.length();
      }
      return str.substring(integerParam);
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0 && integerParam < str.length()) {
      return str.substring(integerParam);
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.9147496617050068
136808,"@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      if (integerParam > str.length()) {
        integerParam=str.length();
      }
      return str.substring(0,str.length() - integerParam);
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0 && integerParam < str.length()) {
      return str.substring(0,str.length() - integerParam);
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.9184993531694696
136809,"@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      if ((int)Math.log10(i) + 1 <= integerParam) {
        integerParam=(int)Math.log10(i) + 1;
      }
      StringBuilder sbu=new StringBuilder(i.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < integerParam; ++j) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,integerParam,remp.toString());
      return Integer.parseInt(sbu.toString());
    }
 else {
      return 0;
    }
  }
}","@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
      StringBuilder sbu=new StringBuilder(i.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < parameter; ++j) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,parameter,remp.toString());
      return Integer.parseInt(sbu.toString());
    }
 else {
      return 0;
    }
  }
}",0.9087866108786612
136810,"@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      if ((int)Math.log10(l) + 1 < integerParam) {
        integerParam=(int)Math.log10(l) + 1;
      }
      StringBuilder sbu=new StringBuilder(l.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < integerParam; ++i) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,integerParam,remp.toString());
      return Long.parseLong(sbu.toString());
    }
 else {
      return 0L;
    }
  }
}","@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
      StringBuilder sbu=new StringBuilder(l.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < parameter; ++i) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,parameter,remp.toString());
      return Long.parseLong(sbu.toString());
    }
 else {
      return 0L;
    }
  }
}",0.9067796610169492
136811,"@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      if (integerParam > str.length()) {
        integerParam=str.length();
      }
      StringBuilder sb=new StringBuilder(str);
      StringBuilder repl=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < integerParam; ++i) {
        if (Character.isDigit(str.charAt(i))) {
          repl.append(rnd.nextInt(9));
        }
 else         if (Character.isUpperCase(str.charAt(i))) {
          repl.append(UPPER.charAt(rnd.nextInt(26)));
        }
 else         if (Character.isLowerCase(str.charAt(i))) {
          repl.append(LOWER.charAt(rnd.nextInt(26)));
        }
 else {
          repl.append(str.charAt(i));
        }
      }
      sb.replace(0,integerParam,repl.toString());
      return sb.toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      parameter=integerParam > str.length() ? str.length() : integerParam;
      StringBuilder sb=new StringBuilder(str);
      StringBuilder repl=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < parameter; ++i) {
        if (Character.isDigit(str.charAt(i))) {
          repl.append(rnd.nextInt(9));
        }
 else         if (Character.isUpperCase(str.charAt(i))) {
          repl.append(UPPER.charAt(rnd.nextInt(26)));
        }
 else         if (Character.isLowerCase(str.charAt(i))) {
          repl.append(LOWER.charAt(rnd.nextInt(26)));
        }
 else {
          repl.append(str.charAt(i));
        }
      }
      sb.replace(0,parameter,repl.toString());
      return sb.toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.953547728432874
136812,"@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      if ((int)Math.log10(i) + 1 < integerParam) {
        integerParam=(int)Math.log10(i) + 1;
      }
      StringBuilder sbui=new StringBuilder(i.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < integerParam; ++j) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - integerParam,sbui.length(),rempl.toString());
      return Integer.parseInt(sbui.toString());
    }
 else {
      return 0;
    }
  }
}","@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
      StringBuilder sbui=new StringBuilder(i.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < parameter; ++j) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
      return Integer.parseInt(sbui.toString());
    }
 else {
      return 0;
    }
  }
}",0.91283676703645
136813,"@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      if ((int)Math.log10(l) + 1 < integerParam) {
        integerParam=(int)Math.log10(l) + 1;
      }
      StringBuilder sbui=new StringBuilder(l.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < integerParam; ++i) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - integerParam,sbui.length(),rempl.toString());
      return Long.parseLong(sbui.toString());
    }
 else {
      return 0L;
    }
  }
}","@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
      StringBuilder sbui=new StringBuilder(l.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < parameter; ++i) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
      return Long.parseLong(sbui.toString());
    }
 else {
      return 0L;
    }
  }
}",0.9118589743589745
136814,"@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      if (integerParam > str.length()) {
        integerParam=str.length();
      }
      StringBuilder sb=new StringBuilder(str);
      StringBuilder repla=new StringBuilder(EMPTY_STRING);
      for (int i=sb.length() - integerParam; i < sb.length(); ++i) {
        if (Character.isDigit(str.charAt(i))) {
          repla.append(rnd.nextInt(9));
        }
 else         if (Character.isUpperCase(str.charAt(i))) {
          repla.append(UPPER.charAt(rnd.nextInt(26)));
        }
 else         if (Character.isLowerCase(str.charAt(i))) {
          repla.append(LOWER.charAt(rnd.nextInt(26)));
        }
 else {
          repla.append(str.charAt(i));
        }
      }
      sb.replace(str.length() - integerParam,str.length(),repla.toString());
      return sb.toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      parameter=integerParam > str.length() ? str.length() : integerParam;
      StringBuilder sb=new StringBuilder(str);
      StringBuilder repla=new StringBuilder(EMPTY_STRING);
      for (int i=sb.length() - parameter; i < sb.length(); ++i) {
        if (Character.isDigit(str.charAt(i))) {
          repla.append(rnd.nextInt(9));
        }
 else         if (Character.isUpperCase(str.charAt(i))) {
          repla.append(UPPER.charAt(rnd.nextInt(26)));
        }
 else         if (Character.isLowerCase(str.charAt(i))) {
          repla.append(LOWER.charAt(rnd.nextInt(26)));
        }
 else {
          repla.append(str.charAt(i));
        }
      }
      sb.replace(str.length() - parameter,str.length(),repla.toString());
      return sb.toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.9560598744567842
136815,"@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
      StringBuilder sbu=new StringBuilder(i.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < parameter; ++j) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,parameter,remp.toString());
      return Integer.parseInt(sbu.toString());
    }
 else {
      return 0;
    }
  }
}","@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      if (i == 0) {
        return rnd.nextInt(9);
      }
 else {
        parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
        StringBuilder sbu=new StringBuilder(i.toString());
        StringBuilder remp=new StringBuilder(EMPTY_STRING);
        for (int j=0; j < parameter; ++j) {
          remp.append(rnd.nextInt(9));
        }
        sbu.replace(0,parameter,remp.toString());
        return Integer.parseInt(sbu.toString());
      }
    }
 else {
      return 0;
    }
  }
}",0.925255704169945
136816,"@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
      StringBuilder sbu=new StringBuilder(l.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < parameter; ++i) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,parameter,remp.toString());
      return Long.parseLong(sbu.toString());
    }
 else {
      return 0L;
    }
  }
}","@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      if (l == 0L) {
        return (long)rnd.nextInt(9);
      }
 else {
        parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
        StringBuilder sbu=new StringBuilder(l.toString());
        StringBuilder remp=new StringBuilder(EMPTY_STRING);
        for (int i=0; i < parameter; ++i) {
          remp.append(rnd.nextInt(9));
        }
        sbu.replace(0,parameter,remp.toString());
        return Long.parseLong(sbu.toString());
      }
    }
 else {
      return 0L;
    }
  }
}",0.9193037974683544
136817,"@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
      StringBuilder sbui=new StringBuilder(i.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < parameter; ++j) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
      return Integer.parseInt(sbui.toString());
    }
 else {
      return 0;
    }
  }
}","@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      if (i == 0) {
        return rnd.nextInt(9);
      }
 else {
        parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
        StringBuilder sbui=new StringBuilder(i.toString());
        StringBuilder rempl=new StringBuilder(EMPTY_STRING);
        for (int j=0; j < parameter; ++j) {
          rempl.append(rnd.nextInt(9));
        }
        sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
        return Integer.parseInt(sbui.toString());
      }
    }
 else {
      return 0;
    }
  }
}",0.9320388349514565
136818,"@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
      StringBuilder sbui=new StringBuilder(l.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < parameter; ++i) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
      return Long.parseLong(sbui.toString());
    }
 else {
      return 0L;
    }
  }
}","@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      if (l == 0L) {
        return (long)rnd.nextInt(9);
      }
 else {
        parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
        StringBuilder sbui=new StringBuilder(l.toString());
        StringBuilder rempl=new StringBuilder(EMPTY_STRING);
        for (int i=0; i < parameter; ++i) {
          rempl.append(rnd.nextInt(9));
        }
        sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
        return Long.parseLong(sbui.toString());
      }
    }
 else {
      return 0L;
    }
  }
}",0.9264264264264264
136819,"@SuppressWarnings(""String_Node_Str"") @Override public void partClosed(IWorkbenchPart part){
  if (part instanceof org.eclipse.ui.internal.ViewIntroAdapterPart) {
    if (!PluginChecker.isOnlyTopLoaded()) {
      IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (activePage != null) {
        if (activePage.getPerspective().getId().equals(IBrandingConfiguration.PERSPECTIVE_DQ_ID)) {
          CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet();
        }
      }
    }
  }
  if (part.getClass().getName().equals(SqlExplorerUtils.SQLEDITOR_ID)) {
    unlockFile(part);
    super.partClosed(part);
    return;
  }
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  if (ProxyRepositoryManager.getInstance().isReadOnly() || ProxyRepositoryManager.getInstance().isEditable(item)) {
    ProxyRepositoryManager.getInstance().unLock(item);
    WorkspaceResourceHelper.refreshItem(item);
  }
 else {
    ProxyRepositoryManager.getInstance().refresh();
    CorePlugin.getDefault().refreshDQView();
  }
  super.partClosed(part);
}","@SuppressWarnings(""String_Node_Str"") @Override public void partClosed(IWorkbenchPart part){
  if (maxCheatSheetHasSHow && part instanceof org.eclipse.ui.internal.cheatsheets.views.CheatSheetView) {
    IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IViewReference ref : activePage.getViewReferences()) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_RESTORED);
    }
    maxCheatSheetHasSHow=false;
  }
  if (part.getClass().getName().equals(SqlExplorerUtils.SQLEDITOR_ID)) {
    unlockFile(part);
    super.partClosed(part);
    return;
  }
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  if (ProxyRepositoryManager.getInstance().isReadOnly() || ProxyRepositoryManager.getInstance().isEditable(item)) {
    ProxyRepositoryManager.getInstance().unLock(item);
    WorkspaceResourceHelper.refreshItem(item);
  }
 else {
    ProxyRepositoryManager.getInstance().refresh();
    CorePlugin.getDefault().refreshDQView();
  }
  super.partClosed(part);
}",0.7823399558498896
136820,"public void partDeactivated(IWorkbenchPart part){
  ContextViewHelper.resetContextView();
  if (part instanceof org.eclipse.ui.internal.ViewIntroAdapterPart) {
    if (PluginChecker.isOnlyTopLoaded()) {
      IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (activePage != null) {
        if (activePage.getPerspective().getId().equals(IBrandingConfiguration.PERSPECTIVE_DQ_ID)) {
          if (CheatSheetUtils.getInstance().isFirstTime()) {
            OpenCheatSheetAction action=new OpenCheatSheetAction(""String_Node_Str"");
            action.run();
          }
          IViewPart findView=activePage.findView(IIntroConstants.INTRO_VIEW_ID);
          if (findView != null) {
            activePage.hideView(findView);
          }
          CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet();
        }
      }
    }
  }
}","public void partDeactivated(IWorkbenchPart part){
  ContextViewHelper.resetContextView();
  if (part instanceof org.eclipse.ui.internal.ViewIntroAdapterPart) {
    if (CheatSheetUtils.getInstance().isFirstTime() && !PlatformUI.getWorkbench().isClosing()) {
      IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
      if (activePage != null) {
        if (activePage.getPerspective().getId().equals(IBrandingConfiguration.PERSPECTIVE_DQ_ID)) {
          try {
            OpenCheatSheetAction action=new OpenCheatSheetAction(PluginConstant.GETTING_STARTED_CHEAT_SHEET_ID);
            action.run();
          }
 catch (          Exception e) {
            log.warn(e,e);
          }
          CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet();
          maxCheatSheetHasSHow=true;
        }
      }
    }
  }
}",0.5312855517633674
136821,"@Override public void run(IIntroSite site,Properties params){
  IPerspectiveDescriptor persDescription1=PlatformUI.getWorkbench().getPerspectiveRegistry().findPerspectiveWithId(CheatSheetUtils.DQ_PERSPECTIVE_ID);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().setPerspective(persDescription1);
  String property=params.getProperty(""String_Node_Str"");
  if (CheatSheetUtils.getInstance().isFirstTime()) {
    OpenCheatSheetAction action=new OpenCheatSheetAction(property);
    action.run();
  }
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart findView=activePage.findView(IIntroConstants.INTRO_VIEW_ID);
  if (findView != null) {
    activePage.hideView(findView);
  }
  CheatSheetUtils.getInstance().findAndmaxDisplayCheatSheet();
}","@Override public void run(IIntroSite site,Properties params){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IViewPart findView=activePage.findView(IIntroConstants.INTRO_VIEW_ID);
  if (findView != null) {
    activePage.hideView(findView);
  }
}",0.5353625783348255
136822,"@Override public String generateMaskedRow(String str){
  StringBuilder sb=new StringBuilder(EMPTY_STRING);
  if ((str == null) || EMPTY_STRING.equals(str) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str)) {
      String[] address=str.split(""String_Node_Str"");
      for (      String tmp : address) {
        if (Arrays.asList(keys).contains(tmp)) {
          sb.append(tmp + ""String_Node_Str"");
        }
 else {
          for (int i=0; i < tmp.length(); ++i) {
            if (Character.isDigit(tmp.charAt(i))) {
              sb.append(Character.forDigit(rnd.nextInt(9),10));
            }
 else {
              sb.append(""String_Node_Str"");
            }
          }
          sb.append(""String_Node_Str"");
        }
      }
      return sb.deleteCharAt(sb.length() - 1).toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  StringBuilder sb=new StringBuilder(EMPTY_STRING);
  if ((str == null) || EMPTY_STRING.equals(str) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && !(""String_Node_Str"").equals(str)) {
      String[] address=str.split(""String_Node_Str"");
      for (      String tmp : address) {
        if (Arrays.asList(keys).contains(tmp)) {
          sb.append(tmp + ""String_Node_Str"");
        }
 else {
          for (int i=0; i < tmp.length(); ++i) {
            if (Character.isDigit(tmp.charAt(i))) {
              sb.append(Character.forDigit(rnd.nextInt(9),10));
            }
 else {
              sb.append(""String_Node_Str"");
            }
          }
          sb.append(""String_Node_Str"");
        }
      }
      return sb.deleteCharAt(sb.length() - 1).toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.98
136823,"/** 
 * DOC talend Comment method ""getIndicatorDefinition"".
 * @param indicator
 * @return
 */
private TypedReturnCode<IndicatorDefinition> getIndicatorDefinition(Indicator indicator){
  TypedReturnCode<IndicatorDefinition> rt=new TypedReturnCode<IndicatorDefinition>(true);
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || PluginConstant.EMPTY_STRING.equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
    rt.setOk(false);
  }
  rt.setObject(indicatorDefinition);
  return rt;
}","/** 
 * DOC talend Comment method ""getIndicatorDefinition"".
 * @param indicator
 * @return
 */
private TypedReturnCode<IndicatorDefinition> getIndicatorDefinition(Indicator indicator){
  TypedReturnCode<IndicatorDefinition> rt=new TypedReturnCode<IndicatorDefinition>(true);
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || PluginConstant.EMPTY_STRING.equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    indicatorDefinition=indicator.getIndicatorDefinition();
    if (indicatorDefinition.eIsProxy()) {
      indicatorDefinition=(IndicatorDefinition)EObjectHelper.resolveObject(indicatorDefinition);
    }
  }
  if (indicatorDefinition == null) {
    traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
    rt.setOk(false);
  }
  rt.setObject(indicatorDefinition);
  return rt;
}",0.7462039045553145
136824,"/** 
 * @return get the data which will be displayed on the drill down editor.
 */
public List<Object[]> filterAdaptDataList(){
  List<Object[]> newColumnElementList=new ArrayList<Object[]>();
  AnalyzedDataSet analysisDataSet=this.getAnalysis().getResults().getIndicToRowMap().get(currIndicator);
  if (analysisDataSet.getData() != null && analysisDataSet.getData().size() > 0) {
    List<Object[]> dataList=analysisDataSet.getData();
    newColumnElementList.addAll(getDesignatedData(dataList));
  }
 else   if (analysisDataSet.getFrequencyData() != null && analysisDataSet.getFrequencyData().size() > 0) {
    String selectValue=this.getSelectValue();
    if (currIndicator instanceof LengthIndicator) {
      selectValue=((LengthIndicator)currIndicator).getLength().toString();
    }
    if (currIndicator instanceof DatePatternFreqIndicator) {
      for (      Object expression : analysisDataSet.getFrequencyData().keySet()) {
        if (Pattern.matches(((DatePatternFreqIndicator)currIndicator).getRegex(selectValue),expression.toString())) {
          newColumnElementList.addAll(analysisDataSet.getFrequencyData().get(expression));
        }
      }
    }
 else {
      List<Object[]> list=analysisDataSet.getFrequencyData().get(selectValue);
      if (list != null && list.size() > 0) {
        newColumnElementList.addAll(list);
      }
    }
  }
 else   if (analysisDataSet.getPatternData() != null && analysisDataSet.getPatternData().size() > 0) {
    if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_INVALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.INVALID_VALUE)));
    }
 else     if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_VALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.VALID_VALUE)));
    }
  }
  return newColumnElementList;
}","/** 
 * @return get the data which will be displayed on the drill down editor.
 */
public List<Object[]> filterAdaptDataList(){
  List<Object[]> newColumnElementList=new ArrayList<Object[]>();
  AnalyzedDataSet analysisDataSet=this.getAnalysis().getResults().getIndicToRowMap().get(currIndicator);
  if (analysisDataSet == null) {
    return newColumnElementList;
  }
  if (analysisDataSet.getData() != null && analysisDataSet.getData().size() > 0) {
    List<Object[]> dataList=analysisDataSet.getData();
    newColumnElementList.addAll(getDesignatedData(dataList));
  }
 else   if (analysisDataSet.getFrequencyData() != null && analysisDataSet.getFrequencyData().size() > 0) {
    String selectValue=this.getSelectValue();
    if (currIndicator instanceof LengthIndicator) {
      selectValue=((LengthIndicator)currIndicator).getLength().toString();
    }
    if (currIndicator instanceof DatePatternFreqIndicator) {
      for (      Object expression : analysisDataSet.getFrequencyData().keySet()) {
        if (Pattern.matches(((DatePatternFreqIndicator)currIndicator).getRegex(selectValue),expression.toString())) {
          newColumnElementList.addAll(analysisDataSet.getFrequencyData().get(expression));
        }
      }
    }
 else {
      List<Object[]> list=analysisDataSet.getFrequencyData().get(selectValue);
      if (list != null && list.size() > 0) {
        newColumnElementList.addAll(list);
      }
    }
  }
 else   if (analysisDataSet.getPatternData() != null && analysisDataSet.getPatternData().size() > 0) {
    if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_INVALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.INVALID_VALUE)));
    }
 else     if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_VALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.VALID_VALUE)));
    }
  }
  return newColumnElementList;
}",0.9825783972125436
136825,"/** 
 * @return get the data which will be displayed on the drill down editor.
 */
public List<Object[]> filterAdaptDataList(){
  List<Object[]> newColumnElementList=new ArrayList<Object[]>();
  AnalyzedDataSet analysisDataSet=this.getAnalysis().getResults().getIndicToRowMap().get(currIndicator);
  if (analysisDataSet.getData() != null && analysisDataSet.getData().size() > 0) {
    List<Object[]> dataList=analysisDataSet.getData();
    newColumnElementList.addAll(getDesignatedData(dataList));
  }
 else   if (analysisDataSet.getFrequencyData() != null && analysisDataSet.getFrequencyData().size() > 0) {
    String selectValue=this.getSelectValue();
    if (currIndicator instanceof LengthIndicator) {
      selectValue=((LengthIndicator)currIndicator).getLength().toString();
    }
    if (currIndicator instanceof DatePatternFreqIndicator) {
      for (      Object expression : analysisDataSet.getFrequencyData().keySet()) {
        if (Pattern.matches(((DatePatternFreqIndicator)currIndicator).getRegex(selectValue),expression.toString())) {
          newColumnElementList.addAll(analysisDataSet.getFrequencyData().get(expression));
        }
      }
    }
 else {
      List<Object[]> list=analysisDataSet.getFrequencyData().get(selectValue);
      if (list != null && list.size() > 0) {
        newColumnElementList.addAll(list);
      }
    }
  }
 else   if (analysisDataSet.getPatternData() != null && analysisDataSet.getPatternData().size() > 0) {
    if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_INVALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.INVALID_VALUE)));
    }
 else     if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_VALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.VALID_VALUE)));
    }
  }
  return newColumnElementList;
}","/** 
 * @return get the data which will be displayed on the drill down editor.
 */
public List<Object[]> filterAdaptDataList(){
  List<Object[]> newColumnElementList=new ArrayList<Object[]>();
  AnalyzedDataSet analysisDataSet=this.getAnalysis().getResults().getIndicToRowMap().get(currIndicator);
  if (analysisDataSet == null) {
    return newColumnElementList;
  }
  if (analysisDataSet.getData() != null && analysisDataSet.getData().size() > 0) {
    List<Object[]> dataList=analysisDataSet.getData();
    newColumnElementList.addAll(getDesignatedData(dataList));
  }
 else   if (analysisDataSet.getFrequencyData() != null && analysisDataSet.getFrequencyData().size() > 0) {
    String selectValue=this.getSelectValue();
    if (currIndicator instanceof LengthIndicator) {
      selectValue=((LengthIndicator)currIndicator).getLength().toString();
    }
    if (currIndicator instanceof DatePatternFreqIndicator) {
      for (      Object expression : analysisDataSet.getFrequencyData().keySet()) {
        if (Pattern.matches(((DatePatternFreqIndicator)currIndicator).getRegex(selectValue),expression.toString())) {
          newColumnElementList.addAll(analysisDataSet.getFrequencyData().get(expression));
        }
      }
    }
 else {
      List<Object[]> list=analysisDataSet.getFrequencyData().get(selectValue);
      if (list != null && list.size() > 0) {
        newColumnElementList.addAll(list);
      }
    }
  }
 else   if (analysisDataSet.getPatternData() != null && analysisDataSet.getPatternData().size() > 0) {
    if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_INVALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.INVALID_VALUE)));
    }
 else     if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_VALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.VALID_VALUE)));
    }
  }
  return newColumnElementList;
}",0.9825783972125436
136826,"/** 
 * DOC talend Comment method ""getIndicatorDefinition"".
 * @param indicator
 * @return
 */
private TypedReturnCode<IndicatorDefinition> getIndicatorDefinition(Indicator indicator){
  TypedReturnCode<IndicatorDefinition> rt=new TypedReturnCode<IndicatorDefinition>(true);
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || PluginConstant.EMPTY_STRING.equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
    rt.setOk(false);
  }
  rt.setObject(indicatorDefinition);
  return rt;
}","/** 
 * DOC talend Comment method ""getIndicatorDefinition"".
 * @param indicator
 * @return
 */
private TypedReturnCode<IndicatorDefinition> getIndicatorDefinition(Indicator indicator){
  TypedReturnCode<IndicatorDefinition> rt=new TypedReturnCode<IndicatorDefinition>(true);
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || PluginConstant.EMPTY_STRING.equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    indicatorDefinition=indicator.getIndicatorDefinition();
    if (indicatorDefinition.eIsProxy()) {
      indicatorDefinition=(IndicatorDefinition)EObjectHelper.resolveObject(indicatorDefinition);
    }
  }
  if (indicatorDefinition == null) {
    traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
    rt.setOk(false);
  }
  rt.setObject(indicatorDefinition);
  return rt;
}",0.7462039045553145
136827,"@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      if (integerParam > str.length()) {
        integerParam=str.length();
      }
      return str.substring(integerParam);
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0 && integerParam < str.length()) {
      return str.substring(integerParam);
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.9147496617050068
136828,"@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      if (integerParam > str.length()) {
        integerParam=str.length();
      }
      return str.substring(0,str.length() - integerParam);
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0 && integerParam < str.length()) {
      return str.substring(0,str.length() - integerParam);
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.9184993531694696
136829,"@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      if ((int)Math.log10(i) + 1 <= integerParam) {
        integerParam=(int)Math.log10(i) + 1;
      }
      StringBuilder sbu=new StringBuilder(i.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < integerParam; ++j) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,integerParam,remp.toString());
      return Integer.parseInt(sbu.toString());
    }
 else {
      return 0;
    }
  }
}","@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
      StringBuilder sbu=new StringBuilder(i.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < parameter; ++j) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,parameter,remp.toString());
      return Integer.parseInt(sbu.toString());
    }
 else {
      return 0;
    }
  }
}",0.9087866108786612
136830,"@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      if ((int)Math.log10(l) + 1 < integerParam) {
        integerParam=(int)Math.log10(l) + 1;
      }
      StringBuilder sbu=new StringBuilder(l.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < integerParam; ++i) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,integerParam,remp.toString());
      return Long.parseLong(sbu.toString());
    }
 else {
      return 0L;
    }
  }
}","@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
      StringBuilder sbu=new StringBuilder(l.toString());
      StringBuilder remp=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < parameter; ++i) {
        remp.append(rnd.nextInt(9));
      }
      sbu.replace(0,parameter,remp.toString());
      return Long.parseLong(sbu.toString());
    }
 else {
      return 0L;
    }
  }
}",0.9067796610169492
136831,"@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      if (integerParam > str.length()) {
        integerParam=str.length();
      }
      StringBuilder sb=new StringBuilder(str);
      StringBuilder repl=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < integerParam; ++i) {
        if (Character.isDigit(str.charAt(i))) {
          repl.append(rnd.nextInt(9));
        }
 else         if (Character.isUpperCase(str.charAt(i))) {
          repl.append(UPPER.charAt(rnd.nextInt(26)));
        }
 else         if (Character.isLowerCase(str.charAt(i))) {
          repl.append(LOWER.charAt(rnd.nextInt(26)));
        }
 else {
          repl.append(str.charAt(i));
        }
      }
      sb.replace(0,integerParam,repl.toString());
      return sb.toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      parameter=integerParam > str.length() ? str.length() : integerParam;
      StringBuilder sb=new StringBuilder(str);
      StringBuilder repl=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < parameter; ++i) {
        if (Character.isDigit(str.charAt(i))) {
          repl.append(rnd.nextInt(9));
        }
 else         if (Character.isUpperCase(str.charAt(i))) {
          repl.append(UPPER.charAt(rnd.nextInt(26)));
        }
 else         if (Character.isLowerCase(str.charAt(i))) {
          repl.append(LOWER.charAt(rnd.nextInt(26)));
        }
 else {
          repl.append(str.charAt(i));
        }
      }
      sb.replace(0,parameter,repl.toString());
      return sb.toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.953547728432874
136832,"@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      if ((int)Math.log10(i) + 1 < integerParam) {
        integerParam=(int)Math.log10(i) + 1;
      }
      StringBuilder sbui=new StringBuilder(i.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < integerParam; ++j) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - integerParam,sbui.length(),rempl.toString());
      return Integer.parseInt(sbui.toString());
    }
 else {
      return 0;
    }
  }
}","@Override public Integer generateMaskedRow(Integer i){
  if (i == null && keepNull) {
    return null;
  }
 else {
    if (i != null && integerParam > 0) {
      parameter=(int)Math.log10(i) + 1 <= integerParam ? (int)Math.log10(i) + 1 : integerParam;
      StringBuilder sbui=new StringBuilder(i.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int j=0; j < parameter; ++j) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
      return Integer.parseInt(sbui.toString());
    }
 else {
      return 0;
    }
  }
}",0.91283676703645
136833,"@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      if ((int)Math.log10(l) + 1 < integerParam) {
        integerParam=(int)Math.log10(l) + 1;
      }
      StringBuilder sbui=new StringBuilder(l.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < integerParam; ++i) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - integerParam,sbui.length(),rempl.toString());
      return Long.parseLong(sbui.toString());
    }
 else {
      return 0L;
    }
  }
}","@Override public Long generateMaskedRow(Long l){
  if (l == null && keepNull) {
    return null;
  }
 else {
    if (l != null && integerParam > 0) {
      parameter=(int)Math.log10(l) + 1 <= integerParam ? (int)Math.log10(l) + 1 : integerParam;
      StringBuilder sbui=new StringBuilder(l.toString());
      StringBuilder rempl=new StringBuilder(EMPTY_STRING);
      for (int i=0; i < parameter; ++i) {
        rempl.append(rnd.nextInt(9));
      }
      sbui.replace(sbui.length() - parameter,sbui.length(),rempl.toString());
      return Long.parseLong(sbui.toString());
    }
 else {
      return 0L;
    }
  }
}",0.9118589743589745
136834,"@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      if (integerParam > str.length()) {
        integerParam=str.length();
      }
      StringBuilder sb=new StringBuilder(str);
      StringBuilder repla=new StringBuilder(EMPTY_STRING);
      for (int i=sb.length() - integerParam; i < sb.length(); ++i) {
        if (Character.isDigit(str.charAt(i))) {
          repla.append(rnd.nextInt(9));
        }
 else         if (Character.isUpperCase(str.charAt(i))) {
          repla.append(UPPER.charAt(rnd.nextInt(26)));
        }
 else         if (Character.isLowerCase(str.charAt(i))) {
          repla.append(LOWER.charAt(rnd.nextInt(26)));
        }
 else {
          repla.append(str.charAt(i));
        }
      }
      sb.replace(str.length() - integerParam,str.length(),repla.toString());
      return sb.toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}","@Override public String generateMaskedRow(String str){
  if ((str == null || EMPTY_STRING.equals(str)) && keepNull) {
    return str;
  }
 else {
    if (str != null && !EMPTY_STRING.equals(str) && integerParam > 0) {
      parameter=integerParam > str.length() ? str.length() : integerParam;
      StringBuilder sb=new StringBuilder(str);
      StringBuilder repla=new StringBuilder(EMPTY_STRING);
      for (int i=sb.length() - parameter; i < sb.length(); ++i) {
        if (Character.isDigit(str.charAt(i))) {
          repla.append(rnd.nextInt(9));
        }
 else         if (Character.isUpperCase(str.charAt(i))) {
          repla.append(UPPER.charAt(rnd.nextInt(26)));
        }
 else         if (Character.isLowerCase(str.charAt(i))) {
          repla.append(LOWER.charAt(rnd.nextInt(26)));
        }
 else {
          repla.append(str.charAt(i));
        }
      }
      sb.replace(str.length() - parameter,str.length(),repla.toString());
      return sb.toString();
    }
 else {
      return EMPTY_STRING;
    }
  }
}",0.9560598744567842
136835,"@Override public String getJarFileName(){
  return ITOPChartService.JAR_FILE_NAME;
}","@Override public String getJarFileName(){
  return ITOPChartService.JAR_FILE_NAME_WITH_VERSION;
}",0.9281767955801103
136836,"/** 
 * the jar file name must be in pairs and in order, jar file and jar nl file.<br/> {""sqlexplorer-6.0.0.jar"", ""sqlexplorer.nl-6.0.0.jar""}
 */
protected abstract List<String> getJarFileWithVersionNames();","/** 
 * the jar file name must be in pairs and in order, jar file and jar nl file.<br/> this file is on the local maven folder which is downloaded from the nexus server(with artifact-verion)<br/> {""sqlexplorer_6.0.0-{artifact-verion}.jar"", ""sqlexplorer.nl_6.0.0-{artifact-verion}.jar""}
 */
protected abstract List<String> getJarFileWithVersionNames();",0.7347670250896058
136837,"/** 
 * the jar file name must be in pairs and in order, jar file and jar nl file.<br/> {""sqlexplorer.jar"", ""sqlexplorer.nl.jar""}
 */
protected abstract List<String> getJarFileNames();","/** 
 * the jar file name must be in pairs and in order, jar file and jar nl file.<br/> this file is on the nexus server name.<br/> {""sqlexplorer_6.0.0.jar"", ""sqlexplorer.nl_6.0.0.jar""}
 */
protected abstract List<String> getJarFileNames();",0.8679245283018868
136838,"@Override public IStatus install(IProgressMonitor progress,List<URI> allRepoUris) throws Exception {
  IStatus installStatus=super.install(progress,allRepoUris);
  if (installStatus.isOK()) {
    try {
      moveJars();
    }
 catch (    MalformedURLException e) {
      MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
      multiStatus.add(installStatus);
      return multiStatus;
    }
catch (    IOException e) {
      MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
      multiStatus.add(installStatus);
      return multiStatus;
    }
  }
  return installStatus;
}","@Override public IStatus install(IProgressMonitor progress,List<URI> allRepoUris) throws Exception {
  IStatus installStatus=super.install(progress,allRepoUris);
  if (installStatus.isOK()) {
    try {
      copyJars2PluginsFolder();
    }
 catch (    MalformedURLException e) {
      MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
      multiStatus.add(installStatus);
      return multiStatus;
    }
catch (    IOException e) {
      MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
      multiStatus.add(installStatus);
      return multiStatus;
    }
  }
  return installStatus;
}",0.98355754857997
136839,"@Override public void retrieveUninstalledExtraFeatures(IProgressMonitor monitor,Set<ExtraFeature> uninstalledExtraFeatures) throws Exception {
  Bundle bundle=Platform.getBundle(getPluginName());
  if (bundle == null) {
    String pathToStore=Platform.getInstallLocation().getURL().getFile() + ""String_Node_Str"";
    File jarfile=new File(pathToStore,getJarFileWithVersionNames().get(0));
    if (jarfile.exists()) {
      return;
    }
 else {
      SubMonitor mainSubMonitor=SubMonitor.convert(monitor,2);
      List<ModuleNeeded> allUninstalledModules=getAllUninstalledModules();
      if (monitor.isCanceled()) {
        return;
      }
      ArrayList<ModuleToInstall> modulesRequiredToBeInstalled=new ArrayList<ModuleToInstall>();
      IRunnableWithProgress notInstalledModulesRunnable=RemoteModulesHelper.getInstance().getNotInstalledModulesRunnable(allUninstalledModules,modulesRequiredToBeInstalled);
      runNotInstallModule(mainSubMonitor,notInstalledModulesRunnable);
      if (mainSubMonitor.isCanceled()) {
        return;
      }
      ArrayList<ModuleToInstall> modulesForAutomaticInstall=TalendWebServiceUpdateExtraFeature.filterAllAutomaticInstallableModules(modulesRequiredToBeInstalled);
      if (modulesForAutomaticInstall.isEmpty()) {
        log.error(""String_Node_Str"" + getJarFileNames().get(0));
        return;
      }
      addToSet(uninstalledExtraFeatures,new TalendWebServiceUpdateExtraFeature(modulesForAutomaticInstall,DefaultMessagesImpl.getString(getDownloadName()),DefaultMessagesImpl.getString(""String_Node_Str"",getContainPluginNames()),true){
        @Override public IStatus install(        IProgressMonitor progress,        List<URI> allRepoUris) throws Exception {
          IStatus installStatus=super.install(progress,allRepoUris);
          if (installStatus.isOK()) {
            try {
              moveJars();
            }
 catch (            MalformedURLException e) {
              MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
              multiStatus.add(installStatus);
              return multiStatus;
            }
catch (            IOException e) {
              MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
              multiStatus.add(installStatus);
              return multiStatus;
            }
          }
          return installStatus;
        }
        private void moveJars() throws MalformedURLException, IOException {
          List<File> jarFiles=new ArrayList<File>();
          IMaven maven=MavenPlugin.getMaven();
          String librariesPath=maven.getLocalRepositoryPath();
          for (          String jarFileName : getJarFileWithVersionNames()) {
            jarFiles.addAll(FilesUtils.getJarFilesFromFolder(new File(librariesPath),jarFileName));
          }
          for (          File jarFile : jarFiles) {
            String pluginPath=Platform.getInstallLocation().getURL().getFile() + ""String_Node_Str"";
            File movedfile=new File(pluginPath,jarFile.getName());
            if (!movedfile.exists()) {
              File target=new File(StringUtils.trimToEmpty(pluginPath));
              if (!target.exists()) {
                target.mkdirs();
              }
              FilesUtils.copyFile(jarFile,movedfile);
            }
          }
        }
      }
);
    }
  }
 else {
  }
}","@Override public void retrieveUninstalledExtraFeatures(IProgressMonitor monitor,Set<ExtraFeature> uninstalledExtraFeatures) throws Exception {
  Bundle bundle=Platform.getBundle(getPluginName());
  if (bundle == null) {
    String pathToStore=Platform.getInstallLocation().getURL().getFile() + ""String_Node_Str"";
    File jarfile=new File(pathToStore,getJarFileWithVersionNames().get(0));
    if (jarfile.exists()) {
      return;
    }
 else {
      SubMonitor mainSubMonitor=SubMonitor.convert(monitor,2);
      List<ModuleNeeded> allUninstalledModules=getAllUninstalledModules();
      if (monitor.isCanceled()) {
        return;
      }
      ArrayList<ModuleToInstall> modulesRequiredToBeInstalled=new ArrayList<ModuleToInstall>();
      IRunnableWithProgress notInstalledModulesRunnable=RemoteModulesHelper.getInstance().getNotInstalledModulesRunnable(allUninstalledModules,modulesRequiredToBeInstalled);
      runNotInstallModule(mainSubMonitor,notInstalledModulesRunnable);
      if (mainSubMonitor.isCanceled()) {
        return;
      }
      ArrayList<ModuleToInstall> modulesForAutomaticInstall=TalendWebServiceUpdateExtraFeature.filterAllAutomaticInstallableModules(modulesRequiredToBeInstalled);
      if (modulesForAutomaticInstall.isEmpty()) {
        log.error(""String_Node_Str"" + getJarFileNames().get(0));
        return;
      }
      addToSet(uninstalledExtraFeatures,new TalendWebServiceUpdateExtraFeature(modulesForAutomaticInstall,DefaultMessagesImpl.getString(getDownloadName()),DefaultMessagesImpl.getString(""String_Node_Str"",getContainPluginNames()),true){
        @Override public IStatus install(        IProgressMonitor progress,        List<URI> allRepoUris) throws Exception {
          IStatus installStatus=super.install(progress,allRepoUris);
          if (installStatus.isOK()) {
            try {
              copyJars2PluginsFolder();
            }
 catch (            MalformedURLException e) {
              MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
              multiStatus.add(installStatus);
              return multiStatus;
            }
catch (            IOException e) {
              MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
              multiStatus.add(installStatus);
              return multiStatus;
            }
          }
          return installStatus;
        }
        private void copyJars2PluginsFolder() throws MalformedURLException, IOException {
          List<File> jarFiles=new ArrayList<File>();
          IMaven maven=MavenPlugin.getMaven();
          String librariesPath=maven.getLocalRepositoryPath();
          for (          String jarFileName : getJarFileWithVersionNames()) {
            jarFiles.addAll(FilesUtils.getJarFilesFromFolder(new File(librariesPath),jarFileName));
          }
          for (          File jarFile : jarFiles) {
            String pluginPath=Platform.getInstallLocation().getURL().getFile() + ""String_Node_Str"";
            File movedfile=new File(pluginPath,jarFile.getName());
            if (!movedfile.exists()) {
              File target=new File(StringUtils.trimToEmpty(pluginPath));
              if (!target.exists()) {
                target.mkdirs();
              }
              FilesUtils.copyFile(jarFile,movedfile);
            }
          }
        }
      }
);
    }
  }
 else {
  }
}",0.993529411764706
136840,"@Override public String getJarFileName(){
  return ITOPChartService.JAR_FILE_NAME;
}","@Override public String getJarFileName(){
  return ITOPChartService.JAR_FILE_NAME_WITH_VERSION;
}",0.9281767955801103
136841,"@Override public String getJarFileName(){
  return ITOPChartService.JAR_FILE_NAME;
}","@Override public String getJarFileName(){
  return ITOPChartService.JAR_FILE_NAME_WITH_VERSION;
}",0.9281767955801103
136842,"public static boolean isSupportedConnection(IRepositoryNode repNode){
  ERepositoryObjectType objectType=repNode.getObjectType();
  if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS) {
    ConnectionItem connectionItem=(ConnectionItem)repNode.getObject().getProperty().getItem();
    if (connectionItem.getConnection() instanceof DatabaseConnection) {
      String databaseType=((DatabaseConnection)connectionItem.getConnection()).getDatabaseType();
      List<String> tdqSupportDBType=MetadataConnectionUtils.getTDQSupportDBTemplate();
      return tdqSupportDBType.contains(databaseType);
    }
  }
  return false;
}","public static boolean isSupportedConnection(IRepositoryNode repNode){
  ERepositoryObjectType objectType=repNode.getObjectType();
  if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS) {
    ConnectionItem connectionItem=null;
    try {
      connectionItem=(ConnectionItem)repNode.getObject().getProperty().getItem();
    }
 catch (    Exception e) {
      log.warn(e);
      return true;
    }
    if (connectionItem.getConnection() instanceof DatabaseConnection) {
      String databaseType=((DatabaseConnection)connectionItem.getConnection()).getDatabaseType();
      List<String> tdqSupportDBType=MetadataConnectionUtils.getTDQSupportDBTemplate();
      return tdqSupportDBType.contains(databaseType);
    }
  }
  return false;
}",0.91399416909621
136843,"public void run(IAction action){
  ImportWizard wizard=new ImportWizard();
  WizardDialog dialog=new WizardDialog(null,wizard);
  dialog.setPageSize(550,500);
  dialog.open();
}","public void run(IAction action){
  IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  boolean isSaved=activePage.closeAllEditors(true);
  if (!isSaved) {
    MessageUI.openWarning(""String_Node_Str"");
    return;
  }
  ImportWizard wizard=new ImportWizard();
  WizardDialog dialog=new WizardDialog(null,wizard);
  dialog.setPageSize(550,500);
  dialog.open();
}",0.592964824120603
136844,"/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (desFile.exists()) {
    boolean needReloadResource=false;
    IFile desIFile=ResourceService.file2IFile(desFile);
    String fileExt=desIFile.getFileExtension();
    if (FactoriesUtil.isEmfFile(fileExt)) {
      needReloadResource=true;
      if (!StringUtils.equals(projectName,curProjectLabel)) {
        String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
        content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
        FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
      }
    }
    if (fileExt.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      needReloadResource=true;
      Property property=PropertyHelper.getProperty(desIFile);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
    if (isCovered && needReloadResource) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
    }
  }
 else {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str"",desFile.getAbsolutePath()));
  }
}","/** 
 * DOC bZhou Comment method ""update"".
 * @param desFile
 * @param isCovered
 * @throws IOException
 * @throws CoreException
 * @throws Exception
 */
private void update(File desFile,boolean isCovered) throws IOException, CoreException {
  String curProjectLabel=ResourceManager.getRootProjectName();
  if (desFile.exists()) {
    boolean needReloadResource=false;
    IFile desIFile=ResourceService.file2IFile(desFile);
    String fileExt=desIFile.getFileExtension();
    if (FactoriesUtil.isEmfFile(fileExt)) {
      needReloadResource=true;
      if (!StringUtils.equals(projectName,curProjectLabel)) {
        String content=FileUtils.readFileToString(desFile,""String_Node_Str"");
        content=StringUtils.replace(content,""String_Node_Str"" + projectName + ""String_Node_Str"",""String_Node_Str"" + curProjectLabel + ""String_Node_Str"");
        FileUtils.writeStringToFile(desFile,content,""String_Node_Str"");
      }
    }
    if (fileExt.equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      needReloadResource=true;
      Property property=PropertyHelper.getProperty(desIFile,true);
      if (property != null) {
        User user=ReponsitoryContextBridge.getUser();
        if (user != null && property.getAuthor() == null) {
          property.setAuthor(user);
          EMFSharedResources.getInstance().saveResource(property.eResource());
        }
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + desIFile + ""String_Node_Str""+ property.getLabel());
        }
      }
 else {
        log.error(""String_Node_Str"" + desIFile.getFullPath().toString());
      }
    }
    if (isCovered && needReloadResource) {
      URI uri=URI.createPlatformResourceURI(desIFile.getFullPath().toString(),false);
      EMFSharedResources.getInstance().reloadResource(uri);
    }
  }
 else {
    log.error(DefaultMessagesImpl.getString(""String_Node_Str"",desFile.getAbsolutePath()));
  }
}",0.9986838641747828
136845,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  need2MergeModelElementMap.clear();
  allDeletedItems.clear();
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicatorDefinition(modEle)) {
                if (isDQRule(modEle)) {
                  if (isParserRule(modEle)) {
                    mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                    isDelete=false;
                  }
 else                   if (isWhereRule(modEle)) {
                  }
                }
 else                 if (isMatchRuleDefinition(modEle)) {
                }
 else {
                  TDQIndicatorDefinitionItem indItem=(TDQIndicatorDefinitionItem)object.getProperty().getItem();
                  mergeSystemIndicator(record,indItem);
                  if (record.getElement() instanceof UDIndicatorDefinition) {
                    need2MergeModelElementMap.put(indItem,record.getElement());
                  }
                  isDelete=false;
                }
              }
 else               if (isPattern(modEle)) {
                TDQPatternItem patternItem=(TDQPatternItem)object.getProperty().getItem();
                mergePattern(record,patternItem);
                need2MergeModelElementMap.put(patternItem,record.getElement());
                isDelete=false;
              }
 else {
                EObjectHelper.removeDependencys(PropertyHelper.getModelElement(object.getProperty()));
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
                allDeletedItems.add(desPath);
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
  RepositoryWorkUnit<Object> workUnitFinish=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        postFinish();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
;
  workUnitFinish.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnitFinish);
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  need2MergeModelElementMap.clear();
  allDeletedItems.clear();
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicatorDefinition(modEle)) {
                if (isDQRule(modEle)) {
                  if (isParserRule(modEle)) {
                    mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                    isDelete=false;
                  }
 else                   if (isWhereRule(modEle)) {
                  }
                }
 else                 if (isMatchRuleDefinition(modEle)) {
                }
 else {
                  TDQIndicatorDefinitionItem indItem=(TDQIndicatorDefinitionItem)object.getProperty().getItem();
                  mergeSystemIndicator(record,indItem);
                  if (record.getElement() instanceof UDIndicatorDefinition) {
                    need2MergeModelElementMap.put(indItem,record.getElement());
                  }
                  isDelete=false;
                }
              }
 else               if (isPattern(modEle)) {
                TDQPatternItem patternItem=(TDQPatternItem)object.getProperty().getItem();
                mergePattern(record,patternItem);
                need2MergeModelElementMap.put(patternItem,record.getElement());
                isDelete=false;
              }
 else {
                EObjectHelper.removeDependencys(PropertyHelper.getModelElement(object.getProperty()));
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              updateFiles.clear();
              updateFilesCoverd.clear();
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
                allDeletedItems.add(desPath);
              }
              for (              File file : updateFiles) {
                update(file,false);
              }
              for (              File file : updateFilesCoverd) {
                update(file,true);
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
  RepositoryWorkUnit<Object> workUnitFinish=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        postFinish();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
;
  workUnitFinish.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnitFinish);
}",0.9610621728584196
136846,"public void postFinish() throws IOException {
  for (  IPath path : this.allDeletedItems) {
    IFile desIFile=ResourceService.file2IFile(path.toFile());
    if (desIFile != null && desIFile.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile);
      if (property != null) {
        try {
          ProxyRepositoryFactory.getInstance().save(property.getItem(),true);
        }
 catch (        PersistenceException e) {
          log.error(e);
        }
      }
    }
  }
  if (!need2MergeModelElementMap.isEmpty()) {
    for (    TDQItem item : need2MergeModelElementMap.keySet()) {
      ModelElement recordMe=need2MergeModelElementMap.get(item);
      mergeClientDependency2PatternOrUdi(item,recordMe);
    }
  }
  ItemRecord.clear();
  deleteTempProjectFolder();
}","public void postFinish() throws IOException {
  for (  IPath path : this.allDeletedItems) {
    IFile desIFile=ResourceService.file2IFile(path.toFile());
    if (desIFile != null && desIFile.getFileExtension().equals(FactoriesUtil.PROPERTIES_EXTENSION)) {
      Property property=PropertyHelper.getProperty(desIFile,true);
      if (property != null) {
        try {
          ProxyRepositoryFactory.getInstance().save(property.getItem(),true);
        }
 catch (        PersistenceException e) {
          log.error(e);
        }
      }
    }
  }
  if (!need2MergeModelElementMap.isEmpty()) {
    for (    TDQItem item : need2MergeModelElementMap.keySet()) {
      ModelElement recordMe=need2MergeModelElementMap.get(item);
      mergeClientDependency2PatternOrUdi(item,recordMe);
    }
  }
  ItemRecord.clear();
  deleteTempProjectFolder();
}",0.9970326409495548
136847,"protected void initService(boolean isNeedDownload){
  BundleContext context=CWMPlugin.getDefault().getBundleContext();
  if (context == null) {
    return;
  }
  ServiceReference serviceReference=context.getServiceReference(getServiceName());
  if (serviceReference != null) {
    setService(context,serviceReference);
  }
 else   if (isNeedDownload) {
    String pathToStore=Platform.getInstallLocation().getURL().getFile() + ""String_Node_Str"";
    File movedfile=new File(pathToStore,getJarFileName());
    if (movedfile.exists()) {
      log.warn(Messages.getString(getRestartMessageName()));
    }
 else     if (!hasShowDownloadWizard) {
      IServiceLocator serviceLocator=PlatformUI.getWorkbench();
      ICommandService commandService=(ICommandService)serviceLocator.getService(ICommandService.class);
      try {
        Command command=commandService.getCommand(COMMAND_ID);
        command.executeWithChecks(new ExecutionEvent());
        hasShowDownloadWizard=true;
      }
 catch (      Exception e) {
        log.error(e);
      }
    }
 else {
      log.error(Messages.getString(getMissingMessageName()));
    }
  }
}","protected void initService(boolean isNeedDownload){
  BundleContext context=CWMPlugin.getDefault().getBundleContext();
  if (context == null) {
    return;
  }
  ServiceReference serviceReference=context.getServiceReference(getServiceName());
  if (serviceReference != null) {
    setService(context,serviceReference);
  }
 else   if (isNeedDownload) {
    if (!hasShowDownloadWizard) {
      IServiceLocator serviceLocator=PlatformUI.getWorkbench();
      ICommandService commandService=(ICommandService)serviceLocator.getService(ICommandService.class);
      try {
        Command command=commandService.getCommand(COMMAND_ID);
        command.executeWithChecks(new ExecutionEvent());
        hasShowDownloadWizard=true;
      }
 catch (      Exception e) {
        log.error(e);
      }
    }
 else {
      log.error(Messages.getString(getMissingMessageName()));
    }
  }
}",0.8730711796913887
136848,"/** 
 * the jar file name must be in pairs and in order, jar file and jar nl file.<br/> {""sqlexplorer-6.0.0.jar"", ""sqlexplorer.nl-6.0.0.jar""}
 */
protected abstract List<String> getJarFileWithVersionNames();","/** 
 * the jar file name must be in pairs and in order, jar file and jar nl file.<br/> this file is on the local maven folder which is downloaded from the nexus server(with artifact-verion)<br/> {""sqlexplorer_6.0.0-{artifact-verion}.jar"", ""sqlexplorer.nl_6.0.0-{artifact-verion}.jar""}
 */
protected abstract List<String> getJarFileWithVersionNames();",0.7347670250896058
136849,"/** 
 * the jar file name must be in pairs and in order, jar file and jar nl file.<br/> {""sqlexplorer.jar"", ""sqlexplorer.nl.jar""}
 */
protected abstract List<String> getJarFileNames();","/** 
 * the jar file name must be in pairs and in order, jar file and jar nl file.<br/> this file is on the nexus server name.<br/> {""sqlexplorer_6.0.0.jar"", ""sqlexplorer.nl_6.0.0.jar""}
 */
protected abstract List<String> getJarFileNames();",0.8679245283018868
136850,"@Override public IStatus install(IProgressMonitor progress,List<URI> allRepoUris) throws Exception {
  IStatus installStatus=super.install(progress,allRepoUris);
  if (installStatus.isOK()) {
    try {
      moveJars();
    }
 catch (    MalformedURLException e) {
      MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
      multiStatus.add(installStatus);
      return multiStatus;
    }
catch (    IOException e) {
      MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
      multiStatus.add(installStatus);
      return multiStatus;
    }
  }
  return installStatus;
}","@Override public IStatus install(IProgressMonitor progress,List<URI> allRepoUris) throws Exception {
  IStatus installStatus=super.install(progress,allRepoUris);
  if (installStatus.isOK()) {
    try {
      copyJars2PluginsFolder(modulesForAutomaticInstall);
    }
 catch (    MalformedURLException e) {
      MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
      multiStatus.add(installStatus);
      return multiStatus;
    }
catch (    IOException e) {
      MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
      multiStatus.add(installStatus);
      return multiStatus;
    }
  }
  return installStatus;
}",0.9633431085043987
136851,"@Override public void retrieveUninstalledExtraFeatures(IProgressMonitor monitor,Set<ExtraFeature> uninstalledExtraFeatures) throws Exception {
  Bundle bundle=Platform.getBundle(getPluginName());
  if (bundle == null) {
    String pathToStore=Platform.getInstallLocation().getURL().getFile() + ""String_Node_Str"";
    File jarfile=new File(pathToStore,getJarFileWithVersionNames().get(0));
    if (jarfile.exists()) {
      return;
    }
 else {
      SubMonitor mainSubMonitor=SubMonitor.convert(monitor,2);
      List<ModuleNeeded> allUninstalledModules=getAllUninstalledModules();
      if (monitor.isCanceled()) {
        return;
      }
      ArrayList<ModuleToInstall> modulesRequiredToBeInstalled=new ArrayList<ModuleToInstall>();
      IRunnableWithProgress notInstalledModulesRunnable=RemoteModulesHelper.getInstance().getNotInstalledModulesRunnable(allUninstalledModules,modulesRequiredToBeInstalled);
      runNotInstallModule(mainSubMonitor,notInstalledModulesRunnable);
      if (mainSubMonitor.isCanceled()) {
        return;
      }
      ArrayList<ModuleToInstall> modulesForAutomaticInstall=TalendWebServiceUpdateExtraFeature.filterAllAutomaticInstallableModules(modulesRequiredToBeInstalled);
      if (modulesForAutomaticInstall.isEmpty()) {
        log.error(""String_Node_Str"" + getJarFileNames().get(0));
        return;
      }
      addToSet(uninstalledExtraFeatures,new TalendWebServiceUpdateExtraFeature(modulesForAutomaticInstall,DefaultMessagesImpl.getString(getDownloadName()),DefaultMessagesImpl.getString(""String_Node_Str"",getContainPluginNames()),true){
        @Override public IStatus install(        IProgressMonitor progress,        List<URI> allRepoUris) throws Exception {
          IStatus installStatus=super.install(progress,allRepoUris);
          if (installStatus.isOK()) {
            try {
              moveJars();
            }
 catch (            MalformedURLException e) {
              MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
              multiStatus.add(installStatus);
              return multiStatus;
            }
catch (            IOException e) {
              MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
              multiStatus.add(installStatus);
              return multiStatus;
            }
          }
          return installStatus;
        }
        private void moveJars() throws MalformedURLException, IOException {
          List<File> jarFiles=new ArrayList<File>();
          IMaven maven=MavenPlugin.getMaven();
          String librariesPath=maven.getLocalRepositoryPath();
          for (          String jarFileName : getJarFileWithVersionNames()) {
            jarFiles.addAll(FilesUtils.getJarFilesFromFolder(new File(librariesPath),jarFileName));
          }
          for (          File jarFile : jarFiles) {
            String pluginPath=Platform.getInstallLocation().getURL().getFile() + ""String_Node_Str"";
            File movedfile=new File(pluginPath,jarFile.getName());
            if (!movedfile.exists()) {
              File target=new File(StringUtils.trimToEmpty(pluginPath));
              if (!target.exists()) {
                target.mkdirs();
              }
              FilesUtils.copyFile(jarFile,movedfile);
            }
          }
        }
      }
);
    }
  }
 else {
  }
}","@Override public void retrieveUninstalledExtraFeatures(IProgressMonitor monitor,Set<ExtraFeature> uninstalledExtraFeatures) throws Exception {
  Bundle bundle=Platform.getBundle(getPluginName());
  if (bundle == null) {
    String pathToStore=Platform.getInstallLocation().getURL().getFile() + ""String_Node_Str"";
    File jarfile=new File(pathToStore,getJarFileWithVersionNames().get(0));
    if (jarfile.exists()) {
      return;
    }
 else {
      SubMonitor mainSubMonitor=SubMonitor.convert(monitor,2);
      List<ModuleNeeded> allUninstalledModules=getAllUninstalledModules();
      if (monitor.isCanceled()) {
        return;
      }
      ArrayList<ModuleToInstall> modulesRequiredToBeInstalled=new ArrayList<ModuleToInstall>();
      IRunnableWithProgress notInstalledModulesRunnable=RemoteModulesHelper.getInstance().getNotInstalledModulesRunnable(allUninstalledModules,modulesRequiredToBeInstalled);
      runNotInstallModule(mainSubMonitor,notInstalledModulesRunnable);
      if (mainSubMonitor.isCanceled()) {
        return;
      }
      final ArrayList<ModuleToInstall> modulesForAutomaticInstall=TalendWebServiceUpdateExtraFeature.filterAllAutomaticInstallableModules(modulesRequiredToBeInstalled);
      if (modulesForAutomaticInstall.isEmpty()) {
        log.error(""String_Node_Str"" + getJarFileNames().get(0));
        return;
      }
      addToSet(uninstalledExtraFeatures,new TalendWebServiceUpdateExtraFeature(modulesForAutomaticInstall,DefaultMessagesImpl.getString(getDownloadName()),DefaultMessagesImpl.getString(""String_Node_Str"",getContainPluginNames()),true){
        @Override public IStatus install(        IProgressMonitor progress,        List<URI> allRepoUris) throws Exception {
          IStatus installStatus=super.install(progress,allRepoUris);
          if (installStatus.isOK()) {
            try {
              copyJars2PluginsFolder(modulesForAutomaticInstall);
            }
 catch (            MalformedURLException e) {
              MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
              multiStatus.add(installStatus);
              return multiStatus;
            }
catch (            IOException e) {
              MultiStatus multiStatus=new MultiStatus(CorePlugin.PLUGIN_ID,IStatus.ERROR,e.getMessage(),e);
              multiStatus.add(installStatus);
              return multiStatus;
            }
          }
          return installStatus;
        }
        private void copyJars2PluginsFolder(        ArrayList<ModuleToInstall> modules) throws MalformedURLException, IOException {
          List<File> jarFiles=new ArrayList<File>();
          ILibraryManagerService librariesService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
          if (librariesService != null) {
            for (            ModuleToInstall module : modules) {
              String snapshotUri=MavenUrlHelper.generateSnapshotMavenUri(module.getMavenUri());
              String jarPathFromMaven=librariesService.getJarPathFromMaven(snapshotUri);
              if (jarPathFromMaven == null) {
                continue;
              }
              jarFiles.add(new File(jarPathFromMaven));
            }
          }
 else {
            IMaven maven=MavenPlugin.getMaven();
            String librariesPath=maven.getLocalRepositoryPath();
            for (            String jarFileName : getJarFileWithVersionNames()) {
              jarFiles.addAll(FilesUtils.getJarFilesFromFolder(new File(librariesPath),jarFileName));
            }
          }
          for (          File jarFile : jarFiles) {
            String pluginPath=Platform.getInstallLocation().getURL().getFile() + ""String_Node_Str"";
            File movedfile=new File(pluginPath,jarFile.getName());
            if (!movedfile.exists()) {
              File target=new File(StringUtils.trimToEmpty(pluginPath));
              if (!target.exists()) {
                target.mkdirs();
              }
              FilesUtils.copyFile(jarFile,movedfile);
            }
          }
        }
      }
);
    }
  }
 else {
  }
}",0.891873919404176
136852,"public DatabaseResultSet(ResultSet resultSet){
  this.rs=resultSet;
}","public DatabaseResultSet(ResultSet resultSet){
  setRs(resultSet);
}",0.9197080291970804
136853,"@Override protected void createTableContent(){
  try {
    TalendGridItem PreviewItem=new TalendGridItem(this,SWT.NONE);
    for (int i=0; i < this.getColumnCount(); i++) {
      PreviewItem.setCheckable(i,false);
    }
    PreviewItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    processNodePrivew(null,PreviewItem);
    PreviewItem.setExpanded(true);
  }
 catch (  SQLException e) {
  }
 finally {
    try {
      if (sqlConn != null) {
        sqlConn.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}","@Override protected void createTableContent(){
  try {
    TalendGridItem PreviewItem=new TalendGridItem(this,SWT.NONE);
    for (int i=0; i < this.getColumnCount(); i++) {
      PreviewItem.setCheckable(i,false);
    }
    PreviewItem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    processNodePrivew(null,PreviewItem);
    PreviewItem.setExpanded(true);
  }
 catch (  SQLException e) {
  }
}",0.8634920634920635
136854,"/** 
 * DOC talend Comment method ""getColumnValue"".
 * @return
 * @throws SQLException
 */
protected String getColumnValue(int rowIndex,String sqlQuery,String columnName,IMetadataConnection metadataBean) throws SQLException {
  createStatement=initStatement(metadataBean);
  ResultSet rs=createStatement.executeQuery(sqlQuery);
  while (rs.absolute(rowIndex + 1)) {
    return rs.getObject(columnName).toString();
  }
  return null;
}","/** 
 * DOC talend Comment method ""getColumnValue"".
 * @param column
 * @param currentItem
 * @return
 * @throws SQLException
 */
private String getColumnValue(GridColumn column,GridItem currentItem) throws SQLException {
  DatabaseResultSet rs=(DatabaseResultSet)this.getData(COLUMN_RESULT_KEY);
  ModelElementIndicator modelElementIndicator=(ModelElementIndicator)column.getData();
  try {
    if (rs == null) {
      rs=(DatabaseResultSet)getResultSet(modelElementIndicator);
      this.setData(COLUMN_RESULT_KEY,rs);
    }
    int indexOfRow=this.indexOf(currentItem);
    if (rs.absolute(indexOfRow)) {
      String columnName=modelElementIndicator.getElementName();
      Object columnValue=rs.getObject(columnName);
      return columnValue == null ? PluginConstant.NULL_STRING : columnValue.toString();
    }
  }
  finally {
    if (rs != null) {
      Connection connection=rs.getRs().getStatement().getConnection();
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
  }
  return null;
}",0.2675675675675675
136855,"/** 
 * Check whether the where clause is valid
 * @return true if the where clause is valid else return false
 */
public boolean checkWhereClause(){
  if (this.getColumnCount() <= 2) {
    return true;
  }
  GridColumn column=getColumn(2);
  ModelElementIndicator modelElementIndicator=(ModelElementIndicator)column.getData();
  try {
    getResultSet(modelElementIndicator);
  }
 catch (  SQLException e) {
    MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),e.getMessage());
    try {
      if (sqlConn != null) {
        sqlConn.close();
      }
    }
 catch (    SQLException e1) {
    }
    return false;
  }
  return true;
}","/** 
 * Check whether the where clause is valid
 * @return true if the where clause is valid else return false
 */
public boolean checkWhereClause(){
  if (this.getColumnCount() <= 2) {
    return true;
  }
  GridColumn column=getColumn(2);
  ModelElementIndicator modelElementIndicator=(ModelElementIndicator)column.getData();
  DatabaseResultSet resultSet=null;
  try {
    resultSet=(DatabaseResultSet)getResultSet(modelElementIndicator);
  }
 catch (  SQLException e) {
    MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),e.getMessage());
    return false;
  }
 finally {
    try {
      if (resultSet != null) {
        Connection connection=resultSet.getRs().getStatement().getConnection();
        if (connection != null && !connection.isClosed()) {
          connection.close();
        }
      }
    }
 catch (    SQLException e) {
      log.error(e,e);
      return false;
    }
  }
  return true;
}",0.7768079800498753
136856,"private Object createDataset(){
  String s=DefaultMessagesImpl.getString(""String_Node_Str"");
  String[] array=groupSize2GroupFrequency.keySet().toArray(new String[0]);
  List<String> groups=Arrays.asList(array);
  Collections.sort(groups,new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      return Integer.parseInt(o1) - Integer.parseInt(o2);
    }
  }
);
  return TOPChartUtil.getInstance().createDatasetForMatchRule(groupSize2GroupFrequency,groups,times,s);
}","private Object createDataset(){
  String s=DefaultMessagesImpl.getString(""String_Node_Str"");
  if (groupSize2GroupFrequency != null) {
    String[] array=groupSize2GroupFrequency.keySet().toArray(new String[0]);
    List<String> groups=Arrays.asList(array);
    Collections.sort(groups,new Comparator<String>(){
      @Override public int compare(      String o1,      String o2){
        return Integer.parseInt(o1) - Integer.parseInt(o2);
      }
    }
);
    return TOPChartUtil.getInstance().createDatasetForMatchRule(groupSize2GroupFrequency,groups,times,s);
  }
 else {
    return TOPChartUtil.getInstance().createDatasetForMatchRule(groupSize2GroupFrequency,null,times,s);
  }
}",0.8468013468013468
136857,"@Override public void modifyText(ModifyEvent e){
  Long currentRunTime=System.currentTimeMillis();
  if (taskList.size() > 0) {
    RunModifyTimerTask oldRunTask=taskList.get(0);
    if (currentRunTime - oldRunTask.getTaskRunTime() < DELAY_RUN_GROUP_LESS_THEN) {
      oldRunTask.cancel();
      taskList.clear();
    }
  }
  RunModifyTimerTask runModifyTimerTask=new RunModifyTimerTask(currentRunTime,lessSpin.getText().trim());
  timer.schedule(runModifyTimerTask,DELAY_RUN_GROUP_LESS_THEN);
  taskList.add(runModifyTimerTask);
}","@Override public void modifyText(ModifyEvent e){
  Long currentRunTime=System.currentTimeMillis();
  if (taskList.size() > 0) {
    RunModifyTimerTask oldRunTask=taskList.get(0);
    if (currentRunTime - oldRunTask.getTaskRunTime() < DELAY_RUN_GROUP_LESS_THEN) {
      oldRunTask.cancel();
      taskList.clear();
    }
  }
  RunModifyTimerTask runModifyTimerTask=new RunModifyTimerTask(currentRunTime,lessSpin.getText().trim());
  new Timer().schedule(runModifyTimerTask,DELAY_RUN_GROUP_LESS_THEN);
  taskList.add(runModifyTimerTask);
}",0.9850187265917604
136858,"/** 
 * DOC zshen Comment method ""createHideGroupComposite"".
 * @param chartComposite
 */
protected void createHideGroupComposite(Composite chartComposite){
  GridData gridData;
  Composite toolComp=toolkit.createComposite(chartComposite,SWT.NONE);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  toolComp.setLayoutData(gridData);
  GridLayout gridLayout=new GridLayout(3,false);
  toolComp.setLayout(gridLayout);
  Label lessText=new Label(toolComp,SWT.NONE);
  lessText.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  final Spinner lessSpin=new Spinner(toolComp,SWT.BORDER);
  lessSpin.setMinimum(1);
  lessSpin.setMaximum(Integer.MAX_VALUE);
  lessSpin.setTextLimit(9);
  lessSpin.setSelection(PluginConstant.HIDDEN_GROUP_LESS_THAN_DEFAULT);
  lessSpin.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      Long currentRunTime=System.currentTimeMillis();
      if (taskList.size() > 0) {
        RunModifyTimerTask oldRunTask=taskList.get(0);
        if (currentRunTime - oldRunTask.getTaskRunTime() < DELAY_RUN_GROUP_LESS_THEN) {
          oldRunTask.cancel();
          taskList.clear();
        }
      }
      RunModifyTimerTask runModifyTimerTask=new RunModifyTimerTask(currentRunTime,lessSpin.getText().trim());
      timer.schedule(runModifyTimerTask,DELAY_RUN_GROUP_LESS_THEN);
      taskList.add(runModifyTimerTask);
    }
  }
);
  Label lessText2=new Label(toolComp,SWT.NONE);
  lessText2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
}","/** 
 * DOC zshen Comment method ""createHideGroupComposite"".
 * @param chartComposite
 */
protected void createHideGroupComposite(Composite chartComposite){
  GridData gridData;
  Composite toolComp=toolkit.createComposite(chartComposite,SWT.NONE);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  toolComp.setLayoutData(gridData);
  GridLayout gridLayout=new GridLayout(3,false);
  toolComp.setLayout(gridLayout);
  Label lessText=new Label(toolComp,SWT.NONE);
  lessText.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  final Spinner lessSpin=new Spinner(toolComp,SWT.BORDER);
  lessSpin.setMinimum(1);
  lessSpin.setMaximum(Integer.MAX_VALUE);
  lessSpin.setTextLimit(9);
  lessSpin.setSelection(PluginConstant.HIDDEN_GROUP_LESS_THAN_DEFAULT);
  lessSpin.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      Long currentRunTime=System.currentTimeMillis();
      if (taskList.size() > 0) {
        RunModifyTimerTask oldRunTask=taskList.get(0);
        if (currentRunTime - oldRunTask.getTaskRunTime() < DELAY_RUN_GROUP_LESS_THEN) {
          oldRunTask.cancel();
          taskList.clear();
        }
      }
      RunModifyTimerTask runModifyTimerTask=new RunModifyTimerTask(currentRunTime,lessSpin.getText().trim());
      new Timer().schedule(runModifyTimerTask,DELAY_RUN_GROUP_LESS_THEN);
      taskList.add(runModifyTimerTask);
    }
  }
);
  Label lessText2=new Label(toolComp,SWT.NONE);
  lessText2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
}",0.9947780678851176
136859,"/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
@Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  RepositoryNode node=(RepositoryNode)obj;
  RepositoryNode parent=node.getParent();
  if (!(parent instanceof ReportSubFolderRepNode)) {
    if (parent != null) {
      IFolder folder=WorkbenchUtils.getFolder(node);
      if (!(node instanceof ExchangeFolderRepNode) && !ResourceManager.getRulesFolder().equals(folder) && !ResourceManager.getPatternFolder().equals(folder)&& !ResourceManager.getIndicatorFolder().equals(folder)&& !ResourceService.isSubFolder(ResourceManager.getSystemIndicatorFolder(),folder)&& (ENodeType.SYSTEM_FOLDER.equals(node.getType()) || ENodeType.SIMPLE_FOLDER.equals(node.getType()))&& !(node instanceof HDFSOfHCFolderRepNode || node instanceof HiveOfHCFolderRepNode)) {
        if (node.getObject() != null && !node.getObject().getProperty().getItem().getState().isDeleted()) {
          currentSelection=WorkbenchUtils.getFolder(node);
          CreateRepositoryNodeAction createSubFolderAction=new CreateRepositoryNodeAction(currentSelection);
          menu.add(createSubFolderAction);
        }
      }
    }
  }
}","/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
@Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  if (isExchangeNode()) {
    return;
  }
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  RepositoryNode node=(RepositoryNode)obj;
  RepositoryNode parent=node.getParent();
  if (!(parent instanceof ReportSubFolderRepNode)) {
    if (parent != null) {
      IFolder folder=WorkbenchUtils.getFolder(node);
      if (!(node instanceof ExchangeFolderRepNode) && !ResourceManager.getRulesFolder().equals(folder) && !ResourceManager.getPatternFolder().equals(folder)&& !ResourceManager.getIndicatorFolder().equals(folder)&& !ResourceService.isSubFolder(ResourceManager.getSystemIndicatorFolder(),folder)&& (ENodeType.SYSTEM_FOLDER.equals(node.getType()) || ENodeType.SIMPLE_FOLDER.equals(node.getType()))&& !(node instanceof HDFSOfHCFolderRepNode || node instanceof HiveOfHCFolderRepNode)) {
        if (node.getObject() != null && !node.getObject().getProperty().getItem().getState().isDeleted()) {
          currentSelection=WorkbenchUtils.getFolder(node);
          CreateRepositoryNodeAction createSubFolderAction=new CreateRepositoryNodeAction(currentSelection);
          menu.add(createSubFolderAction);
        }
      }
    }
  }
}",0.984126984126984
136860,"/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
@Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof RepositoryNode) {
    RepositoryNode node=(RepositoryNode)obj;
    if (shouldShowDeleteMenu(node)) {
      menu.add(new DQDeleteAction());
      if (shouldShowRenameFolderMenu(node)) {
        Object type=node.getProperties(EProperties.CONTENT_TYPE);
        if (ERepositoryObjectType.TDQ_JRAXML_ELEMENT.equals(type)) {
          menu.add(new RenameJrxmlFolderAction(node));
        }
 else {
          menu.add(new RenameTdqFolderAction(node));
        }
      }
    }
  }
}","/** 
 * Adds a submenu to the given menu with the name ""New Component"".
 */
@Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenu()) {
    return;
  }
  if (isExchangeNode()) {
    return;
  }
  Object obj=((TreeSelection)this.getContext().getSelection()).getFirstElement();
  if (obj instanceof RepositoryNode) {
    RepositoryNode node=(RepositoryNode)obj;
    if (shouldShowDeleteMenu(node)) {
      menu.add(new DQDeleteAction());
      if (shouldShowRenameFolderMenu(node)) {
        Object type=node.getProperties(EProperties.CONTENT_TYPE);
        if (ERepositoryObjectType.TDQ_JRAXML_ELEMENT.equals(type)) {
          menu.add(new RenameJrxmlFolderAction(node));
        }
 else {
          menu.add(new RenameTdqFolderAction(node));
        }
      }
    }
  }
}",0.97279792746114
136861,"@Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenuWhenIsReadonlyUser()) {
    return;
  }
  TreeSelection selection=(TreeSelection)this.getContext().getSelection();
  Object[] objs=selection.toArray();
  if (shouldShowMenu(objs)) {
    List<IRepositoryNode> repositoryNodeList=RepositoryNodeHelper.getRepositoryNodeList(objs);
    DuplicateAction duplicate=new DuplicateAction(repositoryNodeList.toArray(new IRepositoryNode[repositoryNodeList.size()]));
    menu.add(duplicate);
  }
}","@Override public void fillContextMenu(IMenuManager menu){
  if (!isShowMenuWhenIsReadonlyUser()) {
    return;
  }
  if (isExchangeNode()) {
    return;
  }
  TreeSelection selection=(TreeSelection)this.getContext().getSelection();
  Object[] objs=selection.toArray();
  if (shouldShowMenu(objs)) {
    List<IRepositoryNode> repositoryNodeList=RepositoryNodeHelper.getRepositoryNodeList(objs);
    DuplicateAction duplicate=new DuplicateAction(repositoryNodeList.toArray(new IRepositoryNode[repositoryNodeList.size()]));
    menu.add(duplicate);
  }
}",0.960377358490566
136862,"/** 
 * DOC xqliu Comment method ""installDND"". bug 8791 2009-08-31.
 * @param myTable
 */
public static void installDND(final Table targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  DropTargetListener dndListener=new TableDropTargetEffect(targetControl){
    ISelectionReceiver receiver=null;
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      IStructuredSelection selection=(IStructuredSelection)LocalSelectionTransfer.getTransfer().getSelection();
      Object object=selection.getFirstElement();
      if (object instanceof DBColumnRepNode) {
        receiver=new ColumnReceiverTable();
      }
      if (receiver == null) {
        event.detail=DND.DROP_NONE;
      }
 else {
        event.feedback=DND.FEEDBACK_EXPAND;
        receiver.doDropValidation(event,commonViewer);
      }
    }
    @Override public void dragOver(    DropTargetEvent event){
      if (receiver == null) {
        return;
      }
      super.dragOver(event);
      receiver.doDropValidation(event,commonViewer);
    }
    @SuppressWarnings(""String_Node_Str"") @Override public void drop(    DropTargetEvent event){
      if (receiver == null) {
        return;
      }
      int index=targetControl.getItemCount();
      super.drop(event);
      if (event.item == null) {
        index=-1;
      }
 else {
        TableItem item=(TableItem)event.item;
        TableItem[] items=targetControl.getItems();
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
      }
      receiver.drop(event,commonViewer,index);
    }
  }
;
  dropTarget.addDropListener(dndListener);
}","/** 
 * DOC xqliu Comment method ""installDND"". bug 8791 2009-08-31.
 * @param myTable
 */
public static void installDND(final Table targetControl){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  DQRespositoryView findView=(DQRespositoryView)activePage.findView(DQRespositoryView.ID);
  final CommonViewer commonViewer=findView.getCommonViewer();
  final LocalSelectionTransfer transfer=LocalSelectionTransfer.getTransfer();
  int operations=DND.DROP_COPY | DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{transfer};
  DropTarget dropTarget=new DropTarget(targetControl,operations);
  dropTarget.setTransfer(transfers);
  DropTargetListener dndListener=new TableDropTargetEffect(targetControl){
    ISelectionReceiver receiver=null;
    @Override public void dragEnter(    DropTargetEvent event){
      super.dragEnter(event);
      IStructuredSelection selection=(IStructuredSelection)LocalSelectionTransfer.getTransfer().getSelection();
      Object object=selection.getFirstElement();
      if (object instanceof DBColumnRepNode) {
        receiver=new ColumnReceiverTable();
      }
      if (receiver == null) {
        event.detail=DND.DROP_NONE;
      }
 else {
        event.feedback=DND.FEEDBACK_EXPAND;
        receiver.doDropValidation(event,commonViewer);
      }
    }
    @Override public void dragOver(    DropTargetEvent event){
      if (receiver == null) {
        return;
      }
      super.dragOver(event);
      receiver.doDropValidation(event,commonViewer);
    }
    @Override public void drop(    DropTargetEvent event){
      if (receiver == null) {
        return;
      }
      int index=targetControl.getItemCount();
      super.drop(event);
      if (event.item == null) {
        index=-1;
      }
 else {
        TableItem item=(TableItem)event.item;
        TableItem[] items=targetControl.getItems();
        for (int i=0; i < items.length; i++) {
          if (items[i] == item) {
            index=i;
            break;
          }
        }
      }
      receiver.drop(event,commonViewer,index);
    }
  }
;
  dropTarget.addDropListener(dndListener);
}",0.9914529914529916
136863,"/** 
 * DOC mzhao Comment method ""isSameType"". MOD mzhao 9848 2010-01-14, Allowing drag table.
 * @param model1
 * @param model2
 * @return
 */
static boolean isSameType(Object model1,Object model2){
  if ((model1 instanceof TdTable || model1 instanceof TdColumn) && (model2 instanceof TdTable || model2 instanceof TdColumn)) {
    if (model1 instanceof TdTable && model2 instanceof TdTable) {
      return true;
    }
 else     if (model1 instanceof TdColumn && model2 instanceof TdColumn) {
      return true;
    }
  }
  return false;
}","/** 
 * DOC mzhao Comment method ""isSameType"". MOD mzhao 9848 2010-01-14, Allowing drag table.
 * @param model1
 * @param model2
 * @return
 */
static boolean isSameType(Object model1,Object model2){
  if (model1 instanceof TdTable && model2 instanceof TdTable) {
    return true;
  }
  if (model1 instanceof TdColumn && model2 instanceof TdColumn) {
    return true;
  }
  return false;
}",0.625
136864,"/** 
 * DOC yyin HDFSOfHCConnectionNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HDFSOfHCConnectionNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
}","/** 
 * DOC yyin HDFSOfHCConnectionNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HDFSOfHCConnectionNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type,org.talend.core.model.general.Project inWhichProject){
  super(object,parent,type,inWhichProject);
}",0.8768115942028986
136865,"/** 
 * this folder path is: hadoop/hdfs, its parent's path is: hadoop/hadoopcluster
 */
@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>();
  IPath path=getPathOfHDFSFolder();
  Item clusterConnectionItem=getParent().getObject().getProperty().getItem();
  String clusterId=clusterConnectionItem.getProperty().getId();
  try {
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(HDFSRepositoryNodeType.HDFS,path.toString());
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      HDFSOfHCConnectionNode repNode=null;
      if (viewObject != null && viewObject.getProperty() != null) {
        HDFSConnectionItem dbItem=(HDFSConnectionItem)viewObject.getProperty().getItem();
        HDFSConnection dbConnection=(HDFSConnection)dbItem.getConnection();
        String hcId=dbConnection.getRelativeHadoopClusterId();
        if (!StringUtils.equals(clusterId,hcId)) {
          continue;
        }
      }
      try {
        repNode=new HDFSOfHCConnectionNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      }
 catch (      Exception e) {
        log.error(e,e);
        continue;
      }
      repNode.setProperties(EProperties.LABEL,viewObject.getLabel());
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      viewObject.setRepositoryNode(repNode);
      children.add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return children;
}","/** 
 * this folder path is: hadoop/hdfs, its parent's path is: hadoop/hadoopcluster
 */
@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>();
  IPath path=getPathOfHDFSFolder();
  Item clusterConnectionItem=getParent().getObject().getProperty().getItem();
  String clusterId=clusterConnectionItem.getProperty().getId();
  try {
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(HDFSRepositoryNodeType.HDFS,path.toString());
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      HDFSOfHCConnectionNode repNode=null;
      if (viewObject != null && viewObject.getProperty() != null) {
        HDFSConnectionItem dbItem=(HDFSConnectionItem)viewObject.getProperty().getItem();
        HDFSConnection dbConnection=(HDFSConnection)dbItem.getConnection();
        String hcId=dbConnection.getRelativeHadoopClusterId();
        if (!StringUtils.equals(clusterId,hcId)) {
          continue;
        }
      }
      try {
        repNode=new HDFSOfHCConnectionNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT,getProject());
      }
 catch (      Exception e) {
        log.error(e,e);
        continue;
      }
      repNode.setProperties(EProperties.LABEL,viewObject.getLabel());
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      viewObject.setRepositoryNode(repNode);
      children.add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return children;
}",0.9961820851688692
136866,"public HDFSOfHCFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
}","public HDFSOfHCFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type,org.talend.core.model.general.Project inWhichProject){
  super(object,parent,type,inWhichProject);
}",0.7888198757763976
136867,"/** 
 * 1)The current node is under: hadoop/hadoopcluster, need to get the folder to shown as child: hadoop/hdfs, hadoop/hive, 2) only show hdfs or hive folder, when it has children.
 */
@Override public List<IRepositoryNode> getChildren(){
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>();
  HDFSOfHCFolderRepNode hdfsFolder=new HDFSOfHCFolderRepNode(this.getObject(),this,ENodeType.SIMPLE_FOLDER);
  HiveOfHCFolderRepNode hiveFolder=new HiveOfHCFolderRepNode(this.getObject(),this,ENodeType.SIMPLE_FOLDER);
  addSubFolder(children,hdfsFolder);
  addSubFolder(children,hiveFolder);
  return children;
}","/** 
 * 1)The current node is under: hadoop/hadoopcluster, need to get the folder to shown as child: hadoop/hdfs, hadoop/hive, 2) only show hdfs or hive folder, when it has children.
 */
@Override public List<IRepositoryNode> getChildren(){
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>();
  HDFSOfHCFolderRepNode hdfsFolder=new HDFSOfHCFolderRepNode(this.getObject(),this,ENodeType.SIMPLE_FOLDER,getProject());
  HiveOfHCFolderRepNode hiveFolder=new HiveOfHCFolderRepNode(this.getObject(),this,ENodeType.SIMPLE_FOLDER,getProject());
  addSubFolder(children,hdfsFolder);
  addSubFolder(children,hiveFolder);
  return children;
}",0.9794628751974724
136868,"/** 
 * DOC yyin HadoopClusterConnectionRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HadoopClusterConnectionRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
}","/** 
 * DOC yyin HadoopClusterConnectionRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HadoopClusterConnectionRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type,org.talend.core.model.general.Project inWhichProject){
  super(object,parent,type,inWhichProject);
}",0.8835616438356164
136869,"@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(HadoopClusterRepositoryNodeType.HADOOPCLUSTER,RepositoryNodeHelper.getPath(this).toString());
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      HadoopClusterConnectionRepNode repNode=new HadoopClusterConnectionRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      repNode.setProperties(EProperties.LABEL,HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      repNode.setProperties(EProperties.CONTENT_TYPE,HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return filterResultsIfAny(super.getChildren());
}","@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(HadoopClusterRepositoryNodeType.HADOOPCLUSTER,RepositoryNodeHelper.getPath(this).toString());
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      HadoopClusterConnectionRepNode repNode=new HadoopClusterConnectionRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT,getProject());
      repNode.setProperties(EProperties.LABEL,HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      repNode.setProperties(EProperties.CONTENT_TYPE,HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return filterResultsIfAny(super.getChildren());
}",0.9936739659367396
136870,"/** 
 * DOC yyin HadoopClusterFolderRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HadoopClusterFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
}","/** 
 * DOC yyin HadoopClusterFolderRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HadoopClusterFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type,org.talend.core.model.general.Project inWhichProject){
  super(object,parent,type,inWhichProject);
}",0.8802816901408451
136871,"/** 
 * DOC yyin HadoopClusterSubFolderRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HadoopClusterSubFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
}","/** 
 * DOC yyin HadoopClusterSubFolderRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HadoopClusterSubFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type,org.talend.core.model.general.Project inWhichProject){
  super(object,parent,type,inWhichProject);
}",0.8827586206896552
136872,"/** 
 * DOC yyin HiveOfHCConnectionNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HiveOfHCConnectionNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
}","/** 
 * DOC yyin HiveOfHCConnectionNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HiveOfHCConnectionNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type,org.talend.core.model.general.Project inWhichProject){
  super(object,parent,type,inWhichProject);
}",0.8768115942028986
136873,"/** 
 * for hive folder, its children are under connections folder, not here, so find children there, and show link here.
 */
@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>();
  IPath path=RepositoryNodeHelper.getPath(this.getParent());
  path=path.removeLastSegments(2);
  path=path.append(EResourceConstant.DB_CONNECTIONS.getName());
  Item clusterConnectionItem=getParent().getObject().getProperty().getItem();
  String clusterId=clusterConnectionItem.getProperty().getId();
  try {
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(ERepositoryObjectType.METADATA_CONNECTIONS,path.toString());
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      HiveOfHCConnectionNode repNode=null;
      if (viewObject != null && viewObject.getProperty() != null) {
        String hcId=ConnectionUtils.getHadoopClusterIDOfHive(viewObject);
        if (!clusterId.equals(hcId)) {
          continue;
        }
      }
      try {
        repNode=new HiveOfHCConnectionNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      }
 catch (      Exception e) {
        log.error(e,e);
        continue;
      }
      repNode.setProperties(EProperties.LABEL,viewObject.getLabel());
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      viewObject.setRepositoryNode(repNode);
      children.add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return children;
}","/** 
 * for hive folder, its children are under connections folder, not here, so find children there, and show link here.
 */
@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>();
  IPath path=RepositoryNodeHelper.getPath(this.getParent());
  path=path.removeLastSegments(2);
  path=path.append(EResourceConstant.DB_CONNECTIONS.getName());
  Item clusterConnectionItem=getParent().getObject().getProperty().getItem();
  String clusterId=clusterConnectionItem.getProperty().getId();
  try {
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(ERepositoryObjectType.METADATA_CONNECTIONS,path.toString());
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      HiveOfHCConnectionNode repNode=null;
      if (viewObject != null && viewObject.getProperty() != null) {
        String hcId=ConnectionUtils.getHadoopClusterIDOfHive(viewObject);
        if (!clusterId.equals(hcId)) {
          continue;
        }
      }
      try {
        repNode=new HiveOfHCConnectionNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT,getProject());
      }
 catch (      Exception e) {
        log.error(e,e);
        continue;
      }
      repNode.setProperties(EProperties.LABEL,viewObject.getLabel());
      repNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      viewObject.setRepositoryNode(repNode);
      children.add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return children;
}",0.9962021618463336
136874,"/** 
 * DOC yyin HiveOfHCFolderRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HiveOfHCFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type){
  super(object,parent,type);
}","/** 
 * DOC yyin HiveOfHCFolderRepNode constructor comment.
 * @param object
 * @param parent
 * @param type
 */
public HiveOfHCFolderRepNode(IRepositoryViewObject object,RepositoryNode parent,ENodeType type,org.talend.core.model.general.Project inWhichProject){
  super(object,parent,type,inWhichProject);
}",0.8759124087591241
136875,"private RepositoryNode createRepositoryNode(IRepositoryViewObject folder,RepositoryNode parentNode,EResourceConstant resConstant,org.talend.core.model.general.Project inWhichProject) throws PersistenceException {
  DQRepositoryNode subFolderNode=null;
switch (resConstant) {
case ANALYSIS:
    AnalysisFolderRepNode anaFolderNode=new AnalysisFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
  folder.setRepositoryNode(anaFolderNode);
parentNode.getChildren().add(anaFolderNode);
return anaFolderNode;
case REPORTS:
ReportFolderRepNode repFolderNode=new ReportFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(repFolderNode);
parentNode.getChildren().add(repFolderNode);
return repFolderNode;
case INDICATORS:
IndicatorFolderRepNode indicatorFolderRepNode=new IndicatorFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(indicatorFolderRepNode);
parentNode.getChildren().add(indicatorFolderRepNode);
return indicatorFolderRepNode;
case JRXML_TEMPLATE:
JrxmlTempFolderRepNode jrxmlFolderNode=new JrxmlTempFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(jrxmlFolderNode);
parentNode.getChildren().add(jrxmlFolderNode);
return jrxmlFolderNode;
case SOURCE_FILES:
SourceFileFolderRepNode sourceFileFolder=new SourceFileFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(sourceFileFolder);
parentNode.getChildren().add(sourceFileFolder);
return sourceFileFolder;
case PATTERNS:
PatternFolderRepNode patternFolder=new PatternFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(patternFolder);
parentNode.getChildren().add(patternFolder);
return patternFolder;
case RULES:
RulesFolderRepNode ruleFolder=new RulesFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(ruleFolder);
parentNode.getChildren().add(ruleFolder);
return ruleFolder;
case DB_CONNECTIONS:
DBConnectionFolderRepNode dbFolder=new DBConnectionFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(dbFolder);
parentNode.getChildren().add(dbFolder);
return dbFolder;
case FILEDELIMITED:
DFConnectionFolderRepNode dfmFolder=new DFConnectionFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(dfmFolder);
parentNode.getChildren().add(dfmFolder);
return dfmFolder;
case HADOOP_CLUSTER:
HadoopClusterFolderRepNode hcFolder=new HadoopClusterFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER);
folder.setRepositoryNode(hcFolder);
parentNode.getChildren().add(hcFolder);
return hcFolder;
case EXCHANGE:
ExchangeFolderRepNode exchangeFolder=new ExchangeFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(exchangeFolder);
parentNode.getChildren().add(exchangeFolder);
return exchangeFolder;
default :
subFolderNode=new DQRepositoryNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(subFolderNode);
parentNode.getChildren().add(subFolderNode);
if (resConstant.equals(EResourceConstant.PATTERNS)) {
createRepositoryNodeSubSystemFolder(subFolderNode,EResourceConstant.PATTERN_REGEX,inWhichProject);
createRepositoryNodeSubSystemFolder(subFolderNode,EResourceConstant.PATTERN_SQL,inWhichProject);
}
break;
}
return subFolderNode;
}","private RepositoryNode createRepositoryNode(IRepositoryViewObject folder,RepositoryNode parentNode,EResourceConstant resConstant,org.talend.core.model.general.Project inWhichProject) throws PersistenceException {
  DQRepositoryNode subFolderNode=null;
switch (resConstant) {
case ANALYSIS:
    AnalysisFolderRepNode anaFolderNode=new AnalysisFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
  folder.setRepositoryNode(anaFolderNode);
parentNode.getChildren().add(anaFolderNode);
return anaFolderNode;
case REPORTS:
ReportFolderRepNode repFolderNode=new ReportFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(repFolderNode);
parentNode.getChildren().add(repFolderNode);
return repFolderNode;
case INDICATORS:
IndicatorFolderRepNode indicatorFolderRepNode=new IndicatorFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(indicatorFolderRepNode);
parentNode.getChildren().add(indicatorFolderRepNode);
return indicatorFolderRepNode;
case JRXML_TEMPLATE:
JrxmlTempFolderRepNode jrxmlFolderNode=new JrxmlTempFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(jrxmlFolderNode);
parentNode.getChildren().add(jrxmlFolderNode);
return jrxmlFolderNode;
case SOURCE_FILES:
SourceFileFolderRepNode sourceFileFolder=new SourceFileFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(sourceFileFolder);
parentNode.getChildren().add(sourceFileFolder);
return sourceFileFolder;
case PATTERNS:
PatternFolderRepNode patternFolder=new PatternFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(patternFolder);
parentNode.getChildren().add(patternFolder);
return patternFolder;
case RULES:
RulesFolderRepNode ruleFolder=new RulesFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(ruleFolder);
parentNode.getChildren().add(ruleFolder);
return ruleFolder;
case DB_CONNECTIONS:
DBConnectionFolderRepNode dbFolder=new DBConnectionFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(dbFolder);
parentNode.getChildren().add(dbFolder);
return dbFolder;
case FILEDELIMITED:
DFConnectionFolderRepNode dfmFolder=new DFConnectionFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(dfmFolder);
parentNode.getChildren().add(dfmFolder);
return dfmFolder;
case HADOOP_CLUSTER:
HadoopClusterFolderRepNode hcFolder=new HadoopClusterFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(hcFolder);
parentNode.getChildren().add(hcFolder);
return hcFolder;
case EXCHANGE:
ExchangeFolderRepNode exchangeFolder=new ExchangeFolderRepNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(exchangeFolder);
parentNode.getChildren().add(exchangeFolder);
return exchangeFolder;
default :
subFolderNode=new DQRepositoryNode(folder,parentNode,ENodeType.SYSTEM_FOLDER,inWhichProject);
folder.setRepositoryNode(subFolderNode);
parentNode.getChildren().add(subFolderNode);
if (resConstant.equals(EResourceConstant.PATTERNS)) {
createRepositoryNodeSubSystemFolder(subFolderNode,EResourceConstant.PATTERN_REGEX,inWhichProject);
createRepositoryNodeSubSystemFolder(subFolderNode,EResourceConstant.PATTERN_SQL,inWhichProject);
}
break;
}
return subFolderNode;
}",0.9978389281083416
136876,"public void dragEnter(DropTargetEvent event){
  super.dragEnter(event);
  execValidation(event,doDropValidation(event,LocalSelectionTransfer.getTransfer()));
}","@Override public void dragEnter(DropTargetEvent event){
  super.dragEnter(event);
  execValidation(event,doDropValidation(event,LocalSelectionTransfer.getTransfer()));
}",0.9695121951219512
136877,"public boolean doDropValidation(DropTargetEvent event,LocalSelectionTransfer transfer){
  boolean ret=false;
  Object[] firstElements=((StructuredSelection)transfer.getSelection()).toArray();
  for (  Object object : firstElements) {
    if (object instanceof IFile) {
      IFile fe=(IFile)object;
      if (extension != null && extension.equals(fe.getFileExtension())) {
        ret=true;
      }
    }
 else     if (object instanceof IRepositoryNode) {
      IPath itemPath=PropertyHelper.getItemPath(((IRepositoryNode)object).getObject().getProperty());
      if (itemPath == null) {
        continue;
      }
      if (extension != null && extension.equals(itemPath.getFileExtension())) {
        ret=true;
      }
    }
    if (!ret) {
      break;
    }
  }
  return ret;
}","public boolean doDropValidation(DropTargetEvent event,LocalSelectionTransfer transfer){
  boolean ret=false;
  Object[] firstElements=((StructuredSelection)transfer.getSelection()).toArray();
  for (  Object object : firstElements) {
    if (object instanceof IFile) {
      IFile fe=(IFile)object;
      if (extension != null && extension.equals(fe.getFileExtension())) {
        ret=true;
      }
    }
 else     if (object instanceof IRepositoryNode) {
      IRepositoryViewObject obj=((IRepositoryNode)object).getObject();
      if (!ProxyRepositoryFactory.getInstance().isEditableAndLockIfPossible(obj)) {
        return false;
      }
      IPath itemPath=PropertyHelper.getItemPath(obj.getProperty());
      if (itemPath == null) {
        continue;
      }
      if (extension != null && extension.equals(itemPath.getFileExtension())) {
        ret=true;
      }
    }
    if (!ret) {
      break;
    }
  }
  return ret;
}",0.8684979544126242
136878,"/** 
 * check whether DND is allowed.
 * @param sourceNode
 * @param targetNode
 * @return
 */
private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (sourceNode.equals(targetNode)) {
    return false;
  }
  if (isForbidNode(sourceNode)) {
    return false;
  }
  if (isSubTypeOfTargetNode(sourceNode,targetNode)) {
    return false;
  }
  if (!isSameType(sourceNode,targetNode)) {
    return false;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(sourceNode.getObject()) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.getParent().equals(targetNode)) {
    return false;
  }
  if (targetNode.getParent().equals(sourceNode)) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
    if (!canMoveFolderNode(sourceNode,targetNode)) {
      return false;
    }
  }
  return true;
}","/** 
 * check whether DND is allowed.
 * @param sourceNode
 * @param targetNode
 * @return
 */
private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (sourceNode.equals(targetNode)) {
    return false;
  }
  if (isForbidNode(sourceNode)) {
    return false;
  }
  if (isSubTypeOfTargetNode(sourceNode,targetNode)) {
    return false;
  }
  if (!isSameType(sourceNode,targetNode)) {
    return false;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(sourceNode.getObject()) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.getParent().equals(targetNode)) {
    return false;
  }
  if (targetNode.getParent().equals(sourceNode)) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
    if (!canMoveFolderNode(sourceNode,targetNode)) {
      return false;
    }
  }
  if (!ProxyRepositoryFactory.getInstance().isEditableAndLockIfPossible(sourceNode.getObject())) {
    return false;
  }
  return true;
}",0.9385708315921436
136879,"/** 
 * Method ""generateDuplicate"". This method is called when the input is a Integer.
 * @param valueIn The input sent to the function.
 * @param function The function used on the date parameter (see the enum Function).
 * @param extraParameter A parameter required by some functions (eg, Numeric Variance).
 * @return This method returns a Integer after the application of the parameter function.
 */
public Integer generateDuplicate(Integer valueIn,Function function,String extraParameter){
  if (function == Function.SET_TO_NULL) {
    return null;
  }
  if (valueIn == null) {
    return 0;
  }
  Integer finalValue=null;
switch (function) {
case NUMERIC_VARIANCE:
    Integer extraParam;
  try {
    extraParam=Integer.parseInt(extraParameter);
  }
 catch (  NumberFormatException e) {
    extraParam=10;
  }
if (extraParam < 0) {
  extraParam*=-1;
}
 else if (extraParam == 0) {
  extraParam=10;
}
int rate=0;
do {
rate=rnd.nextInt(2 * extraParam) - extraParam;
}
 while (rate == 0);
Float value=Float.parseFloat(valueIn.toString());
value*=((float)rate + 100) / 100;
finalValue=new Integer(Math.round(value));
break;
case REPLACE_NUMERIC:
try {
extraParam=Integer.parseInt(extraParameter);
}
 catch (NumberFormatException e) {
extraParam=0;
}
if (extraParam < 0) {
extraParam=0;
}
String str=valueIn.toString();
String res=str.replaceAll(""String_Node_Str"",extraParam.toString());
finalValue=Integer.valueOf(res);
break;
case GENERATE_BETWEEN:
String[] parameters=extraParameter.split(""String_Node_Str"");
if (parameters.length != 2) {
finalValue=0;
}
 else {
int a=0;
int b=0;
try {
a=Integer.valueOf(parameters[0].trim());
b=Integer.valueOf(parameters[1].trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
int min=(a < b) ? a : b;
int max=(a < b) ? b : a;
finalValue=rnd.nextInt((max - min) + 1) + min;
}
break;
case GENERATE_FROM_LIST:
String[] parameterss=extraParameter.split(""String_Node_Str"");
int[] parametersI=new int[parameterss.length];
if (parameterss.length > 0) {
for (int i=0; i < parameterss.length; ++i) {
String tmp=parameterss[i].replaceAll(""String_Node_Str"",EMPTY_STRING);
try {
parametersI[i]=Integer.parseInt(tmp);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=parametersI[rnd.nextInt(parametersI.length)];
}
 else {
finalValue=0;
}
break;
case GENERATE_FROM_FILE:
try {
@SuppressWarnings(""String_Node_Str"") Scanner in=new Scanner(new FileReader(extraParameter));
List<Integer> tokens=new ArrayList<Integer>();
while (in.hasNext()) {
try {
tokens.add(Integer.parseInt(in.next()));
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=tokens.get(rnd.nextInt(tokens.size()));
}
 catch (FileNotFoundException e) {
finalValue=0;
}
break;
case HASH_GENERATE_LIST:
String[] parametersh=extraParameter.split(""String_Node_Str"");
int[] parametersIh=new int[parametersh.length];
if (parametersIh.length > 0) {
for (int i=0; i < parametersh.length; ++i) {
String tmp=parametersh[i].replaceAll(""String_Node_Str"",EMPTY_STRING);
try {
parametersIh[i]=Integer.parseInt(tmp);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=parametersIh[Math.abs(valueIn.hashCode()) % parametersIh.length];
}
 else {
finalValue=0;
}
break;
case HASH_GENERATE_FILE:
try {
@SuppressWarnings(""String_Node_Str"") Scanner in=new Scanner(new FileReader(extraParameter));
List<Integer> tokens=new ArrayList<Integer>();
while (in.hasNext()) {
try {
tokens.add(Integer.parseInt(in.next()));
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=tokens.get(Math.abs(valueIn.hashCode()) % tokens.size());
}
 catch (FileNotFoundException e) {
finalValue=0;
}
break;
case REMOVE_FIRST_CHARS:
Integer extra=null;
try {
extra=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if ((int)Math.log10(valueIn) + 1 <= extra || extra < 0) {
finalValue=0;
break;
}
StringBuilder sb=new StringBuilder(valueIn.toString().substring(extra));
finalValue=Integer.parseInt(sb.toString());
break;
case REMOVE_LAST_CHARS:
Integer extraP=null;
try {
extraP=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if ((int)Math.log10(valueIn) + 1 <= extraP || extraP < 0) {
finalValue=0;
break;
}
finalValue=valueIn / (int)Math.pow(10.0,extraP);
break;
case REPLACE_FIRST_CHARS:
Integer extraPa=null;
try {
extraPa=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if (extraPa < 0) {
finalValue=0;
break;
}
extraPa=((int)Math.log10(valueIn) + 1 <= extraPa) ? (int)Math.log10(valueIn) + 1 : extraPa;
StringBuilder sbu=new StringBuilder(valueIn.toString());
StringBuilder remp=new StringBuilder(EMPTY_STRING);
for (int i=0; i < extraPa; ++i) {
remp.append(rnd.nextInt(9));
}
sbu.replace(0,extraPa,remp.toString());
finalValue=Integer.parseInt(sbu.toString());
break;
case REPLACE_LAST_CHARS:
Integer extraPar=null;
try {
extraPar=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if (extraPar < 0) {
finalValue=0;
break;
}
extraPar=((int)Math.log10(valueIn) + 1 <= extraPar) ? (int)Math.log10(valueIn) + 1 : extraPar;
StringBuilder sbui=new StringBuilder(valueIn.toString());
StringBuilder rempl=new StringBuilder(EMPTY_STRING);
for (int i=0; i < extraPar; ++i) {
rempl.append(rnd.nextInt(9));
}
sbui.replace(sbui.length() - extraPar,sbui.length(),rempl.toString());
finalValue=Integer.parseInt(sbui.toString());
break;
default :
finalValue=0;
}
return finalValue;
}","/** 
 * Method ""generateDuplicate"". This method is called when the input is a Integer.
 * @param valueIn The input sent to the function.
 * @param function The function used on the date parameter (see the enum Function).
 * @param extraParameter A parameter required by some functions (eg, Numeric Variance).
 * @return This method returns a Integer after the application of the parameter function.
 */
public Integer generateDuplicate(Integer valueIn,Function function,String extraParameter){
  if (function == Function.SET_TO_NULL) {
    return null;
  }
  if (valueIn == null) {
    return 0;
  }
  Integer finalValue=null;
switch (function) {
case NUMERIC_VARIANCE:
    Integer extraParam;
  try {
    extraParam=Integer.parseInt(extraParameter);
  }
 catch (  NumberFormatException e) {
    extraParam=10;
  }
if (extraParam < 0) {
  extraParam*=-1;
}
 else if (extraParam == 0) {
  extraParam=10;
}
int rate=0;
do {
rate=rnd.nextInt(2 * extraParam) - extraParam;
}
 while (rate == 0);
Float value=Float.parseFloat(valueIn.toString());
value*=((float)rate + 100) / 100;
finalValue=new Integer(Math.round(value));
break;
case REPLACE_NUMERIC:
try {
extraParam=Integer.parseInt(extraParameter);
}
 catch (NumberFormatException e) {
extraParam=0;
}
if (extraParam < 0 || extraParam > 9) {
extraParam=0;
}
String str=valueIn.toString();
String res=str.replaceAll(""String_Node_Str"",extraParam.toString());
finalValue=Integer.valueOf(res);
break;
case GENERATE_BETWEEN:
String[] parameters=extraParameter.split(""String_Node_Str"");
if (parameters.length != 2) {
finalValue=0;
}
 else {
int a=0;
int b=0;
try {
a=Integer.valueOf(parameters[0].trim());
b=Integer.valueOf(parameters[1].trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
int min=(a < b) ? a : b;
int max=(a < b) ? b : a;
finalValue=rnd.nextInt((max - min) + 1) + min;
}
break;
case GENERATE_FROM_LIST:
String[] parameterss=extraParameter.split(""String_Node_Str"");
int[] parametersI=new int[parameterss.length];
if (parameterss.length > 0) {
for (int i=0; i < parameterss.length; ++i) {
String tmp=parameterss[i].replaceAll(""String_Node_Str"",EMPTY_STRING);
try {
parametersI[i]=Integer.parseInt(tmp);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=parametersI[rnd.nextInt(parametersI.length)];
}
 else {
finalValue=0;
}
break;
case GENERATE_FROM_FILE:
try {
@SuppressWarnings(""String_Node_Str"") Scanner in=new Scanner(new FileReader(extraParameter));
List<Integer> tokens=new ArrayList<Integer>();
while (in.hasNext()) {
try {
tokens.add(Integer.parseInt(in.next()));
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=tokens.get(rnd.nextInt(tokens.size()));
}
 catch (FileNotFoundException e) {
finalValue=0;
}
break;
case HASH_GENERATE_LIST:
String[] parametersh=extraParameter.split(""String_Node_Str"");
int[] parametersIh=new int[parametersh.length];
if (parametersIh.length > 0) {
for (int i=0; i < parametersh.length; ++i) {
String tmp=parametersh[i].replaceAll(""String_Node_Str"",EMPTY_STRING);
try {
parametersIh[i]=Integer.parseInt(tmp);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=parametersIh[Math.abs(valueIn.hashCode()) % parametersIh.length];
}
 else {
finalValue=0;
}
break;
case HASH_GENERATE_FILE:
try {
@SuppressWarnings(""String_Node_Str"") Scanner in=new Scanner(new FileReader(extraParameter));
List<Integer> tokens=new ArrayList<Integer>();
while (in.hasNext()) {
try {
tokens.add(Integer.parseInt(in.next()));
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=tokens.get(Math.abs(valueIn.hashCode()) % tokens.size());
}
 catch (FileNotFoundException e) {
finalValue=0;
}
break;
case REMOVE_FIRST_CHARS:
Integer extra=null;
try {
extra=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if ((int)Math.log10(valueIn) + 1 <= extra || extra < 0) {
finalValue=0;
break;
}
StringBuilder sb=new StringBuilder(valueIn.toString().substring(extra));
finalValue=Integer.parseInt(sb.toString());
break;
case REMOVE_LAST_CHARS:
Integer extraP=null;
try {
extraP=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if ((int)Math.log10(valueIn) + 1 <= extraP || extraP < 0) {
finalValue=0;
break;
}
finalValue=valueIn / (int)Math.pow(10.0,extraP);
break;
case REPLACE_FIRST_CHARS:
Integer extraPa=null;
try {
extraPa=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if (extraPa < 0) {
finalValue=0;
break;
}
extraPa=((int)Math.log10(valueIn) + 1 <= extraPa) ? (int)Math.log10(valueIn) + 1 : extraPa;
StringBuilder sbu=new StringBuilder(valueIn.toString());
StringBuilder remp=new StringBuilder(EMPTY_STRING);
for (int i=0; i < extraPa; ++i) {
remp.append(rnd.nextInt(9));
}
sbu.replace(0,extraPa,remp.toString());
finalValue=Integer.parseInt(sbu.toString());
break;
case REPLACE_LAST_CHARS:
Integer extraPar=null;
try {
extraPar=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if (extraPar < 0) {
finalValue=0;
break;
}
extraPar=((int)Math.log10(valueIn) + 1 <= extraPar) ? (int)Math.log10(valueIn) + 1 : extraPar;
StringBuilder sbui=new StringBuilder(valueIn.toString());
StringBuilder rempl=new StringBuilder(EMPTY_STRING);
for (int i=0; i < extraPar; ++i) {
rempl.append(rnd.nextInt(9));
}
sbui.replace(sbui.length() - extraPar,sbui.length(),rempl.toString());
finalValue=Integer.parseInt(sbui.toString());
break;
default :
finalValue=0;
}
return finalValue;
}",0.998375451263538
136880,"/** 
 * Method ""generateDuplicate"". This method is called when the input is a Integer.
 * @param valueIn The input sent to the function.
 * @param function The function used on the date parameter (see the enum Function).
 * @param extraParameter A parameter required by some functions (eg, Numeric Variance).
 * @return This method returns a Integer after the application of the parameter function.
 */
public Integer generateDuplicate(Integer valueIn,Function function,String extraParameter){
  if (function == Function.SET_TO_NULL) {
    return null;
  }
  if (valueIn == null) {
    return 0;
  }
  Integer finalValue=null;
switch (function) {
case NUMERIC_VARIANCE:
    Integer extraParam;
  try {
    extraParam=Integer.parseInt(extraParameter);
  }
 catch (  NumberFormatException e) {
    extraParam=10;
  }
if (extraParam <= 0) {
  extraParam*=-1;
}
int rate=0;
do {
rate=rnd.nextInt(2 * extraParam) - extraParam;
}
 while (rate == 0);
Float value=Float.parseFloat(valueIn.toString());
value*=((float)rate + 100) / 100;
finalValue=new Integer(Math.round(value));
break;
case REPLACE_NUMERIC:
try {
extraParam=Integer.parseInt(extraParameter);
}
 catch (NumberFormatException e) {
extraParam=0;
}
if (extraParam < 0) {
extraParam=0;
}
String str=valueIn.toString();
String res=str.replaceAll(""String_Node_Str"",extraParam.toString());
finalValue=Integer.valueOf(res);
break;
case GENERATE_BETWEEN:
String[] parameters=extraParameter.split(""String_Node_Str"");
if (parameters.length != 2) {
finalValue=0;
}
 else {
int a=0;
int b=0;
try {
a=Integer.valueOf(parameters[0].trim());
b=Integer.valueOf(parameters[1].trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
int min=(a < b) ? a : b;
int max=(a < b) ? b : a;
finalValue=rnd.nextInt((max - min) + 1) + min;
}
break;
case REPLACE_SSN:
if (extraParameter == null || !extraParameter.matches(""String_Node_Str"")) {
finalValue=0;
}
 else {
int digits_to_keep=0;
String strI=valueIn.toString();
String str_nospaces=strI.replaceAll(""String_Node_Str"",EMPTY_STRING);
if (str_nospaces.replaceAll(""String_Node_Str"",EMPTY_STRING).length() == 9) {
digits_to_keep=4;
}
 else if (str_nospaces.replaceAll(""String_Node_Str"",EMPTY_STRING).length() == 15) {
digits_to_keep=5;
}
String res_ssn=str_nospaces.substring(0,str_nospaces.length() - digits_to_keep).replaceAll(""String_Node_Str"",extraParameter);
res_ssn=res_ssn + str_nospaces.substring(str_nospaces.length() - digits_to_keep,str_nospaces.length());
finalValue=Integer.parseInt(res_ssn);
}
break;
case GENERATE_FROM_LIST:
String[] parameterss=extraParameter.split(""String_Node_Str"");
int[] parametersI=new int[parameterss.length];
if (parameterss.length > 0) {
for (int i=0; i < parameterss.length; ++i) {
String tmp=parameterss[i].replaceAll(""String_Node_Str"",EMPTY_STRING);
try {
parametersI[i]=Integer.parseInt(tmp);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=parametersI[rnd.nextInt(parametersI.length)];
}
 else {
finalValue=0;
}
break;
case GENERATE_FROM_FILE:
try {
@SuppressWarnings(""String_Node_Str"") Scanner in=new Scanner(new FileReader(extraParameter));
List<Integer> tokens=new ArrayList<Integer>();
while (in.hasNext()) {
try {
tokens.add(Integer.parseInt(in.next()));
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=tokens.get(rnd.nextInt(tokens.size()));
}
 catch (FileNotFoundException e) {
finalValue=0;
}
break;
case HASH_GENERATE_LIST:
String[] parametersh=extraParameter.split(""String_Node_Str"");
int[] parametersIh=new int[parametersh.length];
if (parametersIh.length > 0) {
for (int i=0; i < parametersh.length; ++i) {
String tmp=parametersh[i].replaceAll(""String_Node_Str"",EMPTY_STRING);
try {
parametersIh[i]=Integer.parseInt(tmp);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=parametersIh[Math.abs(valueIn.hashCode()) % parametersIh.length];
}
 else {
finalValue=0;
}
break;
case HASH_GENERATE_FILE:
try {
@SuppressWarnings(""String_Node_Str"") Scanner in=new Scanner(new FileReader(extraParameter));
List<Integer> tokens=new ArrayList<Integer>();
while (in.hasNext()) {
try {
tokens.add(Integer.parseInt(in.next()));
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=tokens.get(Math.abs(valueIn.hashCode()) % tokens.size());
}
 catch (FileNotFoundException e) {
finalValue=0;
}
break;
case REMOVE_FIRST_CHARS:
Integer extra=null;
try {
extra=Integer.parseInt(extraParameter);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if ((int)Math.log10(valueIn) + 1 <= extra || extra < 0) {
finalValue=0;
break;
}
StringBuilder sb=new StringBuilder(valueIn.toString().substring(extra));
finalValue=Integer.parseInt(sb.toString());
break;
case REMOVE_LAST_CHARS:
Double extraP=null;
try {
extraP=Double.parseDouble(extraParameter);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if ((int)Math.log10(valueIn) + 1 <= extraP || extraP < 0) {
finalValue=0;
break;
}
finalValue=valueIn / (int)Math.pow(10.0,extraP);
break;
case REPLACE_FIRST_CHARS:
Integer extraPa=null;
try {
extraPa=Integer.parseInt(extraParameter);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if ((int)Math.log10(valueIn) + 1 <= extraPa || extraPa < 0) {
finalValue=0;
break;
}
StringBuilder sbu=new StringBuilder(valueIn.toString());
StringBuilder remp=new StringBuilder(EMPTY_STRING);
for (int i=0; i < extraPa; ++i) {
remp.append(rnd.nextInt(9));
}
sbu.replace(0,extraPa,remp.toString());
finalValue=Integer.parseInt(sbu.toString());
break;
case REPLACE_LAST_CHARS:
Integer extraPar=null;
try {
extraPar=Integer.parseInt(extraParameter);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if ((int)Math.log10(valueIn) + 1 <= extraPar || extraPar < 0) {
finalValue=0;
break;
}
StringBuilder sbui=new StringBuilder(valueIn.toString());
StringBuilder rempl=new StringBuilder(EMPTY_STRING);
for (int i=0; i < extraPar; ++i) {
rempl.append(rnd.nextInt(9));
}
sbui.replace(sbui.length() - extraPar,sbui.length(),rempl.toString());
finalValue=Integer.parseInt(sbui.toString());
break;
default :
finalValue=0;
}
return finalValue;
}","/** 
 * Method ""generateDuplicate"". This method is called when the input is a Integer.
 * @param valueIn The input sent to the function.
 * @param function The function used on the date parameter (see the enum Function).
 * @param extraParameter A parameter required by some functions (eg, Numeric Variance).
 * @return This method returns a Integer after the application of the parameter function.
 */
public Integer generateDuplicate(Integer valueIn,Function function,String extraParameter){
  if (function == Function.SET_TO_NULL) {
    return null;
  }
  if (valueIn == null) {
    return 0;
  }
  Integer finalValue=null;
switch (function) {
case NUMERIC_VARIANCE:
    Integer extraParam;
  try {
    extraParam=Integer.parseInt(extraParameter);
  }
 catch (  NumberFormatException e) {
    extraParam=10;
  }
if (extraParam < 0) {
  extraParam*=-1;
}
 else if (extraParam == 0) {
  extraParam=10;
}
int rate=0;
do {
rate=rnd.nextInt(2 * extraParam) - extraParam;
}
 while (rate == 0);
Float value=Float.parseFloat(valueIn.toString());
value*=((float)rate + 100) / 100;
finalValue=new Integer(Math.round(value));
break;
case REPLACE_NUMERIC:
try {
extraParam=Integer.parseInt(extraParameter);
}
 catch (NumberFormatException e) {
extraParam=0;
}
if (extraParam < 0) {
extraParam=0;
}
String str=valueIn.toString();
String res=str.replaceAll(""String_Node_Str"",extraParam.toString());
finalValue=Integer.valueOf(res);
break;
case GENERATE_BETWEEN:
String[] parameters=extraParameter.split(""String_Node_Str"");
if (parameters.length != 2) {
finalValue=0;
}
 else {
int a=0;
int b=0;
try {
a=Integer.valueOf(parameters[0].trim());
b=Integer.valueOf(parameters[1].trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
int min=(a < b) ? a : b;
int max=(a < b) ? b : a;
finalValue=rnd.nextInt((max - min) + 1) + min;
}
break;
case GENERATE_FROM_LIST:
String[] parameterss=extraParameter.split(""String_Node_Str"");
int[] parametersI=new int[parameterss.length];
if (parameterss.length > 0) {
for (int i=0; i < parameterss.length; ++i) {
String tmp=parameterss[i].replaceAll(""String_Node_Str"",EMPTY_STRING);
try {
parametersI[i]=Integer.parseInt(tmp);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=parametersI[rnd.nextInt(parametersI.length)];
}
 else {
finalValue=0;
}
break;
case GENERATE_FROM_FILE:
try {
@SuppressWarnings(""String_Node_Str"") Scanner in=new Scanner(new FileReader(extraParameter));
List<Integer> tokens=new ArrayList<Integer>();
while (in.hasNext()) {
try {
tokens.add(Integer.parseInt(in.next()));
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=tokens.get(rnd.nextInt(tokens.size()));
}
 catch (FileNotFoundException e) {
finalValue=0;
}
break;
case HASH_GENERATE_LIST:
String[] parametersh=extraParameter.split(""String_Node_Str"");
int[] parametersIh=new int[parametersh.length];
if (parametersIh.length > 0) {
for (int i=0; i < parametersh.length; ++i) {
String tmp=parametersh[i].replaceAll(""String_Node_Str"",EMPTY_STRING);
try {
parametersIh[i]=Integer.parseInt(tmp);
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=parametersIh[Math.abs(valueIn.hashCode()) % parametersIh.length];
}
 else {
finalValue=0;
}
break;
case HASH_GENERATE_FILE:
try {
@SuppressWarnings(""String_Node_Str"") Scanner in=new Scanner(new FileReader(extraParameter));
List<Integer> tokens=new ArrayList<Integer>();
while (in.hasNext()) {
try {
tokens.add(Integer.parseInt(in.next()));
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
}
finalValue=tokens.get(Math.abs(valueIn.hashCode()) % tokens.size());
}
 catch (FileNotFoundException e) {
finalValue=0;
}
break;
case REMOVE_FIRST_CHARS:
Integer extra=null;
try {
extra=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if ((int)Math.log10(valueIn) + 1 <= extra || extra < 0) {
finalValue=0;
break;
}
StringBuilder sb=new StringBuilder(valueIn.toString().substring(extra));
finalValue=Integer.parseInt(sb.toString());
break;
case REMOVE_LAST_CHARS:
Integer extraP=null;
try {
extraP=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if ((int)Math.log10(valueIn) + 1 <= extraP || extraP < 0) {
finalValue=0;
break;
}
finalValue=valueIn / (int)Math.pow(10.0,extraP);
break;
case REPLACE_FIRST_CHARS:
Integer extraPa=null;
try {
extraPa=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if (extraPa < 0) {
finalValue=0;
break;
}
extraPa=((int)Math.log10(valueIn) + 1 <= extraPa) ? (int)Math.log10(valueIn) + 1 : extraPa;
StringBuilder sbu=new StringBuilder(valueIn.toString());
StringBuilder remp=new StringBuilder(EMPTY_STRING);
for (int i=0; i < extraPa; ++i) {
remp.append(rnd.nextInt(9));
}
sbu.replace(0,extraPa,remp.toString());
finalValue=Integer.parseInt(sbu.toString());
break;
case REPLACE_LAST_CHARS:
Integer extraPar=null;
try {
extraPar=Integer.parseInt(extraParameter.trim());
}
 catch (NumberFormatException e) {
finalValue=0;
break;
}
if (extraPar < 0) {
finalValue=0;
break;
}
extraPar=((int)Math.log10(valueIn) + 1 <= extraPar) ? (int)Math.log10(valueIn) + 1 : extraPar;
StringBuilder sbui=new StringBuilder(valueIn.toString());
StringBuilder rempl=new StringBuilder(EMPTY_STRING);
for (int i=0; i < extraPar; ++i) {
rempl.append(rnd.nextInt(9));
}
sbui.replace(sbui.length() - extraPar,sbui.length(),rempl.toString());
finalValue=Integer.parseInt(sbui.toString());
break;
default :
finalValue=0;
}
return finalValue;
}",0.9073834754889292
136881,"public Date generateDateBetween(String minString,String maxString,RandomWrapper rnd){
  SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"");
  Date minDate=null;
  Date maxDate=null;
  try {
    minDate=df.parse(minString);
    maxDate=df.parse(maxString);
  }
 catch (  ParseException e) {
    return null;
  }
  if (minDate.after(maxDate)) {
    Date tmp=minDate;
    minDate=maxDate;
    maxDate=tmp;
  }
 else   if (minDate.equals(maxDate)) {
    return minDate;
  }
  long min=minDate.getTime();
  long max=maxDate.getTime();
  long number=min + ((long)(rnd.nextDouble() * (max - min)));
  Date newDate=new Date(number);
  return newDate;
}","public Date generateDateBetween(String minString,String maxString,RandomWrapper rnd){
  SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"");
  Date minDate=null;
  Date maxDate=null;
  try {
    minDate=df.parse(minString);
    maxDate=df.parse(maxString);
  }
 catch (  ParseException e) {
    return new Date(System.currentTimeMillis());
  }
  if (minDate.after(maxDate)) {
    Date tmp=minDate;
    minDate=maxDate;
    maxDate=tmp;
  }
 else   if (minDate.equals(maxDate)) {
    return minDate;
  }
  long min=minDate.getTime();
  long max=maxDate.getTime();
  long number=min + ((long)(rnd.nextDouble() * (max - min)));
  Date newDate=new Date(number);
  return newDate;
}",0.9715994020926756
136882,"@SuppressWarnings(""String_Node_Str"") public static int getPageSize(){
  try {
    String defaultPageSize=ResourcesPlugin.getPlugin().getPluginPreferences().getString(EditorPreferencePage.ANALYZED_ITEMS_PER_PAGE);
    if (!""String_Node_Str"".equals(defaultPageSize)) {
      return Integer.parseInt(defaultPageSize);
    }
  }
 catch (  NumberFormatException e) {
    ExceptionHandler.process(e);
  }
  return PAGE_SIZE;
}","@SuppressWarnings(""String_Node_Str"") public static int getPageSize(){
  try {
    String defaultPageSize=Platform.getPreferencesService().getString(CorePlugin.PLUGIN_ID,EditorPreferencePage.ANALYZED_ITEMS_PER_PAGE,null,null);
    if (!""String_Node_Str"".equals(defaultPageSize)) {
      return Integer.parseInt(defaultPageSize);
    }
  }
 catch (  NumberFormatException e) {
    ExceptionHandler.process(e);
  }
  return PAGE_SIZE;
}",0.8417350527549824
136883,"/** 
 * DOC xqliu Comment method ""getDQRuleSize"". ADD xqliu 2010-03-10 feature 10834
 * @return
 */
public static String getDQRuleSize(){
  String result=Platform.getPreferencesService().get(CorePlugin.PLUGIN_ID,DQ_RULES_PER_PAGE,null);
  if (result == null || PluginConstant.EMPTY_STRING.equals(result.trim())) {
    result=DEFAULT_PAGE_SIZE;
  }
  return result;
}","/** 
 * DOC xqliu Comment method ""getDQRuleSize"". ADD xqliu 2010-03-10 feature 10834
 * @return
 */
public static String getDQRuleSize(){
  String result=Platform.getPreferencesService().getString(CorePlugin.PLUGIN_ID,DQ_RULES_PER_PAGE,null,null);
  if (StringUtils.isBlank(result)) {
    result=DEFAULT_PAGE_SIZE;
  }
  return result;
}",0.8591749644381224
136884,"@Override public boolean performOk(){
  boolean ok=super.performOk();
  LocalToLanguageEnum language=LocalToLanguageEnum.findLocal(execCombo.getText());
  getPreferenceStore().setValue(PluginConstant.LANGUAGE_SELECTOR,language.getShortOfLocale());
  try {
    InstanceScope.INSTANCE.getNode(CorePlugin.PLUGIN_ID).flush();
  }
 catch (  BackingStoreException e) {
    log.error(e);
  }
  saveLanguageType();
  return ok;
}","@Override public boolean performOk(){
  boolean ok=super.performOk();
  LocalToLanguageEnum language=LocalToLanguageEnum.findLocal(execCombo.getText());
  InstanceScope.INSTANCE.getNode(CorePlugin.PLUGIN_ID).put(PluginConstant.LANGUAGE_SELECTOR,language.getShortOfLocale());
  try {
    InstanceScope.INSTANCE.getNode(CorePlugin.PLUGIN_ID).flush();
  }
 catch (  BackingStoreException e) {
    log.error(e);
  }
  saveLanguageType();
  return ok;
}",0.904487917146145
136885,"@Override protected void performDefaults(){
  execCombo.deselectAll();
  getPreferenceStore().setValue(PluginConstant.LANGUAGE_SELECTOR,LocalToLanguageEnum.ENGLISH.getShortOfLocale());
  execCombo.setText(LocalToLanguageEnum.ENGLISH.getLocale());
  super.performDefaults();
}","@Override protected void performDefaults(){
  execCombo.deselectAll();
  InstanceScope.INSTANCE.getNode(CorePlugin.PLUGIN_ID).put(PluginConstant.LANGUAGE_SELECTOR,LocalToLanguageEnum.ENGLISH.getShortOfLocale());
  execCombo.setText(LocalToLanguageEnum.ENGLISH.getLocale());
  super.performDefaults();
}",0.8561525129982669
136886,"@Override protected Control createContents(Composite parent){
  mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  header=new Label(mainComposite,SWT.WRAP);
  header.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  header.setLayoutData(gd);
  execCombo=new Combo(mainComposite,SWT.READ_ONLY);
  for (  LocalToLanguageEnum oneEnum : LocalToLanguageEnum.values()) {
    execCombo.add(oneEnum.getLocale());
  }
  String language=getPreferenceStore().getString(PluginConstant.LANGUAGE_SELECTOR);
  LocalToLanguageEnum languageType=LocalToLanguageEnum.findLocalByShort(language);
  execCombo.setText(language == null ? LocalToLanguageEnum.ENGLISH.getLocale() : languageType.getLocale());
  GridData d=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  execCombo.setLayoutData(d);
  Label label=new Label(mainComposite,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData g=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  label.setLayoutData(g);
  Button allUpdate=new Button(mainComposite,SWT.FLAT);
  allUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  allUpdate.setLayoutData(new GridData());
  Button validatedUpdate=new Button(mainComposite,SWT.NONE);
  validatedUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  validatedUpdate.setLayoutData(new GridData());
  allUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(false,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  validatedUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(true,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  return mainComposite;
}","@Override protected Control createContents(Composite parent){
  mainComposite=new Composite(parent,SWT.NONE);
  mainComposite.setLayout(new GridLayout());
  mainComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  header=new Label(mainComposite,SWT.WRAP);
  header.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  header.setLayoutData(gd);
  execCombo=new Combo(mainComposite,SWT.READ_ONLY);
  for (  LocalToLanguageEnum oneEnum : LocalToLanguageEnum.values()) {
    execCombo.add(oneEnum.getLocale());
  }
  String language=Platform.getPreferencesService().getString(CorePlugin.PLUGIN_ID,PluginConstant.LANGUAGE_SELECTOR,LocalToLanguageEnum.ENGLISH.getShortOfLocale(),null);
  LocalToLanguageEnum languageType=LocalToLanguageEnum.findLocalByShort(language);
  execCombo.setText(language == null ? LocalToLanguageEnum.ENGLISH.getLocale() : languageType.getLocale());
  GridData d=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  execCombo.setLayoutData(d);
  Label label=new Label(mainComposite,SWT.WRAP);
  label.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  GridData g=new GridData(GridData.HORIZONTAL_ALIGN_FILL);
  label.setLayoutData(g);
  Button allUpdate=new Button(mainComposite,SWT.FLAT);
  allUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  allUpdate.setLayoutData(new GridData());
  Button validatedUpdate=new Button(mainComposite,SWT.NONE);
  validatedUpdate.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  validatedUpdate.setLayoutData(new GridData());
  allUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(false,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  validatedUpdate.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String language=LocalToLanguageEnum.findEnglishLocale(execCombo.getText());
      runProgressMonitorDialog(true,language);
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  return mainComposite;
}",0.967857945605754
136887,"/** 
 * DOC hcheng Comment method ""saveLanguageType"".
 */
private void saveLanguageType(){
  FileInputStream fin=null;
  FileOutputStream fout=null;
  try {
    URL url=Platform.getConfigurationLocation().getURL();
    log(url.getFile());
    Properties p=new Properties();
    File iniFile=new File(url.getFile(),""String_Node_Str"");
    fin=new FileInputStream(iniFile);
    p.load(fin);
    String languageType=Platform.getPreferencesService().get(CorePlugin.PLUGIN_ID,PluginConstant.LANGUAGE_SELECTOR,null);
    if (languageType == null || languageType.equals(p.getProperty(EclipseStarter.PROP_NL))) {
      return;
    }
    p.setProperty(EclipseStarter.PROP_NL,languageType);
    fout=new FileOutputStream(iniFile);
    p.store(fout,""String_Node_Str"");
    fout.flush();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (fin != null) {
      try {
        fin.close();
      }
 catch (      Exception e) {
      }
    }
    if (fout != null) {
      try {
        fout.close();
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * DOC hcheng Comment method ""saveLanguageType"".
 */
private void saveLanguageType(){
  FileInputStream fin=null;
  FileOutputStream fout=null;
  try {
    URL url=Platform.getConfigurationLocation().getURL();
    log(url.getFile());
    Properties p=new Properties();
    File iniFile=new File(url.getFile(),""String_Node_Str"");
    fin=new FileInputStream(iniFile);
    p.load(fin);
    String languageType=Platform.getPreferencesService().getString(CorePlugin.PLUGIN_ID,PluginConstant.LANGUAGE_SELECTOR,LocalToLanguageEnum.ENGLISH.getShortOfLocale(),null);
    if (languageType == null || languageType.equals(p.getProperty(EclipseStarter.PROP_NL))) {
      return;
    }
    p.setProperty(EclipseStarter.PROP_NL,languageType);
    fout=new FileOutputStream(iniFile);
    p.store(fout,""String_Node_Str"");
    fout.flush();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (fin != null) {
      try {
        fin.close();
      }
 catch (      Exception e) {
      }
    }
    if (fout != null) {
      try {
        fout.close();
      }
 catch (      Exception e) {
      }
    }
  }
}",0.975920036347115
136888,"/** 
 * Create IIndicatorNode for every folder or file which is valid
 * @param folder
 * @param indiEnum
 * @param resourceMap
 * @return
 */
public static IIndicatorNode[] getNestFolderNodes(IFolder folder,IndicatorEnum indiEnum,ResourceFileMap resourceMap){
  List<IIndicatorNode> chilren=new ArrayList<IIndicatorNode>();
  try {
    for (    IResource resource : folder.members()) {
      if (resource instanceof IFile) {
        ModelElement modelElement=resourceMap.getModelElement((IFile)resource);
        if (modelElement == null) {
          continue;
        }
        Property property=PropertyHelper.getProperty(modelElement);
        if (property == null) {
          continue;
        }
        IIndicatorNode indicatorNode=createLeafNode(property.getDisplayName(),indiEnum,modelElement);
        if (indicatorNode == null) {
          continue;
        }
        chilren.add(indicatorNode);
      }
 else {
        ICategoryNode indicatorCateNode=new IndicatorCategoryNode(resource.getName());
        IIndicatorNode[] nestFolderNodes=getNestFolderNodes((IFolder)resource,indiEnum,resourceMap);
        if (nestFolderNodes.length > 0) {
          indicatorCateNode.setChildren(nestFolderNodes);
          chilren.add(indicatorCateNode);
        }
      }
    }
  }
 catch (  CoreException e) {
  }
  return chilren.toArray(new IIndicatorNode[chilren.size()]);
}","/** 
 * Create IIndicatorNode for every folder or file which is valid
 * @param folder
 * @param indiEnum
 * @param resourceMap
 * @return nodes if folder is not empty else return empty array
 */
public static IIndicatorNode[] getNestFolderNodes(IFolder folder,IndicatorEnum indiEnum,ResourceFileMap resourceMap){
  List<IIndicatorNode> chilren=new ArrayList<IIndicatorNode>();
  try {
    if (UDIHelper.isUDILibFolder(folder)) {
      return new IIndicatorNode[0];
    }
    for (    IResource resource : folder.members()) {
      if (resource instanceof IFile) {
        ModelElement modelElement=resourceMap.getModelElement((IFile)resource);
        if (modelElement == null) {
          continue;
        }
        Property property=PropertyHelper.getProperty(modelElement);
        if (property == null) {
          continue;
        }
        IIndicatorNode indicatorNode=createLeafNode(property.getDisplayName(),indiEnum,modelElement);
        if (indicatorNode == null) {
          continue;
        }
        chilren.add(indicatorNode);
      }
 else {
        ICategoryNode indicatorCateNode=new IndicatorCategoryNode(resource.getName());
        IIndicatorNode[] nestFolderNodes=getNestFolderNodes((IFolder)resource,indiEnum,resourceMap);
        if (nestFolderNodes.length > 0) {
          indicatorCateNode.setChildren(nestFolderNodes);
          chilren.add(indicatorCateNode);
        }
      }
    }
  }
 catch (  CoreException e) {
  }
  return chilren.toArray(new IIndicatorNode[chilren.size()]);
}",0.9519529899758036
136889,"private IndicatorUnit createTempSpecialIndicatorUnit(IndicatorEnum indicatorEnum,Indicator indicator){
  Indicator tempIndicator=indicator;
  if (tempIndicator == null) {
    EFactoryImpl factory=(EFactoryImpl)indicatorEnum.getIndicatorType().getEPackage().getEFactoryInstance();
    tempIndicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(tempIndicator)) {
      log.error(DefaultMessagesImpl.getString(""String_Node_Str"") + tempIndicator.getName());
    }
  }
  if (this.specialIndicatorUnitList == null) {
    this.specialIndicatorUnitList=new ArrayList<IndicatorUnit>();
  }
  IndicatorUnit indicatorUnit=new ColumnIndicatorUnit(indicatorEnum,tempIndicator,this);
  tempSpecialIndicatorUnitList.add(indicatorUnit);
  this.specialIndicatorUnitMap.put(tempIndicator.getName(),indicatorUnit);
  return indicatorUnit;
}","private IndicatorUnit createTempSpecialIndicatorUnit(IndicatorEnum indicatorEnum,Indicator indicator){
  Indicator tempIndicator=indicator;
  if (tempIndicator == null) {
    EFactoryImpl factory=(EFactoryImpl)indicatorEnum.getIndicatorType().getEPackage().getEFactoryInstance();
    tempIndicator=(Indicator)factory.create(indicatorEnum.getIndicatorType());
    if (!DefinitionHandler.getInstance().setDefaultIndicatorDefinition(tempIndicator)) {
      log.error(DefaultMessagesImpl.getString(""String_Node_Str"") + tempIndicator.getName());
    }
  }
  if (this.specialIndicatorUnitList == null) {
    this.specialIndicatorUnitList=new ArrayList<IndicatorUnit>();
  }
  IndicatorUnit indicatorUnit=new ColumnIndicatorUnit(indicatorEnum,tempIndicator,this);
  if (tempSpecialIndicatorUnitList.contains(indicatorUnit)) {
    return indicatorUnit;
  }
  tempSpecialIndicatorUnitList.add(indicatorUnit);
  this.specialIndicatorUnitMap.put(tempIndicator.getName(),indicatorUnit);
  return indicatorUnit;
}",0.9329140461215932
136890,"/** 
 * Refresh the preview Table
 * @param modelElementIndicator
 */
public void refreshPreviewTable(ModelElementIndicator[] modelElements){
  this.currentModelElementIndicators=modelElements;
  this.refreshPreviewTable();
}","/** 
 * Refresh the preview Table
 * @param modelElementIndicator
 */
public void refreshPreviewTable(ModelElementIndicator[] modelElements){
  this.currentModelElementIndicators=modelElements;
  this.refreshPreviewTable(true);
}",0.9911894273127754
136891,"/** 
 * DOC talend Comment method ""createIndicatorSelectButton"".
 * @param buttonComposite
 */
private void createIndicatorSelectButton(Composite buttonComposite){
  Button indcBtn=toolkit.createButton(buttonComposite,DefaultMessagesImpl.getString(""String_Node_Str""),SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).applyTo(indcBtn);
  indcBtn.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (!isValidateRowCount()) {
        MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else {
        ModelElementIndicator[] result=treeViewer.openIndicatorSelectDialog(ColumnMasterDetailsPage.this.getSite().getShell());
        refreshCurrentTreeViewer(result);
        refreshPreviewTable();
      }
    }
  }
);
}","/** 
 * DOC talend Comment method ""createIndicatorSelectButton"".
 * @param buttonComposite
 */
private void createIndicatorSelectButton(Composite buttonComposite){
  Button indcBtn=toolkit.createButton(buttonComposite,DefaultMessagesImpl.getString(""String_Node_Str""),SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).applyTo(indcBtn);
  indcBtn.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (!isValidateRowCount()) {
        MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else {
        ModelElementIndicator[] result=treeViewer.openIndicatorSelectDialog(ColumnMasterDetailsPage.this.getSite().getShell());
        if (result != null) {
          refreshCurrentTreeViewer(result);
          refreshPreviewTable();
        }
      }
    }
  }
);
}",0.975363941769317
136892,"private void createNatTable(){
  sampleTable.createNatTable(null,dataTableComp,analysisHandler.getSelectedColumns());
}","private void createNatTable(){
  try {
    sampleTable.createNatTable(null,dataTableComp,analysisHandler.getSelectedColumns());
  }
 catch (  SQLException e) {
    MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),e.getMessage());
  }
}",0.6181818181818182
136893,"@Override protected void removeSelectedElements2(Tree tree){
  removeSelectedElements(tree);
}","@Override protected void removeSelectedElements2(Tree tree){
  removeSelectedElements(tree);
  notifyObservers();
}",0.8995215311004785
136894,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (item == null || DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        Menu m=tree.getMenu();
        if (m != null && !m.isDisposed()) {
          m.dispose();
        }
        tree.setMenu(null);
      }
 else {
        new AnalysisColumnColumnMenuProvider(tree).createTreeMenu(Boolean.FALSE);
      }
    }
  }
);
  tree.addTreeListener(treeAdapter);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
        if (meobj != null && indicatorobj == null) {
          ModelElementIndicator[] modelElementIndicator=openIndicatorSelectDialog(masterPage.getEditor().getEditorSite().getShell());
          masterPage.refreshCurrentTreeViewer(modelElementIndicator);
        }
 else         if (meobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(Display.getCurrent().getActiveShell(),item);
        }
      }
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (item == null || DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        Menu m=tree.getMenu();
        if (m != null && !m.isDisposed()) {
          m.dispose();
        }
        tree.setMenu(null);
      }
 else {
        new AnalysisColumnColumnMenuProvider(tree).createTreeMenu(Boolean.FALSE);
      }
    }
  }
);
  tree.addTreeListener(treeAdapter);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
        if (meobj != null && indicatorobj == null) {
          ModelElementIndicator[] modelElementIndicator=openIndicatorSelectDialog(masterPage.getEditor().getEditorSite().getShell());
          if (modelElementIndicator != null) {
            masterPage.refreshCurrentTreeViewer(modelElementIndicator);
            masterPage.refreshPreviewTable();
          }
        }
 else         if (meobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(Display.getCurrent().getActiveShell(),item);
        }
      }
    }
  }
);
}",0.9623106727721028
136895,"public ModelElementIndicator[] openIndicatorSelectDialog(Shell shell){
  String whereExpression=AnalysisHelper.getStringDataFilter(this.getAnalysis());
  final IndicatorSelectDialog dialog=new IndicatorSelectDialog(shell,DefaultMessagesImpl.getString(""String_Node_Str""),masterPage.getCurrentModelElementIndicators(),whereExpression);
  dialog.setLimitNumber(this.masterPage.getPreviewLimit());
  dialog.create();
  if (!DQPreferenceManager.isBlockWeb()) {
    dialog.getShell().addShellListener(new ShellAdapter(){
      @Override public void shellActivated(      ShellEvent e){
        dialog.getShell().setFocus();
        IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorSelectorHelpContextID());
        PlatformUI.getWorkbench().getHelpSystem().displayHelp(context);
      }
    }
);
    dialog.getShell().addHelpListener(new HelpListener(){
      public void helpRequested(      HelpEvent e){
        IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorSelectorHelpContextID());
        PlatformUI.getWorkbench().getHelpSystem().displayHelp(context);
      }
    }
);
  }
  if (dialog.checkWhereClause() && dialog.open() == Window.OK) {
    ModelElementIndicator[] result=dialog.getResult();
    for (    ModelElementIndicator modelElementIndicator : result) {
      modelElementIndicator.storeTempIndicator();
    }
    return result;
  }
 else {
    ModelElementIndicator[] result=dialog.getResult();
    for (    ModelElementIndicator modelElementIndicator : result) {
      modelElementIndicator.getTempIndicator().clear();
    }
    return new ModelElementIndicator[0];
  }
}","/** 
 * Open the dialog for select indicator
 * @param shell
 * @return The array of ModelElementIndicator which selected by user if user click ok button. If cancel button beclicked then the size of return array will be zero. If have a Where Clause is error will return null
 */
public ModelElementIndicator[] openIndicatorSelectDialog(Shell shell){
  String whereExpression=AnalysisHelper.getStringDataFilter(this.getAnalysis());
  final IndicatorSelectDialog dialog=new IndicatorSelectDialog(shell,DefaultMessagesImpl.getString(""String_Node_Str""),masterPage.getCurrentModelElementIndicators(),whereExpression);
  dialog.setLimitNumber(this.masterPage.getPreviewLimit());
  dialog.create();
  if (!DQPreferenceManager.isBlockWeb()) {
    dialog.getShell().addShellListener(new ShellAdapter(){
      @Override public void shellActivated(      ShellEvent e){
        dialog.getShell().setFocus();
        IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorSelectorHelpContextID());
        PlatformUI.getWorkbench().getHelpSystem().displayHelp(context);
      }
    }
);
    dialog.getShell().addHelpListener(new HelpListener(){
      public void helpRequested(      HelpEvent e){
        IContext context=HelpSystem.getContext(HelpPlugin.getDefault().getIndicatorSelectorHelpContextID());
        PlatformUI.getWorkbench().getHelpSystem().displayHelp(context);
      }
    }
);
  }
  if (!dialog.checkWhereClause()) {
    return null;
  }
  if (dialog.open() == Window.OK) {
    ModelElementIndicator[] result=dialog.getResult();
    for (    ModelElementIndicator modelElementIndicator : result) {
      modelElementIndicator.storeTempIndicator();
    }
    return result;
  }
 else {
    ModelElementIndicator[] result=dialog.getResult();
    for (    ModelElementIndicator modelElementIndicator : result) {
      modelElementIndicator.getTempIndicator().clear();
    }
    return new ModelElementIndicator[0];
  }
}",0.9119373776908024
136896,"@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem[] treeSelection=tree.getSelection();
  if (treeSelection.length > 0) {
    TreeItem item=treeSelection[0];
    Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
    Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
    if (meobj != null && indicatorobj == null) {
      ModelElementIndicator[] modelElementIndicator=openIndicatorSelectDialog(masterPage.getEditor().getEditorSite().getShell());
      masterPage.refreshCurrentTreeViewer(modelElementIndicator);
    }
 else     if (meobj != null && indicatorobj != null) {
      openIndicatorOptionDialog(Display.getCurrent().getActiveShell(),item);
    }
  }
}","@Override public void mouseDoubleClick(MouseEvent e){
  TreeItem[] treeSelection=tree.getSelection();
  if (treeSelection.length > 0) {
    TreeItem item=treeSelection[0];
    Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
    Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
    if (meobj != null && indicatorobj == null) {
      ModelElementIndicator[] modelElementIndicator=openIndicatorSelectDialog(masterPage.getEditor().getEditorSite().getShell());
      if (modelElementIndicator != null) {
        masterPage.refreshCurrentTreeViewer(modelElementIndicator);
        masterPage.refreshPreviewTable();
      }
    }
 else     if (meobj != null && indicatorobj != null) {
      openIndicatorOptionDialog(Display.getCurrent().getActiveShell(),item);
    }
  }
}",0.9349760438056126
136897,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=this.indicator.getInstantiatedExpressions();
  if (instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String regularExpressionFunctionName=dbmsLanguage.extractRegularExpressionFunction(expression);
    dbmsLanguage.setRegularExpressionFunction(regularExpressionFunctionName);
    dbmsLanguage.setFunctionReturnValue(expression);
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=indicator.getInstantiatedExpressions();
  if (instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String regexp=dbmsLanguage.getRegexPatternString(indicator);
    dbmsLanguage.setRegularExpressionFunction(dbmsLanguage.extractRegularExpressionFunction(expression,regexp));
    dbmsLanguage.setFunctionReturnValue(dbmsLanguage.extractRegularExpressionFunctionReturnValue(expression,regexp));
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}",0.9178245335450576
136898,"/** 
 * remember the result value for regular expression.So that we can get complete expression and Normal it should be ""=1""
 * @param expression
 */
public void setFunctionReturnValue(Expression expression){
  try {
    String tempString=splictExpression(expression);
    tempString=tempString.split(""String_Node_Str"").length > 1 ? tempString.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    tempString=tempString.split(""String_Node_Str"").length > 1 ? tempString.split(""String_Node_Str"")[0] : ""String_Node_Str"";
    regularfunctionReturnValue=tempString.trim();
  }
 catch (  NullPointerException e) {
    log.error(e,e);
  }
}","/** 
 * remember the result value for regular expression.So that we can get complete expression and it should be ""=1"" always
 * @param expression
 */
public void setFunctionReturnValue(String returnValue){
  regularfunctionReturnValue=returnValue.trim();
}",0.4369369369369369
136899,"/** 
 * Extract the name of regular Expression Function If current database type need to use UDF deal regular expression, the expresssion which will definition on ""Regular Expression Matching.definition"" should like below: ""* + when REGULAR_FUNCTION(+ * +) + *"". else this method will not return correct result which you want
 * @param expression
 * @return the name of regular Expression Function or null when the expression is invalid
 */
public String extractRegularExpressionFunction(Expression expression){
  String functionName=null;
  try {
    String tempString=splictExpression(expression);
    functionName=tempString.split(""String_Node_Str"").length > 1 ? tempString.split(""String_Node_Str"")[0] : ""String_Node_Str"";
    functionName=functionName.trim();
  }
 catch (  NullPointerException e) {
    log.error(e,e);
  }
  return functionName;
}","/** 
 * Extract the name of regular Expression Function If current database type need to use UDF deal regular expression, the expresssion which will definition on ""Regular Expression Matching.definition"" should like below: ""* + when REGULAR_FUNCTION(+ * +) + *"". else this method will not return correct result which you want
 * @param expression
 * @return the name of regular Expression Function or empty string when the expression is invalid
 * @exception If current language is not implement this method will thorw UnsupportedOperationException
 */
public String extractRegularExpressionFunction(Expression expression,String regexp){
  throw new UnsupportedOperationException();
}",0.6705729166666666
136900,"@Override public String extractRegularExpressionFunction(Expression expression){
  return getRegularExpressionFunction();
}","@Override public String extractRegularExpressionFunction(Expression expression,String regex){
  return getRegularExpressionFunction();
}",0.9498069498069498
136901,"@Override public String extractRegularExpressionFunction(Expression expression){
  return getRegularExpressionFunction();
}","@Override public String extractRegularExpressionFunction(Expression expression,String regex){
  return getRegularExpressionFunction();
}",0.9498069498069498
136902,"@Override public String extractRegularExpressionFunction(Expression expression){
  return getRegularExpressionFunction();
}","@Override public String extractRegularExpressionFunction(Expression expression,String regex){
  return getRegularExpressionFunction();
}",0.9498069498069498
136903,"@Override public String extractRegularExpressionFunction(Expression expression){
  return getRegularExpressionFunction();
}","@Override public String extractRegularExpressionFunction(Expression expression,String regex){
  return getRegularExpressionFunction();
}",0.9498069498069498
136904,"@Override public String extractRegularExpressionFunction(Expression expression){
  return getRegularExpressionFunction();
}","@Override public String extractRegularExpressionFunction(Expression expression,String regex){
  return getRegularExpressionFunction();
}",0.9498069498069498
136905,"/** 
 * DOC talend Comment method ""createFixedColumns"".
 * @return
 */
protected Collection<? extends String> createFixedColumns(int columnSize){
  List<String> columnNames=new ArrayList<String>();
  columnNames.add(MatchAnalysisConstant.BLOCK_KEY);
  additionalColumnPosition=new ColumnPosition(columnSize);
  columnNames.add(MatchAnalysisConstant.GID);
  sortState=new SortState(columnNames.size());
  columnNames.add(MatchAnalysisConstant.GRP_SIZE);
  this.masterColumn=columnNames.size();
  columnNames.add(MatchAnalysisConstant.MASTER);
  columnNames.add(MatchAnalysisConstant.SCORE);
  columnNames.add(MatchAnalysisConstant.GRP_QUALITY);
  columnNames.add(MatchAnalysisConstant.ATTRIBUTE_SCORES);
  return columnNames;
}","/** 
 * DOC talend Comment method ""createFixedColumns"".
 * @return
 */
protected Collection<? extends String> createFixedColumns(int columnSize){
  List<String> columnNames=new ArrayList<String>();
  columnNames.add(MatchAnalysisConstant.BLOCK_KEY);
  additionalColumnPosition=new ColumnPosition(columnSize + 1);
  columnNames.add(MatchAnalysisConstant.GID);
  sortState=new SortState(columnSize + 2);
  columnNames.add(MatchAnalysisConstant.GRP_SIZE);
  this.masterColumn=columnSize + 3;
  columnNames.add(MatchAnalysisConstant.MASTER);
  columnNames.add(MatchAnalysisConstant.SCORE);
  columnNames.add(MatchAnalysisConstant.GRP_QUALITY);
  columnNames.add(MatchAnalysisConstant.ATTRIBUTE_SCORES);
  return columnNames;
}",0.9779005524861878
136906,"private String[] createColumnLabel(ModelElement[] columns){
  int columnCount=getFixedColumnCount();
  if (columns != null) {
    columnCount=columns.length + columnCount;
  }
  List<String> columnsName=new ArrayList<String>();
  if (columns != null) {
    for (    ModelElement column : columns) {
      columnsName.add(column.getName());
    }
  }
  columnsName.addAll(createFixedColumns(columns.length));
  return columnsName.toArray(new String[columnsName.size()]);
}","private String[] createColumnLabel(ModelElement[] columns){
  int columnCount=getFixedColumnCount();
  if (columns != null) {
    columnCount=columns.length + columnCount;
  }
  List<String> columnsName=new ArrayList<String>();
  if (columns != null) {
    for (    ModelElement column : columns) {
      columnsName.add(column.getName());
    }
  }
  columnsName.addAll(createFixedColumns(columns == null ? 0 : columns.length));
  return columnsName.toArray(new String[columnsName.size()]);
}",0.9771784232365144
136907,"@Override protected void createSubChart(Composite sectionClient){
  if (!TOPChartUtil.getInstance().isTOPChartInstalled()) {
    return;
  }
  RecordMatchingIndicator recordMatchingIndicator=MatchRuleAnlaysisUtils.getRecordMatchIndicatorFromAna(analysis);
  Composite chartComposite=toolkit.createComposite(sectionClient);
  GridLayout tableLayout=new GridLayout(1,Boolean.TRUE);
  chartComposite.setLayout(tableLayout);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  chartComposite.setLayoutData(gridData);
  matchRuleChartComp=new MatchRuleDataChart(chartComposite,recordMatchingIndicator.getGroupSize2groupFrequency());
  createHideGroupComposite(chartComposite);
}","@Override protected void createSubChart(Composite sectionClient){
  RecordMatchingIndicator recordMatchingIndicator=MatchRuleAnlaysisUtils.getRecordMatchIndicatorFromAna(analysis);
  Composite chartComposite=toolkit.createComposite(sectionClient);
  GridLayout tableLayout=new GridLayout(1,Boolean.TRUE);
  chartComposite.setLayout(tableLayout);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  chartComposite.setLayoutData(gridData);
  matchRuleChartComp=new MatchRuleDataChart(chartComposite,recordMatchingIndicator.getGroupSize2groupFrequency());
  if (!TOPChartUtil.getInstance().isTOPChartInstalled()) {
    return;
  }
  createHideGroupComposite(chartComposite);
}",0.8892171344165436
136908,"@Override protected void createSubChart(Composite sectionClient){
  if (!TOPChartUtil.getInstance().isTOPChartInstalled()) {
    return;
  }
  Composite chartComposite=toolkit.createComposite(sectionClient);
  GridLayout tableLayout=new GridLayout(1,Boolean.TRUE);
  chartComposite.setLayout(tableLayout);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  chartComposite.setLayoutData(gridData);
  matchRuleChartComp=new MatchRuleDataChart(chartComposite,new HashMap<Object,Long>());
  createHideGroupComposite(chartComposite);
}","@Override protected void createSubChart(Composite sectionClient){
  Composite chartComposite=toolkit.createComposite(sectionClient);
  GridLayout tableLayout=new GridLayout(1,Boolean.TRUE);
  chartComposite.setLayout(tableLayout);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  chartComposite.setLayoutData(gridData);
  matchRuleChartComp=new MatchRuleDataChart(chartComposite,new HashMap<Object,Long>());
  if (!TOPChartUtil.getInstance().isTOPChartInstalled()) {
    return;
  }
  createHideGroupComposite(chartComposite);
}",0.8598130841121495
136909,"public int getRowCount(Object dataset){
  if (isServiceInstalled()) {
    return chartService.getRowCount(dataset);
  }
  return Integer.MIN_VALUE;
}","public int getRowCount(Object dataset){
  if (isTOPChartInstalled()) {
    return chartService.getRowCount(dataset);
  }
  return Integer.MIN_VALUE;
}",0.9565217391304348
136910,"public void addValueToCategoryDataset(Object dataset,double value,String labelX,String labelY){
  if (isServiceInstalled()) {
    chartService.addValueToCategoryDataset(dataset,value,labelX,labelY);
  }
}","public void addValueToCategoryDataset(Object dataset,double value,String labelX,String labelY){
  if (isTOPChartInstalled()) {
    chartService.addValueToCategoryDataset(dataset,value,labelX,labelY);
  }
}",0.9633251833740832
136911,"public Comparable getRowKey(Object dataset,int row){
  if (isServiceInstalled()) {
    return chartService.getRowKey(dataset,row);
  }
  return Integer.MIN_VALUE;
}","public Comparable getRowKey(Object dataset,int row){
  if (isTOPChartInstalled()) {
    return chartService.getRowKey(dataset,row);
  }
  return Integer.MIN_VALUE;
}",0.96048632218845
136912,"public int getColumnCount(Object dataset){
  if (isServiceInstalled()) {
    return chartService.getColumnCount(dataset);
  }
  return Integer.MIN_VALUE;
}","public int getColumnCount(Object dataset){
  if (isTOPChartInstalled()) {
    return chartService.getColumnCount(dataset);
  }
  return Integer.MIN_VALUE;
}",0.9581993569131833
136913,"public Object createDefaultCategoryDataset(){
  if (isServiceInstalled()) {
    return chartService.createDefaultCategoryDataset();
  }
  return null;
}","public Object createDefaultCategoryDataset(){
  if (isTOPChartInstalled()) {
    return chartService.createDefaultCategoryDataset();
  }
  return null;
}",0.9573770491803278
136914,"public Number getValue(Object dataset,Comparable rowKey,Comparable columnKey){
  if (chartService != null) {
    return chartService.getValue(dataset,rowKey,columnKey);
  }
  return Integer.MIN_VALUE;
}","public Number getValue(Object dataset,Comparable rowKey,Comparable columnKey){
  if (isTOPChartInstalled()) {
    return chartService.getValue(dataset,rowKey,columnKey);
  }
  return Integer.MIN_VALUE;
}",0.9185185185185184
136915,"public void clearDataset(Object dataset){
  if (chartService != null) {
    chartService.clearDataset(dataset);
  }
}","public void clearDataset(Object dataset){
  if (isTOPChartInstalled()) {
    chartService.clearDataset(dataset);
  }
}",0.8851063829787233
136916,"public int getRowIndex(Object dataset,Comparable key){
  if (isServiceInstalled()) {
    return chartService.getRowIndex(dataset,key);
  }
  return Integer.MIN_VALUE;
}","public int getRowIndex(Object dataset,Comparable key){
  if (isTOPChartInstalled()) {
    return chartService.getRowIndex(dataset,key);
  }
  return Integer.MIN_VALUE;
}",0.9614243323442137
136917,"public Comparable getColumnKey(Object dataset,int column){
  if (isServiceInstalled()) {
    return chartService.getColumnKey(dataset,column);
  }
  return Integer.MIN_VALUE;
}","public Comparable getColumnKey(Object dataset,int column){
  if (isTOPChartInstalled()) {
    return chartService.getColumnKey(dataset,column);
  }
  return Integer.MIN_VALUE;
}",0.963172804532578
136918,"public List getRowKeys(Object dataset){
  if (isServiceInstalled()) {
    return chartService.getRowKeys(dataset);
  }
  return null;
}","public List getRowKeys(Object dataset){
  if (isTOPChartInstalled()) {
    return chartService.getRowKeys(dataset);
  }
  return null;
}",0.9520295202952028
136919,"public int getColumnIndex(Object dataset,Comparable key){
  if (isServiceInstalled()) {
    return chartService.getColumnIndex(dataset,key);
  }
  return Integer.MIN_VALUE;
}","public int getColumnIndex(Object dataset,Comparable key){
  if (isTOPChartInstalled()) {
    return chartService.getColumnIndex(dataset,key);
  }
  return Integer.MIN_VALUE;
}",0.9627507163323782
136920,"public List getColumnKeys(Object dataset){
  if (isServiceInstalled()) {
    return chartService.getColumnKeys(dataset);
  }
  return null;
}","public List getColumnKeys(Object dataset){
  if (isTOPChartInstalled()) {
    return chartService.getColumnKeys(dataset);
  }
  return null;
}",0.9540636042402828
136921,"public static List<String> getLabels(){
  List<String> list=new ArrayList<>();
  for (  ReportType t : ReportType.values()) {
    if (!list.contains(t.getLabel())) {
      list.add(t.getLabel());
    }
  }
  return list;
}","public static List<String> getLabels(){
  List<String> list=new ArrayList<String>();
  for (  ReportType t : ReportType.values()) {
    if (!list.contains(t.getLabel())) {
      list.add(t.getLabel());
    }
  }
  return list;
}",0.9866666666666668
136922,"/** 
 * Method ""getAnalyses"".
 * @param report
 * @return a list of analyses or an empty list. Do not use this list to add analysis to the report.
 */
public static List<Analysis> getAnalyses(Report report){
  List<Analysis> analyses=new ArrayList<>();
  if (report instanceof TdReport) {
    for (    AnalysisMap anaMap : ((TdReport)report).getAnalysisMap()) {
      Analysis analysis=anaMap.getAnalysis();
      if (analysis != null) {
        analyses.add(analysis);
      }
    }
  }
  return analyses;
}","/** 
 * Method ""getAnalyses"".
 * @param report
 * @return a list of analyses or an empty list. Do not use this list to add analysis to the report.
 */
public static List<Analysis> getAnalyses(Report report){
  List<Analysis> analyses=new ArrayList<Analysis>();
  if (report instanceof TdReport) {
    for (    AnalysisMap anaMap : ((TdReport)report).getAnalysisMap()) {
      Analysis analysis=anaMap.getAnalysis();
      if (analysis != null) {
        analyses.add(analysis);
      }
    }
  }
  return analyses;
}",0.9921875
136923,"@Override public boolean finalizeComputation(){
  Iterator<Object> iterator=duplicateObjects.iterator();
  long dupSize=0;
  while (iterator.hasNext()) {
    Object key=iterator.next();
    List<Object> valueArray=distinctMap.get(key);
    dupSize++;
    if (needStoreDrillDownData()) {
      handleDrillDownData(key,valueArray);
    }
  }
  this.setDuplicateValueCount(Long.valueOf(dupSize));
  return super.finalizeComputation();
}","@Override public boolean finalizeComputation(){
  Iterator<Object> iterator=duplicateObjects.iterator();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    if (needStoreDrillDownData()) {
      List<Object> valueArray=distinctMap.get(key);
      handleDrillDownData(key,valueArray);
    }
 else {
      break;
    }
  }
  this.setDuplicateValueCount(Long.valueOf(duplicateObjects.size()));
  return super.finalizeComputation();
}",0.826879271070615
136924,"@Override public boolean handle(Object data){
  super.handle(data);
  if (data != null) {
    if (!this.uniqueObjects.add(data)) {
      duplicateObjects.add(data);
    }
 else {
      this.mustStoreRow=true;
    }
  }
  return true;
}","@Override public boolean handle(Object data){
  super.handle(data);
  if (data != null) {
    if (this.distintObjects.add(data)) {
      this.mustStoreRow=true;
    }
 else {
      duplicateObjects.add(data);
    }
  }
  return true;
}",0.6638297872340425
136925,"@Override public AbstractDB<Object> getMapDB(String dbName){
  if (isUsedMapDBMode()) {
    if (StandardDBName.computeProcess.name().equals(dbName)) {
      if (needReconnect((DBSet<Object>)uniqueObjects)) {
        return initValueForDBSet(StandardDBName.computeProcessSet.name());
      }
 else {
        return (DBSet<Object>)uniqueObjects;
      }
    }
 else     if (StandardDBName.drillDownValues.name().equals(dbName)) {
      return super.getMapDB(StandardDBName.drillDown.name());
    }
  }
  return super.getMapDB(dbName);
}","@Override public AbstractDB<Object> getMapDB(String dbName){
  if (isUsedMapDBMode()) {
    if (StandardDBName.computeProcess.name().equals(dbName)) {
      if (needReconnect((DBSet<Object>)distintObjects)) {
        return initValueForDBSet(StandardDBName.computeProcessSet.name());
      }
 else {
        return (DBSet<Object>)distintObjects;
      }
    }
 else     if (StandardDBName.drillDownValues.name().equals(dbName)) {
      return super.getMapDB(StandardDBName.drillDown.name());
    }
  }
  return super.getMapDB(dbName);
}",0.6822429906542056
136926,"@Override public boolean finalizeComputation(){
  uniqueObjects.removeAll(duplicateObjects);
  clearDrillDownData();
  this.setUniqueValueCount(Long.valueOf(uniqueObjects.size()));
  return super.finalizeComputation();
}","@Override public boolean finalizeComputation(){
  clearDrillDownData();
  this.setUniqueValueCount(Long.valueOf(distintObjects.size() - duplicateObjects.size()));
  return super.finalizeComputation();
}",0.3222748815165877
136927,"@Override public boolean reset(){
  this.uniqueValueCount=UNIQUE_VALUE_COUNT_EDEFAULT;
  if (isUsedMapDBMode()) {
    uniqueObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
    if (uniqueObjects != null) {
      ((DBSet<Object>)uniqueObjects).clear();
    }
    duplicateObjects=initValueForDBSet(StandardDBName.temp.name());
    if (duplicateObjects != null) {
      ((DBSet<Object>)duplicateObjects).clear();
    }
  }
 else {
    this.uniqueObjects.clear();
    this.duplicateObjects.clear();
  }
  return super.reset();
}","@Override public boolean reset(){
  this.uniqueValueCount=UNIQUE_VALUE_COUNT_EDEFAULT;
  if (isUsedMapDBMode()) {
    distintObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
    if (distintObjects != null) {
      ((DBSet<Object>)distintObjects).clear();
    }
    duplicateObjects=initValueForDBSet(StandardDBName.temp.name());
    if (duplicateObjects != null) {
      ((DBSet<Object>)duplicateObjects).clear();
    }
  }
 else {
    this.distintObjects.clear();
    this.duplicateObjects.clear();
  }
  return super.reset();
}",0.9523809523809524
136928,"@Override public DataSetRow getRow(int index){
  DataSetRow returnDataSetRow=null;
  if (iterator == null) {
    return super.getRow(index);
  }
 else {
    if (index < 0 || index >= dataMap.size()) {
      throw new IndexOutOfBoundsException(Messages.getString(""String_Node_Str"") + index);
    }
    if (currentIndex > index) {
      iterator=dataSet.iterator();
      currentIndex=0;
    }
    while (currentIndex < index) {
      iterator.next();
      currentIndex++;
    }
    Object currentData=iterator.next();
    currentIndex++;
    Comparable[] comparable=new Comparable[1];
    comparable[1]=(Comparable)currentData;
    returnDataSetRow=new DataSetRow(this,comparable);
    return returnDataSetRow;
  }
}","@Override public DataSetRow getRow(int index){
  DataSetRow returnDataSetRow=null;
  if (iterator == null) {
    return super.getRow(index);
  }
 else {
    if (index < 0 || index >= dataSet.size()) {
      throw new IndexOutOfBoundsException(Messages.getString(""String_Node_Str"") + index);
    }
    if (currentIndex > index) {
      iterator=dataSet.iterator();
      currentIndex=0;
    }
    while (currentIndex < index) {
      iterator.next();
      currentIndex++;
    }
    Object currentData=iterator.next();
    currentIndex++;
    Comparable[] comparable=new Comparable[1];
    comparable[0]=(Comparable)currentData;
    returnDataSetRow=new DataSetRow(this,comparable);
    return returnDataSetRow;
  }
}",0.994413407821229
136929,"public Object createMapDBColumnSetDataSet(String[] columnHeader,ColumnSetDBMap mapDB,Long size,Indicator currIndicator,int pageSize){
  if (getSqlexplorerService() != null) {
    return getSqlexplorerService().createMapDBColumnSetDataSet(columnHeader,mapDB,size,currIndicator,pageSize);
  }
  return null;
}","public Object createMapDBColumnSetDataSet(String[] columnHeader,ColumnSetDBMap mapDB,Long size,DataValidation dataValidation,int pageSize){
  if (getSqlexplorerService() != null) {
    return getSqlexplorerService().createMapDBColumnSetDataSet(columnHeader,mapDB,size,dataValidation,pageSize);
  }
  return null;
}",0.8727858293075684
136930,"/** 
 * orgnize EList 'objectLs' by SQL.
 * @param sqlStatement
 * @param ok
 * @return
 * @throws SQLException
 */
private ReturnCode evaluateBySql(String sqlStatement,ReturnCode ok) throws SQLException {
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=createStatement();
    if (continueRun()) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + sqlStatement);
      }
      statement.execute(sqlStatement);
    }
    resultSet=statement.getResultSet();
    List<String> columnNames=getAnalyzedElementsName();
    if (resultSet == null) {
      String mess=Messages.getString(""String_Node_Str"",sqlStatement);
      log.warn(mess);
      ok.setReturnCode(mess,false);
      return ok;
    }
    EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
    indicToRowMap.clear();
    while (resultSet.next()) {
      if (!continueRun()) {
        break;
      }
      EList<Object> objectLs=new BasicEList<Object>();
      Iterator<String> it=columnNames.iterator();
      while (it.hasNext()) {
        Object obj=resultSet.getObject(it.next());
        objectLs.add(obj);
      }
      if (objectLs.size() == 0) {
        continue;
      }
      handleObjects(objectLs,resultSet);
    }
  }
  finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    getConnection().close();
  }
  return ok;
}","/** 
 * orgnize EList 'objectLs' by SQL.
 * @param sqlStatement
 * @param ok
 * @return
 * @throws SQLException
 */
private ReturnCode evaluateBySql(String sqlStatement,ReturnCode ok) throws SQLException {
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=createStatement();
    if (continueRun()) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + sqlStatement);
      }
      statement.execute(sqlStatement);
    }
    resultSet=statement.getResultSet();
    List<String> columnNames=getAnalyzedElementsName();
    if (resultSet == null) {
      String mess=Messages.getString(""String_Node_Str"",sqlStatement);
      log.warn(mess);
      ok.setReturnCode(mess,false);
      return ok;
    }
    EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
    indicToRowMap.clear();
    while (resultSet.next()) {
      if (!continueRun()) {
        break;
      }
      EList<Object> objectLs=new BasicEList<Object>();
      Iterator<String> it=columnNames.iterator();
      while (it.hasNext()) {
        Object obj=ResultSetUtils.getObject(resultSet,it.next());
        objectLs.add(obj);
      }
      if (objectLs.size() == 0) {
        continue;
      }
      handleObjects(objectLs,resultSet);
    }
  }
  finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    getConnection().close();
  }
  return ok;
}",0.9887024991441288
136931,"private void handleByARow(String[] rowValues,long currentRow,List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  Object object=null;
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  int recordIncrement=0;
  element:   for (int i=0; i < analysisElementList.size(); i++) {
    MetadataColumn mColumn=(MetadataColumn)analysisElementList.get(i);
    Integer position=ColumnHelper.getColumnIndex(mColumn);
    if (position == null || position >= rowValues.length) {
      log.warn(Messages.getString(""String_Node_Str"",mColumn.getLabel(),currentRow,delimitedFileconnection.getFilePath()));
      if (!isBablyForm) {
        isBablyForm=true;
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
);
      }
      continue;
    }
    object=TalendTypeConvert.convertToObject(mColumn.getTalendType(),rowValues[position],mColumn.getPattern());
    List<Indicator> indicators=getIndicators(mColumn.getLabel());
    for (    Indicator indicator : indicators) {
      indicator.setDrillDownLimitSize(Long.valueOf(maxNumberRows));
      if (!continueRun()) {
        break element;
      }
      if (object == null && !(indicator instanceof RowCountIndicator)) {
        continue element;
      }
      if (indicator instanceof DuplicateCountIndicator) {
        ((DuplicateCountIndicator)indicator).handle(object,rowValues);
      }
 else {
        indicator.handle(object);
      }
      AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
      if (analyzedDataSet == null) {
        analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
        indicToRowMap.put(indicator,analyzedDataSet);
        analyzedDataSet.setDataCount(maxNumberRows);
        analyzedDataSet.setRecordSize(0);
      }
      if (analysis.getParameters().isStoreData()) {
        if (indicator.mustStoreRow()) {
          List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
          recordIncrement=valueObjectList.size();
          List<Object> inputRowList=new ArrayList<Object>();
          for (int j=0; j < rowValues.length; j++) {
            Object newobject=rowValues[j];
            if (indicator.isUsedMapDBMode()) {
              inputRowList.add(newobject == null ? PluginConstant.NULL_STRING : newobject);
              continue;
            }
 else {
              if (recordIncrement < maxNumberRows) {
                if (recordIncrement < valueObjectList.size()) {
                  valueObjectList.get(recordIncrement)[j]=newobject;
                }
 else {
                  Object[] valueObject=new Object[rowValues.length];
                  valueObject[j]=newobject;
                  valueObjectList.add(valueObject);
                }
              }
 else {
                break;
              }
            }
          }
          if (indicator.isUsedMapDBMode()) {
            indicator.handleDrillDownData(object,inputRowList);
          }
        }
 else         if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
          List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
          if (columnElementList.size() == 0) {
            continue;
          }
          int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
          for (          Object[] dataObject : removeValueObjectList) {
            if (object instanceof Integer) {
              if (object.equals(Integer.parseInt((String)dataObject[offsetting]))) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
            if (dataObject[offsetting].equals(object)) {
              removeValueObjectList.remove(dataObject);
              break;
            }
          }
        }
      }
    }
  }
}","private void handleByARow(String[] rowValues,long currentRow,List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  Object object=null;
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  int recordIncrement=0;
  element:   for (int i=0; i < analysisElementList.size(); i++) {
    MetadataColumn mColumn=(MetadataColumn)analysisElementList.get(i);
    Integer position=ColumnHelper.getColumnIndex(mColumn);
    if (position == null || position >= rowValues.length) {
      log.warn(Messages.getString(""String_Node_Str"",mColumn.getLabel(),currentRow,delimitedFileconnection.getFilePath()));
      if (!isBablyForm) {
        isBablyForm=true;
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
);
      }
      continue;
    }
    object=TalendTypeConvert.convertToObject(mColumn.getTalendType(),rowValues[position],mColumn.getPattern());
    List<Indicator> indicators=getIndicators(mColumn.getLabel());
    for (    Indicator indicator : indicators) {
      if (!continueRun()) {
        break element;
      }
      if (object == null && !(indicator instanceof RowCountIndicator)) {
        continue element;
      }
      if (indicator instanceof DuplicateCountIndicator) {
        ((DuplicateCountIndicator)indicator).handle(object,rowValues);
      }
 else {
        indicator.handle(object);
      }
      AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
      if (analyzedDataSet == null) {
        analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
        indicToRowMap.put(indicator,analyzedDataSet);
        analyzedDataSet.setDataCount(maxNumberRows);
        analyzedDataSet.setRecordSize(0);
      }
      if (analysis.getParameters().isStoreData()) {
        if (indicator.mustStoreRow()) {
          List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
          recordIncrement=valueObjectList.size();
          List<Object> inputRowList=new ArrayList<Object>();
          for (int j=0; j < rowValues.length; j++) {
            Object newobject=rowValues[j];
            if (indicator.isUsedMapDBMode()) {
              inputRowList.add(newobject == null ? PluginConstant.NULL_STRING : newobject);
              continue;
            }
 else {
              if (recordIncrement < maxNumberRows) {
                if (recordIncrement < valueObjectList.size()) {
                  valueObjectList.get(recordIncrement)[j]=newobject;
                }
 else {
                  Object[] valueObject=new Object[rowValues.length];
                  valueObject[j]=newobject;
                  valueObjectList.add(valueObject);
                }
              }
 else {
                break;
              }
            }
          }
          if (indicator.isUsedMapDBMode()) {
            MapDBUtils.handleDrillDownData(object,inputRowList,indicator);
          }
        }
 else         if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
          List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
          if (columnElementList.size() == 0) {
            continue;
          }
          int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
          for (          Object[] dataObject : removeValueObjectList) {
            if (object instanceof Integer) {
              if (object.equals(Integer.parseInt((String)dataObject[offsetting]))) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
            if (dataObject[offsetting].equals(object)) {
              removeValueObjectList.remove(dataObject);
              break;
            }
          }
        }
      }
    }
  }
}",0.9880320789636028
136932,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=createStatement();
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"",sqlStatement);
    log.warn(mess);
    ok.setReturnCode(mess,false);
    statement.close();
    return ok;
  }
  ok=getMessageForInvalidJUDIs();
  int columnCount=resultSet.getMetaData().getColumnCount();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int columnListSize=columnlist.size();
  label:   while (resultSet.next()) {
    for (int i=0; i < columnListSize; i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(col);
      Object object=null;
      try {
        object=resultSet.getObject(col);
      }
 catch (      SQLException e) {
        if (""String_Node_Str"".equals(resultSet.getString(col))) {
          object=null;
        }
      }
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        indicator.setDrillDownLimitSize(Long.valueOf(maxNumberRows));
        if (!continueRun()) {
          break label;
        }
        if (indicator instanceof DuplicateCountIndicator) {
          ((DuplicateCountIndicator)indicator).handle(object,resultSet,columnCount);
        }
 else {
          indicator.handle(object);
        }
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData()) {
          if (indicator.mustStoreRow()) {
            List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
            recordIncrement=valueObjectList.size();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnList=ColumnSetHelper.getColumns(doSwitch);
            List<Object> inputRowList=new ArrayList<Object>();
            for (int j=0; j < columnCount; j++) {
              String newcol=columnList.get(j).getName();
              Object newobject=null;
              try {
                newobject=resultSet.getObject(newcol);
              }
 catch (              SQLException e) {
                if (""String_Node_Str"".equals(resultSet.getString(newcol))) {
                  newobject=null;
                }
              }
              if (indicator.isUsedMapDBMode()) {
                inputRowList.add(newobject == null ? PluginConstant.NULL_STRING : newobject);
                continue;
              }
 else {
                if (recordIncrement < maxNumberRows) {
                  if (recordIncrement < valueObjectList.size()) {
                    valueObjectList.get(recordIncrement)[j]=newobject;
                  }
 else {
                    Object[] valueObject=new Object[columnCount];
                    valueObject[j]=newobject;
                    valueObjectList.add(valueObject);
                  }
                }
 else {
                  break;
                }
              }
            }
            if (indicator.isUsedMapDBMode()) {
              indicator.handleDrillDownData(object,inputRowList);
            }
          }
 else           if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
            List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnElementList=ColumnSetHelper.getColumns(doSwitch);
            int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
            for (            Object[] dataObject : removeValueObjectList) {
              if (dataObject[offsetting].equals(object)) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
          }
        }
      }
    }
  }
  for (int i=0; i < columnListSize; i++) {
    String col=columnlist.get(i);
    List<Indicator> indicators=getIndicators(col);
    if (indicators.size() > 0 && indicators.get(0).isUsedMapDBMode()) {
      break;
    }
    for (    Indicator indicator : indicators) {
      if (indicator instanceof DuplicateCountIndicator) {
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        addResultToIndicatorToRowMap(indicator,indicToRowMap);
      }
    }
  }
  resultSet.close();
  statement.close();
  getConnection().close();
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=createStatement();
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"",sqlStatement);
    log.warn(mess);
    ok.setReturnCode(mess,false);
    statement.close();
    return ok;
  }
  ok=getMessageForInvalidJUDIs();
  int columnCount=resultSet.getMetaData().getColumnCount();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int columnListSize=columnlist.size();
  label:   while (resultSet.next()) {
    for (int i=0; i < columnListSize; i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(col);
      Object object=ResultSetUtils.getObject(resultSet,col);
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        if (!continueRun()) {
          break label;
        }
        if (indicator instanceof DuplicateCountIndicator) {
          ((DuplicateCountIndicator)indicator).handle(object,resultSet,columnCount);
        }
 else {
          indicator.handle(object);
        }
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData()) {
          if (indicator.mustStoreRow()) {
            List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
            recordIncrement=valueObjectList.size();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnList=ColumnSetHelper.getColumns(doSwitch);
            List<Object> inputRowList=new ArrayList<Object>();
            for (int j=0; j < columnCount; j++) {
              String newcol=columnList.get(j).getName();
              Object newobject=ResultSetUtils.getObject(resultSet,newcol);
              if (indicator.isUsedMapDBMode()) {
                inputRowList.add(newobject == null ? PluginConstant.NULL_STRING : newobject);
                continue;
              }
 else {
                if (recordIncrement < maxNumberRows) {
                  if (recordIncrement < valueObjectList.size()) {
                    valueObjectList.get(recordIncrement)[j]=newobject;
                  }
 else {
                    Object[] valueObject=new Object[columnCount];
                    valueObject[j]=newobject;
                    valueObjectList.add(valueObject);
                  }
                }
 else {
                  break;
                }
              }
            }
            if (indicator.isUsedMapDBMode()) {
              MapDBUtils.handleDrillDownData(object,inputRowList,indicator);
            }
          }
 else           if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
            List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnElementList=ColumnSetHelper.getColumns(doSwitch);
            int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
            for (            Object[] dataObject : removeValueObjectList) {
              if (dataObject[offsetting].equals(object)) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
          }
        }
      }
    }
  }
  for (int i=0; i < columnListSize; i++) {
    String col=columnlist.get(i);
    List<Indicator> indicators=getIndicators(col);
    if (indicators.size() > 0 && indicators.get(0).isUsedMapDBMode()) {
      break;
    }
    for (    Indicator indicator : indicators) {
      if (indicator instanceof DuplicateCountIndicator) {
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        addResultToIndicatorToRowMap(indicator,indicToRowMap);
      }
    }
  }
  resultSet.close();
  statement.close();
  getConnection().close();
  return ok;
}",0.9472313834403748
136933,"private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    AbstractDB<Object[]> mapDB=null;
    try {
      mapDB=ssIndicator.getMapDB(StandardDBName.dataSection.name());
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator() && mapDB != null);
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysisItem.getAnalysis().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
    if (mapDB != null) {
      final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object[]>(mapDB);
      controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
      ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
      resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}","private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    AbstractDB<Object> mapDB=null;
    try {
      mapDB=MapDBUtils.getMapDB(StandardDBName.dataSection.name(),ssIndicator);
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator() && mapDB != null);
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysisItem.getAnalysis().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
    if (mapDB != null) {
      final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object>(mapDB);
      controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
      ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
      resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}",0.9949803283136616
136934,"/** 
 * DataSet is used to be the input on the export wizard. unchecked is for the type of mapDB else will have a warning
 * @param controller
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Object getDataSetForMapDB(int pageSize){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  AbstractDB<?> mapDB=getMapDB();
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  if (AnalysisType.COLUMN_SET == analysisType) {
    Long size=getCurrentIndicatorResultSize();
    if (ColumnSetDBMap.class.isInstance(mapDB)) {
      return SqlExplorerUtils.getDefault().createMapDBColumnSetDataSet(columnHeader,(ColumnSetDBMap)mapDB,size,currIndicator,pageSize);
    }
  }
  if (DBSet.class.isInstance(mapDB)) {
    return SqlExplorerUtils.getDefault().createMapDBSetDataSet(columnHeader,(DBSet<Object>)mapDB,pageSize);
  }
 else {
    ColumnFilter columnFilter=getColumnFilter();
    Long itemSize=getItemSize(mapDB);
    return SqlExplorerUtils.getDefault().createMapDBDataSet(columnHeader,(DBMap<Object,List<Object>>)mapDB,pageSize,columnFilter,itemSize);
  }
}","/** 
 * DataSet is used to be the input on the export wizard. unchecked is for the type of mapDB else will have a warning
 * @param controller
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Object getDataSetForMapDB(int pageSize){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  AbstractDB<?> mapDB=getMapDB();
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  if (AnalysisType.COLUMN_SET == analysisType) {
    Long size=getCurrentIndicatorResultSize();
    if (ColumnSetDBMap.class.isInstance(mapDB)) {
      return SqlExplorerUtils.getDefault().createMapDBColumnSetDataSet(columnHeader,(ColumnSetDBMap)mapDB,size,IDataValidationFactory.INSTANCE.createValidation(currIndicator),pageSize);
    }
  }
  if (DBSet.class.isInstance(mapDB)) {
    return SqlExplorerUtils.getDefault().createMapDBSetDataSet(columnHeader,(DBSet<Object>)mapDB,pageSize);
  }
 else {
    ColumnFilter columnFilter=getColumnFilter();
    Long itemSize=getItemSize(mapDB);
    return SqlExplorerUtils.getDefault().createMapDBDataSet(columnHeader,(DBMap<Object,List<Object>>)mapDB,pageSize,columnFilter,itemSize);
  }
}",0.9714285714285714
136935,"/** 
 * DOC talend Comment method ""initTableViewerForMapDB"".
 * @param parent
 * @param table
 * @param ddEditorInput
 */
@SuppressWarnings(""String_Node_Str"") private void initTableViewerForMapDB(final Composite parent,final Table table,DrillDownEditorInput ddEditorInput){
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  tableView.setLabelProvider(new DrillDownResultLabelProvider());
  tableView.setContentProvider(new DrillDownResultContentProvider());
  final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
  table.setData(ddEditorInput.getDataSetForMapDB(controller.getPageSize()));
  Analysis analysis=ddEditorInput.getAnalysis();
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  IPageLoader<PageResult<Object[]>> pageLoader=null;
  AbstractDB<Object> mapDB=ddEditorInput.getMapDB();
  Indicator generateMapDBIndicator=ddEditorInput.getGenerateMapDBIndicator();
  MapDBManager.getInstance().addDBRef(generateMapDBIndicator.getMapDBFile());
  Long itemsSize=ddEditorInput.getItemSize(mapDB);
  if (AnalysisType.COLUMN_SET == analysisType) {
    pageLoader=new MapDBPageLoader<Object>(mapDB,ddEditorInput.getCurrIndicator(),itemsSize);
  }
 else {
    ColumnFilter filter=ddEditorInput.getColumnFilter();
    pageLoader=new MapDBPageLoader<Object>(mapDB,null,itemsSize,filter);
  }
  controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,tableView,pageLoader,PageResultContentProvider.getInstance(),null));
  controller.addPageChangedListener(new PageChangedAdapter(){
    @Override public void pageIndexChanged(    int oldPageIndex,    int newPageIndex,    PageableController controller){
      Object data=table.getData();
      if (data != null && SqlExplorerUtils.getDefault().isInstanceofTalendDataSet(data)) {
        long totalSize=controller.getTotalElements();
        long pageSize=controller.getPageSize();
        long pageIndex=controller.getPageOffset();
        long fromIndex=pageIndex;
        long toIndex=pageIndex + pageSize;
        if (toIndex > totalSize) {
          toIndex=totalSize;
        }
        SqlExplorerUtils.getDefault().resetTalendDataSetIndex(data,fromIndex,toIndex);
        parent.layout();
      }
    }
  }
);
  ResultAndNavigationPageGraphicsRenderer resultAndNavigationPageGraphicsRenderer=new ResultAndNavigationPageGraphicsRenderer(parent,SWT.NONE,controller);
  resultAndNavigationPageGraphicsRenderer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createColumns(tableView,controller,((DrillDownEditorInput)this.getEditorInput()));
  controller.setCurrentPage(0);
}","/** 
 * DOC talend Comment method ""initTableViewerForMapDB"".
 * @param parent
 * @param table
 * @param ddEditorInput
 */
@SuppressWarnings(""String_Node_Str"") private void initTableViewerForMapDB(final Composite parent,final Table table,DrillDownEditorInput ddEditorInput){
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  tableView.setLabelProvider(new DrillDownResultLabelProvider());
  tableView.setContentProvider(new DrillDownResultContentProvider());
  final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
  table.setData(ddEditorInput.getDataSetForMapDB(controller.getPageSize()));
  Analysis analysis=ddEditorInput.getAnalysis();
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  IPageLoader<PageResult<Object[]>> pageLoader=null;
  AbstractDB<Object> mapDB=ddEditorInput.getMapDB();
  Indicator generateMapDBIndicator=ddEditorInput.getGenerateMapDBIndicator();
  MapDBManager.getInstance().addDBRef(MapDBUtils.getMapDBFile(generateMapDBIndicator));
  Long itemsSize=ddEditorInput.getItemSize(mapDB);
  if (AnalysisType.COLUMN_SET == analysisType) {
    pageLoader=new MapDBPageLoader<Object>(mapDB,IDataValidationFactory.INSTANCE.createValidation(ddEditorInput.getCurrIndicator()),itemsSize);
  }
 else {
    ColumnFilter filter=ddEditorInput.getColumnFilter();
    pageLoader=new MapDBPageLoader<Object>(mapDB,null,itemsSize,filter);
  }
  controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,tableView,pageLoader,PageResultContentProvider.getInstance(),null));
  controller.addPageChangedListener(new PageChangedAdapter(){
    @Override public void pageIndexChanged(    int oldPageIndex,    int newPageIndex,    PageableController controller){
      Object data=table.getData();
      if (data != null && SqlExplorerUtils.getDefault().isInstanceofTalendDataSet(data)) {
        long totalSize=controller.getTotalElements();
        long pageSize=controller.getPageSize();
        long pageIndex=controller.getPageOffset();
        long fromIndex=pageIndex;
        long toIndex=pageIndex + pageSize;
        if (toIndex > totalSize) {
          toIndex=totalSize;
        }
        SqlExplorerUtils.getDefault().resetTalendDataSetIndex(data,fromIndex,toIndex);
        parent.layout();
      }
    }
  }
);
  ResultAndNavigationPageGraphicsRenderer resultAndNavigationPageGraphicsRenderer=new ResultAndNavigationPageGraphicsRenderer(parent,SWT.NONE,controller);
  resultAndNavigationPageGraphicsRenderer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createColumns(tableView,controller,((DrillDownEditorInput)this.getEditorInput()));
  controller.setCurrentPage(0);
}",0.9818181818181818
136936,"@Override public void dispose(){
  super.dispose();
  DrillDownEditorInput ddEditorInput=(DrillDownEditorInput)this.getEditorInput();
  Indicator generateMapDBIndicator=ddEditorInput.getGenerateMapDBIndicator();
  MapDBManager.getInstance().removeDBRef(generateMapDBIndicator.getMapDBFile());
}","@Override public void dispose(){
  super.dispose();
  DrillDownEditorInput ddEditorInput=(DrillDownEditorInput)this.getEditorInput();
  Indicator generateMapDBIndicator=ddEditorInput.getGenerateMapDBIndicator();
  MapDBManager.getInstance().removeDBRef(MapDBUtils.getMapDBFile(generateMapDBIndicator));
}",0.9096989966555185
136937,"/** 
 * Get MapDB which store the drill down data for columnSet analysis
 * @param analysisType
 * @param analysis
 */
public static AbstractDB<Object> getColumnSetAnalysisMapDB(Analysis analysis){
  SimpleStatIndicator simpleStatIndicator=null;
  for (  Indicator indicator : analysis.getResults().getIndicators()) {
    if (SimpleStatIndicator.class.isInstance(indicator)) {
      simpleStatIndicator=(SimpleStatIndicator)indicator;
      break;
    }
  }
  if (simpleStatIndicator != null) {
    return simpleStatIndicator.getMapDB(StandardDBName.dataSection.name());
  }
  return null;
}","/** 
 * Get MapDB which store the drill down data for columnSet analysis
 * @param analysisType
 * @param analysis
 */
public static AbstractDB<Object> getColumnSetAnalysisMapDB(Analysis analysis){
  SimpleStatIndicator simpleStatIndicator=null;
  for (  Indicator indicator : analysis.getResults().getIndicators()) {
    if (SimpleStatIndicator.class.isInstance(indicator)) {
      simpleStatIndicator=(SimpleStatIndicator)indicator;
      break;
    }
  }
  if (simpleStatIndicator != null) {
    return MapDBUtils.getMapDB(StandardDBName.dataSection.name(),simpleStatIndicator);
  }
  return null;
}",0.958927074601844
136938,"/** 
 * Get MapDB which store the drill down data for current indicator
 * @param analysis
 * @return
 */
public static AbstractDB<Object> getMapDB(final ChartDataEntity dataEntity,Analysis analysis,MenuItemEntity itemEntitie){
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  if (AnalysisType.COLUMN_SET == analysisType) {
    return getColumnSetAnalysisMapDB(analysis);
  }
  Indicator indicator=dataEntity.getIndicator();
  String selectValue=dataEntity.getLabel();
  String dbMapName=getDBMapName(analysisType,indicator,selectValue,itemEntitie);
  return indicator.getMapDB(dbMapName);
}","/** 
 * Get MapDB which store the drill down data for current indicator
 * @param analysis
 * @return
 */
public static AbstractDB<Object> getMapDB(final ChartDataEntity dataEntity,Analysis analysis,MenuItemEntity itemEntitie){
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  if (AnalysisType.COLUMN_SET == analysisType) {
    return getColumnSetAnalysisMapDB(analysis);
  }
  Indicator indicator=dataEntity.getIndicator();
  String selectValue=dataEntity.getLabel();
  String dbMapName=getDBMapName(analysisType,indicator,selectValue,itemEntitie);
  return MapDBUtils.getMapDB(dbMapName,indicator);
}",0.9766693483507642
136939,"@Override public void widgetSelected(SelectionEvent e){
  if (ExecutionLanguage.JAVA == currentEngine) {
    try {
      DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
      if (input.computeColumnValueLength(input.filterAdaptDataList())) {
        CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
      }
 else {
        MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      }
    }
 catch (    PartInitException e1) {
      log.error(e1,e1);
    }
  }
 else {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
        String query=itemEntity.getQuery();
        String editorName=currentIndicator.getName();
        SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
      }
    }
);
  }
}","@Override public void widgetSelected(SelectionEvent e){
  if (ExecutionLanguage.JAVA == currentEngine) {
    try {
      DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
      if (SqlExplorerUtils.getDefault().getSqlexplorerService() != null) {
        CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
      }
    }
 catch (    PartInitException e1) {
      log.error(e1,e1);
    }
  }
 else {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
        String query=itemEntity.getQuery();
        String editorName=currentIndicator.getName();
        SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
      }
    }
);
  }
}",0.8705518308406395
136940,"public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      if (!currentIndicator.isUsedMapDBMode()) {
        if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
          return;
        }
        if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
          return;
        }
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                log.error(e1,e1);
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if (ChartTableFactory.isPatternFrequencyIndicator(currentIndicator) && createPatternFlag == 0) {
          ChartTableFactory.createMenuOfGenerateRegularPattern(analysis,menu,currentDataEntity);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}","public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      if (!currentIndicator.isUsedMapDBMode()) {
        if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
          return;
        }
        if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
          return;
        }
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (SqlExplorerUtils.getDefault().getSqlexplorerService() != null) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
              }
 catch (              PartInitException e1) {
                log.error(e1,e1);
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if (ChartTableFactory.isPatternFrequencyIndicator(currentIndicator) && createPatternFlag == 0) {
          ChartTableFactory.createMenuOfGenerateRegularPattern(analysis,menu,currentDataEntity);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}",0.9610652771746996
136941,"private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          if (!currentIndicator.isUsedMapDBMode()) {
            if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
              return;
            }
            if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
              return;
            }
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    log.error(e1,e1);
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if (ChartTableFactory.isPatternFrequencyIndicator(currentIndicator) && createPatternFlag == 0) {
              ChartTableFactory.createMenuOfGenerateRegularPattern(analysis,menu,currentDataEntity);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}","private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          if (!currentIndicator.isUsedMapDBMode()) {
            if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
              return;
            }
            if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
              return;
            }
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (SqlExplorerUtils.getDefault().getSqlexplorerService() != null) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
                  }
 catch (                  PartInitException e1) {
                    log.error(e1,e1);
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if (ChartTableFactory.isPatternFrequencyIndicator(currentIndicator) && createPatternFlag == 0) {
              ChartTableFactory.createMenuOfGenerateRegularPattern(analysis,menu,currentDataEntity);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}",0.9723690773067332
136942,"@Override public Double getFrequency(Object dataValue){
  if (this.count.compareTo(0L) == 0) {
    return Double.NaN;
  }
  ModelMatcher matcher=null;
  if (!(dataValue instanceof ModelMatcher)) {
    matcher=dateRetriever.getMatcher(dataValue.toString());
  }
 else {
    matcher=(ModelMatcher)dataValue;
  }
  return ((double)matcher.getScore()) / this.getCount().longValue();
}","@Override public Double getFrequency(Object dataValue){
  if (this.count.compareTo(0L) == 0) {
    return Double.NaN;
  }
  ModelMatcher matcher=null;
  if (dataValue instanceof ModelMatcher) {
    matcher=(ModelMatcher)dataValue;
    return ((double)matcher.getScore()) / this.getCount().longValue();
  }
 else {
    return super.getFrequency(dataValue);
  }
}",0.6288798920377868
136943,"private String getFunction(){
  Expression instantiatedExpression=dbmsLanguage.getInstantiatedExpression(indicator);
  final String body=instantiatedExpression.getBody();
  Pattern p=Pattern.compile(REGEX,Pattern.CASE_INSENSITIVE);
  String dbmsName=this.dbmsLanguage.getDbmsName();
  if (DbmsLanguageFactory.isInfomix(dbmsName)) {
    TdColumn column=(TdColumn)indicator.getAnalyzedElement();
    int javaType=column.getSqlDataType().getJavaDataType();
    if (Java2SqlType.isDateInSQL(javaType)) {
      p=Pattern.compile(REGEX_INFOMIX_DATE,Pattern.CASE_INSENSITIVE);
    }
 else {
      p=Pattern.compile(REGEX_INFORMIX,Pattern.CASE_INSENSITIVE);
    }
  }
  Matcher matcher=p.matcher(body);
  matcher.find();
  String group=matcher.group(1);
  return group;
}","private String getFunction(){
  Expression instantiatedExpression=dbmsLanguage.getInstantiatedExpression(indicator);
  final String body=instantiatedExpression.getBody();
  Pattern p=Pattern.compile(REGEX,Pattern.CASE_INSENSITIVE);
  String dbmsName=this.dbmsLanguage.getDbmsName();
  if (DbmsLanguageFactory.isInfomix(dbmsName)) {
    p=Pattern.compile(REGEX_INFORMIX,Pattern.CASE_INSENSITIVE);
  }
  Matcher matcher=p.matcher(body);
  matcher.find();
  String group=matcher.group(1);
  return group;
}",0.636650868878357
136944,"protected String getInstantiatedClause(){
  String colName=columnName;
  String function=null;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getSqlDataType().getJavaDataType();
  if (!Java2SqlType.isNumbericInSQL(javaType)) {
    function=getFunction();
  }
 else {
    colName=columnNameConvert();
  }
  Object value=null;
  if (Java2SqlType.isNumbericInSQL(javaType) && dbmsLanguage instanceof DB2DbmsLanguage) {
    value=entity.getKey();
  }
 else {
    value=""String_Node_Str"" + entity.getKey() + ""String_Node_Str"";
  }
  String clause=entity.isLabelNull() ? columnName + dbmsLanguage.isNull() : ((function == null ? colName : function) + dbmsLanguage.equal() + value);
  if (dbmsLanguage instanceof InfomixDbmsLanguage) {
    clause=clause.replaceAll(InfomixDbmsLanguage.AS_REPLACE_COLUMN,PluginConstant.EMPTY_STRING);
  }
  return clause;
}","@Override protected String getInstantiatedClause(){
  String colName=columnName;
  String function=null;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getSqlDataType().getJavaDataType();
  if (!Java2SqlType.isNumbericInSQL(javaType)) {
    function=getFunction();
  }
 else {
    colName=columnNameConvert();
  }
  Object value=null;
  if (Java2SqlType.isNumbericInSQL(javaType) && dbmsLanguage instanceof DB2DbmsLanguage) {
    value=entity.getKey();
  }
 else {
    value=""String_Node_Str"" + entity.getKey() + ""String_Node_Str"";
  }
  String clause=entity.isLabelNull() ? columnName + dbmsLanguage.isNull() : ((function == null ? colName : function) + dbmsLanguage.equal() + value);
  if (dbmsLanguage instanceof InfomixDbmsLanguage) {
    clause=clause.replaceAll(InfomixDbmsLanguage.AS_REPLACE_COLUMN,PluginConstant.EMPTY_STRING);
  }
  return clause;
}",0.9943693693693694
136945,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public List<Object[]> getDataSetDBMapSubList(Object dbMap,long fromIndex,long toIndex,Map<Long,Object> indexMap){
  return ((DBMap)dbMap).subList(fromIndex,toIndex,indexMap);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public List<Object[]> getDataSetDBMapSubList(Object dbMap,long fromIndex,long toIndex,Map<Long,Object> indexMap){
  return ((AbstractDB)dbMap).subList(fromIndex,toIndex,indexMap);
}",0.9766454352441614
136946,"/** 
 * get subList from fromIndex to toIndex
 * @param fromIndex
 * @param toIndex
 * @param indexMap
 * @return
 */
public List<Object[]> subList(long fromIndex,long toIndex,Map<Long,K> indexMap,DataValidation dataValiator){
  boolean stratToRecord=false;
  List<Object[]> returnList=new ArrayList<Object[]>();
  if (!checkIndex(fromIndex,toIndex)) {
    return returnList;
  }
  K fromKey=indexMap.get(fromIndex);
  K toKey=indexMap.get(toIndex);
  Iterator<K> iterator=null;
  long index=0;
  if (fromKey == null) {
    iterator=this.iterator();
  }
 else   if (toKey == null) {
    NavigableSet<K> tailSet=tailSet(fromKey,true);
    index=fromIndex;
    iterator=tailSet.iterator();
  }
 else {
    NavigableSet<K> tailSet=subSet(fromKey,toKey);
    index=fromIndex;
    iterator=tailSet.iterator();
  }
  while (iterator.hasNext()) {
    K next=iterator.next();
    if (dataValiator != null && !dataValiator.isValid(next)) {
      continue;
    }
    if (index == 0 && fromKey == null && indexMap != null) {
      indexMap.put(0l,next);
    }
    if (index == fromIndex) {
      stratToRecord=true;
    }
    if (index == toIndex) {
      if (toKey == null && indexMap != null) {
        indexMap.put(toIndex,next);
      }
      break;
    }
    if (stratToRecord == true) {
      returnList.add(new Object[]{next});
    }
    index++;
  }
  return returnList;
}","/** 
 * get subList from fromIndex to toIndex
 * @param fromIndex
 * @param toIndex
 * @param indexMap
 * @return
 */
public List<Object[]> subList(long fromIndex,long toIndex,Map<Long,K> indexMap,DataValidation dataValiator){
  boolean stratToRecord=false;
  List<Object[]> returnList=new ArrayList<Object[]>();
  if (!checkIndex(fromIndex,toIndex)) {
    return returnList;
  }
  K fromKey=null;
  K toKey=null;
  if (indexMap != null) {
    fromKey=indexMap.get(fromIndex);
    toKey=indexMap.get(toIndex);
  }
  Iterator<K> iterator=null;
  long index=0;
  if (fromKey == null) {
    iterator=this.iterator();
  }
 else   if (toKey == null) {
    NavigableSet<K> tailSet=tailSet(fromKey,true);
    index=fromIndex;
    iterator=tailSet.iterator();
  }
 else {
    NavigableSet<K> tailSet=subSet(fromKey,toKey);
    index=fromIndex;
    iterator=tailSet.iterator();
  }
  while (iterator.hasNext()) {
    K next=iterator.next();
    if (dataValiator != null && !dataValiator.isValid(next)) {
      continue;
    }
    if (index == 0 && fromKey == null && indexMap != null) {
      indexMap.put(0l,next);
    }
    if (index == fromIndex) {
      stratToRecord=true;
    }
    if (index == toIndex) {
      if (toKey == null && indexMap != null) {
        indexMap.put(toIndex,next);
      }
      break;
    }
    if (stratToRecord == true) {
      returnList.add(new Object[]{next});
    }
    index++;
  }
  return returnList;
}",0.9764453961456104
136947,"@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      if (!analysis.getParameters().isStoreData()) {
        return;
      }
      if (0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
      if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
        return;
      }
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      if (!analysis.getParameters().isStoreData()) {
        return;
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}",0.956006068128534
136948,"/** 
 * Add qiongli :Extract it and used by subClass(feature 19192).
 * @param chartComp
 * @param explorer
 * @param analysis
 */
protected void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          if (!analysis.getParameters().isStoreData()) {
            return;
          }
          if (0 == analysis.getResults().getIndicToRowMap().size()) {
            return;
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
          if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
            return;
          }
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
                  }
 catch (                  PartInitException e1) {
                    e1.printStackTrace();
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    @SuppressWarnings(""String_Node_Str"") private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","/** 
 * Add qiongli :Extract it and used by subClass(feature 19192).
 * @param chartComp
 * @param explorer
 * @param analysis
 */
protected void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          if (!analysis.getParameters().isStoreData()) {
            return;
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
                  }
 catch (                  PartInitException e1) {
                    e1.printStackTrace();
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    @SuppressWarnings(""String_Node_Str"") private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.9667720003830316
136949,"@Override public void init(IViewSite site,IMemento mem) throws PartInitException {
  super.init(site,mem);
  if (mem == null) {
    setLinkingEnabled(true);
  }
  try {
    addPostWindowCloseListener();
    initToolBar();
    initWorkspace();
    ISqlexplorerService sqlexplorerService=SqlExplorerUtils.getDefault().getSqlexplorerService();
    if (sqlexplorerService != null) {
      SqlExplorerUtils.getDefault().initAllConnectionsToSQLExplorer();
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","@Override public void init(IViewSite site,IMemento mem) throws PartInitException {
  super.init(site,mem);
  if (mem == null) {
    setLinkingEnabled(true);
  }
  try {
    addPostWindowCloseListener();
    initToolBar();
    initWorkspace();
    if (SqlExplorerUtils.getDefault().isSqlexplorerInstalled()) {
      SqlExplorerUtils.getDefault().initAllConnectionsToSQLExplorer();
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.8168421052631579
136950,"/** 
 * run analysis when SqlParallelExecutor.
 * @return true if successfull , false otherwise.
 */
public Boolean run(){
  Expression query=null;
  try {
    if (indicator instanceof CompositeIndicator) {
      return Boolean.TRUE;
    }
synchronized (schemata) {
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
    }
synchronized (elementToIndicator) {
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
    query=dbms().getInstantiatedExpression(indicator);
    if (query == null) {
      traceError(getErrorMessageForQuery(query));
      return Boolean.FALSE;
    }
    try {
      boolean execStatus=executeQuery(indicator,connection,query.getBody());
      if (!execStatus) {
        traceError(getErrorMessageForQuery(query));
        return Boolean.FALSE;
      }
    }
 catch (    SQLException e) {
      traceError(getErrorMessageForQuery(query));
      return Boolean.FALSE;
    }
    indicator.setComputed(true);
  }
  finally {
    if (POOLED_CONNECTION) {
      TdqAnalysisConnectionPool.returnPooledConnection(cachedAnalysis,connection);
    }
  }
  return Boolean.TRUE;
}","/** 
 * run analysis when SqlParallelExecutor.
 * @return true if successfull , false otherwise.
 */
public Boolean run(){
  Expression query=null;
  try {
    if (indicator instanceof CompositeIndicator) {
      return Boolean.TRUE;
    }
synchronized (schemata) {
      String catalogName=getCatalogOrSchemaName(indicator.getAnalyzedElement());
      if (catalogName != null) {
        changeCatalog(catalogName,connection);
      }
    }
synchronized (elementToIndicator) {
      MultiMapHelper.addUniqueObjectToListMap(indicator.getAnalyzedElement(),indicator,elementToIndicator);
    }
    query=dbms().getInstantiatedExpression(indicator);
    if (query == null) {
      traceError(getErrorMessageForQuery(query));
      return Boolean.FALSE;
    }
    try {
      boolean execStatus=executeQuery(indicator,connection,query.getBody());
      if (!execStatus) {
        traceError(getErrorMessageForQuery(query));
        return Boolean.FALSE;
      }
    }
 catch (    SQLException e) {
      log.error(e,e);
      traceError(getErrorMessageForQuery(query));
      return Boolean.FALSE;
    }
    indicator.setComputed(true);
  }
  finally {
    if (POOLED_CONNECTION) {
      TdqAnalysisConnectionPool.returnPooledConnection(cachedAnalysis,connection);
    }
  }
  return Boolean.TRUE;
}",0.9914263445050664
136951,"@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  ColumnSetIndicatorEvaluator eval=new ColumnSetIndicatorEvaluator(analysis);
  eval.setMonitor(getMonitor());
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  for (  Indicator indicator : indicators) {
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
      colSetMultValIndicator.prepare();
      eval.storeIndicator(indicator.getName(),colSetMultValIndicator);
      if (isMdm) {
        EList<ModelElement> modelElementLs=colSetMultValIndicator.getAnalyzedColumns();
        for (        ModelElement mod : modelElementLs) {
          TdXmlElementType tdXmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(mod);
          if (tdXmlElement != null) {
            eval.setTdXmlDocument(tdXmlElement.getOwnedDocument());
            break;
          }
        }
      }
    }
  }
  TypedReturnCode<java.sql.Connection> connection=null;
  if (isMdm) {
    TypedReturnCode<MdmWebserviceConnection> mdmReturnObj=getMdmConnection(analysis);
    if (!mdmReturnObj.isOk()) {
      log.error(mdmReturnObj.getMessage());
      return false;
    }
    eval.setMdmWebserviceConn(mdmReturnObj.getObject());
  }
 else   if (!isDelimitedFile) {
    connection=getConnectionBeforeRun(analysis);
    if (!connection.isOk()) {
      this.traceError(connection.getMessage());
      return Boolean.FALSE;
    }
    eval.setConnection(connection.getObject());
    eval.setPooledConnection(POOLED_CONNECTION);
  }
  boolean closeAtTheEnd=true;
  ReturnCode rc=eval.evaluateIndicators(sqlStatement,closeAtTheEnd);
  if (connection != null) {
    if (POOLED_CONNECTION) {
      resetConnectionPool(analysis);
    }
 else {
      ConnectionUtils.closeConnection(connection.getObject());
    }
  }
  if (!rc.isOk()) {
    traceError(rc.getMessage());
  }
  return true;
}","@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  ColumnSetIndicatorEvaluator eval=new ColumnSetIndicatorEvaluator(analysis);
  eval.setMonitor(getMonitor());
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  for (  Indicator indicator : indicators) {
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
      colSetMultValIndicator.prepare();
      eval.storeIndicator(indicator.getName(),colSetMultValIndicator);
      if (isMdm) {
        EList<ModelElement> modelElementLs=colSetMultValIndicator.getAnalyzedColumns();
        for (        ModelElement mod : modelElementLs) {
          TdXmlElementType tdXmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(mod);
          if (tdXmlElement != null) {
            eval.setTdXmlDocument(tdXmlElement.getOwnedDocument());
            break;
          }
        }
      }
    }
  }
  TypedReturnCode<java.sql.Connection> connection=null;
  if (isMdm) {
    TypedReturnCode<MdmWebserviceConnection> mdmReturnObj=getMdmConnection(analysis);
    if (!mdmReturnObj.isOk()) {
      log.error(mdmReturnObj.getMessage());
      return false;
    }
    eval.setMdmWebserviceConn(mdmReturnObj.getObject());
  }
 else   if (!isDelimitedFile) {
    connection=getConnectionBeforeRun(analysis);
    if (!connection.isOk()) {
      this.traceError(connection.getMessage());
      return Boolean.FALSE;
    }
    eval.setConnection(connection.getObject());
    eval.setPooledConnection(POOLED_CONNECTION);
  }
  boolean closeAtTheEnd=true;
  ReturnCode rc=eval.evaluateIndicators(sqlStatement,closeAtTheEnd);
  if (connection != null) {
    if (POOLED_CONNECTION) {
      resetConnectionPool(analysis);
    }
 else {
      ConnectionUtils.closeConnection(connection.getObject());
    }
  }
  if (!rc.isOk()) {
    traceError(rc.getMessage());
  }
  return rc.isOk();
}",0.996768580661198
136952,"/** 
 * orgnize EList 'objectLs' by SQL.
 * @param sqlStatement
 * @param ok
 * @return
 * @throws SQLException
 */
private ReturnCode evaluateBySql(String sqlStatement,ReturnCode ok) throws SQLException {
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=createStatement();
    if (continueRun()) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + sqlStatement);
      }
      statement.execute(sqlStatement);
    }
    resultSet=statement.getResultSet();
    List<String> columnNames=getAnalyzedElementsName();
    if (resultSet == null) {
      String mess=Messages.getString(""String_Node_Str"",sqlStatement);
      log.warn(mess);
      ok.setReturnCode(mess,false);
      return ok;
    }
    EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
    indicToRowMap.clear();
    while (resultSet.next()) {
      if (!continueRun()) {
        break;
      }
      EList<Object> objectLs=new BasicEList<Object>();
      Iterator<String> it=columnNames.iterator();
      while (it.hasNext()) {
        Object obj=resultSet.getObject(it.next());
        objectLs.add(obj);
      }
      if (objectLs.size() == 0) {
        continue;
      }
      handleObjects(objectLs,resultSet);
    }
  }
 catch (  Exception exc) {
    log.error(exc,exc);
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    getConnection().close();
  }
  return ok;
}","/** 
 * orgnize EList 'objectLs' by SQL.
 * @param sqlStatement
 * @param ok
 * @return
 * @throws SQLException
 */
private ReturnCode evaluateBySql(String sqlStatement,ReturnCode ok) throws SQLException {
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=createStatement();
    if (continueRun()) {
      if (log.isInfoEnabled()) {
        log.info(""String_Node_Str"" + sqlStatement);
      }
      statement.execute(sqlStatement);
    }
    resultSet=statement.getResultSet();
    List<String> columnNames=getAnalyzedElementsName();
    if (resultSet == null) {
      String mess=Messages.getString(""String_Node_Str"",sqlStatement);
      log.warn(mess);
      ok.setReturnCode(mess,false);
      return ok;
    }
    EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
    indicToRowMap.clear();
    while (resultSet.next()) {
      if (!continueRun()) {
        break;
      }
      EList<Object> objectLs=new BasicEList<Object>();
      Iterator<String> it=columnNames.iterator();
      while (it.hasNext()) {
        Object obj=resultSet.getObject(it.next());
        objectLs.add(obj);
      }
      if (objectLs.size() == 0) {
        continue;
      }
      handleObjects(objectLs,resultSet);
    }
  }
  finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    getConnection().close();
  }
  return ok;
}",0.893918918918919
136953,"public void removeAllSurvivorship(){
  matchRuleDef.getSurvivorshipKeys().clear();
  redrawnSubTableContent();
}","public void removeAllSurvivorship(){
  matchRuleDef.getSurvivorshipKeys().clear();
}",0.8571428571428571
136954,"@Override protected void setInput(MatchRule matchRule,AbsMatchAnalysisTableComposite<?> matchRuleComposite){
  List<MatchKeyAndSurvivorDefinition> keyList=getKeyList(matchRule,Boolean.FALSE);
  ((MatchKeyAndSurvivorTableComposite)matchRuleComposite).setInput(keyList);
}","@Override protected void setInput(MatchRule matchRule,AbsMatchAnalysisTableComposite<?> matchRuleComposite){
  List<MatchKeyAndSurvivorDefinition> generatedSurvivorKeyList=generateSurvivorKeyByMatchKey(matchRule,Boolean.FALSE);
  ((MatchKeyAndSurvivorTableComposite)matchRuleComposite).setInput(generatedSurvivorKeyList);
}",0.8768971332209107
136955,"/** 
 * DOC zhao Comment method ""handleTSwooshButtonSelection"".
 */
private void handleTSwooshButtonSelection(){
  isVSRMode=false;
  matchKeySection.setAddColumn(true);
  notifyOtherSections();
  algorithmName=RecordMatcherType.T_SwooshAlgorithm.name();
  matchRuleDef.setRecordLinkageAlgorithm(algorithmName);
  if (!isShowBlockingKeySection(isVSRMode)) {
    blockKeySection.removeAllBlockingKey();
  }
  listeners.firePropertyChange(MatchAnalysisConstant.ISDIRTY_PROPERTY,RecordMatcherType.simpleVSRMatcher.name(),RecordMatcherType.T_SwooshAlgorithm.name());
}","/** 
 * DOC zhao Comment method ""handleTSwooshButtonSelection"".
 */
private void handleTSwooshButtonSelection(){
  isVSRMode=false;
  matchKeySection.setAddColumn(true);
  notifyOtherSections();
  algorithmName=RecordMatcherType.T_SwooshAlgorithm.name();
  matchRuleDef.setRecordLinkageAlgorithm(algorithmName);
  listeners.firePropertyChange(MatchAnalysisConstant.ISDIRTY_PROPERTY,RecordMatcherType.simpleVSRMatcher.name(),RecordMatcherType.T_SwooshAlgorithm.name());
}",0.9090909090909092
136956,"/** 
 * DOC zhao Comment method ""removeAllSurvivorship"".
 */
protected void removeAllSurvivorship(){
  matchAndSurvivorKeySection.removeAllSurvivorship();
}","/** 
 * DOC zhao Comment method ""removeAllSurvivorship"".
 * @param redrawn whether needed redrawn the section after remove All of survivorship
 */
protected void removeAllSurvivorship(){
  matchAndSurvivorKeySection.removeAllSurvivorship();
}",0.7839195979899497
136957,"public void initTableInput(boolean isClearSurvivor){
  List<MatchKeyAndSurvivorDefinition> keyList=new ArrayList<MatchKeyAndSurvivorDefinition>();
  EList<MatchRule> matchRules=matchRuleDef.getMatchRules();
  if (!matchRules.isEmpty()) {
    keyList=getKeyList(matchRules.get(0),isClearSurvivor);
    matchAndSurvivorKeyList=matchRuleWithSurvMap.get(matchRules.get(0));
  }
  tableComposite.setInput(keyList);
  if (!matchRules.isEmpty()) {
    tableComposite.setMatchIntervalText(String.valueOf(matchRules.get(0).getMatchInterval()));
  }
  groupQualityThresholdText.setText(String.valueOf(this.matchRuleDef.getMatchGroupQualityThreshold()));
}","public void initTableInput(boolean isClearSurvivor){
  List<MatchKeyAndSurvivorDefinition> generatedSurvivorKeyList=new ArrayList<MatchKeyAndSurvivorDefinition>();
  EList<MatchRule> matchRules=matchRuleDef.getMatchRules();
  if (!matchRules.isEmpty()) {
    generatedSurvivorKeyList=generateSurvivorKeyByMatchKey(matchRules.get(0),isClearSurvivor);
    matchAndSurvivorKeyList=matchRuleWithSurvMap.get(matchRules.get(0));
  }
  tableComposite.setInput(generatedSurvivorKeyList);
  if (!matchRules.isEmpty()) {
    tableComposite.setMatchIntervalText(String.valueOf(matchRules.get(0).getMatchInterval()));
  }
  groupQualityThresholdText.setText(String.valueOf(this.matchRuleDef.getMatchGroupQualityThreshold()));
}",0.7794117647058824
136958,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getFreqRowsStatement() : null);
  return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  boolean isJavaEngine=AnalysisHelper.isJavaExecutionEngine(this.analysis);
  map.put(MENU_VIEW_ROWS,!isJavaEngine ? getComment(MENU_VIEW_ROWS) + getFreqRowsStatement() : null);
  return map;
}",0.8118811881188119
136959,"@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      if (!analysis.getParameters().isStoreData()) {
        return;
      }
      if (0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
      if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
        return;
      }
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        try {
          int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
          item.setEnabled(mapSize > 0);
        }
 catch (        IOError e) {
          item.setEnabled(false);
        }
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      if (!analysis.getParameters().isStoreData()) {
        return;
      }
      if (0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
      if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
        return;
      }
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}",0.9671556536414384
136960,"/** 
 * Add qiongli :Extract it and used by subClass(feature 19192).
 * @param chartComp
 * @param explorer
 * @param analysis
 */
protected void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          if (!analysis.getParameters().isStoreData()) {
            return;
          }
          if (0 == analysis.getResults().getIndicToRowMap().size()) {
            return;
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
          if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
            return;
          }
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            try {
              int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
              item.setEnabled(mapSize > 0);
            }
 catch (            IOError e) {
              item.setEnabled(false);
            }
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
                  }
 catch (                  PartInitException e1) {
                    e1.printStackTrace();
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    @SuppressWarnings(""String_Node_Str"") private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","/** 
 * Add qiongli :Extract it and used by subClass(feature 19192).
 * @param chartComp
 * @param explorer
 * @param analysis
 */
protected void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          if (!analysis.getParameters().isStoreData()) {
            return;
          }
          if (0 == analysis.getResults().getIndicToRowMap().size()) {
            return;
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
          if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
            return;
          }
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
                  }
 catch (                  PartInitException e1) {
                    e1.printStackTrace();
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    @SuppressWarnings(""String_Node_Str"") private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.9750616607289668
136961,"public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      if (!currentIndicator.isUsedMapDBMode()) {
        if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
          return;
        }
        if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
          return;
        }
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        try {
          int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
          item.setEnabled(mapSize > 0);
        }
 catch (        IOError e) {
          item.setEnabled(false);
        }
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                log.error(e1,e1);
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}","public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      if (!currentIndicator.isUsedMapDBMode()) {
        if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
          return;
        }
        if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
          return;
        }
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                log.error(e1,e1);
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}",0.9704521181915272
136962,"private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          if (!currentIndicator.isUsedMapDBMode()) {
            if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
              return;
            }
            if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
              return;
            }
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            try {
              int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
              item.setEnabled(mapSize > 0);
            }
 catch (            IOError e) {
              item.setEnabled(false);
            }
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    log.error(e1,e1);
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}","private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          if (!currentIndicator.isUsedMapDBMode()) {
            if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
              return;
            }
            if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
              return;
            }
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.setEnabled(DrillDownUtils.isMenuItemEnable(currentDataEntity,itemEntity,analysis));
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    log.error(e1,e1);
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}",0.9766086882015252
136963,"/** 
 * DOC msjian Comment method ""createDrillDownMenu"".
 * @param dataEntity
 * @param menu
 * @param itemEntities
 * @param analysis
 */
private static void createDrillDownMenu(final ChartDataEntity dataEntity,Menu menu,MenuItemEntity[] itemEntities,final Analysis analysis){
  for (  final MenuItemEntity itemEntity : itemEntities) {
    MenuItem item=new MenuItem(menu,SWT.PUSH);
    item.setText(itemEntity.getLabel());
    item.setImage(itemEntity.getIcon());
    try {
      int mapSize=DrillDownUtils.getMapDB(dataEntity,analysis,itemEntity).size();
      item.setEnabled(mapSize > 0);
    }
 catch (    IOError e) {
      item.setEnabled(false);
    }
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        CorePlugin.getDefault().openEditor(new DrillDownEditorInput(analysis,dataEntity,itemEntity),DRILL_DOWN_EDITOR);
      }
    }
);
  }
}","/** 
 * DOC msjian Comment method ""createDrillDownMenu"".
 * @param dataEntity
 * @param menu
 * @param itemEntities
 * @param analysis
 */
private static void createDrillDownMenu(final ChartDataEntity dataEntity,Menu menu,MenuItemEntity[] itemEntities,final Analysis analysis){
  for (  final MenuItemEntity itemEntity : itemEntities) {
    MenuItem item=new MenuItem(menu,SWT.PUSH);
    item.setText(itemEntity.getLabel());
    item.setImage(itemEntity.getIcon());
    item.setEnabled(isMenuItemEnable(dataEntity,itemEntity,analysis));
    item.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        CorePlugin.getDefault().openEditor(new DrillDownEditorInput(analysis,dataEntity,itemEntity),DRILL_DOWN_EDITOR);
      }
    }
);
  }
}",0.8702201622247973
136964,"private void setValue(String key){
  Long c=this.getMapForFreq().get(key);
  if (c == null) {
    this.getMapForFreq().put(key,1L);
  }
 else {
    c++;
    this.getMapForFreq().put(key,c);
  }
}","private void setValue(String key){
  Long c=this.valueToFreq.get(key);
  if (c == null) {
    this.valueToFreq.put(key,1L);
  }
 else {
    c++;
    this.valueToFreq.put(key,c);
  }
}",0.8888888888888888
136965,"@Override public boolean reset(){
  boolean ok=super.reset();
  for (int i=1; i <= 9; i++) {
    valueToFreq.put(String.valueOf(i),0L);
  }
  return ok;
}","@Override public boolean reset(){
  boolean ok=super.reset();
  for (int i=1; i <= 9; i++) {
    this.valueToFreq.put(String.valueOf(i),0L);
  }
  return ok;
}",0.9840255591054312
136966,"/** 
 * handle some special cases for SQL engine: <ul> <li>when there are null values;</li> <li>when there miss some numbers between 1~9;</li> <li>when the column is double, the leading digit maybe 0;</li> <li>when the column is string type, when the leading is not 1~9, all counted into ""invalid"" one.</li> </ul>
 */
private void handleSpecialCharacterAndMissingValues(){
  if (isChecked && this.getMapForFreq().size() < 1) {
    return;
  }
  long counted=0L;
  List<Object> invalid=new ArrayList<Object>();
  List<Object> lengthMore=new ArrayList<Object>();
  for (  Object val : this.getMapForFreq().keySet()) {
    if (isInvalid(val) < 0) {
      invalid.add(val);
      Long freq=this.getMapForFreq().get(val);
      counted=(freq == null) ? counted : counted + freq;
    }
 else     if (String.valueOf(val).length() > 1) {
      lengthMore.add(val);
    }
  }
  if (invalid.size() > 0) {
    for (    Object val : invalid) {
      this.getMapForFreq().remove(val);
    }
    this.getMapForFreq().put(INVALID,counted);
  }
  if (lengthMore.size() > 0) {
    for (    Object val : lengthMore) {
      String k=String.valueOf(val).substring(0,1);
      Long freq=this.getMapForFreq().get(val);
      this.getMapForFreq().remove(val);
      this.getMapForFreq().put(k,freq);
    }
  }
  for (int i=1; i < 10; i++) {
    Long value=this.getMapForFreq().get(String.valueOf(i));
    if (value == null) {
      this.getMapForFreq().put(String.valueOf(i),0L);
    }
  }
  isChecked=true;
}","/** 
 * handle some special cases for SQL engine: <ul> <li>when there are null values;</li> <li>when there miss some numbers between 1~9;</li> <li>when the column is double, the leading digit maybe 0;</li> <li>when the column is string type, when the leading is not 1~9, all counted into ""invalid"" one.</li> </ul>
 */
private void handleSpecialCharacterAndMissingValues(){
  if (isChecked && this.valueToFreq.size() < 1) {
    return;
  }
  long counted=0L;
  List<Object> invalid=new ArrayList<Object>();
  List<Object> lengthMore=new ArrayList<Object>();
  for (  Object val : this.valueToFreq.keySet()) {
    if (isInvalid(val) < 0) {
      invalid.add(val);
      Long freq=this.valueToFreq.get(val);
      counted=(freq == null) ? counted : counted + freq;
    }
 else     if (String.valueOf(val).length() > 1) {
      lengthMore.add(val);
    }
  }
  if (invalid.size() > 0) {
    for (    Object val : invalid) {
      this.valueToFreq.remove(val);
    }
    this.valueToFreq.put(INVALID,counted);
  }
  if (lengthMore.size() > 0) {
    for (    Object val : lengthMore) {
      String k=String.valueOf(val).substring(0,1);
      Long freq=this.valueToFreq.get(val);
      this.valueToFreq.remove(val);
      this.valueToFreq.put(k,freq);
    }
  }
  for (int i=1; i < 10; i++) {
    Long value=this.valueToFreq.get(String.valueOf(i));
    if (value == null) {
      this.valueToFreq.put(String.valueOf(i),0L);
    }
  }
  isChecked=true;
}",0.8827539195637355
136967,"@Override protected String getFormatName(Object data){
  String monthStr=DateFormatUtils.format((Date)data,monthSign);
  int month=Integer.parseInt(monthStr) / 4 + 1;
  return DateFormatUtils.format((Date)data,datePattern + month);
}","@Override protected String getFormatName(Object data){
  String monthStr=DateFormatUtils.format((Date)data,monthSign);
  int month=Integer.parseInt(monthStr);
  int quotient=month / 3;
  int remainder=month % 3;
  int quarter=remainder == 0 ? quotient : quotient + 1;
  return DateFormatUtils.format((Date)data,datePattern + quarter);
}",0.7978910369068541
136968,"@Override protected String getFormatName(Object data){
  String monthStr=DateFormatUtils.format((Date)data,monthSign);
  int month=Integer.parseInt(monthStr) / 4 + 1;
  return DateFormatUtils.format((Date)data,datePattern + month);
}","@Override protected String getFormatName(Object data){
  String monthStr=DateFormatUtils.format((Date)data,monthSign);
  int month=Integer.parseInt(monthStr);
  int quotient=month / 3;
  int remainder=month % 3;
  int quarter=remainder == 0 ? quotient : quotient + 1;
  return DateFormatUtils.format((Date)data,datePattern + quarter);
}",0.7978910369068541
136969,"/** 
 * get week of year,make this indicator running result same as SQL engine, so minus 1.
 * @param date
 * @return
 */
private int getWeekOfYear(Date date){
  String weekStr=DateFormatUtils.format(date,weekSign);
  int weekOfYear=Integer.parseInt(weekStr);
  if (weekOfYear > 0) {
    weekOfYear--;
  }
  return weekOfYear;
}","/** 
 * get week of year,make this indicator running result same as SQL engine, so minus 1.
 * @param date
 * @return
 */
private int getWeekOfYear(Date date){
  Calendar cal=Calendar.getInstance(TimeZone.getDefault(),Locale.getDefault());
  cal.setTime(date);
  int weekOfYear=cal.get(Calendar.WEEK_OF_YEAR);
  return weekOfYear;
}",0.5363636363636364
136970,"/** 
 * get week of year,make this indicator running result same as SQL engine, so minus 1.
 * @param date
 * @return
 */
private int getWeekOfYear(Date date){
  String weekStr=DateFormatUtils.format(date,weekSign);
  int weekOfYear=Integer.parseInt(weekStr);
  if (weekOfYear > 0) {
    weekOfYear--;
  }
  return weekOfYear;
}","/** 
 * get week of year,make this indicator running result same as SQL engine, so minus 1.
 * @param date
 * @return
 */
private int getWeekOfYear(Date date){
  Calendar cal=Calendar.getInstance(TimeZone.getDefault(),Locale.getDefault());
  cal.setTime(date);
  int weekOfYear=cal.get(Calendar.WEEK_OF_YEAR);
  return weekOfYear;
}",0.5363636363636364
136971,"public Map<String,String> getQueryMap(){
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  Map<String,String> map=new HashMap<String,String>();
  boolean isHive=dbmsLanguage instanceof HiveDbmsLanguage;
  if (!isHive) {
switch (this.indicatorEnum) {
case AverageLengthIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
      map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getAverageLengthWithBlankRowsStatement() : null);
    break;
case AverageLengthWithNullBlankIndicatorEnum:
  map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getAverageLengthWithNullBlankRowsStatement() : null);
break;
case AverageLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getAverageLengthWithNullRowsStatement() : null);
break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getTextRowsStatement() : null);
break;
default :
}
}
 else {
if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
return map;
}","public Map<String,String> getQueryMap(){
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  Map<String,String> map=new HashMap<String,String>();
  boolean isHive=dbmsLanguage instanceof HiveDbmsLanguage;
  if (!isHive) {
switch (this.indicatorEnum) {
case AverageLengthIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
      if (isSqlEngine) {
        map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getAverageLengthWithBlankRowsStatement());
      }
    break;
case AverageLengthWithNullBlankIndicatorEnum:
  if (isSqlEngine) {
    map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getAverageLengthWithNullBlankRowsStatement());
  }
break;
case AverageLengthWithNullIndicatorEnum:
if (isSqlEngine) {
map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getAverageLengthWithNullRowsStatement());
}
break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getTextRowsStatement() : null);
break;
default :
}
}
 else {
if (!isSqlEngine) {
switch (this.indicatorEnum) {
case MinLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,null);
break;
default :
}
}
}
return map;
}",0.8398553107530418
136972,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public PageResult<Object[]> loadPage(PageableController controller){
  int dbSize=db.size();
  long totalSize=dbSize < itemsSize ? dbSize : itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  if (dataValidator == null) {
    return MapDBPageListHelper.createPage(db,indexMap,columnFilter,fromIndex,toIndex,totalSize);
  }
 else {
    return MapDBPageListHelper.createPage(db,indexMap,dataValidator,fromIndex,toIndex,totalSize);
  }
}","@Override public PageResult<Object[]> loadPage(PageableController controller){
  long totalSize=itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  if (dataValidator == null) {
    return MapDBPageListHelper.createPage(db,indexMap,columnFilter,fromIndex,toIndex,totalSize);
  }
 else {
    return MapDBPageListHelper.createPage(db,indexMap,dataValidator,fromIndex,toIndex,totalSize);
  }
}",0.8850855745721271
136973,"@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      if (!analysis.getParameters().isStoreData()) {
        return;
      }
      if (0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
      if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
        return;
      }
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      if (!analysis.getParameters().isStoreData()) {
        return;
      }
      if (0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
      if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
        return;
      }
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        try {
          int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
          item.setEnabled(mapSize > 0);
        }
 catch (        IOError e) {
          item.setEnabled(false);
        }
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}",0.9697607152248224
136974,"/** 
 * Add qiongli :Extract it and used by subClass(feature 19192).
 * @param chartComp
 * @param explorer
 * @param analysis
 */
protected void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          if (!analysis.getParameters().isStoreData()) {
            return;
          }
          if (0 == analysis.getResults().getIndicToRowMap().size()) {
            return;
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
          if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
            return;
          }
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
                  }
 catch (                  PartInitException e1) {
                    e1.printStackTrace();
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    @SuppressWarnings(""String_Node_Str"") private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","/** 
 * Add qiongli :Extract it and used by subClass(feature 19192).
 * @param chartComp
 * @param explorer
 * @param analysis
 */
protected void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          if (!analysis.getParameters().isStoreData()) {
            return;
          }
          if (0 == analysis.getResults().getIndicToRowMap().size()) {
            return;
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
          if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
            return;
          }
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            try {
              int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
              item.setEnabled(mapSize > 0);
            }
 catch (            IOError e) {
              item.setEnabled(false);
            }
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
                  }
 catch (                  PartInitException e1) {
                    e1.printStackTrace();
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    @SuppressWarnings(""String_Node_Str"") private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.9762124285450856
136975,"private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator());
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysisItem.getAnalysis().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
    try {
      final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object[]>(ssIndicator.getMapDB(StandardDBName.dataSection.name()));
      controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
      ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
      resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}","private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    AbstractDB<Object[]> mapDB=null;
    try {
      mapDB=ssIndicator.getMapDB(StandardDBName.dataSection.name());
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator() && mapDB != null);
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysisItem.getAnalysis().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
    if (mapDB != null) {
      final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object[]>(mapDB);
      controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
      ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
      resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}",0.949586776859504
136976,"public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      if (currentIndicator.isUsedMapDBMode()) {
        if (ExecutionLanguage.JAVA == currentEngine && analysis.getParameters().isStoreData()) {
          if (dataEntity == null || currentIndicator == null || DrillDownUtils.getMapDB(currentDataEntity,analysis).size() == 0) {
            return;
          }
        }
      }
 else {
        if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
          return;
        }
        if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
          return;
        }
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                log.error(e1,e1);
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}","public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      if (!currentIndicator.isUsedMapDBMode()) {
        if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
          return;
        }
        if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
          return;
        }
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        try {
          int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
          item.setEnabled(mapSize > 0);
        }
 catch (        IOError e) {
          item.setEnabled(false);
        }
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                log.error(e1,e1);
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}",0.9399883923389436
136977,"private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          if (currentIndicator.isUsedMapDBMode()) {
            if (ExecutionLanguage.JAVA == currentEngine && analysis.getParameters().isStoreData()) {
              if (dataEntity == null || currentIndicator == null || DrillDownUtils.getMapDB(currentDataEntity,analysis).size() == 0) {
                return;
              }
            }
          }
 else {
            if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
              return;
            }
            if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
              return;
            }
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    log.error(e1,e1);
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}","private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          if (!currentIndicator.isUsedMapDBMode()) {
            if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
              return;
            }
            if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
              return;
            }
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            try {
              int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
              item.setEnabled(mapSize > 0);
            }
 catch (            IOError e) {
              item.setEnabled(false);
            }
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    log.error(e1,e1);
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}",0.952100345146898
136978,"/** 
 * DOC zshen Comment method ""getDesignatedData"".
 * @return make column mapping with data
 */
private List<Object[]> getDesignatedData(List<Object[]> dataList){
  ModelElement analysisElement=currIndicator.getAnalyzedElement();
  List<Object[]> returnDataList=new ArrayList<Object[]>();
  if (dataList == null || dataList.size() < 0) {
    return returnDataList;
  }
  if (DrillDownEditorInput.judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    int offset=0;
    if (analysisElement == null && currIndicator.eContainer() instanceof SimpleStatIndicator) {
      returnDataList=dataList;
    }
 else {
      if (analysisElement instanceof MetadataColumn) {
        MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
        List<MetadataColumn> columnElementList=mTable.getColumns();
        offset=columnElementList.indexOf(analysisElement);
      }
 else       if (analysisElement instanceof TdXmlElementType) {
        TdXmlElementType parentElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(XmlElementHelper.getParentElement(SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(analysisElement)));
        List<TdXmlElementType> xmlElementListTmp=org.talend.cwm.db.connection.ConnectionUtils.getXMLElements(parentElement);
        List<TdXmlElementType> xmlElementList=new ArrayList<TdXmlElementType>();
        for (        TdXmlElementType tdXmlEle : xmlElementListTmp) {
          if (!DqRepositoryViewService.hasChildren(tdXmlEle)) {
            xmlElementList.add(tdXmlEle);
          }
        }
        offset=xmlElementList.indexOf(analysisElement);
      }
      if (currIndicator instanceof DuplicateCountIndicator) {
        for (        Object obj : ((DuplicateCountIndicator)currIndicator).getDuplicateValues()) {
          Object[] newObj=new Object[1];
          newObj[0]=obj;
          returnDataList.add(newObj);
        }
        return returnDataList;
      }
      for (      Object[] obj : dataList) {
        Object[] newObj=new Object[1];
        newObj[0]=obj[offset];
        returnDataList.add(newObj);
      }
    }
  }
 else {
    returnDataList=dataList;
  }
  return returnDataList;
}","/** 
 * DOC zshen Comment method ""getDesignatedData"".
 * @return make column mapping with data
 */
private List<Object[]> getDesignatedData(List<Object[]> dataList){
  ModelElement analysisElement=currIndicator.getAnalyzedElement();
  List<Object[]> returnDataList=new ArrayList<Object[]>();
  if (dataList == null || dataList.size() < 0) {
    return returnDataList;
  }
  if (DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_VALUE_TYPE)) {
    int offset=0;
    if (analysisElement == null && currIndicator.eContainer() instanceof SimpleStatIndicator) {
      returnDataList=dataList;
    }
 else {
      if (analysisElement instanceof MetadataColumn) {
        MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
        List<MetadataColumn> columnElementList=mTable.getColumns();
        offset=columnElementList.indexOf(analysisElement);
      }
 else       if (analysisElement instanceof TdXmlElementType) {
        TdXmlElementType parentElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(XmlElementHelper.getParentElement(SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(analysisElement)));
        List<TdXmlElementType> xmlElementListTmp=org.talend.cwm.db.connection.ConnectionUtils.getXMLElements(parentElement);
        List<TdXmlElementType> xmlElementList=new ArrayList<TdXmlElementType>();
        for (        TdXmlElementType tdXmlEle : xmlElementListTmp) {
          if (!DqRepositoryViewService.hasChildren(tdXmlEle)) {
            xmlElementList.add(tdXmlEle);
          }
        }
        offset=xmlElementList.indexOf(analysisElement);
      }
      if (currIndicator instanceof DuplicateCountIndicator) {
        for (        Object obj : ((DuplicateCountIndicator)currIndicator).getDuplicateValues()) {
          Object[] newObj=new Object[1];
          newObj[0]=obj;
          returnDataList.add(newObj);
        }
        return returnDataList;
      }
      for (      Object[] obj : dataList) {
        Object[] newObj=new Object[1];
        newObj[0]=obj[offset];
        returnDataList.add(newObj);
      }
    }
  }
 else {
    returnDataList=dataList;
  }
  return returnDataList;
}",0.9926773455377574
136979,"/** 
 * DOC zshen Comment method ""filterAdaptColumnHeader"".
 * @returnget the name of column which will be displayed on the drill down editor.
 */
public List<String> filterAdaptColumnHeader(){
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  String menuType=this.getMenuType();
  List<String> columnElementList=new ArrayList<String>();
  if (analysisElement == null && indicator.eContainer() instanceof SimpleStatIndicator) {
    columnElementList=columnHeaderForColumnSet((SimpleStatIndicator)indicator.eContainer());
  }
 else {
    if (DrillDownEditorInput.judgeMenuType(menuType,DrillDownEditorInput.MENU_VALUE_TYPE)) {
      columnElementList.add(ModelElementHelper.getName(indicator.getAnalyzedElement()));
    }
 else     if (analysisElement instanceof TdColumn) {
      for (      TdColumn column : TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()))) {
        columnElementList.add(column.getName());
      }
    }
 else     if (analysisElement instanceof MetadataColumn) {
      MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
      for (      MetadataColumn mColumn : mTable.getColumns()) {
        columnElementList.add(mColumn.getLabel());
      }
    }
  }
  return columnElementList;
}","/** 
 * DOC zshen Comment method ""filterAdaptColumnHeader"".
 * @returnget the name of column which will be displayed on the drill down editor.
 */
public List<String> filterAdaptColumnHeader(){
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  String menuType=this.getMenuType();
  List<String> columnElementList=new ArrayList<String>();
  if (analysisElement == null && indicator.eContainer() instanceof SimpleStatIndicator) {
    columnElementList=columnHeaderForColumnSet((SimpleStatIndicator)indicator.eContainer());
  }
 else {
    if (DrillDownUtils.judgeMenuType(menuType,DrillDownUtils.MENU_VALUE_TYPE)) {
      columnElementList.add(ModelElementHelper.getName(indicator.getAnalyzedElement()));
    }
 else     if (analysisElement instanceof TdColumn) {
      for (      TdColumn column : TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()))) {
        columnElementList.add(column.getName());
      }
    }
 else     if (analysisElement instanceof MetadataColumn) {
      MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
      for (      MetadataColumn mColumn : mTable.getColumns()) {
        columnElementList.add(mColumn.getLabel());
      }
    }
  }
  return columnElementList;
}",0.9882525697503672
136980,"/** 
 * Get index of column whiche will be used on the dirll down. Note that One indicator only belong one column so that the array of retrun value just contain one element. And if we create new map for view values menu rather than used same map with view rows menu then method can be removed
 * @return
 */
public Integer[] getColumnIndexArray(){
  if (!DrillDownEditorInput.judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE) || DuplicateCountIndicator.class.isInstance(currIndicator)) {
    return null;
  }
  List<Integer> indexArray=new ArrayList<Integer>();
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  int index=0;
  if (analysisElement instanceof TdColumn) {
    TdTable tdTable=ColumnHelper.getColumnOwnerAsTdTable((TdColumn)analysisElement);
    for (    TdColumn column : TableHelper.getColumns(tdTable)) {
      if (column.getName().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
 else   if (analysisElement instanceof MetadataColumn) {
    MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
    for (    MetadataColumn mColumn : mTable.getColumns()) {
      if (mColumn.getLabel().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
  return indexArray.toArray(new Integer[indexArray.size()]);
}","/** 
 * Get index of column whiche will be used on the dirll down. Note that One indicator only belong one column so that the array of retrun value just contain one element. And if we create new map for view values menu rather than used same map with view rows menu then method can be removed
 * @return
 */
public Integer[] getColumnIndexArray(){
  if (!DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_VALUE_TYPE) || !UniqueCountIndicator.class.isInstance(currIndicator)) {
    return null;
  }
  List<Integer> indexArray=new ArrayList<Integer>();
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  int index=0;
  if (analysisElement instanceof TdColumn) {
    TdTable tdTable=ColumnHelper.getColumnOwnerAsTdTable((TdColumn)analysisElement);
    for (    TdColumn column : TableHelper.getColumns(tdTable)) {
      if (column.getName().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
 else   if (analysisElement instanceof MetadataColumn) {
    MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
    for (    MetadataColumn mColumn : mTable.getColumns()) {
      if (mColumn.getLabel().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
  return indexArray.toArray(new Integer[indexArray.size()]);
}",0.9843217450579412
136981,"/** 
 * create column header for columnSet analysis.
 * @param simpInd
 * @param columnElementList
 */
private List<String> columnHeaderForColumnSet(SimpleStatIndicator simpInd){
  List<String> columnElementList=new ArrayList<String>();
  if (simpInd.getAnalyzedColumns().size() == 0) {
    return columnElementList;
  }
  TdXmlElementType tdXmeElement=null;
  if (DrillDownEditorInput.judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    for (    ModelElement mod : simpInd.getAnalyzedColumns()) {
      tdXmeElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(mod);
      if (tdXmeElement != null) {
        columnElementList.add(tdXmeElement.getName());
      }
 else {
        columnElementList.add(ModelElementHelper.getName(mod));
      }
    }
  }
 else {
    boolean isDelimitedFile=false;
    boolean isMDM=false;
    for (    ModelElement mColumn : simpInd.getAnalyzedColumns()) {
      tdXmeElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(mColumn);
      TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(mColumn);
      if (tdXmeElement != null) {
        isMDM=true;
      }
 else       if (tdColumn == null) {
        isDelimitedFile=true;
      }
      break;
    }
    if (isMDM) {
      TdXmlElementType parentElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(XmlElementHelper.getParentElement(SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(tdXmeElement)));
      List<TdXmlElementType> columnList=org.talend.cwm.db.connection.ConnectionUtils.getXMLElements(parentElement);
      for (      TdXmlElementType tdXmlElement : columnList) {
        columnElementList.add(tdXmlElement.getName());
      }
    }
 else     if (isDelimitedFile) {
      List<MetadataColumn> columnList=ColumnHelper.getColumnOwnerAsMetadataTable(simpInd.getAnalyzedColumns().get(0)).getColumns();
      for (      MetadataColumn mdColumn : columnList) {
        columnElementList.add(mdColumn.getLabel());
      }
    }
 else {
      List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch((simpInd.getAnalyzedColumns().get(0).eContainer())));
      for (      TdColumn tdColumn : columnList) {
        columnElementList.add(tdColumn.getLabel());
      }
    }
  }
  return columnElementList;
}","/** 
 * create column header for columnSet analysis.
 * @param simpInd
 * @param columnElementList
 */
private List<String> columnHeaderForColumnSet(SimpleStatIndicator simpInd){
  List<String> columnElementList=new ArrayList<String>();
  if (simpInd.getAnalyzedColumns().size() == 0) {
    return columnElementList;
  }
  TdXmlElementType tdXmeElement=null;
  if (DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_VALUE_TYPE)) {
    for (    ModelElement mod : simpInd.getAnalyzedColumns()) {
      tdXmeElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(mod);
      if (tdXmeElement != null) {
        columnElementList.add(tdXmeElement.getName());
      }
 else {
        columnElementList.add(ModelElementHelper.getName(mod));
      }
    }
  }
 else {
    boolean isDelimitedFile=false;
    boolean isMDM=false;
    for (    ModelElement mColumn : simpInd.getAnalyzedColumns()) {
      tdXmeElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(mColumn);
      TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(mColumn);
      if (tdXmeElement != null) {
        isMDM=true;
      }
 else       if (tdColumn == null) {
        isDelimitedFile=true;
      }
      break;
    }
    if (isMDM) {
      TdXmlElementType parentElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(XmlElementHelper.getParentElement(SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(tdXmeElement)));
      List<TdXmlElementType> columnList=org.talend.cwm.db.connection.ConnectionUtils.getXMLElements(parentElement);
      for (      TdXmlElementType tdXmlElement : columnList) {
        columnElementList.add(tdXmlElement.getName());
      }
    }
 else     if (isDelimitedFile) {
      List<MetadataColumn> columnList=ColumnHelper.getColumnOwnerAsMetadataTable(simpInd.getAnalyzedColumns().get(0)).getColumns();
      for (      MetadataColumn mdColumn : columnList) {
        columnElementList.add(mdColumn.getLabel());
      }
    }
 else {
      List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch((simpInd.getAnalyzedColumns().get(0).eContainer())));
      for (      TdColumn tdColumn : columnList) {
        columnElementList.add(tdColumn.getLabel());
      }
    }
  }
  return columnElementList;
}",0.9928730512249444
136982,"/** 
 * Get the result of current indicator.
 * @return if view values then return result of current indicator else return the size of the mapDB
 */
public Long getItemSize(AbstractDB<?> mapDB){
  if (judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    return getCurrentIndicatorResultSize();
  }
 else {
    return Long.valueOf(mapDB.size());
  }
}","/** 
 * Get the result of current indicator.
 * @return if view values then return result of current indicator else return the size of the mapDB
 */
public Long getItemSize(AbstractDB<?> mapDB){
  if (isColumnSetIndicator()) {
    return getColumnSetIndicatorResultSize();
  }
 else {
    return Long.valueOf(mapDB.size());
  }
}",0.8183118741058655
136983,"/** 
 * Get the MapDB which used to drill down data
 * @return
 */
public AbstractDB<Object> getMapDB(){
  if (judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE) && DuplicateCountIndicator.class.isInstance(currIndicator)) {
    return currIndicator.getMapDB(StandardDBName.drillDownValues.name());
  }
  return DrillDownUtils.getMapDB(dataEntity,analysis);
}","/** 
 * Get the MapDB which used to drill down data
 * @return
 */
public AbstractDB<Object> getMapDB(){
  return DrillDownUtils.getMapDB(dataEntity,analysis,menuItemEntity);
}",0.5812274368231047
136984,"/** 
 * @return get the data which will be displayed on the drill down editor.
 */
public List<Object[]> filterAdaptDataList(){
  List<Object[]> newColumnElementList=new ArrayList<Object[]>();
  AnalyzedDataSet analysisDataSet=this.getAnalysis().getResults().getIndicToRowMap().get(currIndicator);
  if (analysisDataSet.getData() != null && analysisDataSet.getData().size() > 0) {
    List<Object[]> dataList=analysisDataSet.getData();
    newColumnElementList.addAll(getDesignatedData(dataList));
  }
 else   if (analysisDataSet.getFrequencyData() != null && analysisDataSet.getFrequencyData().size() > 0) {
    String selectValue=this.getSelectValue();
    if (currIndicator instanceof LengthIndicator) {
      selectValue=((LengthIndicator)currIndicator).getLength().toString();
    }
    if (currIndicator instanceof DatePatternFreqIndicator) {
      for (      Object expression : analysisDataSet.getFrequencyData().keySet()) {
        if (Pattern.matches(((DatePatternFreqIndicator)currIndicator).getRegex(selectValue),expression.toString())) {
          newColumnElementList.addAll(analysisDataSet.getFrequencyData().get(expression));
        }
      }
    }
 else {
      List<Object[]> list=analysisDataSet.getFrequencyData().get(selectValue);
      if (list != null && list.size() > 0) {
        newColumnElementList.addAll(list);
      }
    }
  }
 else   if (analysisDataSet.getPatternData() != null && analysisDataSet.getPatternData().size() > 0) {
    if (DrillDownEditorInput.judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_INVALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.INVALID_VALUE)));
    }
 else     if (DrillDownEditorInput.judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_VALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.VALID_VALUE)));
    }
  }
  return newColumnElementList;
}","/** 
 * @return get the data which will be displayed on the drill down editor.
 */
public List<Object[]> filterAdaptDataList(){
  List<Object[]> newColumnElementList=new ArrayList<Object[]>();
  AnalyzedDataSet analysisDataSet=this.getAnalysis().getResults().getIndicToRowMap().get(currIndicator);
  if (analysisDataSet.getData() != null && analysisDataSet.getData().size() > 0) {
    List<Object[]> dataList=analysisDataSet.getData();
    newColumnElementList.addAll(getDesignatedData(dataList));
  }
 else   if (analysisDataSet.getFrequencyData() != null && analysisDataSet.getFrequencyData().size() > 0) {
    String selectValue=this.getSelectValue();
    if (currIndicator instanceof LengthIndicator) {
      selectValue=((LengthIndicator)currIndicator).getLength().toString();
    }
    if (currIndicator instanceof DatePatternFreqIndicator) {
      for (      Object expression : analysisDataSet.getFrequencyData().keySet()) {
        if (Pattern.matches(((DatePatternFreqIndicator)currIndicator).getRegex(selectValue),expression.toString())) {
          newColumnElementList.addAll(analysisDataSet.getFrequencyData().get(expression));
        }
      }
    }
 else {
      List<Object[]> list=analysisDataSet.getFrequencyData().get(selectValue);
      if (list != null && list.size() > 0) {
        newColumnElementList.addAll(list);
      }
    }
  }
 else   if (analysisDataSet.getPatternData() != null && analysisDataSet.getPatternData().size() > 0) {
    if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_INVALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.INVALID_VALUE)));
    }
 else     if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_VALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.VALID_VALUE)));
    }
  }
  return newColumnElementList;
}",0.9667673716012084
136985,"public Object getDataSet(){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  List<Object[]> newColumnElementList=filterAdaptDataList();
  if (newColumnElementList.size() <= 0) {
    columnValue=new String[0][0];
    return SqlExplorerUtils.getDefault().createDataSet(columnHeader,columnValue);
  }
  if (DrillDownEditorInput.judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    columnValue=new String[newColumnElementList.size()][newColumnElementList.get(0).length];
  }
 else {
    columnValue=new String[newColumnElementList.size()][columnElementList.size()];
  }
  int rowIndex=0;
  for (  Object[] tableRow : newColumnElementList) {
    int columnIndex=0;
    for (    Object tableValue : tableRow) {
      if (tableValue == null) {
        if (newColumnElementList.get(0).length != columnElementList.size()) {
          continue;
        }
      }
      columnValue[rowIndex][columnIndex++]=tableValue == null ? ""String_Node_Str"" : tableValue.toString();
    }
    rowIndex++;
  }
  return SqlExplorerUtils.getDefault().createDataSet(columnHeader,columnValue);
}","public Object getDataSet(){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  List<Object[]> newColumnElementList=filterAdaptDataList();
  if (newColumnElementList.size() <= 0) {
    columnValue=new String[0][0];
    return SqlExplorerUtils.getDefault().createDataSet(columnHeader,columnValue);
  }
  if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_VALUE_TYPE)) {
    columnValue=new String[newColumnElementList.size()][newColumnElementList.get(0).length];
  }
 else {
    columnValue=new String[newColumnElementList.size()][columnElementList.size()];
  }
  int rowIndex=0;
  for (  Object[] tableRow : newColumnElementList) {
    int columnIndex=0;
    for (    Object tableValue : tableRow) {
      if (tableValue == null) {
        if (newColumnElementList.get(0).length != columnElementList.size()) {
          continue;
        }
      }
      columnValue[rowIndex][columnIndex++]=tableValue == null ? ""String_Node_Str"" : tableValue.toString();
    }
    rowIndex++;
  }
  return SqlExplorerUtils.getDefault().createDataSet(columnHeader,columnValue);
}",0.9874213836477987
136986,"public String getComputeValue(){
  if (judgeMenuType(this.getMenuType(),MENU_INVALID_TYPE)) {
    return ((PatternChartDataEntity)this.dataEntity).getNumNoMatch();
  }
 else   if (judgeMenuType(this.getMenuType(),MENU_VALID_TYPE)) {
    return ((PatternChartDataEntity)this.dataEntity).getNumMatch();
  }
  return this.dataEntity.getValue();
}","public String getComputeValue(){
  if (DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_INVALID_TYPE)) {
    return ((PatternChartDataEntity)this.dataEntity).getNumNoMatch();
  }
 else   if (DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_VALID_TYPE)) {
    return ((PatternChartDataEntity)this.dataEntity).getNumMatch();
  }
  return this.dataEntity.getValue();
}",0.9195710455764076
136987,"public Map<String,String> getQueryMap(){
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  Map<String,String> map=new HashMap<String,String>();
  boolean isHive=dbmsLanguage instanceof HiveDbmsLanguage;
  if (!isHive) {
switch (this.indicatorEnum) {
case AverageLengthIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
      map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getAverageLengthWithBlankRowsStatement() : null);
    break;
case AverageLengthWithNullBlankIndicatorEnum:
  map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getAverageLengthWithNullBlankRowsStatement() : null);
break;
case AverageLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getAverageLengthWithNullRowsStatement() : null);
break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getTextRowsStatement() : null);
break;
default :
}
}
 else {
if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
return map;
}","public Map<String,String> getQueryMap(){
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  Map<String,String> map=new HashMap<String,String>();
  boolean isHive=dbmsLanguage instanceof HiveDbmsLanguage;
  if (!isHive) {
switch (this.indicatorEnum) {
case AverageLengthIndicatorEnum:
case AverageLengthWithBlankIndicatorEnum:
      if (isSqlEngine) {
        map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getAverageLengthWithBlankRowsStatement());
      }
    break;
case AverageLengthWithNullBlankIndicatorEnum:
  if (isSqlEngine) {
    map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getAverageLengthWithNullBlankRowsStatement());
  }
break;
case AverageLengthWithNullIndicatorEnum:
if (isSqlEngine) {
map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getAverageLengthWithNullRowsStatement());
}
break;
case MinLengthIndicatorEnum:
case MaxLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getTextRowsStatement() : null);
break;
default :
}
}
 else {
if (!isSqlEngine) {
switch (this.indicatorEnum) {
case MinLengthIndicatorEnum:
case MinLengthWithBlankIndicatorEnum:
case MinLengthWithBlankNullIndicatorEnum:
case MinLengthWithNullIndicatorEnum:
case MaxLengthIndicatorEnum:
case MaxLengthWithBlankIndicatorEnum:
case MaxLengthWithBlankNullIndicatorEnum:
case MaxLengthWithNullIndicatorEnum:
map.put(MENU_VIEW_ROWS,null);
break;
default :
}
}
}
return map;
}",0.8398553107530418
136988,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public PageResult<Object[]> loadPage(PageableController controller){
  int dbSize=db.size();
  long totalSize=dbSize < itemsSize ? dbSize : itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  if (dataValidator == null) {
    return MapDBPageListHelper.createPage(db,indexMap,columnFilter,fromIndex,toIndex,totalSize);
  }
 else {
    return MapDBPageListHelper.createPage(db,indexMap,dataValidator,fromIndex,toIndex,totalSize);
  }
}","@Override public PageResult<Object[]> loadPage(PageableController controller){
  long totalSize=itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  if (dataValidator == null) {
    return MapDBPageListHelper.createPage(db,indexMap,columnFilter,fromIndex,toIndex,totalSize);
  }
 else {
    return MapDBPageListHelper.createPage(db,indexMap,dataValidator,fromIndex,toIndex,totalSize);
  }
}",0.8850855745721271
136989,"@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      if (!analysis.getParameters().isStoreData()) {
        return;
      }
      if (0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
      if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
        return;
      }
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      if (!analysis.getParameters().isStoreData()) {
        return;
      }
      if (0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
      if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
        return;
      }
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        try {
          int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
          item.setEnabled(mapSize > 0);
        }
 catch (        IOError e) {
          item.setEnabled(false);
        }
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}",0.9697607152248224
136990,"/** 
 * Add qiongli :Extract it and used by subClass(feature 19192).
 * @param chartComp
 * @param explorer
 * @param analysis
 */
protected void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          if (!analysis.getParameters().isStoreData()) {
            return;
          }
          if (0 == analysis.getResults().getIndicToRowMap().size()) {
            return;
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
          if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
            return;
          }
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
                  }
 catch (                  PartInitException e1) {
                    e1.printStackTrace();
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    @SuppressWarnings(""String_Node_Str"") private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}","/** 
 * Add qiongli :Extract it and used by subClass(feature 19192).
 * @param chartComp
 * @param explorer
 * @param analysis
 */
protected void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    @SuppressWarnings(""String_Node_Str"") public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          if (!analysis.getParameters().isStoreData()) {
            return;
          }
          if (0 == analysis.getResults().getIndicToRowMap().size()) {
            return;
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(currentIndicator);
          if (analyDataSet == null || analyDataSet.getData() == null || analyDataSet.getData().size() == 0) {
            return;
          }
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            try {
              int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
              item.setEnabled(mapSize > 0);
            }
 catch (            IOError e) {
              item.setEnabled(false);
            }
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(new DrillDownEditorInput(analysis,currentDataEntity,itemEntity),""String_Node_Str"");
                  }
 catch (                  PartInitException e1) {
                    e1.printStackTrace();
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    @SuppressWarnings(""String_Node_Str"") private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
}",0.9762124285450856
136991,"private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator());
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysisItem.getAnalysis().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
    try {
      final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object[]>(ssIndicator.getMapDB(StandardDBName.dataSection.name()));
      controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
      ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
      resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}","private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    AbstractDB<Object[]> mapDB=null;
    try {
      mapDB=ssIndicator.getMapDB(StandardDBName.dataSection.name());
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator() && mapDB != null);
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysisItem.getAnalysis().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
    if (mapDB != null) {
      final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object[]>(mapDB);
      controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
      ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
      resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}",0.949586776859504
136992,"public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      if (currentIndicator.isUsedMapDBMode()) {
        if (ExecutionLanguage.JAVA == currentEngine && analysis.getParameters().isStoreData()) {
          if (dataEntity == null || currentIndicator == null || DrillDownUtils.getMapDB(currentDataEntity,analysis).size() == 0) {
            return;
          }
        }
      }
 else {
        if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
          return;
        }
        if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
          return;
        }
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                log.error(e1,e1);
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}","public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      if (!currentIndicator.isUsedMapDBMode()) {
        if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
          return;
        }
        if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
          return;
        }
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        try {
          int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
          item.setEnabled(mapSize > 0);
        }
 catch (        IOError e) {
          item.setEnabled(false);
        }
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                log.error(e1,e1);
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}",0.9399883923389436
136993,"private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          if (currentIndicator.isUsedMapDBMode()) {
            if (ExecutionLanguage.JAVA == currentEngine && analysis.getParameters().isStoreData()) {
              if (dataEntity == null || currentIndicator == null || DrillDownUtils.getMapDB(currentDataEntity,analysis).size() == 0) {
                return;
              }
            }
          }
 else {
            if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
              return;
            }
            if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
              return;
            }
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    log.error(e1,e1);
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}","private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          if (!currentIndicator.isUsedMapDBMode()) {
            if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
              return;
            }
            if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
              return;
            }
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            try {
              int mapSize=DrillDownUtils.getMapDB(currentDataEntity,analysis,itemEntity).size();
              item.setEnabled(mapSize > 0);
            }
 catch (            IOError e) {
              item.setEnabled(false);
            }
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    log.error(e1,e1);
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}",0.952100345146898
136994,"/** 
 * DOC zshen Comment method ""getDesignatedData"".
 * @return make column mapping with data
 */
private List<Object[]> getDesignatedData(List<Object[]> dataList){
  ModelElement analysisElement=currIndicator.getAnalyzedElement();
  List<Object[]> returnDataList=new ArrayList<Object[]>();
  if (dataList == null || dataList.size() < 0) {
    return returnDataList;
  }
  if (DrillDownEditorInput.judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    int offset=0;
    if (analysisElement == null && currIndicator.eContainer() instanceof SimpleStatIndicator) {
      returnDataList=dataList;
    }
 else {
      if (analysisElement instanceof MetadataColumn) {
        MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
        List<MetadataColumn> columnElementList=mTable.getColumns();
        offset=columnElementList.indexOf(analysisElement);
      }
 else       if (analysisElement instanceof TdXmlElementType) {
        TdXmlElementType parentElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(XmlElementHelper.getParentElement(SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(analysisElement)));
        List<TdXmlElementType> xmlElementListTmp=org.talend.cwm.db.connection.ConnectionUtils.getXMLElements(parentElement);
        List<TdXmlElementType> xmlElementList=new ArrayList<TdXmlElementType>();
        for (        TdXmlElementType tdXmlEle : xmlElementListTmp) {
          if (!DqRepositoryViewService.hasChildren(tdXmlEle)) {
            xmlElementList.add(tdXmlEle);
          }
        }
        offset=xmlElementList.indexOf(analysisElement);
      }
      if (currIndicator instanceof DuplicateCountIndicator) {
        for (        Object obj : ((DuplicateCountIndicator)currIndicator).getDuplicateValues()) {
          Object[] newObj=new Object[1];
          newObj[0]=obj;
          returnDataList.add(newObj);
        }
        return returnDataList;
      }
      for (      Object[] obj : dataList) {
        Object[] newObj=new Object[1];
        newObj[0]=obj[offset];
        returnDataList.add(newObj);
      }
    }
  }
 else {
    returnDataList=dataList;
  }
  return returnDataList;
}","/** 
 * DOC zshen Comment method ""getDesignatedData"".
 * @return make column mapping with data
 */
private List<Object[]> getDesignatedData(List<Object[]> dataList){
  ModelElement analysisElement=currIndicator.getAnalyzedElement();
  List<Object[]> returnDataList=new ArrayList<Object[]>();
  if (dataList == null || dataList.size() < 0) {
    return returnDataList;
  }
  if (DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_VALUE_TYPE)) {
    int offset=0;
    if (analysisElement == null && currIndicator.eContainer() instanceof SimpleStatIndicator) {
      returnDataList=dataList;
    }
 else {
      if (analysisElement instanceof MetadataColumn) {
        MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
        List<MetadataColumn> columnElementList=mTable.getColumns();
        offset=columnElementList.indexOf(analysisElement);
      }
 else       if (analysisElement instanceof TdXmlElementType) {
        TdXmlElementType parentElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(XmlElementHelper.getParentElement(SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(analysisElement)));
        List<TdXmlElementType> xmlElementListTmp=org.talend.cwm.db.connection.ConnectionUtils.getXMLElements(parentElement);
        List<TdXmlElementType> xmlElementList=new ArrayList<TdXmlElementType>();
        for (        TdXmlElementType tdXmlEle : xmlElementListTmp) {
          if (!DqRepositoryViewService.hasChildren(tdXmlEle)) {
            xmlElementList.add(tdXmlEle);
          }
        }
        offset=xmlElementList.indexOf(analysisElement);
      }
      if (currIndicator instanceof DuplicateCountIndicator) {
        for (        Object obj : ((DuplicateCountIndicator)currIndicator).getDuplicateValues()) {
          Object[] newObj=new Object[1];
          newObj[0]=obj;
          returnDataList.add(newObj);
        }
        return returnDataList;
      }
      for (      Object[] obj : dataList) {
        Object[] newObj=new Object[1];
        newObj[0]=obj[offset];
        returnDataList.add(newObj);
      }
    }
  }
 else {
    returnDataList=dataList;
  }
  return returnDataList;
}",0.9926773455377574
136995,"/** 
 * DOC zshen Comment method ""filterAdaptColumnHeader"".
 * @returnget the name of column which will be displayed on the drill down editor.
 */
public List<String> filterAdaptColumnHeader(){
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  String menuType=this.getMenuType();
  List<String> columnElementList=new ArrayList<String>();
  if (analysisElement == null && indicator.eContainer() instanceof SimpleStatIndicator) {
    columnElementList=columnHeaderForColumnSet((SimpleStatIndicator)indicator.eContainer());
  }
 else {
    if (DrillDownEditorInput.judgeMenuType(menuType,DrillDownEditorInput.MENU_VALUE_TYPE)) {
      columnElementList.add(ModelElementHelper.getName(indicator.getAnalyzedElement()));
    }
 else     if (analysisElement instanceof TdColumn) {
      for (      TdColumn column : TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()))) {
        columnElementList.add(column.getName());
      }
    }
 else     if (analysisElement instanceof MetadataColumn) {
      MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
      for (      MetadataColumn mColumn : mTable.getColumns()) {
        columnElementList.add(mColumn.getLabel());
      }
    }
  }
  return columnElementList;
}","/** 
 * DOC zshen Comment method ""filterAdaptColumnHeader"".
 * @returnget the name of column which will be displayed on the drill down editor.
 */
public List<String> filterAdaptColumnHeader(){
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  String menuType=this.getMenuType();
  List<String> columnElementList=new ArrayList<String>();
  if (analysisElement == null && indicator.eContainer() instanceof SimpleStatIndicator) {
    columnElementList=columnHeaderForColumnSet((SimpleStatIndicator)indicator.eContainer());
  }
 else {
    if (DrillDownUtils.judgeMenuType(menuType,DrillDownUtils.MENU_VALUE_TYPE)) {
      columnElementList.add(ModelElementHelper.getName(indicator.getAnalyzedElement()));
    }
 else     if (analysisElement instanceof TdColumn) {
      for (      TdColumn column : TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()))) {
        columnElementList.add(column.getName());
      }
    }
 else     if (analysisElement instanceof MetadataColumn) {
      MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
      for (      MetadataColumn mColumn : mTable.getColumns()) {
        columnElementList.add(mColumn.getLabel());
      }
    }
  }
  return columnElementList;
}",0.9882525697503672
136996,"/** 
 * Get index of column whiche will be used on the dirll down. Note that One indicator only belong one column so that the array of retrun value just contain one element. And if we create new map for view values menu rather than used same map with view rows menu then method can be removed
 * @return
 */
public Integer[] getColumnIndexArray(){
  if (!DrillDownEditorInput.judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE) || DuplicateCountIndicator.class.isInstance(currIndicator)) {
    return null;
  }
  List<Integer> indexArray=new ArrayList<Integer>();
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  int index=0;
  if (analysisElement instanceof TdColumn) {
    TdTable tdTable=ColumnHelper.getColumnOwnerAsTdTable((TdColumn)analysisElement);
    for (    TdColumn column : TableHelper.getColumns(tdTable)) {
      if (column.getName().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
 else   if (analysisElement instanceof MetadataColumn) {
    MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
    for (    MetadataColumn mColumn : mTable.getColumns()) {
      if (mColumn.getLabel().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
  return indexArray.toArray(new Integer[indexArray.size()]);
}","/** 
 * Get index of column whiche will be used on the dirll down. Note that One indicator only belong one column so that the array of retrun value just contain one element. And if we create new map for view values menu rather than used same map with view rows menu then method can be removed
 * @return
 */
public Integer[] getColumnIndexArray(){
  if (!DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_VALUE_TYPE) || !UniqueCountIndicator.class.isInstance(currIndicator)) {
    return null;
  }
  List<Integer> indexArray=new ArrayList<Integer>();
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  int index=0;
  if (analysisElement instanceof TdColumn) {
    TdTable tdTable=ColumnHelper.getColumnOwnerAsTdTable((TdColumn)analysisElement);
    for (    TdColumn column : TableHelper.getColumns(tdTable)) {
      if (column.getName().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
 else   if (analysisElement instanceof MetadataColumn) {
    MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
    for (    MetadataColumn mColumn : mTable.getColumns()) {
      if (mColumn.getLabel().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
  return indexArray.toArray(new Integer[indexArray.size()]);
}",0.9843217450579412
136997,"/** 
 * create column header for columnSet analysis.
 * @param simpInd
 * @param columnElementList
 */
private List<String> columnHeaderForColumnSet(SimpleStatIndicator simpInd){
  List<String> columnElementList=new ArrayList<String>();
  if (simpInd.getAnalyzedColumns().size() == 0) {
    return columnElementList;
  }
  TdXmlElementType tdXmeElement=null;
  if (DrillDownEditorInput.judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    for (    ModelElement mod : simpInd.getAnalyzedColumns()) {
      tdXmeElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(mod);
      if (tdXmeElement != null) {
        columnElementList.add(tdXmeElement.getName());
      }
 else {
        columnElementList.add(ModelElementHelper.getName(mod));
      }
    }
  }
 else {
    boolean isDelimitedFile=false;
    boolean isMDM=false;
    for (    ModelElement mColumn : simpInd.getAnalyzedColumns()) {
      tdXmeElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(mColumn);
      TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(mColumn);
      if (tdXmeElement != null) {
        isMDM=true;
      }
 else       if (tdColumn == null) {
        isDelimitedFile=true;
      }
      break;
    }
    if (isMDM) {
      TdXmlElementType parentElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(XmlElementHelper.getParentElement(SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(tdXmeElement)));
      List<TdXmlElementType> columnList=org.talend.cwm.db.connection.ConnectionUtils.getXMLElements(parentElement);
      for (      TdXmlElementType tdXmlElement : columnList) {
        columnElementList.add(tdXmlElement.getName());
      }
    }
 else     if (isDelimitedFile) {
      List<MetadataColumn> columnList=ColumnHelper.getColumnOwnerAsMetadataTable(simpInd.getAnalyzedColumns().get(0)).getColumns();
      for (      MetadataColumn mdColumn : columnList) {
        columnElementList.add(mdColumn.getLabel());
      }
    }
 else {
      List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch((simpInd.getAnalyzedColumns().get(0).eContainer())));
      for (      TdColumn tdColumn : columnList) {
        columnElementList.add(tdColumn.getLabel());
      }
    }
  }
  return columnElementList;
}","/** 
 * create column header for columnSet analysis.
 * @param simpInd
 * @param columnElementList
 */
private List<String> columnHeaderForColumnSet(SimpleStatIndicator simpInd){
  List<String> columnElementList=new ArrayList<String>();
  if (simpInd.getAnalyzedColumns().size() == 0) {
    return columnElementList;
  }
  TdXmlElementType tdXmeElement=null;
  if (DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_VALUE_TYPE)) {
    for (    ModelElement mod : simpInd.getAnalyzedColumns()) {
      tdXmeElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(mod);
      if (tdXmeElement != null) {
        columnElementList.add(tdXmeElement.getName());
      }
 else {
        columnElementList.add(ModelElementHelper.getName(mod));
      }
    }
  }
 else {
    boolean isDelimitedFile=false;
    boolean isMDM=false;
    for (    ModelElement mColumn : simpInd.getAnalyzedColumns()) {
      tdXmeElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(mColumn);
      TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(mColumn);
      if (tdXmeElement != null) {
        isMDM=true;
      }
 else       if (tdColumn == null) {
        isDelimitedFile=true;
      }
      break;
    }
    if (isMDM) {
      TdXmlElementType parentElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(XmlElementHelper.getParentElement(SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(tdXmeElement)));
      List<TdXmlElementType> columnList=org.talend.cwm.db.connection.ConnectionUtils.getXMLElements(parentElement);
      for (      TdXmlElementType tdXmlElement : columnList) {
        columnElementList.add(tdXmlElement.getName());
      }
    }
 else     if (isDelimitedFile) {
      List<MetadataColumn> columnList=ColumnHelper.getColumnOwnerAsMetadataTable(simpInd.getAnalyzedColumns().get(0)).getColumns();
      for (      MetadataColumn mdColumn : columnList) {
        columnElementList.add(mdColumn.getLabel());
      }
    }
 else {
      List<TdColumn> columnList=TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch((simpInd.getAnalyzedColumns().get(0).eContainer())));
      for (      TdColumn tdColumn : columnList) {
        columnElementList.add(tdColumn.getLabel());
      }
    }
  }
  return columnElementList;
}",0.9928730512249444
136998,"/** 
 * Get the result of current indicator.
 * @return if view values then return result of current indicator else return the size of the mapDB
 */
public Long getItemSize(AbstractDB<?> mapDB){
  if (judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    return getCurrentIndicatorResultSize();
  }
 else {
    return Long.valueOf(mapDB.size());
  }
}","/** 
 * Get the result of current indicator.
 * @return if view values then return result of current indicator else return the size of the mapDB
 */
public Long getItemSize(AbstractDB<?> mapDB){
  if (isColumnSetIndicator()) {
    return getColumnSetIndicatorResultSize();
  }
 else {
    return Long.valueOf(mapDB.size());
  }
}",0.8183118741058655
136999,"/** 
 * Get the MapDB which used to drill down data
 * @return
 */
public AbstractDB<Object> getMapDB(){
  if (judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE) && DuplicateCountIndicator.class.isInstance(currIndicator)) {
    return currIndicator.getMapDB(StandardDBName.drillDownValues.name());
  }
  return DrillDownUtils.getMapDB(dataEntity,analysis);
}","/** 
 * Get the MapDB which used to drill down data
 * @return
 */
public AbstractDB<Object> getMapDB(){
  return DrillDownUtils.getMapDB(dataEntity,analysis,menuItemEntity);
}",0.5812274368231047
137000,"/** 
 * @return get the data which will be displayed on the drill down editor.
 */
public List<Object[]> filterAdaptDataList(){
  List<Object[]> newColumnElementList=new ArrayList<Object[]>();
  AnalyzedDataSet analysisDataSet=this.getAnalysis().getResults().getIndicToRowMap().get(currIndicator);
  if (analysisDataSet.getData() != null && analysisDataSet.getData().size() > 0) {
    List<Object[]> dataList=analysisDataSet.getData();
    newColumnElementList.addAll(getDesignatedData(dataList));
  }
 else   if (analysisDataSet.getFrequencyData() != null && analysisDataSet.getFrequencyData().size() > 0) {
    String selectValue=this.getSelectValue();
    if (currIndicator instanceof LengthIndicator) {
      selectValue=((LengthIndicator)currIndicator).getLength().toString();
    }
    if (currIndicator instanceof DatePatternFreqIndicator) {
      for (      Object expression : analysisDataSet.getFrequencyData().keySet()) {
        if (Pattern.matches(((DatePatternFreqIndicator)currIndicator).getRegex(selectValue),expression.toString())) {
          newColumnElementList.addAll(analysisDataSet.getFrequencyData().get(expression));
        }
      }
    }
 else {
      List<Object[]> list=analysisDataSet.getFrequencyData().get(selectValue);
      if (list != null && list.size() > 0) {
        newColumnElementList.addAll(list);
      }
    }
  }
 else   if (analysisDataSet.getPatternData() != null && analysisDataSet.getPatternData().size() > 0) {
    if (DrillDownEditorInput.judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_INVALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.INVALID_VALUE)));
    }
 else     if (DrillDownEditorInput.judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_VALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.VALID_VALUE)));
    }
  }
  return newColumnElementList;
}","/** 
 * @return get the data which will be displayed on the drill down editor.
 */
public List<Object[]> filterAdaptDataList(){
  List<Object[]> newColumnElementList=new ArrayList<Object[]>();
  AnalyzedDataSet analysisDataSet=this.getAnalysis().getResults().getIndicToRowMap().get(currIndicator);
  if (analysisDataSet.getData() != null && analysisDataSet.getData().size() > 0) {
    List<Object[]> dataList=analysisDataSet.getData();
    newColumnElementList.addAll(getDesignatedData(dataList));
  }
 else   if (analysisDataSet.getFrequencyData() != null && analysisDataSet.getFrequencyData().size() > 0) {
    String selectValue=this.getSelectValue();
    if (currIndicator instanceof LengthIndicator) {
      selectValue=((LengthIndicator)currIndicator).getLength().toString();
    }
    if (currIndicator instanceof DatePatternFreqIndicator) {
      for (      Object expression : analysisDataSet.getFrequencyData().keySet()) {
        if (Pattern.matches(((DatePatternFreqIndicator)currIndicator).getRegex(selectValue),expression.toString())) {
          newColumnElementList.addAll(analysisDataSet.getFrequencyData().get(expression));
        }
      }
    }
 else {
      List<Object[]> list=analysisDataSet.getFrequencyData().get(selectValue);
      if (list != null && list.size() > 0) {
        newColumnElementList.addAll(list);
      }
    }
  }
 else   if (analysisDataSet.getPatternData() != null && analysisDataSet.getPatternData().size() > 0) {
    if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_INVALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.INVALID_VALUE)));
    }
 else     if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_VALID_TYPE)) {
      newColumnElementList.addAll(getDesignatedData((List<Object[]>)analysisDataSet.getPatternData().get(AnalyzedDataSetImpl.VALID_VALUE)));
    }
  }
  return newColumnElementList;
}",0.9667673716012084
