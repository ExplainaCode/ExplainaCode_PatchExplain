record_number,buggy_code,fixed_code,code_similarity
144001,"@Override public void addResult(String name,List<PredictedDataInstance<T,S>> predictions,Function<PredictedDataInstance<T,S>,Boolean> groundTruth){
  Collections.sort(predictions,Comparator.comparing(PredictedDataInstance::probability));
  List<CurvePoint> points=new ArrayList<>();
  double areaUnderCurve=0;
  for (int predictionIndex=0; predictionIndex < predictions.size(); predictionIndex++) {
    double relevantPrediction=groundTruth.apply(predictions.get(predictionIndex)) ? 1 : 0;
    if (!useAlternativeFormulation) {
      if (points.size() == 0) {
        points.add(new CurvePoint(predictionIndex + 1,relevantPrediction));
        continue;
      }
      points.add(new CurvePoint(predictionIndex + 1,points.get(points.size() - 1).getVerticalAxisValue() + relevantPrediction * Math.log(2) / Math.log(predictionIndex + 1)));
    }
 else {
      if (points.size() == 0) {
        points.add(new CurvePoint(predictionIndex + 1,(Math.pow(2,relevantPrediction) - 1) * Math.log(2) / Math.log(predictionIndex + 2)));
        continue;
      }
      points.add(new CurvePoint(predictionIndex + 1,points.get(points.size() - 1).getVerticalAxisValue() + (Math.pow(2,relevantPrediction) - 1) * Math.log(2) / Math.log(predictionIndex + 2)));
    }
    int k=points.size() - 1;
    areaUnderCurve+=0.5 * (points.get(k).getHorizontalAxisValue() - points.get(k - 1).getHorizontalAxisValue()) * (points.get(k).getVerticalAxisValue() + points.get(k - 1).getVerticalAxisValue());
  }
  areaUnderCurve+=0.5 * (1 - points.get(points.size() - 2).getHorizontalAxisValue()) * (1 + points.get(points.size() - 2).getVerticalAxisValue());
  curves.add(new Curve(name,points));
  areaUnderCurves.add(areaUnderCurve);
}","@Override public void addResult(String name,List<PredictedDataInstance<T,S>> predictions,Function<PredictedDataInstance<T,S>,Boolean> groundTruth){
  Collections.sort(predictions,Comparator.comparing(PredictedDataInstance::probability));
  List<CurvePoint> points=new ArrayList<>();
  double areaUnderCurve=0;
  for (int predictionIndex=0; predictionIndex < predictions.size(); predictionIndex++) {
    double relevantPrediction=groundTruth.apply(predictions.get(predictionIndex)) ? 1 : 0;
    if (!useAlternativeFormulation) {
      if (points.size() == 0) {
        points.add(new CurvePoint(predictionIndex + 1,relevantPrediction));
        continue;
      }
      points.add(new CurvePoint(predictionIndex + 1,points.get(points.size() - 1).getVerticalAxisValue() + relevantPrediction * Math.log(2) / Math.log(predictionIndex + 1)));
    }
 else {
      if (points.size() == 0) {
        points.add(new CurvePoint(predictionIndex + 1,(Math.pow(2,relevantPrediction) - 1) * Math.log(2) / Math.log(predictionIndex + 2)));
        continue;
      }
      points.add(new CurvePoint(predictionIndex + 1,points.get(points.size() - 1).getVerticalAxisValue() + (Math.pow(2,relevantPrediction) - 1) * Math.log(2) / Math.log(predictionIndex + 2)));
    }
    int k=points.size() - 1;
    areaUnderCurve+=0.5 * (points.get(k).getHorizontalAxisValue() - points.get(k - 1).getHorizontalAxisValue()) * (points.get(k).getVerticalAxisValue() + points.get(k - 1).getVerticalAxisValue());
  }
  curves.add(new Curve(name,points));
  areaUnderCurves.add(areaUnderCurve);
}",0.9193003988953666
144002,"@Override public void addResult(String name,List<PredictedDataInstance<T,S>> predictions,Function<PredictedDataInstance<T,S>,Boolean> groundTruth){
  int totalNumberOfPositiveLabels=0;
  for (  PredictedDataInstance<T,S> prediction : predictions)   if (groundTruth.apply(prediction))   totalNumberOfPositiveLabels++;
  Collections.sort(predictions,Comparator.comparing(PredictedDataInstance::probability));
  List<CurvePoint> points=new ArrayList<>();
  double areaUnderCurve=0;
  double idealDiscountedCumulativeGain=0;
  for (int predictionIndex=0; predictionIndex < predictions.size(); predictionIndex++) {
    double relevantPrediction=groundTruth.apply(predictions.get(predictionIndex)) ? 1 : 0;
    if (!useAlternativeFormulation) {
      if (points.size() == 0) {
        if (predictionIndex < totalNumberOfPositiveLabels)         idealDiscountedCumulativeGain++;
        points.add(new CurvePoint(predictionIndex + 1,relevantPrediction / idealDiscountedCumulativeGain));
        continue;
      }
      double discountedCumulativeGain=points.get(points.size() - 1).getVerticalAxisValue() * idealDiscountedCumulativeGain + relevantPrediction * Math.log(2) / Math.log(predictionIndex + 1);
      if (predictionIndex < totalNumberOfPositiveLabels)       idealDiscountedCumulativeGain+=Math.log(2) / Math.log(predictionIndex + 1);
      points.add(new CurvePoint(predictionIndex + 1,discountedCumulativeGain / idealDiscountedCumulativeGain));
    }
 else {
      if (points.size() == 0) {
        if (predictionIndex < totalNumberOfPositiveLabels)         idealDiscountedCumulativeGain+=Math.log(2) / Math.log(predictionIndex + 2);
        double discountedCumulativeGain=(Math.pow(2,relevantPrediction) - 1) * Math.log(2) / Math.log(predictionIndex + 2);
        points.add(new CurvePoint(predictionIndex + 1,discountedCumulativeGain / idealDiscountedCumulativeGain));
        continue;
      }
      double discountedCumulativeGain=points.get(points.size() - 1).getVerticalAxisValue() * idealDiscountedCumulativeGain + (Math.pow(2,relevantPrediction) - 1) * Math.log(2) / Math.log(predictionIndex + 2);
      if (predictionIndex < totalNumberOfPositiveLabels)       idealDiscountedCumulativeGain+=Math.log(2) / Math.log(predictionIndex + 2);
      points.add(new CurvePoint(predictionIndex + 1,discountedCumulativeGain / idealDiscountedCumulativeGain));
    }
    int k=points.size() - 1;
    areaUnderCurve+=0.5 * (points.get(k).getHorizontalAxisValue() - points.get(k - 1).getHorizontalAxisValue()) * (points.get(k).getVerticalAxisValue() + points.get(k - 1).getVerticalAxisValue());
  }
  areaUnderCurve+=0.5 * (1 - points.get(points.size() - 2).getHorizontalAxisValue()) * (1 + points.get(points.size() - 2).getVerticalAxisValue());
  curves.add(new Curve(name,points));
  areaUnderCurves.add(areaUnderCurve);
}","@Override public void addResult(String name,List<PredictedDataInstance<T,S>> predictions,Function<PredictedDataInstance<T,S>,Boolean> groundTruth){
  int totalNumberOfPositiveLabels=0;
  for (  PredictedDataInstance<T,S> prediction : predictions)   if (groundTruth.apply(prediction))   totalNumberOfPositiveLabels++;
  Collections.sort(predictions,Comparator.comparing(PredictedDataInstance::probability));
  List<CurvePoint> points=new ArrayList<>();
  double areaUnderCurve=0;
  double idealDiscountedCumulativeGain=0;
  for (int predictionIndex=0; predictionIndex < predictions.size(); predictionIndex++) {
    double relevantPrediction=groundTruth.apply(predictions.get(predictionIndex)) ? 1 : 0;
    if (!useAlternativeFormulation) {
      if (points.size() == 0) {
        if (predictionIndex < totalNumberOfPositiveLabels)         idealDiscountedCumulativeGain++;
        points.add(new CurvePoint(predictionIndex + 1,relevantPrediction / idealDiscountedCumulativeGain));
        continue;
      }
      double discountedCumulativeGain=points.get(points.size() - 1).getVerticalAxisValue() * idealDiscountedCumulativeGain + relevantPrediction * Math.log(2) / Math.log(predictionIndex + 1);
      if (predictionIndex < totalNumberOfPositiveLabels)       idealDiscountedCumulativeGain+=Math.log(2) / Math.log(predictionIndex + 1);
      points.add(new CurvePoint(predictionIndex + 1,discountedCumulativeGain / idealDiscountedCumulativeGain));
    }
 else {
      if (points.size() == 0) {
        if (predictionIndex < totalNumberOfPositiveLabels)         idealDiscountedCumulativeGain+=Math.log(2) / Math.log(predictionIndex + 2);
        double discountedCumulativeGain=(Math.pow(2,relevantPrediction) - 1) * Math.log(2) / Math.log(predictionIndex + 2);
        points.add(new CurvePoint(predictionIndex + 1,discountedCumulativeGain / idealDiscountedCumulativeGain));
        continue;
      }
      double discountedCumulativeGain=points.get(points.size() - 1).getVerticalAxisValue() * idealDiscountedCumulativeGain + (Math.pow(2,relevantPrediction) - 1) * Math.log(2) / Math.log(predictionIndex + 2);
      if (predictionIndex < totalNumberOfPositiveLabels)       idealDiscountedCumulativeGain+=Math.log(2) / Math.log(predictionIndex + 2);
      points.add(new CurvePoint(predictionIndex + 1,discountedCumulativeGain / idealDiscountedCumulativeGain));
    }
    int k=points.size() - 1;
    areaUnderCurve+=0.5 * (points.get(k).getHorizontalAxisValue() - points.get(k - 1).getHorizontalAxisValue()) * (points.get(k).getVerticalAxisValue() + points.get(k - 1).getVerticalAxisValue());
  }
  curves.add(new Curve(name,points));
  areaUnderCurves.add(areaUnderCurve);
}",0.9521383075523204
144003,"public EntityType(long id,String name,Set<Long> allowedValues){
  this.name=name;
  this.allowedValues=allowedValues;
}","public EntityType(long id,String name,Set<Long> allowedValues){
  this.id=id;
  this.name=name;
  this.allowedValues=allowedValues;
}",0.9444444444444444
144004,"private RulePart convertRulePartToInternalRepresentation(int[] externalVariableIndexes,boolean[] negations){
  List<Integer> internalVariableIndexes=new ArrayList<>();
  List<Boolean> internalVariableNegations=new ArrayList<>();
  double observedConstant=0;
  for (int i=0; i < externalVariableIndexes.length; ++i) {
    double observedValue=observedVariableValues.getOrDefault(externalVariableIndexes[i],Double.NaN);
    if (!Double.isNaN(observedValue)) {
      if (negations[i])       observedConstant+=observedValue - 1;
 else       observedConstant-=observedValue;
    }
 else {
      int internalVariableIndex=externalToInternalIndexesMapping.getOrDefault(externalVariableIndexes[i],-1);
      if (internalVariableIndex < 0) {
        internalVariableIndex=nextInternalIndex++;
        externalToInternalIndexesMapping.put(externalVariableIndexes[i],internalVariableIndex);
      }
      internalVariableIndexes.add(internalVariableIndex);
      internalVariableNegations.add(negations[i]);
    }
  }
  return new RulePart(Ints.toArray(internalVariableIndexes),Booleans.toArray(internalVariableNegations),observedConstant);
}","private RulePart convertRulePartToInternalRepresentation(List<GroundedPredicate<Integer,Double>> groundedRulePredicates,boolean[] negations){
  List<Integer> internalVariableIndexes=new ArrayList<>();
  List<Boolean> internalVariableNegations=new ArrayList<>();
  double observedConstant=0;
  for (int i=0; i < groundedRulePredicates.size(); ++i) {
    Double observedValue=groundedRulePredicates.get(i).getValue();
    if (observedValue != null) {
      if (negations[i])       observedConstant+=observedValue - 1;
 else       observedConstant-=observedValue;
    }
 else {
      int internalVariableIndex=externalToInternalIndexesMapping.getOrDefault((int)groundedRulePredicates.get(i).getIdentifier(),-1);
      if (internalVariableIndex < 0) {
        internalVariableIndex=nextInternalIndex++;
        externalToInternalIndexesMapping.put((int)groundedRulePredicates.get(i).getIdentifier(),internalVariableIndex);
      }
      internalVariableIndexes.add(internalVariableIndex);
      internalVariableNegations.add(negations[i]);
    }
  }
  return new RulePart(Ints.toArray(internalVariableIndexes),Booleans.toArray(internalVariableNegations),observedConstant);
}",0.7909604519774012
144005,"public Builder(int[] observedVariableIndexes,double[] observedVariableValues,int numberOfUnobservedVariables){
  ImmutableMap.Builder<Integer,Double> observedVariableValueBuilder=ImmutableMap.builder();
  if ((observedVariableIndexes == null) != (observedVariableValues == null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (observedVariableIndexes != null) {
    if (observedVariableIndexes.length != observedVariableValues.length) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
    }
    for (int i=0; i < observedVariableIndexes.length; ++i) {
      observedVariableValueBuilder.put(observedVariableIndexes[i],observedVariableValues[i]);
    }
  }
  this.observedVariableValues=observedVariableValueBuilder.build();
  this.externalToInternalIndexesMapping=HashBiMap.create(numberOfUnobservedVariables);
  this.externalPredicateIdToTerms=new HashMap<>(numberOfUnobservedVariables + observedVariableIndexes.length,1);
}","public Builder(LogicManager<Integer,Double> logicManager){
  this.logicManager=logicManager;
  this.externalToInternalIndexesMapping=HashBiMap.create(logicManager.getNumberOfVariables());
  this.externalPredicateIdToTerms=new HashMap<>(logicManager.getNumberOfVariables());
}",0.0906921241050119
144006,"Builder addRule(int[] variableIndexes,boolean[] variableNegations,double power,double weight){
  RulePart internalRepresentation=convertRulePartToInternalRepresentation(variableIndexes,variableNegations);
  double ruleMaximumValue=1 + internalRepresentation.observedConstant;
  if (ruleMaximumValue <= 0)   return this;
  if (internalRepresentation.variableIndexes.length == 0)   return this;
  int indexTerm=this.functionTerms.size();
  LinearFunction linearFunction=new LinearFunction(Vectors.dense(internalRepresentation.variableIndexes.length),ruleMaximumValue);
  for (int variable=0; variable < internalRepresentation.variableIndexes.length; variable++) {
    List<Integer> predicateTermIndices=this.externalPredicateIdToTerms.getOrDefault(internalRepresentation.variableIndexes[variable],null);
    if (predicateTermIndices == null) {
      predicateTermIndices=new ArrayList<>(200);
      this.externalPredicateIdToTerms.put(internalRepresentation.variableIndexes[variable],predicateTermIndices);
    }
    predicateTermIndices.add(indexTerm);
    Vector coefficients=Vectors.dense(internalRepresentation.variableIndexes.length);
    if (internalRepresentation.negations[variable]) {
      coefficients.set(variable,1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,-1));
    }
 else {
      coefficients.set(variable,-1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,0));
    }
  }
  FunctionTerm term=new FunctionTerm(internalRepresentation.variableIndexes,linearFunction,weight,power);
  functionTerms.add(term);
  return this;
}","Builder addRule(List<GroundedPredicate<Integer,Double>> groundedRulePredicates,boolean[] variableNegations,double power,double weight){
  RulePart internalRepresentation=convertRulePartToInternalRepresentation(groundedRulePredicates,variableNegations);
  double ruleMaximumValue=1 + internalRepresentation.observedConstant;
  if (ruleMaximumValue <= 0)   return this;
  Set<Integer> variableIndexesSet=new HashSet<>(Arrays.asList(ArrayUtils.toObject(internalRepresentation.variableIndexes)));
  int[] variableIndexes=ArrayUtils.toPrimitive(variableIndexesSet.toArray(new Integer[variableIndexesSet.size()]));
  if (variableIndexes.length == 0)   return this;
  int indexTerm=this.functionTerms.size();
  LinearFunction linearFunction=new LinearFunction(Vectors.dense(variableIndexes.length),ruleMaximumValue);
  for (int variable=0; variable < internalRepresentation.variableIndexes.length; variable++) {
    List<Integer> predicateTermIndices=this.externalPredicateIdToTerms.getOrDefault(internalRepresentation.variableIndexes[variable],null);
    if (predicateTermIndices == null) {
      predicateTermIndices=new ArrayList<>(200);
      this.externalPredicateIdToTerms.put(internalRepresentation.variableIndexes[variable],predicateTermIndices);
    }
    predicateTermIndices.add(indexTerm);
    Vector coefficients=Vectors.dense(variableIndexes.length);
    if (internalRepresentation.negations[variable]) {
      coefficients.set(ArrayUtils.indexOf(variableIndexes,internalRepresentation.variableIndexes[variable]),1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,-1));
    }
 else {
      coefficients.set(ArrayUtils.indexOf(variableIndexes,internalRepresentation.variableIndexes[variable]),-1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,0));
    }
  }
  FunctionTerm term=new FunctionTerm(variableIndexes,linearFunction,weight,power);
  functionTerms.add(term);
  return this;
}",0.684016973125884
144007,"public Map<Integer,Double> solve(ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblemSelectionMethod subProblemSelectionMethod,ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblemSelector subProblemSelector,int numberOfSubProblemSamples){
  ConsensusAlternatingDirectionsMethodOfMultipliersSolver.Builder solverBuilder=new ConsensusAlternatingDirectionsMethodOfMultipliersSolver.Builder(objectiveFunction,Vectors.dense(objectiveFunction.getNumberOfVariables())).subProblemSolver((subProblem) -> solveProbabilisticSoftLogicSubProblem(subProblem,subProblemCholeskyFactors)).subProblemSelector(subProblemSelector).subProblemSelectionMethod(subProblemSelectionMethod).numberOfSubProblemSamples(numberOfSubProblemSamples).penaltyParameter(1).penaltyParameterSettingMethod(ConsensusAlternatingDirectionsMethodOfMultipliersSolver.PenaltyParameterSettingMethod.CONSTANT).checkForPointConvergence(false).checkForObjectiveConvergence(false).checkForGradientConvergence(false).logObjectiveValue(false).logGradientNorm(false).loggingLevel(3);
  for (  Constraint constraint : constraints)   solverBuilder.addConstraint(constraint.constraint,constraint.variableIndexes);
  ConsensusAlternatingDirectionsMethodOfMultipliersSolver solver=solverBuilder.build();
  Vector solverResult=solver.solve();
  Map<Integer,Double> inferredValues=new HashMap<>(solverResult.size());
  for (int internalVariableIndex=0; internalVariableIndex < solverResult.size(); internalVariableIndex++)   inferredValues.put(externalToInternalIndexesMapping.inverse().get(internalVariableIndex),solverResult.get(internalVariableIndex));
  return inferredValues;
}","public Map<Integer,Double> solve(ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblemSelectionMethod subProblemSelectionMethod,ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblemSelector subProblemSelector,int numberOfSubProblemSamples){
  ConsensusAlternatingDirectionsMethodOfMultipliersSolver.Builder solverBuilder=new ConsensusAlternatingDirectionsMethodOfMultipliersSolver.Builder(objectiveFunction,Vectors.dense(objectiveFunction.getNumberOfVariables())).subProblemSolver((subProblem) -> solveProbabilisticSoftLogicSubProblem(subProblem,subProblemCholeskyFactors)).subProblemSelector(subProblemSelector).subProblemSelectionMethod(subProblemSelectionMethod).numberOfSubProblemSamples(numberOfSubProblemSamples).penaltyParameter(1).penaltyParameterSettingMethod(ConsensusAlternatingDirectionsMethodOfMultipliersSolver.PenaltyParameterSettingMethod.CONSTANT).checkForPointConvergence(false).checkForObjectiveConvergence(false).checkForGradientConvergence(false).logObjectiveValue(true).logGradientNorm(false).loggingLevel(3);
  for (  Constraint constraint : constraints)   solverBuilder.addConstraint(constraint.constraint,constraint.variableIndexes);
  ConsensusAlternatingDirectionsMethodOfMultipliersSolver solver=solverBuilder.build();
  Vector solverResult=solver.solve();
  Map<Integer,Double> inferredValues=new HashMap<>(solverResult.size());
  for (int internalVariableIndex=0; internalVariableIndex < solverResult.size(); internalVariableIndex++)   inferredValues.put(externalToInternalIndexesMapping.inverse().get(internalVariableIndex),solverResult.get(internalVariableIndex));
  return inferredValues;
}",0.9978781448923916
144008,"public static void addGroundingsToBuilder(List<Rule> rules,Builder builder,LogicManager<Integer,Double> logicManager){
  List<Formula<Integer>> ruleFormulas=new ArrayList<>();
  for (  Rule rule : rules) {
    List<Formula<Integer>> disjunctionComponents=new ArrayList<>();
    for (int i=0; i < rule.bodyParts.size(); ++i)     if (rule.bodyParts.get(i) instanceof Negation)     disjunctionComponents.add(((Negation<Integer>)rule.bodyParts.get(i)).getFormula());
 else     disjunctionComponents.add(new Negation<>(rule.bodyParts.get(i)));
    for (int i=0; i < rule.headParts.size(); ++i)     disjunctionComponents.add(rule.headParts.get(i));
    ruleFormulas.add(new Disjunction<>(disjunctionComponents));
  }
  Grounding<Integer,Double> grounding=new ExhaustiveGrounding<>(logicManager);
  grounding.ground(ruleFormulas);
  Map<Integer,Set<List<GroundedPredicate<Integer,Double>>>> groundedRules=new HashMap<>();
  for (int ruleIndex=0; ruleIndex < rules.size(); ruleIndex++)   groundedRules.put(ruleIndex,grounding.getGroundedFormulas().get(ruleIndex));
  for (int ruleIndex=0; ruleIndex < rules.size(); ruleIndex++) {
    Set<List<GroundedPredicate<Integer,Double>>> predicateGroundings=groundedRules.get(ruleIndex);
    Disjunction<Integer> ruleFormula=((Disjunction<Integer>)ruleFormulas.get(ruleIndex));
    boolean[] variableNegations=new boolean[ruleFormula.getNumberOfComponents()];
    for (int i=0; i < ruleFormula.getNumberOfComponents(); ++i)     variableNegations[i]=ruleFormula.getComponent(i) instanceof Negation;
    if (variableNegations.length != 0) {
      for (      List<GroundedPredicate<Integer,Double>> groundedRulePredicates : predicateGroundings) {
        int[] variableIndexes=new int[ruleFormula.getNumberOfComponents()];
        for (int i=0; i < ruleFormula.getNumberOfComponents(); ++i)         variableIndexes[i]=(int)groundedRulePredicates.get(i).getIdentifier();
        if (Double.isNaN(rules.get(ruleIndex).weight))         builder.addRule(variableIndexes,variableNegations,1,1000);
 else         builder.addRule(variableIndexes,variableNegations,rules.get(ruleIndex).power,rules.get(ruleIndex).weight);
      }
    }
  }
}","public static void addGroundingsToBuilder(List<Rule> rules,Builder builder,LogicManager<Integer,Double> logicManager){
  List<Formula<Integer>> ruleFormulas=new ArrayList<>();
  for (  Rule rule : rules) {
    List<Formula<Integer>> disjunctionComponents=new ArrayList<>();
    for (int i=0; i < rule.bodyParts.size(); ++i)     if (rule.bodyParts.get(i) instanceof Negation)     disjunctionComponents.add(((Negation<Integer>)rule.bodyParts.get(i)).getFormula());
 else     disjunctionComponents.add(new Negation<>(rule.bodyParts.get(i)));
    for (int i=0; i < rule.headParts.size(); ++i)     disjunctionComponents.add(rule.headParts.get(i));
    ruleFormulas.add(new Disjunction<>(disjunctionComponents));
  }
  Grounding<Integer,Double> grounding=new ExhaustiveGrounding<>(logicManager);
  grounding.ground(ruleFormulas);
  for (int ruleIndex=0; ruleIndex < rules.size(); ruleIndex++) {
    Disjunction<Integer> ruleFormula=((Disjunction<Integer>)ruleFormulas.get(ruleIndex));
    boolean[] variableNegations=new boolean[ruleFormula.getNumberOfComponents()];
    for (int i=0; i < ruleFormula.getNumberOfComponents(); ++i)     variableNegations[i]=ruleFormula.getComponent(i) instanceof Negation;
    if (variableNegations.length != 0)     for (    List<GroundedPredicate<Integer,Double>> groundedRulePredicates : grounding.getGroundedFormulas().get(ruleIndex))     if (Double.isNaN(rules.get(ruleIndex).weight))     builder.addRule(groundedRulePredicates,variableNegations,1,1000);
 else     builder.addRule(groundedRulePredicates,variableNegations,rules.get(ruleIndex).power,rules.get(ruleIndex).weight);
  }
}",0.784957627118644
144009,"@Test public void testFastEndToEnd(){
  String experimentName=""String_Node_Str"";
  LogicManager<Integer,Double> logicManager=new LogicManager<>(new LukasiewiczLogic());
  VariableType<Integer> personType=logicManager.addVariableType(""String_Node_Str"",Integer.class);
  Set<Integer> personValues=new HashSet<>();
  try {
    Stream<String> lines=Files.lines(Paths.get(LogicRuleParserTest.class.getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").getPath()));
    lines.forEach(line -> {
      String[] lineParts=line.split(""String_Node_Str"");
      for (      String linePart : lineParts)       personValues.add(Integer.parseInt(linePart.trim()));
    }
);
    lines=Files.lines(Paths.get(LogicRuleParserTest.class.getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").getPath()));
    lines.forEach(line -> {
      String[] lineParts=line.split(""String_Node_Str"");
      for (int partIndex=0; partIndex < lineParts.length - 1; partIndex++)       personValues.add(Integer.parseInt(lineParts[partIndex].trim()));
    }
);
  }
 catch (  IOException ignored) {
  }
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  List<VariableType<Integer>> argumentTypes=new ArrayList<>(2);
  argumentTypes.add(personType);
  argumentTypes.add(personType);
  logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  InputStream modelStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream knowsStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream trustTrainStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream trustTestStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  List<FastProbabilisticSoftLogicProblem.Rule> rules=null;
  try (BufferedReader modelReader=new BufferedReader(new InputStreamReader(modelStream));BufferedReader knowsReader=new BufferedReader(new InputStreamReader(knowsStream));BufferedReader trustTrainReader=new BufferedReader(new InputStreamReader(trustTrainStream));BufferedReader trustTestReader=trustTestStream == null ? null : new BufferedReader(new InputStreamReader(trustTestStream))){
    rules=ProbabilisticSoftLogicReader.readFastRules(modelReader,logicManager);
    ProbabilisticSoftLogicReader.readGroundingsAndAddToFastManager(logicManager,""String_Node_Str"",true,knowsReader);
    ProbabilisticSoftLogicReader.readGroundingsAndAddToFastManager(logicManager,""String_Node_Str"",false,trustTrainReader);
  }
 catch (  IOException|DataFormatException e) {
    fail(e.getMessage());
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
  int[] observedIndexes=new int[logicManager.getNumberOfGroundedPredicates()];
  double[] observedWeights=new double[logicManager.getNumberOfGroundedPredicates()];
  for (int index=0; index < logicManager.getNumberOfGroundedPredicates(); index++) {
    observedIndexes[index]=(int)logicManager.getGroundedPredicates().get(index).getIdentifier();
    observedWeights[index]=(double)logicManager.getGroundedPredicates().get(index).getValue();
  }
  FastProbabilisticSoftLogicProblem.Builder problemBuilder=new FastProbabilisticSoftLogicProblem.Builder(observedIndexes,observedWeights,logicManager.getNumberOfVariables());
  FastProbabilisticSoftLogicProblem.Rule.addGroundingsToBuilder(rules,problemBuilder,logicManager);
  FastProbabilisticSoftLogicProblem problem=problemBuilder.build();
  Map<Integer,Double> result=problem.solve();
  Map<String,Double> filteredResults=new HashMap<>();
  result.keySet().stream().filter(key -> result.get(key) > Math.sqrt(Double.MIN_VALUE)).forEach(key -> filteredResults.put(logicManager.getGroundedPredicate(key).toString(),result.get(key)));
  long numberOfActivatedGroundings=result.keySet().stream().filter(key -> result.get(key) > 0.01).count();
  result.keySet().stream().filter(key -> result.get(key) > 0.01).forEach(key -> logicManager.getGroundedPredicate(key).setValue(result.get(key)));
  System.out.println(result.get(0));
  System.out.println(result.get(1));
  System.out.println(""String_Node_Str"");
}","@Test public void testFastEndToEnd(){
  String experimentName=""String_Node_Str"";
  LogicManager<Integer,Double> logicManager=new LogicManager<>(new LukasiewiczLogic());
  VariableType<Integer> personType=logicManager.addVariableType(""String_Node_Str"",Integer.class);
  Set<Integer> personValues=new HashSet<>();
  try {
    Stream<String> lines=Files.lines(Paths.get(LogicRuleParserTest.class.getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").getPath()));
    lines.forEach(line -> {
      String[] lineParts=line.split(""String_Node_Str"");
      for (      String linePart : lineParts)       personValues.add(Integer.parseInt(linePart.trim()));
    }
);
    lines=Files.lines(Paths.get(LogicRuleParserTest.class.getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").getPath()));
    lines.forEach(line -> {
      String[] lineParts=line.split(""String_Node_Str"");
      for (int partIndex=0; partIndex < lineParts.length - 1; partIndex++)       personValues.add(Integer.parseInt(lineParts[partIndex].trim()));
    }
);
  }
 catch (  IOException ignored) {
  }
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  List<VariableType<Integer>> argumentTypes=new ArrayList<>(2);
  argumentTypes.add(personType);
  argumentTypes.add(personType);
  logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  InputStream modelStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream knowsStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream trustTrainStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream trustTestStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  List<FastProbabilisticSoftLogicProblem.Rule> rules=null;
  try (BufferedReader modelReader=new BufferedReader(new InputStreamReader(modelStream));BufferedReader knowsReader=new BufferedReader(new InputStreamReader(knowsStream));BufferedReader trustTrainReader=new BufferedReader(new InputStreamReader(trustTrainStream));BufferedReader trustTestReader=trustTestStream == null ? null : new BufferedReader(new InputStreamReader(trustTestStream))){
    rules=ProbabilisticSoftLogicReader.readFastRules(modelReader,logicManager);
    ProbabilisticSoftLogicReader.readGroundingsAndAddToFastManager(logicManager,""String_Node_Str"",true,knowsReader);
    ProbabilisticSoftLogicReader.readGroundingsAndAddToFastManager(logicManager,""String_Node_Str"",false,trustTrainReader);
  }
 catch (  IOException|DataFormatException e) {
    fail(e.getMessage());
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
  int[] observedIndexes=new int[logicManager.getNumberOfGroundedPredicates()];
  double[] observedWeights=new double[logicManager.getNumberOfGroundedPredicates()];
  for (int index=0; index < logicManager.getNumberOfGroundedPredicates(); index++) {
    observedIndexes[index]=(int)logicManager.getGroundedPredicates().get(index).getIdentifier();
    observedWeights[index]=(double)logicManager.getGroundedPredicates().get(index).getValue();
  }
  FastProbabilisticSoftLogicProblem.Builder problemBuilder=new FastProbabilisticSoftLogicProblem.Builder(logicManager);
  FastProbabilisticSoftLogicProblem.Rule.addGroundingsToBuilder(rules,problemBuilder,logicManager);
  FastProbabilisticSoftLogicProblem problem=problemBuilder.build();
  Map<Integer,Double> result=problem.solve();
  Map<String,Double> filteredResults=new HashMap<>();
  result.keySet().stream().filter(key -> result.get(key) > Math.sqrt(Double.MIN_VALUE)).forEach(key -> filteredResults.put(logicManager.getGroundedPredicate(key).toString(),result.get(key)));
  long numberOfActivatedGroundings=result.keySet().stream().filter(key -> result.get(key) > 0.01).count();
  result.keySet().stream().filter(key -> result.get(key) > 0.01).forEach(key -> logicManager.getGroundedPredicate(key).setValue(result.get(key)));
  System.out.println(result.get(0));
  System.out.println(result.get(1));
  System.out.println(""String_Node_Str"");
}",0.9940955448201824
144010,"public boolean groundedPredicateExists(Predicate<T> predicate,List<T> argumentAssignments){
  if (!groundedPredicates.containsKey(predicate.getIdentifier()))   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return groundedPredicates.get(predicate.getIdentifier()).containsKey(argumentAssignments);
}","public boolean groundedPredicateExists(Predicate<T> predicate,List<T> argumentAssignments){
  if (!groundedPredicates.containsKey(predicate.getIdentifier()))   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return groundedPredicates.get(predicate.getIdentifier()).containsKey(argumentAssignments) || closedPredicateIdentifiers.contains(predicate.getIdentifier());
}",0.9088397790055248
144011,"@Override public void performIterationUpdates(){
  previousPoint=currentPoint.copy();
  if (subProblemSelectionMethod == SubProblemSelectionMethod.ALL) {
    primalToleranceAdder=new DoubleAdder();
    dualToleranceAdder=new DoubleAdder();
  }
  int[] selectedSubProblemIndexes=subProblemSelectionMethod.selectSubProblems(this);
  Arrays.sort(selectedSubProblemIndexes);
  Set<Integer> affectedConsensusVariables=new HashSet<>();
  List<Callable<Object>> subProblemTasks=new ArrayList<>();
  List<Callable<Object>> residualComputationTasks=new ArrayList<>();
  int temporaryIndex=0;
  for (int subProblemIndex=0; subProblemIndex < objective.getNumberOfTerms(); subProblemIndex++) {
    final boolean solveSubProblem=(temporaryIndex < selectedSubProblemIndexes.length && selectedSubProblemIndexes[temporaryIndex] == subProblemIndex) || currentIteration == 1;
    if (solveSubProblem || penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence || subProblemSelectionMethod == SubProblemSelectionMethod.CONSENSUS_FOCUSED_SAMPLING) {
      int[] variableIndexes=objective.getTermVariables(subProblemIndex);
      final int currentSubProblemIndex=subProblemIndex;
      Vector variables=variableCopies.get(subProblemIndex);
      Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
      Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
      consensusVariables.set(currentPoint.get(variableIndexes));
      if (currentIteration > 1 && subProblemSelectionMethod != SubProblemSelectionMethod.ALL)       for (      int variableIndex : variableIndexes)       affectedConsensusVariables.add(variableIndex);
      if (solveSubProblem) {
        subProblemTasks.add(Executors.callable(() -> processSubProblem(currentSubProblemIndex,variableIndexes,variables,consensusVariables,multipliers,variableCopiesSum)));
        temporaryIndex++;
      }
      if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence || subProblemSelectionMethod == SubProblemSelectionMethod.CONSENSUS_FOCUSED_SAMPLING) {
        if (subProblemSelectionMethod != SubProblemSelectionMethod.ALL) {
          primalToleranceAdder.add(-variables.norm(VectorNorm.L2_SQUARED));
          dualToleranceAdder.add(-multipliers.norm(VectorNorm.L2_SQUARED));
        }
        residualComputationTasks.add(Executors.callable(() -> computeResiduals(currentSubProblemIndex,variables,consensusVariables,multipliers,solveSubProblem)));
      }
    }
  }
  for (int constraintIndex=0; constraintIndex < constraints.size(); constraintIndex++) {
    int[] variableIndexes=constraintsVariablesIndexes.get(constraintIndex);
    final int currentConstraintIndex=constraintIndex;
    int subProblemIndex=objective.getNumberOfTerms() + constraintIndex;
    Vector variables=variableCopies.get(subProblemIndex);
    Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
    Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
    consensusVariables.set(currentPoint.get(variableIndexes));
    subProblemTasks.add(Executors.callable(() -> processConstraint(currentConstraintIndex,variableIndexes,variables,consensusVariables,multipliers,variableCopiesSum)));
    if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence || subProblemSelectionMethod == SubProblemSelectionMethod.CONSENSUS_FOCUSED_SAMPLING) {
      if (subProblemSelectionMethod != SubProblemSelectionMethod.ALL) {
        primalToleranceAdder.add(-variables.norm(VectorNorm.L2_SQUARED));
        dualToleranceAdder.add(-multipliers.norm(VectorNorm.L2_SQUARED));
      }
      residualComputationTasks.add(Executors.callable(() -> computeResiduals(subProblemIndex,variables,consensusVariables,multipliers,true)));
    }
  }
  try {
    taskExecutor.invokeAll(subProblemTasks);
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"");
  }
  if (currentIteration > 1 && subProblemSelectionMethod != SubProblemSelectionMethod.ALL) {
    int[] affectedConsensusVariablesIndexes=ArrayUtils.toPrimitive(affectedConsensusVariables.toArray(new Integer[affectedConsensusVariables.size()]));
    currentPoint.set(affectedConsensusVariablesIndexes,variableCopiesSum.get(affectedConsensusVariablesIndexes).divElementwise(variableCopiesCounts).get(affectedConsensusVariablesIndexes).maxElementwiseInPlace(0).minElementwiseInPlace(1));
  }
 else {
    currentPoint=variableCopiesSum.divElementwise(variableCopiesCounts).maxElementwiseInPlace(0).minElementwiseInPlace(1);
  }
  if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || subProblemSelectionMethod == SubProblemSelectionMethod.CONSENSUS_FOCUSED_SAMPLING || checkForPrimalAndDualResidualConvergence) {
    try {
      taskExecutor.invokeAll(residualComputationTasks);
    }
 catch (    InterruptedException e) {
      logger.error(""String_Node_Str"");
    }
    if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence) {
      primalResidual=Math.sqrt(primalResidualSquaredTerms.sum());
      dualResidual=penaltyParameter * Math.sqrt(currentPoint.sub(previousPoint).map(x -> x * x).multElementwise(variableCopiesCounts).sum());
    }
  }
  penaltyParameterSettingMethod.updatePenaltyParameter(this);
  if (checkForObjectiveConvergence || logObjectiveValue) {
    previousObjectiveValue=currentObjectiveValue;
    currentObjectiveValue=objective.getValue(currentPoint);
  }
  if (checkForGradientConvergence || logGradientNorm) {
    previousGradient=currentGradient;
    try {
      currentGradient=objective.getGradient(currentPoint);
    }
 catch (    NonSmoothFunctionException e) {
      throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}","@Override public void performIterationUpdates(){
  previousPoint=currentPoint.copy();
  if (subProblemSelectionMethod == SubProblemSelectionMethod.ALL) {
    primalToleranceAdder=new DoubleAdder();
    dualToleranceAdder=new DoubleAdder();
  }
  int[] selectedSubProblemIndexes=subProblemSelectionMethod.selectSubProblems(this);
  Arrays.sort(selectedSubProblemIndexes);
  Set<Integer> affectedConsensusVariables=new HashSet<>();
  List<Callable<Object>> subProblemTasks=new ArrayList<>();
  List<Callable<Object>> residualComputationTasks=new ArrayList<>();
  int temporaryIndex=0;
  for (int subProblemIndex=0; subProblemIndex < objective.getNumberOfTerms(); subProblemIndex++) {
    final boolean solveSubProblem=(temporaryIndex < selectedSubProblemIndexes.length && selectedSubProblemIndexes[temporaryIndex] == subProblemIndex) || currentIteration == 1;
    if (solveSubProblem || penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence || subProblemSelectionMethod == SubProblemSelectionMethod.CONSENSUS_FOCUSED_SAMPLING) {
      int[] variableIndexes=objective.getTermVariables(subProblemIndex);
      final int currentSubProblemIndex=subProblemIndex;
      Vector variables=variableCopies.get(subProblemIndex);
      Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
      Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
      consensusVariables.set(currentPoint.get(variableIndexes));
      if (currentIteration > 1 && subProblemSelectionMethod != SubProblemSelectionMethod.ALL)       for (      int variableIndex : variableIndexes)       affectedConsensusVariables.add(variableIndex);
      if (solveSubProblem) {
        subProblemTasks.add(Executors.callable(() -> processSubProblem(currentSubProblemIndex,variableIndexes,variables,consensusVariables,multipliers,variableCopiesSum)));
        temporaryIndex++;
      }
      if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence || subProblemSelectionMethod == SubProblemSelectionMethod.CONSENSUS_FOCUSED_SAMPLING) {
        if (subProblemSelectionMethod != SubProblemSelectionMethod.ALL) {
          primalToleranceAdder.add(-variables.norm(VectorNorm.L2_SQUARED));
          dualToleranceAdder.add(-multipliers.norm(VectorNorm.L2_SQUARED));
        }
        residualComputationTasks.add(Executors.callable(() -> computeResiduals(currentSubProblemIndex,variables,consensusVariables,multipliers,solveSubProblem)));
      }
    }
  }
  for (int constraintIndex=0; constraintIndex < constraints.size(); constraintIndex++) {
    int[] variableIndexes=constraintsVariablesIndexes.get(constraintIndex);
    final int currentConstraintIndex=constraintIndex;
    int subProblemIndex=objective.getNumberOfTerms() + constraintIndex;
    Vector variables=variableCopies.get(subProblemIndex);
    Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
    Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
    consensusVariables.set(currentPoint.get(variableIndexes));
    subProblemTasks.add(Executors.callable(() -> processConstraint(currentConstraintIndex,variableIndexes,variables,consensusVariables,multipliers,variableCopiesSum)));
    if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence || subProblemSelectionMethod == SubProblemSelectionMethod.CONSENSUS_FOCUSED_SAMPLING) {
      if (subProblemSelectionMethod != SubProblemSelectionMethod.ALL) {
        primalToleranceAdder.add(-variables.norm(VectorNorm.L2_SQUARED));
        dualToleranceAdder.add(-multipliers.norm(VectorNorm.L2_SQUARED));
      }
      residualComputationTasks.add(Executors.callable(() -> computeResiduals(subProblemIndex,variables,consensusVariables,multipliers,true)));
    }
  }
  try {
    taskExecutor.invokeAll(subProblemTasks);
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"");
  }
  if (currentIteration > 1 && subProblemSelectionMethod != SubProblemSelectionMethod.ALL) {
    int[] affectedConsensusVariablesIndexes=ArrayUtils.toPrimitive(affectedConsensusVariables.toArray(new Integer[affectedConsensusVariables.size()]));
    currentPoint.set(affectedConsensusVariablesIndexes,variableCopiesSum.get(affectedConsensusVariablesIndexes).divElementwise(variableCopiesCounts.get(affectedConsensusVariablesIndexes)).maxElementwiseInPlace(0).minElementwiseInPlace(1));
  }
 else {
    currentPoint=variableCopiesSum.divElementwise(variableCopiesCounts).maxElementwiseInPlace(0).minElementwiseInPlace(1);
  }
  if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || subProblemSelectionMethod == SubProblemSelectionMethod.CONSENSUS_FOCUSED_SAMPLING || checkForPrimalAndDualResidualConvergence) {
    try {
      taskExecutor.invokeAll(residualComputationTasks);
    }
 catch (    InterruptedException e) {
      logger.error(""String_Node_Str"");
    }
    if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence) {
      primalResidual=Math.sqrt(primalResidualSquaredTerms.sum());
      dualResidual=penaltyParameter * Math.sqrt(currentPoint.sub(previousPoint).map(x -> x * x).multElementwise(variableCopiesCounts).sum());
    }
  }
  penaltyParameterSettingMethod.updatePenaltyParameter(this);
  if (checkForObjectiveConvergence || logObjectiveValue) {
    previousObjectiveValue=currentObjectiveValue;
    currentObjectiveValue=objective.getValue(currentPoint);
  }
  if (checkForGradientConvergence || logGradientNorm) {
    previousGradient=currentGradient;
    try {
      currentGradient=objective.getGradient(currentPoint);
    }
 catch (    NonSmoothFunctionException e) {
      throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}",0.9998307666271788
144012,"Builder addRule(int[] variableIndexes,boolean[] variableNegations,double power,double weight){
  RulePart internalRepresentation=convertRulePartToInternalRepresentation(variableIndexes,variableNegations);
  double ruleMaximumValue=1 + internalRepresentation.observedConstant;
  if (ruleMaximumValue <= 0)   return this;
  if (internalRepresentation.variableIndexes.length == 0)   return this;
  int indexTerm=this.functionTerms.size();
  LinearFunction linearFunction=new LinearFunction(Vectors.dense(internalRepresentation.variableIndexes.length),ruleMaximumValue);
  for (int variable=0; variable < internalRepresentation.variableIndexes.length; variable++) {
    List<Integer> predicateTermIndices=this.externalPredicateIdToTerms.getOrDefault(internalRepresentation.variableIndexes[variable],null);
    if (predicateTermIndices == null) {
      predicateTermIndices=new ArrayList<>(200);
      this.externalPredicateIdToTerms.put(internalRepresentation.variableIndexes[variable],predicateTermIndices);
    }
    predicateTermIndices.add(indexTerm);
    Vector coefficients=Vectors.dense(internalRepresentation.variableIndexes.length);
    if (internalRepresentation.negations[variable]) {
      coefficients.set(variable,1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,-1));
    }
 else {
      coefficients.set(variable,-1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,0));
    }
  }
  for (int variable=0; variable < variableIndexes.length; ++variable) {
    List<Integer> predicateTermIndices=this.externalPredicateIdToTerms.getOrDefault(variableIndexes[variable],null);
    if (predicateTermIndices == null) {
      predicateTermIndices=new ArrayList<>(200);
      this.externalPredicateIdToTerms.put(variableIndexes[variable],predicateTermIndices);
    }
    predicateTermIndices.add(indexTerm);
  }
  FunctionTerm term=new FunctionTerm(internalRepresentation.variableIndexes,linearFunction,weight,power);
  functionTerms.add(term);
  return this;
}","Builder addRule(int[] variableIndexes,boolean[] variableNegations,double power,double weight){
  RulePart internalRepresentation=convertRulePartToInternalRepresentation(variableIndexes,variableNegations);
  double ruleMaximumValue=1 + internalRepresentation.observedConstant;
  if (ruleMaximumValue <= 0)   return this;
  if (internalRepresentation.variableIndexes.length == 0)   return this;
  int indexTerm=this.functionTerms.size();
  LinearFunction linearFunction=new LinearFunction(Vectors.dense(internalRepresentation.variableIndexes.length),ruleMaximumValue);
  for (int variable=0; variable < internalRepresentation.variableIndexes.length; variable++) {
    List<Integer> predicateTermIndices=this.externalPredicateIdToTerms.getOrDefault(internalRepresentation.variableIndexes[variable],null);
    if (predicateTermIndices == null) {
      predicateTermIndices=new ArrayList<>(200);
      this.externalPredicateIdToTerms.put(internalRepresentation.variableIndexes[variable],predicateTermIndices);
    }
    predicateTermIndices.add(indexTerm);
    Vector coefficients=Vectors.dense(internalRepresentation.variableIndexes.length);
    if (internalRepresentation.negations[variable]) {
      coefficients.set(variable,1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,-1));
    }
 else {
      coefficients.set(variable,-1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,0));
    }
  }
  FunctionTerm term=new FunctionTerm(internalRepresentation.variableIndexes,linearFunction,weight,power);
  functionTerms.add(term);
  return this;
}",0.8835274542429284
144013,"public static void readGroundingsAndAddToFastManager(LogicManager<Integer,Double> logicManager,String predicateName,boolean isIgnoreValues,BufferedReader reader) throws DataFormatException, IOException {
  String line;
  int lineNumber=0;
  boolean hasValues=false;
  while ((line=reader.readLine()) != null) {
    String[] lineFields=line.split(""String_Node_Str"");
    if (lineNumber == 0 && lineFields.length == 3) {
      hasValues=true;
    }
    double value=1;
    if (hasValues) {
      if (lineFields.length != 3) {
        throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
      }
      value=Double.parseDouble(lineFields[2]);
    }
 else     if (lineFields.length != 2) {
      throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
    }
    ImmutableList.Builder<String> currentGrounding=ImmutableList.builder();
    for (int indexEntity=0; indexEntity < 2; ++indexEntity) {
      String entity=lineFields[indexEntity];
      entity=entity.trim();
      if (entity.isEmpty()) {
        throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
      }
      currentGrounding.add(entity);
    }
    Predicate<Integer> predicate=logicManager.getPredicate(predicateName);
    if (isIgnoreValues) {
      logicManager.addGroundedPredicate(predicate,currentGrounding.build().stream().map(Integer::parseInt).collect(Collectors.toList()));
    }
 else {
      logicManager.addGroundedPredicate(predicate,currentGrounding.build().stream().map(Integer::parseInt).collect(Collectors.toList()),value);
    }
    ++lineNumber;
  }
}","public static void readGroundingsAndAddToFastManager(LogicManager<Integer,Double> logicManager,String predicateName,boolean isIgnoreValues,BufferedReader reader) throws DataFormatException, IOException {
  String line;
  int lineNumber=0;
  boolean hasValues=false;
  while ((line=reader.readLine()) != null) {
    String[] lineFields=line.split(""String_Node_Str"");
    if (lineNumber == 0 && lineFields.length == 3) {
      hasValues=true;
    }
    double value=1;
    if (hasValues) {
      if (lineFields.length != 3) {
        throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
      }
      value=Double.parseDouble(lineFields[2]);
    }
 else     if (lineFields.length != 2) {
      throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
    }
    ImmutableList.Builder<String> currentGrounding=ImmutableList.builder();
    for (int indexEntity=0; indexEntity < 2; ++indexEntity) {
      String entity=lineFields[indexEntity];
      entity=entity.trim();
      if (entity.isEmpty()) {
        throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
      }
      currentGrounding.add(entity);
    }
    Predicate<Integer> predicate=logicManager.getPredicate(predicateName);
    if (isIgnoreValues) {
      logicManager.addGroundedPredicate(predicate,currentGrounding.build().stream().map(Integer::parseInt).collect(Collectors.toList()),logicManager.logic().trueValue());
    }
 else {
      logicManager.addGroundedPredicate(predicate,currentGrounding.build().stream().map(Integer::parseInt).collect(Collectors.toList()),value);
    }
    ++lineNumber;
  }
}",0.989645434577973
144014,"@Test public void testFastEndToEnd(){
  String experimentName=""String_Node_Str"";
  LogicManager<Integer,Double> logicManager=new LogicManager<>(new LukasiewiczLogic());
  VariableType<Integer> personType=logicManager.addVariableType(""String_Node_Str"",Integer.class);
  Set<Integer> personValues=new HashSet<>();
  try {
    Stream<String> lines=Files.lines(Paths.get(LogicRuleParserTest.class.getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").getPath()));
    lines.forEach(line -> {
      String[] lineParts=line.split(""String_Node_Str"");
      for (      String linePart : lineParts)       personValues.add(Integer.parseInt(linePart.trim()));
    }
);
    lines=Files.lines(Paths.get(LogicRuleParserTest.class.getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").getPath()));
    lines.forEach(line -> {
      String[] lineParts=line.split(""String_Node_Str"");
      for (int partIndex=0; partIndex < lineParts.length - 1; partIndex++)       personValues.add(Integer.parseInt(lineParts[partIndex].trim()));
    }
);
  }
 catch (  IOException ignored) {
  }
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  List<VariableType<Integer>> argumentTypes=new ArrayList<>(2);
  argumentTypes.add(personType);
  argumentTypes.add(personType);
  logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  InputStream modelStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream knowsStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream trustTrainStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream trustTestStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  List<FastProbabilisticSoftLogicProblem.Rule> rules=null;
  try (BufferedReader modelReader=new BufferedReader(new InputStreamReader(modelStream));BufferedReader knowsReader=new BufferedReader(new InputStreamReader(knowsStream));BufferedReader trustTrainReader=new BufferedReader(new InputStreamReader(trustTrainStream));BufferedReader trustTestReader=trustTestStream == null ? null : new BufferedReader(new InputStreamReader(trustTestStream))){
    rules=ProbabilisticSoftLogicReader.readFastRules(modelReader,logicManager);
    ProbabilisticSoftLogicReader.readGroundingsAndAddToFastManager(logicManager,""String_Node_Str"",false,knowsReader);
    ProbabilisticSoftLogicReader.readGroundingsAndAddToFastManager(logicManager,""String_Node_Str"",false,trustTrainReader);
  }
 catch (  IOException|DataFormatException e) {
    fail(e.getMessage());
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
  int[] observedIndexes=new int[logicManager.getNumberOfGroundedPredicates()];
  double[] observedWeights=new double[logicManager.getNumberOfGroundedPredicates()];
  for (int index=0; index < logicManager.getNumberOfGroundedPredicates(); index++) {
    observedIndexes[index]=(int)logicManager.getGroundedPredicates().get(index).getIdentifier();
    observedWeights[index]=(double)logicManager.getGroundedPredicates().get(index).getValue();
  }
  FastProbabilisticSoftLogicProblem.Builder problemBuilder=new FastProbabilisticSoftLogicProblem.Builder(observedIndexes,observedWeights,logicManager.getNumberOfVariables());
  FastProbabilisticSoftLogicProblem.Rule.addGroundingsToBuilder(rules,problemBuilder,logicManager);
  FastProbabilisticSoftLogicProblem problem=problemBuilder.build();
  Map<Integer,Double> result=problem.solve();
  Map<String,Double> filteredResults=new HashMap<>();
  result.keySet().stream().filter(key -> result.get(key) > Math.sqrt(Double.MIN_VALUE)).forEach(key -> filteredResults.put(logicManager.getGroundedPredicate(key).toString(),result.get(key)));
  long numberOfActivatedGroundings=result.keySet().stream().filter(key -> result.get(key) > 0.01).count();
  result.keySet().stream().filter(key -> result.get(key) > 0.01).forEach(key -> logicManager.getGroundedPredicate(key).setValue(result.get(key)));
  System.out.println(result.get(0));
  System.out.println(result.get(1));
  System.out.println(""String_Node_Str"");
}","@Test public void testFastEndToEnd(){
  String experimentName=""String_Node_Str"";
  LogicManager<Integer,Double> logicManager=new LogicManager<>(new LukasiewiczLogic());
  VariableType<Integer> personType=logicManager.addVariableType(""String_Node_Str"",Integer.class);
  Set<Integer> personValues=new HashSet<>();
  try {
    Stream<String> lines=Files.lines(Paths.get(LogicRuleParserTest.class.getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").getPath()));
    lines.forEach(line -> {
      String[] lineParts=line.split(""String_Node_Str"");
      for (      String linePart : lineParts)       personValues.add(Integer.parseInt(linePart.trim()));
    }
);
    lines=Files.lines(Paths.get(LogicRuleParserTest.class.getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").getPath()));
    lines.forEach(line -> {
      String[] lineParts=line.split(""String_Node_Str"");
      for (int partIndex=0; partIndex < lineParts.length - 1; partIndex++)       personValues.add(Integer.parseInt(lineParts[partIndex].trim()));
    }
);
  }
 catch (  IOException ignored) {
  }
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  logicManager.addVariable(""String_Node_Str"",new ArrayList<>(personValues),personType);
  List<VariableType<Integer>> argumentTypes=new ArrayList<>(2);
  argumentTypes.add(personType);
  argumentTypes.add(personType);
  logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  InputStream modelStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream knowsStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream trustTrainStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  InputStream trustTestStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
  List<FastProbabilisticSoftLogicProblem.Rule> rules=null;
  try (BufferedReader modelReader=new BufferedReader(new InputStreamReader(modelStream));BufferedReader knowsReader=new BufferedReader(new InputStreamReader(knowsStream));BufferedReader trustTrainReader=new BufferedReader(new InputStreamReader(trustTrainStream));BufferedReader trustTestReader=trustTestStream == null ? null : new BufferedReader(new InputStreamReader(trustTestStream))){
    rules=ProbabilisticSoftLogicReader.readFastRules(modelReader,logicManager);
    ProbabilisticSoftLogicReader.readGroundingsAndAddToFastManager(logicManager,""String_Node_Str"",true,knowsReader);
    ProbabilisticSoftLogicReader.readGroundingsAndAddToFastManager(logicManager,""String_Node_Str"",false,trustTrainReader);
  }
 catch (  IOException|DataFormatException e) {
    fail(e.getMessage());
    System.out.println(e.getMessage());
    e.printStackTrace();
  }
  int[] observedIndexes=new int[logicManager.getNumberOfGroundedPredicates()];
  double[] observedWeights=new double[logicManager.getNumberOfGroundedPredicates()];
  for (int index=0; index < logicManager.getNumberOfGroundedPredicates(); index++) {
    observedIndexes[index]=(int)logicManager.getGroundedPredicates().get(index).getIdentifier();
    observedWeights[index]=(double)logicManager.getGroundedPredicates().get(index).getValue();
  }
  FastProbabilisticSoftLogicProblem.Builder problemBuilder=new FastProbabilisticSoftLogicProblem.Builder(observedIndexes,observedWeights,logicManager.getNumberOfVariables());
  FastProbabilisticSoftLogicProblem.Rule.addGroundingsToBuilder(rules,problemBuilder,logicManager);
  FastProbabilisticSoftLogicProblem problem=problemBuilder.build();
  Map<Integer,Double> result=problem.solve();
  Map<String,Double> filteredResults=new HashMap<>();
  result.keySet().stream().filter(key -> result.get(key) > Math.sqrt(Double.MIN_VALUE)).forEach(key -> filteredResults.put(logicManager.getGroundedPredicate(key).toString(),result.get(key)));
  long numberOfActivatedGroundings=result.keySet().stream().filter(key -> result.get(key) > 0.01).count();
  result.keySet().stream().filter(key -> result.get(key) > 0.01).forEach(key -> logicManager.getGroundedPredicate(key).setValue(result.get(key)));
  System.out.println(result.get(0));
  System.out.println(result.get(1));
  System.out.println(""String_Node_Str"");
}",0.9992530146195712
144015,"@Override public boolean checkTerminationConditions(){
  if (currentIteration >= maximumNumberOfIterations) {
    return true;
  }
  if (super.checkTerminationConditions()) {
    if (currentIteration >= maximumNumberOfIterations || objective.getNumberOfFunctionEvaluations() >= maximumNumberOfFunctionEvaluations) {
      pointChange=currentPoint.sub(previousPoint).norm(VectorNorm.L2_FAST);
      pointConverged=pointChange <= pointChangeTolerance;
    }
    if (checkForPointConvergence && pointConverged) {
      if ((checkForObjectiveConvergence && objectiveConverged) || (checkForGradientConvergence && gradientConverged)) {
        return true;
      }
 else {
        numberOfIterationsWithNoPointChange++;
        if (numberOfIterationsWithNoPointChange < maximumNumberOfIterationsWithNoPointChange)         pointConverged=false;
 else         return true;
      }
    }
 else     if ((checkForObjectiveConvergence && objectiveConverged) || (checkForGradientConvergence && gradientConverged)) {
      return true;
    }
 else {
      numberOfIterationsWithNoPointChange=0;
    }
  }
  if (currentIteration > 0 && checkForPrimalAndDualResidualConvergence) {
    primalTolerance=absoluteTolerance + relativeTolerance * Math.max(Math.sqrt(primalToleranceAdder.doubleValue()),Math.sqrt(currentPoint.map(x -> x * x).multElementwise(variableCopiesCounts).sum()));
    dualTolerance=absoluteTolerance + relativeTolerance * Math.sqrt(dualToleranceAdder.doubleValue());
    primalResidualConverged=primalResidual <= primalTolerance;
    dualResidualConverged=dualResidual <= dualTolerance;
    return primalResidualConverged && dualResidualConverged;
  }
 else {
    return false;
  }
}","@Override public boolean checkTerminationConditions(){
  if (currentIteration >= maximumNumberOfIterations) {
    return true;
  }
  if (super.checkTerminationConditions()) {
    if (currentIteration >= maximumNumberOfIterations || objective.getNumberOfFunctionEvaluations() >= maximumNumberOfFunctionEvaluations)     return true;
    if (checkForPointConvergence && pointConverged) {
      if ((checkForObjectiveConvergence && objectiveConverged) || (checkForGradientConvergence && gradientConverged)) {
        return true;
      }
 else {
        numberOfIterationsWithNoPointChange++;
        if (numberOfIterationsWithNoPointChange < maximumNumberOfIterationsWithNoPointChange)         pointConverged=false;
 else         return true;
      }
    }
 else     if ((checkForObjectiveConvergence && objectiveConverged) || (checkForGradientConvergence && gradientConverged)) {
      return true;
    }
 else {
      numberOfIterationsWithNoPointChange=0;
    }
  }
  if (currentIteration > 0 && checkForPrimalAndDualResidualConvergence) {
    primalTolerance=absoluteTolerance + relativeTolerance * Math.max(Math.sqrt(primalToleranceAdder.doubleValue()),Math.sqrt(currentPoint.map(x -> x * x).multElementwise(variableCopiesCounts).sum()));
    dualTolerance=absoluteTolerance + relativeTolerance * Math.sqrt(dualToleranceAdder.doubleValue());
    primalResidualConverged=primalResidual <= primalTolerance;
    dualResidualConverged=dualResidual <= dualTolerance;
    return primalResidualConverged && dualResidualConverged;
  }
 else {
    return false;
  }
}",0.9522342064714946
144016,"public Builder(int[] observedVariableIndexes,double[] observedVariableValues,int numberOfUnobservedVariables){
  ImmutableMap.Builder<Integer,Double> observedVariableValueBuilder=ImmutableMap.builder();
  if ((observedVariableIndexes == null) != (observedVariableValues == null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (observedVariableIndexes != null) {
    if (observedVariableIndexes.length != observedVariableValues.length) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
    }
    for (int i=0; i < observedVariableIndexes.length; ++i) {
      observedVariableValueBuilder.put(observedVariableIndexes[i],observedVariableValues[i]);
    }
  }
  observedVariableValueBuilder.put(-1,0.0);
  this.observedVariableValues=observedVariableValueBuilder.build();
  this.externalToInternalIndexesMapping=HashBiMap.create(numberOfUnobservedVariables);
  this.externalPredicateIdToTerms=new HashMap<>(numberOfUnobservedVariables + observedVariableIndexes.length,1);
}","public Builder(int[] observedVariableIndexes,double[] observedVariableValues,int numberOfUnobservedVariables){
  ImmutableMap.Builder<Integer,Double> observedVariableValueBuilder=ImmutableMap.builder();
  if ((observedVariableIndexes == null) != (observedVariableValues == null)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (observedVariableIndexes != null) {
    if (observedVariableIndexes.length != observedVariableValues.length) {
      throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
    }
    for (int i=0; i < observedVariableIndexes.length; ++i) {
      observedVariableValueBuilder.put(observedVariableIndexes[i],observedVariableValues[i]);
    }
  }
  this.observedVariableValues=observedVariableValueBuilder.build();
  this.externalToInternalIndexesMapping=HashBiMap.create(numberOfUnobservedVariables);
  this.externalPredicateIdToTerms=new HashMap<>(numberOfUnobservedVariables + observedVariableIndexes.length,1);
}",0.9780876494023903
144017,"public static Builder write(OutputStream outputStream,List<Rule> rules,ProbabilisticSoftLogicPredicateManager predicateManager,LogicManager<Integer,Double> logicManager,VariableType<Integer> variableType,GroundingMode groundingMode) throws IOException {
  ObjectOutputStream objectOutputStream=new ObjectOutputStream(outputStream);
  objectOutputStream.writeObject(predicateManager);
  ProbabilisticSoftLogicPredicateManager.IdWeights observedIdsAndWeights=predicateManager.getAllObservedWeights();
  ProbabilisticSoftLogicProblem.Builder builder=new ProbabilisticSoftLogicProblem.Builder(observedIdsAndWeights.Ids,observedIdsAndWeights.Weights,predicateManager.size() - observedIdsAndWeights.Ids.length);
  try {
    ProblemSerializer serializer=new ProblemSerializer(outputStream,builder);
    Rule.addGroundingsToBuilder(rules,serializer,predicateManager,logicManager,variableType,groundingMode);
    serializer.addRule(new int[]{-1},new int[]{-1},new boolean[]{false},new boolean[]{false},Double.NaN,Double.NaN);
  }
 catch (  UnsupportedOperationException e) {
    if (e.getMessage() != null && e.getMessage().equals(""String_Node_Str"")) {
      throw (IOException)e.getCause();
    }
  }
  return builder;
}","public static Builder write(OutputStream outputStream,List<Rule> rules,ProbabilisticSoftLogicPredicateManager predicateManager,LogicManager<Integer,Double> logicManager,VariableType<Integer> variableType,GroundingMode groundingMode) throws IOException {
  ObjectOutputStream objectOutputStream=new ObjectOutputStream(outputStream);
  objectOutputStream.writeObject(predicateManager);
  ProbabilisticSoftLogicPredicateManager.IdWeights observedIdsAndWeights=predicateManager.getAllObservedWeights();
  int[] observedIndexes=new int[logicManager.getNumberOfGroundedPredicates()];
  double[] observedWeights=new double[logicManager.getNumberOfGroundedPredicates()];
  for (int index=0; index < logicManager.getNumberOfGroundedPredicates(); index++) {
    observedIndexes[index]=(int)logicManager.getGroundedPredicates().get(index).getIdentifier();
    observedWeights[index]=(double)logicManager.getGroundedPredicates().get(index).getValue();
  }
  ProbabilisticSoftLogicProblem.Builder builder=new ProbabilisticSoftLogicProblem.Builder(observedIndexes,observedWeights,predicateManager.size() - observedIdsAndWeights.Ids.length);
  try {
    ProblemSerializer serializer=new ProblemSerializer(outputStream,builder);
    Rule.addGroundingsToBuilder(rules,serializer,predicateManager,logicManager,variableType,groundingMode);
  }
 catch (  UnsupportedOperationException e) {
    if (e.getMessage() != null && e.getMessage().equals(""String_Node_Str"")) {
      throw (IOException)e.getCause();
    }
  }
  return builder;
}",0.781524926686217
144018,"public static void readGroundingsAndAddToManager(ProbabilisticSoftLogicPredicateManager predicateManager,LogicManager<Integer,Double> logicManager,VariableType<Integer> variableType,String predicateName,boolean isClosedPredicate,boolean isIgnoreValues,BufferedReader reader) throws DataFormatException, IOException {
  String line;
  int lineNumber=0;
  boolean hasValues=false;
  while ((line=reader.readLine()) != null) {
    String[] lineFields=line.split(""String_Node_Str"");
    if (lineNumber == 0 && lineFields.length == 3) {
      hasValues=true;
    }
    double value=1;
    if (hasValues) {
      if (lineFields.length != 3) {
        throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
      }
      value=Double.parseDouble(lineFields[2]);
    }
 else     if (lineFields.length != 2) {
      throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
    }
    ImmutableList.Builder<String> currentGrounding=ImmutableList.builder();
    for (int indexEntity=0; indexEntity < 2; ++indexEntity) {
      String entity=lineFields[indexEntity];
      entity=entity.trim();
      if (entity.isEmpty()) {
        throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
      }
      currentGrounding.add(entity);
    }
    ProbabilisticSoftLogicProblem.Predicate groundedPredicate=new ProbabilisticSoftLogicProblem.Predicate(predicateName,currentGrounding.build(),false);
    if (isIgnoreValues) {
      predicateManager.getOrAddPredicate(groundedPredicate);
    }
 else {
      predicateManager.getOrAddPredicate(groundedPredicate,value);
    }
    Predicate<Integer> predicate=logicManager.getPredicate(predicateName);
    logicManager.addGroundedPredicate(predicate,currentGrounding.build().stream().map(Integer::parseInt).collect(Collectors.toList()));
    ++lineNumber;
  }
  if (isClosedPredicate) {
    predicateManager.closePredicate(predicateName);
  }
}","public static void readGroundingsAndAddToManager(ProbabilisticSoftLogicPredicateManager predicateManager,LogicManager<Integer,Double> logicManager,VariableType<Integer> variableType,String predicateName,boolean isClosedPredicate,boolean isIgnoreValues,BufferedReader reader) throws DataFormatException, IOException {
  String line;
  int lineNumber=0;
  boolean hasValues=false;
  while ((line=reader.readLine()) != null) {
    String[] lineFields=line.split(""String_Node_Str"");
    if (lineNumber == 0 && lineFields.length == 3) {
      hasValues=true;
    }
    double value=1;
    if (hasValues) {
      if (lineFields.length != 3) {
        throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
      }
      value=Double.parseDouble(lineFields[2]);
    }
 else     if (lineFields.length != 2) {
      throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
    }
    ImmutableList.Builder<String> currentGrounding=ImmutableList.builder();
    for (int indexEntity=0; indexEntity < 2; ++indexEntity) {
      String entity=lineFields[indexEntity];
      entity=entity.trim();
      if (entity.isEmpty()) {
        throw new DataFormatException(""String_Node_Str"" + (lineNumber + 1));
      }
      currentGrounding.add(entity);
    }
    ProbabilisticSoftLogicProblem.Predicate groundedPredicate=new ProbabilisticSoftLogicProblem.Predicate(predicateName,currentGrounding.build(),false);
    if (isIgnoreValues) {
      predicateManager.getOrAddPredicate(groundedPredicate);
    }
 else {
      predicateManager.getOrAddPredicate(groundedPredicate,value);
    }
    Predicate<Integer> predicate=logicManager.getPredicate(predicateName);
    if (isIgnoreValues) {
      logicManager.addGroundedPredicate(predicate,currentGrounding.build().stream().map(Integer::parseInt).collect(Collectors.toList()));
    }
 else {
      logicManager.addGroundedPredicate(predicate,currentGrounding.build().stream().map(Integer::parseInt).collect(Collectors.toList()),value);
    }
    ++lineNumber;
  }
  if (isClosedPredicate) {
    predicateManager.closePredicate(predicateName);
  }
}",0.9520958083832336
144019,"@Test public void testEndToEnd(){
  String experimentName=""String_Node_Str"";
  for (  ProbabilisticSoftLogicProblem.GroundingMode groundingMode : ProbabilisticSoftLogicProblem.GroundingMode.values()) {
    if (groundingMode != ProbabilisticSoftLogicProblem.GroundingMode.NewAllPossible) {
      continue;
    }
    String outputStreamName=null;
    try {
      Path knowsPath=Paths.get(this.getClass().getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").toURI());
      outputStreamName=Paths.get(knowsPath.getParent().toString(),""String_Node_Str"").toString();
    }
 catch (    URISyntaxException e) {
      fail(e.getMessage());
      System.out.println(e.getMessage());
      e.printStackTrace();
      return;
    }
    File outputStreamFile=new File(outputStreamName);
    ProbabilisticSoftLogicProblem.Builder problemBuilder=null;
    ProbabilisticSoftLogicPredicateManager trainPredicateManager=null;
    LogicManager<Integer,Double> logicManager=new LogicManager<>(new LukasiewiczLogic());
    VariableType<Integer> personType=logicManager.addVariableType(""String_Node_Str"",Integer.class);
    List<Integer> personValues=Arrays.asList(ArrayUtils.toObject(new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}));
    logicManager.addVariable(""String_Node_Str"",personValues,personType);
    logicManager.addVariable(""String_Node_Str"",personValues,personType);
    logicManager.addVariable(""String_Node_Str"",personValues,personType);
    logicManager.addVariable(""String_Node_Str"",personValues,personType);
    if (false) {
      try (FileInputStream inputStream=new FileInputStream(outputStreamFile)){
        Map.Entry<ProbabilisticSoftLogicPredicateManager,ProbabilisticSoftLogicProblem.Builder> deserialized=ProbabilisticSoftLogicProblem.ProblemSerializer.read(inputStream);
        trainPredicateManager=deserialized.getKey();
        problemBuilder=deserialized.getValue();
      }
 catch (      IOException|ClassNotFoundException e) {
        fail(e.getMessage());
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    }
 else {
      InputStream groundingStream=null;
      if (groundingMode == ProbabilisticSoftLogicProblem.GroundingMode.AsRead) {
        groundingStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
      }
      InputStream modelStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
      InputStream knowsStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
      InputStream trustTrainStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
      InputStream trustTestStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
      List<ProbabilisticSoftLogicProblem.Rule> rules=null;
      trainPredicateManager=new ProbabilisticSoftLogicPredicateManager();
      ProbabilisticSoftLogicPredicateManager testPredicateManager=new ProbabilisticSoftLogicPredicateManager();
      try (BufferedReader groundingReader=groundingStream == null ? null : new BufferedReader(new InputStreamReader(groundingStream));BufferedReader modelReader=new BufferedReader(new InputStreamReader(modelStream));BufferedReader knowsReader=new BufferedReader(new InputStreamReader(knowsStream));BufferedReader trustTrainReader=new BufferedReader(new InputStreamReader(trustTrainStream));BufferedReader trustTestReader=trustTestStream == null ? null : new BufferedReader(new InputStreamReader(trustTestStream))){
        rules=ProbabilisticSoftLogicReader.readRules(modelReader);
        List<VariableType<Integer>> argumentTypes=new ArrayList<>(2);
        argumentTypes.add(personType);
        argumentTypes.add(personType);
        logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
        logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
        ProbabilisticSoftLogicReader.readGroundingsAndAddToManager(trainPredicateManager,logicManager,personType,""String_Node_Str"",groundingMode == ProbabilisticSoftLogicProblem.GroundingMode.AllPossible,false,knowsReader);
        ProbabilisticSoftLogicReader.readGroundingsAndAddToManager(trainPredicateManager,logicManager,personType,""String_Node_Str"",false,false,trustTrainReader);
        if (groundingMode == ProbabilisticSoftLogicProblem.GroundingMode.AsRead) {
          ProbabilisticSoftLogicReader.readGroundingsAndAddToManager(trainPredicateManager,logicManager,personType,""String_Node_Str"",false,true,groundingReader);
        }
        ProbabilisticSoftLogicReader.readGroundingsAndAddToManager(testPredicateManager,logicManager,personType,""String_Node_Str"",false,false,trustTestReader);
      }
 catch (      IOException|DataFormatException e) {
        fail(e.getMessage());
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
      FileOutputStream outputStream=null;
      try {
        outputStream=new FileOutputStream(outputStreamFile);
        problemBuilder=ProbabilisticSoftLogicProblem.ProblemSerializer.write(outputStream,rules,trainPredicateManager,logicManager,personType,groundingMode);
        outputStream.close();
      }
 catch (      Exception e) {
        if (outputStream != null) {
          try {
            outputStream.close();
          }
 catch (          IOException e2) {
          }
          outputStreamFile.delete();
        }
        fail(e.getMessage());
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    }
    ProbabilisticSoftLogicProblem problem=problemBuilder.build();
    Map<Integer,Double> result=problem.solve();
    Map<String,Double> filteredResults=new HashMap<>();
    ProbabilisticSoftLogicPredicateManager temp=trainPredicateManager;
    result.keySet().stream().filter(key -> result.get(key) > Math.sqrt(Double.MIN_VALUE)).forEach(key -> filteredResults.put(temp.getPredicateFromId(key).toString(),result.get(key)));
    System.out.println(result.get(0));
    System.out.println(result.get(1));
    System.out.println(""String_Node_Str"");
  }
}","@Test public void testEndToEnd(){
  String experimentName=""String_Node_Str"";
  for (  ProbabilisticSoftLogicProblem.GroundingMode groundingMode : ProbabilisticSoftLogicProblem.GroundingMode.values()) {
    if (groundingMode != ProbabilisticSoftLogicProblem.GroundingMode.NewAllPossible) {
      continue;
    }
    String outputStreamName=null;
    try {
      Path knowsPath=Paths.get(this.getClass().getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").toURI());
      outputStreamName=Paths.get(knowsPath.getParent().toString(),""String_Node_Str"").toString();
    }
 catch (    URISyntaxException e) {
      fail(e.getMessage());
      System.out.println(e.getMessage());
      e.printStackTrace();
      return;
    }
    File outputStreamFile=new File(outputStreamName);
    ProbabilisticSoftLogicProblem.Builder problemBuilder=null;
    ProbabilisticSoftLogicPredicateManager trainPredicateManager=null;
    LogicManager<Integer,Double> logicManager=new LogicManager<>(new LukasiewiczLogic());
    VariableType<Integer> personType=logicManager.addVariableType(""String_Node_Str"",Integer.class);
    Set<Integer> personValues=new HashSet<>();
    try {
      Stream<String> lines=Files.lines(Paths.get(LogicRuleParserTest.class.getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").getPath()));
      lines.forEach(line -> {
        String[] lineParts=line.split(""String_Node_Str"");
        for (        String linePart : lineParts)         personValues.add(Integer.parseInt(linePart.trim()));
      }
);
      lines=Files.lines(Paths.get(LogicRuleParserTest.class.getResource(""String_Node_Str"" + experimentName + ""String_Node_Str"").getPath()));
      lines.forEach(line -> {
        String[] lineParts=line.split(""String_Node_Str"");
        for (int partIndex=0; partIndex < lineParts.length - 1; partIndex++)         personValues.add(Integer.parseInt(lineParts[partIndex].trim()));
      }
);
    }
 catch (    IOException ignored) {
    }
    logicManager.addVariable(""String_Node_Str"",new ArrayList<Integer>(personValues),personType);
    logicManager.addVariable(""String_Node_Str"",new ArrayList<Integer>(personValues),personType);
    logicManager.addVariable(""String_Node_Str"",new ArrayList<Integer>(personValues),personType);
    logicManager.addVariable(""String_Node_Str"",new ArrayList<Integer>(personValues),personType);
    if (false) {
      try (FileInputStream inputStream=new FileInputStream(outputStreamFile)){
        Map.Entry<ProbabilisticSoftLogicPredicateManager,ProbabilisticSoftLogicProblem.Builder> deserialized=ProbabilisticSoftLogicProblem.ProblemSerializer.read(inputStream);
        trainPredicateManager=deserialized.getKey();
        problemBuilder=deserialized.getValue();
      }
 catch (      IOException|ClassNotFoundException e) {
        fail(e.getMessage());
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    }
 else {
      InputStream groundingStream=null;
      if (groundingMode == ProbabilisticSoftLogicProblem.GroundingMode.AsRead) {
        groundingStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
      }
      InputStream modelStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
      InputStream knowsStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
      InputStream trustTrainStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
      InputStream trustTestStream=LogicRuleParserTest.class.getResourceAsStream(""String_Node_Str"" + experimentName + ""String_Node_Str"");
      List<ProbabilisticSoftLogicProblem.Rule> rules=null;
      trainPredicateManager=new ProbabilisticSoftLogicPredicateManager();
      ProbabilisticSoftLogicPredicateManager testPredicateManager=new ProbabilisticSoftLogicPredicateManager();
      try (BufferedReader groundingReader=groundingStream == null ? null : new BufferedReader(new InputStreamReader(groundingStream));BufferedReader modelReader=new BufferedReader(new InputStreamReader(modelStream));BufferedReader knowsReader=new BufferedReader(new InputStreamReader(knowsStream));BufferedReader trustTrainReader=new BufferedReader(new InputStreamReader(trustTrainStream));BufferedReader trustTestReader=trustTestStream == null ? null : new BufferedReader(new InputStreamReader(trustTestStream))){
        rules=ProbabilisticSoftLogicReader.readRules(modelReader);
        List<VariableType<Integer>> argumentTypes=new ArrayList<>(2);
        argumentTypes.add(personType);
        argumentTypes.add(personType);
        logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
        logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
        ProbabilisticSoftLogicReader.readGroundingsAndAddToManager(trainPredicateManager,logicManager,personType,""String_Node_Str"",groundingMode == ProbabilisticSoftLogicProblem.GroundingMode.AllPossible,false,knowsReader);
        ProbabilisticSoftLogicReader.readGroundingsAndAddToManager(trainPredicateManager,logicManager,personType,""String_Node_Str"",false,false,trustTrainReader);
        if (groundingMode == ProbabilisticSoftLogicProblem.GroundingMode.AsRead) {
          ProbabilisticSoftLogicReader.readGroundingsAndAddToManager(trainPredicateManager,logicManager,personType,""String_Node_Str"",false,true,groundingReader);
        }
      }
 catch (      IOException|DataFormatException e) {
        fail(e.getMessage());
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
      FileOutputStream outputStream=null;
      try {
        outputStream=new FileOutputStream(outputStreamFile);
        problemBuilder=ProbabilisticSoftLogicProblem.ProblemSerializer.write(outputStream,rules,trainPredicateManager,logicManager,personType,groundingMode);
        outputStream.close();
      }
 catch (      Exception e) {
        if (outputStream != null) {
          try {
            outputStream.close();
          }
 catch (          IOException e2) {
          }
          outputStreamFile.delete();
        }
        fail(e.getMessage());
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    }
    ProbabilisticSoftLogicProblem problem=problemBuilder.build();
    Map<Integer,Double> result=problem.solve();
    Map<String,Double> filteredResults=new HashMap<>();
    ProbabilisticSoftLogicPredicateManager temp=trainPredicateManager;
    result.keySet().stream().filter(key -> result.get(key) > Math.sqrt(Double.MIN_VALUE)).forEach(key -> filteredResults.put(temp.getPredicateFromId(key).toString(),result.get(key)));
    System.out.println(result.get(0));
    System.out.println(result.get(1));
    System.out.println(""String_Node_Str"");
  }
}",0.8239447429009977
144020,"public GroundedPredicate<T,R> getGroundedPredicate(Predicate<T> predicate,List<T> argumentAssignments){
  if (!predicateGroundings.containsKey(predicate.getIdentifier()))   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  if (!predicateGroundings.get(predicate.getIdentifier()).containsKey(argumentAssignments))   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  return predicateGroundings.get(predicate.getIdentifier()).get(argumentAssignments);
}","public GroundedPredicate<T,R> getGroundedPredicate(Predicate<T> predicate,List<T> argumentAssignments){
  if (!groundedPredicates.containsKey(predicate.getIdentifier()))   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  if (!groundedPredicates.get(predicate.getIdentifier()).containsKey(argumentAssignments))   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  return groundedPredicates.get(predicate.getIdentifier()).get(argumentAssignments);
}",0.8995215311004785
144021,"/** 
 * Note that this method returns null if there is no value stored for the provided arguments assignment.
 * @param predicate
 * @param argumentAssignments
 * @return
 */
public R getPredicateAssignmentTruthValue(Predicate<T> predicate,List<T> argumentAssignments){
  if (!predicateGroundings.containsKey(predicate.getIdentifier()))   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  if (!predicateGroundings.get(predicate.getIdentifier()).containsKey(argumentAssignments))   if (closedPredicateIdentifiers.contains(predicate.getIdentifier()))   return logic.falseValue();
 else   return null;
  return predicateGroundings.get(predicate.getIdentifier()).get(argumentAssignments).getValue();
}","/** 
 * Note that this method returns null if there is no value stored for the provided arguments assignment.
 * @param predicate
 * @param argumentAssignments
 * @return
 */
public R getPredicateAssignmentTruthValue(Predicate<T> predicate,List<T> argumentAssignments){
  if (!groundedPredicates.containsKey(predicate.getIdentifier()))   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  if (!groundedPredicates.get(predicate.getIdentifier()).containsKey(argumentAssignments))   if (closedPredicateIdentifiers.contains(predicate.getIdentifier()))   return logic.falseValue();
 else   return null;
  return groundedPredicates.get(predicate.getIdentifier()).get(argumentAssignments).getValue();
}",0.9273356401384084
144022,"public GroundedPredicate<T,R> addGroundedPredicate(Predicate<T> predicate,List<T> argumentAssignments,R value){
  if (!predicateGroundings.containsKey(predicate.getIdentifier()))   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  if (predicateGroundings.get(predicate.getIdentifier()).containsKey(argumentAssignments)) {
    GroundedPredicate<T,R> groundedPredicate=predicateGroundings.get(predicate.getIdentifier()).get(argumentAssignments);
    if (!groundedPredicate.getValue().equals(value))     throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
 else {
      return groundedPredicate;
    }
  }
 else {
    GroundedPredicate<T,R> groundedPredicate=new GroundedPredicate<>(newPredicateGroundingIdentifier++,predicate,argumentAssignments,value);
    predicateGroundings.get(predicate.getIdentifier()).put(argumentAssignments,groundedPredicate);
    return groundedPredicate;
  }
}","public GroundedPredicate<T,R> addGroundedPredicate(Predicate<T> predicate,List<T> argumentAssignments,R value){
  if (!groundedPredicates.containsKey(predicate.getIdentifier()))   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  if (groundedPredicates.get(predicate.getIdentifier()).containsKey(argumentAssignments)) {
    GroundedPredicate<T,R> groundedPredicate=groundedPredicates.get(predicate.getIdentifier()).get(argumentAssignments);
    if (!groundedPredicate.getValue().equals(value))     throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
 else {
      return groundedPredicate;
    }
  }
 else {
    GroundedPredicate<T,R> groundedPredicate=new GroundedPredicate<>(newPredicateGroundingIdentifier++,predicate,argumentAssignments,value);
    groundedPredicates.get(predicate.getIdentifier()).put(argumentAssignments,groundedPredicate);
    return groundedPredicate;
  }
}",0.9033915724563206
144023,"public Predicate<T> addPredicate(String name,List<VariableType<T>> argumentTypes,boolean closed){
  Predicate<T> predicate=new Predicate<>(newPredicateIdentifier,argumentTypes).setName(name);
  predicates.put(newPredicateIdentifier,predicate);
  predicateGroundings.put(newPredicateIdentifier,new HashMap<>());
  if (closed)   closedPredicateIdentifiers.add(newPredicateIdentifier);
  newPredicateIdentifier++;
  return predicate;
}","public Predicate<T> addPredicate(String name,List<VariableType<T>> argumentTypes,boolean closed){
  Predicate<T> predicate=new Predicate<>(newPredicateIdentifier,argumentTypes).setName(name);
  predicates.put(newPredicateIdentifier,predicate);
  groundedPredicates.put(newPredicateIdentifier,new HashMap<>());
  if (closed)   closedPredicateIdentifiers.add(newPredicateIdentifier);
  newPredicateIdentifier++;
  return predicate;
}",0.9617612977983776
144024,"@SuppressWarnings(""String_Node_Str"") private void ground(Formula<T> formula,int callNumber){
  if (callNumber != 0 && partialVariableGroundings.size() == 0)   return;
  if (formula instanceof Atom || formula instanceof Negation) {
    List<Variable<T>> argumentVariables=formula.getVariables().stream().collect(Collectors.toList());
    List<Variable<T>> newGroundedVariables=new ArrayList<>(groundedVariables);
    List<R> candidateGroundingTruthValues=new ArrayList<>(groundingTruthValues);
    List<List<T>> candidateVariableGroundings=new ArrayList<>(partialVariableGroundings);
    List<List<GroundedPredicate<T,R>>> candidateGroundedPredicates=new ArrayList<>(groundedPredicates);
    argumentVariables.stream().filter(argumentVariable -> !groundedVariables.contains(argumentVariable)).forEach(argumentVariable -> {
      candidateGroundingTruthValues.clear();
      candidateVariableGroundings.clear();
      candidateGroundedPredicates.clear();
      newGroundedVariables.add(argumentVariable);
      if (partialVariableGroundings.size() > 0) {
        for (int index=0; index < partialVariableGroundings.size(); index++) {
          for (          T variableValue : logicManager.getVariableValues(argumentVariable)) {
            List<T> variableGrounding=new ArrayList<>(partialVariableGroundings.get(index));
            variableGrounding.add(variableValue);
            candidateGroundingTruthValues.add(groundingTruthValues.get(index));
            candidateVariableGroundings.add(variableGrounding);
            candidateGroundedPredicates.add(new ArrayList<>(groundedPredicates.get(index)));
          }
        }
      }
 else {
        for (        T variableValue : logicManager.getVariableValues(argumentVariable)) {
          List<T> variableGrounding=new ArrayList<>();
          variableGrounding.add(variableValue);
          candidateGroundingTruthValues.add(logicManager.logic().falseValue());
          candidateVariableGroundings.add(variableGrounding);
          candidateGroundedPredicates.add(new ArrayList<>());
        }
      }
      groundingTruthValues=new ArrayList<>(candidateGroundingTruthValues);
      partialVariableGroundings=new ArrayList<>(candidateVariableGroundings);
      groundedPredicates=new ArrayList<>(candidateGroundedPredicates);
    }
);
    List<R> truthValues=new ArrayList<>(groundingTruthValues);
    groundedVariables=newGroundedVariables;
    groundingTruthValues=new ArrayList<>();
    partialVariableGroundings=new ArrayList<>();
    groundedPredicates=new ArrayList<>();
    for (int candidateIndex=0; candidateIndex < candidateGroundedPredicates.size(); candidateIndex++) {
      List<T> candidateVariableGrounding=candidateVariableGroundings.get(candidateIndex);
      Map<Variable<T>,T> variableAssignments=new HashMap<>();
      for (int variableIndex=0; variableIndex < groundedVariables.size(); variableIndex++)       variableAssignments.put(groundedVariables.get(variableIndex),candidateVariableGrounding.get(variableIndex));
      List<R> disjunctionComponents=new ArrayList<>();
      disjunctionComponents.add(truthValues.get(candidateIndex));
      R truthValue;
      if (formula instanceof Atom)       truthValue=formula.evaluate(logicManager,variableAssignments);
 else       truthValue=((Negation<T>)formula).getFormula().evaluate(logicManager,variableAssignments);
      if (truthValue == null)       disjunctionComponents.add(logicManager.logic().falseValue());
 else       if (formula instanceof Atom)       disjunctionComponents.add(truthValue);
 else       disjunctionComponents.add(logicManager.logic().negation(truthValue));
      truthValue=logicManager.logic().disjunction(disjunctionComponents);
      if (!logicManager.logic().isSatisfied(truthValue)) {
        groundingTruthValues.add(truthValue);
        partialVariableGroundings.add(candidateVariableGrounding);
        GroundedPredicate<T,R> groundedPredicate;
        Predicate<T> predicate;
        if (formula instanceof Atom)         predicate=((Atom<T>)formula).getPredicate();
 else         predicate=((Atom<T>)((Negation<T>)formula).getFormula()).getPredicate();
        candidateVariableGrounding=new ArrayList<>();
        for (        Variable<T> variable : formula.getOrderedVariables())         candidateVariableGrounding.add(variableAssignments.get(variable));
        if (logicManager.predicateGroundingExists(predicate,candidateVariableGrounding)) {
          groundedPredicate=logicManager.getGroundedPredicate(predicate,candidateVariableGrounding);
        }
 else {
          groundedPredicate=logicManager.addGroundedPredicate(predicate,candidateVariableGrounding);
        }
        candidateGroundedPredicates.get(candidateIndex).add(groundedPredicate);
        groundedPredicates.add(candidateGroundedPredicates.get(candidateIndex));
      }
    }
  }
 else   if (formula instanceof Conjunction) {
    if (callNumber == 0)     throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    throw new UnsupportedOperationException();
  }
 else   if (formula instanceof Disjunction) {
    if (callNumber != 0)     throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    int numberOfComponents=((Disjunction<T>)formula).getNumberOfComponents();
    for (int componentIndex=0; componentIndex < numberOfComponents; componentIndex++) {
      Formula<T> componentFormula=((Disjunction<T>)formula).getComponent(componentIndex);
      if (componentFormula instanceof Atom || componentFormula instanceof Negation) {
        ground(componentFormula,callNumber++);
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
}","@SuppressWarnings(""String_Node_Str"") private void ground(Formula<T> formula,int callNumber){
  if (callNumber != 0 && partialVariableGroundings.size() == 0)   return;
  if (formula instanceof Atom || formula instanceof Negation) {
    List<Variable<T>> argumentVariables=formula.getVariables().stream().collect(Collectors.toList());
    List<Variable<T>> newGroundedVariables=new ArrayList<>(groundedVariables);
    List<R> candidateGroundingTruthValues=new ArrayList<>(groundingTruthValues);
    List<List<T>> candidateVariableGroundings=new ArrayList<>(partialVariableGroundings);
    List<List<GroundedPredicate<T,R>>> candidateGroundedPredicates=new ArrayList<>(groundedPredicates);
    argumentVariables.stream().filter(argumentVariable -> !groundedVariables.contains(argumentVariable)).forEach(argumentVariable -> {
      candidateGroundingTruthValues.clear();
      candidateVariableGroundings.clear();
      candidateGroundedPredicates.clear();
      newGroundedVariables.add(argumentVariable);
      if (partialVariableGroundings.size() > 0) {
        for (int index=0; index < partialVariableGroundings.size(); index++) {
          for (          T variableValue : logicManager.getVariableValues(argumentVariable)) {
            List<T> variableGrounding=new ArrayList<>(partialVariableGroundings.get(index));
            variableGrounding.add(variableValue);
            candidateGroundingTruthValues.add(groundingTruthValues.get(index));
            candidateVariableGroundings.add(variableGrounding);
            candidateGroundedPredicates.add(new ArrayList<>(groundedPredicates.get(index)));
          }
        }
      }
 else {
        for (        T variableValue : logicManager.getVariableValues(argumentVariable)) {
          List<T> variableGrounding=new ArrayList<>();
          variableGrounding.add(variableValue);
          candidateGroundingTruthValues.add(logicManager.logic().falseValue());
          candidateVariableGroundings.add(variableGrounding);
          candidateGroundedPredicates.add(new ArrayList<>());
        }
      }
      groundingTruthValues=new ArrayList<>(candidateGroundingTruthValues);
      partialVariableGroundings=new ArrayList<>(candidateVariableGroundings);
      groundedPredicates=new ArrayList<>(candidateGroundedPredicates);
    }
);
    List<R> truthValues=new ArrayList<>(groundingTruthValues);
    groundedVariables=newGroundedVariables;
    groundingTruthValues=new ArrayList<>();
    partialVariableGroundings=new ArrayList<>();
    groundedPredicates=new ArrayList<>();
    for (int candidateIndex=0; candidateIndex < candidateGroundedPredicates.size(); candidateIndex++) {
      List<T> candidateVariableGrounding=candidateVariableGroundings.get(candidateIndex);
      Map<Variable<T>,T> variableAssignments=new HashMap<>();
      for (int variableIndex=0; variableIndex < groundedVariables.size(); variableIndex++)       variableAssignments.put(groundedVariables.get(variableIndex),candidateVariableGrounding.get(variableIndex));
      List<R> disjunctionComponents=new ArrayList<>();
      disjunctionComponents.add(truthValues.get(candidateIndex));
      R truthValue;
      if (formula instanceof Atom)       truthValue=formula.evaluate(logicManager,variableAssignments);
 else       truthValue=((Negation<T>)formula).getFormula().evaluate(logicManager,variableAssignments);
      if (truthValue == null) {
        if (formula instanceof Negation)         continue;
        disjunctionComponents.add(logicManager.logic().falseValue());
      }
 else       if (formula instanceof Atom)       disjunctionComponents.add(truthValue);
 else       disjunctionComponents.add(logicManager.logic().negation(truthValue));
      truthValue=logicManager.logic().disjunction(disjunctionComponents);
      if (!logicManager.logic().isSatisfied(truthValue)) {
        groundingTruthValues.add(truthValue);
        partialVariableGroundings.add(candidateVariableGrounding);
        GroundedPredicate<T,R> groundedPredicate;
        Predicate<T> predicate;
        if (formula instanceof Atom)         predicate=((Atom<T>)formula).getPredicate();
 else         predicate=((Atom<T>)((Negation<T>)formula).getFormula()).getPredicate();
        candidateVariableGrounding=new ArrayList<>();
        for (        Variable<T> variable : formula.getOrderedVariables())         candidateVariableGrounding.add(variableAssignments.get(variable));
        if (logicManager.groundedPredicateExists(predicate,candidateVariableGrounding)) {
          groundedPredicate=logicManager.getGroundedPredicate(predicate,candidateVariableGrounding);
        }
 else {
          groundedPredicate=logicManager.addGroundedPredicate(predicate,candidateVariableGrounding);
        }
        candidateGroundedPredicates.get(candidateIndex).add(groundedPredicate);
        groundedPredicates.add(candidateGroundedPredicates.get(candidateIndex));
      }
    }
  }
 else   if (formula instanceof Conjunction) {
    if (callNumber == 0)     throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    throw new UnsupportedOperationException();
  }
 else   if (formula instanceof Disjunction) {
    if (callNumber != 0)     throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    int numberOfComponents=((Disjunction<T>)formula).getNumberOfComponents();
    for (int componentIndex=0; componentIndex < numberOfComponents; componentIndex++) {
      Formula<T> componentFormula=((Disjunction<T>)formula).getComponent(componentIndex);
      if (componentFormula instanceof Atom || componentFormula instanceof Negation) {
        ground(componentFormula,callNumber++);
      }
 else {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
}",0.9908510271016744
144025,"public static void addGroundingsToBuilderByExtension(List<Rule> rules,ProbabilisticSoftLogicProblem.Builder builder,ProbabilisticSoftLogicPredicateManager predicateManager){
  HashSet<Integer> newPredicates=new HashSet<>();
  List<HashSet<String>> groundingsAlreadyAdded=new ArrayList<>();
  for (int i=0; i < rules.size(); ++i) {
    groundingsAlreadyAdded.add(new HashSet<>());
  }
  for (  String predicateName : predicateManager.getPredicateNames()) {
    for (    int id : predicateManager.getIdsForPredicateName(predicateName)) {
      newPredicates.add(id);
    }
  }
  while (!newPredicates.isEmpty()) {
    HashSet<Integer> currentPredicates=newPredicates;
    newPredicates=new HashSet<>();
    for (    int predicateId : currentPredicates) {
      for (int indexRule=0; indexRule < rules.size(); ++indexRule) {
        rules.get(indexRule).extendGroundingsAndAddToBuilder(predicateManager.getPredicateFromId(predicateId),builder,predicateManager,groundingsAlreadyAdded.get(indexRule),newPredicates);
      }
    }
  }
}","public static void addGroundingsToBuilderByExtension(List<Rule> rules,ProbabilisticSoftLogicProblem.Builder builder,ProbabilisticSoftLogicPredicateManager predicateManager){
  HashSet<Integer> newPredicates=new HashSet<>();
  List<HashSet<String>> groundingsAlreadyAdded=new ArrayList<>();
  for (int i=0; i < rules.size(); ++i) {
    groundingsAlreadyAdded.add(new HashSet<>());
  }
  for (  String predicateName : predicateManager.getPredicateNames()) {
    for (    int id : predicateManager.getIdsForPredicateName(predicateName)) {
      newPredicates.add(id);
    }
  }
  while (!newPredicates.isEmpty()) {
    HashSet<Integer> currentPredicates=newPredicates;
    newPredicates=new HashSet<>();
    for (int indexRule=0; indexRule < rules.size(); ++indexRule) {
      for (      int predicateId : currentPredicates) {
        rules.get(indexRule).extendGroundingsAndAddToBuilder(predicateManager.getPredicateFromId(predicateId),builder,predicateManager,groundingsAlreadyAdded.get(indexRule),newPredicates);
      }
    }
  }
}",0.9466537342386032
144026,"private void extendGroundingsAndAddToBuilder(Predicate groundingExtension,ProbabilisticSoftLogicProblem.Builder builder,ProbabilisticSoftLogicPredicateManager predicateManager,HashSet<String> groundingsAlreadyAdded,HashSet<Integer> newPredicates){
  boolean[] bodyNegations=new boolean[this.Body.size()];
  for (int i=0; i < this.Body.size(); ++i) {
    bodyNegations[i]=this.Body.get(i).IsNegated;
  }
  boolean[] headNegations=new boolean[this.Head.size()];
  for (int i=0; i < this.Head.size(); ++i) {
    headNegations[i]=this.Head.get(i).IsNegated;
  }
  List<List<String>> allArgumentGroundings=new ArrayList<>();
  for (  ArgumentGroundingSources argumentGroundingSource : this.ArgumentGroundingSources) {
    HashSet<String> argumentGroundings=new HashSet<>();
    for (    GroundingSource source : argumentGroundingSource.GroundingSources) {
      argumentGroundings.addAll(predicateManager.getArgumentGroundings(this.Body.get(source.IndexPredicate).Name,source.IndexArgument));
    }
    allArgumentGroundings.add(new ArrayList<>(argumentGroundings));
  }
  HashSet<String> visitedGroundings=new HashSet<>();
  for (int indexInsertion=0; indexInsertion < this.Body.size(); ++indexInsertion) {
    if (this.Body.get(indexInsertion).Name.equals(groundingExtension.Name) && this.Body.get(indexInsertion).Arguments.size() == groundingExtension.Arguments.size()) {
      HashMap<String,String> extensionGroundings=new HashMap<>();
      for (int indexExtensionArgument=0; indexExtensionArgument < groundingExtension.Arguments.size(); ++indexExtensionArgument) {
        extensionGroundings.put(this.Body.get(indexInsertion).Arguments.get(indexExtensionArgument),groundingExtension.Arguments.get(indexExtensionArgument));
      }
      String visitedKey=String.join(""String_Node_Str"",extensionGroundings.keySet());
      if (!visitedGroundings.add(visitedKey)) {
        continue;
      }
      List<List<String>> argumentValuesToTry=new ArrayList<>();
      for (      ArgumentGroundingSources sources : this.ArgumentGroundingSources) {
        String extensionVal=extensionGroundings.getOrDefault(sources.Name,null);
        if (extensionVal != null) {
          argumentValuesToTry.add(Arrays.asList(extensionVal));
        }
 else {
          HashSet<String> availableValues=new HashSet<>();
          for (          GroundingSource source : sources.GroundingSources) {
            availableValues.addAll(predicateManager.getArgumentGroundings(this.Body.get(source.IndexPredicate).Name,source.IndexPredicate));
          }
          argumentValuesToTry.add(new ArrayList<>(availableValues));
        }
      }
      CartesianProductIterator<String> argumentInstanceIterator=new CartesianProductIterator<>(argumentValuesToTry);
      for (      List<String> argumentInstance : argumentInstanceIterator) {
        HashMap<String,String> argumentToGrounding=new HashMap<>();
        StringBuilder groundingStringBuilder=new StringBuilder();
        for (int indexArgument=0; indexArgument < this.ArgumentGroundingSources.size(); ++indexArgument) {
          argumentToGrounding.put(this.ArgumentGroundingSources.get(indexArgument).Name,argumentInstance.get(indexArgument));
          if (indexArgument > 0) {
            groundingStringBuilder.append(""String_Node_Str"");
          }
          groundingStringBuilder.append(this.ArgumentGroundingSources.get(indexArgument).Name);
          groundingStringBuilder.append(""String_Node_Str"");
          groundingStringBuilder.append(argumentInstance.get(indexArgument));
        }
        String groundingString=groundingStringBuilder.toString();
        if (groundingsAlreadyAdded.contains(groundingString)) {
          continue;
        }
        if (!this.getIsGroundedOrderingAllowed(argumentToGrounding)) {
          continue;
        }
        Map.Entry<int[],boolean[]> bodyIdResult=Rule.getPredicateIds(this.Body,argumentToGrounding,predicateManager,false);
        double observedBodyConstant=0;
        for (int indexBody=0; indexBody < this.Body.size(); ++indexBody) {
          int bodyId=bodyIdResult.getKey()[indexBody];
          double observedValue=bodyId < 0 ? 0 : predicateManager.getObservedWeight(bodyId);
          if (!Double.isNaN(observedValue)) {
            if (this.Body.get(indexBody).IsNegated)             observedBodyConstant-=observedValue;
 else             observedBodyConstant+=observedValue - 1;
          }
        }
        if (observedBodyConstant + 1 <= 0) {
          continue;
        }
        groundingsAlreadyAdded.add(groundingString);
        Map.Entry<int[],boolean[]> headIdResult=Rule.getPredicateIds(this.Head,argumentToGrounding,predicateManager,true);
        for (int indexHead=0; indexHead < this.Head.size(); ++indexHead) {
          if (headIdResult.getValue()[indexHead]) {
            newPredicates.add(headIdResult.getKey()[indexHead]);
          }
        }
        if (Double.isNaN(this.Weight)) {
          builder.addRule(headIdResult.getKey(),bodyIdResult.getKey(),headNegations,bodyNegations,1,1000);
        }
 else {
          builder.addRule(headIdResult.getKey(),bodyIdResult.getKey(),headNegations,bodyNegations,this.Power,this.Weight);
        }
      }
    }
  }
}","private void extendGroundingsAndAddToBuilder(Predicate groundingExtension,ProbabilisticSoftLogicProblem.Builder builder,ProbabilisticSoftLogicPredicateManager predicateManager,HashSet<String> groundingsAlreadyAdded,HashSet<Integer> newPredicates){
  boolean[] bodyNegations=new boolean[this.Body.size()];
  for (int i=0; i < this.Body.size(); ++i) {
    bodyNegations[i]=this.Body.get(i).IsNegated;
  }
  boolean[] headNegations=new boolean[this.Head.size()];
  for (int i=0; i < this.Head.size(); ++i) {
    headNegations[i]=this.Head.get(i).IsNegated;
  }
  List<List<String>> allArgumentGroundings=new ArrayList<>();
  for (  ArgumentGroundingSources argumentGroundingSource : this.ArgumentGroundingSources) {
    HashSet<String> argumentGroundings=new HashSet<>();
    for (    GroundingSource source : argumentGroundingSource.GroundingSources) {
      argumentGroundings.addAll(predicateManager.getArgumentGroundings(this.Body.get(source.IndexPredicate).Name,source.IndexArgument));
    }
    allArgumentGroundings.add(new ArrayList<>(argumentGroundings));
  }
  HashSet<String> visitedGroundings=new HashSet<>();
  for (int indexInsertion=0; indexInsertion < this.Body.size(); ++indexInsertion) {
    if (this.Body.get(indexInsertion).Name.equals(groundingExtension.Name) && this.Body.get(indexInsertion).Arguments.size() == groundingExtension.Arguments.size()) {
      HashMap<String,String> extensionGroundings=new HashMap<>();
      for (int indexExtensionArgument=0; indexExtensionArgument < groundingExtension.Arguments.size(); ++indexExtensionArgument) {
        extensionGroundings.put(this.Body.get(indexInsertion).Arguments.get(indexExtensionArgument),groundingExtension.Arguments.get(indexExtensionArgument));
      }
      String visitedKey=String.join(""String_Node_Str"",extensionGroundings.keySet());
      if (!visitedGroundings.add(visitedKey)) {
        continue;
      }
      List<List<String>> argumentValuesToTry=new ArrayList<>();
      for (      ArgumentGroundingSources sources : this.ArgumentGroundingSources) {
        String extensionVal=extensionGroundings.getOrDefault(sources.Name,null);
        if (extensionVal != null) {
          argumentValuesToTry.add(Arrays.asList(extensionVal));
        }
 else {
          HashSet<String> availableValues=new HashSet<>();
          for (          GroundingSource source : sources.GroundingSources) {
            availableValues.addAll(predicateManager.getArgumentGroundings(this.Body.get(source.IndexPredicate).Name,source.IndexArgument));
          }
          argumentValuesToTry.add(new ArrayList<>(availableValues));
        }
      }
      CartesianProductIterator<String> argumentInstanceIterator=new CartesianProductIterator<>(argumentValuesToTry);
      for (      List<String> argumentInstance : argumentInstanceIterator) {
        HashMap<String,String> argumentToGrounding=new HashMap<>();
        StringBuilder groundingStringBuilder=new StringBuilder();
        for (int indexArgument=0; indexArgument < this.ArgumentGroundingSources.size(); ++indexArgument) {
          argumentToGrounding.put(this.ArgumentGroundingSources.get(indexArgument).Name,argumentInstance.get(indexArgument));
          if (indexArgument > 0) {
            groundingStringBuilder.append(""String_Node_Str"");
          }
          groundingStringBuilder.append(this.ArgumentGroundingSources.get(indexArgument).Name);
          groundingStringBuilder.append(""String_Node_Str"");
          groundingStringBuilder.append(argumentInstance.get(indexArgument));
        }
        String groundingString=groundingStringBuilder.toString();
        if (groundingsAlreadyAdded.contains(groundingString)) {
          continue;
        }
        if (!this.getIsGroundedOrderingAllowed(argumentToGrounding)) {
          continue;
        }
        Map.Entry<int[],boolean[]> bodyIdResult=Rule.getPredicateIds(this.Body,argumentToGrounding,predicateManager,false);
        double observedBodyConstant=0;
        boolean pruneGrounding=false;
        for (int indexBody=0; indexBody < this.Body.size(); ++indexBody) {
          int bodyId=bodyIdResult.getKey()[indexBody];
          if (bodyId < 0) {
            pruneGrounding=true;
            break;
          }
          double observedValue=bodyId < 0 ? 0 : predicateManager.getObservedWeight(bodyId);
          if (!Double.isNaN(observedValue) && bodyId >= 0) {
            if (this.Body.get(indexBody).IsNegated)             observedBodyConstant-=observedValue;
 else             observedBodyConstant+=observedValue - 1;
          }
        }
        if (pruneGrounding || observedBodyConstant + 1 <= 0)         continue;
        groundingsAlreadyAdded.add(groundingString);
        Map.Entry<int[],boolean[]> headIdResult=Rule.getPredicateIds(this.Head,argumentToGrounding,predicateManager,true);
        for (int indexHead=0; indexHead < this.Head.size(); ++indexHead) {
          if (headIdResult.getValue()[indexHead]) {
            newPredicates.add(headIdResult.getKey()[indexHead]);
          }
        }
        if (Double.isNaN(this.Weight)) {
          builder.addRule(headIdResult.getKey(),bodyIdResult.getKey(),headNegations,bodyNegations,1,1000);
        }
 else {
          builder.addRule(headIdResult.getKey(),bodyIdResult.getKey(),headNegations,bodyNegations,this.Power,this.Weight);
        }
      }
    }
  }
}",0.9815694470834124
144027,"Builder addRule(int[] headVariableIndexes,int[] bodyVariableIndexes,boolean[] headNegations,boolean[] bodyNegations,double power,double weight){
  RulePart headPart=convertRulePartToInternalRepresentation(headVariableIndexes,headNegations,true);
  RulePart bodyPart=convertRulePartToInternalRepresentation(bodyVariableIndexes,bodyNegations,false);
  double ruleMaximumValue=1 + headPart.observedConstant + bodyPart.observedConstant;
  if (ruleMaximumValue == 0)   return this;
  int[] variableIndexes=Utilities.union(headPart.variableIndexes,bodyPart.variableIndexes);
  if (variableIndexes.length == 0)   return this;
  LinearFunction linearFunction=new LinearFunction(Vectors.dense(variableIndexes.length),ruleMaximumValue);
  for (int headVariable=0; headVariable < headPart.variableIndexes.length; headVariable++) {
    Vector coefficients=Vectors.dense(variableIndexes.length);
    if (headPart.negations[headVariable]) {
      coefficients.set(ArrayUtils.indexOf(variableIndexes,headPart.variableIndexes[headVariable]),1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,-1));
    }
 else {
      coefficients.set(ArrayUtils.indexOf(variableIndexes,headPart.variableIndexes[headVariable]),-1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,0));
    }
  }
  for (int bodyVariable=0; bodyVariable < bodyPart.variableIndexes.length; bodyVariable++) {
    Vector coefficients=Vectors.dense(variableIndexes.length);
    if (bodyPart.negations[bodyVariable]) {
      coefficients.set(ArrayUtils.indexOf(variableIndexes,bodyPart.variableIndexes[bodyVariable]),-1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,0));
    }
 else {
      coefficients.set(ArrayUtils.indexOf(variableIndexes,bodyPart.variableIndexes[bodyVariable]),1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,-1));
    }
  }
  FunctionTerm term=new FunctionTerm(variableIndexes,linearFunction,weight,power);
  functionTerms.add(term);
  return this;
}","Builder addRule(int[] headVariableIndexes,int[] bodyVariableIndexes,boolean[] headNegations,boolean[] bodyNegations,double power,double weight){
  RulePart headPart=convertRulePartToInternalRepresentation(headVariableIndexes,headNegations,true);
  RulePart bodyPart=convertRulePartToInternalRepresentation(bodyVariableIndexes,bodyNegations,false);
  double ruleMaximumValue=1 + headPart.observedConstant + bodyPart.observedConstant;
  if (ruleMaximumValue <= 0)   return this;
  int[] variableIndexes=Utilities.union(headPart.variableIndexes,bodyPart.variableIndexes);
  if (variableIndexes.length == 0)   return this;
  LinearFunction linearFunction=new LinearFunction(Vectors.dense(variableIndexes.length),ruleMaximumValue);
  for (int headVariable=0; headVariable < headPart.variableIndexes.length; headVariable++) {
    Vector coefficients=Vectors.dense(variableIndexes.length);
    if (headPart.negations[headVariable]) {
      coefficients.set(ArrayUtils.indexOf(variableIndexes,headPart.variableIndexes[headVariable]),1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,-1));
    }
 else {
      coefficients.set(ArrayUtils.indexOf(variableIndexes,headPart.variableIndexes[headVariable]),-1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,0));
    }
  }
  for (int bodyVariable=0; bodyVariable < bodyPart.variableIndexes.length; bodyVariable++) {
    Vector coefficients=Vectors.dense(variableIndexes.length);
    if (bodyPart.negations[bodyVariable]) {
      coefficients.set(ArrayUtils.indexOf(variableIndexes,bodyPart.variableIndexes[bodyVariable]),-1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,0));
    }
 else {
      coefficients.set(ArrayUtils.indexOf(variableIndexes,bodyPart.variableIndexes[bodyVariable]),1);
      linearFunction=linearFunction.add(new LinearFunction(coefficients,-1));
    }
  }
  FunctionTerm term=new FunctionTerm(variableIndexes,linearFunction,weight,power);
  functionTerms.add(term);
  return this;
}",0.4928253339930727
144028,"private static void solveProbabilisticSoftLogicSubProblem(ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblem subProblem,CholeskyDecomposition[] subProblemCholeskyFactors){
  ProbabilisticSoftLogicSumFunctionTerm objectiveTerm=(ProbabilisticSoftLogicSumFunctionTerm)subProblem.objectiveTerm;
  subProblem.variables.set(subProblem.consensusVariables.sub(subProblem.multipliers.div(subProblem.penaltyParameter)));
  if (objectiveTerm.getLinearFunction().getValue(subProblem.variables) > 0) {
    if (objectiveTerm.getPower() == 1) {
      subProblem.variables.subInPlace(objectiveTerm.getLinearFunction().getA().mult(objectiveTerm.getWeight() / subProblem.penaltyParameter));
    }
 else     if (objectiveTerm.getPower() == 2) {
      double weight=objectiveTerm.getWeight();
      double constant=objectiveTerm.getLinearFunction().getB();
      subProblem.variables.multInPlace(subProblem.penaltyParameter).subInPlace(objectiveTerm.getLinearFunction().getA().mult(2 * weight * constant));
      if (subProblem.variables.size() == 1) {
        double coefficient=objectiveTerm.getLinearFunction().getA().get(0);
        subProblem.variables.divInPlace(2 * weight * coefficient* coefficient + subProblem.penaltyParameter);
      }
 else       if (subProblem.variables.size() == 2) {
        double coefficient0=objectiveTerm.getLinearFunction().getA().get(0);
        double coefficient1=objectiveTerm.getLinearFunction().getA().get(1);
        double a0=2 * weight * coefficient0* coefficient0 + subProblem.penaltyParameter;
        double b1=2 * weight * coefficient1* coefficient1 + subProblem.penaltyParameter;
        double a1b0=2 * weight * coefficient0* coefficient1;
        subProblem.variables.set(1,(subProblem.variables.get(1) - a1b0 * subProblem.variables.get(0) / a0) / (b1 - a1b0 * a1b0 / a0));
        subProblem.variables.set(0,(subProblem.variables.get(0) - a1b0 * subProblem.variables.get(1)) / a0);
      }
 else {
        try {
          subProblem.variables.set(subProblemCholeskyFactors[subProblem.subProblemIndex].solve(subProblem.variables));
        }
 catch (        NonSymmetricMatrixException|NonPositiveDefiniteMatrixException e) {
          System.err.println(""String_Node_Str"");
        }
      }
    }
 else {
      subProblem.variables.set(new NewtonSolver.Builder(new ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblemObjectiveFunction(objectiveTerm.getSubProblemObjectiveFunction(),subProblem.consensusVariables,subProblem.multipliers,subProblem.penaltyParameter),subProblem.variables).lineSearch(new NoLineSearch(1)).maximumNumberOfIterations(1).build().solve());
    }
    if (objectiveTerm.getLinearFunction().getValue(subProblem.variables) < 0) {
      subProblem.variables.set(objectiveTerm.getLinearFunction().projectToHyperplane(subProblem.consensusVariables));
    }
  }
}","private static void solveProbabilisticSoftLogicSubProblem(ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblem subProblem,Map<Integer,CholeskyDecomposition> subProblemCholeskyFactors){
  ProbabilisticSoftLogicSumFunctionTerm objectiveTerm=(ProbabilisticSoftLogicSumFunctionTerm)subProblem.objectiveTerm;
  subProblem.variables.set(subProblem.consensusVariables.sub(subProblem.multipliers.div(subProblem.penaltyParameter)));
  if (objectiveTerm.getLinearFunction().getValue(subProblem.variables) > 0) {
    if (objectiveTerm.getPower() == 1) {
      subProblem.variables.subInPlace(objectiveTerm.getLinearFunction().getA().mult(objectiveTerm.getWeight() / subProblem.penaltyParameter));
    }
 else     if (objectiveTerm.getPower() == 2) {
      double weight=objectiveTerm.getWeight();
      double constant=objectiveTerm.getLinearFunction().getB();
      subProblem.variables.multInPlace(subProblem.penaltyParameter).subInPlace(objectiveTerm.getLinearFunction().getA().mult(2 * weight * constant));
      if (subProblem.variables.size() == 1) {
        double coefficient=objectiveTerm.getLinearFunction().getA().get(0);
        subProblem.variables.divInPlace(2 * weight * coefficient* coefficient + subProblem.penaltyParameter);
      }
 else       if (subProblem.variables.size() == 2) {
        double coefficient0=objectiveTerm.getLinearFunction().getA().get(0);
        double coefficient1=objectiveTerm.getLinearFunction().getA().get(1);
        double a0=2 * weight * coefficient0* coefficient0 + subProblem.penaltyParameter;
        double b1=2 * weight * coefficient1* coefficient1 + subProblem.penaltyParameter;
        double a1b0=2 * weight * coefficient0* coefficient1;
        subProblem.variables.set(1,(subProblem.variables.get(1) - a1b0 * subProblem.variables.get(0) / a0) / (b1 - a1b0 * a1b0 / a0));
        subProblem.variables.set(0,(subProblem.variables.get(0) - a1b0 * subProblem.variables.get(1)) / a0);
      }
 else {
        try {
          subProblem.variables.set(subProblemCholeskyFactors.get(subProblem.subProblemIndex).solve(subProblem.variables));
        }
 catch (        NonSymmetricMatrixException|NonPositiveDefiniteMatrixException e) {
          System.err.println(""String_Node_Str"");
        }
      }
    }
 else {
      subProblem.variables.set(new NewtonSolver.Builder(new ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblemObjectiveFunction(objectiveTerm.getSubProblemObjectiveFunction(),subProblem.consensusVariables,subProblem.multipliers,subProblem.penaltyParameter),subProblem.variables).lineSearch(new NoLineSearch(1)).maximumNumberOfIterations(1).build().solve());
    }
    if (objectiveTerm.getLinearFunction().getValue(subProblem.variables) < 0) {
      subProblem.variables.set(objectiveTerm.getLinearFunction().projectToHyperplane(subProblem.consensusVariables));
    }
  }
}",0.9959684487291848
144029,"private ProbabilisticSoftLogicProblem(Builder builder){
  externalToInternalIndexesMapping=HashBiMap.create(builder.externalToInternalIndexesMapping);
  SumFunction.Builder sumFunctionBuilder=new SumFunction.Builder(externalToInternalIndexesMapping.size());
  for (  Builder.FunctionTerm function : builder.functionTerms) {
    MaxFunction.Builder maxFunctionBuilder=new MaxFunction.Builder(externalToInternalIndexesMapping.size());
    maxFunctionBuilder.addConstantTerm(0);
    maxFunctionBuilder.addFunctionTerm(function.linearFunction);
    sumFunctionBuilder.addTerm(new ProbabilisticSoftLogicSumFunctionTerm(maxFunctionBuilder.build(),function.power,function.weight),function.variableIndexes);
  }
  objectiveFunction=new ProbabilisticSoftLogicFunction(sumFunctionBuilder);
  constraints=ImmutableSet.copyOf(builder.constraints);
  subProblemSelectionMethod=builder.subProblemSelectionMethod;
  numberOfSubProblemSamples=builder.numberOfSubProblemSamples;
  subProblemCholeskyFactors=new CholeskyDecomposition[objectiveFunction.getNumberOfTerms()];
  int temporaryIndex=0;
  for (  AbstractFunction term : objectiveFunction.getTerms()) {
    ProbabilisticSoftLogicSumFunctionTerm objectiveTerm=(ProbabilisticSoftLogicSumFunctionTerm)term;
    Vector coefficients=objectiveTerm.getLinearFunction().getA();
    subProblemCholeskyFactors[temporaryIndex++]=new CholeskyDecomposition(coefficients.outer(coefficients).multiply(2 * objectiveTerm.weight).add(Matrix.generateIdentityMatrix(coefficients.size())));
  }
}","private ProbabilisticSoftLogicProblem(Builder builder){
  externalToInternalIndexesMapping=HashBiMap.create(builder.externalToInternalIndexesMapping);
  SumFunction.Builder sumFunctionBuilder=new SumFunction.Builder(externalToInternalIndexesMapping.size());
  for (  Builder.FunctionTerm function : builder.functionTerms) {
    MaxFunction.Builder maxFunctionBuilder=new MaxFunction.Builder(externalToInternalIndexesMapping.size());
    maxFunctionBuilder.addConstantTerm(0);
    maxFunctionBuilder.addFunctionTerm(function.linearFunction);
    sumFunctionBuilder.addTerm(new ProbabilisticSoftLogicSumFunctionTerm(maxFunctionBuilder.build(),function.power,function.weight),function.variableIndexes);
  }
  objectiveFunction=new ProbabilisticSoftLogicFunction(sumFunctionBuilder);
  constraints=ImmutableSet.copyOf(builder.constraints);
  subProblemSelectionMethod=builder.subProblemSelectionMethod;
  numberOfSubProblemSamples=builder.numberOfSubProblemSamples;
  for (int subProblemIndex=0; subProblemIndex < objectiveFunction.getNumberOfTerms(); subProblemIndex++) {
    ProbabilisticSoftLogicSumFunctionTerm objectiveTerm=(ProbabilisticSoftLogicSumFunctionTerm)objectiveFunction.getTerm(subProblemIndex);
    Vector coefficients=objectiveTerm.getLinearFunction().getA();
    if (objectiveTerm.getPower() == 2 && coefficients.size() > 2)     subProblemCholeskyFactors.put(subProblemIndex,new CholeskyDecomposition(coefficients.outer(coefficients).multiply(2 * objectiveTerm.weight).add(Matrix.generateIdentityMatrix(coefficients.size()))));
  }
}",0.7480417754569191
144030,"public static int[] sampleWithReplacement(int[] array,double[] probabilities,int numberOfSamples){
  if (array.length != probabilities.length)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  double[] cumulativeDensityFunction=new double[probabilities.length];
  cumulativeDensityFunction[0]=probabilities[0];
  for (int index=1; index < probabilities.length; index++)   cumulativeDensityFunction[index]=cumulativeDensityFunction[index - 1] + probabilities[index];
  int[] resultArray=new int[numberOfSamples];
  for (int index=0; index < numberOfSamples; index++) {
    double number=random.nextDouble();
    int elementIndex=Arrays.binarySearch(cumulativeDensityFunction,number);
    if (elementIndex < 0) {
      elementIndex=-elementIndex - 1;
      if (elementIndex == probabilities.length)       elementIndex--;
    }
    resultArray[index]=array[elementIndex];
  }
  return resultArray;
}","/** 
 * Randomly samples a specified number of elements from an integer array with replacement, while assigning a probability proportional to the provided weight for each element of that array. This method does not modify the provided array.
 * @param array           The array from which we randomly sample elements.
 * @param weights         The weights to use for each element in the provided array.
 * @param numberOfSamples The number of elements to sample from the given array.
 * @return                  A new integer array containing the sampled elements.
 * @throws IllegalArgumentException    The length of the array with the elements must match the length of the arraywith the weights of those elements.
 */
public static int[] sampleWithReplacement(int[] array,double[] weights,int numberOfSamples){
  if (array.length != weights.length)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  double weightsSum=weights[0];
  for (int index=1; index < weights.length; index++)   weightsSum+=weights[index];
  double[] cumulativeDensityFunction=new double[weights.length];
  cumulativeDensityFunction[0]=weights[0] / weightsSum;
  for (int index=1; index < weights.length; index++)   cumulativeDensityFunction[index]=cumulativeDensityFunction[index - 1] + (weights[index] / weightsSum);
  int[] resultArray=new int[numberOfSamples];
  for (int index=0; index < numberOfSamples; index++) {
    double number=random.nextDouble();
    int elementIndex=Arrays.binarySearch(cumulativeDensityFunction,number);
    if (elementIndex < 0) {
      elementIndex=-elementIndex - 1;
      if (elementIndex == weights.length)       elementIndex--;
    }
    resultArray[index]=array[elementIndex];
  }
  return resultArray;
}",0.6297266941220516
144031,"/** 
 * Randomly samples a specified number of elements from a list without replacement. Note that this method modifies the provided list (i.e., it shuffles the order of its elements).
 * @param list            The list from which we randomly sample elements.
 * @param numberOfSamples The number of elements to sample from the given list.
 * @param random          The random number generator to use for the shuffling.
 * @return                  A new {@link java.util.ArrayList} containing the sampled elements.
 */
public static <T>List<T> sampleWithoutReplacement(List<T> list,int numberOfSamples,Random random){
  shuffle(list,random);
  return new ArrayList<>(list.subList(0,numberOfSamples));
}","/** 
 * Randomly samples a specified number of elements from an integer array without replacement, while assigning a probability proportional to the provided weight for each element of that array. This method does not modify the provided array.
 * @param array           The array from which we randomly sample elements.
 * @param weights         The weights to use for each element in the provided array.
 * @param numberOfSamples The number of elements to sample from the given array.
 * @return                  A new integer array containing the sampled elements.
 * @throws IllegalArgumentException    The length of the array with the elements must match the length of the arraywith the weights of those elements.
 */
public static int[] sampleWithoutReplacement(int[] array,double[] weights,int numberOfSamples){
  if (array.length != weights.length)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  PriorityQueue<WeightedElement> priorityQueue=new PriorityQueue<>(array.length,(element1,element2) -> (int)Math.signum(element2.weight - element1.weight));
  for (int index=0; index < array.length; index++)   priorityQueue.add(new WeightedElement(array[index],Math.pow(random.nextDouble(),1 / weights[index])));
  int[] resultArray=new int[numberOfSamples];
  for (int index=0; index < numberOfSamples; index++)   resultArray[index]=priorityQueue.poll().element;
  return resultArray;
}",0.322185586434291
144032,"private static void solveProbabilisticSoftLogicSubProblem(ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblem subProblem){
  ProbabilisticSoftLogicSumFunctionTerm objectiveTerm=(ProbabilisticSoftLogicSumFunctionTerm)subProblem.objectiveTerm;
  if (objectiveTerm.getLinearFunction().getValue(subProblem.variables) > 0) {
    subProblem.variables.set(new NewtonSolver.Builder(new ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblemObjectiveFunction(objectiveTerm.getSubProblemObjectiveFunction(),subProblem.consensusVariables,subProblem.multipliers,subProblem.augmentedLagrangianParameter),subProblem.variables).build().solve());
    if (objectiveTerm.getLinearFunction().getValue(subProblem.variables) < 0) {
      subProblem.variables.set(objectiveTerm.getLinearFunction().projectToHyperplane(subProblem.consensusVariables));
    }
  }
}","private static void solveProbabilisticSoftLogicSubProblem(ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblem subProblem){
  ProbabilisticSoftLogicSumFunctionTerm objectiveTerm=(ProbabilisticSoftLogicSumFunctionTerm)subProblem.objectiveTerm;
  if (objectiveTerm.getLinearFunction().getValue(subProblem.variables) > 0) {
    subProblem.variables.set(new NewtonSolver.Builder(new ConsensusAlternatingDirectionsMethodOfMultipliersSolver.SubProblemObjectiveFunction(objectiveTerm.getSubProblemObjectiveFunction(),subProblem.consensusVariables,subProblem.multipliers,subProblem.augmentedLagrangianParameter),subProblem.variables).lineSearch(new NoLineSearch(1)).maximumNumberOfIterations(1).build().solve());
    if (objectiveTerm.getLinearFunction().getValue(subProblem.variables) < 0) {
      subProblem.variables.set(objectiveTerm.getLinearFunction().projectToHyperplane(subProblem.consensusVariables));
    }
  }
}",0.966016713091922
144033,"@Override public Matrix computeHessian(Vector point){
  if (power > 1) {
    Vector a=linearFunction.computeGradient(point);
    return Matrix.generateDiagonalMatrix(a.multElementwise(a).getDenseArray()).multiply(weight * power * (power - 1)* Math.pow(linearFunction.computeValue(point),power - 2));
  }
 else {
    return new Matrix(point.size(),point.size());
  }
}","@Override public Matrix computeHessian(Vector point){
  if (power > 1) {
    Vector a=linearFunction.computeGradient(point);
    return a.outer(a).multiply(weight * power * (power - 1)* Math.pow(linearFunction.computeValue(point),power - 2));
  }
 else {
    return new Matrix(point.size(),point.size());
  }
}",0.8892171344165436
144034,"@Override protected Vector computeGradient(Vector point) throws NonSmoothFunctionException {
  return subProblemObjectiveFunction.getGradient(point).add(point.sub(consensusVariables).add(lagrangeMultipliers.div(augmentedLagrangianParameter)).mult(augmentedLagrangianParameter));
}","@Override protected Vector computeGradient(Vector point) throws NonSmoothFunctionException {
  return subProblemObjectiveFunction.getGradient(point).add(point.sub(consensusVariables).add(lagrangeMultipliers.div(penaltyParameter)).mult(penaltyParameter));
}",0.9029850746268656
144035,"private ConsensusAlternatingDirectionsMethodOfMultipliersSolver(AbstractBuilder<?> builder){
  super(builder);
  objective=(SumFunction)builder.objective;
  constraintsVariablesIndexes=builder.constraintsVariablesIndexes;
  constraints=builder.constraints;
  primalResidualTolerance=builder.primalResidualTolerance;
  dualResidualTolerance=builder.dualResidualTolerance;
  checkForPrimalResidualConvergence=builder.checkForPrimalResidualConvergence;
  checkForDualResidualConvergence=builder.checkForDualResidualConvergence;
  checkForPrimalAndDualResidualConvergence=builder.checkForPrimalAndDualResidualConvergence;
  penaltyParameterSettingMethod=builder.penaltyParameterSettingMethod;
  mu=builder.mu;
  tauIncrement=builder.tauIncrement;
  tauDecrement=builder.tauDecrement;
  penaltyParameter=builder.penaltyParameter;
  subProblemSolver=builder.subProblemSolver;
  taskExecutor=Executors.newFixedThreadPool(builder.numberOfThreads);
  variableCopiesCounts=Vectors.dense(currentPoint.size());
  for (  int[] variableIndexes : objective.getTermsVariables()) {
    Vector termPoint=Vectors.build(variableIndexes.length,currentPoint.type());
    termPoint.set(currentPoint.get(variableIndexes));
    variableCopies.add(termPoint);
    lagrangeMultipliers.add(Vectors.build(variableIndexes.length,currentPoint.type()));
    for (    int variableIndex : variableIndexes)     variableCopiesCounts.set(variableIndex,variableCopiesCounts.get(variableIndex) + 1);
  }
  for (  int[] variableIndexes : constraintsVariablesIndexes) {
    Vector termPoint=Vectors.build(variableIndexes.length,currentPoint.type());
    termPoint.set(currentPoint.get(variableIndexes));
    variableCopies.add(termPoint);
    lagrangeMultipliers.add(Vectors.build(variableIndexes.length,currentPoint.type()));
    for (    int variableIndex : variableIndexes)     variableCopiesCounts.set(variableIndex,variableCopiesCounts.get(variableIndex) + 1);
  }
}","private ConsensusAlternatingDirectionsMethodOfMultipliersSolver(AbstractBuilder<?> builder){
  super(builder);
  objective=(SumFunction)builder.objective;
  constraintsVariablesIndexes=builder.constraintsVariablesIndexes;
  constraints=builder.constraints;
  absoluteTolerance=builder.absoluteTolerance;
  relativeTolerance=builder.relativeTolerance;
  checkForPrimalAndDualResidualConvergence=builder.checkForPrimalAndDualResidualConvergence;
  primalResidualSquaredTerms=Vectors.build(objective.getNumberOfTerms(),VectorType.DENSE);
  primalToleranceSquaredTerms=Vectors.build(objective.getNumberOfTerms(),VectorType.DENSE);
  dualToleranceSquaredTerms=Vectors.build(objective.getNumberOfTerms(),VectorType.DENSE);
  penaltyParameterSettingMethod=builder.penaltyParameterSettingMethod;
  mu=builder.mu;
  tauIncrement=builder.tauIncrement;
  tauDecrement=builder.tauDecrement;
  penaltyParameter=builder.penaltyParameter;
  subProblemSolver=builder.subProblemSolver;
  taskExecutor=Executors.newFixedThreadPool(builder.numberOfThreads);
  variableCopiesCounts=Vectors.dense(currentPoint.size());
  for (  int[] variableIndexes : objective.getTermsVariables()) {
    Vector termPoint=Vectors.build(variableIndexes.length,currentPoint.type());
    termPoint.set(currentPoint.get(variableIndexes));
    variableCopies.add(termPoint);
    lagrangeMultipliers.add(Vectors.build(variableIndexes.length,currentPoint.type()));
    for (    int variableIndex : variableIndexes)     variableCopiesCounts.set(variableIndex,variableCopiesCounts.get(variableIndex) + 1);
  }
  for (  int[] variableIndexes : constraintsVariablesIndexes) {
    Vector termPoint=Vectors.build(variableIndexes.length,currentPoint.type());
    termPoint.set(currentPoint.get(variableIndexes));
    variableCopies.add(termPoint);
    lagrangeMultipliers.add(Vectors.build(variableIndexes.length,currentPoint.type()));
    for (    int variableIndex : variableIndexes)     variableCopiesCounts.set(variableIndex,variableCopiesCounts.get(variableIndex) + 1);
  }
}",0.8684011113917656
144036,"@Override public boolean checkTerminationConditions(){
  if (super.checkTerminationConditions())   return true;
  if (currentIteration > 0) {
    if (checkForPrimalResidualConvergence || checkForPrimalAndDualResidualConvergence) {
      if (penaltyParameterSettingMethod != PenaltyParameterSettingMethod.ADAPTIVE) {
        primalResidualSquared=0;
        for (int subProblemIndex=0; subProblemIndex < objective.getNumberOfTerms(); subProblemIndex++) {
          primalResidualSquared+=variableCopies.get(subProblemIndex).sub(currentPoint.get(objective.getTermVariables(subProblemIndex))).norm(VectorNorm.L2_SQUARED);
        }
        for (int constraintIndex=0; constraintIndex < constraints.size(); constraintIndex++) {
          primalResidualSquared+=variableCopies.get(objective.getNumberOfTerms() + constraintIndex).sub(currentPoint.get(constraintsVariablesIndexes.get(constraintIndex))).norm(VectorNorm.L2_SQUARED);
        }
      }
      primalResidualConverged=primalResidualSquared <= primalResidualTolerance;
    }
    if (checkForDualResidualConvergence || checkForPrimalAndDualResidualConvergence) {
      if (penaltyParameterSettingMethod != PenaltyParameterSettingMethod.ADAPTIVE)       dualResidualSquared=objective.getNumberOfTerms() * Math.pow(penaltyParameter,2) * currentPoint.sub(previousPoint).norm(VectorNorm.L2_SQUARED);
      dualResidualConverged=dualResidualSquared <= dualResidualTolerance;
    }
    return (checkForPrimalResidualConvergence && primalResidualConverged) || (checkForDualResidualConvergence && dualResidualConverged) || (checkForPrimalAndDualResidualConvergence && primalResidualConverged && dualResidualConverged);
  }
 else {
    return false;
  }
}","@Override public boolean checkTerminationConditions(){
  if (super.checkTerminationConditions())   return true;
  if (currentIteration > 0 && checkForPrimalAndDualResidualConvergence) {
    primalTolerance=absoluteTolerance + relativeTolerance * Math.max(Math.sqrt(primalToleranceSquaredTerms.sum()),Math.sqrt(currentPoint.map(x -> x * x).multElementwise(variableCopiesCounts).sum()));
    dualTolerance=absoluteTolerance + relativeTolerance * Math.sqrt(dualToleranceSquaredTerms.sum());
    primalResidualConverged=primalResidual <= primalTolerance;
    dualResidualConverged=dualResidual <= dualTolerance;
    return primalResidualConverged && dualResidualConverged;
  }
 else {
    return false;
  }
}",0.2556203164029975
144037,"private void processConstraint(int constraintIndex,int[] variableIndexes,Vector variableCopiesSum,int numberOfObjectiveTerms){
  Vector variables=variableCopies.get(numberOfObjectiveTerms + constraintIndex);
  Vector multipliers=lagrangeMultipliers.get(numberOfObjectiveTerms + constraintIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(currentPoint.get(variableIndexes));
  multipliers.addInPlace(variables.sub(consensusVariables).mult(penaltyParameter));
  try {
    variables.set(constraints.get(constraintIndex).project(consensusVariables));
  }
 catch (  SingularMatrixException e) {
    logger.error(""String_Node_Str"");
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(penaltyParameter)));
synchronized (lock) {
    variableCopiesSum.addInPlace(termPoint);
  }
}","private void processConstraint(int constraintIndex,int[] variableIndexes,Vector variableCopiesSum,int numberOfObjectiveTerms){
  Vector variables=variableCopies.get(numberOfObjectiveTerms + constraintIndex);
  Vector multipliers=lagrangeMultipliers.get(numberOfObjectiveTerms + constraintIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(currentPoint.get(variableIndexes));
  multipliers.addInPlace(variables.sub(consensusVariables).mult(penaltyParameter));
  try {
    variables.set(constraints.get(constraintIndex).project(consensusVariables));
  }
 catch (  SingularMatrixException e) {
    logger.error(""String_Node_Str"");
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(penaltyParameter)));
synchronized (lock) {
    variableCopiesSum.addInPlace(termPoint);
  }
  if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence) {
    primalResidualSquaredTerms.set(numberOfObjectiveTerms + constraintIndex,variables.sub(consensusVariables).norm(VectorNorm.L2_SQUARED));
    if (checkForPrimalAndDualResidualConvergence) {
      primalToleranceSquaredTerms.set(numberOfObjectiveTerms + constraintIndex,variables.norm(VectorNorm.L2_SQUARED));
      dualToleranceSquaredTerms.set(numberOfObjectiveTerms + constraintIndex,multipliers.norm(VectorNorm.L2_SQUARED));
    }
  }
}",0.7672023073753605
144038,"@Override public void printTerminationMessage(){
  super.printTerminationMessage();
  if (primalResidualConverged)   logger.info(""String_Node_Str"",DECIMAL_FORMAT.format(primalResidualSquared),DECIMAL_FORMAT.format(primalResidualTolerance));
  if (dualResidualConverged)   logger.info(""String_Node_Str"",DECIMAL_FORMAT.format(dualResidualSquared),DECIMAL_FORMAT.format(dualResidualTolerance));
}","@Override public void printTerminationMessage(){
  super.printTerminationMessage();
  if (primalResidualConverged)   logger.info(""String_Node_Str"",DECIMAL_FORMAT.format(primalResidual),DECIMAL_FORMAT.format(primalTolerance));
  if (dualResidualConverged)   logger.info(""String_Node_Str"",DECIMAL_FORMAT.format(dualResidual),DECIMAL_FORMAT.format(dualTolerance));
}",0.9603174603174603
144039,"@Override protected double computeValue(Vector point){
  return subProblemObjectiveFunction.getValue(point) + augmentedLagrangianParameter * Math.pow(point.sub(consensusVariables).add(lagrangeMultipliers.div(augmentedLagrangianParameter)).norm(VectorNorm.L2_FAST),2) / 2;
}","@Override protected double computeValue(Vector point){
  return subProblemObjectiveFunction.getValue(point) + penaltyParameter * Math.pow(point.sub(consensusVariables).add(lagrangeMultipliers.div(penaltyParameter)).norm(VectorNorm.L2_FAST),2) / 2;
}",0.6666666666666666
144040,"private void processSubProblem(int subProblemIndex,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(subProblemIndex);
  Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(currentPoint.get(variableIndexes));
  multipliers.addInPlace(variables.sub(consensusVariables).mult(penaltyParameter));
  variables.set(consensusVariables.sub(multipliers.div(penaltyParameter)));
  SubProblem subProblem=new SubProblem(variables,multipliers,consensusVariables,objective.getTerm(subProblemIndex),penaltyParameter);
  if (subProblemSolver != null)   subProblemSolver.accept(subProblem);
 else   solveSubProblem(subProblem);
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(penaltyParameter)));
synchronized (lock) {
    variableCopiesSum.addInPlace(termPoint);
  }
}","private void processSubProblem(int subProblemIndex,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(subProblemIndex);
  Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(currentPoint.get(variableIndexes));
  multipliers.addInPlace(variables.sub(consensusVariables).mult(penaltyParameter));
  variables.set(consensusVariables.sub(multipliers.div(penaltyParameter)));
  SubProblem subProblem=new SubProblem(variables,multipliers,consensusVariables,objective.getTerm(subProblemIndex),penaltyParameter);
  if (subProblemSolver != null)   subProblemSolver.accept(subProblem);
 else   solveSubProblem(subProblem);
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(penaltyParameter)));
synchronized (lock) {
    variableCopiesSum.addInPlace(termPoint);
  }
  if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence) {
    primalResidualSquaredTerms.set(subProblemIndex,variables.sub(consensusVariables).norm(VectorNorm.L2_SQUARED));
    if (checkForPrimalAndDualResidualConvergence) {
      primalToleranceSquaredTerms.set(subProblemIndex,variables.norm(VectorNorm.L2_SQUARED));
      dualToleranceSquaredTerms.set(subProblemIndex,multipliers.norm(VectorNorm.L2_SQUARED));
    }
  }
}",0.8030546623794212
144041,"@Override protected Matrix computeHessian(Vector point) throws NonSmoothFunctionException {
  return subProblemObjectiveFunction.getHessian(point).add(Matrix.generateIdentityMatrix(point.size()).multiply(augmentedLagrangianParameter));
}","@Override protected Matrix computeHessian(Vector point) throws NonSmoothFunctionException {
  return subProblemObjectiveFunction.getHessian(point).add(Matrix.generateIdentityMatrix(point.size()).multiply(penaltyParameter));
}",0.9437229437229436
144042,"public SubProblemObjectiveFunction(AbstractFunction subProblemObjectiveFunction,Vector consensusVariables,Vector lagrangeMultipliers,double augmentedLagrangianParameter){
  this.subProblemObjectiveFunction=subProblemObjectiveFunction;
  this.consensusVariables=consensusVariables;
  this.lagrangeMultipliers=lagrangeMultipliers;
  this.augmentedLagrangianParameter=augmentedLagrangianParameter;
}","public SubProblemObjectiveFunction(AbstractFunction subProblemObjectiveFunction,Vector consensusVariables,Vector lagrangeMultipliers,double penaltyParameter){
  this.subProblemObjectiveFunction=subProblemObjectiveFunction;
  this.consensusVariables=consensusVariables;
  this.lagrangeMultipliers=lagrangeMultipliers;
  this.penaltyParameter=penaltyParameter;
}",0.8968253968253969
144043,"@Override public void performIterationUpdates(){
  previousPoint=currentPoint;
  Vector variableCopiesSum=Vectors.build(currentPoint.size(),currentPoint.type());
  List<Callable<Object>> subProblemTasks=new ArrayList<>();
  for (int subProblemIndex=0; subProblemIndex < objective.getNumberOfTerms(); subProblemIndex++) {
    int[] variableIndexes=objective.getTermVariables(subProblemIndex);
    final int currentSubProblemIndex=subProblemIndex;
    subProblemTasks.add(Executors.callable(() -> processSubProblem(currentSubProblemIndex,variableIndexes,variableCopiesSum)));
  }
  final int numberOfObjectiveTerms=objective.getNumberOfTerms();
  for (int constraintIndex=0; constraintIndex < constraints.size(); constraintIndex++) {
    int[] variableIndexes=constraintsVariablesIndexes.get(constraintIndex);
    final int currentConstraintIndex=constraintIndex;
    subProblemTasks.add(Executors.callable(() -> processConstraint(currentConstraintIndex,variableIndexes,variableCopiesSum,numberOfObjectiveTerms)));
  }
  try {
    taskExecutor.invokeAll(subProblemTasks);
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"");
  }
  currentPoint=variableCopiesSum.divElementwise(variableCopiesCounts);
  for (int variableIndex=0; variableIndex < currentPoint.size(); variableIndex++)   if (currentPoint.get(variableIndex) < 0)   currentPoint.set(variableIndex,0);
 else   if (currentPoint.get(variableIndex) > 1)   currentPoint.set(variableIndex,1);
  if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE) {
    primalResidualSquared=0;
    for (int subProblemIndex=0; subProblemIndex < objective.getNumberOfTerms(); subProblemIndex++) {
      primalResidualSquared+=variableCopies.get(subProblemIndex).sub(currentPoint.get(objective.getTermVariables(subProblemIndex))).norm(VectorNorm.L2_SQUARED);
    }
    for (int constraintIndex=0; constraintIndex < constraints.size(); constraintIndex++) {
      primalResidualSquared+=variableCopies.get(objective.getNumberOfTerms() + constraintIndex).sub(currentPoint.get(constraintsVariablesIndexes.get(constraintIndex))).norm(VectorNorm.L2_SQUARED);
    }
    dualResidualSquared=objective.getNumberOfTerms() * penaltyParameter * penaltyParameter* currentPoint.sub(previousPoint).norm(VectorNorm.L2_SQUARED);
    penaltyParameterSettingMethod.updatePenaltyParameter(this);
  }
  if (checkForObjectiveConvergence || logObjectiveValue) {
    previousObjectiveValue=currentObjectiveValue;
    currentObjectiveValue=objective.getValue(currentPoint);
  }
  if (checkForGradientConvergence || logGradientNorm) {
    previousGradient=currentGradient;
    try {
      currentGradient=objective.getGradient(currentPoint);
    }
 catch (    NonSmoothFunctionException e) {
      throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}","@Override public void performIterationUpdates(){
  previousPoint=currentPoint;
  Vector variableCopiesSum=Vectors.build(currentPoint.size(),currentPoint.type());
  List<Callable<Object>> subProblemTasks=new ArrayList<>();
  for (int subProblemIndex=0; subProblemIndex < objective.getNumberOfTerms(); subProblemIndex++) {
    int[] variableIndexes=objective.getTermVariables(subProblemIndex);
    final int currentSubProblemIndex=subProblemIndex;
    subProblemTasks.add(Executors.callable(() -> processSubProblem(currentSubProblemIndex,variableIndexes,variableCopiesSum)));
  }
  final int numberOfObjectiveTerms=objective.getNumberOfTerms();
  for (int constraintIndex=0; constraintIndex < constraints.size(); constraintIndex++) {
    int[] variableIndexes=constraintsVariablesIndexes.get(constraintIndex);
    final int currentConstraintIndex=constraintIndex;
    subProblemTasks.add(Executors.callable(() -> processConstraint(currentConstraintIndex,variableIndexes,variableCopiesSum,numberOfObjectiveTerms)));
  }
  try {
    taskExecutor.invokeAll(subProblemTasks);
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"");
  }
  currentPoint=variableCopiesSum.divElementwise(variableCopiesCounts);
  for (int variableIndex=0; variableIndex < currentPoint.size(); variableIndex++)   if (currentPoint.get(variableIndex) < 0)   currentPoint.set(variableIndex,0);
 else   if (currentPoint.get(variableIndex) > 1)   currentPoint.set(variableIndex,1);
  if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE || checkForPrimalAndDualResidualConvergence) {
    primalResidual=Math.sqrt(primalResidualSquaredTerms.sum());
    dualResidual=penaltyParameter * Math.sqrt(currentPoint.sub(previousPoint).map(x -> x * x).multElementwise(variableCopiesCounts).sum());
    if (penaltyParameterSettingMethod == PenaltyParameterSettingMethod.ADAPTIVE)     penaltyParameterSettingMethod.updatePenaltyParameter(this);
  }
  if (checkForObjectiveConvergence || logObjectiveValue) {
    previousObjectiveValue=currentObjectiveValue;
    currentObjectiveValue=objective.getValue(currentPoint);
  }
  if (checkForGradientConvergence || logGradientNorm) {
    previousGradient=currentGradient;
    try {
      currentGradient=objective.getGradient(currentPoint);
    }
 catch (    NonSmoothFunctionException e) {
      throw new UnsupportedOperationException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}",0.8087928747394353
144044,"@Override public void handleBoxConstraints(){
  if (lowerBound != null)   if (lowerBound.size() > 1)   currentPoint.maxElementwise(lowerBound);
 else   currentPoint.maxElementwise(lowerBound.get(0));
  if (upperBound != null)   if (upperBound.size() > 1)   currentPoint.minElementwise(upperBound);
 else   currentPoint.minElementwise(upperBound.get(0));
}","@Override public void handleBoxConstraints(){
  if (lowerBound != null)   if (lowerBound.size() > 1)   currentPoint.maxElementwiseInPlace(lowerBound);
 else   currentPoint.maxElementwiseInPlace(lowerBound.get(0));
  if (upperBound != null)   if (upperBound.size() > 1)   currentPoint.minElementwiseInPlace(upperBound);
 else   currentPoint.minElementwiseInPlace(upperBound.get(0));
}",0.962059620596206
144045,"private void solveSubProblem(SubProblem subProblem){
  subProblem.variables.set(0,subProblem.variables.size() - 1,new QuasiNewtonSolver.Builder(new SubProblemObjectiveFunction(subProblem.objectiveTerm,subProblem.consensusVariables,subProblem.multipliers,augmentedLagrangianParameter),subProblem.variables).build().solve());
}","private void solveSubProblem(SubProblem subProblem){
  subProblem.variables.set(new QuasiNewtonSolver.Builder(new SubProblemObjectiveFunction(subProblem.objectiveTerm,subProblem.consensusVariables,subProblem.multipliers,augmentedLagrangianParameter),subProblem.variables).build().solve());
}",0.9448051948051948
144046,"private NewtonSolver(AbstractBuilder<?> builder){
  super(builder);
  if (builder.linearEqualityConstraints.size() > 0) {
    linearEqualityConstraint=builder.linearEqualityConstraints.get(0);
    for (int constraintIndex=1; constraintIndex < builder.linearEqualityConstraints.size(); constraintIndex++)     linearEqualityConstraint=linearEqualityConstraint.append(builder.linearEqualityConstraints.get(constraintIndex));
  }
  try {
    currentPoint=linearEqualityConstraint.project(currentPoint);
    currentGradient=objective.getGradient(currentPoint);
    previousPoint=currentPoint;
    previousGradient=currentGradient;
  }
 catch (  SingularMatrixException e) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
catch (  NonSmoothFunctionException e) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  currentObjectiveValue=objective.getValue(currentPoint);
}","private NewtonSolver(AbstractBuilder<?> builder){
  super(builder);
  if (builder.linearEqualityConstraints.size() > 0) {
    linearEqualityConstraint=builder.linearEqualityConstraints.get(0);
    for (int constraintIndex=1; constraintIndex < builder.linearEqualityConstraints.size(); constraintIndex++)     linearEqualityConstraint=linearEqualityConstraint.append(builder.linearEqualityConstraints.get(constraintIndex));
    try {
      currentPoint=linearEqualityConstraint.project(currentPoint);
      currentGradient=objective.getGradient(currentPoint);
    }
 catch (    SingularMatrixException e) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
catch (    NonSmoothFunctionException e) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    previousPoint=currentPoint;
    previousGradient=currentGradient;
    currentObjectiveValue=objective.getValue(currentPoint);
  }
}",0.9105960264900662
144047,"@Override public Vector project(Vector point) throws SingularMatrixException {
  if (linearSystemMatrixSingularValueDecomposition == null) {
    Matrix linearSystemMatrix=new Matrix(A.getRowDimension() + A.getColumnDimension(),A.getRowDimension() + A.getColumnDimension());
    linearSystemMatrix.setSubMatrix(0,A.getColumnDimension() - 1,0,A.getColumnDimension() - 1,Matrix.generateIdentityMatrix(A.getColumnDimension()));
    linearSystemMatrix.setSubMatrix(0,A.getColumnDimension() - 1,A.getColumnDimension(),linearSystemMatrix.getColumnDimension() - 1,A.transpose());
    linearSystemMatrix.setSubMatrix(A.getColumnDimension(),linearSystemMatrix.getRowDimension() - 1,0,A.getColumnDimension() - 1,A);
    linearSystemMatrixSingularValueDecomposition=new QRDecomposition(linearSystemMatrix);
  }
  Vector linearSystemVector=Vectors.build(point.size() + A.getRowDimension(),point.type());
  linearSystemVector.set(0,point.size() - 1,point);
  linearSystemVector.set(point.size(),linearSystemVector.size() - 1,b);
  return linearSystemMatrixSingularValueDecomposition.solve(linearSystemVector).get(0,point.size() - 1);
}","@Override public Vector project(Vector point) throws SingularMatrixException {
  if (linearSystemMatrixQRDecomposition == null) {
    Matrix linearSystemMatrix=new Matrix(A.getRowDimension() + A.getColumnDimension(),A.getRowDimension() + A.getColumnDimension());
    linearSystemMatrix.setSubMatrix(0,A.getColumnDimension() - 1,0,A.getColumnDimension() - 1,Matrix.generateIdentityMatrix(A.getColumnDimension()));
    linearSystemMatrix.setSubMatrix(0,A.getColumnDimension() - 1,A.getColumnDimension(),linearSystemMatrix.getColumnDimension() - 1,A.transpose());
    linearSystemMatrix.setSubMatrix(A.getColumnDimension(),linearSystemMatrix.getRowDimension() - 1,0,A.getColumnDimension() - 1,A);
    linearSystemMatrixQRDecomposition=new QRDecomposition(linearSystemMatrix);
  }
  Vector linearSystemVector=Vectors.build(point.size() + A.getRowDimension(),point.type());
  linearSystemVector.set(0,point.size() - 1,point);
  linearSystemVector.set(point.size(),linearSystemVector.size() - 1,b);
  return linearSystemMatrixQRDecomposition.solve(linearSystemVector).get(0,point.size() - 1);
}",0.9343594386600272
144048,"@Override protected double computeValue(Vector point){
  double value=0;
  for (int term=0; term < functionTerms.size(); term++) {
    Vector termPoint=Vectors.build(functionTermVariables.get(term).length,point.type());
    termPoint.set(0,functionTermVariables.get(term).length - 1,point.get(functionTermVariables.get(term)));
    value=Math.max(value,functionTerms.get(term).computeValue(termPoint));
  }
  for (  Double constantTerm : constantTerms)   value=Math.max(value,constantTerm);
  return value;
}","@Override protected double computeValue(Vector point){
  double value=-Double.MAX_VALUE;
  for (int term=0; term < functionTerms.size(); term++) {
    Vector termPoint=Vectors.build(functionTermVariables.get(term).length,point.type());
    termPoint.set(0,functionTermVariables.get(term).length - 1,point.get(functionTermVariables.get(term)));
    value=Math.max(value,functionTerms.get(term).computeValue(termPoint));
  }
  for (  Double constantTerm : constantTerms)   value=Math.max(value,constantTerm);
  return value;
}",0.9825581395348836
144049,"@Override public void updatePoint(){
  currentPoint=previousPoint.add(currentDirection.mult(currentStepSize));
  if (lowerBound != null)   if (lowerBound.size() > 1)   currentPoint.maxElementwise(lowerBound);
 else   currentPoint.maxElementwise(lowerBound.get(0));
  if (upperBound != null)   if (upperBound.size() > 1)   currentPoint.minElementwise(upperBound);
 else   currentPoint.minElementwise(upperBound.get(0));
}","@Override public void updatePoint(){
  currentPoint=previousPoint.add(currentDirection.mult(currentStepSize));
  if (lowerBound != null)   if (lowerBound.size() > 1)   currentPoint.maxElementwiseInPlace(lowerBound);
 else   currentPoint.maxElementwiseInPlace(lowerBound.get(0));
  if (upperBound != null)   if (upperBound.size() > 1)   currentPoint.minElementwiseInPlace(upperBound);
 else   currentPoint.minElementwiseInPlace(upperBound.get(0));
}",0.967741935483871
144050,"@Override public void handleBoxConstraints(){
  if (lowerBound != null)   if (lowerBound.size() > 1)   currentPoint.maxElementwise(lowerBound);
 else   currentPoint.maxElementwise(lowerBound.get(0));
  if (upperBound != null)   if (upperBound.size() > 1)   currentPoint.minElementwise(upperBound);
 else   currentPoint.minElementwise(upperBound.get(0));
}","@Override public void handleBoxConstraints(){
  if (lowerBound != null)   if (lowerBound.size() > 1)   currentPoint.maxElementwiseInPlace(lowerBound);
 else   currentPoint.maxElementwiseInPlace(lowerBound.get(0));
  if (upperBound != null)   if (upperBound.size() > 1)   currentPoint.minElementwiseInPlace(upperBound);
 else   currentPoint.minElementwiseInPlace(upperBound.get(0));
}",0.962059620596206
144051,"private void solveSubProblem(SubProblem subProblem){
  subProblem.variables.set(0,subProblem.variables.size() - 1,new NewtonSolver.Builder(new SubProblemObjectiveFunction(subProblem.objectiveTerm,subProblem.consensusVariables,subProblem.multipliers,augmentedLagrangianParameter),subProblem.variables).build().solve());
}","private void solveSubProblem(SubProblem subProblem){
  subProblem.variables.set(0,subProblem.variables.size() - 1,new QuasiNewtonSolver.Builder(new SubProblemObjectiveFunction(subProblem.objectiveTerm,subProblem.consensusVariables,subProblem.multipliers,augmentedLagrangianParameter),subProblem.variables).build().solve());
}",0.992248062015504
144052,"@Test public void testSaxpyPlusConstant(){
  DenseVector vector1=new DenseVector(new double[]{0.53,0.32,0.91,0.05,0.01,5.63});
  DenseVector vector2=new DenseVector(new double[]{0.33,0.64,1.97,0.56,0.04});
  double alpha=2.5;
  DenseVector expectedVector=new DenseVector(new double[]{0.53 + alpha * 0.33,0.32 + alpha * 0.64,0.91 + alpha * 1.97,0.05 + alpha * 0.56,0.01 + alpha * 0.04,5.63});
  DenseVector actualVector=vector1.saxpyPlusConstant(alpha,vector2);
  Assert.assertTrue(expectedVector.equals(actualVector));
}","@Test public void testSaxpyPlusConstant(){
  DenseVector vector1=new DenseVector(new double[]{0.53,0.32,0.91,0.05,0.01,5.63});
  DenseVector vector2=new DenseVector(new double[]{0.33,0.64,1.97,0.56,0.04});
  double alpha=2.5;
  DenseVector expectedVector=new DenseVector(new double[]{0.53 + alpha * 0.33,0.32 + alpha * 0.64,0.91 + alpha * 1.97,0.05 + alpha * 0.56,0.01 + alpha * 0.04,5.63 + alpha});
  DenseVector actualVector=vector1.saxpyPlusConstant(alpha,vector2);
  Assert.assertTrue(expectedVector.equals(actualVector));
}",0.9923664122137404
144053,"private void projectOnConstraint(int constraintIndex,int numberOfObjectiveTerms,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(numberOfObjectiveTerms + constraintIndex);
  Vector multipliers=lagrangeMultipliers.get(numberOfObjectiveTerms + constraintIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(0,variableIndexes.length - 1,currentPoint.get(variableIndexes));
  multipliers.addInPlace(variables.sub(consensusVariables).mult(augmentedLagrangianParameter));
  try {
    variables=constraints.get(constraintIndex).project(consensusVariables);
  }
 catch (  NonSymmetricMatrixException e) {
    logger.error(""String_Node_Str"");
  }
catch (  NonPositiveDefiniteMatrixException e) {
    logger.error(""String_Node_Str"");
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(augmentedLagrangianParameter)));
  variableCopiesSum.addInPlace(termPoint);
}","private void projectOnConstraint(int constraintIndex,int numberOfObjectiveTerms,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(numberOfObjectiveTerms + constraintIndex);
  Vector multipliers=lagrangeMultipliers.get(numberOfObjectiveTerms + constraintIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(0,variableIndexes.length - 1,currentPoint.get(variableIndexes));
  multipliers.addInPlace(variables.sub(consensusVariables).mult(augmentedLagrangianParameter));
  try {
    variables.set(0,variables.size() - 1,constraints.get(constraintIndex).project(consensusVariables));
  }
 catch (  NonSymmetricMatrixException e) {
    logger.error(""String_Node_Str"");
  }
catch (  NonPositiveDefiniteMatrixException e) {
    logger.error(""String_Node_Str"");
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(augmentedLagrangianParameter)));
synchronized (lock) {
    variableCopiesSum.addInPlace(termPoint);
  }
}",0.9730232558139534
144054,"private void solveSubProblem(int subProblemIndex,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(subProblemIndex);
  Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(0,variableIndexes.length - 1,currentPoint.get(variableIndexes));
  multipliers.addInPlace(variables.sub(consensusVariables).mult(augmentedLagrangianParameter));
  variables.set(0,variables.size() - 1,consensusVariables.sub(multipliers.div(augmentedLagrangianParameter)));
  if (objective.getValue(variables,subProblemIndex) > 0) {
    variables=new NewtonSolver.Builder(new SubProblemObjectiveFunction(objective.getTerm(subProblemIndex),consensusVariables,multipliers),variables).build().solve();
    if (objective.getValue(variables,subProblemIndex) < 0) {
      variables=((LinearFunction)objective.getTerm(subProblemIndex)).projectToHyperplane(consensusVariables);
    }
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(augmentedLagrangianParameter)));
  variableCopiesSum.addInPlace(termPoint);
}","private void solveSubProblem(int subProblemIndex,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(subProblemIndex);
  Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(0,variableIndexes.length - 1,currentPoint.get(variableIndexes));
  multipliers.addInPlace(variables.sub(consensusVariables).mult(augmentedLagrangianParameter));
  variables.set(0,variables.size() - 1,consensusVariables.sub(multipliers.div(augmentedLagrangianParameter)));
  if (objective.getValue(variables,subProblemIndex) > 0) {
    variables.set(0,variables.size() - 1,new NewtonSolver.Builder(new SubProblemObjectiveFunction(objective.getTerm(subProblemIndex),consensusVariables,multipliers),variables).build().solve());
    if (objective.getValue(variables,subProblemIndex) < 0) {
      variables.set(0,variables.size() - 1,((LinearFunction)objective.getTerm(subProblemIndex)).projectToHyperplane(consensusVariables));
    }
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(augmentedLagrangianParameter)));
synchronized (lock) {
    variableCopiesSum.addInPlace(termPoint);
  }
}",0.9651623119556612
144055,"public int sample_one_z_uncollapsed(int domain_id,int classifier_id){
  update_before_sampling_z(domain_id,classifier_id);
  int total_cnt=hdp.prob_table_assignment_for_item(domain_id,classifier_id);
  double z_probabilities[]=new double[total_cnt];
  for (int i=0; i < total_cnt; i++) {
    z_probabilities[i]=Math.log(hdp.pdf[i].prob);
  }
  int topic_id=0;
  error_rate[total_cnt - 1]=(1.0 * disagreement[domain_id][classifier_id]) / num_example[domain_id];
  for (int i=0; i < total_cnt; i++) {
    topic_id=hdp.pdf[i].topic;
    z_probabilities[i]+=disagreement[domain_id][classifier_id] * Math.log(error_rate[topic_id]) + (num_example[domain_id] - disagreement[domain_id][classifier_id]) * Math.log(1 - error_rate[topic_id]);
  }
  for (int i=1; i < total_cnt; i++) {
    z_probabilities[i]=sumLogProb(z_probabilities[i - 1],z_probabilities[i]);
  }
  double uniform=Math.log(rm.nextDouble()) + z_probabilities[total_cnt - 1];
  int loc=total_cnt - 1;
  for (int i=0; i < total_cnt; i++) {
    if (z_probabilities[i] > uniform) {
      loc=i;
      break;
    }
  }
  update_after_sampling_z(domain_id,classifier_id,hdp.pdf[loc].table,hdp.pdf[loc].topic);
  return hdp.pdf[loc].topic;
}","public int sample_one_z_uncollapsed(int domain_id,int classifier_id){
  update_before_sampling_z(domain_id,classifier_id);
  int total_cnt=hdp.prob_table_assignment_for_item(domain_id,classifier_id);
  double z_probabilities[]=new double[total_cnt];
  for (int i=0; i < total_cnt; i++) {
    z_probabilities[i]=Math.log(hdp.pdf[i].prob);
  }
  int topic_id=0;
  error_rate[hdp.pdf[total_cnt - 1].topic]=(1.0 * disagreement[domain_id][classifier_id]) / num_example[domain_id];
  for (int i=0; i < total_cnt; i++) {
    topic_id=hdp.pdf[i].topic;
    z_probabilities[i]+=disagreement[domain_id][classifier_id] * Math.log(error_rate[topic_id]) + (num_example[domain_id] - disagreement[domain_id][classifier_id]) * Math.log(1 - error_rate[topic_id]);
  }
  for (int i=1; i < total_cnt; i++) {
    z_probabilities[i]=sumLogProb(z_probabilities[i - 1],z_probabilities[i]);
  }
  double uniform=Math.log(rm.nextDouble()) + z_probabilities[total_cnt - 1];
  int loc=total_cnt - 1;
  for (int i=0; i < total_cnt; i++) {
    if (z_probabilities[i] > uniform) {
      loc=i;
      break;
    }
  }
  update_after_sampling_z(domain_id,classifier_id,hdp.pdf[loc].table,hdp.pdf[loc].topic);
  return hdp.pdf[loc].topic;
}",0.9937473947478116
144056,"public void check_error_negative(){
  for (int i=0; i < err_cnt.length; i++) {
    if (err_cnt[i][0] < 0 || err_cnt[i][1] < 0) {
      System.out.println(""String_Node_Str"");
    }
  }
}","public void check_error_negative(){
}",0.3333333333333333
144057,"private void projectOnConstraint(int constraintIndex,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(constraintIndex);
  Vector multipliers=lagrangeMultipliers.get(constraintIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(0,variableIndexes.length - 1,currentPoint.get(variableIndexes));
  multipliers.addInPlace(variableCopies.get(constraintIndex).sub(consensusVariables).mult(augmentedLagrangianParameter));
  try {
    variables=constraints.get(constraintIndex).project(consensusVariables);
  }
 catch (  NonSymmetricMatrixException e) {
    logger.error(""String_Node_Str"");
  }
catch (  NonPositiveDefiniteMatrixException e) {
    logger.error(""String_Node_Str"");
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(augmentedLagrangianParameter)));
  variableCopiesSum.add(termPoint);
}","private void projectOnConstraint(int constraintIndex,int numberOfObjectiveTerms,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(numberOfObjectiveTerms + constraintIndex);
  Vector multipliers=lagrangeMultipliers.get(numberOfObjectiveTerms + constraintIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(0,variableIndexes.length - 1,currentPoint.get(variableIndexes));
  multipliers.addInPlace(variables.sub(consensusVariables).mult(augmentedLagrangianParameter));
  try {
    variables=constraints.get(constraintIndex).project(consensusVariables);
  }
 catch (  NonSymmetricMatrixException e) {
    logger.error(""String_Node_Str"");
  }
catch (  NonPositiveDefiniteMatrixException e) {
    logger.error(""String_Node_Str"");
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(augmentedLagrangianParameter)));
  variableCopiesSum.addInPlace(termPoint);
}",0.9449901768172888
144058,"private void solveSubProblem(int subProblemIndex,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(subProblemIndex);
  Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(0,variableIndexes.length - 1,currentPoint.get(variableIndexes));
  multipliers.addInPlace(variableCopies.get(subProblemIndex).sub(consensusVariables).mult(augmentedLagrangianParameter));
  variables.set(0,variables.size() - 1,consensusVariables.sub(multipliers.div(augmentedLagrangianParameter)));
  if (objective.getValue(variables,subProblemIndex) > 0) {
    variables=new NewtonSolver.Builder(new SubProblemObjectiveFunction(objective.getTerm(subProblemIndex),consensusVariables,multipliers),variables).build().solve();
    if (objective.getValue(variables,subProblemIndex) < 0) {
      variables=((LinearFunction)objective.getTerm(subProblemIndex)).projectToHyperplane(consensusVariables);
    }
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(augmentedLagrangianParameter)));
  variableCopiesSum.addInPlace(termPoint);
}","private void solveSubProblem(int subProblemIndex,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(subProblemIndex);
  Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(0,variableIndexes.length - 1,currentPoint.get(variableIndexes));
  multipliers.addInPlace(variables.sub(consensusVariables).mult(augmentedLagrangianParameter));
  variables.set(0,variables.size() - 1,consensusVariables.sub(multipliers.div(augmentedLagrangianParameter)));
  if (objective.getValue(variables,subProblemIndex) > 0) {
    variables=new NewtonSolver.Builder(new SubProblemObjectiveFunction(objective.getTerm(subProblemIndex),consensusVariables,multipliers),variables).build().solve();
    if (objective.getValue(variables,subProblemIndex) < 0) {
      variables=((LinearFunction)objective.getTerm(subProblemIndex)).projectToHyperplane(consensusVariables);
    }
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(augmentedLagrangianParameter)));
  variableCopiesSum.addInPlace(termPoint);
}",0.9886547811993516
144059,"private void performIterationUpdates(){
  previousPoint=currentPoint;
  previousGradient=currentGradient;
  previousObjectiveValue=currentObjectiveValue;
  Vector variableCopiesSum=Vectors.build(currentPoint.size(),currentPoint.type());
  List<Callable<Object>> subProblemTasks=new ArrayList<>();
  for (int subProblemIndex=0; subProblemIndex < objective.getNumberOfTerms(); subProblemIndex++) {
    int[] variableIndexes=objective.getTermVariables(subProblemIndex);
    final int currentSubProblemIndex=subProblemIndex;
    subProblemTasks.add(Executors.callable(() -> solveSubProblem(currentSubProblemIndex,variableIndexes,variableCopiesSum)));
  }
  for (int constraintIndex=0; constraintIndex < constraints.size(); constraintIndex++) {
    int[] variableIndexes=constraintsVariablesIndexes.get(constraintIndex);
    final int currentConstraintIndex=constraintIndex;
    subProblemTasks.add(Executors.callable(() -> projectOnConstraint(currentConstraintIndex,variableIndexes,variableCopiesSum)));
  }
  try {
    taskExecutor.invokeAll(subProblemTasks);
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"");
  }
  currentPoint=variableCopiesSum.divElementwise(variableCopiesCounts);
  for (int variableIndex=0; variableIndex < currentPoint.size(); variableIndex++)   if (currentPoint.get(variableIndex) < 0)   currentPoint.set(variableIndex,0);
 else   if (currentPoint.get(variableIndex) > 1)   currentPoint.set(variableIndex,1);
  currentGradient=objective.getGradient(currentPoint);
  currentObjectiveValue=objective.getValue(currentPoint);
}","private void performIterationUpdates(){
  previousPoint=currentPoint;
  previousGradient=currentGradient;
  previousObjectiveValue=currentObjectiveValue;
  Vector variableCopiesSum=Vectors.build(currentPoint.size(),currentPoint.type());
  List<Callable<Object>> subProblemTasks=new ArrayList<>();
  for (int subProblemIndex=0; subProblemIndex < objective.getNumberOfTerms(); subProblemIndex++) {
    int[] variableIndexes=objective.getTermVariables(subProblemIndex);
    final int currentSubProblemIndex=subProblemIndex;
    subProblemTasks.add(Executors.callable(() -> solveSubProblem(currentSubProblemIndex,variableIndexes,variableCopiesSum)));
  }
  final int numberOfObjectiveTerms=objective.getNumberOfTerms();
  for (int constraintIndex=0; constraintIndex < constraints.size(); constraintIndex++) {
    int[] variableIndexes=constraintsVariablesIndexes.get(constraintIndex);
    final int currentConstraintIndex=constraintIndex;
    subProblemTasks.add(Executors.callable(() -> projectOnConstraint(currentConstraintIndex,numberOfObjectiveTerms,variableIndexes,variableCopiesSum)));
  }
  try {
    taskExecutor.invokeAll(subProblemTasks);
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"");
  }
  currentPoint=variableCopiesSum.divElementwise(variableCopiesCounts);
  for (int variableIndex=0; variableIndex < currentPoint.size(); variableIndex++)   if (currentPoint.get(variableIndex) < 0)   currentPoint.set(variableIndex,0);
 else   if (currentPoint.get(variableIndex) > 1)   currentPoint.set(variableIndex,1);
  currentGradient=objective.getGradient(currentPoint);
  currentObjectiveValue=objective.getValue(currentPoint);
}",0.9727554179566564
144060,"@Override public Vector project(Vector point) throws NonSymmetricMatrixException, NonPositiveDefiniteMatrixException {
  if (linearSystemMatrixCholesky == null) {
    Matrix linearSystemMatrix=new Matrix(A.getRowDimension() + A.getColumnDimension(),A.getRowDimension() + A.getColumnDimension());
    linearSystemMatrix.setSubMatrix(0,A.getColumnDimension() - 1,0,A.getColumnDimension() - 1,Matrix.generateIdentityMatrix(A.getColumnDimension()));
    linearSystemMatrix.setSubMatrix(0,A.getColumnDimension() - 1,A.getColumnDimension(),linearSystemMatrix.getColumnDimension() - 1,A.transpose());
    linearSystemMatrix.setSubMatrix(A.getColumnDimension(),linearSystemMatrix.getRowDimension() - 1,0,A.getColumnDimension() - 1,A);
    linearSystemMatrixCholesky=new CholeskyDecomposition(linearSystemMatrix);
  }
  Vector linearSystemVector=Vectors.build(point.size() + A.getRowDimension(),point.type());
  linearSystemVector.set(0,point.size() - 1,point);
  linearSystemVector.set(point.size(),linearSystemVector.size() - 1,b);
  return linearSystemMatrixCholesky.solve(linearSystemVector).get(0,point.size() - 1);
}","@Override public Vector project(Vector point) throws NonSymmetricMatrixException, NonPositiveDefiniteMatrixException {
  if (linearSystemMatrixCholesky == null) {
    Matrix linearSystemMatrix=new Matrix(A.getRowDimension() + A.getColumnDimension(),A.getRowDimension() + A.getColumnDimension());
    linearSystemMatrix.setSubMatrix(0,A.getColumnDimension() - 1,0,A.getColumnDimension() - 1,Matrix.generateIdentityMatrix(A.getColumnDimension()));
    linearSystemMatrix.setSubMatrix(0,A.getColumnDimension() - 1,A.getColumnDimension(),linearSystemMatrix.getColumnDimension() - 1,A.transpose());
    linearSystemMatrix.setSubMatrix(A.getColumnDimension(),linearSystemMatrix.getRowDimension() - 1,0,A.getColumnDimension() - 1,A);
    linearSystemMatrixCholesky=new SingularValueDecomposition(linearSystemMatrix);
  }
  Vector linearSystemVector=Vectors.build(point.size() + A.getRowDimension(),point.type());
  linearSystemVector.set(0,point.size() - 1,point);
  linearSystemVector.set(point.size(),linearSystemVector.size() - 1,b);
  return linearSystemMatrixCholesky.solve(linearSystemVector).get(0,point.size() - 1);
}",0.990587180636486
144061,"@Test public void testSaxpyPlusConstant(){
  int vectorSize=1000;
  SparseVector vector1=new SparseVector(vectorSize + 1,new int[]{1,5,8,35,56,1000},new double[]{0.53,0.32,0.91,0.05,0,5.63});
  SparseVector vector2=new SparseVector(vectorSize,new int[]{2,5,6,8},new double[]{0.33,0.64,1.97,0.56});
  double alpha=2.5;
  SparseVector expectedVector=new SparseVector(vectorSize + 1,new int[]{1,2,5,6,8,35,56,1000},new double[]{0.53,alpha * 0.33,0.32 + alpha * 0.64,alpha * 1.97,0.91 + alpha * 0.56,0.05,0,5.63});
  SparseVector actualVector=vector1.saxpyPlusConstant(alpha,vector2);
  Assert.assertTrue(expectedVector.equals(actualVector));
}","@Test public void testSaxpyPlusConstant(){
  int vectorSize=1000;
  SparseVector vector1=new SparseVector(vectorSize + 1,new int[]{1,5,8,35,56,1000},new double[]{0.53,0.32,0.91,0.05,0,5.63});
  SparseVector vector2=new SparseVector(vectorSize,new int[]{2,5,6,8},new double[]{0.33,0.64,1.97,0.56});
  double alpha=2.5;
  SparseVector expectedVector=new SparseVector(vectorSize + 1,new int[]{1,2,5,6,8,35,56,1000},new double[]{0.53,alpha * 0.33,0.32 + alpha * 0.64,alpha * 1.97,0.91 + alpha * 0.56,0.05,0,5.63 + alpha});
  SparseVector actualVector=vector1.saxpyPlusConstant(alpha,vector2);
  Assert.assertTrue(expectedVector.equals(actualVector));
}",0.9937888198757764
144062,"@Override public Vector.VectorElement next(){
  if (!hasNext())   throw new NoSuchElementException();
  Vector.VectorElement vectorElement=new Vector.VectorElement(this.nextIndex,SparseVector.this.indexes[this.nextIndex]);
  this.nextIndex++;
  return vectorElement;
}","@Override public Vector.VectorElement next(){
  if (!hasNext())   throw new NoSuchElementException();
  Vector.VectorElement vectorElement=new Vector.VectorElement(SparseVector.this.indexes[this.nextIndex],SparseVector.this.values[this.nextIndex]);
  this.nextIndex++;
  return vectorElement;
}",0.9359430604982206
144063,"private void performIterationUpdates(){
  previousPoint=currentPoint;
  previousGradient=currentGradient;
  previousObjectiveValue=currentObjectiveValue;
  Vector variableCopiesSum=Vectors.build(currentPoint.size(),currentPoint.type());
  for (int subProblemIndex=0; subProblemIndex < objective.getNumberOfTerms(); subProblemIndex++) {
    int[] variableIndexes=objective.getTermVariables(subProblemIndex);
    final int currentSubProblemIndex=subProblemIndex;
    taskExecutor.submit(() -> solveSubProblem(currentSubProblemIndex,variableIndexes,variableCopiesSum));
  }
  for (int constraintIndex=0; constraintIndex < constraints.size(); constraintIndex++) {
    int[] variableIndexes=constraintsVariablesIndexes.get(constraintIndex);
    final int currentConstraintIndex=constraintIndex;
    taskExecutor.submit(() -> projectOnConstraint(currentConstraintIndex,variableIndexes,variableCopiesSum));
  }
  currentPoint=variableCopiesSum.divElementwise(variableCopiesCounts);
  for (int variableIndex=0; variableIndex < currentPoint.size(); variableIndex++)   if (currentPoint.get(variableIndex) < 0)   currentPoint.set(variableIndex,0);
 else   if (currentPoint.get(variableIndex) > 1)   currentPoint.set(variableIndex,1);
  currentGradient=objective.getGradient(currentPoint);
  currentObjectiveValue=objective.getValue(currentPoint);
}","private void performIterationUpdates(){
  previousPoint=currentPoint;
  previousGradient=currentGradient;
  previousObjectiveValue=currentObjectiveValue;
  Vector variableCopiesSum=Vectors.build(currentPoint.size(),currentPoint.type());
  List<Callable<Object>> subProblemTasks=new ArrayList<>();
  for (int subProblemIndex=0; subProblemIndex < objective.getNumberOfTerms(); subProblemIndex++) {
    int[] variableIndexes=objective.getTermVariables(subProblemIndex);
    final int currentSubProblemIndex=subProblemIndex;
    subProblemTasks.add(Executors.callable(() -> solveSubProblem(currentSubProblemIndex,variableIndexes,variableCopiesSum)));
  }
  for (int constraintIndex=0; constraintIndex < constraints.size(); constraintIndex++) {
    int[] variableIndexes=constraintsVariablesIndexes.get(constraintIndex);
    final int currentConstraintIndex=constraintIndex;
    subProblemTasks.add(Executors.callable(() -> projectOnConstraint(currentConstraintIndex,variableIndexes,variableCopiesSum)));
  }
  try {
    taskExecutor.invokeAll(subProblemTasks);
  }
 catch (  InterruptedException e) {
    logger.error(""String_Node_Str"");
  }
  currentPoint=variableCopiesSum.divElementwise(variableCopiesCounts);
  for (int variableIndex=0; variableIndex < currentPoint.size(); variableIndex++)   if (currentPoint.get(variableIndex) < 0)   currentPoint.set(variableIndex,0);
 else   if (currentPoint.get(variableIndex) > 1)   currentPoint.set(variableIndex,1);
  currentGradient=objective.getGradient(currentPoint);
  currentObjectiveValue=objective.getValue(currentPoint);
}",0.5674002751031637
144064,"public void gibbs_one_iteration_uncollapsed(){
  sample_error_rate_uncollapsed();
  sample_z_uncollapsed();
  sample_tables_topic_uncollapsed();
  sample_l_uncolapsed();
}","public void gibbs_one_iteration_uncollapsed(){
  sample_error_rate_uncollapsed();
  check_error_negative();
  sample_z_uncollapsed();
  check_error_negative();
  sample_tables_topic_uncollapsed();
  check_error_negative();
  sample_l_uncolapsed();
  check_error_negative();
}",0.515695067264574
144065,"public void gibbs_one_iteration_collapsed(){
  sample_z_collapsed();
  sample_tables_topic_collapsed();
  sample_l_colapsed();
}","public void gibbs_one_iteration_collapsed(){
  sample_z_collapsed();
  check_error_negative();
  sample_tables_topic_collapsed();
  check_error_negative();
  sample_l_colapsed();
  check_error_negative();
}",0.7664670658682635
144066,"public void update_after_sampling_tables_topic(int domain_id,int table_id,int topic_id,int cls_ids[]){
  hdp.add_tobles_topic_assignment(domain_id,table_id,topic_id);
  for (  int classifier_id : cls_ids) {
    err_cnt[topic_id][0]+=disagreement[domain_id][classifier_id];
    err_cnt[topic_id][1]+=(num_example[domain_id] - disagreement[domain_id][classifier_id]);
    sum_err[topic_id]+=num_example[domain_id];
  }
}","public void update_after_sampling_tables_topic(int domain_id,int table_id,int topic_id,int cls_ids[]){
  hdp.add_tobles_topic_assignment(domain_id,table_id,topic_id);
  for (  int classifier_id : cls_ids) {
    z[domain_id][classifier_id]=topic_id;
    err_cnt[topic_id][0]+=disagreement[domain_id][classifier_id];
    err_cnt[topic_id][1]+=(num_example[domain_id] - disagreement[domain_id][classifier_id]);
    sum_err[topic_id]+=num_example[domain_id];
  }
}",0.9521640091116174
144067,"private void solveSubProblem(int subProblemIndex,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(subProblemIndex);
  Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(0,variableIndexes.length - 1,currentPoint.get(variableIndexes));
  multipliers.addInPlace(variableCopies.get(subProblemIndex).sub(consensusVariables).mult(augmentedLagrangianParameter));
  variables.set(0,variables.size() - 1,consensusVariables.sub(multipliers.div(augmentedLagrangianParameter)));
  if (objective.getValue(variables,subProblemIndex) > 0) {
    variables=new NewtonSolver.Builder(new SubProblemObjectiveFunction(objective.getTerm(subProblemIndex),consensusVariables,multipliers),variables).build().solve();
    if (objective.getValue(variables,subProblemIndex) < 0) {
      variables=((LinearFunction)objective.getTerm(subProblemIndex)).projectToHyperplane(consensusVariables);
    }
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(augmentedLagrangianParameter)));
  variableCopiesSum.add(termPoint);
}","private void solveSubProblem(int subProblemIndex,int[] variableIndexes,Vector variableCopiesSum){
  Vector variables=variableCopies.get(subProblemIndex);
  Vector multipliers=lagrangeMultipliers.get(subProblemIndex);
  Vector consensusVariables=Vectors.build(variableIndexes.length,currentPoint.type());
  consensusVariables.set(0,variableIndexes.length - 1,currentPoint.get(variableIndexes));
  multipliers.addInPlace(variableCopies.get(subProblemIndex).sub(consensusVariables).mult(augmentedLagrangianParameter));
  variables.set(0,variables.size() - 1,consensusVariables.sub(multipliers.div(augmentedLagrangianParameter)));
  if (objective.getValue(variables,subProblemIndex) > 0) {
    variables=new NewtonSolver.Builder(new SubProblemObjectiveFunction(objective.getTerm(subProblemIndex),consensusVariables,multipliers),variables).build().solve();
    if (objective.getValue(variables,subProblemIndex) < 0) {
      variables=((LinearFunction)objective.getTerm(subProblemIndex)).projectToHyperplane(consensusVariables);
    }
  }
  Vector termPoint=Vectors.build(currentPoint.size(),currentPoint.type());
  termPoint.set(variableIndexes,variables.add(multipliers.div(augmentedLagrangianParameter)));
  variableCopiesSum.addInPlace(termPoint);
}",0.9971853638922396
144068,"private void sampleErrorRates(int iterationNumber){
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    int disagreementCount=0;
    int zCount=0;
    for (int p=0; p < numberOfDomains; p++) {
      for (int j=0; j < numberOfFunctions; j++) {
        if (zSamples[iterationNumber][p][j] == k) {
          for (int i=0; i < numberOfDataSamples[p]; i++)           if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           disagreementCount++;
          zCount+=numberOfDataSamples[p];
        }
      }
    }
    errorRateSamples[iterationNumber + 1][k]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
  }
}","private void sampleErrorRates(int iterationNumber){
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    int disagreementCount=0;
    int zCount=0;
    for (int p=0; p < numberOfDomains; p++) {
      for (int j=0; j < numberOfFunctions; j++) {
        if (zSamples[iterationNumber][p][j] == k) {
          for (int i=0; i < numberOfDataSamples[p]; i++)           if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           disagreementCount++;
          zCount+=numberOfDataSamples[p];
        }
      }
    }
    errorRateSamples[iterationNumber + 1][k]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
  }
  for (int p=0; p < numberOfDomains; p++) {
    int numberOfErrorRatesBelowChance=0;
    for (int j=0; j < numberOfFunctions; j++)     if (errorRateSamples[iterationNumber + 1][zSamples[iterationNumber][p][j]] < 0.5)     numberOfErrorRatesBelowChance++;
    if (numberOfErrorRatesBelowChance < numberOfFunctions / 2.0)     for (int j=0; j < numberOfFunctions; j++)     errorRateSamples[iterationNumber + 1][zSamples[iterationNumber][p][j]]=1 - errorRateSamples[iterationNumber + 1][zSamples[iterationNumber][p][j]];
  }
}",0.7277486910994765
144069,"private void sampleInternalTableTopicsAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    sum_2[k]=0;
    for (int j=0; j < numberOfFunctions; j++) {
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[iterationNumber][p][j] == k)         sum_2[k]+=disagreements[j][p];
      }
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    int tables_ids[]=hdp.get_tables_taken(p);
    for (    int table_id : tables_ids) {
      int previous_topic=hdp.get_topic_table(p,table_id);
      int itm_lc[]=hdp.remove_tables_topic_assignment(p,table_id);
      double smc_1=0;
      double smc_2=0;
      for (      int j : itm_lc) {
        sum_1[previous_topic]-=numberOfDataSamples[p];
        smc_1+=numberOfDataSamples[p];
        sum_2[previous_topic]-=disagreements[j][p];
        smc_2+=disagreements[j][p];
      }
      int total_cnt=hdp.prob_topic_assignment_for_table(p,table_id);
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(hdp.pdf[i].prob);
      }
      for (int i=0; i < total_cnt - 1; i++) {
        int k=hdp.pdf[i].topic;
        double alpha=alpha_e + sum_2[k] + smc_2;
        double beta=beta_e + sum_1[k] - sum_2[k] + smc_1 - smc_2;
        z_probabilities[i]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[k],beta_e + sum_1[k] - sum_2[k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + smc_2,beta_e + smc_1 - smc_2) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      int sample_topic=hdp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          sample_topic=hdp.pdf[i].topic;
          break;
        }
      }
      hdp.add_tobles_topic_assignment(p,table_id,sample_topic);
      sum_1[sample_topic]+=smc_1;
      sum_2[sample_topic]+=smc_2;
      for (      int j : itm_lc) {
        zSamples[iterationNumber][p][j]=sample_topic;
      }
    }
  }
}","private void sampleInternalTableTopicsAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    int tables_ids[]=hdp.get_tables_taken(p);
    for (    int table_id : tables_ids) {
      int previous_topic=hdp.get_topic_table(p,table_id);
      int itm_lc[]=hdp.remove_tables_topic_assignment(p,table_id);
      double smc_1=0;
      double smc_2=0;
      for (      int j : itm_lc) {
        sum_1[previous_topic]-=numberOfDataSamples[p];
        smc_1+=numberOfDataSamples[p];
        sum_2[previous_topic]-=disagreements[j][p];
        smc_2+=disagreements[j][p];
      }
      int total_cnt=hdp.prob_topic_assignment_for_table(p,table_id);
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(hdp.pdf[i].prob);
      }
      for (int i=0; i < total_cnt - 1; i++) {
        int k=hdp.pdf[i].topic;
        double alpha=alpha_e + sum_2[k] + smc_2;
        double beta=beta_e + sum_1[k] - sum_2[k] + smc_1 - smc_2;
        z_probabilities[i]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[k],beta_e + sum_1[k] - sum_2[k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + smc_2,beta_e + smc_1 - smc_2) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      int sample_topic=hdp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          sample_topic=hdp.pdf[i].topic;
          break;
        }
      }
      hdp.add_tobles_topic_assignment(p,table_id,sample_topic);
      sum_1[sample_topic]+=smc_1;
      sum_2[sample_topic]+=smc_2;
      for (      int j : itm_lc) {
        zSamples[iterationNumber][p][j]=sample_topic;
      }
    }
  }
}",0.1269700332963374
144070,"private void sampleTableTopic(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    int tables_ids[]=hdp.get_tables_taken(p);
    for (    int table_id : tables_ids) {
      int previous_topic=hdp.get_topic_table(p,table_id);
      int itm_lc[]=hdp.remove_tables_topic_assignment(p,table_id);
      double smc_1=0;
      double smc_2=0;
      for (      int j : itm_lc) {
        for (int i=0; i < numberOfDataSamples[p]; i++) {
          if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           smc_2++;
        }
        smc_1+=numberOfDataSamples[p];
      }
      int total_cnt=hdp.prob_topic_assignment_for_table(p,table_id);
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(hdp.pdf[i].prob);
      }
      for (int i=0; i < total_cnt - 1; i++) {
        int k=hdp.pdf[i].topic;
        z_probabilities[i]+=smc_2 * Math.log(errorRateSamples[iterationNumber + 1][k]);
        z_probabilities[i]+=(smc_1 - smc_2) * Math.log(1 - errorRateSamples[iterationNumber + 1][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + smc_2,beta_e + smc_1 - smc_2) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      int sample_topic=hdp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          sample_topic=hdp.pdf[i].topic;
          break;
        }
      }
      hdp.add_tobles_topic_assignment(p,table_id,sample_topic);
      for (      int j : itm_lc) {
        zSamples[iterationNumber + 1][p][j]=sample_topic;
      }
    }
  }
}","private void sampleTableTopic(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    int tables_ids[]=hdp.get_tables_taken(p);
    for (    int table_id : tables_ids) {
      int itm_lc[]=hdp.remove_tables_topic_assignment(p,table_id);
      double smc_1=0;
      double smc_2=0;
      for (      int j : itm_lc) {
        for (int i=0; i < numberOfDataSamples[p]; i++) {
          if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           smc_2++;
        }
        smc_1+=numberOfDataSamples[p];
      }
      int total_cnt=hdp.prob_topic_assignment_for_table(p,table_id);
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(hdp.pdf[i].prob);
      }
      for (int i=0; i < total_cnt - 1; i++) {
        int k=hdp.pdf[i].topic;
        z_probabilities[i]+=smc_2 * Math.log(errorRateSamples[iterationNumber + 1][k]);
        z_probabilities[i]+=(smc_1 - smc_2) * Math.log(1 - errorRateSamples[iterationNumber + 1][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + smc_2,beta_e + smc_1 - smc_2) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      int sample_topic=hdp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          sample_topic=hdp.pdf[i].topic;
          break;
        }
      }
      hdp.add_tobles_topic_assignment(p,table_id,sample_topic);
      for (      int j : itm_lc) {
        zSamples[iterationNumber + 1][p][j]=sample_topic;
      }
    }
  }
}",0.984126984126984
144071,"private void sampleLabelsAndBurnWithCollapsedErrorRates(int iterationNumber){
  int topics[]=hdp.get_topics();
  TIntIntHashMap hmp=new TIntIntHashMap();
  for (int i=0; i < topics.length; i++) {
    hmp.put(topics[i],i);
  }
  for (int p=0; p < numberOfDomains; p++) {
    for (int i=0; i < numberOfDataSamples[p]; i++) {
      double mistake[][]=new double[topics.length][2];
      double matches[][]=new double[topics.length][2];
      for (int j=0; j < numberOfFunctions; j++) {
        if (functionOutputsArray[j][p][i] == 1) {
          mistake[hmp.get(zSamples[iterationNumber][p][j])][0]+=1;
          matches[hmp.get(zSamples[iterationNumber][p][j])][1]+=1;
        }
 else {
          mistake[hmp.get(zSamples[iterationNumber][p][j])][1]+=1;
          matches[hmp.get(zSamples[iterationNumber][p][j])][0]+=1;
        }
        if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i]) {
          disagreements[j][p]--;
          sum_2[zSamples[iterationNumber][j][p]]--;
        }
        sum_1[zSamples[iterationNumber][j][p]]--;
      }
      double p1=Math.log(priorSamples[iterationNumber][p]);
      double p0=Math.log(1 - priorSamples[iterationNumber][p]);
      for (      int tp : topics) {
        for (int l=0; l < mistake[hmp.get(tp)][0]; l++) {
          p0+=Math.log(alpha_e + sum_2[tp] + l);
        }
        for (int l=0; l < mistake[hmp.get(tp)][1]; l++) {
          p1+=Math.log(alpha_e + sum_2[tp] + l);
        }
        for (int l=0; l < matches[hmp.get(tp)][0]; l++) {
          p0+=Math.log(beta_e + sum_1[tp] - sum_2[tp] + l);
        }
        for (int l=0; l < matches[hmp.get(tp)][1]; l++) {
          p1+=Math.log(beta_e + sum_1[tp] - sum_2[tp] + l);
        }
      }
      double logsum=MatrixUtilities.computeLogSumExp(p1,p0);
      labelsSamples[iterationNumber][p][i]=randomDataGenerator.nextBinomial(1,Math.exp(p1 - logsum));
      for (int j=0; j < numberOfFunctions; j++) {
        if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i]) {
          disagreements[j][p]++;
          sum_2[zSamples[iterationNumber][j][p]]++;
        }
        sum_1[zSamples[iterationNumber][j][p]]++;
      }
    }
  }
}","private void sampleLabelsAndBurnWithCollapsedErrorRates(int iterationNumber){
  int topics[]=hdp.get_topics();
  TIntIntHashMap hmp=new TIntIntHashMap();
  for (int i=0; i < topics.length; i++) {
    hmp.put(topics[i],i);
  }
  for (int p=0; p < numberOfDomains; p++) {
    for (int i=0; i < numberOfDataSamples[p]; i++) {
      double mistake[][]=new double[topics.length][2];
      double matches[][]=new double[topics.length][2];
      for (int j=0; j < numberOfFunctions; j++) {
        if (functionOutputsArray[j][p][i] == 1) {
          mistake[hmp.get(zSamples[iterationNumber][p][j])][0]+=1;
          matches[hmp.get(zSamples[iterationNumber][p][j])][1]+=1;
        }
 else {
          mistake[hmp.get(zSamples[iterationNumber][p][j])][1]+=1;
          matches[hmp.get(zSamples[iterationNumber][p][j])][0]+=1;
        }
        if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i]) {
          disagreements[j][p]--;
          sum_2[zSamples[iterationNumber][p][j]]--;
        }
        sum_1[zSamples[iterationNumber][p][j]]--;
      }
      double p1=Math.log(priorSamples[iterationNumber][p]);
      double p0=Math.log(1 - priorSamples[iterationNumber][p]);
      for (      int tp : topics) {
        for (int l=0; l < mistake[hmp.get(tp)][0]; l++) {
          p0+=Math.log(alpha_e + sum_2[tp] + l);
        }
        for (int l=0; l < mistake[hmp.get(tp)][1]; l++) {
          p1+=Math.log(alpha_e + sum_2[tp] + l);
        }
        for (int l=0; l < matches[hmp.get(tp)][0]; l++) {
          p0+=Math.log(beta_e + sum_1[tp] - sum_2[tp] + l);
        }
        for (int l=0; l < matches[hmp.get(tp)][1]; l++) {
          p1+=Math.log(beta_e + sum_1[tp] - sum_2[tp] + l);
        }
      }
      double logsum=MatrixUtilities.computeLogSumExp(p1,p0);
      labelsSamples[iterationNumber][p][i]=randomDataGenerator.nextBinomial(1,Math.exp(p1 - logsum));
      for (int j=0; j < numberOfFunctions; j++) {
        if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i]) {
          disagreements[j][p]++;
          sum_2[zSamples[iterationNumber][p][j]]++;
        }
        sum_1[zSamples[iterationNumber][p][j]]++;
      }
    }
  }
}",0.9945130315500684
144072,"public void performGibbsSampling(){
  for (int iterationNumber=0; iterationNumber < burnInIterations; iterationNumber++) {
    samplePriorsAndBurn(0);
    sampleLabelsAndBurnWithCollapsedErrorRates(0);
    sampleZAndBurnWithCollapsedErrorRates(0);
    sampleInternalTableTopicsAndBurnWithCollapsedErrorRates(0);
  }
  for (int iterationNumber=0; iterationNumber < numberOfSamples - 1; iterationNumber++) {
    for (int i=0; i < thinning; i++) {
      samplePriorsAndBurn(iterationNumber);
      sampleErrorRatesAndBurn(iterationNumber);
      sampleZAndBurn(iterationNumber);
      sampleTableTopicAndBurn(iterationNumber);
      sampleLabelsAndBurn(iterationNumber);
    }
    samplePriors(iterationNumber);
    sampleErrorRates(iterationNumber);
    sampleZ(iterationNumber);
    sampleTableTopic(iterationNumber);
    sampleLabels(iterationNumber);
  }
  Set<Integer> uniqueClusters=new HashSet<>();
  for (int p=0; p < numberOfDomains; p++)   for (int j=0; j < numberOfFunctions; j++)   uniqueClusters.add(zSamples[zSamples.length - 1][p][j]);
  System.out.println(""String_Node_Str"" + uniqueClusters.size());
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    for (int p=0; p < numberOfDomains; p++) {
      int numberOfPhiBelowChance=0;
      for (int j=0; j < numberOfFunctions; j++)       if (errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]] < 0.5)       numberOfPhiBelowChance++;
      if (numberOfPhiBelowChance < numberOfFunctions / 2.0) {
        priorSamples[sampleNumber][p]=1 - priorSamples[sampleNumber][p];
        for (int j=0; j < numberOfFunctions; j++)         errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]]=1 - errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]];
      }
      priorMeans[p]+=priorSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++)       errorRateMeans[p][j]+=errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       labelMeans[p][i]+=labelsSamples[sampleNumber][p][i];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    priorMeans[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateMeans[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelMeans[p][i]/=numberOfSamples;
    for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
      double temp=priorSamples[sampleNumber][p] - priorMeans[p];
      priorVariances[p]+=temp * temp;
      for (int j=0; j < numberOfFunctions; j++) {
        temp=errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]] - errorRateMeans[p][j];
        errorRateVariances[p][j]+=temp * temp;
      }
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        temp=labelsSamples[sampleNumber][p][i] - labelMeans[p][i];
        labelVariances[p][i]+=temp * temp;
      }
    }
    priorVariances[p]/=(numberOfIterations - burnInIterations - 1);
    for (int j=0; j < numberOfFunctions; j++)     errorRateVariances[p][j]/=(numberOfIterations - burnInIterations - 1);
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelVariances[p][i]/=(numberOfIterations - burnInIterations - 1);
  }
}","public void performGibbsSampling(){
  for (int iterationNumber=0; iterationNumber < burnInIterations; iterationNumber++) {
    samplePriorsAndBurn(0);
    sampleLabelsAndBurnWithCollapsedErrorRates(0);
    sampleZAndBurnWithCollapsedErrorRates(0);
    sampleInternalTableTopicsAndBurnWithCollapsedErrorRates(0);
  }
  for (int iterationNumber=0; iterationNumber < numberOfSamples - 1; iterationNumber++) {
    for (int i=0; i < thinning; i++) {
      samplePriorsAndBurn(iterationNumber);
      sampleErrorRatesAndBurn(iterationNumber);
      sampleZAndBurn(iterationNumber);
      sampleTableTopicAndBurn(iterationNumber);
      sampleLabelsAndBurn(iterationNumber);
    }
    samplePriors(iterationNumber);
    sampleErrorRates(iterationNumber);
    sampleZ(iterationNumber);
    sampleTableTopic(iterationNumber);
    sampleLabels(iterationNumber);
  }
  Set<Integer> uniqueClusters=new HashSet<>();
  for (int p=0; p < numberOfDomains; p++)   for (int j=0; j < numberOfFunctions; j++)   uniqueClusters.add(zSamples[zSamples.length - 1][p][j]);
  numberOfClusters=uniqueClusters.size();
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    for (int p=0; p < numberOfDomains; p++) {
      int numberOfPhiBelowChance=0;
      for (int j=0; j < numberOfFunctions; j++)       if (errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]] < 0.5)       numberOfPhiBelowChance++;
      if (numberOfPhiBelowChance < numberOfFunctions / 2.0) {
        priorSamples[sampleNumber][p]=1 - priorSamples[sampleNumber][p];
        for (int j=0; j < numberOfFunctions; j++)         errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]]=1 - errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]];
      }
      priorMeans[p]+=priorSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++)       errorRateMeans[p][j]+=errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       labelMeans[p][i]+=labelsSamples[sampleNumber][p][i];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    priorMeans[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateMeans[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelMeans[p][i]/=numberOfSamples;
    for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
      double temp=priorSamples[sampleNumber][p] - priorMeans[p];
      priorVariances[p]+=temp * temp;
      for (int j=0; j < numberOfFunctions; j++) {
        temp=errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]] - errorRateMeans[p][j];
        errorRateVariances[p][j]+=temp * temp;
      }
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        temp=labelsSamples[sampleNumber][p][i] - labelMeans[p][i];
        labelVariances[p][i]+=temp * temp;
      }
    }
    priorVariances[p]/=(numberOfIterations - burnInIterations - 1);
    for (int j=0; j < numberOfFunctions; j++)     errorRateVariances[p][j]/=(numberOfIterations - burnInIterations - 1);
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelVariances[p][i]/=(numberOfIterations - burnInIterations - 1);
  }
}",0.986708365910868
144073,"public ErrorEstimationDomainsFastHDPMixedGraphicalModel(List<boolean[][]> functionOutputs,int numberOfIterations,int thinning,double alpha){
  this.alpha=alpha;
  this.numberOfIterations=numberOfIterations;
  burnInIterations=numberOfIterations * 9 / 10;
  this.thinning=thinning;
  numberOfFunctions=functionOutputs.get(0)[0].length;
  numberOfDomains=functionOutputs.size();
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  hdp=new FastHDPPrior(numberOfDomains,numberOfFunctions,alpha,gamma);
  numberOfSamples=(numberOfIterations - burnInIterations) / thinning;
  priorSamples=new double[numberOfSamples][numberOfDomains];
  errorRateSamples=new double[numberOfSamples][numberOfDomains * numberOfFunctions];
  zSamples=new int[numberOfSamples][numberOfDomains][numberOfFunctions];
  labelsSamples=new int[numberOfSamples][numberOfDomains][];
  disagreements=new double[numberOfFunctions][numberOfDomains];
  sum_1=new double[numberOfDomains * numberOfFunctions];
  sum_2=new double[numberOfDomains * numberOfFunctions];
  priorMeans=new double[numberOfDomains];
  priorVariances=new double[numberOfDomains];
  labelMeans=new double[numberOfDomains][];
  labelVariances=new double[numberOfDomains][];
  errorRateMeans=new double[numberOfDomains][numberOfFunctions];
  errorRateVariances=new double[numberOfDomains][numberOfFunctions];
  for (int p=0; p < numberOfDomains; p++) {
    labelMeans[p]=new double[numberOfDataSamples[p]];
    labelVariances[p]=new double[numberOfDataSamples[p]];
    priorSamples[0][p]=0.5;
    labelsSamples[0][p]=new int[numberOfDataSamples[p]];
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelsSamples[0][p][i]=randomDataGenerator.nextBinomial(1,0.5);
    for (int j=0; j < numberOfFunctions; j++) {
      zSamples[0][p][j]=0;
      hdp.add_items_table_assignment(p,j,0,0);
      errorRateSamples[0][p * numberOfFunctions + j]=0.25;
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[0][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    sum_1[k]=0;
    sum_2[k]=0;
    for (int j=0; j < numberOfFunctions; j++) {
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[0][p][j] == k) {
          sum_1[k]+=numberOfDataSamples[p];
          sum_2[k]+=disagreements[j][p];
        }
      }
    }
  }
}","public ErrorEstimationDomainsFastHDPMixedGraphicalModel(List<boolean[][]> functionOutputs,int numberOfIterations,int thinning,double alpha,double gamma){
  this.alpha=alpha;
  this.gamma=gamma;
  this.numberOfIterations=numberOfIterations;
  burnInIterations=numberOfIterations * 9 / 10;
  this.thinning=thinning;
  numberOfFunctions=functionOutputs.get(0)[0].length;
  numberOfDomains=functionOutputs.size();
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  hdp=new FastHDPPrior(numberOfDomains,numberOfFunctions,alpha,gamma);
  numberOfSamples=(numberOfIterations - burnInIterations) / thinning;
  priorSamples=new double[numberOfSamples][numberOfDomains];
  errorRateSamples=new double[numberOfSamples][numberOfDomains * numberOfFunctions];
  zSamples=new int[numberOfSamples][numberOfDomains][numberOfFunctions];
  labelsSamples=new int[numberOfSamples][numberOfDomains][];
  disagreements=new double[numberOfFunctions][numberOfDomains];
  sum_1=new double[numberOfDomains * numberOfFunctions];
  sum_2=new double[numberOfDomains * numberOfFunctions];
  priorMeans=new double[numberOfDomains];
  priorVariances=new double[numberOfDomains];
  labelMeans=new double[numberOfDomains][];
  labelVariances=new double[numberOfDomains][];
  errorRateMeans=new double[numberOfDomains][numberOfFunctions];
  errorRateVariances=new double[numberOfDomains][numberOfFunctions];
  for (int p=0; p < numberOfDomains; p++) {
    labelMeans[p]=new double[numberOfDataSamples[p]];
    labelVariances[p]=new double[numberOfDataSamples[p]];
    priorSamples[0][p]=0.5;
    labelsSamples[0][p]=new int[numberOfDataSamples[p]];
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelsSamples[0][p][i]=randomDataGenerator.nextBinomial(1,0.5);
    for (int j=0; j < numberOfFunctions; j++) {
      zSamples[0][p][j]=0;
      hdp.add_items_table_assignment(p,j,0,0);
      errorRateSamples[0][p * numberOfFunctions + j]=0.25;
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[0][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    sum_1[k]=0;
    sum_2[k]=0;
    for (int j=0; j < numberOfFunctions; j++) {
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[0][p][j] == k) {
          sum_1[k]+=numberOfDataSamples[p];
          sum_2[k]+=disagreements[j][p];
        }
      }
    }
  }
}",0.9942115418347658
144074,"private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    sum_2[k]=0;
    for (int j=0; j < numberOfFunctions; j++) {
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[iterationNumber][p][j] == k)         sum_2[k]+=disagreements[j][p];
      }
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      hdp.remove_items_table_assignment(p,j);
      int total_cnt=hdp.prob_table_assignment_for_item(p,j);
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(hdp.pdf[i].prob);
      }
      int previous_topic=zSamples[iterationNumber][p][j];
      sum_1[previous_topic]-=numberOfDataSamples[p];
      sum_2[previous_topic]-=disagreements[j][p];
      for (int i=0; i < total_cnt - 1; i++) {
        int k=hdp.pdf[i].topic;
        double alpha=alpha_e + sum_2[k] + disagreements[j][p];
        double beta=beta_e + sum_1[k] - sum_2[k] + numberOfDataSamples[p] - disagreements[j][p];
        z_probabilities[i]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[k],beta_e + sum_1[k] - sum_2[k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=hdp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=hdp.pdf[i].topic;
          sum_1[hdp.pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[hdp.pdf[i].topic]+=disagreements[j][p];
          hdp.add_items_table_assignment(p,j,hdp.pdf[i].table,hdp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == hdp.pdf[total_cnt - 1].topic) {
        sum_1[hdp.pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[hdp.pdf[total_cnt - 1].topic]+=disagreements[j][p];
        hdp.add_items_table_assignment(p,j,hdp.pdf[total_cnt - 1].table,hdp.pdf[total_cnt - 1].topic);
      }
    }
  }
}","private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      hdp.remove_items_table_assignment(p,j);
      int total_cnt=hdp.prob_table_assignment_for_item(p,j);
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(hdp.pdf[i].prob);
      }
      int previous_topic=zSamples[iterationNumber][p][j];
      sum_1[previous_topic]-=numberOfDataSamples[p];
      sum_2[previous_topic]-=disagreements[j][p];
      for (int i=0; i < total_cnt - 1; i++) {
        int k=hdp.pdf[i].topic;
        double alpha=alpha_e + sum_2[k] + disagreements[j][p];
        double beta=beta_e + sum_1[k] - sum_2[k] + numberOfDataSamples[p] - disagreements[j][p];
        z_probabilities[i]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[k],beta_e + sum_1[k] - sum_2[k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=hdp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=hdp.pdf[i].topic;
          sum_1[hdp.pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[hdp.pdf[i].topic]+=disagreements[j][p];
          hdp.add_items_table_assignment(p,j,hdp.pdf[i].table,hdp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == hdp.pdf[total_cnt - 1].topic) {
        sum_1[hdp.pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[hdp.pdf[total_cnt - 1].topic]+=disagreements[j][p];
        hdp.add_items_table_assignment(p,j,hdp.pdf[total_cnt - 1].table,hdp.pdf[total_cnt - 1].topic);
      }
    }
  }
}",0.1914232442510876
144075,"private void sampleErrorRatesAndBurn(int iterationNumber){
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    int disagreementCount=0;
    int zCount=0;
    for (int p=0; p < numberOfDomains; p++) {
      for (int j=0; j < numberOfFunctions; j++) {
        if (zSamples[iterationNumber][p][j] == k) {
          for (int i=0; i < numberOfDataSamples[p]; i++)           if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           disagreementCount++;
          zCount+=numberOfDataSamples[p];
        }
      }
    }
    errorRateSamples[iterationNumber][k]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
  }
}","private void sampleErrorRatesAndBurn(int iterationNumber){
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    int disagreementCount=0;
    int zCount=0;
    for (int p=0; p < numberOfDomains; p++) {
      for (int j=0; j < numberOfFunctions; j++) {
        if (zSamples[iterationNumber][p][j] == k) {
          for (int i=0; i < numberOfDataSamples[p]; i++)           if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           disagreementCount++;
          zCount+=numberOfDataSamples[p];
        }
      }
    }
    errorRateSamples[iterationNumber][k]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
  }
  for (int p=0; p < numberOfDomains; p++) {
    int numberOfErrorRatesBelowChance=0;
    for (int j=0; j < numberOfFunctions; j++)     if (errorRateSamples[iterationNumber][zSamples[iterationNumber][p][j]] < 0.5)     numberOfErrorRatesBelowChance++;
    if (numberOfErrorRatesBelowChance < numberOfFunctions / 2.0)     for (int j=0; j < numberOfFunctions; j++)     errorRateSamples[iterationNumber][zSamples[iterationNumber][p][j]]=1 - errorRateSamples[iterationNumber][zSamples[iterationNumber][p][j]];
  }
}",0.7331932773109243
144076,"private void sampleErrorRates(int iterationNumber){
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    int disagreementCount=0;
    int zCount=0;
    for (int p=0; p < numberOfDomains; p++) {
      for (int j=0; j < numberOfFunctions; j++) {
        if (zSamples[iterationNumber][p][j] == k) {
          for (int i=0; i < numberOfDataSamples[p]; i++)           if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           disagreementCount++;
          zCount+=numberOfDataSamples[p];
        }
      }
    }
    if (zCount > 0)     errorRateSamples[iterationNumber + 1][k]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
  }
}","private void sampleErrorRates(int iterationNumber){
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    int disagreementCount=0;
    int zCount=0;
    for (int p=0; p < numberOfDomains; p++) {
      for (int j=0; j < numberOfFunctions; j++) {
        if (zSamples[iterationNumber][p][j] == k) {
          for (int i=0; i < numberOfDataSamples[p]; i++)           if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           disagreementCount++;
          zCount+=numberOfDataSamples[p];
        }
      }
    }
    errorRateSamples[iterationNumber + 1][k]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
  }
}",0.8312056737588652
144077,"public void performGibbsSampling(){
  for (int iterationNumber=0; iterationNumber < burnInIterations; iterationNumber++) {
    samplePriorsAndBurn(0);
    sampleErrorRatesAndBurn(0);
    sampleZAndBurn(0);
    sampleLabelsAndBurn(0);
  }
  for (int iterationNumber=0; iterationNumber < numberOfSamples - 1; iterationNumber++) {
    for (int i=0; i < thinning; i++) {
      samplePriorsAndBurn(iterationNumber);
      sampleErrorRatesAndBurn(iterationNumber);
      sampleZAndBurn(iterationNumber);
      sampleLabelsAndBurn(iterationNumber);
    }
    samplePriors(iterationNumber);
    sampleErrorRates(iterationNumber);
    sampleZ(iterationNumber);
    sampleLabels(iterationNumber);
  }
  Set<Integer> uniqueClusters=new HashSet<>();
  for (int p=0; p < numberOfDomains; p++)   for (int j=0; j < numberOfFunctions; j++)   uniqueClusters.add(zSamples[zSamples.length - 1][p][j]);
  System.out.println(""String_Node_Str"" + uniqueClusters.size());
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    for (int p=0; p < numberOfDomains; p++) {
      int numberOfPhiBelowChance=0;
      for (int j=0; j < numberOfFunctions; j++)       if (errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]] < 0.5)       numberOfPhiBelowChance++;
      if (numberOfPhiBelowChance < numberOfFunctions / 2.0) {
        priorSamples[sampleNumber][p]=1 - priorSamples[sampleNumber][p];
        for (int j=0; j < numberOfFunctions; j++)         errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]]=1 - errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]];
      }
      priorMeans[p]+=priorSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++)       errorRateMeans[p][j]+=errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       labelMeans[p][i]+=labelsSamples[sampleNumber][p][i];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    priorMeans[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateMeans[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelMeans[p][i]/=numberOfSamples;
    for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
      double temp=priorSamples[sampleNumber][p] - priorMeans[p];
      priorVariances[p]+=temp * temp;
      for (int j=0; j < numberOfFunctions; j++) {
        temp=errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]] - errorRateMeans[p][j];
        errorRateVariances[p][j]+=temp * temp;
      }
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        temp=labelsSamples[sampleNumber][p][i] - labelMeans[p][i];
        labelVariances[p][i]+=temp * temp;
      }
    }
    priorVariances[p]/=(numberOfIterations - burnInIterations - 1);
    for (int j=0; j < numberOfFunctions; j++)     errorRateVariances[p][j]/=(numberOfIterations - burnInIterations - 1);
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelVariances[p][i]/=(numberOfIterations - burnInIterations - 1);
  }
}","public void performGibbsSampling(){
  for (int iterationNumber=0; iterationNumber < burnInIterations; iterationNumber++) {
    samplePriorsAndBurn(0);
    sampleLabelsAndBurnWithCollapsedErrorRates(0);
    sampleZAndBurnWithCollapsedErrorRates(0);
    sampleInternalTableTopicsAndBurnWithCollapsedErrorRates(0);
  }
  for (int iterationNumber=0; iterationNumber < numberOfSamples - 1; iterationNumber++) {
    for (int i=0; i < thinning; i++) {
      samplePriorsAndBurn(iterationNumber);
      sampleErrorRatesAndBurn(iterationNumber);
      sampleZAndBurn(iterationNumber);
      sampleTableTopicAndBurn(iterationNumber);
      sampleLabelsAndBurn(iterationNumber);
    }
    samplePriors(iterationNumber);
    sampleErrorRates(iterationNumber);
    sampleZ(iterationNumber);
    sampleTableTopic(iterationNumber);
    sampleLabels(iterationNumber);
  }
  Set<Integer> uniqueClusters=new HashSet<>();
  for (int p=0; p < numberOfDomains; p++)   for (int j=0; j < numberOfFunctions; j++)   uniqueClusters.add(zSamples[zSamples.length - 1][p][j]);
  System.out.println(""String_Node_Str"" + uniqueClusters.size());
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    for (int p=0; p < numberOfDomains; p++) {
      int numberOfPhiBelowChance=0;
      for (int j=0; j < numberOfFunctions; j++)       if (errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]] < 0.5)       numberOfPhiBelowChance++;
      if (numberOfPhiBelowChance < numberOfFunctions / 2.0) {
        priorSamples[sampleNumber][p]=1 - priorSamples[sampleNumber][p];
        for (int j=0; j < numberOfFunctions; j++)         errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]]=1 - errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]];
      }
      priorMeans[p]+=priorSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++)       errorRateMeans[p][j]+=errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       labelMeans[p][i]+=labelsSamples[sampleNumber][p][i];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    priorMeans[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateMeans[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelMeans[p][i]/=numberOfSamples;
    for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
      double temp=priorSamples[sampleNumber][p] - priorMeans[p];
      priorVariances[p]+=temp * temp;
      for (int j=0; j < numberOfFunctions; j++) {
        temp=errorRateSamples[sampleNumber][zSamples[sampleNumber][p][j]] - errorRateMeans[p][j];
        errorRateVariances[p][j]+=temp * temp;
      }
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        temp=labelsSamples[sampleNumber][p][i] - labelMeans[p][i];
        labelVariances[p][i]+=temp * temp;
      }
    }
    priorVariances[p]/=(numberOfIterations - burnInIterations - 1);
    for (int j=0; j < numberOfFunctions; j++)     errorRateVariances[p][j]/=(numberOfIterations - burnInIterations - 1);
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelVariances[p][i]/=(numberOfIterations - burnInIterations - 1);
  }
}",0.9672157364465056
144078,"public ErrorEstimationDomainsFastHDPMixedGraphicalModel(List<boolean[][]> functionOutputs,int numberOfIterations,int thinning,double alpha){
  this.alpha=alpha;
  this.numberOfIterations=numberOfIterations;
  burnInIterations=numberOfIterations * 9 / 10;
  this.thinning=thinning;
  numberOfFunctions=functionOutputs.get(0)[0].length;
  numberOfDomains=functionOutputs.size();
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  hdp=new FastHDPPrior(numberOfDomains,numberOfFunctions,alpha,gamma);
  numberOfSamples=(numberOfIterations - burnInIterations) / thinning;
  priorSamples=new double[numberOfSamples][numberOfDomains];
  errorRateSamples=new double[numberOfSamples][numberOfDomains * numberOfFunctions];
  zSamples=new int[numberOfSamples][numberOfDomains][numberOfFunctions];
  labelsSamples=new int[numberOfSamples][numberOfDomains][];
  disagreements=new double[numberOfFunctions][numberOfDomains];
  sum_1=new double[numberOfDomains * numberOfFunctions];
  sum_2=new double[numberOfDomains * numberOfFunctions];
  priorMeans=new double[numberOfDomains];
  priorVariances=new double[numberOfDomains];
  labelMeans=new double[numberOfDomains][];
  labelVariances=new double[numberOfDomains][];
  errorRateMeans=new double[numberOfDomains][numberOfFunctions];
  errorRateVariances=new double[numberOfDomains][numberOfFunctions];
  for (int p=0; p < numberOfDomains; p++) {
    labelMeans[p]=new double[numberOfDataSamples[p]];
    labelVariances[p]=new double[numberOfDataSamples[p]];
    priorSamples[0][p]=0.5;
    labelsSamples[0][p]=new int[numberOfDataSamples[p]];
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelsSamples[0][p][i]=randomDataGenerator.nextBinomial(1,0.5);
    for (int j=0; j < numberOfFunctions; j++) {
      zSamples[0][p][j]=0;
      hdp.add_items_table_assignment(p,j,j,0);
      errorRateSamples[0][p * numberOfFunctions + j]=0.25;
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[0][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    sum_1[k]=0;
    sum_2[k]=0;
    for (int j=0; j < numberOfFunctions; j++) {
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[0][p][j] == k) {
          sum_1[k]+=numberOfDataSamples[p];
          sum_2[k]+=disagreements[j][p];
        }
      }
    }
  }
}","public ErrorEstimationDomainsFastHDPMixedGraphicalModel(List<boolean[][]> functionOutputs,int numberOfIterations,int thinning,double alpha){
  this.alpha=alpha;
  this.numberOfIterations=numberOfIterations;
  burnInIterations=numberOfIterations * 9 / 10;
  this.thinning=thinning;
  numberOfFunctions=functionOutputs.get(0)[0].length;
  numberOfDomains=functionOutputs.size();
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  hdp=new FastHDPPrior(numberOfDomains,numberOfFunctions,alpha,gamma);
  numberOfSamples=(numberOfIterations - burnInIterations) / thinning;
  priorSamples=new double[numberOfSamples][numberOfDomains];
  errorRateSamples=new double[numberOfSamples][numberOfDomains * numberOfFunctions];
  zSamples=new int[numberOfSamples][numberOfDomains][numberOfFunctions];
  labelsSamples=new int[numberOfSamples][numberOfDomains][];
  disagreements=new double[numberOfFunctions][numberOfDomains];
  sum_1=new double[numberOfDomains * numberOfFunctions];
  sum_2=new double[numberOfDomains * numberOfFunctions];
  priorMeans=new double[numberOfDomains];
  priorVariances=new double[numberOfDomains];
  labelMeans=new double[numberOfDomains][];
  labelVariances=new double[numberOfDomains][];
  errorRateMeans=new double[numberOfDomains][numberOfFunctions];
  errorRateVariances=new double[numberOfDomains][numberOfFunctions];
  for (int p=0; p < numberOfDomains; p++) {
    labelMeans[p]=new double[numberOfDataSamples[p]];
    labelVariances[p]=new double[numberOfDataSamples[p]];
    priorSamples[0][p]=0.5;
    labelsSamples[0][p]=new int[numberOfDataSamples[p]];
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelsSamples[0][p][i]=randomDataGenerator.nextBinomial(1,0.5);
    for (int j=0; j < numberOfFunctions; j++) {
      zSamples[0][p][j]=0;
      hdp.add_items_table_assignment(p,j,0,0);
      errorRateSamples[0][p * numberOfFunctions + j]=0.25;
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[0][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    sum_1[k]=0;
    sum_2[k]=0;
    for (int j=0; j < numberOfFunctions; j++) {
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[0][p][j] == k) {
          sum_1[k]+=numberOfDataSamples[p];
          sum_2[k]+=disagreements[j][p];
        }
      }
    }
  }
}",0.9996471418489769
144079,"private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    sum_2[k]=0;
    for (int j=0; j < numberOfFunctions; j++) {
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[iterationNumber][p][j] == k)         sum_2[k]+=disagreements[j][p];
      }
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      hdp.remove_items_table_assignment(p,j);
      int total_cnt=hdp.prob_table_assignment_for_item(p,j);
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(hdp.pdf[i].prob);
      }
      int previous_topic=zSamples[iterationNumber][p][j];
      sum_1[previous_topic]-=numberOfDataSamples[p];
      sum_2[previous_topic]-=disagreements[j][p];
      for (int i=0; i < total_cnt - 1; i++) {
        int k=hdp.pdf[i].topic;
        double alpha=alpha_e + sum_2[k] + disagreements[j][p];
        double beta=beta_e + sum_1[k] + numberOfDataSamples[p] - disagreements[j][p];
        z_probabilities[i]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[k],beta_e + sum_1[k] - sum_2[k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=hdp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=hdp.pdf[i].topic;
          sum_1[hdp.pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[hdp.pdf[i].topic]+=disagreements[j][p];
          hdp.add_items_table_assignment(p,j,hdp.pdf[i].table,hdp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == hdp.pdf[total_cnt - 1].topic) {
        sum_1[hdp.pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[hdp.pdf[total_cnt - 1].topic]+=disagreements[j][p];
        hdp.add_items_table_assignment(p,j,hdp.pdf[total_cnt - 1].table,hdp.pdf[total_cnt - 1].topic);
      }
    }
  }
}","private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    sum_2[k]=0;
    for (int j=0; j < numberOfFunctions; j++) {
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[iterationNumber][p][j] == k)         sum_2[k]+=disagreements[j][p];
      }
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      hdp.remove_items_table_assignment(p,j);
      int total_cnt=hdp.prob_table_assignment_for_item(p,j);
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(hdp.pdf[i].prob);
      }
      int previous_topic=zSamples[iterationNumber][p][j];
      sum_1[previous_topic]-=numberOfDataSamples[p];
      sum_2[previous_topic]-=disagreements[j][p];
      for (int i=0; i < total_cnt - 1; i++) {
        int k=hdp.pdf[i].topic;
        double alpha=alpha_e + sum_2[k] + disagreements[j][p];
        double beta=beta_e + sum_1[k] - sum_2[k] + numberOfDataSamples[p] - disagreements[j][p];
        z_probabilities[i]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[k],beta_e + sum_1[k] - sum_2[k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=hdp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=hdp.pdf[i].topic;
          sum_1[hdp.pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[hdp.pdf[i].topic]+=disagreements[j][p];
          hdp.add_items_table_assignment(p,j,hdp.pdf[i].table,hdp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == hdp.pdf[total_cnt - 1].topic) {
        sum_1[hdp.pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[hdp.pdf[total_cnt - 1].topic]+=disagreements[j][p];
        hdp.add_items_table_assignment(p,j,hdp.pdf[total_cnt - 1].table,hdp.pdf[total_cnt - 1].topic);
      }
    }
  }
}",0.9979603189319488
144080,"private void sampleErrorRatesAndBurn(int iterationNumber){
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    int disagreementCount=0;
    int zCount=0;
    for (int p=0; p < numberOfDomains; p++) {
      for (int j=0; j < numberOfFunctions; j++) {
        if (zSamples[iterationNumber][p][j] == k) {
          for (int i=0; i < numberOfDataSamples[p]; i++)           if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           disagreementCount++;
          zCount+=numberOfDataSamples[p];
        }
      }
    }
    if (zCount > 0)     errorRateSamples[iterationNumber][k]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
  }
}","private void sampleErrorRatesAndBurn(int iterationNumber){
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    int disagreementCount=0;
    int zCount=0;
    for (int p=0; p < numberOfDomains; p++) {
      for (int j=0; j < numberOfFunctions; j++) {
        if (zSamples[iterationNumber][p][j] == k) {
          for (int i=0; i < numberOfDataSamples[p]; i++)           if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           disagreementCount++;
          zCount+=numberOfDataSamples[p];
        }
      }
    }
    errorRateSamples[iterationNumber][k]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
  }
}",0.8375706214689266
144081,"private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp[j].remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp[j].prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp[j].pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp[j].pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber + 1][p][j]=dp[j].pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber + 1][p][j]=dp[j].pdf[i].topic;
          sum_1[j][dp[j].pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp[j].pdf[i].topic]+=disagreements[j][p];
          dp[j].add_topic_assingment(dp[j].pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber + 1][p][j] == dp[j].pdf[total_cnt - 1].topic) {
        sum_1[j][dp[j].pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp[j].pdf[total_cnt - 1].topic]+=disagreements[j][p];
        dp[j].add_topic_assingment(dp[j].pdf[total_cnt - 1].topic);
        int disagreementCount=0;
        for (int i=0; i < numberOfDataSamples[p]; i++)         if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])         disagreementCount++;
        errorRateSamples[iterationNumber + 1][dp[j].pdf[total_cnt - 1].topic][j]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + numberOfDataSamples[p] - disagreementCount);
      }
    }
  }
}","private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp[j].remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp[j].prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp[j].pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp[j].pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber + 1][p][j]=dp[j].pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber + 1][p][j]=dp[j].pdf[i].topic;
          sum_1[j][dp[j].pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp[j].pdf[i].topic]+=disagreements[j][p];
          dp[j].add_topic_assingment(dp[j].pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber + 1][p][j] == dp[j].pdf[total_cnt - 1].topic) {
        sum_1[j][dp[j].pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp[j].pdf[total_cnt - 1].topic]+=disagreements[j][p];
        dp[j].add_topic_assingment(dp[j].pdf[total_cnt - 1].topic);
        errorRateSamples[iterationNumber + 1][dp[j].pdf[total_cnt - 1].topic][j]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
      }
    }
  }
}",0.9017219655606888
144082,"private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp[j].remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp[j].prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp[j].pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp[j].pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=dp[j].pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=dp[j].pdf[i].topic;
          sum_1[j][dp[j].pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp[j].pdf[i].topic]+=disagreements[j][p];
          dp[j].add_topic_assingment(dp[j].pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == dp[j].pdf[total_cnt - 1].topic) {
        sum_1[j][dp[j].pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp[j].pdf[total_cnt - 1].topic]+=disagreements[j][p];
        dp[j].add_topic_assingment(dp[j].pdf[total_cnt - 1].topic);
        int disagreementCount=0;
        for (int i=0; i < numberOfDataSamples[p]; i++)         if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])         disagreementCount++;
        errorRateSamples[iterationNumber][dp[j].pdf[total_cnt - 1].topic][j]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + numberOfDataSamples[p] - disagreementCount);
      }
    }
  }
}","private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp[j].remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp[j].prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp[j].pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp[j].pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=dp[j].pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=dp[j].pdf[i].topic;
          sum_1[j][dp[j].pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp[j].pdf[i].topic]+=disagreements[j][p];
          dp[j].add_topic_assingment(dp[j].pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == dp[j].pdf[total_cnt - 1].topic) {
        sum_1[j][dp[j].pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp[j].pdf[total_cnt - 1].topic]+=disagreements[j][p];
        dp[j].add_topic_assingment(dp[j].pdf[total_cnt - 1].topic);
        errorRateSamples[iterationNumber][dp[j].pdf[total_cnt - 1].topic][j]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
      }
    }
  }
}",0.9027072758037225
144083,"private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++) {
      z_probabilities[i]=Math.log(dp.pdf[i].prob);
    }
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++) {
      z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    }
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber + 1][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber + 1][p]=dp.pdf[i].topic;
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber + 1][p] == dp.pdf[total_cnt - 1].topic)     dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
  }
}","private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++) {
      z_probabilities[i]=Math.log(dp.pdf[i].prob);
    }
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++) {
      z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    }
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber + 1][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber + 1][p]=dp.pdf[i].topic;
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber + 1][p] == dp.pdf[total_cnt - 1].topic) {
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
      int numberOfErrorRatesBelowChance=0;
      for (int j=0; j < numberOfFunctions; j++) {
        errorRateSamples[iterationNumber + 1][dp.pdf[total_cnt - 1].topic][j]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
        if (errorRateSamples[iterationNumber + 1][dp.pdf[total_cnt - 1].topic][j] < 0.5)         numberOfErrorRatesBelowChance+=1;
      }
      if (numberOfErrorRatesBelowChance < numberOfFunctions / 2.0)       for (int j=0; j < numberOfFunctions; j++)       errorRateSamples[iterationNumber + 1][dp.pdf[total_cnt - 1].topic][j]=1 - errorRateSamples[iterationNumber + 1][dp.pdf[total_cnt - 1].topic][j];
    }
  }
}",0.8307172180632697
144084,"private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++)     z_probabilities[i]=Math.log(dp.pdf[i].prob);
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++)     z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber][p]=dp.pdf[i].topic;
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber][p] == dp.pdf[total_cnt - 1].topic)     dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
  }
}","private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++)     z_probabilities[i]=Math.log(dp.pdf[i].prob);
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++)     z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber][p]=dp.pdf[i].topic;
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber][p] == dp.pdf[total_cnt - 1].topic) {
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
      int numberOfErrorRatesBelowChance=0;
      for (int j=0; j < numberOfFunctions; j++) {
        errorRateSamples[iterationNumber][dp.pdf[total_cnt - 1].topic][j]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
        if (errorRateSamples[iterationNumber][dp.pdf[total_cnt - 1].topic][j] < 0.5)         numberOfErrorRatesBelowChance+=1;
      }
      if (numberOfErrorRatesBelowChance < numberOfFunctions / 2.0)       for (int j=0; j < numberOfFunctions; j++)       errorRateSamples[iterationNumber][dp.pdf[total_cnt - 1].topic][j]=1 - errorRateSamples[iterationNumber][dp.pdf[total_cnt - 1].topic][j];
    }
  }
}",0.8312392214831239
144085,"private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp.remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp.prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp.pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber + 1][p][j]=dp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber + 1][p][j]=dp.pdf[i].topic;
          dp.add_topic_assingment(dp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber + 1][p][j] == dp.pdf[total_cnt - 1].topic)       dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
    }
  }
}","private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp.remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp.prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp.pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber + 1][p][j]=dp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber + 1][p][j]=dp.pdf[i].topic;
          dp.add_topic_assingment(dp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber + 1][p][j] == dp.pdf[total_cnt - 1].topic) {
        dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
        errorRateSamples[iterationNumber + 1][dp.pdf[total_cnt - 1].topic]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
      }
    }
  }
}",0.9459025174076058
144086,"private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp.remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp.prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp.pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=dp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=dp.pdf[i].topic;
          dp.add_topic_assingment(dp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == dp.pdf[total_cnt - 1].topic)       dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
    }
  }
}","private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp.remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp.prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp.pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=dp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=dp.pdf[i].topic;
          dp.add_topic_assingment(dp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == dp.pdf[total_cnt - 1].topic) {
        dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
        errorRateSamples[iterationNumber][dp.pdf[total_cnt - 1].topic]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
      }
    }
  }
}",0.9465442764578834
144087,"@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  Integrator.CoTrainingMethod coTrainingMethod;
  String workingDirectory;
switch (args[0]) {
case ""String_Node_Str"":
    coTrainingMethod=Integrator.CoTrainingMethod.CO_TRAINING;
  workingDirectory=integratorWorkingDirectory + ""String_Node_Str"";
break;
case ""String_Node_Str"":
coTrainingMethod=Integrator.CoTrainingMethod.ROBUST_CO_TRAINING;
workingDirectory=integratorWorkingDirectory + ""String_Node_Str"";
break;
case ""String_Node_Str"":
coTrainingMethod=Integrator.CoTrainingMethod.ROBUST_CO_TRAINING_GM;
workingDirectory=integratorWorkingDirectory + ""String_Node_Str"";
break;
default :
coTrainingMethod=Integrator.CoTrainingMethod.CO_TRAINING;
workingDirectory=integratorWorkingDirectory + ""String_Node_Str"";
}
initializeWorkingDirectory(workingDirectory);
loadLabeledNPsData();
double[] weightedMajorityAccuracy=new double[numberOfIterations];
double[][] actualErrorRates=new double[numberOfIterations][numberOfViews];
double[][] precision=new double[numberOfIterations][numberOfViews];
double[][] recall=new double[numberOfIterations][numberOfViews];
double[][] f1Score=new double[numberOfIterations][numberOfViews];
double[][] estimatedErrorRates=new double[numberOfIterations][numberOfViews];
Integrator.Builder<Vector,Double> integratorBuilder=new Integrator.Builder<Vector,Double>(integratorWorkingDirectory).labeledDataSet(labeledDataSet).unlabeledDataSet(unlabeledDataSet).completedIterationEventHandlers((completedIterationEvent,sequence,endOfBatch) -> {
int iterationNumber=((Integrator.CompletedIterationEvent)completedIterationEvent).getIterationNumber();
List<TrainableClassifier<Vector,Double>> classifiers=((Integrator.CompletedIterationEvent)completedIterationEvent).getClassifiers();
estimatedErrorRates[iterationNumber]=((Integrator.CompletedIterationEvent)completedIterationEvent).getErrorRates();
for (int view=0; view < numberOfViews; view++) {
DataSet<PredictedDataInstance<Vector,Double>> predictedEvaluationDataSet=classifiers.get(view).predict((DataSet<PredictedDataInstance<Vector,Double>>)evaluationDataSet.getSingleViewDataSet(view));
double precisionDenominator=0;
double recallDenominator=0;
for (PredictedDataInstance<Vector,Double> dataInstance : predictedEvaluationDataSet) {
if (dataInstance.label() != (filteredLabeledData.get(category).get(dataInstance.name()) ? 1 : 0)) actualErrorRates[iterationNumber][view]++;
if (dataInstance.label() == 1) {
precisionDenominator++;
if (filteredLabeledData.get(category).get(dataInstance.name())) precision[iterationNumber][view]++;
}
if (filteredLabeledData.get(category).get(dataInstance.name())) {
recallDenominator++;
if (dataInstance.label() == 1) recall[iterationNumber][view]++;
}
}
if (precisionDenominator == 0) precisionDenominator=1;
if (recallDenominator == 0) recallDenominator=1;
actualErrorRates[iterationNumber][view]/=predictedEvaluationDataSet.size();
precision[iterationNumber][view]/=precisionDenominator;
recall[iterationNumber][view]/=recallDenominator;
f1Score[iterationNumber][view]=2 * (precision[iterationNumber][view] * recall[iterationNumber][view]) / (precision[iterationNumber][view] + recall[iterationNumber][view]);
if (precision[iterationNumber][view] == 0 && recall[iterationNumber][view] == 0) f1Score[iterationNumber][view]=0;
logger.info(""String_Node_Str"" + (iterationNumber + 1) + ""String_Node_Str""+ (view + 1)+ ""String_Node_Str""+ ""String_Node_Str""+ formatter.format(actualErrorRates[iterationNumber][view])+ ""String_Node_Str""+ ""String_Node_Str""+ formatter.format(estimatedErrorRates[iterationNumber][view])+ ""String_Node_Str""+ ""String_Node_Str""+ formatter.format(precision[iterationNumber][view])+ ""String_Node_Str""+ ""String_Node_Str""+ formatter.format(recall[iterationNumber][view])+ ""String_Node_Str""+ ""String_Node_Str""+ formatter.format(f1Score[iterationNumber][view])+ ""String_Node_Str"");
}
saveResultsForMATLAB(workingDirectory + ""String_Node_Str"",actualErrorRates,estimatedErrorRates,precision,recall,f1Score);
}
).coTrainingMethod(Integrator.CoTrainingMethod.ROBUST_CO_TRAINING_GM).dataSelectionMethod(Integrator.DataSelectionMethod.FIXED_PROPORTION).dataSelectionParameter(0.01).numberOfThreads(numberOfViews).saveModelsOnEveryIteration(true).useDifferentFilePerIteration(true);
for (int view=0; view < numberOfViews; view++) {
LogisticRegressionAdaGrad classifier=new LogisticRegressionAdaGrad.Builder(unlabeledDataSet.get(0).getSingleViewDataInstance(view).features().size()).sparse(true).useBiasTerm(true).useL1Regularization(false).l1RegularizationWeight(0.0001).useL2Regularization(false).l2RegularizationWeight(0.1).loggingLevel(0).sampleWithReplacement(true).maximumNumberOfIterations(1000).maximumNumberOfIterationsWithNoPointChange(10).pointChangeTolerance(1e-5).checkForPointConvergence(true).batchSize(10000000).random(random).build();
integratorBuilder.addClassifier(classifier);
}
Integrator<Vector,Double> integrator=integratorBuilder.build();
for (int iteration=integrator.getIterationNumber(); iteration < numberOfIterations; iteration++) integrator.performSingleIteration();
}","@SuppressWarnings(""String_Node_Str"") public static void main(String[] args){
  Integrator.CoTrainingMethod coTrainingMethod;
  String workingDirectory;
switch (args[0]) {
case ""String_Node_Str"":
    coTrainingMethod=Integrator.CoTrainingMethod.CO_TRAINING;
  workingDirectory=integratorWorkingDirectory + ""String_Node_Str"";
break;
case ""String_Node_Str"":
coTrainingMethod=Integrator.CoTrainingMethod.ROBUST_CO_TRAINING;
workingDirectory=integratorWorkingDirectory + ""String_Node_Str"";
break;
case ""String_Node_Str"":
coTrainingMethod=Integrator.CoTrainingMethod.ROBUST_CO_TRAINING_GM;
workingDirectory=integratorWorkingDirectory + ""String_Node_Str"";
break;
default :
coTrainingMethod=Integrator.CoTrainingMethod.CO_TRAINING;
workingDirectory=integratorWorkingDirectory + ""String_Node_Str"";
}
initializeWorkingDirectory(workingDirectory);
loadLabeledNPsData();
double[] weightedMajorityAccuracy=new double[numberOfIterations];
double[][] actualErrorRates=new double[numberOfIterations][numberOfViews];
double[][] precision=new double[numberOfIterations][numberOfViews];
double[][] recall=new double[numberOfIterations][numberOfViews];
double[][] f1Score=new double[numberOfIterations][numberOfViews];
double[][] estimatedErrorRates=new double[numberOfIterations][numberOfViews];
Integrator.Builder<Vector,Double> integratorBuilder=new Integrator.Builder<Vector,Double>(integratorWorkingDirectory).labeledDataSet(labeledDataSet).unlabeledDataSet(unlabeledDataSet).completedIterationEventHandlers((completedIterationEvent,sequence,endOfBatch) -> {
int iterationNumber=((Integrator.CompletedIterationEvent)completedIterationEvent).getIterationNumber();
List<TrainableClassifier<Vector,Double>> classifiers=((Integrator.CompletedIterationEvent)completedIterationEvent).getClassifiers();
estimatedErrorRates[iterationNumber]=((Integrator.CompletedIterationEvent)completedIterationEvent).getErrorRates();
for (int view=0; view < numberOfViews; view++) {
DataSet<PredictedDataInstance<Vector,Double>> predictedEvaluationDataSet=classifiers.get(view).predict((DataSet<PredictedDataInstance<Vector,Double>>)evaluationDataSet.getSingleViewDataSet(view));
double precisionDenominator=0;
double recallDenominator=0;
for (PredictedDataInstance<Vector,Double> dataInstance : predictedEvaluationDataSet) {
if (dataInstance.label() != (filteredLabeledData.get(category).get(dataInstance.name()) ? 1 : 0)) actualErrorRates[iterationNumber][view]++;
if (dataInstance.label() == 1) {
precisionDenominator++;
if (filteredLabeledData.get(category).get(dataInstance.name())) precision[iterationNumber][view]++;
}
if (filteredLabeledData.get(category).get(dataInstance.name())) {
recallDenominator++;
if (dataInstance.label() == 1) recall[iterationNumber][view]++;
}
}
if (precisionDenominator == 0) precisionDenominator=1;
if (recallDenominator == 0) recallDenominator=1;
actualErrorRates[iterationNumber][view]/=predictedEvaluationDataSet.size();
precision[iterationNumber][view]/=precisionDenominator;
recall[iterationNumber][view]/=recallDenominator;
f1Score[iterationNumber][view]=2 * (precision[iterationNumber][view] * recall[iterationNumber][view]) / (precision[iterationNumber][view] + recall[iterationNumber][view]);
if (precision[iterationNumber][view] == 0 && recall[iterationNumber][view] == 0) f1Score[iterationNumber][view]=0;
logger.info(""String_Node_Str"" + (iterationNumber + 1) + ""String_Node_Str""+ (view + 1)+ ""String_Node_Str""+ ""String_Node_Str""+ formatter.format(actualErrorRates[iterationNumber][view])+ ""String_Node_Str""+ ""String_Node_Str""+ formatter.format(estimatedErrorRates[iterationNumber][view])+ ""String_Node_Str""+ ""String_Node_Str""+ formatter.format(precision[iterationNumber][view])+ ""String_Node_Str""+ ""String_Node_Str""+ formatter.format(recall[iterationNumber][view])+ ""String_Node_Str""+ ""String_Node_Str""+ formatter.format(f1Score[iterationNumber][view])+ ""String_Node_Str"");
}
saveResultsForMATLAB(workingDirectory + ""String_Node_Str"",actualErrorRates,estimatedErrorRates,precision,recall,f1Score);
}
).coTrainingMethod(coTrainingMethod).dataSelectionMethod(Integrator.DataSelectionMethod.FIXED_PROPORTION).dataSelectionParameter(0.01).numberOfThreads(numberOfViews).saveModelsOnEveryIteration(true).useDifferentFilePerIteration(true);
for (int view=0; view < numberOfViews; view++) {
LogisticRegressionAdaGrad classifier=new LogisticRegressionAdaGrad.Builder(unlabeledDataSet.get(0).getSingleViewDataInstance(view).features().size()).sparse(true).useBiasTerm(true).useL1Regularization(false).l1RegularizationWeight(0.0001).useL2Regularization(false).l2RegularizationWeight(0.1).loggingLevel(0).sampleWithReplacement(true).maximumNumberOfIterations(1000).maximumNumberOfIterationsWithNoPointChange(10).pointChangeTolerance(1e-5).checkForPointConvergence(true).batchSize(10000000).random(random).build();
integratorBuilder.addClassifier(classifier);
}
Integrator<Vector,Double> integrator=integratorBuilder.build();
for (int iteration=integrator.getIterationNumber(); iteration < numberOfIterations; iteration++) integrator.performSingleIteration();
}",0.9965534219596258
144088,"public void performGibbsSampling(){
  for (int iterationNumber=0; iterationNumber < burnInIterations; iterationNumber++) {
    samplePriorsAndBurn(0);
    sampleLabelsAndBurn(0);
    sampleZAndBurnWithCollapsedErrorRates(0);
  }
  for (int iterationNumber=0; iterationNumber < numberOfSamples - 1; iterationNumber++) {
    for (int i=0; i < thinning; i++) {
      samplePriorsAndBurn(iterationNumber);
      sampleErrorRatesAndBurn(iterationNumber);
      sampleZAndBurn(iterationNumber);
      sampleLabelsAndBurn(iterationNumber);
    }
    samplePriors(iterationNumber);
    sampleErrorRates(iterationNumber);
    sampleZ(iterationNumber);
    sampleLabels(iterationNumber);
  }
  Set<Integer> uniqueClusters=new HashSet<>();
  for (int p=0; p < numberOfDomains; p++)   uniqueClusters.add(zSamples[zSamples.length - 1][p]);
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    for (int p=0; p < numberOfDomains; p++) {
      priorMeans[p]+=priorSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++)       errorRateMeans[p][j]+=errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j];
      for (int i=0; i < numberOfDataSamples[p]; i++)       labelMeans[p][i]+=labelsSamples[sampleNumber][p][i];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    priorMeans[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateMeans[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelMeans[p][i]/=numberOfSamples;
    for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
      double temp=priorSamples[sampleNumber][p] - priorMeans[p];
      priorVariances[p]+=temp * temp;
      for (int j=0; j < numberOfFunctions; j++) {
        temp=errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j] - errorRateMeans[p][j];
        errorRateVariances[p][j]+=temp * temp;
      }
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        temp=labelsSamples[sampleNumber][p][i] - labelMeans[p][i];
        labelVariances[p][i]+=temp * temp;
      }
    }
    priorVariances[p]/=(numberOfIterations - burnInIterations - 1);
    for (int j=0; j < numberOfFunctions; j++)     errorRateVariances[p][j]/=(numberOfIterations - burnInIterations - 1);
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelVariances[p][i]/=(numberOfIterations - burnInIterations - 1);
  }
}","public void performGibbsSampling(){
  for (int iterationNumber=0; iterationNumber < burnInIterations; iterationNumber++) {
    samplePriorsAndBurn(0);
    sampleLabelsAndBurnWithCollapsedErrorRates(0);
    sampleZAndBurnWithCollapsedErrorRates(0);
  }
  for (int iterationNumber=0; iterationNumber < numberOfSamples - 1; iterationNumber++) {
    for (int i=0; i < thinning; i++) {
      samplePriorsAndBurn(iterationNumber);
      sampleErrorRatesAndBurn(iterationNumber);
      sampleZAndBurn(iterationNumber);
      sampleLabelsAndBurn(iterationNumber);
    }
    samplePriors(iterationNumber);
    sampleErrorRates(iterationNumber);
    sampleZ(iterationNumber);
    sampleLabels(iterationNumber);
  }
  Set<Integer> uniqueClusters=new HashSet<>();
  for (int p=0; p < numberOfDomains; p++)   uniqueClusters.add(zSamples[zSamples.length - 1][p]);
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    for (int p=0; p < numberOfDomains; p++) {
      priorMeans[p]+=priorSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++)       errorRateMeans[p][j]+=errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j];
      for (int i=0; i < numberOfDataSamples[p]; i++)       labelMeans[p][i]+=labelsSamples[sampleNumber][p][i];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    priorMeans[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateMeans[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelMeans[p][i]/=numberOfSamples;
    for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
      double temp=priorSamples[sampleNumber][p] - priorMeans[p];
      priorVariances[p]+=temp * temp;
      for (int j=0; j < numberOfFunctions; j++) {
        temp=errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j] - errorRateMeans[p][j];
        errorRateVariances[p][j]+=temp * temp;
      }
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        temp=labelsSamples[sampleNumber][p][i] - labelMeans[p][i];
        labelVariances[p][i]+=temp * temp;
      }
    }
    priorVariances[p]/=(numberOfIterations - burnInIterations - 1);
    for (int j=0; j < numberOfFunctions; j++)     errorRateVariances[p][j]/=(numberOfIterations - burnInIterations - 1);
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelVariances[p][i]/=(numberOfIterations - burnInIterations - 1);
  }
}",0.9952331606217616
144089,"private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
    }
  }
  for (int j=0; j < numberOfFunctions; j++) {
    for (int k=0; k < numberOfDomains; k++) {
      sum_2[j][k]=0;
      for (int p=0; p < numberOfDomains; p++)       if (zSamples[iterationNumber][p] == k)       sum_2[j][k]+=disagreements[j][p];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++)     z_probabilities[i]=Math.log(dp.pdf[i].prob);
    for (int j=0; j < numberOfFunctions; j++) {
      sum_1[j][zSamples[iterationNumber][p]]-=numberOfDataSamples[p];
      sum_2[j][zSamples[iterationNumber][p]]-=disagreements[j][p];
      for (int i=0; i < total_cnt - 1; i++) {
        z_probabilities[i]+=logBeta(alpha_e + sum_2[j][dp.pdf[i].topic] + disagreements[j][p],beta_e + sum_1[j][dp.pdf[i].topic] - sum_2[j][dp.pdf[i].topic] + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e + sum_2[j][dp.pdf[i].topic],beta_e + sum_1[j][dp.pdf[i].topic] - sum_2[j][dp.pdf[i].topic]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++)     z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber][p]=dp.pdf[i].topic;
        for (int j=0; j < numberOfFunctions; j++) {
          sum_1[j][dp.pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp.pdf[i].topic]+=disagreements[j][p];
        }
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber][p] == dp.pdf[total_cnt - 1].topic) {
      for (int j=0; j < numberOfFunctions; j++) {
        sum_1[j][dp.pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp.pdf[total_cnt - 1].topic]+=disagreements[j][p];
      }
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
    }
  }
}","private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++)     z_probabilities[i]=Math.log(dp.pdf[i].prob);
    for (int j=0; j < numberOfFunctions; j++) {
      sum_1[j][zSamples[iterationNumber][p]]-=numberOfDataSamples[p];
      sum_2[j][zSamples[iterationNumber][p]]-=disagreements[j][p];
      for (int i=0; i < total_cnt - 1; i++) {
        z_probabilities[i]+=logBeta(alpha_e + sum_2[j][dp.pdf[i].topic] + disagreements[j][p],beta_e + sum_1[j][dp.pdf[i].topic] - sum_2[j][dp.pdf[i].topic] + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e + sum_2[j][dp.pdf[i].topic],beta_e + sum_1[j][dp.pdf[i].topic] - sum_2[j][dp.pdf[i].topic]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++)     z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber][p]=dp.pdf[i].topic;
        for (int j=0; j < numberOfFunctions; j++) {
          sum_1[j][dp.pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp.pdf[i].topic]+=disagreements[j][p];
        }
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber][p] == dp.pdf[total_cnt - 1].topic) {
      for (int j=0; j < numberOfFunctions; j++) {
        sum_1[j][dp.pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp.pdf[total_cnt - 1].topic]+=disagreements[j][p];
      }
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
    }
  }
}",0.2807091599831152
144090,"private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp[j].remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp[j].prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp[j].pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp[j].pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber + 1][p][j]=dp[j].pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber + 1][p][j]=dp[j].pdf[i].topic;
          sum_1[j][dp[j].pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp[j].pdf[i].topic]+=disagreements[j][p];
          dp[j].add_topic_assingment(dp[j].pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber + 1][p][j] == dp[j].pdf[total_cnt - 1].topic) {
        sum_1[j][dp[j].pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp[j].pdf[total_cnt - 1].topic]+=disagreements[j][p];
        dp[j].add_topic_assingment(dp[j].pdf[total_cnt - 1].topic);
        errorRateSamples[iterationNumber + 1][dp[j].pdf[total_cnt - 1].topic][j]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
      }
    }
  }
}","private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp[j].remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp[j].prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp[j].pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp[j].pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber + 1][p][j]=dp[j].pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber + 1][p][j]=dp[j].pdf[i].topic;
          dp[j].add_topic_assingment(dp[j].pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber + 1][p][j] == dp[j].pdf[total_cnt - 1].topic) {
        dp[j].add_topic_assingment(dp[j].pdf[total_cnt - 1].topic);
      }
    }
  }
}",0.8590243902439024
144091,"private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp[j].remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp[j].prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp[j].pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp[j].pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=dp[j].pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=dp[j].pdf[i].topic;
          sum_1[j][dp[j].pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp[j].pdf[i].topic]+=disagreements[j][p];
          dp[j].add_topic_assingment(dp[j].pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == dp[j].pdf[total_cnt - 1].topic) {
        sum_1[j][dp[j].pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp[j].pdf[total_cnt - 1].topic]+=disagreements[j][p];
        dp[j].add_topic_assingment(dp[j].pdf[total_cnt - 1].topic);
        errorRateSamples[iterationNumber][dp[j].pdf[total_cnt - 1].topic][j]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
      }
    }
  }
}","private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp[j].remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp[j].prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp[j].pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp[j].pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=dp[j].pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=dp[j].pdf[i].topic;
          dp[j].add_topic_assingment(dp[j].pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == dp[j].pdf[total_cnt - 1].topic) {
        dp[j].add_topic_assingment(dp[j].pdf[total_cnt - 1].topic);
      }
    }
  }
}",0.858968058968059
144092,"private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++) {
      z_probabilities[i]=Math.log(dp.pdf[i].prob);
    }
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++) {
      z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    }
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber + 1][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber + 1][p]=dp.pdf[i].topic;
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber + 1][p] == dp.pdf[total_cnt - 1].topic) {
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
      int numberOfErrorRatesBelowChance=0;
      for (int j=0; j < numberOfFunctions; j++) {
        errorRateSamples[iterationNumber + 1][dp.pdf[total_cnt - 1].topic][j]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
        if (errorRateSamples[iterationNumber + 1][dp.pdf[total_cnt - 1].topic][j] < 0.5)         numberOfErrorRatesBelowChance+=1;
      }
      if (numberOfErrorRatesBelowChance < numberOfFunctions / 2.0)       for (int j=0; j < numberOfFunctions; j++)       errorRateSamples[iterationNumber + 1][dp.pdf[total_cnt - 1].topic][j]=1 - errorRateSamples[iterationNumber + 1][dp.pdf[total_cnt - 1].topic][j];
    }
  }
}","private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++) {
      z_probabilities[i]=Math.log(dp.pdf[i].prob);
    }
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++) {
      z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    }
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber + 1][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber + 1][p]=dp.pdf[i].topic;
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber + 1][p] == dp.pdf[total_cnt - 1].topic) {
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
    }
  }
}",0.833534088171525
144093,"private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++)     z_probabilities[i]=Math.log(dp.pdf[i].prob);
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++)     z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber][p]=dp.pdf[i].topic;
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber][p] == dp.pdf[total_cnt - 1].topic) {
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
      int numberOfErrorRatesBelowChance=0;
      for (int j=0; j < numberOfFunctions; j++) {
        errorRateSamples[iterationNumber][dp.pdf[total_cnt - 1].topic][j]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
        if (errorRateSamples[iterationNumber][dp.pdf[total_cnt - 1].topic][j] < 0.5)         numberOfErrorRatesBelowChance+=1;
      }
      if (numberOfErrorRatesBelowChance < numberOfFunctions / 2.0)       for (int j=0; j < numberOfFunctions; j++)       errorRateSamples[iterationNumber][dp.pdf[total_cnt - 1].topic][j]=1 - errorRateSamples[iterationNumber][dp.pdf[total_cnt - 1].topic][j];
    }
  }
}","private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++)     z_probabilities[i]=Math.log(dp.pdf[i].prob);
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++)     z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber][p]=dp.pdf[i].topic;
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber][p] == dp.pdf[total_cnt - 1].topic) {
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
    }
  }
}",0.8341115753256328
144094,"private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp.remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp.prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp.pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber + 1][p][j]=dp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber + 1][p][j]=dp.pdf[i].topic;
          dp.add_topic_assingment(dp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber + 1][p][j] == dp.pdf[total_cnt - 1].topic) {
        dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
        errorRateSamples[iterationNumber + 1][dp.pdf[total_cnt - 1].topic]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
      }
    }
  }
}","private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp.remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp.prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp.pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber + 1][p][j]=dp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber + 1][p][j]=dp.pdf[i].topic;
          dp.add_topic_assingment(dp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber + 1][p][j] == dp.pdf[total_cnt - 1].topic) {
        dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
      }
    }
  }
}",0.9492792311799252
144095,"private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp.remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp.prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp.pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=dp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=dp.pdf[i].topic;
          dp.add_topic_assingment(dp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == dp.pdf[total_cnt - 1].topic) {
        dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
        errorRateSamples[iterationNumber][dp.pdf[total_cnt - 1].topic]=randomDataGenerator.nextBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]);
      }
    }
  }
}","private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      dp.remove_topic_assignment(zSamples[iterationNumber][p][j]);
      int total_cnt=dp.prob_topics();
      double z_probabilities[]=new double[total_cnt];
      for (int i=0; i < total_cnt; i++) {
        z_probabilities[i]=Math.log(dp.pdf[i].prob);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
      for (int i=1; i < total_cnt; i++) {
        z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
      }
      double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
      zSamples[iterationNumber][p][j]=dp.pdf[total_cnt - 1].topic;
      for (int i=0; i < total_cnt - 1; i++) {
        if (z_probabilities[i] > uniform) {
          zSamples[iterationNumber][p][j]=dp.pdf[i].topic;
          dp.add_topic_assingment(dp.pdf[i].topic);
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == dp.pdf[total_cnt - 1].topic) {
        dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
      }
    }
  }
}",0.94994617868676
144096,"private static void buildFeatureMap(){
  featureMap.createDatabase();
  buildCPLFeatureMap(featureMap);
  buildADJFeatureMap(featureMap);
}","private static void buildFeatureMap(FeatureMapMySQL<SparseVector> featureMap){
  featureMap.createDatabase();
  buildCPLFeatureMap(featureMap);
  buildADJFeatureMap(featureMap);
}",0.8742138364779874
144097,"public static void filterLabeledDataByFeatureMap(){
  if (Files.exists(Paths.get(filteredLabeledDataDirectory))) {
    filteredLabeledData=readStringStringBooleanMap(filteredLabeledDataDirectory);
    logger.info(""String_Node_Str"");
  }
 else {
    filteredLabeledData=new HashMap<>();
    for (    String category : labeledData.keySet()) {
      filteredLabeledData.put(category,new HashMap<>());
      labeledData.get(category).keySet().stream().filter(np -> !np.equals(""String_Node_Str"") && !np.equals(""String_Node_Str"") && !np.equals(""String_Node_Str"")&& !featureMap.getFeatureVectors(np).contains(null)).forEach(np -> filteredLabeledData.get(category).put(np,labeledData.get(category).get(np)));
      int totalNumber=filteredLabeledData.get(category).size();
      int numberOfPositive=Maps.filterValues(filteredLabeledData.get(category),x -> x).size();
      int numberOfNegative=Maps.filterValues(filteredLabeledData.get(category),x -> !x).size();
      logger.info(""String_Node_Str"" + category + ""String_Node_Str""+ totalNumber+ ""String_Node_Str""+ numberOfPositive+ ""String_Node_Str""+ numberOfNegative+ ""String_Node_Str"");
    }
    writeStringStringBooleanMap(filteredLabeledData,filteredLabeledDataDirectory);
    logger.info(""String_Node_Str"");
  }
}","public static void filterLabeledDataByFeatureMap(FeatureMapMySQL<SparseVector> featureMap){
  if (Files.exists(Paths.get(filteredLabeledDataDirectory))) {
    filteredLabeledData=readStringStringBooleanMap(filteredLabeledDataDirectory);
    logger.info(""String_Node_Str"");
  }
 else {
    filteredLabeledData=new HashMap<>();
    for (    String category : labeledData.keySet()) {
      filteredLabeledData.put(category,new HashMap<>());
      labeledData.get(category).keySet().stream().filter(np -> !np.equals(""String_Node_Str"") && !np.equals(""String_Node_Str"") && !np.equals(""String_Node_Str"")&& !featureMap.getFeatureVectors(np).contains(null)).forEach(np -> filteredLabeledData.get(category).put(np,labeledData.get(category).get(np)));
      int totalNumber=filteredLabeledData.get(category).size();
      int numberOfPositive=Maps.filterValues(filteredLabeledData.get(category),x -> x).size();
      int numberOfNegative=Maps.filterValues(filteredLabeledData.get(category),x -> !x).size();
      logger.info(""String_Node_Str"" + category + ""String_Node_Str""+ totalNumber+ ""String_Node_Str""+ numberOfPositive+ ""String_Node_Str""+ numberOfNegative+ ""String_Node_Str"");
    }
    writeStringStringBooleanMap(filteredLabeledData,filteredLabeledDataDirectory);
    logger.info(""String_Node_Str"");
  }
}",0.9843871975019516
144098,"public static void main(String[] args){
  parseVariasCategoriesFiles();
  filterLabeledDataByFeatureMap();
}","public static void main(String[] args){
  FeatureMapMySQL<SparseVector> featureMap=new FeatureMapMySQL<>(3,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"");
  parseVariasCategoriesFiles();
  filterLabeledDataByFeatureMap(featureMap);
}",0.5806451612903226
144099,"private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      double[] z_probabilities=new double[numberOfDomains];
      for (int p_inner=0; p_inner < numberOfDomains; p_inner++)       if (p_inner < p)       z_probabilities[zSamples[iterationNumber + 1][p_inner][j]]+=1;
 else       if (p_inner > p)       z_probabilities[zSamples[iterationNumber][p_inner][j]]+=1;
      int k_new=-1;
      for (int k=0; k < z_probabilities.length; k++)       if (z_probabilities[k] == 0.0) {
        z_probabilities[k]=alpha;
        k_new=k;
        break;
      }
      for (int k=0; k < z_probabilities.length; k++) {
        z_probabilities[k]=Math.log(z_probabilities[k]);
        z_probabilities[k]-=Math.log(numberOfDomains - 1 + alpha);
      }
      int count=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       count++;
      for (int k=0; k < z_probabilities.length; k++) {
        if (k != k_new) {
          z_probabilities[k]+=count * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
          z_probabilities[k]+=(numberOfDataSamples[p] - count) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
        }
 else {
          z_probabilities[k_new]+=logBeta(alpha_e + count,beta_e + numberOfDataSamples[p] - count) - logBeta(alpha_e,beta_e);
        }
      }
      double normalizationConstant=MatrixUtilities.computeLogSumExp(z_probabilities);
      for (int k=0; k < z_probabilities.length; k++)       z_probabilities[k]=Math.exp(z_probabilities[k] - normalizationConstant);
      double[] z_cdf=new double[z_probabilities.length];
      z_cdf[0]=z_probabilities[0];
      for (int i=1; i < z_probabilities.length; i++)       z_cdf[i]=z_cdf[i - 1] + z_probabilities[i];
      double uniform=random.nextDouble();
      zSamples[iterationNumber + 1][p][j]=z_probabilities.length - 1;
      for (int k=0; k < z_probabilities.length - 1; k++) {
        if (z_cdf[k] > uniform) {
          zSamples[iterationNumber + 1][p][j]=k;
          break;
        }
      }
    }
  }
}","private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      double[] z_probabilities=new double[numberOfDomains];
      for (int p_inner=0; p_inner < numberOfDomains; p_inner++)       if (p_inner < p)       z_probabilities[zSamples[iterationNumber + 1][p_inner][j]]+=1;
 else       if (p_inner > p)       z_probabilities[zSamples[iterationNumber][p_inner][j]]+=1;
      int k_new=-1;
      for (int k=0; k < z_probabilities.length; k++)       if (z_probabilities[k] == 0.0) {
        z_probabilities[k]=alpha;
        k_new=k;
        break;
      }
      for (int k=0; k < z_probabilities.length; k++) {
        z_probabilities[k]=Math.log(z_probabilities[k]);
        z_probabilities[k]-=Math.log(numberOfDomains - 1 + alpha);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int k=0; k < z_probabilities.length; k++) {
        if (k != k_new) {
          z_probabilities[k]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
          z_probabilities[k]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
        }
 else {
          z_probabilities[k_new]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
        }
      }
      double normalizationConstant=MatrixUtilities.computeLogSumExp(z_probabilities);
      for (int k=0; k < z_probabilities.length; k++)       z_probabilities[k]=Math.exp(z_probabilities[k] - normalizationConstant);
      double[] z_cdf=new double[z_probabilities.length];
      z_cdf[0]=z_probabilities[0];
      for (int i=1; i < z_probabilities.length; i++)       z_cdf[i]=z_cdf[i - 1] + z_probabilities[i];
      double uniform=random.nextDouble();
      zSamples[iterationNumber + 1][p][j]=z_probabilities.length - 1;
      for (int k=0; k < z_probabilities.length - 1; k++) {
        if (z_cdf[k] > uniform) {
          zSamples[iterationNumber + 1][p][j]=k;
          break;
        }
      }
    }
  }
}",0.8187363834422658
144100,"private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      double[] z_probabilities=new double[numberOfDomains];
      for (int p_inner=0; p_inner < numberOfDomains; p_inner++)       if (p_inner != p)       z_probabilities[zSamples[iterationNumber][p_inner][j]]+=1;
      int k_new=-1;
      for (int k=0; k < z_probabilities.length; k++)       if (z_probabilities[k] == 0.0) {
        z_probabilities[k]=alpha;
        k_new=k;
        break;
      }
      for (int k=0; k < z_probabilities.length; k++) {
        z_probabilities[k]=Math.log(z_probabilities[k]);
        z_probabilities[k]-=Math.log(numberOfDomains - 1 + alpha);
      }
      for (int k=0; k < z_probabilities.length; k++) {
        if (zSamples[iterationNumber][p][j] == k) {
          sum_1[j][k]-=numberOfDataSamples[p];
          sum_2[j][k]-=disagreements[j][p];
        }
        if (k != k_new) {
          double alpha=alpha_e + sum_2[j][k];
          double beta=beta_e + sum_1[j][k] - sum_2[j][k];
          for (int i=0; i < numberOfDataSamples[p]; i++)           if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           alpha++;
 else           beta++;
          z_probabilities[k]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[j][k],beta_e + sum_1[j][k] - sum_2[j][k]);
        }
 else {
          int count=0;
          for (int i=0; i < numberOfDataSamples[p]; i++)           if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])           count+=1;
          z_probabilities[k_new]+=logBeta(alpha_e + count,beta_e + numberOfDataSamples[p] - count);
        }
      }
      double normalizationConstant=MatrixUtilities.computeLogSumExp(z_probabilities);
      for (int k=0; k < z_probabilities.length; k++)       z_probabilities[k]=Math.exp(z_probabilities[k] - normalizationConstant);
      double[] z_cdf=new double[z_probabilities.length];
      z_cdf[0]=z_probabilities[0];
      for (int i=1; i < z_probabilities.length; i++)       z_cdf[i]=z_cdf[i - 1] + z_probabilities[i];
      double uniform=random.nextDouble();
      zSamples[iterationNumber][p][j]=z_probabilities.length - 1;
      for (int k=0; k < z_probabilities.length - 1; k++) {
        if (z_cdf[k] > uniform) {
          zSamples[iterationNumber][p][j]=k;
          sum_1[j][k]+=numberOfDataSamples[p];
          sum_2[j][k]+=disagreements[j][p];
          break;
        }
      }
    }
  }
}","private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
    }
  }
  for (int j=0; j < numberOfFunctions; j++) {
    for (int k=0; k < numberOfDomains; k++) {
      sum_2[j][k]=0;
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[iterationNumber][p][j] == k)         sum_2[j][k]+=disagreements[j][p];
      }
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      double[] z_probabilities=new double[numberOfDomains];
      for (int p_inner=0; p_inner < numberOfDomains; p_inner++)       if (p_inner != p)       z_probabilities[zSamples[iterationNumber][p_inner][j]]+=1;
      int k_new=-1;
      for (int k=0; k < z_probabilities.length; k++)       if (z_probabilities[k] == 0.0) {
        z_probabilities[k]=alpha;
        k_new=k;
        break;
      }
      for (int k=0; k < z_probabilities.length; k++) {
        z_probabilities[k]=Math.log(z_probabilities[k]);
        z_probabilities[k]-=Math.log(numberOfDomains - 1 + alpha);
      }
      for (int k=0; k < z_probabilities.length; k++) {
        if (zSamples[iterationNumber][p][j] == k) {
          sum_1[j][k]-=numberOfDataSamples[p];
          sum_2[j][k]-=disagreements[j][p];
        }
        if (k != k_new) {
          double alpha=alpha_e + sum_2[j][k] + disagreements[j][p];
          double beta=beta_e + sum_1[j][k] - sum_2[j][k] + numberOfDataSamples[p] - disagreements[j][p];
          z_probabilities[k]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[j][k],beta_e + sum_1[j][k] - sum_2[j][k]);
        }
 else {
          z_probabilities[k_new]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
        }
      }
      double normalizationConstant=MatrixUtilities.computeLogSumExp(z_probabilities);
      for (int k=0; k < z_probabilities.length; k++)       z_probabilities[k]=Math.exp(z_probabilities[k] - normalizationConstant);
      double[] z_cdf=new double[z_probabilities.length];
      z_cdf[0]=z_probabilities[0];
      for (int i=1; i < z_probabilities.length; i++)       z_cdf[i]=z_cdf[i - 1] + z_probabilities[i];
      double uniform=random.nextDouble();
      zSamples[iterationNumber][p][j]=z_probabilities.length - 1;
      for (int k=0; k < z_probabilities.length - 1; k++) {
        if (z_cdf[k] > uniform) {
          zSamples[iterationNumber][p][j]=k;
          sum_1[j][k]+=numberOfDataSamples[p];
          sum_2[j][k]+=disagreements[j][p];
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == z_probabilities.length - 1) {
        sum_1[j][z_probabilities.length - 1]+=numberOfDataSamples[p];
        sum_2[j][z_probabilities.length - 1]+=disagreements[j][p];
      }
    }
  }
}",0.7707808564231738
144101,"private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      double[] z_probabilities=new double[numberOfDomains];
      for (int p_inner=0; p_inner < numberOfDomains; p_inner++)       z_probabilities[zSamples[iterationNumber][p_inner][j]]+=1;
      int k_new=-1;
      for (int k=0; k < z_probabilities.length; k++)       if (z_probabilities[k] == 0.0) {
        z_probabilities[k]=alpha;
        k_new=k;
        break;
      }
      for (int k=0; k < z_probabilities.length; k++) {
        z_probabilities[k]=Math.log(z_probabilities[k]);
        z_probabilities[k]-=Math.log(numberOfDomains - 1 + alpha);
      }
      int count=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       count++;
      for (int k=0; k < z_probabilities.length; k++) {
        if (k != k_new) {
          z_probabilities[k]+=count * Math.log(errorRateSamples[iterationNumber][k][j]);
          z_probabilities[k]+=(numberOfDataSamples[p] - count) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
        }
 else {
          z_probabilities[k_new]+=logBeta(alpha_e + count,beta_e + numberOfDataSamples[p] - count) - logBeta(alpha_e,beta_e);
        }
      }
      double normalizationConstant=MatrixUtilities.computeLogSumExp(z_probabilities);
      for (int k=0; k < z_probabilities.length; k++)       z_probabilities[k]=Math.exp(z_probabilities[k] - normalizationConstant);
      double[] z_cdf=new double[z_probabilities.length];
      z_cdf[0]=z_probabilities[0];
      for (int i=1; i < z_probabilities.length; i++)       z_cdf[i]=z_cdf[i - 1] + z_probabilities[i];
      double uniform=random.nextDouble();
      zSamples[iterationNumber][p][j]=z_probabilities.length - 1;
      for (int k=0; k < z_probabilities.length - 1; k++) {
        if (z_cdf[k] > uniform) {
          zSamples[iterationNumber][p][j]=k;
          break;
        }
      }
    }
  }
}","private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      double[] z_probabilities=new double[numberOfDomains];
      for (int p_inner=0; p_inner < numberOfDomains; p_inner++)       if (p_inner != p)       z_probabilities[zSamples[iterationNumber][p_inner][j]]+=1;
      int k_new=-1;
      for (int k=0; k < z_probabilities.length; k++)       if (z_probabilities[k] == 0.0) {
        z_probabilities[k]=alpha;
        k_new=k;
        break;
      }
      for (int k=0; k < z_probabilities.length; k++) {
        z_probabilities[k]=Math.log(z_probabilities[k]);
        z_probabilities[k]-=Math.log(numberOfDomains - 1 + alpha);
      }
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int k=0; k < z_probabilities.length; k++) {
        if (k != k_new) {
          z_probabilities[k]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
          z_probabilities[k]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
        }
 else {
          z_probabilities[k_new]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
        }
      }
      double normalizationConstant=MatrixUtilities.computeLogSumExp(z_probabilities);
      for (int k=0; k < z_probabilities.length; k++)       z_probabilities[k]=Math.exp(z_probabilities[k] - normalizationConstant);
      double[] z_cdf=new double[z_probabilities.length];
      z_cdf[0]=z_probabilities[0];
      for (int i=1; i < z_probabilities.length; i++)       z_cdf[i]=z_cdf[i - 1] + z_probabilities[i];
      double uniform=random.nextDouble();
      zSamples[iterationNumber][p][j]=z_probabilities.length - 1;
      for (int k=0; k < z_probabilities.length - 1; k++) {
        if (z_cdf[k] > uniform) {
          zSamples[iterationNumber][p][j]=k;
          break;
        }
      }
    }
  }
}",0.8404613166746756
144102,"private void sampleErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      int disagreementCount=0;
      int zCount=0;
      for (int k=0; k < numberOfDomains; k++) {
        if (zSamples[iterationNumber][k] == p) {
          for (int i=0; i < numberOfDataSamples[k]; i++)           if (functionOutputsArray[j][k][i] != labelsSamples[iterationNumber][k][i])           disagreementCount++;
          zCount+=numberOfDataSamples[k];
        }
      }
      errorRateSamples[iterationNumber + 1][p][j]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
    }
  }
}","private void sampleErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    int numberOfErrorRatesBelowChance=0;
    for (int j=0; j < numberOfFunctions; j++) {
      int disagreementCount=0;
      int zCount=0;
      for (int k=0; k < numberOfDomains; k++) {
        if (zSamples[iterationNumber][k] == p) {
          for (int i=0; i < numberOfDataSamples[k]; i++)           if (functionOutputsArray[j][k][i] != labelsSamples[iterationNumber][k][i])           disagreementCount++;
          zCount+=numberOfDataSamples[k];
        }
      }
      errorRateSamples[iterationNumber + 1][p][j]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
      if (errorRateSamples[iterationNumber + 1][p][j] < 0.5)       numberOfErrorRatesBelowChance+=1;
    }
    if (numberOfErrorRatesBelowChance < numberOfFunctions / 2.0) {
      priorSamples[iterationNumber + 1][p]=1 - priorSamples[iterationNumber + 1][p];
      for (int j=0; j < numberOfFunctions; j++)       errorRateSamples[iterationNumber + 1][p][j]=1 - errorRateSamples[iterationNumber + 1][p][j];
    }
  }
}",0.7529021558872305
144103,"public void performGibbsSampling(){
  for (int iterationNumber=0; iterationNumber < burnInIterations; iterationNumber++) {
    samplePriorsAndBurn(0);
    sampleLabelsAndBurn(0);
    sampleZAndBurnWithCollapsedErrorRates(0);
  }
  for (int iterationNumber=0; iterationNumber < numberOfSamples - 1; iterationNumber++) {
    for (int i=0; i < thinning; i++) {
      samplePriorsAndBurn(iterationNumber);
      sampleErrorRatesAndBurn(iterationNumber);
      sampleZAndBurn(iterationNumber);
      sampleLabelsAndBurn(iterationNumber);
    }
    samplePriors(iterationNumber);
    sampleErrorRates(iterationNumber);
    sampleZ(iterationNumber);
    sampleLabels(iterationNumber);
  }
  Set<Integer> uniqueClusters=new HashSet<>();
  for (int p=0; p < numberOfDomains; p++)   uniqueClusters.add(zSamples[zSamples.length - 1][p]);
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    for (int p=0; p < numberOfDomains; p++) {
      int numberOfPhiBelowChance=0;
      for (int j=0; j < numberOfFunctions; j++)       if (errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j] < 0.5)       numberOfPhiBelowChance++;
      if (numberOfPhiBelowChance < numberOfFunctions / 2.0) {
        priorSamples[sampleNumber][p]=1 - priorSamples[sampleNumber][p];
        for (int j=0; j < numberOfFunctions; j++)         errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j]=1 - errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j];
      }
      priorMeans[p]+=priorSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++)       errorRateMeans[p][j]+=errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j];
      for (int i=0; i < numberOfDataSamples[p]; i++)       labelMeans[p][i]+=labelsSamples[sampleNumber][p][i];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    priorMeans[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateMeans[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelMeans[p][i]/=numberOfSamples;
    for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
      double temp=priorSamples[sampleNumber][p] - priorMeans[p];
      priorVariances[p]+=temp * temp;
      for (int j=0; j < numberOfFunctions; j++) {
        temp=errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j] - errorRateMeans[p][j];
        errorRateVariances[p][j]+=temp * temp;
      }
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        temp=labelsSamples[sampleNumber][p][i] - labelMeans[p][i];
        labelVariances[p][i]+=temp * temp;
      }
    }
    priorVariances[p]/=(numberOfIterations - burnInIterations - 1);
    for (int j=0; j < numberOfFunctions; j++)     errorRateVariances[p][j]/=(numberOfIterations - burnInIterations - 1);
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelVariances[p][i]/=(numberOfIterations - burnInIterations - 1);
  }
}","public void performGibbsSampling(){
  for (int iterationNumber=0; iterationNumber < burnInIterations; iterationNumber++) {
    samplePriorsAndBurn(0);
    sampleLabelsAndBurn(0);
    sampleZAndBurnWithCollapsedErrorRates(0);
  }
  for (int iterationNumber=0; iterationNumber < numberOfSamples - 1; iterationNumber++) {
    for (int i=0; i < thinning; i++) {
      samplePriorsAndBurn(iterationNumber);
      sampleErrorRatesAndBurn(iterationNumber);
      sampleZAndBurn(iterationNumber);
      sampleLabelsAndBurn(iterationNumber);
    }
    samplePriors(iterationNumber);
    sampleErrorRates(iterationNumber);
    sampleZ(iterationNumber);
    sampleLabels(iterationNumber);
  }
  Set<Integer> uniqueClusters=new HashSet<>();
  for (int p=0; p < numberOfDomains; p++)   uniqueClusters.add(zSamples[zSamples.length - 1][p]);
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    for (int p=0; p < numberOfDomains; p++) {
      priorMeans[p]+=priorSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++)       errorRateMeans[p][j]+=errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j];
      for (int i=0; i < numberOfDataSamples[p]; i++)       labelMeans[p][i]+=labelsSamples[sampleNumber][p][i];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    priorMeans[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateMeans[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelMeans[p][i]/=numberOfSamples;
    for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
      double temp=priorSamples[sampleNumber][p] - priorMeans[p];
      priorVariances[p]+=temp * temp;
      for (int j=0; j < numberOfFunctions; j++) {
        temp=errorRateSamples[sampleNumber][zSamples[sampleNumber][p]][j] - errorRateMeans[p][j];
        errorRateVariances[p][j]+=temp * temp;
      }
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        temp=labelsSamples[sampleNumber][p][i] - labelMeans[p][i];
        labelVariances[p][i]+=temp * temp;
      }
    }
    priorVariances[p]/=(numberOfIterations - burnInIterations - 1);
    for (int j=0; j < numberOfFunctions; j++)     errorRateVariances[p][j]/=(numberOfIterations - burnInIterations - 1);
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelVariances[p][i]/=(numberOfIterations - burnInIterations - 1);
  }
}",0.4380165289256198
144104,"private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++) {
      z_probabilities[i]=Math.log(dp.pdf[i].prob);
    }
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++) {
      z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    }
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber + 1][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber + 1][p]=dp.pdf[i].topic;
        for (int j=0; j < numberOfFunctions; j++) {
          sum_1[j][dp.pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp.pdf[i].topic]+=disagreements[j][p];
        }
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber + 1][p] == dp.pdf[total_cnt - 1].topic) {
      for (int j=0; j < numberOfFunctions; j++) {
        sum_1[j][dp.pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp.pdf[total_cnt - 1].topic]+=disagreements[j][p];
      }
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
    }
  }
}","private void sampleZ(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++) {
      z_probabilities[i]=Math.log(dp.pdf[i].prob);
    }
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber + 1][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber + 1][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++) {
      z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    }
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber + 1][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber + 1][p]=dp.pdf[i].topic;
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber + 1][p] == dp.pdf[total_cnt - 1].topic)     dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
  }
}",0.8688610240334378
144105,"private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
    }
  }
  for (int j=0; j < numberOfFunctions; j++) {
    for (int k=0; k < numberOfDomains; k++) {
      sum_2[j][k]=0;
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[iterationNumber][p] == k)         sum_2[j][k]+=disagreements[j][p];
      }
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++) {
      z_probabilities[i]=Math.log(dp.pdf[i].prob);
    }
    int previous_topic=zSamples[iterationNumber][p];
    for (int j=0; j < numberOfFunctions; j++) {
      for (int i=0; i < total_cnt - 1; i++) {
        if (previous_topic == dp.pdf[i].topic) {
          sum_1[j][previous_topic]-=numberOfDataSamples[p];
          sum_2[j][previous_topic]-=disagreements[j][p];
        }
        int k=dp.pdf[i].topic;
        double alpha=alpha_e + sum_2[j][k] + disagreements[j][p];
        double beta=beta_e + sum_1[j][k] + numberOfDataSamples[p] - disagreements[j][p];
        z_probabilities[i]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[j][k],beta_e + sum_1[j][k] - sum_2[j][k]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++) {
      z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    }
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber][p]=dp.pdf[i].topic;
        for (int j=0; j < numberOfFunctions; j++) {
          sum_1[j][dp.pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp.pdf[i].topic]+=disagreements[j][p];
        }
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber][p] == dp.pdf[total_cnt - 1].topic) {
      for (int j=0; j < numberOfFunctions; j++) {
        sum_1[j][dp.pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp.pdf[total_cnt - 1].topic]+=disagreements[j][p];
      }
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
    }
  }
}","private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
    }
  }
  for (int j=0; j < numberOfFunctions; j++) {
    for (int k=0; k < numberOfDomains; k++) {
      sum_2[j][k]=0;
      for (int p=0; p < numberOfDomains; p++)       if (zSamples[iterationNumber][p] == k)       sum_2[j][k]+=disagreements[j][p];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++)     z_probabilities[i]=Math.log(dp.pdf[i].prob);
    for (int j=0; j < numberOfFunctions; j++) {
      sum_1[j][zSamples[iterationNumber][p]]-=numberOfDataSamples[p];
      sum_2[j][zSamples[iterationNumber][p]]-=disagreements[j][p];
      for (int i=0; i < total_cnt - 1; i++) {
        z_probabilities[i]+=logBeta(alpha_e + sum_2[j][dp.pdf[i].topic] + disagreements[j][p],beta_e + sum_1[j][dp.pdf[i].topic] - sum_2[j][dp.pdf[i].topic] + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e + sum_2[j][dp.pdf[i].topic],beta_e + sum_1[j][dp.pdf[i].topic] - sum_2[j][dp.pdf[i].topic]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++)     z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber][p]=dp.pdf[i].topic;
        for (int j=0; j < numberOfFunctions; j++) {
          sum_1[j][dp.pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp.pdf[i].topic]+=disagreements[j][p];
        }
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber][p] == dp.pdf[total_cnt - 1].topic) {
      for (int j=0; j < numberOfFunctions; j++) {
        sum_1[j][dp.pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp.pdf[total_cnt - 1].topic]+=disagreements[j][p];
      }
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
    }
  }
}",0.818670124097055
144106,"private void sampleErrorRatesAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      int disagreementCount=0;
      int zCount=0;
      for (int k=0; k < numberOfDomains; k++) {
        if (zSamples[iterationNumber][k] == p) {
          for (int i=0; i < numberOfDataSamples[k]; i++)           if (functionOutputsArray[j][k][i] != labelsSamples[iterationNumber][k][i])           disagreementCount++;
          zCount+=numberOfDataSamples[k];
        }
      }
      errorRateSamples[iterationNumber][p][j]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
    }
  }
}","private void sampleErrorRatesAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    int numberOfErrorRatesBelowChance=0;
    for (int j=0; j < numberOfFunctions; j++) {
      int disagreementCount=0;
      int zCount=0;
      for (int k=0; k < numberOfDomains; k++) {
        if (zSamples[iterationNumber][k] == p) {
          for (int i=0; i < numberOfDataSamples[k]; i++)           if (functionOutputsArray[j][k][i] != labelsSamples[iterationNumber][k][i])           disagreementCount++;
          zCount+=numberOfDataSamples[k];
        }
      }
      errorRateSamples[iterationNumber][p][j]=randomDataGenerator.nextBeta(alpha_e + disagreementCount,beta_e + zCount - disagreementCount);
      if (errorRateSamples[iterationNumber][p][j] < 0.5)       numberOfErrorRatesBelowChance+=1;
    }
    if (numberOfErrorRatesBelowChance < numberOfFunctions / 2.0)     for (int j=0; j < numberOfFunctions; j++)     errorRateSamples[iterationNumber][p][j]=1 - errorRateSamples[iterationNumber][p][j];
  }
}",0.8018757327080891
144107,"private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++) {
      z_probabilities[i]=Math.log(dp.pdf[i].prob);
    }
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++) {
      z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    }
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber][p]=dp.pdf[i].topic;
        for (int j=0; j < numberOfFunctions; j++) {
          sum_1[j][dp.pdf[i].topic]+=numberOfDataSamples[p];
          sum_2[j][dp.pdf[i].topic]+=disagreements[j][p];
        }
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber][p] == dp.pdf[total_cnt - 1].topic) {
      for (int j=0; j < numberOfFunctions; j++) {
        sum_1[j][dp.pdf[total_cnt - 1].topic]+=numberOfDataSamples[p];
        sum_2[j][dp.pdf[total_cnt - 1].topic]+=disagreements[j][p];
      }
      dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
    }
  }
}","private void sampleZAndBurn(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    dp.remove_topic_assignment(zSamples[iterationNumber][p]);
    int total_cnt=dp.prob_topics();
    double z_probabilities[]=new double[total_cnt];
    for (int i=0; i < total_cnt; i++)     z_probabilities[i]=Math.log(dp.pdf[i].prob);
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
      for (int i=0; i < total_cnt - 1; i++) {
        int k=dp.pdf[i].topic;
        z_probabilities[i]+=disagreements[j][p] * Math.log(errorRateSamples[iterationNumber][k][j]);
        z_probabilities[i]+=(numberOfDataSamples[p] - disagreements[j][p]) * Math.log(1 - errorRateSamples[iterationNumber][k][j]);
      }
      z_probabilities[total_cnt - 1]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
    }
    for (int i=1; i < total_cnt; i++)     z_probabilities[i]=MatrixUtilities.computeLogSumExp(z_probabilities[i - 1],z_probabilities[i]);
    double uniform=Math.log(random.nextDouble()) + z_probabilities[total_cnt - 1];
    zSamples[iterationNumber][p]=dp.pdf[total_cnt - 1].topic;
    for (int i=0; i < total_cnt - 1; i++) {
      if (z_probabilities[i] > uniform) {
        zSamples[iterationNumber][p]=dp.pdf[i].topic;
        dp.add_topic_assingment(dp.pdf[i].topic);
        break;
      }
    }
    if (zSamples[iterationNumber][p] == dp.pdf[total_cnt - 1].topic)     dp.add_topic_assingment(dp.pdf[total_cnt - 1].topic);
  }
}",0.8619777895293496
144108,"public static void manyThresholdsExperiment(int errorEstimationMethod){
  String filename=""String_Node_Str"";
  String separator=""String_Node_Str"";
  double[] classificationThresholds=new double[]{0.01,0.02,0.03,0.04,0.05};
  double[] madMeans=new double[classificationThresholds.length];
  double madMean=0;
  for (int t=0; t < classificationThresholds.length; t++) {
    List<boolean[][]> functionOutputs=new ArrayList<>();
    List<boolean[]> trueLabels=new ArrayList<>();
    for (    File file : new File(filename).listFiles()) {
      if (file.isFile()) {
        DomainData data=parseLabeledDataFromCSVFile(file,separator,new double[]{classificationThresholds[t]});
        functionOutputs.add(data.functionOutputs);
        trueLabels.add(data.trueLabels);
      }
    }
    double[][] errorRates=new double[functionOutputs.size()][];
switch (errorEstimationMethod) {
case 0:
      for (int p=0; p < functionOutputs.size(); p++) {
        int numberOfFunctions=functionOutputs.get(p)[0].length;
        ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),numberOfFunctions,true).build();
        ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
        double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
        errorRates[p]=new double[numberOfFunctions];
        System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
      }
    break;
case 1:
  ErrorEstimationSimpleGraphicalModel eesgm=new ErrorEstimationSimpleGraphicalModel(functionOutputs,1000);
eesgm.performGibbsSampling();
errorRates=eesgm.getErrorRatesMeans();
break;
case 2:
ErrorEstimationDomainsDPGraphicalModelComplicated eeddpgm=new ErrorEstimationDomainsDPGraphicalModelComplicated(functionOutputs,1000,null);
eeddpgm.performGibbsSampling();
errorRates=eeddpgm.getErrorRatesMeans();
}
double[] mad=new double[functionOutputs.size()];
for (int p=0; p < functionOutputs.size(); p++) {
double[] realErrorRates=new double[errorRates[p].length];
for (int i=0; i < trueLabels.get(p).length; i++) {
for (int j=0; j < errorRates[p].length; j++) realErrorRates[j]+=(functionOutputs.get(p)[i][j] != trueLabels.get(p)[i]) ? 1 : 0;
}
mad[p]=0;
for (int j=0; j < errorRates[p].length; j++) {
realErrorRates[j]/=trueLabels.get(p).length;
mad[p]+=Math.abs(errorRates[p][j] - realErrorRates[j]);
}
mad[p]/=errorRates[p].length;
madMeans[t]+=mad[p];
}
madMeans[t]/=functionOutputs.size();
madMean+=madMeans[t];
}
madMean/=madMeans.length;
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"" + madMean);
System.out.println(""String_Node_Str"");
}","public static void manyThresholdsExperiment(int errorEstimationMethod){
  String filename=""String_Node_Str"";
  String separator=""String_Node_Str"";
  double[] classificationThresholds=new double[]{0.01,0.02,0.03,0.04,0.05};
  double[] madMeans=new double[classificationThresholds.length];
  double madMean=0;
  for (int t=0; t < classificationThresholds.length; t++) {
    List<boolean[][]> functionOutputs=new ArrayList<>();
    List<boolean[]> trueLabels=new ArrayList<>();
    for (    File file : new File(filename).listFiles()) {
      if (file.isFile()) {
        DomainData data=parseLabeledDataFromCSVFile(file,separator,new double[]{classificationThresholds[t]},1);
        functionOutputs.add(data.functionOutputs);
        trueLabels.add(data.trueLabels);
      }
    }
    double[][] errorRates=new double[functionOutputs.size()][];
switch (errorEstimationMethod) {
case 0:
      for (int p=0; p < functionOutputs.size(); p++) {
        int numberOfFunctions=functionOutputs.get(p)[0].length;
        ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),numberOfFunctions,true).build();
        ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
        double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
        errorRates[p]=new double[numberOfFunctions];
        System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
      }
    break;
case 1:
  ErrorEstimationSimpleGraphicalModel eesgm=new ErrorEstimationSimpleGraphicalModel(functionOutputs,1000,10);
eesgm.performGibbsSampling();
errorRates=eesgm.getErrorRatesMeans();
break;
case 2:
ErrorEstimationDomainsDPGraphicalModelComplicated eeddpgm=new ErrorEstimationDomainsDPGraphicalModelComplicated(functionOutputs,1000,null);
eeddpgm.performGibbsSampling();
errorRates=eeddpgm.getErrorRatesMeans();
}
double[] mad=new double[functionOutputs.size()];
for (int p=0; p < functionOutputs.size(); p++) {
double[] realErrorRates=new double[errorRates[p].length];
for (int i=0; i < trueLabels.get(p).length; i++) {
for (int j=0; j < errorRates[p].length; j++) realErrorRates[j]+=(functionOutputs.get(p)[i][j] != trueLabels.get(p)[i]) ? 1 : 0;
}
mad[p]=0;
for (int j=0; j < errorRates[p].length; j++) {
realErrorRates[j]/=trueLabels.get(p).length;
mad[p]+=Math.abs(errorRates[p][j] - realErrorRates[j]);
}
mad[p]/=errorRates[p].length;
madMeans[t]+=mad[p];
}
madMeans[t]/=functionOutputs.size();
madMean+=madMeans[t];
}
madMean/=madMeans.length;
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"" + madMean);
System.out.println(""String_Node_Str"");
}",0.9990810512773388
144109,"public static void main(String[] args){
  int errorEstimationMethod=Integer.parseInt(args[0]);
  String filename=""String_Node_Str"";
  String separator=""String_Node_Str"";
  double[] classificationThresholds=new double[]{0.1,0.1,0.1,0.1};
  List<boolean[][]> functionOutputs=new ArrayList<>();
  List<boolean[]> trueLabels=new ArrayList<>();
  for (  File file : new File(filename).listFiles()) {
    if (file.isFile()) {
      DomainData data=parseLabeledDataFromCSVFile(file,separator,classificationThresholds);
      functionOutputs.add(data.functionOutputs);
      trueLabels.add(data.trueLabels);
    }
  }
  double[][] errorRates=new double[functionOutputs.size()][];
switch (errorEstimationMethod) {
case 0:
    for (int p=0; p < functionOutputs.size(); p++) {
      int numberOfFunctions=functionOutputs.get(p)[0].length;
      ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),2,true).build();
      ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
      double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
      errorRates[p]=new double[numberOfFunctions];
      System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
    }
  break;
case 1:
ErrorEstimationSimpleGraphicalModel eesgm=new ErrorEstimationSimpleGraphicalModel(functionOutputs,1000);
eesgm.performGibbsSampling();
errorRates=eesgm.getErrorRatesMeans();
break;
case 2:
ErrorEstimationDomainsDPGraphicalModel eeddpgm=new ErrorEstimationDomainsDPGraphicalModel(functionOutputs,100,null);
eeddpgm.performGibbsSampling();
errorRates=eeddpgm.getErrorRatesMeans();
break;
case 3:
ErrorEstimationDomainsDPMixedGraphicalModel eeddpmgm=new ErrorEstimationDomainsDPMixedGraphicalModel(functionOutputs,20000,null);
eeddpmgm.performGibbsSampling();
errorRates=eeddpmgm.getErrorRatesMeans();
break;
case 4:
ErrorEstimationDomainsDPGraphicalModelComplicated eeddpgmc=new ErrorEstimationDomainsDPGraphicalModelComplicated(functionOutputs,1000,null);
eeddpgmc.performGibbsSampling();
errorRates=eeddpgmc.getErrorRatesMeans();
}
double[] mad=new double[functionOutputs.size()];
double madMean=0;
for (int p=0; p < functionOutputs.size(); p++) {
double[] realErrorRates=new double[errorRates[p].length];
for (int i=0; i < trueLabels.get(p).length; i++) {
for (int j=0; j < errorRates[p].length; j++) realErrorRates[j]+=(functionOutputs.get(p)[i][j] != trueLabels.get(p)[i]) ? 1 : 0;
}
mad[p]=0;
for (int j=0; j < errorRates[p].length; j++) {
realErrorRates[j]/=trueLabels.get(p).length;
mad[p]+=Math.abs(errorRates[p][j] - realErrorRates[j]);
}
mad[p]/=errorRates[p].length;
madMean+=mad[p];
System.out.println(""String_Node_Str"" + p + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.print(""String_Node_Str"");
for (int j=0; j < realErrorRates.length; j++) if (j != realErrorRates.length - 1) System.out.print(realErrorRates[j] + ""String_Node_Str"");
 else System.out.print(realErrorRates[j] + ""String_Node_Str"");
System.out.print(""String_Node_Str"");
for (int j=0; j < errorRates[p].length; j++) if (j != errorRates[p].length - 1) System.out.print(errorRates[p][j] + ""String_Node_Str"");
 else System.out.print(errorRates[p][j] + ""String_Node_Str"");
}
madMean/=functionOutputs.size();
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"" + madMean);
System.out.println(""String_Node_Str"");
}","public static void main(String[] args){
  int errorEstimationMethod=Integer.parseInt(args[0]);
  String filename=""String_Node_Str"";
  String separator=""String_Node_Str"";
  double[] classificationThresholds=new double[]{0.1,0.1,0.1,0.1};
  List<boolean[][]> functionOutputs=new ArrayList<>();
  List<boolean[]> trueLabels=new ArrayList<>();
  for (  File file : new File(filename).listFiles()) {
    if (file.isFile()) {
      DomainData data=parseLabeledDataFromCSVFile(file,separator,classificationThresholds,1);
      functionOutputs.add(data.functionOutputs);
      trueLabels.add(data.trueLabels);
    }
  }
  double[][] errorRates=new double[functionOutputs.size()][];
switch (errorEstimationMethod) {
case 0:
    for (int p=0; p < functionOutputs.size(); p++) {
      int numberOfFunctions=functionOutputs.get(p)[0].length;
      ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),2,true).build();
      ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
      double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
      errorRates[p]=new double[numberOfFunctions];
      System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
    }
  break;
case 1:
ErrorEstimationSimpleGraphicalModel eesgm=new ErrorEstimationSimpleGraphicalModel(functionOutputs,20000,100);
eesgm.performGibbsSampling();
errorRates=eesgm.getErrorRatesMeans();
break;
case 2:
ErrorEstimationDomainsDPGraphicalModel eeddpgm=new ErrorEstimationDomainsDPGraphicalModel(functionOutputs,10000,100,0.1);
eeddpgm.performGibbsSampling();
errorRates=eeddpgm.getErrorRatesMeans();
break;
case 3:
ErrorEstimationDomainsDPMixedGraphicalModel eeddpmgm=new ErrorEstimationDomainsDPMixedGraphicalModel(functionOutputs,100000,100,0.1);
eeddpmgm.performGibbsSampling();
errorRates=eeddpmgm.getErrorRatesMeans();
break;
case 4:
ErrorEstimationDomainsDPFinalGraphicalModel eeddpfgm=new ErrorEstimationDomainsDPFinalGraphicalModel(functionOutputs,20000,100,0.1);
eeddpfgm.performGibbsSampling();
errorRates=eeddpfgm.getErrorRatesMeans();
break;
case 5:
ErrorEstimationDomainsDPGraphicalModelComplicated eeddpgmc=new ErrorEstimationDomainsDPGraphicalModelComplicated(functionOutputs,1000,null);
eeddpgmc.performGibbsSampling();
errorRates=eeddpgmc.getErrorRatesMeans();
}
double[] mad=new double[functionOutputs.size()];
double madMean=0;
for (int p=0; p < functionOutputs.size(); p++) {
double[] realErrorRates=new double[errorRates[p].length];
for (int i=0; i < trueLabels.get(p).length; i++) {
for (int j=0; j < errorRates[p].length; j++) realErrorRates[j]+=(functionOutputs.get(p)[i][j] != trueLabels.get(p)[i]) ? 1 : 0;
}
mad[p]=0;
for (int j=0; j < errorRates[p].length; j++) {
realErrorRates[j]/=trueLabels.get(p).length;
mad[p]+=Math.abs(errorRates[p][j] - realErrorRates[j]);
}
mad[p]/=errorRates[p].length;
madMean+=mad[p];
System.out.println(""String_Node_Str"" + p + ""String_Node_Str"");
System.out.println(""String_Node_Str"");
System.out.print(""String_Node_Str"");
for (int j=0; j < realErrorRates.length; j++) if (j != realErrorRates.length - 1) System.out.print(realErrorRates[j] + ""String_Node_Str"");
 else System.out.print(realErrorRates[j] + ""String_Node_Str"");
System.out.print(""String_Node_Str"");
for (int j=0; j < errorRates[p].length; j++) if (j != errorRates[p].length - 1) System.out.print(errorRates[p][j] + ""String_Node_Str"");
 else System.out.print(errorRates[p][j] + ""String_Node_Str"");
}
madMean/=functionOutputs.size();
System.out.println(""String_Node_Str"");
System.out.println(""String_Node_Str"" + madMean);
System.out.println(""String_Node_Str"");
}",0.9612015018773468
144110,"public static DomainData parseLabeledDataFromCSVFile(File file,String separator,double[] classificationThresholds){
  BufferedReader br=null;
  String line;
  List<boolean[]> classifiersOutputsList=new ArrayList<>();
  List<Boolean> trueLabelsList=new ArrayList<>();
  try {
    br=new BufferedReader(new FileReader(file));
    br.readLine();
    while ((line=br.readLine()) != null) {
      String[] outputs=line.split(separator);
      trueLabelsList.add(!outputs[0].equals(""String_Node_Str""));
      boolean[] booleanOutputs=new boolean[outputs.length - 1];
      for (int i=1; i < outputs.length; i++) {
        if (classificationThresholds == null) {
          booleanOutputs[i - 1]=Double.parseDouble(outputs[i]) >= 0.5;
        }
 else         if (classificationThresholds.length == 1) {
          booleanOutputs[i - 1]=Double.parseDouble(outputs[i]) >= classificationThresholds[0];
        }
 else {
          booleanOutputs[i - 1]=Double.parseDouble(outputs[i]) >= classificationThresholds[i - 1];
        }
      }
      classifiersOutputsList.add(booleanOutputs);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  boolean[] trueLabels=new boolean[trueLabelsList.size()];
  for (int i=0; i < trueLabels.length; i++)   trueLabels[i]=trueLabelsList.get(i);
  return new DomainData(classifiersOutputsList.toArray(new boolean[classifiersOutputsList.size()][]),trueLabels);
}","public static DomainData parseLabeledDataFromCSVFile(File file,String separator,double[] classificationThresholds,int subSampling){
  BufferedReader br=null;
  String line;
  List<boolean[]> classifiersOutputsList=new ArrayList<>();
  List<Boolean> trueLabelsList=new ArrayList<>();
  try {
    br=new BufferedReader(new FileReader(file));
    br.readLine();
    int numberOfSamplesRead=0;
    while ((line=br.readLine()) != null) {
      if (numberOfSamplesRead % subSampling == 0) {
        String[] outputs=line.split(separator);
        trueLabelsList.add(!outputs[0].equals(""String_Node_Str""));
        boolean[] booleanOutputs=new boolean[outputs.length - 1];
        for (int i=1; i < outputs.length; i++) {
          if (classificationThresholds == null) {
            booleanOutputs[i - 1]=Double.parseDouble(outputs[i]) >= 0.5;
          }
 else           if (classificationThresholds.length == 1) {
            booleanOutputs[i - 1]=Double.parseDouble(outputs[i]) >= classificationThresholds[0];
          }
 else {
            booleanOutputs[i - 1]=Double.parseDouble(outputs[i]) >= classificationThresholds[i - 1];
          }
        }
        classifiersOutputsList.add(booleanOutputs);
      }
      numberOfSamplesRead++;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  boolean[] trueLabels=new boolean[trueLabelsList.size()];
  for (int i=0; i < trueLabels.length; i++)   trueLabels[i]=trueLabelsList.get(i);
  return new DomainData(classifiersOutputsList.toArray(new boolean[classifiersOutputsList.size()][]),trueLabels);
}",0.9276517473942366
144111,"public static Results runExperiment(ErrorEstimationMethod method,List<boolean[][]> functionOutputs,List<boolean[]> trueLabels,double alpha){
  double[][] errorRates=new double[functionOutputs.size()][];
  boolean[][] labels=new boolean[functionOutputs.size()][];
switch (method) {
case AR_2:
    for (int p=0; p < functionOutputs.size(); p++) {
      int numberOfFunctions=functionOutputs.get(p)[0].length;
      ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),2,true).build();
      ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
      double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
      errorRates[p]=new double[numberOfFunctions];
      System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
      labels[p]=new boolean[functionOutputs.get(p).length];
      for (int i=0; i < functionOutputs.get(p).length; i++) {
        double labelsSum=0;
        double errorRatesSum=0;
        for (int j=0; j < functionOutputs.get(p)[i].length; j++) {
          labelsSum+=(1 - errorRates[p][j]) * (functionOutputs.get(p)[i][j] ? 1 : 0);
          errorRatesSum+=(1 - errorRates[p][j]);
        }
        labels[p][i]=labelsSum / errorRatesSum >= 0.5;
      }
    }
  break;
case AR_N:
for (int p=0; p < functionOutputs.size(); p++) {
  int numberOfFunctions=functionOutputs.get(p)[0].length;
  ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),functionOutputs.get(0)[0].length,true).build();
  ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
  double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
  errorRates[p]=new double[numberOfFunctions];
  System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
  labels[p]=new boolean[functionOutputs.get(p).length];
  for (int i=0; i < functionOutputs.get(p).length; i++) {
    double labelsSum=0;
    double errorRatesSum=0;
    for (int j=0; j < functionOutputs.get(p)[i].length; j++) {
      labelsSum+=(1 - errorRates[p][j]) * (functionOutputs.get(p)[i][j] ? 1 : 0);
      errorRatesSum+=(1 - errorRates[p][j]);
    }
    labels[p][i]=labelsSum / errorRatesSum >= 0.5;
  }
}
break;
case SIMPLE_GM:
ErrorEstimationSimpleGraphicalModel eesgm=new ErrorEstimationSimpleGraphicalModel(functionOutputs,10000,10);
eesgm.performGibbsSampling();
errorRates=eesgm.getErrorRatesMeans();
double[][] labelMeansEesgm=eesgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEesgm[p][i] >= 0.5;
}
}
break;
case DOMAINS_DP_GM:
ErrorEstimationDomainsDPGraphicalModel eeddpgm=new ErrorEstimationDomainsDPGraphicalModel(functionOutputs,10000,10,alpha);
eeddpgm.performGibbsSampling();
errorRates=eeddpgm.getErrorRatesMeans();
double[][] labelMeansEeddpgm=eeddpgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEeddpgm[p][i] >= 0.5;
}
}
break;
case PAIRS_DP_GM:
ErrorEstimationDomainsDPMixedGraphicalModel eeddpmgm=new ErrorEstimationDomainsDPMixedGraphicalModel(functionOutputs,10000,10,alpha);
eeddpmgm.performGibbsSampling();
errorRates=eeddpmgm.getErrorRatesMeans();
double[][] labelMeansEeddpmgm=eeddpmgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEeddpmgm[p][i] >= 0.5;
}
}
break;
case DOMAINS_PER_CLASSIFIER_DP_GM:
ErrorEstimationDomainsDPFinalGraphicalModel eeddpfgm=new ErrorEstimationDomainsDPFinalGraphicalModel(functionOutputs,10000,10,alpha);
eeddpfgm.performGibbsSampling();
errorRates=eeddpfgm.getErrorRatesMeans();
double[][] labelMeansEeddpfgm=eeddpfgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEeddpfgm[p][i] >= 0.5;
}
}
break;
case COMPLICATED_DP_GM:
ErrorEstimationDomainsDPGraphicalModelComplicated eeddpgmc=new ErrorEstimationDomainsDPGraphicalModelComplicated(functionOutputs,1000,null);
eeddpgmc.performGibbsSampling();
errorRates=eeddpgmc.getErrorRatesMeans();
double[][] labelMeansEeddpgmc=eeddpgmc.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEeddpgmc[p][i] >= 0.5;
}
}
}
double[] errorRatesMAD=new double[functionOutputs.size()];
double errorRatesMADMean=0;
double[] labelsErrorRate=new double[functionOutputs.size()];
double labelsErrorRateMean=0;
for (int p=0; p < functionOutputs.size(); p++) {
labelsErrorRate[p]=0;
double[] realErrorRates=new double[errorRates[p].length];
for (int i=0; i < trueLabels.get(p).length; i++) {
labelsErrorRate[p]+=(labels[p][i] != trueLabels.get(p)[i]) ? 1 : 0;
for (int j=0; j < errorRates[p].length; j++) realErrorRates[j]+=(functionOutputs.get(p)[i][j] != trueLabels.get(p)[i]) ? 1 : 0;
}
labelsErrorRate[p]/=trueLabels.get(p).length;
labelsErrorRateMean+=labelsErrorRate[p];
errorRatesMAD[p]=0;
for (int j=0; j < errorRates[p].length; j++) {
realErrorRates[j]/=trueLabels.get(p).length;
errorRatesMAD[p]+=Math.abs(errorRates[p][j] - realErrorRates[j]);
}
errorRatesMAD[p]/=errorRates[p].length;
errorRatesMADMean+=errorRatesMAD[p];
}
errorRatesMADMean/=functionOutputs.size();
labelsErrorRateMean/=functionOutputs.size();
return new Results(errorRatesMADMean,labelsErrorRateMean);
}","public static Results runExperiment(ErrorEstimationMethod method,List<boolean[][]> functionOutputs,List<boolean[]> trueLabels,double alpha){
  double[][] errorRates=new double[functionOutputs.size()][];
  boolean[][] labels=new boolean[functionOutputs.size()][];
switch (method) {
case AR_2:
    for (int p=0; p < functionOutputs.size(); p++) {
      int numberOfFunctions=functionOutputs.get(p)[0].length;
      ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),2,true).build();
      ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
      double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
      errorRates[p]=new double[numberOfFunctions];
      System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
      labels[p]=new boolean[functionOutputs.get(p).length];
      for (int i=0; i < functionOutputs.get(p).length; i++) {
        double labelsSum=0;
        double errorRatesSum=0;
        for (int j=0; j < functionOutputs.get(p)[i].length; j++) {
          labelsSum+=(1 - errorRates[p][j]) * (functionOutputs.get(p)[i][j] ? 1 : 0);
          errorRatesSum+=(1 - errorRates[p][j]);
        }
        labels[p][i]=labelsSum / errorRatesSum >= 0.5;
      }
    }
  break;
case AR_N:
for (int p=0; p < functionOutputs.size(); p++) {
  int numberOfFunctions=functionOutputs.get(p)[0].length;
  ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),functionOutputs.get(0)[0].length,true).build();
  ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
  double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
  errorRates[p]=new double[numberOfFunctions];
  System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
  labels[p]=new boolean[functionOutputs.get(p).length];
  for (int i=0; i < functionOutputs.get(p).length; i++) {
    double labelsSum=0;
    double errorRatesSum=0;
    for (int j=0; j < functionOutputs.get(p)[i].length; j++) {
      labelsSum+=(1 - errorRates[p][j]) * (functionOutputs.get(p)[i][j] ? 1 : 0);
      errorRatesSum+=(1 - errorRates[p][j]);
    }
    labels[p][i]=labelsSum / errorRatesSum >= 0.5;
  }
}
break;
case SIMPLE_GM:
ErrorEstimationSimpleGraphicalModel eesgm=new ErrorEstimationSimpleGraphicalModel(functionOutputs,10000,10);
eesgm.performGibbsSampling();
errorRates=eesgm.getErrorRatesMeans();
double[][] labelMeansEesgm=eesgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEesgm[p][i] >= 0.5;
}
}
break;
case DOMAINS_DP_GM:
ErrorEstimationDomainsDPGraphicalModel eeddpgm=new ErrorEstimationDomainsDPGraphicalModel(functionOutputs,10000,10,alpha);
eeddpgm.performGibbsSampling();
errorRates=eeddpgm.getErrorRatesMeans();
double[][] labelMeansEeddpgm=eeddpgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEeddpgm[p][i] >= 0.5;
}
}
break;
case DOMAINS_FAST_DP_GM:
ErrorEstimationDomainsFastDPGraphicalModel eedfdpgm=new ErrorEstimationDomainsFastDPGraphicalModel(functionOutputs,10000,10,alpha);
eedfdpgm.performGibbsSampling();
errorRates=eedfdpgm.getErrorRatesMeans();
double[][] labelMeansEedfdpgm=eedfdpgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEedfdpgm[p][i] >= 0.5;
}
}
break;
case PAIRS_DP_GM:
ErrorEstimationDomainsDPMixedGraphicalModel eeddpmgm=new ErrorEstimationDomainsDPMixedGraphicalModel(functionOutputs,10000,10,alpha);
eeddpmgm.performGibbsSampling();
errorRates=eeddpmgm.getErrorRatesMeans();
double[][] labelMeansEeddpmgm=eeddpmgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEeddpmgm[p][i] >= 0.5;
}
}
break;
case PAIRS_FAST_DP_GM:
ErrorEstimationDomainsFastDPMixedGraphicalModel eedfdpmgm=new ErrorEstimationDomainsFastDPMixedGraphicalModel(functionOutputs,10000,10,alpha);
eedfdpmgm.performGibbsSampling();
errorRates=eedfdpmgm.getErrorRatesMeans();
double[][] labelMeansEedfdpmgm=eedfdpmgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEedfdpmgm[p][i] >= 0.5;
}
}
break;
case PAIRS_FAST_HDP_GM:
ErrorEstimationDomainsFastHDPMixedGraphicalModel eedfhdpmgm=new ErrorEstimationDomainsFastHDPMixedGraphicalModel(functionOutputs,10000,10,alpha);
eedfhdpmgm.performGibbsSampling();
errorRates=eedfhdpmgm.getErrorRatesMeans();
double[][] labelMeansEedfhdpmgm=eedfhdpmgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEedfhdpmgm[p][i] >= 0.5;
}
}
break;
case DOMAINS_PER_CLASSIFIER_DP_GM:
ErrorEstimationDomainsDPFinalGraphicalModel eeddpfgm=new ErrorEstimationDomainsDPFinalGraphicalModel(functionOutputs,10000,10,alpha);
eeddpfgm.performGibbsSampling();
errorRates=eeddpfgm.getErrorRatesMeans();
double[][] labelMeansEeddpfgm=eeddpfgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEeddpfgm[p][i] >= 0.5;
}
}
break;
case DOMAINS_PER_CLASSIFIER_FAST_DP_GM:
ErrorEstimationDomainsFastDPFinalGraphicalModel eedfdpfgm=new ErrorEstimationDomainsFastDPFinalGraphicalModel(functionOutputs,10000,10,alpha);
eedfdpfgm.performGibbsSampling();
errorRates=eedfdpfgm.getErrorRatesMeans();
double[][] labelMeansEedfdpfgm=eedfdpfgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEedfdpfgm[p][i] >= 0.5;
}
}
break;
case COMPLICATED_DP_GM:
ErrorEstimationDomainsDPGraphicalModelComplicated eeddpgmc=new ErrorEstimationDomainsDPGraphicalModelComplicated(functionOutputs,1000,null);
eeddpgmc.performGibbsSampling();
errorRates=eeddpgmc.getErrorRatesMeans();
double[][] labelMeansEeddpgmc=eeddpgmc.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEeddpgmc[p][i] >= 0.5;
}
}
}
double[] errorRatesMAD=new double[functionOutputs.size()];
double errorRatesMADMean=0;
double[] labelsErrorRate=new double[functionOutputs.size()];
double labelsErrorRateMean=0;
for (int p=0; p < functionOutputs.size(); p++) {
labelsErrorRate[p]=0;
double[] realErrorRates=new double[errorRates[p].length];
for (int i=0; i < trueLabels.get(p).length; i++) {
labelsErrorRate[p]+=(labels[p][i] != trueLabels.get(p)[i]) ? 1 : 0;
for (int j=0; j < errorRates[p].length; j++) realErrorRates[j]+=(functionOutputs.get(p)[i][j] != trueLabels.get(p)[i]) ? 1 : 0;
}
labelsErrorRate[p]/=trueLabels.get(p).length;
labelsErrorRateMean+=labelsErrorRate[p];
errorRatesMAD[p]=0;
for (int j=0; j < errorRates[p].length; j++) {
realErrorRates[j]/=trueLabels.get(p).length;
errorRatesMAD[p]+=Math.abs(errorRates[p][j] - realErrorRates[j]);
}
errorRatesMAD[p]/=errorRates[p].length;
errorRatesMADMean+=errorRatesMAD[p];
}
errorRatesMADMean/=functionOutputs.size();
labelsErrorRateMean/=functionOutputs.size();
return new Results(errorRatesMADMean,labelsErrorRateMean);
}",0.8505878979065099
144112,"public static void main(String[] args){
  String filename=""String_Node_Str"";
  filename=""String_Node_Str"";
  String separator=""String_Node_Str"";
  double[] classificationThresholds=new double[]{0.1,0.1,0.1,0.1};
  classificationThresholds=new double[]{0.5};
  List<boolean[][]> functionOutputs=new ArrayList<>();
  List<boolean[]> trueLabels=new ArrayList<>();
  for (  File file : new File(filename).listFiles()) {
    if (file.isFile()) {
      DomainData data=parseLabeledDataFromCSVFile(file,separator,classificationThresholds,1);
      functionOutputs.add(data.functionOutputs);
      trueLabels.add(data.trueLabels);
    }
  }
  ErrorEstimationMethod[] errorEstimationMethods=new ErrorEstimationMethod[]{ErrorEstimationMethod.DOMAINS_DP_GM,ErrorEstimationMethod.PAIRS_DP_GM};
  double[] alphaValues=new double[]{1e-3,1e-2,1e-1,1e0,1e1,1e2,1e3};
  runExperiments(errorEstimationMethods,alphaValues,functionOutputs,trueLabels);
}","public static void main(String[] args){
  String filename=""String_Node_Str"";
  filename=""String_Node_Str"";
  String separator=""String_Node_Str"";
  double[] classificationThresholds=new double[]{0.1,0.1,0.1,0.1};
  classificationThresholds=new double[]{0.5};
  List<boolean[][]> functionOutputs=new ArrayList<>();
  List<boolean[]> trueLabels=new ArrayList<>();
  for (  File file : new File(filename).listFiles()) {
    if (file.isFile()) {
      DomainData data=parseLabeledDataFromCSVFile(file,separator,classificationThresholds,1);
      functionOutputs.add(data.functionOutputs);
      trueLabels.add(data.trueLabels);
    }
  }
  ErrorEstimationMethod[] errorEstimationMethods=new ErrorEstimationMethod[]{ErrorEstimationMethod.PAIRS_FAST_HDP_GM};
  double[] alphaValues=new double[]{1e5};
  runExperiments(errorEstimationMethods,alphaValues,functionOutputs,trueLabels);
}",0.960751796572692
144113,"private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
    }
  }
  for (int j=0; j < numberOfFunctions; j++) {
    for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
      sum_2[j][k]=0;
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[iterationNumber][p][j] == k)         sum_2[j][k]+=disagreements[j][p];
      }
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      double[] z_probabilities=new double[numberOfDomains * numberOfFunctions];
      for (int p_inner=0; p_inner < numberOfDomains; p_inner++)       for (int j_inner=0; j_inner < numberOfFunctions; j_inner++)       if (p_inner != p || j_inner != j)       z_probabilities[zSamples[iterationNumber][p_inner][j_inner]]++;
      int k_new=-1;
      for (int k=0; k < z_probabilities.length; k++)       if (z_probabilities[k] == 0.0) {
        z_probabilities[k]=alpha;
        k_new=k;
        break;
      }
      for (int k=0; k < z_probabilities.length; k++) {
        z_probabilities[k]=Math.log(z_probabilities[k]);
        z_probabilities[k]-=Math.log(numberOfDomains - 1 + alpha);
      }
      for (int k=0; k < z_probabilities.length; k++) {
        if (zSamples[iterationNumber][p][j] == k) {
          sum_1[j][k]-=numberOfDataSamples[p];
          sum_2[j][k]-=disagreements[j][p];
        }
        if (k != k_new) {
          double alpha=alpha_e + sum_2[j][k] + disagreements[j][p];
          double beta=beta_e + sum_1[j][k] - sum_2[j][k] + numberOfDataSamples[p] - disagreements[j][p];
          z_probabilities[k]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[j][k],beta_e + sum_1[j][k] - sum_2[j][k]);
        }
 else {
          z_probabilities[k_new]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
        }
      }
      double normalizationConstant=MatrixUtilities.computeLogSumExp(z_probabilities);
      for (int k=0; k < z_probabilities.length; k++)       z_probabilities[k]=Math.exp(z_probabilities[k] - normalizationConstant);
      double[] z_cdf=new double[z_probabilities.length];
      z_cdf[0]=z_probabilities[0];
      for (int i=1; i < z_probabilities.length; i++)       z_cdf[i]=z_cdf[i - 1] + z_probabilities[i];
      double uniform=random.nextDouble();
      zSamples[iterationNumber][p][j]=z_probabilities.length - 1;
      for (int k=0; k < z_probabilities.length - 1; k++) {
        if (z_cdf[k] > uniform) {
          zSamples[iterationNumber][p][j]=k;
          sum_1[j][k]+=numberOfDataSamples[p];
          sum_2[j][k]+=disagreements[j][p];
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == z_probabilities.length - 1) {
        sum_1[j][z_probabilities.length - 1]+=numberOfDataSamples[p];
        sum_2[j][z_probabilities.length - 1]+=disagreements[j][p];
      }
    }
  }
}","private void sampleZAndBurnWithCollapsedErrorRates(int iterationNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[iterationNumber][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    sum_2[k]=0;
    for (int j=0; j < numberOfFunctions; j++) {
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[iterationNumber][p][j] == k)         sum_2[k]+=disagreements[j][p];
      }
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      double[] z_probabilities=new double[numberOfDomains * numberOfFunctions];
      for (int p_inner=0; p_inner < numberOfDomains; p_inner++)       for (int j_inner=0; j_inner < numberOfFunctions; j_inner++)       if (p_inner != p || j_inner != j)       z_probabilities[zSamples[iterationNumber][p_inner][j_inner]]++;
      int k_new=-1;
      for (int k=0; k < z_probabilities.length; k++)       if (z_probabilities[k] == 0.0) {
        z_probabilities[k]=alpha;
        k_new=k;
        break;
      }
      for (int k=0; k < z_probabilities.length; k++) {
        z_probabilities[k]=Math.log(z_probabilities[k]);
        z_probabilities[k]-=Math.log(numberOfDomains - 1 + alpha);
      }
      for (int k=0; k < z_probabilities.length; k++) {
        if (zSamples[iterationNumber][p][j] == k) {
          sum_1[k]-=numberOfDataSamples[p];
          sum_2[k]-=disagreements[j][p];
        }
        if (k != k_new) {
          double alpha=alpha_e + sum_2[k] + disagreements[j][p];
          double beta=beta_e + sum_1[k] - sum_2[k] + numberOfDataSamples[p] - disagreements[j][p];
          z_probabilities[k]+=logBeta(alpha,beta) - logBeta(alpha_e + sum_2[k],beta_e + sum_1[k] - sum_2[k]);
        }
 else {
          z_probabilities[k_new]+=logBeta(alpha_e + disagreements[j][p],beta_e + numberOfDataSamples[p] - disagreements[j][p]) - logBeta(alpha_e,beta_e);
        }
      }
      double normalizationConstant=MatrixUtilities.computeLogSumExp(z_probabilities);
      for (int k=0; k < z_probabilities.length; k++)       z_probabilities[k]=Math.exp(z_probabilities[k] - normalizationConstant);
      double[] z_cdf=new double[z_probabilities.length];
      z_cdf[0]=z_probabilities[0];
      for (int i=1; i < z_probabilities.length; i++)       z_cdf[i]=z_cdf[i - 1] + z_probabilities[i];
      double uniform=random.nextDouble();
      zSamples[iterationNumber][p][j]=z_probabilities.length - 1;
      for (int k=0; k < z_probabilities.length - 1; k++) {
        if (z_cdf[k] > uniform) {
          zSamples[iterationNumber][p][j]=k;
          sum_1[k]+=numberOfDataSamples[p];
          sum_2[k]+=disagreements[j][p];
          break;
        }
      }
      if (zSamples[iterationNumber][p][j] == z_probabilities.length - 1) {
        sum_1[z_probabilities.length - 1]+=numberOfDataSamples[p];
        sum_2[z_probabilities.length - 1]+=disagreements[j][p];
      }
    }
  }
}",0.796384395813511
144114,"public ErrorEstimationDomainsDPMixedGraphicalModel(List<boolean[][]> functionOutputs,int numberOfIterations,int thinning,double alpha){
  this.alpha=alpha;
  this.numberOfIterations=numberOfIterations;
  burnInIterations=numberOfIterations * 9 / 10;
  this.thinning=thinning;
  numberOfFunctions=functionOutputs.get(0)[0].length;
  numberOfDomains=functionOutputs.size();
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  numberOfSamples=(numberOfIterations - burnInIterations) / thinning;
  priorSamples=new double[numberOfSamples][numberOfDomains];
  errorRateSamples=new double[numberOfSamples][numberOfDomains * numberOfFunctions];
  zSamples=new int[numberOfSamples][numberOfDomains][numberOfFunctions];
  labelsSamples=new int[numberOfSamples][numberOfDomains][];
  disagreements=new double[numberOfFunctions][numberOfDomains];
  sum_1=new double[numberOfFunctions][numberOfDomains * numberOfFunctions];
  sum_2=new double[numberOfFunctions][numberOfDomains * numberOfFunctions];
  priorMeans=new double[numberOfDomains];
  priorVariances=new double[numberOfDomains];
  labelMeans=new double[numberOfDomains][];
  labelVariances=new double[numberOfDomains][];
  errorRateMeans=new double[numberOfDomains][numberOfFunctions];
  errorRateVariances=new double[numberOfDomains][numberOfFunctions];
  for (int p=0; p < numberOfDomains; p++) {
    labelMeans[p]=new double[numberOfDataSamples[p]];
    labelVariances[p]=new double[numberOfDataSamples[p]];
    priorSamples[0][p]=0.5;
    labelsSamples[0][p]=new int[numberOfDataSamples[p]];
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelsSamples[0][p][i]=randomDataGenerator.nextBinomial(1,0.5);
    for (int j=0; j < numberOfFunctions; j++) {
      zSamples[0][p][j]=0;
      errorRateSamples[0][p * numberOfFunctions + j]=0.25;
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[0][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    for (int j=0; j < numberOfFunctions; j++) {
      sum_1[j][k]=0;
      sum_2[j][k]=0;
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[0][p][j] == k) {
          sum_1[j][k]+=numberOfDataSamples[p];
          sum_2[j][k]+=disagreements[j][p];
        }
      }
    }
  }
}","public ErrorEstimationDomainsDPMixedGraphicalModel(List<boolean[][]> functionOutputs,int numberOfIterations,int thinning,double alpha){
  this.alpha=alpha;
  this.numberOfIterations=numberOfIterations;
  burnInIterations=numberOfIterations * 9 / 10;
  this.thinning=thinning;
  numberOfFunctions=functionOutputs.get(0)[0].length;
  numberOfDomains=functionOutputs.size();
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  numberOfSamples=(numberOfIterations - burnInIterations) / thinning;
  priorSamples=new double[numberOfSamples][numberOfDomains];
  errorRateSamples=new double[numberOfSamples][numberOfDomains * numberOfFunctions];
  zSamples=new int[numberOfSamples][numberOfDomains][numberOfFunctions];
  labelsSamples=new int[numberOfSamples][numberOfDomains][];
  disagreements=new double[numberOfFunctions][numberOfDomains];
  sum_1=new double[numberOfDomains * numberOfFunctions];
  sum_2=new double[numberOfDomains * numberOfFunctions];
  priorMeans=new double[numberOfDomains];
  priorVariances=new double[numberOfDomains];
  labelMeans=new double[numberOfDomains][];
  labelVariances=new double[numberOfDomains][];
  errorRateMeans=new double[numberOfDomains][numberOfFunctions];
  errorRateVariances=new double[numberOfDomains][numberOfFunctions];
  for (int p=0; p < numberOfDomains; p++) {
    labelMeans[p]=new double[numberOfDataSamples[p]];
    labelVariances[p]=new double[numberOfDataSamples[p]];
    priorSamples[0][p]=0.5;
    labelsSamples[0][p]=new int[numberOfDataSamples[p]];
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelsSamples[0][p][i]=randomDataGenerator.nextBinomial(1,0.5);
    for (int j=0; j < numberOfFunctions; j++) {
      zSamples[0][p][j]=0;
      errorRateSamples[0][p * numberOfFunctions + j]=0.25;
      disagreements[j][p]=0;
      for (int i=0; i < numberOfDataSamples[p]; i++)       if (functionOutputsArray[j][p][i] != labelsSamples[0][p][i])       disagreements[j][p]++;
    }
  }
  for (int k=0; k < numberOfDomains * numberOfFunctions; k++) {
    sum_1[k]=0;
    sum_2[k]=0;
    for (int j=0; j < numberOfFunctions; j++) {
      for (int p=0; p < numberOfDomains; p++) {
        if (zSamples[0][p][j] == k) {
          sum_1[k]+=numberOfDataSamples[p];
          sum_2[k]+=disagreements[j][p];
        }
      }
    }
  }
}",0.9718772826880936
144115,"@SuppressWarnings(""String_Node_Str"") private Map<String,List<T>> selectFeatures(List<String> names) throws SQLException, IOException {
  String selectionQuery=""String_Node_Str"" + databaseName + ""String_Node_Str""+ tableName+ ""String_Node_Str"";
  for (  String name : names)   selectionQuery+=""String_Node_Str"" + name + ""String_Node_Str"";
  selectionQuery=selectionQuery.substring(0,selectionQuery.length() - 1) + ""String_Node_Str"";
  ResultSet result=connection.createStatement().executeQuery(selectionQuery);
  Map<String,List<T>> featureMappings=new HashMap<>();
  while (result.next()) {
    List<T> features=new ArrayList<>();
    for (int view=0; view < numberOfViews; view++) {
      InputStream inputStream=result.getBinaryStream(""String_Node_Str"" + view);
      if (inputStream != null)       features.add((T)Vectors.build(inputStream));
 else       features.add(null);
    }
    featureMappings.put(result.getString(""String_Node_Str""),features);
  }
  return featureMappings;
}","@SuppressWarnings(""String_Node_Str"") private Map<String,List<T>> selectFeatures(List<String> names) throws SQLException, IOException {
  String selectionQuery=""String_Node_Str"" + databaseName + ""String_Node_Str""+ tableName+ ""String_Node_Str"";
  for (  String name : names)   selectionQuery+=""String_Node_Str"";
  selectionQuery=selectionQuery.substring(0,selectionQuery.length() - 1) + ""String_Node_Str"";
  PreparedStatement preparedStatement=connection.prepareStatement(selectionQuery);
  int parameterIndex=1;
  for (  String name : names)   preparedStatement.setString(parameterIndex++,name);
  ResultSet result=preparedStatement.executeQuery();
  Map<String,List<T>> featureMappings=new HashMap<>();
  while (result.next()) {
    List<T> features=new ArrayList<>();
    for (int view=0; view < numberOfViews; view++) {
      InputStream inputStream=result.getBinaryStream(""String_Node_Str"" + view);
      if (inputStream != null)       features.add((T)Vectors.build(inputStream));
 else       features.add(null);
    }
    featureMappings.put(result.getString(""String_Node_Str""),features);
  }
  preparedStatement.close();
  return featureMappings;
}",0.8568755846585594
144116,"/** 
 * {@inheritDoc} 
 */
@Override public DenseVector saxpyPlusConstantInPlace(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  for (int i=0; i < size - 1; i++)   array[i]+=scalar * vector.get(i);
  return this;
}","/** 
 * {@inheritDoc} 
 */
@Override public DenseVector saxpyPlusConstantInPlace(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  for (int i=0; i < size - 1; i++)   array[i]+=scalar * vector.get(i);
  array[size - 1]+=scalar;
  return this;
}",0.9562398703403564
144117,"/** 
 * {@inheritDoc} 
 */
@Override public DenseVector saxpyPlusConstant(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  DenseVector resultVector=new DenseVector(size);
  double[] resultVectorArray=resultVector.getArray();
  for (int i=0; i < size - 1; i++)   resultVectorArray[i]=array[i] + scalar * vector.get(i);
  resultVectorArray[size - 1]=array[size - 1];
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public DenseVector saxpyPlusConstant(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  DenseVector resultVector=new DenseVector(size);
  double[] resultVectorArray=resultVector.getArray();
  for (int i=0; i < size - 1; i++)   resultVectorArray[i]=array[i] + scalar * vector.get(i);
  resultVectorArray[size - 1]=array[size - 1] + scalar;
  return resultVector;
}",0.9904963041182682
144118,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpyPlusConstantInPlace(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  if (vector.type() == VectorType.SPARSE) {
    int[] newIndexes=new int[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries];
    double[] newValues=new double[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries];
    int currentIndex=0;
    int vector1Index=0;
    int vector2Index=0;
    while (vector1Index < numberOfNonzeroEntries && vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      if (indexes[vector1Index] < ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index];
        currentIndex++;
        vector1Index++;
      }
 else       if (indexes[vector1Index] > ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
        newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector2Index++;
      }
 else {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index] + scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector1Index++;
        vector2Index++;
      }
    }
    while (vector1Index < numberOfNonzeroEntries) {
      newIndexes[currentIndex]=indexes[vector1Index];
      newValues[currentIndex]=values[vector1Index];
      currentIndex++;
      vector1Index++;
    }
    while (vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
      newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
      currentIndex++;
      vector2Index++;
    }
    indexes=newIndexes;
    values=newValues;
    numberOfNonzeroEntries=currentIndex;
  }
 else {
    throw new UnsupportedOperationException();
  }
  return this;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpyPlusConstantInPlace(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  if (vector.type() == VectorType.SPARSE) {
    int[] newIndexes=new int[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    double[] newValues=new double[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    int currentIndex=0;
    int vector1Index=0;
    int vector2Index=0;
    while (vector1Index < numberOfNonzeroEntries && vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      if (indexes[vector1Index] < ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index];
        currentIndex++;
        vector1Index++;
      }
 else       if (indexes[vector1Index] > ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
        newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector2Index++;
      }
 else {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index] + scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector1Index++;
        vector2Index++;
      }
    }
    while (vector1Index < numberOfNonzeroEntries) {
      newIndexes[currentIndex]=indexes[vector1Index];
      newValues[currentIndex]=values[vector1Index];
      currentIndex++;
      vector1Index++;
    }
    while (vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
      newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
      currentIndex++;
      vector2Index++;
    }
    if (newIndexes[currentIndex - 1] == size - 1) {
      newValues[currentIndex - 1]+=scalar;
    }
 else {
      newIndexes[currentIndex]=size - 1;
      newValues[currentIndex]=scalar;
      currentIndex++;
    }
    indexes=newIndexes;
    values=newValues;
    numberOfNonzeroEntries=currentIndex;
  }
 else {
    throw new UnsupportedOperationException();
  }
  return this;
}",0.9499553172475425
144119,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpyPlusConstant(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  SparseVector resultVector;
  if (vector.type() == VectorType.SPARSE) {
    int[] newIndexes=new int[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries];
    double[] newValues=new double[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries];
    int currentIndex=0;
    int vector1Index=0;
    int vector2Index=0;
    while (vector1Index < numberOfNonzeroEntries && vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      if (indexes[vector1Index] < ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index];
        currentIndex++;
        vector1Index++;
      }
 else       if (indexes[vector1Index] > ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
        newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector2Index++;
      }
 else {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index] + scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector1Index++;
        vector2Index++;
      }
    }
    while (vector1Index < numberOfNonzeroEntries) {
      newIndexes[currentIndex]=indexes[vector1Index];
      newValues[currentIndex]=values[vector1Index];
      currentIndex++;
      vector1Index++;
    }
    while (vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
      newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
      currentIndex++;
      vector2Index++;
    }
    resultVector=new SparseVector(size,currentIndex,newIndexes,newValues);
  }
 else {
    throw new UnsupportedOperationException();
  }
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpyPlusConstant(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  SparseVector resultVector;
  if (vector.type() == VectorType.SPARSE) {
    int[] newIndexes=new int[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    double[] newValues=new double[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    int currentIndex=0;
    int vector1Index=0;
    int vector2Index=0;
    while (vector1Index < numberOfNonzeroEntries && vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      if (indexes[vector1Index] < ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index];
        currentIndex++;
        vector1Index++;
      }
 else       if (indexes[vector1Index] > ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
        newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector2Index++;
      }
 else {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index] + scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector1Index++;
        vector2Index++;
      }
    }
    while (vector1Index < numberOfNonzeroEntries) {
      newIndexes[currentIndex]=indexes[vector1Index];
      newValues[currentIndex]=values[vector1Index];
      currentIndex++;
      vector1Index++;
    }
    while (vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
      newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
      currentIndex++;
      vector2Index++;
    }
    if (newIndexes[currentIndex - 1] == size - 1) {
      newValues[currentIndex - 1]+=scalar;
    }
 else {
      newIndexes[currentIndex]=size - 1;
      newValues[currentIndex]=scalar;
      currentIndex++;
    }
    resultVector=new SparseVector(size,currentIndex,newIndexes,newValues);
  }
 else {
    throw new UnsupportedOperationException();
  }
  return resultVector;
}",0.950354609929078
144120,"/** 
 * Performs a modified saxpy operation, as it is named in LAPACK. Let us denote the current vector by \(\boldsymbol{y}\). Given a scalar \(\alpha\) and another vector \(\boldsymbol{x}\) with size 1 less than the current vector, this function replaces this vector with the value of \(\boldsymbol{y}+\alpha\boldsymbol{x}+y'\), where the last element of the current vector, /(\boldsymbol{y}/) is left as it is (i.e., nothing is added to it).
 * @param scalar  The scalar \(\alpha\).
 * @param vector  The vector \(\boldsymbol{x}\).
 * @return          The result of this operation (i.e., the current vector).
 */
public abstract Vector saxpyPlusConstantInPlace(double scalar,Vector vector);","/** 
 * Performs a modified saxpy operation, as it is named in LAPACK. Let us denote the current vector by \(\boldsymbol{y}\). Given a scalar \(\alpha\) and another vector \(\boldsymbol{x}\) with size 1 less than the current vector, this function replaces this vector with the value of \(\boldsymbol{y}+\alpha\boldsymbol{x}\), where for the last element of the current vector, /(\boldsymbol{y}/), we simply add \(\alpha\).
 * @param scalar  The scalar \(\alpha\).
 * @param vector  The vector \(\boldsymbol{x}\).
 * @return          The result of this operation (i.e., the current vector).
 */
public abstract Vector saxpyPlusConstantInPlace(double scalar,Vector vector);",0.9449743213499632
144121,"/** 
 * Performs a modified saxpy operation, as it is named in LAPACK. Let us denote the current vector by \(\boldsymbol{y}\). Given a scalar \(\alpha\) and another vector \(\boldsymbol{x}\) with size 1 less than the current vector, this function returns the value of \(\boldsymbol{y}+\alpha\boldsymbol{x}\), where the last element of the current vector, /(\boldsymbol{y}/) is left as it is (i.e., nothing is added to it).
 * @param scalar  The scalar \(\alpha\).
 * @param vector  The vector \(\boldsymbol{x}\).
 * @return          The result of this operation.
 */
public abstract Vector saxpyPlusConstant(double scalar,Vector vector);","/** 
 * Performs a modified saxpy operation, as it is named in LAPACK. Let us denote the current vector by \(\boldsymbol{y}\). Given a scalar \(\alpha\) and another vector \(\boldsymbol{x}\) with size 1 less than the current vector, this function returns the value of \(\boldsymbol{y}+\alpha\boldsymbol{x}\), where for the last element of the current vector, /(\boldsymbol{y}/), we simply add \(\alpha\).
 * @param scalar  The scalar \(\alpha\).
 * @param vector  The vector \(\boldsymbol{x}\).
 * @return          The result of this operation.
 */
public abstract Vector saxpyPlusConstant(double scalar,Vector vector);",0.9426751592356688
144122,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getName(){
  return name;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getName(){
  return name;
}",0.936842105263158
144123,"@Id @GeneratedValue @Column(name=""String_Node_Str"") public long getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.AUTO) @Column(name=""String_Node_Str"") public long getId(){
  return id;
}",0.8529411764705882
144124,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getAbbreviation(){
  return abbreviation;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getAbbreviation(){
  return abbreviation;
}",0.945945945945946
144125,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getName(){
  return name;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getName(){
  return name;
}",0.936842105263158
144126,"@Id @GeneratedValue @Column(name=""String_Node_Str"") public long getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.AUTO) @Column(name=""String_Node_Str"") public long getId(){
  return id;
}",0.8529411764705882
144127,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getName(){
  return name;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getName(){
  return name;
}",0.936842105263158
144128,"@Id @Column(name=""String_Node_Str"") public long getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.AUTO) @Column(name=""String_Node_Str"") public long getId(){
  return id;
}",0.7553191489361702
144129,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getGicsId(){
  return gicsId;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getGicsId(){
  return gicsId;
}",0.9393939393939394
144130,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getName(){
  return name;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getName(){
  return name;
}",0.936842105263158
144131,"@Id @Column(name=""String_Node_Str"") public long getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.AUTO) @Column(name=""String_Node_Str"") public long getId(){
  return id;
}",0.7553191489361702
144132,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getGicsId(){
  return gicsId;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getGicsId(){
  return gicsId;
}",0.9393939393939394
144133,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getName(){
  return name;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getName(){
  return name;
}",0.936842105263158
144134,"@Id @Column(name=""String_Node_Str"") public long getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.AUTO) @Column(name=""String_Node_Str"") public long getId(){
  return id;
}",0.7553191489361702
144135,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getGicsId(){
  return gicsId;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getGicsId(){
  return gicsId;
}",0.9393939393939394
144136,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getTickerSymbol(){
  return tickerSymbol;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getTickerSymbol(){
  return tickerSymbol;
}",0.945945945945946
144137,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getName(){
  return name;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getName(){
  return name;
}",0.936842105263158
144138,"@Id @Column(name=""String_Node_Str"") public long getId(){
  return id;
}","@Id @GeneratedValue(strategy=GenerationType.AUTO) @Column(name=""String_Node_Str"") public long getId(){
  return id;
}",0.7553191489361702
144139,"@Basic @Column(name=""String_Node_Str"") @NotNull public String getGicsId(){
  return gicsId;
}","@Basic @Column(name=""String_Node_Str"",unique=true) @NotNull public String getGicsId(){
  return gicsId;
}",0.9393939393939394
144140,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector mult(double scalar){
  SparseVector resultVector=new SparseVector(size,indexes,values);
  for (int i=0; i < numberOfNonzeroEntries; i++) {
    resultVector.values[i]*=scalar;
  }
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector mult(double scalar){
  SparseVector resultVector=new SparseVector(size,numberOfNonzeroEntries,indexes,values);
  for (int i=0; i < numberOfNonzeroEntries; i++)   resultVector.values[i]*=scalar;
  return resultVector;
}",0.7252336448598131
144141,"/** 
 * {@inheritDoc} 
 */
@Override public double norm(VectorNorm normType){
  return normType.compute(values);
}","/** 
 * {@inheritDoc} 
 */
@Override public double norm(VectorNorm normType){
  return normType.compute(Arrays.copyOf(values,numberOfNonzeroEntries));
}",0.8571428571428571
144142,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector div(double scalar){
  SparseVector resultVector=new SparseVector(size,indexes,values);
  for (int i=0; i < numberOfNonzeroEntries; i++) {
    resultVector.values[i]/=scalar;
  }
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector div(double scalar){
  SparseVector resultVector=new SparseVector(size,numberOfNonzeroEntries,indexes,values);
  for (int i=0; i < numberOfNonzeroEntries; i++)   resultVector.values[i]/=scalar;
  return resultVector;
}",0.724202626641651
144143,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector divInPlace(double scalar){
  for (int i=0; i < numberOfNonzeroEntries; i++) {
    values[i]/=scalar;
  }
  return this;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector divInPlace(double scalar){
  for (int i=0; i < numberOfNonzeroEntries; i++)   values[i]/=scalar;
  return this;
}",0.9770114942528736
144144,"/** 
 * {@inheritDoc} 
 */
@Override public void write(OutputStream outputStream,boolean includeType) throws IOException {
  if (includeType)   UnsafeSerializationUtilities.writeInt(outputStream,type().ordinal());
  UnsafeSerializationUtilities.writeInt(outputStream,size);
  UnsafeSerializationUtilities.writeInt(outputStream,numberOfNonzeroEntries);
  UnsafeSerializationUtilities.writeIntArray(outputStream,indexes);
  UnsafeSerializationUtilities.writeDoubleArray(outputStream,values);
}","/** 
 * {@inheritDoc} 
 */
@Override public void write(OutputStream outputStream,boolean includeType) throws IOException {
  if (includeType)   UnsafeSerializationUtilities.writeInt(outputStream,type().ordinal());
  UnsafeSerializationUtilities.writeInt(outputStream,size);
  UnsafeSerializationUtilities.writeInt(outputStream,numberOfNonzeroEntries);
  UnsafeSerializationUtilities.writeIntArray(outputStream,indexes,numberOfNonzeroEntries);
  UnsafeSerializationUtilities.writeDoubleArray(outputStream,values,numberOfNonzeroEntries);
}",0.9552529182879378
144145,"/** 
 * {@inheritDoc} 
 */
@Override public double sum(){
  double sum=values[0];
  for (int i=1; i < numberOfNonzeroEntries; i++) {
    sum+=values[i];
  }
  return sum;
}","/** 
 * {@inheritDoc} 
 */
@Override public double sum(){
  double sum=values[0];
  for (int i=1; i < numberOfNonzeroEntries; i++)   sum+=values[i];
  return sum;
}",0.9761904761904762
144146,"/** 
 * {@inheritDoc} 
 */
@Override public double min(){
  double minValue=values[0];
  for (int i=1; i < numberOfNonzeroEntries; i++) {
    minValue=Math.min(minValue,values[i]);
  }
  return minValue;
}","/** 
 * {@inheritDoc} 
 */
@Override public double min(){
  double minValue=values[0];
  for (int i=1; i < numberOfNonzeroEntries; i++)   minValue=Math.min(minValue,values[i]);
  return minValue;
}",0.9800995024875622
144147,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector multInPlace(double scalar){
  for (int i=0; i < numberOfNonzeroEntries; i++) {
    values[i]*=scalar;
  }
  return this;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector multInPlace(double scalar){
  for (int i=0; i < numberOfNonzeroEntries; i++)   values[i]*=scalar;
  return this;
}",0.9771428571428572
144148,"/** 
 * Writes the provided double array to the provided output stream byte by byte. Note that the size of the array is not stored and so the user of this method must make sure to store that as well somewhere, so that the array can be serialized later on.
 * @param outputStream    The output stream to write the provided double array to.
 * @param array           The double array to write to the provided output stream.
 * @throws IOException
 */
public static void writeDoubleArray(OutputStream outputStream,double[] array) throws IOException {
  byte[] buffer=new byte[array.length << 3];
  UNSAFE.copyMemory(array,DOUBLE_ARRAY_OFFSET,buffer,BYTE_ARRAY_OFFSET,array.length << 3);
  outputStream.write(buffer);
}","/** 
 * Writes a subarray of the provided double array to the provided output stream byte by byte. The subarray starts from the beginning of the provided double array and has   {@code length} elements. Note that the size of the arrayis not stored and so the user of this method must make sure to store that as well somewhere, so that the array can be serialized later on.
 * @param outputStream    The output stream to write the provided double array to.
 * @param array           The double array whose subarray to write to the provided output stream.
 * @param length          The length of the double array to write to the provided output stream.
 * @throws IOException
 */
public static void writeDoubleArray(OutputStream outputStream,double[] array,int length) throws IOException {
  byte[] buffer=new byte[length << 3];
  UNSAFE.copyMemory(array,DOUBLE_ARRAY_OFFSET,buffer,BYTE_ARRAY_OFFSET,length << 3);
  outputStream.write(buffer);
}",0.8473144236572119
144149,"/** 
 * Writes the provided integer array to the provided output stream byte by byte. Note that the size of the array is not stored and so the user of this method must make sure to store that as well somewhere, so that the array can be serialized later on.
 * @param outputStream    The output stream to write the provided integer array to.
 * @param array           The integer array to write to the provided output stream.
 * @throws IOException
 */
public static void writeIntArray(OutputStream outputStream,int[] array) throws IOException {
  byte[] buffer=new byte[array.length << 2];
  UNSAFE.copyMemory(array,INT_ARRAY_OFFSET,buffer,BYTE_ARRAY_OFFSET,array.length << 2);
  outputStream.write(buffer);
}","/** 
 * Writes a subarray of the provided integer array to the provided output stream byte by byte. The subarray starts from the beginning of the provided integer array and has   {@code length} elements. Note that the size of the arrayis not stored and so the user of this method must make sure to store that as well somewhere, so that the array can be serialized later on.
 * @param outputStream    The output stream to write the provided integer array to.
 * @param array           The integer array whose subarray to write to the provided output stream.
 * @param length          The length of the integer array to write to the provided output stream.
 * @throws IOException
 */
public static void writeIntArray(OutputStream outputStream,int[] array,int length) throws IOException {
  byte[] buffer=new byte[length << 2];
  UNSAFE.copyMemory(array,INT_ARRAY_OFFSET,buffer,BYTE_ARRAY_OFFSET,length << 2);
  outputStream.write(buffer);
}",0.8451730418943534
144150,"public double[] predict(DataInstance<Vector,Integer>[] dataInstances) throws UntrainedModelException ;","public double[] predict(DataInstance<Vector,Integer>[] dataInstances);",0.813953488372093
144151,"@Override public void updateDirection(){
  if (currentIteration == 0) {
    sumOfGradientSquares=currentGradient.map(gradient -> Math.pow(gradient,2)).copy();
    if (useL1Regularization) {
      sumOfGradients=currentGradient.copy();
    }
  }
 else {
    sumOfGradientSquares.addInPlace(currentGradient.map(gradient -> Math.pow(gradient,2)));
    if (useL1Regularization) {
      sumOfGradients.addInPlace(currentGradient);
    }
  }
  if (useL1Regularization) {
    currentDirection=sumOfGradients.map(x -> Math.abs(x) / currentIteration <= l1RegularizationWeight ? 0.0 : Math.signum(x) * (Math.abs(x) / currentIteration - l1RegularizationWeight)).mult(-1).divElementwise(sumOfGradientSquares.map(Math::sqrt).add(epsilon)).mult(currentIteration);
  }
 else {
    currentDirection=currentGradient.mult(-1).divElementwise(sumOfGradientSquares.map(Math::sqrt).add(epsilon));
  }
}","@Override public void updateDirection(){
  if (currentIteration == 0) {
    sumOfGradientSquares=currentGradient.map(gradient -> Math.pow(gradient,2)).copy();
    if (useL1Regularization) {
      sumOfGradients=currentGradient.copy();
    }
  }
 else {
    sumOfGradientSquares.addInPlace(currentGradient.map(gradient -> Math.pow(gradient,2)));
    if (useL1Regularization) {
      sumOfGradients.addInPlace(currentGradient);
    }
  }
  if (useL1Regularization) {
    currentDirection=sumOfGradients.map(x -> Math.abs(x) / currentIteration <= l1RegularizationWeight ? 0.0 : Math.signum(x) * (Math.abs(x) / (currentIteration + 1) - l1RegularizationWeight)).mult(-1).divElementwise(sumOfGradientSquares.map(Math::sqrt).add(epsilon)).mult(currentIteration);
  }
 else {
    currentDirection=currentGradient.mult(-1).divElementwise(sumOfGradientSquares.map(Math::sqrt).add(epsilon));
  }
}",0.9966024915062288
144152,"private AdaptiveGradientSolver(AbstractBuilder<?> builder){
  super(builder);
  sumOfGradients=Vectors.build(currentGradient.size(),currentGradient.type());
  squareRootOfSumOfGradientSquares=Vectors.build(currentGradient.size(),currentGradient.type()).add(epsilon);
}","private AdaptiveGradientSolver(AbstractBuilder<?> builder){
  super(builder);
  sumOfGradients=Vectors.build(currentGradient.size(),currentGradient.type());
  squareRootOfSumOfGradientSquares=Vectors.build(currentGradient.size(),currentGradient.type());
}",0.9751434034416826
144153,"@Override public void updateDirection(){
  squareRootOfSumOfGradientSquares.hypotenuseFastInPlace(currentGradient);
  if (useL1Regularization) {
    currentDirection=sumOfGradients.addInPlace(currentGradient).mapDivElementwise(x -> Math.abs(x) / (currentIteration + 1) <= l1RegularizationWeight ? 0.0 : -currentIteration * Math.signum(x) * (Math.abs(x) / (currentIteration + 1) - l1RegularizationWeight),squareRootOfSumOfGradientSquares);
  }
 else {
    currentDirection=currentGradient.divElementwise(squareRootOfSumOfGradientSquares).mult(-1);
  }
}","@Override public void updateDirection(){
  squareRootOfSumOfGradientSquares.hypotenuseFastInPlace(currentGradient);
  if (useL1Regularization) {
    currentDirection=sumOfGradients.addInPlace(currentGradient).mapDivElementwise(x -> Math.abs(x) / (currentIteration + 1) <= l1RegularizationWeight ? 0.0 : -currentIteration * Math.signum(x) * (Math.abs(x) / (currentIteration + 1) - l1RegularizationWeight),squareRootOfSumOfGradientSquares.add(epsilon));
  }
 else {
    currentDirection=currentGradient.divElementwise(squareRootOfSumOfGradientSquares.add(epsilon)).mult(-1);
  }
}",0.976991150442478
144154,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector multElementwise(Vector vector){
  checkVectorSize(vector);
  SparseVector resultVector=new SparseVector(size,hashMap);
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      resultVector.set(key,hashMap.get(key) * vector.get(key));
    }
  }
 else {
    if (this.numberOfNonzeroElements() <= vector.numberOfNonzeroElements()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          resultVector.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          resultVector.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
  }
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector multElementwise(Vector vector){
  checkVectorSize(vector);
  SparseVector resultVector=new SparseVector(size);
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      resultVector.set(key,hashMap.get(key) * vector.get(key));
    }
  }
 else {
    if (hashMap.keys().size() <= ((SparseVector)vector).hashMap.keys().size()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          resultVector.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          resultVector.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
  }
  return resultVector;
}",0.5509859154929577
144155,"/** 
 * {@inheritDoc} 
 */
@Override public double inner(Vector vector){
  checkVectorSize(vector);
  double result=0;
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      result+=hashMap.get(key) * vector.get(key);
    }
  }
 else {
    if (this.numberOfNonzeroElements() <= vector.numberOfNonzeroElements()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          result+=hashMap.get(key) * vector.get(key);
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          result+=hashMap.get(key) * vector.get(key);
        }
      }
    }
  }
  return result;
}","/** 
 * {@inheritDoc} 
 */
@Override public double inner(Vector vector){
  checkVectorSize(vector);
  double result=0;
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      result+=hashMap.get(key) * vector.get(key);
    }
  }
 else {
    if (this.cardinality() <= vector.cardinality()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          result+=hashMap.get(key) * vector.get(key);
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          result+=hashMap.get(key) * vector.get(key);
        }
      }
    }
  }
  return result;
}",0.9560155239327296
144156,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector multElementwiseInPlace(Vector vector){
  checkVectorSize(vector);
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      this.set(key,hashMap.get(key) * vector.get(key));
    }
  }
 else {
    if (this.numberOfNonzeroElements() <= vector.numberOfNonzeroElements()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          this.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          this.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
  }
  return this;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector multElementwiseInPlace(Vector vector){
  checkVectorSize(vector);
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      this.set(key,hashMap.get(key) * vector.get(key));
    }
  }
 else {
    if (this.cardinality() <= vector.cardinality()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          this.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          this.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
  }
  return this;
}",0.4060529634300126
144157,"@Override public void updateDirection(){
  if (currentIteration == 0) {
    sumOfGradientSquares=currentGradient.map(gradient -> Math.pow(gradient,2)).copy();
  }
 else {
    sumOfGradientSquares.addInPlace(currentGradient.map(gradient -> Math.pow(gradient,2)));
  }
  currentDirection=currentGradient.mult(-1).divElementwise(sumOfGradientSquares.map(x -> {
    if (x == 0)     return epsilon;
 else     return x;
  }
).map(Math::sqrt));
}","@Override public void updateDirection(){
  if (currentIteration == 0) {
    sumOfGradientSquares=currentGradient.map(gradient -> Math.pow(gradient,2)).copy();
  }
 else {
    sumOfGradientSquares.addInPlace(currentGradient.map(gradient -> Math.pow(gradient,2)));
  }
  currentDirection=currentGradient.mult(-1).divElementwise(sumOfGradientSquares.map(Math::sqrt).add(epsilon));
}",0.8948655256723717
144158,"@Override public void updateDirection(){
  if (currentIteration == 0) {
    sumOfGradientSquares=currentGradient.map(gradient -> Math.pow(gradient,2)).copy();
  }
 else {
    sumOfGradientSquares.addInPlace(currentGradient.map(gradient -> Math.pow(gradient,2)));
  }
  currentDirection=currentGradient.mult(-1).divElementwise(sumOfGradientSquares.map(Math::sqrt));
}","@Override public void updateDirection(){
  if (currentIteration == 0) {
    sumOfGradientSquares=currentGradient.map(gradient -> Math.pow(gradient,2)).copy();
  }
 else {
    sumOfGradientSquares.addInPlace(currentGradient.map(gradient -> Math.pow(gradient,2)));
  }
  currentDirection=currentGradient.mult(-1).divElementwise(sumOfGradientSquares.map(x -> {
    if (x == 0)     return epsilon;
 else     return x;
  }
).map(Math::sqrt));
}",0.9093167701863354
144159,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector multElementwise(Vector vector){
  checkVectorSize(vector);
  SparseVector resultVector=new SparseVector(size,hashMap);
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      resultVector.set(key,hashMap.get(key) * vector.get(key));
    }
  }
 else {
    if (size <= vector.size()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          resultVector.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          resultVector.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
  }
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector multElementwise(Vector vector){
  checkVectorSize(vector);
  SparseVector resultVector=new SparseVector(size,hashMap);
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      resultVector.set(key,hashMap.get(key) * vector.get(key));
    }
  }
 else {
    if (this.numberOfNonzeroElements() <= vector.numberOfNonzeroElements()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          resultVector.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          resultVector.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
  }
  return resultVector;
}",0.9694524495677234
144160,"/** 
 * {@inheritDoc} 
 */
@Override public double inner(Vector vector){
  checkVectorSize(vector);
  double result=0;
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      result+=hashMap.get(key) * vector.get(key);
    }
  }
 else {
    if (size <= vector.size()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          result+=hashMap.get(key) * vector.get(key);
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          result+=hashMap.get(key) * vector.get(key);
        }
      }
    }
  }
  return result;
}","/** 
 * {@inheritDoc} 
 */
@Override public double inner(Vector vector){
  checkVectorSize(vector);
  double result=0;
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      result+=hashMap.get(key) * vector.get(key);
    }
  }
 else {
    if (this.numberOfNonzeroElements() <= vector.numberOfNonzeroElements()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          result+=hashMap.get(key) * vector.get(key);
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          result+=hashMap.get(key) * vector.get(key);
        }
      }
    }
  }
  return result;
}",0.9652459016393444
144161,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector multElementwiseInPlace(Vector vector){
  checkVectorSize(vector);
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      this.set(key,hashMap.get(key) * vector.get(key));
    }
  }
 else {
    if (size <= vector.size()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          this.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          this.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
  }
  return this;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector multElementwiseInPlace(Vector vector){
  checkVectorSize(vector);
  if (vector.type() != VectorType.SPARSE) {
    for (    int key : hashMap.keys().elements()) {
      this.set(key,hashMap.get(key) * vector.get(key));
    }
  }
 else {
    if (this.numberOfNonzeroElements() <= vector.numberOfNonzeroElements()) {
      for (      int key : hashMap.keys().elements()) {
        if (((SparseVector)vector).hashMap.containsKey(key)) {
          this.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
 else {
      for (      int key : ((SparseVector)vector).hashMap.keys().elements()) {
        if (hashMap.containsKey(key)) {
          this.set(key,hashMap.get(key) * vector.get(key));
        }
      }
    }
  }
  return this;
}",0.9661341853035144
144162,"/** 
 * Gets a column of this matrix.
 * @param columnIndex The index of the column to get.
 * @return              The column corresponding to the provided index as a vector.
 * @exception ArrayIndexOutOfBoundsException  The provided column index is out of bounds.
 */
public Vector getColumn(int columnIndex){
  DenseVector resultVector=new DenseVector(rowDimension);
  double[] resultVectorArray=resultVector.getArray();
  try {
    for (int i=0; i < rowDimension; i++) {
      resultVectorArray[i]=array[i][columnIndex];
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"");
  }
  return resultVector;
}","/** 
 * Gets a column of this matrix.
 * @param columnIndex The index of the column to get.
 * @return              The column corresponding to the provided index as a vector.
 * @exception ArrayIndexOutOfBoundsException  The provided column index is out of bounds.
 */
public Vector getColumn(int columnIndex){
  Vector resultVector=new DenseVector(rowDimension);
  try {
    for (int i=0; i < rowDimension; i++) {
      resultVector.set(i,array[i][columnIndex]);
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"");
  }
  return resultVector;
}",0.922360248447205
144163,"/** 
 * Gets a row of this matrix.
 * @param rowIndex    The index of the row to get.
 * @return              The row corresponding to the provided index as a vector.
 * @exception ArrayIndexOutOfBoundsException  The provided row index is out of bounds.
 */
public Vector getRow(int rowIndex){
  DenseVector resultVector=new DenseVector(columnDimension);
  double[] resultVectorArray=resultVector.getArray();
  try {
    for (int i=0; i < columnDimension; i++) {
      resultVectorArray[i]=array[rowIndex][i];
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"");
  }
  return resultVector;
}","/** 
 * Gets a row of this matrix.
 * @param rowIndex    The index of the row to get.
 * @return              The row corresponding to the provided index as a vector.
 * @exception ArrayIndexOutOfBoundsException  The provided row index is out of bounds.
 */
public Vector getRow(int rowIndex){
  Vector resultVector=new DenseVector(columnDimension);
  try {
    for (int i=0; i < columnDimension; i++) {
      resultVector.set(i,array[rowIndex][i]);
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"");
  }
  return resultVector;
}",0.8791732909379968
144164,"@Test public void testCycleMethodSolver(){
  System.out.println(""String_Node_Str"");
  CoordinateDescentSolver coordinateDescentSolver=new CoordinateDescentSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(CoordinateDescentSolver.Method.CYCLE).build();
  double[] actualResult=coordinateDescentSolver.solve().getArray();
  double[] expectedResult=new double[]{1,1};
  Assert.assertArrayEquals(expectedResult,actualResult,0.2);
  System.out.println(""String_Node_Str"");
  Matrix A=new Matrix(new double[][]{{1,0.5},{0.5,1}});
  Vector b=new Vector(new double[]{1,2});
  coordinateDescentSolver=new CoordinateDescentSolver.Builder(new QuadraticFunction(A,b),new double[]{0,0}).method(CoordinateDescentSolver.Method.CYCLE).build();
  actualResult=coordinateDescentSolver.solve().getArray();
  expectedResult=new double[]{0,2};
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}","@Test public void testCycleMethodSolver(){
  System.out.println(""String_Node_Str"");
  CoordinateDescentSolver coordinateDescentSolver=new CoordinateDescentSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(CoordinateDescentSolver.Method.CYCLE).build();
  double[] actualResult=coordinateDescentSolver.solve().getArray();
  double[] expectedResult=new double[]{1,1};
  Assert.assertArrayEquals(expectedResult,actualResult,0.3);
  System.out.println(""String_Node_Str"");
  Matrix A=new Matrix(new double[][]{{1,0.5},{0.5,1}});
  Vector b=new Vector(new double[]{1,2});
  coordinateDescentSolver=new CoordinateDescentSolver.Builder(new QuadraticFunction(A,b),new double[]{0,0}).method(CoordinateDescentSolver.Method.CYCLE).build();
  actualResult=coordinateDescentSolver.solve().getArray();
  expectedResult=new double[]{0,2};
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}",0.9988938053097344
144165,"@Test public void testBackAndForthMethodSolver(){
  System.out.println(""String_Node_Str"");
  CoordinateDescentSolver coordinateDescentSolver=new CoordinateDescentSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(CoordinateDescentSolver.Method.BACK_AND_FORTH).build();
  double[] actualResult=coordinateDescentSolver.solve().getArray();
  double[] expectedResult=new double[]{1,1};
  Assert.assertArrayEquals(expectedResult,actualResult,0.2);
  System.out.println(""String_Node_Str"");
  Matrix A=new Matrix(new double[][]{{1,0.5},{0.5,1}});
  Vector b=new Vector(new double[]{1,2});
  coordinateDescentSolver=new CoordinateDescentSolver.Builder(new QuadraticFunction(A,b),new double[]{0,0}).method(CoordinateDescentSolver.Method.BACK_AND_FORTH).build();
  actualResult=coordinateDescentSolver.solve().getArray();
  expectedResult=new double[]{0,2};
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}","@Test public void testBackAndForthMethodSolver(){
  System.out.println(""String_Node_Str"");
  CoordinateDescentSolver coordinateDescentSolver=new CoordinateDescentSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(CoordinateDescentSolver.Method.BACK_AND_FORTH).build();
  double[] actualResult=coordinateDescentSolver.solve().getArray();
  double[] expectedResult=new double[]{1,1};
  Assert.assertArrayEquals(expectedResult,actualResult,0.3);
  System.out.println(""String_Node_Str"");
  Matrix A=new Matrix(new double[][]{{1,0.5},{0.5,1}});
  Vector b=new Vector(new double[]{1,2});
  coordinateDescentSolver=new CoordinateDescentSolver.Builder(new QuadraticFunction(A,b),new double[]{0,0}).method(CoordinateDescentSolver.Method.BACK_AND_FORTH).build();
  actualResult=coordinateDescentSolver.solve().getArray();
  expectedResult=new double[]{0,2};
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}",0.9989235737351992
144166,"public double[][] predict(double[][] points){
  double[][] probabilities=new double[points.length][];
  for (int i=0; i < points.length; i++) {
    Vector predictions=weights.transpose().multiply(new Vector(points[i])).computeFunctionResult(Math::exp);
    probabilities[i]=predictions.divide(predictions.computeSum()).getArrayCopy();
  }
  return probabilities;
}","public double[][] predict(double[][] points){
  double[][] probabilities=new double[points.length][];
  for (int i=0; i < points.length; i++) {
    Vector predictions=weights.transpose().multiply(new Vector(points[i]));
    predictions=predictions.subtract(Utilities.computeLogSumExp(predictions));
    predictions=predictions.computeFunctionResult(Math::exp);
    probabilities[i]=predictions.getArrayCopy();
  }
  return probabilities;
}",0.8244084682440846
144167,"/** 
 * {@inheritDoc} 
 */
@Override public DenseVector copy(){
  return new DenseVector(Arrays.copyOf(array,size));
}","/** 
 * {@inheritDoc} 
 */
@Override public DenseVector copy(){
  return new DenseVector(array);
}",0.9074074074074074
144168,"/** 
 * Constructs a dense vector from a one-dimensional array.
 * @param elements    One-dimensional array of values with which to fill the vector.
 */
protected DenseVector(double[] elements){
  size=elements.length;
  this.array=elements;
}","/** 
 * Constructs a dense vector from a one-dimensional array.
 * @param elements    One-dimensional array of values with which to fill the vector.
 */
protected DenseVector(double[] elements){
  size=elements.length;
  array=Arrays.copyOf(elements,size);
}",0.9181636726546906
144169,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector sub(Vector vector){
  checkVectorSize(vector);
  SparseVector resultVector=new SparseVector(size,hashMap);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      resultVector.set(i,this.get(i) - vector.get(i));
    }
  }
 else {
    if (size <= vector.size()) {
      hashMap.keySet().stream().filter(((SparseVector)vector).hashMap::containsKey).forEach(key -> resultVector.set(key,hashMap.get(key) - vector.get(key)));
    }
 else {
      ((SparseVector)vector).hashMap.keySet().stream().filter(hashMap::containsKey).forEach(key -> resultVector.set(key,hashMap.get(key) - vector.get(key)));
    }
  }
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector sub(Vector vector){
  checkVectorSize(vector);
  SparseVector resultVector=new SparseVector(size,hashMap);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      resultVector.set(i,this.get(i) - vector.get(i));
    }
  }
 else {
    List<Integer> keysUnion=new ArrayList<>(hashMap.keySet());
    keysUnion.addAll(((SparseVector)vector).hashMap.keySet());
    for (    int key : keysUnion) {
      resultVector.set(key,this.get(key) - vector.get(key));
    }
  }
  return resultVector;
}",0.5567651632970451
144170,"/** 
 * Constructs a sparse vector of the given size from a hash map.
 * @param size        The size of the vector.
 * @param elements    Hash map containing the indexes of elements as keys and the values of the correspondingelements as values.
 */
protected SparseVector(int size,HashMap<Integer,Double> elements){
  this.size=size;
  hashMap=new HashMap<>(128);
  hashMap.putAll(elements);
}","/** 
 * Constructs a sparse vector of the given size from a hash map.
 * @param size        The size of the vector.
 * @param elements    Hash map containing the indexes of elements as keys and the values of the correspondingelements as values.
 */
protected SparseVector(int size,HashMap<Integer,Double> elements){
  this.size=size;
  hashMap=new HashMap<>(initialSize);
  hashMap.putAll(elements);
}",0.982367758186398
144171,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpyInPlace(double scalar,Vector vector){
  checkVectorSize(vector);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      this.set(i,this.get(i) + scalar * vector.get(i));
    }
  }
 else {
    Collection<Integer> keysUnion=hashMap.keySet();
    keysUnion.addAll(((SparseVector)vector).hashMap.keySet());
    for (    int key : keysUnion) {
      this.set(key,this.get(key) + scalar * vector.get(key));
    }
  }
  return this;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpyInPlace(double scalar,Vector vector){
  checkVectorSize(vector);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      this.set(i,this.get(i) + scalar * vector.get(i));
    }
  }
 else {
    List<Integer> keysUnion=new ArrayList<>(hashMap.keySet());
    keysUnion.addAll(((SparseVector)vector).hashMap.keySet());
    for (    int key : keysUnion) {
      this.set(key,this.get(key) + scalar * vector.get(key));
    }
  }
  return this;
}",0.9704480457578646
144172,"/** 
 * {@inheritDoc} 
 */
@Override public void setAll(double value){
  if (value >= epsilon) {
    for (int i=0; i < size; i++) {
      hashMap.put(i,value);
    }
  }
 else {
    hashMap=new HashMap<>(128);
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void setAll(double value){
  if (Math.abs(value) >= epsilon) {
    for (int i=0; i < size; i++) {
      hashMap.put(i,value);
    }
  }
 else {
    hashMap=new HashMap<>(initialSize);
  }
}",0.8883928571428571
144173,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector add(Vector vector){
  checkVectorSize(vector);
  SparseVector resultVector=new SparseVector(size,hashMap);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      resultVector.set(i,this.get(i) + vector.get(i));
    }
  }
 else {
    if (size <= vector.size()) {
      hashMap.keySet().stream().filter(((SparseVector)vector).hashMap::containsKey).forEach(key -> resultVector.set(key,hashMap.get(key) + vector.get(key)));
    }
 else {
      ((SparseVector)vector).hashMap.keySet().stream().filter(hashMap::containsKey).forEach(key -> resultVector.set(key,hashMap.get(key) + vector.get(key)));
    }
  }
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector add(Vector vector){
  checkVectorSize(vector);
  SparseVector resultVector=new SparseVector(size,hashMap);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      resultVector.set(i,this.get(i) + vector.get(i));
    }
  }
 else {
    List<Integer> keysUnion=new ArrayList<>(hashMap.keySet());
    keysUnion.addAll(((SparseVector)vector).hashMap.keySet());
    for (    int key : keysUnion) {
      resultVector.set(key,this.get(key) + vector.get(key));
    }
  }
  return resultVector;
}",0.6080870917573873
144174,"/** 
 * {@inheritDoc} 
 */
@Override public void set(int[] indexes,Vector vector){
  for (int i=0; i < indexes.length; i++) {
    if (indexes[i] < 0 || indexes[i] >= size) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    double value=vector.get(i);
    if (value >= epsilon) {
      hashMap.put(indexes[i],value);
    }
 else {
      hashMap.remove(indexes[i]);
    }
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void set(int[] indexes,Vector vector){
  for (int i=0; i < indexes.length; i++) {
    if (indexes[i] < 0 || indexes[i] >= size) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    double value=vector.get(i);
    if (Math.abs(value) >= epsilon) {
      hashMap.put(indexes[i],value);
    }
 else {
      hashMap.remove(indexes[i]);
    }
  }
}",0.9751243781094528
144175,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector subInPlace(Vector vector){
  checkVectorSize(vector);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      this.set(i,this.get(i) - vector.get(i));
    }
  }
 else {
    if (size <= vector.size()) {
      hashMap.keySet().stream().filter(((SparseVector)vector).hashMap::containsKey).forEach(key -> this.set(key,hashMap.get(key) - vector.get(key)));
    }
 else {
      ((SparseVector)vector).hashMap.keySet().stream().filter(hashMap::containsKey).forEach(key -> this.set(key,hashMap.get(key) - vector.get(key)));
    }
  }
  return this;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector subInPlace(Vector vector){
  checkVectorSize(vector);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      this.set(i,this.get(i) - vector.get(i));
    }
  }
 else {
    List<Integer> keysUnion=new ArrayList<>(hashMap.keySet());
    keysUnion.addAll(((SparseVector)vector).hashMap.keySet());
    for (    int key : keysUnion) {
      this.set(key,this.get(key) - vector.get(key));
    }
  }
  return this;
}",0.5355871886120996
144176,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpy(double scalar,Vector vector){
  checkVectorSize(vector);
  SparseVector resultVector=new SparseVector(size,hashMap);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      resultVector.set(i,this.get(i) + scalar * vector.get(i));
    }
  }
 else {
    Collection<Integer> keysUnion=hashMap.keySet();
    keysUnion.addAll(((SparseVector)vector).hashMap.keySet());
    for (    int key : keysUnion) {
      resultVector.set(key,this.get(key) + scalar * vector.get(key));
    }
  }
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpy(double scalar,Vector vector){
  checkVectorSize(vector);
  SparseVector resultVector=new SparseVector(size,hashMap);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      resultVector.set(i,this.get(i) + scalar * vector.get(i));
    }
  }
 else {
    List<Integer> keysUnion=new ArrayList<>(hashMap.keySet());
    keysUnion.addAll(((SparseVector)vector).hashMap.keySet());
    for (    int key : keysUnion) {
      resultVector.set(key,this.get(key) + scalar * vector.get(key));
    }
  }
  return resultVector;
}",0.974231088944306
144177,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector addInPlace(Vector vector){
  checkVectorSize(vector);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      this.set(i,this.get(i) + vector.get(i));
    }
  }
 else {
    if (size <= vector.size()) {
      hashMap.keySet().stream().filter(((SparseVector)vector).hashMap::containsKey).forEach(key -> this.set(key,hashMap.get(key) + vector.get(key)));
    }
 else {
      ((SparseVector)vector).hashMap.keySet().stream().filter(hashMap::containsKey).forEach(key -> this.set(key,hashMap.get(key) + vector.get(key)));
    }
  }
  return this;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector addInPlace(Vector vector){
  checkVectorSize(vector);
  if (vector.type() != VectorType.SPARSE) {
    for (int i=0; i < size; i++) {
      this.set(i,this.get(i) + vector.get(i));
    }
  }
 else {
    List<Integer> keysUnion=new ArrayList<>(hashMap.keySet());
    keysUnion.addAll(((SparseVector)vector).hashMap.keySet());
    for (    int key : keysUnion) {
      this.set(key,this.get(key) + vector.get(key));
    }
  }
  return this;
}",0.5889679715302492
144178,"/** 
 * Computes the natural logarithm of the sum of the exponential of the values in a given vector in a way that aims to avoid numerical underflow or overflow. For a vector \(\boldsymbol{x}\) with elements \(x_i\), the quantity computed by this method is the following: \[\log{\sum_{i}{e^{x_i}}}.\]
 * @param vector  The vector to use for this operation.
 * @return          The natural logarithm of the sum of the exponential of the values in the given vector.
 */
public static double computeLogSumExp(Vector vector){
  double maximumValue=vector.max();
  return maximumValue + Math.log(vector.sub(maximumValue).map(Math::exp).sum());
}","/** 
 * Computes the natural logarithm of the sum of the exponential of the values in a given array in a way that aims to avoid numerical underflow or overflow. For an array \(\boldsymbol{x}\) with elements \(x_i\), the quantity computed by this method is the following: \[\log{\sum_{i}{e^{x_i}}}.\]
 * @param array   The array to use for this operation.
 * @return          The natural logarithm of the sum of the exponential of the values in the given array.
 */
public static double computeLogSumExp(double... array){
  Vector vector=VectorFactory.buildDense(array);
  return computeLogSumExp(vector);
}",0.812199036918138
144179,"private double computeBeta(){
  Vector gradientsDifference;
  double denominator;
switch (method) {
case FLETCHER_RIEVES:
    return currentGradient.innerProduct(currentGradient) / previousGradient.innerProduct(previousGradient);
case POLAK_RIBIERE:
  return currentGradient.innerProduct(currentGradient.subtract(previousGradient)) / previousGradient.innerProduct(previousGradient);
case POLAK_RIBIERE_PLUS:
return Math.max(currentGradient.innerProduct(currentGradient.subtract(previousGradient)) / previousGradient.innerProduct(previousGradient),0);
case HESTENES_STIEFEL:
if (currentIteration != 0) {
gradientsDifference=currentGradient.subtract(previousGradient);
return currentGradient.innerProduct(gradientsDifference) / gradientsDifference.innerProduct(previousDirection);
}
 else {
return 0;
}
case FLETCHER_RIEVES_POLAK_RIBIERE:
denominator=previousGradient.innerProduct(previousGradient);
double betaFR=currentGradient.innerProduct(currentGradient) / denominator;
double betaPR=currentGradient.innerProduct(currentGradient.subtract(previousGradient)) / denominator;
if (betaPR < -betaFR) {
return -betaFR;
}
 else if (betaPR > betaFR) {
return betaFR;
}
 else {
return betaPR;
}
case DAI_YUAN:
if (currentIteration != 0) {
return currentGradient.innerProduct(currentGradient) / currentGradient.subtract(previousGradient).innerProduct(previousDirection);
}
 else {
return 0;
}
case HAGER_ZHANG:
if (currentIteration != 0) {
gradientsDifference=currentGradient.subtract(previousGradient);
denominator=gradientsDifference.innerProduct(previousDirection);
Vector temporaryTerm=gradientsDifference.subtract(previousDirection.multiply(2 * gradientsDifference.innerProduct(gradientsDifference) / denominator));
return temporaryTerm.innerProduct(currentGradient) / denominator;
}
 else {
return 0;
}
default :
throw new NotImplementedException();
}
}","private double computeBeta(){
  Vector gradientsDifference;
  double denominator;
switch (method) {
case FLETCHER_RIEVES:
    return currentGradient.innerProduct(currentGradient) / previousGradient.innerProduct(previousGradient);
case POLAK_RIBIERE:
  return currentGradient.innerProduct(currentGradient.subtract(previousGradient)) / previousGradient.innerProduct(previousGradient);
case POLAK_RIBIERE_PLUS:
return Math.max(currentGradient.innerProduct(currentGradient.subtract(previousGradient)) / previousGradient.innerProduct(previousGradient),0);
case HESTENES_STIEFEL:
gradientsDifference=currentGradient.subtract(previousGradient);
if (gradientsDifference.computeL2Norm() != 0) {
return currentGradient.innerProduct(gradientsDifference) / gradientsDifference.innerProduct(previousDirection);
}
 else {
return 0;
}
case FLETCHER_RIEVES_POLAK_RIBIERE:
denominator=previousGradient.innerProduct(previousGradient);
double betaFR=currentGradient.innerProduct(currentGradient) / denominator;
double betaPR=currentGradient.innerProduct(currentGradient.subtract(previousGradient)) / denominator;
if (betaPR < -betaFR) {
return -betaFR;
}
 else if (betaPR > betaFR) {
return betaFR;
}
 else {
return betaPR;
}
case DAI_YUAN:
gradientsDifference=currentGradient.subtract(previousGradient);
if (gradientsDifference.computeL2Norm() != 0) {
return currentGradient.innerProduct(currentGradient) / gradientsDifference.innerProduct(previousDirection);
}
 else {
return 0;
}
case HAGER_ZHANG:
gradientsDifference=currentGradient.subtract(previousGradient);
if (gradientsDifference.computeL2Norm() != 0) {
denominator=gradientsDifference.innerProduct(previousDirection);
Vector temporaryTerm=gradientsDifference.subtract(previousDirection.multiply(2 * gradientsDifference.innerProduct(gradientsDifference) / denominator));
return temporaryTerm.innerProduct(currentGradient) / denominator;
}
 else {
return 0;
}
default :
throw new NotImplementedException();
}
}",0.8531578947368421
144180,"@Test public void testFletcherRievesPolakRibiereSolver(){
  System.out.println(""String_Node_Str"");
  NonlinearConjugateGradientSolver fletcherRievesPolakRibiereSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.FLETCHER_RIEVES_POLAK_RIBIERE).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.NO_RESTART).build();
  double[] actualResult=fletcherRievesPolakRibiereSolver.solve().getArray();
  double[] expectedResult=new double[]{1,1};
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
  System.out.println(""String_Node_Str"");
  fletcherRievesPolakRibiereSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.FLETCHER_RIEVES_POLAK_RIBIERE).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.N_STEP).build();
  actualResult=fletcherRievesPolakRibiereSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}","@Test public void testFletcherRievesPolakRibiereSolver(){
  System.out.println(""String_Node_Str"");
  NonlinearConjugateGradientSolver fletcherRievesPolakRibiereSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.FLETCHER_RIEVES_POLAK_RIBIERE).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.NO_RESTART).build();
  double[] actualResult=fletcherRievesPolakRibiereSolver.solve().getArray();
  double[] expectedResult=new double[]{1,1};
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
  System.out.println(""String_Node_Str"");
  fletcherRievesPolakRibiereSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.FLETCHER_RIEVES_POLAK_RIBIERE).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.N_STEP).build();
  actualResult=fletcherRievesPolakRibiereSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
  System.out.println(""String_Node_Str"");
  fletcherRievesPolakRibiereSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.FLETCHER_RIEVES_POLAK_RIBIERE).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.GRADIENTS_ORTHOGONALITY_CHECK).build();
  actualResult=fletcherRievesPolakRibiereSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}",0.8160431932124952
144181,"@Test public void testHagerZhangSolver(){
  double[] expectedResult=new double[]{1,1};
  System.out.println(""String_Node_Str"");
  NonlinearConjugateGradientSolver hagerZhangSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.HAGER_ZHANG).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.GRADIENTS_ORTHOGONALITY_CHECK).build();
  double[] actualResult=hagerZhangSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}","@Test public void testHagerZhangSolver(){
  System.out.println(""String_Node_Str"");
  NonlinearConjugateGradientSolver hagerZhangSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.HAGER_ZHANG).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.NO_RESTART).build();
  double[] actualResult=hagerZhangSolver.solve().getArray();
  double[] expectedResult=new double[]{1,1};
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
  System.out.println(""String_Node_Str"");
  hagerZhangSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.HAGER_ZHANG).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.N_STEP).build();
  actualResult=hagerZhangSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
  System.out.println(""String_Node_Str"");
  hagerZhangSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.HAGER_ZHANG).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.GRADIENTS_ORTHOGONALITY_CHECK).build();
  actualResult=hagerZhangSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}",0.5337487019730011
144182,"@Test public void testDaiYuanSolver(){
  double[] expectedResult=new double[]{1,1};
  System.out.println(""String_Node_Str"");
  NonlinearConjugateGradientSolver daiYuanSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.DAI_YUAN).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.GRADIENTS_ORTHOGONALITY_CHECK).build();
  double[] actualResult=daiYuanSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}","@Test public void testDaiYuanSolver(){
  System.out.println(""String_Node_Str"");
  NonlinearConjugateGradientSolver daiYuanSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.DAI_YUAN).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.NO_RESTART).build();
  double[] actualResult=daiYuanSolver.solve().getArray();
  double[] expectedResult=new double[]{1,1};
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
  System.out.println(""String_Node_Str"");
  daiYuanSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.DAI_YUAN).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.N_STEP).build();
  actualResult=daiYuanSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
  System.out.println(""String_Node_Str"");
  daiYuanSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.DAI_YUAN).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.GRADIENTS_ORTHOGONALITY_CHECK).build();
  actualResult=daiYuanSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}",0.5329087048832272
144183,"@Test public void testHestenesStiefelSolver(){
  double[] expectedResult=new double[]{1,1};
  System.out.println(""String_Node_Str"");
  NonlinearConjugateGradientSolver hestenesStiefelSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.HESTENES_STIEFEL).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.GRADIENTS_ORTHOGONALITY_CHECK).build();
  double[] actualResult=hestenesStiefelSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}","@Test public void testHestenesStiefelSolver(){
  System.out.println(""String_Node_Str"");
  NonlinearConjugateGradientSolver hestenesStiefelSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.HESTENES_STIEFEL).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.NO_RESTART).build();
  double[] actualResult=hestenesStiefelSolver.solve().getArray();
  double[] expectedResult=new double[]{1,1};
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
  System.out.println(""String_Node_Str"");
  hestenesStiefelSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.HESTENES_STIEFEL).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.N_STEP).build();
  actualResult=hestenesStiefelSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
  System.out.println(""String_Node_Str"");
  hestenesStiefelSolver=new NonlinearConjugateGradientSolver.Builder(new RosenbrockFunction(),new double[]{-1.2,1}).method(NonlinearConjugateGradientSolver.Method.HESTENES_STIEFEL).restartMethod(NonlinearConjugateGradientSolver.RestartMethod.GRADIENTS_ORTHOGONALITY_CHECK).build();
  actualResult=hestenesStiefelSolver.solve().getArray();
  Assert.assertArrayEquals(expectedResult,actualResult,1e-2);
}",0.5350701402805611
144184,"AbstractLineSearchSolver(Builder<? extends AbstractLineSearchSolver> builder){
  super(builder);
  this.lineSearch=builder.lineSearch;
}","AbstractLineSearchSolver(Builder<? extends AbstractLineSearchSolver> builder){
  super(builder);
  this.lineSearch=builder.lineSearch;
  previousPoint=currentPoint;
}",0.9006622516556292
144185,"public void updateStepSize(){
  currentStepSize=lineSearch.computeStepSize(currentPoint,currentDirection,previousPoint,previousDirection,previousStepSize);
}","public void updateStepSize(){
  currentStepSize=lineSearch.computeStepSize(previousPoint,currentDirection,previousPreviousPoint,previousDirection,previousStepSize);
}",0.9411764705882352
144186,"@Override public void iterationUpdate(){
  previousGradient=currentGradient;
  previousDirection=currentDirection;
  updateDirection();
  previousStepSize=currentStepSize;
  updateStepSize();
  previousPoint=currentPoint;
  previousObjectiveValue=currentObjectiveValue;
  updatePoint();
  currentObjectiveValue=objective.getValue(currentPoint);
}","@Override public void iterationUpdate(){
  previousPreviousPoint=previousPoint;
  previousPoint=currentPoint;
  previousGradient=currentGradient;
  previousDirection=currentDirection;
  previousStepSize=currentStepSize;
  previousObjectiveValue=currentObjectiveValue;
  updateDirection();
  updateStepSize();
  updatePoint();
  currentObjectiveValue=objective.getValue(currentPoint);
}",0.612859097127223
144187,"@Override public void updatePoint(){
  currentPoint=currentPoint.add(currentDirection.multiply(currentStepSize));
  if (method == Method.CYCLE_AND_JOIN_ENDPOINTS) {
    if (currentDimension == 0) {
      cycleStartPoint=cycleEndPoint;
    }
 else     if (currentDimension > numberOfDimensions - 1) {
      cycleEndPoint=currentPoint;
    }
  }
}","@Override public void updatePoint(){
  currentPoint=previousPoint.add(currentDirection.multiply(currentStepSize));
  if (method == Method.CYCLE_AND_JOIN_ENDPOINTS) {
    if (currentDimension == 0) {
      cycleStartPoint=cycleEndPoint;
    }
 else     if (currentDimension > numberOfDimensions - 1) {
      cycleEndPoint=currentPoint;
    }
  }
}",0.9782923299565848
144188,"@Override public void updateDirection(){
  currentDirection=new Vector(numberOfDimensions,0);
switch (method) {
case CYCLE:
    currentDirection.setElement(currentDimension,1);
  if (currentDimension >= numberOfDimensions - 1) {
    currentDimension=0;
  }
 else {
    currentDimension++;
  }
break;
case BACK_AND_FORTH:
if (currentDimension < numberOfDimensions) {
currentDirection.setElement(currentDimension,1);
currentDimension++;
}
 else {
currentDirection.setElement(2 * numberOfDimensions - currentDimension - 2,1);
if (currentDimension >= 2 * numberOfDimensions - 2) {
  currentDimension=1;
}
 else {
  currentDimension++;
}
}
break;
case CYCLE_AND_JOIN_ENDPOINTS:
if (!completedCycle) {
currentDirection.setElement(currentDimension,1);
if (currentDimension >= numberOfDimensions - 1) {
completedCycle=true;
currentDimension++;
}
 else {
currentDimension++;
}
}
 else {
currentDirection=cycleEndPoint.subtract(cycleStartPoint);
currentDimension=0;
completedCycle=false;
}
break;
default :
throw new NotImplementedException();
}
if (!(objective.computeValue(currentPoint.add(currentDirection.multiply(epsilon))) - currentObjectiveValue < 0)) {
currentDirection=currentDirection.multiply(-1);
}
}","@Override public void updateDirection(){
  currentDirection=new Vector(numberOfDimensions,0);
switch (method) {
case CYCLE:
    currentDirection.setElement(currentDimension,1);
  if (currentDimension >= numberOfDimensions - 1) {
    currentDimension=0;
  }
 else {
    currentDimension++;
  }
break;
case BACK_AND_FORTH:
if (currentDimension < numberOfDimensions) {
currentDirection.setElement(currentDimension,1);
currentDimension++;
}
 else {
currentDirection.setElement(2 * numberOfDimensions - currentDimension - 2,1);
if (currentDimension >= 2 * numberOfDimensions - 2) {
  currentDimension=1;
}
 else {
  currentDimension++;
}
}
break;
case CYCLE_AND_JOIN_ENDPOINTS:
if (!completedCycle) {
currentDirection.setElement(currentDimension,1);
if (currentDimension >= numberOfDimensions - 1) {
completedCycle=true;
currentDimension++;
}
 else {
currentDimension++;
}
}
 else {
currentDirection=cycleEndPoint.subtract(cycleStartPoint);
currentDimension=0;
completedCycle=false;
}
break;
default :
throw new NotImplementedException();
}
if (!(objective.computeValue(previousPoint.add(currentDirection.multiply(epsilon))) - currentObjectiveValue < 0)) {
currentDirection=currentDirection.multiply(-1);
}
}",0.9937629937629938
144189,"public Builder gradientTolerance(double gradientTolerance){
  this.gradientTolerance=gradientTolerance;
  return this;
}","public Builder<T> gradientTolerance(double gradientTolerance){
  this.gradientTolerance=gradientTolerance;
  return this;
}",0.9876543209876544
144190,"public Builder checkForObjectiveConvergence(boolean checkForObjectiveConvergence){
  this.checkForObjectiveConvergence=checkForObjectiveConvergence;
  return this;
}","public Builder<T> checkForObjectiveConvergence(boolean checkForObjectiveConvergence){
  this.checkForObjectiveConvergence=checkForObjectiveConvergence;
  return this;
}",0.990990990990991
144191,"public Builder checkForPointConvergence(boolean checkForPointConvergence){
  this.checkForPointConvergence=checkForPointConvergence;
  return this;
}","public Builder<T> checkForPointConvergence(boolean checkForPointConvergence){
  this.checkForPointConvergence=checkForPointConvergence;
  return this;
}",0.9900332225913622
144192,"public Builder maximumNumberOfFunctionEvaluations(int maximumNumberOfFunctionEvaluations){
  this.maximumNumberOfFunctionEvaluations=maximumNumberOfFunctionEvaluations;
  return this;
}","public Builder<T> maximumNumberOfFunctionEvaluations(int maximumNumberOfFunctionEvaluations){
  this.maximumNumberOfFunctionEvaluations=maximumNumberOfFunctionEvaluations;
  return this;
}",0.9919571045576407
144193,"public Builder pointChangeTolerance(double pointChangeTolerance){
  this.pointChangeTolerance=pointChangeTolerance;
  return this;
}","public Builder<T> pointChangeTolerance(double pointChangeTolerance){
  this.pointChangeTolerance=pointChangeTolerance;
  return this;
}",0.9887640449438202
144194,"public Builder checkForGradientConvergence(boolean checkForGradientConvergence){
  this.checkForGradientConvergence=checkForGradientConvergence;
  return this;
}","public Builder<T> checkForGradientConvergence(boolean checkForGradientConvergence){
  this.checkForGradientConvergence=checkForGradientConvergence;
  return this;
}",0.9907692307692308
144195,"public Builder objectiveChangeTolerance(double objectiveChangeTolerance){
  this.objectiveChangeTolerance=objectiveChangeTolerance;
  return this;
}","public Builder<T> objectiveChangeTolerance(double objectiveChangeTolerance){
  this.objectiveChangeTolerance=objectiveChangeTolerance;
  return this;
}",0.9899665551839464
144196,"public Builder maximumNumberOfIterations(int maximumNumberOfIterations){
  this.maximumNumberOfIterations=maximumNumberOfIterations;
  return this;
}","public Builder<T> maximumNumberOfIterations(int maximumNumberOfIterations){
  this.maximumNumberOfIterations=maximumNumberOfIterations;
  return this;
}",0.9900332225913622
144197,"public ConjugateGradientSolver build() throws NonPositiveDefiniteMatrixException {
  return new ConjugateGradientSolver(this);
}","public ConjugateGradientSolver build(){
  try {
    return new ConjugateGradientSolver(this);
  }
 catch (  NonPositiveDefiniteMatrixException e) {
    e.printStackTrace();
    return null;
  }
}",0.5510835913312694
144198,"public Vector solve(){
  Matrix J=objective.getJ();
  Vector y=objective.getY();
  int n=J.getColumnDimension();
switch (method) {
case CHOLESKY_DECOMPOSITION:
    CholeskyDecomposition choleskyDecomposition=new CholeskyDecomposition(J.transpose().multiply(J));
  try {
    return choleskyDecomposition.solve(J.transpose().multiply(y));
  }
 catch (  NonSymmetricMatrixException e) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"");
    this.method=Method.SINGULAR_VALUE_DECOMPOSITION;
    return solve();
  }
catch (  NonPositiveDefiniteMatrixException e) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    this.method=Method.SINGULAR_VALUE_DECOMPOSITION;
    return solve();
  }
case QR_DECOMPOSITION:
try {
  QRDecomposition qrDecomposition=new QRDecomposition(J);
  return qrDecomposition.solve(y);
}
 catch (SingularMatrixException e) {
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  this.method=Method.SINGULAR_VALUE_DECOMPOSITION;
  return solve();
}
case SINGULAR_VALUE_DECOMPOSITION:
SingularValueDecomposition singularValueDecomposition=new SingularValueDecomposition(J);
return singularValueDecomposition.solve(y);
case CONJUGATE_GRADIENT:
try {
LinearLeastSquaresFunction objective=new LinearLeastSquaresFunction(J,y);
ConjugateGradientSolver conjugateGradientSolver=new ConjugateGradientSolver.Builder(objective,new double[n]).preconditioningMethod(ConjugateGradientSolver.PreconditioningMethod.SYMMETRIC_SUCCESSIVE_OVER_RELAXATION).build();
return conjugateGradientSolver.solve();
}
 catch (NonPositiveDefiniteMatrixException e) {
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
this.method=Method.SINGULAR_VALUE_DECOMPOSITION;
return solve();
}
default :
throw new NotImplementedException();
}
}","public Vector solve(){
  Matrix J=objective.getJ();
  Vector y=objective.getY();
  int n=J.getColumnDimension();
switch (method) {
case CHOLESKY_DECOMPOSITION:
    CholeskyDecomposition choleskyDecomposition=new CholeskyDecomposition(J.transpose().multiply(J));
  try {
    return choleskyDecomposition.solve(J.transpose().multiply(y));
  }
 catch (  NonSymmetricMatrixException e) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"");
    this.method=Method.SINGULAR_VALUE_DECOMPOSITION;
    return solve();
  }
catch (  NonPositiveDefiniteMatrixException e) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    this.method=Method.SINGULAR_VALUE_DECOMPOSITION;
    return solve();
  }
case QR_DECOMPOSITION:
try {
  QRDecomposition qrDecomposition=new QRDecomposition(J);
  return qrDecomposition.solve(y);
}
 catch (SingularMatrixException e) {
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  this.method=Method.SINGULAR_VALUE_DECOMPOSITION;
  return solve();
}
case SINGULAR_VALUE_DECOMPOSITION:
SingularValueDecomposition singularValueDecomposition=new SingularValueDecomposition(J);
return singularValueDecomposition.solve(y);
case CONJUGATE_GRADIENT:
try {
LinearLeastSquaresFunction objective=new LinearLeastSquaresFunction(J,y);
ConjugateGradientSolver conjugateGradientSolver=new ConjugateGradientSolver.Builder(objective,new double[n]).preconditioningMethod(ConjugateGradientSolver.PreconditioningMethod.SYMMETRIC_SUCCESSIVE_OVER_RELAXATION).buildWithChecking();
return conjugateGradientSolver.solve();
}
 catch (NonPositiveDefiniteMatrixException e) {
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
this.method=Method.SINGULAR_VALUE_DECOMPOSITION;
return solve();
}
default :
throw new NotImplementedException();
}
}",0.9967302452316076
144199,"AbstractIterativeSolver(Builder<? extends AbstractIterativeSolver> builder){
  this.objective=builder.objective;
  currentPoint=new Vector(builder.initialPoint);
  currentGradient=objective.getGradient(currentPoint);
  currentObjectiveValue=objective.getValue(currentPoint);
  currentIteration=0;
}","AbstractIterativeSolver(Builder builder){
  this.objective=builder.objective;
  currentPoint=new Vector(builder.initialPoint);
  currentGradient=objective.getGradient(currentPoint);
  currentObjectiveValue=objective.getValue(currentPoint);
  currentIteration=0;
}",0.1675579322638146
144200,"/** 
 * Computes the \(L_\infty\) norm of this vector. Denoting this vector by \(\boldsymbol{x}\in\mathbb{R}^{n}\), its element at index \(i\) by \(x_i\) and its \(L_\infty\) norm by \(\|\boldsymbol{x}\|_\infty\), we have that: \[\|\boldsymbol{x}\|_\infty=\max_{1\leq i\leq n}{\left|x_i\right|}.\]
 * @return  The \(L_\infty\) norm of this vector.
 */
public double computeLInfinityNorm(){
  double lInfinityNorm=0;
  for (int i=0; i < dimension; i++) {
    lInfinityNorm=Math.max(lInfinityNorm,array[i]);
  }
  return Math.sqrt(lInfinityNorm);
}","/** 
 * Computes the \(L_\infty\) norm of this vector. Denoting this vector by \(\boldsymbol{x}\in\mathbb{R}^{n}\), its element at index \(i\) by \(x_i\) and its \(L_\infty\) norm by \(\|\boldsymbol{x}\|_\infty\), we have that: \[\|\boldsymbol{x}\|_\infty=\max_{1\leq i\leq n}{\left|x_i\right|}.\]
 * @return  The \(L_\infty\) norm of this vector.
 */
public double computeLInfinityNorm(){
  double lInfinityNorm=0;
  for (int i=0; i < dimension; i++) {
    lInfinityNorm=Math.max(lInfinityNorm,array[i]);
  }
  return lInfinityNorm;
}",0.9898242368177612
144201,"public void setM(int m){
  this.m=m;
}","public void setM(int m){
  if (method != Method.LIMITED_MEMORY_BROYDEN_FLETCHER_GOLDFARB_SHANNO) {
    this.m=1;
  }
 else {
    this.m=m;
  }
  s=new RealVector[m];
  y=new RealVector[m];
}",0.3333333333333333
144202,"@Test public void testCentralDifferenceHessianApproximationGivenGradient(){
  AbstractFunction function=new RosenbrockFunction();
  DerivativesApproximation derivativesApproximation=new DerivativesApproximation(function,DerivativesApproximationMethod.CENTRAL_DIFFERENCE);
  RealVector point=new ArrayRealVector(new double[]{-1.2,1});
  double[][] actualResultTemp=derivativesApproximation.approximateHessianGivenGradient(point).getData();
  double[][] expectedResultTemp=function.getHessian(point).getData();
  double[] actualResult=new double[actualResultTemp.length * actualResultTemp[0].length];
  double[] expectedResult=new double[expectedResultTemp.length * expectedResultTemp[0].length];
  for (int i=0; i < actualResultTemp.length; i++) {
    for (int j=0; j < actualResultTemp[0].length; j++) {
      actualResult[i * actualResultTemp.length + j]=actualResultTemp[i][j];
      expectedResult[i * expectedResultTemp.length + j]=expectedResultTemp[i][j];
    }
  }
  Assert.assertArrayEquals(expectedResult,actualResult,1e-8);
}","@Test public void testCentralDifferenceHessianApproximationGivenGradient(){
  AbstractFunction function=new RosenbrockFunction();
  DerivativesApproximation derivativesApproximation=new DerivativesApproximation(function,DerivativesApproximationMethod.CENTRAL_DIFFERENCE);
  RealVector point=new ArrayRealVector(new double[]{-1.2,1});
  double[][] actualResultTemp=derivativesApproximation.approximateHessianGivenGradient(point).getData();
  double[][] expectedResultTemp=function.getHessian(point).getData();
  double[] actualResult=new double[actualResultTemp.length * actualResultTemp[0].length];
  double[] expectedResult=new double[expectedResultTemp.length * expectedResultTemp[0].length];
  for (int i=0; i < actualResultTemp.length; i++) {
    for (int j=0; j < actualResultTemp[0].length; j++) {
      actualResult[i * actualResultTemp[0].length + j]=actualResultTemp[i][j];
      expectedResult[i * expectedResultTemp[0].length + j]=expectedResultTemp[i][j];
    }
  }
  Assert.assertArrayEquals(expectedResult,actualResult,1e-8);
}",0.9971098265895952
144203,"@Test public void testCentralDifferenceHessianApproximation(){
  AbstractFunction function=new RosenbrockFunction();
  DerivativesApproximation derivativesApproximation=new DerivativesApproximation(function,DerivativesApproximationMethod.CENTRAL_DIFFERENCE);
  RealVector point=new ArrayRealVector(new double[]{-1.2,1});
  double[][] actualResultTemp=derivativesApproximation.approximateHessian(point).getData();
  double[][] expectedResultTemp=function.getHessian(point).getData();
  double[] actualResult=new double[actualResultTemp.length * actualResultTemp[0].length];
  double[] expectedResult=new double[expectedResultTemp.length * expectedResultTemp[0].length];
  for (int i=0; i < actualResultTemp.length; i++) {
    for (int j=0; j < actualResultTemp[0].length; j++) {
      actualResult[i * actualResultTemp.length + j]=actualResultTemp[i][j];
      expectedResult[i * expectedResultTemp.length + j]=expectedResultTemp[i][j];
    }
  }
  Assert.assertArrayEquals(expectedResult,actualResult,1e-3);
}","@Test public void testCentralDifferenceHessianApproximation(){
  AbstractFunction function=new RosenbrockFunction();
  DerivativesApproximation derivativesApproximation=new DerivativesApproximation(function,DerivativesApproximationMethod.CENTRAL_DIFFERENCE);
  RealVector point=new ArrayRealVector(new double[]{-1.2,1});
  double[][] actualResultTemp=derivativesApproximation.approximateHessian(point).getData();
  double[][] expectedResultTemp=function.getHessian(point).getData();
  double[] actualResult=new double[actualResultTemp.length * actualResultTemp[0].length];
  double[] expectedResult=new double[expectedResultTemp.length * expectedResultTemp[0].length];
  for (int i=0; i < actualResultTemp.length; i++) {
    for (int j=0; j < actualResultTemp[0].length; j++) {
      actualResult[i * actualResultTemp[0].length + j]=actualResultTemp[i][j];
      expectedResult[i * expectedResultTemp[0].length + j]=expectedResultTemp[i][j];
    }
  }
  Assert.assertArrayEquals(expectedResult,actualResult,1e-3);
}",0.9970355731225296
144204,"@Test public void testForwardDifferenceHessianApproximationGivenGradient(){
  AbstractFunction function=new RosenbrockFunction();
  DerivativesApproximation derivativesApproximation=new DerivativesApproximation(function,DerivativesApproximationMethod.FORWARD_DIFFERENCE);
  RealVector point=new ArrayRealVector(new double[]{-1.2,1});
  double[][] actualResultTemp=derivativesApproximation.approximateHessianGivenGradient(point).getData();
  double[][] expectedResultTemp=function.getHessian(point).getData();
  double[] actualResult=new double[actualResultTemp.length * actualResultTemp[0].length];
  double[] expectedResult=new double[expectedResultTemp.length * expectedResultTemp[0].length];
  for (int i=0; i < actualResultTemp.length; i++) {
    for (int j=0; j < actualResultTemp[0].length; j++) {
      actualResult[i * actualResultTemp.length + j]=actualResultTemp[i][j];
      expectedResult[i * expectedResultTemp.length + j]=expectedResultTemp[i][j];
    }
  }
  Assert.assertArrayEquals(expectedResult,actualResult,1e-4);
}","@Test public void testForwardDifferenceHessianApproximationGivenGradient(){
  AbstractFunction function=new RosenbrockFunction();
  DerivativesApproximation derivativesApproximation=new DerivativesApproximation(function,DerivativesApproximationMethod.FORWARD_DIFFERENCE);
  RealVector point=new ArrayRealVector(new double[]{-1.2,1});
  double[][] actualResultTemp=derivativesApproximation.approximateHessianGivenGradient(point).getData();
  double[][] expectedResultTemp=function.getHessian(point).getData();
  double[] actualResult=new double[actualResultTemp.length * actualResultTemp[0].length];
  double[] expectedResult=new double[expectedResultTemp.length * expectedResultTemp[0].length];
  for (int i=0; i < actualResultTemp.length; i++) {
    for (int j=0; j < actualResultTemp[0].length; j++) {
      actualResult[i * actualResultTemp[0].length + j]=actualResultTemp[i][j];
      expectedResult[i * expectedResultTemp[0].length + j]=expectedResultTemp[i][j];
    }
  }
  Assert.assertArrayEquals(expectedResult,actualResult,1e-4);
}",0.9971098265895952
144205,"@Test public void testForwardDifferenceHessianApproximation(){
  AbstractFunction function=new RosenbrockFunction();
  DerivativesApproximation derivativesApproximation=new DerivativesApproximation(function,DerivativesApproximationMethod.FORWARD_DIFFERENCE);
  RealVector point=new ArrayRealVector(new double[]{-1.2,1});
  double[][] actualResultTemp=derivativesApproximation.approximateHessian(point).getData();
  double[][] expectedResultTemp=function.getHessian(point).getData();
  double[] actualResult=new double[actualResultTemp.length * actualResultTemp[0].length];
  double[] expectedResult=new double[expectedResultTemp.length * expectedResultTemp[0].length];
  for (int i=0; i < actualResultTemp.length; i++) {
    for (int j=0; j < actualResultTemp[0].length; j++) {
      actualResult[i * actualResultTemp.length + j]=actualResultTemp[i][j];
      expectedResult[i * expectedResultTemp.length + j]=expectedResultTemp[i][j];
    }
  }
  Assert.assertArrayEquals(expectedResult,actualResult,1e2);
}","@Test public void testForwardDifferenceHessianApproximation(){
  AbstractFunction function=new RosenbrockFunction();
  DerivativesApproximation derivativesApproximation=new DerivativesApproximation(function,DerivativesApproximationMethod.FORWARD_DIFFERENCE);
  RealVector point=new ArrayRealVector(new double[]{-1.2,1});
  double[][] actualResultTemp=derivativesApproximation.approximateHessian(point).getData();
  double[][] expectedResultTemp=function.getHessian(point).getData();
  double[] actualResult=new double[actualResultTemp.length * actualResultTemp[0].length];
  double[] expectedResult=new double[expectedResultTemp.length * expectedResultTemp[0].length];
  for (int i=0; i < actualResultTemp.length; i++) {
    for (int j=0; j < actualResultTemp[0].length; j++) {
      actualResult[i * actualResultTemp[0].length + j]=actualResultTemp[i][j];
      expectedResult[i * expectedResultTemp[0].length + j]=expectedResultTemp[i][j];
    }
  }
  Assert.assertArrayEquals(expectedResult,actualResult,1e2);
}",0.9970326409495548
144206,"public AbstractLineSearchSolver(AbstractFunction objective,double[] initialPoint){
  super(objective,initialPoint);
  if (objective instanceof QuadraticFunction) {
    lineSearch=new ExactLineSearch((QuadraticFunction)objective);
  }
 else {
    lineSearch=new StrongWolfeInterpolationLineSearch(objective,1e-4,0.9,10);
    ((StrongWolfeInterpolationLineSearch)lineSearch).setStepSizeInitializationMethod(StepSizeInitializationMethod.CONSERVE_FIRST_ORDER_CHANGE);
  }
}","public AbstractLineSearchSolver(AbstractFunction objective,double[] initialPoint){
  super(objective,initialPoint);
  if (objective instanceof QuadraticFunction) {
    RealMatrix quadraticFactorMatrix=((QuadraticFunction)objective).getA();
    if (MatrixUtils.isSymmetric(quadraticFactorMatrix,1e-8)) {
      DecompositionSolver choleskyDecompositionSolver=new CholeskyDecomposition(quadraticFactorMatrix).getSolver();
      if (choleskyDecompositionSolver.isNonSingular()) {
        lineSearch=new ExactLineSearch((QuadraticFunction)objective);
        return;
      }
    }
  }
  lineSearch=new StrongWolfeInterpolationLineSearch(objective,1e-4,0.9,10);
  ((StrongWolfeInterpolationLineSearch)lineSearch).setStepSizeInitializationMethod(StepSizeInitializationMethod.CONSERVE_FIRST_ORDER_CHANGE);
}",0.7160883280757098
144207,"public NonlinearConjugateGradientSolver(AbstractFunction objective,double[] initialPoint){
  super(objective,initialPoint);
  setCheckForPointConvergence(false);
  setCheckForObjectiveConvergence(false);
  currentDirection=currentGradient.mapMultiply(-1);
  if (objective instanceof QuadraticFunction) {
    lineSearch=new ExactLineSearch((QuadraticFunction)objective);
  }
 else {
    lineSearch=new StrongWolfeInterpolationLineSearch(objective,1e-4,0.9,10);
    ((StrongWolfeInterpolationLineSearch)lineSearch).setStepSizeInitializationMethod(StepSizeInitializationMethod.CONSERVE_FIRST_ORDER_CHANGE);
  }
}","public NonlinearConjugateGradientSolver(AbstractFunction objective,double[] initialPoint){
  super(objective,initialPoint);
  setCheckForPointConvergence(false);
  setCheckForObjectiveConvergence(false);
  currentDirection=currentGradient.mapMultiply(-1);
  if (objective instanceof QuadraticFunction) {
    RealMatrix quadraticFactorMatrix=((QuadraticFunction)objective).getA();
    if (MatrixUtils.isSymmetric(quadraticFactorMatrix,1e-8)) {
      DecompositionSolver choleskyDecompositionSolver=new CholeskyDecomposition(quadraticFactorMatrix).getSolver();
      if (choleskyDecompositionSolver.isNonSingular()) {
        lineSearch=new ExactLineSearch((QuadraticFunction)objective);
        return;
      }
    }
  }
  lineSearch=new StrongWolfeInterpolationLineSearch(objective,1e-4,0.9,10);
  ((StrongWolfeInterpolationLineSearch)lineSearch).setStepSizeInitializationMethod(StepSizeInitializationMethod.CONSERVE_FIRST_ORDER_CHANGE);
}",0.7674418604651163
144208,"/** 
 * Checks whether the Wolfe conditions are satisfied for a given objective function, point, direction and step size. The Wolfe conditions consist of the Armijo condition (also known as the sufficient decrease condition) and the curvature condition. The Armijo condition makes sure that the reduction in the objective function value is proportional to both the step size and the directional derivative. This condition is satisfied for all sufficiently small values of the step size and so, in order to ensure that the optimization algorithm makes sufficient progress, we also check for the curvature condition. Typical values for the proportionality constants are: for   {@code c1}, 1e-4, and for   {@code c2}, 0.9 when the search direction is chosen by a Newton or quasi-Newton method and 0.1 when the search direction is obtained from a nonlinear conjugate gradient method.
 * @param objective                       The objective function instance.
 * @param point                           The point at which we check whether the Wolfe conditions are satisfied.
 * @param direction                       The direction for which we check whether the Wolfe conditions aresatisfied.
 * @param stepSize                        The value of the step size for which we check whether the Wolfeconditions are satisfied.
 * @param c1                              The proportionality constant used for the first of the two Wolfeconditions (that is, the Armijo condition).
 * @param c2                              The proportionality constant used for the second of the two Wolfeconditions (that is, the curvature condition).
 * @param strong                          A boolean value indicating whether or not to check for the strong Wolfeconditions. The only difference is actually on the curvature condition and, when we use the strong Wolfe conditions instead of the simple Wolfe conditions, we effectively exclude points from the search that are far from the exact line search solution.
 * @param objectiveValueAtCurrentPoint    The value of the objective function at the current point.
 * @param objectiveGradientAtCurrentPoint The gradient of the objective function evaluated at the current point.
 * @return                                  A boolean value ind objective, point, direction and step size.
 */
public static boolean checkWolfeConditions(Function objective,RealVector point,RealVector direction,double stepSize,double c1,double c2,boolean strong,double objectiveValueAtCurrentPoint,RealVector objectiveGradientAtCurrentPoint){
  Preconditions.checkArgument(c1 > 0 && c1 < 1);
  Preconditions.checkArgument(c2 > c1 && c2 < 1);
  boolean armijoConditionSatisfied=checkArmijoCondition(objective,point,direction,stepSize,c1,objectiveValueAtCurrentPoint,objectiveGradientAtCurrentPoint);
  double leftTerm=objective.computeGradient(point.add(direction.mapMultiply(stepSize))).dotProduct(direction);
  double rightTerm=objectiveGradientAtCurrentPoint.dotProduct(direction);
  boolean curvatureConditionSatisfied;
  if (strong) {
    curvatureConditionSatisfied=Math.abs(leftTerm) >= c2 * Math.abs(rightTerm);
  }
 else {
    curvatureConditionSatisfied=leftTerm >= c2 * rightTerm;
  }
  return armijoConditionSatisfied && curvatureConditionSatisfied;
}","/** 
 * Checks whether the Wolfe conditions are satisfied for a given objective function, point, direction and step size. The Wolfe conditions consist of the Armijo condition (also known as the sufficient decrease condition) and the curvature condition. The Armijo condition makes sure that the reduction in the objective function value is proportional to both the step size and the directional derivative. This condition is satisfied for all sufficiently small values of the step size and so, in order to ensure that the optimization algorithm makes sufficient progress, we also check for the curvature condition. Typical values for the proportionality constants are: for   {@code c1}, 1e-4, and for   {@code c2}, 0.9 when the search direction is chosen by a Newton or quasi-Newton method and 0.1 when the search direction is obtained from a nonlinear conjugate gradient method.
 * @param objective                       The objective function instance.
 * @param point                           The point at which we check whether the Wolfe conditions are satisfied.
 * @param direction                       The direction for which we check whether the Wolfe conditions aresatisfied.
 * @param stepSize                        The value of the step size for which we check whether the Wolfeconditions are satisfied.
 * @param c1                              The proportionality constant used for the first of the two Wolfeconditions (that is, the Armijo condition).
 * @param c2                              The proportionality constant used for the second of the two Wolfeconditions (that is, the curvature condition).
 * @param strong                          A boolean value indicating whether or not to check for the strong Wolfeconditions. The only difference is actually on the curvature condition and, when we use the strong Wolfe conditions instead of the simple Wolfe conditions, we effectively exclude points from the search that are far from the exact line search solution.
 * @param objectiveValueAtCurrentPoint    The value of the objective function at the current point.
 * @param objectiveGradientAtCurrentPoint The gradient of the objective function evaluated at the current point.
 * @return                                  A boolean value ind objective, point, direction and step size.
 */
public static boolean checkWolfeConditions(Function objective,RealVector point,RealVector direction,double stepSize,double c1,double c2,boolean strong,double objectiveValueAtCurrentPoint,RealVector objectiveGradientAtCurrentPoint){
  Preconditions.checkArgument(c1 > 0 && c1 < 1);
  Preconditions.checkArgument(c2 > c1 && c2 < 1);
  boolean armijoConditionSatisfied=checkArmijoCondition(objective,point,direction,stepSize,c1,objectiveValueAtCurrentPoint,objectiveGradientAtCurrentPoint);
  double leftTerm=objective.computeGradient(point.add(direction.mapMultiply(stepSize))).dotProduct(direction);
  double rightTerm=objectiveGradientAtCurrentPoint.dotProduct(direction);
  boolean curvatureConditionSatisfied;
  if (strong) {
    curvatureConditionSatisfied=Math.abs(leftTerm) <= c2 * Math.abs(rightTerm);
  }
 else {
    curvatureConditionSatisfied=leftTerm >= c2 * rightTerm;
  }
  return armijoConditionSatisfied && curvatureConditionSatisfied;
}",0.9996934396076028
144209,"public AbstractLineSearchSolver(AbstractFunction objective,double[] initialPoint){
  this.objective=objective;
  this.currentPoint=new ArrayRealVector(initialPoint);
  currentObjectiveValue=objective.getValue(currentPoint);
  currentIteration=0;
  if (objective instanceof QuadraticFunction) {
    this.lineSearch=new ExactLineSearch((QuadraticFunction)objective);
  }
 else {
    this.lineSearch=new StrongWolfeInterpolationLineSearch(objective,StepSizeInitializationMethod.CONSERVE_FIRST_ORDER_CHANGE,1e-4,0.9,10);
  }
}","public AbstractLineSearchSolver(AbstractFunction objective,double[] initialPoint){
  this.objective=objective;
  this.currentPoint=new ArrayRealVector(initialPoint);
  currentObjectiveValue=objective.getValue(currentPoint);
  currentGradient=objective.getGradient(currentPoint);
  currentIteration=0;
  if (objective instanceof QuadraticFunction) {
    this.lineSearch=new ExactLineSearch((QuadraticFunction)objective);
  }
 else {
    this.lineSearch=new StrongWolfeInterpolationLineSearch(objective,StepSizeInitializationMethod.CONSERVE_FIRST_ORDER_CHANGE,1e-4,0.9,10);
  }
}",0.9499545040946314
144210,"@Override public void iterationUpdate(){
  previousGradient=currentGradient;
  previousDirection=currentDirection;
  updateDirection();
  if (currentGradient.getNorm() <= gradientTolerance) {
    return;
  }
  previousStepSize=currentStepSize;
  updateStepSize();
  previousPoint=currentPoint;
  previousObjectiveValue=currentObjectiveValue;
  updatePoint();
  currentObjectiveValue=objective.getValue(currentPoint);
}","@Override public void iterationUpdate(){
  previousGradient=currentGradient;
  previousDirection=currentDirection;
  updateDirection();
  previousStepSize=currentStepSize;
  updateStepSize();
  previousPoint=currentPoint;
  previousObjectiveValue=currentObjectiveValue;
  updatePoint();
  currentObjectiveValue=objective.getValue(currentPoint);
}",0.3743455497382199
144211,"public NonlinearConjugateGradientSolver(AbstractFunction objective,double[] initialPoint,NonlinearConjugateGradientMethod method,NonlinearConjugateGradientRestartMethod restartMethod){
  this.objective=objective;
  this.method=method;
  this.restartMethod=restartMethod;
  currentPoint=new ArrayRealVector(initialPoint);
  currentGradient=objective.getGradient(currentPoint);
  currentDirection=currentGradient.mapMultiply(-1);
  currentObjectiveValue=objective.getValue(currentPoint);
  currentIteration=0;
  checkForPointConvergence=false;
  checkForObjectiveConvergence=false;
  if (objective instanceof QuadraticFunction) {
    this.lineSearch=new ExactLineSearch((QuadraticFunction)objective);
  }
 else {
    this.lineSearch=new StrongWolfeInterpolationLineSearch(objective,StepSizeInitializationMethod.CONSERVE_FIRST_ORDER_CHANGE,1e-4,0.1,10);
  }
}","public NonlinearConjugateGradientSolver(AbstractFunction objective,double[] initialPoint,NonlinearConjugateGradientMethod method,NonlinearConjugateGradientRestartMethod restartMethod){
  this.objective=objective;
  this.method=method;
  this.restartMethod=restartMethod;
  this.setCheckForPointConvergence(false);
  this.setCheckForObjectiveConvergence(false);
  currentPoint=new ArrayRealVector(initialPoint);
  currentGradient=objective.getGradient(currentPoint);
  currentDirection=currentGradient.mapMultiply(-1);
  currentObjectiveValue=objective.getValue(currentPoint);
  currentIteration=0;
  if (objective instanceof QuadraticFunction) {
    this.lineSearch=new ExactLineSearch((QuadraticFunction)objective);
  }
 else {
    this.lineSearch=new StrongWolfeInterpolationLineSearch(objective,StepSizeInitializationMethod.CONSERVE_FIRST_ORDER_CHANGE,1e-4,0.1,10);
  }
}",0.9063583815028902
144212,"public RealVector computeGradient(RealVector point){
  return derivativesApproximation.approximateGradient(point);
}","public RealVector computeGradient(RealVector point){
  if (computeGradientMethodOverridden) {
    computeGradientMethodOverridden=false;
  }
  return derivativesApproximation.approximateGradient(point);
}",0.725
144213,"public RealMatrix computeHessian(RealVector point){
  boolean computeGradientMethodOverridden=false;
  try {
    computeGradientMethodOverridden=this.getClass().getMethod(""String_Node_Str"",RealVector.class).getDeclaringClass() != AbstractFunction.class;
  }
 catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
  if (computeGradientMethodOverridden) {
    return derivativesApproximation.approximateHessianGivenGradient(point);
  }
 else {
    return derivativesApproximation.approximateHessian(point);
  }
}","public RealMatrix computeHessian(RealVector point){
  if (computeGradientMethodOverridden) {
    return derivativesApproximation.approximateHessianGivenGradient(point);
  }
 else {
    return derivativesApproximation.approximateHessian(point);
  }
}",0.2701298701298701
144214,"@Test public void testLogisticRegression(){
  String filename=""String_Node_Str"";
  TrainingData data=DataPreprocessing.parseLabeledDataFromCSVFile(filename);
  LogisticRegression classifier=new LogisticRegression(data.getData(),data.getLabels());
  classifier.train();
  double[] actualPredictionsProbabilities=classifier.predict(new double[][]{{3,14,35,51},{3,13,35,50},{2,16,34,48},{2,17,34,54},{2,15,37,53},{19,61,28,74},{22,58,30,65},{19,53,27,64},{20,50,25,57},{24,51,28,58}});
  int[] actualPredictions=new int[actualPredictionsProbabilities.length];
  for (int i=0; i < actualPredictions.length; i++) {
    actualPredictions[i]=actualPredictionsProbabilities[i] >= 0.5 ? 1 : 0;
  }
  int[] expectedPredictions=new int[]{0,0,0,0,0,1,1,1,1,1};
  Assert.assertArrayEquals(expectedPredictions,actualPredictions);
}","@Test public void testLogisticRegression(){
  String filename=LogisticRegressionTest.class.getResource(""String_Node_Str"").getPath();
  TrainingData data=DataPreprocessing.parseLabeledDataFromCSVFile(filename);
  LogisticRegression classifier=new LogisticRegression(data.getData(),data.getLabels());
  classifier.train();
  double[] actualPredictionsProbabilities=classifier.predict(new double[][]{{3,14,35,51},{3,13,35,50},{2,16,34,48},{2,17,34,54},{2,15,37,53},{19,61,28,74},{22,58,30,65},{19,53,27,64},{20,50,25,57},{24,51,28,58}});
  int[] actualPredictions=new int[actualPredictionsProbabilities.length];
  for (int i=0; i < actualPredictions.length; i++) {
    actualPredictions[i]=actualPredictionsProbabilities[i] >= 0.5 ? 1 : 0;
  }
  int[] expectedPredictions=new int[]{0,0,0,0,0,1,1,1,1,1};
  Assert.assertArrayEquals(expectedPredictions,actualPredictions);
}",0.9691577698695136
144215,"public boolean checkTerminationConditions(){
  if (currentIteration > 0) {
    pointChange=currentPoint.subtract(previousPoint).getNorm();
    pointConverged=pointChange <= pointChangeTolerance;
    objectiveChange=Math.abs((previousObjectiveValue - currentObjectiveValue) / previousObjectiveValue);
    objectiveConverged=objectiveChange <= objectiveChangeTolerance;
    if (this instanceof NonlinearConjugateGradientSolver) {
      gradientNorm=Math.abs(currentGradient.getMaxValue()) / (1 + Math.abs(currentObjectiveValue));
      gradientConverged=gradientNorm <= gradientTolerance;
    }
 else {
      gradientNorm=currentDirection.getNorm();
      gradientConverged=gradientNorm <= gradientTolerance;
    }
    return (checkForPointConvergence && pointConverged) || (checkForObjectiveConvergence && objectiveConverged) || (checkForGradientConvergence && gradientConverged);
  }
 else {
    return false;
  }
}","public boolean checkTerminationConditions(){
  if (currentIteration > 0) {
    pointChange=currentPoint.subtract(previousPoint).getNorm();
    pointConverged=pointChange <= pointChangeTolerance;
    objectiveChange=Math.abs((previousObjectiveValue - currentObjectiveValue) / previousObjectiveValue);
    objectiveConverged=objectiveChange <= objectiveChangeTolerance;
    if (this instanceof NonlinearConjugateGradientSolver) {
      gradientNorm=Math.abs(currentGradient.getMaxValue()) / (1 + Math.abs(currentObjectiveValue));
      gradientConverged=gradientNorm <= gradientTolerance;
    }
 else {
      gradientNorm=currentGradient.getNorm();
      gradientConverged=gradientNorm <= gradientTolerance;
    }
    return (checkForPointConvergence && pointConverged) || (checkForObjectiveConvergence && objectiveConverged) || (checkForGradientConvergence && gradientConverged);
  }
 else {
    return false;
  }
}",0.9907053034445052
144216,"/** 
 * {@inheritDoc}
 */
public double performLineSearch(RealVector point,RealVector direction){
  double objectiveValueAtCurrentPoint=objective.computeValue(point);
  RealVector objectiveGradientAtCurrentPoint=objective.computeGradient(point);
  double currentStepSize=initialStepSize;
  while (!LineSearchConditions.checkArmijoCondition(objective,point,direction,initialStepSize,c,objectiveValueAtCurrentPoint,objectiveGradientAtCurrentPoint)) {
    currentStepSize*=contraptionFactor;
  }
  return currentStepSize;
}","/** 
 * {@inheritDoc}
 */
public double performLineSearch(RealVector point,RealVector direction){
  double objectiveValueAtCurrentPoint=objective.computeValue(point);
  RealVector objectiveGradientAtCurrentPoint=objective.computeGradient(point);
  double currentStepSize=initialStepSize;
  while (!LineSearchConditions.checkArmijoCondition(objective,point,direction,currentStepSize,c,objectiveValueAtCurrentPoint,objectiveGradientAtCurrentPoint)) {
    currentStepSize*=contraptionFactor;
  }
  return currentStepSize;
}",0.9865384615384616
144217,"private void performQuadraticInterpolation(RealVector currentPoint,RealVector currentDirection,double objectiveValueAtCurrentPoint,double dotProductOfObjectiveGradientAndDirection){
  RealVector pointWithA0=currentPoint.add(currentDirection.mapMultiply(mostRecentStepSizes[0]));
  double phiA0=objectiveFunction.computeValue(pointWithA0);
  mostRecentStepSizes[1]=mostRecentStepSizes[0];
  mostRecentStepSizes[0]=-dotProductOfObjectiveGradientAndDirection * Math.pow(mostRecentStepSizes[1],2) / (2 * (phiA0 - objectiveValueAtCurrentPoint - mostRecentStepSizes[1] * dotProductOfObjectiveGradientAndDirection));
}","private void performQuadraticInterpolation(RealVector currentPoint,RealVector currentDirection,double phi0,double phiPrime0){
  double a0=mostRecentStepSizes[0];
  double phiA0=objectiveFunction.computeValue(currentPoint.add(currentDirection.mapMultiply(a0)));
  mostRecentStepSizes[1]=mostRecentStepSizes[0];
  mostRecentStepSizes[0]=-phiPrime0 * Math.pow(a0,2) / (2 * (phiA0 - phi0 - a0 * phiPrime0));
  if (Math.abs(mostRecentStepSizes[0] - mostRecentStepSizes[1]) <= MINIMUM_STEP_SIZE_CHANGE_THRESHOLD || mostRecentStepSizes[0] / mostRecentStepSizes[1] <= MINIMUM_STEP_SIZE_RATIO_THRESHOLD) {
    mostRecentStepSizes[0]=mostRecentStepSizes[1] / 2;
  }
}",0.4574132492113564
144218,"public ArmijoInterpolationLineSearch(Function objectiveFunction,StepSizeInitializationMethod stepSizeInitializationMethod,double c,double initialStepSize){
  super(objectiveFunction,stepSizeInitializationMethod,initialStepSize);
  Preconditions.checkArgument(c > 0 && c < 1);
  Preconditions.checkArgument(initialStepSize > 0);
  this.c=c;
  mostRecentStepSizes=new double[2];
}","public ArmijoInterpolationLineSearch(Function objectiveFunction,StepSizeInitializationMethod stepSizeInitializationMethod,double C,double initialStepSize){
  super(objectiveFunction,stepSizeInitializationMethod,initialStepSize);
  Preconditions.checkArgument(C > 0 && C < 1);
  Preconditions.checkArgument(initialStepSize > 0);
  this.C=C;
  mostRecentStepSizes=new double[2];
}",0.9867724867724867
144219,"private void performCubicInterpolation(RealVector currentPoint,RealVector currentDirection,double objectiveValueAtCurrentPoint,double dotProductOfObjectiveGradientAndDirection){
  double previousStepSize=mostRecentStepSizes[0];
  double a0=mostRecentStepSizes[1];
  double a1=mostRecentStepSizes[0];
  double a0_squared=Math.pow(a0,2);
  double a1_squared=Math.pow(a1,2);
  double a0_cubed=Math.pow(a0,3);
  double a1_cubed=Math.pow(a1,3);
  RealVector pointWithA0=currentPoint.add(currentDirection.mapMultiply(a0));
  RealVector pointWithA1=currentPoint.add(currentDirection.mapMultiply(a1));
  double phiA0=objectiveFunction.computeValue(pointWithA0);
  double phiA1=objectiveFunction.computeValue(pointWithA1);
  double denominator=a0_squared * a1_squared * (a1 - a0);
  double a=(a0_squared * (phiA1 - objectiveValueAtCurrentPoint - a1 * dotProductOfObjectiveGradientAndDirection) - a1_squared * (phiA0 - objectiveValueAtCurrentPoint - a0 * dotProductOfObjectiveGradientAndDirection)) / denominator;
  double b=(-a0_cubed * (phiA1 - objectiveValueAtCurrentPoint - a1 * dotProductOfObjectiveGradientAndDirection) + a1_cubed * (phiA0 - objectiveValueAtCurrentPoint - a0 * dotProductOfObjectiveGradientAndDirection)) / denominator;
  mostRecentStepSizes[0]=-(b - Math.sqrt(Math.pow(b,2) - 3 * a * dotProductOfObjectiveGradientAndDirection)) / (3 * a);
  mostRecentStepSizes[1]=previousStepSize;
  if (Math.abs(mostRecentStepSizes[0] - mostRecentStepSizes[1]) <= 1e-3 || mostRecentStepSizes[0] / mostRecentStepSizes[1] <= 1e-1) {
    mostRecentStepSizes[0]=mostRecentStepSizes[1] / 2;
  }
}","private void performCubicInterpolation(RealVector currentPoint,RealVector currentDirection,double phi0,double phiPrime0){
  double previousStepSize=mostRecentStepSizes[0];
  double a0=mostRecentStepSizes[1];
  double a1=mostRecentStepSizes[0];
  double a0Sq=Math.pow(a0,2);
  double a1Sq=Math.pow(a1,2);
  double a0Cub=Math.pow(a0,3);
  double a1Cub=Math.pow(a1,3);
  double phiA0=objectiveFunction.computeValue(currentPoint.add(currentDirection.mapMultiply(a0)));
  double phiA1=objectiveFunction.computeValue(currentPoint.add(currentDirection.mapMultiply(a1)));
  double denominator=a0Sq * a1Sq * (a1 - a0);
  double a=(a0Sq * (phiA1 - phi0 - a1 * phiPrime0) - a1Sq * (phiA0 - phi0 - a0 * phiPrime0)) / denominator;
  double b=(-a0Cub * (phiA1 - phi0 - a1 * phiPrime0) + a1Cub * (phiA0 - phi0 - a0 * phiPrime0)) / denominator;
  mostRecentStepSizes[0]=-(b - Math.sqrt(Math.pow(b,2) - 3 * a * phiPrime0)) / (3 * a);
  mostRecentStepSizes[1]=previousStepSize;
  if (Math.abs(mostRecentStepSizes[0] - mostRecentStepSizes[1]) <= MINIMUM_STEP_SIZE_CHANGE_THRESHOLD || mostRecentStepSizes[0] / mostRecentStepSizes[1] <= MINIMUM_STEP_SIZE_RATIO_THRESHOLD) {
    mostRecentStepSizes[0]=mostRecentStepSizes[1] / 2;
  }
}",0.4252586514448805
144220,"public void performLineSearch(RealVector currentPoint,RealVector currentDirection){
  double objectiveValueAtCurrentPoint=objectiveFunction.computeValue(currentPoint);
  RealVector objectiveGradientAtCurrentPoint=objectiveFunction.computeGradient(currentPoint);
  double dotProductOfObjectiveGradientAndDirection=objectiveGradientAtCurrentPoint.dotProduct(currentDirection);
  mostRecentStepSizes[0]=currentStepSize;
  int iterationNumber=0;
  while (!LineSearchConditions.checkArmijoCondition(objectiveFunction,currentPoint,currentDirection,mostRecentStepSizes[0],c,objectiveValueAtCurrentPoint,objectiveGradientAtCurrentPoint)) {
    if (iterationNumber == 0) {
      performQuadraticInterpolation(currentPoint,currentDirection,objectiveValueAtCurrentPoint,dotProductOfObjectiveGradientAndDirection);
    }
 else {
      performCubicInterpolation(currentPoint,currentDirection,objectiveValueAtCurrentPoint,dotProductOfObjectiveGradientAndDirection);
    }
    iterationNumber++;
    if (iterationNumber >= 10) {
      break;
    }
  }
  currentStepSize=mostRecentStepSizes[0];
}","public void performLineSearch(RealVector currentPoint,RealVector currentDirection){
  double objectiveValueAtCurrentPoint=objectiveFunction.computeValue(currentPoint);
  RealVector objectiveGradientAtCurrentPoint=objectiveFunction.computeGradient(currentPoint);
  double dotProductOfObjectiveGradientAndDirection=objectiveGradientAtCurrentPoint.dotProduct(currentDirection);
  mostRecentStepSizes[0]=currentStepSize;
  boolean firstIteration=true;
  while (!LineSearchConditions.checkArmijoCondition(objectiveFunction,currentPoint,currentDirection,mostRecentStepSizes[0],C,objectiveValueAtCurrentPoint,objectiveGradientAtCurrentPoint)) {
    if (firstIteration) {
      performQuadraticInterpolation(currentPoint,currentDirection,objectiveValueAtCurrentPoint,dotProductOfObjectiveGradientAndDirection);
      firstIteration=false;
    }
 else {
      performCubicInterpolation(currentPoint,currentDirection,objectiveValueAtCurrentPoint,dotProductOfObjectiveGradientAndDirection);
    }
  }
  currentStepSize=mostRecentStepSizes[0];
}",0.9124467581637482
144221,"private void hook2(Class<?> clazz){
  XposedBridge.hookAllMethods(clazz,""String_Node_Str"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      String result=((String)param.getResult()).replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (phoneNumber != null && !""String_Node_Str"".equals(phoneNumber)) {
        result=phoneNumber + ""String_Node_Str"" + result;
      }
      if (phoneName != null && !""String_Node_Str"".equals(phoneName)) {
        result=phoneName + ""String_Node_Str"" + result;
      }
      param.setResult(result);
    }
  }
);
}","private void hook2(Class<?> clazz){
  XposedBridge.hookAllMethods(clazz,""String_Node_Str"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      String result=((String)param.getResult()).replaceAll(""String_Node_Str"",""String_Node_Str"");
      if (phoneNumber != null && !""String_Node_Str"".equals(phoneNumber)) {
        result=phoneNumber.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + result;
      }
      if (phoneName != null && !""String_Node_Str"".equals(phoneName)) {
        result=phoneName + ""String_Node_Str"" + result;
      }
      param.setResult(result);
    }
  }
);
}",0.9627329192546584
144222,"private void hook1(Class<?> clazz){
  XposedBridge.hookAllMethods(clazz,""String_Node_Str"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      Object callRecorder=mCallRecorder.get(mApp.get(param.thisObject));
      if ((Boolean)XposedHelpers.callMethod(callRecorder,""String_Node_Str"")) {
        return;
      }
      CallManager cm=(CallManager)mCM.get(param.thisObject);
      Call.State state=cm.getActiveFgCallState();
      if (state == Call.State.ACTIVE) {
        XposedHelpers.callMethod(callRecorder,""String_Node_Str"");
      }
 else       if (state == Call.State.ALERTING || state == Call.State.INCOMING || state == Call.State.WAITING) {
        CallerInfo callerInfo=(CallerInfo)XposedHelpers.callMethod(param.thisObject,""String_Node_Str"",XposedHelpers.callMethod(param.thisObject,""String_Node_Str"",cm.getActiveFgCall()));
        phoneName=callerInfo.name;
        phoneNumber=callerInfo.phoneNumber.startsWith(""String_Node_Str"") ? callerInfo.phoneNumber.substring(4) : callerInfo.phoneNumber;
      }
    }
  }
);
}","private void hook1(Class<?> clazz){
  XposedBridge.hookAllMethods(clazz,""String_Node_Str"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      Object callRecorder=mCallRecorder.get(mApp.get(param.thisObject));
      if ((Boolean)XposedHelpers.callMethod(callRecorder,""String_Node_Str"")) {
        return;
      }
      CallManager cm=(CallManager)mCM.get(param.thisObject);
      Call.State state=cm.getActiveFgCallState();
      if (state == Call.State.ACTIVE) {
        CallerInfo callerInfo=(CallerInfo)XposedHelpers.callMethod(param.thisObject,""String_Node_Str"",XposedHelpers.callMethod(param.thisObject,""String_Node_Str"",cm.getActiveFgCall()));
        phoneName=callerInfo.name;
        phoneNumber=callerInfo.phoneNumber.startsWith(""String_Node_Str"") ? callerInfo.phoneNumber.substring(4) : callerInfo.phoneNumber;
        if (previousState == Call.State.ALERTING) {
          XposedHelpers.callMethod(callRecorder,""String_Node_Str"",Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"");
        }
 else {
          XposedHelpers.callMethod(callRecorder,""String_Node_Str"",Environment.getExternalStorageDirectory().getPath() + ""String_Node_Str"");
        }
        XposedHelpers.callMethod(callRecorder,""String_Node_Str"");
      }
      previousState=state;
    }
  }
);
}",0.5113821138211382
144223,"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  String result=((String)param.getResult()).replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (phoneNumber != null && !""String_Node_Str"".equals(phoneNumber)) {
    result=phoneNumber + ""String_Node_Str"" + result;
  }
  if (phoneName != null && !""String_Node_Str"".equals(phoneName)) {
    result=phoneName + ""String_Node_Str"" + result;
  }
  param.setResult(result);
}","@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  String result=((String)param.getResult()).replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (phoneNumber != null && !""String_Node_Str"".equals(phoneNumber)) {
    result=phoneNumber.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + result;
  }
  if (phoneName != null && !""String_Node_Str"".equals(phoneName)) {
    result=phoneName + ""String_Node_Str"" + result;
  }
  param.setResult(result);
}",0.95
144224,"/** 
 * Create CDA section(History of Infection section)
 * @param patient
 * @return CDA section or Report errors
 * @should return CDA section
 * @should return errors in Section
 */
public static Section buildHistoryOfInfectionSection(Patient patient){
  Map<String,String> mappings=new HashMap<String,String>();
  Section section=CDAFactory.eINSTANCE.createSection();
  HistoryOfInfectionSection ccs=new HistoryOfInfectionSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  String delimeter=""String_Node_Str"";
  builder.append(delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  for (  Map.Entry<String,String> mapentry : mappings.entrySet()) {
    List<Concept> ConceptsList=new ArrayList<Concept>();
    for (    Concept concepts : service.getConceptsByMapping(mapentry.getKey(),mapentry.getValue(),false)) {
      if (concepts == null) {
        throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{mapentry.getKey(),mapentry.getValue()},null));
      }
 else {
        ConceptsList.add(concepts);
      }
    }
    List<Obs> obsList=new ArrayList<Obs>();
    for (    Concept concept : ConceptsList) {
      if (!concept.getDatatype().getName().equals(""String_Node_Str"")) {
        obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
      }
      if (obsList.isEmpty()) {
        log.error(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{concept.getConceptId(),concept.getName()},null));
        builder.append(""String_Node_Str"" + delimeter);
        builder.append(""String_Node_Str"" + concept.getId() + ""String_Node_Str""+ delimeter);
        builder.append(""String_Node_Str"");
        builder.append(""String_Node_Str"" + ""String_Node_Str"" + delimeter);
        builder.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ delimeter);
        builder.append(""String_Node_Str"" + delimeter);
        Entry entry=CDAFactory.eINSTANCE.createEntry();
        entry.setTypeCode(x_ActRelationshipEntry.DRIV);
        Observation observation=CDAFactory.eINSTANCE.createObservation();
        observation.setClassCode(ActClassObservation.OBS);
        observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
        observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
        observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
        observation.getIds().add(CDAHelper.buildID(""String_Node_Str"",null));
        observation.setCode(CDAHelper.buildCodeCD(mapentry.getKey(),CDAHelper.getCodeSystemByName(mapentry.getValue()),""String_Node_Str"",mapentry.getValue()));
        observation.setText(CDAHelper.buildEDText(""String_Node_Str""));
        observation.setStatusCode(CDAHelper.getStatusCode(""String_Node_Str""));
        observation.setEffectiveTime(CDAHelper.buildDateTime(new Date()));
        ED value1=DatatypesFactory.eINSTANCE.createED(""String_Node_Str"");
        observation.getValues().add(value1);
        CE interpretationcode=CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,null);
        observation.getInterpretationCodes().add(interpretationcode);
        CE methodcode=CDAHelper.buildCodeCE(null,CDAHelper.getCodeSystemByName(mapentry.getValue()),null,mapentry.getValue());
        observation.getMethodCodes().add(methodcode);
        CE targetsite=CDAHelper.buildCodeCE(null,CDAHelper.getCodeSystemByName(mapentry.getValue()),null,mapentry.getValue());
        observation.getTargetSiteCodes().add(targetsite);
        entry.setObservation(observation);
        section.getEntries().add(entry);
      }
    }
    for (    Obs obs : obsList) {
      builder.append(""String_Node_Str"" + delimeter);
      builder.append(""String_Node_Str"" + obs.getId() + ""String_Node_Str""+ obs.getConcept().getName()+ ""String_Node_Str""+ delimeter);
      builder.append(""String_Node_Str"");
      int type=obs.getConcept().getDatatype().getId();
      String value=CDAHelper.getDatatypesValue(type,obs);
      builder.append(value + ""String_Node_Str"" + delimeter);
      builder.append(""String_Node_Str"" + CDAHelper.getDateFormat().format(obs.getObsDatetime()) + ""String_Node_Str""+ delimeter);
      builder.append(""String_Node_Str"" + delimeter);
      Entry entry=CDAFactory.eINSTANCE.createEntry();
      entry.setTypeCode(x_ActRelationshipEntry.DRIV);
      Observation observation=CDAFactory.eINSTANCE.createObservation();
      observation.setClassCode(ActClassObservation.OBS);
      observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
      observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
      observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
      observation.getIds().add(CDAHelper.buildID(obs.getUuid(),null));
      observation.setCode(CDAHelper.buildCodeCD(mapentry.getKey(),CDAHelper.getCodeSystemByName(mapentry.getValue()),obs.getConcept().getName().toString(),mapentry.getValue()));
      observation.setText(CDAHelper.buildEDText(""String_Node_Str"" + obs.getId()));
      observation.setStatusCode(CDAHelper.getStatusCode(""String_Node_Str""));
      observation.setEffectiveTime(CDAHelper.buildDateTime(new Date()));
      ED value1=DatatypesFactory.eINSTANCE.createED(""String_Node_Str"");
      observation.getValues().add(value1);
      CE interpretationcode=CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,null);
      observation.getInterpretationCodes().add(interpretationcode);
      CE methodcode=CDAHelper.buildCodeCE(null,CDAHelper.getCodeSystemByName(mapentry.getValue()),null,mapentry.getValue());
      observation.getMethodCodes().add(methodcode);
      CE targetsite=CDAHelper.buildCodeCE(null,CDAHelper.getCodeSystemByName(mapentry.getValue()),null,mapentry.getValue());
      observation.getTargetSiteCodes().add(targetsite);
      entry.setObservation(observation);
      section.getEntries().add(entry);
    }
  }
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  text.addText(builder.toString());
  section.setText(text);
  return section;
}","/** 
 * Create CDA section(History of Infection section)
 * @param patient
 * @return CDA section or Report errors
 * @should return CDA section
 * @should return errors in Section
 */
public static Section buildHistoryOfInfectionSection(Patient patient){
  Map<String,String> mappings=new HashMap<String,String>();
  Section section=CDAFactory.eINSTANCE.createSection();
  HistoryOfInfectionSection ccs=new HistoryOfInfectionSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  String delimeter=""String_Node_Str"";
  builder.append(delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  for (  Map.Entry<String,String> mapentry : mappings.entrySet()) {
    List<Concept> ConceptsList=new ArrayList<Concept>();
    for (    Concept concepts : service.getConceptsByMapping(mapentry.getKey(),mapentry.getValue(),false)) {
      if (concepts == null) {
        throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{mapentry.getKey(),mapentry.getValue()},null));
      }
 else {
        ConceptsList.add(concepts);
      }
    }
    List<Obs> obsList=new ArrayList<Obs>();
    for (    Concept concept : ConceptsList) {
      boolean isDatatypeNA=concept.getDatatype().getName().equals(""String_Node_Str"");
      if (!isDatatypeNA) {
        obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
      }
      if (!isDatatypeNA && obsList.isEmpty()) {
        log.error(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{concept.getConceptId(),concept.getName()},null));
        builder.append(""String_Node_Str"" + delimeter);
        builder.append(""String_Node_Str"" + concept.getId() + ""String_Node_Str""+ delimeter);
        builder.append(""String_Node_Str"");
        builder.append(""String_Node_Str"" + ""String_Node_Str"" + delimeter);
        builder.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ delimeter);
        builder.append(""String_Node_Str"" + delimeter);
        Entry entry=CDAFactory.eINSTANCE.createEntry();
        entry.setTypeCode(x_ActRelationshipEntry.DRIV);
        Observation observation=CDAFactory.eINSTANCE.createObservation();
        observation.setClassCode(ActClassObservation.OBS);
        observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
        observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
        observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
        observation.getIds().add(CDAHelper.buildID(""String_Node_Str"",null));
        observation.setCode(CDAHelper.buildCodeCD(mapentry.getKey(),CDAHelper.getCodeSystemByName(mapentry.getValue()),""String_Node_Str"",mapentry.getValue()));
        observation.setText(CDAHelper.buildEDText(""String_Node_Str""));
        observation.setStatusCode(CDAHelper.getStatusCode(""String_Node_Str""));
        observation.setEffectiveTime(CDAHelper.buildDateTime(new Date()));
        ED value1=DatatypesFactory.eINSTANCE.createED(""String_Node_Str"");
        observation.getValues().add(value1);
        CE interpretationcode=CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,null);
        observation.getInterpretationCodes().add(interpretationcode);
        CE methodcode=CDAHelper.buildCodeCE(null,CDAHelper.getCodeSystemByName(mapentry.getValue()),null,mapentry.getValue());
        observation.getMethodCodes().add(methodcode);
        CE targetsite=CDAHelper.buildCodeCE(null,CDAHelper.getCodeSystemByName(mapentry.getValue()),null,mapentry.getValue());
        observation.getTargetSiteCodes().add(targetsite);
        entry.setObservation(observation);
        section.getEntries().add(entry);
      }
    }
    for (    Obs obs : obsList) {
      builder.append(""String_Node_Str"" + delimeter);
      builder.append(""String_Node_Str"" + obs.getId() + ""String_Node_Str""+ obs.getConcept().getName()+ ""String_Node_Str""+ delimeter);
      builder.append(""String_Node_Str"");
      int type=obs.getConcept().getDatatype().getId();
      String value=CDAHelper.getDatatypesValue(type,obs);
      builder.append(value + ""String_Node_Str"" + delimeter);
      builder.append(""String_Node_Str"" + CDAHelper.getDateFormat().format(obs.getObsDatetime()) + ""String_Node_Str""+ delimeter);
      builder.append(""String_Node_Str"" + delimeter);
      Entry entry=CDAFactory.eINSTANCE.createEntry();
      entry.setTypeCode(x_ActRelationshipEntry.DRIV);
      Observation observation=CDAFactory.eINSTANCE.createObservation();
      observation.setClassCode(ActClassObservation.OBS);
      observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
      observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
      observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
      observation.getIds().add(CDAHelper.buildID(obs.getUuid(),null));
      observation.setCode(CDAHelper.buildCodeCD(mapentry.getKey(),CDAHelper.getCodeSystemByName(mapentry.getValue()),obs.getConcept().getName().toString(),mapentry.getValue()));
      observation.setText(CDAHelper.buildEDText(""String_Node_Str"" + obs.getId()));
      observation.setStatusCode(CDAHelper.getStatusCode(""String_Node_Str""));
      observation.setEffectiveTime(CDAHelper.buildDateTime(new Date()));
      ED value1=DatatypesFactory.eINSTANCE.createED(""String_Node_Str"");
      observation.getValues().add(value1);
      CE interpretationcode=CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,null);
      observation.getInterpretationCodes().add(interpretationcode);
      CE methodcode=CDAHelper.buildCodeCE(null,CDAHelper.getCodeSystemByName(mapentry.getValue()),null,mapentry.getValue());
      observation.getMethodCodes().add(methodcode);
      CE targetsite=CDAHelper.buildCodeCE(null,CDAHelper.getCodeSystemByName(mapentry.getValue()),null,mapentry.getValue());
      observation.getTargetSiteCodes().add(targetsite);
      entry.setObservation(observation);
      section.getEntries().add(entry);
    }
  }
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  text.addText(builder.toString());
  section.setText(text);
  return section;
}",0.9898371335504886
144225,"@Override public ClinicalDocument produceCDA(Patient patient,BaseCdaTypeHandler cdaProfileType){
  ClinicalDocument cdaDocument=CDAFactory.eINSTANCE.createClinicalDocument();
  if (cdaProfileType.getTemplateid().equals(""String_Node_Str"")) {
    APHPHandler aphphandler=new APHPHandler();
    cdaDocument=aphphandler.buildAPHPMessage(patient,cdaProfileType);
  }
 else   if (cdaProfileType.getTemplateid().equals(""String_Node_Str"")) {
    APSHandler apshandler=new APSHandler();
    cdaDocument=apshandler.buildAPSMessage(patient,cdaProfileType);
  }
  return cdaDocument;
}","@Override public ClinicalDocument produceCDA(Patient patient,BaseCdaTypeHandler cdaProfileType){
  if (patient != null && cdaProfileType != null) {
    ClinicalDocument cdaDocument=CDAFactory.eINSTANCE.createClinicalDocument();
    if (cdaProfileType.getTemplateid().equals(""String_Node_Str"")) {
      APHPHandler aphphandler=new APHPHandler();
      cdaDocument=aphphandler.buildAPHPMessage(patient,cdaProfileType);
    }
 else     if (cdaProfileType.getTemplateid().equals(""String_Node_Str"")) {
      APSHandler apshandler=new APSHandler();
      cdaDocument=apshandler.buildAPSMessage(patient,cdaProfileType);
    }
    return cdaDocument;
  }
 else   return null;
}",0.9227053140096618
144226,"/** 
 * Create CDA section(History of past illness section)
 * @param patient
 * @return CDA section or Report errors
 * @should return CDA section
 * @should return errors in Section
 */
public static Section buildHistoryOfPastIllnessSection(Patient patient){
  Map<String,String> mappings=new HashMap<String,String>();
  Section section=CDAFactory.eINSTANCE.createSection();
  HistoryOfPastIllnessSection ccs=new HistoryOfPastIllnessSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  text.addText(""String_Node_Str"");
  section.setText(text);
  ConceptService service=Context.getConceptService();
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  Entry e=CDAFactory.eINSTANCE.createEntry();
  Act act=CDAFactory.eINSTANCE.createAct();
  act.setClassCode(x_ActClassDocumentEntryAct.ACT);
  act.setMoodCode(x_DocumentActMood.EVN);
  act.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  act.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  act.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  act.getIds().add(CDAHelper.buildID(""String_Node_Str"",null));
  CD code=DatatypesFactory.eINSTANCE.createCD();
  code.setNullFlavor(NullFlavor.NA);
  act.setCode(code);
  act.setStatusCode(CDAHelper.getStatusCode(""String_Node_Str""));
  act.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(null));
  for (  Map.Entry<String,String> mapentry : mappings.entrySet()) {
    List<Concept> ConceptsList=new ArrayList<Concept>();
    for (    Concept concepts : service.getConceptsByMapping(mapentry.getKey(),mapentry.getValue(),false)) {
      if (concepts == null) {
        throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{mapentry.getKey(),mapentry.getValue()},null));
      }
 else {
        ConceptsList.add(concepts);
      }
    }
    List<Obs> obsList=new ArrayList<Obs>();
    for (    Concept concept : ConceptsList) {
      if (!concept.getDatatype().getName().equals(""String_Node_Str"")) {
        obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
      }
 else {
        if (concept.getSetMembers() != null) {
          List<Concept> conceptsetmemebers=concept.getSetMembers();
          for (          Concept conceptmem : conceptsetmemebers) {
            List<Obs> obsOFconceptsetmemebers=new ArrayList<Obs>();
            obsOFconceptsetmemebers.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,conceptmem));
            if (!obsOFconceptsetmemebers.isEmpty()) {
              for (              Obs o : obsOFconceptsetmemebers) {
                obsList.add(o);
              }
            }
          }
        }
      }
      if (obsList.isEmpty()) {
        log.error(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{concept.getConceptId(),concept.getName()},null));
        EntryRelationship entryRelationship1=CDAFactory.eINSTANCE.createEntryRelationship();
        entryRelationship1.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
        entryRelationship1.setInversionInd(false);
        Observation observation1=CDAFactory.eINSTANCE.createObservation();
        observation1.setClassCode(ActClassObservation.OBS);
        observation1.setMoodCode(x_ActMoodDocumentObservation.EVN);
        observation1.setNegationInd(false);
        observation1.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
        observation1.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
        observation1.getIds().add(CDAHelper.buildID(""String_Node_Str"",null));
        observation1.setCode(CDAHelper.buildCodeCD(mapentry.getKey(),""String_Node_Str"",null,""String_Node_Str""));
        ED answerTxt=DatatypesFactory.eINSTANCE.createED();
        observation1.setText(answerTxt.addText(""String_Node_Str"" + concept.getName() + ""String_Node_Str""+ concept.getId()));
        observation1.setStatusCode(CDAHelper.getStatusCode(""String_Node_Str""));
        observation1.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(null,null));
        CD codecd=DatatypesFactory.eINSTANCE.createCD();
        codecd.setCode(""String_Node_Str"");
        codecd.setCodeSystem(""String_Node_Str"");
        codecd.setDisplayName(""String_Node_Str"");
        codecd.setCodeSystemName(""String_Node_Str"");
        observation1.getValues().add(codecd);
        entryRelationship1.setObservation(observation1);
        act.getEntryRelationships().add(entryRelationship1);
      }
    }
    for (    Obs obs : obsList) {
      EntryRelationship entryRelationship1=CDAFactory.eINSTANCE.createEntryRelationship();
      entryRelationship1.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
      entryRelationship1.setInversionInd(false);
      Observation observation1=CDAFactory.eINSTANCE.createObservation();
      observation1.setClassCode(ActClassObservation.OBS);
      observation1.setMoodCode(x_ActMoodDocumentObservation.EVN);
      observation1.setNegationInd(false);
      observation1.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
      observation1.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
      int type=obs.getConcept().getDatatype().getId();
      String value=CDAHelper.getDatatypesValue(type,obs);
      observation1.getIds().add(CDAHelper.buildID(obs.getUuid(),null));
      if (mapentry.getKey().equals(""String_Node_Str"")) {
        observation1.setCode(CDAHelper.buildCodeCD(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str""));
      }
 else {
        observation1.setCode(CDAHelper.buildCodeCD(mapentry.getKey(),""String_Node_Str"",null,""String_Node_Str""));
      }
      ED answerTxt=DatatypesFactory.eINSTANCE.createED();
      observation1.setText(answerTxt.addText(value));
      observation1.setStatusCode(CDAHelper.getStatusCode(""String_Node_Str""));
      observation1.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(null,null));
      CD codecd=DatatypesFactory.eINSTANCE.createCD();
      codecd.setCode(obs.getConcept().getId().toString());
      codecd.setCodeSystem(CDAHelper.getCodeSystemByName(mapentry.getValue()));
      codecd.setDisplayName(obs.getConcept().getName().toString());
      codecd.setCodeSystemName(mapentry.getValue());
      observation1.getValues().add(codecd);
      entryRelationship1.setObservation(observation1);
      act.getEntryRelationships().add(entryRelationship1);
    }
  }
  e.setAct(act);
  section.getEntries().add(e);
  return section;
}","/** 
 * Create CDA section(History of past illness section)
 * @param patient
 * @return CDA section or Report errors
 * @should return CDA section
 * @should return errors in Section
 */
public static Section buildHistoryOfPastIllnessSection(Patient patient){
  Map<String,String> mappings=new HashMap<String,String>();
  Section section=CDAFactory.eINSTANCE.createSection();
  HistoryOfPastIllnessSection ccs=new HistoryOfPastIllnessSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  text.addText(""String_Node_Str"");
  section.setText(text);
  ConceptService service=Context.getConceptService();
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  Entry e=CDAFactory.eINSTANCE.createEntry();
  Act act=CDAFactory.eINSTANCE.createAct();
  act.setClassCode(x_ActClassDocumentEntryAct.ACT);
  act.setMoodCode(x_DocumentActMood.EVN);
  act.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  act.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  act.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  act.getIds().add(CDAHelper.buildID(""String_Node_Str"",null));
  CD code=DatatypesFactory.eINSTANCE.createCD();
  code.setNullFlavor(NullFlavor.NA);
  act.setCode(code);
  act.setStatusCode(CDAHelper.getStatusCode(""String_Node_Str""));
  act.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(null));
  for (  Map.Entry<String,String> mapentry : mappings.entrySet()) {
    List<Concept> ConceptsList=new ArrayList<Concept>();
    for (    Concept concepts : service.getConceptsByMapping(mapentry.getKey(),mapentry.getValue(),false)) {
      if (concepts == null) {
        throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{mapentry.getKey(),mapentry.getValue()},null));
      }
 else {
        ConceptsList.add(concepts);
      }
    }
    List<Obs> obsList=new ArrayList<Obs>();
    for (    Concept concept : ConceptsList) {
      boolean isDatatypeNA=concept.getDatatype().getName().equals(""String_Node_Str"");
      if (!isDatatypeNA) {
        obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
      }
 else {
        if (concept.getSetMembers() != null) {
          List<Concept> conceptsetmemebers=concept.getSetMembers();
          for (          Concept conceptmem : conceptsetmemebers) {
            List<Obs> obsOFconceptsetmemebers=new ArrayList<Obs>();
            obsOFconceptsetmemebers.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,conceptmem));
            if (!obsOFconceptsetmemebers.isEmpty()) {
              for (              Obs o : obsOFconceptsetmemebers) {
                obsList.add(o);
              }
            }
          }
        }
      }
      if (!isDatatypeNA && obsList.isEmpty()) {
        log.error(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{concept.getConceptId(),concept.getName()},null));
        EntryRelationship entryRelationship1=CDAFactory.eINSTANCE.createEntryRelationship();
        entryRelationship1.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
        entryRelationship1.setInversionInd(false);
        Observation observation1=CDAFactory.eINSTANCE.createObservation();
        observation1.setClassCode(ActClassObservation.OBS);
        observation1.setMoodCode(x_ActMoodDocumentObservation.EVN);
        observation1.setNegationInd(false);
        observation1.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
        observation1.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
        observation1.getIds().add(CDAHelper.buildID(""String_Node_Str"",null));
        observation1.setCode(CDAHelper.buildCodeCD(mapentry.getKey(),""String_Node_Str"",null,""String_Node_Str""));
        ED answerTxt=DatatypesFactory.eINSTANCE.createED();
        observation1.setText(answerTxt.addText(""String_Node_Str"" + concept.getName() + ""String_Node_Str""+ concept.getId()));
        observation1.setStatusCode(CDAHelper.getStatusCode(""String_Node_Str""));
        observation1.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(null,null));
        CD codecd=DatatypesFactory.eINSTANCE.createCD();
        codecd.setCode(""String_Node_Str"");
        codecd.setCodeSystem(""String_Node_Str"");
        codecd.setDisplayName(""String_Node_Str"");
        codecd.setCodeSystemName(""String_Node_Str"");
        observation1.getValues().add(codecd);
        entryRelationship1.setObservation(observation1);
        act.getEntryRelationships().add(entryRelationship1);
      }
    }
    for (    Obs obs : obsList) {
      EntryRelationship entryRelationship1=CDAFactory.eINSTANCE.createEntryRelationship();
      entryRelationship1.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
      entryRelationship1.setInversionInd(false);
      Observation observation1=CDAFactory.eINSTANCE.createObservation();
      observation1.setClassCode(ActClassObservation.OBS);
      observation1.setMoodCode(x_ActMoodDocumentObservation.EVN);
      observation1.setNegationInd(false);
      observation1.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
      observation1.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
      int type=obs.getConcept().getDatatype().getId();
      String value=CDAHelper.getDatatypesValue(type,obs);
      observation1.getIds().add(CDAHelper.buildID(obs.getUuid(),null));
      if (mapentry.getKey().equals(""String_Node_Str"")) {
        observation1.setCode(CDAHelper.buildCodeCD(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str""));
      }
 else {
        observation1.setCode(CDAHelper.buildCodeCD(mapentry.getKey(),""String_Node_Str"",null,""String_Node_Str""));
      }
      ED answerTxt=DatatypesFactory.eINSTANCE.createED();
      observation1.setText(answerTxt.addText(value));
      observation1.setStatusCode(CDAHelper.getStatusCode(""String_Node_Str""));
      observation1.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(null,null));
      CD codecd=DatatypesFactory.eINSTANCE.createCD();
      codecd.setCode(obs.getConcept().getId().toString());
      codecd.setCodeSystem(CDAHelper.getCodeSystemByName(mapentry.getValue()));
      codecd.setDisplayName(obs.getConcept().getName().toString());
      codecd.setCodeSystemName(mapentry.getValue());
      observation1.getValues().add(codecd);
      entryRelationship1.setObservation(observation1);
      act.getEntryRelationships().add(entryRelationship1);
    }
  }
  e.setAct(act);
  section.getEntries().add(e);
  return section;
}",0.9880721220527046
144227,"public static Section buildChiefComplaintSection(Patient patient){
  Section section=CDAFactory.eINSTANCE.createSection();
  ChiefComplaintSection ccs=new ChiefComplaintSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  SimpleDateFormat s=new SimpleDateFormat(""String_Node_Str"");
  Map<String,Date> latestObsdate=new HashMap<String,Date>();
  Concept concept=service.getConceptByMapping(""String_Node_Str"",""String_Node_Str"");
  List<Obs> observationList=new ArrayList<Obs>();
  observationList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
  String value=""String_Node_Str"";
  for (  Obs obs : observationList) {
    int type=obs.getConcept().getDatatype().getId();
    if (latestObsdate.isEmpty()) {
      latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
      value=getDatatypesValue(type,obs);
    }
 else {
      Date date=latestObsdate.get(""String_Node_Str"");
      if (date.before(obs.getObsDatetime())) {
        latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
        value=getDatatypesValue(type,obs);
      }
    }
    System.out.println(""String_Node_Str"");
    System.out.println(latestObsdate);
  }
  builder.append(value);
  builder.append(""String_Node_Str"");
  text.addText(builder.toString());
  section.setText(text);
  return section;
}","public static Section buildChiefComplaintSection(Patient patient){
  Section section=CDAFactory.eINSTANCE.createSection();
  ChiefComplaintSection ccs=new ChiefComplaintSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  Map<String,Date> latestObsdate=new HashMap<String,Date>();
  Concept concept=service.getConceptByMapping(""String_Node_Str"",""String_Node_Str"");
  List<Obs> observationList=new ArrayList<Obs>();
  observationList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
  String value=""String_Node_Str"";
  for (  Obs obs : observationList) {
    int type=obs.getConcept().getDatatype().getId();
    if (latestObsdate.isEmpty()) {
      latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
      value=CDAHelper.getDatatypesValue(type,obs);
    }
 else {
      Date date=latestObsdate.get(""String_Node_Str"");
      if (date.before(obs.getObsDatetime())) {
        latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
        value=CDAHelper.getDatatypesValue(type,obs);
      }
    }
    System.out.println(""String_Node_Str"");
    System.out.println(latestObsdate);
  }
  builder.append(value);
  builder.append(""String_Node_Str"");
  text.addText(builder.toString());
  section.setText(text);
  return section;
}",0.9763416041546452
144228,"public static Section buildHistoryOfPresentIllnessSection(Patient patient){
  Section section=CDAFactory.eINSTANCE.createSection();
  HistoryOfPresentIllnessSection ccs=new HistoryOfPresentIllnessSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  SimpleDateFormat s=new SimpleDateFormat(""String_Node_Str"");
  Map<String,Date> latestObsdate=new HashMap<String,Date>();
  Concept concept=service.getConceptByMapping(""String_Node_Str"",""String_Node_Str"");
  List<Obs> observationList=new ArrayList<Obs>();
  observationList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
  String value=""String_Node_Str"";
  for (  Obs obs : observationList) {
    int type=obs.getConcept().getDatatype().getId();
    if (latestObsdate.isEmpty()) {
      latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
      value=getDatatypesValue(type,obs);
    }
 else {
      Date date=latestObsdate.get(""String_Node_Str"");
      if (date.before(obs.getObsDatetime())) {
        latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
        value=getDatatypesValue(type,obs);
      }
    }
  }
  builder.append(value);
  builder.append(""String_Node_Str"");
  text.addText(builder.toString());
  section.setText(text);
  return section;
}","public static Section buildHistoryOfPresentIllnessSection(Patient patient){
  Section section=CDAFactory.eINSTANCE.createSection();
  HistoryOfPresentIllnessSection ccs=new HistoryOfPresentIllnessSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  Map<String,Date> latestObsdate=new HashMap<String,Date>();
  Concept concept=service.getConceptByMapping(""String_Node_Str"",""String_Node_Str"");
  List<Obs> observationList=new ArrayList<Obs>();
  observationList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
  String value=""String_Node_Str"";
  for (  Obs obs : observationList) {
    int type=obs.getConcept().getDatatype().getId();
    if (latestObsdate.isEmpty()) {
      latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
      value=CDAHelper.getDatatypesValue(type,obs);
    }
 else {
      Date date=latestObsdate.get(""String_Node_Str"");
      if (date.before(obs.getObsDatetime())) {
        latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
        value=CDAHelper.getDatatypesValue(type,obs);
      }
    }
  }
  builder.append(value);
  builder.append(""String_Node_Str"");
  text.addText(builder.toString());
  section.setText(text);
  return section;
}",0.9755661501787842
144229,"public static Section buildSocialHistorySection(Patient p){
  List<Concept> socialHistoryConceptsList=new ArrayList<Concept>();
  Section section=CDAFactory.eINSTANCE.createSection();
  SocialHistorySection ccs=new SocialHistorySection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getParentTemplateId(),null,null));
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  String delimeter=""String_Node_Str"";
  builder.append(delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  ConceptService service=Context.getConceptService();
  SimpleDateFormat s=new SimpleDateFormat(""String_Node_Str"");
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  System.out.println(socialHistoryConceptsList);
  List<Obs> obsList=new ArrayList<Obs>();
  for (  Concept concept : socialHistoryConceptsList) {
    obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(p,concept));
  }
  for (  Obs obs : obsList) {
    System.out.println(obs);
    builder.append(""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + obs.getId() + ""String_Node_Str""+ obs.getConcept().getName()+ ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"");
    int type=obs.getConcept().getDatatype().getId();
    String value=getDatatypesValue(type,obs);
    builder.append(value + ""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + s.format(obs.getObsDatetime()) + ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"" + delimeter);
    Entry entry=CDAFactory.eINSTANCE.createEntry();
    entry.setTypeCode(x_ActRelationshipEntry.DRIV);
    Observation observation=CDAFactory.eINSTANCE.createObservation();
    observation.setClassCode(ActClassObservation.OBS);
    observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
    observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.getIds().add(CDAHelper.buildID(obs.getUuid(),null));
    CD ce=DatatypesFactory.eINSTANCE.createCD();
    ce.setCode(obs.getConcept().toString());
    ce.setCodeSystem(""String_Node_Str"");
    ce.setDisplayName(obs.getConcept().getName().toString());
    ce.setOriginalText(CDAHelper.buildEDText(""String_Node_Str"" + obs.getId()));
    observation.setCode(ce);
    CS statusCode=DatatypesFactory.eINSTANCE.createCS();
    statusCode.setCode(""String_Node_Str"");
    observation.setStatusCode(statusCode);
    observation.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(obs.getObsDatetime(),null));
    ST value1=CDAHelper.buildTitle(value);
    observation.getValues().add(value1);
    entry.setObservation(observation);
    section.getEntries().add(entry);
  }
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  text.addText(builder.toString());
  section.setText(text);
  return section;
}","public static Section buildSocialHistorySection(Patient p){
  List<Concept> socialHistoryConceptsList=new ArrayList<Concept>();
  Section section=CDAFactory.eINSTANCE.createSection();
  SocialHistorySection ccs=new SocialHistorySection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getParentTemplateId(),null,null));
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  String delimeter=""String_Node_Str"";
  builder.append(delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  ConceptService service=Context.getConceptService();
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  System.out.println(socialHistoryConceptsList);
  List<Obs> obsList=new ArrayList<Obs>();
  for (  Concept concept : socialHistoryConceptsList) {
    obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(p,concept));
  }
  for (  Obs obs : obsList) {
    System.out.println(obs);
    System.out.println(obs.getObsDatetime());
    System.out.println(CDAHelper.getDateFormat().format(obs.getObsDatetime()));
    builder.append(""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + obs.getId() + ""String_Node_Str""+ obs.getConcept().getName()+ ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"");
    int type=obs.getConcept().getDatatype().getId();
    String value=CDAHelper.getDatatypesValue(type,obs);
    builder.append(value + ""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + CDAHelper.getDateFormat().format(obs.getObsDatetime()) + ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"" + delimeter);
    Entry entry=CDAFactory.eINSTANCE.createEntry();
    entry.setTypeCode(x_ActRelationshipEntry.DRIV);
    Observation observation=CDAFactory.eINSTANCE.createObservation();
    observation.setClassCode(ActClassObservation.OBS);
    observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
    observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.getIds().add(CDAHelper.buildID(obs.getUuid(),null));
    CD ce=DatatypesFactory.eINSTANCE.createCD();
    ce.setCode(obs.getConcept().toString());
    ce.setCodeSystem(""String_Node_Str"");
    ce.setDisplayName(obs.getConcept().getName().toString());
    ce.setOriginalText(CDAHelper.buildEDText(""String_Node_Str"" + obs.getId()));
    observation.setCode(ce);
    CS statusCode=DatatypesFactory.eINSTANCE.createCS();
    statusCode.setCode(""String_Node_Str"");
    observation.setStatusCode(statusCode);
    observation.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(obs.getObsDatetime(),null));
    ST value1=CDAHelper.buildTitle(value);
    observation.getValues().add(value1);
    entry.setObservation(observation);
    section.getEntries().add(entry);
  }
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  text.addText(builder.toString());
  section.setText(text);
  return section;
}",0.9710327455919396
144230,"public static Section buildCodedVitalSignsSection(Patient patient){
  List<Concept> ConceptsList=new ArrayList<Concept>();
  Map<String,String> mappings=new HashMap<String,String>();
  String units=""String_Node_Str"";
  Section section=CDAFactory.eINSTANCE.createSection();
  VitalSignsSection vss=new VitalSignsSection();
  CodedVitalSignsSection ccs=new CodedVitalSignsSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(vss.getParentTemplateId(),null,null));
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getParentTemplateId(),null,null));
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  String delimeter=""String_Node_Str"";
  builder.append(delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  for (  Map.Entry<String,String> entry : mappings.entrySet()) {
    Concept concepts=service.getConceptByMapping(entry.getKey(),entry.getValue());
    if (concepts == null) {
      throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{entry.getKey(),entry.getValue()},null));
    }
 else {
      ConceptsList.add(concepts);
    }
  }
  List<Obs> obsList=new ArrayList<Obs>();
  for (  Concept concept : ConceptsList) {
    obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
    if (obsList.isEmpty()) {
      throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{concept.getConceptId(),concept.getName()},null));
    }
  }
  for (  Obs obs : obsList) {
    if (obs.getConcept().isNumeric()) {
      ConceptNumeric conceptNumeric=Context.getConceptService().getConceptNumeric(obs.getConcept().getId());
      units=conceptNumeric.getUnits();
    }
    builder.append(""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + obs.getId() + ""String_Node_Str""+ obs.getConcept().getName()+ ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"");
    int type=obs.getConcept().getDatatype().getId();
    String value=CDAHelper.getDatatypesValue(type,obs);
    builder.append(value + ""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + CDAHelper.getDateFormat().format(obs.getObsDatetime()) + ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"" + delimeter);
    Entry e=CDAFactory.eINSTANCE.createEntry();
    e.setTypeCode(x_ActRelationshipEntry.DRIV);
    Organizer organizer=CDAFactory.eINSTANCE.createOrganizer();
    organizer.setClassCode(x_ActClassDocumentEntryOrganizer.CLUSTER);
    organizer.setMoodCode(ActMood.EVN);
    organizer.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.getIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.setCode(CDAHelper.buildCodeCD(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    organizer.setStatusCode(CDAHelper.getStatusCode());
    organizer.setEffectiveTime(CDAHelper.buildDateTime(new Date()));
    Component4 component=CDAFactory.eINSTANCE.createComponent4();
    Observation observation=CDAFactory.eINSTANCE.createObservation();
    observation.setClassCode(ActClassObservation.OBS);
    observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
    observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.getIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.setCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str""));
    observation.setText(CDAHelper.buildEDText(""String_Node_Str"" + obs.getId()));
    observation.setStatusCode(CDAHelper.getStatusCode());
    observation.setEffectiveTime(CDAHelper.buildDateTime(new Date()));
    PQ value1=DatatypesFactory.eINSTANCE.createPQ();
    BigDecimal number=new BigDecimal(value);
    value1.setValue(number);
    value1.setUnit(units);
    observation.getValues().add(value1);
    component.setObservation(observation);
    organizer.getComponents().add(component);
    organizer.setStatusCode(CDAHelper.getStatusCode());
    e.setOrganizer(organizer);
    section.getEntries().add(e);
    component.setObservation(observation);
    organizer.getComponents().add(component);
    e.setOrganizer(organizer);
    section.getEntries().add(e);
  }
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  text.addText(builder.toString());
  section.setText(text);
  return section;
}","public static Section buildCodedVitalSignsSection(Patient patient){
  List<Concept> ConceptsList=new ArrayList<Concept>();
  Map<String,String> mappings=new HashMap<String,String>();
  String units=""String_Node_Str"";
  Section section=CDAFactory.eINSTANCE.createSection();
  VitalSignsSection vss=new VitalSignsSection();
  CodedVitalSignsSection ccs=new CodedVitalSignsSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(vss.getParentTemplateId(),null,null));
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getParentTemplateId(),null,null));
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  String delimeter=""String_Node_Str"";
  builder.append(delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  for (  Map.Entry<String,String> entry : mappings.entrySet()) {
    Concept concepts=service.getConceptByMapping(entry.getKey(),entry.getValue());
    if (concepts == null) {
      throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{entry.getKey(),entry.getValue()},null));
    }
 else {
      ConceptsList.add(concepts);
    }
  }
  List<Obs> obsList=new ArrayList<Obs>();
  for (  Concept concept : ConceptsList) {
    obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
    if (obsList.isEmpty()) {
      throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{concept.getConceptId(),concept.getName()},null));
    }
  }
  for (  Obs obs : obsList) {
    if (obs.getConcept().isNumeric()) {
      ConceptNumeric conceptNumeric=Context.getConceptService().getConceptNumeric(obs.getConcept().getId());
      units=conceptNumeric.getUnits();
      units=units.replaceAll(""String_Node_Str"",""String_Node_Str"");
      System.out.println(units);
    }
    builder.append(""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + obs.getId() + ""String_Node_Str""+ obs.getConcept().getName()+ ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"");
    int type=obs.getConcept().getDatatype().getId();
    String value=CDAHelper.getDatatypesValue(type,obs);
    builder.append(value + ""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + CDAHelper.getDateFormat().format(obs.getObsDatetime()) + ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"" + delimeter);
    Entry e=CDAFactory.eINSTANCE.createEntry();
    e.setTypeCode(x_ActRelationshipEntry.DRIV);
    Organizer organizer=CDAFactory.eINSTANCE.createOrganizer();
    organizer.setClassCode(x_ActClassDocumentEntryOrganizer.CLUSTER);
    organizer.setMoodCode(ActMood.EVN);
    organizer.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.getIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.setCode(CDAHelper.buildCodeCD(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    organizer.setStatusCode(CDAHelper.getStatusCode());
    organizer.setEffectiveTime(CDAHelper.buildDateTime(new Date()));
    Component4 component=CDAFactory.eINSTANCE.createComponent4();
    Observation observation=CDAFactory.eINSTANCE.createObservation();
    observation.setClassCode(ActClassObservation.OBS);
    observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
    observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.getIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.setCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str""));
    observation.setText(CDAHelper.buildEDText(""String_Node_Str"" + obs.getId()));
    observation.setStatusCode(CDAHelper.getStatusCode());
    observation.setEffectiveTime(CDAHelper.buildDateTime(new Date()));
    PQ value1=DatatypesFactory.eINSTANCE.createPQ();
    BigDecimal number=new BigDecimal(value);
    value1.setValue(number);
    value1.setUnit(units);
    observation.getValues().add(value1);
    component.setObservation(observation);
    organizer.getComponents().add(component);
    organizer.setStatusCode(CDAHelper.getStatusCode());
    e.setOrganizer(organizer);
    section.getEntries().add(e);
    component.setObservation(observation);
    organizer.getComponents().add(component);
    e.setOrganizer(organizer);
    section.getEntries().add(e);
  }
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  text.addText(builder.toString());
  section.setText(text);
  return section;
}",0.9916163648558016
144231,"public static Section buildPregnancyHistorySection(Patient patient){
  List<Concept> socialHistoryConceptsList=new ArrayList<Concept>();
  Map<String,String> mappings=new HashMap<String,String>();
  Section section=CDAFactory.eINSTANCE.createSection();
  PregnancyHistorySection ccs=new PregnancyHistorySection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  String delimeter=""String_Node_Str"";
  builder.append(delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  for (  Map.Entry<String,String> entry : mappings.entrySet()) {
    Concept concepts=service.getConceptByMapping(entry.getKey(),entry.getValue());
    if (concepts == null) {
      throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{entry.getKey(),entry.getValue()},null));
    }
 else {
      socialHistoryConceptsList.add(concepts);
    }
  }
  List<Obs> obsList=new ArrayList<Obs>();
  for (  Concept concept : socialHistoryConceptsList) {
    obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
    if (obsList.isEmpty()) {
      throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{concept.getConceptId(),concept.getName()},null));
    }
  }
  for (  Obs obs : obsList) {
    builder.append(""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + obs.getId() + ""String_Node_Str""+ obs.getConcept().getName()+ ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"");
    int type=obs.getConcept().getDatatype().getId();
    String value=CDAHelper.getDatatypesValue(type,obs);
    builder.append(value + ""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + CDAHelper.getDateFormat().format(obs.getObsDatetime()) + ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"" + delimeter);
    Entry e=CDAFactory.eINSTANCE.createEntry();
    e.setTypeCode(x_ActRelationshipEntry.DRIV);
    Organizer organizer=CDAFactory.eINSTANCE.createOrganizer();
    organizer.setClassCode(x_ActClassDocumentEntryOrganizer.CLUSTER);
    organizer.setMoodCode(ActMood.EVN);
    organizer.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.getIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.setCode(CDAHelper.buildCodeCD(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    CS cs=DatatypesFactory.eINSTANCE.createCS();
    cs.setCode(""String_Node_Str"");
    organizer.setStatusCode(cs);
    IVL_TS effectiveTime=DatatypesFactory.eINSTANCE.createIVL_TS();
    Date d=new Date();
    SimpleDateFormat s=new SimpleDateFormat(""String_Node_Str"");
    String creationDate=s.format(d);
    effectiveTime.setValue(creationDate);
    organizer.setEffectiveTime(effectiveTime);
    Component4 component=CDAFactory.eINSTANCE.createComponent4();
    Observation observation=CDAFactory.eINSTANCE.createObservation();
    observation.setClassCode(ActClassObservation.OBS);
    observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
    observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.getIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.setCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    observation.setText(CDAHelper.buildEDText(""String_Node_Str"" + obs.getId()));
    CS statusCode=DatatypesFactory.eINSTANCE.createCS();
    statusCode.setCode(""String_Node_Str"");
    observation.setStatusCode(statusCode);
    observation.setEffectiveTime(effectiveTime);
    ST value1=CDAHelper.buildTitle(value);
    observation.getValues().add(value1);
    component.setObservation(observation);
    organizer.getComponents().add(component);
    e.setOrganizer(organizer);
    section.getEntries().add(e);
  }
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  text.addText(builder.toString());
  section.setText(text);
  return section;
}","public static Section buildPregnancyHistorySection(Patient patient){
  List<Concept> ConceptsList=new ArrayList<Concept>();
  Map<String,String> mappings=new HashMap<String,String>();
  Section section=CDAFactory.eINSTANCE.createSection();
  PregnancyHistorySection ccs=new PregnancyHistorySection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  String delimeter=""String_Node_Str"";
  builder.append(delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  mappings.put(""String_Node_Str"",""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  for (  Map.Entry<String,String> entry : mappings.entrySet()) {
    Concept concepts=service.getConceptByMapping(entry.getKey(),entry.getValue());
    if (concepts == null) {
      throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{entry.getKey(),entry.getValue()},null));
    }
 else {
      ConceptsList.add(concepts);
    }
  }
  List<Obs> obsList=new ArrayList<Obs>();
  for (  Concept concept : ConceptsList) {
    obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
    if (obsList.isEmpty()) {
      throw new APIException(Context.getMessageSourceService().getMessage(""String_Node_Str"",new Object[]{concept.getConceptId(),concept.getName()},null));
    }
  }
  for (  Obs obs : obsList) {
    builder.append(""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + obs.getId() + ccs.getCode()+ ""String_Node_Str""+ obs.getConcept().getName()+ ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"");
    int type=obs.getConcept().getDatatype().getId();
    String value=CDAHelper.getDatatypesValue(type,obs);
    builder.append(value + ""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + CDAHelper.getDateFormat().format(obs.getObsDatetime()) + ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"" + delimeter);
    Entry e=CDAFactory.eINSTANCE.createEntry();
    e.setTypeCode(x_ActRelationshipEntry.DRIV);
    Organizer organizer=CDAFactory.eINSTANCE.createOrganizer();
    organizer.setClassCode(x_ActClassDocumentEntryOrganizer.CLUSTER);
    organizer.setMoodCode(ActMood.EVN);
    organizer.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.getIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    organizer.setCode(CDAHelper.buildCodeCD(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    organizer.setStatusCode(CDAHelper.getStatusCode());
    organizer.setEffectiveTime(CDAHelper.buildDateTime(new Date()));
    Component4 component=CDAFactory.eINSTANCE.createComponent4();
    Observation observation=CDAFactory.eINSTANCE.createObservation();
    observation.setClassCode(ActClassObservation.OBS);
    observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
    observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.getIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.setCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    observation.setText(CDAHelper.buildEDText(""String_Node_Str"" + obs.getId() + ccs.getCode()));
    observation.setStatusCode(CDAHelper.getStatusCode());
    observation.setEffectiveTime(CDAHelper.buildDateTime(new Date()));
    ST value1=CDAHelper.buildTitle(value);
    observation.getValues().add(value1);
    component.setObservation(observation);
    organizer.getComponents().add(component);
    e.setOrganizer(organizer);
    section.getEntries().add(e);
  }
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  text.addText(builder.toString());
  section.setText(text);
  return section;
}",0.9259055982436882
144232,"public static IVL_TS buildDateTime(Date date){
  IVL_TS effectiveTime=DatatypesFactory.eINSTANCE.createIVL_TS();
  SimpleDateFormat s=getDateFormat();
  String creationDate=s.format(date);
  effectiveTime.setValue(creationDate);
  return effectiveTime;
}","public static IVL_TS buildDateTime(Date date){
  IVL_TS effectiveTime=DatatypesFactory.eINSTANCE.createIVL_TS();
  SimpleDateFormat s=new SimpleDateFormat(""String_Node_Str"");
  String creationDate=s.format(date);
  effectiveTime.setValue(creationDate);
  return effectiveTime;
}",0.9060150375939848
144233,"public APHPHandler(){
  this.documentFullName=""String_Node_Str"";
  this.documentShortName=""String_Node_Str"";
  this.documentDescription=""String_Node_Str"";
  this.templateid=""String_Node_Str"";
  this.formatCode=""String_Node_Str"";
}","public APHPHandler(){
  this.documentFullName=""String_Node_Str"";
  this.documentShortName=""String_Node_Str"";
  this.documentDescription=""String_Node_Str"";
  this.templateid=""String_Node_Str"";
  this.parentTemplateId=""String_Node_Str"";
  this.formatCode=""String_Node_Str"";
}",0.9145129224652088
144234,"public String toString(){
  return documentFullName + ""String_Node_Str"" + documentShortName+ ""String_Node_Str""+ documentDescription+ ""String_Node_Str""+ templateid+ ""String_Node_Str""+ formatCode;
}","public String toString(){
  return documentFullName + ""String_Node_Str"" + documentShortName+ ""String_Node_Str""+ documentDescription+ ""String_Node_Str""+ templateid+ ""String_Node_Str""+ formatCode+ ""String_Node_Str""+ parentTemplateId;
}",0.9137529137529138
144235,"public static Section buildChiefComplaintSection(Patient patient){
  Section section=CDAFactory.eINSTANCE.createSection();
  ChiefComplaintSection ccs=new ChiefComplaintSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  Map<String,Date> latestObsdate=new HashMap<String,Date>();
  Concept concept=service.getConceptByMapping(""String_Node_Str"",""String_Node_Str"");
  List<Obs> observationList=new ArrayList<Obs>();
  observationList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
  String value=""String_Node_Str"";
  for (  Obs obs : observationList) {
    int type=obs.getConcept().getDatatype().getId();
    if (latestObsdate.isEmpty()) {
      latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
      value=CDAHelper.getDatatypesValue(type,obs);
    }
 else {
      Date date=latestObsdate.get(""String_Node_Str"");
      if (date.before(obs.getObsDatetime())) {
        latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
        value=CDAHelper.getDatatypesValue(type,obs);
      }
    }
  }
  builder.append(value);
  builder.append(""String_Node_Str"");
  text.addText(builder.toString());
  section.setText(text);
  return section;
}","public static Section buildChiefComplaintSection(Patient patient){
  Section section=CDAFactory.eINSTANCE.createSection();
  ChiefComplaintSection ccs=new ChiefComplaintSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  Concept concept=service.getConceptByMapping(""String_Node_Str"",""String_Node_Str"");
  List<Obs> observationList=new ArrayList<Obs>();
  observationList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
  String value=""String_Node_Str"";
  Obs obs=CDAHelper.getLatestObs(observationList);
  int type=obs.getConcept().getDatatype().getId();
  value=CDAHelper.getDatatypesValue(type,obs);
  builder.append(value);
  builder.append(""String_Node_Str"");
  text.addText(builder.toString());
  section.setText(text);
  return section;
}",0.807570977917981
144236,"public static Section buildHistoryOfPresentIllnessSection(Patient patient){
  Section section=CDAFactory.eINSTANCE.createSection();
  HistoryOfPresentIllnessSection ccs=new HistoryOfPresentIllnessSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  Map<String,Date> latestObsdate=new HashMap<String,Date>();
  Concept concept=service.getConceptByMapping(""String_Node_Str"",""String_Node_Str"");
  List<Obs> observationList=new ArrayList<Obs>();
  observationList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
  String value=""String_Node_Str"";
  for (  Obs obs : observationList) {
    int type=obs.getConcept().getDatatype().getId();
    if (latestObsdate.isEmpty()) {
      latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
      value=CDAHelper.getDatatypesValue(type,obs);
    }
 else {
      Date date=latestObsdate.get(""String_Node_Str"");
      if (date.before(obs.getObsDatetime())) {
        latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
        value=CDAHelper.getDatatypesValue(type,obs);
      }
    }
  }
  builder.append(value);
  builder.append(""String_Node_Str"");
  text.addText(builder.toString());
  section.setText(text);
  return section;
}","public static Section buildHistoryOfPresentIllnessSection(Patient patient){
  Section section=CDAFactory.eINSTANCE.createSection();
  HistoryOfPresentIllnessSection ccs=new HistoryOfPresentIllnessSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  Concept concept=service.getConceptByMapping(""String_Node_Str"",""String_Node_Str"");
  List<Obs> observationList=new ArrayList<Obs>();
  observationList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
  String value=""String_Node_Str"";
  Obs obs=CDAHelper.getLatestObs(observationList);
  int type=obs.getConcept().getDatatype().getId();
  value=CDAHelper.getDatatypesValue(type,obs);
  builder.append(value);
  builder.append(""String_Node_Str"");
  text.addText(builder.toString());
  section.setText(text);
  return section;
}",0.8111455108359134
144237,"public static IVL_TS buildEffectiveTimeinIVL(Date d,Date d1){
  IVL_TS effectiveTime=DatatypesFactory.eINSTANCE.createIVL_TS();
  SimpleDateFormat s=new SimpleDateFormat(""String_Node_Str"");
  String creationDate=s.format(d);
  IVXB_TS low=DatatypesFactory.eINSTANCE.createIVXB_TS();
  low.setValue(creationDate);
  effectiveTime.setLow(low);
  IVXB_TS high=DatatypesFactory.eINSTANCE.createIVXB_TS();
  if (d1 != null)   high.setValue(s.format(d1));
  effectiveTime.setHigh(high);
  return effectiveTime;
}","public static IVL_TS buildEffectiveTimeinIVL(Date d){
  IVL_TS effectiveTime=DatatypesFactory.eINSTANCE.createIVL_TS();
  SimpleDateFormat s=new SimpleDateFormat(""String_Node_Str"");
  String creationDate=s.format(d);
  IVXB_TS low=DatatypesFactory.eINSTANCE.createIVXB_TS();
  low.setValue(creationDate);
  effectiveTime.setLow(low);
  return effectiveTime;
}",0.8184971098265896
144238,"public ClinicalDocument buildHeader(ClinicalDocument doc,BaseCdaTypeHandler bh,Patient p){
  InfrastructureRootTypeId typeId=CDAFactory.eINSTANCE.createInfrastructureRootTypeId();
  typeId.setExtension(""String_Node_Str"");
  typeId.setRoot(""String_Node_Str"");
  doc.setTypeId(typeId);
  doc.getTemplateIds().clear();
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",""String_Node_Str"",null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(bh.templateid,null,null));
  doc.setId(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),bh.documentShortName));
  doc.setCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str""));
  doc.setTitle(CDAHelper.buildTitle(bh.documentFullName));
  Date d=new Date();
  doc.setEffectiveTime(CDAHelper.buildEffectiveTime(d));
  CE confidentialityCode=DatatypesFactory.eINSTANCE.createCE();
  confidentialityCode.setCode(""String_Node_Str"");
  confidentialityCode.setCodeSystem(""String_Node_Str"");
  doc.setConfidentialityCode(confidentialityCode);
  CS languageCode=DatatypesFactory.eINSTANCE.createCS();
  languageCode.setCode(""String_Node_Str"");
  doc.setLanguageCode(languageCode);
  CS realmcode=DatatypesFactory.eINSTANCE.createCS(""String_Node_Str"");
  doc.getRealmCodes().add(realmcode);
  PatientRole patientRole=CDAFactory.eINSTANCE.createPatientRole();
  patientRole.getIds().add(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),p.getPatientIdentifier().getIdentifier()));
  Set<PersonAddress> addresses=p.getAddresses();
  AD patientAddress=DatatypesFactory.eINSTANCE.createAD();
  patientAddress=buildAddresses(patientAddress,addresses);
  patientRole.getAddrs().add(patientAddress);
  TEL patientTelecom=DatatypesFactory.eINSTANCE.createTEL();
  patientTelecom.setNullFlavor(NullFlavor.UNK);
  patientRole.getTelecoms().add(patientTelecom);
  org.openhealthtools.mdht.uml.cda.Patient cdapatient=CDAFactory.eINSTANCE.createPatient();
  patientRole.setPatient(cdapatient);
  PN name=DatatypesFactory.eINSTANCE.createPN();
  if (p.getPersonName().getFamilyNamePrefix() != null) {
    name.addPrefix(p.getPersonName().getFamilyNamePrefix());
  }
  name.addGiven(p.getPersonName().getGivenName());
  name.addFamily(p.getPersonName().getFamilyName());
  if (p.getPersonName().getFamilyNameSuffix() != null) {
    name.addSuffix(p.getPersonName().getFamilyNameSuffix());
  }
  cdapatient.getNames().add(name);
  CE gender=DatatypesFactory.eINSTANCE.createCE();
  gender.setCode(p.getGender());
  gender.setCodeSystem(""String_Node_Str"");
  cdapatient.setAdministrativeGenderCode(gender);
  TS dateOfBirth=DatatypesFactory.eINSTANCE.createTS();
  SimpleDateFormat s1=new SimpleDateFormat(""String_Node_Str"");
  Date dobs=p.getBirthdate();
  String dob=s1.format(dobs);
  dateOfBirth.setValue(dob);
  cdapatient.setBirthTime(dateOfBirth);
  CE codes=DatatypesFactory.eINSTANCE.createCE();
  codes.setCode(""String_Node_Str"");
  cdapatient.setMaritalStatusCode(codes);
  CE codes1=DatatypesFactory.eINSTANCE.createCE();
  codes1.setCode(""String_Node_Str"");
  cdapatient.setEthnicGroupCode(codes1);
  Organization providerOrganization=CDAFactory.eINSTANCE.createOrganization();
  AD providerOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  providerOrganizationAddress.addCounty(""String_Node_Str"");
  providerOrganization.getIds().add(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),null));
  providerOrganization.getAddrs().add(providerOrganizationAddress);
  ON organizationName=DatatypesFactory.eINSTANCE.createON();
  organizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  providerOrganization.getNames().add(organizationName);
  TEL providerOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  providerOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  providerOrganization.getTelecoms().add(providerOrganizationTelecon);
  patientRole.setProviderOrganization(providerOrganization);
  doc.addPatientRole(patientRole);
  Author author=CDAFactory.eINSTANCE.createAuthor();
  author.setTime(CDAHelper.buildEffectiveTime(new Date()));
  AssignedAuthor assignedAuthor=CDAFactory.eINSTANCE.createAssignedAuthor();
  II authorId=DatatypesFactory.eINSTANCE.createII();
  authorId.setRoot(Context.getAdministrationService().getImplementationId().getImplementationId());
  assignedAuthor.getIds().add(authorId);
  AD assignedAuthorAddress=DatatypesFactory.eINSTANCE.createAD();
  assignedAuthorAddress.addCountry(""String_Node_Str"");
  TEL assignedAuthorTelecon=DatatypesFactory.eINSTANCE.createTEL();
  assignedAuthorTelecon.setNullFlavor(NullFlavor.UNK);
  assignedAuthor.getAddrs().add(assignedAuthorAddress);
  assignedAuthor.getTelecoms().add(assignedAuthorTelecon);
  Person assignedPerson=CDAFactory.eINSTANCE.createPerson();
  PN assignedPersonName=DatatypesFactory.eINSTANCE.createPN();
  assignedPersonName.addPrefix(""String_Node_Str"");
  assignedPersonName.addGiven(""String_Node_Str"");
  assignedPersonName.addFamily(""String_Node_Str"");
  assignedPerson.getNames().add(assignedPersonName);
  assignedAuthor.setAssignedPerson(assignedPerson);
  Organization representedOrganization=CDAFactory.eINSTANCE.createOrganization();
  representedOrganization.getIds().add(CDAHelper.buildID(""String_Node_Str"",null));
  ON representedOrganizationName=DatatypesFactory.eINSTANCE.createON();
  representedOrganizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  representedOrganization.getNames().add(representedOrganizationName);
  AD representedOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  representedOrganizationAddress.addCounty(""String_Node_Str"");
  representedOrganization.getAddrs().add(representedOrganizationAddress);
  TEL representedOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  representedOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  representedOrganization.getTelecoms().add(representedOrganizationTelecon);
  assignedAuthor.setRepresentedOrganization(representedOrganization);
  AuthoringDevice authoringDevice=CDAFactory.eINSTANCE.createAuthoringDevice();
  SC authoringDeviceName=DatatypesFactory.eINSTANCE.createSC();
  authoringDeviceName.addText(Context.getAdministrationService().getGlobalProperty(""String_Node_Str""));
  authoringDevice.setSoftwareName(authoringDeviceName);
  assignedAuthor.setAssignedAuthoringDevice(authoringDevice);
  author.setAssignedAuthor(assignedAuthor);
  doc.getAuthors().add(author);
  Custodian custodian=CDAFactory.eINSTANCE.createCustodian();
  AssignedCustodian assignedCustodian=CDAFactory.eINSTANCE.createAssignedCustodian();
  CustodianOrganization custodianOrganization=CDAFactory.eINSTANCE.createCustodianOrganization();
  AD custodianOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  II custodianId=DatatypesFactory.eINSTANCE.createII();
  custodianId.setRoot(""String_Node_Str"");
  custodianOrganization.getIds().add(custodianId);
  custodianOrganizationAddress.addCountry(""String_Node_Str"");
  custodianOrganization.setAddr(custodianOrganizationAddress);
  ON custodianOrganizationName=DatatypesFactory.eINSTANCE.createON();
  custodianOrganizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  custodianOrganization.setName(custodianOrganizationName);
  TEL custodianOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  custodianOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  custodianOrganization.setTelecom(custodianOrganizationTelecon);
  assignedCustodian.setRepresentedCustodianOrganization(custodianOrganization);
  custodian.setAssignedCustodian(assignedCustodian);
  doc.setCustodian(custodian);
  List<Relationship> relationShips=Context.getPersonService().getRelationshipsByPerson(p);
  List<Participant1> participantList=new ArrayList<Participant1>(relationShips.size());
  System.out.print(participantList);
  for (int i=0; i < relationShips.size(); i++) {
    Participant1 e=CDAFactory.eINSTANCE.createParticipant1();
    e.setTypeCode(ParticipationType.IND);
    II pid1=DatatypesFactory.eINSTANCE.createII();
    pid1.setRoot(""String_Node_Str"");
    II pid2=DatatypesFactory.eINSTANCE.createII();
    pid2.setRoot(""String_Node_Str"");
    e.getTemplateIds().add(pid1);
    e.getTemplateIds().add(pid2);
    IVL_TS time=DatatypesFactory.eINSTANCE.createIVL_TS();
    time.setHigh(time.getHigh());
    time.setLow(time.getLow());
    e.setTime(time);
    Relationship relationship=relationShips.get(i);
    AssociatedEntity patientRelationShip=CDAFactory.eINSTANCE.createAssociatedEntity();
    patientRelationShip.setClassCode(RoleClassAssociative.PRS);
    CE relationShipCode=DatatypesFactory.eINSTANCE.createCE();
    relationShipCode.setCodeSystemName(""String_Node_Str"");
    relationShipCode.setCodeSystem(""String_Node_Str"");
    Person associatedPerson=CDAFactory.eINSTANCE.createPerson();
    PN associatedPersonName=DatatypesFactory.eINSTANCE.createPN();
    Iterator<PersonAddress> patientAddressIterator=null;
    TEL associatedPersonTelecon=DatatypesFactory.eINSTANCE.createTEL();
    associatedPersonTelecon.setNullFlavor(NullFlavor.UNK);
switch (relationship.getRelationshipType().getId()) {
case 1:
      relationShipCode.setDisplayName(""String_Node_Str"");
    associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
  associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
break;
case 2:
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonA().getAddresses().iterator();
break;
case 3:
if (p.getId() == relationship.getPersonA().getId()) {
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonB().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonB().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
 else {
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonA().getAddresses().iterator();
}
break;
case 4:
if (p.getId() == relationship.getPersonA().getId()) {
if (relationship.getPersonB().getGender().equalsIgnoreCase(""String_Node_Str"")) relationShipCode.setDisplayName(""String_Node_Str"");
 else relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonB().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonB().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
 else {
if (relationship.getPersonA().getGender().equalsIgnoreCase(""String_Node_Str"")) relationShipCode.setDisplayName(""String_Node_Str"");
 else relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
break;
}
patientRelationShip.setCode(relationShipCode);
AD associatedPersonAddress=DatatypesFactory.eINSTANCE.createAD();
if (patientAddressIterator.hasNext()) {
PersonAddress padd=patientAddressIterator.next();
associatedPersonAddress.addStreetAddressLine(padd.getAddress1() + padd.getAddress2());
}
patientRelationShip.getAddrs().add(associatedPersonAddress);
patientRelationShip.getTelecoms().add(associatedPersonTelecon);
associatedPerson.getNames().add(associatedPersonName);
patientRelationShip.setAssociatedPerson(associatedPerson);
e.setAssociatedEntity(patientRelationShip);
participantList.add(e);
}
doc.getParticipants().addAll(participantList);
DocumentationOf dof=CDAFactory.eINSTANCE.createDocumentationOf();
ServiceEvent serviceEvent=CDAFactory.eINSTANCE.createServiceEvent();
serviceEvent.setClassCode(ActClassRoot.PCPR);
serviceEvent.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(new Date(),new Date()));
Performer1 performer=CDAFactory.eINSTANCE.createPerformer1();
performer.setTypeCode(x_ServiceEventPerformer.PPRF);
performer.setFunctionCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,null));
performer.setTime(CDAHelper.buildEffectiveTimeinIVL(new Date(),new Date()));
AssignedEntity assignedEntity=CDAFactory.eINSTANCE.createAssignedEntity();
II assignedEntityId=DatatypesFactory.eINSTANCE.createII();
assignedEntityId.setRoot(Context.getAdministrationService().getImplementationId().getImplementationId());
assignedEntity.getIds().add(assignedEntityId);
AD assignedPersonAddress=DatatypesFactory.eINSTANCE.createAD();
assignedPersonAddress.addCountry(""String_Node_Str"");
TEL assignedPersonTelecon=DatatypesFactory.eINSTANCE.createTEL();
assignedPersonTelecon.setNullFlavor(NullFlavor.UNK);
assignedEntity.setAssignedPerson(assignedPerson);
assignedEntity.getAddrs().add(assignedPersonAddress);
assignedEntity.getTelecoms().add(assignedPersonTelecon);
assignedEntity.getRepresentedOrganizations().add(representedOrganization);
performer.setAssignedEntity(assignedEntity);
serviceEvent.getPerformers().add(performer);
dof.setServiceEvent(serviceEvent);
doc.getDocumentationOfs().add(dof);
return doc;
}","public ClinicalDocument buildHeader(ClinicalDocument doc,BaseCdaTypeHandler bh,Patient p){
  InfrastructureRootTypeId typeId=CDAFactory.eINSTANCE.createInfrastructureRootTypeId();
  typeId.setExtension(""String_Node_Str"");
  typeId.setRoot(""String_Node_Str"");
  doc.setTypeId(typeId);
  doc.getTemplateIds().clear();
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",""String_Node_Str"",null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  if (bh.getParentTemplateId() != null)   doc.getTemplateIds().add(CDAHelper.buildTemplateID(bh.getParentTemplateId(),null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(bh.getTemplateid(),null,null));
  doc.setId(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),bh.documentShortName));
  doc.setCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str""));
  doc.setTitle(CDAHelper.buildTitle(bh.getDocumentFullName()));
  Date d=new Date();
  doc.setEffectiveTime(CDAHelper.buildEffectiveTime(d));
  CE confidentialityCode=DatatypesFactory.eINSTANCE.createCE();
  confidentialityCode.setCode(""String_Node_Str"");
  confidentialityCode.setCodeSystem(""String_Node_Str"");
  doc.setConfidentialityCode(confidentialityCode);
  CS languageCode=DatatypesFactory.eINSTANCE.createCS();
  languageCode.setCode(""String_Node_Str"");
  doc.setLanguageCode(languageCode);
  CS realmcode=DatatypesFactory.eINSTANCE.createCS(""String_Node_Str"");
  doc.getRealmCodes().add(realmcode);
  PatientRole patientRole=CDAFactory.eINSTANCE.createPatientRole();
  patientRole.getIds().add(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),p.getPatientIdentifier().getIdentifier()));
  Set<PersonAddress> addresses=p.getAddresses();
  AD patientAddress=DatatypesFactory.eINSTANCE.createAD();
  patientAddress=buildAddresses(patientAddress,addresses);
  patientRole.getAddrs().add(patientAddress);
  TEL patientTelecom=DatatypesFactory.eINSTANCE.createTEL();
  patientTelecom.setNullFlavor(NullFlavor.UNK);
  patientRole.getTelecoms().add(patientTelecom);
  org.openhealthtools.mdht.uml.cda.Patient cdapatient=CDAFactory.eINSTANCE.createPatient();
  patientRole.setPatient(cdapatient);
  PN name=DatatypesFactory.eINSTANCE.createPN();
  if (p.getPersonName().getFamilyNamePrefix() != null) {
    name.addPrefix(p.getPersonName().getFamilyNamePrefix());
  }
  name.addGiven(p.getPersonName().getGivenName());
  name.addFamily(p.getPersonName().getFamilyName());
  if (p.getPersonName().getFamilyNameSuffix() != null) {
    name.addSuffix(p.getPersonName().getFamilyNameSuffix());
  }
  cdapatient.getNames().add(name);
  CE gender=DatatypesFactory.eINSTANCE.createCE();
  gender.setCode(p.getGender());
  gender.setCodeSystem(""String_Node_Str"");
  cdapatient.setAdministrativeGenderCode(gender);
  TS dateOfBirth=DatatypesFactory.eINSTANCE.createTS();
  SimpleDateFormat s1=new SimpleDateFormat(""String_Node_Str"");
  Date dobs=p.getBirthdate();
  String dob=s1.format(dobs);
  dateOfBirth.setValue(dob);
  cdapatient.setBirthTime(dateOfBirth);
  CE codes=DatatypesFactory.eINSTANCE.createCE();
  codes.setCode(""String_Node_Str"");
  cdapatient.setMaritalStatusCode(codes);
  CE codes1=DatatypesFactory.eINSTANCE.createCE();
  codes1.setCode(""String_Node_Str"");
  cdapatient.setEthnicGroupCode(codes1);
  Organization providerOrganization=CDAFactory.eINSTANCE.createOrganization();
  AD providerOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  providerOrganizationAddress.addCounty(""String_Node_Str"");
  providerOrganization.getIds().add(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),null));
  providerOrganization.getAddrs().add(providerOrganizationAddress);
  ON organizationName=DatatypesFactory.eINSTANCE.createON();
  organizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  providerOrganization.getNames().add(organizationName);
  TEL providerOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  providerOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  providerOrganization.getTelecoms().add(providerOrganizationTelecon);
  patientRole.setProviderOrganization(providerOrganization);
  doc.addPatientRole(patientRole);
  Author author=CDAFactory.eINSTANCE.createAuthor();
  author.setTime(CDAHelper.buildEffectiveTime(new Date()));
  AssignedAuthor assignedAuthor=CDAFactory.eINSTANCE.createAssignedAuthor();
  II authorId=DatatypesFactory.eINSTANCE.createII();
  authorId.setRoot(Context.getAdministrationService().getImplementationId().getImplementationId());
  assignedAuthor.getIds().add(authorId);
  AD assignedAuthorAddress=DatatypesFactory.eINSTANCE.createAD();
  assignedAuthorAddress.addCountry(""String_Node_Str"");
  TEL assignedAuthorTelecon=DatatypesFactory.eINSTANCE.createTEL();
  assignedAuthorTelecon.setNullFlavor(NullFlavor.UNK);
  assignedAuthor.getAddrs().add(assignedAuthorAddress);
  assignedAuthor.getTelecoms().add(assignedAuthorTelecon);
  Person assignedPerson=CDAFactory.eINSTANCE.createPerson();
  PN assignedPersonName=DatatypesFactory.eINSTANCE.createPN();
  assignedPersonName.addPrefix(""String_Node_Str"");
  assignedPersonName.addGiven(""String_Node_Str"");
  assignedPersonName.addFamily(""String_Node_Str"");
  assignedPerson.getNames().add(assignedPersonName);
  assignedAuthor.setAssignedPerson(assignedPerson);
  Organization representedOrganization=CDAFactory.eINSTANCE.createOrganization();
  representedOrganization.getIds().add(CDAHelper.buildID(""String_Node_Str"",null));
  ON representedOrganizationName=DatatypesFactory.eINSTANCE.createON();
  representedOrganizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  representedOrganization.getNames().add(representedOrganizationName);
  AD representedOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  representedOrganizationAddress.addCounty(""String_Node_Str"");
  representedOrganization.getAddrs().add(representedOrganizationAddress);
  TEL representedOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  representedOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  representedOrganization.getTelecoms().add(representedOrganizationTelecon);
  assignedAuthor.setRepresentedOrganization(representedOrganization);
  AuthoringDevice authoringDevice=CDAFactory.eINSTANCE.createAuthoringDevice();
  SC authoringDeviceName=DatatypesFactory.eINSTANCE.createSC();
  authoringDeviceName.addText(Context.getAdministrationService().getGlobalProperty(""String_Node_Str""));
  authoringDevice.setSoftwareName(authoringDeviceName);
  assignedAuthor.setAssignedAuthoringDevice(authoringDevice);
  author.setAssignedAuthor(assignedAuthor);
  doc.getAuthors().add(author);
  Custodian custodian=CDAFactory.eINSTANCE.createCustodian();
  AssignedCustodian assignedCustodian=CDAFactory.eINSTANCE.createAssignedCustodian();
  CustodianOrganization custodianOrganization=CDAFactory.eINSTANCE.createCustodianOrganization();
  AD custodianOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  II custodianId=DatatypesFactory.eINSTANCE.createII();
  custodianId.setRoot(""String_Node_Str"");
  custodianOrganization.getIds().add(custodianId);
  custodianOrganizationAddress.addCountry(""String_Node_Str"");
  custodianOrganization.setAddr(custodianOrganizationAddress);
  ON custodianOrganizationName=DatatypesFactory.eINSTANCE.createON();
  custodianOrganizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  custodianOrganization.setName(custodianOrganizationName);
  TEL custodianOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  custodianOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  custodianOrganization.setTelecom(custodianOrganizationTelecon);
  assignedCustodian.setRepresentedCustodianOrganization(custodianOrganization);
  custodian.setAssignedCustodian(assignedCustodian);
  doc.setCustodian(custodian);
  List<Relationship> relationShips=Context.getPersonService().getRelationshipsByPerson(p);
  List<Participant1> participantList=new ArrayList<Participant1>(relationShips.size());
  System.out.print(participantList);
  for (int i=0; i < relationShips.size(); i++) {
    Participant1 e=CDAFactory.eINSTANCE.createParticipant1();
    e.setTypeCode(ParticipationType.IND);
    II pid1=DatatypesFactory.eINSTANCE.createII();
    pid1.setRoot(""String_Node_Str"");
    e.getTemplateIds().add(pid1);
    IVL_TS time=DatatypesFactory.eINSTANCE.createIVL_TS();
    time.setHigh(time.getHigh());
    time.setLow(time.getLow());
    e.setTime(time);
    Relationship relationship=relationShips.get(i);
    AssociatedEntity patientRelationShip=CDAFactory.eINSTANCE.createAssociatedEntity();
    patientRelationShip.setClassCode(RoleClassAssociative.PRS);
    CE relationShipCode=DatatypesFactory.eINSTANCE.createCE();
    relationShipCode.setCodeSystemName(""String_Node_Str"");
    relationShipCode.setCodeSystem(""String_Node_Str"");
    Person associatedPerson=CDAFactory.eINSTANCE.createPerson();
    PN associatedPersonName=DatatypesFactory.eINSTANCE.createPN();
    Iterator<PersonAddress> patientAddressIterator=null;
    TEL associatedPersonTelecon=DatatypesFactory.eINSTANCE.createTEL();
    associatedPersonTelecon.setNullFlavor(NullFlavor.UNK);
switch (relationship.getRelationshipType().getId()) {
case 1:
      relationShipCode.setDisplayName(""String_Node_Str"");
    associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
  associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
relationShipCode.setCode(""String_Node_Str"");
break;
case 2:
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonA().getAddresses().iterator();
relationShipCode.setCode(""String_Node_Str"");
break;
case 3:
if (p.getId() == relationship.getPersonA().getId()) {
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonB().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonB().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
relationShipCode.setCode(""String_Node_Str"");
}
 else {
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonA().getAddresses().iterator();
relationShipCode.setCode(""String_Node_Str"");
}
break;
case 4:
if (p.getId() == relationship.getPersonA().getId()) {
if (relationship.getPersonB().getGender().equalsIgnoreCase(""String_Node_Str"")) {
relationShipCode.setDisplayName(""String_Node_Str"");
relationShipCode.setCode(""String_Node_Str"");
}
 else {
relationShipCode.setDisplayName(""String_Node_Str"");
relationShipCode.setCode(""String_Node_Str"");
}
associatedPersonName.addFamily(relationship.getPersonB().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonB().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
 else {
if (relationship.getPersonA().getGender().equalsIgnoreCase(""String_Node_Str"")) {
relationShipCode.setDisplayName(""String_Node_Str"");
relationShipCode.setCode(""String_Node_Str"");
}
 else {
relationShipCode.setDisplayName(""String_Node_Str"");
relationShipCode.setCode(""String_Node_Str"");
}
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
break;
}
patientRelationShip.setCode(relationShipCode);
AD associatedPersonAddress=DatatypesFactory.eINSTANCE.createAD();
if (patientAddressIterator.hasNext()) {
PersonAddress padd=patientAddressIterator.next();
associatedPersonAddress.addStreetAddressLine(padd.getAddress1() + padd.getAddress2());
}
patientRelationShip.getAddrs().add(associatedPersonAddress);
patientRelationShip.getTelecoms().add(associatedPersonTelecon);
associatedPerson.getNames().add(associatedPersonName);
patientRelationShip.setAssociatedPerson(associatedPerson);
e.setAssociatedEntity(patientRelationShip);
participantList.add(e);
}
doc.getParticipants().addAll(participantList);
DocumentationOf dof=CDAFactory.eINSTANCE.createDocumentationOf();
ServiceEvent serviceEvent=CDAFactory.eINSTANCE.createServiceEvent();
serviceEvent.setClassCode(ActClassRoot.PCPR);
serviceEvent.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(new Date(),new Date()));
Performer1 performer=CDAFactory.eINSTANCE.createPerformer1();
performer.setTypeCode(x_ServiceEventPerformer.PPRF);
performer.setFunctionCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,null));
performer.setTime(CDAHelper.buildEffectiveTimeinIVL(new Date(),new Date()));
AssignedEntity assignedEntity=CDAFactory.eINSTANCE.createAssignedEntity();
II assignedEntityId=DatatypesFactory.eINSTANCE.createII();
assignedEntityId.setRoot(Context.getAdministrationService().getImplementationId().getImplementationId());
assignedEntity.getIds().add(assignedEntityId);
AD assignedPersonAddress=DatatypesFactory.eINSTANCE.createAD();
assignedPersonAddress.addCountry(""String_Node_Str"");
TEL assignedPersonTelecon=DatatypesFactory.eINSTANCE.createTEL();
assignedPersonTelecon.setNullFlavor(NullFlavor.UNK);
assignedEntity.setAssignedPerson(assignedPerson);
assignedEntity.getAddrs().add(assignedPersonAddress);
assignedEntity.getTelecoms().add(assignedPersonTelecon);
assignedEntity.getRepresentedOrganizations().add(representedOrganization);
performer.setAssignedEntity(assignedEntity);
serviceEvent.getPerformers().add(performer);
dof.setServiceEvent(serviceEvent);
doc.getDocumentationOfs().add(dof);
return doc;
}",0.971668864260005
144239,"public ClinicalDocument buildAPHPMessage(Patient patient,BaseCdaTypeHandler handler){
  ClinicalDocument doc=CDAFactory.eINSTANCE.createClinicalDocument();
  Section section=CDAFactory.eINSTANCE.createSection();
  CdaHeaderBuilder header=new CdaHeaderBuilder();
  doc=header.buildHeader(doc,handler,patient);
  section=HistoryOfPresentIllnessSection.buildHistoryOfPresentIllnessSection(patient);
  doc.addSection(section);
  section=ChiefComplaintSection.buildChiefComplaintSection(patient);
  doc.addSection(section);
  section=SocialHistorySection.buildSocialHistorySection(patient);
  doc.addSection(section);
  section=HistoryOfInfectionSection.buildHistoryOfInfectionSection();
  doc.addSection(section);
  section=HistoryOfPastIllnessSection.buildHistoryOfPastIllnessSection();
  doc.addSection(section);
  section=PregnancyHistorySection.buildPregnancyHistorySection();
  doc.addSection(section);
  section=CodedFamilyMedicalHistorySection.buildCodedFamilyMedicalHistorySection();
  doc.addSection(section);
  section=ReviewOfSystemsSection.buildReviewOfSystemsSection();
  doc.addSection(section);
  section=PhysicalExamSection.buildPhysicalExamSection();
  doc.addSection(section);
  return doc;
}","public ClinicalDocument buildAPHPMessage(Patient patient,BaseCdaTypeHandler handler){
  ClinicalDocument doc=CDAFactory.eINSTANCE.createClinicalDocument();
  Section section=CDAFactory.eINSTANCE.createSection();
  CdaHeaderBuilder header=new CdaHeaderBuilder();
  doc=header.buildHeader(doc,handler,patient);
  section=HistoryOfPresentIllnessSection.buildHistoryOfPresentIllnessSection(patient);
  doc.addSection(section);
  section=ChiefComplaintSection.buildChiefComplaintSection(patient);
  doc.addSection(section);
  section=SocialHistorySection.buildSocialHistorySection(patient);
  doc.addSection(section);
  section=ReviewOfSystemsSection.buildReviewOfSystemsSection(patient);
  doc.addSection(section);
  return doc;
}",0.7443064182194618
144240,"public static Section buildChiefComplaintSection(Patient patient){
  Section section=CDAFactory.eINSTANCE.createSection();
  ChiefComplaintSection ccs=new ChiefComplaintSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  Map<String,Date> latestObsdate=new HashMap<String,Date>();
  Concept concept=service.getConceptByMapping(""String_Node_Str"",""String_Node_Str"");
  List<Obs> observationList=new ArrayList<Obs>();
  observationList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
  String value=""String_Node_Str"";
  for (  Obs obs : observationList) {
    int type=obs.getConcept().getDatatype().getId();
    if (latestObsdate.isEmpty()) {
      latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
      value=CDAHelper.getDatatypesValue(type,obs);
    }
 else {
      Date date=latestObsdate.get(""String_Node_Str"");
      if (date.before(obs.getObsDatetime())) {
        latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
        value=CDAHelper.getDatatypesValue(type,obs);
      }
    }
    System.out.println(""String_Node_Str"");
    System.out.println(latestObsdate);
  }
  builder.append(value);
  builder.append(""String_Node_Str"");
  text.addText(builder.toString());
  section.setText(text);
  return section;
}","public static Section buildChiefComplaintSection(Patient patient){
  Section section=CDAFactory.eINSTANCE.createSection();
  ChiefComplaintSection ccs=new ChiefComplaintSection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  builder.append(""String_Node_Str"");
  ConceptService service=Context.getConceptService();
  Map<String,Date> latestObsdate=new HashMap<String,Date>();
  Concept concept=service.getConceptByMapping(""String_Node_Str"",""String_Node_Str"");
  List<Obs> observationList=new ArrayList<Obs>();
  observationList.addAll(Context.getObsService().getObservationsByPersonAndConcept(patient,concept));
  String value=""String_Node_Str"";
  for (  Obs obs : observationList) {
    int type=obs.getConcept().getDatatype().getId();
    if (latestObsdate.isEmpty()) {
      latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
      value=CDAHelper.getDatatypesValue(type,obs);
    }
 else {
      Date date=latestObsdate.get(""String_Node_Str"");
      if (date.before(obs.getObsDatetime())) {
        latestObsdate.put(""String_Node_Str"",obs.getObsDatetime());
        value=CDAHelper.getDatatypesValue(type,obs);
      }
    }
  }
  builder.append(value);
  builder.append(""String_Node_Str"");
  text.addText(builder.toString());
  section.setText(text);
  return section;
}",0.9036505086774388
144241,"public static Section buildSocialHistorySection(Patient p){
  List<Concept> socialHistoryConceptsList=new ArrayList<Concept>();
  Section section=CDAFactory.eINSTANCE.createSection();
  SocialHistorySection ccs=new SocialHistorySection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getParentTemplateId(),null,null));
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  String delimeter=""String_Node_Str"";
  builder.append(delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  ConceptService service=Context.getConceptService();
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  System.out.println(socialHistoryConceptsList);
  List<Obs> obsList=new ArrayList<Obs>();
  for (  Concept concept : socialHistoryConceptsList) {
    obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(p,concept));
  }
  for (  Obs obs : obsList) {
    System.out.println(obs);
    System.out.println(obs.getObsDatetime());
    System.out.println(CDAHelper.getDateFormat().format(obs.getObsDatetime()));
    builder.append(""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + obs.getId() + ""String_Node_Str""+ obs.getConcept().getName()+ ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"");
    int type=obs.getConcept().getDatatype().getId();
    String value=CDAHelper.getDatatypesValue(type,obs);
    builder.append(value + ""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + CDAHelper.getDateFormat().format(obs.getObsDatetime()) + ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"" + delimeter);
    Entry entry=CDAFactory.eINSTANCE.createEntry();
    entry.setTypeCode(x_ActRelationshipEntry.DRIV);
    Observation observation=CDAFactory.eINSTANCE.createObservation();
    observation.setClassCode(ActClassObservation.OBS);
    observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
    observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.getIds().add(CDAHelper.buildID(obs.getUuid(),null));
    CD ce=DatatypesFactory.eINSTANCE.createCD();
    ce.setCode(obs.getConcept().toString());
    ce.setCodeSystem(""String_Node_Str"");
    ce.setDisplayName(obs.getConcept().getName().toString());
    ce.setOriginalText(CDAHelper.buildEDText(""String_Node_Str"" + obs.getId()));
    observation.setCode(ce);
    CS statusCode=DatatypesFactory.eINSTANCE.createCS();
    statusCode.setCode(""String_Node_Str"");
    observation.setStatusCode(statusCode);
    observation.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(obs.getObsDatetime(),null));
    ST value1=CDAHelper.buildTitle(value);
    observation.getValues().add(value1);
    entry.setObservation(observation);
    section.getEntries().add(entry);
  }
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  text.addText(builder.toString());
  section.setText(text);
  return section;
}","public static Section buildSocialHistorySection(Patient p){
  List<Concept> socialHistoryConceptsList=new ArrayList<Concept>();
  Section section=CDAFactory.eINSTANCE.createSection();
  SocialHistorySection ccs=new SocialHistorySection();
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getParentTemplateId(),null,null));
  section.getTemplateIds().add(CDAHelper.buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(CDAHelper.buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(CDAHelper.buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  StringBuilder builder=new StringBuilder();
  String delimeter=""String_Node_Str"";
  builder.append(delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  ConceptService service=Context.getConceptService();
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  socialHistoryConceptsList.add(service.getConceptByMapping(""String_Node_Str"",""String_Node_Str""));
  List<Obs> obsList=new ArrayList<Obs>();
  for (  Concept concept : socialHistoryConceptsList) {
    obsList.addAll(Context.getObsService().getObservationsByPersonAndConcept(p,concept));
  }
  for (  Obs obs : obsList) {
    builder.append(""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + obs.getId() + ""String_Node_Str""+ obs.getConcept().getName()+ ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"");
    int type=obs.getConcept().getDatatype().getId();
    String value=CDAHelper.getDatatypesValue(type,obs);
    builder.append(value + ""String_Node_Str"" + delimeter);
    builder.append(""String_Node_Str"" + CDAHelper.getDateFormat().format(obs.getObsDatetime()) + ""String_Node_Str""+ delimeter);
    builder.append(""String_Node_Str"" + delimeter);
    Entry entry=CDAFactory.eINSTANCE.createEntry();
    entry.setTypeCode(x_ActRelationshipEntry.DRIV);
    Observation observation=CDAFactory.eINSTANCE.createObservation();
    observation.setClassCode(ActClassObservation.OBS);
    observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
    observation.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
    observation.getIds().add(CDAHelper.buildID(obs.getUuid(),null));
    CD ce=DatatypesFactory.eINSTANCE.createCD();
    ce.setCode(obs.getConcept().toString());
    ce.setCodeSystem(""String_Node_Str"");
    ce.setDisplayName(obs.getConcept().getName().toString());
    ce.setOriginalText(CDAHelper.buildEDText(""String_Node_Str"" + obs.getId()));
    observation.setCode(ce);
    CS statusCode=DatatypesFactory.eINSTANCE.createCS();
    statusCode.setCode(""String_Node_Str"");
    observation.setStatusCode(statusCode);
    observation.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(obs.getObsDatetime(),null));
    ST value1=CDAHelper.buildTitle(value);
    observation.getValues().add(value1);
    entry.setObservation(observation);
    section.getEntries().add(entry);
  }
  builder.append(""String_Node_Str"" + delimeter);
  builder.append(""String_Node_Str"" + delimeter);
  text.addText(builder.toString());
  section.setText(text);
  return section;
}",0.9739596630074036
144242,"public ClinicalDocument buildHeader(ClinicalDocument doc,BaseCdaTypeHandler bh,Patient p){
  InfrastructureRootTypeId typeId=CDAFactory.eINSTANCE.createInfrastructureRootTypeId();
  typeId.setExtension(""String_Node_Str"");
  typeId.setRoot(""String_Node_Str"");
  doc.setTypeId(typeId);
  doc.getTemplateIds().clear();
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",""String_Node_Str"",null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(bh.templateid,null,null));
  doc.setId(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),bh.documentShortName));
  doc.setCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str""));
  doc.setTitle(CDAHelper.buildTitle(bh.documentFullName));
  Date d=new Date();
  doc.setEffectiveTime(CDAHelper.buildEffectiveTime(d));
  CE confidentialityCode=DatatypesFactory.eINSTANCE.createCE();
  confidentialityCode.setCode(""String_Node_Str"");
  confidentialityCode.setCodeSystem(""String_Node_Str"");
  doc.setConfidentialityCode(confidentialityCode);
  CS languageCode=DatatypesFactory.eINSTANCE.createCS();
  languageCode.setCode(""String_Node_Str"");
  doc.setLanguageCode(languageCode);
  CS realmcode=DatatypesFactory.eINSTANCE.createCS(""String_Node_Str"");
  doc.getRealmCodes().add(realmcode);
  PatientRole patientRole=CDAFactory.eINSTANCE.createPatientRole();
  patientRole.getIds().add(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),p.getPatientIdentifier().getIdentifier()));
  Set<PersonAddress> addresses=p.getAddresses();
  AD patientAddress=DatatypesFactory.eINSTANCE.createAD();
  patientAddress=buildAddresses(patientAddress,addresses);
  patientRole.getAddrs().add(patientAddress);
  TEL patientTelecom=DatatypesFactory.eINSTANCE.createTEL();
  patientTelecom.setNullFlavor(NullFlavor.UNK);
  patientRole.getTelecoms().add(patientTelecom);
  org.openhealthtools.mdht.uml.cda.Patient cdapatient=CDAFactory.eINSTANCE.createPatient();
  patientRole.setPatient(cdapatient);
  PN name=DatatypesFactory.eINSTANCE.createPN();
  if (p.getPersonName().getFamilyNamePrefix() != null) {
    name.addPrefix(p.getPersonName().getFamilyNamePrefix());
  }
  name.addGiven(p.getPersonName().getGivenName());
  name.addFamily(p.getPersonName().getFamilyName());
  if (p.getPersonName().getFamilyNameSuffix() != null) {
    name.addSuffix(p.getPersonName().getFamilyNameSuffix());
  }
  cdapatient.getNames().add(name);
  CE gender=DatatypesFactory.eINSTANCE.createCE();
  gender.setCode(p.getGender());
  gender.setCodeSystem(""String_Node_Str"");
  cdapatient.setAdministrativeGenderCode(gender);
  TS dateOfBirth=DatatypesFactory.eINSTANCE.createTS();
  SimpleDateFormat s1=new SimpleDateFormat(""String_Node_Str"");
  Date dobs=p.getBirthdate();
  String dob=s1.format(dobs);
  dateOfBirth.setValue(dob);
  cdapatient.setBirthTime(dateOfBirth);
  CE codes=DatatypesFactory.eINSTANCE.createCE();
  codes.setCode(""String_Node_Str"");
  cdapatient.setMaritalStatusCode(codes);
  CE codes1=DatatypesFactory.eINSTANCE.createCE();
  codes1.setCode(""String_Node_Str"");
  cdapatient.setEthnicGroupCode(codes1);
  Organization providerOrganization=CDAFactory.eINSTANCE.createOrganization();
  AD providerOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  providerOrganizationAddress.addCounty(""String_Node_Str"");
  providerOrganization.getIds().add(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),null));
  providerOrganization.getAddrs().add(providerOrganizationAddress);
  ON organizationName=DatatypesFactory.eINSTANCE.createON();
  organizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  providerOrganization.getNames().add(organizationName);
  TEL providerOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  providerOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  providerOrganization.getTelecoms().add(providerOrganizationTelecon);
  patientRole.setProviderOrganization(providerOrganization);
  doc.addPatientRole(patientRole);
  Author author=CDAFactory.eINSTANCE.createAuthor();
  author.setTime(CDAHelper.buildEffectiveTime(new Date()));
  AssignedAuthor assignedAuthor=CDAFactory.eINSTANCE.createAssignedAuthor();
  II authorId=DatatypesFactory.eINSTANCE.createII();
  authorId.setRoot(Context.getAdministrationService().getImplementationId().getImplementationId());
  assignedAuthor.getIds().add(authorId);
  AD assignedAuthorAddress=DatatypesFactory.eINSTANCE.createAD();
  assignedAuthorAddress.addCountry(""String_Node_Str"");
  TEL assignedAuthorTelecon=DatatypesFactory.eINSTANCE.createTEL();
  assignedAuthorTelecon.setNullFlavor(NullFlavor.UNK);
  assignedAuthor.getAddrs().add(assignedAuthorAddress);
  assignedAuthor.getTelecoms().add(assignedAuthorTelecon);
  Person assignedPerson=CDAFactory.eINSTANCE.createPerson();
  PN assignedPersonName=DatatypesFactory.eINSTANCE.createPN();
  assignedPersonName.addPrefix(""String_Node_Str"");
  assignedPersonName.addGiven(""String_Node_Str"");
  assignedPersonName.addFamily(""String_Node_Str"");
  assignedPerson.getNames().add(assignedPersonName);
  assignedAuthor.setAssignedPerson(assignedPerson);
  Organization representedOrganization=CDAFactory.eINSTANCE.createOrganization();
  representedOrganization.getIds().add(CDAHelper.buildID(""String_Node_Str"",null));
  ON representedOrganizationName=DatatypesFactory.eINSTANCE.createON();
  representedOrganizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  representedOrganization.getNames().add(representedOrganizationName);
  AD representedOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  representedOrganizationAddress.addCounty(""String_Node_Str"");
  representedOrganization.getAddrs().add(representedOrganizationAddress);
  TEL representedOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  representedOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  representedOrganization.getTelecoms().add(representedOrganizationTelecon);
  assignedAuthor.setRepresentedOrganization(representedOrganization);
  AuthoringDevice authoringDevice=CDAFactory.eINSTANCE.createAuthoringDevice();
  SC authoringDeviceName=DatatypesFactory.eINSTANCE.createSC();
  authoringDeviceName.addText(Context.getAdministrationService().getGlobalProperty(""String_Node_Str""));
  authoringDevice.setSoftwareName(authoringDeviceName);
  assignedAuthor.setAssignedAuthoringDevice(authoringDevice);
  author.setAssignedAuthor(assignedAuthor);
  doc.getAuthors().add(author);
  Custodian custodian=CDAFactory.eINSTANCE.createCustodian();
  AssignedCustodian assignedCustodian=CDAFactory.eINSTANCE.createAssignedCustodian();
  CustodianOrganization custodianOrganization=CDAFactory.eINSTANCE.createCustodianOrganization();
  AD custodianOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  II custodianId=DatatypesFactory.eINSTANCE.createII();
  custodianId.setRoot(""String_Node_Str"");
  custodianOrganization.getIds().add(custodianId);
  custodianOrganizationAddress.addCountry(""String_Node_Str"");
  custodianOrganization.setAddr(custodianOrganizationAddress);
  ON custodianOrganizationName=DatatypesFactory.eINSTANCE.createON();
  custodianOrganizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  custodianOrganization.setName(custodianOrganizationName);
  TEL custodianOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  custodianOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  custodianOrganization.setTelecom(custodianOrganizationTelecon);
  assignedCustodian.setRepresentedCustodianOrganization(custodianOrganization);
  custodian.setAssignedCustodian(assignedCustodian);
  doc.setCustodian(custodian);
  List<Relationship> relationShips=Context.getPersonService().getRelationshipsByPerson(p);
  System.out.println(relationShips);
  List<Participant1> participantList=new ArrayList<Participant1>(relationShips.size());
  System.out.print(participantList);
  for (int i=0; i < relationShips.size(); i++) {
    Participant1 e=CDAFactory.eINSTANCE.createParticipant1();
    e.setTypeCode(ParticipationType.IND);
    II pid1=DatatypesFactory.eINSTANCE.createII();
    pid1.setRoot(""String_Node_Str"");
    II pid2=DatatypesFactory.eINSTANCE.createII();
    pid2.setRoot(""String_Node_Str"");
    e.getTemplateIds().add(pid1);
    e.getTemplateIds().add(pid2);
    IVL_TS time=DatatypesFactory.eINSTANCE.createIVL_TS();
    time.setHigh(time.getHigh());
    time.setLow(time.getLow());
    e.setTime(time);
    Relationship relationship=relationShips.get(i);
    AssociatedEntity patientRelationShip=CDAFactory.eINSTANCE.createAssociatedEntity();
    patientRelationShip.setClassCode(RoleClassAssociative.PRS);
    CE relationShipCode=DatatypesFactory.eINSTANCE.createCE();
    relationShipCode.setCodeSystemName(""String_Node_Str"");
    relationShipCode.setCodeSystem(""String_Node_Str"");
    Person associatedPerson=CDAFactory.eINSTANCE.createPerson();
    PN associatedPersonName=DatatypesFactory.eINSTANCE.createPN();
    Iterator<PersonAddress> patientAddressIterator=null;
    TEL associatedPersonTelecon=DatatypesFactory.eINSTANCE.createTEL();
    associatedPersonTelecon.setNullFlavor(NullFlavor.UNK);
switch (relationship.getRelationshipType().getId()) {
case 1:
      relationShipCode.setDisplayName(""String_Node_Str"");
    associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
  associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
break;
case 2:
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonA().getAddresses().iterator();
break;
case 3:
if (p.getId() == relationship.getPersonA().getId()) {
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonB().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonB().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
 else {
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonA().getAddresses().iterator();
}
break;
case 4:
if (p.getId() == relationship.getPersonA().getId()) {
if (relationship.getPersonB().getGender().equalsIgnoreCase(""String_Node_Str"")) relationShipCode.setDisplayName(""String_Node_Str"");
 else relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonB().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonB().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
 else {
if (relationship.getPersonA().getGender().equalsIgnoreCase(""String_Node_Str"")) relationShipCode.setDisplayName(""String_Node_Str"");
 else relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
break;
}
patientRelationShip.setCode(relationShipCode);
AD associatedPersonAddress=DatatypesFactory.eINSTANCE.createAD();
if (patientAddressIterator.hasNext()) {
PersonAddress padd=patientAddressIterator.next();
associatedPersonAddress.addStreetAddressLine(padd.getAddress1() + padd.getAddress2());
}
patientRelationShip.getAddrs().add(associatedPersonAddress);
patientRelationShip.getTelecoms().add(associatedPersonTelecon);
associatedPerson.getNames().add(associatedPersonName);
patientRelationShip.setAssociatedPerson(associatedPerson);
e.setAssociatedEntity(patientRelationShip);
participantList.add(e);
}
doc.getParticipants().addAll(participantList);
DocumentationOf dof=CDAFactory.eINSTANCE.createDocumentationOf();
ServiceEvent serviceEvent=CDAFactory.eINSTANCE.createServiceEvent();
serviceEvent.setClassCode(ActClassRoot.PCPR);
serviceEvent.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(new Date(),new Date()));
Performer1 performer=CDAFactory.eINSTANCE.createPerformer1();
performer.setTypeCode(x_ServiceEventPerformer.PPRF);
performer.setFunctionCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,null));
performer.setTime(CDAHelper.buildEffectiveTimeinIVL(new Date(),new Date()));
AssignedEntity assignedEntity=CDAFactory.eINSTANCE.createAssignedEntity();
II assignedEntityId=DatatypesFactory.eINSTANCE.createII();
assignedEntityId.setRoot(Context.getAdministrationService().getImplementationId().getImplementationId());
assignedEntity.getIds().add(assignedEntityId);
AD assignedPersonAddress=DatatypesFactory.eINSTANCE.createAD();
assignedPersonAddress.addCountry(""String_Node_Str"");
TEL assignedPersonTelecon=DatatypesFactory.eINSTANCE.createTEL();
assignedPersonTelecon.setNullFlavor(NullFlavor.UNK);
assignedEntity.setAssignedPerson(assignedPerson);
assignedEntity.getAddrs().add(assignedPersonAddress);
assignedEntity.getTelecoms().add(assignedPersonTelecon);
assignedEntity.getRepresentedOrganizations().add(representedOrganization);
performer.setAssignedEntity(assignedEntity);
serviceEvent.getPerformers().add(performer);
dof.setServiceEvent(serviceEvent);
doc.getDocumentationOfs().add(dof);
return doc;
}","public ClinicalDocument buildHeader(ClinicalDocument doc,BaseCdaTypeHandler bh,Patient p){
  InfrastructureRootTypeId typeId=CDAFactory.eINSTANCE.createInfrastructureRootTypeId();
  typeId.setExtension(""String_Node_Str"");
  typeId.setRoot(""String_Node_Str"");
  doc.setTypeId(typeId);
  doc.getTemplateIds().clear();
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",""String_Node_Str"",null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(""String_Node_Str"",null,null));
  doc.getTemplateIds().add(CDAHelper.buildTemplateID(bh.templateid,null,null));
  doc.setId(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),bh.documentShortName));
  doc.setCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str""));
  doc.setTitle(CDAHelper.buildTitle(bh.documentFullName));
  Date d=new Date();
  doc.setEffectiveTime(CDAHelper.buildEffectiveTime(d));
  CE confidentialityCode=DatatypesFactory.eINSTANCE.createCE();
  confidentialityCode.setCode(""String_Node_Str"");
  confidentialityCode.setCodeSystem(""String_Node_Str"");
  doc.setConfidentialityCode(confidentialityCode);
  CS languageCode=DatatypesFactory.eINSTANCE.createCS();
  languageCode.setCode(""String_Node_Str"");
  doc.setLanguageCode(languageCode);
  CS realmcode=DatatypesFactory.eINSTANCE.createCS(""String_Node_Str"");
  doc.getRealmCodes().add(realmcode);
  PatientRole patientRole=CDAFactory.eINSTANCE.createPatientRole();
  patientRole.getIds().add(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),p.getPatientIdentifier().getIdentifier()));
  Set<PersonAddress> addresses=p.getAddresses();
  AD patientAddress=DatatypesFactory.eINSTANCE.createAD();
  patientAddress=buildAddresses(patientAddress,addresses);
  patientRole.getAddrs().add(patientAddress);
  TEL patientTelecom=DatatypesFactory.eINSTANCE.createTEL();
  patientTelecom.setNullFlavor(NullFlavor.UNK);
  patientRole.getTelecoms().add(patientTelecom);
  org.openhealthtools.mdht.uml.cda.Patient cdapatient=CDAFactory.eINSTANCE.createPatient();
  patientRole.setPatient(cdapatient);
  PN name=DatatypesFactory.eINSTANCE.createPN();
  if (p.getPersonName().getFamilyNamePrefix() != null) {
    name.addPrefix(p.getPersonName().getFamilyNamePrefix());
  }
  name.addGiven(p.getPersonName().getGivenName());
  name.addFamily(p.getPersonName().getFamilyName());
  if (p.getPersonName().getFamilyNameSuffix() != null) {
    name.addSuffix(p.getPersonName().getFamilyNameSuffix());
  }
  cdapatient.getNames().add(name);
  CE gender=DatatypesFactory.eINSTANCE.createCE();
  gender.setCode(p.getGender());
  gender.setCodeSystem(""String_Node_Str"");
  cdapatient.setAdministrativeGenderCode(gender);
  TS dateOfBirth=DatatypesFactory.eINSTANCE.createTS();
  SimpleDateFormat s1=new SimpleDateFormat(""String_Node_Str"");
  Date dobs=p.getBirthdate();
  String dob=s1.format(dobs);
  dateOfBirth.setValue(dob);
  cdapatient.setBirthTime(dateOfBirth);
  CE codes=DatatypesFactory.eINSTANCE.createCE();
  codes.setCode(""String_Node_Str"");
  cdapatient.setMaritalStatusCode(codes);
  CE codes1=DatatypesFactory.eINSTANCE.createCE();
  codes1.setCode(""String_Node_Str"");
  cdapatient.setEthnicGroupCode(codes1);
  Organization providerOrganization=CDAFactory.eINSTANCE.createOrganization();
  AD providerOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  providerOrganizationAddress.addCounty(""String_Node_Str"");
  providerOrganization.getIds().add(CDAHelper.buildID(Context.getAdministrationService().getImplementationId().getImplementationId(),null));
  providerOrganization.getAddrs().add(providerOrganizationAddress);
  ON organizationName=DatatypesFactory.eINSTANCE.createON();
  organizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  providerOrganization.getNames().add(organizationName);
  TEL providerOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  providerOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  providerOrganization.getTelecoms().add(providerOrganizationTelecon);
  patientRole.setProviderOrganization(providerOrganization);
  doc.addPatientRole(patientRole);
  Author author=CDAFactory.eINSTANCE.createAuthor();
  author.setTime(CDAHelper.buildEffectiveTime(new Date()));
  AssignedAuthor assignedAuthor=CDAFactory.eINSTANCE.createAssignedAuthor();
  II authorId=DatatypesFactory.eINSTANCE.createII();
  authorId.setRoot(Context.getAdministrationService().getImplementationId().getImplementationId());
  assignedAuthor.getIds().add(authorId);
  AD assignedAuthorAddress=DatatypesFactory.eINSTANCE.createAD();
  assignedAuthorAddress.addCountry(""String_Node_Str"");
  TEL assignedAuthorTelecon=DatatypesFactory.eINSTANCE.createTEL();
  assignedAuthorTelecon.setNullFlavor(NullFlavor.UNK);
  assignedAuthor.getAddrs().add(assignedAuthorAddress);
  assignedAuthor.getTelecoms().add(assignedAuthorTelecon);
  Person assignedPerson=CDAFactory.eINSTANCE.createPerson();
  PN assignedPersonName=DatatypesFactory.eINSTANCE.createPN();
  assignedPersonName.addPrefix(""String_Node_Str"");
  assignedPersonName.addGiven(""String_Node_Str"");
  assignedPersonName.addFamily(""String_Node_Str"");
  assignedPerson.getNames().add(assignedPersonName);
  assignedAuthor.setAssignedPerson(assignedPerson);
  Organization representedOrganization=CDAFactory.eINSTANCE.createOrganization();
  representedOrganization.getIds().add(CDAHelper.buildID(""String_Node_Str"",null));
  ON representedOrganizationName=DatatypesFactory.eINSTANCE.createON();
  representedOrganizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  representedOrganization.getNames().add(representedOrganizationName);
  AD representedOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  representedOrganizationAddress.addCounty(""String_Node_Str"");
  representedOrganization.getAddrs().add(representedOrganizationAddress);
  TEL representedOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  representedOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  representedOrganization.getTelecoms().add(representedOrganizationTelecon);
  assignedAuthor.setRepresentedOrganization(representedOrganization);
  AuthoringDevice authoringDevice=CDAFactory.eINSTANCE.createAuthoringDevice();
  SC authoringDeviceName=DatatypesFactory.eINSTANCE.createSC();
  authoringDeviceName.addText(Context.getAdministrationService().getGlobalProperty(""String_Node_Str""));
  authoringDevice.setSoftwareName(authoringDeviceName);
  assignedAuthor.setAssignedAuthoringDevice(authoringDevice);
  author.setAssignedAuthor(assignedAuthor);
  doc.getAuthors().add(author);
  Custodian custodian=CDAFactory.eINSTANCE.createCustodian();
  AssignedCustodian assignedCustodian=CDAFactory.eINSTANCE.createAssignedCustodian();
  CustodianOrganization custodianOrganization=CDAFactory.eINSTANCE.createCustodianOrganization();
  AD custodianOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  II custodianId=DatatypesFactory.eINSTANCE.createII();
  custodianId.setRoot(""String_Node_Str"");
  custodianOrganization.getIds().add(custodianId);
  custodianOrganizationAddress.addCountry(""String_Node_Str"");
  custodianOrganization.setAddr(custodianOrganizationAddress);
  ON custodianOrganizationName=DatatypesFactory.eINSTANCE.createON();
  custodianOrganizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  custodianOrganization.setName(custodianOrganizationName);
  TEL custodianOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  custodianOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  custodianOrganization.setTelecom(custodianOrganizationTelecon);
  assignedCustodian.setRepresentedCustodianOrganization(custodianOrganization);
  custodian.setAssignedCustodian(assignedCustodian);
  doc.setCustodian(custodian);
  List<Relationship> relationShips=Context.getPersonService().getRelationshipsByPerson(p);
  List<Participant1> participantList=new ArrayList<Participant1>(relationShips.size());
  System.out.print(participantList);
  for (int i=0; i < relationShips.size(); i++) {
    Participant1 e=CDAFactory.eINSTANCE.createParticipant1();
    e.setTypeCode(ParticipationType.IND);
    II pid1=DatatypesFactory.eINSTANCE.createII();
    pid1.setRoot(""String_Node_Str"");
    II pid2=DatatypesFactory.eINSTANCE.createII();
    pid2.setRoot(""String_Node_Str"");
    e.getTemplateIds().add(pid1);
    e.getTemplateIds().add(pid2);
    IVL_TS time=DatatypesFactory.eINSTANCE.createIVL_TS();
    time.setHigh(time.getHigh());
    time.setLow(time.getLow());
    e.setTime(time);
    Relationship relationship=relationShips.get(i);
    AssociatedEntity patientRelationShip=CDAFactory.eINSTANCE.createAssociatedEntity();
    patientRelationShip.setClassCode(RoleClassAssociative.PRS);
    CE relationShipCode=DatatypesFactory.eINSTANCE.createCE();
    relationShipCode.setCodeSystemName(""String_Node_Str"");
    relationShipCode.setCodeSystem(""String_Node_Str"");
    Person associatedPerson=CDAFactory.eINSTANCE.createPerson();
    PN associatedPersonName=DatatypesFactory.eINSTANCE.createPN();
    Iterator<PersonAddress> patientAddressIterator=null;
    TEL associatedPersonTelecon=DatatypesFactory.eINSTANCE.createTEL();
    associatedPersonTelecon.setNullFlavor(NullFlavor.UNK);
switch (relationship.getRelationshipType().getId()) {
case 1:
      relationShipCode.setDisplayName(""String_Node_Str"");
    associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
  associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
break;
case 2:
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonA().getAddresses().iterator();
break;
case 3:
if (p.getId() == relationship.getPersonA().getId()) {
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonB().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonB().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
 else {
relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonA().getAddresses().iterator();
}
break;
case 4:
if (p.getId() == relationship.getPersonA().getId()) {
if (relationship.getPersonB().getGender().equalsIgnoreCase(""String_Node_Str"")) relationShipCode.setDisplayName(""String_Node_Str"");
 else relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonB().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonB().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
 else {
if (relationship.getPersonA().getGender().equalsIgnoreCase(""String_Node_Str"")) relationShipCode.setDisplayName(""String_Node_Str"");
 else relationShipCode.setDisplayName(""String_Node_Str"");
associatedPersonName.addFamily(relationship.getPersonA().getFamilyName());
associatedPersonName.addGiven(relationship.getPersonA().getGivenName());
patientAddressIterator=relationship.getPersonB().getAddresses().iterator();
}
break;
}
patientRelationShip.setCode(relationShipCode);
AD associatedPersonAddress=DatatypesFactory.eINSTANCE.createAD();
if (patientAddressIterator.hasNext()) {
PersonAddress padd=patientAddressIterator.next();
associatedPersonAddress.addStreetAddressLine(padd.getAddress1() + padd.getAddress2());
}
patientRelationShip.getAddrs().add(associatedPersonAddress);
patientRelationShip.getTelecoms().add(associatedPersonTelecon);
associatedPerson.getNames().add(associatedPersonName);
patientRelationShip.setAssociatedPerson(associatedPerson);
e.setAssociatedEntity(patientRelationShip);
participantList.add(e);
}
doc.getParticipants().addAll(participantList);
DocumentationOf dof=CDAFactory.eINSTANCE.createDocumentationOf();
ServiceEvent serviceEvent=CDAFactory.eINSTANCE.createServiceEvent();
serviceEvent.setClassCode(ActClassRoot.PCPR);
serviceEvent.setEffectiveTime(CDAHelper.buildEffectiveTimeinIVL(new Date(),new Date()));
Performer1 performer=CDAFactory.eINSTANCE.createPerformer1();
performer.setTypeCode(x_ServiceEventPerformer.PPRF);
performer.setFunctionCode(CDAHelper.buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,null));
performer.setTime(CDAHelper.buildEffectiveTimeinIVL(new Date(),new Date()));
AssignedEntity assignedEntity=CDAFactory.eINSTANCE.createAssignedEntity();
II assignedEntityId=DatatypesFactory.eINSTANCE.createII();
assignedEntityId.setRoot(Context.getAdministrationService().getImplementationId().getImplementationId());
assignedEntity.getIds().add(assignedEntityId);
AD assignedPersonAddress=DatatypesFactory.eINSTANCE.createAD();
assignedPersonAddress.addCountry(""String_Node_Str"");
TEL assignedPersonTelecon=DatatypesFactory.eINSTANCE.createTEL();
assignedPersonTelecon.setNullFlavor(NullFlavor.UNK);
assignedEntity.setAssignedPerson(assignedPerson);
assignedEntity.getAddrs().add(assignedPersonAddress);
assignedEntity.getTelecoms().add(assignedPersonTelecon);
assignedEntity.getRepresentedOrganizations().add(representedOrganization);
performer.setAssignedEntity(assignedEntity);
serviceEvent.getPerformers().add(performer);
dof.setServiceEvent(serviceEvent);
doc.getDocumentationOfs().add(dof);
return doc;
}",0.9986644045771216
144243,"public void handleError(Diagnostic diagnostic){
  errorList.add(diagnostic.getMessage());
  errorMap.put(""String_Node_Str"",errorList);
  System.out.println(""String_Node_Str"" + diagnostic.getMessage());
}","public void handleError(Diagnostic diagnostic){
  errorList.add(diagnostic.getMessage());
  errorMap.put(""String_Node_Str"",errorList);
}",0.8023598820058997
144244,"public void handleWarning(Diagnostic diagnostic){
  errorList.add(diagnostic.getMessage());
  errorMap.put(""String_Node_Str"",errorList);
  System.out.println(""String_Node_Str"" + diagnostic.getMessage());
}","public void handleWarning(Diagnostic diagnostic){
  errorList.add(diagnostic.getMessage());
  errorMap.put(""String_Node_Str"",errorList);
}",0.8046647230320699
144245,"public void handleInfo(Diagnostic diagnostic){
  errorList.add(diagnostic.getMessage());
  errorMap.put(""String_Node_Str"",errorList);
  System.out.println(""String_Node_Str"" + diagnostic.getMessage());
}","public void handleInfo(Diagnostic diagnostic){
  errorList.add(diagnostic.getMessage());
  errorMap.put(""String_Node_Str"",errorList);
}",0.8011869436201781
144246,"public ClinicalDocument buildHistoryOfPastIllnessSection(ClinicalDocument cd){
  Section section=CDAFactory.eINSTANCE.createSection();
  HistoryOfPastIllnessSection ccs=new HistoryOfPastIllnessSection();
  section.getTemplateIds().add(buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  text.addText(""String_Node_Str"");
  section.setText(text);
  Entry e=CDAFactory.eINSTANCE.createEntry();
  Act act=CDAFactory.eINSTANCE.createAct();
  act.setClassCode(x_ActClassDocumentEntryAct.ACT);
  act.setMoodCode(x_DocumentActMood.EVN);
  act.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  act.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  act.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  act.getIds().add(buildID(""String_Node_Str"",null));
  CD code=DatatypesFactory.eINSTANCE.createCD();
  CS cs=DatatypesFactory.eINSTANCE.createCS();
  cs.setCode(""String_Node_Str"");
  code.setNullFlavor(NullFlavor.NA);
  act.setCode(code);
  act.setStatusCode(cs);
  IVL_TS effectiveTime=DatatypesFactory.eINSTANCE.createIVL_TS();
  IVXB_TS low=DatatypesFactory.eINSTANCE.createIVXB_TS();
  low.setValue(""String_Node_Str"");
  IVXB_TS high=DatatypesFactory.eINSTANCE.createIVXB_TS();
  high.setValue(""String_Node_Str"");
  effectiveTime.setLow(low);
  effectiveTime.setLow(high);
  act.setEffectiveTime(effectiveTime);
  EntryRelationship entryRelationship1=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship1.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
  entryRelationship1.setInversionInd(false);
  Observation observation1=CDAFactory.eINSTANCE.createObservation();
  observation1.setClassCode(ActClassObservation.OBS);
  observation1.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation1.setNegationInd(false);
  observation1.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation1.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation1.getIds().add(buildID(""String_Node_Str"",null));
  observation1.setCode(buildCodeCD(""String_Node_Str"",""String_Node_Str"",null,null));
  cs.setCode(""String_Node_Str"");
  observation1.setStatusCode(cs);
  IVL_TS effectiveTime1=DatatypesFactory.eINSTANCE.createIVL_TS();
  IVXB_TS low1=DatatypesFactory.eINSTANCE.createIVXB_TS();
  low1.setNullFlavor(NullFlavor.UNK);
  observation1.setEffectiveTime(effectiveTime1);
  CD codecd=DatatypesFactory.eINSTANCE.createCD();
  codecd.setCode(""String_Node_Str"");
  codecd.setCodeSystem(""String_Node_Str"");
  codecd.setDisplayName(""String_Node_Str"");
  codecd.setCodeSystemName(""String_Node_Str"");
  observation1.getValues().add(codecd);
  entryRelationship1.setObservation(observation1);
  EntryRelationship entryRelationship2=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship2.setTypeCode(x_ActRelationshipEntryRelationship.REFR);
  entryRelationship2.setInversionInd(false);
  Observation observation2=CDAFactory.eINSTANCE.createObservation();
  observation2.setClassCode(ActClassObservation.OBS);
  observation2.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation2.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation2.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation2.setCode(buildCodeCD(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  observation2.setText(buildEDText(""String_Node_Str""));
  observation2.setStatusCode(cs);
  observation2.getValues().add(buildCodeCE(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  entryRelationship2.setObservation(observation2);
  EntryRelationship entryRelationship3=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship3.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
  entryRelationship3.setInversionInd(true);
  Observation observation3=CDAFactory.eINSTANCE.createObservation();
  observation3.setClassCode(ActClassObservation.OBS);
  observation3.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation3.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation3.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation3.setCode(buildCodeCD(""String_Node_Str"",""String_Node_Str"",null,null));
  observation3.setText(buildEDText(""String_Node_Str""));
  observation3.setStatusCode(cs);
  observation3.getValues().add(buildCodeCD(""String_Node_Str"",""String_Node_Str"",null,null));
  entryRelationship3.setObservation(observation3);
  EntryRelationship entryRelationship4=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship4.setTypeCode(x_ActRelationshipEntryRelationship.REFR);
  Observation observation4=CDAFactory.eINSTANCE.createObservation();
  observation4.setClassCode(ActClassObservation.OBS);
  observation4.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation4.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation4.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation4.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation4.setCode(buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,null));
  observation4.setText(buildEDText(""String_Node_Str""));
  observation4.setStatusCode(cs);
  observation4.getValues().add(buildCodeCE(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  entryRelationship4.setObservation(observation4);
  EntryRelationship entryRelationship5=CDAFactory.eINSTANCE.createEntryRelationship();
  Act act1=CDAFactory.eINSTANCE.createAct();
  act1.setClassCode(x_ActClassDocumentEntryAct.ACT);
  act1.setMoodCode(x_DocumentActMood.EVN);
  act1.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  act1.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  act1.setCode(buildCodeCD(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  act1.setText(buildEDText(""String_Node_Str""));
  act1.setStatusCode(cs);
  Author author=CDAFactory.eINSTANCE.createAuthor();
  author.setTime(buildEffectiveTime(new Date()));
  AssignedAuthor assignedAuthor=CDAFactory.eINSTANCE.createAssignedAuthor();
  AD assignedAuthorAddress=DatatypesFactory.eINSTANCE.createAD();
  assignedAuthorAddress.addCountry(""String_Node_Str"");
  TEL assignedAuthorTelecon=DatatypesFactory.eINSTANCE.createTEL();
  assignedAuthorTelecon.setNullFlavor(NullFlavor.UNK);
  assignedAuthor.getAddrs().add(assignedAuthorAddress);
  assignedAuthor.getTelecoms().add(assignedAuthorTelecon);
  Person assignedPerson=CDAFactory.eINSTANCE.createPerson();
  PN assignedPersonName=DatatypesFactory.eINSTANCE.createPN();
  assignedPerson.getNames().add(assignedPersonName);
  assignedAuthor.setAssignedPerson(assignedPerson);
  Organization representedOrganization=CDAFactory.eINSTANCE.createOrganization();
  ON representedOrganizationName=DatatypesFactory.eINSTANCE.createON();
  representedOrganizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  representedOrganization.getNames().add(representedOrganizationName);
  AD representedOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  representedOrganizationAddress.addCounty(""String_Node_Str"");
  representedOrganization.getAddrs().add(representedOrganizationAddress);
  TEL representedOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  representedOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  representedOrganization.getTelecoms().add(representedOrganizationTelecon);
  assignedAuthor.setRepresentedOrganization(representedOrganization);
  author.setAssignedAuthor(assignedAuthor);
  act1.getAuthors().add(author);
  entryRelationship5.setAct(act1);
  EntryRelationship entryRelationship6=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship6.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
  Observation observation5=CDAFactory.eINSTANCE.createObservation();
  observation5.setClassCode(ActClassObservation.OBS);
  observation5.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation5.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation5.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  entryRelationship6.setObservation(observation5);
  act.getEntryRelationships().add(entryRelationship1);
  act.getEntryRelationships().add(entryRelationship2);
  act.getEntryRelationships().add(entryRelationship3);
  act.getEntryRelationships().add(entryRelationship4);
  act.getEntryRelationships().add(entryRelationship5);
  act.getEntryRelationships().add(entryRelationship6);
  e.setAct(act);
  section.getEntries().add(e);
  cd.addSection(section);
  return cd;
}","public ClinicalDocument buildHistoryOfPastIllnessSection(ClinicalDocument cd){
  Section section=CDAFactory.eINSTANCE.createSection();
  HistoryOfPastIllnessSection ccs=new HistoryOfPastIllnessSection();
  section.getTemplateIds().add(buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  text.addText(""String_Node_Str"");
  section.setText(text);
  Entry e=CDAFactory.eINSTANCE.createEntry();
  Act act=CDAFactory.eINSTANCE.createAct();
  act.setClassCode(x_ActClassDocumentEntryAct.ACT);
  act.setMoodCode(x_DocumentActMood.EVN);
  act.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  act.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  act.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  act.getIds().add(buildID(""String_Node_Str"",null));
  CD code=DatatypesFactory.eINSTANCE.createCD();
  CS cs=DatatypesFactory.eINSTANCE.createCS();
  cs.setCode(""String_Node_Str"");
  code.setNullFlavor(NullFlavor.NA);
  act.setCode(code);
  act.setStatusCode(cs);
  IVL_TS effectiveTime=DatatypesFactory.eINSTANCE.createIVL_TS();
  IVXB_TS low=DatatypesFactory.eINSTANCE.createIVXB_TS();
  low.setValue(""String_Node_Str"");
  IVXB_TS high=DatatypesFactory.eINSTANCE.createIVXB_TS();
  high.setValue(""String_Node_Str"");
  effectiveTime.setLow(low);
  effectiveTime.setLow(high);
  act.setEffectiveTime(effectiveTime);
  EntryRelationship entryRelationship1=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship1.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
  entryRelationship1.setInversionInd(false);
  Observation observation1=CDAFactory.eINSTANCE.createObservation();
  observation1.setClassCode(ActClassObservation.OBS);
  observation1.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation1.setNegationInd(false);
  observation1.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation1.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation1.getIds().add(buildID(""String_Node_Str"",null));
  observation1.setCode(buildCodeCD(""String_Node_Str"",""String_Node_Str"",null,null));
  cs.setCode(""String_Node_Str"");
  observation1.setStatusCode(cs);
  IVL_TS effectiveTime1=DatatypesFactory.eINSTANCE.createIVL_TS();
  IVXB_TS low1=DatatypesFactory.eINSTANCE.createIVXB_TS();
  low1.setNullFlavor(NullFlavor.UNK);
  observation1.setEffectiveTime(effectiveTime1);
  CD codecd=DatatypesFactory.eINSTANCE.createCD();
  codecd.setCode(""String_Node_Str"");
  codecd.setCodeSystem(""String_Node_Str"");
  codecd.setDisplayName(""String_Node_Str"");
  codecd.setCodeSystemName(""String_Node_Str"");
  observation1.getValues().add(codecd);
  entryRelationship1.setObservation(observation1);
  EntryRelationship entryRelationship2=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship2.setTypeCode(x_ActRelationshipEntryRelationship.REFR);
  entryRelationship2.setInversionInd(false);
  Observation observation2=CDAFactory.eINSTANCE.createObservation();
  observation2.setClassCode(ActClassObservation.OBS);
  observation2.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation2.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation2.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation2.setCode(buildCodeCD(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  observation2.setText(buildEDText(""String_Node_Str""));
  observation2.setStatusCode(cs);
  observation2.getValues().add(buildCodeCE(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  entryRelationship2.setObservation(observation2);
  EntryRelationship entryRelationship3=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship3.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
  entryRelationship3.setInversionInd(true);
  Observation observation3=CDAFactory.eINSTANCE.createObservation();
  observation3.setClassCode(ActClassObservation.OBS);
  observation3.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation3.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation3.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation3.setCode(buildCodeCD(""String_Node_Str"",""String_Node_Str"",null,null));
  observation3.setText(buildEDText(""String_Node_Str""));
  observation3.setStatusCode(cs);
  observation3.getValues().add(buildCodeCD(""String_Node_Str"",""String_Node_Str"",null,null));
  entryRelationship3.setObservation(observation3);
  EntryRelationship entryRelationship4=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship4.setTypeCode(x_ActRelationshipEntryRelationship.REFR);
  Observation observation4=CDAFactory.eINSTANCE.createObservation();
  observation4.setClassCode(ActClassObservation.OBS);
  observation4.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation4.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation4.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation4.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation4.setCode(buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,null));
  observation4.setText(buildEDText(""String_Node_Str""));
  observation4.setStatusCode(cs);
  observation4.getValues().add(buildCodeCE(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  entryRelationship4.setObservation(observation4);
  EntryRelationship entryRelationship5=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship5.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
  Act act1=CDAFactory.eINSTANCE.createAct();
  act1.setClassCode(x_ActClassDocumentEntryAct.ACT);
  act1.setMoodCode(x_DocumentActMood.EVN);
  act1.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  act1.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  act1.setCode(buildCodeCD(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  act1.setText(buildEDText(""String_Node_Str""));
  act1.setStatusCode(cs);
  Author author=CDAFactory.eINSTANCE.createAuthor();
  author.setTime(buildEffectiveTime(new Date()));
  AssignedAuthor assignedAuthor=CDAFactory.eINSTANCE.createAssignedAuthor();
  II authorId=DatatypesFactory.eINSTANCE.createII();
  authorId.setRoot(Context.getAdministrationService().getImplementationId().getImplementationId());
  assignedAuthor.getIds().add(authorId);
  AD assignedAuthorAddress=DatatypesFactory.eINSTANCE.createAD();
  assignedAuthorAddress.addCountry(""String_Node_Str"");
  TEL assignedAuthorTelecon=DatatypesFactory.eINSTANCE.createTEL();
  assignedAuthorTelecon.setNullFlavor(NullFlavor.UNK);
  assignedAuthor.getAddrs().add(assignedAuthorAddress);
  assignedAuthor.getTelecoms().add(assignedAuthorTelecon);
  Person assignedPerson=CDAFactory.eINSTANCE.createPerson();
  PN assignedPersonName=DatatypesFactory.eINSTANCE.createPN();
  assignedPerson.getNames().add(assignedPersonName);
  assignedAuthor.setAssignedPerson(assignedPerson);
  Organization representedOrganization=CDAFactory.eINSTANCE.createOrganization();
  ON representedOrganizationName=DatatypesFactory.eINSTANCE.createON();
  representedOrganizationName.addText(Context.getAdministrationService().getImplementationId().getName());
  representedOrganization.getNames().add(representedOrganizationName);
  AD representedOrganizationAddress=DatatypesFactory.eINSTANCE.createAD();
  representedOrganizationAddress.addCounty(""String_Node_Str"");
  representedOrganization.getAddrs().add(representedOrganizationAddress);
  TEL representedOrganizationTelecon=DatatypesFactory.eINSTANCE.createTEL();
  representedOrganizationTelecon.setNullFlavor(NullFlavor.UNK);
  representedOrganization.getTelecoms().add(representedOrganizationTelecon);
  assignedAuthor.setRepresentedOrganization(representedOrganization);
  author.setAssignedAuthor(assignedAuthor);
  act1.getAuthors().add(author);
  entryRelationship5.setAct(act1);
  EntryRelationship entryRelationship6=CDAFactory.eINSTANCE.createEntryRelationship();
  entryRelationship6.setTypeCode(x_ActRelationshipEntryRelationship.SUBJ);
  Observation observation5=CDAFactory.eINSTANCE.createObservation();
  observation5.setClassCode(ActClassObservation.OBS);
  observation5.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation5.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation5.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  entryRelationship6.setObservation(observation5);
  act.getEntryRelationships().add(entryRelationship1);
  act.getEntryRelationships().add(entryRelationship2);
  act.getEntryRelationships().add(entryRelationship3);
  act.getEntryRelationships().add(entryRelationship4);
  act.getEntryRelationships().add(entryRelationship5);
  act.getEntryRelationships().add(entryRelationship6);
  e.setAct(act);
  section.getEntries().add(e);
  cd.addSection(section);
  return cd;
}",0.98515534462778
144247,"public Section buildCodedVitalSignsSection(){
  Section section=CDAFactory.eINSTANCE.createSection();
  VitalSignsSection vss=new VitalSignsSection();
  CodedVitalSignsSection ccs=new CodedVitalSignsSection();
  section.getTemplateIds().add(buildTemplateID(vss.getParentTemplateId(),null,null));
  section.getTemplateIds().add(buildTemplateID(ccs.getParentTemplateId(),null,null));
  section.getTemplateIds().add(buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  text.addText(""String_Node_Str"");
  section.setText(text);
  Entry e=CDAFactory.eINSTANCE.createEntry();
  Organizer organizer=CDAFactory.eINSTANCE.createOrganizer();
  organizer.setClassCode(x_ActClassDocumentEntryOrganizer.CLUSTER);
  organizer.setMoodCode(ActMood.EVN);
  organizer.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  organizer.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  organizer.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  organizer.getIds().add(buildID(""String_Node_Str"",null));
  organizer.setCode(buildCodeCD(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  CS cs=DatatypesFactory.eINSTANCE.createCS();
  cs.setCode(""String_Node_Str"");
  organizer.setStatusCode(cs);
  IVL_TS effectiveTime=DatatypesFactory.eINSTANCE.createIVL_TS();
  Date d=new Date();
  SimpleDateFormat s=new SimpleDateFormat(""String_Node_Str"");
  String creationDate=s.format(d);
  effectiveTime.setValue(creationDate);
  effectiveTime.setNullFlavor(NullFlavor.UNK);
  organizer.setEffectiveTime(effectiveTime);
  Author author=CDAFactory.eINSTANCE.createAuthor();
  author.setTime(buildEffectiveTime(new Date()));
  AssignedAuthor assignedAuthor=CDAFactory.eINSTANCE.createAssignedAuthor();
  AD assignedAuthorAddress=DatatypesFactory.eINSTANCE.createAD();
  assignedAuthorAddress.addCountry(""String_Node_Str"");
  TEL assignedAuthorTelecon=DatatypesFactory.eINSTANCE.createTEL();
  assignedAuthorTelecon.setNullFlavor(NullFlavor.UNK);
  assignedAuthor.getAddrs().add(assignedAuthorAddress);
  assignedAuthor.getTelecoms().add(assignedAuthorTelecon);
  Person assignedPerson=CDAFactory.eINSTANCE.createPerson();
  PN assignedPersonName=DatatypesFactory.eINSTANCE.createPN();
  assignedPerson.getNames().add(assignedPersonName);
  assignedAuthor.setAssignedPerson(assignedPerson);
  author.setAssignedAuthor(assignedAuthor);
  organizer.getAuthors().add(author);
  Component4 component=CDAFactory.eINSTANCE.createComponent4();
  Observation observation=CDAFactory.eINSTANCE.createObservation();
  observation.setClassCode(ActClassObservation.OBS);
  observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation.getIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation.setCode(buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str""));
  observation.setText(buildEDText(""String_Node_Str""));
  observation.setStatusCode(cs);
  IVL_TS effectiveTime1=DatatypesFactory.eINSTANCE.createIVL_TS();
  effectiveTime1.setNullFlavor(NullFlavor.UNK);
  observation.setEffectiveTime(effectiveTime1);
  ReferenceRange referenceRange=CDAFactory.eINSTANCE.createReferenceRange();
  ObservationRange observationRange=CDAFactory.eINSTANCE.createObservationRange();
  observationRange.setText(buildEDText(""String_Node_Str""));
  referenceRange.setObservationRange(observationRange);
  observation.getReferenceRanges().add(referenceRange);
  component.setObservation(observation);
  organizer.getComponents().add(component);
  e.setOrganizer(organizer);
  section.getEntries().add(e);
  return section;
}","public Section buildCodedVitalSignsSection(){
  Section section=CDAFactory.eINSTANCE.createSection();
  VitalSignsSection vss=new VitalSignsSection();
  CodedVitalSignsSection ccs=new CodedVitalSignsSection();
  section.getTemplateIds().add(buildTemplateID(vss.getParentTemplateId(),null,null));
  section.getTemplateIds().add(buildTemplateID(ccs.getParentTemplateId(),null,null));
  section.getTemplateIds().add(buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  text.addText(""String_Node_Str"");
  section.setText(text);
  Entry e=CDAFactory.eINSTANCE.createEntry();
  Organizer organizer=CDAFactory.eINSTANCE.createOrganizer();
  organizer.setClassCode(x_ActClassDocumentEntryOrganizer.CLUSTER);
  organizer.setMoodCode(ActMood.EVN);
  organizer.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  organizer.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  organizer.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  organizer.getIds().add(buildID(""String_Node_Str"",null));
  organizer.setCode(buildCodeCD(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  CS cs=DatatypesFactory.eINSTANCE.createCS();
  cs.setCode(""String_Node_Str"");
  organizer.setStatusCode(cs);
  IVL_TS effectiveTime=DatatypesFactory.eINSTANCE.createIVL_TS();
  Date d=new Date();
  SimpleDateFormat s=new SimpleDateFormat(""String_Node_Str"");
  String creationDate=s.format(d);
  effectiveTime.setValue(creationDate);
  effectiveTime.setNullFlavor(NullFlavor.UNK);
  organizer.setEffectiveTime(effectiveTime);
  Author author=CDAFactory.eINSTANCE.createAuthor();
  author.setTime(buildEffectiveTime(new Date()));
  AssignedAuthor assignedAuthor=CDAFactory.eINSTANCE.createAssignedAuthor();
  II authorId=DatatypesFactory.eINSTANCE.createII();
  authorId.setRoot(Context.getAdministrationService().getImplementationId().getImplementationId());
  assignedAuthor.getIds().add(authorId);
  AD assignedAuthorAddress=DatatypesFactory.eINSTANCE.createAD();
  assignedAuthorAddress.addCountry(""String_Node_Str"");
  TEL assignedAuthorTelecon=DatatypesFactory.eINSTANCE.createTEL();
  assignedAuthorTelecon.setNullFlavor(NullFlavor.UNK);
  assignedAuthor.getAddrs().add(assignedAuthorAddress);
  assignedAuthor.getTelecoms().add(assignedAuthorTelecon);
  Person assignedPerson=CDAFactory.eINSTANCE.createPerson();
  PN assignedPersonName=DatatypesFactory.eINSTANCE.createPN();
  assignedPerson.getNames().add(assignedPersonName);
  assignedAuthor.setAssignedPerson(assignedPerson);
  author.setAssignedAuthor(assignedAuthor);
  organizer.getAuthors().add(author);
  Component4 component=CDAFactory.eINSTANCE.createComponent4();
  Observation observation=CDAFactory.eINSTANCE.createObservation();
  observation.setClassCode(ActClassObservation.OBS);
  observation.setMoodCode(x_ActMoodDocumentObservation.EVN);
  observation.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation.getTemplateIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation.getIds().add(buildTemplateID(""String_Node_Str"",null,null));
  observation.setCode(buildCodeCE(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str""));
  observation.setText(buildEDText(""String_Node_Str""));
  observation.setStatusCode(cs);
  IVL_TS effectiveTime1=DatatypesFactory.eINSTANCE.createIVL_TS();
  effectiveTime1.setNullFlavor(NullFlavor.UNK);
  observation.setEffectiveTime(effectiveTime1);
  ReferenceRange referenceRange=CDAFactory.eINSTANCE.createReferenceRange();
  ObservationRange observationRange=CDAFactory.eINSTANCE.createObservationRange();
  observationRange.setText(buildEDText(""String_Node_Str""));
  referenceRange.setObservationRange(observationRange);
  observation.getReferenceRanges().add(referenceRange);
  component.setObservation(observation);
  organizer.getComponents().add(component);
  e.setOrganizer(organizer);
  section.getEntries().add(e);
  return section;
}",0.9766882960826724
144248,"public ClinicalDocument buildPhysicalExamSection(ClinicalDocument cd){
  Section section=CDAFactory.eINSTANCE.createSection();
  PhysicalExamSection ccs=new PhysicalExamSection();
  section.getTemplateIds().add(buildTemplateID(ccs.getParentTemplateId(),null,null));
  section.getTemplateIds().add(buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  text.addText(""String_Node_Str"");
  section.setText(text);
  Section OptionalSecs=CDAFactory.eINSTANCE.createSection();
  OptionalSecs=buildCodedVitalSignsSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildGeneralAppearanceSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildVisibleImplantedMedicalDevicesSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildIntegumentarySystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildHeadSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildOptionalEyesSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildEarNoseMouthThroatSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildEarsSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildNoseSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildMouthThroatTeethSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildNeckSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildEndocrineSystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildThoraxLungsSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildThoraxLungsSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildBreastSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildHeartSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildRespiratorySystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildAbdomenSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildLymphaticSystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildVesselsSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildMusculoskeletalSystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildNeurologicSystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildGenitaliaSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildRectumSection();
  section.addSection(OptionalSecs);
  cd.addSection(section);
  return cd;
}","public ClinicalDocument buildPhysicalExamSection(ClinicalDocument cd){
  Section section=CDAFactory.eINSTANCE.createSection();
  PhysicalExamSection ccs=new PhysicalExamSection();
  section.getTemplateIds().add(buildTemplateID(ccs.getParentTemplateId(),null,null));
  section.getTemplateIds().add(buildTemplateID(ccs.getTemplateid(),null,null));
  section.setCode(buildCodeCE(ccs.getCode(),ccs.getCodeSystem(),ccs.getSectionName(),ccs.getCodeSystemName()));
  section.setTitle(buildTitle(ccs.getSectionDescription()));
  StrucDocText text=CDAFactory.eINSTANCE.createStrucDocText();
  text.addText(""String_Node_Str"");
  section.setText(text);
  Section OptionalSecs=CDAFactory.eINSTANCE.createSection();
  OptionalSecs=buildCodedVitalSignsSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildGeneralAppearanceSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildVisibleImplantedMedicalDevicesSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildIntegumentarySystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildHeadSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildOptionalEyesSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildEarNoseMouthThroatSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildEarsSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildNoseSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildMouthThroatTeethSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildNeckSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildEndocrineSystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildThoraxLungsSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildChestWallSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildBreastSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildHeartSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildRespiratorySystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildAbdomenSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildLymphaticSystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildVesselsSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildMusculoskeletalSystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildNeurologicSystemSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildGenitaliaSection();
  section.addSection(OptionalSecs);
  OptionalSecs=buildRectumSection();
  section.addSection(OptionalSecs);
  cd.addSection(section);
  return cd;
}",0.9965896172792724
144249,"String compileToRegexp(String path){
  Matcher m=matchPattern.matcher(path);
  StringBuffer sb=new StringBuffer(path.length());
  while (m.find()) {
    if (m.group(1) != null) {
      namedGroups.add(m.group(""String_Node_Str""));
      String replace=""String_Node_Str"" + m.group(""String_Node_Str"") + ""String_Node_Str"";
      m.appendReplacement(sb,replace);
    }
 else     if (m.group(3) != null) {
      namedGroups.add(starKey);
      String replace=""String_Node_Str"" + starKey + ""String_Node_Str"";
      m.appendReplacement(sb,replace);
    }
 else     if (m.group(4) != null) {
      namedGroups.add(m.group(""String_Node_Str""));
      String delimiter=m.group(""String_Node_Str"").equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      m.appendReplacement(sb,new StringBuilder(""String_Node_Str"").append(m.group(""String_Node_Str"")).append(""String_Node_Str"").append(m.group(""String_Node_Str"")).append(""String_Node_Str"").append(delimiter).toString());
    }
 else     if (m.group(8) != null) {
      String replace=""String_Node_Str"" + m.group(8);
      m.appendReplacement(sb,replace);
    }
 else {
      throw new RuntimeException();
    }
  }
  m.appendTail(sb);
  return sb.toString();
}","String compileToRegexp(String path){
  Matcher m=matchPattern.matcher(path);
  StringBuffer sb=new StringBuffer(path.length());
  while (m.find()) {
    if (m.group(1) != null) {
      namedGroups.add(m.group(""String_Node_Str""));
      String replace=""String_Node_Str"" + m.group(""String_Node_Str"") + ""String_Node_Str"";
      m.appendReplacement(sb,replace);
    }
 else     if (m.group(3) != null) {
      namedGroups.add(starKey);
      String replace=""String_Node_Str"" + starKey + ""String_Node_Str"";
      m.appendReplacement(sb,replace);
    }
 else     if (m.group(4) != null) {
      namedGroups.add(m.group(""String_Node_Str""));
      String delimiter=m.group(""String_Node_Str"").equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      m.appendReplacement(sb,""String_Node_Str"" + m.group(""String_Node_Str"") + ""String_Node_Str""+ m.group(""String_Node_Str"")+ ""String_Node_Str""+ delimiter);
    }
 else     if (m.group(8) != null) {
      String replace=""String_Node_Str"" + m.group(8);
      m.appendReplacement(sb,replace);
    }
 else {
      throw new RuntimeException();
    }
  }
  m.appendTail(sb);
  return sb.toString();
}",0.8679405520169852
144250,"@Override protected void onCancelled(Result result){
  EventBus.getDefault().post(new ActivityEvent(IDLE));
  listener.netCatIsFailed(result);
}","@Override protected void onCancelled(Result result){
  listener.netCatIsFailed(result);
}",0.7639484978540773
144251,"@Override public void netCatIsFailed(Result result){
  Toast.makeText(getActivity(),result.getErrorMessage(),Toast.LENGTH_LONG).show();
}","@Override public void netCatIsFailed(Result result){
  EventBus.getDefault().post(new ActivityEvent(IDLE,outputView.getText().toString()));
  Toast.makeText(getActivity(),result.getErrorMessage(),Toast.LENGTH_LONG).show();
}",0.7590027700831025
144252,"@Override public void onDestroy(){
  pager=null;
  EventBus.getDefault().unregister(this);
  super.onDestroy();
}","@Override public void onDestroy(){
  EventBus.getDefault().unregister(this);
  super.onDestroy();
}",0.9339622641509434
144253,"@Override public void netCatIsCompleted(Result result){
switch (result.op) {
case CONNECT:
case LISTEN:
    Socket socket=result.getSocket();
  output=new ByteArrayOutputStream();
netCat.setSocket(socket);
netCat.setOutput(output);
netCat.executeParallel(RECEIVE.toString());
EventBus.getDefault().post(new ActivityEvent(CONNECTED));
break;
case RECEIVE:
String s=output.toString();
outputView.setText(s.substring(0,s.length() - 1));
disconnect();
break;
case SEND:
inputText.setText(""String_Node_Str"");
break;
case DISCONNECT:
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
EventBus.getDefault().post(new ActivityEvent(IDLE,outputView.getText().toString()));
break;
}
updateUIWithValidation();
}","@Override public void netCatIsCompleted(Result result){
switch (result.op) {
case CONNECT:
case LISTEN:
    Socket socket=result.getSocket();
  output=new ByteArrayOutputStream();
netCat.setSocket(socket);
netCat.setOutput(output);
netCat.executeParallel(RECEIVE.toString());
EventBus.getDefault().post(new ActivityEvent(CONNECTED));
break;
case RECEIVE:
String s=output.toString();
if (s.length() > 0) {
outputView.setText(s.substring(0,s.length() - 1));
}
disconnect();
break;
case SEND:
inputText.setText(""String_Node_Str"");
break;
case DISCONNECT:
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
EventBus.getDefault().post(new ActivityEvent(IDLE,outputView.getText().toString()));
break;
}
updateUIWithValidation();
}",0.9836734693877552
144254,"public void onEvent(FragmentEvent event){
  if (event.op != null) {
switch (event.op) {
case CONNECT:
      connect(event.data);
    break;
case LISTEN:
  listen(event.data);
break;
case DISCONNECT:
if (netCat.isConnected()) {
disconnect();
}
 else if (netCat.isListening()) {
netCat.cancel();
}
break;
case CLEAR_OUTPUT_VIEW:
outputView.setText(""String_Node_Str"");
EventBus.getDefault().post(new ActivityEvent(OUTPUT_VIEW_CLEARED));
break;
}
}
}","/** 
 * Event handler
 */
public void onEvent(FragmentEvent event){
switch (event.op) {
case CONNECT:
    connect(event.data);
  break;
case LISTEN:
listen(event.data);
break;
case DISCONNECT:
if (netCat.isConnected()) {
disconnect();
}
 else if (netCat.isListening()) {
netCat.cancel();
}
break;
case CLEAR_OUTPUT_VIEW:
outputView.setText(""String_Node_Str"");
EventBus.getDefault().post(new ActivityEvent(OUTPUT_VIEW_CLEARED));
break;
}
}",0.8710407239819005
144255,"@Override protected Result doInBackground(String... params){
  Op op=Op.valueOf(params[0]);
  Result result=new Result(op);
  try {
    Log.d(CLASS_NAME,String.format(""String_Node_Str"",op));
    int port;
    Socket newSocket;
switch (op) {
case CONNECT:
      String host=params[1];
    port=Integer.parseInt(params[2]);
  Log.d(CLASS_NAME,String.format(""String_Node_Str"",host,port));
newSocket=new Socket();
newSocket.connect(new InetSocketAddress(host,port),3000);
publishProgress(CONNECTED.toString());
result.object=newSocket;
break;
case LISTEN:
port=Integer.parseInt(params[1]);
ServerSocketChannel serverChannel=ServerSocketChannel.open();
serverChannel.configureBlocking(false);
serverChannel.socket().bind(new InetSocketAddress(port));
Log.d(CLASS_NAME,String.format(""String_Node_Str"",port));
publishProgress(LISTENING.toString());
while (!task.isCancelled()) {
SocketChannel channel=serverChannel.accept();
Thread.sleep(100);
if (channel != null) {
result.object=channel.socket();
publishProgress(CONNECTED.toString());
break;
}
}
if (task.isCancelled()) {
serverChannel.close();
Log.d(CLASS_NAME,String.format(""String_Node_Str"",port));
result.exception=new Exception(""String_Node_Str"");
}
break;
case RECEIVE:
if (socket != null && socket.isConnected()) {
Log.d(CLASS_NAME,String.format(""String_Node_Str"",socket.getInetAddress().getHostAddress(),socket.getPort()));
receiveFromSocket();
}
break;
case SEND:
if (socket != null && socket.isConnected()) {
Log.d(CLASS_NAME,String.format(""String_Node_Str"",socket.getInetAddress().getHostAddress(),socket.getPort()));
sendToSocket();
}
break;
case DISCONNECT:
if (socket != null && socket.isConnected()) {
Log.d(CLASS_NAME,String.format(""String_Node_Str"",socket.getInetAddress().getHostAddress(),socket.getPort()));
socket.shutdownOutput();
socket.close();
setSocket(null);
publishProgress(IDLE.toString());
}
}
}
 catch (Exception e) {
e.printStackTrace();
result.exception=e;
}
return result;
}","@Override protected Result doInBackground(String... params){
  Op op=Op.valueOf(params[0]);
  Result result=new Result(op);
  try {
    Log.d(CLASS_NAME,String.format(""String_Node_Str"",op));
    int port;
    Socket newSocket;
switch (op) {
case CONNECT:
      String host=params[1];
    port=Integer.parseInt(params[2]);
  Log.d(CLASS_NAME,String.format(""String_Node_Str"",host,port));
newSocket=new Socket();
newSocket.connect(new InetSocketAddress(host,port),3000);
publishProgress(CONNECTED.toString());
result.object=newSocket;
break;
case LISTEN:
port=Integer.parseInt(params[1]);
serverChannel=ServerSocketChannel.open();
serverChannel.configureBlocking(false);
serverChannel.socket().bind(new InetSocketAddress(port));
Log.d(CLASS_NAME,String.format(""String_Node_Str"",port));
publishProgress(LISTENING.toString());
while (!task.isCancelled()) {
SocketChannel channel=serverChannel.accept();
Thread.sleep(100);
if (channel != null) {
result.object=channel.socket();
publishProgress(CONNECTED.toString());
break;
}
}
if (task.isCancelled()) {
serverChannel.close();
serverChannel=null;
Log.d(CLASS_NAME,String.format(""String_Node_Str"",port));
result.exception=new Exception(""String_Node_Str"");
}
break;
case RECEIVE:
if (socket != null && socket.isConnected()) {
Log.d(CLASS_NAME,String.format(""String_Node_Str"",socket.getInetAddress().getHostAddress(),socket.getPort()));
receiveFromSocket();
}
break;
case SEND:
if (socket != null && socket.isConnected()) {
Log.d(CLASS_NAME,String.format(""String_Node_Str"",socket.getInetAddress().getHostAddress(),socket.getPort()));
sendToSocket();
}
break;
case DISCONNECT:
if (socket != null && socket.isConnected()) {
Log.d(CLASS_NAME,String.format(""String_Node_Str"",socket.getInetAddress().getHostAddress(),socket.getPort()));
socket.shutdownOutput();
socket.close();
socket=null;
publishProgress(IDLE.toString());
}
}
}
 catch (Exception e) {
e.printStackTrace();
result.exception=e;
}
return result;
}",0.9835981547924142
144256,"public void listen(String port){
  if (!port.matches(""String_Node_Str"")) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  netCat=new NetCat(this);
  netCat.execute(LISTEN.toString(),port);
}","public void listen(String port){
  if (Utils.isActive(netCat)) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  if (!port.matches(""String_Node_Str"")) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  netCat=new NetCat(this);
  netCat.execute(LISTEN.toString(),port);
}",0.7913907284768212
144257,"private void updateUIWithValidation(){
  if (Utils.connected(netCat)) {
    sendButton.setEnabled(Utils.populated(inputText));
  }
 else {
    sendButton.setEnabled(false);
  }
}","private void updateUIWithValidation(){
  if (Utils.isActive(netCat)) {
    sendButton.setEnabled(Utils.populated(inputText));
  }
 else {
    sendButton.setEnabled(false);
  }
}",0.9690140845070424
144258,"public void onEvent(FragmentEvent event){
switch (event.op) {
case CONNECT:
    connect(event.data);
  break;
case LISTEN:
listen(event.data);
break;
case DISCONNECT:
if (netCat.isConnected()) {
disconnect();
}
 else {
netCat.cancel();
}
break;
case CLEAR_OUTPUT_VIEW:
outputView.setText(""String_Node_Str"");
EventBus.getDefault().post(new ActivityEvent(OUTPUT_VIEW_CLEARED));
break;
}
}","public void onEvent(FragmentEvent event){
switch (event.op) {
case CONNECT:
    connect(event.data);
  break;
case LISTEN:
listen(event.data);
break;
case DISCONNECT:
if (netCat.isConnected()) {
disconnect();
}
 else if (netCat.isListening()) {
netCat.cancel();
}
break;
case CLEAR_OUTPUT_VIEW:
outputView.setText(""String_Node_Str"");
EventBus.getDefault().post(new ActivityEvent(OUTPUT_VIEW_CLEARED));
break;
}
}",0.9674185463659148
144259,"public void connect(String connectTo){
  if (!connectTo.matches(""String_Node_Str"")) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  String[] tokens=connectTo.split(""String_Node_Str"");
  netCat=new NetCat(this);
  netCat.execute(CONNECT.toString(),tokens[0],tokens[1]);
}","public void connect(String connectTo){
  if (Utils.isActive(netCat)) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  if (!connectTo.matches(""String_Node_Str"")) {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  String[] tokens=connectTo.split(""String_Node_Str"");
  netCat=new NetCat(this);
  netCat.execute(CONNECT.toString(),tokens[0],tokens[1]);
}",0.835509138381201
144260,"@Override public void netCatIsCompleted(Result result){
switch (result.op) {
case CONNECT:
case LISTEN:
    Socket socket=result.getSocket();
  output=new ByteArrayOutputStream();
netCat.setSocket(socket);
netCat.setOutput(output);
netCat.executeParallel(RECEIVE.toString());
EventBus.getDefault().post(new ActivityEvent(CONNECTED));
break;
case RECEIVE:
OutputStream resultStream=new OutputStream(){
@Override public void write(int oneByte) throws IOException {
char ch=(char)oneByte;
outputView.setText(outputView.getText() + String.valueOf(ch));
System.out.write(oneByte);
}
}
;
try {
output.writeTo(resultStream);
}
 catch (IOException e) {
Log.e(CLASS_NAME,e.getMessage());
}
break;
case SEND:
inputText.setText(""String_Node_Str"");
break;
case DISCONNECT:
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
EventBus.getDefault().post(new ActivityEvent(IDLE,outputView.getText().toString()));
break;
}
updateUIWithValidation();
}","@Override public void netCatIsCompleted(Result result){
switch (result.op) {
case CONNECT:
case LISTEN:
    Socket socket=result.getSocket();
  output=new ByteArrayOutputStream();
netCat.setSocket(socket);
netCat.setOutput(output);
netCat.executeParallel(RECEIVE.toString());
EventBus.getDefault().post(new ActivityEvent(CONNECTED));
break;
case RECEIVE:
outputView.setText(output.toString());
break;
case SEND:
inputText.setText(""String_Node_Str"");
break;
case DISCONNECT:
Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_LONG).show();
EventBus.getDefault().post(new ActivityEvent(IDLE,outputView.getText().toString()));
break;
}
updateUIWithValidation();
}",0.7803076923076923
144261,"public static <T>Future<T> addTickCallback(Callable<T> callback){
  FutureTask<T> task=new FutureTask<T>(callback){
    @Override protected void done(){
      try {
        if (!isCancelled())         get();
      }
 catch (      Throwable t) {
        LogUtil.warn(""String_Node_Str"" + this);
        t.printStackTrace();
      }
    }
  }
;
  callbacks.add(task);
  return task;
}","public static <T>Future<T> addTickCallback(World world,Callable<T> callback){
  if (!callbacks.containsKey(world.provider.dimensionId))   callbacks.put(world.provider.dimensionId,new LinkedBlockingQueue<FutureTask>());
  FutureTask<T> task=new FutureTask<T>(callback){
    @Override protected void done(){
      try {
        if (!isCancelled())         get();
      }
 catch (      Throwable t) {
        LogUtil.warn(""String_Node_Str"" + this);
        t.printStackTrace();
      }
    }
  }
;
  try {
    callbacks.get(world.provider.dimensionId).put(task);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return task;
}",0.672514619883041
144262,"public static boolean shouldRegister(){
  return ConfigData.enableFireworkLauncher;
}","public static boolean shouldRegister(){
  return ConfigData.enableFireworkLauncher || ConfigData.enableInteractiveSorter;
}",0.8173076923076923
144263,"@SubscribeEvent public void onServerTick(TickEvent.ServerTickEvent event){
  if (event.type == TickEvent.Type.SERVER) {
    FutureTask callback;
    while ((callback=callbacks.poll()) != null) {
      callback.run();
    }
  }
}","@SubscribeEvent public void onServerTick(TickEvent.WorldTickEvent event){
  if (event.type == TickEvent.Type.WORLD) {
    if (callbacks.containsKey(event.world.provider.dimensionId)) {
      Queue<FutureTask> callbackList=callbacks.get(event.world.provider.dimensionId);
      FutureTask callback;
      while ((callback=callbackList.poll()) != null) {
        callback.run();
      }
    }
  }
}",0.6634615384615384
144264,"@LuaFunction public int extract(Side from,Side to,int slot,int amount) throws LuaException {
  if (from == to)   return 0;
  if (amount <= 0)   return 0;
  final TileEntity fromTile=getTileForSide(from);
  if (!(fromTile instanceof IInventory))   return 0;
  final IInventory fromInv=(IInventory)fromTile;
  if (slot < 1 || slot > fromInv.getSizeInventory())   throw new LuaException(""String_Node_Str"" + fromInv.getSizeInventory());
  final ItemStack stack=fromInv.getStackInSlot(--slot);
  if (stack == null)   return 0;
  amount=Math.min(stack.stackSize,amount);
  final TileEntity toTile=getTileForSide(to);
  if (toTile == null)   return 0;
  return sort(stack,amount,toTile,fromInv,ForgeDirection.getOrientation(from.ordinal()));
}","@LuaFunction public int extract(Side from,Side to,int slot,int amount) throws Exception {
  if (from == to)   return 0;
  if (amount <= 0)   return 0;
  final TileEntity fromTile=getTileForSide(from);
  if (!(fromTile instanceof IInventory))   return 0;
  final IInventory fromInv=(IInventory)fromTile;
  if (slot < 1 || slot > fromInv.getSizeInventory())   throw new LuaException(""String_Node_Str"" + fromInv.getSizeInventory());
  final ItemStack stack=fromInv.getStackInSlot(--slot);
  if (stack == null)   return 0;
  amount=Math.min(stack.stackSize,amount);
  final TileEntity toTile=getTileForSide(to);
  if (toTile == null)   return 0;
  return sort(stack,amount,toTile,fromInv,ForgeDirection.getOrientation(from.ordinal()));
}",0.9979577944179714
144265,"private int sort(ItemStack stack,int amount,TileEntity target,IInventory source,ForgeDirection direction){
  final IInteractiveSorterRegistry registry=InteractiveSorterRegistry.INSTANCE;
  final ItemStack outputStack=stack.copy().splitStack(amount);
  for (int i=0; i < registry.size(); ++i) {
    final IInteractiveSorterOutput output=registry.getSorterOutput(i);
    int sorted=output.output(outputStack,target,direction);
    if (sorted > 0) {
      stack.stackSize-=sorted;
      source.setInventorySlotContents(0,stack.stackSize > 0 ? stack : null);
      return sorted;
    }
  }
  return 0;
}","private int sort(final ItemStack stack,final int amount,final TileEntity target,final IInventory source,final ForgeDirection direction) throws Exception {
  final IInteractiveSorterRegistry registry=InteractiveSorterRegistry.INSTANCE;
  Future<Integer> callback=TickHandler.addTickCallback(worldObj,new Callable<Integer>(){
    @Override public Integer call() throws Exception {
      final ItemStack outputStack=stack.copy().splitStack(amount);
      for (int i=0; i < registry.size(); ++i) {
        final IInteractiveSorterOutput output=registry.getSorterOutput(i);
        int sorted=output.output(outputStack,target,direction);
        if (sorted > 0) {
          stack.stackSize-=sorted;
          source.setInventorySlotContents(0,stack.stackSize > 0 ? stack : null);
          return sorted;
        }
      }
      return 0;
    }
  }
);
  return callback.get();
}",0.7934782608695652
144266,"public Object[] launch(final World world,double x,double y,double z){
  final ItemStack firework=rocketBuffer.getNextItemStack();
  if (firework != null) {
    final EntityFireworkRocket rocket=new EntityFireworkRocket(world,x + xOffset,y + yOffset,z + zOffset,firework);
    TickHandler.addTickCallback(new Callable<Object>(){
      @Override public Object call() throws Exception {
        world.spawnEntityInWorld(rocket);
        coolDownActive=true;
        return null;
      }
    }
);
    return new Object[]{true};
  }
  return new Object[]{false,""String_Node_Str""};
}","public Object[] launch(final World world,double x,double y,double z){
  final ItemStack firework=rocketBuffer.getNextItemStack();
  if (firework != null) {
    final EntityFireworkRocket rocket=new EntityFireworkRocket(world,x + xOffset,y + yOffset,z + zOffset,firework);
    TickHandler.addTickCallback(world,new Callable<Object>(){
      @Override public Object call() throws Exception {
        world.spawnEntityInWorld(rocket);
        coolDownActive=true;
        return null;
      }
    }
);
    return new Object[]{true};
  }
  return new Object[]{false,""String_Node_Str""};
}",0.9948275862068966
144267,"@LuaFunction public ItemStack getCraftingSlot(int slot) throws LuaException {
  --slot;
  if (slot >= 0 || slot <= craftingInv.getSizeInventory()) {
    return craftingInv.getStackInSlot(slot);
  }
  return null;
}","@LuaFunction public ItemStack getCraftingSlot(int slot) throws LuaException {
  --slot;
  if (slot >= 0 && slot < craftingInv.getSizeInventory()) {
    return craftingInv.getStackInSlot(slot);
  }
  return null;
}",0.9882903981264636
144268,"/** 
 * Loads a pre-made Firework Rocket from the Firework Launchers inventory into the end of the firework rocket launch queue. Or loads a Firework Star from the inventory into the star queue.
 * @param slot the slot the rocket is in
 * @return the result. if crafting failed it will return false, and a string message as to why it failed. if craftingsucceeded then it will return true, and how many more firework stars can be added to the firework rocket
 */
@LuaFunction(isMultiReturn=true) public Object[] load(int slot){
  --slot;
  if (slot < 0 || slot > getSizeInventory()) {
    return new Object[]{false,""String_Node_Str"" + getSizeInventory()};
  }
  final ItemStack stack=getStackInSlot(slot);
  final Item item=stack.getItem();
  if (item instanceof ItemFirework) {
    bufferRocket.addItemStack(stack.splitStack(1));
    return new Object[]{true};
  }
  if (item instanceof ItemFireworkCharge) {
    bufferStar.addItemStack(stack.splitStack(1));
    return new Object[]{true};
  }
  return new Object[]{false,""String_Node_Str""};
}","/** 
 * Loads a pre-made Firework Rocket from the Firework Launchers inventory into the end of the firework rocket launch queue. Or loads a Firework Star from the inventory into the star queue.
 * @param slot the slot the rocket is in
 * @return the result. if crafting failed it will return false, and a string message as to why it failed. if craftingsucceeded then it will return true, and how many more firework stars can be added to the firework rocket
 */
@LuaFunction(isMultiReturn=true) public Object[] load(int slot){
  --slot;
  if (slot < 0 || slot > getSizeInventory()) {
    return new Object[]{false,""String_Node_Str"" + getSizeInventory()};
  }
  final ItemStack stack=getStackInSlot(slot);
  if (stack == null) {
    return new Object[]{false,""String_Node_Str""};
  }
  final Item item=stack.getItem();
  if (item instanceof ItemFirework) {
    bufferRocket.addItemStack(stack.splitStack(1));
    return new Object[]{true};
  }
  if (item instanceof ItemFireworkCharge) {
    bufferStar.addItemStack(stack.splitStack(1));
    return new Object[]{true};
  }
  return new Object[]{false,""String_Node_Str""};
}",0.8246182322998612
144269,"/** 
 * Crafts a <a href=""http://minecraft.gamepedia.com/Firework_Rocket"">Firework Rocket</a> with a particular height, and firework stars. After crafting it will add the rocket to the launch queue. If there are not enough ingredients to finalise the rocket, it will not craft or add the rocket to the queue.
 * @param height  the height the rocket can travel
 * @param starIds the list of firework star IDs to include in the rocket
 * @return the result. if crafting failed it will return false, and a string message as to why it failed. if craftingsucceeded then it will return true and the ID (not session persistent) of the firework rocket
 */
@LuaFunction(isMultiReturn=true) public Object[] craftFireworkRocket(int height,ArrayList<Integer> starIds){
  if (!bufferRocket.hasFreeSpace()) {
    return new Object[]{false,""String_Node_Str""};
  }
  if (!(height >= 1 && height <= 3)) {
    return new Object[]{false,""String_Node_Str""};
  }
  if (findQtyOf(PAPER) == 0) {
    return new Object[]{false,""String_Node_Str""};
  }
  final int qty=findQtyOf(GUNPOWDER);
  if (qty < height) {
    return new Object[]{false,""String_Node_Str"" + (height - qty) + ""String_Node_Str""};
  }
  if (starIds.size() > (MAX_SLOTS - height - 1)) {
    return new Object[]{false,""String_Node_Str""};
  }
  for (  final Integer id : starIds) {
    if (!bufferStar.containsItemStackWithId(id)) {
      return new Object[]{false,""String_Node_Str"" + id};
    }
  }
  final ArrayList<ItemStack> items=Lists.newArrayList();
  items.add(extract(PAPER));
  for (int i=0; i < height; ++i) {
    items.add(extract(GUNPOWDER));
  }
  for (  final Integer id : starIds) {
    items.add(bufferStar.getItemStackWithId(id));
  }
  final InventoryCrafting crafting=new InventoryCrafting(new Container(){
    @Override public boolean canInteractWith(    EntityPlayer player){
      return true;
    }
  }
,items.size() + 1,1);
  for (int i=0; i < items.size(); ++i) {
    crafting.setInventorySlotContents(i,items.get(i));
  }
  ItemStack result=manager.findMatchingRecipe(crafting,worldObj);
  if (result == null) {
    return new Object[]{false,""String_Node_Str""};
  }
  return new Object[]{true,bufferRocket.addItemStack(result)};
}","/** 
 * Crafts a <a href=""http://minecraft.gamepedia.com/Firework_Rocket"">Firework Rocket</a> with a particular height, and firework stars. After crafting it will add the rocket to the launch queue. If there are not enough ingredients to finalise the rocket, it will not craft or add the rocket to the queue.
 * @param height  the height the rocket can travel
 * @param starIds the list of firework star IDs to include in the rocket
 * @return the result. if crafting failed it will return false, and a string message as to why it failed. if craftingsucceeded then it will return true and the ID (not session persistent) of the firework rocket
 */
@LuaFunction(isMultiReturn=true) public Object[] craftFireworkRocket(int height,List<Double> starIds){
  if (!bufferRocket.hasFreeSpace()) {
    return new Object[]{false,""String_Node_Str""};
  }
  if (!(height >= 1 && height <= 3)) {
    return new Object[]{false,""String_Node_Str""};
  }
  if (findQtyOf(PAPER) == 0) {
    return new Object[]{false,""String_Node_Str""};
  }
  final int qty=findQtyOf(GUNPOWDER);
  if (qty < height) {
    return new Object[]{false,""String_Node_Str"" + (height - qty) + ""String_Node_Str""};
  }
  if (starIds.size() > (MAX_SLOTS - height - 1)) {
    return new Object[]{false,""String_Node_Str""};
  }
  for (  final Double id : starIds) {
    int rId=id.intValue();
    if (!bufferStar.containsItemStackWithId(rId)) {
      return new Object[]{false,""String_Node_Str"" + rId};
    }
  }
  final ArrayList<ItemStack> items=Lists.newArrayList();
  items.add(extract(PAPER));
  for (int i=0; i < height; ++i) {
    items.add(extract(GUNPOWDER));
  }
  for (  final Double id : starIds) {
    items.add(bufferStar.getItemStackWithId(id.intValue()));
  }
  final InventoryCrafting crafting=new InventoryCrafting(new Container(){
    @Override public boolean canInteractWith(    EntityPlayer player){
      return true;
    }
  }
,items.size() + 1,1);
  for (int i=0; i < items.size(); ++i) {
    crafting.setInventorySlotContents(i,items.get(i));
  }
  ItemStack result=manager.findMatchingRecipe(crafting,worldObj);
  if (result == null) {
    return new Object[]{false,""String_Node_Str""};
  }
  return new Object[]{true,bufferRocket.addItemStack(result)};
}",0.9746949841843652
144270,"/** 
 * Loads a pre-made Firework Rocket from the Firework Launchers inventory into the end of the firework rocket launch queue. Or loads a Firework Star from the inventory into the star queue.
 * @param slot the slot the rocket is in
 * @return the result. if crafting failed it will return false, and a string message as to why it failed. if craftingsucceeded then it will return true, and how many more firework stars can be added to the firework rocket
 */
@LuaFunction(isMultiReturn=true) public Object[] load(int slot){
  --slot;
  if (slot < 0 || slot > getSizeInventory()) {
    return new Object[]{false,""String_Node_Str"" + getSizeInventory()};
  }
  final ItemStack stack=getStackInSlot(slot);
  if (stack == null) {
    return new Object[]{false,""String_Node_Str""};
  }
  final Item item=stack.getItem();
  if (item instanceof ItemFirework) {
    bufferRocket.addItemStack(stack.splitStack(1));
    return new Object[]{true};
  }
  if (item instanceof ItemFireworkCharge) {
    bufferStar.addItemStack(stack.splitStack(1));
    return new Object[]{true};
  }
  return new Object[]{false,""String_Node_Str""};
}","/** 
 * Loads a single pre-made Firework Rocket from the Firework Launchers inventory into the end of the firework rocket launch queue. Or loads a Firework Star from the inventory into the star queue.
 * @param slot the slot the rocket is in
 * @return the result. if crafting failed it will return false, and a string message as to why it failed. if craftingsucceeded then it will return true, and how many more firework stars can be added to the firework rocket
 */
@LuaFunction(isMultiReturn=true) public Object[] load(int slot){
  --slot;
  if (slot < 0 || slot > getSizeInventory()) {
    return new Object[]{false,""String_Node_Str"" + getSizeInventory()};
  }
  final ItemStack stack=getStackInSlot(slot);
  if (stack == null) {
    return new Object[]{false,""String_Node_Str""};
  }
  final Item item=stack.getItem();
  QueueBuffer buffer=null;
  if (item instanceof ItemFirework) {
    buffer=bufferRocket;
  }
  if (item instanceof ItemFireworkCharge) {
    buffer=bufferStar;
  }
  if (buffer == null) {
    return new Object[]{false,""String_Node_Str""};
  }
  if (stack.stackSize == 1) {
    setInventorySlotContents(slot,null);
  }
  return new Object[]{true,buffer.addItemStack(stack.splitStack(1))};
}",0.8151008151008151
144271,"protected int findQtyOf(ItemStack template){
  return InventoryUtils.findQtyOf(this,template);
}","protected int findQtyOf(ItemStack stack){
  return InventoryUtils.findQtyOf(this,stack);
}",0.9032258064516128
144272,"protected ItemStack extract(ItemStack template,boolean ignoreMeta){
  return InventoryUtils.extract(this,template,1,ignoreMeta);
}","protected ItemStack extract(ItemStack stack){
  return InventoryUtils.takeItems(this,stack,1);
}",0.7345132743362832
144273,"private static boolean validColor(int color,boolean multi){
  if (color < 0 || (multi && color > 65535) || (!multi && color > 32768))   return false;
  if (multi)   return true;
  double val=Math.log(color) / Math.log(2);
  return val >= 0 && val <= 15 && val % 1 == 0;
}","private static boolean validColor(int color,boolean multi){
  if (color < 1 || (multi && color > 65535) || (!multi && color > 32768))   return false;
  if (multi)   return true;
  double val=Math.log(color) / Math.log(2);
  return val >= 0 && val <= 15 && val % 1 == 0;
}",0.996309963099631
144274,"@Override protected ItemStack extract(ItemStack template){
  final ItemStack stack=template.copy();
  stack.stackSize=1;
  return stack;
}","@Override protected ItemStack extract(ItemStack stack){
  final ItemStack s=stack.copy();
  s.stackSize=1;
  return s;
}",0.8914728682170543
144275,"@Override protected int findQtyOf(ItemStack template){
  return 64;
}","@Override protected int findQtyOf(ItemStack stack){
  return 64;
}",0.9333333333333332
144276,"public void insertOrExplode(IInventory inv,World world,int x,int y,int z,int id){
  insertOrExplodeInternal(getItemStackWithId(id),inv,world,x,y,z);
}","public void insertOrExplode(IInventory inv,World world,int x,int y,int z,int id){
  InventoryUtils.storeOrDropItemStack(inv,getItemStackWithId(id),world,x,y,z);
}",0.7948717948717948
144277,"public void explodeBuffer(World world,int x,int y,int z){
  for (  final ItemStackWrapper item : inventory) {
    InventoryUtils.spawnInWorld(item.getItemStack(),world,x,y,z);
  }
}","public void explodeBuffer(World world,int x,int y,int z){
  for (  final ItemStackWrapper item : inventory) {
    InventoryUtils.spawnItemStackInWorld(item.getItemStack(),world,x,y,z);
  }
}",0.9757412398921832
144278,"private void store(final ItemStack stack){
  if (!storeItemStack(stack)) {
    ChunkCoordinates coordinates=turtle.getPosition();
    int direction=turtle.getDirection();
    int x=coordinates.posX + Facing.offsetsXForSide[direction];
    int y=coordinates.posY + Facing.offsetsYForSide[direction];
    int z=coordinates.posZ + Facing.offsetsZForSide[direction];
    InventoryUtils.spawnInWorld(stack,turtle.getWorld(),x,y,z);
  }
}","private void store(final ItemStack stack){
  if (!storeItemStack(stack)) {
    ChunkCoordinates coordinates=turtle.getPosition();
    int direction=turtle.getDirection();
    int x=coordinates.posX + Facing.offsetsXForSide[direction];
    int y=coordinates.posY + Facing.offsetsYForSide[direction];
    int z=coordinates.posZ + Facing.offsetsZForSide[direction];
    InventoryUtils.spawnItemStackInWorld(stack,turtle.getWorld(),x,y,z);
  }
}",0.9896907216494846
144279,"public static void explodeInventory(IInventory inv,World world,int x,int y,int z){
  for (int i=0; i < inv.getSizeInventory(); ++i) {
    spawnInWorld(inv.getStackInSlot(i),world,x,y,z);
  }
}","public static void explodeInventory(IInventory inv,World world,int x,int y,int z){
  for (int i=0; i < inv.getSizeInventory(); ++i) {
    spawnItemStackInWorld(inv.getStackInSlot(i),world,x,y,z);
  }
}",0.9770992366412212
144280,"public static int findQtyOf(IInventory inv,ItemStack stack){
  int qty=0;
  for (int i=0; i < inv.getSizeInventory(); ++i) {
    final ItemStack item=inv.getStackInSlot(i);
    if (areItemsStackable(item,stack)) {
      qty+=stack.stackSize;
    }
  }
  return qty;
}","public static int findQtyOf(IInventory inv,ItemStack stack){
  int qty=0;
  for (int i=0; i < inv.getSizeInventory(); ++i) {
    final ItemStack item=inv.getStackInSlot(i);
    if (areItemsStackable(item,stack)) {
      qty+=item.stackSize;
    }
  }
  return qty;
}",0.9831144465290806
144281,"public static boolean areItemsStackable(ItemStack a,ItemStack b){
  if (a == b) {
    return true;
  }
  if (a == null || b == null) {
    return false;
  }
  if (a.getItem() == b.getItem()) {
    if (((!a.getHasSubtypes()) && (!a.isItemStackDamageable())) || (a.getItemDamage() == b.getItemDamage())) {
      if (a.stackTagCompound == null && b.stackTagCompound == null) {
        return true;
      }
      if (a.stackTagCompound != null && b.stackTagCompound != null && a.stackTagCompound.equals(b.stackTagCompound)) {
        return true;
      }
    }
  }
  return false;
}","public static boolean areItemsStackable(ItemStack a,ItemStack b){
  if (a == null || b == null) {
    return false;
  }
  if (a == b) {
    return true;
  }
  if (a.getItem() == b.getItem()) {
    if (((!a.getHasSubtypes()) && (!a.isItemStackDamageable())) || (a.getItemDamage() == b.getItemDamage())) {
      if (a.stackTagCompound == null && b.stackTagCompound == null) {
        return true;
      }
      if (a.stackTagCompound != null && b.stackTagCompound != null && a.stackTagCompound.equals(b.stackTagCompound)) {
        return true;
      }
    }
  }
  return false;
}",0.9359861591695502
144282,"private static ArrayList<String> getDescription(QueueBuffer buffer,int id) throws LuaException {
  final ArrayList<String> info=Lists.newArrayList();
  final ItemStack stack=buffer.getItemStackWithId(id);
  stack.getItem().addInformation(stack,null,info,true);
  for (int i=0; i < info.size(); ++i) {
    info.set(i,ChatAllowedCharacters.filerAllowedCharacters(info.get(i)));
  }
  return info;
}","private static ArrayList<String> getDescription(QueueBuffer buffer,int id) throws LuaException {
  final ArrayList<String> info=Lists.newArrayList();
  final ItemStack stack=buffer.peekItemStackWithId(id);
  stack.getItem().addInformation(stack,null,info,true);
  for (int i=0; i < info.size(); ++i) {
    info.set(i,ChatAllowedCharacters.filerAllowedCharacters(info.get(i)));
  }
  return info;
}",0.9911727616645648
144283,"/** 
 * Loads a pre-made Firework Rocket from the Firework Launchers inventory into the end of the firework rocket launch queue. Or loads a Firework Star from the inventory into the star queue.
 * @param slot the slot the rocket is in
 * @return the result. if crafting failed it will return false, and a string message as to why it failed. if craftingsucceeded then it will return true, and how many more firework stars can be added to the firework rocket
 */
@LuaFunction(isMultiReturn=true) public Object[] load(int slot){
  --slot;
  if (slot < 0 || slot > getSizeInventory()) {
    return new Object[]{false,""String_Node_Str"" + getSizeInventory()};
  }
  final ItemStack stack=getStackInSlot(slot);
  final Item item=stack.getItem();
  if (item instanceof ItemFirework) {
    bufferRocket.addItemStack(stack);
    return new Object[]{true};
  }
  if (item instanceof ItemFireworkCharge) {
    bufferStar.addItemStack(stack);
    return new Object[]{true};
  }
  return new Object[]{false,""String_Node_Str""};
}","/** 
 * Loads a pre-made Firework Rocket from the Firework Launchers inventory into the end of the firework rocket launch queue. Or loads a Firework Star from the inventory into the star queue.
 * @param slot the slot the rocket is in
 * @return the result. if crafting failed it will return false, and a string message as to why it failed. if craftingsucceeded then it will return true, and how many more firework stars can be added to the firework rocket
 */
@LuaFunction(isMultiReturn=true) public Object[] load(int slot){
  --slot;
  if (slot < 0 || slot > getSizeInventory()) {
    return new Object[]{false,""String_Node_Str"" + getSizeInventory()};
  }
  final ItemStack stack=getStackInSlot(slot);
  final Item item=stack.getItem();
  if (item instanceof ItemFirework) {
    bufferRocket.addItemStack(stack.splitStack(1));
    return new Object[]{true};
  }
  if (item instanceof ItemFireworkCharge) {
    bufferStar.addItemStack(stack.splitStack(1));
    return new Object[]{true};
  }
  return new Object[]{false,""String_Node_Str""};
}",0.9863813229571984
144284,"public ItemStack getNextItemStack(){
  return inventory.size() > 0 ? inventory.remove(1).getItemStack() : null;
}","public ItemStack getNextItemStack(){
  return inventory.size() > 0 ? inventory.remove(0).getItemStack() : null;
}",0.991150442477876
144285,"@LuaFunction public void playNote(int instrument,int pitch) throws Exception {
  Preconditions.checkArgument(instrument >= MIN_INST && instrument <= MAX_INST,""String_Node_Str"");
  Preconditions.checkArgument(pitch >= MIN_PITCH && pitch <= MAX_PITCH,""String_Node_Str"");
  Preconditions.checkArgument(ticker++ <= MAX_TICK,""String_Node_Str"" + MAX_TICK + ""String_Node_Str"");
  Preconditions.checkArgument(ConfigHandler.noteRange > 0,""String_Node_Str"");
  play(worldObj,xCoord,yCoord,zCoord,instrument,pitch);
  int dimId=worldObj.provider.dimensionId;
  MessageGeneric message=new MessageGeneric();
  message.intData=new int[]{dimId,xCoord,yCoord,zCoord,instrument,pitch};
  PacketHandler.INSTANCE.sendToAllAround(message,new NetworkRegistry.TargetPoint(dimId,xCoord,yCoord,zCoord,ConfigHandler.noteRange));
}","@LuaFunction public void playNote(int instrument,int pitch) throws Exception {
  Preconditions.checkArgument(instrument >= MIN_INST && instrument <= MAX_INST,""String_Node_Str"");
  Preconditions.checkArgument(pitch >= MIN_PITCH && pitch <= MAX_PITCH,""String_Node_Str"");
  Preconditions.checkArgument(ticker++ < MAX_TICK,""String_Node_Str"" + MAX_TICK + ""String_Node_Str"");
  Preconditions.checkArgument(ConfigHandler.noteRange > 0,""String_Node_Str"");
  play(worldObj,xCoord,yCoord,zCoord,instrument,pitch);
  int dimId=worldObj.provider.dimensionId;
  MessageGeneric message=new MessageGeneric();
  message.intData=new int[]{dimId,xCoord,yCoord,zCoord,instrument,pitch};
  PacketHandler.INSTANCE.sendToAllAround(message,new NetworkRegistry.TargetPoint(dimId,xCoord,yCoord,zCoord,ConfigHandler.noteRange));
}",0.9993784959602238
144286,"@Override public float getPlayerRelativeBlockHardness(EntityPlayer player,World world,int x,int y,int z){
  final TileEntity tile=world.getTileEntity(x,y,z);
  if ((((TileMoarP)tile).canPlayerAccess(player) || isOpBreakable(player))) {
    return blockHardness;
  }
  return -1.0f;
}","@Override public float getPlayerRelativeBlockHardness(EntityPlayer player,World world,int x,int y,int z){
  final TileEntity tile=world.getTileEntity(x,y,z);
  if (tile == null || (((TileMoarP)tile).canPlayerAccess(player) || isOpBreakable(player))) {
    return blockHardness;
  }
  return -1.0f;
}",0.972508591065292
144287,"@Override public IMessage onMessage(MessageIronNote message,MessageContext ctx){
  final World world=MoarPeripherals.proxy.getClientWorld(intData[0]);
  TileIronNote.play(world,intData[1],intData[2],intData[3],intData[4],intData[5]);
  return null;
}","@Override public IMessage onMessage(MessageIronNote message,MessageContext ctx){
  final World world=MoarPeripherals.proxy.getClientWorld(message.intData[0]);
  TileIronNote.play(world,message.intData[1],message.intData[2],message.intData[3],message.intData[4],message.intData[5]);
  return null;
}",0.9124087591240876
144288,"public static void init(){
  INSTANCE.registerMessage(MessageIronNote.class,MessageIronNote.class,id++,Side.SERVER);
}","public static void init(){
  INSTANCE.registerMessage(MessageIronNoteHandler.class,MessageGeneric.class,id++,Side.CLIENT);
}",0.8760330578512396
144289,"@LuaFunction public void playNote(int instrument,int pitch) throws Exception {
  Preconditions.checkArgument(instrument >= MIN_INST && instrument <= MAX_INST,""String_Node_Str"");
  Preconditions.checkArgument(pitch >= MIN_PITCH && pitch <= MAX_PITCH,""String_Node_Str"");
  Preconditions.checkArgument(ticker++ <= MAX_TICK,""String_Node_Str"" + MAX_TICK + ""String_Node_Str"");
  Preconditions.checkArgument(ConfigHandler.noteRange > 0,""String_Node_Str"");
  play(worldObj,xCoord,yCoord,zCoord,instrument,pitch);
  int dimId=worldObj.provider.dimensionId;
  MessageIronNote message=new MessageIronNote();
  message.intData=new int[]{dimId,xCoord,yCoord,zCoord,instrument,pitch};
  PacketHandler.INSTANCE.sendToAllAround(message,new NetworkRegistry.TargetPoint(dimId,xCoord,yCoord,zCoord,ConfigHandler.noteRange));
}","@LuaFunction public void playNote(int instrument,int pitch) throws Exception {
  Preconditions.checkArgument(instrument >= MIN_INST && instrument <= MAX_INST,""String_Node_Str"");
  Preconditions.checkArgument(pitch >= MIN_PITCH && pitch <= MAX_PITCH,""String_Node_Str"");
  Preconditions.checkArgument(ticker++ <= MAX_TICK,""String_Node_Str"" + MAX_TICK + ""String_Node_Str"");
  Preconditions.checkArgument(ConfigHandler.noteRange > 0,""String_Node_Str"");
  play(worldObj,xCoord,yCoord,zCoord,instrument,pitch);
  int dimId=worldObj.provider.dimensionId;
  MessageGeneric message=new MessageGeneric();
  message.intData=new int[]{dimId,xCoord,yCoord,zCoord,instrument,pitch};
  PacketHandler.INSTANCE.sendToAllAround(message,new NetworkRegistry.TargetPoint(dimId,xCoord,yCoord,zCoord,ConfigHandler.noteRange));
}",0.9813895781637716
144290,"TriplesMapImpl(RDF rdf,LogicalTable lt,SubjectMap sm,String resourceIdentifier){
  super(rdf);
  pomList=new ArrayList<>();
  setLogicalTable(lt);
  setSubjectMap(sm);
  setNode(getRDF().createIRI(resourceIdentifier));
}","TriplesMapImpl(RDF rdf,LogicalTable lt,SubjectMap sm,String resourceIdentifier){
  super(rdf);
  pomList=new ArrayList<>();
  setLogicalTable(lt);
  setSubjectMap(sm);
  String triplesMapIRI=resourceIdentifier.contains(""String_Node_Str"") ? resourceIdentifier : ""String_Node_Str"" + resourceIdentifier;
  setNode(getRDF().createIRI(triplesMapIRI));
}",0.7112676056338029
144291,"@Override public void addGraphMap(List<GraphMap> gms){
  graphList.addAll(gms);
}","@Override public void addGraphMap(GraphMap gm){
  graphList.add(gm);
}",0.9271523178807948
144292,"public PredicateObjectMapImpl(RDF rdf,List<PredicateMap> pms,List<ObjectMap> oms,List<RefObjectMap> roms){
  super(rdf);
  predList=new ArrayList<>();
  objList=new ArrayList<>();
  refObjList=new ArrayList<>();
  graphList=new ArrayList<>();
  if (pms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
 else   if (pms.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (oms == null && roms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
 else   if (oms == null && roms.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (roms == null && oms.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (oms != null && roms != null && oms.isEmpty() && roms.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    for (    PredicateMap pm : pms) {
      addPredicateMap(pm);
    }
    if (oms != null) {
      for (      ObjectMap om : oms) {
        addObjectMap(om);
      }
    }
    if (roms != null) {
      for (      RefObjectMap rom : roms) {
        addRefObjectMap(rom);
      }
    }
    setNode(getRDF().createBlankNode());
  }
}","PredicateObjectMapImpl(RDF rdf,List<PredicateMap> pms,List<ObjectMap> oms,List<RefObjectMap> roms){
  super(rdf);
  predList=new ArrayList<>();
  objList=new ArrayList<>();
  refObjList=new ArrayList<>();
  graphList=new ArrayList<>();
  if (pms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
 else   if (pms.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (oms == null && roms == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
 else   if (oms == null && roms.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (roms == null && oms.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (oms != null && roms != null && oms.isEmpty() && roms.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else {
    for (    PredicateMap pm : pms) {
      addPredicateMap(pm);
    }
    if (oms != null) {
      for (      ObjectMap om : oms) {
        addObjectMap(om);
      }
    }
    if (roms != null) {
      for (      RefObjectMap rom : roms) {
        addRefObjectMap(rom);
      }
    }
    setNode(getRDF().createBlankNode());
  }
}",0.9971062422488632
144293,"@Override public void setConstant(String constVal){
  if (getTermMapType() == TermMapType.CONSTANT_VALUED) {
    if (constVal != null) {
      this.constVal=constVal;
    }
 else {
      throw new NullPointerException(""String_Node_Str"");
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","@Override public void setConstant(String constVal){
  if (getTermMapType() == TermMapType.CONSTANT_VALUED) {
    if (constVal != null) {
      this.constVal=constVal;
      if (!constVal.startsWith(""String_Node_Str"")) {
        termtype=lc.createResource(R2RMLVocabulary.TERM_LITERAL);
      }
    }
 else {
      throw new NullPointerException(""String_Node_Str"");
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.8331143232588699
144294,"/** 
 * A Turtle parser.
 * @param is The InputStream to read from.
 * @return The set of RDFTriples that have been read.
 * @throws ParseException
 */
public static Set<RDFTriple> readTurtle(InputStream is) throws ParseException {
  Set<RDFTriple> s=new HashSet<RDFTriple>();
  TurtleParser tp=new TurtleParser(is,new RDFConsAdapter(s),IRI.create(""String_Node_Str""));
  tp.parseDocument();
  return s;
}","/** 
 * A Turtle parser.
 * @param is The InputStream to read from.
 * @return The set of RDFTriples that have been read.
 * @throws ParseException
 */
public static Set<RDFTriple> readTurtle(InputStream is) throws ParseException {
  Set<RDFTriple> s=new HashSet<RDFTriple>();
  TurtleParser tp=new TurtleParser(is,new RDFConsAdapter(s),IRI.create(""String_Node_Str"").toString());
  tp.parseDocument();
  return s;
}",0.9865689865689866
144295,"@Test public void testQueries() throws DbException, IOException {
  run(db,new LdbcQuery2(19791209300143L,new Date(1354060800000L),LIMIT));
  db.close();
  workload.close();
}","@Test public void testQueries() throws DbException, IOException {
  run(db,new LdbcQuery1(30786325579101L,""String_Node_Str"",LIMIT));
  run(db,new LdbcQuery2(19791209300143L,new Date(1354060800000L),LIMIT));
  run(db,new LdbcQuery3(15393162790207L,""String_Node_Str"",""String_Node_Str"",new Date(1291161600000L),30,LIMIT));
  run(db,new LdbcQuery4(10995116278874L,new Date(1338508800000L),28,LIMIT));
  run(db,new LdbcQuery5(15393162790207L,new Date(1344643200000L),LIMIT));
  run(db,new LdbcQuery6(30786325579101L,""String_Node_Str"",LIMIT));
  run(db,new LdbcQuery7(26388279067534L,LIMIT));
  run(db,new LdbcQuery8(2199023256816L,LIMIT));
  run(db,new LdbcQuery9(32985348834013L,new Date(1346112000000L),LIMIT));
  run(db,new LdbcQuery10(30786325579101L,7,LIMIT));
  run(db,new LdbcQuery11(30786325579101L,""String_Node_Str"",2004,LIMIT));
  run(db,new LdbcQuery12(19791209300143L,""String_Node_Str"",LIMIT));
  run(db,new LdbcQuery13(32985348833679L,26388279067108L));
  run(db,new LdbcQuery14(32985348833679L,2199023256862L));
  db.close();
  workload.close();
}",0.2843216896831844
144296,"public InteractiveWorkloadSchema(){
  super();
  vTypes.put(""String_Node_Str"",0);
  vTypes.put(""String_Node_Str"",1);
  vTypes.put(""String_Node_Str"",2);
  vTypes.put(""String_Node_Str"",3);
  vTypes.put(""String_Node_Str"",4);
  vTypes.put(""String_Node_Str"",5);
  vTypes.put(""String_Node_Str"",6);
  vTypes.put(""String_Node_Str"",7);
  vTypeReverse.put(0,""String_Node_Str"");
  vTypeReverse.put(1,""String_Node_Str"");
  vTypeReverse.put(2,""String_Node_Str"");
  vTypeReverse.put(3,""String_Node_Str"");
  vTypeReverse.put(4,""String_Node_Str"");
  vTypeReverse.put(5,""String_Node_Str"");
  vTypeReverse.put(6,""String_Node_Str"");
  vTypeReverse.put(7,""String_Node_Str"");
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Arrays.class);
  vPClassMap.put(""String_Node_Str"",Date.class);
  vPClassMap.put(""String_Node_Str"",Arrays.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Integer.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Integer.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  ePClassMap.put(""String_Node_Str"",Long.class);
  ePClassMap.put(""String_Node_Str"",Integer.class);
  ePClassMap.put(""String_Node_Str"",Integer.class);
  ePClassMap.put(""String_Node_Str"",Long.class);
  ePClassMap.put(""String_Node_Str"",Date.class);
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  ePMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str""})));
  ePMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str""})));
  ePMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str""})));
  ePMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str""})));
  ePMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str""})));
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  vpFileMap.put(""String_Node_Str"",""String_Node_Str"");
  vpFileMap.put(""String_Node_Str"",""String_Node_Str"");
}","public InteractiveWorkloadSchema(){
  super();
  vTypes.put(""String_Node_Str"",0);
  vTypes.put(""String_Node_Str"",1);
  vTypes.put(""String_Node_Str"",2);
  vTypes.put(""String_Node_Str"",3);
  vTypes.put(""String_Node_Str"",4);
  vTypes.put(""String_Node_Str"",5);
  vTypes.put(""String_Node_Str"",6);
  vTypes.put(""String_Node_Str"",7);
  vTypeReverse.put(0,""String_Node_Str"");
  vTypeReverse.put(1,""String_Node_Str"");
  vTypeReverse.put(2,""String_Node_Str"");
  vTypeReverse.put(3,""String_Node_Str"");
  vTypeReverse.put(4,""String_Node_Str"");
  vTypeReverse.put(5,""String_Node_Str"");
  vTypeReverse.put(6,""String_Node_Str"");
  vTypeReverse.put(7,""String_Node_Str"");
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Arrays.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",Arrays.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Integer.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Integer.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",Long.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  vPClassMap.put(""String_Node_Str"",String.class);
  ePClassMap.put(""String_Node_Str"",Long.class);
  ePClassMap.put(""String_Node_Str"",Integer.class);
  ePClassMap.put(""String_Node_Str"",Integer.class);
  ePClassMap.put(""String_Node_Str"",Long.class);
  ePClassMap.put(""String_Node_Str"",Long.class);
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  vpMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""})));
  ePMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str""})));
  ePMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str""})));
  ePMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str""})));
  ePMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str""})));
  ePMap.put(""String_Node_Str"",new HashSet<>(Arrays.asList(new String[]{""String_Node_Str""})));
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  eFileMap.put(""String_Node_Str"",""String_Node_Str"");
  vpFileMap.put(""String_Node_Str"",""String_Node_Str"");
  vpFileMap.put(""String_Node_Str"",""String_Node_Str"");
}",0.99868225992423
144297,"/** 
 * Loads n-Cardinality (1NF violating) vertex properties from the csv files
 * @param dir     Directory in which the files reside
 * @param vpMap   Map between vertices and their property files
 * @throws IOException              thrown if files / directory are inaccessible
 * @throws SchemaViolationException if file schema doesn't match workload schema
 */
private void loadVertexProperties(File dir,Map<String,String> vpMap) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  Map.Entry<String,String> entry : vpMap.entrySet()) {
    HashSet<String> fileSet=new HashSet<>();
    final String fNameSuffix=entry.getValue();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(fNameSuffix + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(dir,fName)),""String_Node_Str""));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      short suffix;
      String vLabel=entry.getKey().split(TUPLESPLIT)[0];
      try {
        validateVHeader(s,vLabel,header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      JanusGraphTransaction transaction=graph.newTransaction();
      try {
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 1000 == 0) {
            logger.info(""String_Node_Str"" + counter);
          }
          String[] row=line.split(CSVSPLIT);
          Long vertexId=Long.parseLong(row[0]);
          Vertex vertex=transaction.traversal().V().has(header[0],vertexId).next();
          if (vertex == null) {
            logger.error(""String_Node_Str"",row[0],line);
            continue;
          }
          for (int i=1; i < rowLength; i++) {
            vertex.property(header[i],parseEntry(row[i],s.getVPropertyClass(vLabel,header[i]).getSimpleName()));
          }
          counter++;
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + entry.getKey());
        br.close();
        graph.close();
        e.printStackTrace();
      }
 finally {
        br.close();
      }
      transaction.commit();
    }
  }
  logger.info(""String_Node_Str"");
}","/** 
 * Loads n-Cardinality (1NF violating) vertex properties from the csv files
 * @param dir     Directory in which the files reside
 * @param vpMap   Map between vertices and their property files
 * @throws IOException              thrown if files / directory are inaccessible
 * @throws SchemaViolationException if file schema doesn't match workload schema
 */
private void loadVertexProperties(File dir,Map<String,String> vpMap) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  Map.Entry<String,String> entry : vpMap.entrySet()) {
    HashSet<String> fileSet=new HashSet<>();
    final String fNameSuffix=entry.getValue();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(fNameSuffix + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(dir,fName)),""String_Node_Str""));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      String vLabel=entry.getKey().split(TUPLESPLIT)[0];
      try {
        validateVPHeader(s,vLabel,header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      JanusGraphTransaction transaction=graph.newTransaction();
      try {
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 1000 == 0) {
            logger.info(""String_Node_Str"" + counter);
          }
          String[] row=line.split(CSVSPLIT);
          Long vertexId=Long.parseLong(row[0]);
          Vertex vertex=transaction.traversal().V().has(header[0],vertexId).next();
          if (vertex == null) {
            logger.error(""String_Node_Str"",row[0],line);
            continue;
          }
          vertex.property(vLabel + ""String_Node_Str"" + header[1],parseEntry(row[1],s.getVPropertyClass(vLabel,header[1]).getSimpleName()));
          counter++;
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + entry.getKey());
        br.close();
        graph.close();
        e.printStackTrace();
      }
 finally {
        br.close();
      }
      transaction.commit();
    }
  }
  logger.info(""String_Node_Str"");
}",0.9349341595662276
144298,"/** 
 * Validates the file header against the schema used by the importer
 * @param s      schema to validate against
 * @param vLabel vertex type to validate against
 * @param header header of csv file
 * @return suffix of this vertex
 */
private void validateVHeader(WorkLoadSchema s,String vLabel,String[] header) throws SchemaViolationException {
  Set<String> props=s.getVertexProperties().get(vLabel);
  if (props == null)   throw new SchemaViolationException(""String_Node_Str"" + vLabel);
  for (  String col : header) {
    if (!props.contains(col)) {
      if (col.equals(""String_Node_Str"") && props.contains(""String_Node_Str""))       continue;
 else       throw new SchemaViolationException(""String_Node_Str"" + vLabel + ""String_Node_Str""+ col+ ""String_Node_Str""+ props);
    }
    if (s.getVPropertyClass(vLabel,col) == null)     throw new SchemaViolationException(""String_Node_Str"" + vLabel + ""String_Node_Str""+ col);
  }
}","/** 
 * Validates the file header against the schema used by the importer
 * @param s      schema to validate against
 * @param vLabel vertex type to validate against
 * @param header header of csv file
 * @return suffix of this vertex
 */
private void validateVHeader(WorkLoadSchema s,String vLabel,String[] header) throws SchemaViolationException {
  Set<String> props=s.getVertexProperties().get(vLabel);
  if (props == null)   throw new SchemaViolationException(""String_Node_Str"" + vLabel);
  for (  String col : header) {
    if (!props.contains(col)) {
      if (col.equals(""String_Node_Str"") && props.contains(""String_Node_Str"")) {
        continue;
      }
      if (col.equals(""String_Node_Str"") && props.contains(""String_Node_Str"")) {
        continue;
      }
 else       throw new SchemaViolationException(""String_Node_Str"" + vLabel + ""String_Node_Str""+ col+ ""String_Node_Str""+ props);
    }
    if (s.getVPropertyClass(vLabel,col) == null)     throw new SchemaViolationException(""String_Node_Str"" + vLabel + ""String_Node_Str""+ col);
  }
}",0.9405241935483872
144299,"/** 
 * Loads n-Cardinality (1NF violating) vertex properties from the csv files
 * @param dir     Directory in which the files reside
 * @param vpMap   Map between vertices and their property files
 * @throws IOException              thrown if files / directory are inaccessible
 * @throws SchemaViolationException if file schema doesn't match workload schema
 */
private void loadVertexProperties(File dir,Map<String,String> vpMap) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  Map.Entry<String,String> entry : vpMap.entrySet()) {
    HashSet<String> fileSet=new HashSet<>();
    final String fNameSuffix=entry.getValue().replace(""String_Node_Str"",""String_Node_Str"");
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(fNameSuffix + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(dir,fName)),""String_Node_Str""));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      short suffix;
      String vLabel=entry.getKey().split(TUPLESPLIT)[0];
      try {
        validateVHeader(s,vLabel,header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      JanusGraphTransaction transaction=graph.newTransaction();
      try {
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 100 == 0) {
            logger.info(""String_Node_Str"" + counter);
          }
          String[] row=line.split(CSVSPLIT);
          Long vertexId=Long.parseLong(row[0]);
          Vertex vertex=transaction.traversal().V().has(header[0],vertexId).next();
          if (vertex == null) {
            logger.error(""String_Node_Str"",row[0],line);
            continue;
          }
          for (int i=1; i < rowLength; i++) {
            vertex.property(header[i],parseEntry(row[i],s.getVPropertyClass(vLabel,header[i]).getSimpleName()));
          }
          counter++;
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + entry.getKey());
        br.close();
        graph.close();
        e.printStackTrace();
      }
 finally {
        br.close();
      }
      transaction.commit();
    }
  }
  logger.info(""String_Node_Str"");
}","/** 
 * Loads n-Cardinality (1NF violating) vertex properties from the csv files
 * @param dir     Directory in which the files reside
 * @param vpMap   Map between vertices and their property files
 * @throws IOException              thrown if files / directory are inaccessible
 * @throws SchemaViolationException if file schema doesn't match workload schema
 */
private void loadVertexProperties(File dir,Map<String,String> vpMap) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  Map.Entry<String,String> entry : vpMap.entrySet()) {
    HashSet<String> fileSet=new HashSet<>();
    final String fNameSuffix=entry.getValue();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(fNameSuffix + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(dir,fName)),""String_Node_Str""));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      short suffix;
      String vLabel=entry.getKey().split(TUPLESPLIT)[0];
      try {
        validateVHeader(s,vLabel,header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      JanusGraphTransaction transaction=graph.newTransaction();
      try {
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 100 == 0) {
            logger.info(""String_Node_Str"" + counter);
          }
          String[] row=line.split(CSVSPLIT);
          Long vertexId=Long.parseLong(row[0]);
          Vertex vertex=transaction.traversal().V().has(header[0],vertexId).next();
          if (vertex == null) {
            logger.error(""String_Node_Str"",row[0],line);
            continue;
          }
          for (int i=1; i < rowLength; i++) {
            vertex.property(header[i],parseEntry(row[i],s.getVPropertyClass(vLabel,header[i]).getSimpleName()));
          }
          counter++;
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + entry.getKey());
        br.close();
        graph.close();
        e.printStackTrace();
      }
 finally {
        br.close();
      }
      transaction.commit();
    }
  }
  logger.info(""String_Node_Str"");
}",0.9914399847821952
144300,"/** 
 * Loads edges and their properties from the csv files
 * @param dir     Directory in which the files reside
 * @param eMap    Map between edge description triples (FromVertexType.EdgeLabel.ToVertexType) nd expected filenames
 * @throws IOException              if has trouble reading the file
 * @throws SchemaViolationException if file doesn't match the expected schema according to the workload definition
 */
private void loadEdges(File dir,Map<String,String> eMap) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  Map.Entry<String,String> ent : eMap.entrySet()) {
    HashSet<String> fileSet=new HashSet<>();
    final String fNamePrefix=ent.getKey().replace(""String_Node_Str"",""String_Node_Str"");
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(fNamePrefix + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(dir,fName)),""String_Node_Str""));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      try {
        validateEHeader(s,ent.getKey(),header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      String eLabel=ent.getKey().split(TUPLESPLIT)[1];
      JanusGraphTransaction transaction=graph.newTransaction();
      try {
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 100 == 0) {
            logger.info(""String_Node_Str"" + counter);
          }
          String[] row=line.split(CSVSPLIT);
          if (row.length < 2 || row[0].equals(""String_Node_Str"") || row[1].equals(""String_Node_Str"")) {
            br.close();
            graph.close();
            throw new NumberFormatException(""String_Node_Str"" + fName + ""String_Node_Str""+ Arrays.toString(row));
          }
          Long idTail=Long.parseLong(row[0]);
          Long idHead=Long.parseLong(row[1]);
          Vertex tail=graph.traversal().V().has(header[0],idTail).next();
          Vertex head=graph.traversal().V().has(header[1],idHead).next();
          Edge edge=tail.addEdge(eLabel,head);
          for (int i=2; i < row.length; i++) {
            edge.property(eLabel + ""String_Node_Str"" + header[i],parseEntry(row[i],s.getEPropertyClass(eLabel,header[i]).getSimpleName()));
          }
          counter++;
        }
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",ent.getKey(),line);
        br.close();
        graph.close();
        e.printStackTrace();
      }
 finally {
        br.close();
      }
      transaction.commit();
    }
    logger.info(""String_Node_Str"",ent.getKey());
  }
  logger.info(""String_Node_Str"");
}","/** 
 * Loads edges and their properties from the csv files
 * @param dir     Directory in which the files reside
 * @param eMap    Map between edge description triples (FromVertexType.EdgeLabel.ToVertexType) nd expected filenames
 * @throws IOException              if has trouble reading the file
 * @throws SchemaViolationException if file doesn't match the expected schema according to the workload definition
 */
private void loadEdges(File dir,Map<String,String> eMap) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  Map.Entry<String,String> ent : eMap.entrySet()) {
    HashSet<String> fileSet=new HashSet<>();
    final String fNamePrefix=ent.getValue();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(fNamePrefix + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(dir,fName)),""String_Node_Str""));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      try {
        validateEHeader(s,ent.getKey(),header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      String eLabel=ent.getKey().split(TUPLESPLIT)[1];
      JanusGraphTransaction transaction=graph.newTransaction();
      try {
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 100 == 0) {
            logger.info(""String_Node_Str"" + counter);
          }
          String[] row=line.split(CSVSPLIT);
          if (row.length < 2 || row[0].equals(""String_Node_Str"") || row[1].equals(""String_Node_Str"")) {
            br.close();
            graph.close();
            throw new NumberFormatException(""String_Node_Str"" + fName + ""String_Node_Str""+ Arrays.toString(row));
          }
          Long idTail=Long.parseLong(row[0]);
          Long idHead=Long.parseLong(row[1]);
          Vertex tail=graph.traversal().V().has(header[0],idTail).next();
          Vertex head=graph.traversal().V().has(header[1],idHead).next();
          Edge edge=tail.addEdge(eLabel,head);
          for (int i=2; i < row.length; i++) {
            edge.property(eLabel + ""String_Node_Str"" + header[i],parseEntry(row[i],s.getEPropertyClass(eLabel,header[i]).getSimpleName()));
          }
          counter++;
        }
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",ent.getKey(),line);
        br.close();
        graph.close();
        e.printStackTrace();
      }
 finally {
        br.close();
      }
      transaction.commit();
    }
    logger.info(""String_Node_Str"",ent.getKey());
  }
  logger.info(""String_Node_Str"");
}",0.9909315746084087
144301,"/** 
 * Loads vertices and their properties from the csv files
 * @param dir     Directory in which the files reside
 * @param vSet    Set pf expected vertex types
 * @throws IOException              if has trouble reading the file
 * @throws SchemaViolationException if file doesn't match the expected schema according to the workload definition
 */
private void loadVertices(File dir,Set<String> vSet) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  final String vLabel : vSet) {
    HashSet<String> fileSet=new HashSet<>();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(vLabel.toLowerCase() + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      File csvFile=new File(dir,fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(csvFile),Charset.forName(""String_Node_Str"")));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      short suffix;
      try {
        validateVHeader(s,vLabel,header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      logger.info(""String_Node_Str"" + rowLength);
      String[] classNames=new String[rowLength];
      for (int i=0; i < rowLength; i++) {
        String prop=header[i];
        logger.info(""String_Node_Str"" + prop);
        Class clazz=s.getVPropertyClass(vLabel,prop);
        classNames[i]=clazz.getSimpleName();
      }
      try {
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 100 == 0) {
            logger.info(""String_Node_Str"" + vLabel + ""String_Node_Str""+ counter);
          }
          String[] row=line.split(CSVSPLIT);
          JanusGraphVertex vertex=graph.addVertex(vLabel);
          for (int i=0; i < row.length; ++i) {
            String prop=header[i];
            Object value=parseEntry(row[i],classNames[i]);
            vertex.property(vLabel + ""String_Node_Str"" + prop,value);
          }
          counter++;
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
        graph.close();
      }
 finally {
        br.close();
      }
    }
    logger.info(""String_Node_Str"",vLabel);
  }
  logger.info(""String_Node_Str"");
}","/** 
 * Loads vertices and their properties from the csv files
 * @param dir     Directory in which the files reside
 * @param vSet    Set pf expected vertex types
 * @throws IOException              if has trouble reading the file
 * @throws SchemaViolationException if file doesn't match the expected schema according to the workload definition
 */
private void loadVertices(File dir,Set<String> vSet) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  final String vLabel : vSet) {
    HashSet<String> fileSet=new HashSet<>();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(vLabel.toLowerCase() + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      File csvFile=new File(dir,fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(csvFile),Charset.forName(""String_Node_Str"")));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      try {
        validateVHeader(s,vLabel,header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      logger.info(""String_Node_Str"" + rowLength);
      String[] classNames=new String[rowLength];
      for (int i=0; i < rowLength; i++) {
        String prop=header[i];
        logger.info(""String_Node_Str"" + prop);
        Class clazz=s.getVPropertyClass(vLabel,prop);
        classNames[i]=clazz.getSimpleName();
      }
      try {
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 100 == 0) {
            logger.info(""String_Node_Str"" + vLabel + ""String_Node_Str""+ counter);
          }
          String[] row=line.split(CSVSPLIT);
          JanusGraphVertex vertex=graph.addVertex(vLabel);
          for (int i=0; i < row.length; ++i) {
            String prop=header[i];
            Object value=parseEntry(row[i],classNames[i]);
            vertex.property(vLabel + ""String_Node_Str"" + prop,value);
          }
          counter++;
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
        graph.close();
      }
 finally {
        br.close();
      }
    }
    logger.info(""String_Node_Str"",vLabel);
  }
  logger.info(""String_Node_Str"");
}",0.996178830722201
144302,"private void buildIndexes(){
  JanusGraphManagement management=graph.openManagement();
  for (  Map.Entry<PropertyKey,String> entry : vertexIndexes.entrySet()) {
    management.buildIndex(entry.getValue(),Vertex.class).addKey(entry.getKey()).buildCompositeIndex();
    management.updateIndex(management.getGraphIndex(entry.getValue()),SchemaAction.REINDEX);
  }
  management.commit();
}","private void buildIndexes(){
  for (  String property : vertexIndexes) {
    JanusGraphManagement management=graph.openManagement();
    PropertyKey pk=management.getPropertyKey(property);
    JanusGraphIndex index=management.buildIndex(""String_Node_Str"" + property,Vertex.class).addKey(pk).buildCompositeIndex();
    management.updateIndex(index,SchemaAction.REINDEX);
    management.commit();
  }
}",0.5343511450381679
144303,"/** 
 * Builds interactive workload schema in database
 * @return true if building the schema succeeded
 */
private boolean buildSchema(WorkLoadSchema s){
  logger.info(""String_Node_Str"");
  JanusGraphManagement management;
  Set<String> vTypes=s.getVertexTypes().keySet();
  for (  String v : vTypes) {
    management=graph.openManagement();
    if (!graph.containsVertexLabel(v)) {
      management.makeVertexLabel(v).make();
      management.commit();
    }
  }
  logger.info(""String_Node_Str"");
  for (  String e : s.getEdgeTypes()) {
    management=graph.openManagement();
    if (!graph.containsRelationType(e)) {
      management.makeEdgeLabel(e).multiplicity(Multiplicity.SIMPLE).make();
      management.commit();
    }
  }
  logger.info(""String_Node_Str"");
  Set<Class<?>> allowed=new HashSet<>(Arrays.asList(VALID_CLASSES));
  for (  String v : s.getVertexProperties().keySet()) {
    for (    String p : s.getVertexProperties().get(v)) {
      String janusPropertyKey=v + ""String_Node_Str"" + p;
      logger.info(""String_Node_Str"" + janusPropertyKey);
      if (!graph.containsRelationType(p)) {
        management=graph.openManagement();
        Class<?> clazz=s.getVPropertyClass(v,p);
        Cardinality c=(clazz.getSimpleName().equals(""String_Node_Str"") ? Cardinality.LIST : Cardinality.SINGLE);
        if (clazz.equals(Arrays.class))         clazz=String.class;
        PropertyKey pk;
        if (clazz.equals(Date.class))         pk=management.makePropertyKey(janusPropertyKey).dataType(Long.class).cardinality(c).make();
 else         pk=management.makePropertyKey(janusPropertyKey).dataType(clazz).cardinality(c).make();
        if (!allowed.contains(clazz)) {
          logger.error(""String_Node_Str"",clazz.getSimpleName());
          continue;
        }
        if (p.compareTo(""String_Node_Str"") == 0 || p.compareTo(""String_Node_Str"") == 0) {
          vertexIndexes.put(pk,""String_Node_Str"" + janusPropertyKey);
        }
        management.commit();
      }
    }
  }
  for (  String e : s.getEdgeProperties().keySet()) {
    for (    String p : s.getEdgeProperties().get(e)) {
      String janusPropertyKey=e + ""String_Node_Str"" + p;
      if (!graph.containsRelationType(p)) {
        management=graph.openManagement();
        Class<?> clazz=s.getEPropertyClass(e,p);
        if (clazz.equals(Arrays.class))         clazz=String.class;
        Cardinality c=(clazz.isArray() ? Cardinality.LIST : Cardinality.SINGLE);
        PropertyKey pk;
        if (clazz.equals(Date.class))         pk=management.makePropertyKey(janusPropertyKey).dataType(Long.class).cardinality(c).make();
 else         pk=management.makePropertyKey(janusPropertyKey).dataType(clazz).cardinality(c).make();
        if (!allowed.contains(clazz)) {
          logger.error(""String_Node_Str"",clazz.getSimpleName());
          continue;
        }
        if (p.compareTo(""String_Node_Str"") == 0 || p.compareTo(""String_Node_Str"") == 0) {
          management.buildIndex(""String_Node_Str"" + janusPropertyKey,Vertex.class).addKey(pk).buildCompositeIndex();
        }
        management.commit();
      }
    }
  }
  logger.info(""String_Node_Str"");
  return true;
}","/** 
 * Builds interactive workload schema in database
 * @return true if building the schema succeeded
 */
private boolean buildSchema(WorkLoadSchema s){
  logger.info(""String_Node_Str"");
  JanusGraphManagement management;
  Set<String> vTypes=s.getVertexTypes().keySet();
  for (  String v : vTypes) {
    management=graph.openManagement();
    if (!graph.containsVertexLabel(v)) {
      management.makeVertexLabel(v).make();
      management.commit();
    }
  }
  logger.info(""String_Node_Str"");
  for (  String e : s.getEdgeTypes()) {
    management=graph.openManagement();
    if (!graph.containsRelationType(e)) {
      management.makeEdgeLabel(e).multiplicity(Multiplicity.SIMPLE).make();
      management.commit();
    }
  }
  logger.info(""String_Node_Str"");
  Set<Class<?>> allowed=new HashSet<>(Arrays.asList(VALID_CLASSES));
  for (  String v : s.getVertexProperties().keySet()) {
    for (    String p : s.getVertexProperties().get(v)) {
      String janusPropertyKey=v + ""String_Node_Str"" + p;
      logger.info(""String_Node_Str"" + janusPropertyKey);
      if (!graph.containsRelationType(p)) {
        management=graph.openManagement();
        Class<?> clazz=s.getVPropertyClass(v,p);
        Cardinality c=(clazz.getSimpleName().equals(""String_Node_Str"") ? Cardinality.LIST : Cardinality.SINGLE);
        if (clazz.equals(Arrays.class))         clazz=String.class;
        PropertyKey pk;
        if (clazz.equals(Date.class))         pk=management.makePropertyKey(janusPropertyKey).dataType(Long.class).cardinality(c).make();
 else         pk=management.makePropertyKey(janusPropertyKey).dataType(clazz).cardinality(c).make();
        if (!allowed.contains(clazz)) {
          logger.error(""String_Node_Str"",clazz.getSimpleName());
          continue;
        }
        if (p.compareTo(""String_Node_Str"") == 0 || p.compareTo(""String_Node_Str"") == 0) {
          vertexIndexes.add(janusPropertyKey);
        }
        management.commit();
      }
    }
  }
  for (  String e : s.getEdgeProperties().keySet()) {
    for (    String p : s.getEdgeProperties().get(e)) {
      String janusPropertyKey=e + ""String_Node_Str"" + p;
      if (!graph.containsRelationType(p)) {
        management=graph.openManagement();
        Class<?> clazz=s.getEPropertyClass(e,p);
        if (clazz.equals(Arrays.class))         clazz=String.class;
        Cardinality c=(clazz.isArray() ? Cardinality.LIST : Cardinality.SINGLE);
        PropertyKey pk;
        if (clazz.equals(Date.class))         pk=management.makePropertyKey(janusPropertyKey).dataType(Long.class).cardinality(c).make();
 else         pk=management.makePropertyKey(janusPropertyKey).dataType(clazz).cardinality(c).make();
        if (!allowed.contains(clazz)) {
          logger.error(""String_Node_Str"",clazz.getSimpleName());
          continue;
        }
        if (p.compareTo(""String_Node_Str"") == 0 || p.compareTo(""String_Node_Str"") == 0) {
          management.buildIndex(""String_Node_Str"" + janusPropertyKey,Vertex.class).addKey(pk).buildCompositeIndex();
        }
        management.commit();
      }
    }
  }
  logger.info(""String_Node_Str"");
  return true;
}",0.9950770208035572
144304,"/** 
 * Loads n-Cardinality (1NF violating) vertex properties from the csv files
 * @param dir     Directory in which the files reside
 * @param vpMap   Map between vertices and their property files
 * @throws IOException              thrown if files / directory are inaccessible
 * @throws SchemaViolationException if file schema doesn't match workload schema
 */
private void loadVertexProperties(File dir,Map<String,String> vpMap) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  Map.Entry<String,String> entry : vpMap.entrySet()) {
    HashSet<String> fileSet=new HashSet<>();
    final String fNameSuffix=entry.getValue();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(fNameSuffix + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(dir,fName)),""String_Node_Str""));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      String vLabel=entry.getKey().split(TUPLESPLIT)[0];
      try {
        validateVPHeader(s,vLabel,header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      try {
        JanusGraphTransaction transaction=graph.newTransaction();
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 1000 == 0) {
            logger.info(""String_Node_Str"" + counter);
          }
          String[] row=line.split(CSVSPLIT);
          Long vertexId=Long.parseLong(row[0]);
          String janusgraphKey=vLabel + ""String_Node_Str"" + header[1];
          logger.info(""String_Node_Str"",janusgraphKey,row[1],vertexId);
          Vertex vertex=transaction.traversal().V().has(header[0],vertexId).next();
          if (vertex == null) {
            logger.error(""String_Node_Str"",row[0],line);
            throw new RuntimeException(""String_Node_Str"" + vertexId + ""String_Node_Str"");
          }
          counter++;
        }
        transaction.commit();
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + entry.getKey());
        e.printStackTrace();
      }
 finally {
        br.close();
        graph.close();
      }
    }
  }
  logger.info(""String_Node_Str"");
}","/** 
 * Loads n-Cardinality (1NF violating) vertex properties from the csv files
 * @param dir     Directory in which the files reside
 * @param vpMap   Map between vertices and their property files
 * @throws IOException              thrown if files / directory are inaccessible
 * @throws SchemaViolationException if file schema doesn't match workload schema
 */
private void loadVertexProperties(File dir,Map<String,String> vpMap) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  Map.Entry<String,String> entry : vpMap.entrySet()) {
    HashSet<String> fileSet=new HashSet<>();
    final String fNameSuffix=entry.getValue();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(fNameSuffix + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(dir,fName)),""String_Node_Str""));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      String vLabel=entry.getKey().split(TUPLESPLIT)[0];
      try {
        validateVPHeader(s,vLabel,header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      try {
        int counter=0;
        JanusGraphTransaction transaction=graph.newTransaction();
        while ((line=br.readLine()) != null) {
          if (counter % 1000 == 0) {
            logger.info(""String_Node_Str"" + counter);
          }
          String[] row=line.split(CSVSPLIT);
          Long vertexId=Long.parseLong(row[0]);
          String janusgraphKey=vLabel + ""String_Node_Str"" + header[1];
          logger.info(""String_Node_Str"",janusgraphKey,row[1],vertexId);
          Vertex vertex=transaction.traversal().V().has(header[0],vertexId).next();
          if (vertex == null) {
            logger.error(""String_Node_Str"",row[0],line);
            throw new RuntimeException(""String_Node_Str"" + vertexId + ""String_Node_Str"");
          }
          counter++;
        }
        transaction.commit();
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + entry.getKey());
        e.printStackTrace();
      }
 finally {
        br.close();
        graph.close();
      }
    }
  }
  logger.info(""String_Node_Str"");
}",0.9910748932867676
144305,"/** 
 * Loads edges and their properties from the csv files
 * @param dir     Directory in which the files reside
 * @param eMap    Map between edge description triples (FromVertexType.EdgeLabel.ToVertexType) nd expected filenames
 * @throws IOException              if has trouble reading the file
 * @throws SchemaViolationException if file doesn't match the expected schema according to the workload definition
 */
private void loadEdges(File dir,Map<String,String> eMap) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  Map.Entry<String,String> ent : eMap.entrySet()) {
    HashSet<String> fileSet=new HashSet<>();
    final String fNamePrefix=ent.getValue();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(fNamePrefix + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(dir,fName)),""String_Node_Str""));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      try {
        validateEHeader(s,ent.getKey(),header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      String eLabel=ent.getKey().split(TUPLESPLIT)[1];
      JanusGraphTransaction transaction=graph.newTransaction();
      try {
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 1000 == 0) {
            logger.info(""String_Node_Str"" + counter);
          }
          String[] row=line.split(CSVSPLIT);
          if (row.length < 2 || row[0].equals(""String_Node_Str"") || row[1].equals(""String_Node_Str"")) {
            br.close();
            graph.close();
            throw new NumberFormatException(""String_Node_Str"" + fName + ""String_Node_Str""+ Arrays.toString(row));
          }
          Long idTail=Long.parseLong(row[0]);
          Long idHead=Long.parseLong(row[1]);
          Vertex tail=graph.traversal().V().has(header[0],idTail).next();
          Vertex head=graph.traversal().V().has(header[1],idHead).next();
          Edge edge=tail.addEdge(eLabel,head);
          for (int i=2; i < row.length; i++) {
            edge.property(eLabel + ""String_Node_Str"" + header[i],parseEntry(row[i],s.getEPropertyClass(eLabel,header[i]).getSimpleName()));
          }
          counter++;
        }
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",ent.getKey(),line);
        br.close();
        graph.close();
        e.printStackTrace();
      }
 finally {
        br.close();
      }
      transaction.commit();
    }
    logger.info(""String_Node_Str"",ent.getKey());
  }
  logger.info(""String_Node_Str"");
}","/** 
 * Loads edges and their properties from the csv files
 * @param dir     Directory in which the files reside
 * @param eMap    Map between edge description triples (FromVertexType.EdgeLabel.ToVertexType) nd expected filenames
 * @throws IOException              if has trouble reading the file
 * @throws SchemaViolationException if file doesn't match the expected schema according to the workload definition
 */
private void loadEdges(File dir,Map<String,String> eMap) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  Map.Entry<String,String> ent : eMap.entrySet()) {
    HashSet<String> fileSet=new HashSet<>();
    final String fNamePrefix=ent.getValue();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(fNamePrefix + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(dir,fName)),""String_Node_Str""));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      try {
        validateEHeader(s,ent.getKey(),header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      String eLabel=ent.getKey().split(TUPLESPLIT)[1];
      try {
        JanusGraphTransaction transaction=graph.newTransaction();
        int counter=0;
        while ((line=br.readLine()) != null) {
          if (counter % 1000 == 0) {
            logger.info(""String_Node_Str"" + counter);
          }
          String[] row=line.split(CSVSPLIT);
          if (row.length < 2 || row[0].equals(""String_Node_Str"") || row[1].equals(""String_Node_Str"")) {
            br.close();
            graph.close();
            throw new NumberFormatException(""String_Node_Str"" + fName + ""String_Node_Str""+ Arrays.toString(row));
          }
          Long idTail=Long.parseLong(row[0]);
          Long idHead=Long.parseLong(row[1]);
          Vertex tail=transaction.traversal().V().has(header[0],idTail).next();
          Vertex head=transaction.traversal().V().has(header[1],idHead).next();
          Edge edge=tail.addEdge(eLabel,head);
          for (int i=2; i < row.length; i++) {
            edge.property(eLabel + ""String_Node_Str"" + header[i],parseEntry(row[i],s.getEPropertyClass(eLabel,header[i]).getSimpleName()));
          }
          counter++;
        }
        transaction.commit();
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",ent.getKey(),line);
        br.close();
        graph.close();
        e.printStackTrace();
      }
 finally {
        br.close();
      }
    }
    logger.info(""String_Node_Str"",ent.getKey());
  }
  logger.info(""String_Node_Str"");
}",0.980794701986755
144306,"/** 
 * Loads vertices and their properties from the csv files
 * @param dir     Directory in which the files reside
 * @param vSet    Set pf expected vertex types
 * @throws IOException              if has trouble reading the file
 * @throws SchemaViolationException if file doesn't match the expected schema according to the workload definition
 */
private void loadVertices(File dir,Set<String> vSet) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  final String vLabel : vSet) {
    HashSet<String> fileSet=new HashSet<>();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(vLabel.toLowerCase() + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      File csvFile=new File(dir,fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(csvFile),Charset.forName(""String_Node_Str"")));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      try {
        validateVHeader(s,vLabel,header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      logger.info(""String_Node_Str"" + rowLength);
      String[] classNames=new String[rowLength];
      for (int i=0; i < rowLength; i++) {
        String prop=header[i];
        logger.info(""String_Node_Str"" + prop);
        Class clazz=s.getVPropertyClass(vLabel,prop);
        classNames[i]=clazz.getSimpleName();
      }
      try {
        int counter=0;
        Transaction transaction=graph.newTransaction();
        while ((line=br.readLine()) != null) {
          if (counter % 1000 == 0) {
            logger.info(""String_Node_Str"" + vLabel + ""String_Node_Str""+ counter);
          }
          String[] row=line.split(CSVSPLIT);
          JanusGraphVertex vertex=transaction.addVertex(vLabel);
          for (int i=0; i < row.length; ++i) {
            String prop=header[i];
            Object value=parseEntry(row[i],classNames[i]);
            vertex.property(vLabel + ""String_Node_Str"" + prop,value);
          }
          counter++;
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
        graph.close();
      }
 finally {
        br.close();
      }
    }
    logger.info(""String_Node_Str"",vLabel);
  }
  logger.info(""String_Node_Str"");
}","/** 
 * Loads vertices and their properties from the csv files
 * @param dir     Directory in which the files reside
 * @param vSet    Set pf expected vertex types
 * @throws IOException              if has trouble reading the file
 * @throws SchemaViolationException if file doesn't match the expected schema according to the workload definition
 */
private void loadVertices(File dir,Set<String> vSet) throws IOException, SchemaViolationException {
  logger.info(""String_Node_Str"");
  WorkLoadSchema s=this.workload.getSchema();
  for (  final String vLabel : vSet) {
    HashSet<String> fileSet=new HashSet<>();
    fileSet.addAll(Arrays.asList(dir.list(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(vLabel.toLowerCase() + ""String_Node_Str"");
      }
    }
)));
    for (    String fName : fileSet) {
      logger.info(""String_Node_Str"",fName);
      File csvFile=new File(dir,fName);
      BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(csvFile),Charset.forName(""String_Node_Str"")));
      String line=br.readLine();
      if (line == null)       throw new IOException(""String_Node_Str"" + fName);
      String[] header=line.split(CSVSPLIT);
      try {
        validateVHeader(s,vLabel,header);
      }
 catch (      SchemaViolationException e) {
        br.close();
        throw e;
      }
      int rowLength=header.length;
      logger.info(""String_Node_Str"" + rowLength);
      String[] classNames=new String[rowLength];
      for (int i=0; i < rowLength; i++) {
        String prop=header[i];
        logger.info(""String_Node_Str"" + prop);
        Class clazz=s.getVPropertyClass(vLabel,prop);
        classNames[i]=clazz.getSimpleName();
      }
      try {
        int counter=0;
        JanusGraphTransaction transaction=graph.newTransaction();
        while ((line=br.readLine()) != null) {
          if (counter % 1000 == 0) {
            logger.info(""String_Node_Str"" + vLabel + ""String_Node_Str""+ counter);
          }
          String[] row=line.split(CSVSPLIT);
          JanusGraphVertex vertex=transaction.addVertex(vLabel);
          for (int i=0; i < row.length; ++i) {
            String prop=header[i];
            Object value=parseEntry(row[i],classNames[i]);
            vertex.property(vLabel + ""String_Node_Str"" + prop,value);
          }
          counter++;
        }
        transaction.commit();
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
        e.printStackTrace();
        graph.close();
      }
 finally {
        br.close();
      }
    }
    logger.info(""String_Node_Str"",vLabel);
  }
  logger.info(""String_Node_Str"");
}",0.9925650557620818
144307,"@GenerateMicroBenchmark public Optional<Integer> parallel(){
  return integerList.stream().parallel().filter(l -> {
    BlackHole.consumeCPU(Q);
    return false;
  }
).findFirst();
}","@Benchmark public Optional<Integer> parallel(){
  return integerList.stream().parallel().filter(l -> {
    Blackhole.consumeCPU(Q);
    return false;
  }
).findFirst();
}",0.9575070821529744
144308,"@GenerateMicroBenchmark public void loop(BlackHole bh){
  for (  Integer i : integerList) {
    BlackHole.consumeCPU(Q);
    bh.consume(i);
  }
}","@Benchmark public void loop(Blackhole bh){
  for (  Integer i : integerList) {
    Blackhole.consumeCPU(Q);
    bh.consume(i);
  }
}",0.9386281588447654
144309,"@GenerateMicroBenchmark public Optional<Integer> sequential(){
  return integerList.stream().filter(l -> {
    BlackHole.consumeCPU(Q);
    return false;
  }
).findFirst();
}","@Benchmark public Optional<Integer> sequential(){
  return integerList.stream().filter(l -> {
    Blackhole.consumeCPU(Q);
    return false;
  }
).findFirst();
}",0.9552238805970148
144310,"@GenerateMicroBenchmark public Optional<Integer> parallel(){
  return integerList.stream().parallel().filter(l -> {
    BlackHole.consumeCPU(Q);
    return false;
  }
).findFirst();
}","@Benchmark public Optional<Integer> parallel(){
  return integerList.stream().parallel().filter(l -> {
    Blackhole.consumeCPU(Q);
    return false;
  }
).findFirst();
}",0.9575070821529744
144311,"@GenerateMicroBenchmark public void loop(BlackHole bh){
  for (  Integer i : integerList) {
    BlackHole.consumeCPU(Q);
    bh.consume(i);
  }
}","@Benchmark public void loop(Blackhole bh){
  for (  Integer i : integerList) {
    Blackhole.consumeCPU(Q);
    bh.consume(i);
  }
}",0.9386281588447654
144312,"@GenerateMicroBenchmark public Optional<Integer> sequential(){
  return integerList.stream().filter(l -> {
    BlackHole.consumeCPU(Q);
    return false;
  }
).findFirst();
}","@Benchmark public Optional<Integer> sequential(){
  return integerList.stream().filter(l -> {
    Blackhole.consumeCPU(Q);
    return false;
  }
).findFirst();
}",0.9552238805970148
144313,"@GenerateMicroBenchmark public Optional<Integer> parallelUnorderedNoLimit(){
  return integerList.stream().parallel().unordered().filter(l -> false).findFirst();
}","@Benchmark public Optional<Integer> parallelUnorderedNoLimit(){
  return integerList.stream().parallel().unordered().filter(l -> false).findFirst();
}",0.9584664536741214
144314,"@GenerateMicroBenchmark public Optional<Integer> sequentialUnorderedNoLimit(){
  return integerList.stream().unordered().filter(l -> false).findFirst();
}","@Benchmark public Optional<Integer> sequentialUnorderedNoLimit(){
  return integerList.stream().unordered().filter(l -> false).findFirst();
}",0.9559322033898304
144315,"@GenerateMicroBenchmark public Optional<Integer> parallelUnorderedLimit(){
  return integerList.stream().parallel().unordered().limit(N).filter(l -> false).findFirst();
}","@Benchmark public Optional<Integer> parallelUnorderedLimit(){
  return integerList.stream().parallel().unordered().limit(N).filter(l -> false).findFirst();
}",0.9602446483180428
144316,"@GenerateMicroBenchmark public Optional<Integer> parallelOrderedNoLimit(){
  return integerList.stream().parallel().filter(l -> false).findFirst();
}","@Benchmark public Optional<Integer> parallelOrderedNoLimit(){
  return integerList.stream().parallel().filter(l -> false).findFirst();
}",0.9543859649122808
144317,"@GenerateMicroBenchmark public Optional<Integer> sequentialUnorderedLimit(){
  return integerList.stream().unordered().limit(N).filter(l -> false).findFirst();
}","@Benchmark public Optional<Integer> sequentialUnorderedLimit(){
  return integerList.stream().unordered().limit(N).filter(l -> false).findFirst();
}",0.9579288025889968
144318,"@GenerateMicroBenchmark public Optional<Integer> parallelOrderedLimit(){
  return integerList.stream().parallel().limit(N).filter(l -> false).findFirst();
}","@Benchmark public Optional<Integer> parallelOrderedLimit(){
  return integerList.stream().parallel().limit(N).filter(l -> false).findFirst();
}",0.9565217391304348
144319,"@GenerateMicroBenchmark public Optional<Integer> sequentialOrderedLimit(){
  return integerList.stream().limit(N).filter(l -> false).findFirst();
}","@Benchmark public Optional<Integer> sequentialOrderedLimit(){
  return integerList.stream().limit(N).filter(l -> false).findFirst();
}",0.9537366548042704
144320,"@GenerateMicroBenchmark public Optional<Integer> sequentialOrderedNoLimit(){
  return integerList.stream().filter(l -> false).findFirst();
}","@Benchmark public Optional<Integer> sequentialOrderedNoLimit(){
  return integerList.stream().filter(l -> false).findFirst();
}",0.951310861423221
144321,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (container == null) {
    return null;
  }
  view=(RelativeLayout)inflater.inflate(R.layout.fragment_maps,container,false);
  Bundle bundle=getArguments();
  mMarkers=bundle.getParcelableArrayList(""String_Node_Str"");
  setUpMapIfNeeded(mMarkers);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (view != null) {
    ViewGroup parent=(ViewGroup)view.getParent();
    if (parent != null) {
      parent.removeView(view);
    }
  }
  try {
    view=inflater.inflate(R.layout.fragment_maps,container,false);
  }
 catch (  InflateException e) {
  }
  Bundle bundle=getArguments();
  mMarkers=bundle.getParcelableArrayList(""String_Node_Str"");
  setUpMapIfNeeded(mMarkers);
  return view;
}",0.768
144322,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.fragment_ateneo,container,false);
  mPager=(ViewPager)rootView.findViewById(R.id.pager);
  mAdapter=new AteneoFragmentAdapter(getActivity().getSupportFragmentManager());
  mPager.setAdapter(mAdapter);
  TitlePageIndicator titleIndicator=(TitlePageIndicator)rootView.findViewById(R.id.titles);
  titleIndicator.setViewPager(mPager);
  titleIndicator.setCurrentItem(1);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.fragment_ateneo,container,false);
  mPager=(ViewPager)rootView.findViewById(R.id.pager);
  mAdapter=new AteneoFragmentAdapter(getChildFragmentManager());
  mPager.setAdapter(mAdapter);
  TitlePageIndicator titleIndicator=(TitlePageIndicator)rootView.findViewById(R.id.titles);
  titleIndicator.setViewPager(mPager);
  titleIndicator.setCurrentItem(1);
  return rootView;
}",0.9761467889908256
144323,"public String editOrderItemsSea(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  if (orderItemIdParam != null) {
    OrderItems entity=transformOrderItemToEntityBeanSea(operationsBean);
    entity.setVendorSea(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVendorCode());
    entity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
    operationsService.updateOrderItem(entity);
    List<OrderItems> OrderItemsPlanning=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
    for (    OrderItems orderItemElem : OrderItemsPlanning) {
      OrderItems orderItemEntity=operationsService.findOrderItemById(orderItemElem.getOrderItemId());
      OrderItems newEntity=new OrderItems();
      Client client=clientService.findClientById(getClientId().toString());
      newEntity.setOrderItemId(orderItemEntity.getOrderItemId());
      newEntity.setClientId(client.getClientId());
      newEntity.setNameSize(orderItemEntity.getNameSize());
      newEntity.setOrderId(orderItemEntity.getOrderId());
      newEntity.setQuantity(orderItemEntity.getQuantity());
      newEntity.setClassification(orderItemEntity.getClassification());
      newEntity.setDeclaredValue(orderItemEntity.getDeclaredValue());
      newEntity.setRate(orderItemEntity.getRate());
      newEntity.setCreatedBy(orderItemEntity.getCreatedBy());
      newEntity.setModifiedBy(orderItemEntity.getModifiedBy());
      newEntity.setComments(orderItemEntity.getComments());
      newEntity.setCommodity(orderItemEntity.getCommodity());
      newEntity.setCreatedTimestamp(orderItemEntity.getCreatedTimestamp());
      newEntity.setModifiedTimestamp(orderItemEntity.getModifiedTimestamp());
      newEntity.setWeight(orderItemEntity.getWeight());
      newEntity.setVolume(orderItemEntity.getVolume());
      newEntity.setServiceRequirement(orderItemEntity.getServiceRequirement());
      newEntity.setVendorSea(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVendorCode());
      newEntity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
      if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceType())) {
        if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceMode())) {
          newEntity.setStatus(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceMode())) {
          newEntity.setStatus(""String_Node_Str"");
        }
 else {
          newEntity.setStatus(""String_Node_Str"");
        }
      }
 else {
        newEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(newEntity);
    }
  }
 else {
    check=(String[])sessionAttributes.get(""String_Node_Str"");
    for (int i=0; i < check.length; i++) {
      Integer orderItemId=Integer.parseInt(check[i]);
      OrderItems orderItemEntity=operationsService.findOrderItemById(orderItemId);
      OrderItems newEntity=new OrderItems();
      Client client=clientService.findClientById(getClientId().toString());
      newEntity.setOrderItemId(orderItemEntity.getOrderItemId());
      newEntity.setClientId(client.getClientId());
      newEntity.setNameSize(orderItemEntity.getNameSize());
      newEntity.setOrderId(orderItemEntity.getOrderId());
      newEntity.setQuantity(orderItemEntity.getQuantity());
      newEntity.setClassification(orderItemEntity.getClassification());
      newEntity.setDeclaredValue(orderItemEntity.getDeclaredValue());
      newEntity.setRate(orderItemEntity.getRate());
      newEntity.setCreatedBy(orderItemEntity.getCreatedBy());
      newEntity.setModifiedBy(orderItemEntity.getModifiedBy());
      newEntity.setComments(orderItemEntity.getComments());
      newEntity.setCommodity(orderItemEntity.getCommodity());
      newEntity.setCreatedTimestamp(orderItemEntity.getCreatedTimestamp());
      newEntity.setModifiedTimestamp(orderItemEntity.getModifiedTimestamp());
      newEntity.setWeight(orderItemEntity.getWeight());
      newEntity.setVolume(orderItemEntity.getVolume());
      newEntity.setServiceRequirement(orderItemEntity.getServiceRequirement());
      newEntity.setVendorSea(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVendorCode());
      newEntity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
      if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceType())) {
        if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceMode())) {
          newEntity.setStatus(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceMode())) {
          newEntity.setStatus(""String_Node_Str"");
        }
 else {
          newEntity.setStatus(""String_Node_Str"");
        }
      }
 else {
        newEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(newEntity);
    }
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  return SUCCESS;
}","public String editOrderItemsSea(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  if (orderItemIdParam != null) {
    OrderItems entity=transformOrderItemToEntityBeanSea(operationsBean);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
    if (orderEntity.getOrderStatus().equals(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      order=transformToOrderFormBean(orderEntity);
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
        return ""String_Node_Str"";
      }
    }
    entity.setVendorSea(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVendorCode());
    entity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
    operationsService.updateOrderItem(entity);
    List<OrderItems> OrderItemsPlanning=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
    for (    OrderItems orderItemElem : OrderItemsPlanning) {
      OrderItems orderItemEntity=operationsService.findOrderItemById(orderItemElem.getOrderItemId());
      OrderItems newEntity=new OrderItems();
      Client client=clientService.findClientById(getClientId().toString());
      newEntity.setOrderItemId(orderItemEntity.getOrderItemId());
      newEntity.setClientId(client.getClientId());
      newEntity.setNameSize(orderItemEntity.getNameSize());
      newEntity.setOrderId(orderItemEntity.getOrderId());
      newEntity.setQuantity(orderItemEntity.getQuantity());
      newEntity.setClassification(orderItemEntity.getClassification());
      newEntity.setDeclaredValue(orderItemEntity.getDeclaredValue());
      newEntity.setRate(orderItemEntity.getRate());
      newEntity.setCreatedBy(orderItemEntity.getCreatedBy());
      newEntity.setModifiedBy(orderItemEntity.getModifiedBy());
      newEntity.setComments(orderItemEntity.getComments());
      newEntity.setCommodity(orderItemEntity.getCommodity());
      newEntity.setCreatedTimestamp(orderItemEntity.getCreatedTimestamp());
      newEntity.setModifiedTimestamp(orderItemEntity.getModifiedTimestamp());
      newEntity.setWeight(orderItemEntity.getWeight());
      newEntity.setVolume(orderItemEntity.getVolume());
      newEntity.setServiceRequirement(orderItemEntity.getServiceRequirement());
      newEntity.setVendorSea(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVendorCode());
      newEntity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
      if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceType())) {
        if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceMode())) {
          newEntity.setStatus(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceMode())) {
          newEntity.setStatus(""String_Node_Str"");
        }
 else {
          newEntity.setStatus(""String_Node_Str"");
        }
      }
 else {
        newEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(newEntity);
    }
  }
 else {
    check=(String[])sessionAttributes.get(""String_Node_Str"");
    for (int i=0; i < check.length; i++) {
      Integer orderItemId=Integer.parseInt(check[i]);
      OrderItems orderItemEntity=operationsService.findOrderItemById(orderItemId);
      Orders orderEntity=orderService.findOrdersById(orderItemEntity.getOrderId());
      if (orderEntity.getOrderStatus().equals(""String_Node_Str"")) {
        order=transformToOrderFormBean(orderEntity);
        for (        OrderItems orderItemsElem : orderItemsList) {
          orderItems.add(transformToOrderItemFormBean(orderItemsElem));
        }
        clearErrorsAndMessages();
        addActionError(""String_Node_Str"");
        return ""String_Node_Str"";
      }
      OrderItems newEntity=new OrderItems();
      Client client=clientService.findClientById(getClientId().toString());
      newEntity.setOrderItemId(orderItemEntity.getOrderItemId());
      newEntity.setClientId(client.getClientId());
      newEntity.setNameSize(orderItemEntity.getNameSize());
      newEntity.setOrderId(orderItemEntity.getOrderId());
      newEntity.setQuantity(orderItemEntity.getQuantity());
      newEntity.setClassification(orderItemEntity.getClassification());
      newEntity.setDeclaredValue(orderItemEntity.getDeclaredValue());
      newEntity.setRate(orderItemEntity.getRate());
      newEntity.setCreatedBy(orderItemEntity.getCreatedBy());
      newEntity.setModifiedBy(orderItemEntity.getModifiedBy());
      newEntity.setComments(orderItemEntity.getComments());
      newEntity.setCommodity(orderItemEntity.getCommodity());
      newEntity.setCreatedTimestamp(orderItemEntity.getCreatedTimestamp());
      newEntity.setModifiedTimestamp(orderItemEntity.getModifiedTimestamp());
      newEntity.setWeight(orderItemEntity.getWeight());
      newEntity.setVolume(orderItemEntity.getVolume());
      newEntity.setServiceRequirement(orderItemEntity.getServiceRequirement());
      newEntity.setVendorSea(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVendorCode());
      newEntity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
      if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceType())) {
        if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceMode())) {
          newEntity.setStatus(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(orderService.findOrdersById(operationsService.findOrderItemById(orderItemEntity.getOrderItemId()).getOrderId()).getServiceMode())) {
          newEntity.setStatus(""String_Node_Str"");
        }
 else {
          newEntity.setStatus(""String_Node_Str"");
        }
      }
 else {
        newEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(newEntity);
    }
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  return SUCCESS;
}",0.5315095261358085
144324,"public String viewStatusList(){
  int customerId=0;
  if (commonUtils.getCustomerIdFromSession() != null) {
    customerId=commonUtils.getCustomerIdFromSession();
  }
 else {
    customerId=getClientId();
  }
  List<Orders> orderEntityList=new ArrayList<Orders>();
  String column=getColumnFilter();
  if (StringUtils.isNotBlank(column)) {
    orderEntityList=orderService.findOrdersByCriteriaOnGoing(column,order.getOrderKeyword(),getClientId());
  }
 else {
    orderEntityList=orderStatusLogsService.findAllOrders();
  }
  for (  Orders ordersElem : orderEntityList) {
    if (ordersElem.getCustomerId() != customerId && customerId != getClientId()) {
      continue;
    }
    orders.add(transformToOrderFormBean(ordersElem));
  }
  return SUCCESS;
}","public String viewStatusList(){
  int customerId=0;
  if (commonUtils.getCustomerIdFromSession() != null) {
    customerId=commonUtils.getCustomerIdFromSession();
  }
 else {
    customerId=getClientId();
  }
  List<Orders> orderEntityList=new ArrayList<Orders>();
  int customerId=0;
  if (commonUtils.getCustomerIdFromSession() != null) {
    customerId=commonUtils.getCustomerIdFromSession();
  }
 else {
    customerId=getClientId();
  }
  String column=getColumnFilter();
  if (StringUtils.isNotBlank(column)) {
    orderEntityList=orderService.findOrdersByCriteriaOnGoing(column,order.getOrderKeyword(),getClientId());
  }
 else {
    orderEntityList=orderStatusLogsService.findAllOrders();
  }
  for (  Orders ordersElem : orderEntityList) {
    if (ordersElem.getCustomerId() != customerId && customerId != getClientId()) {
      continue;
    }
    orders.add(transformToOrderFormBean(ordersElem));
  }
  return SUCCESS;
}",0.8949554896142433
144325,"public String setBulkItemStatus(){
  List<Integer> ongoingBulkItems=new ArrayList();
  List<Integer> planning1BulkItems=new ArrayList();
  List<Integer> planning2BulkItems=new ArrayList();
  List<Integer> planning3BulkItems=new ArrayList();
  List<Integer> deliveredBulkItems=new ArrayList();
  List<Integer> pickupBulkItems=new ArrayList();
  List<Integer> positionedBulkItems=new ArrayList();
  List<Integer> departureBulkItems=new ArrayList();
  List<Integer> transitBulkItems=new ArrayList();
  List<Integer> arrivedBulkItems=new ArrayList();
  List<Integer> returnedBulkItems=new ArrayList();
  List<Integer> consolidationBulkItems=new ArrayList();
  Map sessionAttributes=ActionContext.getContext().getSession();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      sessionAttributes.put(""String_Node_Str"",orderStatusLogsBean.getOrderId());
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          sessionAttributes.put(""String_Node_Str"",orderStatusLogsBean.getOrderId());
          return ""String_Node_Str"";
        }
        Integer orderStatusItemId=Integer.parseInt(check[i]);
        Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById(orderStatusItemId).getOrderId());
        order=transformToOrderFormBean(orderEntity);
        OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(orderStatusItemId);
        List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs(orderStatusItemId);
        orderItem=transformToOrderItemFormBean(orderItemEntity);
        for (        OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
          orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
        }
        sessionAttributes.put(""String_Node_Str"",orderItemEntity.getOrderItemId());
        if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          ongoingBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          planning1BulkItems.add(orderStatusItemId);
          if (ongoingBulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          planning2BulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || ongoingBulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          planning3BulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || ongoingBulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          deliveredBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || ongoingBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          pickupBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          positionedBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          departureBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          transitBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          arrivedBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          returnedBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          consolidationBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || ongoingBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
      }
      Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str"")).getOrderId());
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      nameSizeList=new ArrayList<String>();
      for (int x=0; x < check.length; x++) {
        OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(Integer.parseInt(check[x]));
        nameSizeList.add(orderItemEntity.getNameSize());
      }
      if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
        if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
        }
        if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
          allFreightStatusList.add(""String_Node_Str"");
        }
        allFreightStatusList.add(""String_Node_Str"");
        allFreightStatusList.add(""String_Node_Str"");
        allFreightStatusList.add(""String_Node_Str"");
        allFreightStatusList.add(""String_Node_Str"");
        if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
        }
      }
 else {
        if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
        }
 else {
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
        }
      }
      for (int x=0; x < check.length; x++) {
        OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(check[x]));
        orderItemListings.add(transformToOrderItemFormBean(orderItemsListing));
      }
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
    }
  }
  return ""String_Node_Str"";
}","public String setBulkItemStatus(){
  List<Integer> ongoingBulkItems=new ArrayList();
  List<Integer> planning1BulkItems=new ArrayList();
  List<Integer> planning2BulkItems=new ArrayList();
  List<Integer> planning3BulkItems=new ArrayList();
  List<Integer> deliveredBulkItems=new ArrayList();
  List<Integer> pickupBulkItems=new ArrayList();
  List<Integer> positionedBulkItems=new ArrayList();
  List<Integer> departureBulkItems=new ArrayList();
  List<Integer> transitBulkItems=new ArrayList();
  List<Integer> arrivedBulkItems=new ArrayList();
  List<Integer> returnedBulkItems=new ArrayList();
  List<Integer> consolidationBulkItems=new ArrayList();
  Map sessionAttributes=ActionContext.getContext().getSession();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      sessionAttributes.put(""String_Node_Str"",orderStatusLogsBean.getOrderId());
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          sessionAttributes.put(""String_Node_Str"",orderStatusLogsBean.getOrderId());
          return ""String_Node_Str"";
        }
        Integer orderStatusItemId=Integer.parseInt(check[i]);
        Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById(orderStatusItemId).getOrderId());
        order=transformToOrderFormBean(orderEntity);
        OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(orderStatusItemId);
        List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs(orderStatusItemId);
        orderItem=transformToOrderItemFormBean(orderItemEntity);
        for (        OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
          orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
        }
        sessionAttributes.put(""String_Node_Str"",orderItemEntity.getOrderItemId());
        if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          ongoingBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          planning1BulkItems.add(orderStatusItemId);
          if (ongoingBulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          planning2BulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || ongoingBulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          planning3BulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || ongoingBulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          deliveredBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || ongoingBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          pickupBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          positionedBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          departureBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          transitBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          arrivedBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || returnedBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          returnedBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || ongoingBulkItems.size() > 0 || consolidationBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
 else         if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
          consolidationBulkItems.add(orderStatusItemId);
          if (planning1BulkItems.size() > 0 || planning2BulkItems.size() > 0 || planning3BulkItems.size() > 0 || deliveredBulkItems.size() > 0 || pickupBulkItems.size() > 0 || positionedBulkItems.size() > 0 || departureBulkItems.size() > 0 || transitBulkItems.size() > 0 || arrivedBulkItems.size() > 0 || returnedBulkItems.size() > 0 || ongoingBulkItems.size() > 0) {
            return ""String_Node_Str"";
          }
        }
      }
      Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str"")).getOrderId());
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      nameSizeList=new ArrayList<String>();
      for (int x=0; x < check.length; x++) {
        OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(Integer.parseInt(check[x]));
        nameSizeList.add(orderItemEntity.getNameSize());
      }
      if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
        if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
        }
        if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
          allFreightStatusList.add(""String_Node_Str"");
        }
        allFreightStatusList.add(""String_Node_Str"");
        allFreightStatusList.add(""String_Node_Str"");
        allFreightStatusList.add(""String_Node_Str"");
        allFreightStatusList.add(""String_Node_Str"");
        if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
        }
      }
 else {
        if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
        }
 else         if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
        }
 else {
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
          allFreightStatusList.add(""String_Node_Str"");
        }
      }
      for (int x=0; x < check.length; x++) {
        OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(check[x]));
        orderItemListings.add(transformToOrderItemFormBean(orderItemsListing));
      }
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
    }
  }
  return ""String_Node_Str"";
}",0.9809519677181412
144326,"public String loadUpdateStatusComplete(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str"")).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs((Integer)sessionAttributes.get(""String_Node_Str""));
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  orderStatusLogsBean.setOrderItemId(orderItemEntity.getOrderItemId());
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
    if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
    }
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
  OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(orderItem.getOrderItemId());
  orderItemListings.add(transformToOrderItemFormBean(orderItemsListing));
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  sessionAttributes.put(""String_Node_Str"",orderEntity.getOrderId());
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}","public String loadUpdateStatusComplete(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str"")).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs((Integer)sessionAttributes.get(""String_Node_Str""));
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  orderStatusLogsBean.setOrderItemId(orderItemEntity.getOrderItemId());
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
    if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
    }
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
  OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(orderItem.getOrderItemId());
  orderItemListings.add(transformToOrderItemFormBean(orderItemsListing));
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  sessionAttributes.put(""String_Node_Str"",orderEntity.getOrderId());
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}",0.9348634233069338
144327,"@Override public Integer addUser(User user){
  log.debug(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  try {
    Session session=getSessionFactory().getCurrentSession();
    Integer userId=(Integer)session.save(user);
    log.debug(""String_Node_Str"");
    return userId;
  }
 catch (  RuntimeException re) {
    log.error(""String_Node_Str"",re);
    throw re;
  }
}","@Override public Integer addUser(User user){
  try {
    Session session=getSessionFactory().getCurrentSession();
    Integer userId=(Integer)session.save(user);
    log.debug(""String_Node_Str"");
    return userId;
  }
 catch (  RuntimeException re) {
    log.error(""String_Node_Str"",re);
    throw re;
  }
}",0.2848837209302325
144328,"public String viewContacts(){
  Integer customerId=getCustomerSessionId();
  List<Contacts> contactEntityList=customerService.findContactByRefIdAndType(""String_Node_Str"",customerId);
  for (  Contacts contactElem : contactEntityList) {
    contacts.add(transformToFormBeanContacts(contactElem));
  }
  return SUCCESS;
}","public String viewContacts(){
  Integer customerId=getCustomerSessionId();
  List<Contacts> contactEntityList=customerService.findContactsByCustomer(customerId);
  for (  Contacts contactElem : contactEntityList) {
    contacts.add(transformToFormBeanContacts(contactElem));
  }
  return SUCCESS;
}",0.93354943273906
144329,"public void validateOnSubmit(CustomerBean customerBean){
  clearErrorsAndMessages();
  if (StringUtils.isBlank(customerBean.getCustomerName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getPhone())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getMobile())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getEmail())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmit(CustomerBean customerBean){
  clearErrorsAndMessages();
  if (StringUtils.isBlank(customerBean.getCustomerName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getEmail())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.7221621621621621
144330,"public String customerAction(){
  if (customerID != null) {
    List<Contacts> shipperContacts=customerService.findContactByRefIdAndType(""String_Node_Str"",customerID);
    for (int i=0; i < shipperContacts.size(); i++) {
      customerContactsMap.put(shipperContacts.get(i).getContactId(),shipperContacts.get(i).getFirstName() + ' ' + shipperContacts.get(i).getMiddleName()+ ' '+ shipperContacts.get(i).getLastName());
    }
    List<Address> shipperAddresses=customerService.findAddressByShipper(""String_Node_Str"",customerID);
    for (int i=0; i < shipperAddresses.size(); i++) {
      customerAddressMap.put(shipperAddresses.get(i).getAddressId(),shipperAddresses.get(i).getAddressLine1() + ' ' + shipperAddresses.get(i).getCity());
    }
    List<Contacts> shipperConsignee=customerService.findContactByRefIdAndType(""String_Node_Str"",customerID);
    for (int i=0; i < shipperConsignee.size(); i++) {
      customerConsigneeMap.put(shipperConsignee.get(i).getContactId(),shipperConsignee.get(i).getCompanyName() + ""String_Node_Str"" + shipperConsignee.get(i).getFirstName()+ ' '+ shipperConsignee.get(i).getMiddleName()+ ' '+ shipperConsignee.get(i).getLastName());
    }
    List<Address> consigneeAddresses=customerService.findAddressByCriteria(""String_Node_Str"",customerID);
    for (int i=0; i < consigneeAddresses.size(); i++) {
      consigneeAddressMap.put(consigneeAddresses.get(i).getAddressId(),consigneeAddresses.get(i).getAddressLine1() + ' ' + consigneeAddresses.get(i).getAddressLine2()+ ' '+ consigneeAddresses.get(i).getCity());
    }
    Customer customerContactInfo=customerService.findCustomerById(customerID);
    customerPhoneMap.put(customerContactInfo.getPhone(),customerContactInfo.getPhone());
    customerMobileMap.put(customerContactInfo.getMobile(),customerContactInfo.getMobile());
    customerEmailMap.put(customerContactInfo.getEmail(),customerContactInfo.getEmail());
    customerFaxMap.put(customerContactInfo.getFax(),customerContactInfo.getFax());
    List<Contacts> consigneeContacts=customerService.findConsigneeContactByRefIdAndType(""String_Node_Str"",customerID);
    for (int i=0; i < consigneeContacts.size(); i++) {
      consigneeContactMap.put(consigneeContacts.get(i).getContactId(),consigneeContacts.get(i).getFirstName() + ' ' + consigneeContacts.get(i).getMiddleName()+ ' '+ consigneeContacts.get(i).getLastName());
    }
  }
  return SUCCESS;
}","public String customerAction(){
  if (customerID != null) {
    List<Contacts> shipperContacts=customerService.findContactsByCustomer(customerID);
    for (int i=0; i < shipperContacts.size(); i++) {
      customerContactsMap.put(shipperContacts.get(i).getContactId(),shipperContacts.get(i).getFirstName() + ' ' + shipperContacts.get(i).getMiddleName()+ ' '+ shipperContacts.get(i).getLastName());
    }
    List<Address> shipperAddresses=customerService.findAddressByShipper(""String_Node_Str"",customerID);
    for (int i=0; i < shipperAddresses.size(); i++) {
      customerAddressMap.put(shipperAddresses.get(i).getAddressId(),shipperAddresses.get(i).getAddressLine1() + ' ' + shipperAddresses.get(i).getCity());
    }
    List<Contacts> shipperConsignee=customerService.findContactByRefIdAndType(""String_Node_Str"",customerID);
    for (int i=0; i < shipperConsignee.size(); i++) {
      customerConsigneeMap.put(shipperConsignee.get(i).getContactId(),shipperConsignee.get(i).getCompanyName() + ""String_Node_Str"" + shipperConsignee.get(i).getFirstName()+ ' '+ shipperConsignee.get(i).getMiddleName()+ ' '+ shipperConsignee.get(i).getLastName());
    }
    List<Address> consigneeAddresses=customerService.findAddressByCriteria(""String_Node_Str"",customerID);
    for (int i=0; i < consigneeAddresses.size(); i++) {
      consigneeAddressMap.put(consigneeAddresses.get(i).getAddressId(),consigneeAddresses.get(i).getAddressLine1() + ' ' + consigneeAddresses.get(i).getAddressLine2()+ ' '+ consigneeAddresses.get(i).getCity());
    }
    Customer customerContactInfo=customerService.findCustomerById(customerID);
    customerPhoneMap.put(customerContactInfo.getPhone(),customerContactInfo.getPhone());
    customerMobileMap.put(customerContactInfo.getMobile(),customerContactInfo.getMobile());
    customerEmailMap.put(customerContactInfo.getEmail(),customerContactInfo.getEmail());
    customerFaxMap.put(customerContactInfo.getFax(),customerContactInfo.getFax());
    List<Contacts> consigneeContacts=customerService.findConsigneeContactByRefIdAndType(""String_Node_Str"",customerID);
    for (int i=0; i < consigneeContacts.size(); i++) {
      consigneeContactMap.put(consigneeContacts.get(i).getContactId(),consigneeContacts.get(i).getFirstName() + ' ' + consigneeContacts.get(i).getMiddleName()+ ' '+ consigneeContacts.get(i).getLastName());
    }
  }
  return SUCCESS;
}",0.991402809813378
144331,"public String loadAddOrderPage(){
  System.out.println(""String_Node_Str"" + commonUtils.getUserNameFromSession());
  User userEntity=userService.findUserByUserName(commonUtils.getUserNameFromSession());
  if (userEntity.getUserType().equals(""String_Node_Str"")) {
    if (userEntity.getCustomerId() != null) {
      Customer customerEntity=customerService.findCustomerById(userEntity.getCustomerId());
      customerList.add(customerEntity);
    }
 else {
      customerList=customerService.findAllCustomer();
    }
  }
 else {
    customerList=customerService.findAllCustomer();
  }
  return SUCCESS;
}","public String loadAddOrderPage(){
  System.out.println(""String_Node_Str"" + commonUtils.getUserNameFromSession());
  User userEntity=userService.findUserByUserName(commonUtils.getUserNameFromSession());
  userType=userEntity.getUserType();
  if (userEntity.getUserType().equals(""String_Node_Str"")) {
    if (userEntity.getCustomerId() != null) {
      Customer customerEntity=customerService.findCustomerById(userEntity.getCustomerId());
      customerList.add(customerEntity);
    }
 else {
      customerList=customerService.findAllCustomer();
    }
  }
 else {
    customerList=customerService.findAllCustomer();
  }
  return SUCCESS;
}",0.970137207425343
144332,"public String viewFreightPlanningInland(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById(orderItemIdParam);
  if (entity == null) {
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    return INPUT;
  }
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  order=transformToOrderFormBean(orderEntity);
  if (orderItem.getVesselScheduleId() == null || orderItem.getVesselScheduleId().equals(""String_Node_Str"") || orderItem.getVesselScheduleId().length() == 0 || orderItem.getVesselScheduleId().isEmpty() || orderItem.getVesselScheduleId().equals(""String_Node_Str"")) {
    orderItem.setVendorSea(""String_Node_Str"");
    orderItem.setVesselScheduleId(""String_Node_Str"");
    vesselSchedule.setVesselName(""String_Node_Str"");
    vesselSchedule.setDepartureDate(""String_Node_Str"");
    vesselSchedule.setArrivalDate(""String_Node_Str"");
    vesselSchedule.setDepartureTime(""String_Node_Str"");
    vesselSchedule.setArrivalTime(""String_Node_Str"");
    vesselSchedule.setOriginPort(""String_Node_Str"");
    vesselSchedule.setDestinationPort(""String_Node_Str"");
  }
 else {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  if (orderItem.getTruckOrigin() == null || orderItem.getTruckOrigin().equals(""String_Node_Str"") || orderItem.getTruckOrigin().length() == 0 || orderItem.getTruckOrigin().isEmpty()) {
    orderItem.setVendorOrigin(""String_Node_Str"");
    orderItem.setDriverOrigin(""String_Node_Str"");
    orderItem.setTruckOrigin(""String_Node_Str"");
    orderItem.setFinalPickupDate(""String_Node_Str"");
    truck.setTruckType(""String_Node_Str"");
    truck.setPlateNumber(""String_Node_Str"");
    truck.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckOrigin());
    truck=transformToFormBeanTrucks(truckEntity);
  }
  if (orderItem.getTruckDestination() == null || orderItem.getTruckDestination().equals(""String_Node_Str"") || orderItem.getTruckDestination().length() == 0 || orderItem.getTruckDestination().isEmpty()) {
    orderItem.setVendorDestination(""String_Node_Str"");
    orderItem.setDriverDestination(""String_Node_Str"");
    orderItem.setTruckDestination(""String_Node_Str"");
    orderItem.setFinalDeliveryDate(""String_Node_Str"");
    truckDestination.setTruckType(""String_Node_Str"");
    truckDestination.setPlateNumber(""String_Node_Str"");
    truckDestination.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckDestination());
    truckDestination=transformToFormBeanTrucks(truckEntity);
  }
  OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(orderItem.getOrderItemId());
  orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemsListing));
  orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemsListing));
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  sessionAttributes.put(""String_Node_Str"",entity.getOrderId());
  sessionAttributes.put(""String_Node_Str"",entity.getOrderItemId());
  sessionAttributes.put(""String_Node_Str"",entity.getNameSize());
  if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String viewFreightPlanningInland(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById(orderItemIdParam);
  if (entity == null) {
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    return INPUT;
  }
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  if (!orderEntity.getOrderStatus().equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  order=transformToOrderFormBean(orderEntity);
  if (orderItem.getVesselScheduleId() == null || orderItem.getVesselScheduleId().equals(""String_Node_Str"") || orderItem.getVesselScheduleId().length() == 0 || orderItem.getVesselScheduleId().isEmpty() || orderItem.getVesselScheduleId().equals(""String_Node_Str"")) {
    orderItem.setVendorSea(""String_Node_Str"");
    orderItem.setVesselScheduleId(""String_Node_Str"");
    vesselSchedule.setVesselName(""String_Node_Str"");
    vesselSchedule.setDepartureDate(""String_Node_Str"");
    vesselSchedule.setArrivalDate(""String_Node_Str"");
    vesselSchedule.setDepartureTime(""String_Node_Str"");
    vesselSchedule.setArrivalTime(""String_Node_Str"");
    vesselSchedule.setOriginPort(""String_Node_Str"");
    vesselSchedule.setDestinationPort(""String_Node_Str"");
  }
 else {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  if (orderItem.getTruckOrigin() == null || orderItem.getTruckOrigin().equals(""String_Node_Str"") || orderItem.getTruckOrigin().length() == 0 || orderItem.getTruckOrigin().isEmpty()) {
    orderItem.setVendorOrigin(""String_Node_Str"");
    orderItem.setDriverOrigin(""String_Node_Str"");
    orderItem.setTruckOrigin(""String_Node_Str"");
    orderItem.setFinalPickupDate(""String_Node_Str"");
    truck.setTruckType(""String_Node_Str"");
    truck.setPlateNumber(""String_Node_Str"");
    truck.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckOrigin());
    truck=transformToFormBeanTrucks(truckEntity);
  }
  if (orderItem.getTruckDestination() == null || orderItem.getTruckDestination().equals(""String_Node_Str"") || orderItem.getTruckDestination().length() == 0 || orderItem.getTruckDestination().isEmpty()) {
    orderItem.setVendorDestination(""String_Node_Str"");
    orderItem.setDriverDestination(""String_Node_Str"");
    orderItem.setTruckDestination(""String_Node_Str"");
    orderItem.setFinalDeliveryDate(""String_Node_Str"");
    truckDestination.setTruckType(""String_Node_Str"");
    truckDestination.setPlateNumber(""String_Node_Str"");
    truckDestination.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckDestination());
    truckDestination=transformToFormBeanTrucks(truckEntity);
  }
  OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(orderItem.getOrderItemId());
  orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemsListing));
  orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemsListing));
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  sessionAttributes.put(""String_Node_Str"",entity.getOrderId());
  sessionAttributes.put(""String_Node_Str"",entity.getOrderItemId());
  sessionAttributes.put(""String_Node_Str"",entity.getNameSize());
  if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9865030674846624
144333,"public String loadUpdateStatus(){
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById(orderItemIdParam).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(orderItemIdParam);
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs(orderItemIdParam);
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
    if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
    }
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
  OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(orderItem.getOrderItemId());
  orderItemListings.add(transformToOrderItemFormBean(orderItemsListing));
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}","public String loadUpdateStatus(){
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById(orderItemIdParam).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(orderItemIdParam);
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs(orderItemIdParam);
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
    if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
    }
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
  OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(orderItem.getOrderItemId());
  orderItemListings.add(transformToOrderItemFormBean(orderItemsListing));
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}",0.9902813299232736
144334,"public String viewStatusListItems(){
  List<OrderItems> orderItemEntityList=orderStatusLogsService.findAllItemsByOrderId(orderIdParam);
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  bookingNumber=orderEntity.getOrderNumber();
  order=transformToOrderFormBean(orderEntity);
  for (  OrderItems orderItemsElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}","public String viewStatusListItems(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  if (orderIdParam == null) {
    orderIdParam=(Integer)sessionAttributes.get(orderIdParam);
  }
  List<OrderItems> orderItemEntityList=orderStatusLogsService.findAllItemsByOrderId(orderIdParam);
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  bookingNumber=orderEntity.getOrderNumber();
  order=transformToOrderFormBean(orderEntity);
  for (  OrderItems orderItemsElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}",0.8451242829827916
144335,"public String addVendorInPlanningError(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  if (orderItem.getVesselScheduleId() != null) {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  orderItems=(List)sessionAttributes.get(""String_Node_Str"");
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String addVendorInPlanningError(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  System.out.print(""String_Node_Str"" + entity.getVesselScheduleId());
  if (entity.getVesselScheduleId() != null) {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  orderItems=(List)sessionAttributes.get(""String_Node_Str"");
  orderItemOriginVendor.add(transformToOrderItemFormBean(entity));
  orderItemDestinationVendor.add(transformToOrderItemFormBean(entity));
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.9055649241146712
144336,"public String reloadInlandFreightPlanning(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  if (orderItem.getVesselScheduleId() != null) {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  orderItems=(List)sessionAttributes.get(""String_Node_Str"");
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String reloadInlandFreightPlanning(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  System.out.print(""String_Node_Str"" + entity.getVesselScheduleId());
  if (entity.getVesselScheduleId() != null) {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  orderItems=(List)sessionAttributes.get(""String_Node_Str"");
  orderItemOriginVendor.add(transformToOrderItemFormBean(entity));
  orderItemDestinationVendor.add(transformToOrderItemFormBean(entity));
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9197132616487456
144337,"public String loadSuccessSetStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str"")).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs((Integer)sessionAttributes.get(""String_Node_Str""));
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  orderStatusLogsBean.setOrderItemId(orderItemEntity.getOrderItemId());
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
    if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
    }
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
  String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
  for (int x=0; x < checkedItemsInSession.length; x++) {
    OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(checkedItemsInSession[x]));
    orderItemListings.add(transformToOrderItemFormBean(orderItemsListing));
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  sessionAttributes.put(""String_Node_Str"",orderEntity.getOrderId());
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}","public String loadSuccessSetStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str"")).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs((Integer)sessionAttributes.get(""String_Node_Str""));
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  orderStatusLogsBean.setOrderItemId(orderItemEntity.getOrderItemId());
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
    if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
    }
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
  String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
  for (int x=0; x < checkedItemsInSession.length; x++) {
    OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(checkedItemsInSession[x]));
    orderItemListings.add(transformToOrderItemFormBean(orderItemsListing));
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  sessionAttributes.put(""String_Node_Str"",orderEntity.getOrderId());
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}",0.938104745814775
144338,"public String loadUpdateStatus(){
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById(orderItemIdParam).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(orderItemIdParam);
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs(orderItemIdParam);
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
    if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
    }
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
  OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(orderItem.getOrderItemId());
  orderItemListings.add(transformToOrderItemFormBean(orderItemsListing));
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}","public String loadUpdateStatus(){
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById(orderItemIdParam).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(orderItemIdParam);
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs(orderItemIdParam);
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
    if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
    }
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    allFreightStatusList.add(""String_Node_Str"");
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
 else {
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
      allFreightStatusList.add(""String_Node_Str"");
    }
  }
  OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(orderItem.getOrderItemId());
  orderItemListings.add(transformToOrderItemFormBean(orderItemsListing));
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}",0.9257963542625668
144339,"public String updateStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    OrderStatusLogs orderStatusLogsEntity=transformToOrderStatusLogsEntity(orderStatusLogsBean);
    sessionAttributes.put(""String_Node_Str"",orderStatusLogsEntity.getOrderItemId());
    orderStatusLogsEntity.setCreatedTimestamp(new Date());
    orderStatusLogsEntity.setCreatedBy(commonUtils.getUserNameFromSession());
    orderStatusLogsService.addStatus(orderStatusLogsEntity);
  }
 catch (  Exception e) {
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  return SUCCESS;
}","public String updateStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    if (orderStatusLogsBean.getStatus().equals(""String_Node_Str"")) {
      sessionAttributes.put(""String_Node_Str"",orderStatusLogsBean.getOrderItemId());
      return ""String_Node_Str"";
    }
 else {
      OrderStatusLogs orderStatusLogsEntity=transformToOrderStatusLogsEntity(orderStatusLogsBean);
      sessionAttributes.put(""String_Node_Str"",orderStatusLogsEntity.getOrderItemId());
      orderStatusLogsEntity.setCreatedTimestamp(new Date());
      orderStatusLogsEntity.setCreatedBy(commonUtils.getUserNameFromSession());
      orderStatusLogsService.addStatus(orderStatusLogsEntity);
    }
  }
 catch (  Exception e) {
    addActionError(""String_Node_Str"");
    sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
    return INPUT;
  }
  return SUCCESS;
}",0.8092959671907041
144340,"public String serviceAccomplishedStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  List<OrderItems> orderItemEntityList=orderStatusLogsService.findAllItemsByOrderId(orderIdParam);
  Integer checkAllStatus=0;
  for (  OrderItems orderItemsElem : orderItemEntityList) {
    List<OrderStatusLogs> orderStatusEntityList=orderStatusLogsService.findAllShipmentLogs(orderItemsElem.getOrderItemId());
    for (    OrderStatusLogs orderStatusLogsElem : orderStatusEntityList) {
      if (orderStatusLogsElem.getStatus().equals(""String_Node_Str"") || orderStatusLogsElem.getStatus().equals(""String_Node_Str"")) {
        checkAllStatus+=1;
      }
 else       if (orderStatusLogsElem.getStatus().equals(""String_Node_Str"")) {
        orderEntity.setOrderStatus(""String_Node_Str"");
        orderService.updateOrder(orderEntity);
        return SUCCESS;
      }
    }
  }
  if (checkAllStatus >= orderItemEntityList.size() && orderItemEntityList.size() >= 1) {
    orderEntity.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntity);
    return SUCCESS;
  }
 else {
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    return ""String_Node_Str"";
  }
}","public String serviceAccomplishedStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  List<OrderItems> orderItemEntityList=orderStatusLogsService.findAllItemsByOrderId(orderIdParam);
  Integer checkAllStatus=0;
  for (  OrderItems orderItemsElem : orderItemEntityList) {
    List<OrderStatusLogs> orderStatusEntityList=orderStatusLogsService.findAllShipmentLogs(orderItemsElem.getOrderItemId());
    for (    OrderStatusLogs orderStatusLogsElem : orderStatusEntityList) {
      if (orderStatusLogsElem.getStatus().equals(""String_Node_Str"") || orderStatusLogsElem.getStatus().equals(""String_Node_Str"") || (orderEntity.getServiceMode().equals(""String_Node_Str"") && orderStatusLogsElem.getStatus().equals(""String_Node_Str""))) {
        checkAllStatus+=1;
      }
 else       if (orderStatusLogsElem.getStatus().equals(""String_Node_Str"")) {
        orderEntity.setOrderStatus(""String_Node_Str"");
        orderService.updateOrder(orderEntity);
        return SUCCESS;
      }
    }
  }
  if (checkAllStatus >= orderItemEntityList.size() && orderItemEntityList.size() >= 1) {
    orderEntity.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntity);
    return SUCCESS;
  }
 else {
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    return ""String_Node_Str"";
  }
}",0.9540796963946868
144341,"private void findCurrentUserPermissions(Integer userId){
  List<Permission> selectedPermissionsList=(List<Permission>)permissionService.findPermissionByUser(getClientId(),userId);
  if (null != selectedPermissionsList) {
    preSelectedPermissions=new String[selectedPermissionsList.size()];
    preSelectedPermissionNames=new String[selectedPermissionsList.size()];
  }
  int i;
  if (isEmpty(selectedPermissionsList.size())) {
    for (i=0; i < selectedPermissionsList.size(); i++) {
      String permissionId;
      permissionId=selectedPermissionsList.get(i).getPermissionId().toString();
      preSelectedPermissions[i]=permissionId;
      String permissionName=selectedPermissionsList.get(i).getDescription();
      preSelectedPermissionNames[i]=permissionName;
    }
  }
}","private void findCurrentUserPermissions(Integer userId){
  List<Permission> selectedPermissionsList=(List<Permission>)permissionService.findPermissionByUser(getClientId(),userId);
  preSelectedPermissions=new String[selectedPermissionsList.size()];
  int i;
  for (i=0; i < selectedPermissionsList.size(); i++) {
    String permissionId;
    permissionId=selectedPermissionsList.get(i).getPermissionId().toString();
    preSelectedPermissions[i]=permissionId;
  }
}",0.6672025723472669
144342,"public String home(){
  portsList=parameterService.getParameterMap(ParameterConstants.PORTS);
  Booking=notificationService.countAll();
  Customer=notificationService.countAllCustomer();
  User=notificationService.countAllUser();
  Vendor=notificationService.countAllVendor();
  AllNotification=notificationService.countAllNotification();
  System.out.println(""String_Node_Str"" + Booking);
  System.out.println(""String_Node_Str"" + Customer);
  System.out.println(""String_Node_Str"" + User);
  System.out.println(""String_Node_Str"" + Vendor);
  System.out.println(""String_Node_Str"" + AllNotification);
  changeOrigin();
  viewStatusList();
  return SUCCESS;
}","public String home(){
  System.out.println(""String_Node_Str"" + username);
  portsList=parameterService.getParameterMap(ParameterConstants.PORTS);
  Booking=notificationService.countAll();
  Customer=notificationService.countAllCustomer();
  User=notificationService.countAllUser();
  Vendor=notificationService.countAllVendor();
  AllNotification=notificationService.countAllNotification();
  System.out.println(""String_Node_Str"" + Booking);
  System.out.println(""String_Node_Str"" + Customer);
  System.out.println(""String_Node_Str"" + User);
  System.out.println(""String_Node_Str"" + Vendor);
  System.out.println(""String_Node_Str"" + AllNotification);
  changeOrigin();
  return SUCCESS;
}",0.9464285714285714
144343,"public String execute() throws Exception {
  portsList=parameterService.getParameterMap(ParameterConstants.PORTS);
  log.debug(""String_Node_Str"");
  HttpServletRequest request=ServletActionContext.getRequest();
  Principal user=request.getUserPrincipal();
  this.setUsername(request.getUserPrincipal().getName());
  User userEntity=userService.findUserByUserName(username);
  if (userEntity != null) {
    userService.updateLastVisitDate(userEntity);
    sessionAttributes.put(""String_Node_Str"",userEntity.getClient().getClientId());
    sessionAttributes.put(""String_Node_Str"",userEntity);
    sessionAttributes.put(""String_Node_Str"",userEntity.getFirstName() + ""String_Node_Str"" + userEntity.getLastName());
    Booking=notificationService.countAll();
    Customer=notificationService.countAllCustomer();
    User=notificationService.countAllUser();
    Vendor=notificationService.countAllVendor();
    AllNotification=notificationService.countAllNotification();
    System.out.println(""String_Node_Str"" + Booking);
    System.out.println(""String_Node_Str"" + Customer);
    System.out.println(""String_Node_Str"" + User);
    System.out.println(""String_Node_Str"" + Vendor);
    System.out.println(""String_Node_Str"" + AllNotification);
    return SUCCESS;
  }
 else {
    log.debug(""String_Node_Str"");
    clearErrorsAndMessages();
    addActionError(getText(""String_Node_Str""));
    return INPUT;
  }
}","public String execute() throws Exception {
  portsList=parameterService.getParameterMap(ParameterConstants.PORTS);
  log.debug(""String_Node_Str"");
  HttpServletRequest request=ServletActionContext.getRequest();
  Principal user=request.getUserPrincipal();
  this.setUsername(request.getUserPrincipal().getName());
  User userEntity=userService.findUserByUserName(username);
  if (userEntity != null) {
    userService.updateLastVisitDate(userEntity);
    sessionAttributes.put(""String_Node_Str"",userEntity.getClient().getClientId());
    sessionAttributes.put(""String_Node_Str"",userEntity);
    sessionAttributes.put(""String_Node_Str"",userEntity.getFirstName() + ""String_Node_Str"" + userEntity.getLastName());
    Booking=notificationService.countAll();
    Customer=notificationService.countAllCustomer();
    User=notificationService.countAllUser();
    Vendor=notificationService.countAllVendor();
    AllNotification=notificationService.countAllNotification();
    System.out.println(""String_Node_Str"" + Booking);
    System.out.println(""String_Node_Str"" + Customer);
    System.out.println(""String_Node_Str"" + User);
    System.out.println(""String_Node_Str"" + Vendor);
    System.out.println(""String_Node_Str"" + AllNotification);
    viewStatusList();
    return SUCCESS;
  }
 else {
    log.debug(""String_Node_Str"");
    clearErrorsAndMessages();
    addActionError(getText(""String_Node_Str""));
    return INPUT;
  }
}",0.9922151450813872
144344,"public String deleteItem(){
  OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemIdParam);
  orderService.deleteItem(orderItemEntity);
  Orders orderEntityForm=orderService.findOrdersById(orderItemEntity.getOrderId());
  order=transformToOrderFormBean(orderEntityForm);
  Map sessionAttributes=ActionContext.getContext().getSession();
  customerItems=(List)sessionAttributes.get(""String_Node_Str"");
  List<OrderItems> orderItemEntityList=orderService.findAllItemByOrderId(orderItemEntity.getOrderId());
  for (  OrderItems orderItemElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemsFormBean(orderItemElem));
  }
  if (orderItemEntityList.size() == 0) {
    orderEntityForm.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntityForm);
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  sessionAttributes.put(""String_Node_Str"",orderEntityForm.getOrderId());
  return SUCCESS;
}","public String deleteItem(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemIdParam);
  List<OrderStatusLogs> statusLogsEntity=orderStatusLogsService.findAllShipmentLogs(orderItemIdParam);
  for (  OrderStatusLogs statusLogsElem : statusLogsEntity) {
    if (statusLogsElem.getStatus().equals(""String_Node_Str"") || statusLogsElem.getStatus().equals(""String_Node_Str"")) {
      Orders orderEntityForm=orderService.findOrdersById(orderItemEntity.getOrderId());
      order=transformToOrderFormBean(orderEntityForm);
      Integer contactIdParam=orderEntityForm.getShipperContactId();
      Contacts contactEntity=customerService.findContactById(contactIdParam);
      Customer customerEntity=customerService.findCustomerById(contactEntity.getReferenceId());
      customerItems=customerService.findItemByCustomerId(customerEntity.getCustomerId());
      List<OrderItems> orderItemEntityList=orderService.findAllItemByOrderId((Integer)sessionAttributes.get(""String_Node_Str""));
      for (      OrderItems orderItemElem : orderItemEntityList) {
        orderItems.add(transformToOrderItemsFormBean(orderItemElem));
      }
      sessionAttributes.put(""String_Node_Str"",customerItems);
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      return ""String_Node_Str"";
    }
  }
  orderService.deleteItem(orderItemEntity);
  Orders orderEntityForm=orderService.findOrdersById(orderItemEntity.getOrderId());
  order=transformToOrderFormBean(orderEntityForm);
  customerItems=(List)sessionAttributes.get(""String_Node_Str"");
  List<OrderItems> orderItemEntityList=orderService.findAllItemByOrderId(orderItemEntity.getOrderId());
  for (  OrderItems orderItemElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemsFormBean(orderItemElem));
  }
  if (orderItemEntityList.size() == 0) {
    orderEntityForm.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntityForm);
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  sessionAttributes.put(""String_Node_Str"",orderEntityForm.getOrderId());
  return SUCCESS;
}",0.3863563914568059
144345,"public String addItemsInTable(){
  if (hasFieldErrors()) {
    return INPUT;
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntityForm=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntityForm);
  String orderLimit=orderEntityForm.getServiceRequirement();
  List<OrderItems> orderItemNumberList=orderService.findAllItemByOrderId((Integer)sessionAttributes.get(""String_Node_Str""));
  if (orderEntityForm.getServiceRequirement().equals(""String_Node_Str"") || orderEntityForm.getServiceRequirement().equals(""String_Node_Str"") || orderEntityForm.getServiceRequirement().equals(""String_Node_Str"")|| orderEntityForm.getServiceRequirement().equals(""String_Node_Str"")) {
    List<Items> allItemsList=customerService.findAllItemsInTable();
    Integer itemCheck=0;
    for (    Items itemsElem : allItemsList) {
      if (itemsElem.getItemCode().equals(item.getItemCode())) {
        itemCheck=itemCheck + 1;
      }
    }
    if (itemCheck == 0) {
      Items itemEntity=transformToEntityBeanItem(item);
      itemEntity.setModifiedBy(commonUtils.getUserNameFromSession());
      itemEntity.setCreatedBy(commonUtils.getUserNameFromSession());
      itemEntity.setCreatedTimeStamp(new Date());
      customerService.addItem(itemEntity);
    }
  }
  Integer orderItemQuantityTotal=0;
  for (int i=0; i < orderItemNumberList.size(); i++) {
    orderItemQuantityTotal=orderItemQuantityTotal + orderItemNumberList.get(i).getQuantity();
  }
  OrderItems orderItemEntity=transformToOrderItemsEntityBean(orderItem);
  if (orderEntityForm.getOrderStatus().equals(""String_Node_Str"") || orderEntityForm.getOrderStatus().equals(""String_Node_Str"")) {
    orderEntityForm.setOrderStatus(""String_Node_Str"");
  }
 else {
    orderEntityForm.setOrderStatus(orderEntityForm.getOrderStatus());
  }
  orderService.updateOrder(orderEntityForm);
  Integer orderItemEntityQuantity=orderItem.getQuantity();
  Integer orderItemQuantityGrandTotal=orderItemQuantityTotal + orderItemEntityQuantity;
  if (orderLimit.equals(""String_Node_Str"") || orderLimit.equals(""String_Node_Str"")) {
    if (orderItemQuantityGrandTotal > 5) {
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
 else {
      if (orderItem.getQuantity() == 1) {
        orderItemEntity.setQuantity(1);
        orderItemEntity.setNameSize(orderItem.getNameSize());
        orderService.addItem(orderItemEntity);
      }
 else {
        Integer saveLoop=orderItem.getQuantity();
        for (int i=0; i < saveLoop; i++) {
          orderItemEntity.setQuantity(1);
          orderItemEntity.setNameSize(orderItem.getNameSize());
          orderService.addItem(orderItemEntity);
        }
      }
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
  }
 else {
    if (orderItemQuantityGrandTotal > 250) {
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
 else {
      orderItemEntity.setQuantity(orderItem.getQuantity());
      Items itemEntity=customerService.findItemByCode(item.getItemCode());
      Double dblVolume=(orderItem.getQuantity() * (itemEntity.getLength() * itemEntity.getWidth() * itemEntity.getHeight()));
      String strVolume=dblVolume.toString();
      orderItemEntity.setVolume(Float.parseFloat(strVolume));
      orderItemEntity.setNameSize(item.getItemCode());
      orderService.addItem(orderItemEntity);
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
  }
  sessionAttributes.put(""String_Node_Str"",customerItems);
  Integer idOrder=orderItemEntity.getOrderId();
  sessionAttributes.put(""String_Node_Str"",idOrder);
  return SUCCESS;
}","public String addItemsInTable(){
  if (hasFieldErrors()) {
    return INPUT;
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntityForm=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntityForm);
  Integer contactIdParam=orderEntityForm.getShipperContactId();
  Contacts contactEntity=customerService.findContactById(contactIdParam);
  Customer customerEntity=customerService.findCustomerById(contactEntity.getReferenceId());
  customerItems=customerService.findItemByCustomerId(customerEntity.getCustomerId());
  List<OrderItems> orderItemEntityList=orderService.findAllItemByOrderId((Integer)sessionAttributes.get(""String_Node_Str""));
  for (  OrderItems orderItemElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemsFormBean(orderItemElem));
  }
  sessionAttributes.put(""String_Node_Str"",customerItems);
  String orderLimit=orderEntityForm.getServiceRequirement();
  List<OrderItems> orderItemNumberList=orderService.findAllItemByOrderId((Integer)sessionAttributes.get(""String_Node_Str""));
  Integer checkItems=0;
  for (  OrderItems orderItemsElem : orderItemNumberList) {
    List<OrderStatusLogs> statusLogsEntity=orderStatusLogsService.findAllShipmentLogs(orderItemsElem.getOrderItemId());
    for (    OrderStatusLogs statusLogsElem : statusLogsEntity) {
      if (statusLogsElem.getStatus().equals(""String_Node_Str"") || statusLogsElem.getStatus().equals(""String_Node_Str"")) {
        checkItems=checkItems + 1;
      }
    }
  }
  if (checkItems >= 1) {
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return ""String_Node_Str"";
  }
  if (orderEntityForm.getServiceRequirement().equals(""String_Node_Str"") || orderEntityForm.getServiceRequirement().equals(""String_Node_Str"") || orderEntityForm.getServiceRequirement().equals(""String_Node_Str"")|| orderEntityForm.getServiceRequirement().equals(""String_Node_Str"")) {
    List<Items> allItemsList=customerService.findAllItemsInTable();
    Integer itemCheck=0;
    for (    Items itemsElem : allItemsList) {
      if (itemsElem.getItemCode().equals(item.getItemCode())) {
        itemCheck=itemCheck + 1;
      }
    }
    if (itemCheck == 0) {
      Items itemEntity=transformToEntityBeanItem(item);
      itemEntity.setModifiedBy(commonUtils.getUserNameFromSession());
      itemEntity.setCreatedBy(commonUtils.getUserNameFromSession());
      itemEntity.setCreatedTimeStamp(new Date());
      customerService.addItem(itemEntity);
    }
  }
  Integer orderItemQuantityTotal=0;
  for (int i=0; i < orderItemNumberList.size(); i++) {
    orderItemQuantityTotal=orderItemQuantityTotal + orderItemNumberList.get(i).getQuantity();
  }
  OrderItems orderItemEntity=transformToOrderItemsEntityBean(orderItem);
  if (orderEntityForm.getOrderStatus().equals(""String_Node_Str"") || orderEntityForm.getOrderStatus().equals(""String_Node_Str"")) {
    orderEntityForm.setOrderStatus(""String_Node_Str"");
  }
 else {
    orderEntityForm.setOrderStatus(orderEntityForm.getOrderStatus());
  }
  orderService.updateOrder(orderEntityForm);
  Integer orderItemEntityQuantity=orderItem.getQuantity();
  Integer orderItemQuantityGrandTotal=orderItemQuantityTotal + orderItemEntityQuantity;
  if (orderLimit.equals(""String_Node_Str"") || orderLimit.equals(""String_Node_Str"")) {
    if (orderItemQuantityGrandTotal > 5) {
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
 else {
      if (orderItem.getQuantity() == 1) {
        orderItemEntity.setQuantity(1);
        orderItemEntity.setNameSize(orderItem.getNameSize());
        orderService.addItem(orderItemEntity);
      }
 else {
        Integer saveLoop=orderItem.getQuantity();
        for (int i=0; i < saveLoop; i++) {
          orderItemEntity.setQuantity(1);
          orderItemEntity.setNameSize(orderItem.getNameSize());
          orderService.addItem(orderItemEntity);
        }
      }
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
  }
 else {
    if (orderItemQuantityGrandTotal > 250) {
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
 else {
      orderItemEntity.setQuantity(orderItem.getQuantity());
      Items itemEntity=customerService.findItemByCode(item.getItemCode());
      Double dblVolume=(orderItem.getQuantity() * (itemEntity.getLength() * itemEntity.getWidth() * itemEntity.getHeight()));
      String strVolume=dblVolume.toString();
      orderItemEntity.setVolume(Float.parseFloat(strVolume));
      orderItemEntity.setNameSize(item.getItemCode());
      orderService.addItem(orderItemEntity);
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
  }
  sessionAttributes.put(""String_Node_Str"",customerItems);
  Integer idOrder=orderItemEntity.getOrderId();
  sessionAttributes.put(""String_Node_Str"",idOrder);
  return SUCCESS;
}",0.857787301229277
144346,"public String cancelOrder(){
  String column=getColumnFilter();
  List<Orders> orderEntityList=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    orderEntityList=orderService.findOrdersByCriteria(column,order.getOrderKeyword(),getClientId());
  }
 else {
    orderEntityList=orderService.findAllOrders();
  }
  for (  Orders orderElem : orderEntityList) {
    orders.add(transformToOrderFormBean(orderElem));
  }
  List<OrderItems> orderItemListing=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  Integer checkItems=0;
  for (  OrderItems orderItemElem : orderItemListing) {
    if (orderItemElem.getStatus().equals(""String_Node_Str"") || orderItemElem.getStatus().equals(""String_Node_Str"")) {
      checkItems=checkItems + 1;
    }
  }
  if (checkItems >= 1) {
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
 else {
    Orders orderEntity=orderService.findOrdersById(orderIdParam);
    orderEntity.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntity);
    for (int i=0; i < orderItemListing.size(); i++) {
      orderItemListing.get(i).setVendorSea(null);
      orderItemListing.get(i).setVendorOrigin(null);
      orderItemListing.get(i).setVendorDestination(null);
      orderItemListing.get(i).setVesselScheduleId(null);
      orderItemListing.get(i).setDriverOrigin(null);
      orderItemListing.get(i).setDriverDestination(null);
      orderItemListing.get(i).setTruckOrigin(null);
      orderItemListing.get(i).setTruckDestination(null);
      orderItemListing.get(i).setFinalPickupDate(null);
      orderItemListing.get(i).setFinalDeliveryDate(null);
      orderItemListing.get(i).setContainerId(null);
      orderItemListing.get(i).setServiceRequirement(null);
      orderItemListing.get(i).setStatus(""String_Node_Str"");
      orderService.updateItemListing(orderItemListing.get(i));
    }
    List<Documents> documentEntityListing=documentsService.findDocumentsByOrderId(orderIdParam);
    for (int j=0; j < documentEntityListing.size(); j++) {
      documentsService.deleteDocument(documentEntityListing.get(j));
    }
    clearErrorsAndMessages();
    addActionMessage(""String_Node_Str"");
    return SUCCESS;
  }
}","public String cancelOrder(){
  String column=getColumnFilter();
  List<Orders> orderEntityList=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    orderEntityList=orderService.findOrdersByCriteria(column,order.getOrderKeyword(),getClientId());
  }
 else {
    orderEntityList=orderService.findAllOrders();
  }
  for (  Orders orderElem : orderEntityList) {
    orders.add(transformToOrderFormBean(orderElem));
  }
  List<OrderItems> orderItemListing=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  Integer checkItems=0;
  for (  OrderItems orderItemsElem : orderItemListing) {
    List<OrderStatusLogs> statusLogsEntity=orderStatusLogsService.findAllShipmentLogs(orderItemsElem.getOrderItemId());
    for (    OrderStatusLogs statusLogsElem : statusLogsEntity) {
      if (statusLogsElem.getStatus().equals(""String_Node_Str"") || statusLogsElem.getStatus().equals(""String_Node_Str"")) {
        checkItems=checkItems + 1;
      }
    }
  }
  if (checkItems >= 1) {
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
 else {
    Orders orderEntity=orderService.findOrdersById(orderIdParam);
    orderEntity.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntity);
    for (int i=0; i < orderItemListing.size(); i++) {
      orderItemListing.get(i).setVendorSea(null);
      orderItemListing.get(i).setVendorOrigin(null);
      orderItemListing.get(i).setVendorDestination(null);
      orderItemListing.get(i).setVesselScheduleId(null);
      orderItemListing.get(i).setDriverOrigin(null);
      orderItemListing.get(i).setDriverDestination(null);
      orderItemListing.get(i).setTruckOrigin(null);
      orderItemListing.get(i).setTruckDestination(null);
      orderItemListing.get(i).setFinalPickupDate(null);
      orderItemListing.get(i).setFinalDeliveryDate(null);
      orderItemListing.get(i).setContainerId(null);
      orderItemListing.get(i).setServiceRequirement(null);
      orderItemListing.get(i).setStatus(""String_Node_Str"");
      orderService.updateItemListing(orderItemListing.get(i));
    }
    List<Documents> documentEntityListing=documentsService.findDocumentsByOrderId(orderIdParam);
    for (int j=0; j < documentEntityListing.size(); j++) {
      documentsService.deleteDocument(documentEntityListing.get(j));
    }
    clearErrorsAndMessages();
    addActionMessage(""String_Node_Str"");
    return SUCCESS;
  }
}",0.9477531713609976
144347,"public OrderItemsBean transformToOrderItemFormBean(OrderItems entity){
  OrderStatusLogs statusLogsEntity=orderStatusLogsService.findOrderStatusLogsById(entity.getOrderItemId());
  OrderStatusLogs timeLogsEntity=orderStatusLogsService.findOrderStatusLogsById(entity.getOrderItemId());
  OrderItemsBean formBean=new OrderItemsBean();
  formBean.setOrderItemId(entity.getOrderItemId());
  if (timeLogsEntity == null || timeLogsEntity.equals(""String_Node_Str"")) {
    formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  }
 else {
    formBean.setCreatedTimestamp(orderStatusLogsService.findOrderStatusLogsById(entity.getOrderItemId()).getActualDate());
  }
  formBean.setNameSize(entity.getNameSize());
  if (statusLogsEntity == null || statusLogsEntity.equals(""String_Node_Str"")) {
    formBean.setStatus(entity.getStatus());
  }
 else {
    formBean.setStatus(orderStatusLogsService.findOrderStatusLogsById(entity.getOrderItemId()).getStatus());
  }
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setCreatedBy(entity.getCreatedBy());
  if (entity.getContainerId() != null) {
    Container containerNumEntity=containerService.findContainerById(entity.getContainerId());
    formBean.setContainerNumber(containerNumEntity.getContainerNumber());
    formBean.setSealNumber(containerNumEntity.getSealNumber());
    formBean.setBulletSeal(containerNumEntity.getBulletSeal());
    formBean.setShippingSeal(containerNumEntity.getShippingSeal());
    formBean.setContainerSize(containerNumEntity.getContainerSize());
  }
 else {
    Orders orderEntity=orderService.findOrdersById(operationsService.findOrderItemById(entity.getOrderItemId()).getOrderId());
    if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
      formBean.setContainerSize(operationsService.findOrderItemById(entity.getOrderItemId()).getNameSize());
    }
  }
  return formBean;
}","public OrderItemsBean transformToOrderItemFormBean(OrderItems entity){
  OrderStatusLogs statusLogsEntity=orderStatusLogsService.findOrderStatusLogsById(entity.getOrderItemId());
  OrderStatusLogs timeLogsEntity=orderStatusLogsService.findOrderStatusLogsById(entity.getOrderItemId());
  OrderItemsBean formBean=new OrderItemsBean();
  formBean.setOrderItemId(entity.getOrderItemId());
  if (timeLogsEntity == null || timeLogsEntity.equals(""String_Node_Str"")) {
    formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  }
 else {
    formBean.setCreatedTimestamp(orderStatusLogsService.findOrderStatusLogsById(entity.getOrderItemId()).getActualDate());
  }
  formBean.setNameSize(entity.getNameSize());
  if (statusLogsEntity == null || statusLogsEntity.equals(""String_Node_Str"")) {
    formBean.setStatus(entity.getStatus());
  }
 else {
    formBean.setStatus(orderStatusLogsService.findOrderStatusLogsById(entity.getOrderItemId()).getStatus());
  }
  formBean.setOrderItemId(entity.getOrderItemId());
  User userEntity=userService.findUserByUserName(entity.getCreatedBy());
  formBean.setCreatedBy(userEntity.getFirstName() + ""String_Node_Str"" + userEntity.getLastName());
  if (entity.getContainerId() != null) {
    Container containerNumEntity=containerService.findContainerById(entity.getContainerId());
    formBean.setContainerNumber(containerNumEntity.getContainerNumber());
    formBean.setSealNumber(containerNumEntity.getSealNumber());
    formBean.setBulletSeal(containerNumEntity.getBulletSeal());
    formBean.setShippingSeal(containerNumEntity.getShippingSeal());
    formBean.setContainerSize(containerNumEntity.getContainerSize());
  }
 else {
    Orders orderEntity=orderService.findOrdersById(operationsService.findOrderItemById(entity.getOrderItemId()).getOrderId());
    if (orderEntity.getServiceRequirement().equals(""String_Node_Str"")) {
      formBean.setContainerSize(operationsService.findOrderItemById(entity.getOrderItemId()).getNameSize());
    }
  }
  return formBean;
}",0.9589111453518232
144348,"public OrderStatusLogsBean transformToOrderStatusLogsFormBean(OrderStatusLogs entity){
  OrderStatusLogsBean formBean=new OrderStatusLogsBean();
  formBean.setStatusId(entity.getStatusId());
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setActualDate(entity.getActualDate());
  formBean.setStatus(entity.getStatus());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setNameSize(orderService.findOrderItemByOrderItemId(entity.getOrderItemId()).getNameSize());
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setOrderId(operationsService.findOrderItemById(entity.getOrderItemId()).getOrderId());
  return formBean;
}","public OrderStatusLogsBean transformToOrderStatusLogsFormBean(OrderStatusLogs entity){
  OrderStatusLogsBean formBean=new OrderStatusLogsBean();
  formBean.setStatusId(entity.getStatusId());
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setActualDate(entity.getActualDate());
  formBean.setStatus(entity.getStatus());
  User userEntity=userService.findUserByUserName(entity.getCreatedBy());
  formBean.setCreatedBy(userEntity.getFirstName() + ""String_Node_Str"" + userEntity.getLastName());
  formBean.setNameSize(orderService.findOrderItemByOrderItemId(entity.getOrderItemId()).getNameSize());
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setOrderId(operationsService.findOrderItemById(entity.getOrderItemId()).getOrderId());
  return formBean;
}",0.8669410150891632
144349,"public String updateBulkStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String checkValue : checkedItemsInSession) {
      Integer bulkId=Integer.parseInt(checkValue);
      OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(bulkId);
      orderStatusLogsBean.setOrderItemId(orderItemEntity.getOrderItemId());
      OrderStatusLogs orderStatusLogsEntity=transformToOrderStatusLogsEntity(orderStatusLogsBean);
      sessionAttributes.put(""String_Node_Str"",orderStatusLogsEntity.getOrderItemId());
      orderStatusLogsEntity.setCreatedTimestamp(new Date());
      orderStatusLogsEntity.setCreatedBy(commonUtils.getUserNameFromSession());
      orderStatusLogsService.addStatus(orderStatusLogsEntity);
      orderItemEntity.setStatus(orderStatusLogsBean.getStatus());
      orderStatusLogsService.updateStatusOrderItem(orderItemEntity);
      Orders orderEntity=orderService.findOrdersById(orderIdParam);
      orderEntity.setOrderStatus(orderStatusLogsBean.getStatus());
      orderService.updateOrder(orderEntity);
    }
  }
 catch (  Exception e) {
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  return SUCCESS;
}","public String updateBulkStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String checkValue : checkedItemsInSession) {
      Integer bulkId=Integer.parseInt(checkValue);
      OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(bulkId);
      orderStatusLogsBean.setOrderItemId(orderItemEntity.getOrderItemId());
      OrderStatusLogs orderStatusLogsEntity=transformToOrderStatusLogsEntity(orderStatusLogsBean);
      sessionAttributes.put(""String_Node_Str"",orderStatusLogsEntity.getOrderItemId());
      orderStatusLogsEntity.setCreatedTimestamp(new Date());
      orderStatusLogsEntity.setCreatedBy(commonUtils.getUserNameFromSession());
      orderStatusLogsService.addStatus(orderStatusLogsEntity);
      orderItemEntity.setStatus(orderStatusLogsBean.getStatus());
      orderStatusLogsService.updateStatusOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  return SUCCESS;
}",0.924496644295302
144350,"public String updateStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    OrderStatusLogs orderStatusLogsEntity=transformToOrderStatusLogsEntity(orderStatusLogsBean);
    sessionAttributes.put(""String_Node_Str"",orderStatusLogsEntity.getOrderItemId());
    orderStatusLogsEntity.setCreatedTimestamp(new Date());
    orderStatusLogsEntity.setCreatedBy(commonUtils.getUserNameFromSession());
    orderStatusLogsService.addStatus(orderStatusLogsEntity);
    OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
    orderItemEntity.setStatus(orderStatusLogsBean.getStatus());
    orderStatusLogsService.updateStatusOrderItem(orderItemEntity);
    Orders orderEntity=orderService.findOrdersById(orderIdParam);
    orderEntity.setOrderStatus(orderStatusLogsBean.getStatus());
    orderService.updateOrder(orderEntity);
  }
 catch (  Exception e) {
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  return SUCCESS;
}","public String updateStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    OrderStatusLogs orderStatusLogsEntity=transformToOrderStatusLogsEntity(orderStatusLogsBean);
    sessionAttributes.put(""String_Node_Str"",orderStatusLogsEntity.getOrderItemId());
    orderStatusLogsEntity.setCreatedTimestamp(new Date());
    orderStatusLogsEntity.setCreatedBy(commonUtils.getUserNameFromSession());
    orderStatusLogsService.addStatus(orderStatusLogsEntity);
    OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
    orderItemEntity.setStatus(orderStatusLogsBean.getStatus());
    orderStatusLogsService.updateStatusOrderItem(orderItemEntity);
  }
 catch (  Exception e) {
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  return SUCCESS;
}",0.9068522483940042
144351,"@Override public void prepare(){
  vendorShippingList=vendorService.findVendorsByCriteria(""String_Node_Str"",""String_Node_Str"",1);
  vendorTruckingList=vendorService.findVendorsByCriteria(""String_Node_Str"",""String_Node_Str"",1);
  vendorTypeList=parameterService.getParameterMap(ParameterConstants.VENDOR_TYPE);
  vendorClassList=parameterService.getParameterMap(ParameterConstants.VENDOR_CLASS);
  statusList=parameterService.getParameterMap(ParameterConstants.STATUS);
  portsList=parameterService.getParameterMap(ParameterConstants.PORTS);
  truckTypeList=parameterService.getParameterMap(ParameterConstants.TRUCK_TYPE);
  bookingNumSearchList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.BOOKING_SEARCH);
  containerSearchList=parameterService.getParameterMap(ParameterConstants.CONTAINER_SEARCH);
  containerSizeList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.CONTAINER_SIZE);
  containerEirTypeList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.EIR_TYPE);
  containerStatusList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.CONTAINER_STATUS);
}","@Override public void prepare(){
  vendorShippingList=vendorService.findVendorsByCriteria(""String_Node_Str"",""String_Node_Str"",1);
  vendorTruckingList=vendorService.findVendorsByCriteria(""String_Node_Str"",""String_Node_Str"",1);
  vendorTypeList=parameterService.getParameterMap(ParameterConstants.VENDOR_TYPE);
  vendorClassList=parameterService.getParameterMap(ParameterConstants.VENDOR_CLASS);
  statusList=parameterService.getParameterMap(ParameterConstants.STATUS);
  portsList=parameterService.getParameterMap(ParameterConstants.PORTS);
  truckTypeList=parameterService.getParameterMap(ParameterConstants.TRUCK_TYPE);
  bookingNumSearchList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.BOOKING_SEARCH);
  containerSearchList=parameterService.getParameterMap(ParameterConstants.CONTAINER_SEARCH);
  containerSizeList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.CONTAINER_SIZE);
  containerEirTypeList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.EIR_TYPE);
  containerStatusList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.CONTAINER_STATUS);
  vendorList=vendorService.findAllShippingVendor();
}",0.9786359901396876
144352,"public String deleteItem(){
  OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemIdParam);
  orderService.deleteItem(orderItemEntity);
  Orders orderEntityForm=orderService.findOrdersById(orderItemEntity.getOrderId());
  order=transformToOrderFormBean(orderEntityForm);
  Map sessionAttributes=ActionContext.getContext().getSession();
  customerItems=(List)sessionAttributes.get(""String_Node_Str"");
  List<OrderItems> orderItemEntityList=orderService.findAllItemByOrderId(orderItemEntity.getOrderId());
  for (  OrderItems orderItemElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemsFormBean(orderItemElem));
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  sessionAttributes.put(""String_Node_Str"",orderEntityForm.getOrderId());
  return SUCCESS;
}","public String deleteItem(){
  OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemIdParam);
  orderService.deleteItem(orderItemEntity);
  Orders orderEntityForm=orderService.findOrdersById(orderItemEntity.getOrderId());
  order=transformToOrderFormBean(orderEntityForm);
  Map sessionAttributes=ActionContext.getContext().getSession();
  customerItems=(List)sessionAttributes.get(""String_Node_Str"");
  List<OrderItems> orderItemEntityList=orderService.findAllItemByOrderId(orderItemEntity.getOrderId());
  for (  OrderItems orderItemElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemsFormBean(orderItemElem));
  }
  if (orderItemEntityList.size() == 0) {
    orderEntityForm.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntityForm);
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  sessionAttributes.put(""String_Node_Str"",orderEntityForm.getOrderId());
  return SUCCESS;
}",0.9173693086003372
144353,"public String addAddress() throws Exception {
  if (hasFieldErrors()) {
    return INPUT;
  }
  Address addressEntity=transformToEntityBeanAddress(address);
  addressEntity.setModifiedBy(commonUtils.getUserNameFromSession());
  addressEntity.setCreatedBy(commonUtils.getUserNameFromSession());
  addressEntity.setCreatedTimestamp(new Date());
  customerService.addAddress(addressEntity);
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  return SUCCESS;
}","public String addAddress() throws Exception {
  if (hasFieldErrors()) {
    return INPUT;
  }
  try {
    Address addressEntity=transformToEntityBeanAddress(address);
    addressEntity.setModifiedBy(commonUtils.getUserNameFromSession());
    addressEntity.setCreatedBy(commonUtils.getUserNameFromSession());
    addressEntity.setCreatedTimestamp(new Date());
    customerService.addAddress(addressEntity);
  }
 catch (  AddressAlreadyExistsException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return INPUT;
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  return SUCCESS;
}",0.8729372937293729
144354,"@Override public List<VesselSchedules> findVesselSchedulesByCriteria(String column,String value){
  log.debug(""String_Node_Str"");
  Session session=getSessionFactory().getCurrentSession();
  List<VesselSchedules> vesselSchedules=session.createCriteria(VesselSchedules.class).add(Restrictions.like(column,value)).list();
  return vesselSchedules;
}","@Override public List<VesselSchedules> findVesselSchedulesByCriteria(String column,String value){
  log.debug(""String_Node_Str"");
  Session session=getSessionFactory().getCurrentSession();
  List<VesselSchedules> vesselSchedules=session.createCriteria(VesselSchedules.class).add(Restrictions.like(column,value,MatchMode.ANYWHERE)).list();
  return vesselSchedules;
}",0.9733520336605892
144355,"/** 
 * @param clientId
 * @companyCode companyCode 3-character companyCode (eg., NTY, MTY)
 * @return next booking no. Eg, NTY-0007, MTY-0000
 */
@Override public String findNextBookingNo(Integer clientId,String companyCode){
  Integer nextBookingNo=orderDao.findNextBookingNo(clientId,companyCode);
  String nextBookingNoAsStr=nextBookingNo.toString();
  int zerosToAdd=4 - nextBookingNoAsStr.length();
  if (zerosToAdd == 3)   return companyCode + ""String_Node_Str"" + nextBookingNoAsStr;
 else   if (zerosToAdd == 2)   return companyCode + ""String_Node_Str"" + nextBookingNoAsStr;
 else   return companyCode + ""String_Node_Str"" + nextBookingNoAsStr;
}","/** 
 * @param clientId
 * @companyCode companyCode 3-character companyCode (eg., NTY, MTY)
 * @return next booking no. Eg, NTY-0007, MTY-0000
 */
@Override public String findNextBookingNo(Integer clientId,String companyCode){
  Integer nextBookingNo=orderDao.findNextBookingNo(clientId,companyCode);
  String nextBookingNoAsStr=nextBookingNo.toString();
  int zerosToAdd=4 - nextBookingNoAsStr.length();
  if (zerosToAdd == 3)   return companyCode + ""String_Node_Str"" + nextBookingNoAsStr;
 else   if (zerosToAdd == 2)   return companyCode + ""String_Node_Str"" + nextBookingNoAsStr;
 else   if (zerosToAdd == 1)   return companyCode + ""String_Node_Str"" + nextBookingNoAsStr;
 else   return companyCode + ""String_Node_Str"" + nextBookingNoAsStr;
}",0.9341917024320456
144356,"public String cancelOrder(){
  String column=getColumnFilter();
  List<Orders> orderEntityList=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    orderEntityList=orderService.findOrdersByCriteria(column,order.getOrderKeyword(),getClientId());
  }
 else {
    orderEntityList=orderService.findAllOrders();
  }
  for (  Orders orderElem : orderEntityList) {
    orders.add(transformToOrderFormBean(orderElem));
  }
  List<OrderItems> orderItemListing=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  Integer checkItems=0;
  for (  OrderItems orderItemElem : orderItemListing) {
    if (orderItemElem.getStatus().equals(""String_Node_Str"") || orderItemElem.getStatus().equals(""String_Node_Str"")) {
      checkItems=checkItems + 1;
    }
  }
  if (orderItemListing.size() == checkItems && orderItemListing.size() >= 1) {
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
 else {
    Orders orderEntity=orderService.findOrdersById(orderIdParam);
    orderEntity.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntity);
    for (int i=0; i < orderItemListing.size(); i++) {
      orderItemListing.get(i).setVendorSea(null);
      orderItemListing.get(i).setVendorOrigin(null);
      orderItemListing.get(i).setVendorDestination(null);
      orderItemListing.get(i).setVesselScheduleId(null);
      orderItemListing.get(i).setDriverOrigin(null);
      orderItemListing.get(i).setDriverDestination(null);
      orderItemListing.get(i).setTruckOrigin(null);
      orderItemListing.get(i).setTruckDestination(null);
      orderItemListing.get(i).setFinalPickupDate(null);
      orderItemListing.get(i).setFinalDeliveryDate(null);
      orderItemListing.get(i).setContainerId(null);
      orderItemListing.get(i).setServiceRequirement(null);
      orderItemListing.get(i).setStatus(""String_Node_Str"");
      orderService.updateItemListing(orderItemListing.get(i));
    }
    List<Documents> documentEntityListing=documentsService.findDocumentsByOrderId(orderIdParam);
    for (int j=0; j < documentEntityListing.size(); j++) {
      documentsService.deleteDocument(documentEntityListing.get(j));
    }
    clearErrorsAndMessages();
    addActionMessage(""String_Node_Str"");
    return SUCCESS;
  }
}","public String cancelOrder(){
  String column=getColumnFilter();
  List<Orders> orderEntityList=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    orderEntityList=orderService.findOrdersByCriteria(column,order.getOrderKeyword(),getClientId());
  }
 else {
    orderEntityList=orderService.findAllOrders();
  }
  for (  Orders orderElem : orderEntityList) {
    orders.add(transformToOrderFormBean(orderElem));
  }
  List<OrderItems> orderItemListing=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  Integer checkItems=0;
  for (  OrderItems orderItemElem : orderItemListing) {
    if (orderItemElem.getStatus().equals(""String_Node_Str"") || orderItemElem.getStatus().equals(""String_Node_Str"")) {
      checkItems=checkItems + 1;
    }
  }
  if (checkItems >= 1) {
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
 else {
    Orders orderEntity=orderService.findOrdersById(orderIdParam);
    orderEntity.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntity);
    for (int i=0; i < orderItemListing.size(); i++) {
      orderItemListing.get(i).setVendorSea(null);
      orderItemListing.get(i).setVendorOrigin(null);
      orderItemListing.get(i).setVendorDestination(null);
      orderItemListing.get(i).setVesselScheduleId(null);
      orderItemListing.get(i).setDriverOrigin(null);
      orderItemListing.get(i).setDriverDestination(null);
      orderItemListing.get(i).setTruckOrigin(null);
      orderItemListing.get(i).setTruckDestination(null);
      orderItemListing.get(i).setFinalPickupDate(null);
      orderItemListing.get(i).setFinalDeliveryDate(null);
      orderItemListing.get(i).setContainerId(null);
      orderItemListing.get(i).setServiceRequirement(null);
      orderItemListing.get(i).setStatus(""String_Node_Str"");
      orderService.updateItemListing(orderItemListing.get(i));
    }
    List<Documents> documentEntityListing=documentsService.findDocumentsByOrderId(orderIdParam);
    for (int j=0; j < documentEntityListing.size(); j++) {
      documentsService.deleteDocument(documentEntityListing.get(j));
    }
    clearErrorsAndMessages();
    addActionMessage(""String_Node_Str"");
    return SUCCESS;
  }
}",0.9880106571936056
144357,"public String viewArchivedOrders(){
  String column=getColumnFilter();
  List<Orders> orderEntityList=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (column.equals(""String_Node_Str"")) {
      List<Customer> customerEntityList=customerService.findCustomersByCriteria(""String_Node_Str"",order.getOrderKeyword(),getClientId());
      List<Orders> allOrderEntityList=orderService.findAllOrders();
      for (      Customer customerElem : customerEntityList) {
        for (        Orders orderElem : allOrderEntityList) {
          if (customerElem.getCustomerId().equals(orderElem.getCustomerId())) {
            if (orderElem.getOrderStatus().equals(""String_Node_Str"")) {
              orders.add(transformToOrderFormBean(orderElem));
            }
          }
        }
      }
    }
 else     if (column.equals(""String_Node_Str"")) {
      List<Contacts> consigneeEntityList=customerService.findConsigneeByCriteria(""String_Node_Str"",order.getOrderKeyword(),getClientId());
      List<Orders> allOrderEntityList=orderService.findAllOrders();
      for (      Contacts consigneeElem : consigneeEntityList) {
        for (        Orders orderElem : allOrderEntityList) {
          if (consigneeElem.getContactId().equals(orderElem.getConsigneeContactId())) {
            if (orderElem.getOrderStatus().equals(""String_Node_Str"")) {
              orders.add(transformToOrderFormBean(orderElem));
            }
          }
        }
      }
    }
 else {
      orderEntityList=orderService.findOrdersByCriteria(column,order.getOrderKeyword(),getClientId());
      for (      Orders orderElem : orderEntityList) {
        if (orderElem.getOrderStatus().equals(""String_Node_Str"")) {
          orders.add(transformToOrderFormBean(orderElem));
        }
      }
    }
  }
 else {
    orderEntityList=orderService.findAllOrders();
    for (    Orders orderElem : orderEntityList) {
      if (orderElem.getOrderStatus().equals(""String_Node_Str"")) {
        orders.add(transformToOrderFormBean(orderElem));
      }
    }
  }
  return SUCCESS;
}","public String viewArchivedOrders(){
  String column=getColumnFilter();
  List<Orders> orderEntityList=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (column.equals(""String_Node_Str"")) {
      List<Customer> customerEntityList=customerService.findCustomersByCriteria(""String_Node_Str"",order.getOrderKeyword(),getClientId());
      List<Orders> allOrderEntityList=orderService.findAllOrders();
      for (      Customer customerElem : customerEntityList) {
        for (        Orders orderElem : allOrderEntityList) {
          if (customerElem.getCustomerId().equals(orderElem.getCustomerId())) {
            String strOrig=orderElem.getOrderStatus();
            int intIndex=strOrig.indexOf(""String_Node_Str"");
            if (intIndex != -1) {
              orders.add(transformToOrderFormBean(orderElem));
            }
          }
        }
      }
    }
 else     if (column.equals(""String_Node_Str"")) {
      List<Contacts> consigneeEntityList=customerService.findConsigneeByCriteria(""String_Node_Str"",order.getOrderKeyword(),getClientId());
      List<Orders> allOrderEntityList=orderService.findAllOrders();
      for (      Contacts consigneeElem : consigneeEntityList) {
        for (        Orders orderElem : allOrderEntityList) {
          if (consigneeElem.getContactId().equals(orderElem.getConsigneeContactId())) {
            String strOrig=orderElem.getOrderStatus();
            int intIndex=strOrig.indexOf(""String_Node_Str"");
            if (intIndex != -1) {
              orders.add(transformToOrderFormBean(orderElem));
            }
          }
        }
      }
    }
 else {
      orderEntityList=orderService.findOrdersByCriteria(column,order.getOrderKeyword(),getClientId());
      for (      Orders orderElem : orderEntityList) {
        String strOrig=orderElem.getOrderStatus();
        int intIndex=strOrig.indexOf(""String_Node_Str"");
        if (intIndex != -1) {
          orders.add(transformToOrderFormBean(orderElem));
        }
      }
    }
  }
 else {
    orderEntityList=orderService.findAllOrders();
    for (    Orders orderElem : orderEntityList) {
      String strOrig=orderElem.getOrderStatus();
      int intIndex=strOrig.indexOf(""String_Node_Str"");
      if (intIndex != -1) {
        orders.add(transformToOrderFormBean(orderElem));
      }
    }
  }
  return SUCCESS;
}",0.8663636363636363
144358,"public String archiveOrder(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  orderEntity.setOrderStatus(""String_Node_Str"");
  orderService.updateOrder(orderEntity);
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String archiveOrder(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  String str=orderEntity.getOrderStatus();
  orderEntity.setOrderStatus(str + ""String_Node_Str"");
  orderService.updateOrder(orderEntity);
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.9051620648259304
144359,"public String viewOrders(){
  String column=getColumnFilter();
  List<Orders> orderEntityList=new ArrayList<Orders>();
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  if (StringUtils.isNotBlank(column)) {
    System.out.println(""String_Node_Str"" + column);
    System.out.println(""String_Node_Str"" + order.getOrderKeyword());
    if (column.equals(""String_Node_Str"")) {
      List<Customer> customerEntityList=customerService.findCustomersByCriteria(""String_Node_Str"",order.getOrderKeyword(),getClientId());
      List<Orders> allOrderEntityList=orderService.findAllOrders();
      for (      Customer customerElem : customerEntityList) {
        for (        Orders orderElem : allOrderEntityList) {
          if (customerElem.getCustomerId().equals(orderElem.getCustomerId())) {
            if (!orderElem.getOrderStatus().equals(""String_Node_Str"")) {
              orders.add(transformToOrderFormBean(orderElem));
            }
          }
        }
      }
    }
 else     if (column.equals(""String_Node_Str"")) {
      List<Contacts> consigneeEntityList=customerService.findConsigneeByCriteria(""String_Node_Str"",order.getOrderKeyword(),getClientId());
      List<Orders> allOrderEntityList=orderService.findAllOrders();
      for (      Contacts consigneeElem : consigneeEntityList) {
        for (        Orders orderElem : allOrderEntityList) {
          if (consigneeElem.getContactId().equals(orderElem.getConsigneeContactId())) {
            if (!orderElem.getOrderStatus().equals(""String_Node_Str"")) {
              orders.add(transformToOrderFormBean(orderElem));
            }
          }
        }
      }
    }
 else {
      orderEntityList=orderService.findOrdersByCriteria(column,order.getOrderKeyword(),getClientId());
      for (      Orders orderElem : orderEntityList) {
        if (!orderElem.getOrderStatus().equals(""String_Node_Str"")) {
          orders.add(transformToOrderFormBean(orderElem));
        }
      }
    }
  }
 else {
    orderEntityList=orderService.findAllOrders();
    for (    Orders orderElem : orderEntityList) {
      if (orderElem.getOrderStatus().equals(""String_Node_Str"")) {
        String todayDate=(formatter.format(new Date()));
        String accomplishedDate=(formatter.format(orderElem.getModifiedTimestamp()));
        Date d1=null;
        Date d2=null;
        try {
          d1=formatter.parse(todayDate);
          d2=formatter.parse(accomplishedDate);
          System.out.println(d1 + ""String_Node_Str"");
          System.out.println(d2 + ""String_Node_Str"");
          long diff=d1.getTime() - d2.getTime();
          long diffSeconds=diff / 1000 % 60;
          long diffMinutes=diff / (60 * 1000) % 60;
          long diffHours=diff / (60 * 60 * 1000) % 24;
          long diffDays=diff / (24 * 60 * 60* 1000);
          System.out.println(diffDays + ""String_Node_Str"");
          System.out.println(diffHours + ""String_Node_Str"");
          System.out.println(diffMinutes + ""String_Node_Str"");
          System.out.println(diffSeconds + ""String_Node_Str"");
          orderElem.setAging(Integer.parseInt(String.valueOf(diffDays)));
          orderService.updateOrder(orderElem);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      if (orderElem.getAging() != null) {
        if (orderElem.getAging() >= 30) {
          orderElem.setOrderStatus(""String_Node_Str"");
          orderService.updateOrder(orderElem);
        }
      }
      if (!orderElem.getOrderStatus().equals(""String_Node_Str"")) {
        orders.add(transformToOrderFormBean(orderElem));
      }
    }
  }
  Booking=notificationService.countAll();
  System.out.println(""String_Node_Str"" + Booking);
  return SUCCESS;
}","public String viewOrders(){
  String column=getColumnFilter();
  List<Orders> orderEntityList=new ArrayList<Orders>();
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  if (StringUtils.isNotBlank(column)) {
    System.out.println(""String_Node_Str"" + column);
    System.out.println(""String_Node_Str"" + order.getOrderKeyword());
    if (column.equals(""String_Node_Str"")) {
      List<Customer> customerEntityList=customerService.findCustomersByCriteria(""String_Node_Str"",order.getOrderKeyword(),getClientId());
      List<Orders> allOrderEntityList=orderService.findAllOrders();
      for (      Customer customerElem : customerEntityList) {
        for (        Orders orderElem : allOrderEntityList) {
          if (customerElem.getCustomerId().equals(orderElem.getCustomerId())) {
            String strOrig=orderElem.getOrderStatus();
            int intIndex=strOrig.indexOf(""String_Node_Str"");
            if (intIndex == -1) {
              orders.add(transformToOrderFormBean(orderElem));
            }
          }
        }
      }
    }
 else     if (column.equals(""String_Node_Str"")) {
      List<Contacts> consigneeEntityList=customerService.findConsigneeByCriteria(""String_Node_Str"",order.getOrderKeyword(),getClientId());
      List<Orders> allOrderEntityList=orderService.findAllOrders();
      for (      Contacts consigneeElem : consigneeEntityList) {
        for (        Orders orderElem : allOrderEntityList) {
          if (consigneeElem.getContactId().equals(orderElem.getConsigneeContactId())) {
            String strOrig=orderElem.getOrderStatus();
            int intIndex=strOrig.indexOf(""String_Node_Str"");
            if (intIndex == -1) {
              orders.add(transformToOrderFormBean(orderElem));
            }
          }
        }
      }
    }
 else {
      orderEntityList=orderService.findOrdersByCriteria(column,order.getOrderKeyword(),getClientId());
      for (      Orders orderElem : orderEntityList) {
        String strOrig=orderElem.getOrderStatus();
        int intIndex=strOrig.indexOf(""String_Node_Str"");
        if (intIndex == -1) {
          orders.add(transformToOrderFormBean(orderElem));
        }
      }
    }
  }
 else {
    orderEntityList=orderService.findAllOrders();
    for (    Orders orderElem : orderEntityList) {
      if (orderElem.getOrderStatus().equals(""String_Node_Str"")) {
        String todayDate=(formatter.format(new Date()));
        String accomplishedDate=(formatter.format(orderElem.getModifiedTimestamp()));
        Date d1=null;
        Date d2=null;
        try {
          d1=formatter.parse(todayDate);
          d2=formatter.parse(accomplishedDate);
          System.out.println(d1 + ""String_Node_Str"");
          System.out.println(d2 + ""String_Node_Str"");
          long diff=d1.getTime() - d2.getTime();
          long diffSeconds=diff / 1000 % 60;
          long diffMinutes=diff / (60 * 1000) % 60;
          long diffHours=diff / (60 * 60 * 1000) % 24;
          long diffDays=diff / (24 * 60 * 60* 1000);
          System.out.println(diffDays + ""String_Node_Str"");
          System.out.println(diffHours + ""String_Node_Str"");
          System.out.println(diffMinutes + ""String_Node_Str"");
          System.out.println(diffSeconds + ""String_Node_Str"");
          orderElem.setAging(Integer.parseInt(String.valueOf(diffDays)));
          orderService.updateOrder(orderElem);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
      if (orderElem.getAging() != null) {
        if (orderElem.getAging() >= 30) {
          orderElem.setOrderStatus(""String_Node_Str"");
          orderService.updateOrder(orderElem);
        }
      }
      String strOrig=orderElem.getOrderStatus();
      int intIndex=strOrig.indexOf(""String_Node_Str"");
      if (intIndex == -1) {
        orders.add(transformToOrderFormBean(orderElem));
      }
    }
  }
  Booking=notificationService.countAll();
  System.out.println(""String_Node_Str"" + Booking);
  return SUCCESS;
}",0.9502332814930016
144360,"public String addItemsInTable(){
  if (hasFieldErrors()) {
    return INPUT;
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntityForm=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntityForm);
  String orderLimit=orderEntityForm.getServiceRequirement();
  List<OrderItems> orderItemNumberList=orderService.findAllItemByOrderId((Integer)sessionAttributes.get(""String_Node_Str""));
  if (orderEntityForm.getServiceRequirement().equals(""String_Node_Str"") || orderEntityForm.getServiceRequirement().equals(""String_Node_Str"") || orderEntityForm.getServiceRequirement().equals(""String_Node_Str"")|| orderEntityForm.getServiceRequirement().equals(""String_Node_Str"")) {
    List<Items> customerOldItems=customerService.findItemByCustomerId(item.getCustomerId());
    Integer itemCheck=0;
    for (    Items itemsElem : customerOldItems) {
      if (itemsElem.getItemCode().equals(item.getItemCode())) {
        itemCheck=itemCheck + 1;
      }
    }
    if (itemCheck == 0) {
      Items itemEntity=transformToEntityBeanItem(item);
      itemEntity.setModifiedBy(commonUtils.getUserNameFromSession());
      itemEntity.setCreatedBy(commonUtils.getUserNameFromSession());
      itemEntity.setCreatedTimeStamp(new Date());
      customerService.addItem(itemEntity);
    }
  }
  Integer orderItemQuantityTotal=0;
  for (int i=0; i < orderItemNumberList.size(); i++) {
    orderItemQuantityTotal=orderItemQuantityTotal + orderItemNumberList.get(i).getQuantity();
  }
  OrderItems orderItemEntity=transformToOrderItemsEntityBean(orderItem);
  if (orderEntityForm.getOrderStatus().equals(""String_Node_Str"") || orderEntityForm.getOrderStatus().equals(""String_Node_Str"")) {
    orderEntityForm.setOrderStatus(""String_Node_Str"");
  }
 else {
    orderEntityForm.setOrderStatus(orderEntityForm.getOrderStatus());
  }
  orderService.updateOrder(orderEntityForm);
  Integer orderItemEntityQuantity=orderItem.getQuantity();
  Integer orderItemQuantityGrandTotal=orderItemQuantityTotal + orderItemEntityQuantity;
  if (orderLimit.equals(""String_Node_Str"") || orderLimit.equals(""String_Node_Str"")) {
    if (orderItemQuantityGrandTotal > 5) {
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
 else {
      if (orderItem.getQuantity() == 1) {
        orderItemEntity.setQuantity(1);
        orderItemEntity.setNameSize(orderItem.getNameSize());
        orderService.addItem(orderItemEntity);
      }
 else {
        Integer saveLoop=orderItem.getQuantity();
        for (int i=0; i < saveLoop; i++) {
          orderItemEntity.setQuantity(1);
          orderItemEntity.setNameSize(orderItem.getNameSize());
          orderService.addItem(orderItemEntity);
        }
      }
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
  }
 else {
    if (orderItemQuantityGrandTotal > 250) {
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
 else {
      orderItemEntity.setQuantity(orderItem.getQuantity());
      Items itemEntity=customerService.findItemByCode(orderItem.getNameSize());
      Double dblVolume=(orderItem.getQuantity() * (itemEntity.getLength() * itemEntity.getWidth() * itemEntity.getHeight()));
      String strVolume=dblVolume.toString();
      orderItemEntity.setVolume(Float.parseFloat(strVolume));
      orderItemEntity.setNameSize(item.getItemCode());
      orderService.addItem(orderItemEntity);
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
  }
  sessionAttributes.put(""String_Node_Str"",customerItems);
  Integer idOrder=orderItemEntity.getOrderId();
  sessionAttributes.put(""String_Node_Str"",idOrder);
  return SUCCESS;
}","public String addItemsInTable(){
  if (hasFieldErrors()) {
    return INPUT;
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntityForm=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntityForm);
  String orderLimit=orderEntityForm.getServiceRequirement();
  List<OrderItems> orderItemNumberList=orderService.findAllItemByOrderId((Integer)sessionAttributes.get(""String_Node_Str""));
  if (orderEntityForm.getServiceRequirement().equals(""String_Node_Str"") || orderEntityForm.getServiceRequirement().equals(""String_Node_Str"") || orderEntityForm.getServiceRequirement().equals(""String_Node_Str"")|| orderEntityForm.getServiceRequirement().equals(""String_Node_Str"")) {
    List<Items> allItemsList=customerService.findAllItemsInTable();
    Integer itemCheck=0;
    for (    Items itemsElem : allItemsList) {
      if (itemsElem.getItemCode().equals(item.getItemCode())) {
        itemCheck=itemCheck + 1;
      }
    }
    if (itemCheck == 0) {
      Items itemEntity=transformToEntityBeanItem(item);
      itemEntity.setModifiedBy(commonUtils.getUserNameFromSession());
      itemEntity.setCreatedBy(commonUtils.getUserNameFromSession());
      itemEntity.setCreatedTimeStamp(new Date());
      customerService.addItem(itemEntity);
    }
 else {
      return INPUT;
    }
  }
  Integer orderItemQuantityTotal=0;
  for (int i=0; i < orderItemNumberList.size(); i++) {
    orderItemQuantityTotal=orderItemQuantityTotal + orderItemNumberList.get(i).getQuantity();
  }
  OrderItems orderItemEntity=transformToOrderItemsEntityBean(orderItem);
  if (orderEntityForm.getOrderStatus().equals(""String_Node_Str"") || orderEntityForm.getOrderStatus().equals(""String_Node_Str"")) {
    orderEntityForm.setOrderStatus(""String_Node_Str"");
  }
 else {
    orderEntityForm.setOrderStatus(orderEntityForm.getOrderStatus());
  }
  orderService.updateOrder(orderEntityForm);
  Integer orderItemEntityQuantity=orderItem.getQuantity();
  Integer orderItemQuantityGrandTotal=orderItemQuantityTotal + orderItemEntityQuantity;
  if (orderLimit.equals(""String_Node_Str"") || orderLimit.equals(""String_Node_Str"")) {
    if (orderItemQuantityGrandTotal > 5) {
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
 else {
      if (orderItem.getQuantity() == 1) {
        orderItemEntity.setQuantity(1);
        orderItemEntity.setNameSize(orderItem.getNameSize());
        orderService.addItem(orderItemEntity);
      }
 else {
        Integer saveLoop=orderItem.getQuantity();
        for (int i=0; i < saveLoop; i++) {
          orderItemEntity.setQuantity(1);
          orderItemEntity.setNameSize(orderItem.getNameSize());
          orderService.addItem(orderItemEntity);
        }
      }
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
  }
 else {
    if (orderItemQuantityGrandTotal > 250) {
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
 else {
      orderItemEntity.setQuantity(orderItem.getQuantity());
      Items itemEntity=customerService.findItemByCode(item.getItemCode());
      Double dblVolume=(orderItem.getQuantity() * (itemEntity.getLength() * itemEntity.getWidth() * itemEntity.getHeight()));
      String strVolume=dblVolume.toString();
      orderItemEntity.setVolume(Float.parseFloat(strVolume));
      orderItemEntity.setNameSize(item.getItemCode());
      orderService.addItem(orderItemEntity);
      String messageFlag=""String_Node_Str"";
      sessionAttributes.put(""String_Node_Str"",messageFlag);
    }
  }
  sessionAttributes.put(""String_Node_Str"",customerItems);
  Integer idOrder=orderItemEntity.getOrderId();
  sessionAttributes.put(""String_Node_Str"",idOrder);
  return SUCCESS;
}",0.9769847426945952
144361,"private void validateChangePasswordPage(String currentPassword){
  if (StringUtils.isNotBlank(passwordBean.getNewPassword()) && StringUtils.isNotBlank(passwordBean.getRetypeNewPassword())) {
    if (!passwordBean.getNewPassword().equals(passwordBean.getRetypeNewPassword()))     addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (!BCrypt.checkpw(passwordBean.getCurrentPassword(),currentPassword))   addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
}","private void validateChangePasswordPage(String currentPassword){
  if (StringUtils.isNotBlank(passwordBean.getNewPassword()) && StringUtils.isNotBlank(passwordBean.getRetypeNewPassword())) {
    if (!passwordBean.getNewPassword().equals(passwordBean.getRetypeNewPassword()))     addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.8343409915356711
144362,"@Override public void prepare(){
  vendorShippingList=vendorService.findVendorsByCriteria(""String_Node_Str"",""String_Node_Str"",1);
  vendorTruckingList=vendorService.findVendorsByCriteria(""String_Node_Str"",""String_Node_Str"",1);
  vendorTypeList=parameterService.getParameterMap(ParameterConstants.VENDOR_TYPE);
  vendorClassList=parameterService.getParameterMap(ParameterConstants.VENDOR_CLASS);
  statusList=parameterService.getParameterMap(ParameterConstants.STATUS);
  portsList=parameterService.getParameterMap(ParameterConstants.PORTS);
  truckTypeList=parameterService.getParameterMap(ParameterConstants.TRUCK_TYPE);
  containerSearchList=parameterService.getParameterMap(ParameterConstants.CONTAINER_SEARCH);
  containerSizeList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.CONTAINER_SIZE);
  containerEirTypeList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.EIR_TYPE);
  containerStatusList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.CONTAINER_STATUS);
}","@Override public void prepare(){
  vendorShippingList=vendorService.findVendorsByCriteria(""String_Node_Str"",""String_Node_Str"",1);
  vendorTruckingList=vendorService.findVendorsByCriteria(""String_Node_Str"",""String_Node_Str"",1);
  vendorTypeList=parameterService.getParameterMap(ParameterConstants.VENDOR_TYPE);
  vendorClassList=parameterService.getParameterMap(ParameterConstants.VENDOR_CLASS);
  statusList=parameterService.getParameterMap(ParameterConstants.STATUS);
  portsList=parameterService.getParameterMap(ParameterConstants.PORTS);
  truckTypeList=parameterService.getParameterMap(ParameterConstants.TRUCK_TYPE);
  bookingNumSearchList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.BOOKING_SEARCH);
  containerSearchList=parameterService.getParameterMap(ParameterConstants.CONTAINER_SEARCH);
  containerSizeList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.CONTAINER_SIZE);
  containerEirTypeList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.EIR_TYPE);
  containerStatusList=parameterService.getParameterMap(ParameterConstants.CONTAINERS,ParameterConstants.CONTAINER_STATUS);
}",0.9483443708609272
144363,"public String viewFreightList(){
  List<Orders> fclOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    fclOrders=operationsService.findOrdersByOriginDestinationFCL(originCity,destinationCity);
  }
 else {
    fclOrders=operationsService.findOrdersByFCL();
  }
  for (  Orders orderElem : fclOrders) {
    fclTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> lclOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    lclOrders=operationsService.findOrdersByOriginDestinationLCL(originCity,destinationCity);
  }
 else {
    lclOrders=operationsService.findOrdersByLCL();
  }
  for (  Orders orderElem : lclOrders) {
    lclTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> lcuOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    lcuOrders=operationsService.findOrdersByOriginDestinationLCU(originCity,destinationCity);
  }
 else {
    lcuOrders=operationsService.findOrdersByLCU();
  }
  for (  Orders orderElem : lcuOrders) {
    lcuTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> rcuOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    rcuOrders=operationsService.findOrdersByOriginDestinationRCU(originCity,destinationCity);
  }
 else {
    rcuOrders=operationsService.findOrdersByRCU();
  }
  for (  Orders orderElem : rcuOrders) {
    rcuTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> fclTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    fclTrucksOrders=operationsService.findOrdersByFCLTrucksOrigin(originCityTruck);
  }
 else {
    fclTrucksOrders=operationsService.findOrdersByFCLTrucks();
  }
  for (  Orders orderElem : fclTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      fclTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lclTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    lclTrucksOrders=operationsService.findOrdersByLCLTrucksOrigin(originCityTruck);
  }
 else {
    lclTrucksOrders=operationsService.findOrdersByLCLTrucks();
  }
  for (  Orders orderElem : lclTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lclTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lcuTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    lcuTrucksOrders=operationsService.findOrdersByLCUTrucksOrigin(originCityTruck);
  }
 else {
    lcuTrucksOrders=operationsService.findOrdersByLCUTrucks();
  }
  for (  Orders orderElem : lcuTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lcuTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> rcuTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    rcuTrucksOrders=operationsService.findOrdersByRCUTrucksOrigin(originCityTruck);
  }
 else {
    rcuTrucksOrders=operationsService.findOrdersByRCUTrucks();
  }
  for (  Orders orderElem : rcuTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      rcuTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> ftlOrders=new ArrayList<Orders>();
  System.out.println(""String_Node_Str"" + originCityTruck);
  if (originCityTruck != null) {
    ftlOrders=operationsService.findOrdersByOriginFTL(originCityTruck);
  }
 else {
    ftlOrders=operationsService.findOrdersByFTL();
  }
  for (  Orders orderElem : ftlOrders) {
    ftlTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> ltlOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    ltlOrders=operationsService.findOrdersByOriginLTL(originCityTruck);
  }
 else {
    ltlOrders=operationsService.findOrdersByLTL();
  }
  for (  Orders orderElem : ltlOrders) {
    ltlTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> fclTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    fclTrucksOrdersDes=operationsService.findOrdersByFCLTrucksDestination(destinationCityTruck);
  }
 else {
    fclTrucksOrdersDes=operationsService.findOrdersByFCLTrucks();
  }
  for (  Orders orderElem : fclTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      fclTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lclTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    lclTrucksOrdersDes=operationsService.findOrdersByLCLTrucksDestination(destinationCityTruck);
  }
 else {
    lclTrucksOrdersDes=operationsService.findOrdersByLCLTrucks();
  }
  for (  Orders orderElem : lclTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lclTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lcuTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    lcuTrucksOrdersDes=operationsService.findOrdersByLCUTrucksDestination(destinationCityTruck);
  }
 else {
    lcuTrucksOrdersDes=operationsService.findOrdersByLCUTrucks();
  }
  for (  Orders orderElem : lcuTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lcuTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> rcuTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    rcuTrucksOrdersDes=operationsService.findOrdersByRCUTrucksDestination(destinationCityTruck);
  }
 else {
    rcuTrucksOrdersDes=operationsService.findOrdersByRCUTrucks();
  }
  for (  Orders orderElem : rcuTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      rcuTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<VesselSchedules> vesselSchedulesList=operationsService.findAllVesselSchedule();
  if (vesselSchedulesList != null) {
    for (    VesselSchedules vesselScheduleElem : vesselSchedulesList) {
      vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
    }
  }
  return SUCCESS;
}","public String viewFreightList(){
  String column=getColumnBookingFilter();
  List<Orders> fclOrders=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (originCity != null && destinationCity != null) {
      fclOrders=operationsService.findOrdersByOriginDestinationFCL(originCity,destinationCity);
    }
    fclOrders=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    fclOrders=operationsService.findOrdersByFCL();
  }
  for (  Orders orderElem : fclOrders) {
    fclTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> lclOrders=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (originCity != null && destinationCity != null) {
      lclOrders=operationsService.findOrdersByOriginDestinationLCL(originCity,destinationCity);
    }
    lclOrders=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    lclOrders=operationsService.findOrdersByLCL();
  }
  for (  Orders orderElem : lclOrders) {
    lclTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> lcuOrders=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (originCity != null && destinationCity != null) {
      lcuOrders=operationsService.findOrdersByOriginDestinationLCU(originCity,destinationCity);
    }
    lcuOrders=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    lcuOrders=operationsService.findOrdersByLCU();
  }
  for (  Orders orderElem : lcuOrders) {
    lcuTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> rcuOrders=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (originCity != null && destinationCity != null) {
      rcuOrders=operationsService.findOrdersByOriginDestinationRCU(originCity,destinationCity);
    }
    rcuOrders=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    rcuOrders=operationsService.findOrdersByRCU();
  }
  for (  Orders orderElem : rcuOrders) {
    rcuTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> fclTrucksOrders=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (originCityTruck != null) {
      fclTrucksOrders=operationsService.findOrdersByFCLTrucksOrigin(originCityTruck);
    }
    fclTrucksOrders=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    fclTrucksOrders=operationsService.findOrdersByFCLTrucks();
  }
  for (  Orders orderElem : fclTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      fclTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lclTrucksOrders=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (originCityTruck != null) {
      lclTrucksOrders=operationsService.findOrdersByLCLTrucksOrigin(originCityTruck);
    }
    lclTrucksOrders=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    lclTrucksOrders=operationsService.findOrdersByLCLTrucks();
  }
  for (  Orders orderElem : lclTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lclTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lcuTrucksOrders=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (originCityTruck != null) {
      lcuTrucksOrders=operationsService.findOrdersByLCUTrucksOrigin(originCityTruck);
    }
    lcuTrucksOrders=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    lcuTrucksOrders=operationsService.findOrdersByLCUTrucks();
  }
  for (  Orders orderElem : lcuTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lcuTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> rcuTrucksOrders=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (originCityTruck != null) {
      rcuTrucksOrders=operationsService.findOrdersByRCUTrucksOrigin(originCityTruck);
    }
    rcuTrucksOrders=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    rcuTrucksOrders=operationsService.findOrdersByRCUTrucks();
  }
  for (  Orders orderElem : rcuTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      rcuTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> ftlOrders=new ArrayList<Orders>();
  System.out.println(""String_Node_Str"" + originCityTruck);
  if (StringUtils.isNotBlank(column)) {
    if (originCityTruck != null) {
      ftlOrders=operationsService.findOrdersByOriginFTL(originCityTruck);
    }
    ftlOrders=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    ftlOrders=operationsService.findOrdersByFTL();
  }
  for (  Orders orderElem : ftlOrders) {
    ftlTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> ltlOrders=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (originCityTruck != null) {
      ltlOrders=operationsService.findOrdersByOriginLTL(originCityTruck);
    }
    ltlOrders=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    ltlOrders=operationsService.findOrdersByLTL();
  }
  for (  Orders orderElem : ltlOrders) {
    ltlTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> fclTrucksOrdersDes=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (destinationCityTruck != null) {
      fclTrucksOrdersDes=operationsService.findOrdersByFCLTrucksDestination(destinationCityTruck);
    }
    fclTrucksOrdersDes=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    fclTrucksOrdersDes=operationsService.findOrdersByFCLTrucks();
  }
  for (  Orders orderElem : fclTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      fclTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lclTrucksOrdersDes=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (destinationCityTruck != null) {
      lclTrucksOrdersDes=operationsService.findOrdersByLCLTrucksDestination(destinationCityTruck);
    }
    lclTrucksOrdersDes=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    lclTrucksOrdersDes=operationsService.findOrdersByLCLTrucks();
  }
  for (  Orders orderElem : lclTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lclTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lcuTrucksOrdersDes=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (destinationCityTruck != null) {
      lcuTrucksOrdersDes=operationsService.findOrdersByLCUTrucksDestination(destinationCityTruck);
    }
    lcuTrucksOrdersDes=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    lcuTrucksOrdersDes=operationsService.findOrdersByLCUTrucks();
  }
  for (  Orders orderElem : lcuTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lcuTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> rcuTrucksOrdersDes=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    if (destinationCityTruck != null) {
      rcuTrucksOrdersDes=operationsService.findOrdersByRCUTrucksDestination(destinationCityTruck);
    }
    rcuTrucksOrdersDes=orderService.findOrdersByBookingNumber(column,order.getOrderKeyword(),getClientId());
  }
 else {
    rcuTrucksOrdersDes=operationsService.findOrdersByRCUTrucks();
  }
  for (  Orders orderElem : rcuTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      rcuTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<VesselSchedules> vesselSchedulesList=operationsService.findAllVesselSchedule();
  if (vesselSchedulesList != null) {
    for (    VesselSchedules vesselScheduleElem : vesselSchedulesList) {
      vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
    }
  }
  return SUCCESS;
}",0.8562100039179835
144364,"public String approveOrder(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  List<OrderItems> orderItemsEntity=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  if (orderItemsEntity.size() == 0) {
    List<Orders> orderEntityList=orderService.findAllOrders();
    for (    Orders orderElem : orderEntityList) {
      orders.add(transformToOrderFormBean(orderElem));
    }
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  Booking=notificationService.countAll();
  System.out.println(""String_Node_Str"" + Booking);
  orderEntity.setOrderStatus(""String_Node_Str"");
  orderService.updateOrder(orderEntity);
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String approveOrder(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  List<OrderItems> orderItemsEntity=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  if (orderItemsEntity.size() == 0) {
    List<Orders> orderEntityList=orderService.findAllOrders();
    for (    Orders orderElem : orderEntityList) {
      orders.add(transformToOrderFormBean(orderElem));
    }
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  Booking=notificationService.countAll();
  System.out.println(""String_Node_Str"" + Booking);
  orderEntity.setOrderStatus(""String_Node_Str"");
  orderService.updateOrder(orderEntity);
  for (int i=0; i < orderItemsEntity.size(); i++) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      orderItemsEntity.get(i).setStatus(""String_Node_Str"");
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      orderItemsEntity.get(i).setStatus(""String_Node_Str"");
    }
 else {
      orderItemsEntity.get(i).setStatus(""String_Node_Str"");
    }
    orderService.updateItemListing(orderItemsEntity.get(i));
  }
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.7843788948899044
144365,"public VesselSchedules(Integer vesselScheduleId,Integer clientId,Integer vendorId,String originPort,String departureDate,String departureTime,String destinationPort,String arrivalDate,String arrivalTime,Date createdTimestamp,String createdBy,Date modifiedTimestamp,String modifiedBy,String voyageNumber,String vendorCode,String vesselName){
  this.vesselScheduleId=vesselScheduleId;
  this.clientId=clientId;
  this.vendorId=vendorId;
  this.originPort=originPort;
  this.departureDate=departureDate;
  this.departureTime=departureTime;
  this.destinationPort=destinationPort;
  this.arrivalDate=arrivalDate;
  this.arrivalTime=arrivalTime;
  this.createdTimestamp=createdTimestamp;
  this.createdBy=createdBy;
  this.modifiedTimestamp=modifiedTimestamp;
  this.modifiedBy=modifiedBy;
  this.voyageNumber=voyageNumber;
  this.vendorCode=vendorCode;
  this.vesselName=vesselName;
}","public VesselSchedules(Integer vesselScheduleId,Integer clientId,Integer vendorId,String originPort,String departureDate,String departureTime,String destinationPort,String arrivalDate,String arrivalTime,Date createdTimestamp,String createdBy,Date modifiedTimestamp,String modifiedBy,String voyageNumber,String vendorCode,String vesselName,String vendorName){
  this.vesselScheduleId=vesselScheduleId;
  this.clientId=clientId;
  this.vendorId=vendorId;
  this.originPort=originPort;
  this.departureDate=departureDate;
  this.departureTime=departureTime;
  this.destinationPort=destinationPort;
  this.arrivalDate=arrivalDate;
  this.arrivalTime=arrivalTime;
  this.createdTimestamp=createdTimestamp;
  this.createdBy=createdBy;
  this.modifiedTimestamp=modifiedTimestamp;
  this.modifiedBy=modifiedBy;
  this.voyageNumber=voyageNumber;
  this.vendorCode=vendorCode;
  this.vesselName=vesselName;
  this.vendorName=vendorName;
}",0.9734513274336284
144366,"public VesselSchedules transformToEntityBean(VesselScheduleBean formBean){
  VesselSchedules entity=new VesselSchedules();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClientId(client.getClientId());
  if (formBean.getVesselScheduleId() != null) {
    entity.setVesselScheduleId(new Integer(formBean.getVesselScheduleId()));
  }
  entity.setVoyageNumber(formBean.getVoyageNumber());
  entity.setVendorId(formBean.getVendorId());
  entity.setOriginPort(formBean.getOriginPort());
  entity.setDestinationPort(formBean.getDestinationPort());
  entity.setArrivalDate(formBean.getArrivalDate());
  entity.setArrivalTime(formBean.getArrivalTime());
  entity.setDepartureTime(formBean.getDepartureTime());
  entity.setDepartureDate(formBean.getDepartureDate());
  entity.setVendorCode(vendorService.findVendorById(formBean.getVendorId()).getVendorCode());
  entity.setVesselName(formBean.getVesselName());
  entity.setCreatedBy(formBean.getCreatedBy());
  entity.setCreatedTimestamp(formBean.getCreatedTimestamp());
  return entity;
}","public VesselSchedules transformToEntityBean(VesselScheduleBean formBean){
  VesselSchedules entity=new VesselSchedules();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClientId(client.getClientId());
  if (formBean.getVesselScheduleId() != null) {
    entity.setVesselScheduleId(new Integer(formBean.getVesselScheduleId()));
  }
  entity.setVoyageNumber(formBean.getVoyageNumber());
  entity.setVendorId(formBean.getVendorId());
  entity.setOriginPort(formBean.getOriginPort());
  entity.setDestinationPort(formBean.getDestinationPort());
  entity.setArrivalDate(formBean.getArrivalDate());
  entity.setArrivalTime(formBean.getArrivalTime());
  entity.setDepartureTime(formBean.getDepartureTime());
  entity.setDepartureDate(formBean.getDepartureDate());
  entity.setVendorCode(vendorService.findVendorById(formBean.getVendorId()).getVendorCode());
  entity.setVesselName(formBean.getVesselName());
  entity.setCreatedBy(formBean.getCreatedBy());
  entity.setCreatedTimestamp(formBean.getCreatedTimestamp());
  entity.setVendorName(vendorService.findVendorById(formBean.getVendorId()).getVendorName());
  return entity;
}",0.9577717879604672
144367,"public String getColumnFilter(){
  String column=""String_Node_Str"";
  if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
  return column;
}","public String getColumnFilter(){
  String column=""String_Node_Str"";
  if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vesselSchedule.getVesselScheduleCriteria())) {
    column=""String_Node_Str"";
  }
  return column;
}",0.8998628257887518
144368,public void addAddress(Address address);,public Integer addAddress(Address address);,0.8674698795180723
144369,"@Override public void addAddress(Address address){
  log.debug(""String_Node_Str"");
  try {
    Session session=getSessionFactory().getCurrentSession();
    session.save(address);
    log.debug(""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    log.error(""String_Node_Str"",re);
    throw re;
  }
}","@Override public Integer addAddress(Address address){
  log.debug(""String_Node_Str"");
  try {
    Session session=getSessionFactory().getCurrentSession();
    Integer addressId=(Integer)session.save(address);
    log.debug(""String_Node_Str"");
    return addressId;
  }
 catch (  RuntimeException re) {
    log.error(""String_Node_Str"",re);
    throw re;
  }
}",0.4427710843373494
144370,public void addAddress(Address address);,public Integer addAddress(Address address) throws AddressAlreadyExistsException ;,0.5950413223140496
144371,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addAddress(Address address){
  addressDao.addAddress(address);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public Integer addAddress(Address address) throws AddressAlreadyExistsException {
  if (addressDao.findAddressByAddressLine(address.getAddressLine1()).size() > 0)   throw new AddressAlreadyExistsException(address.getAddressLine1());
 else   return addressDao.addAddress(address);
}",0.4673267326732673
144372,"@Override public List<VesselSchedules> findAllVesselSchedule(){
  log.debug(""String_Node_Str"");
  try {
    log.debug(""String_Node_Str"");
    Query query=getSessionFactory().getCurrentSession().createQuery(""String_Node_Str"");
    List<VesselSchedules> results=(List<VesselSchedules>)query.list();
    return results;
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
}","@Override public List<VesselSchedules> findAllVesselSchedule(){
  log.debug(""String_Node_Str"");
  try {
    log.debug(""String_Node_Str"");
    return getSessionFactory().getCurrentSession().createQuery(""String_Node_Str"").list();
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
}",0.8354430379746836
144373,"public String addDocumentsInput(){
  System.out.println(""String_Node_Str"" + orderIdParam);
  System.out.println(""String_Node_Str"" + documentStageParam);
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  List<OrderItems> orderItemsList=operationsService.findAllOrderItemsByOrderId(orderEntity.getOrderId());
  List<String> vendorOrigin=new ArrayList<String>();
  List<String> vendorDestination=new ArrayList<String>();
  Integer vendorOriginCount=0;
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorOrigin.isEmpty()) {
      vendorOrigin.add(everyItem.getVendorOrigin());
      vendorOriginCount=vendorOriginCount + 1;
    }
 else {
      if (!vendorOrigin.contains(everyItem.getVendorOrigin())) {
        vendorOrigin.add(everyItem.getVendorOrigin());
        vendorOriginCount=vendorOriginCount + 1;
      }
    }
  }
  Integer vendorDestinationCount=0;
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorDestination.isEmpty()) {
      vendorDestination.add(everyItem.getVendorDestination());
      vendorDestinationCount=vendorDestinationCount + 1;
    }
 else {
      if (!vendorDestination.contains(everyItem.getVendorDestination())) {
        vendorDestination.add(everyItem.getVendorDestination());
        vendorDestinationCount=vendorDestinationCount + 1;
      }
    }
  }
  documentNames=parameterService.getParameterMap(ParameterConstants.DOCUMENT,ParameterConstants.DOCUMENT_NAME);
  List<Driver> allDriverList=vendorService.findAllDrivers();
  if (documentStageParam.equals(""String_Node_Str"")) {
    Vendor ernestRecipientOri=vendorService.findErnestRecipient(""String_Node_Str"",orderEntity.getOriginationPort());
    Vendor ernestRecipientDes=vendorService.findErnestRecipient(""String_Node_Str"",orderEntity.getDestinationPort());
    vendorLocationFlag=""String_Node_Str"";
    for (    Driver driverElem : allDriverList) {
      if (driverElem.getVendorId() == ernestRecipientOri.getVendorId()) {
        DriverBean formBean=new DriverBean();
        formBean.setDriverId(driverElem.getDriverId());
        formBean.setLastName(driverElem.getLastName());
        formBean.setFirstName(driverElem.getFirstName());
        formBean.setAuthorizedAgent(ernestRecipientOri.getVendorName() + ""String_Node_Str"" + driverElem.getFirstName()+ ""String_Node_Str""+ driverElem.getLastName());
        repContactsList.add(formBean);
      }
    }
    for (    String driverOrigin : vendorOrigin) {
      Vendor vendorEntity=vendorService.findVendorByVendorCode(driverOrigin);
      for (      Driver driverElem : allDriverList) {
        if (driverElem.getVendorId() == vendorEntity.getVendorId()) {
          DriverBean formBean=new DriverBean();
          formBean.setDriverId(driverElem.getDriverId());
          formBean.setLastName(driverElem.getLastName());
          formBean.setFirstName(driverElem.getFirstName());
          Vendor insideEntity=vendorService.findVendorById(driverElem.getVendorId());
          formBean.setAuthorizedAgent(insideEntity.getVendorName() + ""String_Node_Str"" + driverElem.getFirstName()+ ""String_Node_Str""+ driverElem.getLastName());
          repContactsList.add(formBean);
        }
      }
    }
    shipperContacts=vendorService.findContactByReferenceId(ernestRecipientOri.getVendorId());
    consigneeContacts=vendorService.findContactByReferenceId(ernestRecipientDes.getVendorId());
  }
 else   if (documentStageParam.equals(""String_Node_Str"")) {
    Vendor ernestRecipientOri=vendorService.findErnestRecipient(""String_Node_Str"",orderEntity.getOriginationPort());
    Vendor ernestRecipientDes=vendorService.findErnestRecipient(""String_Node_Str"",orderEntity.getDestinationPort());
    vendorLocationFlag=""String_Node_Str"";
    for (    Driver driverElem : allDriverList) {
      if (driverElem.getVendorId() == ernestRecipientDes.getVendorId()) {
        DriverBean formBean=new DriverBean();
        formBean.setDriverId(driverElem.getDriverId());
        formBean.setLastName(driverElem.getLastName());
        formBean.setFirstName(driverElem.getFirstName());
        formBean.setAuthorizedAgent(ernestRecipientDes.getVendorName() + ""String_Node_Str"" + driverElem.getFirstName()+ ""String_Node_Str""+ driverElem.getLastName());
        repContactsList.add(formBean);
      }
    }
    for (    String driverDestination : vendorDestination) {
      Vendor vendorEntity=vendorService.findVendorByVendorCode(driverDestination);
      for (      Driver driverElem : allDriverList) {
        if (driverElem.getVendorId() == vendorEntity.getVendorId()) {
          DriverBean formBean=new DriverBean();
          formBean.setDriverId(driverElem.getDriverId());
          formBean.setDriverCode(driverElem.getDriverCode());
          formBean.setLicenseNumber(driverElem.getLicenseNumber());
          formBean.setLastName(driverElem.getLastName());
          formBean.setFirstName(driverElem.getFirstName());
          formBean.setMiddleName(driverElem.getMiddleName());
          formBean.setTitle(driverElem.getTitle());
          formBean.setStatus(driverElem.getStatus());
          formBean.setCreatedBy(driverElem.getCreatedBy());
          formBean.setCreatedTimeStamp(driverElem.getCreatedTimestamp());
          Vendor insideEntity=vendorService.findVendorById(driverElem.getVendorId());
          formBean.setAuthorizedAgent(insideEntity.getVendorName() + ""String_Node_Str"" + driverElem.getFirstName()+ ""String_Node_Str""+ driverElem.getLastName());
          repContactsList.add(formBean);
        }
      }
    }
    shipperContacts=vendorService.findContactByReferenceId(ernestRecipientOri.getVendorId());
    consigneeContacts=vendorService.findContactByReferenceId(ernestRecipientDes.getVendorId());
  }
  return SUCCESS;
}","public String addDocumentsInput(){
  System.out.println(""String_Node_Str"" + orderIdParam);
  System.out.println(""String_Node_Str"" + documentStageParam);
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  List<OrderItems> orderItemsList=operationsService.findAllOrderItemsByOrderId(orderEntity.getOrderId());
  List<String> vendorOrigin=new ArrayList<String>();
  List<String> vendorDestination=new ArrayList<String>();
  Integer vendorOriginCount=0;
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorOrigin.isEmpty()) {
      vendorOrigin.add(everyItem.getVendorOrigin());
      vendorOriginCount=vendorOriginCount + 1;
    }
 else {
      if (!vendorOrigin.contains(everyItem.getVendorOrigin())) {
        vendorOrigin.add(everyItem.getVendorOrigin());
        vendorOriginCount=vendorOriginCount + 1;
      }
    }
  }
  Integer vendorDestinationCount=0;
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorDestination.isEmpty()) {
      vendorDestination.add(everyItem.getVendorDestination());
      vendorDestinationCount=vendorDestinationCount + 1;
    }
 else {
      if (!vendorDestination.contains(everyItem.getVendorDestination())) {
        vendorDestination.add(everyItem.getVendorDestination());
        vendorDestinationCount=vendorDestinationCount + 1;
      }
    }
  }
  documentNames=parameterService.getParameterMap(ParameterConstants.DOCUMENT,ParameterConstants.DOCUMENT_NAME);
  List<Driver> allDriverList=vendorService.findAllDrivers();
  if (documentStageParam.equals(""String_Node_Str"")) {
    Vendor ernestRecipientOri=vendorService.findErnestRecipient(""String_Node_Str"",orderEntity.getOriginationPort());
    Vendor ernestRecipientDes=vendorService.findErnestRecipient(""String_Node_Str"",orderEntity.getDestinationPort());
    vendorLocationFlag=""String_Node_Str"";
    for (    Driver driverElem : allDriverList) {
      if (driverElem.getVendorId() == ernestRecipientOri.getVendorId()) {
        DriverBean formBean=new DriverBean();
        formBean.setDriverId(driverElem.getDriverId());
        formBean.setLastName(driverElem.getLastName());
        formBean.setFirstName(driverElem.getFirstName());
        formBean.setAuthorizedAgent(ernestRecipientOri.getVendorName() + ""String_Node_Str"" + driverElem.getFirstName()+ ""String_Node_Str""+ driverElem.getLastName());
        repContactsList.add(formBean);
      }
    }
    for (    String driverOrigin : vendorOrigin) {
      Vendor vendorEntity=vendorService.findVendorByVendorCode(driverOrigin);
      if (vendorEntity != null) {
        for (        Driver driverElem : allDriverList) {
          if (driverElem.getVendorId() == vendorEntity.getVendorId()) {
            DriverBean formBean=new DriverBean();
            formBean.setDriverId(driverElem.getDriverId());
            formBean.setLastName(driverElem.getLastName());
            formBean.setFirstName(driverElem.getFirstName());
            Vendor insideEntity=vendorService.findVendorById(driverElem.getVendorId());
            formBean.setAuthorizedAgent(insideEntity.getVendorName() + ""String_Node_Str"" + driverElem.getFirstName()+ ""String_Node_Str""+ driverElem.getLastName());
            repContactsList.add(formBean);
          }
        }
      }
    }
    if (ernestRecipientOri != null) {
      shipperContacts=vendorService.findContactByReferenceId(ernestRecipientOri.getVendorId());
    }
    if (ernestRecipientDes != null) {
      consigneeContacts=vendorService.findContactByReferenceId(ernestRecipientDes.getVendorId());
    }
  }
 else   if (documentStageParam.equals(""String_Node_Str"")) {
    Vendor ernestRecipientOri=vendorService.findErnestRecipient(""String_Node_Str"",orderEntity.getOriginationPort());
    Vendor ernestRecipientDes=vendorService.findErnestRecipient(""String_Node_Str"",orderEntity.getDestinationPort());
    vendorLocationFlag=""String_Node_Str"";
    for (    Driver driverElem : allDriverList) {
      if (driverElem.getVendorId() == ernestRecipientDes.getVendorId()) {
        DriverBean formBean=new DriverBean();
        formBean.setDriverId(driverElem.getDriverId());
        formBean.setLastName(driverElem.getLastName());
        formBean.setFirstName(driverElem.getFirstName());
        formBean.setAuthorizedAgent(ernestRecipientDes.getVendorName() + ""String_Node_Str"" + driverElem.getFirstName()+ ""String_Node_Str""+ driverElem.getLastName());
        repContactsList.add(formBean);
      }
    }
    for (    String driverDestination : vendorDestination) {
      Vendor vendorEntity=vendorService.findVendorByVendorCode(driverDestination);
      if (vendorEntity != null) {
        for (        Driver driverElem : allDriverList) {
          if (driverElem.getVendorId() == vendorEntity.getVendorId()) {
            DriverBean formBean=new DriverBean();
            formBean.setDriverId(driverElem.getDriverId());
            formBean.setDriverCode(driverElem.getDriverCode());
            formBean.setLicenseNumber(driverElem.getLicenseNumber());
            formBean.setLastName(driverElem.getLastName());
            formBean.setFirstName(driverElem.getFirstName());
            formBean.setMiddleName(driverElem.getMiddleName());
            formBean.setTitle(driverElem.getTitle());
            formBean.setStatus(driverElem.getStatus());
            formBean.setCreatedBy(driverElem.getCreatedBy());
            formBean.setCreatedTimeStamp(driverElem.getCreatedTimestamp());
            Vendor insideEntity=vendorService.findVendorById(driverElem.getVendorId());
            formBean.setAuthorizedAgent(insideEntity.getVendorName() + ""String_Node_Str"" + driverElem.getFirstName()+ ""String_Node_Str""+ driverElem.getLastName());
            repContactsList.add(formBean);
          }
        }
      }
    }
    if (ernestRecipientOri != null) {
      shipperContacts=vendorService.findContactByReferenceId(ernestRecipientOri.getVendorId());
    }
    if (ernestRecipientDes != null) {
      consigneeContacts=vendorService.findContactByReferenceId(ernestRecipientDes.getVendorId());
    }
  }
  return SUCCESS;
}",0.9704840613931524
144374,"public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  formBean.setOriginationPort(entity.getOriginationPort());
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setBookingDate(entity.getOrderDate());
  formBean.setDestinationPort(entity.getDestinationPort());
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setPickupDate(entity.getPickupDate());
  formBean.setDeliveryDate(entity.getDeliveryDate());
  formBean.setAging(entity.getAging());
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (order.getShipperAddressId() != null && !""String_Node_Str"".equals(order.getShipperAddressId())) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (order.getConsigneeAddressId() != null && !""String_Node_Str"".equals(order.getConsigneeAddressId())) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  return formBean;
}","public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setBookingDate(entity.getOrderDate());
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setAging(entity.getAging());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else   if (entity.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setOriginationPort(""String_Node_Str"");
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else   if (entity.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setDestinationPort(""String_Node_Str"");
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  if (entity.getPickupDate() != null) {
    formBean.setStrPickupDate(formatter.format(entity.getPickupDate()));
  }
 else   if (entity.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setStrPickupDate(""String_Node_Str"");
  }
 else {
    formBean.setStrPickupDate(""String_Node_Str"");
  }
  if (entity.getDeliveryDate() != null) {
    formBean.setStrDeliveryDate(formatter.format(entity.getDeliveryDate()));
  }
 else   if (entity.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setStrDeliveryDate(""String_Node_Str"");
  }
 else {
    formBean.setStrDeliveryDate(""String_Node_Str"");
  }
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null && !""String_Node_Str"".equals(entity.getShipperAddressId())) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null && !""String_Node_Str"".equals(entity.getConsigneeAddressId())) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  return formBean;
}",0.7709551656920078
144375,"private OrderItemsBean transformToOrderItemsFormBean(OrderItems orderItem){
  OrderItemsBean orderItemBean=new OrderItemsBean();
  orderItemBean.setOrderItemId(orderItem.getOrderItemId());
  orderItemBean.setQuantity(orderItem.getQuantity());
  orderItemBean.setNameSize(orderItem.getNameSize());
  orderItemBean.setWeight(orderItem.getWeight());
  orderItemBean.setVolume(orderItem.getVolume());
  orderItemBean.setClassification(orderItem.getClassification());
  orderItemBean.setDescription(orderItem.getCommodity());
  orderItemBean.setRate(orderItem.getRate());
  orderItemBean.setDeclaredValue(orderItem.getDeclaredValue());
  orderItemBean.setRemarks(orderItem.getComments());
  if (orderItem.getVendorSea() != null && !""String_Node_Str"".equals(orderItem.getVendorSea()) && !orderItem.getVendorSea().equals(""String_Node_Str"")) {
    Vendor seaVendor=vendorService.findVendorByVendorCode(orderItem.getVendorSea());
    orderItemBean.setVendorSea(seaVendor.getVendorName());
  }
 else {
    orderItemBean.setVendorSea(""String_Node_Str"");
  }
  if (orderItem.getVendorOrigin() != null && !""String_Node_Str"".equals(orderItem.getVendorOrigin()) && !orderItem.getVendorOrigin().equals(""String_Node_Str"")) {
    Vendor originVendor=vendorService.findVendorByVendorCode(orderItem.getVendorOrigin());
    orderItemBean.setVendorOrigin(originVendor.getVendorName());
  }
 else {
    orderItemBean.setVendorOrigin(""String_Node_Str"");
  }
  if (orderItem.getVendorDestination() != null && !""String_Node_Str"".equals(orderItem.getVendorDestination()) && !orderItem.getVendorDestination().equals(""String_Node_Str"")) {
    Vendor destinationVendor=vendorService.findVendorByVendorCode(orderItem.getVendorDestination());
    orderItemBean.setVendorDestination(destinationVendor.getVendorName());
  }
 else {
    orderItemBean.setVendorDestination(""String_Node_Str"");
  }
  return orderItemBean;
}","private OrderItemsBean transformToOrderItemsFormBean(OrderItems orderItem){
  OrderItemsBean orderItemBean=new OrderItemsBean();
  orderItemBean.setOrderItemId(orderItem.getOrderItemId());
  orderItemBean.setQuantity(orderItem.getQuantity());
  orderItemBean.setNameSize(orderItem.getNameSize());
  orderItemBean.setWeight(orderItem.getWeight());
  orderItemBean.setVolume(orderItem.getVolume());
  orderItemBean.setClassification(orderItem.getClassification());
  orderItemBean.setDescription(orderItem.getCommodity());
  orderItemBean.setRate(orderItem.getRate());
  orderItemBean.setDeclaredValue(orderItem.getDeclaredValue());
  orderItemBean.setRemarks(orderItem.getComments());
  Orders orderEntity=orderService.findOrdersById(orderItem.getOrderId());
  if (orderItem.getVendorSea() != null && !""String_Node_Str"".equals(orderItem.getVendorSea()) && !orderItem.getVendorSea().equals(""String_Node_Str"")) {
    Vendor seaVendor=vendorService.findVendorByVendorCode(orderItem.getVendorSea());
    orderItemBean.setVendorSea(seaVendor.getVendorName());
  }
 else {
    if (orderEntity.getServiceType().equals(""String_Node_Str"")) {
      orderItemBean.setVendorSea(""String_Node_Str"");
    }
 else {
      orderItemBean.setVendorSea(""String_Node_Str"");
    }
  }
  if (orderItem.getVendorOrigin() != null && !""String_Node_Str"".equals(orderItem.getVendorOrigin()) && !orderItem.getVendorOrigin().equals(""String_Node_Str"")) {
    Vendor originVendor=vendorService.findVendorByVendorCode(orderItem.getVendorOrigin());
    orderItemBean.setVendorOrigin(originVendor.getVendorName());
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      orderItemBean.setVendorOrigin(""String_Node_Str"");
    }
 else {
      orderItemBean.setVendorOrigin(""String_Node_Str"");
    }
  }
  if (orderItem.getVendorDestination() != null && !""String_Node_Str"".equals(orderItem.getVendorDestination()) && !orderItem.getVendorDestination().equals(""String_Node_Str"")) {
    Vendor destinationVendor=vendorService.findVendorByVendorCode(orderItem.getVendorDestination());
    orderItemBean.setVendorDestination(destinationVendor.getVendorName());
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      orderItemBean.setVendorDestination(""String_Node_Str"");
    }
 else {
      orderItemBean.setVendorDestination(""String_Node_Str"");
    }
  }
  return orderItemBean;
}",0.824468085106383
144376,"public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  List<OrderItems> orderItemsVolume=orderService.findAllItemByOrderId(entity.getOrderId());
  Float orderVolume=0.F;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getVolume() != null) {
      orderVolume=orderVolume + orderItemElem.getVolume();
    }
  }
  formBean.setOrderVolume(orderVolume);
  Double orderWeight=0.0;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getWeight() != null) {
      orderWeight=orderWeight + orderItemElem.getWeight();
    }
  }
  formBean.setOrderWeight(orderWeight);
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setOrderDate(entity.getOrderDate());
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setPickupDate(entity.getPickupDate());
  formBean.setDeliveryDate(entity.getDeliveryDate());
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  formBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    formBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  List<OrderItems> orderItemEntity=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  if (orderItemEntity.size() >= 1) {
    if (orderItemEntity.get(0).getTruckOrigin() == null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckOrigin())) {
      formBean.setPlateNumberOri(""String_Node_Str"");
    }
 else {
      Trucks truckEntityOri=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckOrigin());
      formBean.setPlateNumberOri(truckEntityOri.getPlateNumber());
    }
    if (orderItemEntity.get(0).getTruckDestination() == null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckDestination())) {
      formBean.setPlateNumberDes(""String_Node_Str"");
    }
 else {
      Trucks truckEntityDes=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckDestination());
      formBean.setPlateNumberDes(truckEntityDes.getPlateNumber());
    }
  }
  return formBean;
}","public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  List<OrderItems> orderItemsVolume=orderService.findAllItemByOrderId(entity.getOrderId());
  Float orderVolume=0.F;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getVolume() != null) {
      orderVolume=orderVolume + orderItemElem.getVolume();
    }
  }
  formBean.setOrderVolume(orderVolume);
  Double orderWeight=0.0;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getWeight() != null) {
      orderWeight=orderWeight + orderItemElem.getWeight();
    }
  }
  formBean.setOrderWeight(orderWeight);
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else   if (entity.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setOriginationPort(""String_Node_Str"");
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setOrderDate(entity.getOrderDate());
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else   if (entity.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setDestinationPort(""String_Node_Str"");
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  if (entity.getPickupDate() != null) {
    formBean.setStrPickupDate(formatter.format(entity.getPickupDate()));
  }
 else   if (entity.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setStrPickupDate(""String_Node_Str"");
  }
 else {
    formBean.setStrPickupDate(""String_Node_Str"");
  }
  if (entity.getDeliveryDate() != null) {
    formBean.setStrDeliveryDate(formatter.format(entity.getDeliveryDate()));
  }
 else   if (entity.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setStrDeliveryDate(""String_Node_Str"");
  }
 else {
    formBean.setStrDeliveryDate(""String_Node_Str"");
  }
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else   if (entity.getServiceMode().equals(""String_Node_Str"")) {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else   if (entity.getServiceMode().equals(""String_Node_Str"")) {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  formBean.setConsigneeContactPersonId(entity.getConsigneeContactPersonId());
  if (entity.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(entity.getConsigneeContactPersonId());
    formBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  List<OrderItems> orderItemEntity=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  if (orderItemEntity.size() >= 1) {
    if (orderItemEntity.get(0).getTruckOrigin() == null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckOrigin())) {
      formBean.setPlateNumberOri(""String_Node_Str"");
    }
 else {
      Trucks truckEntityOri=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckOrigin());
      formBean.setPlateNumberOri(truckEntityOri.getPlateNumber());
    }
    if (orderItemEntity.get(0).getTruckDestination() == null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckDestination())) {
      formBean.setPlateNumberDes(""String_Node_Str"");
    }
 else {
      Trucks truckEntityDes=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckDestination());
      formBean.setPlateNumberDes(truckEntityDes.getPlateNumber());
    }
  }
  return formBean;
}",0.8905802438824781
144377,"public String editOrderItemsOriginModal(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  System.out.println(""String_Node_Str"" + (Integer)sessionAttributes.get(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + (Integer)sessionAttributes.get(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + vendorId);
  System.out.println(""String_Node_Str"" + driverCodeParam);
  System.out.println(""String_Node_Str"" + truckCodeParam);
  System.out.println(""String_Node_Str"" + finalPickupParam);
  System.out.println(""String_Node_Str"" + originConfirmFlag);
  Integer orderIdParam=(Integer)sessionAttributes.get(""String_Node_Str"");
  Integer orderItemId=(Integer)sessionAttributes.get(""String_Node_Str"");
  check=(String[])sessionAttributes.get(""String_Node_Str"");
  if (originConfirmFlag.equals(""String_Node_Str"")) {
    for (int i=0; i < check.length; i++) {
      System.out.println(""String_Node_Str"" + check[i]);
      Integer orderItemIdCheck=Integer.parseInt(check[i]);
      OrderItems entity=operationsService.findOrderItemById(orderItemIdCheck);
      OrderItems saveEntity=operationsService.findOrderItemById(orderItemIdCheck);
      entity.setVendorOrigin(vendorService.findVendorById(vendorId).getVendorCode());
      entity.setVendorDestination(saveEntity.getVendorDestination());
      entity.setFinalPickupDate(finalPickupParam);
      entity.setFinalDeliveryDate(saveEntity.getFinalDeliveryDate());
      entity.setOrderItemId(orderItemIdCheck);
      entity.setClientId(saveEntity.getClientId());
      entity.setNameSize(saveEntity.getNameSize());
      entity.setOrderId(saveEntity.getOrderId());
      entity.setQuantity(saveEntity.getQuantity());
      entity.setClassification(saveEntity.getClassification());
      entity.setCommodity(saveEntity.getCommodity());
      entity.setDeclaredValue(saveEntity.getDeclaredValue());
      entity.setComments(saveEntity.getComments());
      entity.setRate(saveEntity.getRate());
      entity.setCreatedBy(saveEntity.getCreatedBy());
      entity.setModifiedBy(saveEntity.getModifiedBy());
      entity.setCreatedTimestamp(saveEntity.getCreatedTimestamp());
      entity.setModifiedTimestamp(saveEntity.getModifiedTimestamp());
      entity.setWeight(saveEntity.getWeight());
      entity.setDriverOrigin(driverCodeParam);
      entity.setDriverDestination(saveEntity.getDriverDestination());
      entity.setTruckOrigin(truckCodeParam);
      entity.setTruckDestination(saveEntity.getTruckDestination());
      entity.setVendorSea(saveEntity.getVendorSea());
      entity.setVesselScheduleId(saveEntity.getVesselScheduleId());
      entity.setCommodity(saveEntity.getCommodity());
      entity.setComments(saveEntity.getComments());
      entity.setWeight(saveEntity.getWeight());
      entity.setVolume(saveEntity.getVolume());
      entity.setServiceRequirement(saveEntity.getServiceRequirement());
      Orders orderEntity=orderService.findOrdersById(saveEntity.getOrderId());
      if (""String_Node_Str"".equals(orderEntity.getServiceType())) {
        if (""String_Node_Str"".equals(orderEntity.getServiceMode())) {
          entity.setStatus(""String_Node_Str"");
        }
 else {
          entity.setStatus(""String_Node_Str"");
        }
      }
 else {
        entity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(entity);
    }
  }
 else {
    OrderItems entity=operationsService.findOrderItemById(orderItemId);
    OrderItems saveEntity=operationsService.findOrderItemById(orderItemId);
    entity.setVendorOrigin(vendorService.findVendorById(vendorId).getVendorCode());
    entity.setVendorDestination(saveEntity.getVendorDestination());
    entity.setFinalPickupDate(finalPickupParam);
    entity.setFinalDeliveryDate(saveEntity.getFinalDeliveryDate());
    entity.setOrderItemId(orderItemId);
    entity.setClientId(saveEntity.getClientId());
    entity.setNameSize(saveEntity.getNameSize());
    entity.setOrderId(saveEntity.getOrderId());
    entity.setQuantity(saveEntity.getQuantity());
    entity.setClassification(saveEntity.getClassification());
    entity.setCommodity(saveEntity.getCommodity());
    entity.setDeclaredValue(saveEntity.getDeclaredValue());
    entity.setComments(saveEntity.getComments());
    entity.setRate(saveEntity.getRate());
    entity.setCreatedBy(saveEntity.getCreatedBy());
    entity.setModifiedBy(saveEntity.getModifiedBy());
    entity.setCreatedTimestamp(saveEntity.getCreatedTimestamp());
    entity.setModifiedTimestamp(saveEntity.getModifiedTimestamp());
    entity.setWeight(saveEntity.getWeight());
    entity.setDriverOrigin(driverCodeParam);
    entity.setDriverDestination(saveEntity.getDriverDestination());
    entity.setTruckOrigin(truckCodeParam);
    entity.setTruckDestination(saveEntity.getTruckDestination());
    entity.setVendorSea(saveEntity.getVendorSea());
    entity.setVesselScheduleId(saveEntity.getVesselScheduleId());
    entity.setCommodity(saveEntity.getCommodity());
    entity.setComments(saveEntity.getComments());
    entity.setWeight(saveEntity.getWeight());
    entity.setVolume(saveEntity.getVolume());
    entity.setServiceRequirement(saveEntity.getServiceRequirement());
    Orders orderEntity=orderService.findOrdersById(saveEntity.getOrderId());
    if (""String_Node_Str"".equals(orderEntity.getServiceType())) {
      if (""String_Node_Str"".equals(orderEntity.getServiceMode())) {
        entity.setStatus(""String_Node_Str"");
      }
 else {
        entity.setStatus(""String_Node_Str"");
      }
    }
 else {
      entity.setStatus(""String_Node_Str"");
    }
    operationsService.updateOrderItem(entity);
  }
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  sessionAttributes.put(""String_Node_Str"",orderItemId);
  return SUCCESS;
}","public String editOrderItemsOriginModal(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  System.out.println(""String_Node_Str"" + sessionAttributes.get(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + sessionAttributes.get(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + vendorId);
  System.out.println(""String_Node_Str"" + driverCodeParam);
  System.out.println(""String_Node_Str"" + truckCodeParam);
  System.out.println(""String_Node_Str"" + finalPickupParam);
  System.out.println(""String_Node_Str"" + originConfirmFlag);
  Integer orderIdParam=(Integer)sessionAttributes.get(""String_Node_Str"");
  Integer orderItemId=(Integer)sessionAttributes.get(""String_Node_Str"");
  check=(String[])sessionAttributes.get(""String_Node_Str"");
  if (originConfirmFlag.equals(""String_Node_Str"")) {
    for (int i=0; i < check.length; i++) {
      System.out.println(""String_Node_Str"" + check[i]);
      Integer orderItemIdCheck=Integer.parseInt(check[i]);
      OrderItems entity=operationsService.findOrderItemById(orderItemIdCheck);
      OrderItems saveEntity=operationsService.findOrderItemById(orderItemIdCheck);
      entity.setVendorOrigin(vendorService.findVendorById(vendorId).getVendorCode());
      entity.setVendorDestination(saveEntity.getVendorDestination());
      entity.setFinalPickupDate(finalPickupParam);
      entity.setFinalDeliveryDate(saveEntity.getFinalDeliveryDate());
      entity.setOrderItemId(orderItemIdCheck);
      entity.setClientId(saveEntity.getClientId());
      entity.setNameSize(saveEntity.getNameSize());
      entity.setOrderId(saveEntity.getOrderId());
      entity.setQuantity(saveEntity.getQuantity());
      entity.setClassification(saveEntity.getClassification());
      entity.setCommodity(saveEntity.getCommodity());
      entity.setDeclaredValue(saveEntity.getDeclaredValue());
      entity.setComments(saveEntity.getComments());
      entity.setRate(saveEntity.getRate());
      entity.setCreatedBy(saveEntity.getCreatedBy());
      entity.setModifiedBy(saveEntity.getModifiedBy());
      entity.setCreatedTimestamp(saveEntity.getCreatedTimestamp());
      entity.setModifiedTimestamp(saveEntity.getModifiedTimestamp());
      entity.setWeight(saveEntity.getWeight());
      entity.setDriverOrigin(driverCodeParam);
      entity.setDriverDestination(saveEntity.getDriverDestination());
      entity.setTruckOrigin(truckCodeParam);
      entity.setTruckDestination(saveEntity.getTruckDestination());
      entity.setVendorSea(saveEntity.getVendorSea());
      entity.setVesselScheduleId(saveEntity.getVesselScheduleId());
      entity.setCommodity(saveEntity.getCommodity());
      entity.setComments(saveEntity.getComments());
      entity.setWeight(saveEntity.getWeight());
      entity.setVolume(saveEntity.getVolume());
      entity.setServiceRequirement(saveEntity.getServiceRequirement());
      Orders orderEntity=orderService.findOrdersById(saveEntity.getOrderId());
      if (""String_Node_Str"".equals(orderEntity.getServiceType())) {
        if (""String_Node_Str"".equals(orderEntity.getServiceMode())) {
          entity.setStatus(""String_Node_Str"");
        }
 else {
          entity.setStatus(""String_Node_Str"");
        }
      }
 else {
        entity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(entity);
    }
  }
 else {
    OrderItems entity=operationsService.findOrderItemById(orderItemId);
    OrderItems saveEntity=operationsService.findOrderItemById(orderItemId);
    entity.setVendorOrigin(vendorService.findVendorById(vendorId).getVendorCode());
    entity.setVendorDestination(saveEntity.getVendorDestination());
    entity.setFinalPickupDate(finalPickupParam);
    entity.setFinalDeliveryDate(saveEntity.getFinalDeliveryDate());
    entity.setOrderItemId(orderItemId);
    entity.setClientId(saveEntity.getClientId());
    entity.setNameSize(saveEntity.getNameSize());
    entity.setOrderId(saveEntity.getOrderId());
    entity.setQuantity(saveEntity.getQuantity());
    entity.setClassification(saveEntity.getClassification());
    entity.setCommodity(saveEntity.getCommodity());
    entity.setDeclaredValue(saveEntity.getDeclaredValue());
    entity.setComments(saveEntity.getComments());
    entity.setRate(saveEntity.getRate());
    entity.setCreatedBy(saveEntity.getCreatedBy());
    entity.setModifiedBy(saveEntity.getModifiedBy());
    entity.setCreatedTimestamp(saveEntity.getCreatedTimestamp());
    entity.setModifiedTimestamp(saveEntity.getModifiedTimestamp());
    entity.setWeight(saveEntity.getWeight());
    entity.setDriverOrigin(driverCodeParam);
    entity.setDriverDestination(saveEntity.getDriverDestination());
    entity.setTruckOrigin(truckCodeParam);
    entity.setTruckDestination(saveEntity.getTruckDestination());
    entity.setVendorSea(saveEntity.getVendorSea());
    entity.setVesselScheduleId(saveEntity.getVesselScheduleId());
    entity.setCommodity(saveEntity.getCommodity());
    entity.setComments(saveEntity.getComments());
    entity.setWeight(saveEntity.getWeight());
    entity.setVolume(saveEntity.getVolume());
    entity.setServiceRequirement(saveEntity.getServiceRequirement());
    Orders orderEntity=orderService.findOrdersById(saveEntity.getOrderId());
    if (""String_Node_Str"".equals(orderEntity.getServiceType())) {
      if (""String_Node_Str"".equals(orderEntity.getServiceMode())) {
        entity.setStatus(""String_Node_Str"");
      }
 else {
        entity.setStatus(""String_Node_Str"");
      }
    }
 else {
      entity.setStatus(""String_Node_Str"");
    }
    operationsService.updateOrderItem(entity);
  }
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  sessionAttributes.put(""String_Node_Str"",orderItemId);
  return SUCCESS;
}",0.998432055749129
144378,"public String editOrderItemsOriginConfirm(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  System.out.println(""String_Node_Str"" + vendorId);
  System.out.println(""String_Node_Str"" + driverCodeParam);
  System.out.println(""String_Node_Str"" + truckCodeParam);
  System.out.println(""String_Node_Str"" + finalPickupParam);
  OrderItems entity=operationsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  order=transformToOrderFormBean(orderEntity);
  List<OrderItems> orderItemsList=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  for (  OrderItems orderItemsElem : orderItemsList) {
    if (entity.getOrderItemId() == orderItemsElem.getOrderItemId()) {
      orderItems.add(transformToOrderItemFormBean(orderItemsElem));
    }
  }
  Vendor vendorEntity=vendorService.findVendorById(vendorId);
  vendor.setVendorId(vendorEntity.getVendorId());
  vendor.setVendorName(vendorEntity.getVendorName());
  Trucks truckEntity=vendorService.findTrucksByTruckCode(truckCodeParam);
  truck=transformToFormBeanTrucks(truckEntity);
  originConfirmFlag=""String_Node_Str"";
  return SUCCESS;
}","public String editOrderItemsOriginConfirm(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  System.out.println(""String_Node_Str"" + vendorId);
  System.out.println(""String_Node_Str"" + driverCodeParam);
  System.out.println(""String_Node_Str"" + truckCodeParam);
  System.out.println(""String_Node_Str"" + finalPickupParam);
  OrderItems entity=operationsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  order=transformToOrderFormBean(orderEntity);
  List<OrderItems> orderItemsList=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  for (  OrderItems orderItemsElem : orderItemsList) {
    if (entity.getOrderItemId() == orderItemsElem.getOrderItemId()) {
      orderItems.add(transformToOrderItemFormBean(orderItemsElem));
    }
  }
  Vendor vendorEntity=vendorService.findVendorById(vendorId);
  vendor.setVendorId(vendorEntity.getVendorId());
  vendor.setVendorName(vendorEntity.getVendorName());
  Trucks truckEntity=vendorService.findTrucksByTruckCode(truckCodeParam);
  truck=transformToFormBeanTrucks(truckEntity);
  originConfirmFlag=""String_Node_Str"";
  if (finalPickupParam.equals(""String_Node_Str"")) {
    finalPickupParam=""String_Node_Str"";
  }
  return SUCCESS;
}",0.9634424980959636
144379,"public OrderItemsBean transformToOrderItemFormBean(OrderItems entity){
  OrderItemsBean formBean=new OrderItemsBean();
  Trucks truckEntityOri=vendorService.findTrucksByTruckCode(entity.getTruckOrigin());
  Trucks truckEntityDes=vendorService.findTrucksByTruckCode(entity.getTruckDestination());
  formBean.setNameSize(entity.getNameSize());
  formBean.setStatus(entity.getStatus());
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setClientId(entity.getClientId());
  formBean.setNameSize(entity.getNameSize());
  formBean.setOrderId(entity.getOrderId());
  formBean.setQuantity(entity.getQuantity());
  formBean.setClassification(entity.getClassification());
  formBean.setDescription(entity.getCommodity());
  formBean.setDeclaredValue(entity.getDeclaredValue());
  formBean.setRemarks(entity.getComments());
  formBean.setRate(entity.getRate());
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setModifiedBy(entity.getModifiedBy());
  formBean.setModifiedTimestamp(entity.getModifiedTimestamp());
  formBean.setStatus(entity.getStatus());
  formBean.setWeight(entity.getWeight());
  if (truckEntityOri == null || truckEntityOri.equals(""String_Node_Str"")) {
    formBean.setPlateNumberOri(""String_Node_Str"");
  }
 else {
    formBean.setPlateNumberOri(vendorService.findTrucksByTruckCode(entity.getTruckOrigin()).getPlateNumber());
  }
  if (truckEntityDes == null || truckEntityDes.equals(""String_Node_Str"")) {
    formBean.setPlateNumberDes(""String_Node_Str"");
  }
 else {
    formBean.setPlateNumberDes(vendorService.findTrucksByTruckCode(entity.getTruckDestination()).getPlateNumber());
  }
  if (entity.getVendorSea() == null || ""String_Node_Str"".equals(entity.getVendorSea()) || ""String_Node_Str"".equals(entity.getVendorSea())) {
    formBean.setVendorSea(""String_Node_Str"");
  }
 else {
    formBean.setVendorSea(entity.getVendorSea());
  }
  Orders orderCheck=orderService.findOrdersById(entity.getOrderId());
  if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
    }
    formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceType().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin()) || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
      formBean.setFinalPickupDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
      formBean.setFinalPickupDate(entity.getFinalPickupDate());
    }
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination()) || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
      formBean.setFinalDeliveryDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
      formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
    }
  }
  if (entity.getVesselScheduleId() == null || ""String_Node_Str"".equals(entity.getVesselScheduleId()) || ""String_Node_Str"".equals(entity.getVesselScheduleId())) {
    formBean.setVesselScheduleId(""String_Node_Str"");
    formBean.setVesselName(""String_Node_Str"");
    formBean.setVendorName(""String_Node_Str"");
    formBean.setDepartureDate(""String_Node_Str"");
    formBean.setArrivalDate(""String_Node_Str"");
  }
 else {
    formBean.setVesselScheduleId(entity.getVesselScheduleId());
    formBean.setVesselName(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getVesselName());
    formBean.setVendorName(vendorService.findVendorByVendorCode(entity.getVendorSea()).getVendorName());
    formBean.setDepartureDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getDepartureDate());
    formBean.setArrivalDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getArrivalDate());
  }
  formBean.setFinalPickupDate(entity.getFinalPickupDate());
  formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  formBean.setDriverOrigin(entity.getDriverOrigin());
  formBean.setDriverDestination(entity.getDriverDestination());
  formBean.setTruckOrigin(entity.getTruckOrigin());
  formBean.setTruckDestination(entity.getTruckDestination());
  formBean.setVolume(entity.getVolume());
  formBean.setContainerId(entity.getContainerId());
  return formBean;
}","public OrderItemsBean transformToOrderItemFormBean(OrderItems entity){
  OrderItemsBean formBean=new OrderItemsBean();
  Trucks truckEntityOri=vendorService.findTrucksByTruckCode(entity.getTruckOrigin());
  Trucks truckEntityDes=vendorService.findTrucksByTruckCode(entity.getTruckDestination());
  formBean.setNameSize(entity.getNameSize());
  formBean.setStatus(entity.getStatus());
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setClientId(entity.getClientId());
  formBean.setNameSize(entity.getNameSize());
  formBean.setOrderId(entity.getOrderId());
  formBean.setQuantity(entity.getQuantity());
  formBean.setClassification(entity.getClassification());
  formBean.setDescription(entity.getCommodity());
  formBean.setDeclaredValue(entity.getDeclaredValue());
  formBean.setRemarks(entity.getComments());
  formBean.setRate(entity.getRate());
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setModifiedBy(entity.getModifiedBy());
  formBean.setModifiedTimestamp(entity.getModifiedTimestamp());
  formBean.setStatus(entity.getStatus());
  formBean.setWeight(entity.getWeight());
  Orders orderCheck=orderService.findOrdersById(entity.getOrderId());
  if (truckEntityOri == null || truckEntityOri.equals(""String_Node_Str"")) {
    formBean.setPlateNumberOri(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setPlateNumberOri(""String_Node_Str"");
  }
 else {
    formBean.setPlateNumberOri(vendorService.findTrucksByTruckCode(entity.getTruckOrigin()).getPlateNumber());
  }
  if (truckEntityDes == null || truckEntityDes.equals(""String_Node_Str"")) {
    formBean.setPlateNumberDes(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setPlateNumberOri(""String_Node_Str"");
  }
 else {
    formBean.setPlateNumberDes(vendorService.findTrucksByTruckCode(entity.getTruckDestination()).getPlateNumber());
  }
  if (entity.getVendorSea() == null || ""String_Node_Str"".equals(entity.getVendorSea()) || ""String_Node_Str"".equals(entity.getVendorSea())) {
    formBean.setVendorSea(""String_Node_Str"");
  }
 else {
    formBean.setVendorSea(entity.getVendorSea());
  }
  if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
    }
    formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceType().equals(""String_Node_Str"")) {
    if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
      if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination())) {
        formBean.setVendorDestination(""String_Node_Str"");
        formBean.setVendorDestinationName(""String_Node_Str"");
        formBean.setFinalDeliveryDate(""String_Node_Str"");
      }
 else {
        formBean.setVendorDestination(entity.getVendorOrigin());
        formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
        formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
      }
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
      formBean.setFinalPickupDate(""String_Node_Str"");
    }
 else {
      if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
        formBean.setVendorOrigin(""String_Node_Str"");
        formBean.setVendorOriginName(""String_Node_Str"");
        formBean.setFinalPickupDate(""String_Node_Str"");
      }
 else {
        formBean.setVendorOrigin(entity.getVendorOrigin());
        formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
        formBean.setFinalPickupDate(entity.getFinalPickupDate());
      }
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
      formBean.setFinalDeliveryDate(""String_Node_Str"");
    }
  }
 else {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin()) || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
      formBean.setFinalPickupDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
      formBean.setFinalPickupDate(entity.getFinalPickupDate());
    }
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination()) || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
      formBean.setFinalDeliveryDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
      formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
    }
  }
  if (entity.getVesselScheduleId() == null || ""String_Node_Str"".equals(entity.getVesselScheduleId()) || ""String_Node_Str"".equals(entity.getVesselScheduleId())) {
    formBean.setVesselScheduleId(""String_Node_Str"");
    formBean.setVesselName(""String_Node_Str"");
    formBean.setVendorName(""String_Node_Str"");
    formBean.setDepartureDate(""String_Node_Str"");
    formBean.setArrivalDate(""String_Node_Str"");
  }
 else {
    formBean.setVesselScheduleId(entity.getVesselScheduleId());
    formBean.setVesselName(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getVesselName());
    formBean.setVendorName(vendorService.findVendorByVendorCode(entity.getVendorSea()).getVendorName());
    formBean.setDepartureDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getDepartureDate());
    formBean.setArrivalDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getArrivalDate());
  }
  formBean.setFinalPickupDate(entity.getFinalPickupDate());
  formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  formBean.setDriverOrigin(entity.getDriverOrigin());
  formBean.setDriverDestination(entity.getDriverDestination());
  formBean.setTruckOrigin(entity.getTruckOrigin());
  formBean.setTruckDestination(entity.getTruckDestination());
  formBean.setVolume(entity.getVolume());
  formBean.setContainerId(entity.getContainerId());
  return formBean;
}",0.7204785181373811
144380,"public String editBulkOrderItemsOriginConfirmDes(){
  System.out.println(""String_Node_Str"" + vendorId);
  System.out.println(""String_Node_Str"" + driverCodeParam);
  System.out.println(""String_Node_Str"" + truckCodeParam);
  System.out.println(""String_Node_Str"" + finalDeliveryParam);
  Map sessionAttributes=ActionContext.getContext().getSession();
  check=(String[])sessionAttributes.get(""String_Node_Str"");
  for (int i=0; i < check.length; i++) {
    System.out.println(""String_Node_Str"" + check[i]);
    Integer orderItemId=Integer.parseInt(check[i]);
    OrderItems orderItemEntity=operationsService.findOrderItemById(orderItemId);
    orderItems.add(transformToOrderItemFormBean(orderItemEntity));
  }
  Vendor vendorEntity=vendorService.findVendorById(vendorId);
  vendor.setVendorId(vendorEntity.getVendorId());
  vendor.setVendorName(vendorEntity.getVendorName());
  Trucks truckEntity=vendorService.findTrucksByTruckCode(truckCodeParam);
  truck=transformToFormBeanTrucks(truckEntity);
  destinationConfirmFlag=""String_Node_Str"";
  return SUCCESS;
}","public String editBulkOrderItemsOriginConfirmDes(){
  System.out.println(""String_Node_Str"" + vendorId);
  System.out.println(""String_Node_Str"" + driverCodeParam);
  System.out.println(""String_Node_Str"" + truckCodeParam);
  System.out.println(""String_Node_Str"" + finalDeliveryParam);
  Map sessionAttributes=ActionContext.getContext().getSession();
  check=(String[])sessionAttributes.get(""String_Node_Str"");
  for (int i=0; i < check.length; i++) {
    System.out.println(""String_Node_Str"" + check[i]);
    Integer orderItemId=Integer.parseInt(check[i]);
    OrderItems orderItemEntity=operationsService.findOrderItemById(orderItemId);
    orderItems.add(transformToOrderItemFormBean(orderItemEntity));
  }
  if (vendorId != null) {
    Vendor vendorEntity=vendorService.findVendorById(vendorId);
    vendor.setVendorId(vendorEntity.getVendorId());
    vendor.setVendorName(vendorEntity.getVendorName());
  }
  if (truckCodeParam != null) {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(truckCodeParam);
    truck=transformToFormBeanTrucks(truckEntity);
  }
  destinationConfirmFlag=""String_Node_Str"";
  return SUCCESS;
}",0.9653284671532848
144381,"public String createdInlandDocument(){
  List<Documents> freightDocuments=documentsService.findDocumentsByOrderId(orderIdParam);
  for (  Documents freightDocumentElem : freightDocuments) {
    if (freightDocumentElem.getDocumentName().equals(""String_Node_Str"") || freightDocumentElem.getDocumentName().equals(""String_Node_Str"")) {
      Documents documentEntity=documentsService.findDocumentById(freightDocumentElem.getDocumentId());
      documentsService.deleteDocument(documentEntity);
    }
  }
  List<String> vendorOrigin=new ArrayList<String>();
  List<String> vendorDestination=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorOrigin.isEmpty()) {
      vendorOrigin.add(everyItem.getVendorOrigin());
    }
 else {
      if (!vendorOrigin.contains(everyItem.getVendorOrigin())) {
        vendorOrigin.add(everyItem.getVendorOrigin());
      }
    }
  }
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorDestination.isEmpty()) {
      vendorDestination.add(everyItem.getVendorDestination());
    }
 else {
      if (!vendorDestination.contains(everyItem.getVendorDestination())) {
        vendorDestination.add(everyItem.getVendorDestination());
      }
    }
  }
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      List<Documents> waybillOrigin=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
      for (      String itemVendor : vendorOrigin) {
        if (itemVendor != null) {
          if (waybillOrigin.size() == 0) {
            Documents documentEntity=new Documents();
            Client client=clientService.findClientById(getClientId().toString());
            documentEntity.setClient(client);
            documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_ORIGIN);
            documentEntity.setReferenceId(orderEntity.getOrderId());
            documentEntity.setReferenceTable(""String_Node_Str"");
            documentEntity.setOrderNumber(orderEntity.getOrderNumber());
            documentEntity.setCreatedDate(new Date());
            documentEntity.setDocumentStatus(""String_Node_Str"");
            documentEntity.setVendorCode(itemVendor);
            documentEntity.setOutboundStage(1);
            documentEntity.setDocumentProcessed(0);
            documentEntity.setCreatedBy(commonUtils.getUserNameFromSession());
            String documentCode=documentsService.findNextControlNo(getClientId(),""String_Node_Str"");
            documentEntity.setControlNumber(documentCode);
            documentEntity.setReferenceNumber(documentCode.replace(""String_Node_Str"",""String_Node_Str""));
            documentsService.addDocuments(documentEntity);
          }
 else {
            clearErrorsAndMessages();
            addActionError(""String_Node_Str"");
          }
        }
 else {
          clearErrorsAndMessages();
          addActionError(""String_Node_Str"");
          for (          OrderItems orderItemsElem : orderItemsList) {
            orderItems.add(transformToOrderItemFormBean(orderItemsElem));
          }
          return INPUT;
        }
      }
    }
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      List<Documents> waybillDestination=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
      for (      String itemVendor : vendorDestination) {
        if (itemVendor != null) {
          if (waybillDestination.size() == 0) {
            Documents documentEntity=new Documents();
            Client client=clientService.findClientById(getClientId().toString());
            documentEntity.setClient(client);
            documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_DESTINATION);
            documentEntity.setReferenceId(orderEntity.getOrderId());
            documentEntity.setReferenceTable(""String_Node_Str"");
            documentEntity.setOrderNumber(orderEntity.getOrderNumber());
            documentEntity.setCreatedDate(new Date());
            documentEntity.setDocumentStatus(""String_Node_Str"");
            documentEntity.setVendorCode(itemVendor);
            documentEntity.setFinalOutboundStage(1);
            documentEntity.setDocumentProcessed(2);
            documentEntity.setCreatedBy(commonUtils.getUserNameFromSession());
            String documentCode=documentsService.findNextControlNo(getClientId(),""String_Node_Str"");
            documentEntity.setControlNumber(documentCode);
            documentEntity.setReferenceNumber(documentCode.replace(""String_Node_Str"",""String_Node_Str""));
            documentsService.addDocuments(documentEntity);
          }
 else {
            clearErrorsAndMessages();
            addActionError(""String_Node_Str"");
          }
        }
 else {
          clearErrorsAndMessages();
          addActionError(""String_Node_Str"");
          for (          OrderItems orderItemsElem : orderItemsList) {
            orderItems.add(transformToOrderItemFormBean(orderItemsElem));
          }
          return INPUT;
        }
      }
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}","public String createdInlandDocument(){
  List<Documents> freightDocuments=documentsService.findDocumentsByOrderId(orderIdParam);
  for (  Documents freightDocumentElem : freightDocuments) {
    if (freightDocumentElem.getDocumentName().equals(""String_Node_Str"") || freightDocumentElem.getDocumentName().equals(""String_Node_Str"")) {
      Documents documentEntity=documentsService.findDocumentById(freightDocumentElem.getDocumentId());
      documentsService.deleteDocument(documentEntity);
    }
  }
  List<String> vendorOrigin=new ArrayList<String>();
  List<String> vendorDestination=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorOrigin.isEmpty()) {
      vendorOrigin.add(everyItem.getVendorOrigin());
    }
 else {
      if (!vendorOrigin.contains(everyItem.getVendorOrigin())) {
        vendorOrigin.add(everyItem.getVendorOrigin());
      }
    }
  }
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorDestination.isEmpty()) {
      vendorDestination.add(everyItem.getVendorDestination());
    }
 else {
      if (!vendorDestination.contains(everyItem.getVendorDestination())) {
        vendorDestination.add(everyItem.getVendorDestination());
      }
    }
  }
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      List<Documents> waybillOrigin=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
      for (      String itemVendor : vendorOrigin) {
        if (itemVendor != null) {
          if (waybillOrigin.size() == 0) {
            Documents documentEntity=new Documents();
            Client client=clientService.findClientById(getClientId().toString());
            documentEntity.setClient(client);
            documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_ORIGIN);
            documentEntity.setReferenceId(orderEntity.getOrderId());
            documentEntity.setReferenceTable(""String_Node_Str"");
            documentEntity.setOrderNumber(orderEntity.getOrderNumber());
            documentEntity.setCreatedDate(new Date());
            documentEntity.setDocumentStatus(""String_Node_Str"");
            documentEntity.setVendorCode(itemVendor);
            documentEntity.setOutboundStage(1);
            documentEntity.setDocumentProcessed(0);
            documentEntity.setCreatedBy(commonUtils.getUserNameFromSession());
            String documentCode=documentsService.findNextControlNo(getClientId(),""String_Node_Str"");
            documentEntity.setControlNumber(documentCode);
            documentsService.addDocuments(documentEntity);
          }
 else {
            clearErrorsAndMessages();
            addActionError(""String_Node_Str"");
          }
        }
 else {
          clearErrorsAndMessages();
          addActionError(""String_Node_Str"");
          for (          OrderItems orderItemsElem : orderItemsList) {
            orderItems.add(transformToOrderItemFormBean(orderItemsElem));
          }
          return INPUT;
        }
      }
    }
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      List<Documents> waybillDestination=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
      for (      String itemVendor : vendorDestination) {
        if (itemVendor != null) {
          if (waybillDestination.size() == 0) {
            Documents documentEntity=new Documents();
            Client client=clientService.findClientById(getClientId().toString());
            documentEntity.setClient(client);
            documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_DESTINATION);
            documentEntity.setReferenceId(orderEntity.getOrderId());
            documentEntity.setReferenceTable(""String_Node_Str"");
            documentEntity.setOrderNumber(orderEntity.getOrderNumber());
            documentEntity.setCreatedDate(new Date());
            documentEntity.setDocumentStatus(""String_Node_Str"");
            documentEntity.setVendorCode(itemVendor);
            if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
              documentEntity.setOutboundStage(1);
              documentEntity.setDocumentProcessed(0);
            }
 else {
              documentEntity.setFinalOutboundStage(1);
              documentEntity.setDocumentProcessed(2);
            }
            documentEntity.setCreatedBy(commonUtils.getUserNameFromSession());
            String documentCode=documentsService.findNextControlNo(getClientId(),""String_Node_Str"");
            documentEntity.setControlNumber(documentCode);
            documentsService.addDocuments(documentEntity);
          }
 else {
            clearErrorsAndMessages();
            addActionError(""String_Node_Str"");
          }
        }
 else {
          clearErrorsAndMessages();
          addActionError(""String_Node_Str"");
          for (          OrderItems orderItemsElem : orderItemsList) {
            orderItems.add(transformToOrderItemFormBean(orderItemsElem));
          }
          return INPUT;
        }
      }
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}",0.9536761580960476
144382,"public String createReport(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  System.out.println(""String_Node_Str"" + orderIdParam);
  Documents documentEntity=new Documents();
  Client client=clientService.findClientById(getClientId().toString());
  documentEntity.setClient(client);
  documentEntity.setDocumentName(DocumentsConstants.BOOKING_REQUEST_FORM);
  documentEntity.setReferenceId(orderIdParam);
  documentEntity.setReferenceTable(""String_Node_Str"");
  documentEntity.setOrderNumber(orderService.findOrdersById(orderIdParam).getOrderNumber());
  documentEntity.setCreatedDate(new Date());
  documentEntity.setDocumentStatus(""String_Node_Str"");
  documentEntity.setDocumentProcessed(0);
  documentEntity.setCreatedBy(commonUtils.getUserNameFromSession());
  documentEntity.setOutboundStage(1);
  documentEntity.setVendorCode(""String_Node_Str"");
  String documentCode=documentsService.findNextControlNo(getClientId(),""String_Node_Str"");
  documentEntity.setControlNumber(documentCode);
  documentEntity.setReferenceNumber(documentCode.replace(""String_Node_Str"",""String_Node_Str""));
  documentsService.addDocuments(documentEntity);
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  return SUCCESS;
}","public String createReport(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Documents documentEntity=new Documents();
  Client client=clientService.findClientById(getClientId().toString());
  documentEntity.setClient(client);
  documentEntity.setDocumentName(DocumentsConstants.BOOKING_REQUEST_FORM);
  documentEntity.setReferenceId(orderIdParam);
  documentEntity.setReferenceTable(""String_Node_Str"");
  documentEntity.setOrderNumber(orderService.findOrdersById(orderIdParam).getOrderNumber());
  documentEntity.setCreatedDate(new Date());
  documentEntity.setDocumentStatus(""String_Node_Str"");
  documentEntity.setDocumentProcessed(0);
  documentEntity.setCreatedBy(commonUtils.getUserNameFromSession());
  documentEntity.setOutboundStage(1);
  documentEntity.setVendorCode(""String_Node_Str"");
  String documentCode=documentsService.findNextControlNo(getClientId(),""String_Node_Str"");
  documentEntity.setControlNumber(documentCode);
  documentEntity.setReferenceNumber(documentCode.replace(""String_Node_Str"",""String_Node_Str""));
  documentsService.addDocuments(documentEntity);
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  return SUCCESS;
}",0.976782752902156
144383,"private OrderBean transformToOrderFormBean(Orders order){
  OrderBean orderBean=new OrderBean();
  orderBean.setOrderId(order.getOrderId());
  orderBean.setOrderNumber(order.getOrderNumber());
  orderBean.setFreightType(order.getServiceType());
  orderBean.setModeOfService(order.getServiceMode());
  orderBean.setNotifyBy(order.getNotificationType());
  orderBean.setOrderDate(order.getOrderDate());
  orderBean.setModeOfPayment(order.getPaymentMode());
  orderBean.setComments(order.getComments());
  orderBean.setOrderStatus(order.getOrderStatus());
  orderBean.setShipperCode(order.getVendorCode());
  orderBean.setTruckCode(order.getTruckCode());
  orderBean.setTrailerCode(order.getTrailerCode());
  orderBean.setDriverCode(order.getDriverCode());
  orderBean.setVesselNumber(order.getVesselNumber());
  orderBean.setShipperAddressId(order.getShipperAddressId());
  orderBean.setShipperContactId(order.getShipperContactId());
  Contacts shipperContactName=customerService.findContactById(order.getShipperContactId());
  orderBean.setShipperContactName(getFullName(shipperContactName));
  orderBean.setConsigneeAddressId(order.getConsigneeAddressId());
  orderBean.setConsigneeContactId(order.getConsigneeContactId());
  Contacts consigneeContactName=customerService.findContactById(order.getConsigneeContactId());
  orderBean.setConsigneeName(getFullName(consigneeContactName));
  orderBean.setAccountRep(order.getAccountRep());
  orderBean.setCreatedTimestamp(order.getCreatedTimestamp());
  orderBean.setCreatedBy(order.getCreatedBy());
  orderBean.setModifiedTimestamp(order.getModifiedTimestamp());
  orderBean.setModifiedBy(order.getModifiedBy());
  orderBean.setPickupDate(order.getPickupDate());
  orderBean.setOriginationPort(order.getOriginationPort());
  orderBean.setDeliveryDate(order.getDeliveryDate());
  orderBean.setDestinationPort(order.getDestinationPort());
  orderBean.setRates(order.getRates());
  orderBean.setServiceRequirement(order.getServiceRequirement());
  Contacts contactShipperName=customerService.findContactById(order.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    orderBean.setCustomerId(shipperName.getCustomerId());
    orderBean.setCustomerName(shipperName.getCustomerName());
  }
  orderBean.setPickupDate(order.getPickupDate());
  orderBean.setDeliveryDate(order.getDeliveryDate());
  Contacts contacts=customerService.findContactById(order.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  orderBean.setShipperInfoContact(contact);
  if (order.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(order.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    orderBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    orderBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(order.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  orderBean.setConsigneeInfoContact(contact);
  if (order.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(order.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    orderBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    orderBean.setConsigneeInfoAddress(address);
  }
  orderBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    orderBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  outboundEntityList=documentsService.findDocumentsByOrderId(order.getOrderId());
  for (  Documents documentElem : outboundEntityList) {
    if (documentElem.getDocumentName().equals(""String_Node_Str"")) {
      orderBean.setDocumentCheck(""String_Node_Str"");
      orderBean.setDocumentId(documentElem.getDocumentId());
    }
  }
  return orderBean;
}","private OrderBean transformToOrderFormBean(Orders order){
  OrderBean orderBean=new OrderBean();
  orderBean.setOrderId(order.getOrderId());
  orderBean.setOrderNumber(order.getOrderNumber());
  orderBean.setFreightType(order.getServiceType());
  orderBean.setModeOfService(order.getServiceMode());
  orderBean.setNotifyBy(order.getNotificationType());
  orderBean.setOrderDate(order.getOrderDate());
  orderBean.setModeOfPayment(order.getPaymentMode());
  orderBean.setComments(order.getComments());
  orderBean.setOrderStatus(order.getOrderStatus());
  orderBean.setShipperCode(order.getVendorCode());
  orderBean.setTruckCode(order.getTruckCode());
  orderBean.setTrailerCode(order.getTrailerCode());
  orderBean.setDriverCode(order.getDriverCode());
  orderBean.setVesselNumber(order.getVesselNumber());
  orderBean.setShipperAddressId(order.getShipperAddressId());
  orderBean.setShipperContactId(order.getShipperContactId());
  Contacts shipperContactName=customerService.findContactById(order.getShipperContactId());
  orderBean.setShipperContactName(getFullName(shipperContactName));
  orderBean.setConsigneeAddressId(order.getConsigneeAddressId());
  orderBean.setConsigneeContactId(order.getConsigneeContactId());
  Contacts consigneeContactName=customerService.findContactById(order.getConsigneeContactId());
  orderBean.setConsigneeName(getFullName(consigneeContactName));
  orderBean.setAccountRep(order.getAccountRep());
  orderBean.setCreatedTimestamp(order.getCreatedTimestamp());
  orderBean.setCreatedBy(order.getCreatedBy());
  orderBean.setModifiedTimestamp(order.getModifiedTimestamp());
  orderBean.setModifiedBy(order.getModifiedBy());
  orderBean.setPickupDate(order.getPickupDate());
  if (order.getOriginationPort() != null) {
    orderBean.setOriginationPort(order.getOriginationPort());
  }
 else   if (order.getServiceMode().equals(""String_Node_Str"")) {
    orderBean.setOriginationPort(""String_Node_Str"");
  }
 else {
    orderBean.setOriginationPort(""String_Node_Str"");
  }
  orderBean.setDeliveryDate(order.getDeliveryDate());
  if (order.getDestinationPort() != null) {
    orderBean.setDestinationPort(order.getDestinationPort());
  }
 else   if (order.getServiceMode().equals(""String_Node_Str"")) {
    orderBean.setDestinationPort(""String_Node_Str"");
  }
 else {
    orderBean.setDestinationPort(""String_Node_Str"");
  }
  orderBean.setRates(order.getRates());
  orderBean.setServiceRequirement(order.getServiceRequirement());
  Contacts contactShipperName=customerService.findContactById(order.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    orderBean.setCustomerId(shipperName.getCustomerId());
    orderBean.setCustomerName(shipperName.getCustomerName());
  }
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  if (order.getPickupDate() != null) {
    orderBean.setStrPickupDate(formatter.format(order.getPickupDate()));
  }
 else   if (order.getServiceMode().equals(""String_Node_Str"")) {
    orderBean.setStrPickupDate(""String_Node_Str"");
  }
 else {
    orderBean.setStrPickupDate(""String_Node_Str"");
  }
  if (order.getDeliveryDate() != null) {
    orderBean.setStrDeliveryDate(formatter.format(order.getDeliveryDate()));
  }
 else   if (order.getServiceMode().equals(""String_Node_Str"")) {
    orderBean.setStrDeliveryDate(""String_Node_Str"");
  }
 else {
    orderBean.setStrDeliveryDate(""String_Node_Str"");
  }
  Contacts contacts=customerService.findContactById(order.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  orderBean.setShipperInfoContact(contact);
  if (order.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(order.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    orderBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    orderBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(order.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  orderBean.setConsigneeInfoContact(contact);
  if (order.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(order.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    orderBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    orderBean.setConsigneeInfoAddress(address);
  }
  orderBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    orderBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  outboundEntityList=documentsService.findDocumentsByOrderId(order.getOrderId());
  for (  Documents documentElem : outboundEntityList) {
    if (documentElem.getDocumentName().equals(""String_Node_Str"")) {
      orderBean.setDocumentCheck(""String_Node_Str"");
      orderBean.setDocumentId(documentElem.getDocumentId());
    }
  }
  return orderBean;
}",0.8836370539104025
144384,"private OrderItems transformToOrderItemsEntityBean(OrderItemsBean formBean){
  OrderItems entity=new OrderItems();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClientId(client.getClientId());
  if (formBean.getOrderItemId() != null) {
    entity.setOrderItemId(new Integer(formBean.getOrderItemId()));
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  entity.setOrderId((Integer)sessionAttributes.get(""String_Node_Str""));
  entity.setCommodity(formBean.getDescription());
  entity.setClassification(formBean.getClassification());
  entity.setDeclaredValue(formBean.getDeclaredValue());
  entity.setWeight(formBean.getWeight());
  entity.setNameSize(formBean.getNameSize());
  entity.setServiceRequirement(orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str"")).getServiceRequirement());
  entity.setRate(formBean.getRate());
  entity.setComments(formBean.getRemarks());
  if (sessionAttributes.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    entity.setStatus(""String_Node_Str"");
  }
 else {
    entity.setStatus(""String_Node_Str"");
  }
  entity.setVolume(formBean.getVolume());
  entity.setCreatedBy(commonUtils.getUserNameFromSession());
  entity.setModifiedBy(commonUtils.getUserNameFromSession());
  entity.setCreatedTimestamp(new Date());
  entity.setModifiedTimestamp(new Date());
  entity.setVesselScheduleId(formBean.getVesselScheduleId());
  entity.setFinalPickupDate(formBean.getFinalPickupDate());
  entity.setFinalDeliveryDate(formBean.getFinalDeliveryDate());
  entity.setDriverOrigin(formBean.getDriverOrigin());
  entity.setDriverDestination(formBean.getDriverDestination());
  entity.setTruckOrigin(formBean.getTruckOrigin());
  entity.setTruckDestination(formBean.getTruckDestination());
  entity.setVendorOrigin(formBean.getVendorOrigin());
  entity.setVendorDestination(formBean.getVendorDestination());
  entity.setVendorSea(formBean.getVendorSea());
  entity.setContainerId(formBean.getContainerId());
  entity.setServiceRequirement(formBean.getServiceRequirement());
  return entity;
}","private OrderItems transformToOrderItemsEntityBean(OrderItemsBean formBean){
  OrderItems entity=new OrderItems();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClientId(client.getClientId());
  if (formBean.getOrderItemId() != null) {
    entity.setOrderItemId(new Integer(formBean.getOrderItemId()));
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  entity.setOrderId((Integer)sessionAttributes.get(""String_Node_Str""));
  entity.setCommodity(formBean.getDescription());
  entity.setClassification(formBean.getClassification());
  entity.setDeclaredValue(formBean.getDeclaredValue());
  entity.setWeight(formBean.getWeight());
  entity.setNameSize(formBean.getNameSize());
  entity.setServiceRequirement(orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str"")).getServiceRequirement());
  entity.setRate(formBean.getRate());
  entity.setComments(formBean.getRemarks());
  if (sessionAttributes.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    entity.setStatus(""String_Node_Str"");
  }
 else   if (sessionAttributes.get(""String_Node_Str"").equals(""String_Node_Str"") || sessionAttributes.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    entity.setStatus(""String_Node_Str"");
  }
 else {
    entity.setStatus(""String_Node_Str"");
  }
  entity.setVolume(formBean.getVolume());
  entity.setCreatedBy(commonUtils.getUserNameFromSession());
  entity.setModifiedBy(commonUtils.getUserNameFromSession());
  entity.setCreatedTimestamp(new Date());
  entity.setModifiedTimestamp(new Date());
  entity.setVesselScheduleId(formBean.getVesselScheduleId());
  entity.setFinalPickupDate(formBean.getFinalPickupDate());
  entity.setFinalDeliveryDate(formBean.getFinalDeliveryDate());
  entity.setDriverOrigin(formBean.getDriverOrigin());
  entity.setDriverDestination(formBean.getDriverDestination());
  entity.setTruckOrigin(formBean.getTruckOrigin());
  entity.setTruckDestination(formBean.getTruckDestination());
  entity.setVendorOrigin(formBean.getVendorOrigin());
  entity.setVendorDestination(formBean.getVendorDestination());
  entity.setVendorSea(formBean.getVendorSea());
  entity.setContainerId(formBean.getContainerId());
  entity.setServiceRequirement(formBean.getServiceRequirement());
  return entity;
}",0.9451150079708496
144385,"public String viewInfoVendor(){
  Vendor vendorEntity=new Vendor();
  if (!StringUtils.isBlank(vendorCodeParam))   vendorEntity=vendorService.findVendorById(vendorIdParam);
 else   vendorEntity=vendorService.findVendorById(vendorIdParam);
  vendor=transformToFormBean(vendorEntity);
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendor.getVendorId());
  if (""String_Node_Str"".equals(vendor.getVendorType())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String viewInfoVendor(){
  Vendor vendorEntity=new Vendor();
  if (!StringUtils.isBlank(vendorCodeParam))   vendorEntity=vendorService.findVendorByVendorCode(vendorCodeParam);
 else   vendorEntity=vendorService.findVendorById(getSessionVendorId());
  vendor=transformToFormBean(vendorEntity);
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendor.getVendorId());
  if (""String_Node_Str"".equals(vendor.getVendorType())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.8553459119496856
144386,"public String editItem(){
  validateOnSubmitItem(item);
  if (hasFieldErrors()) {
    return INPUT;
  }
  Items itemEntity=transformToEntityBeanItem(item);
  itemEntity.setModifiedBy(commonUtils.getUserNameFromSession());
  itemEntity.setModifiedTimeStamp(new Date());
  customerService.updateItems(itemEntity);
  return SUCCESS;
}","public String editItem(){
  validateOnSubmitItem(item);
  if (hasFieldErrors()) {
    return INPUT;
  }
  Items itemEntity=transformToEntityBeanItem(item);
  List<OrderItems> orderItemsInBooking=orderService.findOrderItemByName(itemEntity.getItemCode());
  if (orderItemsInBooking.size() > 0) {
    Integer customerId=getCustomerSessionId();
    List<Items> itemEntityList=customerService.findItemByCustomerId(customerId);
    for (    Items itemsElem : itemEntityList) {
      items.add(transformToFormBeanItem(itemsElem));
    }
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  itemEntity.setModifiedBy(commonUtils.getUserNameFromSession());
  itemEntity.setModifiedTimeStamp(new Date());
  customerService.updateItems(itemEntity);
  return SUCCESS;
}",0.5868794326241135
144387,"public String deleteItem(){
  Items itemEntity=customerService.findItemByCustomerItemsId(customersItemIdParam);
  List<OrderItems> orderItemsInBooking=orderService.findOrderItemByName(itemEntity.getItemName());
  for (  OrderItems orderItemElem : orderItemsInBooking) {
    Orders orderEntity=orderService.findOrdersById(orderItemElem.getOrderId());
    if (orderEntity.getCustomerId() == itemEntity.getCustomerId()) {
      Integer customerId=getCustomerSessionId();
      List<Items> itemEntityList=customerService.findItemByCustomerId(customerId);
      for (      Items itemsElem : itemEntityList) {
        items.add(transformToFormBeanItem(itemsElem));
      }
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      return INPUT;
    }
  }
  customerService.deleteItem(itemEntity);
  return SUCCESS;
}","public String deleteItem(){
  Items itemEntity=customerService.findItemByCustomerItemsId(customersItemIdParam);
  List<OrderItems> orderItemsInBooking=orderService.findOrderItemByName(itemEntity.getItemCode());
  if (orderItemsInBooking.size() > 0) {
    Integer customerId=getCustomerSessionId();
    List<Items> itemEntityList=customerService.findItemByCustomerId(customerId);
    for (    Items itemsElem : itemEntityList) {
      items.add(transformToFormBeanItem(itemsElem));
    }
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  customerService.deleteItem(itemEntity);
  return SUCCESS;
}",0.5591836734693878
144388,"public String reloadEditPage(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByVendorId((Integer)sessionAttributes.get(""String_Node_Str""));
  for (  VesselSchedules vesselScheduleElem : vesselSchedulesList) {
    vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
  }
  return SUCCESS;
}","public String reloadEditPage(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  sessionAttributes.put(""String_Node_Str"",nameSizeList);
  check=(String[])sessionAttributes.get(""String_Node_Str"");
  for (int x=0; x < check.length; x++) {
    OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(check[x]));
    orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemsListing));
  }
  vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
  List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
  for (  VesselSchedules vesselScheduleElem : vesselSchedulesList) {
    vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
  }
  return SUCCESS;
}",0.6002386634844868
144389,"public String addVesselScheduleInPlanningAlreadyExists(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  Customer customerEntity=customerService.findCustomerById(orderEntity.getCustomerId());
  customer=new CustomerBean();
  customer.setCustomerType(customerEntity.getCustomerType());
  if (orderItem.getVesselScheduleId() == null || orderItem.getVesselScheduleId().equals(""String_Node_Str"") || orderItem.getVesselScheduleId().length() == 0 || orderItem.getVesselScheduleId().isEmpty() || orderItem.getVesselScheduleId().equals(""String_Node_Str"")) {
    orderItem.setVendorSea(""String_Node_Str"");
    orderItem.setVesselScheduleId(""String_Node_Str"");
    vesselSchedule.setVesselName(""String_Node_Str"");
    vesselSchedule.setDepartureDate(""String_Node_Str"");
    vesselSchedule.setArrivalDate(""String_Node_Str"");
    vesselSchedule.setDepartureTime(""String_Node_Str"");
    vesselSchedule.setArrivalTime(""String_Node_Str"");
    vesselSchedule.setOriginPort(""String_Node_Str"");
    vesselSchedule.setDestinationPort(""String_Node_Str"");
    scheduleExists=""String_Node_Str"";
  }
 else {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
    scheduleExists=""String_Node_Str"";
  }
  if (orderItem.getTruckOrigin() == null || orderItem.getTruckOrigin().equals(""String_Node_Str"") || orderItem.getTruckOrigin().length() == 0 || orderItem.getTruckOrigin().isEmpty()) {
    orderItem.setVendorOrigin(""String_Node_Str"");
    orderItem.setDriverOrigin(""String_Node_Str"");
    orderItem.setTruckOrigin(""String_Node_Str"");
    orderItem.setFinalPickupDate(""String_Node_Str"");
    truck.setTruckType(""String_Node_Str"");
    truck.setPlateNumber(""String_Node_Str"");
    truck.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckOrigin());
    truck=transformToFormBeanTrucks(truckEntity);
  }
  if (orderItem.getTruckDestination() == null || orderItem.getTruckDestination().equals(""String_Node_Str"") || orderItem.getTruckDestination().length() == 0 || orderItem.getTruckDestination().isEmpty()) {
    orderItem.setVendorDestination(""String_Node_Str"");
    orderItem.setDriverDestination(""String_Node_Str"");
    orderItem.setTruckDestination(""String_Node_Str"");
    orderItem.setFinalDeliveryDate(""String_Node_Str"");
    truckDestination.setTruckType(""String_Node_Str"");
    truckDestination.setPlateNumber(""String_Node_Str"");
    truckDestination.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckDestination());
    truckDestination=transformToFormBeanTrucks(truckEntity);
  }
  vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
  List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
  for (  VesselSchedules vesselScheduleElem : vesselSchedulesList) {
    vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
  }
  sessionAttributes.put(""String_Node_Str"",entity.getOrderItemId());
  sessionAttributes.put(""String_Node_Str"",entity.getNameSize());
  addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  return SUCCESS;
}","public String addVesselScheduleInPlanningAlreadyExists(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  order=transformToOrderFormBean(orderEntity);
  Customer customerEntity=customerService.findCustomerById(orderEntity.getCustomerId());
  customer=new CustomerBean();
  customer.setCustomerType(customerEntity.getCustomerType());
  if (orderItem.getVesselScheduleId() == null || orderItem.getVesselScheduleId().equals(""String_Node_Str"") || orderItem.getVesselScheduleId().length() == 0 || orderItem.getVesselScheduleId().isEmpty() || orderItem.getVesselScheduleId().equals(""String_Node_Str"")) {
    orderItem.setVendorSea(""String_Node_Str"");
    orderItem.setVesselScheduleId(""String_Node_Str"");
    vesselSchedule.setVesselName(""String_Node_Str"");
    vesselSchedule.setDepartureDate(""String_Node_Str"");
    vesselSchedule.setArrivalDate(""String_Node_Str"");
    vesselSchedule.setDepartureTime(""String_Node_Str"");
    vesselSchedule.setArrivalTime(""String_Node_Str"");
    vesselSchedule.setOriginPort(""String_Node_Str"");
    vesselSchedule.setDestinationPort(""String_Node_Str"");
    scheduleExists=""String_Node_Str"";
  }
 else {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
    scheduleExists=""String_Node_Str"";
  }
  if (orderItem.getTruckOrigin() == null || orderItem.getTruckOrigin().equals(""String_Node_Str"") || orderItem.getTruckOrigin().length() == 0 || orderItem.getTruckOrigin().isEmpty()) {
    orderItem.setVendorOrigin(""String_Node_Str"");
    orderItem.setDriverOrigin(""String_Node_Str"");
    orderItem.setTruckOrigin(""String_Node_Str"");
    orderItem.setFinalPickupDate(""String_Node_Str"");
    truck.setTruckType(""String_Node_Str"");
    truck.setPlateNumber(""String_Node_Str"");
    truck.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckOrigin());
    truck=transformToFormBeanTrucks(truckEntity);
  }
  if (orderItem.getTruckDestination() == null || orderItem.getTruckDestination().equals(""String_Node_Str"") || orderItem.getTruckDestination().length() == 0 || orderItem.getTruckDestination().isEmpty()) {
    orderItem.setVendorDestination(""String_Node_Str"");
    orderItem.setDriverDestination(""String_Node_Str"");
    orderItem.setTruckDestination(""String_Node_Str"");
    orderItem.setFinalDeliveryDate(""String_Node_Str"");
    truckDestination.setTruckType(""String_Node_Str"");
    truckDestination.setPlateNumber(""String_Node_Str"");
    truckDestination.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckDestination());
    truckDestination=transformToFormBeanTrucks(truckEntity);
  }
  vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
  List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
  for (  VesselSchedules vesselScheduleElem : vesselSchedulesList) {
    vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
  }
  sessionAttributes.put(""String_Node_Str"",entity.getOrderItemId());
  sessionAttributes.put(""String_Node_Str"",entity.getNameSize());
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.9811218985976268
144390,"public String viewFreightPlanningInland(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById(orderItemIdParam);
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  order=transformToOrderFormBean(orderEntity);
  if (orderItem.getVesselScheduleId() == null || orderItem.getVesselScheduleId().equals(""String_Node_Str"") || orderItem.getVesselScheduleId().length() == 0 || orderItem.getVesselScheduleId().isEmpty() || orderItem.getVesselScheduleId().equals(""String_Node_Str"")) {
    orderItem.setVendorSea(""String_Node_Str"");
    orderItem.setVesselScheduleId(""String_Node_Str"");
    vesselSchedule.setVesselName(""String_Node_Str"");
    vesselSchedule.setDepartureDate(""String_Node_Str"");
    vesselSchedule.setArrivalDate(""String_Node_Str"");
    vesselSchedule.setDepartureTime(""String_Node_Str"");
    vesselSchedule.setArrivalTime(""String_Node_Str"");
    vesselSchedule.setOriginPort(""String_Node_Str"");
    vesselSchedule.setDestinationPort(""String_Node_Str"");
  }
 else {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  if (orderItem.getTruckOrigin() == null || orderItem.getTruckOrigin().equals(""String_Node_Str"") || orderItem.getTruckOrigin().length() == 0 || orderItem.getTruckOrigin().isEmpty()) {
    orderItem.setVendorOrigin(""String_Node_Str"");
    orderItem.setDriverOrigin(""String_Node_Str"");
    orderItem.setTruckOrigin(""String_Node_Str"");
    orderItem.setFinalPickupDate(""String_Node_Str"");
    truck.setTruckType(""String_Node_Str"");
    truck.setPlateNumber(""String_Node_Str"");
    truck.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckOrigin());
    truck=transformToFormBeanTrucks(truckEntity);
  }
  if (orderItem.getTruckDestination() == null || orderItem.getTruckDestination().equals(""String_Node_Str"") || orderItem.getTruckDestination().length() == 0 || orderItem.getTruckDestination().isEmpty()) {
    orderItem.setVendorDestination(""String_Node_Str"");
    orderItem.setDriverDestination(""String_Node_Str"");
    orderItem.setTruckDestination(""String_Node_Str"");
    orderItem.setFinalDeliveryDate(""String_Node_Str"");
    truckDestination.setTruckType(""String_Node_Str"");
    truckDestination.setPlateNumber(""String_Node_Str"");
    truckDestination.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckDestination());
    truckDestination=transformToFormBeanTrucks(truckEntity);
  }
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  sessionAttributes.put(""String_Node_Str"",entity.getOrderId());
  sessionAttributes.put(""String_Node_Str"",entity.getOrderItemId());
  sessionAttributes.put(""String_Node_Str"",entity.getNameSize());
  if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String viewFreightPlanningInland(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById(orderItemIdParam);
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  order=transformToOrderFormBean(orderEntity);
  if (orderItem.getVesselScheduleId() == null || orderItem.getVesselScheduleId().equals(""String_Node_Str"") || orderItem.getVesselScheduleId().length() == 0 || orderItem.getVesselScheduleId().isEmpty() || orderItem.getVesselScheduleId().equals(""String_Node_Str"")) {
    orderItem.setVendorSea(""String_Node_Str"");
    orderItem.setVesselScheduleId(""String_Node_Str"");
    vesselSchedule.setVesselName(""String_Node_Str"");
    vesselSchedule.setDepartureDate(""String_Node_Str"");
    vesselSchedule.setArrivalDate(""String_Node_Str"");
    vesselSchedule.setDepartureTime(""String_Node_Str"");
    vesselSchedule.setArrivalTime(""String_Node_Str"");
    vesselSchedule.setOriginPort(""String_Node_Str"");
    vesselSchedule.setDestinationPort(""String_Node_Str"");
  }
 else {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  if (orderItem.getTruckOrigin() == null || orderItem.getTruckOrigin().equals(""String_Node_Str"") || orderItem.getTruckOrigin().length() == 0 || orderItem.getTruckOrigin().isEmpty()) {
    orderItem.setVendorOrigin(""String_Node_Str"");
    orderItem.setDriverOrigin(""String_Node_Str"");
    orderItem.setTruckOrigin(""String_Node_Str"");
    orderItem.setFinalPickupDate(""String_Node_Str"");
    truck.setTruckType(""String_Node_Str"");
    truck.setPlateNumber(""String_Node_Str"");
    truck.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckOrigin());
    truck=transformToFormBeanTrucks(truckEntity);
  }
  if (orderItem.getTruckDestination() == null || orderItem.getTruckDestination().equals(""String_Node_Str"") || orderItem.getTruckDestination().length() == 0 || orderItem.getTruckDestination().isEmpty()) {
    orderItem.setVendorDestination(""String_Node_Str"");
    orderItem.setDriverDestination(""String_Node_Str"");
    orderItem.setTruckDestination(""String_Node_Str"");
    orderItem.setFinalDeliveryDate(""String_Node_Str"");
    truckDestination.setTruckType(""String_Node_Str"");
    truckDestination.setPlateNumber(""String_Node_Str"");
    truckDestination.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckDestination());
    truckDestination=transformToFormBeanTrucks(truckEntity);
  }
  OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(orderItem.getOrderItemId());
  orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemsListing));
  orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemsListing));
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  sessionAttributes.put(""String_Node_Str"",entity.getOrderId());
  sessionAttributes.put(""String_Node_Str"",entity.getOrderItemId());
  sessionAttributes.put(""String_Node_Str"",entity.getNameSize());
  if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.961419068736142
144391,"public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById(orderIdParam);
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
      orderItems.add(transformToOrderItemFormBean(orderItemEntity));
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    sessionAttributes.put(""String_Node_Str"",orderItems);
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
      for (int x=0; x < check.length; x++) {
        OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(check[x]));
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemsListing));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemsListing));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      sessionAttributes.put(""String_Node_Str"",orderItems);
      sessionAttributes.put(""String_Node_Str"",orderIdParam);
      sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else       if (planning1.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}","public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById(orderIdParam);
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
      orderItems.add(transformToOrderItemFormBean(orderItemEntity));
    }
    for (int x=0; x < check.length; x++) {
      OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(check[x]));
      orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemsListing));
      orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemsListing));
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    sessionAttributes.put(""String_Node_Str"",orderItems);
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
      for (int x=0; x < check.length; x++) {
        OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(check[x]));
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemsListing));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemsListing));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      sessionAttributes.put(""String_Node_Str"",orderItems);
      sessionAttributes.put(""String_Node_Str"",orderIdParam);
      sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else       if (planning1.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}",0.9780773420479304
144392,"public String viewFreightList(){
  List<Orders> fclOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    fclOrders=operationsService.findOrdersByOriginDestinationFCL(originCity,destinationCity);
  }
 else {
    fclOrders=operationsService.findOrdersByFCL();
  }
  for (  Orders orderElem : fclOrders) {
    fclTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> lclOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    lclOrders=operationsService.findOrdersByOriginDestinationLCL(originCity,destinationCity);
  }
 else {
    lclOrders=operationsService.findOrdersByLCL();
  }
  for (  Orders orderElem : lclOrders) {
    lclTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> lcuOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    lcuOrders=operationsService.findOrdersByOriginDestinationLCU(originCity,destinationCity);
  }
 else {
    lcuOrders=operationsService.findOrdersByLCU();
  }
  for (  Orders orderElem : lcuOrders) {
    lcuTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> rcuOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    rcuOrders=operationsService.findOrdersByOriginDestinationRCU(originCity,destinationCity);
  }
 else {
    rcuOrders=operationsService.findOrdersByRCU();
  }
  for (  Orders orderElem : rcuOrders) {
    rcuTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> fclTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    fclTrucksOrders=operationsService.findOrdersByFCLTrucksOrigin(originCityTruck);
  }
 else {
    fclTrucksOrders=operationsService.findOrdersByFCLTrucks();
  }
  for (  Orders orderElem : fclTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      fclTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lclTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    lclTrucksOrders=operationsService.findOrdersByLCLTrucksOrigin(originCityTruck);
  }
 else {
    lclTrucksOrders=operationsService.findOrdersByLCLTrucks();
  }
  for (  Orders orderElem : lclTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lclTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lcuTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    lcuTrucksOrders=operationsService.findOrdersByLCUTrucksOrigin(originCityTruck);
  }
 else {
    lcuTrucksOrders=operationsService.findOrdersByLCUTrucks();
  }
  for (  Orders orderElem : lcuTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lcuTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> rcuTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    rcuTrucksOrders=operationsService.findOrdersByRCUTrucksOrigin(originCityTruck);
  }
 else {
    rcuTrucksOrders=operationsService.findOrdersByRCUTrucks();
  }
  for (  Orders orderElem : rcuTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      rcuTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> ftlOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    ftlOrders=operationsService.findOrdersByOriginFTL(originCityTruck);
  }
 else {
    ftlOrders=operationsService.findOrdersByFTL();
  }
  for (  Orders orderElem : ftlOrders) {
    ftlTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> ltlOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    ltlOrders=operationsService.findOrdersByOriginLTL(originCityTruck);
  }
 else {
    ltlOrders=operationsService.findOrdersByLTL();
  }
  for (  Orders orderElem : ltlOrders) {
    ltlTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> fclTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    fclTrucksOrdersDes=operationsService.findOrdersByFCLTrucksDestination(destinationCityTruck);
  }
 else {
    fclTrucksOrdersDes=operationsService.findOrdersByFCLTrucks();
  }
  for (  Orders orderElem : fclTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      fclTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lclTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    lclTrucksOrdersDes=operationsService.findOrdersByLCLTrucksDestination(destinationCityTruck);
  }
 else {
    lclTrucksOrdersDes=operationsService.findOrdersByLCLTrucks();
  }
  for (  Orders orderElem : lclTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lclTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lcuTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    lcuTrucksOrdersDes=operationsService.findOrdersByLCUTrucksDestination(destinationCityTruck);
  }
 else {
    lcuTrucksOrdersDes=operationsService.findOrdersByLCUTrucks();
  }
  for (  Orders orderElem : lcuTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lcuTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> rcuTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    rcuTrucksOrdersDes=operationsService.findOrdersByRCUTrucksDestination(destinationCityTruck);
  }
 else {
    rcuTrucksOrdersDes=operationsService.findOrdersByRCUTrucks();
  }
  for (  Orders orderElem : rcuTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      rcuTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<VesselSchedules> vesselSchedulesList=operationsService.findAllVesselSchedule();
  for (  VesselSchedules vesselScheduleElem : vesselSchedulesList) {
    vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
  }
  return SUCCESS;
}","public String viewFreightList(){
  List<Orders> fclOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    fclOrders=operationsService.findOrdersByOriginDestinationFCL(originCity,destinationCity);
  }
 else {
    fclOrders=operationsService.findOrdersByFCL();
  }
  for (  Orders orderElem : fclOrders) {
    fclTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> lclOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    lclOrders=operationsService.findOrdersByOriginDestinationLCL(originCity,destinationCity);
  }
 else {
    lclOrders=operationsService.findOrdersByLCL();
  }
  for (  Orders orderElem : lclOrders) {
    lclTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> lcuOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    lcuOrders=operationsService.findOrdersByOriginDestinationLCU(originCity,destinationCity);
  }
 else {
    lcuOrders=operationsService.findOrdersByLCU();
  }
  for (  Orders orderElem : lcuOrders) {
    lcuTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> rcuOrders=new ArrayList<Orders>();
  if (originCity != null && destinationCity != null) {
    rcuOrders=operationsService.findOrdersByOriginDestinationRCU(originCity,destinationCity);
  }
 else {
    rcuOrders=operationsService.findOrdersByRCU();
  }
  for (  Orders orderElem : rcuOrders) {
    rcuTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> fclTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    fclTrucksOrders=operationsService.findOrdersByFCLTrucksOrigin(originCityTruck);
  }
 else {
    fclTrucksOrders=operationsService.findOrdersByFCLTrucks();
  }
  for (  Orders orderElem : fclTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      fclTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lclTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    lclTrucksOrders=operationsService.findOrdersByLCLTrucksOrigin(originCityTruck);
  }
 else {
    lclTrucksOrders=operationsService.findOrdersByLCLTrucks();
  }
  for (  Orders orderElem : lclTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lclTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lcuTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    lcuTrucksOrders=operationsService.findOrdersByLCUTrucksOrigin(originCityTruck);
  }
 else {
    lcuTrucksOrders=operationsService.findOrdersByLCUTrucks();
  }
  for (  Orders orderElem : lcuTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lcuTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> rcuTrucksOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    rcuTrucksOrders=operationsService.findOrdersByRCUTrucksOrigin(originCityTruck);
  }
 else {
    rcuTrucksOrders=operationsService.findOrdersByRCUTrucks();
  }
  for (  Orders orderElem : rcuTrucksOrders) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      rcuTruckTable.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> ftlOrders=new ArrayList<Orders>();
  System.out.println(""String_Node_Str"" + originCityTruck);
  if (originCityTruck != null) {
    ftlOrders=operationsService.findOrdersByOriginFTL(originCityTruck);
  }
 else {
    ftlOrders=operationsService.findOrdersByFTL();
  }
  for (  Orders orderElem : ftlOrders) {
    ftlTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> ltlOrders=new ArrayList<Orders>();
  if (originCityTruck != null) {
    ltlOrders=operationsService.findOrdersByOriginLTL(originCityTruck);
  }
 else {
    ltlOrders=operationsService.findOrdersByLTL();
  }
  for (  Orders orderElem : ltlOrders) {
    ltlTable.add(transformToOrderFormBean(orderElem));
  }
  List<Orders> fclTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    fclTrucksOrdersDes=operationsService.findOrdersByFCLTrucksDestination(destinationCityTruck);
  }
 else {
    fclTrucksOrdersDes=operationsService.findOrdersByFCLTrucks();
  }
  for (  Orders orderElem : fclTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      fclTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lclTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    lclTrucksOrdersDes=operationsService.findOrdersByLCLTrucksDestination(destinationCityTruck);
  }
 else {
    lclTrucksOrdersDes=operationsService.findOrdersByLCLTrucks();
  }
  for (  Orders orderElem : lclTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lclTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> lcuTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    lcuTrucksOrdersDes=operationsService.findOrdersByLCUTrucksDestination(destinationCityTruck);
  }
 else {
    lcuTrucksOrdersDes=operationsService.findOrdersByLCUTrucks();
  }
  for (  Orders orderElem : lcuTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      lcuTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<Orders> rcuTrucksOrdersDes=new ArrayList<Orders>();
  if (destinationCityTruck != null) {
    rcuTrucksOrdersDes=operationsService.findOrdersByRCUTrucksDestination(destinationCityTruck);
  }
 else {
    rcuTrucksOrdersDes=operationsService.findOrdersByRCUTrucks();
  }
  for (  Orders orderElem : rcuTrucksOrdersDes) {
    if (orderElem.getServiceMode().equals(""String_Node_Str"") || orderElem.getServiceMode().equals(""String_Node_Str"")) {
      rcuTruckTableDes.add(transformToOrderFormBean(orderElem));
    }
  }
  List<VesselSchedules> vesselSchedulesList=operationsService.findAllVesselSchedule();
  for (  VesselSchedules vesselScheduleElem : vesselSchedulesList) {
    vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
  }
  return SUCCESS;
}",0.9954457738324972
144393,"public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  List<OrderItems> orderItemsVolume=orderService.findAllItemByOrderId(entity.getOrderId());
  Float orderVolume=0.F;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getVolume() != null) {
      orderVolume=orderVolume + orderItemElem.getVolume();
    }
  }
  formBean.setOrderVolume(orderVolume);
  Double orderWeight=0.0;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getWeight() != null) {
      orderWeight=orderWeight + orderItemElem.getWeight();
    }
  }
  formBean.setOrderWeight(orderWeight);
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setOrderDate(entity.getOrderDate());
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setPickupDate(entity.getPickupDate());
  formBean.setDeliveryDate(entity.getDeliveryDate());
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  formBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    formBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  List<OrderItems> orderItemEntity=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  if (orderItemEntity.size() >= 1) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckOrigin() == null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckOrigin())) {
        formBean.setPlateNumberOri(""String_Node_Str"");
      }
 else {
        Trucks truckEntityOri=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckOrigin());
        formBean.setPlateNumberOri(truckEntityOri.getPlateNumber());
      }
    }
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckDestination() == null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckDestination())) {
        formBean.setPlateNumberDes(""String_Node_Str"");
      }
 else {
        Trucks truckEntityDes=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckDestination());
        formBean.setPlateNumberDes(truckEntityDes.getPlateNumber());
      }
    }
  }
  return formBean;
}","public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  List<OrderItems> orderItemsVolume=orderService.findAllItemByOrderId(entity.getOrderId());
  Float orderVolume=0.F;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getVolume() != null) {
      orderVolume=orderVolume + orderItemElem.getVolume();
    }
  }
  formBean.setOrderVolume(orderVolume);
  Double orderWeight=0.0;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getWeight() != null) {
      orderWeight=orderWeight + orderItemElem.getWeight();
    }
  }
  formBean.setOrderWeight(orderWeight);
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setOrderDate(entity.getOrderDate());
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setPickupDate(entity.getPickupDate());
  formBean.setDeliveryDate(entity.getDeliveryDate());
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  formBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    formBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  List<OrderItems> orderItemEntity=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  if (orderItemEntity.size() >= 1) {
    if (orderItemEntity.get(0).getTruckOrigin() == null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckOrigin())) {
      formBean.setPlateNumberOri(""String_Node_Str"");
    }
 else {
      Trucks truckEntityOri=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckOrigin());
      formBean.setPlateNumberOri(truckEntityOri.getPlateNumber());
    }
    if (orderItemEntity.get(0).getTruckDestination() == null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckDestination())) {
      formBean.setPlateNumberDes(""String_Node_Str"");
    }
 else {
      Trucks truckEntityDes=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckDestination());
      formBean.setPlateNumberDes(truckEntityDes.getPlateNumber());
    }
  }
  return formBean;
}",0.8588164355241623
144394,"public String updateBulkStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String checkValue : checkedItemsInSession) {
      Integer bulkId=Integer.parseInt(checkValue);
      OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
      orderStatusLogsBean.setOrderItemId(bulkId);
      OrderStatusLogs orderStatusLogsEntity=transformToOrderStatusLogsEntity(orderStatusLogsBean);
      orderStatusLogsEntity.setCreatedTimestamp(new Date());
      orderStatusLogsEntity.setCreatedBy(commonUtils.getUserNameFromSession());
      orderStatusLogsService.addStatus(orderStatusLogsEntity);
      orderItemEntity.setStatus(orderStatusLogsBean.getStatus());
      orderStatusLogsService.updateStatusOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  return SUCCESS;
}","public String updateBulkStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String checkValue : checkedItemsInSession) {
      Integer bulkId=Integer.parseInt(checkValue);
      OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(bulkId);
      orderStatusLogsBean.setOrderItemId(orderItemEntity.getOrderItemId());
      OrderStatusLogs orderStatusLogsEntity=transformToOrderStatusLogsEntity(orderStatusLogsBean);
      sessionAttributes.put(""String_Node_Str"",orderStatusLogsEntity.getOrderItemId());
      orderStatusLogsEntity.setCreatedTimestamp(new Date());
      orderStatusLogsEntity.setCreatedBy(commonUtils.getUserNameFromSession());
      orderStatusLogsService.addStatus(orderStatusLogsEntity);
      orderItemEntity.setStatus(orderStatusLogsBean.getStatus());
      orderStatusLogsService.updateStatusOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  return SUCCESS;
}",0.8294283036551078
144395,"public String deleteConsigneeContact(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Contacts consigneeContactEntity=customerService.findContactById(consigneeContactCodeParam);
  List<Orders> consigneeContactInBookingList=orderService.findConsigneeContactInBooking(consigneeContactCodeParam);
  if (consigneeContactInBookingList.size() > 0) {
    Contacts contactEntity=customerService.findContactById(contactCodeParam);
    Address addressEntity=customerService.findAddressById(addressIdParam);
    consignee=transformToFormBeanConsignee(addressEntity,contactEntity);
    List<Contacts> contactEntityList=customerService.findContactByConsignee(contactEntity.getContactId(),""String_Node_Str"",getClientId());
    for (    Contacts contactElem : contactEntityList) {
      contacts.add(transformToFormBeanContacts(contactElem));
    }
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  customerService.deleteContact(consigneeContactEntity);
  sessionAttributes.put(""String_Node_Str"",contactCodeParam);
  sessionAttributes.put(""String_Node_Str"",addressIdParam);
  return SUCCESS;
}","public String deleteConsigneeContact(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Contacts consigneeContactEntity=customerService.findContactById(consigneeContactCodeParam);
  List<Orders> consigneeContactInBookingList=orderService.findConsigneeContactInBooking(consigneeContactCodeParam);
  if (consigneeContactInBookingList.size() > 0) {
    Contacts contactEntity=customerService.findContactById(contactCodeParam);
    Address addressEntity=customerService.findAddressById(addressIdParam);
    consignee=transformToFormBeanConsignee(addressEntity,contactEntity);
    List<Contacts> contactEntityList=customerService.findContactByConsignee(contactEntity.getContactId(),""String_Node_Str"",getClientId());
    for (    Contacts contactElem : contactEntityList) {
      contacts.add(transformToFormBeanContacts(contactElem));
    }
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  customerService.deleteContact(consigneeContactEntity);
  Contacts contactEntity=customerService.findContactById(contactCodeParam);
  Address addressEntity=customerService.findAddressById(addressIdParam);
  consignee=transformToFormBeanConsignee(addressEntity,contactEntity);
  List<Contacts> contactEntityList=customerService.findContactByConsignee(contactEntity.getContactId(),""String_Node_Str"",getClientId());
  for (  Contacts contactElem : contactEntityList) {
    contacts.add(transformToFormBeanContacts(contactElem));
  }
  return SUCCESS;
}",0.7884761182714177
144396,"public String addConsigneeContact() throws Exception {
  Map sessionAttributes=ActionContext.getContext().getSession();
  validateOnSubmitContact(consigneeContact);
  if (hasFieldErrors()) {
    return INPUT;
  }
  try {
    Contacts contactEntity=transformToEntityBeanConsigneeContacts(consigneeContact);
    contactEntity.setReferenceId((Integer)sessionAttributes.get(""String_Node_Str""));
    contactEntity.setModifiedBy(commonUtils.getUserNameFromSession());
    contactEntity.setCreatedBy(commonUtils.getUserNameFromSession());
    contactEntity.setCreatedTimestamp(new Date());
    customerService.addContact(contactEntity);
  }
 catch (  ContactAlreadyExistsException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String addConsigneeContact() throws Exception {
  Map sessionAttributes=ActionContext.getContext().getSession();
  validateOnSubmitContact(consigneeContact);
  if (hasFieldErrors()) {
    return INPUT;
  }
  try {
    Contacts contactEntity=transformToEntityBeanConsigneeContacts(consigneeContact);
    contactEntity.setReferenceId(contactCodeParam);
    contactEntity.setModifiedBy(commonUtils.getUserNameFromSession());
    contactEntity.setCreatedBy(commonUtils.getUserNameFromSession());
    contactEntity.setCreatedTimestamp(new Date());
    customerService.addContact(contactEntity);
  }
 catch (  ContactAlreadyExistsException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",contactCodeParam);
  sessionAttributes.put(""String_Node_Str"",addressIdParam);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  Contacts contactEntity=customerService.findContactById(contactCodeParam);
  Address addressEntity=customerService.findAddressById(addressIdParam);
  consignee=transformToFormBeanConsignee(addressEntity,contactEntity);
  List<Contacts> contactEntityList=customerService.findContactByConsignee(contactEntity.getContactId(),""String_Node_Str"",getClientId());
  for (  Contacts contactElem : contactEntityList) {
    contacts.add(transformToFormBeanContacts(contactElem));
  }
  return SUCCESS;
}",0.702258726899384
144397,"public String consigneeInfo(){
  Contacts contactEntity=customerService.findContactById(contactCodeParam);
  Address addressEntity=customerService.findAddressById(addressIdParam);
  consignee=transformToFormBeanConsignee(addressEntity,contactEntity);
  sessionAttributes.put(""String_Node_Str"",contactEntity.getReferenceId());
  List<Contacts> contactEntityList=new ArrayList<Contacts>();
  contactEntityList=customerService.findContactByConsignee(contactEntity.getContactId(),""String_Node_Str"",getClientId());
  for (  Contacts contactElem : contactEntityList) {
    contacts.add(transformToFormBeanContacts(contactElem));
  }
  return SUCCESS;
}","public String consigneeInfo(){
  Contacts contactEntity=customerService.findContactById(contactCodeParam);
  Address addressEntity=customerService.findAddressById(addressIdParam);
  consignee=transformToFormBeanConsignee(addressEntity,contactEntity);
  sessionAttributes.put(""String_Node_Str"",contactEntity.getReferenceId());
  List<Contacts> contactEntityList=customerService.findContactByConsignee(contactEntity.getContactId(),""String_Node_Str"",getClientId());
  for (  Contacts contactElem : contactEntityList) {
    contacts.add(transformToFormBeanContacts(contactElem));
  }
  return SUCCESS;
}",0.9622489959839358
144398,"public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  List<OrderItems> orderItemsVolume=orderService.findAllItemByOrderId(entity.getOrderId());
  Float orderVolume=0.F;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getVolume() != null) {
      orderVolume=orderVolume + orderItemElem.getVolume();
    }
  }
  formBean.setOrderVolume(orderVolume);
  Double orderWeight=0.0;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getWeight() != null) {
      orderWeight=orderWeight + orderItemElem.getWeight();
    }
  }
  formBean.setOrderWeight(orderWeight);
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setOrderDate(entity.getOrderDate());
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setPickupDate(entity.getPickupDate());
  formBean.setDeliveryDate(entity.getDeliveryDate());
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  formBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    formBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  List<OrderItems> orderItemEntity=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  if (orderItemEntity.size() >= 1) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckOrigin() != null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckOrigin())) {
        Trucks truckEntityOri=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckOrigin());
        formBean.setPlateNumberOri(truckEntityOri.getPlateNumber());
      }
 else {
        formBean.setPlateNumberOri(""String_Node_Str"");
      }
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckDestination() != null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckDestination())) {
        Trucks truckEntityDes=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckDestination());
        formBean.setPlateNumberDes(truckEntityDes.getPlateNumber());
      }
 else {
        formBean.setPlateNumberDes(""String_Node_Str"");
      }
    }
  }
  return formBean;
}","public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  List<OrderItems> orderItemsVolume=orderService.findAllItemByOrderId(entity.getOrderId());
  Float orderVolume=0.F;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getVolume() != null) {
      orderVolume=orderVolume + orderItemElem.getVolume();
    }
  }
  formBean.setOrderVolume(orderVolume);
  Double orderWeight=0.0;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getWeight() != null) {
      orderWeight=orderWeight + orderItemElem.getWeight();
    }
  }
  formBean.setOrderWeight(orderWeight);
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setOrderDate(entity.getOrderDate());
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setPickupDate(entity.getPickupDate());
  formBean.setDeliveryDate(entity.getDeliveryDate());
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  formBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    formBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  List<OrderItems> orderItemEntity=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  if (orderItemEntity.size() >= 1) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckOrigin() == null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckOrigin())) {
        formBean.setPlateNumberOri(""String_Node_Str"");
      }
 else {
        Trucks truckEntityOri=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckOrigin());
        formBean.setPlateNumberOri(truckEntityOri.getPlateNumber());
      }
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckDestination() == null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckDestination())) {
        formBean.setPlateNumberDes(""String_Node_Str"");
      }
 else {
        Trucks truckEntityDes=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckDestination());
        formBean.setPlateNumberDes(truckEntityDes.getPlateNumber());
      }
    }
  }
  return formBean;
}",0.9736195313780108
144399,"public OrderItemsBean transformToOrderItemFormBean(OrderItems entity){
  OrderItemsBean formBean=new OrderItemsBean();
  Trucks truckEntityOri=vendorService.findTrucksByTruckCode(entity.getTruckOrigin());
  Trucks truckEntityDes=vendorService.findTrucksByTruckCode(entity.getTruckDestination());
  formBean.setNameSize(entity.getNameSize());
  formBean.setStatus(entity.getStatus());
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setClientId(entity.getClientId());
  formBean.setNameSize(entity.getNameSize());
  formBean.setOrderId(entity.getOrderId());
  formBean.setQuantity(entity.getQuantity());
  formBean.setClassification(entity.getClassification());
  formBean.setDescription(entity.getCommodity());
  formBean.setDeclaredValue(entity.getDeclaredValue());
  formBean.setRemarks(entity.getComments());
  formBean.setRate(entity.getRate());
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setModifiedBy(entity.getModifiedBy());
  formBean.setModifiedTimestamp(entity.getModifiedTimestamp());
  formBean.setStatus(entity.getStatus());
  formBean.setWeight(entity.getWeight());
  if (truckEntityOri == null || truckEntityOri.equals(""String_Node_Str"")) {
    formBean.setPlateNumber(""String_Node_Str"");
  }
 else {
    formBean.setPlateNumber(vendorService.findTrucksByTruckCode(entity.getTruckOrigin()).getPlateNumber());
  }
  if (entity.getVendorSea() == null || ""String_Node_Str"".equals(entity.getVendorSea()) || ""String_Node_Str"".equals(entity.getVendorSea())) {
    formBean.setVendorSea(""String_Node_Str"");
  }
 else {
    formBean.setVendorSea(entity.getVendorSea());
  }
  Orders orderCheck=orderService.findOrdersById(entity.getOrderId());
  if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
    }
    formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceType().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin()) || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
      formBean.setFinalPickupDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
      formBean.setFinalPickupDate(entity.getFinalPickupDate());
    }
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination()) || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
      formBean.setFinalDeliveryDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
      formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
    }
  }
  if (entity.getVesselScheduleId() == null || ""String_Node_Str"".equals(entity.getVesselScheduleId()) || ""String_Node_Str"".equals(entity.getVesselScheduleId())) {
    formBean.setVesselScheduleId(""String_Node_Str"");
    formBean.setVesselName(""String_Node_Str"");
    formBean.setVendorName(""String_Node_Str"");
    formBean.setDepartureDate(""String_Node_Str"");
    formBean.setArrivalDate(""String_Node_Str"");
  }
 else {
    formBean.setVesselScheduleId(entity.getVesselScheduleId());
    formBean.setVesselName(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getVesselName());
    formBean.setVendorName(vendorService.findVendorByVendorCode(entity.getVendorSea()).getVendorName());
    formBean.setDepartureDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getDepartureDate());
    formBean.setArrivalDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getArrivalDate());
  }
  formBean.setFinalPickupDate(entity.getFinalPickupDate());
  formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  formBean.setDriverOrigin(entity.getDriverOrigin());
  formBean.setDriverDestination(entity.getDriverDestination());
  formBean.setTruckOrigin(entity.getTruckOrigin());
  formBean.setTruckDestination(entity.getTruckDestination());
  formBean.setVolume(entity.getVolume());
  formBean.setContainerId(entity.getContainerId());
  return formBean;
}","public OrderItemsBean transformToOrderItemFormBean(OrderItems entity){
  OrderItemsBean formBean=new OrderItemsBean();
  Trucks truckEntityOri=vendorService.findTrucksByTruckCode(entity.getTruckOrigin());
  Trucks truckEntityDes=vendorService.findTrucksByTruckCode(entity.getTruckDestination());
  formBean.setNameSize(entity.getNameSize());
  formBean.setStatus(entity.getStatus());
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setClientId(entity.getClientId());
  formBean.setNameSize(entity.getNameSize());
  formBean.setOrderId(entity.getOrderId());
  formBean.setQuantity(entity.getQuantity());
  formBean.setClassification(entity.getClassification());
  formBean.setDescription(entity.getCommodity());
  formBean.setDeclaredValue(entity.getDeclaredValue());
  formBean.setRemarks(entity.getComments());
  formBean.setRate(entity.getRate());
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setModifiedBy(entity.getModifiedBy());
  formBean.setModifiedTimestamp(entity.getModifiedTimestamp());
  formBean.setStatus(entity.getStatus());
  formBean.setWeight(entity.getWeight());
  if (truckEntityOri == null || truckEntityOri.equals(""String_Node_Str"")) {
    formBean.setPlateNumberOri(""String_Node_Str"");
  }
 else {
    formBean.setPlateNumberOri(vendorService.findTrucksByTruckCode(entity.getTruckOrigin()).getPlateNumber());
  }
  if (truckEntityDes == null || truckEntityDes.equals(""String_Node_Str"")) {
    formBean.setPlateNumberDes(""String_Node_Str"");
  }
 else {
    formBean.setPlateNumberDes(vendorService.findTrucksByTruckCode(entity.getTruckDestination()).getPlateNumber());
  }
  if (entity.getVendorSea() == null || ""String_Node_Str"".equals(entity.getVendorSea()) || ""String_Node_Str"".equals(entity.getVendorSea())) {
    formBean.setVendorSea(""String_Node_Str"");
  }
 else {
    formBean.setVendorSea(entity.getVendorSea());
  }
  Orders orderCheck=orderService.findOrdersById(entity.getOrderId());
  if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
    }
    formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceType().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin()) || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
      formBean.setFinalPickupDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
      formBean.setFinalPickupDate(entity.getFinalPickupDate());
    }
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination()) || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
      formBean.setFinalDeliveryDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
      formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
    }
  }
  if (entity.getVesselScheduleId() == null || ""String_Node_Str"".equals(entity.getVesselScheduleId()) || ""String_Node_Str"".equals(entity.getVesselScheduleId())) {
    formBean.setVesselScheduleId(""String_Node_Str"");
    formBean.setVesselName(""String_Node_Str"");
    formBean.setVendorName(""String_Node_Str"");
    formBean.setDepartureDate(""String_Node_Str"");
    formBean.setArrivalDate(""String_Node_Str"");
  }
 else {
    formBean.setVesselScheduleId(entity.getVesselScheduleId());
    formBean.setVesselName(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getVesselName());
    formBean.setVendorName(vendorService.findVendorByVendorCode(entity.getVendorSea()).getVendorName());
    formBean.setDepartureDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getDepartureDate());
    formBean.setArrivalDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getArrivalDate());
  }
  formBean.setFinalPickupDate(entity.getFinalPickupDate());
  formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  formBean.setDriverOrigin(entity.getDriverOrigin());
  formBean.setDriverDestination(entity.getDriverDestination());
  formBean.setTruckOrigin(entity.getTruckOrigin());
  formBean.setTruckDestination(entity.getTruckDestination());
  formBean.setVolume(entity.getVolume());
  formBean.setContainerId(entity.getContainerId());
  return formBean;
}",0.9727626459143968
144400,"public OrderItemsBean(Date modifiedTimestamp,Integer orderItemId,Integer orderId,Integer quantity,String classification,String description,Double declaredValue,Double weight,String remarks,Float rate,Date createdTimestamp,String createdBy,String modifiedBy,String nameSize,String status,String shipmentStatus,Float volume,Integer clientId,String commodity,String comments,String vendorSea,String vendorOrigin,String vendorOriginName,String vendorDestination,String vendorDestinationName,String vesselName,String finalPickupDate,String finalDeliveryDate,String driverOrigin,String driverDestination,String truckOrigin,String truckDestination,String vesselScheduleId,String orderNum,String editItem,String port,String serviceRequirement,String vendorName,String voyageNumber,String departureDate,String arrivalDate,Integer containerId,String containerNumber,String sealNumber,String bulletSeal,String shippingSeal){
  this.modifiedTimestamp=modifiedTimestamp;
  this.orderItemId=orderItemId;
  this.orderId=orderId;
  this.quantity=quantity;
  this.classification=classification;
  this.description=description;
  this.declaredValue=declaredValue;
  this.weight=weight;
  this.remarks=remarks;
  this.rate=rate;
  this.createdTimestamp=createdTimestamp;
  this.createdBy=createdBy;
  this.modifiedTimestamp=modifiedTimestamp;
  this.modifiedBy=modifiedBy;
  this.nameSize=nameSize;
  this.status=status;
  this.shipmentStatus=shipmentStatus;
  this.volume=volume;
  this.clientId=clientId;
  this.commodity=commodity;
  this.comments=comments;
  this.vendorSea=vendorSea;
  this.vendorOrigin=vendorOrigin;
  this.vendorOriginName=vendorOriginName;
  this.vendorDestination=vendorDestination;
  this.vendorDestinationName=vendorDestinationName;
  this.vesselName=vesselName;
  this.finalPickupDate=finalPickupDate;
  this.finalDeliveryDate=finalDeliveryDate;
  this.driverOrigin=driverOrigin;
  this.driverDestination=driverDestination;
  this.truckOrigin=truckOrigin;
  this.truckDestination=truckDestination;
  this.vesselScheduleId=vesselScheduleId;
  this.orderNum=orderNum;
  this.editItem=editItem;
  this.port=port;
  this.serviceRequirement=serviceRequirement;
  this.vendorName=vendorName;
  this.voyageNumber=voyageNumber;
  this.departureDate=departureDate;
  this.arrivalDate=arrivalDate;
  this.plateNumber=plateNumber;
  this.containerId=containerId;
  this.containerNumber=containerNumber;
  this.sealNumber=sealNumber;
  this.bulletSeal=bulletSeal;
  this.shippingSeal=shippingSeal;
}","public OrderItemsBean(Date modifiedTimestamp,Integer orderItemId,Integer orderId,Integer quantity,String classification,String description,Double declaredValue,Double weight,String remarks,Float rate,Date createdTimestamp,String createdBy,String modifiedBy,String nameSize,String status,String shipmentStatus,Float volume,Integer clientId,String commodity,String comments,String vendorSea,String vendorOrigin,String vendorOriginName,String vendorDestination,String vendorDestinationName,String vesselName,String finalPickupDate,String finalDeliveryDate,String driverOrigin,String driverDestination,String truckOrigin,String truckDestination,String vesselScheduleId,String orderNum,String editItem,String port,String serviceRequirement,String vendorName,String voyageNumber,String departureDate,String arrivalDate,Integer containerId,String containerNumber,String sealNumber,String bulletSeal,String shippingSeal,String plateNumberOri,String plateNumberDes){
  this.modifiedTimestamp=modifiedTimestamp;
  this.orderItemId=orderItemId;
  this.orderId=orderId;
  this.quantity=quantity;
  this.classification=classification;
  this.description=description;
  this.declaredValue=declaredValue;
  this.weight=weight;
  this.remarks=remarks;
  this.rate=rate;
  this.createdTimestamp=createdTimestamp;
  this.createdBy=createdBy;
  this.modifiedTimestamp=modifiedTimestamp;
  this.modifiedBy=modifiedBy;
  this.nameSize=nameSize;
  this.status=status;
  this.shipmentStatus=shipmentStatus;
  this.volume=volume;
  this.clientId=clientId;
  this.commodity=commodity;
  this.comments=comments;
  this.vendorSea=vendorSea;
  this.vendorOrigin=vendorOrigin;
  this.vendorOriginName=vendorOriginName;
  this.vendorDestination=vendorDestination;
  this.vendorDestinationName=vendorDestinationName;
  this.vesselName=vesselName;
  this.finalPickupDate=finalPickupDate;
  this.finalDeliveryDate=finalDeliveryDate;
  this.driverOrigin=driverOrigin;
  this.driverDestination=driverDestination;
  this.truckOrigin=truckOrigin;
  this.truckDestination=truckDestination;
  this.vesselScheduleId=vesselScheduleId;
  this.orderNum=orderNum;
  this.editItem=editItem;
  this.port=port;
  this.serviceRequirement=serviceRequirement;
  this.vendorName=vendorName;
  this.voyageNumber=voyageNumber;
  this.departureDate=departureDate;
  this.arrivalDate=arrivalDate;
  this.plateNumberOri=plateNumberOri;
  this.plateNumberDes=plateNumberDes;
  this.containerId=containerId;
  this.containerNumber=containerNumber;
  this.sealNumber=sealNumber;
  this.bulletSeal=bulletSeal;
  this.shippingSeal=shippingSeal;
}",0.9484454939000394
144401,"public String checkItemStatus(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  System.out.println(""String_Node_Str"" + check);
  System.out.println(""String_Node_Str"" + orderItemIdParam);
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        System.out.println(""String_Node_Str"" + check[i]);
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else     if (planning1.size() > 0) {
      planSize=planning1.size();
      planningList=planning1;
    }
 else {
      planSize=onGoing.size();
      planningList=onGoing;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
    for (    OrderItems orderItemElem : orderItemsListing) {
      orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
    }
    vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
    List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
    for (    VesselSchedules vesselScheduleElem : vesselSchedulesList) {
      vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
    }
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning1.size() > 0) {
      return SUCCESS;
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
      }
      vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
      List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
      for (      VesselSchedules vesselScheduleElem : vesselSchedulesList) {
        vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
      }
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}","public String checkItemStatus(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  System.out.println(""String_Node_Str"" + check);
  System.out.println(""String_Node_Str"" + orderItemIdParam);
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        System.out.println(""String_Node_Str"" + check[i]);
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else     if (planning1.size() > 0) {
      planSize=planning1.size();
      planningList=planning1;
    }
 else {
      planSize=onGoing.size();
      planningList=onGoing;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
    for (    OrderItems orderItemElem : orderItemsListing) {
      orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
    }
    vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
    List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
    for (    VesselSchedules vesselScheduleElem : vesselSchedulesList) {
      vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
    }
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning1.size() > 0) {
      return SUCCESS;
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      for (int x=0; x < check.length; x++) {
        OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(check[x]));
        orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemsListing));
      }
      vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
      List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
      for (      VesselSchedules vesselScheduleElem : vesselSchedulesList) {
        vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
      }
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}",0.9742049952231472
144402,"public OrderItemsBean transformToOrderItemFormBean(OrderItems entity){
  OrderItemsBean formBean=new OrderItemsBean();
  Trucks truckEntityOri=vendorService.findTrucksByTruckCode(entity.getTruckOrigin());
  Trucks truckEntityDes=vendorService.findTrucksByTruckCode(entity.getTruckDestination());
  formBean.setNameSize(entity.getNameSize());
  formBean.setStatus(entity.getStatus());
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setClientId(entity.getClientId());
  formBean.setNameSize(entity.getNameSize());
  formBean.setOrderId(entity.getOrderId());
  formBean.setQuantity(entity.getQuantity());
  formBean.setClassification(entity.getClassification());
  formBean.setDescription(entity.getCommodity());
  formBean.setDeclaredValue(entity.getDeclaredValue());
  formBean.setRemarks(entity.getComments());
  formBean.setRate(entity.getRate());
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setModifiedBy(entity.getModifiedBy());
  formBean.setModifiedTimestamp(entity.getModifiedTimestamp());
  formBean.setStatus(entity.getStatus());
  formBean.setWeight(entity.getWeight());
  if (truckEntityOri == null || truckEntityOri.equals(""String_Node_Str"")) {
    formBean.setPlateNumber(""String_Node_Str"");
  }
 else {
    formBean.setPlateNumber(vendorService.findTrucksByTruckCode(entity.getTruckOrigin()).getPlateNumber());
  }
  if (entity.getVendorSea() == null || ""String_Node_Str"".equals(entity.getVendorSea()) || ""String_Node_Str"".equals(entity.getVendorSea())) {
    formBean.setVendorSea(""String_Node_Str"");
  }
 else {
    formBean.setVendorSea(entity.getVendorSea());
  }
  Orders orderCheck=orderService.findOrdersById(entity.getOrderId());
  if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    if (entity.getVendorDestination() != null) {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
    }
 else {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
    }
    formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() != null) {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
 else {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceType().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() != null) {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
 else {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin()) || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
      formBean.setFinalPickupDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
      formBean.setFinalPickupDate(entity.getFinalPickupDate());
    }
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination()) || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
      formBean.setFinalDeliveryDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
      formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
    }
  }
  if (entity.getVesselScheduleId() == null || ""String_Node_Str"".equals(entity.getVesselScheduleId()) || ""String_Node_Str"".equals(entity.getVesselScheduleId())) {
    formBean.setVesselScheduleId(""String_Node_Str"");
    formBean.setVesselName(""String_Node_Str"");
    formBean.setVendorName(""String_Node_Str"");
    formBean.setDepartureDate(""String_Node_Str"");
    formBean.setArrivalDate(""String_Node_Str"");
  }
 else {
    formBean.setVesselScheduleId(entity.getVesselScheduleId());
    formBean.setVesselName(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getVesselName());
    formBean.setVendorName(vendorService.findVendorByVendorCode(entity.getVendorSea()).getVendorName());
    formBean.setDepartureDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getDepartureDate());
    formBean.setArrivalDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getArrivalDate());
  }
  formBean.setFinalPickupDate(entity.getFinalPickupDate());
  formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  formBean.setDriverOrigin(entity.getDriverOrigin());
  formBean.setDriverDestination(entity.getDriverDestination());
  formBean.setTruckOrigin(entity.getTruckOrigin());
  formBean.setTruckDestination(entity.getTruckDestination());
  formBean.setVolume(entity.getVolume());
  formBean.setContainerId(entity.getContainerId());
  return formBean;
}","public OrderItemsBean transformToOrderItemFormBean(OrderItems entity){
  OrderItemsBean formBean=new OrderItemsBean();
  Trucks truckEntityOri=vendorService.findTrucksByTruckCode(entity.getTruckOrigin());
  Trucks truckEntityDes=vendorService.findTrucksByTruckCode(entity.getTruckDestination());
  formBean.setNameSize(entity.getNameSize());
  formBean.setStatus(entity.getStatus());
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setClientId(entity.getClientId());
  formBean.setNameSize(entity.getNameSize());
  formBean.setOrderId(entity.getOrderId());
  formBean.setQuantity(entity.getQuantity());
  formBean.setClassification(entity.getClassification());
  formBean.setDescription(entity.getCommodity());
  formBean.setDeclaredValue(entity.getDeclaredValue());
  formBean.setRemarks(entity.getComments());
  formBean.setRate(entity.getRate());
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setModifiedBy(entity.getModifiedBy());
  formBean.setModifiedTimestamp(entity.getModifiedTimestamp());
  formBean.setStatus(entity.getStatus());
  formBean.setWeight(entity.getWeight());
  if (truckEntityOri == null || truckEntityOri.equals(""String_Node_Str"")) {
    formBean.setPlateNumber(""String_Node_Str"");
  }
 else {
    formBean.setPlateNumber(vendorService.findTrucksByTruckCode(entity.getTruckOrigin()).getPlateNumber());
  }
  if (entity.getVendorSea() == null || ""String_Node_Str"".equals(entity.getVendorSea()) || ""String_Node_Str"".equals(entity.getVendorSea())) {
    formBean.setVendorSea(""String_Node_Str"");
  }
 else {
    formBean.setVendorSea(entity.getVendorSea());
  }
  Orders orderCheck=orderService.findOrdersById(entity.getOrderId());
  if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
    }
    formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceMode().equals(""String_Node_Str"")) {
    formBean.setVendorOrigin(""String_Node_Str"");
    formBean.setVendorOriginName(""String_Node_Str"");
    formBean.setFinalPickupDate(""String_Node_Str"");
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else   if (orderCheck.getServiceType().equals(""String_Node_Str"")) {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
    }
    formBean.setFinalPickupDate(entity.getFinalPickupDate());
    formBean.setVendorDestination(""String_Node_Str"");
    formBean.setVendorDestinationName(""String_Node_Str"");
    formBean.setFinalDeliveryDate(""String_Node_Str"");
  }
 else {
    if (entity.getVendorOrigin() == null || ""String_Node_Str"".equals(entity.getVendorOrigin()) || ""String_Node_Str"".equals(entity.getVendorOrigin())) {
      formBean.setVendorOrigin(""String_Node_Str"");
      formBean.setVendorOriginName(""String_Node_Str"");
      formBean.setFinalPickupDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorOrigin(entity.getVendorOrigin());
      formBean.setVendorOriginName(vendorService.findVendorByVendorCode(entity.getVendorOrigin()).getVendorName());
      formBean.setFinalPickupDate(entity.getFinalPickupDate());
    }
    if (entity.getVendorDestination() == null || ""String_Node_Str"".equals(entity.getVendorDestination()) || ""String_Node_Str"".equals(entity.getVendorDestination())) {
      formBean.setVendorDestination(""String_Node_Str"");
      formBean.setVendorDestinationName(""String_Node_Str"");
      formBean.setFinalDeliveryDate(""String_Node_Str"");
    }
 else {
      formBean.setVendorDestination(entity.getVendorDestination());
      formBean.setVendorDestinationName(vendorService.findVendorByVendorCode(entity.getVendorDestination()).getVendorName());
      formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
    }
  }
  if (entity.getVesselScheduleId() == null || ""String_Node_Str"".equals(entity.getVesselScheduleId()) || ""String_Node_Str"".equals(entity.getVesselScheduleId())) {
    formBean.setVesselScheduleId(""String_Node_Str"");
    formBean.setVesselName(""String_Node_Str"");
    formBean.setVendorName(""String_Node_Str"");
    formBean.setDepartureDate(""String_Node_Str"");
    formBean.setArrivalDate(""String_Node_Str"");
  }
 else {
    formBean.setVesselScheduleId(entity.getVesselScheduleId());
    formBean.setVesselName(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getVesselName());
    formBean.setVendorName(vendorService.findVendorByVendorCode(entity.getVendorSea()).getVendorName());
    formBean.setDepartureDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getDepartureDate());
    formBean.setArrivalDate(vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(entity.getVesselScheduleId()).getArrivalDate());
  }
  formBean.setFinalPickupDate(entity.getFinalPickupDate());
  formBean.setFinalDeliveryDate(entity.getFinalDeliveryDate());
  formBean.setDriverOrigin(entity.getDriverOrigin());
  formBean.setDriverDestination(entity.getDriverDestination());
  formBean.setTruckOrigin(entity.getTruckOrigin());
  formBean.setTruckDestination(entity.getTruckDestination());
  formBean.setVolume(entity.getVolume());
  formBean.setContainerId(entity.getContainerId());
  return formBean;
}",0.8625848354374954
144403,"public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  List<OrderItems> orderItemsVolume=orderService.findAllItemByOrderId(entity.getOrderId());
  Float orderVolume=0.F;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getVolume() != null) {
      orderVolume=orderVolume + orderItemElem.getVolume();
    }
  }
  formBean.setOrderVolume(orderVolume);
  Double orderWeight=0.0;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getWeight() != null) {
      orderWeight=orderWeight + orderItemElem.getWeight();
    }
  }
  formBean.setOrderWeight(orderWeight);
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setOrderDate(entity.getOrderDate());
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setPickupDate(entity.getPickupDate());
  formBean.setDeliveryDate(entity.getDeliveryDate());
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  formBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    formBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  List<OrderItems> orderItemEntity=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  Integer vendorCtrOri=0;
  Integer vendorCtrDes=0;
  for (  OrderItems orderItemsElem : orderItemEntity) {
    if (orderItemsElem.getVendorOrigin() != null) {
      vendorCtrOri+=1;
    }
    if (orderItemsElem.getVendorDestination() != null) {
      vendorCtrDes+=1;
    }
  }
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  if (orderItemEntity.size() >= 1) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckOrigin() != null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckOrigin())) {
        Trucks truckEntityOri=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckOrigin());
        formBean.setPlateNumberOri(truckEntityOri.getPlateNumber());
      }
 else {
        formBean.setPlateNumberOri(""String_Node_Str"");
      }
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckDestination() != null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckDestination())) {
        Trucks truckEntityDes=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckDestination());
        formBean.setPlateNumberDes(truckEntityDes.getPlateNumber());
      }
 else {
        formBean.setPlateNumberDes(""String_Node_Str"");
      }
    }
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (vendorCtrOri != 0) {
        formBean.setPlateNumberOri(vendorCtrOri + ""String_Node_Str"" + orderItemEntity.size());
      }
 else {
        formBean.setPlateNumberOri(""String_Node_Str"");
      }
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (vendorCtrDes != 0) {
        formBean.setPlateNumberDes(vendorCtrDes + ""String_Node_Str"" + orderItemEntity.size());
      }
 else {
        formBean.setPlateNumberDes(""String_Node_Str"");
      }
    }
  }
  return formBean;
}","public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  List<OrderItems> orderItemsVolume=orderService.findAllItemByOrderId(entity.getOrderId());
  Float orderVolume=0.F;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getVolume() != null) {
      orderVolume=orderVolume + orderItemElem.getVolume();
    }
  }
  formBean.setOrderVolume(orderVolume);
  Double orderWeight=0.0;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getWeight() != null) {
      orderWeight=orderWeight + orderItemElem.getWeight();
    }
  }
  formBean.setOrderWeight(orderWeight);
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setOrderDate(entity.getOrderDate());
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setPickupDate(entity.getPickupDate());
  formBean.setDeliveryDate(entity.getDeliveryDate());
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  formBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    formBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  List<OrderItems> orderItemEntity=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  if (orderItemEntity.size() >= 1) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckOrigin() != null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckOrigin())) {
        Trucks truckEntityOri=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckOrigin());
        formBean.setPlateNumberOri(truckEntityOri.getPlateNumber());
      }
 else {
        formBean.setPlateNumberOri(""String_Node_Str"");
      }
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckDestination() != null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckDestination())) {
        Trucks truckEntityDes=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckDestination());
        formBean.setPlateNumberDes(truckEntityDes.getPlateNumber());
      }
 else {
        formBean.setPlateNumberDes(""String_Node_Str"");
      }
    }
  }
  return formBean;
}",0.7526673132880698
144404,"public OrderStatusLogs(Integer statusId,Integer orderId,Integer orderItemId,String status,String createdBy,Date createdTimestamp,Date actualDate,String containerNumber){
  this.statusId=statusId;
  this.orderId=orderId;
  this.orderItemId=orderItemId;
  this.status=status;
  this.createdBy=createdBy;
  this.createdTimestamp=createdTimestamp;
  this.actualDate=actualDate;
  this.containerNumber=containerNumber;
}","public OrderStatusLogs(Integer statusId,Integer orderId,Integer orderItemId,String status,String createdBy,Date createdTimestamp,Date actualDate){
  this.statusId=statusId;
  this.orderId=orderId;
  this.orderItemId=orderItemId;
  this.status=status;
  this.createdBy=createdBy;
  this.createdTimestamp=createdTimestamp;
  this.actualDate=actualDate;
}",0.9178617992177314
144405,"public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
      orderItems.add(transformToOrderItemFormBean(orderItemEntity));
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
      for (int x=0; x < check.length; x++) {
        OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(check[x]));
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemsListing));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemsListing));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else       if (planning1.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}","public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
      orderItems.add(transformToOrderItemFormBean(orderItemEntity));
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    sessionAttributes.put(""String_Node_Str"",orderItems);
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || onGoing.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
      for (int x=0; x < check.length; x++) {
        OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(check[x]));
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemsListing));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemsListing));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      sessionAttributes.put(""String_Node_Str"",orderItems);
      sessionAttributes.put(""String_Node_Str"",orderIdParam);
      sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else       if (planning1.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}",0.9741403807899972
144406,"public String reloadInlandFreightPlanning(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  if (orderItem.getVesselScheduleId() != null) {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String reloadInlandFreightPlanning(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  if (orderItem.getVesselScheduleId() != null) {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  orderItems=(List)sessionAttributes.get(""String_Node_Str"");
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9495934959349592
144407,"public String reloadInlandFreightPlanningBulk(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  String[] check=(String[])sessionAttributes.get(""String_Node_Str"");
  OrderItems entity=operationsService.findOrderItemById(Integer.parseInt(check[0]));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String reloadInlandFreightPlanningBulk(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  String[] check=(String[])sessionAttributes.get(""String_Node_Str"");
  OrderItems entity=operationsService.findOrderItemById(Integer.parseInt(check[0]));
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  nameSizeList=(List)sessionAttributes.get(""String_Node_Str"");
  orderItems=(List)sessionAttributes.get(""String_Node_Str"");
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(entity.getStatus())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9390363815142576
144408,"public OrderStatusLogs transformToOrderStatusLogsEntity(OrderStatusLogsBean formBean){
  OrderStatusLogs entity=new OrderStatusLogs();
  entity.setOrderItemId(formBean.getOrderItemId());
  entity.setOrderId(operationsService.findOrderItemById(formBean.getOrderItemId()).getOrderId());
  entity.setStatus(formBean.getStatus());
  entity.setCreatedBy(formBean.getCreatedBy());
  entity.setCreatedTimestamp(formBean.getCreatedTimestamp());
  entity.setActualDate(formBean.getActualDate());
  entity.setContainerNumber(formBean.getContainerNumber());
  return entity;
}","public OrderStatusLogs transformToOrderStatusLogsEntity(OrderStatusLogsBean formBean){
  OrderStatusLogs entity=new OrderStatusLogs();
  entity.setOrderItemId(formBean.getOrderItemId());
  entity.setOrderId(operationsService.findOrderItemById(formBean.getOrderItemId()).getOrderId());
  entity.setStatus(formBean.getStatus());
  entity.setCreatedBy(formBean.getCreatedBy());
  entity.setCreatedTimestamp(formBean.getCreatedTimestamp());
  entity.setActualDate(formBean.getActualDate());
  return entity;
}",0.9439252336448598
144409,"public OrderStatusLogsBean transformToOrderStatusLogsFormBean(OrderStatusLogs entity){
  OrderStatusLogsBean formBean=new OrderStatusLogsBean();
  formBean.setStatusId(entity.getStatusId());
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setActualDate(entity.getActualDate());
  formBean.setStatus(entity.getStatus());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setNameSize(orderService.findOrderItemByOrderItemId(entity.getOrderItemId()).getNameSize());
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setOrderId(operationsService.findOrderItemById(entity.getOrderItemId()).getOrderId());
  formBean.setContainerNumber(entity.getContainerNumber());
  return formBean;
}","public OrderStatusLogsBean transformToOrderStatusLogsFormBean(OrderStatusLogs entity){
  OrderStatusLogsBean formBean=new OrderStatusLogsBean();
  formBean.setStatusId(entity.getStatusId());
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setActualDate(entity.getActualDate());
  formBean.setStatus(entity.getStatus());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setNameSize(orderService.findOrderItemByOrderItemId(entity.getOrderItemId()).getNameSize());
  formBean.setOrderItemId(entity.getOrderItemId());
  formBean.setOrderId(operationsService.findOrderItemById(entity.getOrderItemId()).getOrderId());
  return formBean;
}",0.9569583931133429
144410,"public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  List<OrderItems> orderItemsVolume=orderService.findAllItemByOrderId(entity.getOrderId());
  Float orderVolume=0.F;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getVolume() != null) {
      orderVolume=orderVolume + orderItemElem.getVolume();
    }
  }
  formBean.setOrderVolume(orderVolume);
  Double orderWeight=0.0;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getWeight() != null) {
      orderWeight=orderWeight + orderItemElem.getWeight();
    }
  }
  formBean.setOrderWeight(orderWeight);
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setOrderDate(entity.getOrderDate());
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setPickupDate(entity.getPickupDate());
  formBean.setDeliveryDate(entity.getDeliveryDate());
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  formBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    formBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  List<OrderItems> orderItemEntity=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  if (orderItemEntity.size() >= 1) {
    if (orderItemEntity.get(0).getTruckOrigin() != null) {
      Trucks truckEntityOri=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckOrigin());
      formBean.setPlateNumberOri(truckEntityOri.getPlateNumber());
    }
 else {
      formBean.setPlateNumberOri(""String_Node_Str"");
    }
    if (orderItemEntity.get(0).getTruckDestination() != null) {
      Trucks truckEntityDes=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckDestination());
      formBean.setPlateNumberDes(truckEntityDes.getPlateNumber());
    }
 else {
      formBean.setPlateNumberDes(""String_Node_Str"");
    }
  }
  return formBean;
}","public OrderBean transformToOrderFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  formBean.setServiceRequirement(entity.getServiceRequirement());
  formBean.setModeOfService(entity.getServiceMode());
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOrderId(entity.getOrderId());
  List<OrderItems> orderItemsVolume=orderService.findAllItemByOrderId(entity.getOrderId());
  Float orderVolume=0.F;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getVolume() != null) {
      orderVolume=orderVolume + orderItemElem.getVolume();
    }
  }
  formBean.setOrderVolume(orderVolume);
  Double orderWeight=0.0;
  for (  OrderItems orderItemElem : orderItemsVolume) {
    if (orderItemElem.getWeight() != null) {
      orderWeight=orderWeight + orderItemElem.getWeight();
    }
  }
  formBean.setOrderWeight(orderWeight);
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  if (entity.getOriginationPort() != null) {
    formBean.setOriginationPort(entity.getOriginationPort());
  }
 else {
    formBean.setOriginationPort(""String_Node_Str"");
  }
  formBean.setModeOfPayment(entity.getPaymentMode());
  formBean.setNotifyBy(entity.getNotificationType());
  formBean.setOrderDate(entity.getOrderDate());
  if (entity.getDestinationPort() != null) {
    formBean.setDestinationPort(entity.getDestinationPort());
  }
 else {
    formBean.setDestinationPort(""String_Node_Str"");
  }
  formBean.setRates(entity.getRates());
  formBean.setComments(entity.getComments());
  formBean.setPickupDate(entity.getPickupDate());
  formBean.setDeliveryDate(entity.getDeliveryDate());
  Contacts contactShipperName=customerService.findContactById(entity.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    formBean.setCustomerId(shipperName.getCustomerId());
    formBean.setCustomerName(shipperName.getCustomerName());
  }
  Contacts contacts=customerService.findContactById(entity.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  formBean.setShipperInfoContact(contact);
  if (entity.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(entity.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    formBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(entity.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  formBean.setConsigneeInfoContact(contact);
  if (entity.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(entity.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    formBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    formBean.setConsigneeInfoAddress(address);
  }
  formBean.setConsigneeContactPersonId(order.getConsigneeContactPersonId());
  if (order.getConsigneeContactPersonId() != null) {
    Contacts contactElem=customerService.findContactById(order.getConsigneeContactPersonId());
    formBean.setConsigneeContactName(contactElem.getFirstName() + ""String_Node_Str"" + contactElem.getMiddleName()+ ""String_Node_Str""+ contactElem.getLastName());
  }
  List<OrderItems> orderItemEntity=operationsService.findAllOrderItemsByOrderId(entity.getOrderId());
  Integer vendorCtrOri=0;
  Integer vendorCtrDes=0;
  for (  OrderItems orderItemsElem : orderItemEntity) {
    if (orderItemsElem.getVendorOrigin() != null) {
      vendorCtrOri+=1;
    }
    if (orderItemsElem.getVendorDestination() != null) {
      vendorCtrDes+=1;
    }
  }
  Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  if (orderItemEntity.size() >= 1) {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckOrigin() != null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckOrigin())) {
        Trucks truckEntityOri=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckOrigin());
        formBean.setPlateNumberOri(truckEntityOri.getPlateNumber());
      }
 else {
        formBean.setPlateNumberOri(""String_Node_Str"");
      }
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (orderItemEntity.get(0).getTruckDestination() != null || ""String_Node_Str"".equals(orderItemEntity.get(0).getTruckDestination())) {
        Trucks truckEntityDes=vendorService.findTrucksByTruckCode(orderItemEntity.get(0).getTruckDestination());
        formBean.setPlateNumberDes(truckEntityDes.getPlateNumber());
      }
 else {
        formBean.setPlateNumberDes(""String_Node_Str"");
      }
    }
  }
 else {
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (vendorCtrOri != 0) {
        formBean.setPlateNumberOri(vendorCtrOri + ""String_Node_Str"" + orderItemEntity.size());
      }
 else {
        formBean.setPlateNumberOri(""String_Node_Str"");
      }
    }
 else     if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")|| orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      if (vendorCtrDes != 0) {
        formBean.setPlateNumberDes(vendorCtrDes + ""String_Node_Str"" + orderItemEntity.size());
      }
 else {
        formBean.setPlateNumberDes(""String_Node_Str"");
      }
    }
  }
  return formBean;
}",0.8463177835661851
144411,"public String editItemListing(){
  OrderItems orderItemEntity=transformToOrderItemsEntityBean(orderItem);
  orderService.updateItemListing(orderItemEntity);
  return SUCCESS;
}","public String editItemListing(){
  OrderItems orderItemEntity=transformToOrderItemsEntityBean(orderItem);
  orderItemEntity.setQuantity(orderItem.getQuantity());
  orderService.updateItemListing(orderItemEntity);
  return SUCCESS;
}",0.8627450980392157
144412,public void addVesselSchedule(VesselSchedules vesselSchedules);,public Integer addVesselSchedule(VesselSchedules vesselSchedules);,0.9147286821705426
144413,"@Override public List<VesselSchedules> findVesselScheduleByVoyageNumber(String voyageNumber){
  log.debug(""String_Node_Str"");
  try {
    Query query=getSessionFactory().getCurrentSession().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",voyageNumber);
    List<VesselSchedules> results=(List<VesselSchedules>)query.list();
    log.debug(""String_Node_Str"" + results.size());
    return results;
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
    throw e;
  }
}","@Override public List<VesselSchedules> findVesselScheduleByVoyageNumber(String voyageNumber){
  log.debug(""String_Node_Str"");
  try {
    Query query=getSessionFactory().getCurrentSession().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",voyageNumber);
    List<VesselSchedules> results=(List<VesselSchedules>)query.list();
    log.debug(""String_Node_Str"" + results.size());
    return results;
  }
 catch (  RuntimeException e) {
    log.error(""String_Node_Str"");
    throw e;
  }
}",0.9930624380574826
144414,"@Override public void addVesselSchedule(VesselSchedules vesselSchedules){
  log.debug(""String_Node_Str"");
  try {
    Session session=getSessionFactory().getCurrentSession();
    session.save(vesselSchedules);
    log.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
}","@Override public Integer addVesselSchedule(VesselSchedules vesselSchedules){
  log.debug(""String_Node_Str"");
  try {
    Session session=getSessionFactory().getCurrentSession();
    Integer vesselScheduleId=(Integer)session.save(vesselSchedules);
    log.debug(""String_Node_Str"");
    return vesselScheduleId;
  }
 catch (  RuntimeException e) {
    log.error(""String_Node_Str"",e);
    throw e;
  }
}",0.8885832187070152
144415,"public String checkItemStatus(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  System.out.println(""String_Node_Str"" + check);
  System.out.println(""String_Node_Str"" + orderItemIdParam);
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        System.out.println(""String_Node_Str"" + check[i]);
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else     if (planning1.size() > 0) {
      planSize=planning1.size();
      planningList=planning1;
    }
 else {
      planSize=onGoing.size();
      planningList=onGoing;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
    for (    OrderItems orderItemElem : orderItemsListing) {
      orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
    }
    vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
    List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
    for (    VesselSchedules vesselScheduleElem : vesselSchedulesList) {
      vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
    }
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning1.size() > 0) {
      return SUCCESS;
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
      }
      List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
      for (      VesselSchedules vesselScheduleElem : vesselSchedulesList) {
        vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
      }
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}","public String checkItemStatus(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  System.out.println(""String_Node_Str"" + check);
  System.out.println(""String_Node_Str"" + orderItemIdParam);
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        System.out.println(""String_Node_Str"" + check[i]);
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else     if (planning1.size() > 0) {
      planSize=planning1.size();
      planningList=planning1;
    }
 else {
      planSize=onGoing.size();
      planningList=onGoing;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
    for (    OrderItems orderItemElem : orderItemsListing) {
      orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
    }
    vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
    List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
    for (    VesselSchedules vesselScheduleElem : vesselSchedulesList) {
      vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
    }
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning1.size() > 0) {
      return SUCCESS;
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
      }
      vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
      List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
      for (      VesselSchedules vesselScheduleElem : vesselSchedulesList) {
        vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
      }
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}",0.990084010466878
144416,"public String addVesselSchedule(){
  System.out.println(""String_Node_Str"");
  try {
    VesselSchedules entity=transformToVesselScheduleEntityBean(vesselSchedule);
    entity.setCreatedBy(commonUtils.getUserNameFromSession());
    entity.setCreatedTimestamp(new Date());
    entity.setModifiedBy(commonUtils.getUserNameFromSession());
    entity.setModifiedTimestamp(new Date());
    vesselSchedulesService.addVesselSchedule(entity);
  }
 catch (  Exception e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return INPUT;
  }
  Integer vendorIdPass=(transformToVesselScheduleEntityBean(vesselSchedule).getVendorId());
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdPass);
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}","public String addVesselSchedule(){
  try {
    VesselSchedules entity=transformToVesselScheduleEntityBean(vesselSchedule);
    entity.setCreatedBy(commonUtils.getUserNameFromSession());
    entity.setCreatedTimestamp(new Date());
    entity.setModifiedBy(commonUtils.getUserNameFromSession());
    entity.setModifiedTimestamp(new Date());
    vesselSchedulesService.addVesselSchedule(entity);
  }
 catch (  VesselSchedulesAlreadyExistsException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return INPUT;
  }
  Integer vendorIdPass=(transformToVesselScheduleEntityBean(vesselSchedule).getVendorId());
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdPass);
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}",0.5951219512195122
144417,"public String addVesselSchedule(){
  System.out.println(""String_Node_Str"");
  try {
    VesselSchedules entity=transformToVesselScheduleEntityBean(vesselSchedule);
    entity.setCreatedBy(commonUtils.getUserNameFromSession());
    entity.setCreatedTimestamp(new Date());
    entity.setModifiedBy(commonUtils.getUserNameFromSession());
    entity.setModifiedTimestamp(new Date());
    vesselSchedulesService.addVesselSchedule(entity);
  }
 catch (  Exception e) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
    return INPUT;
  }
  Integer vendorIdPass=(transformToVesselScheduleEntityBean(vesselSchedule).getVendorId());
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdPass);
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}","public String addVesselSchedule(){
  System.out.println(""String_Node_Str"");
  try {
    VesselSchedules entity=transformToVesselScheduleEntityBean(vesselSchedule);
    entity.setCreatedBy(commonUtils.getUserNameFromSession());
    entity.setCreatedTimestamp(new Date());
    entity.setModifiedBy(commonUtils.getUserNameFromSession());
    entity.setModifiedTimestamp(new Date());
    vesselSchedulesService.addVesselSchedule(entity);
  }
 catch (  Exception e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return INPUT;
  }
  Integer vendorIdPass=(transformToVesselScheduleEntityBean(vesselSchedule).getVendorId());
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdPass);
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}",0.9951325040562466
144418,"public void validateOnSubmitItem(ItemBean itemBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  String PATTERN2=""String_Node_Str"";
  String PATTERN3=""String_Node_Str"";
  String PATTERN4=""String_Node_Str"";
  Pattern pattern1=Pattern.compile(PATTERN);
  Pattern pattern2=Pattern.compile(PATTERN2);
  Pattern pattern3=Pattern.compile(PATTERN3);
  Pattern pattern4=Pattern.compile(PATTERN4);
  Matcher matcher=pattern3.matcher(itemBean.getItemCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher1=pattern4.matcher(itemBean.getItemName());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher2=pattern2.matcher(itemBean.getWeight().toString());
  if (!matcher2.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher4=pattern2.matcher(itemBean.getWidth().toString());
  if (!matcher4.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher5=pattern2.matcher(itemBean.getSrp().toString());
  if (!matcher5.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher6=pattern2.matcher(itemBean.getLength().toString());
  if (!matcher6.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher7=pattern2.matcher(itemBean.getHeight().toString());
  if (!matcher7.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getSrp() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getLength() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWidth() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWeight() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitItem(ItemBean itemBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  String PATTERN2=""String_Node_Str"";
  String PATTERN3=""String_Node_Str"";
  String PATTERN4=""String_Node_Str"";
  Pattern pattern1=Pattern.compile(PATTERN);
  Pattern pattern2=Pattern.compile(PATTERN2);
  Pattern pattern3=Pattern.compile(PATTERN3);
  Pattern pattern4=Pattern.compile(PATTERN4);
  Matcher matcher=pattern3.matcher(itemBean.getItemCode());
  Matcher matcher1=pattern4.matcher(itemBean.getItemName());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher2=pattern2.matcher(itemBean.getWeight().toString());
  if (!matcher2.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher4=pattern2.matcher(itemBean.getWidth().toString());
  if (!matcher4.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher5=pattern2.matcher(itemBean.getSrp().toString());
  if (!matcher5.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher6=pattern2.matcher(itemBean.getLength().toString());
  if (!matcher6.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher7=pattern2.matcher(itemBean.getHeight().toString());
  if (!matcher7.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getSrp() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getLength() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWidth() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWeight() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.97778795511793
144419,"public String deleteConsigneeContact(){
  Contacts contactEntity=customerService.findContactById(consigneeContactCodeParam);
  customerService.deleteContact(contactEntity);
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",contactCodeParam);
  sessionAttributes.put(""String_Node_Str"",addressIdParam);
  return SUCCESS;
}","public String deleteConsigneeContact(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Contacts consigneeContactEntity=customerService.findContactById(consigneeContactCodeParam);
  List<Orders> consigneeContactInBookingList=orderService.findConsigneeContactInBooking(consigneeContactCodeParam);
  if (consigneeContactInBookingList.size() > 0) {
    Contacts contactEntity=customerService.findContactById(contactCodeParam);
    Address addressEntity=customerService.findAddressById(addressIdParam);
    consignee=transformToFormBeanConsignee(addressEntity,contactEntity);
    List<Contacts> contactEntityList=customerService.findContactByConsignee(contactEntity.getContactId(),""String_Node_Str"",getClientId());
    for (    Contacts contactElem : contactEntityList) {
      contacts.add(transformToFormBeanContacts(contactElem));
    }
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  customerService.deleteContact(consigneeContactEntity);
  sessionAttributes.put(""String_Node_Str"",contactCodeParam);
  sessionAttributes.put(""String_Node_Str"",addressIdParam);
  return SUCCESS;
}",0.2396313364055299
144420,"public String deleteItem(){
  Items itemEntity=customerService.findItemByCustomerItemsId(customersItemIdParam);
  customerService.deleteItem(itemEntity);
  return SUCCESS;
}","public String deleteItem(){
  Items itemEntity=customerService.findItemByCustomerItemsId(customersItemIdParam);
  List<OrderItems> orderItemsInBooking=orderService.findOrderItemByName(itemEntity.getItemName());
  for (  OrderItems orderItemElem : orderItemsInBooking) {
    Orders orderEntity=orderService.findOrdersById(orderItemElem.getOrderId());
    if (orderEntity.getCustomerId() == itemEntity.getCustomerId()) {
      Integer customerId=getCustomerSessionId();
      List<Items> itemEntityList=customerService.findItemByCustomerId(customerId);
      for (      Items itemsElem : itemEntityList) {
        items.add(transformToFormBeanItem(itemsElem));
      }
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      return INPUT;
    }
  }
  customerService.deleteItem(itemEntity);
  return SUCCESS;
}",0.3446215139442231
144421,"public String deleteContact(){
  Contacts contactEntity=customerService.findContactById(contactCodeParam);
  customerService.deleteContact(contactEntity);
  return SUCCESS;
}","public String deleteContact(){
  Contacts contactEntity=customerService.findContactById(contactCodeParam);
  List<Orders> contactInBookingList=orderService.findContactInBooking(contactCodeParam);
  if (contactInBookingList.size() > 0) {
    Integer customerId=getCustomerSessionId();
    List<Contacts> contactEntityList=customerService.findContactByReferenceId(customerId);
    for (    Contacts contactElem : contactEntityList) {
      contacts.add(transformToFormBeanContacts(contactElem));
    }
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  customerService.deleteContact(contactEntity);
  return SUCCESS;
}",0.3269230769230769
144422,"public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
      orderItems.add(transformToOrderItemFormBean(orderItemEntity));
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemElem));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemElem));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else       if (planning1.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}","public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
      orderItems.add(transformToOrderItemFormBean(orderItemEntity));
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
          orderItems.add(transformToOrderItemFormBean(orderItemEntity));
        }
      }
      for (int x=0; x < check.length; x++) {
        OrderItems orderItemsListing=orderService.findOrderItemByOrderItemId(Integer.parseInt(check[x]));
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemsListing));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemsListing));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else       if (planning1.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}",0.9647407407407408
144423,"public String addVesselSchedule(){
  try {
    VesselSchedules entity=transformToVesselScheduleEntityBean(vesselSchedule);
    entity.setCreatedBy(commonUtils.getUserNameFromSession());
    entity.setCreatedTimestamp(new Date());
    entity.setModifiedBy(commonUtils.getUserNameFromSession());
    entity.setModifiedTimestamp(new Date());
    vesselSchedulesService.addVesselSchedule(entity);
  }
 catch (  VesselSchedulesAlreadyExistsException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return INPUT;
  }
  Integer vendorIdPass=(transformToVesselScheduleEntityBean(vesselSchedule).getVendorId());
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdPass);
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}","public String addVesselSchedule() throws Exception {
  validateOnSubmit(vesselSchedule);
  if (hasFieldErrors()) {
    return INPUT;
  }
  try {
    VesselSchedules entity=transformToVesselScheduleEntityBean(vesselSchedule);
    entity.setCreatedBy(commonUtils.getUserNameFromSession());
    entity.setCreatedTimestamp(new Date());
    entity.setModifiedBy(commonUtils.getUserNameFromSession());
    entity.setModifiedTimestamp(new Date());
    vesselSchedulesService.addVesselSchedule(entity);
  }
 catch (  VesselSchedulesAlreadyExistsException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return INPUT;
  }
  Integer vendorIdPass=(transformToVesselScheduleEntityBean(vesselSchedule).getVendorId());
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdPass);
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}",0.4570837642192347
144424,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addVessel(Vessel vessel) throws VesselAlreadyExistsException {
  if (vesselDao.findDuplicateByVesselNumber(vessel.getVesselNumber()).size() > 0)   throw new VesselAlreadyExistsException(vessel.getVesselNumber());
 else   vesselDao.addVessel(vessel);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addVessel(Vessel vessel) throws VesselAlreadyExistsException {
  if (vesselDao.findVesselByName(vessel.getVesselName()).size() > 0)   throw new VesselAlreadyExistsException(vessel.getVesselName());
 else   vesselDao.addVessel(vessel);
}",0.9408194233687404
144425,"public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemElem));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemElem));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else       if (planning1.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}","public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemElem));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemElem));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else       if (planning1.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}",0.9995305164319248
144426,"@Column(name=""String_Node_Str"",nullable=false) public String getComments(){
  return this.comments;
}","@Column(name=""String_Node_Str"") public String getComments(){
  return this.comments;
}",0.9197860962566844
144427,"public String deleteConsignee(){
  Contacts contactEntity=customerService.findContactById(contactCodeParam);
  Address addressEntity=customerService.findAddressById(addressIdParam);
  customerService.deleteConsignee(contactEntity,addressEntity);
  return SUCCESS;
}","public String deleteConsignee(){
  Contacts contactEntity=customerService.findContactById(contactCodeParam);
  Address addressEntity=customerService.findAddressById(addressIdParam);
  List<Orders> orderEntityList=orderService.findConsigneeInBooking(contactEntity.getContactId());
  if (orderEntityList.size() > 0) {
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    return INPUT;
  }
  customerService.deleteConsignee(contactEntity,addressEntity);
  return SUCCESS;
}",0.7019867549668874
144428,"public String serviceAccomplishedStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  List<OrderItems> orderItemEntityList=new ArrayList<OrderItems>();
  orderItemEntityList=orderStatusLogsService.findAllItemsByOrderId(orderIdParam);
  Integer checkAllStatus=0;
  for (  OrderItems orderItemsElem : orderItemEntityList) {
    if (orderItemsElem.getStatus().equals(""String_Node_Str"") || orderItemsElem.getStatus().equals(""String_Node_Str"")) {
      checkAllStatus=checkAllStatus + 1;
    }
  }
  if (orderItemEntityList.size() == checkAllStatus && orderItemEntityList.size() > 1) {
    orderEntity.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntity);
    return SUCCESS;
  }
 else {
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    return ""String_Node_Str"";
  }
}","public String serviceAccomplishedStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  List<OrderItems> orderItemEntityList=new ArrayList<OrderItems>();
  orderItemEntityList=orderStatusLogsService.findAllItemsByOrderId(orderIdParam);
  Integer checkAllStatus=0;
  for (  OrderItems orderItemsElem : orderItemEntityList) {
    if (orderItemsElem.getStatus().equals(""String_Node_Str"") || orderItemsElem.getStatus().equals(""String_Node_Str"")) {
      checkAllStatus=checkAllStatus + 1;
    }
 else     if (orderItemsElem.getStatus().equals(""String_Node_Str"")) {
      orderEntity.setOrderStatus(""String_Node_Str"");
      orderService.updateOrder(orderEntity);
      return SUCCESS;
    }
  }
  if (orderItemEntityList.size() == checkAllStatus && orderItemEntityList.size() > 1) {
    orderEntity.setOrderStatus(""String_Node_Str"");
    orderService.updateOrder(orderEntity);
    return SUCCESS;
  }
 else {
    sessionAttributes.put(""String_Node_Str"",orderIdParam);
    return ""String_Node_Str"";
  }
}",0.8237082066869301
144429,"public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemElem));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemElem));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}","public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemElem));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemElem));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else       if (planning1.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}",0.993539237314844
144430,"public String checkItemStatus(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  System.out.println(""String_Node_Str"" + check);
  System.out.println(""String_Node_Str"" + orderItemIdParam);
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        System.out.println(""String_Node_Str"" + check[i]);
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else     if (planning1.size() > 0) {
      planSize=planning1.size();
      planningList=planning1;
    }
 else {
      planSize=onGoing.size();
      planningList=onGoing;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
    for (    OrderItems orderItemElem : orderItemsListing) {
      orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
    }
    vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
    List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
    for (    VesselSchedules vesselScheduleElem : vesselSchedulesList) {
      vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
    }
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning1.size() > 0) {
      return SUCCESS;
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
      }
      List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
      for (      VesselSchedules vesselScheduleElem : vesselSchedulesList) {
        vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
      }
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning1.size() > 0 || planning2.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}","public String checkItemStatus(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  System.out.println(""String_Node_Str"" + check);
  System.out.println(""String_Node_Str"" + orderItemIdParam);
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        System.out.println(""String_Node_Str"" + check[i]);
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else     if (planning1.size() > 0) {
      planSize=planning1.size();
      planningList=planning1;
    }
 else {
      planSize=onGoing.size();
      planningList=onGoing;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
    for (    OrderItems orderItemElem : orderItemsListing) {
      orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
    }
    vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
    List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
    for (    VesselSchedules vesselScheduleElem : vesselSchedulesList) {
      vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
    }
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning1.size() > 0) {
      return SUCCESS;
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
      }
      List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
      for (      VesselSchedules vesselScheduleElem : vesselSchedulesList) {
        vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
      }
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}",0.998327992197297
144431,"public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}","public String checkItemStatusInland(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> onGoing=new ArrayList();
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
    vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    if (planning2.size() > 0) {
      return ""String_Node_Str"";
    }
 else     if (planning3.size() > 0) {
      if (onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
 else {
      return ""String_Node_Str"";
    }
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          onGoing.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (onGoing.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < onGoing.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(onGoing.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemOriginVendor.add(transformToOrderItemFormBean(orderItemElem));
        orderItemDestinationVendor.add(transformToOrderItemFormBean(orderItemElem));
      }
      vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
      vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      if (planning2.size() > 0 || planning3.size() > 0 || onGoing.size() > 0) {
        return ""String_Node_Str"";
      }
 else {
        return ""String_Node_Str"";
      }
    }
  }
}",0.9722901385493072
144432,"/** 
 * Returns the report definition which will be used to generate the report. In this case, the report will be loaded and parsed from a file contained in this package.
 * @return the loaded and parsed report definition to be used in report generation.
 */
public MasterReport getReportDefinition(){
  try {
    final Class classVar=this.getClass();
    final URL reportDefinitionURL=classVar.getResource(""String_Node_Str"");
    final ResourceManager resourceManager=new ResourceManager();
    final Resource directly=resourceManager.createDirectly(reportDefinitionURL,MasterReport.class);
    final MasterReport report=(MasterReport)directly.getResource();
    report.setQuery(RELEASE_ORDER);
    return report;
  }
 catch (  ResourceException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * Returns the report definition which will be used to generate the report. In this case, the report will be loaded and parsed from a file contained in this package.
 * @return the loaded and parsed report definition to be used in report generation.
 */
public MasterReport getReportDefinition(){
  try {
    final Class classVar=this.getClass();
    final URL reportDefinitionURL=classVar.getResource(""String_Node_Str"");
    final ResourceManager resourceManager=new ResourceManager();
    final Resource directly=resourceManager.createDirectly(reportDefinitionURL,MasterReport.class);
    return (MasterReport)directly.getResource();
  }
 catch (  ResourceException e) {
    e.printStackTrace();
  }
  return null;
}",0.9407894736842104
144433,"/** 
 * Returns the data factory which will be used to generate the data used during report generation.
 * @return the data factory used with the report generator
 */
public DataFactory getDataFactory(Map<String,String> params){
  Properties prop=new Properties();
  String propFileName=""String_Node_Str"";
  InputStream inputStream=getClass().getClassLoader().getResourceAsStream(propFileName);
  try {
    prop.load(inputStream);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  final DriverConnectionProvider sampleDriverConnectionProvider=new DriverConnectionProvider();
  sampleDriverConnectionProvider.setDriver(prop.getProperty(""String_Node_Str""));
  sampleDriverConnectionProvider.setUrl(prop.getProperty(""String_Node_Str""));
  sampleDriverConnectionProvider.setProperty(""String_Node_Str"",prop.getProperty(""String_Node_Str""));
  sampleDriverConnectionProvider.setProperty(""String_Node_Str"",prop.getProperty(""String_Node_Str""));
  String orderId=params.get(""String_Node_Str"");
  String orderItemId=params.get(""String_Node_Str"");
  String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + orderId + ""String_Node_Str""+ ""String_Node_Str""+ orderItemId+ ""String_Node_Str"";
  final SQLReportDataFactory dataFactory=new SQLReportDataFactory(sampleDriverConnectionProvider);
  dataFactory.setQuery(RELEASE_ORDER,query);
  return dataFactory;
}","/** 
 * Returns the data factory which will be used to generate the data used during report generation.
 * @return the data factory used with the report generator
 */
public DataFactory getDataFactory(Map<String,String> whereClauseParameters){
  return null;
}",0.2409513960703205
144434,"/** 
 * Returns the set of runtime report parameters. 
 * @return <code>null</code> indicating the report generator does not use any report parameters
 */
public Map<String,Object> getReportParameters(Map<String,String> params){
  return null;
}","/** 
 * Returns the set of runtime report parameters.
 * @return <code>null</code> indicating the report generator does not use any report parameters
 */
public Map<String,Object> getReportParameters(Map<String,String> params){
  final Map parameters=new HashMap<String,Object>();
  parameters.put(""String_Node_Str"",params.get(""String_Node_Str""));
  parameters.put(""String_Node_Str"",params.get(""String_Node_Str""));
  return parameters;
}",0.6862170087976539
144435,"public String checkItemStatus(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> planning4=new ArrayList();
  System.out.println(""String_Node_Str"" + check);
  System.out.println(""String_Node_Str"" + orderItemIdParam);
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        System.out.println(""String_Node_Str"" + check[i]);
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else {
      planSize=planning1.size();
      planningList=planning1;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
    for (    OrderItems orderItemElem : orderItemsListing) {
      orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
    }
    vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
    List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
    for (    VesselSchedules vesselScheduleElem : vesselSchedulesList) {
      vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
    }
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    return SUCCESS;
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning4.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
      }
      List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
      for (      VesselSchedules vesselScheduleElem : vesselSchedulesList) {
        vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
      }
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      return ""String_Node_Str"";
    }
  }
}","public String checkItemStatus(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  List<Integer> planning4=new ArrayList();
  System.out.println(""String_Node_Str"" + check);
  System.out.println(""String_Node_Str"" + orderItemIdParam);
  if (""String_Node_Str"".equals(orderItem.getEditItem())) {
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        System.out.println(""String_Node_Str"" + check[i]);
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else {
          planning4.add(orderItemId);
          return ""String_Node_Str"";
        }
      }
    }
    Map sessionAttributes=ActionContext.getContext().getSession();
    Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
    sessionAttributes.put(""String_Node_Str"",check);
    order=transformToOrderFormBean(orderEntity);
    nameSizeList=new ArrayList<String>();
    Integer planSize;
    List<Integer> planningList=new ArrayList();
    if (planning1.size() == 0) {
      if (planning2.size() == 0) {
        planSize=planning3.size();
        planningList=planning3;
      }
 else {
        planSize=planning2.size();
        planningList=planning2;
      }
    }
 else     if (planning1.size() > 0) {
      planSize=planning1.size();
      planningList=planning1;
    }
 else {
      planSize=planning4.size();
      planningList=planning4;
    }
    for (int i=0; i < planSize; i++) {
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planningList.get(i));
      nameSizeList.add(orderItemEntity.getNameSize());
    }
    List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
    for (    OrderItems orderItemElem : orderItemsListing) {
      orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
    }
    vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
    List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
    for (    VesselSchedules vesselScheduleElem : vesselSchedulesList) {
      vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
    }
    sessionAttributes.put(""String_Node_Str"",nameSizeList);
    return SUCCESS;
  }
 else {
    orderItem.setEditItem(""String_Node_Str"");
    if (check == null) {
      return ""String_Node_Str"";
    }
 else {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(""String_Node_Str"") || ""String_Node_Str"".equals(check[i])) {
          return ""String_Node_Str"";
        }
        Integer orderItemId=Integer.parseInt(check[i]);
        OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
        if (""String_Node_Str"".equals(entity.getStatus())) {
          planning1.add(orderItemId);
          if (planning2.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning2.add(orderItemId);
          if (planning1.size() > 0 || planning3.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning3.add(orderItemId);
          if (planning1.size() > 0 || planning2.size() > 0) {
            return INPUT;
          }
        }
 else         if (""String_Node_Str"".equals(entity.getStatus())) {
          planning4.add(orderItemId);
        }
      }
      Map sessionAttributes=ActionContext.getContext().getSession();
      Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
      sessionAttributes.put(""String_Node_Str"",check);
      order=transformToOrderFormBean(orderEntity);
      if (planning1.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning1.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning1.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning2.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning2.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning2.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
 else       if (planning3.size() > 0) {
        nameSizeList=new ArrayList<String>();
        for (int i=0; i < planning3.size(); i++) {
          OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(planning3.get(i));
          nameSizeList.add(orderItemEntity.getNameSize());
        }
      }
      List<OrderItems> orderItemsListing=orderService.findAllItemByOrderId(orderEntity.getOrderId());
      for (      OrderItems orderItemElem : orderItemsListing) {
        orderItemVesselSchedule.add(transformToOrderItemFormBean(orderItemElem));
      }
      List<VesselSchedules> vesselSchedulesList=operationsService.findVesselScheduleByOriDesClass(order.getOriginationPort(),order.getDestinationPort());
      for (      VesselSchedules vesselScheduleElem : vesselSchedulesList) {
        vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
      }
      sessionAttributes.put(""String_Node_Str"",nameSizeList);
      return ""String_Node_Str"";
    }
  }
}",0.9844519103054926
144436,"public String addVesselSchedule(){
  try {
    VesselSchedules entity=transformToVesselScheduleEntityBean(vesselSchedule);
    entity.setCreatedBy(commonUtils.getUserNameFromSession());
    entity.setCreatedTimestamp(new Date());
    entity.setModifiedBy(commonUtils.getUserNameFromSession());
    entity.setModifiedTimestamp(new Date());
    vesselSchedulesService.addVesselSchedule(entity);
  }
 catch (  Exception e) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
    return INPUT;
  }
  Integer vendorIdPass=(transformToVesselScheduleEntityBean(vesselSchedule).getVendorId());
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdPass);
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  return SUCCESS;
}","public String addVesselSchedule(){
  try {
    VesselSchedules entity=transformToVesselScheduleEntityBean(vesselSchedule);
    entity.setCreatedBy(commonUtils.getUserNameFromSession());
    entity.setCreatedTimestamp(new Date());
    entity.setModifiedBy(commonUtils.getUserNameFromSession());
    entity.setModifiedTimestamp(new Date());
    vesselSchedulesService.addVesselSchedule(entity);
  }
 catch (  Exception e) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
    return INPUT;
  }
  Integer vendorIdPass=(transformToVesselScheduleEntityBean(vesselSchedule).getVendorId());
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdPass);
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}",0.9640542133176192
144437,"public String editBulkItemsInlandDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorDestination(vendorService.findVendorById(operationsBean.getVendorListDestination()).getVendorName());
      orderItemEntity.setDriverDestination(operationsBean.getDriverDestination());
      orderItemEntity.setTruckDestination(operationsBean.getTruckDestination());
      orderItemEntity.setFinalDeliveryDate(operationsBean.getDeliveryDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  return SUCCESS;
}","public String editBulkItemsInlandDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorDestination(vendorService.findVendorById(operationsBean.getVendorListDestination()).getVendorCode());
      orderItemEntity.setDriverDestination(operationsBean.getDriverDestination());
      orderItemEntity.setTruckDestination(operationsBean.getTruckDestination());
      orderItemEntity.setFinalDeliveryDate(operationsBean.getDeliveryDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  vendorTruckingOriginList=vendorService.findVendorTruckByLocation(order.getOriginationPort());
  vendorTruckingDestinationList=vendorService.findVendorTruckByLocation(order.getDestinationPort());
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  return SUCCESS;
}",0.9983452840595698
144438,"public String addGroup(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  this.groupMembers=(List<User>)sessionAttributes.get(""String_Node_Str"");
  groupService.addGroup(transformToGroupEntityBean(groupBean),groupMembers);
  Integer clientId=(Integer)sessionAttributes.get(""String_Node_Str"");
  users=userService.findAllUsers(clientId);
  removeMembersFromAllUsersList(groupMembers);
  return SUCCESS;
}","public String addGroup(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  this.groupMembers=(List<User>)sessionAttributes.get(""String_Node_Str"");
  groupService.addGroup(transformToGroupEntityBean(groupBean),groupMembers);
  Integer clientId=(Integer)sessionAttributes.get(""String_Node_Str"");
  users=userService.findAllUsers(clientId);
  removeMembersFromAllUsersList(groupMembers);
  viewGroups();
  return SUCCESS;
}",0.9813953488372092
144439,"private Contacts transformToEntityBeanContacts(ContactBean contactBean){
  Contacts entity=new Contacts();
  if (contactBean.getContactId() != null) {
    entity.setContactId(contactBean.getContactId());
  }
  entity.setReferenceId(contactBean.getReferenceId());
  entity.setReferenceTable(""String_Node_Str"");
  entity.setContactType(""String_Node_Str"");
  entity.setFirstName(contactBean.getFirstName());
  entity.setMiddleName(contactBean.getMiddleName());
  entity.setLastName(contactBean.getLastName());
  entity.setPhone(contactBean.getPhone());
  entity.setMobile(contactBean.getMobile());
  entity.setFax(contactBean.getFax());
  entity.setEmail(contactBean.getEmail());
  entity.setCreatedBy(contactBean.getCreatedBy());
  entity.setCreatedTimestamp(contactBean.getCreatedTimestamp());
  entity.setPosition(contactBean.getPosition());
  return entity;
}","private Contacts transformToEntityBeanContacts(ContactBean contactBean){
  Contacts entity=new Contacts();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  if (contactBean.getContactId() != null) {
    entity.setContactId(contactBean.getContactId());
  }
  entity.setReferenceId(contactBean.getReferenceId());
  entity.setReferenceTable(""String_Node_Str"");
  entity.setContactType(""String_Node_Str"");
  entity.setFirstName(contactBean.getFirstName());
  entity.setMiddleName(contactBean.getMiddleName());
  entity.setLastName(contactBean.getLastName());
  entity.setPhone(contactBean.getPhone());
  entity.setMobile(contactBean.getMobile());
  entity.setFax(contactBean.getFax());
  entity.setEmail(contactBean.getEmail());
  entity.setCreatedBy(contactBean.getCreatedBy());
  entity.setCreatedTimestamp(contactBean.getCreatedTimestamp());
  entity.setPosition(contactBean.getPosition());
  return entity;
}",0.945054945054945
144440,"private Contacts transformToEntityBeanContacts(ContactBean contactBean){
  Contacts entity=new Contacts();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  if (contactBean.getContactId() != null) {
    entity.setContactId(contactBean.getContactId());
  }
  entity.setReferenceId(contactBean.getReferenceId());
  entity.setReferenceTable(""String_Node_Str"");
  entity.setContactType(""String_Node_Str"");
  entity.setFirstName(contactBean.getFirstName());
  entity.setMiddleName(contactBean.getMiddleName());
  entity.setLastName(contactBean.getLastName());
  entity.setPhone(contactBean.getPhone());
  entity.setMobile(contactBean.getMobile());
  entity.setFax(contactBean.getFax());
  entity.setEmail(contactBean.getEmail());
  entity.setCreatedBy(contactBean.getCreatedBy());
  entity.setCreatedTimestamp(contactBean.getCreatedTimestamp());
  entity.setPosition(contactBean.getPosition());
  return entity;
}","private Contacts transformToEntityBeanContacts(ContactBean contactBean){
  Contacts entity=new Contacts();
  if (contactBean.getContactId() != null) {
    entity.setContactId(contactBean.getContactId());
  }
  entity.setReferenceId(contactBean.getReferenceId());
  entity.setReferenceTable(""String_Node_Str"");
  entity.setContactType(""String_Node_Str"");
  entity.setFirstName(contactBean.getFirstName());
  entity.setMiddleName(contactBean.getMiddleName());
  entity.setLastName(contactBean.getLastName());
  entity.setPhone(contactBean.getPhone());
  entity.setMobile(contactBean.getMobile());
  entity.setFax(contactBean.getFax());
  entity.setEmail(contactBean.getEmail());
  entity.setCreatedBy(contactBean.getCreatedBy());
  entity.setCreatedTimestamp(contactBean.getCreatedTimestamp());
  entity.setPosition(contactBean.getPosition());
  return entity;
}",0.945054945054945
144441,"public String addConsigneeContact(){
  try {
    Contacts contactEntity=transformToEntityBeanContacts(contact);
    contactEntity.setReferenceTable(""String_Node_Str"");
    contactEntity.setContactType(""String_Node_Str"");
    contactEntity.setModifiedBy(commonUtils.getUserNameFromSession());
    contactEntity.setCreatedBy(commonUtils.getUserNameFromSession());
    contactEntity.setCreatedTimestamp(new Date());
    customerService.addContact(contactEntity);
  }
 catch (  ContactAlreadyExistsException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return INPUT;
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  return SUCCESS;
}","public String addConsigneeContact(){
  try {
    Contacts contactEntity=transformToEntityBeanContacts(contact);
    contactEntity.setReferenceTable(""String_Node_Str"");
    contactEntity.setContactType(""String_Node_Str"");
    contactEntity.setModifiedBy(commonUtils.getUserNameFromSession());
    contactEntity.setCreatedBy(commonUtils.getUserNameFromSession());
    contactEntity.setCreatedTimestamp(new Date());
    customerService.addContact(contactEntity);
  }
 catch (  ContactAlreadyExistsException e) {
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  return SUCCESS;
}",0.7778576563623293
144442,"public String viewFreightPlanning(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById(orderItemIdParam);
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  if (orderItem.getVesselScheduleId() == null || orderItem.getVesselScheduleId().equals(""String_Node_Str"") || orderItem.getVesselScheduleId().length() == 0 || orderItem.getVesselScheduleId().isEmpty() || orderItem.getVesselScheduleId().equals(""String_Node_Str"")) {
    orderItem.setVendorSea(""String_Node_Str"");
    orderItem.setVesselScheduleId(""String_Node_Str"");
    vesselSchedule.setVesselName(""String_Node_Str"");
    vesselSchedule.setDepartureDate(""String_Node_Str"");
    vesselSchedule.setArrivalDate(""String_Node_Str"");
    vesselSchedule.setDepartureTime(""String_Node_Str"");
    vesselSchedule.setArrivalTime(""String_Node_Str"");
    vesselSchedule.setOriginPort(""String_Node_Str"");
    vesselSchedule.setDestinationPort(""String_Node_Str"");
  }
 else {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  if (orderItem.getTruckOrigin() == null || orderItem.getTruckOrigin().equals(""String_Node_Str"") || orderItem.getTruckOrigin().length() == 0 || orderItem.getTruckOrigin().isEmpty()) {
    orderItem.setVendorOrigin(""String_Node_Str"");
    orderItem.setDriverOrigin(""String_Node_Str"");
    orderItem.setTruckOrigin(""String_Node_Str"");
    orderItem.setFinalPickupDate(""String_Node_Str"");
    truck.setTruckType(""String_Node_Str"");
    truck.setPlateNumber(""String_Node_Str"");
    truck.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckOrigin());
    truck=transformToFormBeanTrucks(truckEntity);
  }
  if (orderItem.getTruckDestination() == null || orderItem.getTruckDestination().equals(""String_Node_Str"") || orderItem.getTruckDestination().length() == 0 || orderItem.getTruckDestination().isEmpty()) {
    orderItem.setVendorDestination(""String_Node_Str"");
    orderItem.setDriverDestination(""String_Node_Str"");
    orderItem.setTruckDestination(""String_Node_Str"");
    orderItem.setFinalDeliveryDate(""String_Node_Str"");
    truckDestination.setTruckType(""String_Node_Str"");
    truckDestination.setPlateNumber(""String_Node_Str"");
    truckDestination.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckDestination());
    truckDestination=transformToFormBeanTrucks(truckEntity);
  }
  vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
  sessionAttributes.put(""String_Node_Str"",entity.getOrderItemId());
  sessionAttributes.put(""String_Node_Str"",entity.getNameSize());
  if (""String_Node_Str"".equals(entity.getStatus()) || entity.getStatus().equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(entity.getStatus()) || entity.getStatus().equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String viewFreightPlanning(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderItems entity=operationsService.findOrderItemById(orderItemIdParam);
  orderItem=transformToOrderItemFormBean(entity);
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntity);
  if (orderItem.getVesselScheduleId() == null || orderItem.getVesselScheduleId().equals(""String_Node_Str"") || orderItem.getVesselScheduleId().length() == 0 || orderItem.getVesselScheduleId().isEmpty() || orderItem.getVesselScheduleId().equals(""String_Node_Str"")) {
    orderItem.setVendorSea(""String_Node_Str"");
    orderItem.setVesselScheduleId(""String_Node_Str"");
    vesselSchedule.setVesselName(""String_Node_Str"");
    vesselSchedule.setDepartureDate(""String_Node_Str"");
    vesselSchedule.setArrivalDate(""String_Node_Str"");
    vesselSchedule.setDepartureTime(""String_Node_Str"");
    vesselSchedule.setArrivalTime(""String_Node_Str"");
    vesselSchedule.setOriginPort(""String_Node_Str"");
    vesselSchedule.setDestinationPort(""String_Node_Str"");
  }
 else {
    VesselSchedules vesselScheduleEntity=vesselSchedulesService.findVesselSchedulesByIdVoyageNumber(orderItem.getVesselScheduleId());
    vesselSchedule=transformToFormBeanVesselSchedule(vesselScheduleEntity);
  }
  if (orderItem.getTruckOrigin() == null || orderItem.getTruckOrigin().equals(""String_Node_Str"") || orderItem.getTruckOrigin().length() == 0 || orderItem.getTruckOrigin().isEmpty()) {
    orderItem.setVendorOrigin(""String_Node_Str"");
    orderItem.setDriverOrigin(""String_Node_Str"");
    orderItem.setTruckOrigin(""String_Node_Str"");
    orderItem.setFinalPickupDate(""String_Node_Str"");
    truck.setTruckType(""String_Node_Str"");
    truck.setPlateNumber(""String_Node_Str"");
    truck.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckOrigin());
    truck=transformToFormBeanTrucks(truckEntity);
  }
  if (orderItem.getTruckDestination() == null || orderItem.getTruckDestination().equals(""String_Node_Str"") || orderItem.getTruckDestination().length() == 0 || orderItem.getTruckDestination().isEmpty()) {
    orderItem.setVendorDestination(""String_Node_Str"");
    orderItem.setDriverDestination(""String_Node_Str"");
    orderItem.setTruckDestination(""String_Node_Str"");
    orderItem.setFinalDeliveryDate(""String_Node_Str"");
    truckDestination.setTruckType(""String_Node_Str"");
    truckDestination.setPlateNumber(""String_Node_Str"");
    truckDestination.setGrossWeight(0);
  }
 else {
    Trucks truckEntity=vendorService.findTrucksByTruckCode(orderItem.getTruckDestination());
    truckDestination=transformToFormBeanTrucks(truckEntity);
  }
  vendorShippingListClass=vendorService.findShippingVendorClass(customerService.findCustomerById(order.getCustomerId()).getCustomerType());
  sessionAttributes.put(""String_Node_Str"",entity.getOrderItemId());
  sessionAttributes.put(""String_Node_Str"",entity.getNameSize());
  return ""String_Node_Str"";
}",0.9462331978743356
144443,"public ContainerBean transformContainerToFormBean(Container entity){
  ContainerBean formBean=new ContainerBean();
  formBean.setContainerId(entity.getContainerId());
  formBean.setEirNumber(entity.getEirNumber());
  formBean.setGateInTime(entity.getGateInTime());
  formBean.setGateOutTime(entity.getGateOutTime());
  formBean.setShipping(entity.getShipping());
  formBean.setTrucking(entity.getTrucking());
  formBean.setPlateNumber(entity.getPlateNumber());
  formBean.setVanNumber(entity.getVanNumber());
  formBean.setDriver(entity.getDriver());
  formBean.setOrderNumber(entity.getOrderNumber());
  formBean.setRemarks(entity.getRemarks());
  formBean.setVanTo(entity.getVanTo());
  formBean.setVanFrom(entity.getVanFrom());
  formBean.setContainerNumber(entity.getContainerNumber());
  formBean.setContainerSize(entity.getContainerSize());
  formBean.setContainerType(entity.getContainerType());
  formBean.setContainerStatus(entity.getContainerStatus());
  formBean.setEirType(entity.getEirType());
  formBean.setSealNumber(entity.getSealNumber());
  formBean.setVanLocation(entity.getVanLocation());
  formBean.setLadenEmpty(entity.getLadenEmpty());
  formBean.setReceiptNumber(entity.getReceiptNumber());
  formBean.setLadenEmpty(entity.getLadenEmpty());
  formBean.setForkliftOperator(entity.getForkliftOperator());
  formBean.setOperationsDept(entity.getOperationsDept());
  return formBean;
}","public ContainerBean transformContainerToFormBean(Container entity){
  ContainerBean formBean=new ContainerBean();
  formBean.setContainerId(entity.getContainerId());
  formBean.setEirNumber(entity.getEirNumber());
  formBean.setGateInTime(entity.getGateInTime());
  formBean.setGateOutTime(entity.getGateOutTime());
  formBean.setShipping(entity.getShipping());
  formBean.setTrucking(entity.getTrucking());
  formBean.setPlateNumber(entity.getPlateNumber());
  formBean.setVanNumber(entity.getVanNumber());
  formBean.setDriver(entity.getDriver());
  formBean.setOrderNumber(entity.getOrderNumber());
  formBean.setRemarks(entity.getRemarks());
  formBean.setVanTo(entity.getVanTo());
  formBean.setVanFrom(entity.getVanFrom());
  formBean.setContainerNumber(entity.getContainerNumber());
  formBean.setContainerSize(entity.getContainerSize());
  formBean.setContainerType(entity.getContainerType());
  formBean.setEirType(entity.getEirType());
  formBean.setSealNumber(entity.getSealNumber());
  formBean.setVanLocation(entity.getVanLocation());
  formBean.setLadenEmpty(entity.getLadenEmpty());
  formBean.setReceiptNumber(entity.getReceiptNumber());
  formBean.setLadenEmpty(entity.getLadenEmpty());
  formBean.setForkliftOperator(entity.getForkliftOperator());
  formBean.setOperationsDept(entity.getOperationsDept());
  if (""String_Node_Str"".equals(entity.getContainerStatus())) {
    formBean.setContainerStatus(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(entity.getContainerStatus())) {
    formBean.setContainerStatus(""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(entity.getContainerStatus())) {
    formBean.setContainerStatus(""String_Node_Str"");
  }
  return formBean;
}",0.8515549855722988
144444,"public OrderBean transformOrdersToFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderId(entity.getOrderId());
  formBean.setOrderDate(entity.getOrderDate());
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  formBean.setOriginationPort(entity.getOriginationPort());
  formBean.setDestinationPort(entity.getDestinationPort());
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  formBean.setModeOfService(entity.getServiceMode());
  formBean.setServiceRequirement(entity.getServiceRequirement());
  return formBean;
}","public OrderBean transformOrdersToFormBean(Orders entity){
  OrderBean formBean=new OrderBean();
  formBean.setOrderId(entity.getOrderId());
  formBean.setOrderDate(entity.getOrderDate());
  formBean.setOrderNumber(entity.getOrderNumber());
  Contacts shipperContactName=customerService.findContactById(entity.getShipperContactId());
  Customer customerName=customerService.findCustomerById(shipperContactName.getReferenceId());
  formBean.setCustomerName((customerName.getCustomerName()));
  Contacts consigneeName=customerService.findContactById(entity.getConsigneeContactId());
  formBean.setConsigneeCode(getFullName(consigneeName.getLastName(),consigneeName.getFirstName(),consigneeName.getMiddleName()));
  if (orderService.findOrdersById(entity.getOrderId()).getServiceType().equals(""String_Node_Str"")) {
    formBean.setOriginationPort(""String_Node_Str"");
    formBean.setDestinationPort(""String_Node_Str"");
  }
 else {
    formBean.setOriginationPort(entity.getOriginationPort());
    formBean.setDestinationPort(entity.getDestinationPort());
  }
  formBean.setOriginationPort(entity.getOriginationPort());
  formBean.setDestinationPort(entity.getDestinationPort());
  formBean.setOrderStatus(entity.getOrderStatus());
  formBean.setFreightType(entity.getServiceType());
  formBean.setModeOfService(entity.getServiceMode());
  formBean.setServiceRequirement(entity.getServiceRequirement());
  return formBean;
}",0.8472945891783568
144445,"public String activateArchive(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  List<Documents> allDocuments=documentsService.findDocumentsByOrderId(orderIdParam);
  for (  Documents documentElem : allDocuments) {
    documentElem.setArchiveStage(1);
    documentsService.updateDocument(documentElem);
  }
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  return SUCCESS;
}","public String activateArchive(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  List<Documents> allDocuments=documentsService.findDocumentsByOrderId(orderIdParam);
  for (  Documents documentElem : allDocuments) {
    documentElem.setArchiveStage(1);
    documentsService.updateDocument(documentElem);
  }
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  return SUCCESS;
}",0.9262672811059908
144446,"public String loadSuccessSetStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs((Integer)sessionAttributes.get(""String_Node_Str""));
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str"")).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String loadSuccessSetStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str"")).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById((Integer)sessionAttributes.get(""String_Node_Str""));
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs((Integer)sessionAttributes.get(""String_Node_Str""));
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  orderStatusLogsBean.setOrderItemId(orderItemEntity.getOrderItemId());
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.3777292576419214
144447,"public OrderStatusLogs transformToOrderStatusLogsEntity(OrderStatusLogsBean formBean){
  OrderStatusLogs entity=new OrderStatusLogs();
  entity.setOrderItemId(formBean.getOrderItemId());
  entity.setOrderId(operationsService.findOrderItemById(formBean.getOrderItemId()).getOrderId());
  entity.setStatus(formBean.getStatus());
  entity.setCreatedBy(formBean.getCreatedBy());
  entity.setCreatedTimestamp(formBean.getCreatedTimestamp());
  entity.setDeliveryDate(formBean.getDeliveryDate());
  entity.setPickupDate(formBean.getPickupDate());
  entity.setDepartureTime(formBean.getDepartureTime());
  entity.setArrivalTime(formBean.getArrivalTime());
  return entity;
}","public OrderStatusLogs transformToOrderStatusLogsEntity(OrderStatusLogsBean formBean){
  OrderStatusLogs entity=new OrderStatusLogs();
  System.out.println(""String_Node_Str"" + formBean.getOrderItemId());
  entity.setOrderItemId(formBean.getOrderItemId());
  entity.setOrderId(operationsService.findOrderItemById(formBean.getOrderItemId()).getOrderId());
  entity.setStatus(formBean.getStatus());
  entity.setCreatedBy(formBean.getCreatedBy());
  entity.setCreatedTimestamp(formBean.getCreatedTimestamp());
  entity.setDeliveryDate(formBean.getDeliveryDate());
  entity.setPickupDate(formBean.getPickupDate());
  entity.setDepartureTime(formBean.getDepartureTime());
  entity.setArrivalTime(formBean.getArrivalTime());
  return entity;
}",0.9508196721311476
144448,"public String loadItemShipmentHistory(){
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById(orderItemIdParam).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(orderItemIdParam);
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=new ArrayList<OrderStatusLogs>();
  orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs(orderItemIdParam);
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  return SUCCESS;
}","public String loadItemShipmentHistory(){
  Orders orderEntity=orderService.findOrdersById(orderStatusLogsService.findOrderItemById(orderItemIdParam).getOrderId());
  order=transformToOrderFormBean(orderEntity);
  OrderItems orderItemEntity=orderStatusLogsService.findOrderItemById(orderItemIdParam);
  orderItem=transformToOrderItemFormBean(orderItemEntity);
  List<OrderStatusLogs> orderStatusLogsEntityList=new ArrayList<OrderStatusLogs>();
  orderStatusLogsEntityList=orderStatusLogsService.findAllShipmentLogs(orderItemIdParam);
  for (  OrderStatusLogs orderStatusLogsElem : orderStatusLogsEntityList) {
    orderStatusLogs.add(transformToOrderStatusLogsFormBean(orderStatusLogsElem));
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderItemIdParam);
  return SUCCESS;
}",0.918918918918919
144449,"public String setItemStatus(){
  OrderStatusLogs orderStatusLogsEntity=transformToOrderStatusLogsEntity(orderStatusLogsBean);
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderStatusLogsEntity.getOrderItemId());
  orderStatusLogsEntity.setCreatedBy(commonUtils.getUserNameFromSession());
  orderStatusLogsService.addStatus(orderStatusLogsEntity);
  return SUCCESS;
}","public String setItemStatus(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  OrderStatusLogs orderStatusLogsEntity=transformToOrderStatusLogsEntity(orderStatusLogsBean);
  sessionAttributes.put(""String_Node_Str"",orderStatusLogsEntity.getOrderItemId());
  orderStatusLogsEntity.setCreatedBy(commonUtils.getUserNameFromSession());
  orderStatusLogsService.addStatus(orderStatusLogsEntity);
  return SUCCESS;
}",0.7780373831775701
144450,"public String viewDocumentList(){
  List<Documents> documentsList=new ArrayList<Documents>();
  documentsList=documentsService.findDocumentsByOrderId(orderIdParam);
  for (  Documents documentElem : documentsList) {
    documents.add(transformDocumentToFormBean(documentElem));
  }
  return SUCCESS;
}","public String viewDocumentList(){
  List<Documents> documentsList=new ArrayList<Documents>();
  documentsList=documentsService.findDocumentsByOrderId(orderIdParam);
  for (  Documents documentElem : documentsList) {
    if (""String_Node_Str"".equals(documentElem.getDocumentName())) {
      documents.add(transformDocumentToFormBean(documentElem));
    }
  }
  return SUCCESS;
}",0.8613569321533924
144451,"public OrderStatusLogsBean transformToOrderStatusLogsFormBean(OrderStatusLogs entity){
  OrderStatusLogsBean formBean=new OrderStatusLogsBean();
  formBean.setCreatedDate(entity.getCreatedTimestamp());
  formBean.setCreatedTime(entity.getCreatedTimestamp());
  formBean.setStatus(entity.getStatus());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setNameSize(orderService.findOrderItemByOrderItemId(entity.getOrderItemId()).getNameSize());
  formBean.setOrderItemId(entity.getOrderItemId());
  return formBean;
}","public OrderStatusLogsBean transformToOrderStatusLogsFormBean(OrderStatusLogs entity){
  OrderStatusLogsBean formBean=new OrderStatusLogsBean();
  formBean.setCreatedTimestamp(entity.getCreatedTimestamp());
  formBean.setStatus(entity.getStatus());
  formBean.setCreatedBy(entity.getCreatedBy());
  formBean.setNameSize(orderService.findOrderItemByOrderItemId(entity.getOrderItemId()).getNameSize());
  formBean.setOrderItemId(entity.getOrderItemId());
  return formBean;
}",0.8416833667334669
144452,"public OrderItemsBean(Integer orderItemId,Integer orderId,Integer quantity,String classification,String description,Double declaredValue,Double weight,String remarks,Float rate,Date createdTimeStamp,String createdBy,Date modifiedTimeStamp,String modifiedBy,String nameSize,String status,Float volume,Integer clientId,String commodity,String comments,String vendorSea,String vendorOrigin,String vendorDestination,String finalPickupDate,String driverOrigin,String driverDestination,String truckOrigin,String truckDestination,String vesselScheduleId){
  this.orderItemId=orderItemId;
  this.orderId=orderId;
  this.quantity=quantity;
  this.classification=classification;
  this.description=description;
  this.declaredValue=declaredValue;
  this.weight=weight;
  this.remarks=remarks;
  this.rate=rate;
  this.createdTimeStamp=createdTimeStamp;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBy=modifiedBy;
  this.nameSize=nameSize;
  this.status=status;
  this.volume=volume;
  this.clientId=clientId;
  this.commodity=commodity;
  this.comments=comments;
  this.vendorSea=vendorSea;
  this.vendorOrigin=vendorOrigin;
  this.vendorDestination=vendorDestination;
  this.finalPickupDate=finalPickupDate;
  this.driverOrigin=driverOrigin;
  this.driverDestination=driverDestination;
  this.truckOrigin=truckOrigin;
  this.truckDestination=truckDestination;
  this.vesselScheduleId=vesselScheduleId;
}","public OrderItemsBean(Integer orderItemId,Integer orderId,Integer quantity,String classification,String description,Double declaredValue,Double weight,String remarks,Float rate,Date createdTimeStamp,String createdBy,Date modifiedTimeStamp,String modifiedBy,String nameSize,String status,Float volume,Integer clientId,String commodity,String comments,String vendorSea,String vesselName,String vendorOrigin,String vendorDestination,String finalPickupDate,String driverOrigin,String driverDestination,String truckOrigin,String truckDestination,String vesselScheduleId){
  this.orderItemId=orderItemId;
  this.orderId=orderId;
  this.quantity=quantity;
  this.classification=classification;
  this.description=description;
  this.declaredValue=declaredValue;
  this.weight=weight;
  this.remarks=remarks;
  this.rate=rate;
  this.createdTimeStamp=createdTimeStamp;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBy=modifiedBy;
  this.nameSize=nameSize;
  this.status=status;
  this.volume=volume;
  this.clientId=clientId;
  this.commodity=commodity;
  this.comments=comments;
  this.vendorSea=vendorSea;
  this.vesselName=vesselName;
  this.vendorOrigin=vendorOrigin;
  this.vendorDestination=vendorDestination;
  this.finalPickupDate=finalPickupDate;
  this.driverOrigin=driverOrigin;
  this.driverDestination=driverDestination;
  this.truckOrigin=truckOrigin;
  this.truckDestination=truckDestination;
  this.vesselScheduleId=vesselScheduleId;
}",0.9835616438356164
144453,"public String viewOrderDocuments(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  System.out.println(""String_Node_Str"" + (Integer)sessionAttributes.get(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + orderIdParam);
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  System.out.println(""String_Node_Str"" + orderIdParam);
  bookingNumber=orderEntity.getOrderNumber();
  order=transformToOrderFormBean(orderEntity);
  List<OrderItems> orderItemEntityList=orderService.findAllItemByOrderId(orderIdParam);
  for (  OrderItems orderItemElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemsFormBean(orderItemElem));
  }
  outboundEntityList=documentsService.findDocumentByOutboundStageAndID(1,orderIdParam);
  outboundCount=outboundEntityList.size();
  inboundEntityList=documentsService.findDocumentByInboundStageAndID(1,orderIdParam);
  inboundCount=inboundEntityList.size();
  finalOutboundEntityList=documentsService.findDocumentByFinalOutboundStageAndID(1,orderIdParam);
  finalOutboundCount=finalOutboundEntityList.size();
  finalInboundEntityList=documentsService.findDocumentByFinalInboundStageAndID(1,orderIdParam);
  finalInboundCount=finalInboundEntityList.size();
  archiveEntityList=documentsService.findDocumentByArchiveStageAndID(1,orderIdParam);
  archiveCount=archiveEntityList.size();
  billingEntityList=documentsService.findDocumentByBillingStageAndID(1,orderIdParam);
  billingCount=billingEntityList.size();
  documentsList=documentsService.findDocumentsByOrderId(orderIdParam);
  List<String> documentListString=new ArrayList<String>();
  for (  Documents documentAdd : documentsList) {
    documentListString.add(documentAdd.getDocumentName());
  }
  System.out.println(""String_Node_Str"" + documentListString);
  System.out.println(""String_Node_Str"" + orderEntity.getServiceRequirement());
  if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
    if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
 else     if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
 else     if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
  }
 else   if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
    if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
 else     if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
  }
 else   if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
    if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
 else     if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
  }
 else   if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
    if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
  }
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    for (    OrderItems orderItemCheck : orderItemEntityList) {
      for (      Documents documentCheck : documentsList) {
        if (documentCheck.getDocumentName().equals(""String_Node_Str"")) {
          if (documentCheck.getVendorCode() != null) {
            if (!documentCheck.getVendorCode().equals(orderItemCheck.getVendorSea())) {
              clearErrorsAndMessages();
              addActionMessage(""String_Node_Str"");
              documentTab=""String_Node_Str"";
              break;
            }
          }
        }
 else         if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          if (documentCheck.getDocumentName().equals(""String_Node_Str"")) {
            if (documentCheck.getVendorCode() != null) {
              if (!documentCheck.getVendorCode().equals(orderItemCheck.getVendorOrigin())) {
                clearErrorsAndMessages();
                addActionMessage(""String_Node_Str"");
                documentTab=""String_Node_Str"";
                break;
              }
            }
          }
        }
 else         if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          if (documentCheck.getDocumentName().equals(""String_Node_Str"")) {
            if (documentCheck.getVendorCode() != null) {
              if (!documentCheck.getVendorCode().equals(orderItemCheck.getVendorDestination())) {
                clearErrorsAndMessages();
                addActionMessage(""String_Node_Str"");
                documentTab=""String_Node_Str"";
                break;
              }
            }
          }
        }
      }
    }
  }
  for (  Documents documentElem : outboundEntityList) {
    outboundDocuments.add(transformDocumentsToFormBean(documentElem));
  }
  for (  Documents documentElem : inboundEntityList) {
    inboundDocuments.add(transformDocumentsToFormBean(documentElem));
    dateReturnedInbound=documentElem.getInboundReturned();
  }
  for (  Documents documentElem : finalOutboundEntityList) {
    finalOutboundDocuments.add(transformDocumentsToFormBean(documentElem));
    dateSentFinalOutbound=documentElem.getFinalOutboundSent();
    finalOutboundTrackingNumber=documentElem.getFinalOutboundLbc();
  }
  for (  Documents documentElem : finalInboundEntityList) {
    finalInboundDocuments.add(transformDocumentsToFormBean(documentElem));
    dateReturnedFinalInbound=documentElem.getFinalInboundReturned();
  }
  for (  Documents documentElem : archiveEntityList) {
    archiveDocuments.add(transformDocumentsToFormBean(documentElem));
  }
  for (  Documents documentElem : finalInboundEntityList) {
    billingDocuments.add(transformDocumentsToFormBean(documentElem));
  }
  if (sessionAttributes.get(""String_Node_Str"") == null || ""String_Node_Str"".equals(sessionAttributes.get(""String_Node_Str""))) {
    Integer checkDocs=0;
    for (    Documents documentElem : outboundEntityList) {
      if (documentElem.getDocumentProcessed() >= 1) {
        checkDocs=checkDocs + 1;
      }
    }
    if (documentTab == null || ""String_Node_Str"".equals(documentTab)) {
      if (outboundCount == 0) {
        documentTab=""String_Node_Str"";
      }
 else       if (outboundCount != checkDocs) {
        documentTab=""String_Node_Str"";
      }
 else {
        documentTab=""String_Node_Str"";
      }
    }
  }
 else {
    documentTab=sessionAttributes.get(""String_Node_Str"").toString();
  }
  if (sessionAttributes.get(""String_Node_Str"") == null) {
    Integer checkDocs=0;
    for (    Documents documentElem : outboundEntityList) {
      if (documentElem.getDocumentProcessed() >= 1) {
        checkDocs=checkDocs + 1;
      }
    }
    Integer checkReturnedInboundDateDocs=0;
    for (    Documents documentElem : inboundEntityList) {
      if (documentElem.getInboundReturned() != null) {
        checkReturnedInboundDateDocs=checkReturnedInboundDateDocs + 1;
      }
    }
    Integer checkDocsInbound=0;
    for (    Documents documentElem : inboundEntityList) {
      if (documentElem.getDocumentProcessed() >= 2) {
        checkDocsInbound=checkDocsInbound + 1;
      }
    }
    System.out.println(""String_Node_Str"" + outboundCount);
    System.out.println(""String_Node_Str"" + checkDocs);
    System.out.println(""String_Node_Str"" + inboundCount);
    System.out.println(""String_Node_Str"" + checkReturnedInboundDateDocs);
    System.out.println(""String_Node_Str"" + checkDocsInbound);
    if (outboundCount != checkDocs) {
      documentTabInbound=""String_Node_Str"";
    }
 else     if (inboundCount != checkReturnedInboundDateDocs) {
      documentTabInbound=""String_Node_Str"";
    }
 else     if (inboundCount != checkDocsInbound) {
      documentTabInbound=""String_Node_Str"";
    }
 else     if (inboundCount == 0) {
      documentTabInbound=""String_Node_Str"";
    }
 else     if (inboundCount == checkReturnedInboundDateDocs && inboundCount == checkDocsInbound) {
      documentTabInbound=""String_Node_Str"";
    }
  }
 else {
    documentTabInbound=sessionAttributes.get(""String_Node_Str"").toString();
  }
  if (sessionAttributes.get(""String_Node_Str"") == null) {
    Integer checkDocsInbound=0;
    for (    Documents documentElem : finalOutboundEntityList) {
      if (documentElem.getDocumentProcessed() >= 2) {
        checkDocsInbound=checkDocsInbound + 1;
      }
    }
    Integer checkDocsFinalOut=0;
    for (    Documents documentElem : finalOutboundEntityList) {
      if (documentElem.getDocumentProcessed() >= 3) {
        checkDocsFinalOut=checkDocsFinalOut + 1;
      }
    }
    Integer checkDocsFinalOutSent=0;
    for (    Documents documentElem : finalOutboundEntityList) {
      if (documentElem.getFinalOutboundSent() != null && documentElem.getFinalOutboundLbc() != null) {
        checkDocsFinalOutSent=checkDocsFinalOutSent + 1;
      }
    }
    System.out.println(""String_Node_Str"" + checkDocsInbound);
    System.out.println(""String_Node_Str"" + finalOutboundCount);
    System.out.println(""String_Node_Str"" + checkDocsFinalOut);
    System.out.println(""String_Node_Str"" + checkDocsFinalOutSent);
    if (finalOutboundCount == 0) {
      documentTabFinalOutbound=""String_Node_Str"";
    }
 else     if (checkDocsFinalOut == checkDocsFinalOutSent && checkDocsFinalOut != 0) {
      documentTabFinalOutbound=""String_Node_Str"";
    }
 else     if (finalOutboundCount == checkDocsFinalOut) {
      documentTabFinalOutbound=""String_Node_Str"";
    }
 else {
      documentTabFinalOutbound=""String_Node_Str"";
    }
  }
 else {
    documentTabFinalOutbound=sessionAttributes.get(""String_Node_Str"").toString();
  }
  Integer checkDocsFinalIn=0;
  for (  Documents documentElem : finalInboundEntityList) {
    if (documentElem.getDocumentProcessed() >= 4 && documentElem.getFinalInboundReturned() != null) {
      checkDocsFinalIn=checkDocsFinalIn + 1;
    }
  }
  if (sessionAttributes.get(""String_Node_Str"") == null) {
    if (finalInboundCount == 0) {
      documentTabFinalInbound=""String_Node_Str"";
    }
 else     if (finalInboundCount == checkDocsFinalIn) {
      documentTabFinalInbound=""String_Node_Str"";
    }
 else {
      documentTabFinalInbound=""String_Node_Str"";
    }
  }
 else {
    documentTabFinalInbound=sessionAttributes.get(""String_Node_Str"").toString();
  }
  System.out.println(""String_Node_Str"" + finalInboundCount);
  System.out.println(""String_Node_Str"" + checkDocsFinalIn);
  Integer checkDocsArchive=0;
  for (  Documents documentElem : archiveEntityList) {
    if (documentElem.getDocumentProcessed() >= 5) {
      checkDocsArchive=checkDocsArchive + 1;
    }
  }
  if (sessionAttributes.get(""String_Node_Str"") == null) {
    if (archiveCount == 0) {
      documentTabArchive=""String_Node_Str"";
    }
 else     if (archiveCount == checkDocsArchive) {
      documentTabArchive=""String_Node_Str"";
    }
 else {
      documentTabArchive=""String_Node_Str"";
    }
  }
 else {
    documentTabArchive=sessionAttributes.get(""String_Node_Str"").toString();
  }
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  documentFlag();
  documentflag=0;
  return SUCCESS;
}","public String viewOrderDocuments(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  if (orderIdParam == null) {
    orderIdParam=(Integer)sessionAttributes.get(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + (Integer)sessionAttributes.get(""String_Node_Str""));
  System.out.println(""String_Node_Str"" + orderIdParam);
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  System.out.println(""String_Node_Str"" + orderIdParam);
  bookingNumber=orderEntity.getOrderNumber();
  order=transformToOrderFormBean(orderEntity);
  List<OrderItems> orderItemEntityList=orderService.findAllItemByOrderId(orderIdParam);
  for (  OrderItems orderItemElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemsFormBean(orderItemElem));
  }
  outboundEntityList=documentsService.findDocumentByOutboundStageAndID(1,orderIdParam);
  outboundCount=outboundEntityList.size();
  inboundEntityList=documentsService.findDocumentByInboundStageAndID(1,orderIdParam);
  inboundCount=inboundEntityList.size();
  finalOutboundEntityList=documentsService.findDocumentByFinalOutboundStageAndID(1,orderIdParam);
  finalOutboundCount=finalOutboundEntityList.size();
  finalInboundEntityList=documentsService.findDocumentByFinalInboundStageAndID(1,orderIdParam);
  finalInboundCount=finalInboundEntityList.size();
  archiveEntityList=documentsService.findDocumentByArchiveStageAndID(1,orderIdParam);
  archiveCount=archiveEntityList.size();
  billingEntityList=documentsService.findDocumentByBillingStageAndID(1,orderIdParam);
  billingCount=billingEntityList.size();
  documentsList=documentsService.findDocumentsByOrderId(orderIdParam);
  List<String> documentListString=new ArrayList<String>();
  for (  Documents documentAdd : documentsList) {
    documentListString.add(documentAdd.getDocumentName());
  }
  System.out.println(""String_Node_Str"" + documentListString);
  System.out.println(""String_Node_Str"" + orderEntity.getServiceRequirement());
  if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
    if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
 else     if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
 else     if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
  }
 else   if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
    if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
 else     if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
  }
 else   if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
    if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
 else     if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
  }
 else   if (orderEntity.getServiceMode().equals(""String_Node_Str"")) {
    if (!documentListString.contains(""String_Node_Str"")) {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      documentTab=""String_Node_Str"";
    }
  }
  if (orderEntity.getServiceType().equals(""String_Node_Str"") || orderEntity.getServiceType().equals(""String_Node_Str"")) {
    for (    OrderItems orderItemCheck : orderItemEntityList) {
      for (      Documents documentCheck : documentsList) {
        if (documentCheck.getDocumentName().equals(""String_Node_Str"")) {
          if (documentCheck.getVendorCode() != null) {
            if (!documentCheck.getVendorCode().equals(orderItemCheck.getVendorSea())) {
              clearErrorsAndMessages();
              addActionMessage(""String_Node_Str"");
              documentTab=""String_Node_Str"";
              break;
            }
          }
        }
 else         if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          if (documentCheck.getDocumentName().equals(""String_Node_Str"")) {
            if (documentCheck.getVendorCode() != null) {
              if (!documentCheck.getVendorCode().equals(orderItemCheck.getVendorOrigin())) {
                clearErrorsAndMessages();
                addActionMessage(""String_Node_Str"");
                documentTab=""String_Node_Str"";
                break;
              }
            }
          }
        }
 else         if (orderEntity.getServiceMode().equals(""String_Node_Str"") || orderEntity.getServiceMode().equals(""String_Node_Str"")) {
          if (documentCheck.getDocumentName().equals(""String_Node_Str"")) {
            if (documentCheck.getVendorCode() != null) {
              if (!documentCheck.getVendorCode().equals(orderItemCheck.getVendorDestination())) {
                clearErrorsAndMessages();
                addActionMessage(""String_Node_Str"");
                documentTab=""String_Node_Str"";
                break;
              }
            }
          }
        }
      }
    }
  }
  for (  Documents documentElem : outboundEntityList) {
    outboundDocuments.add(transformDocumentsToFormBean(documentElem));
  }
  for (  Documents documentElem : inboundEntityList) {
    inboundDocuments.add(transformDocumentsToFormBean(documentElem));
    dateReturnedInbound=documentElem.getInboundReturned();
  }
  for (  Documents documentElem : finalOutboundEntityList) {
    finalOutboundDocuments.add(transformDocumentsToFormBean(documentElem));
    dateSentFinalOutbound=documentElem.getFinalOutboundSent();
    finalOutboundTrackingNumber=documentElem.getFinalOutboundLbc();
  }
  for (  Documents documentElem : finalInboundEntityList) {
    finalInboundDocuments.add(transformDocumentsToFormBean(documentElem));
    dateReturnedFinalInbound=documentElem.getFinalInboundReturned();
  }
  for (  Documents documentElem : archiveEntityList) {
    archiveDocuments.add(transformDocumentsToFormBean(documentElem));
  }
  for (  Documents documentElem : finalInboundEntityList) {
    billingDocuments.add(transformDocumentsToFormBean(documentElem));
  }
  if (sessionAttributes.get(""String_Node_Str"") == null || ""String_Node_Str"".equals(sessionAttributes.get(""String_Node_Str""))) {
    Integer checkDocs=0;
    for (    Documents documentElem : outboundEntityList) {
      if (documentElem.getDocumentProcessed() >= 1) {
        checkDocs=checkDocs + 1;
      }
    }
    if (documentTab == null || ""String_Node_Str"".equals(documentTab)) {
      if (outboundCount == 0) {
        documentTab=""String_Node_Str"";
      }
 else       if (outboundCount != checkDocs) {
        documentTab=""String_Node_Str"";
      }
 else {
        documentTab=""String_Node_Str"";
      }
    }
  }
 else {
    documentTab=sessionAttributes.get(""String_Node_Str"").toString();
  }
  if (sessionAttributes.get(""String_Node_Str"") == null) {
    Integer checkDocs=0;
    for (    Documents documentElem : outboundEntityList) {
      if (documentElem.getDocumentProcessed() >= 1) {
        checkDocs=checkDocs + 1;
      }
    }
    Integer checkReturnedInboundDateDocs=0;
    for (    Documents documentElem : inboundEntityList) {
      if (documentElem.getInboundReturned() != null) {
        checkReturnedInboundDateDocs=checkReturnedInboundDateDocs + 1;
      }
    }
    Integer checkDocsInbound=0;
    for (    Documents documentElem : inboundEntityList) {
      if (documentElem.getDocumentProcessed() >= 2) {
        checkDocsInbound=checkDocsInbound + 1;
      }
    }
    System.out.println(""String_Node_Str"" + outboundCount);
    System.out.println(""String_Node_Str"" + checkDocs);
    System.out.println(""String_Node_Str"" + inboundCount);
    System.out.println(""String_Node_Str"" + checkReturnedInboundDateDocs);
    System.out.println(""String_Node_Str"" + checkDocsInbound);
    if (outboundCount != checkDocs) {
      documentTabInbound=""String_Node_Str"";
    }
 else     if (inboundCount != checkReturnedInboundDateDocs) {
      documentTabInbound=""String_Node_Str"";
    }
 else     if (inboundCount != checkDocsInbound) {
      documentTabInbound=""String_Node_Str"";
    }
 else     if (inboundCount == 0) {
      documentTabInbound=""String_Node_Str"";
    }
 else     if (inboundCount == checkReturnedInboundDateDocs && inboundCount == checkDocsInbound) {
      documentTabInbound=""String_Node_Str"";
    }
  }
 else {
    documentTabInbound=sessionAttributes.get(""String_Node_Str"").toString();
  }
  if (sessionAttributes.get(""String_Node_Str"") == null) {
    Integer checkDocsInbound=0;
    for (    Documents documentElem : finalOutboundEntityList) {
      if (documentElem.getDocumentProcessed() >= 2) {
        checkDocsInbound=checkDocsInbound + 1;
      }
    }
    Integer checkDocsFinalOut=0;
    for (    Documents documentElem : finalOutboundEntityList) {
      if (documentElem.getDocumentProcessed() >= 3) {
        checkDocsFinalOut=checkDocsFinalOut + 1;
      }
    }
    Integer checkDocsFinalOutSent=0;
    for (    Documents documentElem : finalOutboundEntityList) {
      if (documentElem.getFinalOutboundSent() != null && documentElem.getFinalOutboundLbc() != null) {
        checkDocsFinalOutSent=checkDocsFinalOutSent + 1;
      }
    }
    System.out.println(""String_Node_Str"" + checkDocsInbound);
    System.out.println(""String_Node_Str"" + finalOutboundCount);
    System.out.println(""String_Node_Str"" + checkDocsFinalOut);
    System.out.println(""String_Node_Str"" + checkDocsFinalOutSent);
    if (finalOutboundCount == 0) {
      documentTabFinalOutbound=""String_Node_Str"";
    }
 else     if (checkDocsFinalOut == checkDocsFinalOutSent && checkDocsFinalOut != 0) {
      documentTabFinalOutbound=""String_Node_Str"";
    }
 else     if (finalOutboundCount == checkDocsFinalOut) {
      documentTabFinalOutbound=""String_Node_Str"";
    }
 else {
      documentTabFinalOutbound=""String_Node_Str"";
    }
  }
 else {
    documentTabFinalOutbound=sessionAttributes.get(""String_Node_Str"").toString();
  }
  Integer checkDocsFinalIn=0;
  for (  Documents documentElem : finalInboundEntityList) {
    if (documentElem.getDocumentProcessed() >= 4 && documentElem.getFinalInboundReturned() != null) {
      checkDocsFinalIn=checkDocsFinalIn + 1;
    }
  }
  if (sessionAttributes.get(""String_Node_Str"") == null) {
    if (finalInboundCount == 0) {
      documentTabFinalInbound=""String_Node_Str"";
    }
 else     if (finalInboundCount == checkDocsFinalIn) {
      documentTabFinalInbound=""String_Node_Str"";
    }
 else {
      documentTabFinalInbound=""String_Node_Str"";
    }
  }
 else {
    documentTabFinalInbound=sessionAttributes.get(""String_Node_Str"").toString();
  }
  System.out.println(""String_Node_Str"" + finalInboundCount);
  System.out.println(""String_Node_Str"" + checkDocsFinalIn);
  Integer checkDocsArchive=0;
  for (  Documents documentElem : archiveEntityList) {
    if (documentElem.getDocumentProcessed() >= 5) {
      checkDocsArchive=checkDocsArchive + 1;
    }
  }
  if (sessionAttributes.get(""String_Node_Str"") == null) {
    if (archiveCount == 0) {
      documentTabArchive=""String_Node_Str"";
    }
 else     if (archiveCount == checkDocsArchive) {
      documentTabArchive=""String_Node_Str"";
    }
 else {
      documentTabArchive=""String_Node_Str"";
    }
  }
 else {
    documentTabArchive=sessionAttributes.get(""String_Node_Str"").toString();
  }
  sessionAttributes.put(""String_Node_Str"",orderIdParam);
  sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
  documentFlag();
  documentflag=0;
  return SUCCESS;
}",0.9933386400770874
144454,"public String processDocuments(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  System.out.println(""String_Node_Str"" + document.getDocumentItem());
  System.out.println(""String_Node_Str"" + (Integer)sessionAttributes.get(""String_Node_Str""));
  if (check != null) {
    if (document.getDocumentItem().equals(""String_Node_Str"")) {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(null) || ""String_Node_Str"".equals(check[i])) {
          sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
          documentflag=7;
          sessionAttributes.put(""String_Node_Str"",documentflag);
          return INPUT;
        }
        Integer documentId=Integer.parseInt(check[i]);
        Documents documentIdEntity=documentsService.findDocumentById(documentId);
        if (documentIdEntity.getDocumentName().equals(""String_Node_Str"") && ""String_Node_Str"".equals(documentIdEntity.getReferenceNumber()) || documentIdEntity.getDocumentName().equals(""String_Node_Str"") && documentIdEntity.getReferenceNumber() == null || ""String_Node_Str"".equals(documentIdEntity.getReferenceNumber()) || documentIdEntity.getReferenceNumber() == null) {
          documentIdEntity.setDocumentStatus(""String_Node_Str"");
          documentflag=1;
          sessionAttributes.put(""String_Node_Str"",documentflag);
        }
 else         if (documentIdEntity.getDocumentName().equals(""String_Node_Str"") && documentIdEntity.getReferenceNumber() != null) {
          documentIdEntity.setDocumentStatus(""String_Node_Str"");
          documentIdEntity.setDocumentProcessed(1);
          documentIdEntity.setArchiveStage(0);
          documentflag=2;
          sessionAttributes.put(""String_Node_Str"",documentflag);
        }
 else {
          documentIdEntity.setDocumentStatus(""String_Node_Str"");
          documentIdEntity.setInboundStage(0);
          documentIdEntity.setDocumentProcessed(1);
          documentflag=5;
          sessionAttributes.put(""String_Node_Str"",documentflag);
        }
        documentsService.updateDocument(documentIdEntity);
        sessionAttributes.put(""String_Node_Str"",documentIdEntity.getReferenceId());
      }
    }
  }
 else {
    sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
    documentflag=4;
    sessionAttributes.put(""String_Node_Str"",documentflag);
    return INPUT;
  }
  return SUCCESS;
}","public String processDocuments(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  System.out.println(""String_Node_Str"" + check);
  System.out.println(""String_Node_Str"" + document.getDocumentItem());
  System.out.println(""String_Node_Str"" + orderIdParam);
  System.out.println(""String_Node_Str"" + (Integer)sessionAttributes.get(""String_Node_Str""));
  if (check != null) {
    if (document.getDocumentItem().equals(""String_Node_Str"")) {
      for (int i=0; i < check.length; i++) {
        if (check[i].equals(""String_Node_Str"") || check[i].equals(null) || ""String_Node_Str"".equals(check[i])) {
          sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
          documentflag=7;
          sessionAttributes.put(""String_Node_Str"",documentflag);
          return INPUT;
        }
        Integer documentId=Integer.parseInt(check[i]);
        Documents documentIdEntity=documentsService.findDocumentById(documentId);
        if (documentIdEntity.getDocumentName().equals(""String_Node_Str"") && ""String_Node_Str"".equals(documentIdEntity.getReferenceNumber()) || documentIdEntity.getDocumentName().equals(""String_Node_Str"") && documentIdEntity.getReferenceNumber() == null || ""String_Node_Str"".equals(documentIdEntity.getReferenceNumber()) || documentIdEntity.getReferenceNumber() == null) {
          documentIdEntity.setDocumentStatus(""String_Node_Str"");
          documentflag=1;
          sessionAttributes.put(""String_Node_Str"",documentflag);
        }
 else         if (documentIdEntity.getDocumentName().equals(""String_Node_Str"") && documentIdEntity.getReferenceNumber() != null) {
          documentIdEntity.setDocumentStatus(""String_Node_Str"");
          documentIdEntity.setDocumentProcessed(1);
          documentIdEntity.setArchiveStage(0);
          documentflag=2;
          sessionAttributes.put(""String_Node_Str"",documentflag);
        }
 else {
          documentIdEntity.setDocumentStatus(""String_Node_Str"");
          documentIdEntity.setInboundStage(0);
          documentIdEntity.setDocumentProcessed(1);
          documentflag=5;
          sessionAttributes.put(""String_Node_Str"",documentflag);
        }
        documentsService.updateDocument(documentIdEntity);
        sessionAttributes.put(""String_Node_Str"",documentIdEntity.getReferenceId());
      }
    }
  }
 else {
    sessionAttributes.put(""String_Node_Str"",sessionAttributes.get(""String_Node_Str""));
    documentflag=4;
    sessionAttributes.put(""String_Node_Str"",documentflag);
    return INPUT;
  }
  return SUCCESS;
}",0.978978978978979
144455,"public String createdDocumentDestination(){
  List<Documents> documentsList=new ArrayList<Documents>();
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorDestination());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorDestination())) {
        vendorCodeDocument.add(everyItem.getVendorDestination());
      }
    }
  }
  List<Documents> proforma=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (itemVendor != null) {
      if (proforma.size() == 0) {
        Documents documentEntity=new Documents();
        Client client=clientService.findClientById(getClientId().toString());
        documentEntity.setClient(client);
        documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_DESTINATION);
        documentEntity.setReferenceId(orderEntity.getOrderId());
        documentEntity.setReferenceTable(""String_Node_Str"");
        documentEntity.setOrderNumber(orderEntity.getOrderNumber());
        documentEntity.setCreatedDate(new Date());
        documentEntity.setDocumentStatus(""String_Node_Str"");
        documentEntity.setVendorCode(itemVendor);
        documentEntity.setReferenceNumber(orderEntity.getOrderNumber());
        documentEntity.setFinalOutboundStage(0);
        documentEntity.setDocumentProcessed(2);
        documentEntity.setCreatedBy(commonUtils.getUserNameFromSession());
        documentsService.addDocuments(documentEntity);
      }
 else {
        clearErrorsAndMessages();
        addActionError(""String_Node_Str"");
        for (        OrderItems orderItemsElem : orderItemsList) {
          orderItems.add(transformToOrderItemFormBean(orderItemsElem));
        }
        return INPUT;
      }
    }
 else {
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}","public String createdDocumentDestination(){
  List<Documents> documentsList=new ArrayList<Documents>();
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorDestination());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorDestination())) {
        vendorCodeDocument.add(everyItem.getVendorDestination());
      }
    }
  }
  List<Documents> waybillDestination=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (itemVendor != null) {
      if (waybillDestination.size() == 0) {
        Documents documentEntity=new Documents();
        Client client=clientService.findClientById(getClientId().toString());
        documentEntity.setClient(client);
        documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_DESTINATION);
        documentEntity.setReferenceId(orderEntity.getOrderId());
        documentEntity.setReferenceTable(""String_Node_Str"");
        documentEntity.setOrderNumber(orderEntity.getOrderNumber());
        documentEntity.setCreatedDate(new Date());
        documentEntity.setDocumentStatus(""String_Node_Str"");
        documentEntity.setVendorCode(itemVendor);
        documentEntity.setFinalOutboundStage(0);
        documentEntity.setDocumentProcessed(2);
        documentEntity.setCreatedBy(commonUtils.getUserNameFromSession());
        documentsService.addDocuments(documentEntity);
      }
 else {
        clearErrorsAndMessages();
        addActionError(""String_Node_Str"");
        for (        OrderItems orderItemsElem : orderItemsList) {
          orderItems.add(transformToOrderItemFormBean(orderItemsElem));
        }
        return INPUT;
      }
    }
 else {
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}",0.9758080123862976
144456,"public Container(Integer containerId,String eirType,String eirNumber,String portCode,String receiptNumber,Date dateTime,String shipping,String trucking,String plateNumber,String vanNumber,String driver,String bookingNum,String orderNumber,String remarks,String vanTo,String vanFrom,String createdBy,Date createdTimestamp,String modifiedBy,Date modifiedTimestamp,String containerNumber,String containerSize,String containerType,String sealNumber,String vanLocation,String ladenEmpty,String containerStatus,String forkliftOperator,String operationsDept){
  this.containerId=containerId;
  this.eirType=eirType;
  this.eirNumber=eirNumber;
  this.portCode=portCode;
  this.receiptNumber=receiptNumber;
  this.dateTime=dateTime;
  this.shipping=shipping;
  this.trucking=trucking;
  this.plateNumber=plateNumber;
  this.vanNumber=vanNumber;
  this.driver=driver;
  this.bookingNum=bookingNum;
  this.orderNumber=orderNumber;
  this.remarks=remarks;
  this.vanTo=vanTo;
  this.vanFrom=vanFrom;
  this.createdBy=createdBy;
  this.createdTimestamp=createdTimestamp;
  this.modifiedBy=modifiedBy;
  this.modifiedTimestamp=modifiedTimestamp;
  this.containerNumber=containerNumber;
  this.containerSize=containerSize;
  this.containerType=containerType;
  this.sealNumber=sealNumber;
  this.vanLocation=vanLocation;
  this.ladenEmpty=ladenEmpty;
  this.containerStatus=containerStatus;
  this.forkliftOperator=forkliftOperator;
  this.operationsDept=operationsDept;
}","public Container(Integer containerId,Client clientId,String eirType,String eirNumber,String portCode,String receiptNumber,Date dateTime,String shipping,String trucking,String plateNumber,String vanNumber,String driver,String orderNumber,String remarks,String vanTo,String vanFrom,String createdBy,Date createdTimestamp,String modifiedBy,Date modifiedTimestamp,String containerNumber,String containerSize,String containerType,String sealNumber,String vanLocation,String ladenEmpty,String containerStatus,String forkliftOperator,String operationsDept){
  this.containerId=containerId;
  this.clientId=clientId;
  this.eirType=eirType;
  this.eirNumber=eirNumber;
  this.portCode=portCode;
  this.receiptNumber=receiptNumber;
  this.dateTime=dateTime;
  this.shipping=shipping;
  this.trucking=trucking;
  this.plateNumber=plateNumber;
  this.vanNumber=vanNumber;
  this.driver=driver;
  this.orderNumber=orderNumber;
  this.remarks=remarks;
  this.vanTo=vanTo;
  this.vanFrom=vanFrom;
  this.createdBy=createdBy;
  this.createdTimestamp=createdTimestamp;
  this.modifiedBy=modifiedBy;
  this.modifiedTimestamp=modifiedTimestamp;
  this.containerNumber=containerNumber;
  this.containerSize=containerSize;
  this.containerType=containerType;
  this.sealNumber=sealNumber;
  this.vanLocation=vanLocation;
  this.ladenEmpty=ladenEmpty;
  this.containerStatus=containerStatus;
  this.forkliftOperator=forkliftOperator;
  this.operationsDept=operationsDept;
}",0.9690721649484536
144457,"@Override public List<Vendor> findAllShippingVendor(){
  log.debug(""String_Node_Str"");
  try {
    return getSessionFactory().getCurrentSession().createQuery(""String_Node_Str"").list();
  }
 catch (  RuntimeException re) {
    log.error(""String_Node_Str"",re);
    throw re;
  }
}","@Override public List<Vendor> findAllShippingVendor(){
  List<String> vendorTypeList=new ArrayList<>();
  vendorTypeList.add(""String_Node_Str"");
  log.debug(""String_Node_Str"");
  try {
    log.debug(""String_Node_Str"");
    Query query=getSessionFactory().getCurrentSession().createQuery(""String_Node_Str"");
    query.setParameterList(""String_Node_Str"",vendorTypeList);
    List<Vendor> results=(List<Vendor>)query.list();
    return results;
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"");
    throw e;
  }
}",0.6292134831460674
144458,"public ContainerBean transformContainerToFormBean(Container entity){
  ContainerBean formBean=new ContainerBean();
  formBean.setContainerId(entity.getContainerId());
  formBean.setEirNumber(entity.getEirNumber());
  formBean.setPortCode(entity.getPortCode());
  formBean.setDateTime(entity.getDateTime());
  formBean.setShipping(entity.getShipping());
  formBean.setTrucking(entity.getTrucking());
  formBean.setPlateNumber(entity.getPlateNumber());
  formBean.setVanNumber(entity.getVanNumber());
  formBean.setDriver(entity.getDriver());
  formBean.setOrderNumber(entity.getOrderNumber());
  formBean.setRemarks(entity.getRemarks());
  formBean.setVanTo(entity.getVanTo());
  formBean.setVanFrom(entity.getVanFrom());
  formBean.setContainerNumber(entity.getContainerNumber());
  formBean.setContainerSize(entity.getContainerSize());
  formBean.setContainerType(entity.getContainerType());
  formBean.setEirType(entity.getEirType());
  formBean.setSealNumber(entity.getSealNumber());
  formBean.setVanLocation(entity.getVanLocation());
  formBean.setLadenEmpty(entity.getLadenEmpty());
  formBean.setBookingNum(entity.getBookingNum());
  formBean.setReceiptNumber(entity.getReceiptNumber());
  formBean.setLadenEmpty(entity.getLadenEmpty());
  formBean.setForkliftOperator(entity.getForkliftOperator());
  formBean.setOperationsDept(entity.getOperationsDept());
  formBean.setContainerStatus(entity.getContainerStatus());
  return formBean;
}","public ContainerBean transformContainerToFormBean(Container entity){
  ContainerBean formBean=new ContainerBean();
  formBean.setContainerId(entity.getContainerId());
  formBean.setEirNumber(entity.getEirNumber());
  formBean.setPortCode(entity.getPortCode());
  formBean.setDateTime(entity.getDateTime());
  formBean.setShipping(entity.getShipping());
  formBean.setTrucking(entity.getTrucking());
  formBean.setPlateNumber(entity.getPlateNumber());
  formBean.setVanNumber(entity.getVanNumber());
  formBean.setDriver(entity.getDriver());
  formBean.setOrderNumber(entity.getOrderNumber());
  formBean.setRemarks(entity.getRemarks());
  formBean.setVanTo(entity.getVanTo());
  formBean.setVanFrom(entity.getVanFrom());
  formBean.setContainerNumber(entity.getContainerNumber());
  formBean.setContainerSize(entity.getContainerSize());
  formBean.setContainerType(entity.getContainerType());
  formBean.setEirType(entity.getEirType());
  formBean.setSealNumber(entity.getSealNumber());
  formBean.setVanLocation(entity.getVanLocation());
  formBean.setLadenEmpty(entity.getLadenEmpty());
  formBean.setReceiptNumber(entity.getReceiptNumber());
  formBean.setLadenEmpty(entity.getLadenEmpty());
  formBean.setForkliftOperator(entity.getForkliftOperator());
  formBean.setOperationsDept(entity.getOperationsDept());
  formBean.setContainerStatus(entity.getContainerStatus());
  return formBean;
}",0.9823943661971832
144459,"public String createdDocumentDestination(){
  List<Documents> documentsList=new ArrayList<Documents>();
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorDestination());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorDestination())) {
        vendorCodeDocument.add(everyItem.getVendorDestination());
      }
    }
  }
  List<Documents> proforma=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (proforma.size() == 0) {
      Documents documentEntity=new Documents();
      documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_DESTINATION);
      documentEntity.setReferenceId(orderEntity.getOrderId());
      documentEntity.setReferenceTable(""String_Node_Str"");
      documentEntity.setOrderNumber(orderEntity.getOrderNumber());
      documentEntity.setCreatedDate(new Date());
      documentEntity.setDocumentStatus(""String_Node_Str"");
      documentEntity.setVendorCode(itemVendor);
      documentEntity.setReferenceNumber(orderEntity.getOrderNumber());
      documentEntity.setFinalOutboundStage(0);
      documentEntity.setDocumentProcessed(2);
      documentsService.addDocuments(documentEntity);
    }
 else {
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}","public String createdDocumentDestination(){
  List<Documents> documentsList=new ArrayList<Documents>();
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorDestination());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorDestination())) {
        vendorCodeDocument.add(everyItem.getVendorDestination());
      }
    }
  }
  List<Documents> proforma=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (itemVendor != null) {
      if (proforma.size() == 0) {
        Documents documentEntity=new Documents();
        Client client=clientService.findClientById(getClientId().toString());
        documentEntity.setClient(client);
        documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_DESTINATION);
        documentEntity.setReferenceId(orderEntity.getOrderId());
        documentEntity.setReferenceTable(""String_Node_Str"");
        documentEntity.setOrderNumber(orderEntity.getOrderNumber());
        documentEntity.setCreatedDate(new Date());
        documentEntity.setDocumentStatus(""String_Node_Str"");
        documentEntity.setVendorCode(itemVendor);
        documentEntity.setReferenceNumber(orderEntity.getOrderNumber());
        documentEntity.setFinalOutboundStage(0);
        documentEntity.setDocumentProcessed(2);
        documentsService.addDocuments(documentEntity);
      }
 else {
        clearErrorsAndMessages();
        addActionError(""String_Node_Str"");
        for (        OrderItems orderItemsElem : orderItemsList) {
          orderItems.add(transformToOrderItemFormBean(orderItemsElem));
        }
        return INPUT;
      }
    }
 else {
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}",0.8991778450887062
144460,"public String createdDocumentsSea(){
  List<Documents> documentsList=new ArrayList<Documents>();
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorSea());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorSea())) {
        vendorCodeDocument.add(everyItem.getVendorSea());
      }
    }
  }
  List<Documents> proforma=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  List<Documents> houseWayBill=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (proforma.size() == 0) {
      Documents documentEntityProforma=new Documents();
      Client client=clientService.findClientById(getClientId().toString());
      documentEntityProforma.setClient(client);
      documentEntityProforma.setDocumentName(DocumentsConstants.PROFORMA_BILL_OF_LADING);
      documentEntityProforma.setReferenceId(orderEntity.getOrderId());
      documentEntityProforma.setReferenceTable(""String_Node_Str"");
      documentEntityProforma.setOrderNumber(orderEntity.getOrderNumber());
      documentEntityProforma.setCreatedDate(new Date());
      documentEntityProforma.setDocumentStatus(""String_Node_Str"");
      documentEntityProforma.setVendorCode(itemVendor);
      documentEntityProforma.setOutboundStage(1);
      documentEntityProforma.setDocumentProcessed(0);
      documentsService.addDocuments(documentEntityProforma);
    }
 else {
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  if (houseWayBill.size() == 0) {
    Documents documentEntityHouse=new Documents();
    Client client=clientService.findClientById(getClientId().toString());
    documentEntityHouse.setClient(client);
    documentEntityHouse.setDocumentName(DocumentsConstants.HOUSE_BILL_OF_LADING);
    documentEntityHouse.setReferenceId(orderEntity.getOrderId());
    documentEntityHouse.setReferenceTable(""String_Node_Str"");
    documentEntityHouse.setOrderNumber(orderEntity.getOrderNumber());
    documentEntityHouse.setCreatedDate(new Date());
    documentEntityHouse.setDocumentStatus(""String_Node_Str"");
    documentEntityHouse.setVendorCode(""String_Node_Str"");
    documentEntityHouse.setOutboundStage(1);
    documentEntityHouse.setDocumentProcessed(0);
    documentsService.addDocuments(documentEntityHouse);
  }
 else {
    clearErrorsAndMessages();
    addActionError(""String_Node_Str"");
    for (    OrderItems orderItemsElem : orderItemsList) {
      orderItems.add(transformToOrderItemFormBean(orderItemsElem));
    }
    return INPUT;
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}","public String createdDocumentsSea(){
  List<Documents> documentsList=new ArrayList<Documents>();
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorSea());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorSea())) {
        vendorCodeDocument.add(everyItem.getVendorSea());
      }
    }
  }
  List<Documents> proforma=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (itemVendor != null) {
      if (proforma.size() == 0) {
        Documents documentEntityProforma=new Documents();
        Client client=clientService.findClientById(getClientId().toString());
        documentEntityProforma.setClient(client);
        documentEntityProforma.setDocumentName(DocumentsConstants.PROFORMA_BILL_OF_LADING);
        documentEntityProforma.setReferenceId(orderEntity.getOrderId());
        documentEntityProforma.setReferenceTable(""String_Node_Str"");
        documentEntityProforma.setOrderNumber(orderEntity.getOrderNumber());
        documentEntityProforma.setCreatedDate(new Date());
        documentEntityProforma.setDocumentStatus(""String_Node_Str"");
        documentEntityProforma.setVendorCode(itemVendor);
        documentEntityProforma.setOutboundStage(1);
        documentEntityProforma.setDocumentProcessed(0);
        documentsService.addDocuments(documentEntityProforma);
      }
 else {
        clearErrorsAndMessages();
        addActionError(""String_Node_Str"");
        for (        OrderItems orderItemsElem : orderItemsList) {
          orderItems.add(transformToOrderItemFormBean(orderItemsElem));
        }
        return INPUT;
      }
    }
 else {
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}",0.757901930633863
144461,"public String createdDocumentOrigin(){
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorOrigin());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorOrigin())) {
        vendorCodeDocument.add(everyItem.getVendorOrigin());
      }
    }
  }
  List<Documents> proforma=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (proforma.size() == 0) {
      Documents documentEntity=new Documents();
      Client client=clientService.findClientById(getClientId().toString());
      documentEntity.setClient(client);
      documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_ORIGIN);
      documentEntity.setReferenceId(orderEntity.getOrderId());
      documentEntity.setReferenceTable(""String_Node_Str"");
      documentEntity.setOrderNumber(orderEntity.getOrderNumber());
      documentEntity.setCreatedDate(new Date());
      documentEntity.setDocumentStatus(""String_Node_Str"");
      documentEntity.setVendorCode(itemVendor);
      documentEntity.setOutboundStage(1);
      documentEntity.setReferenceNumber(orderEntity.getOrderNumber());
      documentEntity.setDocumentProcessed(0);
      documentsService.addDocuments(documentEntity);
    }
 else {
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}","public String createdDocumentOrigin(){
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorOrigin());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorOrigin())) {
        vendorCodeDocument.add(everyItem.getVendorOrigin());
      }
    }
  }
  List<Documents> waybillOrigin=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (itemVendor != null) {
      if (waybillOrigin.size() == 0) {
        Documents documentEntity=new Documents();
        Client client=clientService.findClientById(getClientId().toString());
        documentEntity.setClient(client);
        documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_ORIGIN);
        documentEntity.setReferenceId(orderEntity.getOrderId());
        documentEntity.setReferenceTable(""String_Node_Str"");
        documentEntity.setOrderNumber(orderEntity.getOrderNumber());
        documentEntity.setCreatedDate(new Date());
        documentEntity.setDocumentStatus(""String_Node_Str"");
        documentEntity.setVendorCode(itemVendor);
        documentEntity.setOutboundStage(1);
        documentEntity.setReferenceNumber(orderEntity.getOrderNumber());
        documentEntity.setDocumentProcessed(0);
        documentsService.addDocuments(documentEntity);
      }
 else {
        clearErrorsAndMessages();
        addActionError(""String_Node_Str"");
        for (        OrderItems orderItemsElem : orderItemsList) {
          orderItems.add(transformToOrderItemFormBean(orderItemsElem));
        }
        return INPUT;
      }
    }
 else {
      clearErrorsAndMessages();
      addActionError(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}",0.9185639229422068
144462,public void addContainer(Container container);,public void addContainer(Container container) throws Exception ;,0.8363636363636363
144463,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContainer(Container container){
  containerDao.addContainer(container);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContainer(Container container) throws Exception {
  if (containerDao.findContainerByEIRNumber(container.getEirNumber()).size() > 0) {
    throw new ContainerAlreadyExistsException(container.getEirNumber());
  }
 else {
    containerDao.addContainer(container);
  }
}",0.5415860735009671
144464,"public String containerAdd(){
  Container containerEntity=transformContainerToEntityBean(container);
  containerService.addContainer(containerEntity);
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String containerAdd(){
  Container containerEntity=transformContainerToEntityBean(container);
  try {
    containerService.addContainer(containerEntity);
  }
 catch (  Exception e) {
    return INPUT;
  }
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.872651356993737
144465,"public String editOrderItemsSea(){
  Client client=clientService.findClientById(getClientId().toString());
  try {
    OrderItems entity=transformOrderItemToEntityBeanSea(operationsBean);
    entity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
    operationsService.updateOrderItem(entity);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}","public String editOrderItemsSea(){
  Client client=clientService.findClientById(getClientId().toString());
  try {
    OrderItems entity=transformOrderItemToEntityBeanSea(operationsBean);
    entity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
    operationsService.updateOrderItem(entity);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}",0.9471397538015932
144466,"public String createdDocumentsSea(){
  List<Documents> documentsList=new ArrayList<Documents>();
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorSea());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorSea())) {
        vendorCodeDocument.add(everyItem.getVendorSea());
      }
    }
  }
  List<Documents> proforma=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (proforma.size() == 0) {
      Documents documentEntity=new Documents();
      Client client=clientService.findClientById(getClientId().toString());
      documentEntity.setClient(client);
      documentEntity.setDocumentName(DocumentsConstants.PROFORMA_BILL_OF_LADING);
      documentEntity.setReferenceId(orderEntity.getOrderId());
      documentEntity.setReferenceTable(""String_Node_Str"");
      documentEntity.setOrderNumber(orderEntity.getOrderNumber());
      documentEntity.setCreatedDate(new Date());
      documentEntity.setDocumentStatus(""String_Node_Str"");
      documentEntity.setVendorCode(itemVendor);
      documentEntity.setOutboundStage(1);
      documentEntity.setDocumentProcessed(0);
      documentsService.addDocuments(documentEntity);
    }
 else {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}","public String createdDocumentsSea(){
  List<Documents> documentsList=new ArrayList<Documents>();
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorSea());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorSea())) {
        vendorCodeDocument.add(everyItem.getVendorSea());
      }
    }
  }
  List<Documents> proforma=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  List<Documents> houseWayBill=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (proforma.size() == 0) {
      Documents documentEntityProforma=new Documents();
      Client client=clientService.findClientById(getClientId().toString());
      documentEntityProforma.setClient(client);
      documentEntityProforma.setDocumentName(DocumentsConstants.PROFORMA_BILL_OF_LADING);
      documentEntityProforma.setReferenceId(orderEntity.getOrderId());
      documentEntityProforma.setReferenceTable(""String_Node_Str"");
      documentEntityProforma.setOrderNumber(orderEntity.getOrderNumber());
      documentEntityProforma.setCreatedDate(new Date());
      documentEntityProforma.setDocumentStatus(""String_Node_Str"");
      documentEntityProforma.setVendorCode(itemVendor);
      documentEntityProforma.setOutboundStage(1);
      documentEntityProforma.setDocumentProcessed(0);
      documentsService.addDocuments(documentEntityProforma);
    }
 else {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  if (houseWayBill.size() == 0) {
    Documents documentEntityHouse=new Documents();
    Client client=clientService.findClientById(getClientId().toString());
    documentEntityHouse.setClient(client);
    documentEntityHouse.setDocumentName(DocumentsConstants.HOUSE_BILL_OF_LADING);
    documentEntityHouse.setReferenceId(orderEntity.getOrderId());
    documentEntityHouse.setReferenceTable(""String_Node_Str"");
    documentEntityHouse.setOrderNumber(orderEntity.getOrderNumber());
    documentEntityHouse.setCreatedDate(new Date());
    documentEntityHouse.setDocumentStatus(""String_Node_Str"");
    documentEntityHouse.setVendorCode(""String_Node_Str"");
    documentEntityHouse.setOutboundStage(1);
    documentEntityHouse.setDocumentProcessed(0);
    documentsService.addDocuments(documentEntityHouse);
  }
 else {
    clearErrorsAndMessages();
    addActionMessage(""String_Node_Str"");
    for (    OrderItems orderItemsElem : orderItemsList) {
      orderItems.add(transformToOrderItemFormBean(orderItemsElem));
    }
    return INPUT;
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}",0.7568562488496227
144467,"public String editBulkItems(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorSea(vendorIdParam.toString());
      orderItemEntity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}","public String editBulkItems(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorSea(vendorIdParam.toString());
      orderItemEntity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
 else         if (""String_Node_Str"".equals(modeOfService)) {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
 else {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}",0.8332875583630871
144468,"public String editOrderItemsDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    OrderItems entity=transformOrderItemToEntityBeanDestination(operationsBean);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
    Documents documentEntity=new Documents();
    Client client=clientService.findClientById(getClientId().toString());
    documentEntity.setClient(client);
    documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_DESTINATION);
    documentEntity.setReferenceId(orderEntity.getOrderId());
    documentEntity.setReferenceTable(""String_Node_Str"");
    documentEntity.setOrderNumber(orderEntity.getOrderNumber());
    documentEntity.setReferenceNumber(orderEntity.getOrderNumber());
    documentEntity.setCreatedDate(new Date());
    documentEntity.setDocumentStatus(""String_Node_Str"");
    documentEntity.setFinalOutboundStage(1);
    documentEntity.setDocumentProcessed(0);
    documentEntity.setOrderItemId(entity.getOrderItemId());
    documentsService.addDocuments(documentEntity);
    operationsService.updateOrderItem(entity);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  return SUCCESS;
}","public String editOrderItemsDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    OrderItems entity=transformOrderItemToEntityBeanDestination(operationsBean);
    operationsService.updateOrderItem(entity);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  return SUCCESS;
}",0.4461440407903123
144469,"public String editOrderItemsOrigin(){
  try {
    OrderItems entity=transformOrderItemToEntityBeanOrigin(operationsBean);
    operationsService.updateOrderItem(entity);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
    Documents documentEntity=new Documents();
    Client client=clientService.findClientById(getClientId().toString());
    documentEntity.setClient(client);
    documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_ORIGIN);
    documentEntity.setReferenceId(orderEntity.getOrderId());
    documentEntity.setReferenceTable(""String_Node_Str"");
    documentEntity.setOrderNumber(orderEntity.getOrderNumber());
    documentEntity.setReferenceNumber(orderEntity.getOrderNumber());
    documentEntity.setCreatedDate(new Date());
    documentEntity.setDocumentStatus(""String_Node_Str"");
    documentEntity.setOutboundStage(1);
    documentEntity.setDocumentProcessed(0);
    documentEntity.setOrderItemId(entity.getOrderItemId());
    documentsService.addDocuments(documentEntity);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  return SUCCESS;
}","public String editOrderItemsOrigin(){
  try {
    OrderItems entity=transformOrderItemToEntityBeanOrigin(operationsBean);
    operationsService.updateOrderItem(entity);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  return SUCCESS;
}",0.4696356275303643
144470,"public String updateCompleteSeaPlanning(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  Orders orderEntity=orderService.findOrdersById(orderId);
  orderEntity.setOrderStatus(""String_Node_Str"");
  orderService.updateOrder(orderEntity);
  order=transformToOrderFormBean(orderEntity);
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderId);
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  Documents documentEntity=new Documents();
  Client client=clientService.findClientById(getClientId().toString());
  documentEntity.setClient(client);
  documentEntity.setDocumentName(DocumentsConstants.PROFORMA_BILL_OF_LADING);
  documentEntity.setReferenceId(orderEntity.getOrderId());
  documentEntity.setReferenceTable(""String_Node_Str"");
  documentEntity.setOrderNumber(orderEntity.getOrderNumber());
  documentEntity.setCreatedDate(new Date());
  documentEntity.setDocumentStatus(""String_Node_Str"");
  documentEntity.setOutboundStage(1);
  documentEntity.setDocumentProcessed(0);
  documentsService.addDocuments(documentEntity);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String updateCompleteSeaPlanning(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  Orders orderEntity=orderService.findOrdersById(orderId);
  orderEntity.setOrderStatus(""String_Node_Str"");
  orderService.updateOrder(orderEntity);
  order=transformToOrderFormBean(orderEntity);
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderId);
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}",0.6497259591429995
144471,"public String editBulkItemsInlandDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorDestination(operationsBean.getVendorListDestination().toString());
      orderItemEntity.setDriverDestination(operationsBean.getDriverDestination());
      orderItemEntity.setTruckDestination(operationsBean.getTruckDestination());
      orderItemEntity.setFinalDeliveryDate(operationsBean.getDeliveryDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  return SUCCESS;
}","public String editBulkItemsInlandDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorDestination(operationsBean.getVendorListDestination().toString());
      orderItemEntity.setDriverDestination(operationsBean.getDriverDestination());
      orderItemEntity.setTruckDestination(operationsBean.getTruckDestination());
      orderItemEntity.setFinalDeliveryDate(operationsBean.getDeliveryDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}",0.9703028521023228
144472,"public String createdDocumentOrigin(){
  List<Documents> documentsList=new ArrayList<Documents>();
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorOrigin());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorOrigin())) {
        vendorCodeDocument.add(everyItem.getVendorOrigin());
      }
    }
  }
  List<Documents> proforma=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (proforma.size() == 0) {
      Documents documentEntity=new Documents();
      Client client=clientService.findClientById(getClientId().toString());
      documentEntity.setClient(client);
      documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_ORIGIN);
      documentEntity.setReferenceId(orderEntity.getOrderId());
      documentEntity.setReferenceTable(""String_Node_Str"");
      documentEntity.setOrderNumber(orderEntity.getOrderNumber());
      documentEntity.setCreatedDate(new Date());
      documentEntity.setDocumentStatus(""String_Node_Str"");
      documentEntity.setVendorCode(itemVendor);
      documentEntity.setOutboundStage(1);
      documentEntity.setReferenceNumber(orderIdParam.toString());
      documentEntity.setDocumentProcessed(0);
      documentsService.addDocuments(documentEntity);
    }
 else {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}","public String createdDocumentOrigin(){
  List<String> vendorCodeDocument=new ArrayList<String>();
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderIdParam);
  for (  OrderItems everyItem : orderItemsList) {
    if (vendorCodeDocument.isEmpty()) {
      vendorCodeDocument.add(everyItem.getVendorOrigin());
    }
 else {
      if (!vendorCodeDocument.contains(everyItem.getVendorOrigin())) {
        vendorCodeDocument.add(everyItem.getVendorOrigin());
      }
    }
  }
  List<Documents> proforma=documentsService.findDocumentNameAndId(""String_Node_Str"",orderIdParam);
  for (  String itemVendor : vendorCodeDocument) {
    if (proforma.size() == 0) {
      Documents documentEntity=new Documents();
      Client client=clientService.findClientById(getClientId().toString());
      documentEntity.setClient(client);
      documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_ORIGIN);
      documentEntity.setReferenceId(orderEntity.getOrderId());
      documentEntity.setReferenceTable(""String_Node_Str"");
      documentEntity.setOrderNumber(orderEntity.getOrderNumber());
      documentEntity.setCreatedDate(new Date());
      documentEntity.setDocumentStatus(""String_Node_Str"");
      documentEntity.setVendorCode(itemVendor);
      documentEntity.setOutboundStage(1);
      documentEntity.setReferenceNumber(orderIdParam.toString());
      documentEntity.setDocumentProcessed(0);
      documentsService.addDocuments(documentEntity);
    }
 else {
      clearErrorsAndMessages();
      addActionMessage(""String_Node_Str"");
      for (      OrderItems orderItemsElem : orderItemsList) {
        orderItems.add(transformToOrderItemFormBean(orderItemsElem));
      }
      return INPUT;
    }
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  return SUCCESS;
}",0.985981308411215
144473,"public String editBulkItemsInlandOrigin(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorOrigin(operationsBean.getVendorListOrigin().toString());
      orderItemEntity.setDriverOrigin(operationsBean.getDriverOrigin());
      orderItemEntity.setTruckOrigin(operationsBean.getTruckOrigin());
      orderItemEntity.setFinalPickupDate(operationsBean.getPickupDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}","public String editBulkItemsInlandOrigin(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorOrigin(operationsBean.getVendorListOrigin().toString());
      orderItemEntity.setDriverOrigin(operationsBean.getDriverOrigin());
      orderItemEntity.setTruckOrigin(operationsBean.getTruckOrigin());
      orderItemEntity.setFinalPickupDate(operationsBean.getPickupDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  return SUCCESS;
}",0.9300361881785284
144474,"public String editBulkItems(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorSea(vendorIdParam.toString());
      orderItemEntity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
 else         if (""String_Node_Str"".equals(modeOfService)) {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
 else {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}","public String editBulkItems(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorSea(vendorService.findVendorById(vendorIdParam).getVendorCode());
      orderItemEntity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
 else         if (""String_Node_Str"".equals(modeOfService)) {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
 else {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}",0.9872749099639856
144475,"public String editBulkItemsInlandDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorDestination(operationsBean.getVendorListDestination().toString());
      orderItemEntity.setDriverDestination(operationsBean.getDriverDestination());
      orderItemEntity.setTruckDestination(operationsBean.getTruckDestination());
      orderItemEntity.setFinalDeliveryDate(operationsBean.getDeliveryDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}","public String editBulkItemsInlandDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorDestination(vendorService.findVendorById(operationsBean.getVendorListDestination()).getVendorCode());
      orderItemEntity.setDriverDestination(operationsBean.getDriverDestination());
      orderItemEntity.setTruckDestination(operationsBean.getTruckDestination());
      orderItemEntity.setFinalDeliveryDate(operationsBean.getDeliveryDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}",0.9841079460269864
144476,"public String editBulkItemsInlandOrigin(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorOrigin(operationsBean.getVendorListOrigin().toString());
      orderItemEntity.setDriverOrigin(operationsBean.getDriverOrigin());
      orderItemEntity.setTruckOrigin(operationsBean.getTruckOrigin());
      orderItemEntity.setFinalPickupDate(operationsBean.getPickupDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  return SUCCESS;
}","public String editBulkItemsInlandOrigin(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorOrigin(vendorService.findVendorById(operationsBean.getVendorListOrigin()).getVendorCode());
      orderItemEntity.setDriverOrigin(operationsBean.getDriverOrigin());
      orderItemEntity.setTruckOrigin(operationsBean.getTruckOrigin());
      orderItemEntity.setFinalPickupDate(operationsBean.getPickupDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          if (""String_Node_Str"".equals(orderItemEntity.getStatus())) {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
 else {
            orderItemEntity.setStatus(""String_Node_Str"");
          }
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  return SUCCESS;
}",0.9846153846153848
144477,"public String editOrderItemsSea(){
  Client client=clientService.findClientById(getClientId().toString());
  try {
    OrderItems entity=transformOrderItemToEntityBeanSea(operationsBean);
    entity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
    operationsService.updateOrderItem(entity);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
    Documents documentEntity=new Documents();
    documentEntity.setClient(client);
    documentEntity.setDocumentName(DocumentsConstants.PROFORMA_BILL_OF_LADING);
    documentEntity.setReferenceId(orderEntity.getOrderId());
    documentEntity.setVendorCode(entity.getVendorSea());
    documentEntity.setReferenceTable(""String_Node_Str"");
    documentEntity.setOrderNumber(orderEntity.getOrderNumber());
    documentEntity.setCreatedDate(new Date());
    documentEntity.setDocumentStatus(""String_Node_Str"");
    documentEntity.setDocumentProcessed(0);
    documentsService.addDocuments(documentEntity);
    Documents documentEntity2=new Documents();
    documentEntity2.setClient(client);
    documentEntity2.setDocumentName(DocumentsConstants.HOUSE_BILL_OF_LADING);
    documentEntity2.setReferenceId(orderEntity.getOrderId());
    documentEntity2.setVendorCode(entity.getVendorSea());
    documentEntity2.setReferenceTable(""String_Node_Str"");
    documentEntity2.setOrderNumber(orderEntity.getOrderNumber());
    documentEntity2.setCreatedDate(new Date());
    documentEntity2.setDocumentStatus(""String_Node_Str"");
    documentEntity2.setDocumentProcessed(0);
    documentsService.addDocuments(documentEntity2);
    if (orderEntity.getServiceMode().equals(""String_Node_Str"") && orderEntity.getServiceMode().equals(""String_Node_Str"")) {
      Documents documentEntity3=new Documents();
      documentEntity3.setClient(client);
      documentEntity3.setDocumentName(DocumentsConstants.ACCEPTANCE_RECEIPT);
      documentEntity3.setReferenceId(orderEntity.getOrderId());
      documentEntity3.setReferenceTable(""String_Node_Str"");
      documentEntity3.setOrderNumber(orderEntity.getOrderNumber());
      documentEntity3.setCreatedDate(new Date());
      documentEntity3.setDocumentStatus(""String_Node_Str"");
      documentEntity3.setDocumentProcessed(0);
      documentsService.addDocuments(documentEntity3);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}","public String editOrderItemsSea(){
  Client client=clientService.findClientById(getClientId().toString());
  try {
    OrderItems entity=transformOrderItemToEntityBeanSea(operationsBean);
    entity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
    operationsService.updateOrderItem(entity);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}",0.4315820718314039
144478,"public String editBulkItems(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorSea(vendorIdParam.toString());
      orderItemEntity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  Documents documentEntity=new Documents();
  Client client=clientService.findClientById(getClientId().toString());
  documentEntity.setClient(client);
  documentEntity.setDocumentName(DocumentsConstants.PROFORMA_BILL_OF_LADING);
  documentEntity.setReferenceId(orderEntity.getOrderId());
  documentEntity.setReferenceTable(""String_Node_Str"");
  documentEntity.setOrderNumber(orderEntity.getOrderNumber());
  documentEntity.setCreatedDate(new Date());
  documentEntity.setDocumentStatus(""String_Node_Str"");
  documentEntity.setDocumentProcessed(0);
  documentsService.addDocuments(documentEntity);
  Documents documentEntity2=new Documents();
  documentEntity2.setClient(client);
  documentEntity2.setDocumentName(DocumentsConstants.HOUSE_BILL_OF_LADING);
  documentEntity2.setReferenceId(orderEntity.getOrderId());
  documentEntity2.setReferenceTable(""String_Node_Str"");
  documentEntity2.setOrderNumber(orderEntity.getOrderNumber());
  documentEntity2.setCreatedDate(new Date());
  documentEntity2.setDocumentStatus(""String_Node_Str"");
  documentEntity2.setDocumentProcessed(0);
  documentsService.addDocuments(documentEntity2);
  return SUCCESS;
}","public String editBulkItems(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorSea(vendorIdParam.toString());
      orderItemEntity.setVesselScheduleId(vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam).getVoyageNumber());
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  Documents documentEntity=new Documents();
  Client client=clientService.findClientById(getClientId().toString());
  documentEntity.setClient(client);
  documentEntity.setDocumentName(DocumentsConstants.PROFORMA_BILL_OF_LADING);
  documentEntity.setReferenceId(orderEntity.getOrderId());
  documentEntity.setReferenceTable(""String_Node_Str"");
  documentEntity.setOrderNumber(orderEntity.getOrderNumber());
  documentEntity.setCreatedDate(new Date());
  documentEntity.setDocumentStatus(""String_Node_Str"");
  documentEntity.setDocumentProcessed(0);
  documentsService.addDocuments(documentEntity);
  return SUCCESS;
}",0.8951406649616368
144479,"public String editOrderItemsDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    OrderItems entity=transformOrderItemToEntityBeanDestination(operationsBean);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
    Documents documentEntity=new Documents();
    Client client=clientService.findClientById(getClientId().toString());
    documentEntity.setClient(client);
    documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_DESTINATION);
    documentEntity.setReferenceId(orderEntity.getOrderId());
    documentEntity.setReferenceTable(""String_Node_Str"");
    documentEntity.setOrderNumber(orderEntity.getOrderNumber());
    documentEntity.setCreatedDate(new Date());
    documentEntity.setDocumentStatus(""String_Node_Str"");
    documentEntity.setDocumentProcessed(0);
    documentsService.addDocuments(documentEntity);
    operationsService.updateOrderItem(entity);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  return SUCCESS;
}","public String editOrderItemsDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    OrderItems entity=transformOrderItemToEntityBeanDestination(operationsBean);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
    operationsService.updateOrderItem(entity);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  return SUCCESS;
}",0.5762942779291553
144480,"public String editOrderItemsOrigin(){
  try {
    OrderItems entity=transformOrderItemToEntityBeanOrigin(operationsBean);
    operationsService.updateOrderItem(entity);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
    Documents documentEntity=new Documents();
    Client client=clientService.findClientById(getClientId().toString());
    documentEntity.setClient(client);
    documentEntity.setDocumentName(DocumentsConstants.HOUSE_WAYBILL_ORIGIN);
    documentEntity.setReferenceId(orderEntity.getOrderId());
    documentEntity.setReferenceTable(""String_Node_Str"");
    documentEntity.setOrderNumber(orderEntity.getOrderNumber());
    documentEntity.setCreatedDate(new Date());
    documentEntity.setDocumentStatus(""String_Node_Str"");
    documentEntity.setDocumentProcessed(0);
    documentsService.addDocuments(documentEntity);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  return SUCCESS;
}","public String editOrderItemsOrigin(){
  try {
    OrderItems entity=transformOrderItemToEntityBeanOrigin(operationsBean);
    operationsService.updateOrderItem(entity);
    Orders orderEntity=orderService.findOrdersById(entity.getOrderId());
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  return SUCCESS;
}",0.5300837776085301
144481,"public String editBulkItemsInlandDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorDestination(operationsBean.getVendorListDestination().toString());
      orderItemEntity.setDriverDestination(operationsBean.getDriverDestination());
      orderItemEntity.setTruckDestination(operationsBean.getTruckDestination());
      orderItemEntity.setFinalDeliveryDate(operationsBean.getDeliveryDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  Documents documentEntity=new Documents();
  Client client=clientService.findClientById(getClientId().toString());
  documentEntity.setClient(client);
  documentEntity.setDocumentName(DocumentsConstants.PROFORMA_BILL_OF_LADING);
  documentEntity.setReferenceId(orderEntity.getOrderId());
  documentEntity.setReferenceTable(""String_Node_Str"");
  documentEntity.setOrderNumber(orderEntity.getOrderNumber());
  documentEntity.setCreatedDate(new Date());
  documentEntity.setDocumentStatus(""String_Node_Str"");
  documentEntity.setDocumentProcessed(0);
  documentsService.addDocuments(documentEntity);
  return SUCCESS;
}","public String editBulkItemsInlandDestination(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorDestination(operationsBean.getVendorListDestination().toString());
      orderItemEntity.setDriverDestination(operationsBean.getDriverDestination());
      orderItemEntity.setTruckDestination(operationsBean.getTruckDestination());
      orderItemEntity.setFinalDeliveryDate(operationsBean.getDeliveryDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  return SUCCESS;
}",0.8541463414634146
144482,"public String editBulkItemsInlandOrigin(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorOrigin(operationsBean.getVendorListOrigin().toString());
      orderItemEntity.setDriverOrigin(operationsBean.getDriverOrigin());
      orderItemEntity.setTruckOrigin(operationsBean.getTruckOrigin());
      orderItemEntity.setFinalPickupDate(operationsBean.getPickupDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  Documents documentEntity=new Documents();
  Client client=clientService.findClientById(getClientId().toString());
  documentEntity.setClient(client);
  documentEntity.setDocumentName(DocumentsConstants.PROFORMA_BILL_OF_LADING);
  documentEntity.setReferenceId(orderEntity.getOrderId());
  documentEntity.setReferenceTable(""String_Node_Str"");
  documentEntity.setOrderNumber(orderEntity.getOrderNumber());
  documentEntity.setCreatedDate(new Date());
  documentEntity.setDocumentStatus(""String_Node_Str"");
  documentEntity.setDocumentProcessed(0);
  documentsService.addDocuments(documentEntity);
  return SUCCESS;
}","public String editBulkItemsInlandOrigin(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  try {
    String[] checkedItemsInSession=(String[])sessionAttributes.get(""String_Node_Str"");
    for (    String value : checkedItemsInSession) {
      String modeOfService=sessionAttributes.get(""String_Node_Str"").toString();
      String freightType=sessionAttributes.get(""String_Node_Str"").toString();
      Integer orderItemId=Integer.parseInt(value);
      OrderItems orderItemEntity=orderService.findOrderItemByOrderItemId(orderItemId);
      orderItemEntity.setOrderItemId(orderItemId);
      orderItemEntity.setVendorOrigin(operationsBean.getVendorListOrigin().toString());
      orderItemEntity.setDriverOrigin(operationsBean.getDriverOrigin());
      orderItemEntity.setTruckOrigin(operationsBean.getTruckOrigin());
      orderItemEntity.setFinalPickupDate(operationsBean.getPickupDate());
      orderItemEntity.setClientId(1);
      if (""String_Node_Str"".equals(freightType)) {
        if (""String_Node_Str"".equals(modeOfService)) {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
 else {
          orderItemEntity.setStatus(""String_Node_Str"");
        }
      }
      if (""String_Node_Str"".equals(freightType)) {
        orderItemEntity.setStatus(""String_Node_Str"");
      }
      operationsService.updateOrderItem(orderItemEntity);
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return INPUT;
  }
  sessionAttributes.put(""String_Node_Str"",vendorIdParam);
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  return SUCCESS;
}",0.8217291507268554
144483,"public Driver transformToEntityBeanDriver(DriverBean driverBean){
  Driver entity=new Driver();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  if (driverBean.getDriverId() != null) {
    entity.setDriverId(driverBean.getDriverId());
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  entity.setVendorId(driverBean.getVendorId());
  entity.setLicenseNumber(driverBean.getLicenseNumber());
  entity.setLastName(driverBean.getLastName());
  entity.setFirstName(driverBean.getFirstName());
  entity.setMiddleName(driverBean.getMiddleName());
  entity.setTitle(driverBean.getTitle());
  entity.setStatus(driverBean.getStatus());
  entity.setCreatedBy(driverBean.getCreatedBy());
  entity.setCreatedTimestamp(driverBean.getCreatedTimeStamp());
  return entity;
}","public Driver transformToEntityBeanDriver(DriverBean driverBean){
  Driver entity=new Driver();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  if (driverBean.getDriverId() != null) {
    entity.setDriverId(driverBean.getDriverId());
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  entity.setVendorId(driverBean.getVendorId());
  entity.setLicenseNumber(driverBean.getLicenseNumber());
  entity.setLastName(driverBean.getLastName());
  entity.setFirstName(driverBean.getFirstName());
  entity.setMiddleName(driverBean.getMiddleName());
  entity.setTitle(driverBean.getTitle());
  entity.setStatus(driverBean.getStatus());
  entity.setCreatedBy(commonUtils.getUserNameFromSession());
  entity.setCreatedTimestamp(driverBean.getCreatedTimeStamp());
  return entity;
}",0.9205020920502092
144484,"public String checkItemStatus(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  System.out.println(""String_Node_Str"" + check.length);
  for (int i=0; i < check.length; i++) {
    Integer orderItemId=Integer.parseInt(check[i]);
    OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
    if (""String_Node_Str"".equals(entity.getStatus())) {
      planning1.add(orderItemId);
      if (planning2.size() > 0 || planning3.size() > 0) {
        return INPUT;
      }
    }
 else     if (""String_Node_Str"".equals(entity.getStatus())) {
      planning2.add(orderItemId);
      if (planning1.size() > 0 || planning3.size() > 0) {
        return INPUT;
      }
    }
 else     if (""String_Node_Str"".equals(entity.getStatus())) {
      planning3.add(orderItemId);
      if (planning1.size() > 0 || planning2.size() > 0) {
        return INPUT;
      }
    }
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  sessionAttributes.put(""String_Node_Str"",check);
  order=transformToOrderFormBean(orderEntity);
  if (planning1.size() > 0) {
    return ""String_Node_Str"";
  }
 else   if (planning2.size() > 0) {
    return ""String_Node_Str"";
  }
 else   if (planning3.size() > 0) {
    return ""String_Node_Str"";
  }
  return INPUT;
}","public String checkItemStatus(){
  List<Integer> planning1=new ArrayList();
  List<Integer> planning2=new ArrayList();
  List<Integer> planning3=new ArrayList();
  if (check == null) {
    return INPUT;
  }
 else {
    for (int i=0; i < check.length; i++) {
      Integer orderItemId=Integer.parseInt(check[i]);
      OrderItems entity=orderService.findOrderItemByOrderItemId(orderItemId);
      if (""String_Node_Str"".equals(entity.getStatus())) {
        planning1.add(orderItemId);
        if (planning2.size() > 0 || planning3.size() > 0) {
          return INPUT;
        }
      }
 else       if (""String_Node_Str"".equals(entity.getStatus())) {
        planning2.add(orderItemId);
        if (planning1.size() > 0 || planning3.size() > 0) {
          return INPUT;
        }
      }
 else       if (""String_Node_Str"".equals(entity.getStatus())) {
        planning3.add(orderItemId);
        if (planning1.size() > 0 || planning2.size() > 0) {
          return INPUT;
        }
      }
    }
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntity=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  sessionAttributes.put(""String_Node_Str"",check);
  order=transformToOrderFormBean(orderEntity);
  if (planning1.size() > 0) {
    return ""String_Node_Str"";
  }
 else   if (planning2.size() > 0) {
    return ""String_Node_Str"";
  }
 else   if (planning3.size() > 0) {
    return ""String_Node_Str"";
  }
 else {
    return INPUT;
  }
}",0.9465440926115084
144485,"public String getNotifications(){
  notificationService.CountAll();
  return SUCCESS;
}","public String getNotifications(){
  notificationService.CountAll();
  BigInteger count=notificationService.CountAll();
  System.out.println(""String_Node_Str"");
  byte[] bArray;
  if (count != null) {
    inputStream=new ByteArrayInputStream(count.toString().getBytes());
  }
 else {
    inputStream=new ByteArrayInputStream(""String_Node_Str"".getBytes());
  }
  return SUCCESS;
}",0.3741935483870968
144486,"public String customerAction(){
  List<Contacts> shipperContacts=customerService.findContactByRefIdAndType(""String_Node_Str"",customerID);
  for (int i=0; i < shipperContacts.size(); i++) {
    customerContactsMap.put(shipperContacts.get(i).getContactId(),shipperContacts.get(i).getFirstName() + ' ' + shipperContacts.get(i).getMiddleName()+ ' '+ shipperContacts.get(i).getLastName());
  }
  List<Address> shipperAddresses=customerService.findAddressByShipper(""String_Node_Str"",customerID);
  for (int i=0; i < shipperAddresses.size(); i++) {
    customerAddressMap.put(shipperAddresses.get(i).getAddressId(),shipperAddresses.get(i).getAddressLine1() + ' ' + shipperAddresses.get(i).getCity());
  }
  List<Contacts> shipperConsignee=customerService.findContactByRefIdAndType(""String_Node_Str"",customerID);
  for (int i=0; i < shipperConsignee.size(); i++) {
    customerConsigneeMap.put(shipperConsignee.get(i).getContactId(),shipperConsignee.get(i).getFirstName() + ' ' + shipperConsignee.get(i).getMiddleName()+ ' '+ shipperConsignee.get(i).getLastName());
  }
  List<Address> consigneeAddresses=customerService.findAddressByCriteria(""String_Node_Str"",customerID);
  for (int i=0; i < consigneeAddresses.size(); i++) {
    consigneeAddressMap.put(consigneeAddresses.get(i).getAddressId(),consigneeAddresses.get(i).getAddressLine1() + ' ' + consigneeAddresses.get(i).getAddressLine2()+ ' '+ consigneeAddresses.get(i).getCity());
  }
  return SUCCESS;
}","public String customerAction(){
  List<Contacts> shipperContacts=customerService.findContactByRefIdAndType(""String_Node_Str"",customerID);
  for (int i=0; i < shipperContacts.size(); i++) {
    customerContactsMap.put(shipperContacts.get(i).getContactId(),shipperContacts.get(i).getFirstName() + ' ' + shipperContacts.get(i).getMiddleName()+ ' '+ shipperContacts.get(i).getLastName());
  }
  List<Address> shipperAddresses=customerService.findAddressByShipper(""String_Node_Str"",customerID);
  for (int i=0; i < shipperAddresses.size(); i++) {
    customerAddressMap.put(shipperAddresses.get(i).getAddressId(),shipperAddresses.get(i).getAddressLine1() + ' ' + shipperAddresses.get(i).getCity());
  }
  List<Contacts> shipperConsignee=customerService.findContactByRefIdAndType(""String_Node_Str"",customerID);
  for (int i=0; i < shipperConsignee.size(); i++) {
    customerConsigneeMap.put(shipperConsignee.get(i).getContactId(),shipperConsignee.get(i).getFirstName() + ' ' + shipperConsignee.get(i).getMiddleName()+ ' '+ shipperConsignee.get(i).getLastName());
  }
  List<Address> consigneeAddresses=customerService.findAddressByCriteria(""String_Node_Str"",customerID);
  for (int i=0; i < consigneeAddresses.size(); i++) {
    consigneeAddressMap.put(consigneeAddresses.get(i).getAddressId(),consigneeAddresses.get(i).getAddressLine1() + ' ' + consigneeAddresses.get(i).getAddressLine2()+ ' '+ consigneeAddresses.get(i).getCity());
  }
  dummyMsg=""String_Node_Str"";
  return SUCCESS;
}",0.9897750511247444
144487,"public String updateCompleteInlandPlanning(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderId);
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String updateCompleteInlandPlanning(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Integer orderId=(Integer)sessionAttributes.get(""String_Node_Str"");
  Orders orderEntity=orderService.findOrdersById(orderId);
  order=transformToOrderFormBean(orderEntity);
  List<OrderItems> orderItemsList=new ArrayList<OrderItems>();
  orderItemsList=operationsService.findAllOrderItemsByOrderId(orderId);
  for (  OrderItems orderItemsElem : orderItemsList) {
    orderItems.add(transformToOrderItemFormBean(orderItemsElem));
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.9084628670120898
144488,"@Override public void updateParameter(Parameters param){
  log.debug(""String_Node_Str"");
  try {
    Session session=getSessionFactory().getCurrentSession();
    Query query=session.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",param.getValue());
    query.setParameter(""String_Node_Str"",param.getValue());
    query.setParameter(""String_Node_Str"",param.getParameterId());
    int result=query.executeUpdate();
    log.debug(""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    log.error(""String_Node_Str"",re);
    throw re;
  }
}","@Override public void updateParameter(Parameters param){
  log.debug(""String_Node_Str"");
  try {
    Session session=getSessionFactory().getCurrentSession();
    Query query=session.createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",param.getValue().toUpperCase());
    query.setParameter(""String_Node_Str"",param.getValue());
    query.setParameter(""String_Node_Str"",param.getValue());
    query.setParameter(""String_Node_Str"",param.getParameterId());
    int result=query.executeUpdate();
    log.debug(""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    log.error(""String_Node_Str"",re);
    throw re;
  }
}",0.9385382059800664
144489,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addDriver(Driver driver) throws DriverAlreadyExistsException {
  if (driverDao.findDriverByDriverCode(driver.getDriverCode()).size() > 0) {
    throw new DriverAlreadyExistsException(driver.getDriverCode());
  }
 else {
    driver.setDateHired(new Date());
    driverDao.addDriver(driver);
  }
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addDriver(Driver driver) throws DriverAlreadyExistsException {
  if (driverDao.findDriverByLicense(driver.getLicenseNumber()).size() > 0) {
    throw new DriverAlreadyExistsException(driver.getDriverCode());
  }
 else {
    driver.setDateHired(new Date());
    driverDao.addDriver(driver);
  }
}",0.5459317585301837
144490,"private void addPermissionsToUser(Integer userId){
  PermissionUserGroup permissionUserGroup;
  findCurrentUserPermissions(userId);
  for (  String permissionId : preSelectedPermissions) {
    permissionUserGroup=permissionService.findPermissionUserGroup(getClientId(),getClientId(),userId,Integer.parseInt(permissionId));
    if (permissionUserGroup != null) {
      permissionService.deletePermissionOfUser(permissionUserGroup);
    }
  }
  String[] permissionIdArray=permissionsSelected.split(""String_Node_Str"");
  for (  String permissionId : permissionIdArray) {
    permissionUserGroup=new PermissionUserGroup();
    permissionUserGroup.setClientId(getClientId());
    permissionUserGroup.setGroupId(getClientId());
    permissionUserGroup.setUserId(userId);
    permissionUserGroup.setPermissionId(Integer.parseInt(permissionId.trim()));
    permissionService.addPermissionToUser(permissionUserGroup);
  }
}","private void addPermissionsToUser(Integer userId){
  PermissionUserGroup permissionUserGroup;
  findCurrentUserPermissions(userId);
  for (  String permissionId : preSelectedPermissions) {
    permissionUserGroup=permissionService.findPermissionUserGroup(getClientId(),getClientId(),userId,Integer.parseInt(permissionId));
    if (permissionUserGroup != null) {
      permissionService.deletePermissionOfUser(permissionUserGroup);
    }
  }
  if (permissionsSelected == null) {
    System.out.print(""String_Node_Str"");
  }
 else {
    String permissionId=permissionsSelected.trim();
    permissionUserGroup=new PermissionUserGroup();
    permissionUserGroup.setClientId(getClientId());
    permissionUserGroup.setGroupId(getClientId());
    permissionUserGroup.setUserId(userId);
    permissionUserGroup.setPermissionId(Integer.parseInt(permissionId));
    permissionService.addPermissionToUser(permissionUserGroup);
  }
}",0.5816993464052288
144491,"public void validateOnSubmitItem(ItemBean itemBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  String PATTERN2=""String_Node_Str"";
  String PATTERN3=""String_Node_Str"";
  String PATTERN4=""String_Node_Str"";
  Pattern pattern1=Pattern.compile(PATTERN);
  Pattern pattern2=Pattern.compile(PATTERN2);
  Pattern pattern3=Pattern.compile(PATTERN3);
  Pattern pattern4=Pattern.compile(PATTERN4);
  Matcher matcher=pattern3.matcher(itemBean.getItemCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher1=pattern4.matcher(itemBean.getItemName());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher2=pattern2.matcher(itemBean.getWeight().toString());
  if (!matcher2.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher4=pattern2.matcher(itemBean.getWidth().toString());
  if (!matcher4.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher5=pattern2.matcher(itemBean.getSrp().toString());
  if (!matcher5.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher6=pattern2.matcher(itemBean.getLength().toString());
  if (!matcher6.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher7=pattern2.matcher(itemBean.getHeight().toString());
  if (!matcher7.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getSrp() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getLength() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWidth() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWeight() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getDescription())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitItem(ItemBean itemBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  String PATTERN2=""String_Node_Str"";
  String PATTERN3=""String_Node_Str"";
  String PATTERN4=""String_Node_Str"";
  Pattern pattern1=Pattern.compile(PATTERN);
  Pattern pattern2=Pattern.compile(PATTERN2);
  Pattern pattern3=Pattern.compile(PATTERN3);
  Pattern pattern4=Pattern.compile(PATTERN4);
  Matcher matcher=pattern3.matcher(itemBean.getItemCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher1=pattern4.matcher(itemBean.getItemName());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher2=pattern2.matcher(itemBean.getWeight().toString());
  if (!matcher2.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher4=pattern2.matcher(itemBean.getWidth().toString());
  if (!matcher4.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher5=pattern2.matcher(itemBean.getSrp().toString());
  if (!matcher5.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher6=pattern2.matcher(itemBean.getLength().toString());
  if (!matcher6.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher7=pattern2.matcher(itemBean.getHeight().toString());
  if (!matcher7.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getSrp() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getLength() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWidth() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWeight() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.9727609500980606
144492,"public String deleteCustomer(){
  Customer customerEntity=customerService.findCustomerByCustomerCode(customerCodeParam);
  customerService.deleteCustomer(customerEntity);
  return SUCCESS;
}","public String deleteCustomer(){
  Customer customerEntity=customerService.findCustomerByCustomerCode(customerCodeParam);
  customerService.deleteCustomer(customerEntity);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.8501118568232662
144493,"public String deleteVendor(){
  Vendor vendorEntity=vendorService.findVendorByVendorCode(vendorCodeParam);
  vendorService.deleteVendor(vendorEntity);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String deleteVendor(){
  Vendor vendorEntity=vendorService.findVendorByVendorCode(vendorCodeParam);
  vendorService.deleteVendor(vendorEntity);
  return SUCCESS;
}",0.8353808353808354
144494,"public String addOrderInfo(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntityForm=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntityForm);
  Integer contactIdParam=orderEntityForm.getShipperContactId();
  Contacts contactEntity=customerService.findContactById(contactIdParam);
  Customer customerEntity=customerService.findCustomerById(contactEntity.getReferenceId());
  customerItems=customerService.findItemByCustomerId(customerEntity.getCustomerId());
  List<OrderItems> orderItemEntityList=orderService.findAllItemByOrderId((Integer)sessionAttributes.get(""String_Node_Str""));
  for (  OrderItems orderItemElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemsFormBean(orderItemElem));
  }
  sessionAttributes.put(""String_Node_Str"",customerItems);
  ctr=(Integer)sessionAttributes.get(ctr);
  System.out.println(""String_Node_Str"" + ctr);
  return SUCCESS;
}","public String addOrderInfo(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  Orders orderEntityForm=orderService.findOrdersById((Integer)sessionAttributes.get(""String_Node_Str""));
  order=transformToOrderFormBean(orderEntityForm);
  Integer contactIdParam=orderEntityForm.getShipperContactId();
  Contacts contactEntity=customerService.findContactById(contactIdParam);
  Customer customerEntity=customerService.findCustomerById(contactEntity.getReferenceId());
  customerItems=customerService.findItemByCustomerId(customerEntity.getCustomerId());
  List<OrderItems> orderItemEntityList=orderService.findAllItemByOrderId((Integer)sessionAttributes.get(""String_Node_Str""));
  for (  OrderItems orderItemElem : orderItemEntityList) {
    orderItems.add(transformToOrderItemsFormBean(orderItemElem));
  }
  sessionAttributes.put(""String_Node_Str"",customerItems);
  ctr=(Integer)sessionAttributes.get(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + ctr);
  return SUCCESS;
}",0.9899497487437184
144495,"private Orders transformToOrderEntityBean(OrderBean formBean){
  Orders entity=new Orders();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  entity.setOrderDate(new Date());
  entity.setServiceRequirement(formBean.getServiceRequirement());
  Customer customerEntity=customerService.findCustomerById(formBean.getCustomerId());
  custName=customerEntity.getCustomerName();
  custCode=customerEntity.getCustomerCode();
  orderNum=orderService.findNextBookingNo(getClientId(),custCode);
  if (formBean.getOrderNumber() != null) {
    entity.setOrderNumber(new String(formBean.getOrderNumber()));
  }
 else {
    entity.setOrderNumber(orderNum);
  }
  if (formBean.getOrderId() != null)   entity.setOrderId(new Integer(formBean.getOrderId()));
  entity.setServiceType(formBean.getFreightType());
  entity.setServiceMode(formBean.getModeOfService());
  entity.setNotificationType(formBean.getNotifyBy());
  entity.setPaymentMode(formBean.getModeOfPayment());
  entity.setOriginationPort(formBean.getOriginationPort());
  entity.setDestinationPort(formBean.getDestinationPort());
  entity.setComments(formBean.getComments());
  entity.setOrderStatus(""String_Node_Str"");
  entity.setRates(99.99);
  entity.setCreatedBy(commonUtils.getUserNameFromSession());
  entity.setAccountRep(commonUtils.getUserNameFromSession());
  entity.setModifiedBy(commonUtils.getUserNameFromSession());
  entity.setCreatedTimestamp(new Date());
  entity.setModifiedTimestamp(new Date());
  entity.setShipperAddressId(formBean.getShipperAddressId());
  entity.setShipperContactId(formBean.getShipperContactId());
  entity.setConsigneeAddressId(formBean.getConsigneeAddressId());
  entity.setConsigneeContactId(formBean.getConsigneeContactId());
  entity.setDeliveryDate(formBean.getDeliveryDate());
  entity.setPickupDate(formBean.getPickupDate());
  Contacts contactShipperName=customerService.findContactById(order.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  entity.setCustomerId(shipperName.getCustomerId());
  return entity;
}","private Orders transformToOrderEntityBean(OrderBean formBean){
  Orders entity=new Orders();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  entity.setOrderDate(new Date());
  entity.setServiceRequirement(formBean.getServiceRequirement());
  Customer customerEntity=customerService.findCustomerById(formBean.getCustomerId());
  custName=customerEntity.getCustomerName();
  custCode=customerEntity.getCustomerCode();
  orderNum=orderService.findNextBookingNo(getClientId(),custCode);
  if (formBean.getOrderNumber() != null) {
    entity.setOrderNumber(new String(formBean.getOrderNumber()));
  }
 else {
    entity.setOrderNumber(orderNum);
  }
  if (formBean.getOrderId() != null) {
    entity.setOrderId(new Integer(formBean.getOrderId()));
  }
  entity.setServiceType(formBean.getFreightType());
  entity.setServiceMode(formBean.getModeOfService());
  entity.setNotificationType(formBean.getNotifyBy());
  entity.setPaymentMode(formBean.getModeOfPayment());
  entity.setOriginationPort(formBean.getOriginationPort());
  entity.setDestinationPort(formBean.getDestinationPort());
  entity.setComments(formBean.getComments());
  entity.setOrderStatus(""String_Node_Str"");
  entity.setRates(99.99);
  entity.setCreatedBy(commonUtils.getUserNameFromSession());
  entity.setAccountRep(commonUtils.getUserNameFromSession());
  entity.setModifiedBy(commonUtils.getUserNameFromSession());
  entity.setCreatedTimestamp(new Date());
  entity.setModifiedTimestamp(new Date());
  entity.setShipperAddressId(formBean.getShipperAddressId());
  entity.setShipperContactId(formBean.getShipperContactId());
  entity.setConsigneeAddressId(formBean.getConsigneeAddressId());
  entity.setConsigneeContactId(formBean.getConsigneeContactId());
  entity.setDeliveryDate(formBean.getDeliveryDate());
  entity.setPickupDate(formBean.getPickupDate());
  Contacts contactShipperName=customerService.findContactById(order.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  entity.setCustomerId(shipperName.getCustomerId());
  return entity;
}",0.9981255857544518
144496,"public String addOrder(){
  Orders orderEntity=transformToOrderEntityBean(order);
  orderService.addOrder(orderEntity);
  orderIdPass=orderEntity.getOrderId();
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderIdPass);
  ctr=ctr + 1;
  sessionAttributes.put(""String_Node_Str"",ctr);
  System.out.println(""String_Node_Str"" + ctr);
  return SUCCESS;
}","public String addOrder(){
  Orders orderEntity=transformToOrderEntityBean(order);
  orderService.addOrder(orderEntity);
  orderIdPass=orderEntity.getOrderId();
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",orderIdPass);
  ctr=(Integer)sessionAttributes.get(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + ctr);
  sessionAttributes.put(""String_Node_Str"",ctr);
  return SUCCESS;
}",0.8329466357308585
144497,"public String viewOrders(){
  String column=getColumnFilter();
  List<Orders> orderEntityList=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    orderEntityList=orderService.findOrdersByCriteria(column,order.getOrderKeyword(),getClientId());
  }
 else {
    orderEntityList=orderService.findAllOrders();
  }
  for (  Orders orderElem : orderEntityList) {
    orders.add(transformToOrderFormBean(orderElem));
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  ctr=(Integer)sessionAttributes.get(ctr);
  return SUCCESS;
}","public String viewOrders(){
  String column=getColumnFilter();
  List<Orders> orderEntityList=new ArrayList<Orders>();
  if (StringUtils.isNotBlank(column)) {
    orderEntityList=orderService.findOrdersByCriteria(column,order.getOrderKeyword(),getClientId());
  }
 else {
    orderEntityList=orderService.findAllOrders();
  }
  for (  Orders orderElem : orderEntityList) {
    orders.add(transformToOrderFormBean(orderElem));
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  ctr=(Integer)sessionAttributes.get(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + ctr);
  return SUCCESS;
}",0.9480851063829788
144498,"public void setAaf(String aaf){
  this.aaf=aaf;
}","public void setAaf(int aaf){
  this.aaf=aaf;
}",0.9473684210526316
144499,"@Column(name=""String_Node_Str"") public String getMayorsPermit(){
  return mayorsPermit;
}","@Column(name=""String_Node_Str"") public int getMayorsPermit(){
  return mayorsPermit;
}",0.9714285714285714
144500,"public void setMayorsPermit(String mayorsPermit){
  this.mayorsPermit=mayorsPermit;
}","public void setMayorsPermit(int mayorsPermit){
  this.mayorsPermit=mayorsPermit;
}",0.9700598802395208
144501,"public void setSignatureCard(String signatureCard){
  this.signatureCard=signatureCard;
}","public void setSignatureCard(int signatureCard){
  this.signatureCard=signatureCard;
}",0.9714285714285714
144502,"public void setDti(String dti){
  this.dti=dti;
}","public void setDti(int dti){
  this.dti=dti;
}",0.9473684210526316
144503,"@Column(name=""String_Node_Str"") public String getAaf(){
  return aaf;
}","@Column(name=""String_Node_Str"") public int getAaf(){
  return aaf;
}",0.9640287769784172
144504,"@Column(name=""String_Node_Str"") public String getSignatureCard(){
  return signatureCard;
}","@Column(name=""String_Node_Str"") public int getSignatureCard(){
  return signatureCard;
}",0.9720670391061452
144505,"@Column(name=""String_Node_Str"") public String getDti(){
  return dti;
}","@Column(name=""String_Node_Str"") public int getDti(){
  return dti;
}",0.9640287769784172
144506,"public Items(Integer customerItemsId,Client client,Integer customerId,String itemName,String itemCode,Double length,Double width,Double height,Float srp,Integer criticalQuality,Float basePrice,String note,String description,Date createdTimeStamp,String createdBy,Date modifiedTimeStamp,String modifiedBy){
  this.customerItemsId=customerItemsId;
  this.client=client;
  this.customerId=customerId;
  this.itemName=itemName;
  this.itemCode=itemCode;
  this.length=length;
  this.width=width;
  this.height=height;
  this.srp=srp;
  this.criticalQuality=criticalQuality;
  this.basePrice=basePrice;
  this.note=note;
  this.description=description;
  this.createdTimeStamp=createdTimeStamp;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBy=modifiedBy;
}","public Items(Integer customerItemsId,Client client,Integer customerId,String itemName,String itemCode,Double length,Double width,Double height,Float srp,Integer criticalQuality,Float weight,String note,String description,Date createdTimeStamp,String createdBy,Date modifiedTimeStamp,String modifiedBy){
  this.customerItemsId=customerItemsId;
  this.client=client;
  this.customerId=customerId;
  this.itemName=itemName;
  this.itemCode=itemCode;
  this.length=length;
  this.width=width;
  this.height=height;
  this.srp=srp;
  this.criticalQuality=criticalQuality;
  this.weight=weight;
  this.note=note;
  this.description=description;
  this.createdTimeStamp=createdTimeStamp;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBy=modifiedBy;
}",0.9701965757767914
144507,"@Column(name=""String_Node_Str"") public Integer getWidth(){
  return width;
}","@Column(name=""String_Node_Str"") public Double getWidth(){
  return width;
}",0.9271523178807948
144508,"@Column(name=""String_Node_Str"") public Integer getHeight(){
  return height;
}","@Column(name=""String_Node_Str"") public Double getHeight(){
  return height;
}",0.9290322580645162
144509,"public Items(Integer customerItemsId,Client client,Integer customerId,String itemName,String itemCode,Integer length,Integer width,Integer height,Float srp,Integer criticalQuality,Float basePrice,String note,String description,Date createdTimeStamp,String createdBy,Date modifiedTimeStamp,String modifiedBy){
  this.customerItemsId=customerItemsId;
  this.client=client;
  this.customerId=customerId;
  this.itemName=itemName;
  this.itemCode=itemCode;
  this.length=length;
  this.width=width;
  this.height=height;
  this.srp=srp;
  this.criticalQuality=criticalQuality;
  this.basePrice=basePrice;
  this.note=note;
  this.description=description;
  this.createdTimeStamp=createdTimeStamp;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBy=modifiedBy;
}","public Items(Integer customerItemsId,Client client,Integer customerId,String itemName,String itemCode,Double length,Double width,Double height,Float srp,Integer criticalQuality,Float basePrice,String note,String description,Date createdTimeStamp,String createdBy,Date modifiedTimeStamp,String modifiedBy){
  this.customerItemsId=customerItemsId;
  this.client=client;
  this.customerId=customerId;
  this.itemName=itemName;
  this.itemCode=itemCode;
  this.length=length;
  this.width=width;
  this.height=height;
  this.srp=srp;
  this.criticalQuality=criticalQuality;
  this.basePrice=basePrice;
  this.note=note;
  this.description=description;
  this.createdTimeStamp=createdTimeStamp;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBy=modifiedBy;
}",0.9653870358716172
144510,"public void setWidth(Integer width){
  this.width=width;
}","public void setWidth(Double width){
  this.width=width;
}",0.9043478260869564
144511,"public void setHeight(Integer height){
  this.height=height;
}","public void setHeight(Double height){
  this.height=height;
}",0.9105691056910568
144512,"public void setLength(Integer length){
  this.length=length;
}","public void setLength(Double length){
  this.length=length;
}",0.9105691056910568
144513,"@Column(name=""String_Node_Str"") public Integer getLength(){
  return length;
}","@Column(name=""String_Node_Str"") public Double getLength(){
  return length;
}",0.9290322580645162
144514,"private Items initItem(){
  Client client=new Client(""String_Node_Str"",new Date(),""String_Node_Str"",new Date(),""String_Node_Str"");
  Items item=new Items();
  item.setClient(client);
  item.setCustomerId(6);
  item.setItemName(""String_Node_Str"");
  item.setItemCode(""String_Node_Str"");
  item.setLength(2);
  item.setWidth(2);
  item.setLength(2);
  item.setSrp(2.00F);
  item.setCriticalQuality(2);
  item.setBasePrice(2.00F);
  item.setNote(""String_Node_Str"");
  item.setDescription(""String_Node_Str"");
  return item;
}","private Items initItem(){
  Client client=new Client(""String_Node_Str"",new Date(),""String_Node_Str"",new Date(),""String_Node_Str"");
  Items item=new Items();
  item.setClient(client);
  item.setCustomerId(6);
  item.setItemName(""String_Node_Str"");
  item.setItemCode(""String_Node_Str"");
  item.setLength(2.0);
  item.setWidth(2.0);
  item.setLength(2.0);
  item.setSrp(2.00F);
  item.setCriticalQuality(2);
  item.setBasePrice(2.00F);
  item.setNote(""String_Node_Str"");
  item.setDescription(""String_Node_Str"");
  return item;
}",0.9942748091603052
144515,"public void validateOnSubmitItem(ItemBean itemBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  String PATTERN2=""String_Node_Str"";
  String PATTERN3=""String_Node_Str"";
  String PATTERN4=""String_Node_Str"";
  Pattern pattern1=Pattern.compile(PATTERN);
  Pattern pattern2=Pattern.compile(PATTERN2);
  Pattern pattern3=Pattern.compile(PATTERN3);
  Pattern pattern4=Pattern.compile(PATTERN4);
  Matcher matcher=pattern3.matcher(itemBean.getItemCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher1=pattern4.matcher(itemBean.getItemName());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher2=pattern2.matcher(itemBean.getBasePrice().toString());
  if (!matcher2.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher3=pattern2.matcher(itemBean.getCriticalQuality().toString());
  if (!matcher3.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher4=pattern2.matcher(itemBean.getWidth().toString());
  if (!matcher4.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher5=pattern2.matcher(itemBean.getSrp().toString());
  if (!matcher5.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher6=pattern2.matcher(itemBean.getLength().toString());
  if (!matcher6.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher7=pattern2.matcher(itemBean.getHeight().toString());
  if (!matcher7.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getSrp() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getLength() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWidth() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getBasePrice() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getDescription())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitItem(ItemBean itemBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  String PATTERN2=""String_Node_Str"";
  String PATTERN3=""String_Node_Str"";
  String PATTERN4=""String_Node_Str"";
  Pattern pattern1=Pattern.compile(PATTERN);
  Pattern pattern2=Pattern.compile(PATTERN2);
  Pattern pattern3=Pattern.compile(PATTERN3);
  Pattern pattern4=Pattern.compile(PATTERN4);
  Matcher matcher=pattern3.matcher(itemBean.getItemCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher1=pattern4.matcher(itemBean.getItemName());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher2=pattern2.matcher(itemBean.getBasePrice().toString());
  if (!matcher2.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher4=pattern2.matcher(itemBean.getWidth().toString());
  if (!matcher4.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher5=pattern2.matcher(itemBean.getSrp().toString());
  if (!matcher5.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher6=pattern2.matcher(itemBean.getLength().toString());
  if (!matcher6.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher7=pattern2.matcher(itemBean.getHeight().toString());
  if (!matcher7.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getSrp() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getLength() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWidth() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getBasePrice() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getDescription())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.963899653273506
144516,"public ItemBean(Integer customerItemsId,Integer customerId,String itemName,String itemCode,Integer length,Integer width,Integer height,Float srp,Integer criticalQuality,Float basePrice,String note,String description,Date createdTimeStamp,String createdBy,Date modifiedTimeStamp,String modifiedBy){
  this.customerItemsId=customerItemsId;
  this.customerId=customerId;
  this.itemName=itemName;
  this.itemCode=itemCode;
  this.length=length;
  this.width=width;
  this.height=height;
  this.srp=srp;
  this.criticalQuality=criticalQuality;
  this.basePrice=basePrice;
  this.note=note;
  this.description=description;
  this.createdTimeStamp=createdTimeStamp;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBy=modifiedBy;
}","public ItemBean(Integer customerItemsId,Integer customerId,String itemName,String itemCode,Double length,Double width,Double height,Float srp,Integer criticalQuality,Float basePrice,String note,String description,Date createdTimeStamp,String createdBy,Date modifiedTimeStamp,String modifiedBy){
  this.customerItemsId=customerItemsId;
  this.customerId=customerId;
  this.itemName=itemName;
  this.itemCode=itemCode;
  this.length=length;
  this.width=width;
  this.height=height;
  this.srp=srp;
  this.criticalQuality=criticalQuality;
  this.basePrice=basePrice;
  this.note=note;
  this.description=description;
  this.createdTimeStamp=createdTimeStamp;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBy=modifiedBy;
}",0.963887065003283
144517,"public Integer getWidth(){
  return width;
}","public Double getWidth(){
  return width;
}",0.8735632183908046
144518,"public Integer getHeight(){
  return height;
}","public Double getHeight(){
  return height;
}",0.8791208791208791
144519,"public void setWidth(Integer width){
  this.width=width;
}","public void setWidth(Double width){
  this.width=width;
}",0.9043478260869564
144520,"public void setHeight(Integer height){
  this.height=height;
}","public void setHeight(Double height){
  this.height=height;
}",0.9105691056910568
144521,"public void setLength(Integer length){
  this.length=length;
}","public void setLength(Double length){
  this.length=length;
}",0.9105691056910568
144522,"public Integer getLength(){
  return length;
}","public Double getLength(){
  return length;
}",0.8791208791208791
144523,"public Map<Integer,Integer> getShipperItemVolumeMap(){
  return shipperItemVolumeMap;
}","public Map<Double,Double> getShipperItemVolumeMap(){
  return shipperItemVolumeMap;
}",0.8604651162790697
144524,"private Contacts transformToEntityBeanContacts(ContactBean contactBean){
  Contacts entity=new Contacts();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  if (contactBean.getContactId() != null) {
    entity.setContactId(contactBean.getContactId());
  }
  entity.setReferenceId(contactBean.getReferenceId());
  entity.setReferenceTable(""String_Node_Str"");
  entity.setContactType(contactBean.getContactType());
  entity.setFirstName(contactBean.getFirstName());
  entity.setMiddleName(contactBean.getMiddleName());
  entity.setLastName(contactBean.getLastName());
  entity.setPhone(contactBean.getPhone());
  entity.setMobile(contactBean.getMobile());
  entity.setFax(contactBean.getFax());
  entity.setEmail(contactBean.getEmail());
  entity.setCreatedBy(contactBean.getCreatedBy());
  entity.setCreatedTimestamp(contactBean.getCreatedTimestamp());
  entity.setPosition(contactBean.getPosition());
  return entity;
}","private Contacts transformToEntityBeanContacts(ContactBean contactBean){
  Contacts entity=new Contacts();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  if (contactBean.getContactId() != null) {
    entity.setContactId(contactBean.getContactId());
  }
  entity.setReferenceId(contactBean.getReferenceId());
  entity.setReferenceTable(""String_Node_Str"");
  entity.setContactType(""String_Node_Str"");
  entity.setFirstName(contactBean.getFirstName());
  entity.setMiddleName(contactBean.getMiddleName());
  entity.setLastName(contactBean.getLastName());
  entity.setPhone(contactBean.getPhone());
  entity.setMobile(contactBean.getMobile());
  entity.setFax(contactBean.getFax());
  entity.setEmail(contactBean.getEmail());
  entity.setCreatedBy(contactBean.getCreatedBy());
  entity.setCreatedTimestamp(contactBean.getCreatedTimestamp());
  entity.setPosition(contactBean.getPosition());
  return entity;
}",0.9766960124287932
144525,"public void setShipperItemVolumeMap(Map<Integer,Integer> shipperItemVolumeMap){
  this.shipperItemVolumeMap=shipperItemVolumeMap;
}","public void setShipperItemVolumeMap(Map<Double,Double> shipperItemVolumeMap){
  this.shipperItemVolumeMap=shipperItemVolumeMap;
}",0.9076923076923076
144526,"public void validateOnSubmitDriver(DriverBean driverBean){
  clearErrorsAndMessages();
  String alpha=""String_Node_Str"";
  String alphaNumeric=""String_Node_Str"";
  Pattern namePattern=Pattern.compile(alpha);
  Pattern alphaNumericPattern=Pattern.compile(alphaNumeric);
  Matcher matcher=namePattern.matcher(driverBean.getLastName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getFirstName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getTitle());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=alphaNumericPattern.matcher(driverBean.getLicenseNumber());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(driverBean.getLicenseNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLastName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getFirstName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getTitle())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitDriver(DriverBean driverBean){
  clearErrorsAndMessages();
  String alpha=""String_Node_Str"";
  String alphaNumeric=""String_Node_Str"";
  String title=""String_Node_Str"";
  Pattern namePattern=Pattern.compile(alpha);
  Pattern alphaNumericPattern=Pattern.compile(alphaNumeric);
  Pattern stringtitle=Pattern.compile(title);
  Matcher matcher=namePattern.matcher(driverBean.getLastName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getFirstName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=stringtitle.matcher(driverBean.getTitle());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(driverBean.getLicenseNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLastName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getFirstName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getTitle())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.6711813393528969
144527,"private Orders transformToOrderEntityBean(OrderBean formBean){
  Orders entity=new Orders();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  entity.setOrderDate(new Date());
  entity.setServiceRequirement(formBean.getServiceRequirement());
  Customer customerEntity=customerService.findCustomerById(formBean.getCustomerId());
  custName=customerEntity.getCustomerName();
  custCode=customerEntity.getCustomerCode();
  orderNum=orderService.findNextBookingNo(getClientId(),custCode);
  if (formBean.getOrderNumber() != null) {
    entity.setOrderNumber(new String(formBean.getOrderNumber()));
  }
 else {
    entity.setOrderNumber(orderNum);
  }
  if (formBean.getOrderId() != null)   entity.setOrderId(new Integer(formBean.getOrderId()));
  entity.setServiceType(formBean.getFreightType());
  entity.setServiceMode(formBean.getModeOfService());
  entity.setNotificationType(formBean.getNotifyBy());
  entity.setPaymentMode(formBean.getModeOfPayment());
  entity.setOriginationPort(formBean.getOriginationPort());
  entity.setDestinationPort(formBean.getDestinationPort());
  entity.setComments(formBean.getComments());
  entity.setOrderStatus(""String_Node_Str"");
  entity.setRates(99.99);
  entity.setCreatedBy(commonUtils.getUserNameFromSession());
  entity.setAccountRep(commonUtils.getUserNameFromSession());
  entity.setModifiedBy(commonUtils.getUserNameFromSession());
  entity.setCreatedTimestamp(new Date());
  entity.setModifiedTimestamp(new Date());
  entity.setShipperAddressId(formBean.getShipperAddressId());
  entity.setShipperContactId(formBean.getShipperContactId());
  entity.setConsigneeAddressId(formBean.getConsigneeAddressId());
  entity.setConsigneeContactId(formBean.getConsigneeContactId());
  entity.setDeliveryDate(new Timestamp((formBean.getDeliveryDate()).getTime()));
  entity.setPickupDate(new Timestamp((formBean.getPickupDate()).getTime()));
  return entity;
}","private Orders transformToOrderEntityBean(OrderBean formBean){
  Orders entity=new Orders();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  entity.setOrderDate(new Date());
  entity.setServiceRequirement(formBean.getServiceRequirement());
  System.out.println(""String_Node_Str"" + formBean.getCustomerId());
  Customer customerEntity=customerService.findCustomerById(formBean.getCustomerId());
  custName=customerEntity.getCustomerName();
  custCode=customerEntity.getCustomerCode();
  orderNum=orderService.findNextBookingNo(getClientId(),custCode);
  if (formBean.getOrderNumber() != null) {
    entity.setOrderNumber(new String(formBean.getOrderNumber()));
  }
 else {
    entity.setOrderNumber(orderNum);
  }
  if (formBean.getOrderId() != null)   entity.setOrderId(new Integer(formBean.getOrderId()));
  entity.setServiceType(formBean.getFreightType());
  entity.setServiceMode(formBean.getModeOfService());
  entity.setNotificationType(formBean.getNotifyBy());
  entity.setPaymentMode(formBean.getModeOfPayment());
  entity.setOriginationPort(formBean.getOriginationPort());
  entity.setDestinationPort(formBean.getDestinationPort());
  entity.setComments(formBean.getComments());
  entity.setOrderStatus(""String_Node_Str"");
  entity.setRates(99.99);
  entity.setCreatedBy(commonUtils.getUserNameFromSession());
  entity.setAccountRep(commonUtils.getUserNameFromSession());
  entity.setModifiedBy(commonUtils.getUserNameFromSession());
  entity.setCreatedTimestamp(new Date());
  entity.setModifiedTimestamp(new Date());
  entity.setShipperAddressId(formBean.getShipperAddressId());
  entity.setShipperContactId(formBean.getShipperContactId());
  entity.setConsigneeAddressId(formBean.getConsigneeAddressId());
  entity.setConsigneeContactId(formBean.getConsigneeContactId());
  entity.setDeliveryDate(new Timestamp((formBean.getDeliveryDate()).getTime()));
  entity.setPickupDate(new Timestamp((formBean.getPickupDate()).getTime()));
  return entity;
}",0.9828196058615464
144528,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateDriver(Driver driver) throws DriverAlreadyExistsException {
  if (driverDao.findDriverByDriverCodeAndId(driver.getDriverCode(),driver.getDriverId()).size() > 0) {
    throw new DriverAlreadyExistsException(driver.getDriverCode());
  }
 else {
    driver.setDateHired(new Date());
    driverDao.updateDriver(driver);
  }
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateDriver(Driver driver) throws DriverAlreadyExistsException {
  if (driverDao.findDriverByLicenseAndId(driver.getLicenseNumber(),driver.getDriverId()).size() > 0) {
    throw new DriverAlreadyExistsException(driver.getLicenseNumber());
  }
 else {
    driver.setDateHired(new Date());
    driverDao.updateDriver(driver);
  }
}",0.9264173703256936
144529,"public String deleteDriver(){
  Driver driverEntity=vendorService.findDriverByDriverCode(driverCodeParam);
  vendorService.deleteDriver(driverEntity);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String deleteDriver(){
  Driver driverEntity=vendorService.findDriverById(driverIdParam);
  vendorService.deleteDriver(driverEntity);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.9310344827586208
144530,"public String loadEditDriverPage(){
  Integer vendorId=getSessionVendorId();
  List<Driver> driverEntityList=vendorService.findDriverByVendorId(vendorId);
  for (  Driver driverE1em : driverEntityList) {
    drivers.add(transformToFormBeanDriver(driverE1em));
  }
  Driver driverEntity=vendorService.findDriverByDriverCode(driverCodeParam);
  driver=transformToFormBeanDriver(driverEntity);
  return SUCCESS;
}","public String loadEditDriverPage(){
  Integer vendorId=getSessionVendorId();
  List<Driver> driverEntityList=vendorService.findDriverByVendorId(vendorId);
  for (  Driver driverE1em : driverEntityList) {
    drivers.add(transformToFormBeanDriver(driverE1em));
  }
  Driver driverEntity=vendorService.findDriverById(driverIdParam);
  driver=transformToFormBeanDriver(driverEntity);
  return SUCCESS;
}",0.9604938271604938
144531,"@Override public void prepare() throws Exception {
  customerList=customerService.findAllCustomer();
  serviceRequirementList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.SERVICE_REQUIREMENT);
  freightTypeList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.FREIGHT_TYPE);
  modeOfPaymentList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.MODE_OF_PAYMENT);
  modeOfServiceList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.MODE_OF_SERVICE);
  notifyByList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.NOTIFY_BY);
  orderSearchList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.ORDER_SEARCH);
  portsList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.PORTS);
  containerList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.CONTAINER_SIZE);
  containerQuantity=new ArrayList<Integer>();
  containerQuantity.add(1);
  containerQuantity.add(2);
  containerQuantity.add(3);
  containerQuantity.add(4);
  containerQuantity.add(5);
  itemQuantity=new ArrayList<Integer>();
  itemQuantity.add(1);
  itemQuantity.add(2);
  itemQuantity.add(3);
  itemQuantity.add(4);
  itemQuantity.add(5);
  itemQuantity.add(6);
  itemQuantity.add(7);
  itemQuantity.add(8);
  itemQuantity.add(9);
  itemQuantity.add(10);
}","@Override public void prepare() throws Exception {
  customerList=customerService.findAllCustomer();
  serviceRequirementList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.SERVICE_REQUIREMENT);
  freightTypeList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.FREIGHT_TYPE);
  modeOfPaymentList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.MODE_OF_PAYMENT);
  modeOfServiceList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.MODE_OF_SERVICE);
  notifyByList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.NOTIFY_BY);
  orderSearchList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.ORDER_SEARCH);
  portsList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.PORTS);
  containerList=parameterService.getParameterMap(ParameterConstants.ORDER,ParameterConstants.CONTAINER_SIZE);
  contactTypeList=parameterService.getParameterMap(ParameterConstants.CONTACT_TYPE);
  containerQuantity=new ArrayList<Integer>();
  containerQuantity.add(1);
  containerQuantity.add(2);
  containerQuantity.add(3);
  containerQuantity.add(4);
  containerQuantity.add(5);
  itemQuantity=new ArrayList<Integer>();
  itemQuantity.add(1);
  itemQuantity.add(2);
  itemQuantity.add(3);
  itemQuantity.add(4);
  itemQuantity.add(5);
  itemQuantity.add(6);
  itemQuantity.add(7);
  itemQuantity.add(8);
  itemQuantity.add(9);
  itemQuantity.add(10);
}",0.9714285714285714
144532,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addItem(Items items) throws ItemAlreadyExistsException {
  if (itemsDao.findUserByItemName(items.getItemName()).size() > 0)   throw new ItemAlreadyExistsException(items.getItemName());
 else   itemsDao.addItems(items);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addItem(Items items) throws ItemAlreadyExistsException {
  if (itemsDao.findUserByItemName(items.getItemCode()).size() > 0)   throw new ItemAlreadyExistsException(items.getItemName());
 else   itemsDao.addItems(items);
}",0.9901960784313726
144533,"public void validateOnSubmit(CustomerBean customerBean){
  clearErrorsAndMessages();
  String alpha=""String_Node_Str"";
  Pattern namePattern=Pattern.compile(alpha);
  Matcher matcher=namePattern.matcher(customerBean.getCustomerName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(customerBean.getCustomerName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getPhone())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getMobile())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getEmail())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmit(CustomerBean customerBean){
  clearErrorsAndMessages();
  if (StringUtils.isBlank(customerBean.getCustomerName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getPhone())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getMobile())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getEmail())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.8306165839829908
144534,"public String addVesselSchedule(){
  validateOnSubmit(vesselSchedule);
  if (hasFieldErrors()) {
    return INPUT;
  }
  VesselSchedules entity=transformToEntityBean(vesselSchedule);
  entity.setCreatedBy(commonUtils.getUserNameFromSession());
  entity.setCreatedTimestamp(new Date());
  entity.setModifiedBy(commonUtils.getUserNameFromSession());
  entity.setModifiedTimestamp(new Date());
  System.out.println(""String_Node_Str"" + entity.getVoyageNumber());
  vesselSchedulesService.addVesselSchedule(entity);
  return SUCCESS;
}","public String addVesselSchedule(){
  validateOnSubmit(vesselSchedule);
  if (hasFieldErrors()) {
    return INPUT;
  }
  try {
    VesselSchedules entity=transformToEntityBean(vesselSchedule);
    entity.setCreatedBy(commonUtils.getUserNameFromSession());
    entity.setCreatedTimestamp(new Date());
    entity.setModifiedBy(commonUtils.getUserNameFromSession());
    entity.setModifiedTimestamp(new Date());
    System.out.println(""String_Node_Str"" + entity.getVoyageNumber());
    vesselSchedulesService.addVesselSchedule(entity);
  }
 catch (  Exception e) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
    return INPUT;
  }
  return SUCCESS;
}",0.8915054667788057
144535,"public String editVesselSchedule(){
  validateOnSubmit(vesselSchedule);
  if (hasFieldErrors()) {
    return INPUT;
  }
  try {
    VesselSchedules entity=transformToEntityBean(vesselSchedule);
    entity.setModifiedBy(commonUtils.getUserNameFromSession());
    entity.setModifiedTimestamp(new Date());
    vesselSchedulesService.updateVesselSchedule(entity);
  }
 catch (  Exception e) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
    return INPUT;
  }
  return SUCCESS;
}","public String editVesselSchedule(){
  validateOnSubmit(vesselSchedule);
  if (hasFieldErrors()) {
    return INPUT;
  }
  VesselSchedules entity=transformToEntityBean(vesselSchedule);
  entity.setModifiedBy(commonUtils.getUserNameFromSession());
  entity.setModifiedTimestamp(new Date());
  vesselSchedulesService.updateVesselSchedule(entity);
  return SUCCESS;
}",0.8551236749116607
144536,"public void validateOnSubmitAddress(AddressBean addressBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  Pattern pattern=Pattern.compile(PATTERN);
  Matcher matcher1=pattern.matcher(addressBean.getZip());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (org.apache.commons.lang.StringUtils.isBlank(addressBean.getAddressLine1())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (org.apache.commons.lang.StringUtils.isBlank(addressBean.getCity())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (org.apache.commons.lang.StringUtils.isBlank(addressBean.getState())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitAddress(AddressBean addressBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  Pattern pattern=Pattern.compile(PATTERN);
  Matcher matcher1=pattern.matcher(addressBean.getZip());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (org.apache.commons.lang.StringUtils.isBlank(addressBean.getAddressLine1())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (org.apache.commons.lang.StringUtils.isBlank(addressBean.getCity())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.8954154727793696
144537,"public void validateOnSubmitAddress(AddressBean addressBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  Pattern pattern=Pattern.compile(PATTERN);
  Matcher matcher1=pattern.matcher(addressBean.getZip());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(addressBean.getAddressLine1())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(addressBean.getCity())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(addressBean.getState())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitAddress(AddressBean addressBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  Pattern pattern=Pattern.compile(PATTERN);
  Matcher matcher1=pattern.matcher(addressBean.getZip());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(addressBean.getAddressLine1())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(addressBean.getCity())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.9043887147335424
144538,"public String getColumnFilter(){
  String column=""String_Node_Str"";
  if (""String_Node_Str"".equals(vendor.getVendorSearchCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vendor.getVendorSearchCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vendor.getVendorSearchCriteria())) {
    column=""String_Node_Str"";
  }
  return column;
}","public String getColumnFilter(){
  String column=""String_Node_Str"";
  if (""String_Node_Str"".equals(vendor.getVendorSearchCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vendor.getVendorSearchCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vendor.getVendorSearchCriteria())) {
    column=""String_Node_Str"";
  }
 else   if (""String_Node_Str"".equals(vendor.getVendorSearchCriteria())) {
    column=""String_Node_Str"";
  }
  return column;
}",0.851528384279476
144539,"public void validateOnSubmitItem(ItemBean itemBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  String PATTERN2=""String_Node_Str"";
  String PATTERN3=""String_Node_Str"";
  Pattern pattern1=Pattern.compile(PATTERN);
  Pattern pattern2=Pattern.compile(PATTERN2);
  Pattern pattern3=Pattern.compile(PATTERN3);
  Matcher matcher=pattern3.matcher(itemBean.getItemCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getLength() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWidth() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getCriticalQuality() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getBasePrice() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getDescription())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitItem(ItemBean itemBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  String PATTERN2=""String_Node_Str"";
  String PATTERN3=""String_Node_Str"";
  String PATTERN4=""String_Node_Str"";
  Pattern pattern1=Pattern.compile(PATTERN);
  Pattern pattern2=Pattern.compile(PATTERN2);
  Pattern pattern3=Pattern.compile(PATTERN3);
  Pattern pattern4=Pattern.compile(PATTERN4);
  Matcher matcher=pattern3.matcher(itemBean.getItemCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher1=pattern4.matcher(itemBean.getItemName());
  if (!matcher1.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher2=pattern2.matcher(itemBean.getBasePrice().toString());
  if (!matcher2.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher3=pattern2.matcher(itemBean.getCriticalQuality().toString());
  if (!matcher3.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher4=pattern2.matcher(itemBean.getWidth().toString());
  if (!matcher4.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher5=pattern2.matcher(itemBean.getSrp().toString());
  if (!matcher5.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher6=pattern2.matcher(itemBean.getLength().toString());
  if (!matcher6.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  Matcher matcher7=pattern2.matcher(itemBean.getHeight().toString());
  if (!matcher7.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getItemName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getSrp() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getLength() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWidth() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getCriticalQuality() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getBasePrice() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getDescription())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.5650296815974096
144540,"public String viewPendingDocuments(){
  List<Orders> orderEntityList=new ArrayList<Orders>();
  orderEntityList=documentsService.findAllOrdersDocumentation();
  for (  Orders orderElem : orderEntityList) {
    orders.add(transformOrdersToFormBean(orderElem));
  }
  return SUCCESS;
}","public String viewPendingDocuments(){
  return SUCCESS;
}",0.3352941176470588
144541,"private OrderBean transformToOrderFormBean(Orders order){
  OrderBean orderBean=new OrderBean();
  orderBean.setOrderId(order.getOrderId());
  orderBean.setOrderNumber(order.getOrderNumber());
  orderBean.setFreightType(order.getServiceType());
  orderBean.setModeOfService(order.getServiceMode());
  orderBean.setNotifyBy(order.getNotificationType());
  orderBean.setOrderDate(order.getOrderDate());
  orderBean.setModeOfPayment(order.getPaymentMode());
  orderBean.setComments(order.getComments());
  orderBean.setOrderStatus(order.getOrderStatus());
  orderBean.setShipperCode(order.getVendorCode());
  orderBean.setTruckCode(order.getTruckCode());
  orderBean.setTrailerCode(order.getTrailerCode());
  orderBean.setDriverCode(order.getDriverCode());
  orderBean.setVesselNumber(order.getVesselNumber());
  orderBean.setShipperAddressId(order.getShipperAddressId());
  orderBean.setShipperContactId(order.getShipperContactId());
  Contacts shipperContactName=customerService.findContactById(order.getShipperContactId());
  orderBean.setShipperContactName(getFullName(shipperContactName.getLastName(),shipperContactName.getFirstName(),shipperContactName.getMiddleName()));
  orderBean.setConsigneeAddressId(order.getConsigneeAddressId());
  orderBean.setConsigneeContactId(order.getConsigneeContactId());
  Contacts consigneeContactName=customerService.findContactById(order.getConsigneeContactId());
  orderBean.setConsigneeName(getFullName(consigneeContactName.getLastName(),consigneeContactName.getFirstName(),consigneeContactName.getMiddleName()));
  orderBean.setAccountRep(order.getAccountRep());
  orderBean.setCreatedTimestamp(order.getCreatedTimestamp());
  orderBean.setCreatedBy(order.getCreatedBy());
  orderBean.setModifiedTimestamp(order.getModifiedTimestamp());
  orderBean.setModifiedBy(order.getModifiedBy());
  orderBean.setPickupDate(order.getPickupDate());
  orderBean.setOriginationPort(order.getOriginationPort());
  orderBean.setDeliveryDate(order.getDeliveryDate());
  orderBean.setDestinationPort(order.getDestinationPort());
  orderBean.setRates(order.getRates());
  orderBean.setServiceRequirement(order.getServiceRequirement());
  orderBean.setModeOfService(order.getServiceMode());
  Contacts contactShipperName=customerService.findContactById(order.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    orderBean.setCustomerId(shipperName.getCustomerId());
    orderBean.setCustomerName(shipperName.getCustomerName());
  }
 else {
    orderBean.setCustomerId(0);
    orderBean.setCustomerName(""String_Node_Str"");
  }
  orderBean.setPickupDate(order.getPickupDate());
  orderBean.setDeliveryDate(order.getDeliveryDate());
  Contacts contacts=customerService.findContactById(order.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  orderBean.setShipperInfoContact(contact);
  System.out.println(""String_Node_Str"" + order.getShipperAddressId());
  if (order.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(order.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    orderBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    orderBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(order.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  orderBean.setConsigneeInfoContact(contact);
  if (order.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(order.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    orderBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    orderBean.setConsigneeInfoAddress(address);
  }
  return orderBean;
}","private OrderBean transformToOrderFormBean(Orders order){
  OrderBean orderBean=new OrderBean();
  orderBean.setOrderId(order.getOrderId());
  orderBean.setOrderNumber(order.getOrderNumber());
  orderBean.setFreightType(order.getServiceType());
  orderBean.setModeOfService(order.getServiceMode());
  orderBean.setNotifyBy(order.getNotificationType());
  orderBean.setOrderDate(order.getOrderDate());
  orderBean.setModeOfPayment(order.getPaymentMode());
  orderBean.setComments(order.getComments());
  orderBean.setOrderStatus(order.getOrderStatus());
  orderBean.setShipperCode(order.getVendorCode());
  orderBean.setTruckCode(order.getTruckCode());
  orderBean.setTrailerCode(order.getTrailerCode());
  orderBean.setDriverCode(order.getDriverCode());
  orderBean.setVesselNumber(order.getVesselNumber());
  orderBean.setShipperAddressId(order.getShipperAddressId());
  orderBean.setShipperContactId(order.getShipperContactId());
  Contacts shipperContactName=customerService.findContactById(order.getShipperContactId());
  orderBean.setShipperContactName(getFullName(shipperContactName.getLastName(),shipperContactName.getFirstName(),shipperContactName.getMiddleName()));
  orderBean.setConsigneeAddressId(order.getConsigneeAddressId());
  orderBean.setConsigneeContactId(order.getConsigneeContactId());
  Contacts consigneeContactName=customerService.findContactById(order.getConsigneeContactId());
  orderBean.setConsigneeName(getFullName(consigneeContactName.getLastName(),consigneeContactName.getFirstName(),consigneeContactName.getMiddleName()));
  orderBean.setAccountRep(order.getAccountRep());
  orderBean.setCreatedTimestamp(order.getCreatedTimestamp());
  orderBean.setCreatedBy(order.getCreatedBy());
  orderBean.setModifiedTimestamp(order.getModifiedTimestamp());
  orderBean.setModifiedBy(order.getModifiedBy());
  orderBean.setPickupDate(order.getPickupDate());
  orderBean.setOriginationPort(order.getOriginationPort());
  orderBean.setDeliveryDate(order.getDeliveryDate());
  orderBean.setDestinationPort(order.getDestinationPort());
  orderBean.setRates(order.getRates());
  orderBean.setServiceRequirement(order.getServiceRequirement());
  orderBean.setModeOfService(order.getServiceMode());
  Contacts contactShipperName=customerService.findContactById(order.getShipperContactId());
  Customer shipperName=customerService.findCustomerById(contactShipperName.getReferenceId());
  if (shipperName != null) {
    orderBean.setCustomerId(shipperName.getCustomerId());
    orderBean.setCustomerName(shipperName.getCustomerName());
  }
 else {
    orderBean.setCustomerId(0);
    orderBean.setCustomerName(""String_Node_Str"");
  }
  orderBean.setPickupDate(order.getPickupDate());
  orderBean.setDeliveryDate(order.getDeliveryDate());
  Contacts contacts=customerService.findContactById(order.getShipperContactId());
  contact=new ContactBean();
  contact.setName(getFullName(contacts.getLastName(),contacts.getFirstName(),contacts.getMiddleName()));
  contact.setPhone(contacts.getPhone());
  contact.setEmail(contacts.getEmail());
  contact.setFax(contacts.getFax());
  contact.setMobile(contacts.getMobile());
  orderBean.setShipperInfoContact(contact);
  if (order.getShipperAddressId() != null) {
    Address addresses=customerService.findAddressById(order.getShipperAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(addresses));
    orderBean.setShipperInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    orderBean.setShipperInfoAddress(address);
  }
  Contacts consigneeContact=customerService.findContactById(order.getConsigneeContactId());
  contact=new ContactBean();
  contact.setName(getFullName(consigneeContact.getLastName(),consigneeContact.getFirstName(),consigneeContact.getMiddleName()));
  contact.setPhone(consigneeContact.getPhone());
  contact.setEmail(consigneeContact.getEmail());
  contact.setFax(consigneeContact.getFax());
  contact.setMobile(consigneeContact.getMobile());
  orderBean.setConsigneeInfoContact(contact);
  if (order.getConsigneeAddressId() != null) {
    Address consigneeAddress=customerService.findAddressById(order.getConsigneeAddressId());
    address=new AddressBean();
    address.setAddress(getAddress(consigneeAddress));
    orderBean.setConsigneeInfoAddress(address);
  }
 else {
    address=new AddressBean();
    address.setAddress(""String_Node_Str"");
    orderBean.setConsigneeInfoAddress(address);
  }
  return orderBean;
}",0.9921434104238132
144542,"public void validateOnSubmitItem(ItemBean itemBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  String PATTERN2=""String_Node_Str"";
  Pattern pattern1=Pattern.compile(PATTERN);
  Pattern pattern2=Pattern.compile(PATTERN2);
  Matcher matcher=pattern1.matcher(itemBean.getItemCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getLength() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWidth() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getCriticalQuality() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getBasePrice() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getDescription())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitItem(ItemBean itemBean){
  clearErrorsAndMessages();
  String PATTERN=""String_Node_Str"";
  String PATTERN2=""String_Node_Str"";
  String PATTERN3=""String_Node_Str"";
  Pattern pattern1=Pattern.compile(PATTERN);
  Pattern pattern2=Pattern.compile(PATTERN2);
  Pattern pattern3=Pattern.compile(PATTERN3);
  Matcher matcher=pattern3.matcher(itemBean.getItemCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getLength() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getWidth() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getCriticalQuality() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (itemBean.getBasePrice() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(itemBean.getDescription())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.9578582052553296
144543,"@Column(name=""String_Node_Str"",unique=true,nullable=false) public String getDriverCode(){
  return driverCode;
}","@Column(name=""String_Node_Str"",unique=true) public String getDriverCode(){
  return driverCode;
}",0.9282296650717704
144544,"public void validateOnSubmitDriver(DriverBean driverBean){
  clearErrorsAndMessages();
  String alpha=""String_Node_Str"";
  String alphaNumeric=""String_Node_Str"";
  Pattern namePattern=Pattern.compile(alpha);
  Pattern alphaNumericPattern=Pattern.compile(alphaNumeric);
  Matcher matcher=namePattern.matcher(driverBean.getLastName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getFirstName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getTitle());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=alphaNumericPattern.matcher(driverBean.getLicenseNumber());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=alphaNumericPattern.matcher(driverBean.getDriverCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(driverBean.getDriverCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLicenseNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLastName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getFirstName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getTitle())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitDriver(DriverBean driverBean){
  clearErrorsAndMessages();
  String alpha=""String_Node_Str"";
  String alphaNumeric=""String_Node_Str"";
  Pattern namePattern=Pattern.compile(alpha);
  Pattern alphaNumericPattern=Pattern.compile(alphaNumeric);
  Matcher matcher=namePattern.matcher(driverBean.getLastName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getFirstName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getTitle());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=alphaNumericPattern.matcher(driverBean.getLicenseNumber());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(driverBean.getLicenseNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLastName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getFirstName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getTitle())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.6291017567119656
144545,"public Driver transformToEntityBeanDriver(DriverBean driverBean){
  Driver entity=new Driver();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  if (driverBean.getDriverId() != null) {
    entity.setDriverId(driverBean.getDriverId());
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  entity.setVendorId((Integer)sessionAttributes.get(""String_Node_Str""));
  entity.setDriverCode(driverBean.getDriverCode());
  entity.setLicenseNumber(driverBean.getLicenseNumber());
  entity.setLastName(driverBean.getLastName());
  entity.setFirstName(driverBean.getFirstName());
  entity.setMiddleName(driverBean.getMiddleName());
  entity.setTitle(driverBean.getTitle());
  entity.setStatus(driverBean.getStatus());
  entity.setCreatedBy(driverBean.getCreatedBy());
  entity.setCreatedTimestamp(driverBean.getCreatedTimeStamp());
  return entity;
}","public Driver transformToEntityBeanDriver(DriverBean driverBean){
  Driver entity=new Driver();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  if (driverBean.getDriverId() != null) {
    entity.setDriverId(driverBean.getDriverId());
  }
  Map sessionAttributes=ActionContext.getContext().getSession();
  entity.setVendorId((Integer)sessionAttributes.get(""String_Node_Str""));
  entity.setLicenseNumber(driverBean.getLicenseNumber());
  entity.setLastName(driverBean.getLastName());
  entity.setFirstName(driverBean.getFirstName());
  entity.setMiddleName(driverBean.getMiddleName());
  entity.setTitle(driverBean.getTitle());
  entity.setStatus(driverBean.getStatus());
  entity.setCreatedBy(driverBean.getCreatedBy());
  entity.setCreatedTimestamp(driverBean.getCreatedTimeStamp());
  return entity;
}",0.9705215419501134
144546,"public void validateOnSubmit(CustomerBean customerBean){
  clearErrorsAndMessages();
  if (StringUtils.isBlank(customerBean.getCustomerName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getPhone())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getMobile())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getEmail())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmit(CustomerBean customerBean){
  clearErrorsAndMessages();
  String alpha=""String_Node_Str"";
  Pattern namePattern=Pattern.compile(alpha);
  Matcher matcher=namePattern.matcher(customerBean.getCustomerName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(customerBean.getCustomerName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getPhone())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getMobile())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(customerBean.getEmail())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.8306165839829908
144547,"public void validateOnSubmitDriver(DriverBean driverBean){
  clearErrorsAndMessages();
  String alpha=""String_Node_Str"";
  String alphaNumeric=""String_Node_Str"";
  Pattern namePattern=Pattern.compile(alpha);
  Pattern alphaNumericPattern=Pattern.compile(alphaNumeric);
  Matcher matcher=namePattern.matcher(driverBean.getLastName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getFirstName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getTitle());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=alphaNumericPattern.matcher(driverBean.getLicenseNumber());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(driverBean.getDriverCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLicenseNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLastName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getFirstName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getTitle())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitDriver(DriverBean driverBean){
  clearErrorsAndMessages();
  String alpha=""String_Node_Str"";
  String alphaNumeric=""String_Node_Str"";
  Pattern namePattern=Pattern.compile(alpha);
  Pattern alphaNumericPattern=Pattern.compile(alphaNumeric);
  Matcher matcher=namePattern.matcher(driverBean.getLastName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getFirstName());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=namePattern.matcher(driverBean.getTitle());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=alphaNumericPattern.matcher(driverBean.getLicenseNumber());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=alphaNumericPattern.matcher(driverBean.getDriverCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(driverBean.getDriverCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLicenseNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLastName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getFirstName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getTitle())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.9506840598154628
144548,"public Orders(String truckCode,Integer orderId,Client client,String orderNumber,String serviceRequirement,String serviceType,String serviceMode,String notificationType,Date orderDate,String paymentMode,String comments,String orderStatus,String vendorCode,String trailerCode,String driverCode,String vesselNumber,String shipperCode,Integer shipperAddressId,Integer shipperContactId,String consigneeCode,Integer consigneeAddressId,Integer consigneeContactId,String accountRep,Date createdTimestamp,String createdBy,Date modifiedTimestamp,String modifiedBy,Timestamp pickupDate,String originationPort,Timestamp deliveryDate,String destinationPort,Double rates,List<OrderItems> orderItems){
  this.truckCode=truckCode;
  this.orderId=orderId;
  this.client=client;
  this.orderNumber=orderNumber;
  this.serviceRequirement=serviceRequirement;
  this.serviceType=serviceType;
  this.serviceMode=serviceMode;
  this.notificationType=notificationType;
  this.orderDate=orderDate;
  this.paymentMode=paymentMode;
  this.comments=comments;
  this.orderStatus=orderStatus;
  this.vendorCode=vendorCode;
  this.trailerCode=trailerCode;
  this.driverCode=driverCode;
  this.vesselNumber=vesselNumber;
  this.shipperCode=shipperCode;
  this.shipperAddressId=shipperAddressId;
  this.shipperContactId=shipperContactId;
  this.consigneeCode=consigneeCode;
  this.consigneeAddressId=consigneeAddressId;
  this.consigneeContactId=consigneeContactId;
  this.accountRep=accountRep;
  this.createdTimestamp=createdTimestamp;
  this.createdBy=createdBy;
  this.modifiedTimestamp=modifiedTimestamp;
  this.modifiedBy=modifiedBy;
  this.pickupDate=pickupDate;
  this.originationPort=originationPort;
  this.deliveryDate=deliveryDate;
  this.destinationPort=destinationPort;
  this.rates=rates;
  this.orderItems=orderItems;
}","public Orders(Integer orderId,Client client,String orderNumber,String serviceRequirement,String serviceType,String serviceMode,String notificationType,Date orderDate,String paymentMode,String comments,String orderStatus,String vendorCode,String truckCode,String trailerCode,String driverCode,String vesselNumber,String shipperCode,Integer shipperAddressId,Integer shipperContactId,String consigneeCode,Integer consigneeAddressId,Integer consigneeContactId,String accountRep,Date createdTimestamp,String createdBy,Date modifiedTimestamp,String modifiedBy,Date pickupDate,String originationPort,Date deliveryDate,String destinationPort,Double rates,List<OrderItems> orderItems,Integer customerId){
  this.orderId=orderId;
  this.client=client;
  this.orderNumber=orderNumber;
  this.serviceRequirement=serviceRequirement;
  this.serviceType=serviceType;
  this.serviceMode=serviceMode;
  this.notificationType=notificationType;
  this.orderDate=orderDate;
  this.paymentMode=paymentMode;
  this.comments=comments;
  this.orderStatus=orderStatus;
  this.vendorCode=vendorCode;
  this.truckCode=truckCode;
  this.trailerCode=trailerCode;
  this.driverCode=driverCode;
  this.vesselNumber=vesselNumber;
  this.shipperCode=shipperCode;
  this.shipperAddressId=shipperAddressId;
  this.shipperContactId=shipperContactId;
  this.consigneeCode=consigneeCode;
  this.consigneeAddressId=consigneeAddressId;
  this.consigneeContactId=consigneeContactId;
  this.accountRep=accountRep;
  this.createdTimestamp=createdTimestamp;
  this.createdBy=createdBy;
  this.modifiedTimestamp=modifiedTimestamp;
  this.modifiedBy=modifiedBy;
  this.pickupDate=pickupDate;
  this.originationPort=originationPort;
  this.deliveryDate=deliveryDate;
  this.destinationPort=destinationPort;
  this.rates=rates;
  this.orderItems=orderItems;
  this.customerId=customerId;
}",0.9547076585231952
144549,"public String deleteVesselSchedule(){
  VesselSchedules entity=vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam);
  vesselSchedulesService.deleteVesselSchedule(entity);
  return SUCCESS;
}","public String deleteVesselSchedule(){
  VesselSchedules entity=vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam);
  vesselSchedulesService.deleteVesselSchedule(entity);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.8612836438923396
144550,"public String loadEditVesselSchedule(){
  VesselSchedules entity=vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam);
  vesselSchedule=transformToFormBean(entity);
  return SUCCESS;
}","public String loadEditVesselSchedule(){
  VesselSchedules entity=vesselSchedulesService.findVesselSchedulesById(vesselScheduleIdParam);
  vesselSchedule=transformToFormBean(entity);
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.8571428571428571
144551,"public String findVesselSchedule(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",operationsBean.getOrderItemParam());
  sessionAttributes.put(""String_Node_Str"",operationsBean.getNameSizeParam());
  List<VesselSchedules> vesselSchedulesList=new ArrayList<VesselSchedules>();
  vesselSchedulesList=operationsService.findVesselScheduleByVendorId(operationsBean.getVendorList());
  for (  VesselSchedules vesselScheduleElem : vesselSchedulesList) {
    vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
  }
  return SUCCESS;
}","public String findVesselSchedule(){
  List<VesselSchedules> vesselSchedulesList=new ArrayList<VesselSchedules>();
  vesselSchedulesList=operationsService.findVesselScheduleByVendorId(operationsBean.getVendorList());
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",operationsBean.getOrderItemParam());
  sessionAttributes.put(""String_Node_Str"",operationsBean.getNameSizeParam());
  System.out.println(""String_Node_Str"" + sessionAttributes.get(""String_Node_Str"") + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + sessionAttributes.get(""String_Node_Str"") + ""String_Node_Str"");
  for (  VesselSchedules vesselScheduleElem : vesselSchedulesList) {
    vesselSchedules.add(transformToFormBeanVesselSchedule(vesselScheduleElem));
  }
  return SUCCESS;
}",0.5434173669467787
144552,"@Override public List<Orders> findAllOrdersDocumentation(){
  return documentationDao.findAllOrdersDocuments();
}","@Override public List<Orders> findAllOrdersDocumentation(){
  return documentsDao.findAllOrdersDocuments();
}",0.972972972972973
144553,"@Override public List<Documents> findDocumentationByCriteria(String column,String value){
  return documentationDao.findDocumentationByCriteria(column,value);
}","@Override public List<Documents> findDocumentationByCriteria(String column,String value){
  return documentsDao.findDocumentationByCriteria(column,value);
}",0.981012658227848
144554,"public List<VesselSchedules> findVesselSchedulesByCriteria(String column,String value,Integer clientId);","public List<VesselSchedules> findVesselSchedulesByCriteria(String column,String value);",0.9109947643979056
144555,"@Override public List<VesselSchedules> findVesselSchedulesByCriteria(String column,String value,Integer clientId){
  log.debug(""String_Node_Str"");
  Session session=getSessionFactory().getCurrentSession();
  List<VesselSchedules> vesselSchedules=session.createCriteria(VesselSchedules.class).add(Restrictions.like(column,value)).add(Restrictions.eq(""String_Node_Str"",clientId)).list();
  return vesselSchedules;
}","@Override public List<VesselSchedules> findVesselSchedulesByCriteria(String column,String value){
  log.debug(""String_Node_Str"");
  Session session=getSessionFactory().getCurrentSession();
  List<VesselSchedules> vesselSchedules=session.createCriteria(VesselSchedules.class).add(Restrictions.like(column,value)).list();
  return vesselSchedules;
}",0.913157894736842
144556,"public List<VesselSchedules> findVesselSchedulesByCriteria(String column,String value,Integer clientId);","public List<VesselSchedules> findVesselSchedulesByCriteria(String column,String value);",0.9109947643979056
144557,"@Override public List<VesselSchedules> findVesselSchedulesByCriteria(String column,String value,Integer clientId){
  return vesselSchedulesDao.findVesselSchedulesByCriteria(column,value,clientId);
}","@Override public List<VesselSchedules> findVesselSchedulesByCriteria(String column,String value){
  return vesselSchedulesDao.findVesselSchedulesByCriteria(column,value);
}",0.9297297297297298
144558,"public String viewVesselSchedules(){
  String column=getColumnFilter();
  List<VesselSchedules> vesselSchedulesEntityList=new ArrayList<VesselSchedules>();
  if (StringUtils.isNotBlank(column)) {
    vesselSchedulesEntityList=vesselSchedulesService.findVesselSchedulesByCriteria(column,vesselSchedule.getVesselScheduleKeyword(),getClientId());
  }
 else {
    vesselSchedulesEntityList=vesselSchedulesService.findAllVesselSchedules();
  }
  for (  VesselSchedules vesselScheduleElem : vesselSchedulesEntityList) {
    vesselSchedules.add(transformToFormBean(vesselScheduleElem));
  }
  return SUCCESS;
}","public String viewVesselSchedules(){
  String column=getColumnFilter();
  List<VesselSchedules> vesselSchedulesEntityList=new ArrayList<VesselSchedules>();
  if (StringUtils.isNotBlank(column)) {
    vesselSchedulesEntityList=vesselSchedulesService.findVesselSchedulesByCriteria(column,vesselSchedule.getVesselScheduleKeyword());
  }
 else {
    vesselSchedulesEntityList=vesselSchedulesService.findAllVesselSchedules();
  }
  for (  VesselSchedules vesselScheduleElem : vesselSchedulesEntityList) {
    vesselSchedules.add(transformToFormBean(vesselScheduleElem));
  }
  return SUCCESS;
}",0.988255033557047
144559,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public Integer addCustomer(Customer customer) throws CustomerAlreadyExistsException {
  if (customerDao.findCustomerByName(customer.getCustomerName()).size() > 0)   throw new CustomerAlreadyExistsException(customer.getCustomerName());
 else   return customerDao.addCustomer(customer);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public Integer addCustomer(Customer customer) throws CustomerAlreadyExistsException {
  if (customerDao.findCustomerByCustomerCode(customer.getCustomerCode()).size() > 0)   throw new CustomerAlreadyExistsException(customer.getCustomerCode());
 else   return customerDao.addCustomer(customer);
}",0.903846153846154
144560,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateCustomer(Customer customer){
  customerDao.updateCustomer(customer);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateCustomer(Customer customer) throws CustomerAlreadyExistsException {
  if (customerDao.findDuplicateCustomerByCodeAndId(customer.getCustomerCode(),customer.getCustomerId()).size() > 0)   throw new CustomerAlreadyExistsException(customer.getCustomerCode());
 else   customerDao.updateCustomer(customer);
}",0.5816876122082585
144561,"public void validateOnSubmitTrucks(TruckBean truckBean){
  clearErrorsAndMessages();
  if (StringUtils.isBlank(truckBean.getPlateNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(truckBean.getModelNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (truckBean.getModelYear() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(truckBean.getEngineNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(truckBean.getTruckCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (truckBean.getGrossWeight() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitTrucks(TruckBean truckBean){
  clearErrorsAndMessages();
  String alpha=""String_Node_Str"";
  String plate=""String_Node_Str"";
  String alphaNumeric=""String_Node_Str"";
  String year=""String_Node_Str"";
  String weight=""String_Node_Str"";
  Pattern codePattern=Pattern.compile(alpha);
  Pattern plateNumberPattern=Pattern.compile(plate);
  Pattern alphaNumericPattern=Pattern.compile(alphaNumeric);
  Pattern yearPattern=Pattern.compile(year);
  Pattern weightPattern=Pattern.compile(weight);
  Matcher matcher=codePattern.matcher(truckBean.getTruckCode());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=plateNumberPattern.matcher(truckBean.getPlateNumber());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=alphaNumericPattern.matcher(truckBean.getModelNumber());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=yearPattern.matcher(truckBean.getModelYear().toString());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=weightPattern.matcher(truckBean.getGrossWeight().toString());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  matcher=alphaNumericPattern.matcher(truckBean.getEngineNumber());
  if (!matcher.matches()) {
    addFieldError(""String_Node_Str"",""String_Node_Str"");
  }
  if (StringUtils.isBlank(truckBean.getPlateNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(truckBean.getModelNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (truckBean.getModelYear() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(truckBean.getEngineNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(truckBean.getTruckCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (truckBean.getGrossWeight() == null) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.4373119358074223
144562,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateContact(Contacts contacts) throws ContactAlreadyExistsException {
  List<Contacts> contactList=new ArrayList<Contacts>();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  paramMap.put(""String_Node_Str"",contacts.getFirstName());
  paramMap.put(""String_Node_Str"",contacts.getLastName());
  paramMap.put(""String_Node_Str"",contacts.getReferenceId());
  paramMap.put(""String_Node_Str"",contacts.getContactType());
  contactList=contactsDao.findContactsByParameterMap(paramMap,""String_Node_Str"");
  if (contactList != null && contactList.size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.updateContact(contacts);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateContact(Contacts contacts) throws ContactAlreadyExistsException {
  if (contactsDao.findDuplicateContactByNameAndId(contacts.getLastName(),contacts.getFirstName(),contacts.getContactId(),contacts.getReferenceId()).size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.updateContact(contacts);
}",0.4983221476510067
144563,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContact(Contacts contacts) throws ContactAlreadyExistsException {
  List<Contacts> contactList=new ArrayList<Contacts>();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  paramMap.put(""String_Node_Str"",contacts.getFirstName());
  paramMap.put(""String_Node_Str"",contacts.getLastName());
  paramMap.put(""String_Node_Str"",contacts.getReferenceId());
  paramMap.put(""String_Node_Str"",contacts.getContactType());
  contactList=contactsDao.findContactsByParameterMap(paramMap,""String_Node_Str"");
  if (contactList != null && contactList.size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.addContact(contacts);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContact(Contacts contacts) throws ContactAlreadyExistsException {
  if (contactsDao.findDuplicateContactByNameAndId(contacts.getLastName(),contacts.getFirstName(),contacts.getContactId(),contacts.getReferenceId()).size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.addContact(contacts);
}",0.4932203389830508
144564,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateContact(Contacts contacts) throws ContactAlreadyExistsException {
  List<Contacts> contactList=new ArrayList<Contacts>();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  paramMap.put(""String_Node_Str"",contacts.getFirstName());
  paramMap.put(""String_Node_Str"",contacts.getLastName());
  paramMap.put(""String_Node_Str"",contacts.getReferenceId());
  paramMap.put(""String_Node_Str"",contacts.getContactType());
  contactList=contactsDao.findContactsByParameterMap(paramMap,""String_Node_Str"");
  if (contactList != null && contactList.size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.updateContact(contacts);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateContact(Contacts contacts) throws ContactAlreadyExistsException {
  if (contactsDao.findDuplicateContactByNameAndId(contacts.getLastName(),contacts.getFirstName(),contacts.getContactId(),contacts.getReferenceId()).size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.updateContact(contacts);
}",0.4983221476510067
144565,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateVessel(Vessel vessel){
  vesselDao.updateVessel(vessel);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateVessel(Vessel vessel) throws VesselAlreadyExistsException {
  if (vesselDao.findDuplicateByVesselNumber(vessel.getVesselNumber(),vessel.getVesselId()).size() > 0)   throw new VesselAlreadyExistsException(vessel.getVesselNumber());
 else   vesselDao.updateVessel(vessel);
}",0.5836575875486382
144566,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContact(Contacts contacts) throws ContactAlreadyExistsException {
  List<Contacts> contactList=new ArrayList<Contacts>();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  paramMap.put(""String_Node_Str"",contacts.getFirstName());
  paramMap.put(""String_Node_Str"",contacts.getLastName());
  paramMap.put(""String_Node_Str"",contacts.getReferenceId());
  paramMap.put(""String_Node_Str"",contacts.getContactType());
  contactList=contactsDao.findContactsByParameterMap(paramMap,""String_Node_Str"");
  if (contactList != null && contactList.size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.addContact(contacts);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContact(Contacts contacts) throws ContactAlreadyExistsException {
  if (contactsDao.findDuplicateContactByNameAndId(contacts.getLastName(),contacts.getFirstName(),contacts.getContactId(),contacts.getReferenceId()).size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.addContact(contacts);
}",0.4932203389830508
144567,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addVessel(Vessel vessel) throws VesselAlreadyExistsException {
  vesselDao.addVessel(vessel);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addVessel(Vessel vessel) throws VesselAlreadyExistsException {
  if (vesselDao.findDuplicateByVesselNumber(vessel.getVesselNumber(),vessel.getVesselId()).size() > 0)   throw new VesselAlreadyExistsException(vessel.getVesselNumber());
 else   vesselDao.addVessel(vessel);
}",0.6716141001855288
144568,"public List<Vessel> findDuplicateByVesselNumber(String vesselNumber,Integer vesselId);",public List<Vessel> findDuplicateByVesselNumber(String vesselNumber);,0.8903225806451613
144569,"@Override public List<Vessel> findDuplicateByVesselNumber(String vesselNumber,Integer vesselId){
  Log.debug(""String_Node_Str"");
  try {
    Query query=getSessionFactory().getCurrentSession().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",vesselNumber);
    query.setParameter(""String_Node_Str"",vesselId);
    List<Vessel> results=(List<Vessel>)query.list();
    Log.debug(""String_Node_Str"" + results.size());
    return results;
  }
 catch (  RuntimeException re) {
    Log.error(""String_Node_Str"",re);
    throw re;
  }
}","@Override public List<Vessel> findDuplicateByVesselNumber(String vesselNumber){
  Log.debug(""String_Node_Str"");
  try {
    Query query=getSessionFactory().getCurrentSession().createQuery(""String_Node_Str"");
    query.setParameter(""String_Node_Str"",vesselNumber);
    List<Vessel> results=(List<Vessel>)query.list();
    Log.debug(""String_Node_Str"" + results.size());
    return results;
  }
 catch (  RuntimeException re) {
    Log.error(""String_Node_Str"",re);
    throw re;
  }
}",0.933074684772066
144570,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateTrucks(Trucks trucks) throws TrucksAlreadyExistsException {
  if (trucksDao.findTrucksByTruckCode(trucks.getTruckCode()).size() > 0) {
    throw new TrucksAlreadyExistsException(trucks.getTruckCode());
  }
 else {
    trucksDao.updateTrucks(trucks);
  }
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateTrucks(Trucks trucks) throws TrucksAlreadyExistsException {
  if (trucksDao.findDuplicateTruckByTruckCodeAndId(trucks.getTruckCode(),trucks.getTruckId()).size() > 0) {
    throw new TrucksAlreadyExistsException(trucks.getTruckCode());
  }
 else {
    trucksDao.updateTrucks(trucks);
  }
}",0.938101788170564
144571,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateVessel(Vessel vessel) throws VesselAlreadyExistsException {
  if (vesselDao.findDuplicateByVesselNumber(vessel.getVesselNumber(),vessel.getVesselId()).size() > 0)   throw new VesselAlreadyExistsException(vessel.getVesselNumber());
 else   vesselDao.updateVessel(vessel);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateVessel(Vessel vessel) throws VesselAlreadyExistsException {
  if (vesselDao.findDuplicateByVesselNumberAndId(vessel.getVesselNumber(),vessel.getVesselId()).size() > 0)   throw new VesselAlreadyExistsException(vessel.getVesselNumber());
 else   vesselDao.updateVessel(vessel);
}",0.9931787175989086
144572,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContact(Contacts contacts) throws ContactAlreadyExistsException {
  if (contactsDao.findDuplicateContactByNameAndId(contacts.getLastName(),contacts.getFirstName(),contacts.getContactId(),contacts.getReferenceId()).size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.addContact(contacts);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContact(Contacts contacts) throws ContactAlreadyExistsException {
  if (contactsDao.findContactByLastNameAndFirstName(contacts.getLastName(),contacts.getFirstName()).size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.addContact(contacts);
}",0.9077306733167082
144573,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateDriver(Driver driver) throws DriverAlreadyExistsException {
  if (driverDao.findDriverByDriverCode(driver.getDriverCode()).size() > 0) {
    throw new DriverAlreadyExistsException(driver.getDriverCode());
  }
 else {
    driver.setDateHired(new Date());
    driverDao.updateDriver(driver);
  }
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateDriver(Driver driver) throws DriverAlreadyExistsException {
  if (driverDao.findDriverByDriverCodeAndId(driver.getDriverCode(),driver.getDriverId()).size() > 0) {
    throw new DriverAlreadyExistsException(driver.getDriverCode());
  }
 else {
    driver.setDateHired(new Date());
    driverDao.updateDriver(driver);
  }
}",0.9675
144574,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addVessel(Vessel vessel) throws VesselAlreadyExistsException {
  if (vesselDao.findDuplicateByVesselNumber(vessel.getVesselNumber(),vessel.getVesselId()).size() > 0)   throw new VesselAlreadyExistsException(vessel.getVesselNumber());
 else   vesselDao.addVessel(vessel);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addVessel(Vessel vessel) throws VesselAlreadyExistsException {
  if (vesselDao.findDuplicateByVesselNumber(vessel.getVesselNumber()).size() > 0)   throw new VesselAlreadyExistsException(vessel.getVesselNumber());
 else   vesselDao.addVessel(vessel);
}",0.9697841726618706
144575,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContact(Contacts contacts) throws ContactAlreadyExistsException {
  if (contactsDao.findDuplicateContactByNameAndId(contacts.getLastName(),contacts.getFirstName(),contacts.getContactId(),contacts.getReferenceId()).size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.addContact(contacts);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContact(Contacts contacts) throws ContactAlreadyExistsException {
  if (contactsDao.findContactByLastNameAndFirstName(contacts.getLastName(),contacts.getFirstName()).size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.addContact(contacts);
}",0.9077306733167082
144576,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateContact(Contacts contacts){
  if (contactsDao.findDuplicateContactByLastName(contacts.getLastName(),contacts.getContactId()).size() > 0) {
    System.out.print(contacts.getLastName() + ""String_Node_Str"" + contacts.getContactId());
    throw new ContactAlreadyExistsException(contacts.getLastName());
  }
 else {
    contactsDao.updateContact(contacts);
  }
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateContact(Contacts contacts){
  List<Contacts> contactList=new ArrayList<Contacts>();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  paramMap.put(""String_Node_Str"",contacts.getFirstName());
  paramMap.put(""String_Node_Str"",contacts.getLastName());
  paramMap.put(""String_Node_Str"",contacts.getReferenceId());
  paramMap.put(""String_Node_Str"",contacts.getContactType());
  contactList=contactsDao.findContactsByParameterMap(paramMap,""String_Node_Str"");
  if (contactList != null && contactList.size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.updateContact(contacts);
}",0.3972719522591645
144577,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateTrucks(Trucks trucks){
  trucksDao.updateTrucks(trucks);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateTrucks(Trucks trucks) throws TrucksAlreadyExistsException {
  if (trucksDao.findTrucksByTruckCode(trucks.getTruckCode()).size() > 0) {
    throw new TrucksAlreadyExistsException(trucks.getTruckCode());
  }
 else {
    trucksDao.updateTrucks(trucks);
  }
}",0.5271629778672032
144578,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateContact(Contacts contacts){
  List<Contacts> contactList=new ArrayList<Contacts>();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  paramMap.put(""String_Node_Str"",contacts.getFirstName());
  paramMap.put(""String_Node_Str"",contacts.getLastName());
  paramMap.put(""String_Node_Str"",contacts.getReferenceId());
  paramMap.put(""String_Node_Str"",contacts.getContactType());
  contactList=contactsDao.findContactsByParameterMap(paramMap,""String_Node_Str"");
  if (contactList != null && contactList.size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.updateContact(contacts);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateContact(Contacts contacts) throws ContactAlreadyExistsException {
  List<Contacts> contactList=new ArrayList<Contacts>();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  paramMap.put(""String_Node_Str"",contacts.getFirstName());
  paramMap.put(""String_Node_Str"",contacts.getLastName());
  paramMap.put(""String_Node_Str"",contacts.getReferenceId());
  paramMap.put(""String_Node_Str"",contacts.getContactType());
  contactList=contactsDao.findContactsByParameterMap(paramMap,""String_Node_Str"");
  if (contactList != null && contactList.size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.updateContact(contacts);
}",0.9743935309973046
144579,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateContact(Contacts contacts){
  contactsDao.updateContact(contacts);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateContact(Contacts contacts) throws ContactAlreadyExistsException {
  List<Contacts> contactList=new ArrayList<Contacts>();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  paramMap.put(""String_Node_Str"",contacts.getFirstName());
  paramMap.put(""String_Node_Str"",contacts.getLastName());
  paramMap.put(""String_Node_Str"",contacts.getReferenceId());
  paramMap.put(""String_Node_Str"",contacts.getContactType());
  contactList=contactsDao.findContactsByParameterMap(paramMap,""String_Node_Str"");
  if (contactList != null && contactList.size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.updateContact(contacts);
}",0.3474484256243214
144580,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContact(Contacts contacts){
  contactsDao.addContact(contacts);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addContact(Contacts contacts) throws ContactAlreadyExistsException {
  List<Contacts> contactList=new ArrayList<Contacts>();
  Map<String,Object> paramMap=new HashMap<String,Object>();
  paramMap.put(""String_Node_Str"",contacts.getFirstName());
  paramMap.put(""String_Node_Str"",contacts.getLastName());
  paramMap.put(""String_Node_Str"",contacts.getReferenceId());
  paramMap.put(""String_Node_Str"",contacts.getContactType());
  contactList=contactsDao.findContactsByParameterMap(paramMap,""String_Node_Str"");
  if (contactList != null && contactList.size() > 0)   throw new ContactAlreadyExistsException(contacts.getLastName());
 else   contactsDao.addContact(contacts);
}",0.3388338833883388
144581,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateDriver(Driver driver){
  driverDao.updateDriver(driver);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateDriver(Driver driver) throws DriverAlreadyExistsException {
  if (driverDao.findDriverByDriverCode(driver.getDriverCode()).size() > 0) {
    throw new DriverAlreadyExistsException(driver.getDriverCode());
  }
 else {
    driver.setDateHired(new Date());
    driverDao.updateDriver(driver);
  }
}",0.5586592178770949
144582,"@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addDriver(Driver driver) throws DriverAlreadyExistsException {
  if (driverDao.findDriverByLastName(driver.getLastName()).size() > 0)   throw new DriverAlreadyExistsException(driver.getLastName());
 else   driverDao.addDriver(driver);
}","@Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addDriver(Driver driver) throws DriverAlreadyExistsException {
  if (driverDao.findDriverByDriverCode(driver.getDriverCode()).size() > 0) {
    throw new DriverAlreadyExistsException(driver.getDriverCode());
  }
 else {
    driver.setDateHired(new Date());
    driverDao.addDriver(driver);
  }
}",0.7624466571834992
144583,"public String loadEditOrder(){
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToOrderFormBean(orderEntity);
  return SUCCESS;
}","public String loadEditOrder(){
  Orders orderEntity=orderService.findOrdersById(orderIdParam);
  order=transformToFormBeanOrder(orderEntity);
  return SUCCESS;
}",0.968944099378882
144584,"public String customerInfo(){
  Customer customerEntity=customerService.findCustomerByCustomerCode(customerCodeParam);
  customer=transformToFormBean(customerEntity);
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",customer.getCustomerId());
  return SUCCESS;
}","public String customerInfo(){
  Customer customerEntity=new Customer();
  if (!StringUtils.isBlank(customerCodeParam))   customerEntity=customerService.findCustomerByCustomerCode(customerCodeParam);
 else   customerEntity=customerService.findCustomerById(getCustomerSessionId());
  customer=transformToFormBean(customerEntity);
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",customer.getCustomerId());
  return SUCCESS;
}",0.7990012484394506
144585,"public String customerEditExecute(){
  validateOnSubmit(customer);
  if (hasActionErrors())   return INPUT;
  customerService.updateCustomer(transformToEntityBean(customer));
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}","public String customerEditExecute(){
  validateOnSubmit(customer);
  if (hasActionErrors()) {
    return INPUT;
  }
  try {
    Customer customerEntity=transformToEntityBean(customer);
    customerEntity.setModifiedBy(commonUtils.getUserNameFromSession());
    customerService.updateCustomer(customerEntity);
  }
 catch (  CustomerAlreadyExistsException e) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
    return INPUT;
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.5775535939470365
144586,"public String loadSaveCompleteContacts(){
  Integer customerId=getCustomerSessionId();
  List<Contacts> contactEntityList=new ArrayList<Contacts>();
  contactEntityList=customerService.findContactByReferenceId(customerId);
  for (  Contacts contactElem : contactEntityList) {
    contacts.add(transformToFormBeanContacts(contactElem));
  }
  return SUCCESS;
}","public String loadSaveCompleteContacts(){
  Integer customerId=getCustomerSessionId();
  List<Contacts> contactEntityList=new ArrayList<Contacts>();
  contactEntityList=customerService.findContactByReferenceId(customerId);
  for (  Contacts contactElem : contactEntityList) {
    contacts.add(transformToFormBeanContacts(contactElem));
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.9146496815286624
144587,"public String loadSaveCompleteAddress(){
  Integer customerId=getCustomerSessionId();
  List<Address> addressEntityList=new ArrayList<Address>();
  addressEntityList=customerService.findAllAddressByRefId(customerId);
  for (  Address addressElem : addressEntityList) {
    addresss.add(transformToFormBeanAddress(addressElem));
  }
  return SUCCESS;
}","public String loadSaveCompleteAddress(){
  Integer customerId=getCustomerSessionId();
  List<Address> addressEntityList=new ArrayList<Address>();
  addressEntityList=customerService.findAllAddressByRefId(customerId);
  for (  Address addressElem : addressEntityList) {
    addresss.add(transformToFormBeanAddress(addressElem));
  }
  clearErrorsAndMessages();
  addActionMessage(""String_Node_Str"");
  return SUCCESS;
}",0.9128738621586476
144588,"private Contacts transformToEntityBeanContacts(ContactBean contactBean){
  Contacts entity=new Contacts();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  if (contactBean.getContactId() != null) {
    entity.setContactId(contactBean.getContactId());
  }
  System.out.println(commonUtils.getUserNameFromSession());
  Integer customerId=getCustomerSessionId();
  entity.setReferenceId(customerId);
  entity.setReferenceTable(""String_Node_Str"");
  entity.setContactType(contactBean.getContactType());
  entity.setFirstName(contactBean.getFirstName());
  entity.setMiddleName(contactBean.getMiddleName());
  entity.setLastName(contactBean.getLastName());
  entity.setPhone(contactBean.getPhone());
  entity.setMobile(contactBean.getMobile());
  entity.setFax(contactBean.getFax());
  entity.setEmail(contactBean.getEmail());
  entity.setCreatedTimestamp(new Date());
  entity.setCreatedBy(commonUtils.getUserNameFromSession());
  return entity;
}","private Contacts transformToEntityBeanContacts(ContactBean contactBean){
  Contacts entity=new Contacts();
  Client client=clientService.findClientById(getClientId().toString());
  entity.setClient(client);
  if (contactBean.getContactId() != null) {
    entity.setContactId(contactBean.getContactId());
  }
  System.out.println(commonUtils.getUserNameFromSession());
  Integer customerId=getCustomerSessionId();
  entity.setReferenceId(customerId);
  entity.setReferenceTable(""String_Node_Str"");
  entity.setContactType(contactBean.getContactType());
  entity.setFirstName(contactBean.getFirstName());
  entity.setMiddleName(contactBean.getMiddleName());
  entity.setLastName(contactBean.getLastName());
  entity.setPhone(contactBean.getPhone());
  entity.setMobile(contactBean.getMobile());
  entity.setFax(contactBean.getFax());
  entity.setEmail(contactBean.getEmail());
  entity.setCreatedTimestamp(new Date());
  entity.setCreatedBy(commonUtils.getUserNameFromSession());
  entity.setModifiedTimestamp(new Date());
  entity.setModifiedBy(commonUtils.getUserNameFromSession());
  return entity;
}",0.949928469241774
144589,"public void validateOnSubmitDriver(DriverBean driverBean){
  clearErrorsAndMessages();
  if (StringUtils.isBlank(driverBean.getDriverCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLicenseNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLastName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getFirstName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getMiddleName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getTitle())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}","public void validateOnSubmitDriver(DriverBean driverBean){
  clearErrorsAndMessages();
  if (StringUtils.isBlank(driverBean.getDriverCode())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLicenseNumber())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getLastName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getFirstName())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
  if (StringUtils.isBlank(driverBean.getTitle())) {
    addFieldError(""String_Node_Str"",getText(""String_Node_Str""));
  }
}",0.913659793814433
144590,"public String loadVendorInfo(){
  return SUCCESS;
}","public String loadVendorInfo(){
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendor.getVendorId());
  return SUCCESS;
}",0.4396551724137931
144591,public List<Contacts> findAllContacts(long clientId);,public List<Contacts> findAllContacts();,0.8602150537634409
144592,public Contacts findContactById(long contactId);,public Contacts findContactById(Integer contactId);,0.9292929292929292
144593,"@Override public List<Contacts> findAllContacts(long clientId){
  List<Contacts> contacts=contactsDao.findAllContacts(clientId);
  return contacts;
}","@Override public List<Contacts> findAllContacts(){
  List<Contacts> contacts=contactsDao.findAllContacts();
  return contacts;
}",0.924187725631769
144594,"@Override public Contacts findContactById(long contactId){
  return contactsDao.findContactById(contactId);
}","@Override public Contacts findContactById(Integer contactId){
  return contactsDao.findContactById(contactId);
}",0.9683257918552036
144595,public List<Contacts> findAllContacts(long clientId);,public List<Contacts> findAllContacts();,0.8602150537634409
144596,public Contacts findContactById(long contactId);,public Contacts findContactById(Integer contactId);,0.9292929292929292
144597,"@Override public List<Contacts> findAllContacts(long clientId){
  List<Contacts> contacts=contactsDao.findAllContacts(clientId);
  return contacts;
}","@Override public List<Contacts> findAllContacts(){
  List<Contacts> contacts=contactsDao.findAllContacts();
  return contacts;
}",0.924187725631769
144598,"@Override public Contacts findContactById(long contactId){
  return contactsDao.findContactById(contactId);
}","@Override public Contacts findContactById(Integer contactId){
  return contactsDao.findContactById(contactId);
}",0.9683257918552036
144599,"public String addVendor() throws Exception {
  validateOnSubmit(vendor);
  if (hasFieldErrors()) {
    return INPUT;
  }
  Integer vendorId=vendorService.addVendor(transformToEntityBean(vendor));
  Map sessionAttributes=ActionContext.getContext().getSession();
  sessionAttributes.put(""String_Node_Str"",vendorId);
  return SUCCESS;
}","public String addVendor() throws Exception {
  validateOnSubmit(vendor);
  if (hasFieldErrors()) {
    return INPUT;
  }
  vendorService.addVendor(transformToEntityBean(vendor));
  if (""String_Node_Str"".equals(vendor.getVendorType())) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.6182380216383307
144600,"public String editDriver(){
  validateOnSubmitDriver(driver);
  if (hasFieldErrors()) {
    return INPUT;
  }
  driverService.updateDriver(transformToEntityBeanDriver(driver));
  return SUCCESS;
}","public String editDriver(){
  validateOnSubmitDriver(driver);
  if (hasFieldErrors()) {
    return INPUT;
  }
  vendorService.updateDriver(transformToEntityBeanDriver(driver));
  return SUCCESS;
}",0.9846938775510204
144601,"public void setDriverService(DriverService driverService){
  this.driverService=driverService;
}","public void setDriverService(VendorService driverService){
  this.driverService=driverService;
}",0.9583333333333334
144602,"public String deleteDriver(){
  Driver driverEntity=driverService.findDriverByDriverCode(driverCodeParam);
  driverService.deleteDriver(driverEntity);
  return SUCCESS;
}","public String deleteDriver(){
  Driver driverEntity=vendorService.findDriverByDriverCode(driverCodeParam);
  vendorService.deleteDriver(driverEntity);
  return SUCCESS;
}",0.9647058823529412
144603,"public String loadEditDriverPage(){
  Integer vendorId=getSessionVendorId();
  List<Driver> driverEntityList=driverService.findDriverByVendorId(vendorId);
  for (  Driver driverE1em : driverEntityList) {
    drivers.add(transformToFormBeanDriver(driverE1em));
  }
  Driver driverEntity=driverService.findDriverByDriverCode(driverCodeParam);
  driver=transformToFormBeanDriver(driverEntity);
  return SUCCESS;
}","public String loadEditDriverPage(){
  Integer vendorId=getSessionVendorId();
  List<Driver> driverEntityList=vendorService.findDriverByVendorId(vendorId);
  for (  Driver driverE1em : driverEntityList) {
    drivers.add(transformToFormBeanDriver(driverE1em));
  }
  Driver driverEntity=vendorService.findDriverByDriverCode(driverCodeParam);
  driver=transformToFormBeanDriver(driverEntity);
  return SUCCESS;
}",0.975609756097561
144604,"public String viewVendors(){
  String column=searchVendor();
  List<Vendor> vendorEntityList=vendorService.findVendorsByCriteria(column,vendor.getVendorKeyword(),getClientId());
  for (  Vendor vendorElem : vendorEntityList) {
    vendors.add(transformToFormBean(vendorElem));
  }
  return SUCCESS;
}","public String viewVendors(){
  String column=getColumnFilter();
  List<Vendor> vendorEntityList=new ArrayList<Vendor>();
  if (StringUtils.isNotBlank(column)) {
    vendorEntityList=vendorService.findVendorsByCriteria(column,vendor.getVendorKeyword(),getClientId());
  }
 else {
    vendorEntityList=vendorService.findAllVendors();
  }
  for (  Vendor vendorElem : vendorEntityList) {
    vendors.add(transformToFormBean(vendorElem));
  }
  return SUCCESS;
}",0.762532981530343
144605,"public String loadAddDriverPage(){
  Integer vendorId=getSessionVendorId();
  List<Driver> driverEntityList=driverService.findDriverByVendorId(vendorId);
  for (  Driver driverE1em : driverEntityList) {
    drivers.add(transformToFormBeanDriver(driverE1em));
  }
  return SUCCESS;
}","public String loadAddDriverPage(){
  Integer vendorId=getSessionVendorId();
  List<Driver> driverEntityList=vendorService.findDriverByVendorId(vendorId);
  for (  Driver driverE1em : driverEntityList) {
    drivers.add(transformToFormBeanDriver(driverE1em));
  }
  return SUCCESS;
}",0.9822695035460992
144606,"public String addDriver() throws Exception {
  validateOnSubmitDriver(driver);
  if (hasFieldErrors()) {
    return INPUT;
  }
  driverService.addDriver(transformToEntityBeanDriver(driver));
  return SUCCESS;
}","public String addDriver() throws Exception {
  validateOnSubmitDriver(driver);
  if (hasFieldErrors()) {
    return INPUT;
  }
  vendorService.addDriver(transformToEntityBeanDriver(driver));
  return SUCCESS;
}",0.9761904761904762
144607,"private Orders initOrder(){
  Client client=new Client(""String_Node_Str"",new Date(),""String_Node_Str"",new Date(),""String_Node_Str"");
  Orders orders=new Orders();
  orders.setClientId(1);
  orders.setOrderNumber(213);
  orders.setServiceType(""String_Node_Str"");
  orders.setServiceMode(""String_Node_Str"");
  orders.setNotificationType(""String_Node_Str"");
  orders.setPaymentMode(""String_Node_Str"");
  orders.setComments(""String_Node_Str"");
  orders.setOrderStatus(""String_Node_Str"");
  orders.setVendorCode(""String_Node_Str"");
  orders.setTruckCode(""String_Node_Str"");
  orders.setTrailerCode(""String_Node_Str"");
  orders.setDriverCode(""String_Node_Str"");
  orders.setVesselNumber(""String_Node_Str"");
  orders.setAccountRep(""String_Node_Str"");
  return orders;
}","private Orders initOrder(){
  Client client=new Client(""String_Node_Str"",new Date(),""String_Node_Str"",new Date(),""String_Node_Str"");
  Orders orders=new Orders();
  orders.setClientId(1);
  orders.setOrderNumber(""String_Node_Str"");
  orders.setServiceType(""String_Node_Str"");
  orders.setServiceMode(""String_Node_Str"");
  orders.setNotificationType(""String_Node_Str"");
  orders.setPaymentMode(""String_Node_Str"");
  orders.setComments(""String_Node_Str"");
  orders.setOrderStatus(""String_Node_Str"");
  orders.setVendorCode(""String_Node_Str"");
  orders.setTruckCode(""String_Node_Str"");
  orders.setTrailerCode(""String_Node_Str"");
  orders.setDriverCode(""String_Node_Str"");
  orders.setVesselNumber(""String_Node_Str"");
  orders.setAccountRep(""String_Node_Str"");
  return orders;
}",0.9869960988296488
144608,"private CustomerBean transformToFormBean(Customer entity){
  CustomerBean formBean=new CustomerBean();
  formBean.setCustomerId(Long.toString(entity.getCustomerId()));
  formBean.setCustomerName(entity.getCustomerName());
  formBean.setPhone(entity.getPhone());
  formBean.setEmail(entity.getEmail());
  formBean.setWebsite(entity.getWebsite());
  formBean.setFax(entity.getFax());
  formBean.setMobile(entity.getMobile());
  formBean.setCustomerType(entity.getCustomerType());
  return formBean;
}","private CustomerBean transformToFormBean(Customer entity){
  CustomerBean formBean=new CustomerBean();
  formBean.setCustomerId(entity.getCustomerId());
  formBean.setCustomerName(entity.getCustomerName());
  formBean.setPhone(entity.getPhone());
  formBean.setEmail(entity.getEmail());
  formBean.setWebsite(entity.getWebsite());
  formBean.setFax(entity.getFax());
  formBean.setMobile(entity.getMobile());
  formBean.setCustomerType(entity.getCustomerType());
  return formBean;
}",0.9847094801223242
144609,"public void setAaf(Boolean aaf){
  this.aaf=aaf;
}","public void setAaf(int aaf){
  this.aaf=aaf;
}",0.9166666666666666
144610,"public Boolean getMayorsPermit(){
  return mayorsPermit;
}","public int getMayorsPermit(){
  return mayorsPermit;
}",0.9285714285714286
144611,"public void setMayorsPermit(Boolean mayorsPermit){
  this.mayorsPermit=mayorsPermit;
}","public void setMayorsPermit(int mayorsPermit){
  this.mayorsPermit=mayorsPermit;
}",0.9523809523809524
144612,"public String getCustomerId(){
  return customerId;
}","public Integer getCustomerId(){
  return customerId;
}",0.9158878504672896
144613,"public void setSignatureCard(Boolean signatureCard){
  this.signatureCard=signatureCard;
}","public void setSignatureCard(int signatureCard){
  this.signatureCard=signatureCard;
}",0.9545454545454546
144614,"public void setDti(Boolean dti){
  this.dti=dti;
}","public void setDti(int dti){
  this.dti=dti;
}",0.9166666666666666
144615,"public Boolean getAaf(){
  return aaf;
}","public int getAaf(){
  return aaf;
}",0.8947368421052632
144616,"public Boolean getSignatureCard(){
  return signatureCard;
}","public int getSignatureCard(){
  return signatureCard;
}",0.9310344827586208
144617,"public CustomerBean(String customerId,String customerName,String phone,String email,String customerType,String website,String mobile,String fax,Boolean dti,Boolean mayorsPermit,Boolean aaf,Boolean signatureCard){
  this.customerId=customerId;
  this.customerName=customerName;
  this.phone=phone;
  this.email=email;
  this.customerType=customerType;
  this.website=website;
  this.mobile=mobile;
  this.fax=fax;
  this.dti=dti;
  this.mayorsPermit=mayorsPermit;
  this.aaf=aaf;
  this.signatureCard=signatureCard;
}","public CustomerBean(Integer customerId,String customerCode,String customerName,String customerType,String website,String phone,String mobile,String fax,String email,int dti,int mayorsPermit,int aaf,int signatureCard,Date createdTimestamp,String createdBy,Date modifiedTimestamp,String modifiedBy){
  this.customerId=customerId;
  this.customerCode=customerCode;
  this.customerName=customerName;
  this.customerType=customerType;
  this.website=website;
  this.phone=phone;
  this.mobile=mobile;
  this.fax=fax;
  this.email=email;
  this.dti=dti;
  this.mayorsPermit=mayorsPermit;
  this.aaf=aaf;
  this.signatureCard=signatureCard;
  this.createdTimestamp=createdTimestamp;
  this.createdBy=createdBy;
  this.modifiedTimestamp=modifiedTimestamp;
  this.modifiedBy=modifiedBy;
}",0.3737451737451737
144618,"public Boolean getDti(){
  return dti;
}","public int getDti(){
  return dti;
}",0.8947368421052632
144619,"public void setCustomerId(String customerId){
  this.customerId=customerId;
}","public void setCustomerId(Integer customerId){
  this.customerId=customerId;
}",0.9419354838709676
144620,"@Column(name=""String_Node_Str"",unique=true) public String getPhone(){
  return phone;
}","@Column(name=""String_Node_Str"") public String getPhone(){
  return phone;
}",0.925925925925926
144621,"public Customer(long customerId,Client client,String customerName,String customerType,String website,String phone,String mobile,String fax,String email,boolean dti,boolean mayorsPermit,boolean aaf,boolean signatureCard,Date createdTime,String createdBy,Date modifiedTimeStamp,String modifiedBy){
  this.customerId=customerId;
  this.client=client;
  this.customerName=customerName;
  this.customerType=customerType;
  this.website=website;
  this.phone=phone;
  this.mobile=mobile;
  this.fax=fax;
  this.email=email;
  this.dti=dti;
  this.mayorsPermit=mayorsPermit;
  this.aaf=aaf;
  this.signatureCard=signatureCard;
  this.createdTime=createdTime;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBy=modifiedBy;
}","public Customer(Integer customerId,Client client,String customerCode,String customerName,String customerType,String website,String phone,String mobile,String fax,String email,int dti,int mayorsPermit,int aaf,int signatureCard,Date createdTimestamp,String createdBy,Date modifiedTimestamp,String modifiedBy){
  this.customerId=customerId;
  this.client=client;
  this.customerCode=customerCode;
  this.customerName=customerName;
  this.customerType=customerType;
  this.website=website;
  this.phone=phone;
  this.mobile=mobile;
  this.fax=fax;
  this.email=email;
  this.dti=dti;
  this.mayorsPermit=mayorsPermit;
  this.aaf=aaf;
  this.signatureCard=signatureCard;
  this.createdTimestamp=createdTimestamp;
  this.createdBy=createdBy;
  this.modifiedTimestamp=modifiedTimestamp;
  this.modifiedBy=modifiedBy;
}",0.8952745849297573
144622,"public void setAaf(boolean aaf){
  this.aaf=aaf;
}","public void setAaf(int aaf){
  this.aaf=aaf;
}",0.9166666666666666
144623,"public void setMayorsPermit(boolean mayorsPermit){
  this.mayorsPermit=mayorsPermit;
}","public void setMayorsPermit(int mayorsPermit){
  this.mayorsPermit=mayorsPermit;
}",0.9523809523809524
144624,"@Id @GeneratedValue(strategy=GenerationType.AUTO) @Column(name=""String_Node_Str"",unique=true) public long getCustomerId(){
  return customerId;
}","@Id @GeneratedValue(strategy=GenerationType.AUTO) @Column(name=""String_Node_Str"",unique=true) public Integer getCustomerId(){
  return customerId;
}",0.9761092150170648
144625,"public void setSignatureCard(boolean signatureCard){
  this.signatureCard=signatureCard;
}","public void setSignatureCard(int signatureCard){
  this.signatureCard=signatureCard;
}",0.9545454545454546
144626,"public void setDti(boolean dti){
  this.dti=dti;
}","public void setDti(int dti){
  this.dti=dti;
}",0.9166666666666666
144627,"@Column(name=""String_Node_Str"",unique=true) public String getWebsite(){
  return website;
}","@Column(name=""String_Node_Str"") public String getWebsite(){
  return website;
}",0.9294117647058824
144628,"@ManyToOne(fetch=FetchType.EAGER) @JoinColumn(name=""String_Node_Str"") public Client getClient(){
  return this.client;
}","@ManyToOne(fetch=FetchType.EAGER) @JoinColumn(name=""String_Node_Str"") public Client getClient(){
  return client;
}",0.9787234042553192
144629,"@Column(name=""String_Node_Str"",unique=true) public String getFax(){
  return fax;
}","@Column(name=""String_Node_Str"") public String getFax(){
  return fax;
}",0.922077922077922
144630,"@Column(name=""String_Node_Str"",nullable=false) public String getCustomerType(){
  return customerType;
}","@Column(name=""String_Node_Str"") public String getCustomerType(){
  return customerType;
}",0.922279792746114
144631,"@Column(name=""String_Node_Str"",unique=true) public String getMobile(){
  return mobile;
}","@Column(name=""String_Node_Str"") public String getMobile(){
  return mobile;
}",0.927710843373494
144632,"@Column(name=""String_Node_Str"",unique=true,nullable=true) public String getEmail(){
  return email;
}","@Column(name=""String_Node_Str"") public String getEmail(){
  return email;
}",0.8522727272727273
144633,"public void setCustomerId(long customerId){
  this.customerId=customerId;
}","public void setCustomerId(Integer customerId){
  this.customerId=customerId;
}",0.954248366013072
144634,"public Vendor(Client client,String vendorCode,String vendorName,String vendorType,String vendorClass,String vendorStatus,String createdTimeStamp,String createdBy,String modifiedTimeStamp,String modifiedBY){
  this.client=client;
  this.vendorCode=vendorCode;
  this.vendorName=vendorName;
  this.vendorType=vendorType;
  this.vendorClass=vendorClass;
  this.vendorStatus=vendorStatus;
  this.createdTimeStamp=createdTimeStamp;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBY=modifiedBY;
}","public Vendor(Client client,String vendorCode,String vendorName,String vendorType,String vendorClass,String vendorStatus,Date createdTimeStamp,String createdBy,Date modifiedTimeStamp,String modifiedBY){
  this.client=client;
  this.vendorCode=vendorCode;
  this.vendorName=vendorName;
  this.vendorType=vendorType;
  this.vendorClass=vendorClass;
  this.vendorStatus=vendorStatus;
  this.createdTimeStamp=createdTimeStamp;
  this.createdBy=createdBy;
  this.modifiedTimeStamp=modifiedTimeStamp;
  this.modifiedBY=modifiedBY;
}",0.981060606060606
144635,"public void setCreatedTimeStamp(String createdTimeStamp){
  this.createdTimeStamp=createdTimeStamp;
}","public void setCreatedTimeStamp(Date createdTimeStamp){
  this.createdTimeStamp=createdTimeStamp;
}",0.96
144636,"public void setModifiedTimeStamp(String modifiedTimeStamp){
  this.modifiedTimeStamp=modifiedTimeStamp;
}","public void setModifiedTimeStamp(Date modifiedTimeStamp){
  this.modifiedTimeStamp=modifiedTimeStamp;
}",0.9615384615384616
144637,"@Column(name=""String_Node_Str"") public String getCreatedTimeStamp(){
  return this.createdTimeStamp;
}","@Column(name=""String_Node_Str"") public Date getCreatedTimeStamp(){
  return this.createdTimeStamp;
}",0.9603960396039604
144638,"@Column(name=""String_Node_Str"") public String getModifiedTimeStamp(){
  return modifiedTimeStamp;
}","@Column(name=""String_Node_Str"") public Date getModifiedTimeStamp(){
  return modifiedTimeStamp;
}",0.9591836734693876
144639,"@Override public void onRead(final SelectionKey key) throws Exception {
  HttpRequest req1=null;
  if (key.attachment() instanceof Object[]) {
    Object[] ar=(Object[])key.attachment();
    for (    Object o : ar) {
      if (o instanceof Rfc822HeaderState) {
        req1=((Rfc822HeaderState)o).$req();
      }
    }
  }
  final HttpRequest request=req1;
  if (request == null) {
    Errors.$500(key);
    return;
  }
  final String path=request.path();
  final Place place=placeFactory.route(path.substring(1));
  if (place == null) {
    Errors.$404(key,path);
    return;
  }
  final Presenter presenter=presenterFactory.getPresenterInstance(place);
  if (presenter == null) {
    Errors.$404(key,path);
    return;
  }
  WEBAPP_THREADS.submit(new Runnable(){
    public void run(){
      final ByteBuffer payload;
      try {
        final View<?>[] viewWrapper=new View[1];
        presenter.go(new AcceptsView(){
          @Override public void setView(          View view){
            viewWrapper[0]=view;
          }
        }
,place);
        final String response=viewWrapper[0] == null ? null : viewWrapper[0].asSafeHtml() == null ? null : viewWrapper[0].asSafeHtml().asString();
        if (response == null) {
          return;
        }
        String title=""String_Node_Str"";
        String script=""String_Node_Str"" + compiledServer + ""String_Node_Str"";
        int length=APP_RESPONSE_WRAPPER_SIZE + response.length() + title.length()+ script.length();
        ByteBuffer resp=request.$res().status(HttpStatus.$200).headerString(HttpHeaders.Content$2dType,""String_Node_Str"").headerString(HttpHeaders.Content$2dLength,String.valueOf(length)).as(ByteBuffer.class);
        int needed=resp.rewind().limit() + length;
        payload=(ByteBuffer)ByteBuffer.allocate(needed);
        payload.put(resp);
        payload.put(APP_RESPONSE_TEMPLATE[0]);
        payload.put(title.getBytes());
        payload.put(APP_RESPONSE_TEMPLATE[1]);
        payload.put(HttpMethod.UTF8.encode(response));
        payload.put(APP_RESPONSE_TEMPLATE[2]);
        payload.put(script.getBytes());
        payload.put(APP_RESPONSE_TEMPLATE[3]).rewind();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        Errors.$500(key);
        return;
      }
      key.attach(new Impl(){
        @Override public void onWrite(        SelectionKey key) throws Exception {
          ((SocketChannel)key.channel()).write(payload);
          if (!payload.hasRemaining()) {
            key.selector().wakeup();
            key.interestOps(SelectionKey.OP_READ).attach(null);
          }
        }
      }
);
      key.interestOps(SelectionKey.OP_WRITE);
    }
  }
);
}","@Override public void onRead(final SelectionKey key) throws Exception {
  HttpRequest req1=null;
  if (key.attachment() instanceof Object[]) {
    Object[] ar=(Object[])key.attachment();
    for (    Object o : ar) {
      if (o instanceof Rfc822HeaderState) {
        req1=((Rfc822HeaderState)o).$req();
      }
    }
  }
  final HttpRequest request=req1;
  if (request == null) {
    Errors.$500(key);
    return;
  }
  final String path=request.path();
  final Place place=placeFactory.route(path.substring(1));
  if (place == null) {
    Errors.$404(key,path);
    return;
  }
  final Presenter presenter=presenterFactory.getPresenterInstance(place);
  if (presenter == null) {
    Errors.$404(key,path);
    return;
  }
  key.interestOps(SelectionKey.OP_READ).attach(null);
  WEBAPP_THREADS.submit(new Runnable(){
    public void run(){
      final ByteBuffer payload;
      try {
        final View<?>[] viewWrapper=new View[1];
        presenter.go(new AcceptsView(){
          @Override public void setView(          View view){
            viewWrapper[0]=view;
          }
        }
,place);
        final String response=viewWrapper[0] == null ? null : viewWrapper[0].asSafeHtml() == null ? null : viewWrapper[0].asSafeHtml().asString();
        if (response == null) {
          return;
        }
        String title=""String_Node_Str"";
        String script=""String_Node_Str"" + compiledServer + ""String_Node_Str"";
        int length=APP_RESPONSE_WRAPPER_SIZE + response.length() + title.length()+ script.length();
        ByteBuffer resp=request.$res().status(HttpStatus.$200).headerString(HttpHeaders.Content$2dType,""String_Node_Str"").headerString(HttpHeaders.Content$2dLength,String.valueOf(length)).as(ByteBuffer.class);
        int needed=resp.rewind().limit() + length;
        payload=(ByteBuffer)ByteBuffer.allocate(needed);
        payload.put(resp);
        payload.put(APP_RESPONSE_TEMPLATE[0]);
        payload.put(title.getBytes());
        payload.put(APP_RESPONSE_TEMPLATE[1]);
        payload.put(HttpMethod.UTF8.encode(response));
        payload.put(APP_RESPONSE_TEMPLATE[2]);
        payload.put(script.getBytes());
        payload.put(APP_RESPONSE_TEMPLATE[3]).rewind();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        Errors.$500(key);
        return;
      }
      key.attach(new Impl(){
        @Override public void onWrite(        SelectionKey key) throws Exception {
          ((SocketChannel)key.channel()).write(payload);
          if (!payload.hasRemaining()) {
            key.selector().wakeup();
            key.interestOps(SelectionKey.OP_READ).attach(null);
          }
        }
      }
);
      key.interestOps(SelectionKey.OP_WRITE);
    }
  }
);
}",0.9899888765294772
144640,"@Override public void onRead(SelectionKey key) throws Exception {
  ByteBuffer cursor=null;
  if (key.attachment() instanceof Object[]) {
    for (    Object a : (Object[])key.attachment()) {
      if (a instanceof ByteBuffer) {
        cursor=(ByteBuffer)a;
        break;
      }
    }
  }
  if (cursor == null) {
    Errors.$500(key);
    return;
  }
  final HttpRequest req=(HttpRequest)new Rfc822HeaderState().addHeaderInterest(Host).$req().apply(cursor);
  String[] pathParts=req.path().split(""String_Node_Str"");
  if (pathParts.length != 2) {
    Errors.$500(key);
  }
  String[] args=pathParts[1].split(""String_Node_Str"");
  String code=null;
  String state=null;
  String error=null;
  for (  String arg : args) {
    if (arg.startsWith(""String_Node_Str"")) {
      code=arg.substring(""String_Node_Str"".length());
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      state=arg.substring(""String_Node_Str"".length());
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      error=arg.substring(""String_Node_Str"".length());
    }
  }
  if (error != null) {
    Errors.$400(key);
    return;
  }
  execs.submit(new AccessTokenFetch(code,key));
}","@Override public void onRead(SelectionKey key) throws Exception {
  ByteBuffer cursor=null;
  if (key.attachment() instanceof Object[]) {
    for (    Object a : (Object[])key.attachment()) {
      if (a instanceof ByteBuffer) {
        cursor=(ByteBuffer)a;
        break;
      }
    }
  }
  if (cursor == null) {
    Errors.$500(key);
    return;
  }
  final HttpRequest req=(HttpRequest)new Rfc822HeaderState().addHeaderInterest(Host).$req().apply(cursor);
  String[] pathParts=req.path().split(""String_Node_Str"");
  if (pathParts.length != 2) {
    Errors.$500(key);
  }
  String[] args=pathParts[1].split(""String_Node_Str"");
  String code=null;
  String state=null;
  String error=null;
  for (  String arg : args) {
    if (arg.startsWith(""String_Node_Str"")) {
      code=arg.substring(""String_Node_Str"".length());
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      state=arg.substring(""String_Node_Str"".length());
    }
 else     if (arg.startsWith(""String_Node_Str"")) {
      error=arg.substring(""String_Node_Str"".length());
    }
  }
  if (error != null) {
    Errors.$400(key);
    return;
  }
  execs.submit(new AccessTokenFetch(code,key));
  key.interestOps(SelectionKey.OP_READ).attach(null);
}",0.9773679798826488
144641,"@Override public Hits search(String searchEngineId,long companyId,Query query,Sort[] sort,int start,int end) throws SearchException {
  try {
    Client client=getClient();
    SearchRequestBuilder searchRequestBuilder=client.prepareSearch(""String_Node_Str"" + String.valueOf(companyId));
    QueryBuilder queryBuilder=QueryBuilders.queryString(query.toString());
    _log.info(""String_Node_Str"" + queryBuilder.toString());
    searchRequestBuilder.setQuery(queryBuilder);
    searchRequestBuilder.setTypes(""String_Node_Str"");
    addSortToSearch(sort,searchRequestBuilder);
    SearchRequest searchRequest=searchRequestBuilder.request();
    ActionFuture<SearchResponse> future=client.search(searchRequest);
    SearchResponse searchResponse=future.actionGet();
    Hits hits=processSearchHits(searchResponse.getHits(),query.getQueryConfig());
    hits.setQuery(query);
    TimeValue timeValue=searchResponse.getTook();
    hits.setSearchTime((float)timeValue.getSecondsFrac());
    return hits;
  }
 catch (  Exception e) {
    throw new SearchException(e);
  }
}","@Override public Hits search(String searchEngineId,long companyId,Query query,Sort[] sort,int start,int end) throws SearchException {
  try {
    Client client=getClient();
    SearchRequestBuilder searchRequestBuilder=client.prepareSearch(""String_Node_Str"" + String.valueOf(companyId));
    QueryBuilder queryBuilder=QueryBuilders.queryString(query.toString());
    _log.info(""String_Node_Str"" + queryBuilder.toString());
    searchRequestBuilder.setQuery(queryBuilder);
    searchRequestBuilder.setTypes(""String_Node_Str"");
    addSortToSearch(sort,searchRequestBuilder);
    searchRequestBuilder.setFrom(start).setSize(end);
    SearchRequest searchRequest=searchRequestBuilder.request();
    ActionFuture<SearchResponse> future=client.search(searchRequest);
    SearchResponse searchResponse=future.actionGet();
    Hits hits=processSearchHits(searchResponse.getHits(),query.getQueryConfig());
    hits.setQuery(query);
    TimeValue timeValue=searchResponse.getTook();
    hits.setSearchTime((float)timeValue.getSecondsFrac());
    return hits;
  }
 catch (  Exception e) {
    throw new SearchException(e);
  }
}",0.9752520623281392
144642,"public void afterPropertiesSet(){
  client=new TransportClient().addTransportAddress(new InetSocketTransportAddress(serverIP,port));
}","public void afterPropertiesSet(){
  Settings settings=ImmutableSettings.settingsBuilder().classLoader(ElasticsearchIndexSearcher.class.getClassLoader()).build();
  client=new TransportClient(settings).addTransportAddress(new InetSocketTransportAddress(serverIP,port));
}",0.6336633663366337
144643,"private Client getClient(){
  if (client == null) {
    client=new TransportClient().addTransportAddress(new InetSocketTransportAddress(serverIP,port));
  }
  return client;
}","private Client getClient(){
  if (client == null) {
    Settings settings=ImmutableSettings.settingsBuilder().classLoader(ElasticsearchIndexSearcher.class.getClassLoader()).build();
    client=new TransportClient(settings).addTransportAddress(new InetSocketTransportAddress(serverIP,port));
  }
  return client;
}",0.6926229508196722
144644,"private Client getClient(){
  if (client == null) {
    client=new TransportClient().addTransportAddress(new InetSocketTransportAddress(serverIP,port));
  }
  return client;
}","private Client getClient(){
  if (client == null) {
    Settings settings=ImmutableSettings.settingsBuilder().classLoader(ElasticsearchIndexSearcher.class.getClassLoader()).build();
    client=new TransportClient(settings).addTransportAddress(new InetSocketTransportAddress(serverIP,port));
  }
  return client;
}",0.6926229508196722
144645,"public void afterPropertiesSet(){
  client=new TransportClient().addTransportAddress(new InetSocketTransportAddress(serverIP,port));
}","public void afterPropertiesSet(){
  Settings settings=ImmutableSettings.settingsBuilder().classLoader(ElasticsearchIndexSearcher.class.getClassLoader()).build();
  client=new TransportClient(settings).addTransportAddress(new InetSocketTransportAddress(serverIP,port));
}",0.6336633663366337
144646,"/** 
 * Deletes the inner-most repeat that this node belongs to and returns the corresponding FormIndex. Behavior is currently undefined if you call this method on a node that is not contained within a repeat.
 */
public FormIndex deleteRepeat(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  for (int i=elements.size() - 1; i >= 0; i--) {
    IFormElement e=(IFormElement)elements.elementAt(i);
    if (e instanceof GroupDef && ((GroupDef)e).getRepeat()) {
      break;
    }
 else {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
    }
  }
  FormIndex newIndex=buildIndex(indexes,multiplicities,elements);
  TreeReference deleteRef=getChildInstanceRef(newIndex);
  TreeElement deleteElement=mainInstance.resolveReference(deleteRef);
  TreeReference parentRef=deleteRef.getParentRef();
  TreeElement parentElement=mainInstance.resolveReference(parentRef);
  int childMult=deleteElement.getMult();
  parentElement.removeChild(deleteElement);
  for (int i=0; i < parentElement.getNumChildren(); i++) {
    TreeElement child=parentElement.getChildAt(i);
    if (child.getMult() > childMult) {
      child.setMult(child.getMult() - 1);
    }
  }
  this.getMainInstance().cleanCache();
  triggerTriggerables(deleteRef);
  return newIndex;
}","/** 
 * Deletes the inner-most repeat that this node belongs to and returns the corresponding FormIndex. Behavior is currently undefined if you call this method on a node that is not contained within a repeat.
 */
public FormIndex deleteRepeat(FormIndex index){
  Vector indexes=new Vector();
  Vector multiplicities=new Vector();
  Vector elements=new Vector();
  collapseIndex(index,indexes,multiplicities,elements);
  for (int i=elements.size() - 1; i >= 0; i--) {
    IFormElement e=(IFormElement)elements.elementAt(i);
    if (e instanceof GroupDef && ((GroupDef)e).getRepeat()) {
      break;
    }
 else {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
    }
  }
  FormIndex newIndex=buildIndex(indexes,multiplicities,elements);
  TreeReference deleteRef=getChildInstanceRef(newIndex);
  TreeElement deleteElement=mainInstance.resolveReference(deleteRef);
  TreeReference parentRef=deleteRef.getParentRef();
  TreeElement parentElement=mainInstance.resolveReference(parentRef);
  int childMult=deleteElement.getMult();
  parentElement.removeChild(deleteElement);
  for (int i=0; i < parentElement.getNumChildren(); i++) {
    TreeElement child=parentElement.getChildAt(i);
    if (child.doFieldsMatch(deleteElement) && child.getMult() > childMult) {
      child.setMult(child.getMult() - 1);
    }
  }
  this.getMainInstance().cleanCache();
  triggerTriggerables(deleteRef);
  return newIndex;
}",0.9868603042876902
144647,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o instanceof TreeElement) {
    TreeElement otherTreeElement=(TreeElement)o;
    final boolean doFieldsMatch=(name.equals(otherTreeElement.name) && multiplicity == otherTreeElement.multiplicity && flags == otherTreeElement.flags && dataType == otherTreeElement.dataType && ((instanceName != null && instanceName.equals(otherTreeElement.instanceName)) || (instanceName == null && otherTreeElement.instanceName == null)) && ((constraint != null && constraint.equals(otherTreeElement.constraint)) || (constraint == null && otherTreeElement.constraint == null)) && ((preloadHandler != null && preloadHandler.equals(otherTreeElement.preloadHandler)) || (preloadHandler == null && otherTreeElement.preloadHandler == null)) && ((preloadParams != null && preloadParams.equals(otherTreeElement.preloadParams)) || (preloadParams == null && otherTreeElement.preloadParams == null)) && ((namespace != null && namespace.equals(otherTreeElement.namespace)) || (namespace == null && otherTreeElement.namespace == null)) && ((value != null && value.uncast().getString().equals(otherTreeElement.value.uncast().getString())) || value == null && otherTreeElement.value == null));
    if (doFieldsMatch) {
      if (children != null) {
        if (otherTreeElement.children == null) {
          return false;
        }
        for (        TreeElement child : children) {
          if (!otherTreeElement.children.contains(child)) {
            return false;
          }
        }
      }
 else {
        if (otherTreeElement.children != null) {
          return false;
        }
      }
      if (attributes != null) {
        if (otherTreeElement.attributes == null) {
          return false;
        }
        for (        TreeElement attr : attributes) {
          if (!otherTreeElement.attributes.contains(attr)) {
            return false;
          }
        }
      }
 else {
        if (otherTreeElement.attributes != null) {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o instanceof TreeElement) {
    TreeElement otherTreeElement=(TreeElement)o;
    final boolean doFieldsMatch=doFieldsMatch(otherTreeElement) && multiplicity == otherTreeElement.multiplicity;
    if (doFieldsMatch) {
      if (children != null) {
        if (otherTreeElement.children == null) {
          return false;
        }
        for (        TreeElement child : children) {
          if (!otherTreeElement.children.contains(child)) {
            return false;
          }
        }
      }
 else {
        if (otherTreeElement.children != null) {
          return false;
        }
      }
      if (attributes != null) {
        if (otherTreeElement.attributes == null) {
          return false;
        }
        for (        TreeElement attr : attributes) {
          if (!otherTreeElement.attributes.contains(attr)) {
            return false;
          }
        }
      }
 else {
        if (otherTreeElement.attributes != null) {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}",0.2154420921544209
144648,"@Override public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement(this);
  }
  return ref;
}","@Override public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return ref;
}",0.9273356401384084
144649,"@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement(this);
  }
  return cachedRef;
}","@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return cachedRef;
}",0.9353846153846154
144650,"public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement(this);
  }
  return ref;
}","public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return ref;
}",0.9219330855018588
144651,"@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement(this);
  }
  return cachedRef;
}","@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return cachedRef;
}",0.9353846153846154
144652,"@Override public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return ref;
}","@Override public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement(this);
  }
  return ref;
}",0.9273356401384084
144653,"@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return cachedRef;
}","@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement(this);
  }
  return cachedRef;
}",0.9353846153846154
144654,"public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return ref;
}","public TreeReference getRef(){
  if (ref == null) {
    ref=TreeReference.buildRefFromTreeElement(this);
  }
  return ref;
}",0.9219330855018588
144655,"@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement((AbstractTreeElement)this);
  }
  return cachedRef;
}","@Override public TreeReference getRef(){
  if (cachedRef == null) {
    cachedRef=TreeReference.buildRefFromTreeElement(this);
  }
  return cachedRef;
}",0.9353846153846154
144656,"@Override public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapMap(params));
  ExtUtil.writeString(out,url);
}","@Override public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapMapPoly(params));
  ExtUtil.writeString(out,url);
}",0.9874213836477987
144657,"@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  params=(Hashtable<String,XPathExpression>)ExtUtil.read(in,new ExtWrapMap(String.class,XPathExpression.class));
  url=ExtUtil.readString(in);
}","@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  params=(Hashtable<String,XPathExpression>)ExtUtil.read(in,new ExtWrapMapPoly(String.class),pf);
  url=ExtUtil.readString(in);
}",0.9400386847195358
144658,"@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  super.readExternal(in,pf);
  hiddenQueryValues=(Hashtable)ExtUtil.read(in,new ExtWrapMapPoly(String.class));
  userQueryPrompts=(Hashtable<String,DisplayUnit>)ExtUtil.read(in,new ExtWrapMap(String.class,DisplayUnit.class));
}","@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  super.readExternal(in,pf);
  hiddenQueryValues=(Hashtable<String,XPathExpression>)ExtUtil.read(in,new ExtWrapMapPoly(String.class),pf);
  userQueryPrompts=(Hashtable<String,DisplayUnit>)ExtUtil.read(in,new ExtWrapMap(String.class,DisplayUnit.class),pf);
}",0.9587912087912088
144659,"@Override public boolean equals(Object o){
  if (o instanceof XPathBinaryOpExpr) {
    XPathBinaryOpExpr x=(XPathBinaryOpExpr)o;
    return op == x.op && a.equals(x.a) && b.equals(x.b);
  }
 else {
    return false;
  }
}",@Override public abstract boolean equals(Object o);,0.3088235294117647
144660,"@Override public boolean equals(Object o){
  if (o instanceof XPathBinaryOpExpr) {
    XPathBinaryOpExpr x=(XPathBinaryOpExpr)o;
    return op == x.op && a.equals(x.a) && b.equals(x.b);
  }
 else {
    return false;
  }
}",@Override public abstract boolean equals(Object o);,0.3088235294117647
144661,"private Vector<TreeElement> getChildrenWithName(String name,boolean includeTemplate){
  Vector<TreeElement> v=new Vector<TreeElement>();
  if (children == null) {
    return v;
  }
  for (int i=0; i < this.children.size(); i++) {
    TreeElement child=(TreeElement)this.children.elementAt(i);
    if ((child.getName().equals(name) || name.equals(TreeReference.NAME_WILDCARD)) && (includeTemplate || child.multiplicity != TreeReference.INDEX_TEMPLATE))     v.addElement(child);
  }
  return v;
}","private Vector<TreeElement> getChildrenWithName(String name,boolean includeTemplate){
  Vector<TreeElement> v=new Vector<TreeElement>();
  if (children == null) {
    return v;
  }
  for (int i=0; i < children.size(); i++) {
    TreeElement child=children.elementAt(i);
    if ((child.getName().equals(name) || name.equals(TreeReference.NAME_WILDCARD)) && (includeTemplate || child.multiplicity != TreeReference.INDEX_TEMPLATE))     v.addElement(child);
  }
  return v;
}",0.9761658031088084
144662,"@Override public TreeElement getChild(String name,int multiplicity){
  if (this.children == null) {
    return null;
  }
  if (name.equals(TreeReference.NAME_WILDCARD)) {
    if (multiplicity == TreeReference.INDEX_TEMPLATE || this.children.size() < multiplicity + 1) {
      return null;
    }
    return (TreeElement)this.children.elementAt(multiplicity);
  }
 else {
    for (    TreeElement child : children) {
      if (((name.hashCode() == child.getName().hashCode()) || name.equals(child.getName())) && child.getMult() == multiplicity) {
        return child;
      }
    }
  }
  return null;
}","@Override public TreeElement getChild(String name,int multiplicity){
  if (children == null) {
    return null;
  }
  if (TreeReference.NAME_WILDCARD.equals(name)) {
    if (multiplicity == TreeReference.INDEX_TEMPLATE || children.size() < multiplicity + 1) {
      return null;
    }
    return children.elementAt(multiplicity);
  }
 else {
    for (    TreeElement child : children) {
      if ((name.hashCode() == child.getName().hashCode() || name.equals(child.getName())) && child.getMult() == multiplicity) {
        return child;
      }
    }
  }
  return null;
}",0.7303754266211604
144663,"public void setEnabled(boolean enabled,boolean inherited){
  boolean oldEnabled=isEnabled();
  if (inherited) {
    setMaskVar(MASK_ENABLED_INH,enabled);
  }
 else {
    setMaskVar(MASK_ENABLED,enabled);
  }
  if (isEnabled() != oldEnabled) {
    if (children != null) {
      for (int i=0; i < children.size(); i++) {
        ((TreeElement)children.elementAt(i)).setEnabled(isEnabled(),true);
      }
    }
    alertStateObservers(FormElementStateListener.CHANGE_ENABLED);
  }
}","public void setEnabled(boolean enabled,boolean inherited){
  boolean oldEnabled=isEnabled();
  if (inherited) {
    setMaskVar(MASK_ENABLED_INH,enabled);
  }
 else {
    setMaskVar(MASK_ENABLED,enabled);
  }
  if (isEnabled() != oldEnabled) {
    if (children != null) {
      for (int i=0; i < children.size(); i++) {
        children.elementAt(i).setEnabled(isEnabled(),true);
      }
    }
    alertStateObservers(FormElementStateListener.CHANGE_ENABLED);
  }
}",0.9840933191940616
144664,"public TreeElement deepCopy(boolean includeTemplates){
  TreeElement newNode=shallowCopy();
  if (children != null) {
    newNode.children=new Vector<TreeElement>();
    for (int i=0; i < children.size(); i++) {
      TreeElement child=(TreeElement)children.elementAt(i);
      if (includeTemplates || child.getMult() != TreeReference.INDEX_TEMPLATE) {
        newNode.addChild(child.deepCopy(includeTemplates));
      }
    }
  }
  if (attributes != null) {
    newNode.attributes=new Vector<TreeElement>();
    for (    TreeElement attr : attributes) {
      if (includeTemplates || attr.getMult() != TreeReference.INDEX_TEMPLATE) {
        newNode.addAttribute(attr.deepCopy(includeTemplates));
      }
    }
  }
  return newNode;
}","public TreeElement deepCopy(boolean includeTemplates){
  TreeElement newNode=shallowCopy();
  if (children != null) {
    newNode.children=new Vector<TreeElement>();
    for (int i=0; i < children.size(); i++) {
      TreeElement child=children.elementAt(i);
      if (includeTemplates || child.getMult() != TreeReference.INDEX_TEMPLATE) {
        newNode.addChild(child.deepCopy(includeTemplates));
      }
    }
  }
  if (attributes != null) {
    newNode.attributes=new Vector<TreeElement>();
    for (    TreeElement attr : attributes) {
      if (includeTemplates || attr.getMult() != TreeReference.INDEX_TEMPLATE) {
        newNode.addAttribute(attr.deepCopy(includeTemplates));
      }
    }
  }
  return newNode;
}",0.9910775566231984
144665,"/** 
 * Rebuilding this node from an imported instance
 */
public void populate(TreeElement incoming){
  if (this.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      this.setValue(null);
    }
 else {
      this.setValue(AnswerDataFactory.templateByDataType(this.dataType).cast(value.uncast()));
    }
  }
 else {
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (child.getMaskVar(MASK_REPEATABLE) && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        this.removeChildAt(i);
        i--;
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      if (child.getMaskVar(MASK_REPEATABLE)) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          if (children == null) {
            children=new Vector();
          }
          this.children.insertElementAt(newChild,i + k + 1);
          newChild.populate((TreeElement)newChildren.elementAt(k));
        }
        i+=newChildren.size();
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          child.populate((TreeElement)newChildren.elementAt(0));
        }
      }
    }
  }
  for (int i=0; i < incoming.getAttributeCount(); i++) {
    String name=incoming.getAttributeName(i);
    String ns=incoming.getAttributeNamespace(i);
    String value=incoming.getAttributeValue(i);
    this.setAttribute(ns,name,value);
  }
}","/** 
 * Rebuilding this node from an imported instance
 */
public void populate(TreeElement incoming){
  if (this.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      this.setValue(null);
    }
 else {
      this.setValue(AnswerDataFactory.templateByDataType(this.dataType).cast(value.uncast()));
    }
  }
 else {
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (child.getMaskVar(MASK_REPEATABLE) && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        this.removeChildAt(i);
        i--;
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      if (child.getMaskVar(MASK_REPEATABLE)) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          if (children == null) {
            children=new Vector<TreeElement>();
          }
          this.children.insertElementAt(newChild,i + k + 1);
          newChild.populate((TreeElement)newChildren.elementAt(k));
        }
        i+=newChildren.size();
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          child.populate((TreeElement)newChildren.elementAt(0));
        }
      }
    }
  }
  for (int i=0; i < incoming.getAttributeCount(); i++) {
    String name=incoming.getAttributeName(i);
    String ns=incoming.getAttributeNamespace(i);
    String value=incoming.getAttributeValue(i);
    this.setAttribute(ns,name,value);
  }
}",0.9960713206406768
144666,"@Override public int getNumChildren(){
  return children == null ? 0 : this.children.size();
}","@Override public int getNumChildren(){
  return children == null ? 0 : children.size();
}",0.9726775956284152
144667,"@Override public FormInstance parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  this.checkNode(""String_Node_Str"");
  String fixtureId=parser.getAttributeValue(null,""String_Node_Str"");
  if (fixtureId == null) {
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
  String userId=parser.getAttributeValue(null,""String_Node_Str"");
  parser.nextTag();
  TreeElement root=new TreeElementParser(parser,0,fixtureId).parse();
  FormInstance instance=new FormInstance(root,fixtureId);
  if (userId != null) {
    instance.schema=userId;
  }
  if (storage() != null) {
    int recordId=-1;
    Vector<Integer> matchingFixtures=storage().getIDsForValue(FormInstance.META_ID,fixtureId);
    if (matchingFixtures.size() > 0) {
      Vector<Integer> matchingUsers=storage().getIDsForValue(FormInstance.META_XMLNS,ExtUtil.emptyIfNull(userId));
      for (      Integer i : matchingFixtures) {
        if (matchingUsers.indexOf(i) != -1) {
          recordId=i.intValue();
        }
      }
    }
    if (recordId != -1) {
      if (!overwrite) {
        return instance;
      }
      instance.setID(recordId);
    }
  }
  commit(instance);
  return instance;
}","@Override public FormInstance parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  this.checkNode(""String_Node_Str"");
  String fixtureId=parser.getAttributeValue(null,""String_Node_Str"");
  if (fixtureId == null) {
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
  String userId=parser.getAttributeValue(null,""String_Node_Str"");
  TreeElement root;
  if (!nextTagInBlock(""String_Node_Str"")) {
    return null;
  }
  root=new TreeElementParser(parser,0,fixtureId).parse();
  FormInstance instance=new FormInstance(root,fixtureId);
  if (userId != null) {
    instance.schema=userId;
  }
  if (storage() != null) {
    int recordId=-1;
    Vector<Integer> matchingFixtures=storage().getIDsForValue(FormInstance.META_ID,fixtureId);
    if (matchingFixtures.size() > 0) {
      Vector<Integer> matchingUsers=storage().getIDsForValue(FormInstance.META_XMLNS,ExtUtil.emptyIfNull(userId));
      for (      Integer i : matchingFixtures) {
        if (matchingUsers.indexOf(i) != -1) {
          recordId=i.intValue();
        }
      }
    }
    if (recordId != -1) {
      if (!overwrite) {
        return instance;
      }
      instance.setID(recordId);
    }
  }
  commit(instance);
  return instance;
}",0.9559348947995236
144668,"/** 
 * Template constructor (For elements that need to create reference nodesets but never look up values)
 */
private CaseChildElement(CaseInstanceTreeElement parent){
  this.parent=parent;
  this.recordId=TreeReference.INDEX_TEMPLATE;
  this.mult=TreeReference.INDEX_TEMPLATE;
  this.caseId=null;
  empty=new TreeElement();
  empty=new TreeElement(""String_Node_Str"");
  empty.setMult(this.mult);
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  TreeElement scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
  scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
  scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
}","/** 
 * Template constructor (For elements that need to create reference nodesets but never look up values)
 */
private CaseChildElement(CaseInstanceTreeElement parent){
  this.parent=parent;
  this.recordId=TreeReference.INDEX_TEMPLATE;
  this.mult=TreeReference.INDEX_TEMPLATE;
  this.caseId=null;
  empty=new TreeElement(""String_Node_Str"");
  empty.setMult(this.mult);
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  empty.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
  TreeElement scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
  scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
  scratch=new TreeElement(""String_Node_Str"");
  scratch.setAnswer(null);
  empty.addChild(scratch);
}",0.4772599663110612
144669,"private int smallestIntersectingLevelWithPred(TreeReference refInExpr){
  TreeReference intersectionRef=contextRef.intersect(refInExpr);
  for (int refLevel=0; refLevel <= intersectionRef.size(); refLevel++) {
    Vector<XPathExpression> predicates=refInExpr.getPredicate(refLevel);
    if (predicates != null && predicates.size() > 0) {
      return refLevel - 1;
    }
  }
  return -1;
}","private int smallestIntersectingLevelWithPred(TreeReference refInExpr){
  TreeReference intersectionRef=contextRef.intersect(refInExpr.removePredicates());
  for (int refLevel=0; refLevel < Math.min(refInExpr.size(),intersectionRef.size()); refLevel++) {
    Vector<XPathExpression> predicates=refInExpr.getPredicate(refLevel);
    if (predicates != null && predicates.size() > 0) {
      return refLevel;
    }
  }
  return -1;
}",0.9352869352869352
144670,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  init();
  setValue(ExtUtil.readDate(in));
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  setValue(ExtUtil.readDate(in));
  init();
}",0.9363057324840764
144671,"private static CliCommand getCliCommand(String[] args) throws CliCommandNotFound {
  final String commandName=args[0];
  final String[] restArgs=java.util.Arrays.copyOfRange(args,1,args.length);
switch (commandName) {
case ""String_Node_Str"":
    return new CliValidateCommand(commandName,restArgs);
case ""String_Node_Str"":
  return new CliPlayCommand(commandName,restArgs);
default :
throw new CliCommandNotFound(commandName);
}
}","private static CliCommand getCliCommand(String commandName) throws CliCommandNotFound {
switch (commandName) {
case ""String_Node_Str"":
    return new CliValidateCommand();
case ""String_Node_Str"":
  return new CliPlayCommand();
default :
throw new CliCommandNotFound(commandName);
}
}",0.2300140252454418
144672,"public static void main(String[] args){
  CommandLineParser parser=new DefaultParser();
  Options options=getOptions();
  CommandLine cmd;
  CliCommand cliCommand;
  try {
    cliCommand=getCliCommand(args);
  }
 catch (  CliCommandNotFound e) {
    try {
      cmd=parser.parse(options,args);
    }
 catch (    ParseException parseException) {
      System.out.println(""String_Node_Str"" + parseException.getMessage());
      System.exit(-1);
      return;
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      printHelpText(options);
      System.exit(0);
      return;
    }
 else {
      System.out.println(""String_Node_Str"" + e.getCommandName());
      printHelpText(options);
      System.exit(-1);
      return;
    }
  }
  try {
    cliCommand.parseArguments();
  }
 catch (  ParseException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    System.exit(-1);
    return;
  }
  cliCommand.handle();
}","public static void main(String[] args){
  CommandLineParser parser=new DefaultParser();
  Options options=getOptions();
  CommandLine cmd;
  CliCommand cliCommand;
  try {
    cliCommand=getCliCommand(args[0]);
  }
 catch (  CliCommandNotFound e) {
    try {
      cmd=parser.parse(options,args);
    }
 catch (    ParseException parseException) {
      System.out.println(""String_Node_Str"" + parseException.getMessage());
      printHelpText();
      System.exit(-1);
      return;
    }
    if (cmd.hasOption(""String_Node_Str"")) {
      printHelpText();
      System.exit(0);
      return;
    }
 else {
      System.out.println(""String_Node_Str"" + e.getCommandName());
      printHelpText();
      System.exit(-1);
      return;
    }
  }
catch (  ArrayIndexOutOfBoundsException e) {
    printHelpText();
    System.exit(-1);
    return;
  }
  try {
    final String[] restArgs=java.util.Arrays.copyOfRange(args,1,args.length);
    cliCommand.parseArguments(restArgs);
  }
 catch (  ParseException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    cliCommand.printHelpText();
    System.exit(-1);
    return;
  }
catch (  ArrayIndexOutOfBoundsException e) {
    cliCommand.printHelpText();
    System.exit(-1);
    return;
  }
  cliCommand.handle();
}",0.7839927239654388
144673,"private static void printHelpText(Options options){
  HelpFormatter formatter=new HelpFormatter();
  formatter.printHelp(""String_Node_Str"",options);
}","private static void printHelpText(){
  Options options=getOptions();
  HelpFormatter formatter=new HelpFormatter();
  String header=""String_Node_Str"" + ""String_Node_Str"";
  CliCommand[] commands={new CliValidateCommand(),new CliPlayCommand()};
  for (  CliCommand command : commands) {
    header+=String.format(""String_Node_Str"",command.getCommandName(),command.getHelpTextDescription());
  }
  header+=""String_Node_Str"";
  formatter.printHelp(""String_Node_Str"",header,options,""String_Node_Str"");
}",0.2218798151001541
144674,protected abstract String getHelpTextDescription();,"public String getHelpTextDescription(){
  return helpTextDescription;
}",0.5737704918032787
144675,"public CliCommand(String commandName,String[] args){
  this.commandName=commandName;
  this.args=args;
  options=getOptions();
}","public CliCommand(String commandName,String helpTextDescription,String positionalArgsHelpText){
  options=getOptions();
  this.commandName=commandName;
  this.helpTextDescription=helpTextDescription;
  this.positionalArgsHelpText=positionalArgsHelpText;
}",0.370757180156658
144676,"public void parseArguments() throws ParseException {
  CommandLineParser parser=new DefaultParser();
  cmd=parser.parse(options,args);
}","public void parseArguments(String[] args) throws ParseException {
  CommandLineParser parser=new DefaultParser();
  cmd=parser.parse(options,args);
  this.args=cmd.getArgs();
}",0.8717948717948718
144677,"protected void printHelpText(){
  String usage=""String_Node_Str"" + commandName + ""String_Node_Str""+ getPositionalArgsHelpText();
  String header=getHelpTextDescription() + ""String_Node_Str"";
  HelpFormatter formatter=new HelpFormatter();
  formatter.setWidth(200);
  formatter.printHelp(usage,header,options,""String_Node_Str"",true);
}","protected void printHelpText(){
  String usage=""String_Node_Str"" + commandName + ""String_Node_Str""+ positionalArgsHelpText;
  String header=helpTextDescription + ""String_Node_Str"";
  HelpFormatter formatter=new HelpFormatter();
  formatter.setWidth(200);
  formatter.printHelp(usage,header,options,""String_Node_Str"",true);
}",0.9787234042553192
144678,"public CliPlayCommand(String commandName,String[] args){
  super(commandName,args);
}","public CliPlayCommand(){
  super(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.4914285714285714
144679,"@Override public void handle(){
  super.handle();
  PrototypeFactory prototypeFactory=new LivePrototypeFactory();
  if (args.length < 2) {
    printHelpText();
    System.exit(-1);
  }
  try {
    CommCareConfigEngine engine=configureApp(args[1],prototypeFactory);
    ApplicationHost host=new ApplicationHost(engine,prototypeFactory);
    if (cmd.hasOption(""String_Node_Str"")) {
      host.setRestoreToLocalFile(cmd.getOptionValue(""String_Node_Str""));
    }
 else {
      if (args.length < 4) {
        printHelpText();
        System.exit(-1);
        return;
      }
      String username=args[2];
      String password=args[3];
      username=username.trim().toLowerCase();
      host.setRestoreToRemoteUser(username,password);
    }
    host.run();
    System.exit(-1);
  }
 catch (  RuntimeException re) {
    System.out.print(""String_Node_Str"");
    re.printStackTrace();
    throw re;
  }
 finally {
    System.exit(0);
  }
}","@Override public void handle(){
  super.handle();
  PrototypeFactory prototypeFactory=new LivePrototypeFactory();
  try {
    CommCareConfigEngine engine=configureApp(args[0],prototypeFactory);
    ApplicationHost host=new ApplicationHost(engine,prototypeFactory);
    if (cmd.hasOption(""String_Node_Str"")) {
      host.setRestoreToLocalFile(cmd.getOptionValue(""String_Node_Str""));
    }
 else {
      username=username.trim().toLowerCase();
      host.setRestoreToRemoteUser(username,password);
    }
    host.run();
    System.exit(-1);
  }
 catch (  RuntimeException re) {
    System.out.print(""String_Node_Str"");
    re.printStackTrace();
    throw re;
  }
 finally {
    System.exit(0);
  }
}",0.3239263803680982
144680,"public CliValidateCommand(String commandName,String[] args){
  super(commandName,args);
}","public CliValidateCommand(){
  super(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.5136612021857924
144681,"@Override public void handle(){
  super.handle();
  PrototypeFactory prototypeFactory=new LivePrototypeFactory();
  if (args.length < 2) {
    printHelpText();
    System.exit(-1);
  }
  CommCareConfigEngine engine=configureApp(args[1],prototypeFactory);
  engine.describeApplication();
  System.exit(0);
}","@Override public void handle(){
  super.handle();
  PrototypeFactory prototypeFactory=new LivePrototypeFactory();
  CommCareConfigEngine engine=configureApp(resourcePath,prototypeFactory);
  engine.describeApplication();
  System.exit(0);
}",0.8351648351648352
144682,"private void parseControlChildren(Element e,QuestionDef question,IFormElement parent,boolean isSelect){
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (LABEL_ELEMENT.equals(childName) || HINT_ELEMENT.equals(childName) || HELP_ELEMENT.equals(childName)|| CONSTRAINT_ELEMENT.equals(childName)) {
      parseHelperText(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItem(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItemset(question,child,parent);
    }
 else     if (actionHandlers.contains(childName)) {
      actionHandlers.get(childName).handle(this,child,question);
    }
  }
}","private void parseControlChildren(Element e,QuestionDef question,IFormElement parent,boolean isSelect){
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (LABEL_ELEMENT.equals(childName) || HINT_ELEMENT.equals(childName) || HELP_ELEMENT.equals(childName)|| CONSTRAINT_ELEMENT.equals(childName)) {
      parseHelperText(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItem(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItemset(question,child,parent);
    }
 else     if (actionHandlers.containsKey(childName)) {
      actionHandlers.get(childName).handle(this,child,question);
    }
  }
}",0.998234255444379
144683,"/** 
 * Test triggers fired from inserting a new repeat entry. Triggers fired during insert action don't need to be fired again when all triggers rooted by that repeat entry are fired.
 */
@Test public void testRepeatInsertTriggering() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fpi.getFormDef().initialize(true,null);
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  do {
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
  EvaluationContext evalCtx=fpi.getFormDef().getEvaluationContext();
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
}","/** 
 * Test triggers fired from inserting a new repeat entry. Triggers fired during insert action don't need to be fired again when all triggers rooted by that repeat entry are fired.
 */
@Test public void testRepeatInsertTriggering() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  stepThroughEntireForm(fec);
  EvaluationContext evalCtx=fpi.getFormDef().getEvaluationContext();
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
}",0.8271386430678466
144684,"/** 
 * Test nested form repeat triggers and actions
 */
@Test public void testNestedRepeatActions() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fpi.getFormDef().initialize(true,null);
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  do {
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",30.0,""String_Node_Str"",fpi.getFormDef().getEvaluationContext());
}","/** 
 * Test nested form repeat triggers and actions
 */
@Test public void testNestedRepeatActions() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  stepThroughEntireForm(fec);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",30.0,""String_Node_Str"",fpi.getFormDef().getEvaluationContext());
}",0.7546346782988005
144685,"/** 
 * Tests trigger caching related to cascading relevancy calculations to children.
 */
@Test public void testTriggerCaching() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fpi.getFormDef().initialize(true,null);
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  do {
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
  EvaluationContext evalCtx=fpi.getFormDef().getEvaluationContext();
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",400.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",100.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  Object weighTimeResult=ExprEvalUtils.xpathEval(evalCtx,""String_Node_Str"");
  if (""String_Node_Str"".equals(weighTimeResult) || ""String_Node_Str"".equals(weighTimeResult)) {
    fail(""String_Node_Str"");
  }
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",1.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
}","/** 
 * Tests trigger caching related to cascading relevancy calculations to children.
 */
@Test public void testTriggerCaching() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  stepThroughEntireForm(fec);
  EvaluationContext evalCtx=fpi.getFormDef().getEvaluationContext();
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",400.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",100.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  Object weighTimeResult=ExprEvalUtils.xpathEval(evalCtx,""String_Node_Str"");
  if (""String_Node_Str"".equals(weighTimeResult) || ""String_Node_Str"".equals(weighTimeResult)) {
    fail(""String_Node_Str"");
  }
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",1.0,""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
  ExprEvalUtils.assertEqualsXpathEval(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",evalCtx);
}",0.9077798861480076
144686,"/** 
 * Make sure that 'current()' expands correctly when used in conditionals such as in 'relevant' tags. The test answers a question and expects the correct elements to be re-evaluated and set to not relevant.
 */
@Test public void testCurrentFuncInTriggers(){
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null) {
      continue;
    }
    TreeReference qRef=(TreeReference)(q.getBind()).getReference();
    if (qRef.toString().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(new StringData(""String_Node_Str""));
      if (response != FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
      }
    }
 else     if (q.getID() == 2) {
      fail(""String_Node_Str"");
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}","/** 
 * Make sure that 'current()' expands correctly when used in conditionals such as in 'relevant' tags. The test answers a question and expects the correct elements to be re-evaluated and set to not relevant.
 */
@Test public void testCurrentFuncInTriggers(){
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null) {
      continue;
    }
    TreeReference qRef=(TreeReference)(q.getBind()).getReference();
    if (qRef.toString().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(new StringData(""String_Node_Str""));
      if (response != FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
      }
    }
 else     if (q.getID() == 2) {
      fail(""String_Node_Str"");
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}",0.9568919638105376
144687,"@Test public void testAnswerConstraintOldText(){
  IntegerData ans=new IntegerData(7);
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  fec.setLanguage(""String_Node_Str"");
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null || q.getTextID() == null || ""String_Node_Str"".equals(q.getTextID())) {
      continue;
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(ans);
      if (response == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response3=fec.answerQuestion(new IntegerData(13));
      if (response3 == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response3 == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response4=fec.answerQuestion(new IntegerData(13));
      if (response4 == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response4 == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}","@Test public void testAnswerConstraintOldText(){
  IntegerData ans=new IntegerData(7);
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  fec.setLanguage(""String_Node_Str"");
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null || q.getTextID() == null || ""String_Node_Str"".equals(q.getTextID())) {
      continue;
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(ans);
      if (response == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response3=fec.answerQuestion(new IntegerData(13));
      if (response3 == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response3 == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response4=fec.answerQuestion(new IntegerData(13));
      if (response4 == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        if (!""String_Node_Str"".equals(fec.getModel().getQuestionPrompt().getConstraintText())) {
          fail(""String_Node_Str"" + fec.getModel().getQuestionPrompt().getConstraintText());
        }
      }
 else       if (response4 == FormEntryController.ANSWER_OK) {
        fail(""String_Node_Str"");
        break;
      }
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}",0.9761377613776138
144688,"/** 
 * Regressions around complex repeat behaviors
 */
@Test public void testLoopedRepeatIndexFetches() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fpi.getFormDef().initialize(true,null);
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  fec.stepToNextEvent();
  fec.stepToNextEvent();
  fec.answerQuestion(new IntegerData(2));
  while (fec.stepToNextEvent() != FormEntryController.EVENT_QUESTION)   ;
  fec.answerQuestion(new UncastData(""String_Node_Str""));
  while (fec.stepToNextEvent() != FormEntryController.EVENT_QUESTION)   ;
  fec.getNextIndex(fec.getModel().getFormIndex(),true);
  fec.answerQuestion(new IntegerData(2));
  fec.getNextIndex(fec.getModel().getFormIndex(),true);
}","/** 
 * Regressions around complex repeat behaviors
 */
@Test public void testLoopedRepeatIndexFetches() throws Exception {
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  fec.stepToNextEvent();
  fec.stepToNextEvent();
  fec.answerQuestion(new IntegerData(2));
  while (fec.stepToNextEvent() != FormEntryController.EVENT_QUESTION)   ;
  fec.answerQuestion(new UncastData(""String_Node_Str""));
  while (fec.stepToNextEvent() != FormEntryController.EVENT_QUESTION)   ;
  fec.getNextIndex(fec.getModel().getFormIndex(),true);
  fec.answerQuestion(new IntegerData(2));
  fec.getNextIndex(fec.getModel().getFormIndex(),true);
}",0.9150237933378654
144689,"@Test public void testAnswerConstraint(){
  IntegerData ans=new IntegerData(13);
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null || q.getTextID() == null || ""String_Node_Str"".equals(q.getTextID())) {
      continue;
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(ans);
      if (response == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        fail(""String_Node_Str"");
      }
 else       if (response == FormEntryController.ANSWER_OK) {
        break;
      }
 else {
        fail(""String_Node_Str"");
      }
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}","@Test public void testAnswerConstraint(){
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  do {
    QuestionDef q=fpi.getCurrentQuestion();
    if (q == null || q.getTextID() == null || ""String_Node_Str"".equals(q.getTextID())) {
      continue;
    }
    if (q.getTextID().equals(""String_Node_Str"")) {
      int response=fec.answerQuestion(new IntegerData(13));
      if (response == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
        fail(""String_Node_Str"");
      }
 else       if (response == FormEntryController.ANSWER_OK) {
        break;
      }
 else {
        fail(""String_Node_Str"");
      }
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
}",0.5018867924528302
144690,"/** 
 * Test setvalue expressions which have predicate references
 */
@Test public void testSetValuePredicate(){
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=fpi.getFormEntryController();
  fpi.getFormDef().initialize(true,null);
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  boolean testPassed=false;
  do {
    if (fec.getModel().getEvent() != FormEntryController.EVENT_QUESTION) {
      continue;
    }
    String text=fec.getModel().getQuestionPrompt().getQuestionText();
    if (text.contains(""String_Node_Str"") && text.contains(""String_Node_Str"")) {
      testPassed=true;
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
  if (!testPassed) {
    fail(""String_Node_Str"");
  }
}","/** 
 * Test setvalue expressions which have predicate references
 */
@Test public void testSetValuePredicate(){
  FormParseInit fpi=new FormParseInit(""String_Node_Str"");
  FormEntryController fec=initFormEntry(fpi);
  boolean testPassed=false;
  do {
    if (fec.getModel().getEvent() != FormEntryController.EVENT_QUESTION) {
      continue;
    }
    String text=fec.getModel().getQuestionPrompt().getQuestionText();
    if (text.contains(""String_Node_Str"") && text.contains(""String_Node_Str"")) {
      testPassed=true;
    }
  }
 while (fec.stepToNextEvent() != FormEntryController.EVENT_END_OF_FORM);
  if (!testPassed) {
    fail(""String_Node_Str"");
  }
}",0.9028651292802236
144691,"/** 
 * Remove from the graph the node at this index, and remove all nodes that are made invalid by the non-existence of that node (i.e. all of its child and extension cases). Also accumulate a list of edges that need to be removed as a result of this method call. Actual edge removal should then be done all at once by the caller, to avoid ConcurrentModificationException
 */
private void removeNodeAndPropagate(String indexOfRemovedNode,Vector<String[]> accumulatedEdgesToRemove){
  Vector<Edge<String,String>> childCases=internalCaseDAG.getParents(indexOfRemovedNode);
  for (  Edge<String,String> child : childCases) {
    accumulatedEdgesToRemove.addElement(new String[]{child.i,indexOfRemovedNode});
    removeNodeAndPropagate(child.i,accumulatedEdgesToRemove);
  }
  Vector<Edge<String,String>> parentCases=internalCaseDAG.getChildren(indexOfRemovedNode);
  for (  Edge<String,String> parent : parentCases) {
    accumulatedEdgesToRemove.addElement(new String[]{indexOfRemovedNode,parent.i});
  }
  int storageIdOfRemovedNode=internalCaseDAG.removeNode(indexOfRemovedNode)[1];
  idsToRemove.addElement(new Integer(storageIdOfRemovedNode));
  casesRemovedDueToMissingCases.add(indexOfRemovedNode);
}","/** 
 * Remove from the graph the node at this index, and remove all nodes that are made invalid by the non-existence of that node (i.e. all of its child and extension cases). Also accumulate a list of edges that need to be removed as a result of this method call. Actual edge removal should then be done all at once by the caller, to avoid ConcurrentModificationException
 */
private void removeNodeAndPropagate(String indexOfRemovedNode,Vector<String[]> accumulatedEdgesToRemove){
  Vector<Edge<String,String>> childCases=internalCaseDAG.getParents(indexOfRemovedNode);
  for (  Edge<String,String> child : childCases) {
    accumulatedEdgesToRemove.addElement(new String[]{child.i,indexOfRemovedNode});
    removeNodeAndPropagate(child.i,accumulatedEdgesToRemove);
  }
  Vector<Edge<String,String>> parentCases=internalCaseDAG.getChildren(indexOfRemovedNode);
  for (  Edge<String,String> parent : parentCases) {
    accumulatedEdgesToRemove.addElement(new String[]{indexOfRemovedNode,parent.i});
  }
  int storageIdOfRemovedNode=internalCaseDAG.removeNode(indexOfRemovedNode)[1];
  idsToRemove.addElement(new Integer(storageIdOfRemovedNode));
  casesRemovedDueToMissingCases.addElement(indexOfRemovedNode);
}",0.9971038477451386
144692,"/** 
 * Traverse the graph to accumulate a list of any edges to empty nodes (which are created when a child makes a placeholder index to a parent, but then the parent does not actually exist on the phone for some reason). Then remove any nodes that are made invalid by that parent node not existing, which further accumulates the list of invalid edges
 * @return Whether or not this method invocation removed any invalid edges from the DAG
 */
private Vector<String[]> getInvalidEdges(){
  Hashtable<String,Vector<Edge<String,String>>> allEdges=internalCaseDAG.getEdges();
  Vector<String> childOfNonexistentParent=new Vector<String>();
  Vector<String[]> edgesToRemove=new Vector<String[]>();
  Enumeration edgeOriginIndices=allEdges.keys();
  while (edgeOriginIndices.hasMoreElements()) {
    String originIndex=(String)edgeOriginIndices.nextElement();
    Vector<Edge<String,String>> edgeListForOrigin=allEdges.get(originIndex);
    for (    Edge<String,String> edge : edgeListForOrigin) {
      String targetIndex=edge.i;
      if (internalCaseDAG.getNode(targetIndex) == null) {
        missingCases.add(targetIndex);
        edgesToRemove.addElement(new String[]{originIndex,targetIndex});
        childOfNonexistentParent.addElement(originIndex);
      }
    }
  }
  for (  String index : childOfNonexistentParent) {
    removeNodeAndPropagate(index,edgesToRemove);
  }
  invalidEdgesWereRemoved=edgesToRemove.size() > 0;
  return edgesToRemove;
}","/** 
 * Traverse the graph to accumulate a list of any edges to empty nodes (which are created when a child makes a placeholder index to a parent, but then the parent does not actually exist on the phone for some reason). Then remove any nodes that are made invalid by that parent node not existing, which further accumulates the list of invalid edges
 * @return Whether or not this method invocation removed any invalid edges from the DAG
 */
private Vector<String[]> getInvalidEdges(){
  Hashtable<String,Vector<Edge<String,String>>> allEdges=internalCaseDAG.getEdges();
  Vector<String> childOfNonexistentParent=new Vector<String>();
  Vector<String[]> edgesToRemove=new Vector<String[]>();
  Enumeration edgeOriginIndices=allEdges.keys();
  while (edgeOriginIndices.hasMoreElements()) {
    String originIndex=(String)edgeOriginIndices.nextElement();
    Vector<Edge<String,String>> edgeListForOrigin=allEdges.get(originIndex);
    for (    Edge<String,String> edge : edgeListForOrigin) {
      String targetIndex=edge.i;
      if (internalCaseDAG.getNode(targetIndex) == null) {
        missingCases.addElement(targetIndex);
        edgesToRemove.addElement(new String[]{originIndex,targetIndex});
        childOfNonexistentParent.addElement(originIndex);
      }
    }
  }
  for (  String index : childOfNonexistentParent) {
    removeNodeAndPropagate(index,edgesToRemove);
  }
  invalidEdgesWereRemoved=edgesToRemove.size() > 0;
  return edgesToRemove;
}",0.997598627787307
144693,"public void registerModule(){
  String[] classes={""String_Node_Str"",""String_Node_Str""};
  PrototypeManager.registerPrototypes(classes);
  PrototypeManager.registerPrototypes(XPathParseTool.xpathClasses);
  RestoreUtils.xfFact=new IXFormyFactory(){
    public TreeReference ref(    String refStr){
      return FormInstance.unpackReference(new XPathReference(refStr));
    }
    public IDataPayload serializeInstance(    FormInstance dm){
      try {
        return (new XFormSerializingVisitor()).createSerializedPayload(dm);
      }
 catch (      IOException e) {
        return null;
      }
    }
    public FormInstance parseRestore(    byte[] data,    Class restorableType){
      return XFormParser.restoreDataModel(data,restorableType);
    }
    public IConditionExpr refToPathExpr(    TreeReference ref){
      return new XPathConditional(XPathPathExpr.fromRef(ref));
    }
  }
;
}","public void registerModule(){
  String[] classes={""String_Node_Str"",""String_Node_Str""};
  PrototypeManager.registerPrototypes(classes);
  PrototypeManager.registerPrototypes(XPathParseTool.xpathClasses);
  RestoreUtils.xfFact=new IXFormyFactory(){
    public TreeReference ref(    String refStr){
      return FormInstance.unpackReference(new XPathReference(refStr));
    }
    public IDataPayload serializeInstance(    FormInstance dm){
      try {
        return (new XFormSerializingVisitor()).createSerializedPayload(dm);
      }
 catch (      IOException e) {
        return null;
      }
    }
    public IConditionExpr refToPathExpr(    TreeReference ref){
      return new XPathConditional(XPathPathExpr.fromRef(ref));
    }
  }
;
}",0.9079754601226994
144694,"protected AbstractTreeElement setupFixtureData(ExternalDataInstance instance){
  String ref=instance.getReference();
  String userId=""String_Node_Str"";
  User u=mSandbox.getLoggedInUser();
  if (u != null) {
    userId=u.getUniqueId();
  }
  String refId=ref.substring(ref.lastIndexOf('/') + 1,ref.length());
  try {
    FormInstance fixture=SandboxUtils.loadFixture(mSandbox,refId,userId);
    if (fixture == null) {
      throw new RuntimeException(""String_Node_Str"" + ref);
    }
    TreeElement root=fixture.getRoot();
    root.setParent(instance.getBase());
    return root;
  }
 catch (  IllegalStateException ise) {
    throw new RuntimeException(""String_Node_Str"" + ref);
  }
}","protected AbstractTreeElement setupFixtureData(ExternalDataInstance instance){
  String ref=instance.getReference();
  String userId=""String_Node_Str"";
  User u=mSandbox.getLoggedInUser();
  if (u != null) {
    userId=u.getUniqueId();
  }
  String refId=ref.substring(ref.lastIndexOf('/') + 1,ref.length());
  try {
    FormInstance fixture=SandboxUtils.loadFixture(mSandbox,refId,userId);
    if (fixture == null) {
      throw new FixtureInitializationException(""String_Node_Str"" + ref);
    }
    TreeElement root=fixture.getRoot();
    root.setParent(instance.getBase());
    return root;
  }
 catch (  IllegalStateException ise) {
    throw new FixtureInitializationException(""String_Node_Str"" + ref);
  }
}",0.9599427753934192
144695,"/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param index To be evaluated as to whether the underlying model ishinted to exist
 */
public void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getMainInstance().resolveReference(g.getConextualizedCountReference(index.getLocalReference())).getValue();
        if (count != null) {
          int fullcount=-1;
          try {
            fullcount=((Integer)new IntegerData().cast(count.uncast()).getValue()).intValue();
          }
 catch (          IllegalArgumentException iae) {
            throw new RuntimeException(""String_Node_Str"" + count.uncast().getString() + ""String_Node_Str""+ g.getConextualizedCountReference(index.getLocalReference()).toString()+ ""String_Node_Str"");
          }
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getMainInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}","/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param index To be evaluated as to whether the underlying model ishinted to exist
 */
public void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getMainInstance().resolveReference(g.getConextualizedCountReference(index.getReference())).getValue();
        if (count != null) {
          int fullcount=-1;
          try {
            fullcount=((Integer)new IntegerData().cast(count.uncast()).getValue()).intValue();
          }
 catch (          IllegalArgumentException iae) {
            throw new RuntimeException(""String_Node_Str"" + count.uncast().getString() + ""String_Node_Str""+ g.getConextualizedCountReference(index.getLocalReference()).toString()+ ""String_Node_Str"");
          }
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getMainInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}",0.998764516926118
144696,"/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param index To be evaluated as to whether the underlying model ishinted to exist
 */
public void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getMainInstance().resolveReference(g.getConextualizedCountReference(index.getReference())).getValue();
        if (count != null) {
          int fullcount=-1;
          try {
            fullcount=((Integer)new IntegerData().cast(count.uncast()).getValue()).intValue();
          }
 catch (          IllegalArgumentException iae) {
            throw new RuntimeException(""String_Node_Str"" + count.uncast().getString() + ""String_Node_Str""+ g.getConextualizedCountReference(index.getLocalReference()).toString()+ ""String_Node_Str"");
          }
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getMainInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}","/** 
 * For the current index: Checks whether the index represents a node which should exist given a non-interactive repeat, along with a count for that repeat which is beneath the dynamic level specified. If this index does represent such a node, the new model for the repeat is created behind the scenes and the index for the initial question is returned. Note: This method will not prevent the addition of new repeat elements in the interface, it will merely use the xforms repeat hint to create new nodes that are assumed to exist
 * @param index To be evaluated as to whether the underlying model ishinted to exist
 */
public void createModelIfNecessary(FormIndex index){
  if (index.isInForm()) {
    IFormElement e=getForm().getChild(index);
    if (e instanceof GroupDef) {
      GroupDef g=(GroupDef)e;
      if (g.getRepeat() && g.getCountReference() != null) {
        IAnswerData count=getForm().getMainInstance().resolveReference(g.getConextualizedCountReference(index.getReference())).getValue();
        if (count != null) {
          int fullcount=-1;
          try {
            fullcount=((Integer)new IntegerData().cast(count.uncast()).getValue()).intValue();
          }
 catch (          IllegalArgumentException iae) {
            throw new RuntimeException(""String_Node_Str"" + count.uncast().getString() + ""String_Node_Str""+ g.getConextualizedCountReference(index.getReference()).toString()+ ""String_Node_Str"");
          }
          TreeReference ref=getForm().getChildInstanceRef(index);
          TreeElement element=getForm().getMainInstance().resolveReference(ref);
          if (element == null) {
            if (index.getInstanceIndex() < fullcount) {
              try {
                getForm().createNewRepeat(index);
              }
 catch (              InvalidReferenceException ire) {
                ire.printStackTrace();
                throw new RuntimeException(""String_Node_Str"" + ire.getMessage());
              }
            }
          }
        }
      }
    }
  }
}",0.998761456527124
144697,"public static FormInstance loadFixtureForUser(String refId,String userId){
  IStorageUtilityIndexed storage=(IStorageUtilityIndexed)StorageManager.getStorage(""String_Node_Str"");
  FormInstance fixture=null;
  Vector<Integer> relevantFixtures=storage.getIDsForValue(FormInstance.META_ID,refId);
  if (relevantFixtures.size() == 1) {
    fixture=(FormInstance)storage.read(relevantFixtures.elementAt(0).intValue());
  }
 else   if (relevantFixtures.size() > 1) {
    Vector<Integer> relevantUserFixtures=storage.getIDsForValue(FormInstance.META_XMLNS,userId);
    if (relevantUserFixtures.size() != 0) {
      Integer userFixture=ArrayUtilities.intersectSingle(relevantFixtures,relevantUserFixtures);
      if (userFixture != null) {
        fixture=(FormInstance)storage.read(userFixture.intValue());
      }
    }
    if (fixture == null) {
      Integer globalFixture=ArrayUtilities.intersectSingle(storage.getIDsForValue(FormInstance.META_XMLNS,""String_Node_Str""),relevantFixtures);
      if (globalFixture == null) {
        return null;
      }
      fixture=(FormInstance)storage.read(globalFixture.intValue());
    }
  }
 else {
    return null;
  }
  return fixture;
}","public static FormInstance loadFixtureForUser(String refId,String userId){
  IStorageUtilityIndexed storage=(IStorageUtilityIndexed)StorageManager.getStorage(FormInstance.STORAGE_KEY);
  FormInstance fixture=null;
  Vector<Integer> relevantFixtures=storage.getIDsForValue(FormInstance.META_ID,refId);
  if (relevantFixtures.size() == 1) {
    fixture=(FormInstance)storage.read(relevantFixtures.elementAt(0).intValue());
  }
 else   if (relevantFixtures.size() > 1) {
    Vector<Integer> relevantUserFixtures=storage.getIDsForValue(FormInstance.META_XMLNS,userId);
    if (relevantUserFixtures.size() != 0) {
      Integer userFixture=ArrayUtilities.intersectSingle(relevantFixtures,relevantUserFixtures);
      if (userFixture != null) {
        fixture=(FormInstance)storage.read(userFixture.intValue());
      }
    }
    if (fixture == null) {
      Integer globalFixture=ArrayUtilities.intersectSingle(storage.getIDsForValue(FormInstance.META_XMLNS,""String_Node_Str""),relevantFixtures);
      if (globalFixture == null) {
        return null;
      }
      fixture=(FormInstance)storage.read(globalFixture.intValue());
    }
  }
 else {
    return null;
  }
  return fixture;
}",0.9834535426389478
144698,"protected IStorageUtilityIndexed<FormInstance> getFixtureStorage(){
  return (IStorageUtilityIndexed<FormInstance>)StorageManager.getStorage(""String_Node_Str"");
}","protected IStorageUtilityIndexed<FormInstance> getFixtureStorage(){
  return (IStorageUtilityIndexed<FormInstance>)StorageManager.getStorage(FormInstance.STORAGE_KEY);
}",0.8882175226586103
144699,"public IStorageUtilityIndexed<FormInstance> storage(){
  if (fixtureStorage == null) {
    fixtureStorage=CommCareTransactionParserFactory.this.sandbox.getUserFixtureStorage();
  }
  return fixtureStorage;
}","public IStorageUtilityIndexed<FormInstance> storage(){
  if (fixtureStorage == null) {
    fixtureStorage=sandbox.getUserFixtureStorage();
  }
  return fixtureStorage;
}",0.898936170212766
144700,"public void initFixtureParser(){
  fixtureParser=new TransactionParserFactory(){
    FixtureXmlParser created=null;
    public TransactionParser getParser(    KXmlParser parser){
      if (created == null) {
        created=new FixtureXmlParser(parser){
          private IStorageUtilityIndexed<FormInstance> fixtureStorage;
          public IStorageUtilityIndexed<FormInstance> storage(){
            if (fixtureStorage == null) {
              fixtureStorage=CommCareTransactionParserFactory.this.sandbox.getUserFixtureStorage();
            }
            return fixtureStorage;
          }
        }
;
      }
      return created;
    }
  }
;
}","public void initFixtureParser(){
  fixtureParser=new TransactionParserFactory(){
    FixtureXmlParser created=null;
    public TransactionParser getParser(    KXmlParser parser){
      if (created == null) {
        created=new FixtureXmlParser(parser){
          private IStorageUtilityIndexed<FormInstance> fixtureStorage;
          public IStorageUtilityIndexed<FormInstance> storage(){
            if (fixtureStorage == null) {
              fixtureStorage=sandbox.getUserFixtureStorage();
            }
            return fixtureStorage;
          }
        }
;
      }
      return created;
    }
  }
;
}",0.9507154213036566
144701,"public CommCareConfigEngine(OutputStream output,PrototypeFactory prototypeFactory){
  this.output=output;
  this.print=new PrintStream(output);
  this.platform=new CommCarePlatform(2,26);
  this.mLiveFactory=prototypeFactory;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  updateTable=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  recoveryTable=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  StorageManager.forceClear();
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility(type,mLiveFactory);
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,FormDef.class);
  StorageManager.registerStorage(""String_Node_Str"",FormInstance.class);
}","public CommCareConfigEngine(OutputStream output,PrototypeFactory prototypeFactory){
  this.output=output;
  this.print=new PrintStream(output);
  this.platform=new CommCarePlatform(2,26);
  this.mLiveFactory=prototypeFactory;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  updateTable=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  recoveryTable=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility(Resource.class,mLiveFactory));
  StorageManager.forceClear();
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility(type,mLiveFactory);
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,FormDef.class);
  StorageManager.registerStorage(FormInstance.STORAGE_KEY,FormInstance.class);
}",0.9816815406294036
144702,"public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  String caseId=parser.getAttributeValue(null,""String_Node_Str"");
  if (caseId == null || caseId.equals(""String_Node_Str"")) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  Case caseForBlock=null;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[3];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      if (data[0] == null || data[2] == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      boolean overriden=false;
      if (acceptCreateOverwrites) {
        caseForBlock=retrieve(caseId);
        if (caseForBlock != null) {
          caseForBlock.setName(data[2]);
          caseForBlock.setTypeId(data[0]);
          overriden=true;
        }
      }
      if (caseForBlock == null) {
        caseForBlock=CreateCase(data[2],data[0]);
        caseForBlock.setCaseId(caseId);
        caseForBlock.setDateOpened(modified);
      }
      if (data[1] != null) {
        caseForBlock.setUserId(data[1]);
      }
      create=true;
      String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        if (key.equals(""String_Node_Str"")) {
          caseForBlock.setTypeId(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setName(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setDateOpened(DateUtils.parseDate(value));
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setUserId(value);
        }
 else {
          caseForBlock.setProperty(key,value);
        }
      }
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      caseForBlock.setClosed(true);
      commit(caseForBlock);
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String indexName=parser.getName();
        String caseType=parser.getAttributeValue(null,""String_Node_Str"");
        String value=parser.nextText().trim();
        if (value.equals(caseId)) {
          throw new InvalidStructureException(""String_Node_Str"" + caseId + ""String_Node_Str"",parser);
        }
        if (value.equals(""String_Node_Str"")) {
          value=null;
        }
        String relationship=parser.getAttributeValue(null,""String_Node_Str"");
        if (relationship == null) {
          relationship=CaseIndex.RELATIONSHIP_CHILD;
        }
        if (value == null) {
          caseForBlock.removeIndex(indexName);
        }
 else {
          caseForBlock.setIndex(new CaseIndex(indexName,caseType,value,relationship));
        }
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String attachmentName=parser.getName();
        String src=parser.getAttributeValue(null,""String_Node_Str"");
        String from=parser.getAttributeValue(null,""String_Node_Str"");
        String fileName=parser.getAttributeValue(null,""String_Node_Str"");
        if ((src == null || ""String_Node_Str"".equals(src)) && (from == null || ""String_Node_Str"".equals(from))) {
          this.removeAttachment(caseForBlock,attachmentName);
          caseForBlock.removeAttachment(attachmentName);
          continue;
        }
        String reference=this.processAttachment(src,from,fileName,parser);
        if (reference != null) {
          caseForBlock.updateAttachment(attachmentName,reference);
        }
      }
    }
  }
  if (caseForBlock != null) {
    caseForBlock.setLastModified(modified);
    commit(caseForBlock);
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}","public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  String caseId=parser.getAttributeValue(null,""String_Node_Str"");
  if (caseId == null || caseId.equals(""String_Node_Str"")) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  Case caseForBlock=null;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[3];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      if (data[0] == null || data[2] == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      boolean overriden=false;
      if (acceptCreateOverwrites) {
        caseForBlock=retrieve(caseId);
        if (caseForBlock != null) {
          caseForBlock.setName(data[2]);
          caseForBlock.setTypeId(data[0]);
          overriden=true;
        }
      }
      if (caseForBlock == null) {
        caseForBlock=CreateCase(data[2],data[0]);
        caseForBlock.setCaseId(caseId);
        caseForBlock.setDateOpened(modified);
      }
      if (data[1] != null) {
        caseForBlock.setUserId(data[1]);
      }
      create=true;
      String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        if (key.equals(""String_Node_Str"")) {
          caseForBlock.setTypeId(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setName(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setDateOpened(DateUtils.parseDate(value));
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setUserId(value);
        }
 else {
          caseForBlock.setProperty(key,value);
        }
      }
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      caseForBlock.setClosed(true);
      commit(caseForBlock);
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String indexName=parser.getName();
        String caseType=parser.getAttributeValue(null,""String_Node_Str"");
        String relationship=parser.getAttributeValue(null,""String_Node_Str"");
        if (relationship == null) {
          relationship=CaseIndex.RELATIONSHIP_CHILD;
        }
        String value=parser.nextText().trim();
        if (value.equals(caseId)) {
          throw new InvalidStructureException(""String_Node_Str"" + caseId + ""String_Node_Str"",parser);
        }
        if (value.equals(""String_Node_Str"")) {
          value=null;
        }
        if (value == null) {
          caseForBlock.removeIndex(indexName);
        }
 else {
          caseForBlock.setIndex(new CaseIndex(indexName,caseType,value,relationship));
        }
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String attachmentName=parser.getName();
        String src=parser.getAttributeValue(null,""String_Node_Str"");
        String from=parser.getAttributeValue(null,""String_Node_Str"");
        String fileName=parser.getAttributeValue(null,""String_Node_Str"");
        if ((src == null || ""String_Node_Str"".equals(src)) && (from == null || ""String_Node_Str"".equals(from))) {
          this.removeAttachment(caseForBlock,attachmentName);
          caseForBlock.removeAttachment(attachmentName);
          continue;
        }
        String reference=this.processAttachment(src,from,fileName,parser);
        if (reference != null) {
          caseForBlock.updateAttachment(attachmentName,reference);
        }
      }
    }
  }
  if (caseForBlock != null) {
    caseForBlock.setLastModified(modified);
    commit(caseForBlock);
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}",0.950199927299164
144703,"public Vector getChildrenWithName(String name){
  Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
  if (!done[0]) {
    return children;
  }
  if (children.size() == 0) {
    TreeElement emptyNode=new TreeElement(name);
    emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
    this.addChild(emptyNode);
    emptyNode.setParent(this);
    children.addElement(emptyNode);
  }
  return children;
}","public Vector getChildrenWithName(String name){
  Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
  if (!done[0]) {
    return children;
  }
  if (children.size() == 0) {
    TreeElement emptyNode=new TreeElement(name);
    emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
    emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
    this.addChild(emptyNode);
    emptyNode.setParent(this);
    children.addElement(emptyNode);
  }
  return children;
}",0.9276859504132232
144704,"private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    if (recordId == -1) {
      Vector<Integer> ids=parent.storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Case c=parent.getCase(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.isClosed() ? ""String_Node_Str"" : ""String_Node_Str"");
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getUserId() == null ? ""String_Node_Str"" : c.getUserId());
    final boolean[] done=new boolean[]{false};
    if (!parent.reportMode) {
      TreeElement scratch=new TreeElement(""String_Node_Str"");
      String name=c.getName();
      scratch.setAnswer(new StringData(name == null ? ""String_Node_Str"" : name));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(""String_Node_Str"");
      scratch.setAnswer(new DateData(c.getDateOpened()));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(LAST_MODIFIED_KEY);
      scratch.setAnswer(new DateData(c.getLastModified()));
      cacheBuilder.addChild(scratch);
      for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
        String key=(String)en.nextElement();
        if (LAST_MODIFIED_KEY.equals(key)) {
          continue;
        }
        scratch=new TreeElement(parent.intern(key));
        Object temp=c.getProperty(key);
        if (temp instanceof String) {
          scratch.setValue(new UncastData((String)temp));
        }
 else {
          scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
        }
        cacheBuilder.addChild(scratch);
      }
      TreeElement index=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (!done[0]) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
        public Vector getChildrenWithName(        String name){
          Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
          if (!done[0]) {
            return children;
          }
          if (children.size() == 0) {
            TreeElement emptyNode=new TreeElement(name);
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            children.addElement(emptyNode);
          }
          return children;
        }
      }
;
      Vector<CaseIndex> indices=c.getIndices();
      for (      CaseIndex i : indices) {
        scratch=new TreeElement(i.getName());
        scratch.setAttribute(null,""String_Node_Str"",this.parent.intern(i.getTargetType()));
        scratch.setValue(new UncastData(i.getTarget()));
        index.addChild(scratch);
      }
      cacheBuilder.addChild(index);
      TreeElement attachments=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (!done[0]) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
      }
;
      for (      String attachment : c.getAttachments()) {
        scratch=new TreeElement(attachment);
        scratch.setValue(new UncastData(c.getAttachmentSource(attachment)));
        attachments.addChild(scratch);
      }
      cacheBuilder.addChild(attachments);
    }
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}","private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    if (recordId == -1) {
      Vector<Integer> ids=parent.storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Case c=parent.getCase(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.isClosed() ? ""String_Node_Str"" : ""String_Node_Str"");
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getUserId() == null ? ""String_Node_Str"" : c.getUserId());
    final boolean[] done=new boolean[]{false};
    if (!parent.reportMode) {
      TreeElement scratch=new TreeElement(""String_Node_Str"");
      String name=c.getName();
      scratch.setAnswer(new StringData(name == null ? ""String_Node_Str"" : name));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(""String_Node_Str"");
      scratch.setAnswer(new DateData(c.getDateOpened()));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(LAST_MODIFIED_KEY);
      scratch.setAnswer(new DateData(c.getLastModified()));
      cacheBuilder.addChild(scratch);
      for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
        String key=(String)en.nextElement();
        if (LAST_MODIFIED_KEY.equals(key)) {
          continue;
        }
        scratch=new TreeElement(parent.intern(key));
        Object temp=c.getProperty(key);
        if (temp instanceof String) {
          scratch.setValue(new UncastData((String)temp));
        }
 else {
          scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
        }
        cacheBuilder.addChild(scratch);
      }
      TreeElement index=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (!done[0]) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
        public Vector getChildrenWithName(        String name){
          Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
          if (!done[0]) {
            return children;
          }
          if (children.size() == 0) {
            TreeElement emptyNode=new TreeElement(name);
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            children.addElement(emptyNode);
          }
          return children;
        }
      }
;
      Vector<CaseIndex> indices=c.getIndices();
      for (      CaseIndex i : indices) {
        scratch=new TreeElement(i.getName());
        scratch.setAttribute(null,""String_Node_Str"",this.parent.intern(i.getTargetType()));
        scratch.setAttribute(null,""String_Node_Str"",this.parent.intern(i.getRelationship()));
        scratch.setValue(new UncastData(i.getTarget()));
        index.addChild(scratch);
      }
      cacheBuilder.addChild(index);
      TreeElement attachments=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (!done[0]) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
      }
;
      for (      String attachment : c.getAttachments()) {
        scratch=new TreeElement(attachment);
        scratch.setValue(new UncastData(c.getAttachmentSource(attachment)));
        attachments.addChild(scratch);
      }
      cacheBuilder.addChild(attachments);
    }
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}",0.9583418419440474
144705,"/** 
 * Rebase assigns this tree element to a new root instance node. Used to migrate the already created tree structure to a new instance connector.
 * @param instanceRoot The root of the new tree that this element should be a part of
 */
public void rebase(AbstractTreeElement instanceRoot){
  this.instanceRoot=instanceRoot;
  expireCachedRef();
}","/** 
 * Rebase assigns this tree element to a new root instance node. Used to migrate the already created tree structure to a new instance connector.
 * @param instanceRoot The root of the new tree that this element should be a part of//     
 */
public void rebase(AbstractTreeElement instanceRoot){
  this.instanceRoot=instanceRoot;
  expireCachedRef();
}",0.99009900990099
144706,"@Override public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,frameId);
  ExtUtil.write(out,new ExtWrapList(steps));
  ExtUtil.write(out,new ExtWrapList(snapshot));
  ExtUtil.writeBool(out,dead);
}","@Override public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapNullable(frameId));
  ExtUtil.write(out,new ExtWrapList(steps));
  ExtUtil.write(out,new ExtWrapList(snapshot));
  ExtUtil.writeBool(out,dead);
}",0.9252525252525252
144707,"public synchronized void clearSnapshot(){
  this.snapshot=null;
}","public synchronized void clearSnapshot(){
  this.snapshot.clear();
}",0.9172932330827068
144708,"/** 
 * Requests that the frame capture an original snapshot of its state. This snapshot can be referenced later to compare the eventual state of the frame to an earlier point
 */
public synchronized void captureSnapshot(){
  snapshot=new Vector<StackFrameStep>();
  for (  StackFrameStep s : steps) {
    snapshot.addElement(s);
  }
}","/** 
 * Requests that the frame capture an original snapshot of its state. This snapshot can be referenced later to compare the eventual state of the frame to an earlier point
 */
public synchronized void captureSnapshot(){
  snapshot.clear();
  for (  StackFrameStep s : steps) {
    snapshot.addElement(s);
  }
}",0.9491525423728814
144709,"@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  frameId=ExtUtil.readString(in);
  steps=(Vector<StackFrameStep>)ExtUtil.read(in,new ExtWrapList(StackFrameStep.class),pf);
  snapshot=(Vector<StackFrameStep>)ExtUtil.read(in,new ExtWrapList(StackFrameStep.class),pf);
  dead=ExtUtil.readBool(in);
}","@Override public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  frameId=(String)ExtUtil.read(in,new ExtWrapNullable(String.class));
  steps=(Vector<StackFrameStep>)ExtUtil.read(in,new ExtWrapList(StackFrameStep.class),pf);
  snapshot=(Vector<StackFrameStep>)ExtUtil.read(in,new ExtWrapList(StackFrameStep.class),pf);
  dead=ExtUtil.readBool(in);
}",0.9460154241645244
144710,"/** 
 * Determines whether the current frame state is incompatible with a previously snapshotted frame state, if one exists. If no snapshot exists, this method will return false. Compatibility is determined by checking that each step in the previous snapshot is matched by an identical step in the current snapshot.
 */
public synchronized boolean isSnapshotIncompatible(){
  if (snapshot == null) {
    return false;
  }
  if (snapshot.size() > steps.size()) {
    return true;
  }
  for (int i=0; i < snapshot.size(); ++i) {
    if (!snapshot.elementAt(i).equals(steps.elementAt(i))) {
      return true;
    }
  }
  return false;
}","/** 
 * Determines whether the current frame state is incompatible with a previously snapshotted frame state, if one exists. If no snapshot exists, this method will return false. Compatibility is determined by checking that each step in the previous snapshot is matched by an identical step in the current snapshot.
 */
public synchronized boolean isSnapshotIncompatible(){
  if (snapshot.isEmpty()) {
    return false;
  }
  if (snapshot.size() > steps.size()) {
    return true;
  }
  for (int i=0; i < snapshot.size(); ++i) {
    if (!snapshot.elementAt(i).equals(steps.elementAt(i))) {
      return true;
    }
  }
  return false;
}",0.9858267716535432
144711,"@Override public String toString(){
  StringBuilder output=new StringBuilder(""String_Node_Str"");
  prettyPrintSteps(steps,output);
  if (snapshot != null && !snapshot.isEmpty()) {
    output.append(""String_Node_Str"");
    prettyPrintSteps(snapshot,output);
  }
  if (dead) {
    output.append(""String_Node_Str"");
  }
  return output.toString();
}","@Override public String toString(){
  StringBuilder output=new StringBuilder(""String_Node_Str"");
  prettyPrintSteps(steps,output);
  if (!snapshot.isEmpty()) {
    output.append(""String_Node_Str"");
    prettyPrintSteps(snapshot,output);
  }
  if (dead) {
    output.append(""String_Node_Str"");
  }
  return output.toString();
}",0.9702380952380952
144712,"@Override public Object eval(FormInstance model,EvaluationContext ec){
  try {
    return expr.evalRaw(model,ec);
  }
 catch (  XPathException e) {
    e.setSource(""String_Node_Str"" + contextRef.toString(true));
    throw e;
  }
}","public Object eval(FormInstance model,EvaluationContext ec){
  try {
    return expr.evalRaw(model,ec);
  }
 catch (  XPathException e) {
    e.setSource(""String_Node_Str"" + contextRef.toString(true));
    throw e;
  }
}",0.9777777777777776
144713,"@Override public boolean canCascade(){
  return true;
}","public boolean canCascade(){
  return true;
}",0.9
144714,"@Override public void apply(TreeReference ref,Object result,FormInstance model,FormDef f){
  int dataType=f.getMainInstance().resolveReference(ref).getDataType();
  f.setAnswer(wrapData(result,dataType),ref);
}","public void apply(TreeReference ref,Object result,FormInstance model,FormDef f){
  int dataType=f.getMainInstance().resolveReference(ref).getDataType();
  f.setAnswer(wrapData(result,dataType),ref);
}",0.975609756097561
144715,"@Override public String getDebugLabel(){
  return ""String_Node_Str"";
}","public String getDebugLabel(){
  return ""String_Node_Str"";
}",0.9230769230769232
144716,"/** 
 * Copy constructor
 */
public ExternalDataInstance(ExternalDataInstance instance){
  super(instance.getInstanceId());
  this.reference=instance.getReference();
  this.base=instance.getBase();
  this.root=instance.getRoot();
}","/** 
 * Copy constructor
 */
public ExternalDataInstance(ExternalDataInstance instance){
  super(instance.getInstanceId());
  this.reference=instance.getReference();
  this.base=instance.getBase();
  this.root=instance.getRoot();
  this.mCacheHost=instance.getCacheHost();
}",0.9148514851485148
144717,"/** 
 * Creates a new factory for processing incoming XML.
 * @param tolerant True if processing should fail in the event of conflicting data,false if processing should proceed as long as it is possible.
 */
public J2METransactionParserFactory(boolean tolerant){
  super(new J2MESandbox());
  syncToken=null;
  caseTallies=new int[3];
  this.tolerant=tolerant;
}","/** 
 * Creates a new factory for processing incoming XML.
 * @param tolerant True if processing should fail in the event of conflicting data,false if processing should proceed as long as it is possible.
 */
public J2METransactionParserFactory(boolean tolerant){
  super(new J2MESandbox());
  caseTallies=new int[3];
  this.tolerant=tolerant;
}",0.9745042492917848
144718,"public void processAction(FormDef model,TreeReference contextRef){
  TreeReference qualifiedReference=contextRef == null ? target : target.contextualize(contextRef);
  if (contextRef != null) {
    if (!contextRef.isParentOf(qualifiedReference,false)) {
      return;
    }
  }
  EvaluationContext context=new EvaluationContext(model.getEvaluationContext(),qualifiedReference);
  Object result;
  if (explicitValue != null) {
    result=explicitValue;
  }
 else {
    result=XPathFuncExpr.unpack(value.eval(model.getMainInstance(),context));
  }
  String failMessage=""String_Node_Str"" + target.toString(true) + ""String_Node_Str"";
  if (qualifiedReference.hasPredicates()) {
    Vector<TreeReference> references=context.expandReference(qualifiedReference);
    if (references.size() == 0) {
      throw new NullPointerException(failMessage);
    }
 else     if (references.size() > 1) {
      throw new XPathTypeMismatchException(""String_Node_Str"" + XPathNodeset.printNodeContents(references) + ""String_Node_Str"");
    }
 else {
      qualifiedReference=references.elementAt(0);
    }
  }
  AbstractTreeElement node=context.resolveReference(qualifiedReference);
  if (node == null) {
    throw new NullPointerException(failMessage);
  }
  int dataType=node.getDataType();
  IAnswerData val=Recalculate.wrapData(result,dataType);
  model.setValue(val == null ? null : AnswerDataFactory.templateByDataType(dataType).cast(val.uncast()),qualifiedReference);
}","public void processAction(FormDef model,TreeReference contextRef){
  TreeReference qualifiedReference=contextRef == null ? target : target.contextualize(contextRef);
  if (contextRef != null) {
    if (!contextRef.isParentOf(qualifiedReference,false)) {
      return;
    }
  }
  EvaluationContext context=new EvaluationContext(model.getEvaluationContext(),qualifiedReference);
  String failMessage=""String_Node_Str"" + target.toString(true) + ""String_Node_Str"";
  if (qualifiedReference.hasPredicates()) {
    Vector<TreeReference> references=context.expandReference(qualifiedReference,true);
    if (references.size() == 0) {
      throw new NullPointerException(failMessage);
    }
 else     if (references.size() > 1) {
      TreeReference singleFullyQualifiedRef=null;
      for (      TreeReference ref : references) {
        if (!ref.isTemplateRef()) {
          if (singleFullyQualifiedRef == null) {
            singleFullyQualifiedRef=ref;
          }
 else {
            throw new XPathTypeMismatchException(""String_Node_Str"" + XPathNodeset.printNodeContents(references) + ""String_Node_Str"");
          }
        }
      }
      if (singleFullyQualifiedRef == null) {
        return;
      }
    }
 else {
      qualifiedReference=references.elementAt(0);
    }
  }
  if (qualifiedReference.isTemplateRef()) {
    return;
  }
  AbstractTreeElement node=context.resolveReference(qualifiedReference);
  if (node == null) {
    if (model.getMainInstance().hasTemplatePath(target)) {
      return;
    }
 else {
      throw new NullPointerException(failMessage);
    }
  }
  Object result;
  if (explicitValue != null) {
    result=explicitValue;
  }
 else {
    result=XPathFuncExpr.unpack(value.eval(model.getMainInstance(),context));
  }
  int dataType=node.getDataType();
  IAnswerData val=Recalculate.wrapData(result,dataType);
  model.setValue(val == null ? null : AnswerDataFactory.templateByDataType(dataType).cast(val.uncast()),qualifiedReference);
}",0.4467836257309941
144719,"/** 
 * Take in a value (only a string for now, TODO: Extend?) that doesn't have any type information and attempt to infer a more specific type that may assist in equality or comparison operations
 * @param attrValue A typeless data object
 * @return The passed in object in as specific of a type as was able tobe identified.
 */
public static Object InferType(String attrValue){
  try {
    return new Double(Double.parseDouble(attrValue));
  }
 catch (  NumberFormatException ife) {
  }
  return attrValue;
}","/** 
 * Take in a value (only a string for now, TODO: Extend?) that doesn't have any type information and attempt to infer a more specific type that may assist in equality or comparison operations
 * @param attrValue A typeless data object
 * @return The passed in object in as specific of a type as was able tobe identified.
 */
public static Object InferType(String attrValue){
  Double d=mDoubleParseCache.retrieve(attrValue);
  if (d != null) {
    if (d.isNaN()) {
      return attrValue;
    }
 else {
      return d;
    }
  }
  try {
    Double ret=new Double(Double.parseDouble(attrValue));
    mDoubleParseCache.register(attrValue,ret);
    return ret;
  }
 catch (  NumberFormatException ife) {
    mDoubleParseCache.register(attrValue,new Double(Double.NaN));
  }
  return attrValue;
}",0.7651109410864575
144720,"public void doTests(){
  EvaluationContext ec=getFunctionHandlers();
  FormInstance instance=createTestInstance();
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,new Double(555555.555));
  testEval(""String_Node_Str"",null,null,new Double(0.000555));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(100.001));
  testEval(""String_Node_Str"",null,null,new Double(0.1001));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-12345.6789));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(10.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-123.5));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(14127.0));
  testEval(""String_Node_Str"",null,null,new Double(-10252.0));
  testEval(""String_Node_Str"",null,ec,new Double(5.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2000,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1945,4,26));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1996,2,29));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,2));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1969,12,31));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2008,9,5));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1941,12,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1989,11,9));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(0.5));
  testEval(""String_Node_Str"",null,null,new Double(5.5));
  testEval(""String_Node_Str"",null,null,DateUtils.parseDate(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.7));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(-4.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-40.0));
  testEval(""String_Node_Str"",null,null,new Double(-19.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.21));
  testEval(""String_Node_Str"",null,null,new Double(2.5));
  testEval(""String_Node_Str"",null,null,new Double(1.5));
  testEval(""String_Node_Str"",null,null,new Double(12.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.9));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(65.0));
  testEval(""String_Node_Str"",null,null,new Double(56088.0));
  testEval(""String_Node_Str"",null,null,new Double(9.0));
  testEval(""String_Node_Str"",null,null,new Double(9104.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(3.5));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"" + Math.E + ""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(4.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(6.25));
  testEval(""String_Node_Str"",null,null,new Double(.25));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(-3.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new Double(8.0));
  testEval(""String_Node_Str"",null,ec,new Double(3.0));
  testEval(""String_Node_Str"",null,ec,new XPathArityException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathArityException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  EvaluationContext varContext=getVariableContext();
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,""String_Node_Str"");
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  String wildcardIndex=""String_Node_Str"";
  String indexOne=""String_Node_Str"";
  String indexTwo=""String_Node_Str"";
  XPathPathExpr expr=XPathReference.getPathExpr(wildcardIndex);
  XPathPathExpr expr2=XPathReference.getPathExpr(indexOne);
  XPathPathExpr expr3=XPathReference.getPathExpr(indexTwo);
  if (!expr.matches(expr2)) {
    fail(""String_Node_Str"" + wildcardIndex + ""String_Node_Str""+ indexOne);
  }
  if (!expr2.matches(expr)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ wildcardIndex);
  }
  if (expr2.matches(expr3)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ indexTwo);
  }
  try {
    testEval(""String_Node_Str"",null,ec,new XPathUnhandledException());
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
  }
  ec.addFunctionHandler(read);
  ec.addFunctionHandler(write);
  read.val=""String_Node_Str"";
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  if (!""String_Node_Str"".equals(write.val)) {
    fail(""String_Node_Str"");
  }
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new IntegerData(17));
  addDataRef(instance,""String_Node_Str"",new IntegerData(5));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  testEval(""String_Node_Str"",instance,null,""String_Node_Str"");
  testEval(""String_Node_Str"",instance,null,new Double(17.0));
  testEval(""String_Node_Str"",instance,null,new Double(5.0));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(1));
  testEval(""String_Node_Str"",instance,null,new Double(0));
  testEval(""String_Node_Str"",instance,null,new Double(1));
}","@Test public void doTests(){
  EvaluationContext ec=getFunctionHandlers();
  FormInstance instance=createTestInstance();
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,new Double(555555.555));
  testEval(""String_Node_Str"",null,null,new Double(0.000555));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(100.001));
  testEval(""String_Node_Str"",null,null,new Double(0.1001));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-12345.6789));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(10.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-123.5));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(14127.0));
  testEval(""String_Node_Str"",null,null,new Double(-10252.0));
  testEval(""String_Node_Str"",null,ec,new Double(5.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2000,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1945,4,26));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1996,2,29));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,2));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1969,12,31));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2008,9,5));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1941,12,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1989,11,9));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(0.5));
  testEval(""String_Node_Str"",null,null,new Double(5.5));
  testEval(""String_Node_Str"",null,null,DateUtils.parseDate(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.7));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(-4.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-40.0));
  testEval(""String_Node_Str"",null,null,new Double(-19.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.21));
  testEval(""String_Node_Str"",null,null,new Double(2.5));
  testEval(""String_Node_Str"",null,null,new Double(1.5));
  testEval(""String_Node_Str"",null,null,new Double(12.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.9));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(65.0));
  testEval(""String_Node_Str"",null,null,new Double(56088.0));
  testEval(""String_Node_Str"",null,null,new Double(9.0));
  testEval(""String_Node_Str"",null,null,new Double(9104.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(3.5));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"" + Math.E + ""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(4.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(6.25));
  testEval(""String_Node_Str"",null,null,new Double(.25));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(-3.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathArityException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new Double(8.0));
  testEval(""String_Node_Str"",null,ec,new Double(3.0));
  testEval(""String_Node_Str"",null,ec,new XPathArityException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathArityException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  EvaluationContext varContext=getVariableContext();
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,""String_Node_Str"");
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  String wildcardIndex=""String_Node_Str"";
  String indexOne=""String_Node_Str"";
  String indexTwo=""String_Node_Str"";
  XPathPathExpr expr=XPathReference.getPathExpr(wildcardIndex);
  XPathPathExpr expr2=XPathReference.getPathExpr(indexOne);
  XPathPathExpr expr3=XPathReference.getPathExpr(indexTwo);
  if (!expr.matches(expr2)) {
    fail(""String_Node_Str"" + wildcardIndex + ""String_Node_Str""+ indexOne);
  }
  if (!expr2.matches(expr)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ wildcardIndex);
  }
  if (expr2.matches(expr3)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ indexTwo);
  }
  try {
    testEval(""String_Node_Str"",null,ec,new XPathUnhandledException());
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
  }
  ec.addFunctionHandler(read);
  ec.addFunctionHandler(write);
  read.val=""String_Node_Str"";
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  if (!""String_Node_Str"".equals(write.val)) {
    fail(""String_Node_Str"");
  }
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new IntegerData(17));
  addDataRef(instance,""String_Node_Str"",new IntegerData(5));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  testEval(""String_Node_Str"",instance,null,""String_Node_Str"");
  testEval(""String_Node_Str"",instance,null,new Double(17.0));
  testEval(""String_Node_Str"",instance,null,new Double(5.0));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(2));
  testEval(""String_Node_Str"",instance,null,new Double(1));
  testEval(""String_Node_Str"",instance,null,new Double(0));
  testEval(""String_Node_Str"",instance,null,new Double(1));
}",0.9998586239396796
144721,"/** 
 * Given an array of details, count their total number of fields.
 * @return int
 */
private int getFlattenedFieldCount(){
  Detail[] details=this.getFlattenedDetails();
  int count=0;
  for (int i=0; i < details.length; i++) {
    count+=details[i].getFields().length;
  }
  return count;
}","/** 
 * Given an array of details, count their total number of fields.
 * @return int
 */
public int getFlattenedFieldCount(){
  Detail[] details=this.getFlattenedDetails();
  int count=0;
  for (int i=0; i < details.length; i++) {
    count+=details[i].getFields().length;
  }
  return count;
}",0.9813874788494078
144722,"public static void parseAndAdd(OrderedHashtable locale,String line,int curline){
  line=line.trim();
  int i=0;
  int dec=line.length();
  while ((i=LocalizationUtils.lastIndexOf(line.substring(0,dec),""String_Node_Str"")) != -1) {
    if ((i != 0) && !(line.charAt(i - 1) == '\\')) {
      line=line.substring(0,i);
      dec=line.length();
    }
 else {
      dec=i;
    }
  }
  if (line.indexOf('=') == -1) {
    if (line.trim().equals(""String_Node_Str"")) {
    }
 else {
      System.out.println(""String_Node_Str"" + curline + ""String_Node_Str""+ line);
    }
  }
 else {
    if (line.indexOf('=') != line.length() - 1) {
      String value=line.substring(line.indexOf('=') + 1,line.length());
      locale.put(line.substring(0,line.indexOf('=')),parseValue(value));
    }
 else {
      System.out.println(""String_Node_Str"" + curline + ""String_Node_Str""+ line+ ""String_Node_Str"");
    }
  }
}","public static void parseAndAdd(OrderedHashtable locale,String line,int curline){
  line=line.trim();
  int i=0;
  int dec=line.length();
  while ((i=LocalizationUtils.lastIndexOf(line.substring(0,dec),""String_Node_Str"")) != -1) {
    if ((i == 0) || !(line.charAt(i - 1) == '\\')) {
      line=line.substring(0,i);
      dec=line.length();
    }
 else {
      dec=i;
    }
  }
  if (line.indexOf('=') == -1) {
    if (line.trim().equals(""String_Node_Str"")) {
    }
 else {
      System.out.println(""String_Node_Str"" + curline + ""String_Node_Str""+ line);
    }
  }
 else {
    if (line.indexOf('=') != line.length() - 1) {
      String value=line.substring(line.indexOf('=') + 1,line.length());
      locale.put(line.substring(0,line.indexOf('=')),parseValue(value));
    }
 else {
      System.out.println(""String_Node_Str"" + curline + ""String_Node_Str""+ line+ ""String_Node_Str"");
    }
  }
}",0.9966367713004484
144723,"public CaseChildElement getChild(String name,int multiplicity){
  if ((multiplicity == TreeReference.INDEX_TEMPLATE) && ""String_Node_Str"".equals(name)) {
    return CaseChildElement.TemplateElement(this);
  }
  if (name.equals(""String_Node_Str"")) {
    getCases();
    if (cases.size() == 0) {
      return CaseChildElement.TemplateElement(this);
    }
    return cases.elementAt(multiplicity);
  }
  return null;
}","public CaseChildElement getChild(String name,int multiplicity){
  if ((multiplicity == TreeReference.INDEX_TEMPLATE) && ""String_Node_Str"".equals(name)) {
    return null;
  }
  if (name.equals(""String_Node_Str"")) {
    getCases();
    if (cases.size() == 0) {
      return CaseChildElement.TemplateElement(this);
    }
    return cases.elementAt(multiplicity);
  }
  return null;
}",0.9472361809045228
144724,"public LedgerChildElement getChild(String name,int multiplicity){
  if ((multiplicity == TreeReference.INDEX_TEMPLATE) && ""String_Node_Str"".equals(name)) {
    return LedgerChildElement.TemplateElement(this);
  }
  if (name.equals(LedgerChildElement.NAME)) {
    getLedgers();
    if (ledgers.size() == 0) {
      return LedgerChildElement.TemplateElement(this);
    }
    return ledgers.elementAt(multiplicity);
  }
  return null;
}","public LedgerChildElement getChild(String name,int multiplicity){
  if ((multiplicity == TreeReference.INDEX_TEMPLATE) && ""String_Node_Str"".equals(name)) {
    return null;
  }
  if (name.equals(LedgerChildElement.NAME)) {
    getLedgers();
    if (ledgers.size() == 0) {
      return LedgerChildElement.TemplateElement(this);
    }
    return ledgers.elementAt(multiplicity);
  }
  return null;
}",0.946987951807229
144725,"/** 
 * Makes some (or all) of the table's resources available
 * @param master       The global resource to prepare against. Used toestablish whether resources need to be fetched remotely
 * @param instance     The instance (version and profile) to prepare against
 * @param toInitialize The ID of a single resource after which the tablepreparation can stop.
 * @throws UnresolvedResourceException       Required resource couldn't beidentified
 * @throws UnfullfilledRequirementsException resource(s) incompatible withcurrent CommCare version
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Stack<Resource> unreadyResources=getUnreadyResources();
  while (idNeedsInit(toInitialize) && !unreadyResources.isEmpty()) {
    for (    Resource r : unreadyResources) {
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            peer.mimick(r);
            commit(peer,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
          upgrade=true;
          invalid=ResourceTable.gatherResourcesLocalRefs(peer,master);
        }
      }
      findResourceLocationAndInstall(r,invalid,upgrade,instance,master);
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    unreadyResources=getUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : getResourcesWithStatus(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}","/** 
 * Makes some (or all) of the table's resources available
 * @param master       The global resource to prepare against. Used toestablish whether resources need to be fetched remotely
 * @param instance     The instance (version and profile) to prepare against
 * @param toInitialize The ID of a single resource after which the tablepreparation can stop.
 * @throws UnresolvedResourceException       Required resource couldn't beidentified
 * @throws UnfullfilledRequirementsException resource(s) incompatible withcurrent CommCare version
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Vector<Resource> unreadyResources=getUnreadyResources();
  while (idNeedsInit(toInitialize) && !unreadyResources.isEmpty()) {
    for (    Resource r : unreadyResources) {
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            peer.mimick(r);
            commit(peer,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
          upgrade=true;
          invalid=ResourceTable.gatherResourcesLocalRefs(peer,master);
        }
      }
      findResourceLocationAndInstall(r,invalid,upgrade,instance,master);
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    unreadyResources=getUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : getResourcesWithStatus(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}",0.9968970380818054
144726,"public FormInstance getSessionInstance(String deviceId,String appversion,String username,String userId,Hashtable<String,String> userFields){
  TreeElement sessionRoot=new TreeElement(""String_Node_Str"",0);
  TreeElement sessionData=new TreeElement(""String_Node_Str"",0);
  sessionRoot.addChild(sessionData);
  for (  StackFrameStep step : frame.getSteps()) {
    if (step.getType() == SessionFrame.STATE_DATUM_VAL) {
      TreeElement datum=new TreeElement(step.getId());
      datum.setValue(new UncastData(step.getValue()));
      sessionData.addChild(datum);
    }
  }
  TreeElement sessionMeta=new TreeElement(""String_Node_Str"",0);
  addData(sessionMeta,""String_Node_Str"",deviceId);
  addData(sessionMeta,""String_Node_Str"",appversion);
  addData(sessionMeta,""String_Node_Str"",username);
  addData(sessionMeta,""String_Node_Str"",userId);
  sessionRoot.addChild(sessionMeta);
  TreeElement user=new TreeElement(""String_Node_Str"",0);
  TreeElement userData=new TreeElement(""String_Node_Str"",0);
  user.addChild(userData);
  for (Enumeration en=userFields.keys(); en.hasMoreElements(); ) {
    String key=(String)en.nextElement();
    addData(userData,key,userFields.get(key));
  }
  sessionRoot.addChild(user);
  return new FormInstance(sessionRoot,""String_Node_Str"");
}","public FormInstance getSessionInstance(String deviceId,String appversion,String username,String userId,Hashtable<String,String> userFields){
  TreeElement sessionRoot=new TreeElement(""String_Node_Str"",0);
  TreeElement sessionData=new TreeElement(""String_Node_Str"",0);
  sessionRoot.addChild(sessionData);
  for (  StackFrameStep step : frame.getSteps()) {
    if (step.getType() == SessionFrame.STATE_DATUM_VAL) {
      Vector<TreeElement> matchingElements=sessionData.getChildrenWithName(step.getId());
      if (matchingElements.size() > 0) {
        matchingElements.elementAt(0).setValue(new UncastData(step.getValue()));
      }
 else {
        TreeElement datum=new TreeElement(step.getId());
        datum.setValue(new UncastData(step.getValue()));
        sessionData.addChild(datum);
      }
    }
  }
  TreeElement sessionMeta=new TreeElement(""String_Node_Str"",0);
  addData(sessionMeta,""String_Node_Str"",deviceId);
  addData(sessionMeta,""String_Node_Str"",appversion);
  addData(sessionMeta,""String_Node_Str"",username);
  addData(sessionMeta,""String_Node_Str"",userId);
  sessionRoot.addChild(sessionMeta);
  TreeElement user=new TreeElement(""String_Node_Str"",0);
  TreeElement userData=new TreeElement(""String_Node_Str"",0);
  user.addChild(userData);
  for (Enumeration en=userFields.keys(); en.hasMoreElements(); ) {
    String key=(String)en.nextElement();
    addData(userData,key,userFields.get(key));
  }
  sessionRoot.addChild(user);
  return new FormInstance(sessionRoot,""String_Node_Str"");
}",0.8207343412526998
144727,"public void next(){
  String next=session.getNeededData();
  if (next == null) {
    String xmlns=session.getForm();
    if (xmlns == null) {
      this.back();
      return;
    }
    Entry entry=session.getCurrentEntry();
    if (failedAssertion(entry.getAssertions())) {
      return;
    }
    String title;
    if (CommCareSense.sense()) {
      title=null;
    }
 else {
      title=Localizer.clearArguments(entry.getText().evaluate());
    }
    initializer=null;
    suiteTable.clear();
    entryTable.clear();
    menuTable.clear();
    final Vector<StackOperation> ops=entry.getPostEntrySessionOperations();
    CommCareFormEntryState state=new CommCareFormEntryState(title,xmlns,getPreloaders(),CommCareContext._().getFuncHandlers(),getIif()){
      protected void goHome(){
        session.markCurrentFrameForDeath();
        if (ops.size() > 0) {
          EvaluationContext ec=session.getEvaluationContext(getIif());
          session.executeStackOperations(ops,ec);
        }
        if (session.finishAndPop()) {
          next();
        }
 else {
          J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
        }
      }
      public void abort(){
        back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  if (next.equals(SessionFrame.STATE_COMMAND_ID)) {
    if (session.getCommand() == null) {
      session.clearAllState();
      J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      return;
    }
    MenuHomeState state=new MenuHomeState(this,session.getMenu(session.getCommand())){
      public void entry(      Suite suite,      Entry entry){
        throw new RuntimeException(""String_Node_Str"");
      }
      public void exitMenuTransition(){
        CommCareSessionController.this.back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  Suite suite=session.getCurrentSuite();
  SessionDatum datum=session.getNeededDatum();
  EvaluationContext context=session.getEvaluationContext(getIif());
  if (datum.getNodeset() == null) {
    XPathExpression form;
    try {
      form=XPathParseTool.parseXPath(datum.getValue());
    }
 catch (    XPathSyntaxException e) {
      e.printStackTrace();
      throw new RuntimeException(e.getMessage());
    }
    if (datum.getType() == SessionDatum.DATUM_TYPE_FORM) {
      CommCareSessionController.this.session.setXmlns(XPathFuncExpr.toString(form.eval(context.getMainInstance(),context)));
      CommCareSessionController.this.session.setDatum(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      CommCareSessionController.this.session.setDatum(datum.getDataId(),XPathFuncExpr.toString(form.eval(context.getMainInstance(),context)));
    }
    next();
    return;
  }
  Detail shortDetail=suite.getDetail(datum.getShortDetail());
  Detail longDetail=null;
  if (datum.getLongDetail() != null) {
    longDetail=suite.getDetail(datum.getLongDetail());
  }
  final NodeEntitySet nes=new NodeEntitySet(datum.getNodeset(),context);
  Entity<TreeReference> entity=new CommCareEntity(shortDetail,longDetail,context,nes);
  final CommCareSelectState<TreeReference> select=new CommCareSelectState<TreeReference>(entity,nes){
    SessionDatum datum;
    EvaluationContext context;
{
      datum=session.getNeededDatum();
      context=session.getEvaluationContext(getIif());
    }
    public void cancel(){
      CommCareSessionController.this.back();
    }
    public void entitySelected(    int id){
      TreeReference selected=nes.get(id);
      TreeReference outcome=XPathReference.getPathExpr(datum.getValue()).getReference().contextualize(selected);
      AbstractTreeElement element=context.resolveReference(outcome);
      if (element == null) {
        throw new RuntimeException(""String_Node_Str"" + outcome.toString());
      }
      String outputData=element.getValue().uncast().getString();
      CommCareSessionController.this.session.setDatum(datum.getDataId(),outputData);
      CommCareSessionController.this.next();
    }
  }
;
  J2MEDisplay.startStateWithLoadingScreen(select,new ProgressIndicator(){
    public double getProgress(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getProgress();
      }
 else {
        return nes.getProgress();
      }
    }
    public String getCurrentLoadingStatus(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getCurrentLoadingStatus();
      }
 else {
        return nes.getCurrentLoadingStatus();
      }
    }
    public int getIndicatorsProvided(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getIndicatorsProvided();
      }
 else {
        return nes.getIndicatorsProvided();
      }
    }
  }
);
  return;
}","public void next(){
  String next=session.getNeededData();
  if (next == null) {
    String xmlns=session.getForm();
    if (xmlns == null) {
      this.back();
      return;
    }
    Entry entry=session.getCurrentEntry();
    if (failedAssertion(entry.getAssertions())) {
      return;
    }
    String title;
    if (CommCareSense.sense()) {
      title=null;
    }
 else {
      title=Localizer.clearArguments(entry.getText().evaluate());
    }
    initializer=null;
    suiteTable.clear();
    entryTable.clear();
    menuTable.clear();
    final Vector<StackOperation> ops=entry.getPostEntrySessionOperations();
    CommCareFormEntryState state=new CommCareFormEntryState(title,xmlns,getPreloaders(),CommCareContext._().getFuncHandlers(),getIif()){
      protected void goHome(){
        if (session.finishExecuteAndPop(session.getEvaluationContext(getIif()))) {
          next();
        }
 else {
          J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
        }
      }
      public void abort(){
        back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  if (next.equals(SessionFrame.STATE_COMMAND_ID)) {
    if (session.getCommand() == null) {
      session.clearAllState();
      J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
      return;
    }
    MenuHomeState state=new MenuHomeState(this,session.getMenu(session.getCommand())){
      public void entry(      Suite suite,      Entry entry){
        throw new RuntimeException(""String_Node_Str"");
      }
      public void exitMenuTransition(){
        CommCareSessionController.this.back();
      }
    }
;
    J2MEDisplay.startStateWithLoadingScreen(state);
    return;
  }
  Suite suite=session.getCurrentSuite();
  SessionDatum datum=session.getNeededDatum();
  EvaluationContext context=session.getEvaluationContext(getIif());
  if (datum.getNodeset() == null) {
    XPathExpression form;
    try {
      form=XPathParseTool.parseXPath(datum.getValue());
    }
 catch (    XPathSyntaxException e) {
      e.printStackTrace();
      throw new RuntimeException(e.getMessage());
    }
    if (datum.getType() == SessionDatum.DATUM_TYPE_FORM) {
      CommCareSessionController.this.session.setXmlns(XPathFuncExpr.toString(form.eval(context.getMainInstance(),context)));
      CommCareSessionController.this.session.setDatum(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      CommCareSessionController.this.session.setDatum(datum.getDataId(),XPathFuncExpr.toString(form.eval(context.getMainInstance(),context)));
    }
    next();
    return;
  }
  Detail shortDetail=suite.getDetail(datum.getShortDetail());
  Detail longDetail=null;
  if (datum.getLongDetail() != null) {
    longDetail=suite.getDetail(datum.getLongDetail());
  }
  final NodeEntitySet nes=new NodeEntitySet(datum.getNodeset(),context);
  Entity<TreeReference> entity=new CommCareEntity(shortDetail,longDetail,context,nes);
  final CommCareSelectState<TreeReference> select=new CommCareSelectState<TreeReference>(entity,nes){
    SessionDatum datum;
    EvaluationContext context;
{
      datum=session.getNeededDatum();
      context=session.getEvaluationContext(getIif());
    }
    public void cancel(){
      CommCareSessionController.this.back();
    }
    public void entitySelected(    int id){
      TreeReference selected=nes.get(id);
      TreeReference outcome=XPathReference.getPathExpr(datum.getValue()).getReference().contextualize(selected);
      AbstractTreeElement element=context.resolveReference(outcome);
      if (element == null) {
        throw new RuntimeException(""String_Node_Str"" + outcome.toString());
      }
      String outputData=element.getValue().uncast().getString();
      CommCareSessionController.this.session.setDatum(datum.getDataId(),outputData);
      CommCareSessionController.this.next();
    }
  }
;
  J2MEDisplay.startStateWithLoadingScreen(select,new ProgressIndicator(){
    public double getProgress(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getProgress();
      }
 else {
        return nes.getProgress();
      }
    }
    public String getCurrentLoadingStatus(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getCurrentLoadingStatus();
      }
 else {
        return nes.getCurrentLoadingStatus();
      }
    }
    public int getIndicatorsProvided(){
      if (nes.loaded()) {
        return select.getProgressIndicator().getIndicatorsProvided();
      }
 else {
        return nes.getIndicatorsProvided();
      }
    }
  }
);
  return;
}",0.9742157284056724
144728,"protected void goHome(){
  session.markCurrentFrameForDeath();
  if (ops.size() > 0) {
    EvaluationContext ec=session.getEvaluationContext(getIif());
    session.executeStackOperations(ops,ec);
  }
  if (session.finishAndPop()) {
    next();
  }
 else {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
  }
}","protected void goHome(){
  if (session.finishExecuteAndPop(session.getEvaluationContext(getIif()))) {
    next();
  }
 else {
    J2MEDisplay.startStateWithLoadingScreen(new CommCareHomeState());
  }
}",0.6390977443609023
144729,"/** 
 * Complete the current session (and perform any cleanup), then check the stack for any pending frames, and load the top one into the current session if so.
 * @return True if there was a pending frame and it has beenpopped into the current session. False if the stack was empty and the session is over.
 */
public boolean finishAndPop(){
  cleanStack();
  if (frameStack.empty()) {
    return false;
  }
 else {
    frame=frameStack.pop();
    if (!frameStack.isEmpty()) {
      frame.captureSnapshot();
    }
    syncState();
    return true;
  }
}","/** 
 * Complete the current session (and perform any cleanup), then check the stack for any pending frames, and load the top one into the current session if so.
 * @return True if there was a pending frame and it has beenpopped into the current session. False if the stack was empty and the session is over.
 */
private boolean finishAndPop(){
  cleanStack();
  if (frameStack.empty()) {
    return false;
  }
 else {
    frame=frameStack.pop();
    if (!frameStack.isEmpty()) {
      frame.captureSnapshot();
    }
    syncState();
    return true;
  }
}",0.9882988298829884
144730,"/** 
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    printformat();
    System.exit(-1);
  }
  PrototypeFactory prototypeFactory=setupStaticStorage();
  if (args[0].equals(""String_Node_Str"")) {
    if (args.length < 2) {
      printvalidateformat();
      System.exit(-1);
    }
    CommCareConfigEngine engine=configureApp(args,prototypeFactory);
    engine.describeApplication();
    System.exit(0);
  }
  if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 4) {
      printplayformat();
      System.exit(-1);
    }
    CommCareConfigEngine engine=configureApp(args,prototypeFactory);
    String username=args[2];
    String password=args[3];
    ApplicationHost host=new ApplicationHost(engine,username,password,prototypeFactory);
    host.run();
    System.exit(0);
  }
}","/** 
 * @param args
 */
public static void main(String[] args){
  if (args.length < 1) {
    printformat();
    System.exit(-1);
  }
  PrototypeFactory prototypeFactory=setupStaticStorage();
  if (args[0].equals(""String_Node_Str"")) {
    if (args.length < 2) {
      printvalidateformat();
      System.exit(-1);
    }
    CommCareConfigEngine engine=configureApp(args,prototypeFactory);
    engine.describeApplication();
    System.exit(0);
  }
  if (""String_Node_Str"".equals(args[0])) {
    try {
      if (args.length < 4) {
        printplayformat();
        System.exit(-1);
      }
      CommCareConfigEngine engine=configureApp(args,prototypeFactory);
      String username=args[2];
      String password=args[3];
      username=username.trim().toLowerCase();
      ApplicationHost host=new ApplicationHost(engine,username,password,prototypeFactory);
      host.run();
      System.exit(-1);
    }
 catch (    RuntimeException re) {
      System.out.print(""String_Node_Str"");
      re.printStackTrace();
      throw re;
    }
 finally {
      System.exit(0);
    }
  }
}",0.8487394957983193
144731,"private void loop() throws IOException {
  boolean keepExecuting=true;
  while (keepExecuting) {
    mSession.clearAllState();
    keepExecuting=loopSession();
    if (this.mUpdatePending) {
      mSession.clearAllState();
      this.mUpdatePending=false;
      boolean forceUpdate=mForceLatestUpdate;
      this.mForceLatestUpdate=false;
      mEngine.attemptAppUpdate(forceUpdate);
    }
  }
}","private void loop() throws IOException {
  boolean keepExecuting=true;
  while (keepExecuting) {
    if (!mSessionHasNextFrameReady) {
      mSession.clearAllState();
    }
    mSessionHasNextFrameReady=false;
    keepExecuting=loopSession();
    if (this.mUpdatePending) {
      processAppUpdate();
    }
  }
}",0.6175637393767706
144732,"private boolean loopSession() throws IOException {
  Screen s=getNextScreen();
  while (s != null) {
    try {
      s.init(mPlatform,mSession,mSandbox);
      System.out.println(""String_Node_Str"");
      s.prompt(System.out);
      System.out.print(""String_Node_Str"");
      String input=reader.readLine();
      if (input.startsWith(""String_Node_Str"")) {
        if (input.equals(""String_Node_Str"") || input.equals(""String_Node_Str"")) {
          return false;
        }
        if (input.startsWith(""String_Node_Str"")) {
          mUpdatePending=true;
          if (input.contains(""String_Node_Str"")) {
            mForceLatestUpdate=true;
          }
          return true;
        }
        if (input.equals(""String_Node_Str"")) {
          return true;
        }
      }
      s.updateSession(mSession,input);
      s=getNextScreen();
    }
 catch (    CommCareSessionException ccse) {
      System.out.println(""String_Node_Str"");
      ccse.printStackTrace();
      System.out.println(""String_Node_Str"");
      reader.readLine();
      return true;
    }
  }
  String formXmlns=mSession.getForm();
  XFormPlayer player=new XFormPlayer(System.in,System.out,null);
  player.setSessionIIF(mSession.getIIF());
  player.start(mEngine.loadFormByXmlns(formXmlns));
  return true;
}","private boolean loopSession() throws IOException {
  Screen s=getNextScreen();
  while (s != null) {
    try {
      s.init(mPlatform,mSession,mSandbox);
      System.out.println(""String_Node_Str"");
      s.prompt(System.out);
      System.out.print(""String_Node_Str"");
      String input=reader.readLine();
      if (input.startsWith(""String_Node_Str"")) {
        if (input.equals(""String_Node_Str"") || input.equals(""String_Node_Str"")) {
          return false;
        }
        if (input.startsWith(""String_Node_Str"")) {
          mUpdatePending=true;
          if (input.contains(""String_Node_Str"")) {
            mForceLatestUpdate=true;
          }
          return true;
        }
        if (input.equals(""String_Node_Str"")) {
          return true;
        }
      }
      s.updateSession(mSession,input);
      s=getNextScreen();
    }
 catch (    CommCareSessionException ccse) {
      printErrorAndContinue(""String_Node_Str"",ccse);
      return true;
    }
  }
  String formXmlns=mSession.getForm();
  XFormPlayer player=new XFormPlayer(System.in,System.out,null);
  player.setSessionIIF(mSession.getIIF());
  player.start(mEngine.loadFormByXmlns(formXmlns));
  if (player.getExecutionResult() == XFormPlayer.FormResult.Completed) {
    if (!processResultInstance(player.getResultStream())) {
      return true;
    }
    mSession.clearVolitiles();
    if (mSession.finishExecuteAndPop(mSession.getEvaluationContext())) {
      mSessionHasNextFrameReady=true;
    }
  }
  return true;
}",0.8272138228941684
144733,"public void stepBack(){
  StackFrameStep recentPop=frame.popStep();
  syncState();
  popped=recentPop;
  if (this.getNeededData() == SessionFrame.STATE_DATUM_COMPUTED) {
    stepBack();
  }
}","public void stepBack(){
  StackFrameStep recentPop=frame.popStep();
  syncState();
  while (this.getNeededData() == null || this.getNeededData() == SessionFrame.STATE_DATUM_COMPUTED) {
    recentPop=frame.popStep();
    syncState();
  }
  popped=recentPop;
}",0.7082405345211581
144734,"/** 
 * Based on the current state of the session, determine what information is needed next to proceed
 * @return 1 of the 4 STATE strings declared at the top of SessionFrame.java, or null ifcould not be determined
 */
public String getNeededData(){
  if (this.getCommand() == null) {
    return SessionFrame.STATE_COMMAND_ID;
  }
  Vector<Entry> entries=getEntriesForCommand(this.getCommand(),this.getData());
  String needDatum=null;
  String nextKey=null;
  for (  Entry e : entries) {
    if (e.getSessionDataReqs().size() > this.getData().size()) {
      SessionDatum datum=e.getSessionDataReqs().elementAt(this.getData().size());
      String needed=datum.getDataId();
      if (nextKey == null) {
        nextKey=needed;
        if (datum.getNodeset() != null) {
          needDatum=SessionFrame.STATE_DATUM_VAL;
        }
 else {
          needDatum=SessionFrame.STATE_DATUM_COMPUTED;
        }
        continue;
      }
 else {
        if (nextKey.equals(needed)) {
          continue;
        }
      }
    }
    needDatum=null;
    break;
  }
  if (needDatum != null) {
    return needDatum;
  }
  if (entries.size() > 1 || !entries.elementAt(0).getCommandId().equals(this.getCommand())) {
    return SessionFrame.STATE_COMMAND_ID;
  }
 else {
    return null;
  }
}","/** 
 * Based on the current state of the session, determine what information is needed next to proceed
 * @return 1 of the 4 STATE strings declared at the top of SessionFrame.java, or null ifthe session does not need anything else to proceed
 */
public String getNeededData(){
  if (this.getCommand() == null) {
    return SessionFrame.STATE_COMMAND_ID;
  }
  Vector<Entry> entries=getEntriesForCommand(this.getCommand(),this.getData());
  String needDatum=null;
  String nextKey=null;
  for (  Entry e : entries) {
    if (e.getSessionDataReqs().size() > this.getData().size()) {
      SessionDatum datum=e.getSessionDataReqs().elementAt(this.getData().size());
      String needed=datum.getDataId();
      if (nextKey == null) {
        nextKey=needed;
        if (datum.getNodeset() != null) {
          needDatum=SessionFrame.STATE_DATUM_VAL;
        }
 else {
          needDatum=SessionFrame.STATE_DATUM_COMPUTED;
        }
        continue;
      }
 else {
        if (nextKey.equals(needed)) {
          continue;
        }
      }
    }
    needDatum=null;
    break;
  }
  if (needDatum != null) {
    return needDatum;
  }
  if (entries.size() > 1 || !entries.elementAt(0).getCommandId().equals(this.getCommand())) {
    return SessionFrame.STATE_COMMAND_ID;
  }
 else {
    return null;
  }
}",0.9740611691831204
144735,"private boolean propertiesEqual(String a,String b){
  return a == null && b != null || a != null && b == null || a != null && b != null && !a.equals(b);
}","private boolean propertiesEqual(String a,String b){
  if (a == null) {
    return b == null;
  }
 else {
    return (a.equals(b));
  }
}",0.6827586206896552
144736,"public String getNeededData(){
  if (this.getCommand() == null) {
    return SessionFrame.STATE_COMMAND_ID;
  }
  Vector<Entry> entries=getEntriesForCommand(this.getCommand(),this.getData());
  String needDatum=null;
  String nextKey=null;
  for (  Entry e : entries) {
    if (e.getSessionDataReqs().size() > this.getData().size()) {
      SessionDatum datum=e.getSessionDataReqs().elementAt(this.getData().size());
      String needed=datum.getDataId();
      if (nextKey == null) {
        nextKey=needed;
        if (datum.getNodeset() != null) {
          needDatum=SessionFrame.STATE_DATUM_VAL;
        }
 else {
          needDatum=SessionFrame.STATE_DATUM_COMPUTED;
        }
        continue;
      }
 else {
        if (nextKey.equals(needed)) {
          continue;
        }
      }
    }
    needDatum=null;
    break;
  }
  if (needDatum != null) {
    return needDatum;
  }
  if (entries.size() > 1 || !entries.elementAt(0).getCommandId().equals(this.getCommand())) {
    return SessionFrame.STATE_COMMAND_ID;
  }
 else {
    return null;
  }
}","/** 
 * Based on the current state of the session, determine what information is needed next to proceed
 * @return 1 of the 4 STATE strings declared at the top of SessionFrame.java, or null ifcould not be determined
 */
public String getNeededData(){
  if (this.getCommand() == null) {
    return SessionFrame.STATE_COMMAND_ID;
  }
  Vector<Entry> entries=getEntriesForCommand(this.getCommand(),this.getData());
  String needDatum=null;
  String nextKey=null;
  for (  Entry e : entries) {
    if (e.getSessionDataReqs().size() > this.getData().size()) {
      SessionDatum datum=e.getSessionDataReqs().elementAt(this.getData().size());
      String needed=datum.getDataId();
      if (nextKey == null) {
        nextKey=needed;
        if (datum.getNodeset() != null) {
          needDatum=SessionFrame.STATE_DATUM_VAL;
        }
 else {
          needDatum=SessionFrame.STATE_DATUM_COMPUTED;
        }
        continue;
      }
 else {
        if (nextKey.equals(needed)) {
          continue;
        }
      }
    }
    needDatum=null;
    break;
  }
  if (needDatum != null) {
    return needDatum;
  }
  if (entries.size() > 1 || !entries.elementAt(0).getCommandId().equals(this.getCommand())) {
    return SessionFrame.STATE_COMMAND_ID;
  }
 else {
    return null;
  }
}",0.9058219178082192
144737,"public <T extends Persistable>byte[] serialize(T t){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    t.writeExternal(new DataOutputStream(baos));
    return baos.toByteArray();
  }
 catch (  IOException e) {
    throw wrap(""String_Node_Str"" + t.getClass().getName(),e);
  }
}","public <T extends Externalizable>byte[] serialize(T t){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    t.writeExternal(new DataOutputStream(baos));
    return baos.toByteArray();
  }
 catch (  IOException e) {
    throw wrap(""String_Node_Str"" + t.getClass().getName(),e);
  }
}",0.9717138103161398
144738,"public <T extends Persistable>T deserialize(byte[] object,Class<T> c){
  try {
    return (T)ExtUtil.deserialize(object,c,factory);
  }
 catch (  IOException|DeserializationException e) {
    throw wrap(""String_Node_Str"" + c.getName(),e);
  }
}","public <T extends Externalizable>T deserialize(byte[] object,Class<T> c){
  try {
    return (T)ExtUtil.deserialize(object,c,factory);
  }
 catch (  IOException|DeserializationException e) {
    throw wrap(""String_Node_Str"" + c.getName(),e);
  }
}",0.9653767820773932
144739,"private void loop(){
  while (true) {
    mSession.clearAllState();
    loopSession();
  }
}","private void loop() throws IOException {
  while (true) {
    mSession.clearAllState();
    loopSession();
  }
}",0.9019607843137256
144740,"public void run(){
  setupSandbox();
  mSession=new SessionWrapper(mPlatform,mSandbox);
  loop();
}","public void run(){
  setupSandbox();
  mSession=new SessionWrapper(mPlatform,mSandbox);
  try {
    loop();
  }
 catch (  IOException e) {
    e.printStackTrace();
    System.exit(-1);
  }
}",0.6851211072664359
144741,"private void loopSession(){
  Screen s=getNextScreen();
  while (s != null) {
    s.init(mPlatform,mSession,mSandbox);
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    s.prompt(System.out);
    System.out.print(""String_Node_Str"");
    try {
      String input=reader.readLine();
      s.updateSession(mSession,input);
      s=getNextScreen();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  String formXmlns=mSession.getForm();
  XFormPlayer player=new XFormPlayer(System.in,System.out,null);
  player.setSessionIIF(mSession.getIIF());
  player.start(mEngine.loadFormByXmlns(formXmlns));
}","private void loopSession() throws IOException {
  Screen s=getNextScreen();
  while (s != null) {
    try {
      s.init(mPlatform,mSession,mSandbox);
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      s.prompt(System.out);
      System.out.print(""String_Node_Str"");
      String input=reader.readLine();
      s.updateSession(mSession,input);
      s=getNextScreen();
    }
 catch (    CommCareSessionException ccse) {
      System.out.println(""String_Node_Str"");
      ccse.printStackTrace();
      System.out.println(""String_Node_Str"");
      reader.readLine();
      mSession.clearAllState();
      loopSession();
    }
  }
  String formXmlns=mSession.getForm();
  XFormPlayer player=new XFormPlayer(System.in,System.out,null);
  player.setSessionIIF(mSession.getIIF());
  player.start(mEngine.loadFormByXmlns(formXmlns));
}",0.2793296089385474
144742,"@Override public void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox){
  this.mPlatform=platform;
  this.mSandbox=sandbox;
  this.mSession=session;
  needed=session.getNeededDatum();
  String detail=needed.getShortDetail();
  if (detail == null) {
    error(""String_Node_Str"" + needed.getDataId());
  }
  Detail shortDetail=platform.getDetail(detail);
  if (shortDetail == null) {
    error(""String_Node_Str"" + detail);
  }
  mTitle=shortDetail.getTitle().evaluate(session.getEvaluationContext()).getName();
  mHeader=this.createHeader(shortDetail);
  Vector<TreeReference> references=inflateReference(needed.getNodeset());
  rows=new String[references.size()];
  int i=0;
  for (  TreeReference entity : references) {
    rows[i]=createRow(entity,shortDetail);
    ++i;
  }
  this.mChoices=new TreeReference[references.size()];
  references.copyInto(mChoices);
  setTitle(mTitle);
}","@Override public void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox) throws CommCareSessionException {
  this.mPlatform=platform;
  this.mSandbox=sandbox;
  this.mSession=session;
  needed=session.getNeededDatum();
  String detail=needed.getShortDetail();
  if (detail == null) {
    throw new CommCareSessionException(""String_Node_Str"" + needed.getDataId());
  }
  Detail shortDetail=platform.getDetail(detail);
  if (shortDetail == null) {
    throw new CommCareSessionException(""String_Node_Str"" + detail);
  }
  mTitle=shortDetail.getTitle().evaluate(session.getEvaluationContext()).getName();
  mHeader=this.createHeader(shortDetail);
  Vector<TreeReference> references=inflateReference(needed.getNodeset());
  rows=new String[references.size()];
  int i=0;
  for (  TreeReference entity : references) {
    rows[i]=createRow(entity,shortDetail);
    ++i;
  }
  this.mChoices=new TreeReference[references.size()];
  references.copyInto(mChoices);
  setTitle(mTitle);
}",0.9423975090814738
144743,"@Override public void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox){
  String root=deriveMenuRoot(session);
  this.mPlatform=platform;
  this.mSandbox=sandbox;
  Vector<MenuDisplayable> choices=new Vector<MenuDisplayable>();
  Hashtable<String,Entry> map=platform.getMenuMap();
  EvaluationContext ec=null;
  for (  Suite s : platform.getInstalledSuites()) {
    for (    Menu m : s.getMenus()) {
      String xpathExpression=""String_Node_Str"";
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (m.getMenuRelevance() != null) {
          xpathExpression=m.getMenuRelevanceRaw();
          ec=session.getEvaluationContext(m.getId());
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
        if (m.getId().equals(root)) {
          if (mTitle == null) {
            try {
              mTitle=m.getName().evaluate();
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
          for (          String command : m.getCommandIds()) {
            xpathExpression=""String_Node_Str"";
            XPathExpression mRelevantCondition=m.getCommandRelevance(m.indexOfCommand(command));
            if (mRelevantCondition != null) {
              xpathExpression=m.getCommandRelevanceRaw(m.indexOfCommand(command));
              ec=session.getEvaluationContext();
              Object ret=mRelevantCondition.eval(ec);
              try {
                if (!XPathFuncExpr.toBoolean(ret)) {
                  continue;
                }
              }
 catch (              XPathTypeMismatchException e) {
                e.printStackTrace();
                error(""String_Node_Str"" + ret);
              }
              if (!XPathFuncExpr.toBoolean(ret)) {
                continue;
              }
            }
            Entry e=map.get(command);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            choices.add(e);
          }
          continue;
        }
        if (root.equals(m.getRoot())) {
          boolean idExists=false;
          for (          Object o : choices) {
            if (o instanceof Menu) {
              if (((Menu)o).getId().equals(m.getId())) {
                idExists=true;
                break;
              }
            }
          }
          if (!idExists) {
            choices.add(m);
          }
        }
      }
 catch (      XPathSyntaxException xpse) {
        error(xpse);
        return;
      }
catch (      XPathException xpe) {
        error(xpe);
        return;
      }
    }
  }
  this.mChoices=new MenuDisplayable[choices.size()];
  choices.copyInto(mChoices);
  setTitle(mTitle);
}","@Override public void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox) throws CommCareSessionException {
  String root=deriveMenuRoot(session);
  this.mPlatform=platform;
  this.mSandbox=sandbox;
  Vector<MenuDisplayable> choices=new Vector<MenuDisplayable>();
  Hashtable<String,Entry> map=platform.getMenuMap();
  EvaluationContext ec=null;
  for (  Suite s : platform.getInstalledSuites()) {
    for (    Menu m : s.getMenus()) {
      String xpathExpression=""String_Node_Str"";
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (m.getMenuRelevance() != null) {
          xpathExpression=m.getMenuRelevanceRaw();
          ec=session.getEvaluationContext(m.getId());
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
        if (m.getId().equals(root)) {
          if (mTitle == null) {
            try {
              mTitle=m.getName().evaluate();
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
          for (          String command : m.getCommandIds()) {
            xpathExpression=""String_Node_Str"";
            XPathExpression mRelevantCondition=m.getCommandRelevance(m.indexOfCommand(command));
            if (mRelevantCondition != null) {
              xpathExpression=m.getCommandRelevanceRaw(m.indexOfCommand(command));
              ec=session.getEvaluationContext();
              Object ret=mRelevantCondition.eval(ec);
              try {
                if (!XPathFuncExpr.toBoolean(ret)) {
                  continue;
                }
              }
 catch (              XPathTypeMismatchException e) {
                e.printStackTrace();
                throw new CommCareSessionException(""String_Node_Str"" + ret,e);
              }
              if (!XPathFuncExpr.toBoolean(ret)) {
                continue;
              }
            }
            Entry e=map.get(command);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            choices.add(e);
          }
          continue;
        }
        if (root.equals(m.getRoot())) {
          boolean idExists=false;
          for (          Object o : choices) {
            if (o instanceof Menu) {
              if (((Menu)o).getId().equals(m.getId())) {
                idExists=true;
                break;
              }
            }
          }
          if (!idExists) {
            choices.add(m);
          }
        }
      }
 catch (      XPathSyntaxException xpse) {
        throw new CommCareSessionException(""String_Node_Str"",xpse);
      }
catch (      XPathException xpe) {
        throw new CommCareSessionException(""String_Node_Str"",xpe);
      }
    }
  }
  this.mChoices=new MenuDisplayable[choices.size()];
  choices.copyInto(mChoices);
  setTitle(mTitle);
}",0.958490566037736
144744,"public abstract void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox);","public abstract void init(CommCarePlatform platform,SessionWrapper session,MockUserDataSandbox sandbox) throws CommCareSessionException ;",0.8630705394190872
144745,"public abstract void updateSession(CommCareSession session,String input);","public abstract void updateSession(CommCareSession session,String input) throws CommCareSessionException ;",0.8156424581005587
144746,public abstract void prompt(PrintStream out);,public abstract void prompt(PrintStream out) throws CommCareSessionException ;,0.7317073170731707
144747,"public void writeExternal(DataOutputStream dos) throws IOException {
  ExtUtil.writeNumeric(dos,getID());
  ExtUtil.write(dos,new ExtWrapNullable(binding == null ? null : new ExtWrapTagged(binding)));
  ExtUtil.write(dos,new ExtWrapNullable(getAppearanceAttr()));
  ExtUtil.writeNumeric(dos,getControlType());
  ExtUtil.write(dos,new ExtWrapList(ExtUtil.emptyIfNull(choices)));
  ExtUtil.write(dos,new ExtWrapNullable(dynamicChoices));
  ExtUtil.write(dos,new ExtWrapMap(String.class,QuestionString.class));
}","public void writeExternal(DataOutputStream dos) throws IOException {
  ExtUtil.writeNumeric(dos,getID());
  ExtUtil.write(dos,new ExtWrapNullable(binding == null ? null : new ExtWrapTagged(binding)));
  ExtUtil.write(dos,new ExtWrapNullable(getAppearanceAttr()));
  ExtUtil.writeNumeric(dos,getControlType());
  ExtUtil.write(dos,new ExtWrapList(ExtUtil.emptyIfNull(choices)));
  ExtUtil.write(dos,new ExtWrapNullable(dynamicChoices));
  ExtUtil.write(dos,new ExtWrapMap(mQuestionStrings));
}",0.965034965034965
144748,"public QuestionDef(int id,int controlType){
  setID(id);
  setControlType(controlType);
  observers=new Vector();
  mQuestionStrings=new Hashtable<String,QuestionString>();
}","public QuestionDef(int id,int controlType){
  setID(id);
  setControlType(controlType);
  observers=new Vector();
  mQuestionStrings=new Hashtable<String,QuestionString>();
  mQuestionStrings.put(XFormParser.LABEL_ELEMENT,new QuestionString(XFormParser.LABEL_ELEMENT,null));
}",0.7733333333333333
144749,"/** 
 * Test that the long and short text forms work as expected (fallback to default for example). Test being able to retrieve other exotic forms
 */
public void testTextForms(){
  FormEntryController fec=fpi.getFormEntryController();
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  boolean foundFlag=false;
  Localizer l=fpi.getFormDef().getLocalizer();
  l.setDefaultLocale(l.getAvailableLocales()[0]);
  l.setLocale(l.getAvailableLocales()[0]);
  int state=-99;
  while (state != FormEntryController.EVENT_QUESTION) {
    state=fec.stepToNextEvent();
  }
  if (!fep.getLongText().equals(""String_Node_Str""))   fail(""String_Node_Str"");
  if (!fep.getShortText().equals(""String_Node_Str""))   fail(""String_Node_Str"");
  if (!fep.getAudioText().equals(""String_Node_Str""))   fail(""String_Node_Str"");
  state=-99;
  while (state != FormEntryController.EVENT_QUESTION) {
    state=fec.stepToNextEvent();
  }
  if (!fep.getLongText().equals(""String_Node_Str""))   fail(""String_Node_Str"");
  if (!fep.getSpecialFormQuestionText(""String_Node_Str"").equals(null))   fail(""String_Node_Str"");
}","/** 
 * Test that the long and short text forms work as expected (fallback to default for example). Test being able to retrieve other exotic forms
 */
public void testTextForms(){
  FormEntryController fec=fpi.getFormEntryController();
  fec.jumpToIndex(FormIndex.createBeginningOfFormIndex());
  Localizer l=fpi.getFormDef().getLocalizer();
  l.setDefaultLocale(l.getAvailableLocales()[0]);
  l.setLocale(l.getAvailableLocales()[0]);
  int state=fec.getModel().getEvent();
  while (state != FormEntryController.EVENT_QUESTION) {
    state=fec.stepToNextEvent();
  }
  fep=fec.getModel().getQuestionPrompt();
  if (!fep.getLongText().equals(""String_Node_Str""))   fail(""String_Node_Str"");
  if (!fep.getShortText().equals(""String_Node_Str""))   fail(""String_Node_Str"");
  if (!fep.getAudioText().equals(""String_Node_Str""))   fail(""String_Node_Str"");
  state=-99;
  while (state != FormEntryController.EVENT_QUESTION) {
    state=fec.stepToNextEvent();
  }
  fep=fec.getModel().getQuestionPrompt();
  if (!fep.getLongText().equals(""String_Node_Str""))   fail(""String_Node_Str"" + fep.getLongText());
  if (fep.getSpecialFormQuestionText(""String_Node_Str"") != null)   fail(""String_Node_Str"");
}",0.548401226456417
144750,"public void run(TestCase tc){
  ((QuestionDefTest)tc).doTest(testID);
}","public void run(TestCase tc){
  ((TextFormTests)tc).doTest(testID);
}",0.9
144751,"public void testPromptsNoLocalizer(){
  QuestionDef q=new QuestionDef();
  q.putQuestionString(""String_Node_Str"",new QuestionString(""String_Node_Str"",""String_Node_Str""));
  if (!""String_Node_Str"".equals(q.getQuestionString(""String_Node_Str""))) {
    fail(""String_Node_Str"");
  }
}","public void testPromptsNoLocalizer(){
  QuestionDef q=new QuestionDef();
  q.putQuestionString(""String_Node_Str"",new QuestionString(""String_Node_Str"",""String_Node_Str""));
  if (!""String_Node_Str"".equals(q.getQuestionString(""String_Node_Str"").getTextInner())) {
    fail(""String_Node_Str"");
  }
}",0.9739130434782608
144752,"public Test suite(){
  TestSuite aSuite=new TestSuite();
  System.out.println(""String_Node_Str"");
  for (int i=1; i <= NUM_TESTS; i++) {
    final int testID=i;
    aSuite.addTest(new QuestionDefTest(""String_Node_Str"" + i,new TestMethod(){
      public void run(      TestCase tc){
        ((QuestionDefTest)tc).doTest(testID);
      }
    }
));
  }
  return aSuite;
}","public Test suite(){
  TestSuite aSuite=new TestSuite();
  System.out.println(""String_Node_Str"");
  for (int i=1; i <= NUM_TESTS; i++) {
    final int testID=i;
    aSuite.addTest(new TextFormTests(""String_Node_Str"" + i,new TestMethod(){
      public void run(      TestCase tc){
        ((TextFormTests)tc).doTest(testID);
      }
    }
));
  }
  return aSuite;
}",0.9234972677595628
144753,"public void testPromptIDsNoLocalizer(){
  QuestionDef q=new QuestionDef();
  q.setTextID(""String_Node_Str"");
  if (!""String_Node_Str"".equals(q.getTextID())) {
    fail(""String_Node_Str"");
  }
  QuestionString hint=new QuestionString(""String_Node_Str"");
  hint.setTextId(""String_Node_Str"");
  q.putQuestionString(""String_Node_Str"",hint);
  if (!""String_Node_Str"".equals(q.getQuestionString(""String_Node_Str"").getTextId()) || q.getQuestionString(""String_Node_Str"") != null) {
    fail(""String_Node_Str"");
  }
}","public void testPromptIDsNoLocalizer(){
  QuestionDef q=new QuestionDef();
  q.setTextID(""String_Node_Str"");
  if (!""String_Node_Str"".equals(q.getTextID())) {
    fail(""String_Node_Str"");
  }
  QuestionString hint=new QuestionString(""String_Node_Str"");
  hint.setTextId(""String_Node_Str"");
  q.putQuestionString(""String_Node_Str"",hint);
  if (!""String_Node_Str"".equals(q.getQuestionString(""String_Node_Str"").getTextId())) {
    fail(""String_Node_Str"");
  }
}",0.94824016563147
144754,"/** 
 * Convenience method Get longText form of text for THIS element (if available) !!Falls back to default form if 'long' form does not exist.!! Use getSpecialFormQuestionText() if you want short form only.
 * @return longText form
 */
public String getConstraintText(){
  String newConstraintMsg=this.localizeText(getQuestion().getQuestionString(XFormParser.CONSTRAINT_ELEMENT));
  if (newConstraintMsg != null) {
    return newConstraintMsg;
  }
  EvaluationContext ec=new EvaluationContext(form.exprEvalContext,mTreeElement.getRef());
  return mTreeElement.getConstraint().getConstraintMessage(ec,form.getMainInstance(),null);
}","public String getConstraintText(String textForm,IAnswerData attemptedValue){
  if (mTreeElement.getConstraint() == null) {
    return null;
  }
 else {
    EvaluationContext ec=new EvaluationContext(form.exprEvalContext,mTreeElement.getRef());
    if (textForm != null) {
      ec.setOutputTextForm(textForm);
    }
    if (attemptedValue != null) {
      ec.isConstraint=true;
      ec.candidateValue=attemptedValue;
    }
    return mTreeElement.getConstraint().getConstraintMessage(ec,form.getMainInstance(),textForm);
  }
}",0.3344827586206896
144755,"public void populateMenu(List list,String menu,MultimediaListener listener){
  suiteTable.clear();
  entryTable.clear();
  menuTable.clear();
  Enumeration en=session.platform.getInstalledSuites().elements();
  EvaluationContext ec=null;
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (relevance != null) {
          if (ec == null) {
            ec=session.getEvaluationContext(getIif(),m.getId());
          }
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
      }
 catch (      XPathSyntaxException e) {
        e.printStackTrace();
      }
      if (menu.equals(m.getId())) {
        for (int i=0; i < m.getCommandIds().size(); ++i) {
          try {
            String id=m.getCommandIds().elementAt(i);
            XPathExpression relevant=m.getCommandRelevance(i);
            if (relevant != null) {
              if (ec == null) {
                ec=session.getEvaluationContext(getIif());
              }
              if (XPathFuncExpr.toBoolean(relevant.eval(ec)).booleanValue() == false) {
                continue;
              }
            }
            Entry e=suite.getEntries().get(id);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            int location=list.size();
            list.append(CommCareUtil.getMenuText(e.getText(),suite,location),ImageUtils.getImage(e.getImageURI()));
            if (listener != null && (e.getAudioURI() != null && !""String_Node_Str"".equals(e.getAudioURI()))) {
              listener.registerAudioTrigger(location,e.getAudioURI());
            }
            suiteTable.put(new Integer(location),suite);
            entryTable.put(new Integer(location),e);
          }
 catch (          XPathSyntaxException xpse) {
            throw new RuntimeException(xpse.getMessage());
          }
        }
      }
 else       if (m.getRoot().equals(menu)) {
        int location=list.size();
        list.append(CommCareUtil.getMenuText(m.getName(),suite,location),ImageUtils.getImage(m.getImageURI()));
        if (listener != null && (m.getAudioURI() != null && !""String_Node_Str"".equals(m.getAudioURI()))) {
          listener.registerAudioTrigger(location,m.getAudioURI());
        }
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
}","public void populateMenu(List list,String menu,MultimediaListener listener){
  suiteTable.clear();
  entryTable.clear();
  menuTable.clear();
  Enumeration en=session.platform.getInstalledSuites().elements();
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      EvaluationContext ec=null;
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (relevance != null) {
          if (ec == null) {
            ec=session.getEvaluationContext(getIif(),m.getId());
          }
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
      }
 catch (      XPathSyntaxException e) {
        e.printStackTrace();
      }
      if (menu.equals(m.getId())) {
        for (int i=0; i < m.getCommandIds().size(); ++i) {
          try {
            String id=m.getCommandIds().elementAt(i);
            XPathExpression relevant=m.getCommandRelevance(i);
            if (relevant != null) {
              if (ec == null) {
                ec=session.getEvaluationContext(getIif());
              }
              if (XPathFuncExpr.toBoolean(relevant.eval(ec)).booleanValue() == false) {
                continue;
              }
            }
            Entry e=suite.getEntries().get(id);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            int location=list.size();
            list.append(CommCareUtil.getMenuText(e.getText(),suite,location),ImageUtils.getImage(e.getImageURI()));
            if (listener != null && (e.getAudioURI() != null && !""String_Node_Str"".equals(e.getAudioURI()))) {
              listener.registerAudioTrigger(location,e.getAudioURI());
            }
            suiteTable.put(new Integer(location),suite);
            entryTable.put(new Integer(location),e);
          }
 catch (          XPathSyntaxException xpse) {
            throw new RuntimeException(xpse.getMessage());
          }
        }
      }
 else       if (m.getRoot().equals(menu)) {
        int location=list.size();
        list.append(CommCareUtil.getMenuText(m.getName(),suite,location),ImageUtils.getImage(m.getImageURI()));
        if (listener != null && (m.getAudioURI() != null && !""String_Node_Str"".equals(m.getAudioURI()))) {
          listener.registerAudioTrigger(location,m.getAudioURI());
        }
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
}",0.954632833525567
144756,"public DisplayData evaluate(EvaluationContext ec){
  return new DisplayData(name.evaluate(ec),imageReference.evaluate(ec),audioReference.evaluate(ec));
}","public DisplayData evaluate(EvaluationContext ec){
  String imageRef=imageReference == null ? null : imageReference.evaluate(ec);
  String audioRef=audioReference == null ? null : audioReference.evaluate(ec);
  return new DisplayData(name.evaluate(ec),imageRef,audioRef);
}",0.539906103286385
144757,"private void syncState(){
  this.data.clear();
  this.currentCmd=null;
  this.currentXmlns=null;
  this.popped=null;
  for (  StackFrameStep step : frame.getSteps()) {
    if (SessionFrame.STATE_DATUM_VAL.equals(step.getType())) {
      String key=step.getId();
      String value=step.getValue();
      data.put(key,value);
    }
 else     if (SessionFrame.STATE_COMMAND_ID.equals(step.getType())) {
      this.currentCmd=step.getId();
    }
 else     if (SessionFrame.STATE_FORM_XMLNS.equals(step.getType())) {
      this.currentXmlns=step.getId();
    }
  }
}","private void syncState(){
  this.data.clear();
  this.currentCmd=null;
  this.currentXmlns=null;
  this.popped=null;
  for (  StackFrameStep step : frame.getSteps()) {
    if (SessionFrame.STATE_DATUM_VAL.equals(step.getType())) {
      String key=step.getId();
      String value=step.getValue();
      if (key != null && value != null) {
        data.put(key,value);
      }
    }
 else     if (SessionFrame.STATE_COMMAND_ID.equals(step.getType())) {
      this.currentCmd=step.getId();
    }
 else     if (SessionFrame.STATE_FORM_XMLNS.equals(step.getType())) {
      this.currentXmlns=step.getId();
    }
  }
}",0.95578231292517
144758,"public DisplayData evaluate(EvaluationContext ec){
  return new DisplayData(name.evaluate(ec),imageReference.evaluate(ec),audioReference.evaluate(ec));
}","public DisplayData evaluate(EvaluationContext ec){
  String imageRef=imageReference == null ? null : imageReference.evaluate(ec);
  String audioRef=audioReference == null ? null : audioReference.evaluate(ec);
  return new DisplayData(name.evaluate(ec),imageRef,audioRef);
}",0.539906103286385
144759,"private void syncState(){
  this.data.clear();
  this.currentCmd=null;
  this.currentXmlns=null;
  this.popped=null;
  for (  StackFrameStep step : frame.getSteps()) {
    if (SessionFrame.STATE_DATUM_VAL.equals(step.getType())) {
      String key=step.getId();
      String value=step.getValue();
      data.put(key,value);
    }
 else     if (SessionFrame.STATE_COMMAND_ID.equals(step.getType())) {
      this.currentCmd=step.getId();
    }
 else     if (SessionFrame.STATE_FORM_XMLNS.equals(step.getType())) {
      this.currentXmlns=step.getId();
    }
  }
}","private void syncState(){
  this.data.clear();
  this.currentCmd=null;
  this.currentXmlns=null;
  this.popped=null;
  for (  StackFrameStep step : frame.getSteps()) {
    if (SessionFrame.STATE_DATUM_VAL.equals(step.getType())) {
      String key=step.getId();
      String value=step.getValue();
      if (key != null && value != null) {
        data.put(key,value);
      }
    }
 else     if (SessionFrame.STATE_COMMAND_ID.equals(step.getType())) {
      this.currentCmd=step.getId();
    }
 else     if (SessionFrame.STATE_FORM_XMLNS.equals(step.getType())) {
      this.currentXmlns=step.getId();
    }
  }
}",0.95578231292517
144760,"/** 
 * Join this reference with the base reference argument.
 * @param baseRef an absolute reference or a relative reference with only'../'s
 * @return a join of this reference with the base reference argument.Returns a clone of this reference if it is absolute, and null if this reference has '../'s but baseRef argument a non-empty relative reference.
 */
public TreeReference parent(TreeReference baseRef){
  if (isAbsolute()) {
    return this.clone();
  }
 else {
    TreeReference newRef=baseRef.clone();
    if (refLevel > 0) {
      if (!baseRef.isAbsolute() && baseRef.size() == 0) {
        newRef.refLevel+=refLevel;
      }
 else {
        return null;
      }
    }
    for (    TreeReferenceLevel l : this.data) {
      newRef.add(l);
    }
    return newRef;
  }
}","/** 
 * Join this reference with the base reference argument.
 * @param baseRef an absolute reference or a relative reference with only'../'s
 * @return a join of this reference with the base reference argument.Returns a clone of this reference if it is absolute, and null if this reference has '../'s but baseRef argument a non-empty relative reference.
 */
public TreeReference parent(TreeReference baseRef){
  if (isAbsolute()) {
    return this.clone();
  }
 else {
    TreeReference newRef=baseRef.clone();
    if (refLevel > 0) {
      if (!baseRef.isAbsolute() && baseRef.size() == 0) {
        newRef.refLevel+=refLevel;
      }
 else {
        return null;
      }
    }
    for (    TreeReferenceLevel l : this.data) {
      newRef.add(l.shallowCopy());
    }
    return newRef;
  }
}",0.9911054637865312
144761,"/** 
 * Evaluate this reference in terms of a base absolute reference. For instance, anchoring ../../d/e/f to /a/b/c, results in  /a/d/e/f. NOTE: This function works when baseRef contains INDEX_UNBOUND multiplicites. Conditions depend on this behavior, but it is def slightly icky
 * @param baseRef an absolute reference to be anchored to.
 * @return null if base reference isn't absolute or there are too many'../'.
 */
public TreeReference anchor(TreeReference baseRef){
  if (isAbsolute()) {
    return this.clone();
  }
 else   if (!baseRef.isAbsolute() || (refLevel > baseRef.size())) {
    return null;
  }
 else {
    TreeReference newRef=baseRef.clone();
    for (int i=0; i < refLevel; i++) {
      newRef.removeLastLevel();
    }
    for (int i=0; i < size(); i++) {
      newRef.add(this.data.elementAt(i));
    }
    return newRef;
  }
}","/** 
 * Evaluate this reference in terms of a base absolute reference. For instance, anchoring ../../d/e/f to /a/b/c, results in  /a/d/e/f. NOTE: This function works when baseRef contains INDEX_UNBOUND multiplicites. Conditions depend on this behavior, but it is def slightly icky
 * @param baseRef an absolute reference to be anchored to.
 * @return null if base reference isn't absolute or there are too many'../'.
 */
public TreeReference anchor(TreeReference baseRef){
  if (isAbsolute()) {
    return this.clone();
  }
 else   if (!baseRef.isAbsolute() || (refLevel > baseRef.size())) {
    return null;
  }
 else {
    TreeReference newRef=baseRef.clone();
    for (int i=0; i < refLevel; i++) {
      newRef.removeLastLevel();
    }
    for (int i=0; i < size(); i++) {
      newRef.add(this.data.elementAt(i).shallowCopy());
    }
    return newRef;
  }
}",0.991822429906542
144762,"/** 
 * Return a copy of the reference
 */
public TreeReference clone(){
  TreeReference newRef=new TreeReference();
  newRef.setRefLevel(this.refLevel);
  for (  TreeReferenceLevel l : data) {
    newRef.add(l);
  }
  if (instanceName != null) {
    newRef.setInstanceName(instanceName);
  }
  newRef.contextType=this.contextType;
  return newRef;
}","/** 
 * Return a copy of the reference
 */
public TreeReference clone(){
  TreeReference newRef=new TreeReference();
  newRef.setRefLevel(this.refLevel);
  for (  TreeReferenceLevel l : data) {
    newRef.add(l.shallowCopy());
  }
  if (instanceName != null) {
    newRef.setInstanceName(instanceName);
  }
  newRef.contextType=this.contextType;
  return newRef;
}",0.9803921568627452
144763,"/** 
 * translate an xpath path reference into a TreeReference TreeReferences only support a subset of true xpath paths; restrictions are: simple child name tests 'child::name', '.', and '..' allowed only no predicates all '..' steps must come before anything else
 */
public TreeReference getReference(boolean allowPredicates) throws XPathUnsupportedException {
  TreeReference ref=new TreeReference();
  boolean parentsAllowed;
switch (init_context) {
case XPathPathExpr.INIT_CONTEXT_ROOT:
    ref.setRefLevel(TreeReference.REF_ABSOLUTE);
  parentsAllowed=false;
break;
case XPathPathExpr.INIT_CONTEXT_RELATIVE:
ref.setRefLevel(0);
parentsAllowed=true;
break;
case XPathPathExpr.INIT_CONTEXT_EXPR:
if (this.filtExpr.x != null && this.filtExpr.x instanceof XPathFuncExpr) {
XPathFuncExpr func=(XPathFuncExpr)(this.filtExpr.x);
if (func.id.toString().equals(""String_Node_Str"")) {
ref.setRefLevel(TreeReference.REF_ABSOLUTE);
parentsAllowed=false;
if (func.args.length != 1) {
throw new XPathUnsupportedException(""String_Node_Str"" + func.args.length + ""String_Node_Str"");
}
if (!(func.args[0] instanceof XPathStringLiteral)) {
throw new XPathUnsupportedException(""String_Node_Str"");
}
XPathStringLiteral strLit=(XPathStringLiteral)(func.args[0]);
ref.setInstanceName(strLit.s);
}
 else if (func.id.toString().equals(""String_Node_Str"")) {
parentsAllowed=true;
ref.setContext(TreeReference.CONTEXT_ORIGINAL);
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
break;
default :
throw new XPathUnsupportedException(""String_Node_Str"");
}
for (int i=0; i < steps.length; i++) {
XPathStep step=steps[i];
if (step.axis == XPathStep.AXIS_SELF) {
if (step.test != XPathStep.TEST_TYPE_NODE) {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else if (step.axis == XPathStep.AXIS_PARENT) {
if (!parentsAllowed || step.test != XPathStep.TEST_TYPE_NODE) {
throw new XPathUnsupportedException(""String_Node_Str"");
}
 else {
ref.incrementRefLevel();
}
}
 else if (step.axis == XPathStep.AXIS_ATTRIBUTE) {
if (step.test == XPathStep.TEST_NAME) {
ref.add(step.name.toString(),TreeReference.INDEX_ATTRIBUTE);
parentsAllowed=false;
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else if (step.axis == XPathStep.AXIS_CHILD) {
if (step.test == XPathStep.TEST_NAME) {
ref.add(step.name.toString(),TreeReference.INDEX_UNBOUND);
parentsAllowed=false;
}
 else if (step.test == XPathStep.TEST_NAME_WILDCARD) {
ref.add(TreeReference.NAME_WILDCARD,TreeReference.INDEX_UNBOUND);
parentsAllowed=false;
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
if (step.predicates.length > 0) {
int refLevel=ref.getRefLevel();
Vector<XPathExpression> v=new Vector<XPathExpression>();
for (int j=0; j < step.predicates.length; j++) {
v.addElement(step.predicates[j]);
}
ref.addPredicate(i,v);
}
}
return ref;
}","/** 
 * Translate an xpath path reference into a TreeReference TreeReferences only support a subset of xpath paths: - only simple child name tests 'child::name', '.', and '..' allowed. - '../' steps must come before anything else
 * @param allowPredicates Is deprecated! Don't use this.
 * @return a reference built from this path expression
 */
public TreeReference getReference(boolean allowPredicates) throws XPathUnsupportedException {
  TreeReference ref=new TreeReference();
  boolean parentsAllowed;
switch (init_context) {
case XPathPathExpr.INIT_CONTEXT_ROOT:
    ref.setRefLevel(TreeReference.REF_ABSOLUTE);
  parentsAllowed=false;
break;
case XPathPathExpr.INIT_CONTEXT_RELATIVE:
ref.setRefLevel(0);
parentsAllowed=true;
break;
case XPathPathExpr.INIT_CONTEXT_EXPR:
if (this.filtExpr.x != null && this.filtExpr.x instanceof XPathFuncExpr) {
XPathFuncExpr func=(XPathFuncExpr)(this.filtExpr.x);
if (func.id.toString().equals(""String_Node_Str"")) {
ref.setRefLevel(TreeReference.REF_ABSOLUTE);
parentsAllowed=false;
if (func.args.length != 1) {
throw new XPathUnsupportedException(""String_Node_Str"" + func.args.length + ""String_Node_Str"");
}
if (!(func.args[0] instanceof XPathStringLiteral)) {
throw new XPathUnsupportedException(""String_Node_Str"");
}
XPathStringLiteral strLit=(XPathStringLiteral)(func.args[0]);
ref.setInstanceName(strLit.s);
}
 else if (func.id.toString().equals(""String_Node_Str"")) {
parentsAllowed=true;
ref.setContext(TreeReference.CONTEXT_ORIGINAL);
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
break;
default :
throw new XPathUnsupportedException(""String_Node_Str"");
}
final String otherStepMessage=""String_Node_Str"";
for (XPathStep step : steps) {
if (step.axis == XPathStep.AXIS_SELF) {
if (step.test != XPathStep.TEST_TYPE_NODE) {
throw new XPathUnsupportedException(otherStepMessage);
}
}
 else if (step.axis == XPathStep.AXIS_PARENT) {
if (!parentsAllowed || step.test != XPathStep.TEST_TYPE_NODE) {
throw new XPathUnsupportedException(otherStepMessage);
}
 else {
ref.incrementRefLevel();
}
}
 else if (step.axis == XPathStep.AXIS_ATTRIBUTE) {
if (step.test == XPathStep.TEST_NAME) {
ref.add(step.name.toString(),TreeReference.INDEX_ATTRIBUTE);
parentsAllowed=false;
}
 else {
throw new XPathUnsupportedException(""String_Node_Str"");
}
}
 else if (step.axis == XPathStep.AXIS_CHILD) {
if (step.test == XPathStep.TEST_NAME) {
ref.add(step.name.toString(),TreeReference.INDEX_UNBOUND);
parentsAllowed=false;
}
 else if (step.test == XPathStep.TEST_NAME_WILDCARD) {
ref.add(TreeReference.NAME_WILDCARD,TreeReference.INDEX_UNBOUND);
parentsAllowed=false;
}
 else {
throw new XPathUnsupportedException(otherStepMessage);
}
}
 else {
throw new XPathUnsupportedException(otherStepMessage);
}
if (step.predicates.length > 0) {
int refLevel=ref.getRefLevel();
Vector<XPathExpression> v=new Vector<XPathExpression>();
for (int j=0; j < step.predicates.length; j++) {
v.addElement(step.predicates[j]);
}
ref.addPredicate(ref.size() - 1,v);
}
}
return ref;
}",0.9087603305785124
144764,"public Vector getChildrenWithName(String name){
  return cache().getChildrenWithName(name);
}","public Vector getChildrenWithName(String name){
  Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
  if (done[0] == false) {
    return children;
  }
  if (children.size() == 0) {
    TreeElement emptyNode=new TreeElement(name);
    emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
    this.addChild(emptyNode);
    emptyNode.setParent(this);
    children.add(emptyNode);
  }
  return children;
}",0.2651933701657458
144765,"private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    if (recordId == -1) {
      Vector<Integer> ids=parent.storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Case c=parent.getCase(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.isClosed() ? ""String_Node_Str"" : ""String_Node_Str"");
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getUserId() == null ? ""String_Node_Str"" : c.getUserId());
    final boolean[] done=new boolean[]{false};
    if (!parent.reportMode) {
      TreeElement scratch=new TreeElement(""String_Node_Str"");
      String name=c.getName();
      scratch.setAnswer(new StringData(name == null ? ""String_Node_Str"" : name));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(""String_Node_Str"");
      scratch.setAnswer(new DateData(c.getDateOpened()));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(LAST_MODIFIED_KEY);
      scratch.setAnswer(new DateData(c.getLastModified()));
      cacheBuilder.addChild(scratch);
      for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
        String key=(String)en.nextElement();
        if (LAST_MODIFIED_KEY.equals(key)) {
          continue;
        }
        scratch=new TreeElement(parent.intern(key));
        Object temp=c.getProperty(key);
        if (temp instanceof String) {
          scratch.setValue(new UncastData((String)temp));
        }
 else {
          scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
        }
        cacheBuilder.addChild(scratch);
      }
      TreeElement index=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (done[0] == false) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
      }
;
      Vector<CaseIndex> indices=c.getIndices();
      for (      CaseIndex i : indices) {
        scratch=new TreeElement(i.getName());
        scratch.setAttribute(null,""String_Node_Str"",this.parent.intern(i.getTargetType()));
        scratch.setValue(new UncastData(i.getTarget()));
        index.addChild(scratch);
      }
      cacheBuilder.addChild(index);
      TreeElement attachments=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (done[0] == false) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
      }
;
      for (      String attachment : c.getAttachments()) {
        scratch=new TreeElement(attachment);
        scratch.setValue(new UncastData(c.getAttachmentSource(attachment)));
        attachments.addChild(scratch);
      }
      cacheBuilder.addChild(attachments);
    }
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}","private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    if (recordId == -1) {
      Vector<Integer> ids=parent.storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Case c=parent.getCase(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.isClosed() ? ""String_Node_Str"" : ""String_Node_Str"");
    cacheBuilder.setAttribute(null,""String_Node_Str"",c.getUserId() == null ? ""String_Node_Str"" : c.getUserId());
    final boolean[] done=new boolean[]{false};
    if (!parent.reportMode) {
      TreeElement scratch=new TreeElement(""String_Node_Str"");
      String name=c.getName();
      scratch.setAnswer(new StringData(name == null ? ""String_Node_Str"" : name));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(""String_Node_Str"");
      scratch.setAnswer(new DateData(c.getDateOpened()));
      cacheBuilder.addChild(scratch);
      scratch=new TreeElement(LAST_MODIFIED_KEY);
      scratch.setAnswer(new DateData(c.getLastModified()));
      cacheBuilder.addChild(scratch);
      for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
        String key=(String)en.nextElement();
        if (LAST_MODIFIED_KEY.equals(key)) {
          continue;
        }
        scratch=new TreeElement(parent.intern(key));
        Object temp=c.getProperty(key);
        if (temp instanceof String) {
          scratch.setValue(new UncastData((String)temp));
        }
 else {
          scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
        }
        cacheBuilder.addChild(scratch);
      }
      TreeElement index=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (done[0] == false) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
        public Vector getChildrenWithName(        String name){
          Vector children=super.getChildrenWithName(CaseChildElement.this.parent.intern(name));
          if (done[0] == false) {
            return children;
          }
          if (children.size() == 0) {
            TreeElement emptyNode=new TreeElement(name);
            emptyNode.setAttribute(null,""String_Node_Str"",""String_Node_Str"");
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            children.add(emptyNode);
          }
          return children;
        }
      }
;
      Vector<CaseIndex> indices=c.getIndices();
      for (      CaseIndex i : indices) {
        scratch=new TreeElement(i.getName());
        scratch.setAttribute(null,""String_Node_Str"",this.parent.intern(i.getTargetType()));
        scratch.setValue(new UncastData(i.getTarget()));
        index.addChild(scratch);
      }
      cacheBuilder.addChild(index);
      TreeElement attachments=new TreeElement(""String_Node_Str""){
        public TreeElement getChild(        String name,        int multiplicity){
          TreeElement child=super.getChild(CaseChildElement.this.parent.intern(name),multiplicity);
          if (done[0] == false) {
            return child;
          }
          if (multiplicity >= 0 && child == null) {
            TreeElement emptyNode=new TreeElement(CaseChildElement.this.parent.intern(name));
            this.addChild(emptyNode);
            emptyNode.setParent(this);
            return emptyNode;
          }
          return child;
        }
      }
;
      for (      String attachment : c.getAttachments()) {
        scratch=new TreeElement(attachment);
        scratch.setValue(new UncastData(c.getAttachmentSource(attachment)));
        attachments.addChild(scratch);
      }
      cacheBuilder.addChild(attachments);
    }
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}",0.7074497612967692
144766,"public void populateMenu(List list,String menu,MultimediaListener listener){
  suiteTable.clear();
  entryTable.clear();
  menuTable.clear();
  Enumeration en=session.platform.getInstalledSuites().elements();
  EvaluationContext ec=null;
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (relevance != null) {
          if (ec == null) {
            ec=session.getEvaluationContext(getIif());
          }
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
      }
 catch (      XPathSyntaxException e) {
        e.printStackTrace();
      }
      if (menu.equals(m.getId())) {
        for (int i=0; i < m.getCommandIds().size(); ++i) {
          try {
            String id=m.getCommandIds().elementAt(i);
            XPathExpression relevant=m.getCommandRelevance(i);
            if (relevant != null) {
              if (ec == null) {
                ec=session.getEvaluationContext(getIif());
              }
              if (XPathFuncExpr.toBoolean(relevant.eval(ec)).booleanValue() == false) {
                continue;
              }
            }
            Entry e=suite.getEntries().get(id);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            int location=list.size();
            list.append(CommCareUtil.getMenuText(e.getText(),suite,location),ImageUtils.getImage(e.getImageURI()));
            if (listener != null && (e.getAudioURI() != null && !""String_Node_Str"".equals(e.getAudioURI()))) {
              listener.registerAudioTrigger(location,e.getAudioURI());
            }
            suiteTable.put(new Integer(location),suite);
            entryTable.put(new Integer(location),e);
          }
 catch (          XPathSyntaxException xpse) {
            throw new RuntimeException(xpse.getMessage());
          }
        }
      }
 else       if (m.getRoot().equals(menu)) {
        int location=list.size();
        list.append(CommCareUtil.getMenuText(m.getName(),suite,location),ImageUtils.getImage(m.getImageURI()));
        if (listener != null && (m.getAudioURI() != null && !""String_Node_Str"".equals(m.getAudioURI()))) {
          listener.registerAudioTrigger(location,m.getAudioURI());
        }
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
}","public void populateMenu(List list,String menu,MultimediaListener listener){
  suiteTable.clear();
  entryTable.clear();
  menuTable.clear();
  Enumeration en=session.platform.getInstalledSuites().elements();
  EvaluationContext ec=null;
  while (en.hasMoreElements()) {
    Suite suite=(Suite)en.nextElement();
    for (    Menu m : suite.getMenus()) {
      try {
        XPathExpression relevance=m.getMenuRelevance();
        if (relevance != null) {
          if (ec == null) {
            ec=session.getEvaluationContext(getIif(),m.getId());
          }
          if (XPathFuncExpr.toBoolean(relevance.eval(ec)).booleanValue() == false) {
            continue;
          }
        }
      }
 catch (      XPathSyntaxException e) {
        e.printStackTrace();
      }
      if (menu.equals(m.getId())) {
        for (int i=0; i < m.getCommandIds().size(); ++i) {
          try {
            String id=m.getCommandIds().elementAt(i);
            XPathExpression relevant=m.getCommandRelevance(i);
            if (relevant != null) {
              if (ec == null) {
                ec=session.getEvaluationContext(getIif());
              }
              if (XPathFuncExpr.toBoolean(relevant.eval(ec)).booleanValue() == false) {
                continue;
              }
            }
            Entry e=suite.getEntries().get(id);
            if (e.getXFormNamespace() == null) {
              if (session.getNeededDatum(e) == null) {
                continue;
              }
            }
            int location=list.size();
            list.append(CommCareUtil.getMenuText(e.getText(),suite,location),ImageUtils.getImage(e.getImageURI()));
            if (listener != null && (e.getAudioURI() != null && !""String_Node_Str"".equals(e.getAudioURI()))) {
              listener.registerAudioTrigger(location,e.getAudioURI());
            }
            suiteTable.put(new Integer(location),suite);
            entryTable.put(new Integer(location),e);
          }
 catch (          XPathSyntaxException xpse) {
            throw new RuntimeException(xpse.getMessage());
          }
        }
      }
 else       if (m.getRoot().equals(menu)) {
        int location=list.size();
        list.append(CommCareUtil.getMenuText(m.getName(),suite,location),ImageUtils.getImage(m.getImageURI()));
        if (listener != null && (m.getAudioURI() != null && !""String_Node_Str"".equals(m.getAudioURI()))) {
          listener.registerAudioTrigger(location,m.getAudioURI());
        }
        suiteTable.put(new Integer(location),suite);
        menuTable.put(new Integer(location),m);
      }
    }
  }
}",0.9980724749421742
144767,"public EvaluationContext getEvaluationContext(InstanceInitializationFactory iif){
  if (getCommand() == null) {
    return new EvaluationContext(null);
  }
  Entry entry=getEntriesForCommand(getCommand()).elementAt(0);
  Hashtable<String,DataInstance> instances=entry.getInstances();
  for (Enumeration en=instances.keys(); en.hasMoreElements(); ) {
    String key=(String)en.nextElement();
    instances.get(key).initialize(iif,key);
  }
  return new EvaluationContext(null,instances);
}","/** 
 * Retrieve an evaluation context in which to evaluate expressions in the context of a given command in the installed app
 * @param iif the instance initializer for the current platform
 * @return Evaluation context for a command in the installed app
 */
public EvaluationContext getEvaluationContext(InstanceInitializationFactory iif,String command){
  if (command == null) {
    return new EvaluationContext(null);
  }
  Entry entry=getEntriesForCommand(command).elementAt(0);
  Hashtable<String,DataInstance> instances=entry.getInstances();
  for (Enumeration en=instances.keys(); en.hasMoreElements(); ) {
    String key=(String)en.nextElement();
    instances.get(key).initialize(iif,key);
  }
  return new EvaluationContext(null,instances);
}",0.7671232876712328
144768,"private int getDataType(String type){
  int dataType=Constants.DATATYPE_NULL;
  if (type != null) {
    if (type.indexOf(""String_Node_Str"") != -1) {
      type=type.substring(type.indexOf(""String_Node_Str"") + 1);
    }
    if (typeMappings.containsKey(type)) {
      dataType=((Integer)typeMappings.get(type)).intValue();
    }
 else {
      dataType=Constants.DATATYPE_UNSUPPORTED;
      reporter.warning(XFormParserReporter.TYPE_ERROR_PRONE,""String_Node_Str"" + type + ""String_Node_Str"",null);
    }
  }
  return dataType;
}","/** 
 * Gets the datatype id corresponding to type string passed it. Undefined types result in returning the unsupported datatype id and raising a warning.
 * @param type is the String value of a elements's type attribute.
 * @return int representing datatype id
 */
private int getDataType(String type){
  int dataType=Constants.DATATYPE_NULL;
  if (type != null) {
    if (type.indexOf(""String_Node_Str"") != -1) {
      type=type.substring(type.indexOf(""String_Node_Str"") + 1);
    }
    if (typeMappings.containsKey(type)) {
      dataType=((Integer)typeMappings.get(type)).intValue();
    }
 else {
      dataType=Constants.DATATYPE_UNSUPPORTED;
      reporter.warning(XFormParserReporter.TYPE_ERROR_PRONE,""String_Node_Str"" + type + ""String_Node_Str"",null);
    }
  }
  return dataType;
}",0.7972665148063781
144769,"private static void initTypeMappings(){
  typeMappings=new Hashtable<String,Integer>();
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TEXT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_LONG));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BOOLEAN));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(SELECTONE,DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(SELECT,DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_GEOPOINT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BARCODE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BINARY));
}","/** 
 * Setup mapping from a tag's type attribute to its datatype id.
 */
private static void initTypeMappings(){
  typeMappings=new Hashtable<String,Integer>();
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TEXT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_LONG));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BOOLEAN));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(SELECTONE,DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(SELECT,DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_GEOPOINT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BARCODE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BINARY));
}",0.9840448469167744
144770,"private void parseElement(Element e,Object parent,Hashtable<String,IElementHandler> handlers){
  String name=e.getName();
  String[] suppressWarningArr={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Vector<String> suppressWarning=new Vector<String>();
  for (int i=0; i < suppressWarningArr.length; i++) {
    suppressWarning.addElement(suppressWarningArr[i]);
  }
  IElementHandler eh=handlers.get(name);
  if (eh != null) {
    eh.handle(this,e,parent);
  }
 else {
    if (!suppressWarning.contains(name)) {
      reporter.warning(XFormParserReporter.TYPE_UNKNOWN_MARKUP,""String_Node_Str"" + name + ""String_Node_Str"",getVagueLocation(e));
    }
    for (int i=0; i < e.getChildCount(); i++) {
      if (e.getType(i) == Element.ELEMENT) {
        parseElement(e.getElement(i),parent,handlers);
      }
    }
  }
}","/** 
 * @param element  is the current element we are parsing
 * @param parent   is the parent to the element we are parsing
 * @param handlers maps tags to IElementHandlers, used to perform parsing of that tag
 */
private void parseElement(Element e,Object parent,Hashtable<String,IElementHandler> handlers){
  String name=e.getName();
  String namespace=e.getNamespace();
  String[] suppressWarningArr={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Vector<String> suppressWarning=new Vector<String>();
  for (int i=0; i < suppressWarningArr.length; i++) {
    suppressWarning.addElement(suppressWarningArr[i]);
  }
  IElementHandler eh=handlers.get(name);
  if (eh != null) {
    eh.handle(this,e,parent);
  }
 else {
    if (inSpecExtension(namespace,name)) {
      parseUnregisteredSpecExtension(namespace,name,e,parent,handlers);
    }
 else {
      if (!suppressWarning.contains(name)) {
        reporter.warning(XFormParserReporter.TYPE_UNKNOWN_MARKUP,""String_Node_Str"" + name + ""String_Node_Str"",getVagueLocation(e));
      }
      for (int i=0; i < e.getChildCount(); i++) {
        if (e.getType(i) == Element.ELEMENT) {
          parseElement(e.getElement(i),parent,handlers);
        }
      }
    }
  }
}",0.8331262939958592
144771,"public static void addDataType(String type,int dataType){
  typeMappings.put(type,DataUtil.integer(dataType));
}","/** 
 * Register a type to datatype id mapping
 * @param type is the String value of a elements's type attribute.
 * @param int  representing datatype id defined in Constants
 */
public static void addDataType(String type,int dataType){
  typeMappings.put(type,DataUtil.integer(dataType));
}",0.5558312655086849
144772,"public void doTests(){
  TreeElement root=null;
  EvaluationContext ec=new EvaluationContext(null);
  TreeElementParser parser;
  try {
    InputStream is=System.class.getResourceAsStream(formPath);
    parser=new TreeElementParser(ElementParser.instantiateParser(is),0,""String_Node_Str"");
  }
 catch (  IOException e) {
    fail(""String_Node_Str"" + formPath);
    return;
  }
  try {
    root=parser.parse();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + formPath);
    return;
  }
  FormInstance instance=null;
  try {
    instance=new FormInstance(root,""String_Node_Str"");
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  testEval(""String_Node_Str"",instance,null,new Double(2));
}","public void doTests(){
  TreeElement root=null;
  EvaluationContext ec=new EvaluationContext(null);
  TreeElementParser parser;
  try {
    InputStream is=System.class.getResourceAsStream(formPath);
    parser=new TreeElementParser(ElementParser.instantiateParser(is),0,""String_Node_Str"");
  }
 catch (  IOException e) {
    fail(""String_Node_Str"" + formPath);
    return;
  }
  try {
    root=parser.parse();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + formPath);
    return;
  }
  FormInstance instance=null;
  try {
    instance=new FormInstance(root,""String_Node_Str"");
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
  testEval(""String_Node_Str"",instance,null,""String_Node_Str"");
  testEval(""String_Node_Str"",instance,null,""String_Node_Str"");
}",0.937457969065232
144773,"/** 
 * A general purpose method for taking an abstract tree element and attempting to batch fetch its children's predicates through static evaluation. 
 * @param parent The element whose children are being requested
 * @param childAttributeHintMap A mapping of paths which can be evaluated in memory.
 * @param name The name of the children being queried
 * @param mult the multiplicity being queried for (could be undefined)
 * @param predicates the evaluation step predicates which are being processed. NOTE: This vectorwill be modified by this method as a side effect if a predicate was succesfully statically evaluated
 * @param evalContext The current eval context.
 * @return A vector of TreeReferences which contains the nodes matched by predicate expressions.Expressions which result in returned matches will be removed from the predicate collection which is provided
 */
public static Vector<TreeReference> tryBatchChildFetch(AbstractTreeElement parent,Hashtable<XPathPathExpr,Hashtable<String,TreeElement[]>> childAttributeHintMap,String name,int mult,Vector<XPathExpression> predicates,EvaluationContext evalContext){
  if (mult != TreeReference.INDEX_UNBOUND || predicates == null) {
    return null;
  }
  Vector<Integer> toRemove=new Vector<Integer>();
  Vector<TreeReference> selectedChildren=null;
  Vector<String> attributes=null;
  Vector<XPathPathExpr> indices=null;
  Vector<TreeElement> kids=null;
  predicate:   for (int i=0; i < predicates.size(); ++i) {
    XPathExpression xpe=predicates.elementAt(i);
    if (xpe instanceof XPathEqExpr) {
      XPathExpression left=((XPathEqExpr)xpe).a;
      XPathExpression right=((XPathEqExpr)xpe).b;
      if (left instanceof XPathPathExpr && (right instanceof XPathStringLiteral || right instanceof XPathPathExpr)) {
        String literalMatch=null;
        if (right instanceof XPathStringLiteral) {
          literalMatch=((XPathStringLiteral)right).s;
        }
 else         if (right instanceof XPathPathExpr) {
          for (          XPathStep step : ((XPathPathExpr)right).steps) {
            if (step.predicates.length > 0) {
              break;
            }
          }
          try {
            Object o=XPathFuncExpr.unpack(right.eval(evalContext));
            literalMatch=XPathFuncExpr.toString(o);
          }
 catch (          XPathException e) {
            e.printStackTrace();
            break;
          }
        }
        if (childAttributeHintMap != null) {
          if (childAttributeHintMap.containsKey(left)) {
            TreeElement[] children=childAttributeHintMap.get(left).get(literalMatch);
            if (selectedChildren == null) {
              selectedChildren=new Vector<TreeReference>();
            }
            if (children != null) {
              for (              TreeElement element : children) {
                selectedChildren.addElement(element.getRef());
              }
            }
            toRemove.addElement(DataUtil.integer(i));
            continue predicate;
          }
        }
        if (attributes == null) {
          attributes=new Vector<String>();
          indices=new Vector<XPathPathExpr>();
          kids=parent.getChildrenWithName(name);
          if (kids.size() == 0) {
            return null;
          }
          AbstractTreeElement kid=kids.elementAt(0);
          for (int j=0; j < kid.getAttributeCount(); ++j) {
            String attribute=kid.getAttributeName(j);
            XPathPathExpr path=TreeUtilities.getXPathAttrExpression(attribute);
            attributes.addElement(attribute);
            indices.addElement(path);
          }
        }
        for (int j=0; j < indices.size(); ++j) {
          XPathPathExpr expr=indices.elementAt(j);
          if (expr.equals(left)) {
            String attributeName=attributes.elementAt(j);
            for (int kidI=0; kidI < kids.size(); ++kidI) {
              if (kids.elementAt(kidI).getAttributeValue(null,attributeName).equals(literalMatch)) {
                if (selectedChildren == null) {
                  selectedChildren=new Vector<TreeReference>();
                }
                selectedChildren.addElement(kids.elementAt(kidI).getRef());
              }
            }
            toRemove.addElement(DataUtil.integer(i));
            continue predicate;
          }
        }
      }
    }
    break;
  }
  if (selectedChildren == null) {
    return null;
  }
  for (int i=toRemove.size() - 1; i >= 0; i--) {
    predicates.removeElementAt(toRemove.elementAt(i).intValue());
  }
  return selectedChildren;
}","/** 
 * A general purpose method for taking an abstract tree element and attempting to batch fetch its children's predicates through static evaluation. 
 * @param parent The element whose children are being requested
 * @param childAttributeHintMap A mapping of paths which can be evaluated in memory.
 * @param name The name of the children being queried
 * @param mult the multiplicity being queried for (could be undefined)
 * @param predicates the evaluation step predicates which are being processed. NOTE: This vectorwill be modified by this method as a side effect if a predicate was succesfully statically evaluated
 * @param evalContext The current eval context.
 * @return A vector of TreeReferences which contains the nodes matched by predicate expressions.Expressions which result in returned matches will be removed from the predicate collection which is provided
 */
public static Vector<TreeReference> tryBatchChildFetch(AbstractTreeElement parent,Hashtable<XPathPathExpr,Hashtable<String,TreeElement[]>> childAttributeHintMap,String name,int mult,Vector<XPathExpression> predicates,EvaluationContext evalContext){
  if (mult != TreeReference.INDEX_UNBOUND || predicates == null) {
    return null;
  }
  Vector<Integer> toRemove=new Vector<Integer>();
  Vector<TreeReference> allSelectedChildren=null;
  Vector<String> attributes=null;
  Vector<XPathPathExpr> indices=null;
  Vector<TreeElement> kids=null;
  predicate:   for (int i=0; i < predicates.size(); ++i) {
    Vector<TreeReference> predicateMatches=new Vector<TreeReference>();
    XPathExpression xpe=predicates.elementAt(i);
    if (xpe instanceof XPathEqExpr) {
      XPathExpression left=((XPathEqExpr)xpe).a;
      XPathExpression right=((XPathEqExpr)xpe).b;
      if (left instanceof XPathPathExpr && (right instanceof XPathStringLiteral || right instanceof XPathPathExpr)) {
        String literalMatch=null;
        if (right instanceof XPathStringLiteral) {
          literalMatch=((XPathStringLiteral)right).s;
        }
 else         if (right instanceof XPathPathExpr) {
          for (          XPathStep step : ((XPathPathExpr)right).steps) {
            if (step.predicates.length > 0) {
              break;
            }
          }
          try {
            Object o=XPathFuncExpr.unpack(right.eval(evalContext));
            literalMatch=XPathFuncExpr.toString(o);
          }
 catch (          XPathException e) {
            e.printStackTrace();
            break;
          }
        }
        if (childAttributeHintMap != null) {
          if (childAttributeHintMap.containsKey(left)) {
            TreeElement[] children=childAttributeHintMap.get(left).get(literalMatch);
            if (children != null) {
              for (              TreeElement element : children) {
                predicateMatches.addElement(element.getRef());
              }
            }
            allSelectedChildren=merge(allSelectedChildren,predicateMatches,i,toRemove);
            continue predicate;
          }
        }
        if (attributes == null) {
          attributes=new Vector<String>();
          indices=new Vector<XPathPathExpr>();
          kids=parent.getChildrenWithName(name);
          if (kids.size() == 0) {
            return null;
          }
          AbstractTreeElement kid=kids.elementAt(0);
          for (int j=0; j < kid.getAttributeCount(); ++j) {
            String attribute=kid.getAttributeName(j);
            XPathPathExpr path=TreeUtilities.getXPathAttrExpression(attribute);
            attributes.addElement(attribute);
            indices.addElement(path);
          }
        }
        for (int j=0; j < indices.size(); ++j) {
          XPathPathExpr expr=indices.elementAt(j);
          if (expr.equals(left)) {
            String attributeName=attributes.elementAt(j);
            for (int kidI=0; kidI < kids.size(); ++kidI) {
              if (kids.elementAt(kidI).getAttributeValue(null,attributeName).equals(literalMatch)) {
                predicateMatches.addElement(kids.elementAt(kidI).getRef());
              }
            }
            allSelectedChildren=merge(allSelectedChildren,predicateMatches,i,toRemove);
            continue predicate;
          }
        }
      }
    }
    break;
  }
  if (allSelectedChildren == null) {
    return null;
  }
  for (int i=toRemove.size() - 1; i >= 0; i--) {
    predicates.removeElementAt(toRemove.elementAt(i).intValue());
  }
  return allSelectedChildren;
}",0.8800177916157012
144774,"public static Vector<Integer> union(Vector<Integer> a,Vector<Integer> b){
  Vector<Integer> u=new Vector<Integer>();
  for (  Integer i : a) {
    if (b.contains(i)) {
      u.addElement(i);
    }
  }
  return u;
}","public <T>Vector<T> union(Vector<T> a,Vector<T> b){
  Vector<T> u=new Vector<T>();
  for (  T i : a) {
    if (b.contains(i)) {
      u.addElement(i);
    }
  }
  return u;
}",0.8505154639175257
144775,"/** 
 * A general purpose method for taking an abstract tree element and attempting to batch fetch its children's predicates through static evaluation. 
 * @param parent The element whose children are being requested
 * @param childAttributeHintMap A mapping of paths which can be evaluated in memory.
 * @param name The name of the children being queried
 * @param mult the multiplicity being queried for (could be undefined)
 * @param predicates the evaluation step predicates which are being processed. NOTE: This vectorwill be modified by this method as a side effect if a predicate was succesfully statically evaluated
 * @param evalContext The current eval context.
 * @return A vector of TreeReferences which contains the nodes matched by predicate expressions.Expressions which result in returned matches will be removed from the predicate collection which is provided
 */
public static Vector<TreeReference> tryBatchChildFetch(AbstractTreeElement parent,Hashtable<XPathPathExpr,Hashtable<String,TreeElement[]>> childAttributeHintMap,String name,int mult,Vector<XPathExpression> predicates,EvaluationContext evalContext){
  if (mult != TreeReference.INDEX_UNBOUND || predicates == null) {
    return null;
  }
  Vector<Integer> toRemove=new Vector<Integer>();
  Vector<TreeReference> selectedChildren=null;
  Vector<String> attributes=null;
  Vector<XPathPathExpr> indices=null;
  Vector<TreeElement> kids=null;
  predicate:   for (int i=0; i < predicates.size(); ++i) {
    XPathExpression xpe=predicates.elementAt(i);
    if (xpe instanceof XPathEqExpr) {
      XPathExpression left=((XPathEqExpr)xpe).a;
      XPathExpression right=((XPathEqExpr)xpe).b;
      if (left instanceof XPathPathExpr && (right instanceof XPathStringLiteral || right instanceof XPathPathExpr)) {
        String literalMatch=null;
        if (right instanceof XPathStringLiteral) {
          literalMatch=((XPathStringLiteral)right).s;
        }
 else         if (right instanceof XPathPathExpr) {
          for (          XPathStep step : ((XPathPathExpr)right).steps) {
            if (step.predicates.length > 0) {
              break;
            }
          }
          try {
            Object o=XPathFuncExpr.unpack(right.eval(evalContext));
            literalMatch=XPathFuncExpr.toString(o);
          }
 catch (          XPathException e) {
            e.printStackTrace();
            break;
          }
        }
        if (childAttributeHintMap != null) {
          if (childAttributeHintMap.containsKey(left)) {
            TreeElement[] children=childAttributeHintMap.get(left).get(literalMatch);
            if (selectedChildren == null) {
              selectedChildren=new Vector<TreeReference>();
            }
            if (children != null) {
              for (              TreeElement element : children) {
                selectedChildren.addElement(element.getRef());
              }
            }
            toRemove.addElement(DataUtil.integer(i));
            continue predicate;
          }
        }
        if (attributes == null) {
          attributes=new Vector<String>();
          indices=new Vector<XPathPathExpr>();
          kids=parent.getChildrenWithName(name);
          if (kids.size() == 0) {
            return null;
          }
          AbstractTreeElement kid=kids.elementAt(0);
          for (int j=0; j < kid.getAttributeCount(); ++j) {
            String attribute=kid.getAttributeName(j);
            XPathPathExpr path=TreeUtilities.getXPathAttrExpression(attribute);
            attributes.addElement(attribute);
            indices.addElement(path);
          }
        }
        for (int j=0; j < indices.size(); ++j) {
          XPathPathExpr expr=indices.elementAt(j);
          if (expr.equals(left)) {
            String attributeName=attributes.elementAt(j);
            for (int kidI=0; kidI < kids.size(); ++kidI) {
              if (kids.elementAt(kidI).getAttributeValue(null,attributeName).equals(literalMatch)) {
                if (selectedChildren == null) {
                  selectedChildren=new Vector<TreeReference>();
                }
                selectedChildren.addElement(kids.elementAt(kidI).getRef());
              }
            }
            toRemove.addElement(DataUtil.integer(i));
            continue predicate;
          }
        }
      }
    }
    break;
  }
  if (selectedChildren == null) {
    return null;
  }
  for (int i=toRemove.size() - 1; i >= 0; i--) {
    predicates.removeElementAt(toRemove.elementAt(i).intValue());
  }
  return selectedChildren;
}","/** 
 * A general purpose method for taking an abstract tree element and attempting to batch fetch its children's predicates through static evaluation. 
 * @param parent The element whose children are being requested
 * @param childAttributeHintMap A mapping of paths which can be evaluated in memory.
 * @param name The name of the children being queried
 * @param mult the multiplicity being queried for (could be undefined)
 * @param predicates the evaluation step predicates which are being processed. NOTE: This vectorwill be modified by this method as a side effect if a predicate was succesfully statically evaluated
 * @param evalContext The current eval context.
 * @return A vector of TreeReferences which contains the nodes matched by predicate expressions.Expressions which result in returned matches will be removed from the predicate collection which is provided
 */
public static Vector<TreeReference> tryBatchChildFetch(AbstractTreeElement parent,Hashtable<XPathPathExpr,Hashtable<String,TreeElement[]>> childAttributeHintMap,String name,int mult,Vector<XPathExpression> predicates,EvaluationContext evalContext){
  if (mult != TreeReference.INDEX_UNBOUND || predicates == null) {
    return null;
  }
  Vector<Integer> toRemove=new Vector<Integer>();
  Vector<TreeReference> allSelectedChildren=null;
  Vector<String> attributes=null;
  Vector<XPathPathExpr> indices=null;
  Vector<TreeElement> kids=null;
  predicate:   for (int i=0; i < predicates.size(); ++i) {
    Vector<TreeReference> predicateMatches=new Vector<TreeReference>();
    XPathExpression xpe=predicates.elementAt(i);
    if (xpe instanceof XPathEqExpr) {
      XPathExpression left=((XPathEqExpr)xpe).a;
      XPathExpression right=((XPathEqExpr)xpe).b;
      if (left instanceof XPathPathExpr && (right instanceof XPathStringLiteral || right instanceof XPathPathExpr)) {
        String literalMatch=null;
        if (right instanceof XPathStringLiteral) {
          literalMatch=((XPathStringLiteral)right).s;
        }
 else         if (right instanceof XPathPathExpr) {
          for (          XPathStep step : ((XPathPathExpr)right).steps) {
            if (step.predicates.length > 0) {
              break;
            }
          }
          try {
            Object o=XPathFuncExpr.unpack(right.eval(evalContext));
            literalMatch=XPathFuncExpr.toString(o);
          }
 catch (          XPathException e) {
            e.printStackTrace();
            break;
          }
        }
        if (childAttributeHintMap != null) {
          if (childAttributeHintMap.containsKey(left)) {
            TreeElement[] children=childAttributeHintMap.get(left).get(literalMatch);
            if (children != null) {
              for (              TreeElement element : children) {
                predicateMatches.addElement(element.getRef());
              }
            }
            allSelectedChildren=merge(allSelectedChildren,predicateMatches,i,toRemove);
            continue predicate;
          }
        }
        if (attributes == null) {
          attributes=new Vector<String>();
          indices=new Vector<XPathPathExpr>();
          kids=parent.getChildrenWithName(name);
          if (kids.size() == 0) {
            return null;
          }
          AbstractTreeElement kid=kids.elementAt(0);
          for (int j=0; j < kid.getAttributeCount(); ++j) {
            String attribute=kid.getAttributeName(j);
            XPathPathExpr path=TreeUtilities.getXPathAttrExpression(attribute);
            attributes.addElement(attribute);
            indices.addElement(path);
          }
        }
        for (int j=0; j < indices.size(); ++j) {
          XPathPathExpr expr=indices.elementAt(j);
          if (expr.equals(left)) {
            String attributeName=attributes.elementAt(j);
            for (int kidI=0; kidI < kids.size(); ++kidI) {
              if (kids.elementAt(kidI).getAttributeValue(null,attributeName).equals(literalMatch)) {
                predicateMatches.addElement(kids.elementAt(kidI).getRef());
              }
            }
            allSelectedChildren=merge(allSelectedChildren,predicateMatches,i,toRemove);
            continue predicate;
          }
        }
      }
    }
    break;
  }
  if (allSelectedChildren == null) {
    return null;
  }
  for (int i=toRemove.size() - 1; i >= 0; i--) {
    predicates.removeElementAt(toRemove.elementAt(i).intValue());
  }
  return allSelectedChildren;
}",0.8800177916157012
144776,"public static Vector<Integer> union(Vector<Integer> a,Vector<Integer> b){
  Vector<Integer> u=new Vector<Integer>();
  for (  Integer i : a) {
    if (b.contains(i)) {
      u.addElement(i);
    }
  }
  return u;
}","public <T>Vector<T> union(Vector<T> a,Vector<T> b){
  Vector<T> u=new Vector<T>();
  for (  T i : a) {
    if (b.contains(i)) {
      u.addElement(i);
    }
  }
  return u;
}",0.8505154639175257
144777,"/** 
 * Returns the subreference of this reference up to the level specified. Used to identify the reference context for a predicate at the same level Must be an absolute reference, otherwise will throw IllegalArgumentException
 * @param i
 * @return
 */
public TreeReference getSubReference(int level){
  if (!this.isAbsolute()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  TreeReference ret=new TreeReference();
  ret.refLevel=this.refLevel;
  ret.contextType=this.contextType;
  ret.instanceName=this.instanceName;
  ret.data=new Vector<TreeReferenceLevel>();
  for (int i=0; i <= level; ++i) {
    ret.data.addElement(this.data.elementAt(i));
  }
  return ret;
}","/** 
 * Returns the subreference of this reference up to the level specified. For instance, for the reference: (/data/path/to/node).getSubreference(2) => /data/path/to Used to identify the reference context for a predicate at the same level Must be an absolute reference, otherwise will throw IllegalArgumentException
 * @param i
 * @return
 */
public TreeReference getSubReference(int level){
  if (!this.isAbsolute()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  TreeReference ret=new TreeReference();
  ret.refLevel=this.refLevel;
  ret.contextType=this.contextType;
  ret.instanceName=this.instanceName;
  ret.data=new Vector<TreeReferenceLevel>();
  for (int i=0; i <= level; ++i) {
    ret.data.addElement(this.data.elementAt(i));
  }
  return ret;
}",0.9386084583901774
144778,"/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    argVals[0]=XPathFuncExpr.unpack(args[0].eval(model,evalContext));
    if (!isNull(argVals[0])) {
      return argVals[0];
    }
 else {
      argVals[1]=args[1].eval(model,evalContext);
      return argVals[1];
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  try {
    if (name.equals(""String_Node_Str"") && args.length == 0) {
      return Boolean.TRUE;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return Boolean.FALSE;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toBoolean(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toNumeric(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toInt(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toDouble(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toString(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toDate(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return boolNot(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return boolStr(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return dateStr(argVals[0],argVals[1]);
    }
 else     if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
      return multiSelected(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return countSelected(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return selectedAt(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
      if (args.length == 1) {
        return position(((XPathNodeset)argVals[0]).getRefAt(0));
      }
 else {
        if (evalContext.getContextPosition() != -1) {
          return new Double(evalContext.getContextPosition());
        }
        return position(evalContext.getContextRef());
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return count(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      if (argVals[0] instanceof XPathNodeset) {
        return sum(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (argVals[0] instanceof XPathNodeset) {
        return max(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return max(argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (argVals[0] instanceof XPathNodeset) {
        return min(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return min(argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return DateUtils.roundDate(new Date());
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return new Date();
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
        return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return join(""String_Node_Str"",argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 1) {
      if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
        return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
      }
 else {
        return join(argVals[0],subsetArgList(argVals,1));
      }
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
      return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return stringLength(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return normalizeCase(argVals[0],true);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return normalizeCase(argVals[0],false);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).indexOf(toString(argVals[1])) != -1;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).startsWith(toString(argVals[1]));
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).endsWith(toString(argVals[1]));
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 3) {
      return translate(argVals[0],argVals[1],argVals[2]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 3) {
      return replace(argVals[0],argVals[1],argVals[2]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 2) {
      if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
        return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
      }
 else {
        return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
      if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
        Object[] factors=((XPathNodeset)argVals[2]).toArgList();
        Object[] weights=((XPathNodeset)argVals[3]).toArgList();
        if (factors.length != weights.length) {
          throw new XPathTypeMismatchException(""String_Node_Str"");
        }
        return checklistWeighted(argVals[0],argVals[1],factors,weights);
      }
 else {
        return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return regex(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 1) {
      return argVals[0];
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return new Double(MathUtils.getRand().nextDouble());
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
      if (args.length == 0) {
        return PropertyUtils.genUUID();
      }
      int len=toInt(argVals[0]).intValue();
      return PropertyUtils.genGUID(len);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 2)) {
      return power(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.abs(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.ceil(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.floor(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double((double)(Math.floor(toDouble(argVals[0]).doubleValue() + 0.5)));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return log(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return log10(argVals[0]);
    }
 else {
      IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
      if (handler != null) {
        return evalCustomFunction(handler,argVals,evalContext);
      }
 else {
        throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
  }
 catch (  ClassCastException cce) {
    String args=""String_Node_Str"";
    for (int i=0; i < argVals.length; ++i) {
      args+=""String_Node_Str"" + String.valueOf(unpack(argVals[i])) + ""String_Node_Str""+ (i == argVals.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    }
    throw new XPathException(""String_Node_Str"" + name + ""String_Node_Str""+ args+ ""String_Node_Str""+ ""String_Node_Str""+ cce.getMessage());
  }
}","/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    argVals[0]=XPathFuncExpr.unpack(args[0].eval(model,evalContext));
    if (!isNull(argVals[0])) {
      return argVals[0];
    }
 else {
      argVals[1]=args[1].eval(model,evalContext);
      return argVals[1];
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  try {
    if (name.equals(""String_Node_Str"") && args.length == 0) {
      return Boolean.TRUE;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return Boolean.FALSE;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toBoolean(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toNumeric(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toInt(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toDouble(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toString(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return toDate(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return boolNot(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return boolStr(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return dateStr(argVals[0],argVals[1]);
    }
 else     if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
      return multiSelected(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return countSelected(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return selectedAt(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
      if (args.length == 1) {
        return position(((XPathNodeset)argVals[0]).getRefAt(0));
      }
 else {
        if (evalContext.getContextPosition() != -1) {
          return new Double(evalContext.getContextPosition());
        }
        return position(evalContext.getContextRef());
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return count(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      if (argVals.length == 1 && argVals[0] instanceof XPathNodeset) {
        return sum(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (argVals.length == 1 && argVals[0] instanceof XPathNodeset) {
        return max(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return max(argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (argVals.length == 1 && argVals[0] instanceof XPathNodeset) {
        return min(((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return min(argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return DateUtils.roundDate(new Date());
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return new Date();
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
        return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
      }
 else {
        return join(""String_Node_Str"",argVals);
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 1) {
      if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
        return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
      }
 else {
        return join(argVals[0],subsetArgList(argVals,1));
      }
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
      return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return stringLength(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return normalizeCase(argVals[0],true);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 1) {
      return normalizeCase(argVals[0],false);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).indexOf(toString(argVals[1])) != -1;
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).startsWith(toString(argVals[1]));
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return toString(argVals[0]).endsWith(toString(argVals[1]));
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 3) {
      return translate(argVals[0],argVals[1],argVals[2]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 3) {
      return replace(argVals[0],argVals[1],argVals[2]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 2) {
      if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
        return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
      }
 else {
        return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
      if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
        Object[] factors=((XPathNodeset)argVals[2]).toArgList();
        Object[] weights=((XPathNodeset)argVals[3]).toArgList();
        if (factors.length != weights.length) {
          throw new XPathTypeMismatchException(""String_Node_Str"");
        }
        return checklistWeighted(argVals[0],argVals[1],factors,weights);
      }
 else {
        return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
      }
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 2) {
      return regex(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && args.length >= 1) {
      return argVals[0];
    }
 else     if (name.equals(""String_Node_Str"") && args.length == 0) {
      return new Double(MathUtils.getRand().nextDouble());
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
      if (args.length == 0) {
        return PropertyUtils.genUUID();
      }
      int len=toInt(argVals[0]).intValue();
      return PropertyUtils.genGUID(len);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 2)) {
      return power(argVals[0],argVals[1]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.abs(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.ceil(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double(Math.floor(toDouble(argVals[0]).doubleValue()));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return new Double((double)(Math.floor(toDouble(argVals[0]).doubleValue() + 0.5)));
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return log(argVals[0]);
    }
 else     if (name.equals(""String_Node_Str"") && (args.length == 1)) {
      return log10(argVals[0]);
    }
 else {
      IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
      if (handler != null) {
        return evalCustomFunction(handler,argVals,evalContext);
      }
 else {
        throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
  }
 catch (  ClassCastException cce) {
    String args=""String_Node_Str"";
    for (int i=0; i < argVals.length; ++i) {
      args+=""String_Node_Str"" + String.valueOf(unpack(argVals[i])) + ""String_Node_Str""+ (i == argVals.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    }
    throw new XPathException(""String_Node_Str"" + name + ""String_Node_Str""+ args+ ""String_Node_Str""+ ""String_Node_Str""+ cce.getMessage());
  }
}",0.9962877279819228
144779,"public void doTest(int i){
switch (i) {
case 1:
    testClones();
  break;
case 2:
testSerialization();
break;
case 3:
testParentage();
break;
case 4:
testIntersection();
break;
case 5:
contextualization();
break;
case 6:
testPredicates();
break;
case 7:
testGenericize();
break;
}
}","public void doTest(int i){
switch (i) {
case 1:
    testClones();
  break;
case 2:
testSerialization();
break;
case 3:
testParentage();
break;
case 4:
testIntersection();
break;
case 5:
contextualization();
break;
case 6:
testPredicates();
break;
case 7:
testGenericize();
break;
case 8:
testSubreferences();
break;
}
}",0.9401993355481728
144780,"private void testEval(String expr,FormInstance model,EvaluationContext ec,Object expected,double tolerance){
  XPathExpression xpe=null;
  boolean exceptionExpected=(expected instanceof XPathException);
  if (ec == null) {
    ec=new EvaluationContext(model);
  }
  try {
    xpe=XPathParseTool.parseXPath(expr);
  }
 catch (  XPathSyntaxException xpse) {
  }
  if (xpe == null) {
    fail(""String_Node_Str"" + expr);
  }
  try {
    Object result=xpe.eval(model,ec);
    if (tolerance != XPathFuncExpr.DOUBLE_TOLERANCE) {
      System.out.println(expr + ""String_Node_Str"" + result);
    }
    if (exceptionExpected) {
      fail(""String_Node_Str"" + expr);
    }
 else     if ((result instanceof Double && expected instanceof Double)) {
      Double o=((Double)result).doubleValue();
      Double t=((Double)expected).doubleValue();
      if (Math.abs(o - t) > tolerance) {
        fail(""String_Node_Str"" + o + ""String_Node_Str""+ t+ ""String_Node_Str"");
      }
    }
 else     if (!expected.equals(result)) {
      fail(""String_Node_Str"" + expected + ""String_Node_Str""+ result);
    }
  }
 catch (  XPathException xpex) {
    if (!exceptionExpected) {
      fail(""String_Node_Str"" + xpex.getClass() + ""String_Node_Str"");
    }
 else     if (xpex.getClass() != expected.getClass()) {
      fail(""String_Node_Str"");
    }
  }
}","private void testEval(String expr,FormInstance model,EvaluationContext ec,Object expected,double tolerance){
  XPathExpression xpe=null;
  boolean exceptionExpected=(expected instanceof XPathException);
  if (ec == null) {
    ec=new EvaluationContext(model);
  }
  try {
    xpe=XPathParseTool.parseXPath(expr);
  }
 catch (  XPathSyntaxException xpse) {
  }
  if (xpe == null) {
    fail(""String_Node_Str"" + expr);
  }
  try {
    Object result=XPathFuncExpr.unpack(xpe.eval(model,ec));
    if (tolerance != XPathFuncExpr.DOUBLE_TOLERANCE) {
      System.out.println(expr + ""String_Node_Str"" + result);
    }
    if (exceptionExpected) {
      fail(""String_Node_Str"" + expr);
    }
 else     if ((result instanceof Double && expected instanceof Double)) {
      Double o=((Double)result).doubleValue();
      Double t=((Double)expected).doubleValue();
      if (Math.abs(o - t) > tolerance) {
        fail(""String_Node_Str"" + o + ""String_Node_Str""+ t+ ""String_Node_Str"");
      }
    }
 else     if (!expected.equals(result)) {
      fail(""String_Node_Str"" + expected + ""String_Node_Str""+ result);
    }
  }
 catch (  XPathException xpex) {
    if (!exceptionExpected) {
      fail(""String_Node_Str"" + xpex.getClass() + ""String_Node_Str"");
    }
 else     if (xpex.getClass() != expected.getClass()) {
      fail(""String_Node_Str"");
    }
  }
}",0.9895131086142324
144781,"public void doTests(){
  EvaluationContext ec=getFunctionHandlers();
  FormInstance instance=createTestInstance();
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,new Double(555555.555));
  testEval(""String_Node_Str"",null,null,new Double(0.000555));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(100.001));
  testEval(""String_Node_Str"",null,null,new Double(0.1001));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-12345.6789));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(10.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-123.5));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(14127.0));
  testEval(""String_Node_Str"",null,null,new Double(-10252.0));
  testEval(""String_Node_Str"",null,ec,new Double(5.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2000,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1945,4,26));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1996,2,29));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,2));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1969,12,31));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2008,9,5));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1941,12,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1989,11,9));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(0.5));
  testEval(""String_Node_Str"",null,null,new Double(5.5));
  testEval(""String_Node_Str"",null,null,DateUtils.parseDate(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.7));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(-4.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-40.0));
  testEval(""String_Node_Str"",null,null,new Double(-19.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.21));
  testEval(""String_Node_Str"",null,null,new Double(2.5));
  testEval(""String_Node_Str"",null,null,new Double(1.5));
  testEval(""String_Node_Str"",null,null,new Double(12.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.9));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(65.0));
  testEval(""String_Node_Str"",null,null,new Double(56088.0));
  testEval(""String_Node_Str"",null,null,new Double(9.0));
  testEval(""String_Node_Str"",null,null,new Double(9104.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(3.5));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"" + Math.E + ""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(4.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(6.25));
  testEval(""String_Node_Str"",null,null,new Double(.25));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(-3.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new Double(8.0));
  testEval(""String_Node_Str"",null,ec,new Double(3.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  EvaluationContext varContext=getVariableContext();
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,""String_Node_Str"");
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  String wildcardIndex=""String_Node_Str"";
  String indexOne=""String_Node_Str"";
  String indexTwo=""String_Node_Str"";
  XPathPathExpr expr=XPathReference.getPathExpr(wildcardIndex);
  XPathPathExpr expr2=XPathReference.getPathExpr(indexOne);
  XPathPathExpr expr3=XPathReference.getPathExpr(indexTwo);
  if (!expr.matches(expr2)) {
    fail(""String_Node_Str"" + wildcardIndex + ""String_Node_Str""+ indexOne);
  }
  if (!expr2.matches(expr)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ wildcardIndex);
  }
  if (expr2.matches(expr3)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ indexTwo);
  }
  try {
    testEval(""String_Node_Str"",null,ec,new XPathUnhandledException());
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
  }
  ec.addFunctionHandler(read);
  ec.addFunctionHandler(write);
  read.val=""String_Node_Str"";
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  if (!""String_Node_Str"".equals(write.val))   fail(""String_Node_Str"");
}","public void doTests(){
  EvaluationContext ec=getFunctionHandlers();
  FormInstance instance=createTestInstance();
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,new Double(555555.555));
  testEval(""String_Node_Str"",null,null,new Double(0.000555));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(100.001));
  testEval(""String_Node_Str"",null,null,new Double(0.1001));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-12345.6789));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(10.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-123.5));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(14127.0));
  testEval(""String_Node_Str"",null,null,new Double(-10252.0));
  testEval(""String_Node_Str"",null,ec,new Double(5.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2000,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1945,4,26));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1996,2,29));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,2));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1969,12,31));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2008,9,5));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1941,12,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1989,11,9));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(0.5));
  testEval(""String_Node_Str"",null,null,new Double(5.5));
  testEval(""String_Node_Str"",null,null,DateUtils.parseDate(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.7));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(-4.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-40.0));
  testEval(""String_Node_Str"",null,null,new Double(-19.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.21));
  testEval(""String_Node_Str"",null,null,new Double(2.5));
  testEval(""String_Node_Str"",null,null,new Double(1.5));
  testEval(""String_Node_Str"",null,null,new Double(12.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.9));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(65.0));
  testEval(""String_Node_Str"",null,null,new Double(56088.0));
  testEval(""String_Node_Str"",null,null,new Double(9.0));
  testEval(""String_Node_Str"",null,null,new Double(9104.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(3.5));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"" + Math.E + ""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(4.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(6.25));
  testEval(""String_Node_Str"",null,null,new Double(.25));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(-3.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new Double(8.0));
  testEval(""String_Node_Str"",null,ec,new Double(3.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new String(""String_Node_Str""));
  EvaluationContext varContext=getVariableContext();
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,""String_Node_Str"");
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  String wildcardIndex=""String_Node_Str"";
  String indexOne=""String_Node_Str"";
  String indexTwo=""String_Node_Str"";
  XPathPathExpr expr=XPathReference.getPathExpr(wildcardIndex);
  XPathPathExpr expr2=XPathReference.getPathExpr(indexOne);
  XPathPathExpr expr3=XPathReference.getPathExpr(indexTwo);
  if (!expr.matches(expr2)) {
    fail(""String_Node_Str"" + wildcardIndex + ""String_Node_Str""+ indexOne);
  }
  if (!expr2.matches(expr)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ wildcardIndex);
  }
  if (expr2.matches(expr3)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ indexTwo);
  }
  try {
    testEval(""String_Node_Str"",null,ec,new XPathUnhandledException());
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
  }
  ec.addFunctionHandler(read);
  ec.addFunctionHandler(write);
  read.val=""String_Node_Str"";
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  if (!""String_Node_Str"".equals(write.val)) {
    fail(""String_Node_Str"");
  }
  addDataRef(instance,""String_Node_Str"",new StringData(""String_Node_Str""));
  addDataRef(instance,""String_Node_Str"",new IntegerData(17));
  addDataRef(instance,""String_Node_Str"",new IntegerData(5));
  testEval(""String_Node_Str"",instance,null,""String_Node_Str"");
  testEval(""String_Node_Str"",instance,null,new Double(17.0));
  testEval(""String_Node_Str"",instance,null,new Double(5.0));
}",0.9900549130753852
144782,"public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  String caseId=parser.getAttributeValue(null,""String_Node_Str"");
  if (caseId == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  Case caseForBlock=null;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[3];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      if (data[0] == null || data[2] == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      boolean overriden=false;
      if (acceptCreateOverwrites) {
        caseForBlock=retrieve(caseId);
        if (caseForBlock != null) {
          caseForBlock.setName(data[2]);
          caseForBlock.setTypeId(data[0]);
          overriden=true;
        }
      }
      if (caseForBlock == null) {
        caseForBlock=CreateCase(data[2],data[0]);
        caseForBlock.setCaseId(caseId);
        caseForBlock.setDateOpened(modified);
      }
      if (data[1] != null) {
        caseForBlock.setUserId(data[1]);
      }
      create=true;
      String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        if (key.equals(""String_Node_Str"")) {
          caseForBlock.setTypeId(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setName(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setDateOpened(DateUtils.parseDate(value));
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setUserId(value);
        }
 else {
          caseForBlock.setProperty(key,value);
        }
      }
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      caseForBlock.setClosed(true);
      commit(caseForBlock);
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String indexName=parser.getName();
        String caseType=parser.getAttributeValue(null,""String_Node_Str"");
        String value=parser.nextText().trim();
        String relationship=parser.getAttributeValue(null,""String_Node_Str"");
        caseForBlock.setIndex(new CaseIndex(indexName,caseType,value,relationship));
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String attachmentName=parser.getName();
        String src=parser.getAttributeValue(null,""String_Node_Str"");
        String from=parser.getAttributeValue(null,""String_Node_Str"");
        String fileName=parser.getAttributeValue(null,""String_Node_Str"");
        if ((src == null || ""String_Node_Str"".equals(src)) && (from == null || ""String_Node_Str"".equals(from))) {
          this.removeAttachment(caseForBlock,attachmentName);
          caseForBlock.removeAttachment(attachmentName);
          continue;
        }
        String reference=this.processAttachment(src,from,fileName,parser);
        if (reference != null) {
          caseForBlock.updateAttachment(attachmentName,reference);
        }
      }
    }
  }
  if (caseForBlock != null) {
    caseForBlock.setLastModified(modified);
    commit(caseForBlock);
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}","public Case parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(""String_Node_Str"");
  String caseId=parser.getAttributeValue(null,""String_Node_Str"");
  if (caseId == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  boolean create=false;
  boolean update=false;
  boolean close=false;
  Case caseForBlock=null;
  while (this.nextTagInBlock(""String_Node_Str"")) {
    String action=parser.getName().toLowerCase();
    if (action.equals(""String_Node_Str"")) {
      String[] data=new String[3];
      while (this.nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().equals(""String_Node_Str"")) {
          data[0]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[1]=parser.nextText().trim();
        }
 else         if (parser.getName().equals(""String_Node_Str"")) {
          data[2]=parser.nextText().trim();
        }
 else {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
      }
      if (data[0] == null || data[2] == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      boolean overriden=false;
      if (acceptCreateOverwrites) {
        caseForBlock=retrieve(caseId);
        if (caseForBlock != null) {
          caseForBlock.setName(data[2]);
          caseForBlock.setTypeId(data[0]);
          overriden=true;
        }
      }
      if (caseForBlock == null) {
        caseForBlock=CreateCase(data[2],data[0]);
        caseForBlock.setCaseId(caseId);
        caseForBlock.setDateOpened(modified);
      }
      if (data[1] != null) {
        caseForBlock.setUserId(data[1]);
      }
      create=true;
      String succesfulAction=overriden ? ""String_Node_Str"" : ""String_Node_Str"";
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String key=parser.getName();
        String value=parser.nextText().trim();
        if (key.equals(""String_Node_Str"")) {
          caseForBlock.setTypeId(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setName(value);
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setDateOpened(DateUtils.parseDate(value));
        }
 else         if (key.equals(""String_Node_Str"")) {
          caseForBlock.setUserId(value);
        }
 else {
          caseForBlock.setProperty(key,value);
        }
      }
      update=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      if (caseForBlock == null) {
        throw new InvalidStructureException(""String_Node_Str"" + caseId,parser);
      }
      caseForBlock.setClosed(true);
      commit(caseForBlock);
      close=true;
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String indexName=parser.getName();
        String caseType=parser.getAttributeValue(null,""String_Node_Str"");
        String value=parser.nextText().trim();
        String relationship=parser.getAttributeValue(null,""String_Node_Str"");
        if (relationship == null) {
          relationship=CaseIndex.RELATIONSHIP_CHILD;
        }
        caseForBlock.setIndex(new CaseIndex(indexName,caseType,value,relationship));
      }
    }
 else     if (action.equals(""String_Node_Str"")) {
      if (caseForBlock == null) {
        caseForBlock=retrieve(caseId);
      }
      while (this.nextTagInBlock(""String_Node_Str"")) {
        String attachmentName=parser.getName();
        String src=parser.getAttributeValue(null,""String_Node_Str"");
        String from=parser.getAttributeValue(null,""String_Node_Str"");
        String fileName=parser.getAttributeValue(null,""String_Node_Str"");
        if ((src == null || ""String_Node_Str"".equals(src)) && (from == null || ""String_Node_Str"".equals(from))) {
          this.removeAttachment(caseForBlock,attachmentName);
          caseForBlock.removeAttachment(attachmentName);
          continue;
        }
        String reference=this.processAttachment(src,from,fileName,parser);
        if (reference != null) {
          caseForBlock.updateAttachment(attachmentName,reference);
        }
      }
    }
  }
  if (caseForBlock != null) {
    caseForBlock.setLastModified(modified);
    commit(caseForBlock);
  }
  if (create) {
    tallies[0]++;
  }
 else   if (close) {
    tallies[2]++;
  }
 else   if (update) {
    tallies[1]++;
  }
  return null;
}",0.9902626143405134
144783,"public DataInstance(String instanceid){
  this.instanceid=instanceid;
  referenceCache=new CacheTable<TreeReference,T>();
}","public DataInstance(String instanceid){
  this.instanceid=instanceid;
}",0.7319587628865979
144784,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,id);
  ExtUtil.write(out,title);
  ExtUtil.writeString(out,titleForm);
  ExtUtil.write(out,new ExtWrapList(ArrayUtilities.toVector(details)));
  ExtUtil.write(out,new ExtWrapList(ArrayUtilities.toVector(fields)));
  ExtUtil.write(out,new ExtWrapMap(variables));
  ExtUtil.write(out,new ExtWrapNullable(action));
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,id);
  ExtUtil.write(out,title);
  ExtUtil.write(out,new ExtWrapNullable(titleForm));
  ExtUtil.write(out,new ExtWrapList(ArrayUtilities.toVector(details)));
  ExtUtil.write(out,new ExtWrapList(ArrayUtilities.toVector(fields)));
  ExtUtil.write(out,new ExtWrapMap(variables));
  ExtUtil.write(out,new ExtWrapNullable(action));
}",0.9554753309265944
144785,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  id=ExtUtil.readString(in);
  title=(Text)ExtUtil.read(in,Text.class,pf);
  titleForm=ExtUtil.readString(in);
  Vector<Detail> theDetails=(Vector<Detail>)ExtUtil.read(in,new ExtWrapList(Detail.class),pf);
  details=new Detail[theDetails.size()];
  ArrayUtilities.copyIntoArray(theDetails,details);
  Vector<DetailField> theFields=(Vector<DetailField>)ExtUtil.read(in,new ExtWrapList(DetailField.class),pf);
  fields=new DetailField[theFields.size()];
  ArrayUtilities.copyIntoArray(theFields,fields);
  variables=(OrderedHashtable<String,String>)ExtUtil.read(in,new ExtWrapMap(String.class,String.class,ExtWrapMap.TYPE_SLOW_READ_ONLY));
  action=(Action)ExtUtil.read(in,new ExtWrapNullable(Action.class),pf);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  id=ExtUtil.readString(in);
  title=(Text)ExtUtil.read(in,Text.class,pf);
  titleForm=(String)ExtUtil.read(in,new ExtWrapNullable(String.class));
  Vector<Detail> theDetails=(Vector<Detail>)ExtUtil.read(in,new ExtWrapList(Detail.class),pf);
  details=new Detail[theDetails.size()];
  ArrayUtilities.copyIntoArray(theDetails,details);
  Vector<DetailField> theFields=(Vector<DetailField>)ExtUtil.read(in,new ExtWrapList(DetailField.class),pf);
  fields=new DetailField[theFields.size()];
  ArrayUtilities.copyIntoArray(theFields,fields);
  variables=(OrderedHashtable<String,String>)ExtUtil.read(in,new ExtWrapMap(String.class,String.class,ExtWrapMap.TYPE_SLOW_READ_ONLY));
  action=(Action)ExtUtil.read(in,new ExtWrapNullable(Action.class),pf);
}",0.9750297265160524
144786,"public TreeElement getChild(String name,int multiplicity){
  if (this.children == null) {
    return null;
  }
  if (name.equals(TreeReference.NAME_WILDCARD)) {
    if (multiplicity == TreeReference.INDEX_TEMPLATE || this.children.size() < multiplicity + 1) {
      return null;
    }
    return (TreeElement)this.children.elementAt(multiplicity);
  }
 else {
    for (int i=0; i < this.children.size(); i++) {
      TreeElement child=(TreeElement)this.children.elementAt(i);
      if ((name.hashCode() == child.getName().hashCode()) || name.equals(child.getName()) && child.getMult() == multiplicity) {
        return child;
      }
    }
  }
  return null;
}","public TreeElement getChild(String name,int multiplicity){
  if (this.children == null) {
    return null;
  }
  if (name.equals(TreeReference.NAME_WILDCARD)) {
    if (multiplicity == TreeReference.INDEX_TEMPLATE || this.children.size() < multiplicity + 1) {
      return null;
    }
    return (TreeElement)this.children.elementAt(multiplicity);
  }
 else {
    for (int i=0; i < this.children.size(); i++) {
      TreeElement child=(TreeElement)this.children.elementAt(i);
      if (((name.hashCode() == child.getName().hashCode()) || name.equals(child.getName())) && child.getMult() == multiplicity) {
        return child;
      }
    }
  }
  return null;
}",0.9984871406959152
144787,"public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  Text background=new Text();
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  String titleForm=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  Action action=null;
  Vector<Detail> subdetails=new Vector<Detail>();
  Vector<DetailField> fields=new Vector<DetailField>();
  OrderedHashtable<String,String> variables=new OrderedHashtable<String,String>();
  while (nextTagInBlock(""String_Node_Str"")) {
    if (""String_Node_Str"".equals(parser.getName().toLowerCase())) {
      while (nextTagInBlock(""String_Node_Str"")) {
        String function=parser.getAttributeValue(null,""String_Node_Str"");
        if (function == null) {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
        try {
          XPathParseTool.parseXPath(function);
        }
 catch (        XPathSyntaxException e) {
          e.printStackTrace();
          throw new InvalidStructureException(""String_Node_Str"" + function + ""String_Node_Str""+ e.getMessage(),parser);
        }
        variables.put(parser.getName(),function);
      }
      continue;
    }
    if (ActionParser.NAME_ACTION.equalsIgnoreCase(parser.getName())) {
      action=new ActionParser(parser).parse();
      continue;
    }
    DetailField.Builder builder=new DetailField().new Builder();
    if (parser.getName().equals(""String_Node_Str"")) {
      subdetails.addElement((new DetailParser(parser)).parse());
    }
 else {
      checkNode(""String_Node_Str"");
      String sortDefault=parser.getAttributeValue(null,""String_Node_Str"");
      if (sortDefault != null && sortDefault.equals(""String_Node_Str"")) {
        builder.setSortOrder(1);
      }
      String relevancy=parser.getAttributeValue(null,""String_Node_Str"");
      if (relevancy != null) {
        try {
          XPathParseTool.parseXPath(relevancy);
          builder.setRelevancy(relevancy);
        }
 catch (        XPathSyntaxException e) {
          e.printStackTrace();
          throw new InvalidStructureException(""String_Node_Str"" + relevancy + ""String_Node_Str"",parser);
        }
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          StyleParser styleParser=new StyleParser(builder,parser);
          styleParser.parse();
          GridParser gridParser=new GridParser(builder,parser);
          gridParser.parse();
          parser.nextTag();
          parser.nextTag();
        }
        checkNode(""String_Node_Str"");
        builder.setHeaderHint(getWidth());
        String form=parser.getAttributeValue(null,""String_Node_Str"");
        builder.setHeaderForm(form == null ? ""String_Node_Str"" : form);
        parser.nextTag();
        checkNode(""String_Node_Str"");
        Text header=new TextParser(parser).parse();
        builder.setHeader(header);
      }
 else {
        throw new InvalidStructureException(""String_Node_Str"",parser);
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        checkNode(""String_Node_Str"");
        builder.setTemplateHint(getWidth());
        String form=parser.getAttributeValue(null,""String_Node_Str"");
        if (form == null) {
          form=""String_Node_Str"";
        }
        builder.setTemplateForm(form);
        parser.nextTag();
        DetailTemplate template;
        if (form.equals(""String_Node_Str"")) {
          template=new GraphParser(parser).parse();
        }
 else {
          checkNode(""String_Node_Str"");
          template=new TextParser(parser).parse();
        }
        builder.setTemplate(template);
      }
 else {
        throw new InvalidStructureException(""String_Node_Str"",parser);
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        checkNode(new String[]{""String_Node_Str"",""String_Node_Str""});
        String name=parser.getName().toLowerCase();
        if (name.equals(""String_Node_Str"")) {
          String order=parser.getAttributeValue(null,""String_Node_Str"");
          if (order != null && order != ""String_Node_Str"") {
            try {
              builder.setSortOrder(Integer.parseInt(order));
            }
 catch (            NumberFormatException nfe) {
            }
          }
          String direction=parser.getAttributeValue(null,""String_Node_Str"");
          if (""String_Node_Str"".equals(direction)) {
            builder.setSortDirection(DetailField.DIRECTION_ASCENDING);
          }
 else           if (""String_Node_Str"".equals(direction)) {
            builder.setSortDirection(DetailField.DIRECTION_DESCENDING);
          }
 else {
          }
          String type=parser.getAttributeValue(null,""String_Node_Str"");
          if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_INTEGER);
          }
 else           if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_DECIMAL);
          }
 else           if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_TEXT);
          }
 else {
          }
          if (nextTagInBlock(""String_Node_Str"")) {
            checkNode(""String_Node_Str"");
            Text sort=new TextParser(parser).parse();
            builder.setSort(sort);
          }
        }
 else         if (name.equals(""String_Node_Str"")) {
          if (nextTagInBlock(""String_Node_Str"")) {
            checkNode(""String_Node_Str"");
            background=new TextParser(parser).parse();
            builder.setBackground(background);
          }
        }
      }
      fields.addElement(builder.build());
    }
  }
  Detail d=new Detail(id,title,titleForm,subdetails,fields,variables,action);
  return d;
}","public Detail parse() throws InvalidStructureException, IOException, XmlPullParserException {
  checkNode(""String_Node_Str"");
  String id=parser.getAttributeValue(null,""String_Node_Str"");
  Text background=new Text();
  getNextTagInBlock(""String_Node_Str"");
  checkNode(""String_Node_Str"");
  String titleForm=parser.getAttributeValue(null,""String_Node_Str"");
  getNextTagInBlock(""String_Node_Str"");
  Text title=new TextParser(parser).parse();
  Action action=null;
  Vector<Detail> subdetails=new Vector<Detail>();
  Vector<DetailField> fields=new Vector<DetailField>();
  OrderedHashtable<String,String> variables=new OrderedHashtable<String,String>();
  while (nextTagInBlock(""String_Node_Str"")) {
    if (""String_Node_Str"".equals(parser.getName().toLowerCase())) {
      while (nextTagInBlock(""String_Node_Str"")) {
        String function=parser.getAttributeValue(null,""String_Node_Str"");
        if (function == null) {
          throw new InvalidStructureException(""String_Node_Str"" + parser.getName(),parser);
        }
        try {
          XPathParseTool.parseXPath(function);
        }
 catch (        XPathSyntaxException e) {
          e.printStackTrace();
          throw new InvalidStructureException(""String_Node_Str"" + function + ""String_Node_Str""+ e.getMessage(),parser);
        }
        variables.put(parser.getName(),function);
      }
      continue;
    }
    if (ActionParser.NAME_ACTION.equalsIgnoreCase(parser.getName())) {
      action=new ActionParser(parser).parse();
      continue;
    }
    DetailField.Builder builder=new DetailField().new Builder();
    if (parser.getName().equals(""String_Node_Str"")) {
      subdetails.addElement((new DetailParser(parser)).parse());
    }
 else {
      checkNode(""String_Node_Str"");
      String sortDefault=parser.getAttributeValue(null,""String_Node_Str"");
      if (sortDefault != null && sortDefault.equals(""String_Node_Str"")) {
        builder.setSortOrder(1);
      }
      String relevancy=parser.getAttributeValue(null,""String_Node_Str"");
      if (relevancy != null) {
        try {
          XPathParseTool.parseXPath(relevancy);
          builder.setRelevancy(relevancy);
        }
 catch (        XPathSyntaxException e) {
          e.printStackTrace();
          throw new InvalidStructureException(""String_Node_Str"" + relevancy + ""String_Node_Str"",parser);
        }
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          StyleParser styleParser=new StyleParser(builder,parser);
          styleParser.parse();
          GridParser gridParser=new GridParser(builder,parser);
          gridParser.parse();
          parser.nextTag();
          parser.nextTag();
        }
        checkNode(""String_Node_Str"");
        builder.setHeaderHint(getWidth());
        String form=parser.getAttributeValue(null,""String_Node_Str"");
        builder.setHeaderForm(form == null ? ""String_Node_Str"" : form);
        parser.nextTag();
        checkNode(""String_Node_Str"");
        Text header=new TextParser(parser).parse();
        builder.setHeader(header);
      }
 else {
        throw new InvalidStructureException(""String_Node_Str"",parser);
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        checkNode(""String_Node_Str"");
        builder.setTemplateHint(getWidth());
        String form=parser.getAttributeValue(null,""String_Node_Str"");
        if (form == null) {
          form=""String_Node_Str"";
        }
        builder.setTemplateForm(form);
        parser.nextTag();
        DetailTemplate template;
        if (form.equals(""String_Node_Str"")) {
          template=new GraphParser(parser).parse();
        }
 else {
          checkNode(""String_Node_Str"");
          try {
            template=new TextParser(parser).parse();
            builder.setTemplate(template);
          }
 catch (          InvalidStructureException ise) {
            throw new InvalidStructureException(""String_Node_Str"" + id + ""String_Node_Str""+ ise.getMessage(),parser);
          }
        }
      }
 else {
        throw new InvalidStructureException(""String_Node_Str"",parser);
      }
      if (nextTagInBlock(""String_Node_Str"")) {
        checkNode(new String[]{""String_Node_Str"",""String_Node_Str""});
        String name=parser.getName().toLowerCase();
        if (name.equals(""String_Node_Str"")) {
          String order=parser.getAttributeValue(null,""String_Node_Str"");
          if (order != null && order != ""String_Node_Str"") {
            try {
              builder.setSortOrder(Integer.parseInt(order));
            }
 catch (            NumberFormatException nfe) {
            }
          }
          String direction=parser.getAttributeValue(null,""String_Node_Str"");
          if (""String_Node_Str"".equals(direction)) {
            builder.setSortDirection(DetailField.DIRECTION_ASCENDING);
          }
 else           if (""String_Node_Str"".equals(direction)) {
            builder.setSortDirection(DetailField.DIRECTION_DESCENDING);
          }
 else {
          }
          String type=parser.getAttributeValue(null,""String_Node_Str"");
          if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_INTEGER);
          }
 else           if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_DECIMAL);
          }
 else           if (""String_Node_Str"".equals(type)) {
            builder.setSortType(Constants.DATATYPE_TEXT);
          }
 else {
          }
          if (nextTagInBlock(""String_Node_Str"")) {
            checkNode(""String_Node_Str"");
            Text sort=new TextParser(parser).parse();
            builder.setSort(sort);
          }
        }
 else         if (name.equals(""String_Node_Str"")) {
          if (nextTagInBlock(""String_Node_Str"")) {
            checkNode(""String_Node_Str"");
            background=new TextParser(parser).parse();
            builder.setBackground(background);
          }
        }
      }
      fields.addElement(builder.build());
    }
  }
  Detail d=new Detail(id,title,titleForm,subdetails,fields,variables,action);
  return d;
}",0.9759787216357744
144788,"private void saveInstanceNode(Element instance){
  Element instanceNode=null;
  String instanceId=instance.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < instance.getChildCount(); i++) {
    if (instance.getType(i) == Node.ELEMENT) {
      if (instanceNode != null) {
        throw new XFormParseException(""String_Node_Str"",instance);
      }
 else {
        instanceNode=instance.getElement(i);
      }
    }
  }
  if (instanceNode == null) {
    instanceNode=instance;
  }
  if (mainInstanceNode == null) {
    mainInstanceNode=instanceNode;
  }
  instanceNodes.addElement(instanceNode);
  instanceNodeIdStrs.addElement(instanceId);
}","private void saveInstanceNode(Element instance){
  Element instanceNode=null;
  String instanceId=instance.getAttributeValue(""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < instance.getChildCount(); i++) {
    if (instance.getType(i) == Node.ELEMENT) {
      if (instanceNode != null) {
        throw new XFormParseException(""String_Node_Str"",instance);
      }
 else {
        instanceNode=instance.getElement(i);
      }
    }
  }
  if (instanceNode == null) {
    instanceNode=instance;
  }
  if (mainInstanceNode == null) {
    mainInstanceNode=instanceNode;
  }
 else   if (instanceId == null) {
    throw new XFormParseException(""String_Node_Str"",instance);
  }
  instanceNodes.addElement(instanceNode);
  instanceNodeIdStrs.addElement(instanceId);
}",0.9294199860237596
144789,"private void parseDoc(){
  _f=new FormDef();
  initState();
  defaultNamespace=_xmldoc.getRootElement().getNamespaceUri(null);
  parseElement(_xmldoc.getRootElement(),_f,topLevelHandlers);
  collapseRepeatGroups(_f);
  if (instanceNodes.size() > 1) {
    for (int i=1; i < instanceNodes.size(); i++) {
      Element e=instanceNodes.elementAt(i);
      String srcLocation=e.getAttributeValue(null,""String_Node_Str"");
      DataInstance di;
      if (e.getChildCount() == 0 && srcLocation != null) {
        di=new ExternalDataInstance(srcLocation,instanceNodeIdStrs.elementAt(i));
      }
 else {
        FormInstance fi=parseInstance(e,false);
        loadInstanceData(e,fi.getRoot(),_f);
        di=fi;
      }
      _f.addNonMainInstance(di);
    }
  }
  if (mainInstanceNode != null) {
    FormInstance fi=parseInstance(mainInstanceNode,true);
    addMainInstanceToFormDef(mainInstanceNode,fi);
    _f.setInstance(fi);
  }
}","private void parseDoc(){
  _f=new FormDef();
  initState();
  defaultNamespace=_xmldoc.getRootElement().getNamespaceUri(null);
  parseElement(_xmldoc.getRootElement(),_f,topLevelHandlers);
  collapseRepeatGroups(_f);
  if (instanceNodes.size() > 1) {
    for (int i=1; i < instanceNodes.size(); i++) {
      Element e=instanceNodes.elementAt(i);
      String srcLocation=e.getAttributeValue(null,""String_Node_Str"");
      String instanceid=instanceNodeIdStrs.elementAt(i);
      DataInstance di;
      if (srcLocation != null) {
        if (e.getChildCount() > 0) {
          for (int k=0; k < e.getChildCount(); ++k) {
switch (e.getType(k)) {
case Element.TEXT:
              if (""String_Node_Str"".equals(e.getText(i).trim())) {
                continue;
              }
case Element.IGNORABLE_WHITESPACE:
            continue;
case Element.ELEMENT:
          throw new XFormParseException(""String_Node_Str"" + instanceid + ""String_Node_Str"",e);
      }
    }
  }
  di=new ExternalDataInstance(srcLocation,instanceid);
}
 else {
  FormInstance fi=parseInstance(e,false);
  loadInstanceData(e,fi.getRoot(),_f);
  di=fi;
}
_f.addNonMainInstance(di);
}
}
if (mainInstanceNode != null) {
FormInstance fi=parseInstance(mainInstanceNode,true);
addMainInstanceToFormDef(mainInstanceNode,fi);
_f.setInstance(fi);
}
}",0.4760626398210291
144790,"public SendNowSendLaterForm(CommandListener activity,ItemStateListener itemListener,boolean cacheAutomatically){
  super(cacheAutomatically ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str""));
  setCommandListener(activity);
  setItemStateListener(itemListener);
  if (!cacheAutomatically) {
    this.cg=new ChoiceGroup(Localization.get(""String_Node_Str""),Choice.EXCLUSIVE);
    this.cg.append(Localization.get(""String_Node_Str""),null);
    this.cg.append(Localization.get(""String_Node_Str""),null);
    append(this.cg);
  }
 else {
    StringItem message=new StringItem(null,Localization.get(""String_Node_Str""));
    this.append(message);
    this.addCommand(commandOk);
  }
  append(new Spacer(80,0));
}","public SendNowSendLaterForm(CommandListener activity,ItemStateListener itemListener,boolean cacheAutomatically){
  super(cacheAutomatically ? Localization.get(""String_Node_Str"") : Localization.get(""String_Node_Str""));
  setCommandListener(activity);
  if (!cacheAutomatically) {
    this.cg=new ChoiceGroup(Localization.get(""String_Node_Str""),Choice.EXCLUSIVE);
    setItemStateListener(itemListener);
    this.cg.append(Localization.get(""String_Node_Str""),null);
    this.cg.append(Localization.get(""String_Node_Str""),null);
    append(this.cg);
  }
 else {
    StringItem message=new StringItem(null,Localization.get(""String_Node_Str""));
    this.append(message);
    this.addCommand(commandOk);
  }
  append(new Spacer(80,0));
}",0.9465753424657536
144791,"public boolean initialize(CommCareInstance instance) throws ResourceInitializationException {
  if (cache == null) {
    Localization.registerLanguageReference(locale,localReference);
  }
 else {
    Localization.getGlobalLocalizerAdvanced().registerLocaleResource(locale,new TableLocaleSource(cache));
  }
  return true;
}","public boolean initialize(CommCareInstance instance) throws ResourceInitializationException {
  if (cache == null) {
    Localization.registerLanguageReference(locale,localReference);
  }
 else {
    Localization.getGlobalLocalizerAdvanced().addAvailableLocale(locale);
    Localization.getGlobalLocalizerAdvanced().registerLocaleResource(locale,new TableLocaleSource(cache));
  }
  return true;
}",0.8972222222222223
144792,"private static int extractNextIndex(String text,String[] args){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"");
  if (start != -1 && end != -1) {
    String val=text.substring(start + ""String_Node_Str"".length(),end);
    try {
      int index=Integer.parseInt(val);
      if (index >= 0 && index < args.length) {
        return index;
      }
    }
 catch (    NumberFormatException nfe) {
      return -1;
    }
  }
  return -1;
}","private static int extractNextIndex(String text,String[] args){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"",start);
  if (start != -1 && end != -1) {
    String val=text.substring(start + ""String_Node_Str"".length(),end);
    try {
      int index=Integer.parseInt(val);
      if (index >= 0 && index < args.length) {
        return index;
      }
    }
 catch (    NumberFormatException nfe) {
      return -1;
    }
  }
  return -1;
}",0.9936708860759492
144793,"private static String[] replaceFirstValue(String text,String value){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"");
  return new String[]{text.substring(0,start) + value,text.substring(end + 1,text.length())};
}","private static String[] replaceFirstValue(String text,String value){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"",start);
  return new String[]{text.substring(0,start) + value,text.substring(end + 1,text.length())};
}",0.9882352941176472
144794,"public void run(){
  holder[0]=Localizer.processArguments(holder[0],res);
}","public void run(){
  holder[0]=Localizer.processArguments(""String_Node_Str"",res);
}",0.8860759493670886
144795,"public void testLinearSub(){
  final String F=""String_Node_Str"";
  final String S=""String_Node_Str"";
  final String C=""String_Node_Str"";
  final String D=""String_Node_Str"";
  final String[] res=new String[]{""String_Node_Str"",""String_Node_Str""};
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F,S}),F + ""String_Node_Str"" + S);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F + ""String_Node_Str"");
  final String[] holder=new String[1];
  runAsync(new Runnable(){
    public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",new String[]{C});
    }
  }
);
  assertEquals(holder[0],C);
  runAsync(new Runnable(){
    public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",new String[]{D});
    }
  }
);
  assertEquals(holder[0],D);
  runAsync(new Runnable(){
    public void run(){
      holder[0]=Localizer.processArguments(holder[0],res);
    }
  }
);
  assertEquals(holder[0],res[1] + res[0]);
}","public void testLinearSub(){
  final String F=""String_Node_Str"";
  final String S=""String_Node_Str"";
  final String C=""String_Node_Str"";
  final String D=""String_Node_Str"";
  final String[] res=new String[]{""String_Node_Str"",""String_Node_Str""};
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F,S}),F + ""String_Node_Str"" + S);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F + ""String_Node_Str"");
  final String[] holder=new String[1];
  runAsync(new Runnable(){
    public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",new String[]{C});
    }
  }
);
  assertEquals(holder[0],C);
  runAsync(new Runnable(){
    public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",new String[]{D});
    }
  }
);
  assertEquals(holder[0],D);
  runAsync(new Runnable(){
    public void run(){
      holder[0]=Localizer.processArguments(holder[0],res);
    }
  }
);
  assertEquals(holder[0],res[1] + res[0]);
  runAsync(new Runnable(){
    public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",res);
    }
  }
);
  assertEquals(holder[0],""String_Node_Str"" + res[1]);
}",0.928129829984544
144796,"protected void checkNode(String[] names) throws InvalidStructureException {
  boolean checksOut=false;
  for (  String name : names) {
    if (parser.getName().toLowerCase().equals(name)) {
      checksOut=true;
    }
  }
  if (!checksOut) {
    int eventType=-1;
    try {
      eventType=parser.getEventType();
    }
 catch (    XmlPullParserException xppe) {
    }
    String oneOf=null;
    if (names.length == 1) {
      oneOf=""String_Node_Str"" + names[0] + ""String_Node_Str"";
    }
 else {
      oneOf=""String_Node_Str"";
      for (      String name : names) {
        oneOf+=""String_Node_Str"" + name + ""String_Node_Str"";
      }
      oneOf+=""String_Node_Str"";
    }
    throw new InvalidStructureException(""String_Node_Str"" + oneOf + (eventType == KXmlParser.END_TAG ? ""String_Node_Str"" : ""String_Node_Str"")+ parser.getName()+ ""String_Node_Str"",parser);
  }
}","protected void checkNode(String[] names) throws InvalidStructureException {
  boolean checksOut=false;
  if (parser.getName() == null) {
  }
 else {
    for (    String name : names) {
      if (parser.getName().toLowerCase().equals(name)) {
        checksOut=true;
      }
    }
  }
  if (!checksOut) {
    int eventType=-1;
    try {
      eventType=parser.getEventType();
    }
 catch (    XmlPullParserException xppe) {
    }
    String oneOf=null;
    if (names.length == 1) {
      oneOf=""String_Node_Str"" + names[0] + ""String_Node_Str"";
    }
 else {
      oneOf=""String_Node_Str"";
      for (      String name : names) {
        oneOf+=""String_Node_Str"" + name + ""String_Node_Str"";
      }
      oneOf+=""String_Node_Str"";
    }
    String foundInstead=""String_Node_Str"";
    if (eventType == KXmlParser.END_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.START_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.TEXT) {
      foundInstead=""String_Node_Str"" + parser.getText() + ""String_Node_Str"";
    }
 else {
      foundInstead=""String_Node_Str"";
    }
    throw new InvalidStructureException(""String_Node_Str"" + oneOf + foundInstead+ ""String_Node_Str"",parser);
  }
}",0.6905951840072694
144797,"public Stock[] parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(new String[]{""String_Node_Str"",""String_Node_Str""});
  String name=parser.getName().toLowerCase();
  Vector<Stock> toWrite=new Vector<Stock>();
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"" + name + ""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  if (name.equals(""String_Node_Str"")) {
    String entityId=parser.getAttributeValue(null,""String_Node_Str"");
    if (entityId == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    Stock s=retrieve(entityId);
    if (s == null) {
      s=new Stock(entityId,new Hashtable<String,Integer>());
    }
    while (this.nextTagInBlock(""String_Node_Str"")) {
      this.checkNode(""String_Node_Str"");
      String id=parser.getAttributeValue(null,""String_Node_Str"");
      String quantityString=parser.getAttributeValue(null,""String_Node_Str"");
      if (id == null || id == ""String_Node_Str"") {
        throw new InvalidStructureException(""String_Node_Str"",this.parser);
      }
      int quantity=this.parseInt(quantityString);
      s.setProductValue(id,quantity);
    }
    toWrite.addElement(s);
  }
 else   if (name.equals(""String_Node_Str"")) {
    String source=parser.getAttributeValue(null,""String_Node_Str"");
    if (source == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    String destination=parser.getAttributeValue(null,""String_Node_Str"");
    if (destination == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    Stock sourceStock=retrieve(source);
    if (sourceStock == null) {
      sourceStock=new Stock(source,new Hashtable<String,Integer>());
    }
    Stock destinationStock=retrieve(destination);
    if (destinationStock == null) {
      destinationStock=new Stock(source,new Hashtable<String,Integer>());
    }
    while (this.nextTagInBlock(""String_Node_Str"")) {
      this.checkNode(""String_Node_Str"");
      String productId=parser.getAttributeValue(null,""String_Node_Str"");
      String quantityString=parser.getAttributeValue(null,""String_Node_Str"");
      if (productId == null || productId == ""String_Node_Str"") {
        throw new InvalidStructureException(""String_Node_Str"",this.parser);
      }
      int quantity=this.parseInt(quantityString);
      sourceStock.setProductValue(productId,sourceStock.getProductValue(productId) - quantity);
      destinationStock.setProductValue(productId,destinationStock.getProductValue(productId) - quantity);
    }
    toWrite.addElement(sourceStock);
    toWrite.addElement(destinationStock);
  }
  Stock[] tw=new Stock[toWrite.size()];
  int i=0;
  for (  Stock s : toWrite) {
    tw[i]=s;
    i++;
  }
  commit(tw);
  return null;
}","public Stock[] parse() throws InvalidStructureException, IOException, XmlPullParserException {
  this.checkNode(new String[]{""String_Node_Str"",""String_Node_Str""});
  String name=parser.getName().toLowerCase();
  Vector<Stock> toWrite=new Vector<Stock>();
  String dateModified=parser.getAttributeValue(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new InvalidStructureException(""String_Node_Str"" + name + ""String_Node_Str"",this.parser);
  }
  Date modified=DateUtils.parseDateTime(dateModified);
  if (name.equals(""String_Node_Str"")) {
    String entityId=parser.getAttributeValue(null,""String_Node_Str"");
    if (entityId == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    Stock s=retrieve(entityId);
    if (s == null) {
      s=new Stock(entityId,new Hashtable<String,Integer>());
    }
    while (this.nextTagInBlock(""String_Node_Str"")) {
      this.checkNode(""String_Node_Str"");
      String id=parser.getAttributeValue(null,""String_Node_Str"");
      String quantityString=parser.getAttributeValue(null,""String_Node_Str"");
      if (id == null || id == ""String_Node_Str"") {
        throw new InvalidStructureException(""String_Node_Str"",this.parser);
      }
      int quantity=this.parseInt(quantityString);
      s.setProductValue(id,quantity);
    }
    toWrite.addElement(s);
  }
 else   if (name.equals(""String_Node_Str"")) {
    String source=parser.getAttributeValue(null,""String_Node_Str"");
    if (source == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    String destination=parser.getAttributeValue(null,""String_Node_Str"");
    if (destination == null) {
      throw new InvalidStructureException(""String_Node_Str"",this.parser);
    }
    Stock sourceStock=retrieve(source);
    if (sourceStock == null) {
      sourceStock=new Stock(source,new Hashtable<String,Integer>());
    }
    Stock destinationStock=retrieve(destination);
    if (destinationStock == null) {
      destinationStock=new Stock(destination,new Hashtable<String,Integer>());
    }
    while (this.nextTagInBlock(""String_Node_Str"")) {
      this.checkNode(""String_Node_Str"");
      String productId=parser.getAttributeValue(null,""String_Node_Str"");
      String quantityString=parser.getAttributeValue(null,""String_Node_Str"");
      if (productId == null || productId == ""String_Node_Str"") {
        throw new InvalidStructureException(""String_Node_Str"",this.parser);
      }
      int quantity=this.parseInt(quantityString);
      sourceStock.setProductValue(productId,sourceStock.getProductValue(productId) - quantity);
      destinationStock.setProductValue(productId,destinationStock.getProductValue(productId) + quantity);
    }
    toWrite.addElement(sourceStock);
    toWrite.addElement(destinationStock);
  }
  Stock[] tw=new Stock[toWrite.size()];
  int i=0;
  for (  Stock s : toWrite) {
    tw[i]=s;
    i++;
  }
  commit(tw);
  return tw;
}",0.9957490222751232
144798,"private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Stock s=parent.storage.read(recordId);
    entityId=s.getEntiyId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",s.getEntiyId());
    TreeElement product;
    String[] productList=s.getProductList();
    for (int i=0; i < productList.length; ++i) {
      product=new TreeElement(""String_Node_Str"");
      product.setAttribute(null,""String_Node_Str"",productList[i]);
      product.setValue(new IntegerData(s.getProductValue(productList[i])));
      cacheBuilder.addChild(product);
    }
    cacheBuilder.setParent(this.parent);
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}","private TreeElement cache(){
  if (recordId == TreeReference.INDEX_TEMPLATE) {
    return empty;
  }
synchronized (parent.treeCache) {
    TreeElement element=parent.treeCache.retrieve(recordId);
    if (element != null) {
      return element;
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"");
    Stock s=parent.storage.read(recordId);
    entityId=s.getEntiyId();
    cacheBuilder=new TreeElement(""String_Node_Str"");
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"",s.getEntiyId());
    TreeElement product;
    String[] productList=s.getProductList();
    for (int i=0; i < productList.length; ++i) {
      product=new TreeElement(""String_Node_Str"",i);
      product.setAttribute(null,""String_Node_Str"",productList[i]);
      product.setValue(new IntegerData(s.getProductValue(productList[i])));
      cacheBuilder.addChild(product);
    }
    cacheBuilder.setParent(this.parent);
    parent.treeCache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}",0.9990291262135922
144799,"public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 2;
    }
    public int getMinorVersion(){
      return 9;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(""String_Node_Str"",FormInstance.class);
}","public CommCareConfigEngine(OutputStream output){
  this.output=output;
  this.print=new PrintStream(output);
  suites=new Vector<Suite>();
  this.instance=new CommCareInstance(){
    public void registerSuite(    Suite s){
      CommCareConfigEngine.this.suites.add(s);
    }
    public void setProfile(    Profile p){
      CommCareConfigEngine.this.profile=p;
    }
    public int getMajorVersion(){
      return 2;
    }
    public int getMinorVersion(){
      return 10;
    }
  }
;
  setRoots();
  table=ResourceTable.RetrieveTable(new DummyIndexedStorageUtility());
  StorageManager.setStorageFactory(new IStorageFactory(){
    public IStorageUtility newStorage(    String name,    Class type){
      return new DummyIndexedStorageUtility();
    }
  }
);
  StorageManager.registerStorage(Profile.STORAGE_KEY,Profile.class);
  StorageManager.registerStorage(Suite.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(FormDef.STORAGE_KEY,Suite.class);
  StorageManager.registerStorage(""String_Node_Str"",FormInstance.class);
}",0.9985514244326412
144800,"public int getMinorVersion(){
  return 9;
}","public int getMinorVersion(){
  return 10;
}",0.9655172413793104
144801,"public void serialize(DataInstance instance,TreeReference base) throws IOException {
  AbstractTreeElement root;
  if (base == null) {
    root=instance.getRoot();
  }
 else {
    root=instance.resolveReference(base);
  }
  serializer.startTag(root.getNamespace(),root.getName());
  for (int i=0; i < root.getNumChildren(); i++) {
    AbstractTreeElement childAt=root.getChildAt(i);
    serializeNode(childAt);
  }
  serializer.endTag(root.getNamespace(),root.getName());
}","public void serialize(DataInstance instance,TreeReference base) throws IOException {
  AbstractTreeElement root;
  if (base == null) {
    root=instance.getRoot();
  }
 else {
    root=instance.resolveReference(base);
  }
  serializer.startTag(root.getNamespace(),root.getName());
  for (int i=0; i < root.getNumChildren(); i++) {
    AbstractTreeElement childAt=root.getChildAt(i);
    serializeNode(childAt);
  }
  serializer.endTag(root.getNamespace(),root.getName());
  serializer.flush();
}",0.9772727272727272
144802,"/** 
 * Identify the itemset in the backend model, and create a set of SelectChoice  objects at the current question reference based on the data in the model. Will modify the itemset binding to contain the relevant choices 
 * @param itemset The binding for an itemset, where the choices will be populated
 * @param curQRef A reference to the current question's element, which will beused to determine the values to be chosen from.
 */
public void populateDynamicChoices(ItemsetBinding itemset,TreeReference curQRef){
  Vector<SelectChoice> choices=new Vector<SelectChoice>();
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(this.getMainInstance(),new EvaluationContext(exprEvalContext,itemset.contextRef.contextualize(curQRef)));
  DataInstance fi=null;
  if (itemset.nodesetRef.getInstanceName() != null) {
    fi=getNonMainInstance(itemset.nodesetRef.getInstanceName());
    if (fi == null) {
      System.out.println(""String_Node_Str"" + itemset.nodesetRef.getInstanceName() + ""String_Node_Str"");
    }
  }
 else {
    fi=getMainInstance();
  }
  for (int i=0; i < matches.size(); i++) {
    TreeReference item=matches.elementAt(i);
    String label=itemset.labelExpr.evalReadable(fi,new EvaluationContext(exprEvalContext,item));
    String value=null;
    TreeElement copyNode=null;
    if (itemset.copyMode) {
      copyNode=this.getMainInstance().resolveReference(itemset.copyRef.contextualize(item));
    }
    if (itemset.valueRef != null) {
      value=itemset.valueExpr.evalReadable(fi,new EvaluationContext(exprEvalContext,item));
    }
    SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + i,itemset.labelIsItext);
    choice.setIndex(i);
    if (itemset.copyMode)     choice.copyNode=copyNode;
    choices.addElement(choice);
  }
  if (choices.size() == 0) {
    System.out.println(""String_Node_Str"" + itemset.nodesetRef + ""String_Node_Str"");
  }
  itemset.setChoices(choices,this.getLocalizer());
}","/** 
 * Identify the itemset in the backend model, and create a set of SelectChoice  objects at the current question reference based on the data in the model. Will modify the itemset binding to contain the relevant choices 
 * @param itemset The binding for an itemset, where the choices will be populated
 * @param curQRef A reference to the current question's element, which will beused to determine the values to be chosen from.
 */
public void populateDynamicChoices(ItemsetBinding itemset,TreeReference curQRef){
  Vector<SelectChoice> choices=new Vector<SelectChoice>();
  Vector<TreeReference> matches=itemset.nodesetExpr.evalNodeset(this.getMainInstance(),new EvaluationContext(exprEvalContext,itemset.contextRef.contextualize(curQRef)));
  DataInstance fi=null;
  if (itemset.nodesetRef.getInstanceName() != null) {
    fi=getNonMainInstance(itemset.nodesetRef.getInstanceName());
    if (fi == null) {
      System.out.println(""String_Node_Str"" + itemset.nodesetRef.getInstanceName() + ""String_Node_Str"");
    }
  }
 else {
    fi=getMainInstance();
  }
  if (matches == null) {
    throw new XPathException(""String_Node_Str"" + itemset.nodesetRef.getInstanceName());
  }
  for (int i=0; i < matches.size(); i++) {
    TreeReference item=matches.elementAt(i);
    String label=itemset.labelExpr.evalReadable(fi,new EvaluationContext(exprEvalContext,item));
    String value=null;
    TreeElement copyNode=null;
    if (itemset.copyMode) {
      copyNode=this.getMainInstance().resolveReference(itemset.copyRef.contextualize(item));
    }
    if (itemset.valueRef != null) {
      value=itemset.valueExpr.evalReadable(fi,new EvaluationContext(exprEvalContext,item));
    }
    SelectChoice choice=new SelectChoice(label,value != null ? value : ""String_Node_Str"" + i,itemset.labelIsItext);
    choice.setIndex(i);
    if (itemset.copyMode)     choice.copyNode=copyNode;
    choices.addElement(choice);
  }
  if (choices.size() == 0) {
    System.out.println(""String_Node_Str"" + itemset.nodesetRef + ""String_Node_Str"");
  }
  itemset.setChoices(choices,this.getLocalizer());
}",0.625648628613788
144803,"public String entityType(){
  return shortDetail.getTitle().evaluate(context);
}","public String entityType(){
  return Localizer.clearArguments(shortDetail.getTitle().evaluate(context));
}",0.8602150537634409
144804,"public static String processArguments(String text,String[] args){
  String working=text;
  int currentArg=0;
  while (working.indexOf(""String_Node_Str"") != -1 && args.length > currentArg) {
    int index=extractNextIndex(working,args);
    if (index == -1) {
      index=currentArg;
      currentArg++;
    }
    String value=args[index];
    working=replaceFirstValue(working,value);
  }
  return working;
}","public static String processArguments(String text,String[] args,int currentArg){
  String working=text;
  if (working.indexOf(""String_Node_Str"") != -1 && args.length > currentArg) {
    int index=extractNextIndex(working,args);
    if (index == -1) {
      index=currentArg;
      currentArg++;
    }
    String value=args[index];
    String[] replaced=replaceFirstValue(working,value);
    return replaced[0] + processArguments(replaced[1],args,currentArg);
  }
 else {
    return working;
  }
}",0.7522123893805309
144805,"private static String replaceFirstValue(String text,String value){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"");
  return text.substring(0,start) + value + text.substring(end + 1,text.length());
}","private static String[] replaceFirstValue(String text,String value){
  int start=text.indexOf(""String_Node_Str"");
  int end=text.indexOf(""String_Node_Str"");
  return new String[]{text.substring(0,start) + value,text.substring(end + 1,text.length())};
}",0.8857142857142857
144806,"public void run(TestCase tc){
  ((LocalizerTest)tc).testMaster(testID);
}","public void run(){
  holder[0]=Localizer.processArguments(holder[0],res);
}",0.527027027027027
144807,"public void testLinearSub(){
  final String F=""String_Node_Str"";
  final String S=""String_Node_Str"";
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F,S}),F + ""String_Node_Str"" + S);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F + ""String_Node_Str"");
}","public void testLinearSub(){
  final String F=""String_Node_Str"";
  final String S=""String_Node_Str"";
  final String C=""String_Node_Str"";
  final String D=""String_Node_Str"";
  final String[] res=new String[]{""String_Node_Str"",""String_Node_Str""};
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F,S}),F + ""String_Node_Str"" + S);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F);
  assertEquals(Localizer.processArguments(""String_Node_Str"",new String[]{F}),""String_Node_Str"" + F + ""String_Node_Str"");
  final String[] holder=new String[1];
  runAsync(new Runnable(){
    public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",new String[]{C});
    }
  }
);
  assertEquals(holder[0],C);
  runAsync(new Runnable(){
    public void run(){
      holder[0]=Localizer.processArguments(""String_Node_Str"",new String[]{D});
    }
  }
);
  assertEquals(holder[0],D);
  runAsync(new Runnable(){
    public void run(){
      holder[0]=Localizer.processArguments(holder[0],res);
    }
  }
);
  assertEquals(holder[0],res[1] + res[0]);
}",0.5962660443407235
144808,"protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref;
  try {
    ref=new XPathReference(nodeset);
  }
 catch (  XPathException xpe) {
    throw new XFormParseException(xpe.getMessage());
  }
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      reporter.error(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpathConstr+ ""String_Node_Str""+ xse.getMessage());
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpse.getMessage()+ ""String_Node_Str""+ xpathCalc);
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}","protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref;
  try {
    ref=new XPathReference(nodeset);
  }
 catch (  XPathException xpe) {
    throw new XFormParseException(xpe.getMessage());
  }
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpathConstr+ ""String_Node_Str""+ xse.getMessage());
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpse.getMessage()+ ""String_Node_Str""+ xpathCalc);
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}",0.9936959390118753
144809,"public Boolean parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  try {
    String rootName=parser.getName();
    if (requiredRootEnvelope != null && !requiredRootEnvelope.equals(rootName)) {
      throw new InvalidStructureException(""String_Node_Str"" + rootName + ""String_Node_Str""+ requiredRootEnvelope+ ""String_Node_Str"",parser);
    }
    String itemString=parser.getAttributeValue(null,""String_Node_Str"");
    int itemNumber=-1;
    if (itemString != null) {
      try {
        itemNumber=Integer.parseInt(itemString);
      }
 catch (      NumberFormatException e) {
        itemNumber=0;
      }
      rListener.setTotalForms(itemNumber);
    }
    parseBlock(rootName);
  }
  finally {
    try {
      is.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (errors.size() == 0) {
    return Boolean.TRUE;
  }
 else {
    return Boolean.FALSE;
  }
}","public Boolean parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  try {
    String rootName=parser.getName();
    if (requiredRootEnvelope != null && !requiredRootEnvelope.equals(rootName)) {
      throw new InvalidStructureException(""String_Node_Str"" + rootName + ""String_Node_Str""+ requiredRootEnvelope+ ""String_Node_Str"",parser);
    }
    String itemString=parser.getAttributeValue(null,""String_Node_Str"");
    int itemNumber=-1;
    if (itemString != null) {
      try {
        itemNumber=Integer.parseInt(itemString);
      }
 catch (      NumberFormatException e) {
        itemNumber=0;
      }
      if (rListener != null) {
        rListener.setTotalForms(itemNumber);
      }
    }
    parseBlock(rootName);
  }
  finally {
    try {
      is.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (errors.size() == 0) {
    return Boolean.TRUE;
  }
 else {
    return Boolean.FALSE;
  }
}",0.978477690288714
144810,"protected void checkNode(String[] names) throws InvalidStructureException {
  boolean checksOut=false;
  if (parser.getName() == null) {
  }
 else {
    for (    String name : names) {
      if (parser.getName().toLowerCase().equals(name)) {
        checksOut=true;
      }
    }
  }
  if (!checksOut) {
    int eventType=-1;
    try {
      eventType=parser.getEventType();
    }
 catch (    XmlPullParserException xppe) {
    }
    String oneOf=null;
    if (names.length == 1) {
      oneOf=""String_Node_Str"" + names[0] + ""String_Node_Str"";
    }
 else {
      oneOf=""String_Node_Str"";
      for (      String name : names) {
        oneOf+=""String_Node_Str"" + name + ""String_Node_Str"";
      }
      oneOf+=""String_Node_Str"";
    }
    String foundInstead=""String_Node_Str"";
    if (eventType == KXmlParser.END_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.START_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.TEXT) {
      foundInstead=""String_Node_Str"" + parser.getText() + ""String_Node_Str"";
    }
 else {
      foundInstead=""String_Node_Str"";
    }
    throw new InvalidStructureException(""String_Node_Str"" + oneOf + foundInstead+ ""String_Node_Str"",parser);
  }
}","/** 
 * Evaluates whether the current node is of an appropriate name and throws the proper exception if not.
 * @param name A list of names which are valid during this stepof parsing
 * @throws InvalidStructureException If the node at the currentposition is not the one expected.
 */
protected void checkNode(String[] names) throws InvalidStructureException {
  boolean checksOut=false;
  if (parser.getName() == null) {
  }
 else {
    for (    String name : names) {
      if (parser.getName().toLowerCase().equals(name)) {
        checksOut=true;
      }
    }
  }
  if (!checksOut) {
    int eventType=-1;
    try {
      eventType=parser.getEventType();
    }
 catch (    XmlPullParserException xppe) {
    }
    String oneOf=null;
    if (names.length == 1) {
      oneOf=""String_Node_Str"" + names[0] + ""String_Node_Str"";
    }
 else {
      oneOf=""String_Node_Str"";
      for (      String name : names) {
        oneOf+=""String_Node_Str"" + name + ""String_Node_Str"";
      }
      oneOf+=""String_Node_Str"";
    }
    String foundInstead=""String_Node_Str"";
    if (eventType == KXmlParser.END_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.START_TAG) {
      foundInstead=""String_Node_Str"" + parser.getName() + ""String_Node_Str"";
    }
 else     if (eventType == KXmlParser.TEXT) {
      foundInstead=""String_Node_Str"" + parser.getText() + ""String_Node_Str"";
    }
 else {
      foundInstead=""String_Node_Str"";
    }
    throw new InvalidStructureException(""String_Node_Str"" + oneOf + foundInstead+ ""String_Node_Str"",parser);
  }
}",0.9037940379403794
144811,"protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref=new XPathReference(nodeset);
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      reporter.error(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpathConstr+ ""String_Node_Str""+ xse.getMessage());
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpse.getMessage()+ ""String_Node_Str""+ xpathCalc);
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}","protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref;
  try {
    ref=new XPathReference(nodeset);
  }
 catch (  XPathException xpe) {
    throw new XFormParseException(xpe.getMessage());
  }
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      reporter.error(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpathConstr+ ""String_Node_Str""+ xse.getMessage());
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpse.getMessage()+ ""String_Node_Str""+ xpathCalc);
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}",0.9835722819593788
144812,"/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    argVals[0]=XPathFuncExpr.unpack(args[0].eval(model,evalContext));
    if (!isNull(argVals[0])) {
      return argVals[0];
    }
 else {
      argVals[1]=args[1].eval(model,evalContext);
      return argVals[1];
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDouble(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return selectedAt(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 1) {
      return position(((XPathNodeset)argVals[0]).getRefAt(0));
    }
 else {
      if (evalContext.getContextPosition() != -1) {
        return new Double(evalContext.getContextPosition());
      }
      return position(evalContext.getContextRef());
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (argVals[0] instanceof XPathNodeset) {
      return max(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return max(argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (argVals[0] instanceof XPathNodeset) {
      return min(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return min(argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
    return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return stringLength(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Double(MathUtils.getRand().nextDouble());
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 0) {
      return PropertyUtils.genUUID();
    }
    int len=toInt(argVals[0]).intValue();
    return PropertyUtils.genGUID(len);
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2)) {
    double a=toDouble(argVals[0]).doubleValue();
    double b=toDouble(argVals[1]).doubleValue();
    return Math.pow(a,b);
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals,evalContext);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}","/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    argVals[0]=XPathFuncExpr.unpack(args[0].eval(model,evalContext));
    if (!isNull(argVals[0])) {
      return argVals[0];
    }
 else {
      argVals[1]=args[1].eval(model,evalContext);
      return argVals[1];
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDouble(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return selectedAt(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 1) {
      return position(((XPathNodeset)argVals[0]).getRefAt(0));
    }
 else {
      if (evalContext.getContextPosition() != -1) {
        return new Double(evalContext.getContextPosition());
      }
      return position(evalContext.getContextRef());
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (argVals[0] instanceof XPathNodeset) {
      return max(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return max(argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (argVals[0] instanceof XPathNodeset) {
      return min(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return min(argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
    return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return stringLength(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Double(MathUtils.getRand().nextDouble());
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 0) {
      return PropertyUtils.genUUID();
    }
    int len=toInt(argVals[0]).intValue();
    return PropertyUtils.genGUID(len);
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2)) {
    return power(argVals[0],argVals[1]);
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals,evalContext);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}",0.9920140669646128
144813,"private void testEval(String expr,FormInstance model,EvaluationContext ec,Object expected){
  XPathExpression xpe=null;
  boolean exceptionExpected=(expected instanceof XPathException);
  if (ec == null) {
    ec=new EvaluationContext(model);
  }
  try {
    xpe=XPathParseTool.parseXPath(expr);
  }
 catch (  XPathSyntaxException xpse) {
  }
  if (xpe == null) {
    fail(""String_Node_Str"" + expr);
  }
  try {
    Object result=xpe.eval(model,ec);
    if (exceptionExpected) {
      fail(""String_Node_Str"" + expr);
    }
 else     if ((result instanceof Double && expected instanceof Double)) {
      Double o=((Double)result).doubleValue();
      Double t=((Double)expected).doubleValue();
      if (Math.abs(o - t) > 1.0e-12) {
        fail(""String_Node_Str"" + o + ""String_Node_Str""+ t+ ""String_Node_Str"");
      }
    }
 else     if (!expected.equals(result)) {
      fail(""String_Node_Str"" + expr);
    }
  }
 catch (  XPathException xpex) {
    if (!exceptionExpected) {
      fail(""String_Node_Str"");
    }
 else     if (xpex.getClass() != expected.getClass()) {
      fail(""String_Node_Str"");
    }
  }
}","private void testEval(String expr,FormInstance model,EvaluationContext ec,Object expected,double tolerance){
  XPathExpression xpe=null;
  boolean exceptionExpected=(expected instanceof XPathException);
  if (ec == null) {
    ec=new EvaluationContext(model);
  }
  try {
    xpe=XPathParseTool.parseXPath(expr);
  }
 catch (  XPathSyntaxException xpse) {
  }
  if (xpe == null) {
    fail(""String_Node_Str"" + expr);
  }
  try {
    Object result=xpe.eval(model,ec);
    if (tolerance != XPathFuncExpr.DOUBLE_TOLERANCE) {
      System.out.println(expr + ""String_Node_Str"" + result);
    }
    if (exceptionExpected) {
      fail(""String_Node_Str"" + expr);
    }
 else     if ((result instanceof Double && expected instanceof Double)) {
      Double o=((Double)result).doubleValue();
      Double t=((Double)expected).doubleValue();
      if (Math.abs(o - t) > tolerance) {
        fail(""String_Node_Str"" + o + ""String_Node_Str""+ t+ ""String_Node_Str"");
      }
    }
 else     if (!expected.equals(result)) {
      fail(""String_Node_Str"" + expr);
    }
  }
 catch (  XPathException xpex) {
    if (!exceptionExpected) {
      fail(""String_Node_Str"");
    }
 else     if (xpex.getClass() != expected.getClass()) {
      fail(""String_Node_Str"");
    }
  }
}",0.9345162653147444
144814,"public void doTests(){
  EvaluationContext ec=getFunctionHandlers();
  FormInstance instance=createTestInstance();
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,new Double(555555.555));
  testEval(""String_Node_Str"",null,null,new Double(0.000555));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(100.001));
  testEval(""String_Node_Str"",null,null,new Double(0.1001));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-12345.6789));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(10.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-123.5));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(14127.0));
  testEval(""String_Node_Str"",null,null,new Double(-10252.0));
  testEval(""String_Node_Str"",null,ec,new Double(5.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2000,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1945,4,26));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1996,2,29));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,2));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1969,12,31));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2008,9,5));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1941,12,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1989,11,9));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(0.5));
  testEval(""String_Node_Str"",null,null,new Double(5.5));
  testEval(""String_Node_Str"",null,null,DateUtils.parseDate(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.7));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(-4.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-40.0));
  testEval(""String_Node_Str"",null,null,new Double(-19.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.21));
  testEval(""String_Node_Str"",null,null,new Double(2.5));
  testEval(""String_Node_Str"",null,null,new Double(1.5));
  testEval(""String_Node_Str"",null,null,new Double(12.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.9));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(65.0));
  testEval(""String_Node_Str"",null,null,new Double(56088.0));
  testEval(""String_Node_Str"",null,null,new Double(9.0));
  testEval(""String_Node_Str"",null,null,new Double(9104.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(4.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(6.25));
  testEval(""String_Node_Str"",null,null,new Double(.25));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(-3.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new Double(8.0));
  testEval(""String_Node_Str"",null,ec,new Double(3.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  EvaluationContext varContext=getVariableContext();
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,""String_Node_Str"");
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  String wildcardIndex=""String_Node_Str"";
  String indexOne=""String_Node_Str"";
  String indexTwo=""String_Node_Str"";
  XPathPathExpr expr=XPathReference.getPathExpr(wildcardIndex);
  XPathPathExpr expr2=XPathReference.getPathExpr(indexOne);
  XPathPathExpr expr3=XPathReference.getPathExpr(indexTwo);
  if (!expr.matches(expr2)) {
    fail(""String_Node_Str"" + wildcardIndex + ""String_Node_Str""+ indexOne);
  }
  if (!expr2.matches(expr)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ wildcardIndex);
  }
  if (expr2.matches(expr3)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ indexTwo);
  }
  try {
    testEval(""String_Node_Str"",null,ec,new XPathUnhandledException());
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
  }
  ec.addFunctionHandler(read);
  ec.addFunctionHandler(write);
  read.val=""String_Node_Str"";
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  if (!""String_Node_Str"".equals(write.val))   fail(""String_Node_Str"");
}","public void doTests(){
  EvaluationContext ec=getFunctionHandlers();
  FormInstance instance=createTestInstance();
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",instance,null,new XPathUnsupportedException());
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,new Double(555555.555));
  testEval(""String_Node_Str"",null,null,new Double(0.000555));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-5.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(100.0));
  testEval(""String_Node_Str"",null,null,new Double(100.001));
  testEval(""String_Node_Str"",null,null,new Double(0.1001));
  testEval(""String_Node_Str"",null,null,new Double(1.23e21));
  testEval(""String_Node_Str"",null,null,new Double(1.23e-18));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-12345.6789));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(10.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-0.0));
  testEval(""String_Node_Str"",null,null,new Double(-123.5));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(14127.0));
  testEval(""String_Node_Str"",null,null,new Double(-10252.0));
  testEval(""String_Node_Str"",null,ec,new Double(5.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2000,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1945,4,26));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1996,2,29));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,1));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1970,1,2));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1969,12,31));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(2008,9,5));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1941,12,7));
  testEval(""String_Node_Str"",null,null,DateUtils.getDate(1989,11,9));
  testEval(""String_Node_Str"",null,null,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(5.0));
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,""String_Node_Str"");
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(0.5));
  testEval(""String_Node_Str"",null,null,new Double(5.5));
  testEval(""String_Node_Str"",null,null,DateUtils.parseDate(""String_Node_Str""));
  testEval(""String_Node_Str"",null,null,new Double(11.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.7));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,new Double(-4.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-40.0));
  testEval(""String_Node_Str"",null,null,new Double(-19.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.21));
  testEval(""String_Node_Str"",null,null,new Double(2.5));
  testEval(""String_Node_Str"",null,null,new Double(1.5));
  testEval(""String_Node_Str"",null,null,new Double(12.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.POSITIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NEGATIVE_INFINITY));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(1.9));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(-2.0));
  testEval(""String_Node_Str"",null,null,new Double(Double.NaN));
  testEval(""String_Node_Str"",null,null,new Double(65.0));
  testEval(""String_Node_Str"",null,null,new Double(56088.0));
  testEval(""String_Node_Str"",null,null,new Double(9.0));
  testEval(""String_Node_Str"",null,null,new Double(9104.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(2.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new Double(4.0));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(0.0));
  testEval(""String_Node_Str"",null,null,new Double(6.25));
  testEval(""String_Node_Str"",null,null,new Double(.25));
  testEval(""String_Node_Str"",null,null,new Double(1.0));
  testEval(""String_Node_Str"",null,null,new Double(-1.0));
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,new Double(-3.0));
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.FALSE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,Boolean.TRUE);
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,null,new XPathUnhandledException());
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,new Double(8.0));
  testEval(""String_Node_Str"",null,ec,new Double(3.0));
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,new XPathTypeMismatchException());
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  EvaluationContext varContext=getVariableContext();
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,""String_Node_Str"");
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  testEval(""String_Node_Str"",null,varContext,new Double(5.0));
  String wildcardIndex=""String_Node_Str"";
  String indexOne=""String_Node_Str"";
  String indexTwo=""String_Node_Str"";
  XPathPathExpr expr=XPathReference.getPathExpr(wildcardIndex);
  XPathPathExpr expr2=XPathReference.getPathExpr(indexOne);
  XPathPathExpr expr3=XPathReference.getPathExpr(indexTwo);
  if (!expr.matches(expr2)) {
    fail(""String_Node_Str"" + wildcardIndex + ""String_Node_Str""+ indexOne);
  }
  if (!expr2.matches(expr)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ wildcardIndex);
  }
  if (expr2.matches(expr3)) {
    fail(""String_Node_Str"" + indexOne + ""String_Node_Str""+ indexTwo);
  }
  try {
    testEval(""String_Node_Str"",null,ec,new XPathUnhandledException());
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException npe) {
  }
  ec.addFunctionHandler(read);
  ec.addFunctionHandler(write);
  read.val=""String_Node_Str"";
  testEval(""String_Node_Str"",null,ec,""String_Node_Str"");
  testEval(""String_Node_Str"",null,ec,Boolean.TRUE);
  if (!""String_Node_Str"".equals(write.val))   fail(""String_Node_Str"");
}",0.9967139398132134
144815,"/** 
 * @param context A data model which is compatible with any xpath functions in the underlying Text
 * @return The evaluated string value for this Text object.
 */
public String evaluate(EvaluationContext context){
switch (type) {
case TEXT_TYPE_FLAT:
    return argument;
case TEXT_TYPE_LOCALE:
  String id=argument;
if (argument.equals(""String_Node_Str"")) {
  id=arguments.get(""String_Node_Str"").evaluate(context);
}
return Localization.get(id);
case TEXT_TYPE_XPATH:
try {
if (cacheParse == null) {
cacheParse=XPathParseTool.parseXPath(""String_Node_Str"" + argument + ""String_Node_Str"");
}
EvaluationContext temp=new EvaluationContext(context,context == null ? null : context.getContextRef());
temp.addFunctionHandler(new IFunctionHandler(){
public Object eval(Object[] args,EvaluationContext ec){
  Object o=XPathFuncExpr.toDate(args[0]);
  if (!(o instanceof Date)) {
    return ""String_Node_Str"";
  }
  String type=(String)args[1];
  int format=DateUtils.FORMAT_HUMAN_READABLE_SHORT;
  if (type.equals(""String_Node_Str"")) {
    format=DateUtils.FORMAT_HUMAN_READABLE_SHORT;
  }
 else   if (type.equals(""String_Node_Str"")) {
    format=DateUtils.FORMAT_ISO8601;
  }
  return DateUtils.formatDate((Date)o,format);
}
public String getName(){
  return ""String_Node_Str"";
}
public Vector getPrototypes(){
  Vector format=new Vector();
  Class[] prototypes=new Class[]{Date.class,String.class};
  format.addElement(prototypes);
  return format;
}
public boolean rawArgs(){
  return false;
}
public boolean realTime(){
  return false;
}
}
);
temp.addFunctionHandler(new IFunctionHandler(){
public Object eval(Object[] args,EvaluationContext ec){
  Calendar c=Calendar.getInstance();
  c.setTime(new Date());
  return String.valueOf(c.get(Calendar.DAY_OF_WEEK));
}
public String getName(){
  return ""String_Node_Str"";
}
public Vector getPrototypes(){
  Vector format=new Vector();
  Class[] prototypes=new Class[]{};
  format.addElement(prototypes);
  return format;
}
public boolean rawArgs(){
  return false;
}
public boolean realTime(){
  return false;
}
}
);
for (Enumeration en=arguments.keys(); en.hasMoreElements(); ) {
String key=(String)en.nextElement();
String value=arguments.get(key).evaluate(context);
temp.setVariable(key,value);
}
return (String)cacheParse.eval(context.getMainInstance(),context);
}
 catch (XPathSyntaxException e) {
e.printStackTrace();
}
return argument;
case TEXT_TYPE_COMPOSITE:
String ret=""String_Node_Str"";
for (int i=0; i < arguments.size(); ++i) {
Text item=arguments.get(String.valueOf(i));
ret+=item.evaluate(context) + ""String_Node_Str"";
}
return ret;
default :
return argument;
}
}","/** 
 * @param context A data model which is compatible with any xpath functions in the underlying Text
 * @return The evaluated string value for this Text object.
 */
public String evaluate(EvaluationContext context){
switch (type) {
case TEXT_TYPE_FLAT:
    return argument;
case TEXT_TYPE_LOCALE:
  String id=argument;
if (argument.equals(""String_Node_Str"")) {
  id=arguments.get(""String_Node_Str"").evaluate(context);
}
return Localization.get(id);
case TEXT_TYPE_XPATH:
try {
if (cacheParse == null) {
cacheParse=XPathParseTool.parseXPath(""String_Node_Str"" + argument + ""String_Node_Str"");
}
EvaluationContext temp;
if (context == null) {
temp=new EvaluationContext(null);
}
 else {
temp=new EvaluationContext(context,context.getContextRef());
}
temp.addFunctionHandler(new IFunctionHandler(){
public Object eval(Object[] args,EvaluationContext ec){
  Object o=XPathFuncExpr.toDate(args[0]);
  if (!(o instanceof Date)) {
    return ""String_Node_Str"";
  }
  String type=(String)args[1];
  int format=DateUtils.FORMAT_HUMAN_READABLE_SHORT;
  if (type.equals(""String_Node_Str"")) {
    format=DateUtils.FORMAT_HUMAN_READABLE_SHORT;
  }
 else   if (type.equals(""String_Node_Str"")) {
    format=DateUtils.FORMAT_ISO8601;
  }
  return DateUtils.formatDate((Date)o,format);
}
public String getName(){
  return ""String_Node_Str"";
}
public Vector getPrototypes(){
  Vector format=new Vector();
  Class[] prototypes=new Class[]{Date.class,String.class};
  format.addElement(prototypes);
  return format;
}
public boolean rawArgs(){
  return false;
}
public boolean realTime(){
  return false;
}
}
);
temp.addFunctionHandler(new IFunctionHandler(){
public Object eval(Object[] args,EvaluationContext ec){
  Calendar c=Calendar.getInstance();
  c.setTime(new Date());
  return String.valueOf(c.get(Calendar.DAY_OF_WEEK));
}
public String getName(){
  return ""String_Node_Str"";
}
public Vector getPrototypes(){
  Vector format=new Vector();
  Class[] prototypes=new Class[]{};
  format.addElement(prototypes);
  return format;
}
public boolean rawArgs(){
  return false;
}
public boolean realTime(){
  return false;
}
}
);
for (Enumeration en=arguments.keys(); en.hasMoreElements(); ) {
String key=(String)en.nextElement();
String value=arguments.get(key).evaluate(context);
temp.setVariable(key,value);
}
return (String)cacheParse.eval(temp.getMainInstance(),temp);
}
 catch (XPathSyntaxException e) {
e.printStackTrace();
}
return argument;
case TEXT_TYPE_COMPOSITE:
String ret=""String_Node_Str"";
for (int i=0; i < arguments.size(); ++i) {
Text item=arguments.get(String.valueOf(i));
ret+=item.evaluate(context) + ""String_Node_Str"";
}
return ret;
default :
return argument;
}
}",0.9690332326283988
144816,"private void repairIndexStore(){
  log(""String_Node_Str"",""String_Node_Str"");
  RMS ix=null;
  if (index != null && index.getIndexStore() != null) {
    ix=index.getIndexStore();
  }
 else {
    try {
      ix=rmsFactory.getIndexRMS(indexStoreName(),false);
    }
 catch (    RecordStoreException rse) {
    }
  }
  byte[] storageInfo=null;
  byte[] indexData=null;
  if (ix != null) {
    try {
      storageInfo=ix.readRecord(STORAGE_INFO_REC_ID);
    }
 catch (    RuntimeException rse) {
    }
    try {
      indexData=ix.readRecord(ID_INDEX_REC_ID);
    }
 catch (    RuntimeException rse) {
    }
  }
  if (ix != null) {
    ix.close();
  }
  try {
    RecordStore.deleteRecordStore(indexStoreName());
  }
 catch (  RecordStoreNotFoundException rsnfe) {
  }
catch (  RecordStoreException e) {
    String message=""String_Node_Str"" + indexStoreName() + ""String_Node_Str""+ e.getMessage();
    log(""String_Node_Str"",message);
    throw new RuntimeException(message);
  }
  this.initIndexStore();
  ix=index.getIndexStore();
  boolean infoRecordRecovered=false;
  if (storageInfo != null) {
    ix.updateRecord(STORAGE_INFO_REC_ID,storageInfo,true);
    infoRecordRecovered=true;
  }
  if (!infoRecordRecovered) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    log(""String_Node_Str"",""String_Node_Str"");
  }
  ;
  boolean indexDataRecoverd=false;
  if (indexData != null) {
    ix.updateRecord(ID_INDEX_REC_ID,storageInfo,true);
    indexDataRecoverd=true;
  }
  if (!indexDataRecoverd) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    log(""String_Node_Str"",""String_Node_Str"");
  }
  ;
  if (!infoRecordRecovered) {
    RMSStorageInfo info=(RMSStorageInfo)ix.readRecord(STORAGE_INFO_REC_ID,RMSStorageInfo.class);
    int stores=0;
    boolean failed=false;
    while (!failed) {
      try {
        RMS rms=rmsFactory.getDataRMS(dataStoreName(stores),false);
        stores++;
        rms.close();
      }
 catch (      RecordStoreException rse) {
        failed=true;
      }
    }
    info.numDataStores=stores;
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + stores+ ""String_Node_Str"");
    if (!ix.updateRecord(STORAGE_INFO_REC_ID,ExtUtil.serialize(info),true)) {
    }
  }
  this.datastores=new RMS[0];
  getInfoRecord();
  for (int i=0; i < datastores.length; ++i) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + i);
    this.getDataStore(i);
    datastores[i].ensureOpen();
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + i+ ""String_Node_Str"");
  }
  this.repair(true);
}","private void repairIndexStore(){
  log(""String_Node_Str"",""String_Node_Str"");
  RMS ix=null;
  if (index != null && index.getIndexStore() != null) {
    ix=index.getIndexStore();
  }
 else {
    try {
      ix=rmsFactory.getIndexRMS(indexStoreName(),false);
    }
 catch (    RecordStoreException rse) {
    }
  }
  byte[] storageInfo=null;
  byte[] indexData=null;
  if (ix != null) {
    try {
      storageInfo=ix.readRecord(STORAGE_INFO_REC_ID);
    }
 catch (    RuntimeException rse) {
    }
    try {
      indexData=ix.readRecord(ID_INDEX_REC_ID);
    }
 catch (    RuntimeException rse) {
    }
  }
  if (ix != null) {
    ix.close();
  }
  try {
    RecordStore.deleteRecordStore(indexStoreName());
  }
 catch (  RecordStoreNotFoundException rsnfe) {
  }
catch (  RecordStoreException e) {
    String message=""String_Node_Str"" + indexStoreName() + ""String_Node_Str""+ e.getMessage();
    log(""String_Node_Str"",message);
    throw new RuntimeException(message);
  }
  this.initIndexStore();
  ix=index.getIndexStore();
  boolean infoRecordRecovered=false;
  if (storageInfo != null) {
    ix.updateRecord(STORAGE_INFO_REC_ID,storageInfo,true);
    infoRecordRecovered=true;
  }
  if (!infoRecordRecovered) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    log(""String_Node_Str"",""String_Node_Str"");
  }
  ;
  boolean indexDataRecoverd=false;
  if (indexData != null) {
    ix.updateRecord(ID_INDEX_REC_ID,indexData,true);
    indexDataRecoverd=true;
  }
  if (!indexDataRecoverd) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    log(""String_Node_Str"",""String_Node_Str"");
  }
  ;
  if (!infoRecordRecovered) {
    RMSStorageInfo info=(RMSStorageInfo)ix.readRecord(STORAGE_INFO_REC_ID,RMSStorageInfo.class);
    int stores=0;
    boolean failed=false;
    while (!failed) {
      try {
        RMS rms=rmsFactory.getDataRMS(dataStoreName(stores),false);
        stores++;
        rms.close();
      }
 catch (      RecordStoreException rse) {
        failed=true;
      }
    }
    info.numDataStores=stores;
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + stores+ ""String_Node_Str"");
    if (!ix.updateRecord(STORAGE_INFO_REC_ID,ExtUtil.serialize(info),true)) {
    }
  }
  this.datastores=new RMS[0];
  getInfoRecord();
  for (int i=0; i < datastores.length; ++i) {
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + i);
    this.getDataStore(i);
    datastores[i].ensureOpen();
    log(""String_Node_Str"",indexStoreName() + ""String_Node_Str"" + i+ ""String_Node_Str"");
  }
  this.repair(true);
}",0.9962092494313874
144817,"public boolean equals(Object o){
  return (o instanceof PrefixTreeNode ? prefix.equals(((PrefixTreeNode)o).prefix) : false);
}","public boolean equals(Object o){
  return (o instanceof PrefixTreeNode ? ArrayUtilities.arraysEqual(prefix,0,((PrefixTreeNode)o).prefix,0) : false);
}",0.855072463768116
144818,"public void testAddExistingLocale(){
  Localizer l=new Localizer();
  final String TEST_LOCALE=""String_Node_Str"";
  l.addAvailableLocale(TEST_LOCALE);
  TableLocaleSource table=new TableLocaleSource();
  table.setLocaleMapping(""String_Node_Str"",""String_Node_Str"");
  l.registerLocaleResource(TEST_LOCALE,table);
  OrderedHashtable localeData=l.getLocaleData(TEST_LOCALE);
  boolean result=l.addAvailableLocale(TEST_LOCALE);
  if (result) {
    fail(""String_Node_Str"");
  }
  if (!localeData.equals(l.getLocaleData(TEST_LOCALE))) {
    fail(""String_Node_Str"");
  }
}","public void testAddExistingLocale(){
  Localizer l=new Localizer();
  final String TEST_LOCALE=""String_Node_Str"";
  l.addAvailableLocale(TEST_LOCALE);
  TableLocaleSource table=new TableLocaleSource();
  table.setLocaleMapping(""String_Node_Str"",""String_Node_Str"");
  l.registerLocaleResource(TEST_LOCALE,table);
  OrderedHashtable localeData=l.getLocaleData(TEST_LOCALE);
  boolean result=l.addAvailableLocale(TEST_LOCALE);
  if (result) {
    fail(""String_Node_Str"");
  }
  Hashtable newLocaleData=l.getLocaleData(TEST_LOCALE);
  if (!localeData.equals(newLocaleData)) {
    fail(""String_Node_Str"");
  }
}",0.9342442356959864
144819,"public Vector getSingleStringAttributeVector(){
  Vector strings=new Vector();
  if (attributes == null || attributes.size() == 0)   return null;
 else {
    for (int i=0; i < this.attributes.size(); i++) {
      TreeElement attribute=attributes.elementAt(i);
      String value=getAttributeValue(attribute);
      if (attribute.namespace == null || attribute.namespace == ""String_Node_Str"")       strings.addElement(new String(attribute.getName() + ""String_Node_Str"" + value));
 else       strings.addElement(new String(attribute.namespace + ""String_Node_Str"" + attribute.getName()+ ""String_Node_Str""+ value));
    }
    return strings;
  }
}","public Vector getSingleStringAttributeVector(){
  Vector strings=new Vector();
  if (attributes == null || attributes.size() == 0)   return null;
 else {
    for (int i=0; i < this.attributes.size(); i++) {
      TreeElement attribute=attributes.elementAt(i);
      String value=getAttributeValue(attribute);
      if (attribute.namespace == null || attribute.namespace.equals(""String_Node_Str""))       strings.addElement(new String(attribute.getName() + ""String_Node_Str"" + value));
 else       strings.addElement(new String(attribute.namespace + ""String_Node_Str"" + attribute.getName()+ ""String_Node_Str""+ value));
    }
    return strings;
  }
}",0.9899302865995352
144820,"public K intern(K k){
synchronized (this) {
    int hash=k.hashCode();
    K nk=retrieve(hash);
    if (nk == null) {
      register(hash,k);
      return k;
    }
    if (k.equals(nk)) {
      return nk;
    }
    return k;
  }
}","public K intern(K k){
synchronized (this) {
    int hash=k.hashCode();
    K nk=retrieve(hash);
    if (nk == null) {
      register(hash,k);
      return k;
    }
    if (k.equals(nk)) {
      return nk;
    }
 else {
      System.out.println(""String_Node_Str"" + nk.toString() + ""String_Node_Str""+ k);
    }
    return k;
  }
}",0.7598566308243727
144821,"public void run(){
  Vector<Integer> toRemove=new Vector<Integer>();
  while (true) {
    try {
      toRemove.removeAllElements();
      for (int i=0; i < caches.size(); ++i) {
        CacheTable cache=(CacheTable)caches.elementAt(i).get();
        if (cache == null) {
          toRemove.addElement(DataUtil.integer(i));
        }
 else {
          Hashtable<Integer,WeakReference> table=cache.currentTable;
          int start=table.size();
          if (start > cache.largestSize) {
            cache.largestSize=start;
          }
          for (Enumeration en=table.keys(); en.hasMoreElements(); ) {
            Object key=en.nextElement();
            if (((WeakReference)table.get(key)).get() == null) {
              table.remove(key);
            }
          }
synchronized (cache) {
            if (cache.largestSize > 50 && cache.largestSize > (cache.currentTable.size() >> 2)) {
              Hashtable newTable=new Hashtable(cache.currentTable.size());
              for (Enumeration en=table.keys(); en.hasMoreElements(); ) {
                Object key=en.nextElement();
                newTable.put(key,cache.currentTable.get(key));
              }
              cache.currentTable=newTable;
              cache.largestSize=cache.currentTable.size();
            }
          }
        }
      }
      for (int id=toRemove.size() - 1; id >= 0; --id) {
        caches.removeElementAt(toRemove.elementAt(id));
      }
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void run(){
  Vector<Integer> toRemove=new Vector<Integer>();
  while (true) {
    try {
      toRemove.removeAllElements();
      for (int i=0; i < caches.size(); ++i) {
        CacheTable cache=(CacheTable)caches.elementAt(i).get();
        if (cache == null) {
          toRemove.addElement(DataUtil.integer(i));
        }
 else {
          Hashtable<Integer,WeakReference> table=cache.currentTable;
          int start=table.size();
          if (start > cache.totalAdditions) {
            cache.totalAdditions=start;
          }
          for (Enumeration en=table.keys(); en.hasMoreElements(); ) {
            Object key=en.nextElement();
            if (((WeakReference)table.get(key)).get() == null) {
synchronized (cache) {
                table.remove(key);
              }
            }
          }
synchronized (cache) {
            if (cache.totalAdditions > 50 && cache.totalAdditions - cache.currentTable.size() > (cache.currentTable.size() >> 2)) {
              Hashtable newTable=new Hashtable(cache.currentTable.size());
              int oldMax=cache.totalAdditions;
              for (Enumeration en=table.keys(); en.hasMoreElements(); ) {
                Object key=en.nextElement();
                newTable.put(key,cache.currentTable.get(key));
              }
              cache.currentTable=newTable;
              cache.totalAdditions=cache.currentTable.size();
            }
          }
        }
      }
      for (int id=toRemove.size() - 1; id >= 0; --id) {
        caches.removeElementAt(toRemove.elementAt(id));
      }
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.930576070901034
144822,"public void register(int key,K item){
synchronized (this) {
    currentTable.put(DataUtil.integer(key),new WeakReference(item));
  }
}","public void register(int key,K item){
synchronized (this) {
    currentTable.put(DataUtil.integer(key),new WeakReference(item));
    totalAdditions++;
  }
}",0.9241379310344828
144823,"public int hashCode(){
  int code=this.axis | this.test | (this.name == null ? 0 : this.name.hashCode())| (this.literal == null ? 0 : this.literal.hashCode())| (this.namespace == null ? 0 : this.namespace.hashCode());
  for (  XPathExpression xpe : predicates) {
    code|=xpe.hashCode();
  }
  return code;
}","public int hashCode(){
  int code=this.axis ^ this.test ^ (this.name == null ? 0 : this.name.hashCode())^ (this.literal == null ? 0 : this.literal.hashCode())^ (this.namespace == null ? 0 : this.namespace.hashCode());
  for (  XPathExpression xpe : predicates) {
    code^=xpe.hashCode();
  }
  return code;
}",0.948220064724919
144824,"private void buildIndex(){
synchronized (metadataAccessLock) {
    MemoryUtils.stopTerning();
    try {
      metaDataIndex=new Hashtable();
      if (!hasMetaData) {
        return;
      }
      String[] fields=getFields();
      for (int k=0; k < fields.length; k++) {
        metaDataIndex.put(fields[k],new Hashtable());
      }
      IStorageIterator i=iterate();
      int records=this.getNumRecords();
      Hashtable[] metadata=new Hashtable[records];
      int[] recordIds=new int[records];
      for (int j=0; j < records; ++j) {
        metadata[j]=new Hashtable(fields.length);
        for (        String field : fields) {
          metadata[j].put(field,""String_Node_Str"");
        }
      }
      int count=0;
      IMetaData obj;
      while (i.hasMore()) {
        recordIds[count]=i.nextID();
        count++;
      }
      for (int index=0; index < recordIds.length; ++index) {
        obj=(IMetaData)read(recordIds[index]);
        copyHT(metadata[index],getMetaData(obj,fields),fields);
        obj=null;
        System.gc();
      }
      for (int index=0; index < recordIds.length; ++index) {
        indexMetaData(recordIds[index],metadata[index]);
      }
    }
  finally {
      MemoryUtils.revertTerning();
    }
  }
}","private void buildIndex(){
synchronized (metadataAccessLock) {
    try {
      metaDataIndex=new Hashtable();
      if (!hasMetaData) {
        return;
      }
      String[] fields=getFields();
      for (int k=0; k < fields.length; k++) {
        metaDataIndex.put(fields[k],new Hashtable());
      }
      IStorageIterator i=iterate();
      int records=this.getNumRecords();
      Hashtable[] metadata=new Hashtable[records];
      int[] recordIds=new int[records];
      for (int j=0; j < records; ++j) {
        metadata[j]=new Hashtable(fields.length);
        for (        String field : fields) {
          metadata[j].put(field,""String_Node_Str"");
        }
      }
      int count=0;
      IMetaData obj;
      while (i.hasMore()) {
        recordIds[count]=i.nextID();
        count++;
      }
      for (int index=0; index < recordIds.length; ++index) {
        obj=(IMetaData)read(recordIds[index]);
        copyHT(metadata[index],getMetaData(obj,fields),fields);
        obj=null;
        System.gc();
      }
      for (int index=0; index < recordIds.length; ++index) {
        indexMetaData(recordIds[index],metadata[index]);
      }
    }
  finally {
    }
  }
}",0.9727947238252268
144825,"public static void startStateWithLoadingScreen(State state,ProgressIndicator indicator){
  final State s=state;
  loading.cancelLoading();
  loading=new LoadingScreenThread(display);
  loading.startLoading(indicator);
  if (display != null) {
    CrashHandler.expire(display.getCurrent());
  }
  new HandledThread(new Runnable(){
    public void run(){
      s.start();
    }
  }
).start();
}","public static void startStateWithLoadingScreen(State state,ProgressIndicator indicator){
  final State s=state;
  loading.cancelLoading();
  loading=new LoadingScreenThread(display);
  loading.startLoading(indicator);
  if (display != null) {
    CrashHandler.expire(display.getCurrent());
  }
  new HandledThread(new Runnable(){
    public void run(){
      String className=s.getClass().getName();
      MemoryUtils.printMemoryTest(className.substring(Math.max(0,className.lastIndexOf('.'))));
      s.start();
    }
  }
).start();
}",0.8457389428263214
144826,"public void run(){
  s.start();
}","public void run(){
  String className=s.getClass().getName();
  MemoryUtils.printMemoryTest(className.substring(Math.max(0,className.lastIndexOf('.'))));
  s.start();
}",0.3283582089552239
144827,"public static void main(String argv[]){
  XFormValidatorGUI.instance=new XFormValidatorGUI();
}","public static void main(String argv[]){
  XFormValidatorGUI.instance=new XFormValidatorGUI();
  XFormUtils.setXFormParserFactory(new XFormParserFactory(interns));
}",0.7335907335907336
144828,"public TreeReference genericize(){
  TreeReference genericRef=clone();
  for (int i=0; i < genericRef.size(); i++) {
    genericRef.setMultiplicity(i,INDEX_UNBOUND);
  }
  return genericRef;
}","public TreeReference genericize(){
  TreeReference genericRef=clone();
  for (int i=0; i < genericRef.size(); i++) {
    if (genericRef.getMultiplicity(i) > -1 || genericRef.getMultiplicity(i) == INDEX_TEMPLATE) {
      genericRef.setMultiplicity(i,INDEX_UNBOUND);
    }
  }
  return genericRef;
}",0.7075664621676891
144829,"public void doTest(int i){
switch (i) {
case 1:
    testClones();
  break;
case 2:
testSerialization();
break;
case 3:
testParentage();
break;
case 4:
testIntersection();
break;
case 5:
contextualization();
break;
case 6:
testPredicates();
break;
}
}","public void doTest(int i){
switch (i) {
case 1:
    testClones();
  break;
case 2:
testSerialization();
break;
case 3:
testParentage();
break;
case 4:
testIntersection();
break;
case 5:
contextualization();
break;
case 6:
testPredicates();
break;
case 7:
testGenericize();
break;
}
}",0.9380863039399624
144830,"public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundUniqueVector sizeBoundProblems=(SizeBoundUniqueVector)problems;
  FormDef formDef;
  try {
    formDef=(FormDef)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  Localizer localizer=formDef.getLocalizer();
  formDef=null;
  if (localizer == null) {
    return false;
  }
  int missingVideoCount=0;
  int missingImageCount=0;
  int missingAudioCount=0;
  for (  String locale : localizer.getAvailableLocales()) {
    OrderedHashtable<String,PrefixTreeNode> localeData=localizer.getLocaleData(locale);
    for (Enumeration en=localeData.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      if (key.indexOf(""String_Node_Str"") != -1) {
        String form=key.substring(key.indexOf(""String_Node_Str"") + 1,key.length());
        if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO) || form.equals(FormEntryCaption.TEXT_FORM_AUDIO) || form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
          try {
            String externalMedia=localeData.get(key).render();
            Reference ref=ReferenceManager._().DeriveReference(externalMedia);
            String localName=ref.getLocalURI();
            try {
              if (!ref.doesBinaryExist()) {
                sizeBoundProblems.addElement(new MissingMediaException(r,localName));
                if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO)) {
                  sizeBoundProblems.addBadVideoReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_AUDIO)) {
                  sizeBoundProblems.addBadAudioReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
                  sizeBoundProblems.addBadImageReference();
                }
              }
            }
 catch (            IOException e) {
              sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str"" + localName));
            }
          }
 catch (          InvalidReferenceException e) {
          }
        }
      }
    }
  }
  if (sizeBoundProblems.size() == 0) {
    return false;
  }
  return true;
}","public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundUniqueVector sizeBoundProblems=(SizeBoundUniqueVector)problems;
  FormDef formDef;
  try {
    formDef=(FormDef)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  Localizer localizer=formDef.getLocalizer();
  formDef=null;
  if (localizer == null) {
    return false;
  }
  int missingVideoCount=0;
  int missingImageCount=0;
  int missingAudioCount=0;
  for (  String locale : localizer.getAvailableLocales()) {
    OrderedHashtable<String,PrefixTreeNode> localeData=localizer.getLocaleData(locale);
    for (Enumeration en=localeData.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      if (key.indexOf(""String_Node_Str"") != -1) {
        String form=key.substring(key.indexOf(""String_Node_Str"") + 1,key.length());
        if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO) || form.equals(FormEntryCaption.TEXT_FORM_AUDIO) || form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
          try {
            String externalMedia=localeData.get(key).render();
            Reference ref=ReferenceManager._().DeriveReference(externalMedia);
            String localName=ref.getLocalURI();
            try {
              if (!ref.doesBinaryExist()) {
                boolean addedSuccessfully=sizeBoundProblems.addElementForResult(new MissingMediaException(r,localName));
                if (addedSuccessfully) {
                  if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO)) {
                    sizeBoundProblems.addBadVideoReference();
                  }
                  if (form.equals(FormEntryCaption.TEXT_FORM_AUDIO)) {
                    sizeBoundProblems.addBadAudioReference();
                  }
                  if (form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
                    sizeBoundProblems.addBadImageReference();
                  }
                }
              }
            }
 catch (            IOException e) {
              sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str"" + localName));
            }
          }
 catch (          InvalidReferenceException e) {
          }
        }
      }
    }
  }
  if (sizeBoundProblems.size() == 0) {
    return false;
  }
  return true;
}",0.975975975975976
144831,"public void configureApp(MIDlet m,InitializationListener listener){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  setProperties();
  loadModules();
  registerAddtlStorage();
  StorageManager.repairAll();
  RMSTransaction.cleanup();
  initReferences();
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  final CommCareStartupInteraction interaction=new CommCareStartupInteraction(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  Display.getDisplay(m).setCurrent(interaction);
  CommCareInitializer initializer=new CommCareInitializer(){
    int currentProgress=0;
    int block=0;
    private String validate(){
      this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
      SizeBoundVector<MissingMediaException> problems=new SizeBoundVector<MissingMediaException>(10);
      global.verifyInstallation(problems);
      if (problems.size() > 0) {
        int badImageRef=problems.getBadImageReferenceCount();
        int badAudioRef=problems.getBadAudioReferenceCount();
        int badVideoRef=problems.getBadVideoReferenceCount();
        String errorMessage=""String_Node_Str"";
        String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",errorMessage,new String[]{""String_Node_Str"" + badImageRef,""String_Node_Str"" + badAudioRef,""String_Node_Str"" + badVideoRef});
        Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
        for (Enumeration en=problems.elements(); en.hasMoreElements(); ) {
          MissingMediaException ure=(MissingMediaException)en.nextElement();
          String res=ure.getResource().getResourceId();
          Vector<String> list;
          if (problemList.containsKey(res)) {
            list=problemList.get(res);
          }
 else {
            list=new Vector<String>();
          }
          int substringIndex=ure.getMessage().indexOf(""String_Node_Str"");
          String shortenedMessage=(ure.getMessage()).substring(substringIndex + 1);
          list.addElement(shortenedMessage);
          problemList.put(res,list);
        }
        message+=""String_Node_Str"";
        for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
          String resource=(String)en.nextElement();
          for (          String s : problemList.get(resource)) {
            message+=""String_Node_Str"" + s;
          }
        }
        if (problems.getAdditional() > 0) {
          message+=""String_Node_Str"" + problems.getAdditional() + ""String_Node_Str"";
        }
        return message;
      }
      return null;
    }
    protected boolean runWrapper() throws UnfullfilledRequirementsException {
      updateProgress(10);
      ((IStorageUtilityIndexed)StorageManager.getStorage(FormDef.STORAGE_KEY)).getIDsForValue(""String_Node_Str"",""String_Node_Str"");
      CommCareContext.ClearUpdateTable();
      manager=new CommCarePlatform(CommCareUtil.getMajorVersion(),CommCareUtil.getMinorVersion());
      try {
        ResourceTable global=RetrieveGlobalResourceTable();
        ResourceTable upgrade=CommCareContext.CreateTemporaryResourceTable(CommCareUpgradeState.UPGRADE_TABLE_NAME);
        if (global.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNCOMMITED) {
          global.rollbackCommits();
        }
        if (upgrade.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNCOMMITED) {
          upgrade.rollbackCommits();
        }
        if (global.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNSTAGED) {
          global.repairTable(upgrade);
        }
        global.setStateListener(new TableStateListener(){
          static final int INSTALL_SCORE=5;
          public void resourceStateUpdated(          ResourceTable table){
            int score=0;
            int max=0;
            Vector<Resource> resources=CommCarePlatform.getResourceListFromProfile(table);
            max=resources.size() * INSTALL_SCORE;
            if (max <= INSTALL_SCORE * 2) {
              return;
            }
            for (            Resource r : resources) {
switch (r.getStatus()) {
case Resource.RESOURCE_STATUS_INSTALLED:
                score+=INSTALL_SCORE;
              break;
default :
            score+=1;
          break;
      }
    }
    updateProgress(10 + (int)Math.ceil(50 * (score * 1.0 / max)));
  }
  public void incrementProgress(  int complete,  int total){
    updateProgress(currentProgress + (int)Math.ceil(block * (complete * 1.0 / total)));
  }
}
);
if (global.isEmpty()) {
  this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
}
manager.init(CommCareUtil.getProfileReference(),global,false);
updateProgress(60);
}
 catch (UnfullfilledRequirementsException e) {
if (e.getSeverity() == UnfullfilledRequirementsException.SEVERITY_PROMPT) {
  String message=e.getMessage();
  if (e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION || e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION) {
    message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
  }
  if (this.blockForResponse(message)) {
    try {
      RetrieveGlobalResourceTable().clear();
      manager.init(CommCareUtil.getProfileReference(),RetrieveGlobalResourceTable(),true);
    }
 catch (    UnfullfilledRequirementsException e1) {
      throw e1;
    }
catch (    UnresolvedResourceException e3) {
      throw new RuntimeException(e3.getMessage());
    }
  }
 else {
    throw e;
  }
}
 else {
  throw e;
}
}
catch (UnresolvedResourceException e) {
throw new RuntimeException(e.getMessage());
}
currentProgress=60;
block=30;
if (!CommCareUtil.getAppProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && !CommCareProperties.PROPERTY_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.CONTENT_VALIDATED))) {
String failureMessage=this.validate();
while (failureMessage != null) {
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.blockForResponse(failureMessage,""String_Node_Str"",""String_Node_Str"");
  if (this.response == CommCareInitializer.RESPONSE_YES) {
    failureMessage=this.validate();
  }
 else {
    CommCareContext.this.exitApp();
    return false;
  }
}
PropertyManager._().setProperty(CommCareProperties.CONTENT_VALIDATED,CommCareProperties.PROPERTY_YES);
}
updateProgress(90);
Localization.setLocale(""String_Node_Str"");
manager.initialize(RetrieveGlobalResourceTable());
purgeScheduler(false);
postProfilePropertyInit();
initUserFramework();
LogReportUtils.initPendingDates(new Date().getTime());
LanguageUtils.initializeLanguage(true,""String_Node_Str"");
updateProgress(95);
J2MEDisplay.init(CommCareContext.this.midlet);
if (CommCareSense.isAutoSendEnabled()) {
AutomatedSenderService.InitializeAndSpawnSenderService();
}
return true;
}
protected void askForResponse(String message,YesNoListener yesNoListener,boolean yesNo){
if (yesNo) {
interaction.AskYesNo(message,yesNoListener);
}
 else {
interaction.PromptResponse(message,yesNoListener);
}
}
protected void askForResponse(String message,YesNoListener yesNoListener,boolean yesNo,String left,String right){
if (yesNo) {
interaction.AskYesNo(message,yesNoListener,left,right);
}
 else {
interaction.PromptResponse(message,yesNoListener);
}
}
protected void setMessage(String message){
interaction.setMessage(message,true);
}
protected void updateProgress(int progress){
interaction.updateProgess(progress);
}
}
;
initializer.initialize(listener);
}","public void configureApp(MIDlet m,InitializationListener listener){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  setProperties();
  loadModules();
  registerAddtlStorage();
  StorageManager.repairAll();
  RMSTransaction.cleanup();
  initReferences();
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  final CommCareStartupInteraction interaction=new CommCareStartupInteraction(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  Display.getDisplay(m).setCurrent(interaction);
  CommCareInitializer initializer=new CommCareInitializer(){
    int currentProgress=0;
    int block=0;
    private String validate(){
      this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
      SizeBoundUniqueVector<MissingMediaException> problems=new SizeBoundUniqueVector<MissingMediaException>(10);
      global.verifyInstallation(problems);
      if (problems.size() > 0) {
        int badImageRef=problems.getBadImageReferenceCount();
        int badAudioRef=problems.getBadAudioReferenceCount();
        int badVideoRef=problems.getBadVideoReferenceCount();
        String errorMessage=""String_Node_Str"";
        String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",errorMessage,new String[]{""String_Node_Str"" + badImageRef,""String_Node_Str"" + badAudioRef,""String_Node_Str"" + badVideoRef});
        Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
        for (Enumeration en=problems.elements(); en.hasMoreElements(); ) {
          MissingMediaException ure=(MissingMediaException)en.nextElement();
          String res=ure.getResource().getResourceId();
          Vector<String> list;
          if (problemList.containsKey(res)) {
            list=problemList.get(res);
          }
 else {
            list=new Vector<String>();
          }
          int substringIndex=ure.getMessage().indexOf(""String_Node_Str"");
          String shortenedMessage=(ure.getMessage()).substring(substringIndex + 1);
          list.addElement(shortenedMessage);
          problemList.put(res,list);
        }
        message+=""String_Node_Str"";
        for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
          String resource=(String)en.nextElement();
          for (          String s : problemList.get(resource)) {
            message+=""String_Node_Str"" + s;
          }
        }
        if (problems.getAdditional() > 0) {
          message+=""String_Node_Str"" + problems.getAdditional() + ""String_Node_Str"";
        }
        return message;
      }
      return null;
    }
    protected boolean runWrapper() throws UnfullfilledRequirementsException {
      updateProgress(10);
      ((IStorageUtilityIndexed)StorageManager.getStorage(FormDef.STORAGE_KEY)).getIDsForValue(""String_Node_Str"",""String_Node_Str"");
      CommCareContext.ClearUpdateTable();
      manager=new CommCarePlatform(CommCareUtil.getMajorVersion(),CommCareUtil.getMinorVersion());
      try {
        ResourceTable global=RetrieveGlobalResourceTable();
        ResourceTable upgrade=CommCareContext.CreateTemporaryResourceTable(CommCareUpgradeState.UPGRADE_TABLE_NAME);
        if (global.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNCOMMITED) {
          global.rollbackCommits();
        }
        if (upgrade.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNCOMMITED) {
          upgrade.rollbackCommits();
        }
        if (global.getTableReadiness() == ResourceTable.RESOURCE_TABLE_UNSTAGED) {
          global.repairTable(upgrade);
        }
        global.setStateListener(new TableStateListener(){
          static final int INSTALL_SCORE=5;
          public void resourceStateUpdated(          ResourceTable table){
            int score=0;
            int max=0;
            Vector<Resource> resources=CommCarePlatform.getResourceListFromProfile(table);
            max=resources.size() * INSTALL_SCORE;
            if (max <= INSTALL_SCORE * 2) {
              return;
            }
            for (            Resource r : resources) {
switch (r.getStatus()) {
case Resource.RESOURCE_STATUS_INSTALLED:
                score+=INSTALL_SCORE;
              break;
default :
            score+=1;
          break;
      }
    }
    updateProgress(10 + (int)Math.ceil(50 * (score * 1.0 / max)));
  }
  public void incrementProgress(  int complete,  int total){
    updateProgress(currentProgress + (int)Math.ceil(block * (complete * 1.0 / total)));
  }
}
);
if (global.isEmpty()) {
  this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
}
manager.init(CommCareUtil.getProfileReference(),global,false);
updateProgress(60);
}
 catch (UnfullfilledRequirementsException e) {
if (e.getSeverity() == UnfullfilledRequirementsException.SEVERITY_PROMPT) {
  String message=e.getMessage();
  if (e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION || e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION) {
    message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
  }
  if (this.blockForResponse(message)) {
    try {
      RetrieveGlobalResourceTable().clear();
      manager.init(CommCareUtil.getProfileReference(),RetrieveGlobalResourceTable(),true);
    }
 catch (    UnfullfilledRequirementsException e1) {
      throw e1;
    }
catch (    UnresolvedResourceException e3) {
      throw new RuntimeException(e3.getMessage());
    }
  }
 else {
    throw e;
  }
}
 else {
  throw e;
}
}
catch (UnresolvedResourceException e) {
throw new RuntimeException(e.getMessage());
}
currentProgress=60;
block=30;
if (!CommCareUtil.getAppProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && !CommCareProperties.PROPERTY_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.CONTENT_VALIDATED))) {
String failureMessage=this.validate();
while (failureMessage != null) {
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.blockForResponse(failureMessage,""String_Node_Str"",""String_Node_Str"");
  if (this.response == CommCareInitializer.RESPONSE_YES) {
    failureMessage=this.validate();
  }
 else {
    CommCareContext.this.exitApp();
    return false;
  }
}
PropertyManager._().setProperty(CommCareProperties.CONTENT_VALIDATED,CommCareProperties.PROPERTY_YES);
}
updateProgress(90);
Localization.setLocale(""String_Node_Str"");
manager.initialize(RetrieveGlobalResourceTable());
purgeScheduler(false);
postProfilePropertyInit();
initUserFramework();
LogReportUtils.initPendingDates(new Date().getTime());
LanguageUtils.initializeLanguage(true,""String_Node_Str"");
updateProgress(95);
J2MEDisplay.init(CommCareContext.this.midlet);
if (CommCareSense.isAutoSendEnabled()) {
AutomatedSenderService.InitializeAndSpawnSenderService();
}
return true;
}
protected void askForResponse(String message,YesNoListener yesNoListener,boolean yesNo){
if (yesNo) {
interaction.AskYesNo(message,yesNoListener);
}
 else {
interaction.PromptResponse(message,yesNoListener);
}
}
protected void askForResponse(String message,YesNoListener yesNoListener,boolean yesNo,String left,String right){
if (yesNo) {
interaction.AskYesNo(message,yesNoListener,left,right);
}
 else {
interaction.PromptResponse(message,yesNoListener);
}
}
protected void setMessage(String message){
interaction.setMessage(message,true);
}
protected void updateProgress(int progress){
interaction.updateProgess(progress);
}
}
;
initializer.initialize(listener);
}",0.9992160961588712
144832,"private String validate(){
  this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  SizeBoundVector<MissingMediaException> problems=new SizeBoundVector<MissingMediaException>(10);
  global.verifyInstallation(problems);
  if (problems.size() > 0) {
    int badImageRef=problems.getBadImageReferenceCount();
    int badAudioRef=problems.getBadAudioReferenceCount();
    int badVideoRef=problems.getBadVideoReferenceCount();
    String errorMessage=""String_Node_Str"";
    String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",errorMessage,new String[]{""String_Node_Str"" + badImageRef,""String_Node_Str"" + badAudioRef,""String_Node_Str"" + badVideoRef});
    Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
    for (Enumeration en=problems.elements(); en.hasMoreElements(); ) {
      MissingMediaException ure=(MissingMediaException)en.nextElement();
      String res=ure.getResource().getResourceId();
      Vector<String> list;
      if (problemList.containsKey(res)) {
        list=problemList.get(res);
      }
 else {
        list=new Vector<String>();
      }
      int substringIndex=ure.getMessage().indexOf(""String_Node_Str"");
      String shortenedMessage=(ure.getMessage()).substring(substringIndex + 1);
      list.addElement(shortenedMessage);
      problemList.put(res,list);
    }
    message+=""String_Node_Str"";
    for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
      String resource=(String)en.nextElement();
      for (      String s : problemList.get(resource)) {
        message+=""String_Node_Str"" + s;
      }
    }
    if (problems.getAdditional() > 0) {
      message+=""String_Node_Str"" + problems.getAdditional() + ""String_Node_Str"";
    }
    return message;
  }
  return null;
}","private String validate(){
  this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  SizeBoundUniqueVector<MissingMediaException> problems=new SizeBoundUniqueVector<MissingMediaException>(10);
  global.verifyInstallation(problems);
  if (problems.size() > 0) {
    int badImageRef=problems.getBadImageReferenceCount();
    int badAudioRef=problems.getBadAudioReferenceCount();
    int badVideoRef=problems.getBadVideoReferenceCount();
    String errorMessage=""String_Node_Str"";
    String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",errorMessage,new String[]{""String_Node_Str"" + badImageRef,""String_Node_Str"" + badAudioRef,""String_Node_Str"" + badVideoRef});
    Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
    for (Enumeration en=problems.elements(); en.hasMoreElements(); ) {
      MissingMediaException ure=(MissingMediaException)en.nextElement();
      String res=ure.getResource().getResourceId();
      Vector<String> list;
      if (problemList.containsKey(res)) {
        list=problemList.get(res);
      }
 else {
        list=new Vector<String>();
      }
      int substringIndex=ure.getMessage().indexOf(""String_Node_Str"");
      String shortenedMessage=(ure.getMessage()).substring(substringIndex + 1);
      list.addElement(shortenedMessage);
      problemList.put(res,list);
    }
    message+=""String_Node_Str"";
    for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
      String resource=(String)en.nextElement();
      for (      String s : problemList.get(resource)) {
        message+=""String_Node_Str"" + s;
      }
    }
    if (problems.getAdditional() > 0) {
      message+=""String_Node_Str"" + problems.getAdditional() + ""String_Node_Str"";
    }
    return message;
  }
  return null;
}",0.9967051070840196
144833,"public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundVector sizeBoundProblems=(SizeBoundVector)problems;
  Suite mSuite;
  try {
    mSuite=(Suite)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  try {
    Hashtable<String,Entry> mHashtable=mSuite.getEntries();
    for (Enumeration en=mHashtable.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
    }
    Vector<Menu> menus=mSuite.getMenus();
    Iterator e=menus.iterator();
    int missingAURI=0;
    int missingIURI=0;
    while (e.hasNext()) {
      Menu mMenu=(Menu)e.next();
      String aURI=mMenu.getAudioURI();
      String iURI=mMenu.getImageURI();
      if (aURI != null) {
        Reference aRef=ReferenceManager._().DeriveReference(aURI);
        String aLocalName=aRef.getLocalURI();
        if (!aRef.doesBinaryExist()) {
          sizeBoundProblems.addElement(new MissingMediaException(r,aLocalName));
          sizeBoundProblems.addBadAudioReference();
          missingAURI++;
        }
      }
      if (iURI != null) {
        Reference iRef=ReferenceManager._().DeriveReference(iURI);
        String iLocalName=iRef.getLocalURI();
        if (!iRef.doesBinaryExist()) {
          sizeBoundProblems.addElement(new MissingMediaException(r,iLocalName));
          sizeBoundProblems.addBadImageReference();
          missingIURI++;
        }
      }
    }
  }
 catch (  Exception exc) {
    System.out.println(""String_Node_Str"" + exc.getMessage());
    System.out.println(""String_Node_Str"" + exc.toString());
  }
  if (problems.size() == 0) {
    return false;
  }
  return true;
}","public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundUniqueVector sizeBoundProblems=(SizeBoundUniqueVector)problems;
  Suite mSuite;
  try {
    mSuite=(Suite)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  try {
    Hashtable<String,Entry> mHashtable=mSuite.getEntries();
    for (Enumeration en=mHashtable.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
    }
    Vector<Menu> menus=mSuite.getMenus();
    Iterator e=menus.iterator();
    int missingAURI=0;
    int missingIURI=0;
    while (e.hasNext()) {
      Menu mMenu=(Menu)e.next();
      String aURI=mMenu.getAudioURI();
      String iURI=mMenu.getImageURI();
      if (aURI != null) {
        Reference aRef=ReferenceManager._().DeriveReference(aURI);
        String aLocalName=aRef.getLocalURI();
        if (!aRef.doesBinaryExist()) {
          sizeBoundProblems.addElement(new MissingMediaException(r,aLocalName));
          sizeBoundProblems.addBadAudioReference();
          missingAURI++;
        }
      }
      if (iURI != null) {
        Reference iRef=ReferenceManager._().DeriveReference(iURI);
        String iLocalName=iRef.getLocalURI();
        if (!iRef.doesBinaryExist()) {
          sizeBoundProblems.addElement(new MissingMediaException(r,iLocalName));
          sizeBoundProblems.addBadImageReference();
          missingIURI++;
        }
      }
    }
  }
 catch (  Exception exc) {
    System.out.println(""String_Node_Str"" + exc.getMessage());
    System.out.println(""String_Node_Str"" + exc.toString());
  }
  if (problems.size() == 0) {
    return false;
  }
  return true;
}",0.9965576592082616
144834,"public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundVector sizeBoundProblems=(SizeBoundVector)problems;
  FormDef formDef;
  try {
    formDef=(FormDef)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  Localizer localizer=formDef.getLocalizer();
  formDef=null;
  if (localizer == null) {
    return false;
  }
  int missingVideoCount=0;
  int missingImageCount=0;
  int missingAudioCount=0;
  for (  String locale : localizer.getAvailableLocales()) {
    OrderedHashtable<String,PrefixTreeNode> localeData=localizer.getLocaleData(locale);
    for (Enumeration en=localeData.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      if (key.indexOf(""String_Node_Str"") != -1) {
        String form=key.substring(key.indexOf(""String_Node_Str"") + 1,key.length());
        if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO) || form.equals(FormEntryCaption.TEXT_FORM_AUDIO) || form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
          try {
            String externalMedia=localeData.get(key).render();
            Reference ref=ReferenceManager._().DeriveReference(externalMedia);
            String localName=ref.getLocalURI();
            try {
              if (!ref.doesBinaryExist()) {
                sizeBoundProblems.addElement(new MissingMediaException(r,localName));
                if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO)) {
                  sizeBoundProblems.addBadVideoReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_AUDIO)) {
                  sizeBoundProblems.addBadAudioReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
                  sizeBoundProblems.addBadImageReference();
                }
              }
            }
 catch (            IOException e) {
              sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str"" + localName));
            }
          }
 catch (          InvalidReferenceException e) {
          }
        }
      }
    }
  }
  if (sizeBoundProblems.size() == 0) {
    return false;
  }
  return true;
}","public boolean verifyInstallation(Resource r,Vector<MissingMediaException> problems){
  SizeBoundUniqueVector sizeBoundProblems=(SizeBoundUniqueVector)problems;
  FormDef formDef;
  try {
    formDef=(FormDef)storage().read(cacheLocation);
  }
 catch (  Exception e) {
    sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str""));
    return true;
  }
  Localizer localizer=formDef.getLocalizer();
  formDef=null;
  if (localizer == null) {
    return false;
  }
  int missingVideoCount=0;
  int missingImageCount=0;
  int missingAudioCount=0;
  for (  String locale : localizer.getAvailableLocales()) {
    OrderedHashtable<String,PrefixTreeNode> localeData=localizer.getLocaleData(locale);
    for (Enumeration en=localeData.keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      if (key.indexOf(""String_Node_Str"") != -1) {
        String form=key.substring(key.indexOf(""String_Node_Str"") + 1,key.length());
        if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO) || form.equals(FormEntryCaption.TEXT_FORM_AUDIO) || form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
          try {
            String externalMedia=localeData.get(key).render();
            Reference ref=ReferenceManager._().DeriveReference(externalMedia);
            String localName=ref.getLocalURI();
            try {
              if (!ref.doesBinaryExist()) {
                sizeBoundProblems.addElement(new MissingMediaException(r,localName));
                if (form.equals(FormEntryCaption.TEXT_FORM_VIDEO)) {
                  sizeBoundProblems.addBadVideoReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_AUDIO)) {
                  sizeBoundProblems.addBadAudioReference();
                }
                if (form.equals(FormEntryCaption.TEXT_FORM_IMAGE)) {
                  sizeBoundProblems.addBadImageReference();
                }
              }
            }
 catch (            IOException e) {
              sizeBoundProblems.addElement(new MissingMediaException(r,""String_Node_Str"" + localName));
            }
          }
 catch (          InvalidReferenceException e) {
          }
        }
      }
    }
  }
  if (sizeBoundProblems.size() == 0) {
    return false;
  }
  return true;
}",0.997355663287792
144835,"private static Recalculate buildCalculate(String xpath,IDataReference contextRef){
  XPathConditional calc;
  try {
    calc=new XPathConditional(xpath);
  }
 catch (  XPathSyntaxException xse) {
    System.err.println(""String_Node_Str"" + xpath + ""String_Node_Str"");
    return null;
  }
  Recalculate r=new Recalculate(calc,FormInstance.unpackReference(contextRef));
  return r;
}","private static Recalculate buildCalculate(String xpath,IDataReference contextRef) throws XPathSyntaxException {
  XPathConditional calc=new XPathConditional(xpath);
  Recalculate r=new Recalculate(calc,FormInstance.unpackReference(contextRef));
  return r;
}",0.6635367762128326
144836,"protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref=new XPathReference(nodeset);
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      System.err.println(""String_Node_Str"" + xpathConstr + ""String_Node_Str""+ getVagueLocation(e));
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r=buildCalculate(xpathCalc,ref);
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}","protected DataBinding processStandardBindAttributes(Vector usedAtts,Element e){
  usedAtts.addElement(ID_ATTR);
  usedAtts.addElement(NODESET_ATTR);
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  usedAtts.addElement(""String_Node_Str"");
  DataBinding binding=new DataBinding();
  binding.setId(e.getAttributeValue(""String_Node_Str"",ID_ATTR));
  String nodeset=e.getAttributeValue(null,NODESET_ATTR);
  if (nodeset == null) {
    throw new XFormParseException(""String_Node_Str"",e);
  }
  IDataReference ref=new XPathReference(nodeset);
  ref=getAbsRef(ref,_f);
  binding.setReference(ref);
  binding.setDataType(getDataType(e.getAttributeValue(null,""String_Node_Str"")));
  String xpathRel=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRel != null) {
    if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRel)) {
      binding.relevantAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRel,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.relevancyCondition=c;
    }
  }
  String xpathReq=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathReq != null) {
    if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathReq)) {
      binding.requiredAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathReq,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.requiredCondition=c;
    }
  }
  String xpathRO=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathRO != null) {
    if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=true;
    }
 else     if (""String_Node_Str"".equals(xpathRO)) {
      binding.readonlyAbsolute=false;
    }
 else {
      Condition c=buildCondition(xpathRO,""String_Node_Str"",ref);
      c=(Condition)_f.addTriggerable(c);
      binding.readonlyCondition=c;
    }
  }
  String xpathConstr=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathConstr != null) {
    try {
      binding.constraint=new XPathConditional(xpathConstr);
    }
 catch (    XPathSyntaxException xse) {
      System.err.println(""String_Node_Str"" + xpathConstr + ""String_Node_Str""+ getVagueLocation(e));
    }
    binding.constraintMessage=e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"");
  }
  String xpathCalc=e.getAttributeValue(null,""String_Node_Str"");
  if (xpathCalc != null) {
    Recalculate r;
    try {
      r=buildCalculate(xpathCalc,ref);
    }
 catch (    XPathSyntaxException xpse) {
      throw new XFormParseException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xpse.getMessage()+ ""String_Node_Str""+ xpathCalc);
    }
    r=(Recalculate)_f.addTriggerable(r);
    binding.calculate=r;
  }
  binding.setPreload(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  binding.setPreloadParams(e.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str""));
  return binding;
}",0.9673347009626004
144837,"/** 
 * Makes some (or all) of the table's resources available
 * @param master The global resource to prepare against. Used to establish whether resources need to be fetchedremotely
 * @param instance The instance to prepare against
 * @param toInitialize The ID of a single resource after which the table preparation can stop.
 * @throws UnresolvedResourceException If a resource could not be identified and is required
 * @throws UnfullfilledRequirementsException If some resources are incompatible with the current version of CommCare
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Stack<Resource> v=GetUnreadyResources();
  int round=-1;
  while (!v.isEmpty() && (toInitialize == null || this.getResourceWithId(toInitialize).getStatus() == Resource.RESOURCE_STATUS_UNINITIALIZED)) {
    round++;
    System.out.println(""String_Node_Str"" + round + ""String_Node_Str""+ v.size()+ ""String_Node_Str"");
    while (!v.isEmpty()) {
      Resource r=v.pop();
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            commit(r,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
 else {
            upgrade=true;
          }
          invalid=ResourceTable.explodeLocalReferences(peer,master);
        }
      }
      boolean handled=false;
      UnreliableSourceException theFailure=null;
      for (      ResourceLocation location : r.getLocations()) {
        if (handled) {
          break;
        }
        if (location.isRelative()) {
          for (          Reference ref : explodeReferences(location,r,this,master)) {
            if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL && invalid.contains(ref)) {
              System.out.println(""String_Node_Str"" + location.getLocation());
            }
 else {
              try {
                handled=installResource(r,location,ref,this,instance,upgrade);
              }
 catch (              UnreliableSourceException use) {
                System.out.println(""String_Node_Str"");
                theFailure=use;
                handled=false;
                if (use.shouldBreak()) {
                  break;
                }
              }
              if (handled) {
                break;
              }
            }
          }
        }
 else {
          try {
            handled=installResource(r,location,ReferenceManager._().DeriveReference(location.getLocation()),this,instance,upgrade);
            if (handled) {
              break;
            }
          }
 catch (          InvalidReferenceException ire) {
            ire.printStackTrace();
          }
catch (          UnreliableSourceException use) {
            System.out.println(""String_Node_Str"");
            theFailure=use;
            handled=false;
            if (use.shouldBreak()) {
              break;
            }
          }
        }
      }
      if (!handled) {
        if (theFailure == null) {
          throw new UnresolvedResourceException(r,""String_Node_Str"" + r.getResourceId());
        }
 else {
          throw theFailure;
        }
      }
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    v=GetUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : GetResources(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}","/** 
 * Makes some (or all) of the table's resources available
 * @param master The global resource to prepare against. Used to establish whether resources need to be fetchedremotely
 * @param instance The instance to prepare against
 * @param toInitialize The ID of a single resource after which the table preparation can stop.
 * @throws UnresolvedResourceException If a resource could not be identified and is required
 * @throws UnfullfilledRequirementsException If some resources are incompatible with the current version of CommCare
 */
public void prepareResources(ResourceTable master,CommCareInstance instance,String toInitialize) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  Stack<Resource> v=GetUnreadyResources();
  int round=-1;
  while (!v.isEmpty() && (toInitialize == null || this.getResourceWithId(toInitialize).getStatus() == Resource.RESOURCE_STATUS_UNINITIALIZED)) {
    round++;
    System.out.println(""String_Node_Str"" + round + ""String_Node_Str""+ v.size()+ ""String_Node_Str"");
    while (!v.isEmpty()) {
      Resource r=v.pop();
      boolean upgrade=false;
      Vector<Reference> invalid=new Vector<Reference>();
      if (master != null) {
        Resource peer=master.getResourceWithId(r.getResourceId());
        if (peer != null) {
          if (!r.isNewer(peer)) {
            commit(r,Resource.RESOURCE_STATUS_INSTALLED);
            continue;
          }
 else {
            upgrade=true;
          }
          invalid=ResourceTable.explodeLocalReferences(peer,master);
        }
      }
      boolean handled=false;
      UnreliableSourceException theFailure=null;
      for (      ResourceLocation location : r.getLocations()) {
        if (handled) {
          break;
        }
        if (location.isRelative()) {
          for (          Reference ref : explodeReferences(location,r,this,master)) {
            if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL && invalid.contains(ref)) {
              System.out.println(""String_Node_Str"" + location.getLocation());
            }
 else {
              try {
                handled=installResource(r,location,ref,this,instance,upgrade);
              }
 catch (              UnreliableSourceException use) {
                theFailure=use;
              }
              if (handled) {
                break;
              }
            }
          }
        }
 else {
          try {
            handled=installResource(r,location,ReferenceManager._().DeriveReference(location.getLocation()),this,instance,upgrade);
            if (handled) {
              break;
            }
          }
 catch (          InvalidReferenceException ire) {
            ire.printStackTrace();
          }
catch (          UnreliableSourceException use) {
            theFailure=use;
          }
        }
      }
      if (!handled) {
        if (theFailure == null) {
          throw new UnresolvedResourceException(r,""String_Node_Str"" + r.getResourceId());
        }
 else {
          throw theFailure;
        }
      }
      if (stateListener != null) {
        stateListener.resourceStateUpdated(this);
      }
    }
    v=GetUnreadyResources();
  }
  if (toInitialize != null) {
    return;
  }
  for (  Resource stillPending : GetResources(Resource.RESOURCE_STATUS_PENDING)) {
    this.removeResource(stillPending);
  }
}",0.884417808219178
144838,"/** 
 * This just calls the resource's installer directly, but also handles the logic around attempting retries if applicable
 * @throws UnfullfilledRequirementsException 
 */
private boolean installResource(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  UnreliableSourceException aFailure=null;
  for (int i=0; i < 1 + this.numberOfLossyRetries; ++i) {
    try {
      return r.getInstaller().install(r,location,ref,table,instance,upgrade);
    }
 catch (    UnreliableSourceException use) {
      System.out.println(""String_Node_Str"");
      aFailure=use;
      Logger.log(""String_Node_Str"",""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (numberOfLossyRetries + 1)+ ""String_Node_Str""+ ref.getURI()+ ""String_Node_Str""+ use.getMessage());
      if (use.shouldBreak()) {
        break;
      }
    }
  }
  if (aFailure != null) {
    throw aFailure;
  }
  return false;
}","/** 
 * This just calls the resource's installer directly, but also handles the logic around attempting retries if applicable
 * @throws UnfullfilledRequirementsException 
 */
private boolean installResource(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException, UnfullfilledRequirementsException {
  UnreliableSourceException aFailure=null;
  for (int i=0; i < 1 + this.numberOfLossyRetries; ++i) {
    try {
      return r.getInstaller().install(r,location,ref,table,instance,upgrade);
    }
 catch (    UnreliableSourceException use) {
      aFailure=use;
      Logger.log(""String_Node_Str"",""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (numberOfLossyRetries + 1)+ ""String_Node_Str""+ ref.getURI()+ ""String_Node_Str""+ use.getMessage());
    }
  }
  if (aFailure != null) {
    throw aFailure;
  }
  return false;
}",0.8655941878567722
144839,"public UnreliableSourceException(Resource r,String message,boolean shouldBreak){
  super(r,message);
  this.shouldBreak=shouldBreak;
}","public UnreliableSourceException(Resource r,String message){
  super(r,message);
}",0.7592592592592593
144840,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  InputStream incoming=null;
  try {
    if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
      return false;
    }
 else {
      incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      FormDef formDef=new XFormParser(new InputStreamReader(incoming,""String_Node_Str"")).parse();
      if (formDef == null) {
        return false;
      }
      if (upgrade) {
        formDef.getInstance().schema=formDef.getInstance().schema + ""String_Node_Str"";
        storage().write(formDef);
        cacheLocation=formDef.getID();
        table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
      }
 else {
        storage().write(formDef);
        cacheLocation=formDef.getID();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
      }
      return true;
    }
  }
 catch (  StorageFullException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    throw new UnreliableSourceException(r,e.getMessage());
  }
catch (  XFormParseException xpe) {
    System.out.println(""String_Node_Str"");
    throw new UnreliableSourceException(r,xpe.getMessage(),true);
  }
 finally {
    try {
      if (incoming != null) {
        incoming.close();
      }
    }
 catch (    IOException e) {
    }
  }
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  InputStream incoming=null;
  try {
    if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_CACHE) {
      return false;
    }
 else {
      incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      FormDef formDef=new XFormParser(new InputStreamReader(incoming,""String_Node_Str"")).parse();
      if (formDef == null) {
        return false;
      }
      if (upgrade) {
        formDef.getInstance().schema=formDef.getInstance().schema + ""String_Node_Str"";
        storage().write(formDef);
        cacheLocation=formDef.getID();
        table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
      }
 else {
        storage().write(formDef);
        cacheLocation=formDef.getID();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
      }
      return true;
    }
  }
 catch (  StorageFullException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    throw new UnreliableSourceException(r,e.getMessage());
  }
catch (  XFormParseException xpe) {
    throw new UnresolvedResourceException(r,""String_Node_Str"" + ref.getURI() + ""String_Node_Str""+ xpe.getMessage(),true);
  }
 finally {
    try {
      if (incoming != null) {
        incoming.close();
      }
    }
 catch (    IOException e) {
    }
  }
}",0.9520524318730595
144841,"public void statusUpdate(int statusNumber){
switch (statusNumber) {
case CommCareOTARestoreListener.REGULAR_START:
    entry.sendMessage(""String_Node_Str"");
  return;
case CommCareOTARestoreListener.BYPASS_START:
view.addToMessage(Localization.get(""String_Node_Str"",new String[]{mRestorer.getBypassRef().getLocalURI()}));
break;
case CommCareOTARestoreListener.BYPASS_CLEAN:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.BYPASS_CLEAN_SUCCESS:
view.addToMessage(Localization.get(""String_Node_Str""));
return;
case CommCareOTARestoreListener.BYPASS_CLEANFAIL:
view.addToMessage(Localization.get(""String_Node_Str"",new String[]{mRestorer.getBypassRef().getLocalURI()}));
break;
case CommCareOTARestoreListener.BYPASS_FAIL:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_CREDENTIALS:
System.out.println(""String_Node_Str"");
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_FAILED:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_DB:
entry.sendMessage(Localization.get(""String_Node_Str""));
view.setMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_DB_BUSY:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_MADE:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_DOWNLOAD:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_SERVER:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL_OTHER:
entry.sendMessage(""String_Node_Str"");
break;
case CommCareOTARestoreListener.RESTORE_DOWNLOAD:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_RECOVER_SEND:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_NO_CACHE:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_DOWNLOADED:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_NEED_CACHE:
view.setMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_START:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_RECOVERY_WIPE:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_SUCCESS:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL_PARTIAL:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_FAIL_ENTRY:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
default :
}
}","public void statusUpdate(int statusNumber){
switch (statusNumber) {
case CommCareOTARestoreListener.REGULAR_START:
    entry.sendMessage(""String_Node_Str"");
  return;
case CommCareOTARestoreListener.BYPASS_START:
view.addToMessage(Localization.get(""String_Node_Str"",new String[]{mRestorer.getBypassRef().getLocalURI()}));
break;
case CommCareOTARestoreListener.BYPASS_CLEAN:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.BYPASS_CLEAN_SUCCESS:
view.addToMessage(Localization.get(""String_Node_Str""));
return;
case CommCareOTARestoreListener.BYPASS_CLEANFAIL:
view.addToMessage(Localization.get(""String_Node_Str"",new String[]{mRestorer.getBypassRef().getLocalURI()}));
break;
case CommCareOTARestoreListener.BYPASS_FAIL:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_CREDENTIALS:
System.out.println(""String_Node_Str"");
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_FAILED:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_DB:
entry.sendMessage(Localization.get(""String_Node_Str""));
view.setMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_DB_BUSY:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_MADE:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_DOWNLOAD:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_BAD_SERVER:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL_OTHER:
entry.sendMessage(""String_Node_Str"");
break;
case CommCareOTARestoreListener.RESTORE_DOWNLOAD:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_RECOVER_SEND:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_NO_CACHE:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_DOWNLOADED:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_NEED_CACHE:
setFailView(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_START:
view.addToMessage(Localization.get(""String_Node_Str""));
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_RECOVERY_WIPE:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_SUCCESS:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_FAIL_PARTIAL:
view.addToMessage(Localization.get(""String_Node_Str""));
break;
case CommCareOTARestoreListener.RESTORE_CONNECTION_FAIL_ENTRY:
entry.sendMessage(Localization.get(""String_Node_Str""));
break;
default :
}
}",0.9971453040251214
144842,"/** 
 */
private static void init(){
  if (globalLocalizer == null) {
    globalLocalizer=new Localizer(true,true);
  }
}","/** 
 */
private static void init(){
  if (globalLocalizer == null) {
    globalLocalizer=new Localizer(true,false);
  }
}",0.97119341563786
144843,"/** 
 * Retrieve the localized text for a text handle in the given locale. If no mapping is found initially, then, depending on enabled fallback modes, other places will be searched until a mapping is found. <p> The search order is thus: 1) Specified locale, specified text form 2) Specified locale, default text form 3) Default locale, specified text form 4) Default locale, default text form <p> (1) and (3) are only searched if a text form ('long', 'short', etc.) is specified. If a text form is specified, (2) and (4) are only searched if default-form-fallback mode is enabled. (3) and (4) are only searched if default-locale-fallback mode is enabled. It is not an error in this situation if no default locale is set; (3) and (4) will simply not be searched.
 * @param textID Text handle (text ID appended with optional text form). Must not be null.
 * @param locale Locale. Must be defined and not null.
 * @return Localized text. If no text is found after using all fallbacks, return null.
 * @throws UnregisteredLocaleException If the locale is not defined or null.
 * @throws NullPointerException if textID is null
 */
public String getText(String textID,String locale){
  String text=getRawText(locale,textID);
  if (text == null && fallbackDefaultForm && textID.indexOf(""String_Node_Str"") != -1)   text=getRawText(locale,textID.substring(0,textID.indexOf(""String_Node_Str"")));
  return text;
}","/** 
 * Retrieve the localized text for a text handle in the given locale. If no mapping is found initially, then, depending on enabled fallback modes, other places will be searched until a mapping is found. <p> The search order is thus: 1) Specified locale, specified text form 2) Specified locale, default text form 3) Default locale, specified text form 4) Default locale, default text form <p> (1) and (3) are only searched if a text form ('long', 'short', etc.) is specified. If a text form is specified, (2) and (4) are only searched if default-form-fallback mode is enabled. (3) and (4) are only searched if default-locale-fallback mode is enabled. It is not an error in this situation if no default locale is set; (3) and (4) will simply not be searched.
 * @param textID Text handle (text ID appended with optional text form). Must not be null.
 * @param locale Locale. Must be defined and not null.
 * @return Localized text. If no text is found after using all fallbacks, return null.
 * @throws UnregisteredLocaleException If the locale is not defined or null.
 * @throws NullPointerException if textID is null
 */
public String getText(String textID,String locale){
  String text=getRawText(locale,textID);
  if (text == null && fallbackDefaultForm && textID.indexOf(""String_Node_Str"") != -1)   text=getRawText(locale,textID.substring(0,textID.indexOf(""String_Node_Str"")));
  if (text == null && fallbackDefaultLocale && !locale.equals(defaultLocale) && defaultLocale != null && fallbackDefaultForm)   text=getText(textID,defaultLocale);
  return text;
}",0.9447811447811448
144844,"private Localizer buildLocalizer(int i,int j,int k,String ourLocale,String otherLocale){
  Localizer l=new Localizer(i / 2 == 0,i % 2 == 0);
  TableLocaleSource firstLocale=new TableLocaleSource();
  TableLocaleSource secondLocale=new TableLocaleSource();
  l.addAvailableLocale(ourLocale);
  l.registerLocaleResource(ourLocale,firstLocale);
  l.setLocale(ourLocale);
  if (otherLocale != null) {
    l.addAvailableLocale(otherLocale);
    l.registerLocaleResource(otherLocale,secondLocale);
  }
  if (l.hasLocale(""String_Node_Str"")) {
    l.setDefaultLocale(""String_Node_Str"");
  }
  if (j / 2 == 0)   firstLocale.setLocaleMapping(""String_Node_Str"",""String_Node_Str"" + ourLocale + ""String_Node_Str"");
  if (j % 2 == 0)   firstLocale.setLocaleMapping(""String_Node_Str"",""String_Node_Str"" + ourLocale + ""String_Node_Str"");
  if (otherLocale != null) {
    if (k / 2 == 0)     secondLocale.setLocaleMapping(""String_Node_Str"",""String_Node_Str"" + otherLocale + ""String_Node_Str"");
    if (k % 2 == 0)     secondLocale.setLocaleMapping(""String_Node_Str"",""String_Node_Str"" + otherLocale + ""String_Node_Str"");
  }
  return l;
}","private Localizer buildLocalizer(int i,int j,int k,String ourLocale,String otherLocale){
  Localizer l=new Localizer(i / 2 == 0,i % 2 == 0);
  TableLocaleSource firstLocale=new TableLocaleSource();
  TableLocaleSource secondLocale=new TableLocaleSource();
  if (j / 2 == 0 || ""String_Node_Str"".equals(ourLocale))   firstLocale.setLocaleMapping(""String_Node_Str"",""String_Node_Str"" + ourLocale + ""String_Node_Str"");
  if (j % 2 == 0 || ""String_Node_Str"".equals(ourLocale))   firstLocale.setLocaleMapping(""String_Node_Str"",""String_Node_Str"" + ourLocale + ""String_Node_Str"");
  if (otherLocale != null) {
    if (k / 2 == 0 || ""String_Node_Str"".equals(otherLocale))     secondLocale.setLocaleMapping(""String_Node_Str"",""String_Node_Str"" + otherLocale + ""String_Node_Str"");
    if (k % 2 == 0 || ""String_Node_Str"".equals(otherLocale))     secondLocale.setLocaleMapping(""String_Node_Str"",""String_Node_Str"" + otherLocale + ""String_Node_Str"");
  }
  l.addAvailableLocale(ourLocale);
  l.registerLocaleResource(ourLocale,firstLocale);
  if (otherLocale != null) {
    l.addAvailableLocale(otherLocale);
    l.registerLocaleResource(otherLocale,secondLocale);
  }
  if (l.hasLocale(""String_Node_Str"")) {
    l.setDefaultLocale(""String_Node_Str"");
  }
  l.setLocale(ourLocale);
  return l;
}",0.4670558798999166
144845,"public Vector<TreeReference> evalNodeset(DataInstance model,EvaluationContext evalContext){
  if (expr instanceof XPathPathExpr) {
    return ((XPathPathExpr)expr).eval(model,evalContext).nodes;
  }
 else {
    throw new FatalException(""String_Node_Str"");
  }
}","public Vector<TreeReference> evalNodeset(DataInstance model,EvaluationContext evalContext){
  if (expr instanceof XPathPathExpr) {
    return ((XPathPathExpr)expr).eval(model,evalContext).getReferences();
  }
 else {
    throw new FatalException(""String_Node_Str"");
  }
}",0.962406015037594
144846,"private void performEvaluation(){
synchronized (evaluated) {
    if (evaluated.booleanValue()) {
      return;
    }
    nodes=ec.expandReference(unExpandedRef);
    for (int i=0; i < nodes.size(); i++) {
      if (!instance.resolveReference((TreeReference)nodes.elementAt(i)).isRelevant()) {
        nodes.removeElementAt(i);
        i--;
      }
    }
    evaluated=true;
  }
}","private void performEvaluation(){
synchronized (evaluated) {
    if (evaluated.booleanValue()) {
      return;
    }
    Vector<TreeReference> nodes=ec.expandReference(unExpandedRef);
    for (int i=0; i < nodes.size(); i++) {
      if (!instance.resolveReference((TreeReference)nodes.elementAt(i)).isRelevant()) {
        nodes.removeElementAt(i);
        i--;
      }
    }
    this.setReferences(nodes);
    evaluated=true;
  }
}",0.934648581997534
144847,"/** 
 * @return The value represented by this xpath. Can only be evaluated when this xpath represents exactly onereference, or when it represents 0 references after a filtering operation (a reference which _could_ have existed, but didn't, rather than a reference which could not represent a real node).
 */
public Object unpack(){
synchronized (evaluated) {
    if (evaluated.booleanValue()) {
      return super.unpack();
    }
    int size=unExpandedRef.size();
    boolean safe=true;
    ;
    for (int i=0; i < size; ++i) {
      if (unExpandedRef.getPredicate(i) != null) {
        safe=false;
        break;
      }
      int mult=unExpandedRef.getMultiplicity(i);
      if (!(mult >= 0 || mult == TreeReference.INDEX_UNBOUND)) {
        safe=false;
        break;
      }
    }
    if (!safe) {
      performEvaluation();
      return super.unpack();
    }
    return XPathPathExpr.getRefValue(instance,ec,unExpandedRef);
  }
}","/** 
 * @return The value represented by this xpath. Can only be evaluated when this xpath represents exactly onereference, or when it represents 0 references after a filtering operation (a reference which _could_ have existed, but didn't, rather than a reference which could not represent a real node).
 */
public Object unpack(){
synchronized (evaluated) {
    if (evaluated.booleanValue()) {
      return super.unpack();
    }
    int size=unExpandedRef.size();
    boolean safe=true;
    ;
    for (int i=0; i < size; ++i) {
      if (unExpandedRef.getPredicate(i) != null) {
        safe=false;
        break;
      }
      int mult=unExpandedRef.getMultiplicity(i);
      if (!(mult >= 0 || mult == TreeReference.INDEX_UNBOUND)) {
        safe=false;
        break;
      }
    }
    if (!safe) {
      performEvaluation();
      return super.unpack();
    }
    try {
      return XPathPathExpr.getRefValue(instance,ec,unExpandedRef);
    }
 catch (    XPathException xpe) {
      performEvaluation();
      return super.unpack();
    }
  }
}",0.9425403225806452
144848,"public boolean startRestore(InputStream input){
  listener.refreshView();
  listener.statusUpdate(CommCareOTARestoreListener.RESTORE_START);
  final InputStream fInput=input;
  if (recoveryMode) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_RECOVERY_WIPE);
    StorageManager.getStorage(Case.STORAGE_KEY).removeAll();
  }
  errorsOccurred=false;
  boolean success=false;
  String[] parseErrors=new String[0];
  String restoreID=null;
  System.out.println(""String_Node_Str"");
  try {
    beginTransaction();
    CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(!noPartial);
    DataModelPullParser parser=new DataModelPullParser(fInput,factory,listener);
    success=parser.parse();
    System.out.println(success ? ""String_Node_Str"" : ""String_Node_Str"");
    restoreID=factory.getRestoreId();
    caseTallies=factory.getCaseTallies();
    if (success) {
      transitions.commitSyncToken(restoreID);
      PropertyManager._().setProperty(CommCareProperties.LAST_SYNC_AT,DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_ISO8601));
    }
    parseErrors=parser.getParseErrors();
  }
 catch (  IOException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    return false;
  }
catch (  InvalidStructureException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  XmlPullParserException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  UnfullfilledRequirementsException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  RuntimeException e) {
    Logger.exception(e);
    listener.promptRetry(Localization.get(""String_Node_Str""));
    return false;
  }
 finally {
    if (success) {
      commitTransaction();
    }
 else {
      rollbackTransaction();
    }
  }
  if (success) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_SUCCESS);
    Logger.log(""String_Node_Str"",""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
  }
 else {
    if (noPartial) {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL);
    }
 else {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL_PARTIAL);
    }
    Logger.log(""String_Node_Str"",(noPartial ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
    for (    String s : parseErrors) {
      Logger.log(""String_Node_Str"",""String_Node_Str"" + s);
    }
    errorsOccurred=true;
  }
  listener.onSuccess();
  return success || !noPartial;
}","public boolean startRestore(InputStream input){
  listener.refreshView();
  listener.statusUpdate(CommCareOTARestoreListener.RESTORE_START);
  final InputStream fInput=input;
  if (recoveryMode) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_RECOVERY_WIPE);
    StorageManager.getStorage(Case.STORAGE_KEY).removeAll();
  }
  errorsOccurred=false;
  boolean success=false;
  String[] parseErrors=new String[0];
  String restoreID=null;
  System.out.println(""String_Node_Str"");
  try {
    beginTransaction();
    CommCareTransactionParserFactory factory=new CommCareTransactionParserFactory(!noPartial);
    DataModelPullParser parser=new DataModelPullParser(fInput,factory,listener);
    parser.requireRootEnvelopeType(""String_Node_Str"");
    success=parser.parse();
    System.out.println(success ? ""String_Node_Str"" : ""String_Node_Str"");
    restoreID=factory.getRestoreId();
    caseTallies=factory.getCaseTallies();
    if (success) {
      transitions.commitSyncToken(restoreID);
      PropertyManager._().setProperty(CommCareProperties.LAST_SYNC_AT,DateUtils.formatDateTime(new Date(),DateUtils.FORMAT_ISO8601));
    }
    parseErrors=parser.getParseErrors();
  }
 catch (  IOException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    return false;
  }
catch (  InvalidStructureException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  XmlPullParserException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  UnfullfilledRequirementsException e) {
    listener.promptRetry(Localization.get(""String_Node_Str""));
    Logger.exception(e);
    return false;
  }
catch (  RuntimeException e) {
    Logger.exception(e);
    listener.promptRetry(Localization.get(""String_Node_Str""));
    return false;
  }
 finally {
    if (success) {
      commitTransaction();
    }
 else {
      rollbackTransaction();
    }
  }
  if (success) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_SUCCESS);
    Logger.log(""String_Node_Str"",""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
  }
 else {
    if (noPartial) {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL);
    }
 else {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL_PARTIAL);
    }
    Logger.log(""String_Node_Str"",(noPartial ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"" + (restoreID != null ? restoreID : ""String_Node_Str""));
    for (    String s : parseErrors) {
      Logger.log(""String_Node_Str"",""String_Node_Str"" + s);
    }
    errorsOccurred=true;
  }
  listener.onSuccess();
  return success || !noPartial;
}",0.9899026987332477
144849,"public Boolean parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  try {
    String rootName=parser.getName();
    String itemString=parser.getAttributeValue(null,""String_Node_Str"");
    int itemNumber=-1;
    if (itemString != null) {
      try {
        itemNumber=Integer.parseInt(itemString);
      }
 catch (      NumberFormatException e) {
        itemNumber=0;
      }
      rListener.setTotalForms(itemNumber);
    }
    parseBlock(rootName);
  }
  finally {
    try {
      is.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (errors.size() == 0) {
    return Boolean.TRUE;
  }
 else {
    return Boolean.FALSE;
  }
}","public Boolean parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  try {
    String rootName=parser.getName();
    if (requiredRootEnvelope != null && !requiredRootEnvelope.equals(rootName)) {
      throw new InvalidStructureException(""String_Node_Str"" + rootName + ""String_Node_Str""+ requiredRootEnvelope+ ""String_Node_Str"",parser);
    }
    String itemString=parser.getAttributeValue(null,""String_Node_Str"");
    int itemNumber=-1;
    if (itemString != null) {
      try {
        itemNumber=Integer.parseInt(itemString);
      }
 catch (      NumberFormatException e) {
        itemNumber=0;
      }
      rListener.setTotalForms(itemNumber);
    }
    parseBlock(rootName);
  }
  finally {
    try {
      is.close();
    }
 catch (    IOException ioe) {
    }
  }
  if (errors.size() == 0) {
    return Boolean.TRUE;
  }
 else {
    return Boolean.FALSE;
  }
}",0.8599388379204893
144850,"/** 
 * Get all of the elements which will need to be evaluated (in order) when the triggerable is fired.
 * @param t
 */
public void fillTriggeredElements(Triggerable t,Vector<Triggerable> destination){
  if (t.canCascade()) {
    for (int j=0; j < t.getTargets().size(); j++) {
      TreeReference target=(TreeReference)t.getTargets().elementAt(j);
      Vector<TreeReference> updatedNodes=new Vector<TreeReference>();
      updatedNodes.addElement(target);
      if (t.isCascadingToChildren()) {
        addChildrenOfReference(target,updatedNodes);
      }
      for (      TreeReference ref : updatedNodes) {
        Vector<Triggerable> triggered=(Vector<Triggerable>)triggerIndex.get(ref);
        if (triggered != null) {
          for (int k=0; k < triggered.size(); k++) {
            Triggerable u=(Triggerable)triggered.elementAt(k);
            if (!destination.contains(u))             destination.addElement(u);
          }
        }
      }
    }
  }
}","/** 
 * Get all of the elements which will need to be evaluated (in order) when the triggerable is fired.
 * @param t
 */
public void fillTriggeredElements(Triggerable t,Vector<Triggerable> destination){
  if (t.canCascade()) {
    for (int j=0; j < t.getTargets().size(); j++) {
      TreeReference target=(TreeReference)t.getTargets().elementAt(j);
      Vector<TreeReference> updatedNodes=new Vector<TreeReference>();
      updatedNodes.addElement(target);
      if (t.isCascadingToChildren()) {
        addChildrenOfReference(target,updatedNodes);
      }
      for (      TreeReference ref : updatedNodes) {
        Vector<Triggerable> triggered=(Vector<Triggerable>)triggerIndex.get(ref.hasPredicates() ? ref.removePredicates() : ref);
        if (triggered != null) {
          for (int k=0; k < triggered.size(); k++) {
            Triggerable u=(Triggerable)triggered.elementAt(k);
            if (!destination.contains(u))             destination.addElement(u);
          }
        }
      }
    }
  }
}",0.9762506316321374
144851,"public int hashCode(){
  int hash=(new Integer(refLevel)).hashCode();
  for (int i=0; i < size(); i++) {
    Integer mult=DataUtil.integer(getMultiplicity(i));
    if (i == 0 && mult.intValue() == INDEX_UNBOUND)     mult=DataUtil.integer(0);
    hash^=getName(i).hashCode();
    hash^=mult.hashCode();
  }
  return hash;
}","public int hashCode(){
  int hash=(new Integer(refLevel)).hashCode();
  for (int i=0; i < size(); i++) {
    Integer mult=DataUtil.integer(getMultiplicity(i));
    if (i == 0 && mult.intValue() == INDEX_UNBOUND)     mult=DataUtil.integer(0);
    hash^=getName(i).hashCode();
    hash^=mult.hashCode();
    Vector<XPathExpression> predicates=this.getPredicate(i);
    if (predicates == null) {
      continue;
    }
    int val=0;
    for (    XPathExpression xpe : predicates) {
      hash^=val;
      hash^=xpe.hashCode();
      ++val;
    }
  }
  return hash;
}",0.6983050847457627
144852,"private static void getTriggers(XPathExpression x,Vector<TreeReference> v,TreeReference contextRef){
  if (x instanceof XPathPathExpr) {
    TreeReference ref=((XPathPathExpr)x).getReference();
    TreeReference contextualized=ref;
    if (contextRef != null) {
      contextualized=ref.contextualize(contextRef);
    }
    if (!v.contains(contextualized)) {
      v.addElement(contextualized);
    }
    for (int i=0; i < ref.size(); i++) {
      Vector<XPathExpression> predicates=ref.getPredicate(i);
      if (predicates == null) {
        continue;
      }
      if (!ref.isAbsolute()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      TreeReference predicateContext=ref.getSubReference(i);
      for (      XPathExpression predicate : predicates) {
        getTriggers(predicate,v,predicateContext);
      }
    }
  }
 else   if (x instanceof XPathBinaryOpExpr) {
    getTriggers(((XPathBinaryOpExpr)x).a,v,contextRef);
    getTriggers(((XPathBinaryOpExpr)x).b,v,contextRef);
  }
 else   if (x instanceof XPathUnaryOpExpr) {
    getTriggers(((XPathUnaryOpExpr)x).a,v,contextRef);
  }
 else   if (x instanceof XPathFuncExpr) {
    XPathFuncExpr fx=(XPathFuncExpr)x;
    for (int i=0; i < fx.args.length; i++)     getTriggers(fx.args[i],v,contextRef);
  }
}","private static void getTriggers(XPathExpression x,Vector<TreeReference> v,TreeReference contextRef){
  if (x instanceof XPathPathExpr) {
    TreeReference ref=((XPathPathExpr)x).getReference();
    TreeReference contextualized=ref;
    if (contextRef != null) {
      contextualized=ref.contextualize(contextRef);
    }
    if (contextualized.hasPredicates()) {
      contextualized=contextualized.removePredicates();
    }
    if (!v.contains(contextualized)) {
      v.addElement(contextualized);
    }
    for (int i=0; i < ref.size(); i++) {
      Vector<XPathExpression> predicates=ref.getPredicate(i);
      if (predicates == null) {
        continue;
      }
      if (!ref.isAbsolute()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      TreeReference predicateContext=ref.getSubReference(i);
      for (      XPathExpression predicate : predicates) {
        getTriggers(predicate,v,predicateContext);
      }
    }
  }
 else   if (x instanceof XPathBinaryOpExpr) {
    getTriggers(((XPathBinaryOpExpr)x).a,v,contextRef);
    getTriggers(((XPathBinaryOpExpr)x).b,v,contextRef);
  }
 else   if (x instanceof XPathUnaryOpExpr) {
    getTriggers(((XPathUnaryOpExpr)x).a,v,contextRef);
  }
 else   if (x instanceof XPathFuncExpr) {
    XPathFuncExpr fx=(XPathFuncExpr)x;
    for (int i=0; i < fx.args.length; i++)     getTriggers(fx.args[i],v,contextRef);
  }
}",0.9612518628912072
144853,"private boolean command(String command) throws BadPlaybackException {
  environment.recordAction(new Action(new Command(command)));
  if (""String_Node_Str"".equalsIgnoreCase(command)) {
    fec.stepToNextEvent();
    return false;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command)) {
    forward=false;
    fec.stepToPreviousEvent();
    return false;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command)) {
    out.println(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command) && fec.getModel().getEvent() == FormEntryController.EVENT_END_OF_FORM) {
    out.println(""String_Node_Str"");
    return true;
  }
 else {
    badInput(command,""String_Node_Str"" + command);
    return false;
  }
}","private boolean command(String command) throws BadPlaybackException {
  environment.recordAction(new Action(new Command(command)));
  if (""String_Node_Str"".equalsIgnoreCase(command)) {
    fec.stepToNextEvent();
    return false;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command)) {
    forward=false;
    fec.stepToPreviousEvent();
    return false;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command)) {
    out.println(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command) && fec.getModel().getEvent() == FormEntryController.EVENT_END_OF_FORM) {
    out.println(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(command)) {
    printInstance(out,fec.getModel().getForm().getInstance());
    return false;
  }
 else {
    badInput(command,""String_Node_Str"" + command);
    return false;
  }
}",0.9123020706455542
144854,"public void _commandAction(Command c,Displayable d){
  if (c == LoginForm.CMD_CANCEL_LOGIN) {
    transitions.exit();
  }
 else   if (c == LoginForm.CMD_LOGIN_BUTTON) {
    if (this.view.validateUser()) {
      transitions.loggedIn(view.getLoggedInUser(),view.getPassWord());
      return;
    }
    performCustomUserValidation();
  }
 else   if (c == LoginForm.CMD_TOOLS) {
    transitions.tools();
  }
 else   if (c == LoginForm.CMD_DEMO_BUTTON) {
    try {
      Reference demoWarning=ReferenceManager._().DeriveReference(Localization.get(""String_Node_Str""));
      if (demoWarning.doesBinaryExist()) {
        MediaUtils.playAudio(demoWarning.getURI());
      }
    }
 catch (    Exception e) {
    }
    demoModeAlert=J2MEDisplay.showError(null,Localization.get(""String_Node_Str""),null,null,this);
  }
 else   if (d == demoModeAlert) {
    User u=User.FactoryDemoUser();
    transitions.loggedIn(u,null);
  }
}","public void _commandAction(Command c,Displayable d){
  if (c == LoginForm.CMD_CANCEL_LOGIN) {
    transitions.exit();
  }
 else   if (c == LoginForm.CMD_LOGIN_BUTTON) {
    if (this.view.validateUser()) {
      transitions.loggedIn(view.getLoggedInUser(),view.getPassWord());
      return;
    }
    performCustomUserValidation();
  }
 else   if (c == LoginForm.CMD_TOOLS) {
    transitions.tools();
  }
 else   if (c == LoginForm.CMD_DEMO_BUTTON) {
    try {
      MediaUtils.playAudio(Localization.get(""String_Node_Str""));
    }
 catch (    NoLocalizedTextException e) {
    }
    demoModeAlert=J2MEDisplay.showError(null,Localization.get(""String_Node_Str""),null,null,this);
  }
 else   if (d == demoModeAlert) {
    User u=User.FactoryDemoUser();
    transitions.loggedIn(u,null);
  }
}",0.8685446009389671
144855,"public boolean equals(Object o){
  if (this == o) {
    return true;
  }
 else   if (o instanceof TreeReference) {
    TreeReference ref=(TreeReference)o;
    if (this.refLevel == ref.refLevel && this.size() == ref.size()) {
      for (int i=0; i < this.size(); i++) {
        String nameA=this.getName(i);
        String nameB=ref.getName(i);
        int multA=this.getMultiplicity(i);
        int multB=ref.getMultiplicity(i);
        if (!nameA.equals(nameB)) {
          return false;
        }
 else         if (multA != multB) {
          if (i == 0 && (multA == 0 || multA == INDEX_UNBOUND) && (multB == 0 || multB == INDEX_UNBOUND)) {
          }
 else {
            return false;
          }
        }
      }
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","public boolean equals(Object o){
  if (this == o) {
    return true;
  }
 else   if (o instanceof TreeReference) {
    TreeReference ref=(TreeReference)o;
    if (this.refLevel == ref.refLevel && this.size() == ref.size()) {
      for (int i=0; i < this.size(); i++) {
        String nameA=this.getName(i);
        String nameB=ref.getName(i);
        int multA=this.getMultiplicity(i);
        int multB=ref.getMultiplicity(i);
        Vector<XPathExpression> predA=this.getPredicate(i);
        Vector<XPathExpression> predB=ref.getPredicate(i);
        if (!nameA.equals(nameB)) {
          return false;
        }
 else         if (multA != multB) {
          if (i == 0 && (multA == 0 || multA == INDEX_UNBOUND) && (multB == 0 || multB == INDEX_UNBOUND)) {
          }
 else {
            return false;
          }
        }
 else         if (predA != null && predB != null) {
          if (predA.size() != predB.size()) {
            return false;
          }
          for (int j=0; j < predA.size(); ++j) {
            if (!predA.elementAt(j).equals(predB.elementAt(j))) {
              return false;
            }
          }
        }
 else         if ((predA == null && predB != null) || (predA != null && predB == null)) {
          return false;
        }
      }
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}",0.652014652014652
144856,"public void doTest(int i){
switch (i) {
case 1:
    testClones();
  break;
case 2:
testSerialization();
break;
case 3:
testParentage();
break;
case 4:
testIntersection();
break;
case 5:
contextualization();
break;
}
}","public void doTest(int i){
switch (i) {
case 1:
    testClones();
  break;
case 2:
testSerialization();
break;
case 3:
testParentage();
break;
case 4:
testIntersection();
break;
case 5:
contextualization();
break;
case 6:
testPredicates();
break;
}
}",0.9293361884368307
144857,"public void initStuff(){
  root=TreeReference.rootRef();
  a=root.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  b=root.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  ac=a.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  bc=b.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  acd=ac.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  ace=ac.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  dot=TreeReference.selfRef();
  dotc=dot.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  a2=root.extendRef(""String_Node_Str"",2);
  a2ext=root.extendRef(""String_Node_Str"",-1);
  a2ext.setInstanceName(""String_Node_Str"");
}","public void initStuff(){
  root=TreeReference.rootRef();
  a=root.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  b=root.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  ac=a.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  bc=b.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  acd=ac.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  ace=ac.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  dot=TreeReference.selfRef();
  dotc=dot.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  a2=root.extendRef(""String_Node_Str"",2);
  a2ext=root.extendRef(""String_Node_Str"",-1);
  a2ext.setInstanceName(""String_Node_Str"");
  apred=a.clone();
  apredmatch=a.clone();
  aprednot=a.clone();
  try {
    Vector<XPathExpression> apreds=new Vector<XPathExpression>();
    apreds.add(XPathParseTool.parseXPath(""String_Node_Str""));
    apred.addPredicate(0,apreds);
    Vector<XPathExpression> amatchpreds=new Vector<XPathExpression>();
    amatchpreds.add(XPathParseTool.parseXPath(""String_Node_Str""));
    apredmatch.addPredicate(0,amatchpreds);
    Vector<XPathExpression> anotpreds=new Vector<XPathExpression>();
    anotpreds.add(XPathParseTool.parseXPath(""String_Node_Str""));
    aprednot.addPredicate(0,anotpreds);
  }
 catch (  XPathSyntaxException e) {
    fail(""String_Node_Str"");
  }
}",0.6894293732460243
144858,"public User getUser(){
  if (loggedInUserID != null) {
    return (User)((IStorageUtilityIndexed)StorageManager.getStorage(User.STORAGE_KEY)).getRecordForValue(User.META_UID,loggedInUserID);
  }
 else   if (loggedInUserID == User.DEMO_USER) {
    return User.FactoryDemoUser();
  }
 else {
    return null;
  }
}","public User getUser(){
  if (User.DEMO_USER.equals(loggedInUserID)) {
    return User.FactoryDemoUser();
  }
 else   if (loggedInUserID != null) {
    return (User)((IStorageUtilityIndexed)StorageManager.getStorage(User.STORAGE_KEY)).getRecordForValue(User.META_UID,loggedInUserID);
  }
 else {
    return null;
  }
}",0.7027027027027027
144859,"/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); ) {
    addTriggerable((Condition)e.nextElement());
  }
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); ) {
    addTriggerable((Recalculate)e.nextElement());
  }
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class));
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()));
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()));
  extensions=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  setEvaluationContext(new EvaluationContext(null));
}","/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); ) {
    addTriggerable((Condition)e.nextElement());
  }
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); ) {
    addTriggerable((Recalculate)e.nextElement());
  }
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class),pf);
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()),pf);
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()),pf);
  extensions=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  setEvaluationContext(new EvaluationContext(null));
}",0.9974909395037636
144860,"public void purge(){
  this.purger.purge(logIDs);
}","public void purge(){
  if (purger != null) {
    this.purger.purge(logIDs);
  }
}",0.7727272727272727
144861,"public void serializeLogs(StreamLogSerializer serializer,int limit) throws IOException {
  if (storageBroken) {
    return;
  }
  ;
  int count=0;
  IStorageIterator li;
synchronized (logStorage) {
    li=logStorage.iterate();
  }
  while (li.hasMore() && count < limit) {
    int id=li.peekID();
    LogEntry log=(LogEntry)li.nextRecord();
    serializer.serializeLog(id,log);
    count++;
  }
  serializer.setPurger(new StreamLogSerializer.Purger(){
    public void purge(    SortedIntSet IDs){
      clearLogs(IDs);
    }
  }
);
}","public void serializeLogs(StreamLogSerializer serializer,int limit) throws IOException {
  if (storageBroken) {
    return;
  }
  ;
  Vector<Integer> logIds=new Vector<Integer>();
  Object lock=logStorage.getAccessLock();
synchronized (lock) {
    int count=0;
    IStorageIterator li=logStorage.iterate();
    while (li.hasMore() && count < limit) {
      int id=li.nextID();
      logIds.addElement(DataUtil.integer(id));
      count++;
    }
  }
  System.out.println(""String_Node_Str"" + logIds.size() + ""String_Node_Str"");
  for (  Integer logId : logIds) {
    LogEntry log=(LogEntry)logStorage.read(logId.intValue());
    if (log != null) {
      serializer.serializeLog(logId.intValue(),log);
    }
  }
  serializer.setPurger(new StreamLogSerializer.Purger(){
    public void purge(    SortedIntSet IDs){
      clearLogs(IDs);
    }
  }
);
}",0.5782608695652174
144862,"private void logError(Vector errors,StatusReportException sre){
  errors.addElement(new String[]{sre.getReportName(),sre.getMessage()});
}","private void logError(Vector errors,StatusReportException sre){
  if (sre.getParent() != null) {
    sre.getParent().printStackTrace();
  }
  errors.addElement(new String[]{sre.getReportName(),sre.getMessage()});
}",0.7840909090909091
144863,"protected IAnswerData getWidgetValue() throws InvalidDataException {
  String s=textField().getString();
  if (s == null || s.equals(""String_Node_Str"")) {
    return null;
  }
  try {
    return template.cast(new UncastData(s.trim()));
  }
 catch (  IllegalArgumentException iae) {
    String message;
    if (template instanceof LongData) {
      message=Localization.get(""String_Node_Str"",new String[]{s});
    }
 else     if (template instanceof IntegerData) {
      message=Localization.get(""String_Node_Str"",new String[]{s});
    }
 else     if (template instanceof DecimalData) {
      message=Localization.get(""String_Node_Str"",new String[]{s});
    }
 else {
      message=Localization.get(""String_Node_Str"",new String[]{s,template.getClass().getName()});
    }
    throw new InvalidDataException(message,new UncastData(s));
  }
}","protected IAnswerData getWidgetValue() throws InvalidDataException {
  String s=textField().getString().trim();
  if (s == null || s.equals(""String_Node_Str"")) {
    return null;
  }
  try {
    return template.cast(new UncastData(s));
  }
 catch (  IllegalArgumentException iae) {
    String message;
    if (template instanceof LongData) {
      message=Localization.get(""String_Node_Str"",new String[]{s});
    }
 else     if (template instanceof IntegerData) {
      message=Localization.get(""String_Node_Str"",new String[]{s});
    }
 else     if (template instanceof DecimalData) {
      message=Localization.get(""String_Node_Str"",new String[]{s});
    }
 else {
      message=Localization.get(""String_Node_Str"",new String[]{s,template.getClass().getName()});
    }
    throw new InvalidDataException(message,new UncastData(s));
  }
}",0.9916467780429594
144864,"protected IAnswerData getWidgetValue() throws InvalidDataException {
  String s=textField().getString();
  return (s == null || s.equals(""String_Node_Str"") ? null : new StringData(s.trim()));
}","protected IAnswerData getWidgetValue() throws InvalidDataException {
  String s=textField().getString().trim();
  return (s == null || s.equals(""String_Node_Str"") ? null : new StringData(s));
}",0.9637305699481864
144865,"private void tryDownload(AuthenticatedHttpTransportMessage message){
  listener.statusUpdate(CommCareOTARestoreListener.RESTORE_DOWNLOAD);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  try {
    if (message.getUrl() == null) {
      listener.onFailure(Localization.get(""String_Node_Str""));
      listener.refreshView();
      listener.onFailure(null);
      return;
    }
    AuthenticatedHttpTransportMessage sent=(AuthenticatedHttpTransportMessage)TransportService.sendBlocking(message);
    if (sent.isSuccess()) {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_CONNECTION_MADE);
      try {
        downloadRemoteData(sent.getResponse());
        return;
      }
 catch (      IOException e) {
        listener.getCredentials();
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_DOWNLOAD);
        listener.onFailure(Localization.get(""String_Node_Str"",new String[]{WrappedException.printException(e)}));
        return;
      }
    }
 else {
      if (sent.getResponseCode() == 401) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_CREDENTIALS);
        if (authAttempts > 0) {
          Logger.log(""String_Node_Str"",""String_Node_Str"" + authAttempts + ""String_Node_Str"");
          authAttempts--;
          getCredentials();
        }
 else {
          System.out.println(""String_Node_Str"");
          listener.onFailure(Localization.get(""String_Node_Str""));
        }
        return;
      }
 else       if (sent.getResponseCode() == 404) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_SERVER);
        listener.promptRetry(Localization.get(""String_Node_Str""));
        return;
      }
 else       if (sent.getResponseCode() == 412) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_DB);
        startRecovery();
        return;
      }
 else       if (sent.getResponseCode() == 503) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_DB_BUSY);
        listener.promptRetry(Localization.get(""String_Node_Str""));
        return;
      }
 else       if (sent.getResponseCode() == 0) {
        listener.promptRetry(Localization.get(""String_Node_Str""));
      }
 else {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL_OTHER);
        listener.promptRetry(Localization.get(""String_Node_Str"",new String[]{sent.getFailureReason()}));
        return;
      }
    }
  }
 catch (  TransportException e) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_CONNECTION_FAIL_ENTRY);
    listener.promptRetry(Localization.get(""String_Node_Str"",new String[]{WrappedException.printException(e)}));
  }
}","private void tryDownload(AuthenticatedHttpTransportMessage message){
  listener.statusUpdate(CommCareOTARestoreListener.RESTORE_DOWNLOAD);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  try {
    if (message.getUrl() == null) {
      listener.onFailure(Localization.get(""String_Node_Str""));
      listener.refreshView();
      listener.onFailure(null);
      return;
    }
    AuthenticatedHttpTransportMessage sent=(AuthenticatedHttpTransportMessage)TransportService.sendBlocking(message);
    if (sent.isSuccess()) {
      listener.statusUpdate(CommCareOTARestoreListener.RESTORE_CONNECTION_MADE);
      try {
        downloadRemoteData(sent.getResponse());
        return;
      }
 catch (      IOException e) {
        listener.getCredentials();
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_DOWNLOAD);
        listener.onFailure(Localization.get(""String_Node_Str"",new String[]{WrappedException.printException(e)}));
        return;
      }
    }
 else {
      if (sent.getResponseCode() == 401) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_CREDENTIALS);
        Logger.log(""String_Node_Str"",Localization.get(""String_Node_Str""));
        getCredentials();
        return;
      }
 else       if (sent.getResponseCode() == 404) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_SERVER);
        listener.promptRetry(Localization.get(""String_Node_Str""));
        return;
      }
 else       if (sent.getResponseCode() == 412) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_BAD_DB);
        startRecovery();
        return;
      }
 else       if (sent.getResponseCode() == 503) {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_DB_BUSY);
        listener.promptRetry(Localization.get(""String_Node_Str""));
        return;
      }
 else       if (sent.getResponseCode() == 0) {
        listener.promptRetry(Localization.get(""String_Node_Str""));
      }
 else {
        listener.statusUpdate(CommCareOTARestoreListener.RESTORE_FAIL_OTHER);
        listener.promptRetry(Localization.get(""String_Node_Str"",new String[]{sent.getFailureReason()}));
        return;
      }
    }
  }
 catch (  TransportException e) {
    listener.statusUpdate(CommCareOTARestoreListener.RESTORE_CONNECTION_FAIL_ENTRY);
    listener.promptRetry(Localization.get(""String_Node_Str"",new String[]{WrappedException.printException(e)}));
  }
}",0.9379554855229466
144866,"private void startOtaProcess(){
  if (authenticator == null) {
    authAttempts=0;
    getCredentials();
  }
 else {
    authAttempts=1;
    listener.refreshView();
    tryDownload(AuthenticatedHttpTransportMessage.AuthenticatedHttpRequest(restoreURI,authenticator,new SecurityFailureListener(){
      public void onSecurityException(      SecurityException e){
        PeriodicEvent.schedule(new PermissionsEvent());
      }
    }
));
  }
}","private void startOtaProcess(){
  if (authenticator == null) {
    getCredentials();
  }
 else {
    listener.refreshView();
    tryDownload(AuthenticatedHttpTransportMessage.AuthenticatedHttpRequest(restoreURI,authenticator,new SecurityFailureListener(){
      public void onSecurityException(      SecurityException e){
        PeriodicEvent.schedule(new PermissionsEvent());
      }
    }
));
  }
}",0.9144893111638956
144867,"private void incrementHelper(Vector indexes,Vector multiplicities,Vector elements,boolean descend){
  int i=indexes.size() - 1;
  boolean exitRepeat=false;
  if (i == -1 || elements.elementAt(i) instanceof GroupDef) {
    if (i >= 0) {
      GroupDef group=(GroupDef)elements.elementAt(i);
      if (group.getRepeat()) {
        if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
          if (((Integer)multiplicities.lastElement()).intValue() == TreeReference.INDEX_REPEAT_JUNCTURE) {
            descend=false;
            exitRepeat=true;
          }
        }
 else {
          if (form.getMainInstance().resolveReference(form.getChildInstanceRef(elements,multiplicities)) == null) {
            descend=false;
            exitRepeat=true;
          }
        }
      }
    }
    if (descend) {
      indexes.addElement(new Integer(0));
      multiplicities.addElement(new Integer(0));
      elements.addElement((i == -1 ? form : (IFormElement)elements.elementAt(i)).getChild(0));
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        if (elements.lastElement() instanceof GroupDef && ((GroupDef)elements.lastElement()).getRepeat()) {
          multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),multiplicities.size() - 1);
        }
      }
      return;
    }
  }
  while (i >= 0) {
    if (!exitRepeat && elements.elementAt(i) instanceof GroupDef && ((GroupDef)elements.elementAt(i)).getRepeat()) {
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),i);
      }
 else {
        multiplicities.setElementAt(new Integer(((Integer)multiplicities.elementAt(i)).intValue() + 1),i);
      }
      return;
    }
    IFormElement parent=(i == 0 ? form : (IFormElement)elements.elementAt(i - 1));
    int curIndex=((Integer)indexes.elementAt(i)).intValue();
    if (curIndex + 1 >= parent.getChildren().size()) {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
      i--;
      exitRepeat=false;
    }
 else {
      indexes.setElementAt(new Integer(curIndex + 1),i);
      multiplicities.setElementAt(new Integer(0),i);
      elements.setElementAt(parent.getChild(curIndex + 1),i);
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        if (elements.lastElement() instanceof GroupDef && ((GroupDef)elements.lastElement()).getRepeat()) {
          multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),multiplicities.size() - 1);
        }
      }
      return;
    }
  }
}","private void incrementHelper(Vector indexes,Vector multiplicities,Vector elements,boolean descend){
  int i=indexes.size() - 1;
  boolean exitRepeat=false;
  if (i == -1 || elements.elementAt(i) instanceof GroupDef) {
    if (i >= 0) {
      GroupDef group=(GroupDef)elements.elementAt(i);
      if (group.getRepeat()) {
        if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
          if (((Integer)multiplicities.lastElement()).intValue() == TreeReference.INDEX_REPEAT_JUNCTURE) {
            descend=false;
            exitRepeat=true;
          }
        }
 else {
          if (form.getMainInstance().resolveReference(form.getChildInstanceRef(elements,multiplicities)) == null) {
            descend=false;
            exitRepeat=true;
          }
        }
      }
    }
    if (descend && (i == -1 || ((IFormElement)elements.elementAt(i)).getChildren().size() > 0)) {
      indexes.addElement(new Integer(0));
      multiplicities.addElement(new Integer(0));
      elements.addElement((i == -1 ? form : (IFormElement)elements.elementAt(i)).getChild(0));
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        if (elements.lastElement() instanceof GroupDef && ((GroupDef)elements.lastElement()).getRepeat()) {
          multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),multiplicities.size() - 1);
        }
      }
      return;
    }
  }
  while (i >= 0) {
    if (!exitRepeat && elements.elementAt(i) instanceof GroupDef && ((GroupDef)elements.elementAt(i)).getRepeat()) {
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),i);
      }
 else {
        multiplicities.setElementAt(new Integer(((Integer)multiplicities.elementAt(i)).intValue() + 1),i);
      }
      return;
    }
    IFormElement parent=(i == 0 ? form : (IFormElement)elements.elementAt(i - 1));
    int curIndex=((Integer)indexes.elementAt(i)).intValue();
    if (curIndex + 1 >= parent.getChildren().size()) {
      indexes.removeElementAt(i);
      multiplicities.removeElementAt(i);
      elements.removeElementAt(i);
      i--;
      exitRepeat=false;
    }
 else {
      indexes.setElementAt(new Integer(curIndex + 1),i);
      multiplicities.setElementAt(new Integer(0),i);
      elements.setElementAt(parent.getChild(curIndex + 1),i);
      if (repeatStructure == REPEAT_STRUCTURE_NON_LINEAR) {
        if (elements.lastElement() instanceof GroupDef && ((GroupDef)elements.lastElement()).getRepeat()) {
          multiplicities.setElementAt(new Integer(TreeReference.INDEX_REPEAT_JUNCTURE),multiplicities.size() - 1);
        }
      }
      return;
    }
  }
}",0.9850689850689852
144868,"public void finalizeTriggerables(){
  Vector partialOrdering=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    Vector deps=new Vector();
    if (t.canCascade()) {
      for (int j=0; j < t.getTargets().size(); j++) {
        TreeReference target=(TreeReference)t.getTargets().elementAt(j);
        Vector triggered=(Vector)triggerIndex.get(target);
        if (triggered != null) {
          for (int k=0; k < triggered.size(); k++) {
            Triggerable u=(Triggerable)triggered.elementAt(k);
            if (!deps.contains(u))             deps.addElement(u);
          }
        }
      }
    }
    for (int j=0; j < deps.size(); j++) {
      Triggerable u=(Triggerable)deps.elementAt(j);
      Triggerable[] edge={t,u};
      partialOrdering.addElement(edge);
    }
  }
  Vector vertices=new Vector();
  for (int i=0; i < triggerables.size(); i++)   vertices.addElement(triggerables.elementAt(i));
  triggerables.removeAllElements();
  while (vertices.size() > 0) {
    Vector roots=new Vector();
    for (int i=0; i < vertices.size(); i++) {
      roots.addElement(vertices.elementAt(i));
    }
    for (int i=0; i < partialOrdering.size(); i++) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      roots.removeElement(edge[1]);
    }
    if (roots.size() == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < roots.size(); i++) {
      Triggerable root=(Triggerable)roots.elementAt(i);
      triggerables.addElement(root);
      vertices.removeElement(root);
    }
    for (int i=partialOrdering.size() - 1; i >= 0; i--) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      if (roots.contains(edge[0]))       partialOrdering.removeElementAt(i);
    }
  }
  triggerablesInOrder=true;
  conditionRepeatTargetIndex=new Hashtable();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    if (t instanceof Condition) {
      Vector targets=t.getTargets();
      for (int j=0; j < targets.size(); j++) {
        TreeReference target=(TreeReference)targets.elementAt(j);
        if (mainInstance.getTemplate(target) != null) {
          conditionRepeatTargetIndex.put(target,(Condition)t);
        }
      }
    }
  }
}","public void finalizeTriggerables(){
  Vector partialOrdering=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    Vector deps=new Vector();
    if (t.canCascade()) {
      for (int j=0; j < t.getTargets().size(); j++) {
        TreeReference target=(TreeReference)t.getTargets().elementAt(j);
        Vector<TreeReference> updatedNodes=new Vector<TreeReference>();
        updatedNodes.addElement(target);
        if (t.isCascadingToChildren()) {
          addChildrenOfReference(target,updatedNodes);
        }
        for (        TreeReference ref : updatedNodes) {
          Vector<Triggerable> triggered=(Vector<Triggerable>)triggerIndex.get(ref);
          if (triggered != null) {
            for (int k=0; k < triggered.size(); k++) {
              Triggerable u=(Triggerable)triggered.elementAt(k);
              if (!deps.contains(u))               deps.addElement(u);
            }
          }
        }
      }
    }
    for (int j=0; j < deps.size(); j++) {
      Triggerable u=(Triggerable)deps.elementAt(j);
      Triggerable[] edge={t,u};
      partialOrdering.addElement(edge);
    }
  }
  Vector vertices=new Vector();
  for (int i=0; i < triggerables.size(); i++)   vertices.addElement(triggerables.elementAt(i));
  triggerables.removeAllElements();
  while (vertices.size() > 0) {
    Vector roots=new Vector();
    for (int i=0; i < vertices.size(); i++) {
      roots.addElement(vertices.elementAt(i));
    }
    for (int i=0; i < partialOrdering.size(); i++) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      roots.removeElement(edge[1]);
    }
    if (roots.size() == 0) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < roots.size(); i++) {
      Triggerable root=(Triggerable)roots.elementAt(i);
      triggerables.addElement(root);
      vertices.removeElement(root);
    }
    for (int i=partialOrdering.size() - 1; i >= 0; i--) {
      Triggerable[] edge=(Triggerable[])partialOrdering.elementAt(i);
      if (roots.contains(edge[0]))       partialOrdering.removeElementAt(i);
    }
  }
  triggerablesInOrder=true;
  conditionRepeatTargetIndex=new Hashtable();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    if (t instanceof Condition) {
      Vector targets=t.getTargets();
      for (int j=0; j < targets.size(); j++) {
        TreeReference target=(TreeReference)targets.elementAt(j);
        if (mainInstance.getTemplate(target) != null) {
          conditionRepeatTargetIndex.put(target,(Condition)t);
        }
      }
    }
  }
}",0.9265265265265266
144869,"/** 
 * @return The indices of which fields should be used for sorting and their order
 */
public int[] getSortOrder(){
  Vector<Integer> indices=new Vector<Integer>();
  outer:   for (int i=0; i < fields.length; ++i) {
    int order=fields[i].getSortOrder();
    if (order < 1) {
      continue;
    }
    for (int j=0; j < indices.size(); ++j) {
      if (indices.size() > 0 || order < fields[indices.elementAt(j).intValue()].getSortOrder()) {
        indices.insertElementAt(new Integer(i),j);
        continue outer;
      }
    }
    indices.addElement(new Integer(i));
    continue;
  }
  if (indices.size() == 0) {
    return new int[]{};
  }
 else {
    int[] ret=new int[indices.size()];
    for (int i=0; i < ret.length; ++i) {
      ret[i]=indices.elementAt(i).intValue();
    }
    return ret;
  }
}","/** 
 * @return The indices of which fields should be used for sorting and their order
 */
public int[] getSortOrder(){
  Vector<Integer> indices=new Vector<Integer>();
  outer:   for (int i=0; i < fields.length; ++i) {
    int order=fields[i].getSortOrder();
    if (order < 1) {
      continue;
    }
    for (int j=0; j < indices.size(); ++j) {
      if (order < fields[indices.elementAt(j).intValue()].getSortOrder()) {
        indices.insertElementAt(new Integer(i),j);
        continue outer;
      }
    }
    indices.addElement(new Integer(i));
    continue;
  }
  if (indices.size() == 0) {
    return new int[]{};
  }
 else {
    int[] ret=new int[indices.size()];
    for (int i=0; i < ret.length; ++i) {
      ret[i]=indices.elementAt(i).intValue();
    }
    return ret;
  }
}",0.98625
144870,"public void releaseMedia(){
  detachVideo();
  detachImage();
}","public void releaseMedia(){
  detachVideo();
  detachImage();
  getMultimediaController().stopAudio();
}",0.7544910179640718
144871,"protected FormMultimediaController getMultimediaController(){
  if (this.multimediaController == null) {
    return new FormMultimediaController(){
      public void playAudioOnLoad(      FormEntryPrompt fep){
      }
      public void playAudioOnDemand(      FormEntryPrompt fep){
      }
      public int playAudioOnDemand(      FormEntryPrompt fep,      SelectChoice select){
        return 0;
      }
      public void attachVideoPlayer(      Player player){
      }
      public void detachVideoPlayer(      Player player){
      }
    }
;
  }
 else {
    return multimediaController;
  }
}","protected FormMultimediaController getMultimediaController(){
  if (this.multimediaController == null) {
    return new FormMultimediaController(){
      public void playAudioOnLoad(      FormEntryPrompt fep){
      }
      public void playAudioOnDemand(      FormEntryPrompt fep){
      }
      public int playAudioOnDemand(      FormEntryPrompt fep,      SelectChoice select){
        return 0;
      }
      public void attachVideoPlayer(      Player player){
      }
      public void detachVideoPlayer(      Player player){
      }
      public void stopAudio(){
      }
    }
;
  }
 else {
    return multimediaController;
  }
}",0.96826688364524
144872,"public void reset(){
  detachImage();
  detachVideo();
  prompt=null;
  entryWidget=null;
}","public void reset(){
  detachImage();
  detachVideo();
  getMultimediaController().stopAudio();
  prompt=null;
  entryWidget=null;
}",0.8161434977578476
144873,"public static int playAudio(String jrRefURI){
  String curAudioURI=jrRefURI;
  int retcode=AUDIO_SUCCESS;
  try {
    Reference curAudRef=ReferenceManager._().DeriveReference(curAudioURI);
    String format=getFileFormat(curAudioURI);
    if (format == null)     return AUDIO_NOT_RECOGNIZED;
    if (audioPlayer != null) {
      audioPlayer.deallocate();
      audioPlayer.close();
    }
    audioPlayer=MediaUtils.getPlayerLoose(curAudRef);
    audioPlayer.realize();
    crankAudio(audioPlayer);
    audioPlayer.start();
  }
 catch (  InvalidReferenceException ire) {
    retcode=AUDIO_ERROR;
    System.err.println(""String_Node_Str"" + curAudioURI + ""String_Node_Str""+ ire.getMessage());
  }
catch (  IOException ioe) {
    retcode=AUDIO_ERROR;
    System.err.println(""String_Node_Str"" + curAudioURI + ""String_Node_Str""+ ioe.getMessage());
  }
catch (  MediaException e) {
    retcode=AUDIO_ERROR;
    System.err.println(""String_Node_Str"" + curAudioURI + ""String_Node_Str""+ e.getMessage());
  }
catch (  SecurityException e) {
  }
  return retcode;
}","public static int playAudio(String jrRefURI){
synchronized (audioLock) {
    String curAudioURI=jrRefURI;
    int retcode=AUDIO_SUCCESS;
    try {
      Reference curAudRef=ReferenceManager._().DeriveReference(curAudioURI);
      String format=getFileFormat(curAudioURI);
      if (format == null)       return AUDIO_NOT_RECOGNIZED;
      if (audioPlayer != null) {
        audioPlayer.deallocate();
        audioPlayer.close();
      }
      audioPlayer=MediaUtils.getPlayerLoose(curAudRef);
      audioPlayer.realize();
      crankAudio(audioPlayer);
      audioPlayer.start();
    }
 catch (    InvalidReferenceException ire) {
      retcode=AUDIO_ERROR;
      System.err.println(""String_Node_Str"" + curAudioURI + ""String_Node_Str""+ ire.getMessage());
    }
catch (    IOException ioe) {
      retcode=AUDIO_ERROR;
      System.err.println(""String_Node_Str"" + curAudioURI + ""String_Node_Str""+ ioe.getMessage());
    }
catch (    MediaException e) {
      retcode=AUDIO_ERROR;
      System.err.println(""String_Node_Str"" + curAudioURI + ""String_Node_Str""+ e.getMessage());
    }
catch (    SecurityException e) {
    }
    return retcode;
  }
}",0.9431042330450614
144874,"public void refreshView(){
  if (model.getEvent() == FormEntryController.EVENT_QUESTION) {
    FormEntryPrompt prompt=model.getQuestionPrompt();
    SingleQuestionScreen last=currentQuestionScreen;
    SingleQuestionScreen view=getView(prompt,this.goingForward);
    if (last != null && last != currentQuestionScreen) {
      last.releaseMedia();
    }
    J2MEDisplay.setView(view);
    view.showNotify();
  }
 else   if (model.getEvent() == FormEntryController.EVENT_PROMPT_NEW_REPEAT) {
    FormEntryCaption[] hierachy=model.getCaptionHierarchy(model.getFormIndex());
    repeatScreen=new NewRepeatScreen(""String_Node_Str"" + (model.getFormIndex().getElementMultiplicity() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") + hierachy[hierachy.length - 1].getLongText()+ ""String_Node_Str"");
    repeatScreen.setCommandListener(this);
    if (currentQuestionScreen != null) {
      currentQuestionScreen.releaseMedia();
    }
    J2MEDisplay.setView(repeatScreen);
  }
}","public void refreshView(){
  if (model.getEvent() == FormEntryController.EVENT_QUESTION) {
    FormEntryPrompt prompt=model.getQuestionPrompt();
    SingleQuestionScreen last=currentQuestionScreen;
    if (last != null) {
      last.releaseMedia();
    }
    SingleQuestionScreen view=getView(prompt,this.goingForward);
    J2MEDisplay.setView(view);
    view.showNotify();
  }
 else   if (model.getEvent() == FormEntryController.EVENT_PROMPT_NEW_REPEAT) {
    FormEntryCaption[] hierachy=model.getCaptionHierarchy(model.getFormIndex());
    repeatScreen=new NewRepeatScreen(""String_Node_Str"" + (model.getFormIndex().getElementMultiplicity() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") + hierachy[hierachy.length - 1].getLongText()+ ""String_Node_Str"");
    repeatScreen.setCommandListener(this);
    if (currentQuestionScreen != null) {
      currentQuestionScreen.releaseMedia();
    }
    J2MEDisplay.setView(repeatScreen);
  }
}",0.9225908372827804
144875,"public void releaseMedia(){
  detachVideo();
  detachImage();
  getMultimediaController().stopAudio();
}","public void releaseMedia(){
  detachVideo();
  detachImage();
  if (mediaAttached) {
    getMultimediaController().stopAudio();
    mediaAttached=false;
  }
}",0.7938931297709924
144876,"public void refreshWidget(FormEntryPrompt fep,int changeFlags){
  if (changeFlags == FormElementStateListener.CHANGE_INIT) {
    ImageItem newImItem=ExpandedWidget.getImageItem(fep,scrHeight / 2,scrWidth - 16);
    if (newImItem != null) {
      detachImage();
      fullPrompt.add(newImItem);
      imItem=newImItem;
    }
    VideoItem newVItem=ExpandedWidget.getVideoItem(fep);
    if (newVItem != null) {
      detachVideo();
      getMultimediaController().attachVideoPlayer(newVItem.getPlayer());
      fullPrompt.add(newVItem);
      vItem=newVItem;
    }
    getMultimediaController().playAudioOnLoad(fep);
  }
  prompt.setText(fep.getLongText());
  updateWidget(fep);
  IAnswerData data=fep.getAnswerValue();
  if (data != null && changeFlags == FormElementStateListener.CHANGE_INIT) {
    setWidgetValue(cast(data).getValue());
  }
}","public void refreshWidget(FormEntryPrompt fep,int changeFlags){
  if (changeFlags == FormElementStateListener.CHANGE_INIT) {
    ImageItem newImItem=ExpandedWidget.getImageItem(fep,scrHeight / 2,scrWidth - 16);
    if (newImItem != null) {
      detachImage();
      fullPrompt.add(newImItem);
      imItem=newImItem;
    }
    VideoItem newVItem=ExpandedWidget.getVideoItem(fep);
    if (newVItem != null) {
      detachVideo();
      getMultimediaController().attachVideoPlayer(newVItem.getPlayer());
      fullPrompt.add(newVItem);
      vItem=newVItem;
    }
    getMultimediaController().playAudioOnLoad(fep);
    mediaAttached=true;
  }
  prompt.setText(fep.getLongText());
  updateWidget(fep);
  IAnswerData data=fep.getAnswerValue();
  if (data != null && changeFlags == FormElementStateListener.CHANGE_INIT) {
    setWidgetValue(cast(data).getValue());
  }
}",0.9859649122807016
144877,"public void reset(){
  detachImage();
  detachVideo();
  getMultimediaController().stopAudio();
  prompt=null;
  entryWidget=null;
}","public void reset(){
  releaseMedia();
  prompt=null;
  entryWidget=null;
}",0.6859903381642513
144878,"public TreeReference contextualize(TreeReference contextRef){
  if (!contextRef.isAbsolute()) {
    return null;
  }
  TreeReference newRef=anchor(contextRef);
  newRef.setContext(contextRef.getContext());
  for (int i=0; i < contextRef.size() && i < newRef.size(); i++) {
    if (TreeReference.NAME_WILDCARD.equals(newRef.getName(i)) && !TreeReference.NAME_WILDCARD.equals(contextRef.getName(i))) {
      newRef.data.setElementAt(newRef.data.elementAt(i).setName(contextRef.getName(i)),i);
    }
    if (contextRef.getName(i).equals(newRef.getName(i))) {
      if (newRef.getPredicate(i) == null) {
        newRef.setMultiplicity(i,contextRef.getMultiplicity(i));
      }
    }
 else {
      break;
    }
  }
  return newRef;
}","public TreeReference contextualize(TreeReference contextRef){
  if (!contextRef.isAbsolute()) {
    return null;
  }
  if (this.isAbsolute()) {
    if (this.getInstanceName() == null) {
      if (contextRef.getInstanceName() != null) {
        return this.clone();
      }
    }
 else     if (!this.getInstanceName().equals(contextRef.getInstanceName())) {
      return this.clone();
    }
  }
  TreeReference newRef=anchor(contextRef);
  newRef.setContext(contextRef.getContext());
  for (int i=0; i < contextRef.size() && i < newRef.size(); i++) {
    if (TreeReference.NAME_WILDCARD.equals(newRef.getName(i)) && !TreeReference.NAME_WILDCARD.equals(contextRef.getName(i))) {
      newRef.data.setElementAt(newRef.data.elementAt(i).setName(contextRef.getName(i)),i);
    }
    if (contextRef.getName(i).equals(newRef.getName(i))) {
      if (newRef.getPredicate(i) == null) {
        newRef.setMultiplicity(i,contextRef.getMultiplicity(i));
      }
    }
 else {
      break;
    }
  }
  return newRef;
}",0.8401615695326025
144879,"public void contextualization(){
  TreeReference abc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference ab=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference ac=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference floatc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference floatc2=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference backc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference testabc=floatc.contextualize(ab);
  TreeReference testabc2=floatc2.contextualize(ab);
  TreeReference testac=backc.contextualize(ab);
  TreeReference invalid=floatc.contextualize(floatc2);
  if (!abc.equals(testabc)) {
    fail(""String_Node_Str"" + abc.toString(true) + ""String_Node_Str""+ testabc.toString(true));
  }
  if (!abc.equals(testabc2)) {
    fail(""String_Node_Str"" + abc.toString(true) + ""String_Node_Str""+ testabc2.toString(true));
  }
  if (!ac.equals(testac)) {
    fail(""String_Node_Str"" + ac.toString(true) + ""String_Node_Str""+ testac.toString(true));
  }
  if (invalid != null) {
    fail(""String_Node_Str"" + invalid.toString(true));
  }
}","public void contextualization(){
  TreeReference abc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference ab=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference ac=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference floatc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference floatc2=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference backc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference testabc=floatc.contextualize(ab);
  TreeReference testabc2=floatc2.contextualize(ab);
  TreeReference testac=backc.contextualize(ab);
  TreeReference invalid=floatc.contextualize(floatc2);
  if (!abc.equals(testabc)) {
    fail(""String_Node_Str"" + abc.toString(true) + ""String_Node_Str""+ testabc.toString(true));
  }
  if (!abc.equals(testabc2)) {
    fail(""String_Node_Str"" + abc.toString(true) + ""String_Node_Str""+ testabc2.toString(true));
  }
  if (!ac.equals(testac)) {
    fail(""String_Node_Str"" + ac.toString(true) + ""String_Node_Str""+ testac.toString(true));
  }
  if (invalid != null) {
    fail(""String_Node_Str"" + invalid.toString(true));
  }
  TreeReference a2extc=a2ext.contextualize(a2);
  if (a2extc.getMultLast() == 2) {
    fail(""String_Node_Str"");
  }
}",0.9540047581284696
144880,"public void initStuff(){
  root=TreeReference.rootRef();
  a=root.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  b=root.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  ac=a.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  bc=b.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  acd=ac.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  ace=ac.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  dot=TreeReference.selfRef();
  dotc=dot.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
}","public void initStuff(){
  root=TreeReference.rootRef();
  a=root.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  b=root.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  ac=a.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  bc=b.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  acd=ac.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  ace=ac.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  dot=TreeReference.selfRef();
  dotc=dot.extendRef(""String_Node_Str"",TreeReference.DEFAULT_MUTLIPLICITY);
  a2=root.extendRef(""String_Node_Str"",2);
  a2ext=root.extendRef(""String_Node_Str"",-1);
  a2ext.setInstanceName(""String_Node_Str"");
}",0.9016393442622952
144881,"private InstanceInitializationFactory createIIF(){
  return new MockupProviderFactory(mockup.getInstances());
}","private InstanceInitializationFactory createIIF(){
  return new MockupProviderFactory(mockup == null ? new Hashtable() : mockup.getInstances());
}",0.8638132295719845
144882,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    InputStream incoming=null;
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash + 1);
      String cleanUri=""String_Node_Str"";
      for (int i=0; i < uri.length(); ++i) {
        char c=uri.charAt(i);
        if (valid.indexOf(c) == -1) {
          cleanUri+=""String_Node_Str"";
        }
 else {
          cleanUri+=c;
        }
      }
      uri=cleanUri;
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        if (destination.isReadOnly()) {
          return cache(incoming,r,table,upgrade);
        }
        OutputStream output=destination.getOutputStream();
        try {
          StreamsUtil.writeFromInputToOutput(incoming,output);
        }
 catch (        IOException e) {
          throw new UnreliableSourceException(r,e.getMessage());
        }
        output.close();
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(incoming,r,table,upgrade);
      }
catch (      IOException e) {
        return cache(incoming,r,table,upgrade);
      }
    }
 catch (    IOException e) {
      throw new UnreliableSourceException(r,e.getMessage());
    }
 finally {
      try {
        if (incoming != null) {
          incoming.close();
        }
      }
 catch (      IOException e) {
      }
    }
  }
  return false;
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    InputStream incoming=null;
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash + 1);
      String cleanUri=""String_Node_Str"";
      for (int i=0; i < uri.length(); ++i) {
        char c=uri.charAt(i);
        if (valid.indexOf(c) == -1) {
          cleanUri+=""String_Node_Str"";
        }
 else {
          cleanUri+=c;
        }
      }
      uri=cleanUri;
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        if (destination.isReadOnly()) {
          return cache(incoming,r,table,upgrade);
        }
        OutputStream output=destination.getOutputStream();
        try {
          StreamsUtil.writeFromInputToOutputSpecific(incoming,output);
        }
 catch (        InputIOException e) {
          throw new UnreliableSourceException(r,e.getMessage());
        }
 finally {
          output.close();
        }
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(ref.getStream(),r,table,upgrade);
      }
catch (      IOException e) {
        return cache(ref.getStream(),r,table,upgrade);
      }
    }
 catch (    IOException e) {
      throw new UnreliableSourceException(r,e.getMessage());
    }
 finally {
      try {
        if (incoming != null) {
          incoming.close();
        }
      }
 catch (      IOException e) {
      }
    }
  }
  return false;
}",0.977255779269202
144883,"public int read() throws IOException {
  if (position == count) {
    fillBuffer();
  }
  if (count == -1) {
    return -1;
  }
  return buffer[position++];
}","public int read() throws IOException {
  if (position == count) {
    fillBuffer();
  }
  if (count == -1) {
    return -1;
  }
  return buffer[position++] & 0xFF;
}",0.978328173374613
144884,"public int available() throws IOException {
  return in.available() + (count - position);
}","public int available() throws IOException {
  if (count == -1) {
    return 0;
  }
  return in.available() + (count - position);
}",0.8235294117647058
144885,"public static boolean arraysEqual(Object[] array1,Object[] array2){
  if (array1.length != array2.length) {
    return false;
  }
  boolean retVal=true;
  for (int i=0; i < array1.length; ++i) {
    if (!array1[i].equals(array2[i])) {
      retVal=false;
    }
  }
  return retVal;
}","public static boolean arraysEqual(byte[] array1,byte[] array2){
  if (array1.length != array2.length) {
    return false;
  }
  boolean retVal=true;
  for (int i=0; i < array1.length; ++i) {
    if (array1[i] != array2[i]) {
      retVal=false;
    }
  }
  return retVal;
}",0.9100719424460432
144886,"public V put(K key,V value){
  if (key == null) {
    throw new NullPointerException();
  }
  if (super.containsKey(key)) {
    int i=orderedKeys.indexOf(key);
    if (i == -1) {
      throw new IllegalStateException(""String_Node_Str"" + key);
    }
    orderedKeys.setElementAt(key,i);
  }
 else {
    orderedKeys.addElement(key);
  }
  return super.put(key,value);
}","public V put(K key,V value){
  if (key == null) {
    throw new NullPointerException();
  }
  V v=super.put(key,value);
  if (super.size() > orderedKeys.size()) {
    orderedKeys.addElement(key);
  }
  return v;
}",0.3896551724137931
144887,"public void clearCaches(){
}","public void clearCaches(){
  expireReferenceCache();
}",0.6829268292682927
144888,"public DataModelSerializer(OutputStream stream,InstanceInitializationFactory factory) throws IOException {
  serializer=new KXmlSerializer();
  serializer.setOutput(stream,""String_Node_Str"");
  this.factory=factory;
}","public DataModelSerializer(KXmlSerializer serializer){
  this.serializer=serializer;
}",0.4554455445544554
144889,"public static void main(String[] args){
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
  }
  if (args.length == 1) {
    XFormPlayer xfp=new XFormPlayer(System.in,System.out);
    try {
      xfp.start(args[0]);
      Session s=xfp.environment.getSessionRecording();
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    }
  }
 else   if (args.length == 2) {
    XFormPlayer xfp=new XFormPlayer(System.in,System.out);
    try {
      xfp.start(args[0]);
      Session s=xfp.environment.getSessionRecording();
      xfp=new XFormPlayer(System.in,System.out);
      xfp.start(args[1],s);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    }
  }
  System.exit(0);
}","public static void main(String[] args){
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
  }
  if (args.length == 1) {
    XFormPlayer xfp=new XFormPlayer(System.in,System.out,null);
    try {
      xfp.start(args[0]);
      Session s=xfp.environment.getSessionRecording();
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    }
  }
 else {
    try {
      if (args[0].equals(""String_Node_Str"")) {
        Mockup m=getMockup(args[1]);
        XFormPlayer xfp=new XFormPlayer(System.in,System.out,m);
        xfp.start(args[2]);
        Session s=xfp.environment.getSessionRecording();
        MockupEditor e=m.getEditor();
        e.addSession(s);
        e.commit();
        updateMockup(args[1],m);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  System.exit(0);
}",0.5874125874125874
144890,"private InstanceInitializationFactory createIIF(){
  return null;
}","private InstanceInitializationFactory createIIF(){
  return new MockupProviderFactory(mockup.getInstances());
}",0.7303370786516854
144891,"public XFormEnvironment(FormDef form,Session session){
  this.form=form;
  this.session=session;
  recording=false;
}","public XFormEnvironment(FormDef form,Mockup mockup){
  this(form);
  this.mockup=mockup;
}",0.6666666666666666
144892,"public Object eval(Object[] args,EvaluationContext ec){
  return today;
}","public Object eval(Object[] args,EvaluationContext ec){
  if (mockup != null && mockup.getDate() != null) {
    return mockup.getDate();
  }
 else {
    return new Date();
  }
}",0.56
144893,"public XFormPlayer(InputStream in,PrintStream out){
  this.in=in;
  this.out=out;
}","public XFormPlayer(InputStream in,PrintStream out,Mockup mockup){
  this.in=in;
  this.out=out;
  this.mockup=mockup;
}",0.8217821782178217
144894,"public void start(FormDef form){
  this.environment=new XFormEnvironment(form);
  fec=environment.setup();
  reader=new BufferedReader(new InputStreamReader(in));
  processLoop();
}","public void start(FormDef form){
  this.environment=new XFormEnvironment(form,mockup);
  fec=environment.setup();
  reader=new BufferedReader(new InputStreamReader(in));
  processLoop();
}",0.981029810298103
144895,"public Hashtable<String,DataInstance> getInstances(){
  return instances;
}","public Hashtable<String,FormInstance> getInstances(){
  return instances;
}",0.9466666666666668
144896,"public void addSession(Session session){
  this.sessions.addElement(session);
}","public void addSession(Session s){
  m.sessions.add(s);
}",0.8235294117647058
144897,"public Mockup(){
}","public Mockup(){
  sessions=new Vector<Session>();
  instances=new Hashtable<String,FormInstance>();
}",0.3
144898,"public Profile parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(sVersion);
  String authRef=parser.getAttributeValue(null,""String_Node_Str"");
  String sMajor=parser.getAttributeValue(null,""String_Node_Str"");
  String sMinor=parser.getAttributeValue(null,""String_Node_Str"");
  int major=-1;
  int minor=-1;
  if (sMajor != null) {
    major=parseInt(sMajor);
  }
  if (sMinor != null) {
    minor=parseInt(sMinor);
  }
  if ((!forceVersion && this.instance != null) && (major != -1) && (minor != -1)) {
    if (this.instance.getMajorVersion() != -1 && this.instance.getMajorVersion() != major) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + major + ""String_Node_Str""+ this.instance.getMajorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION,major,minor,this.instance.getMajorVersion(),this.instance.getMinorVersion(),true);
    }
    if (this.instance.getMinorVersion() != -1 && this.instance.getMinorVersion() < minor) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + minor + ""String_Node_Str""+ this.instance.getMinorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MINOR_APP_VERSION,major,minor,this.instance.getMajorVersion(),this.instance.getMinorVersion(),true);
    }
  }
  String registrationNamespace=null;
  Profile profile=new Profile(version,authRef);
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String key=parser.getAttributeValue(null,""String_Node_Str"");
          String value=parser.getAttributeValue(null,""String_Node_Str"");
          String force=parser.getAttributeValue(null,""String_Node_Str"");
          if (force != null) {
            if (""String_Node_Str"".equals(force.toLowerCase())) {
              profile.addPropertySetter(key,value,true);
            }
 else {
              profile.addPropertySetter(key,value,false);
            }
          }
 else {
            profile.addPropertySetter(key,value);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          RootTranslator root=new RootParser(this.parser).parse();
          profile.addRoot(root);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getLoginImageInstaller(),resourceId,initialResourceStatus);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          while (nextTagInBlock(""String_Node_Str"")) {
            String tag=parser.getName().toLowerCase();
            String active=parser.getAttributeValue(null,""String_Node_Str"");
            boolean isActive=false;
            if (active != null && active.toLowerCase().equals(""String_Node_Str"")) {
              isActive=true;
            }
            if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              if (nextTagInBlock(""String_Node_Str"")) {
                checkNode(""String_Node_Str"");
                String reminderTime=parser.nextText();
                int days=this.parseInt(reminderTime);
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              while (nextTagInBlock(""String_Node_Str"")) {
                if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  registrationNamespace=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",registrationNamespace,true);
                }
 else                 if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  String logo=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",logo,true);
                }
 else {
                  throw new InvalidStructureException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"",parser);
                }
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
            profile.setFeatureActive(tag,isActive);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getSuiteInstaller(),resourceId,initialResourceStatus);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    return profile;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}","public Profile parse() throws InvalidStructureException, IOException, XmlPullParserException, UnfullfilledRequirementsException {
  checkNode(""String_Node_Str"");
  String sVersion=parser.getAttributeValue(null,""String_Node_Str"");
  int version=parseInt(sVersion);
  String authRef=parser.getAttributeValue(null,""String_Node_Str"");
  String sMajor=parser.getAttributeValue(null,""String_Node_Str"");
  String sMinor=parser.getAttributeValue(null,""String_Node_Str"");
  int major=-1;
  int minor=-1;
  if (sMajor != null) {
    major=parseInt(sMajor);
  }
  if (sMinor != null) {
    minor=parseInt(sMinor);
  }
  if ((!forceVersion && this.instance != null) && (major != -1) && (minor != -1)) {
    if (this.instance.getMajorVersion() != -1 && this.instance.getMajorVersion() != major) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + major + ""String_Node_Str""+ this.instance.getMajorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION,major,minor,this.instance.getMajorVersion(),this.instance.getMinorVersion(),true);
    }
    if (this.instance.getMinorVersion() != -1 && this.instance.getMinorVersion() < minor) {
      throw new UnfullfilledRequirementsException(""String_Node_Str"" + minor + ""String_Node_Str""+ this.instance.getMinorVersion()+ ""String_Node_Str"",UnfullfilledRequirementsException.SEVERITY_PROMPT,UnfullfilledRequirementsException.REQUIREMENT_MINOR_APP_VERSION,major,minor,this.instance.getMajorVersion(),this.instance.getMinorVersion(),false);
    }
  }
  String registrationNamespace=null;
  Profile profile=new Profile(version,authRef);
  try {
    parser.next();
    int eventType;
    eventType=parser.getEventType();
    do {
      if (eventType == KXmlParser.END_DOCUMENT) {
      }
 else       if (eventType == KXmlParser.START_TAG) {
        if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          String key=parser.getAttributeValue(null,""String_Node_Str"");
          String value=parser.getAttributeValue(null,""String_Node_Str"");
          String force=parser.getAttributeValue(null,""String_Node_Str"");
          if (force != null) {
            if (""String_Node_Str"".equals(force.toLowerCase())) {
              profile.addPropertySetter(key,value,true);
            }
 else {
              profile.addPropertySetter(key,value,false);
            }
          }
 else {
            profile.addPropertySetter(key,value);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          RootTranslator root=new RootParser(this.parser).parse();
          profile.addRoot(root);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getLoginImageInstaller(),resourceId,initialResourceStatus);
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          while (nextTagInBlock(""String_Node_Str"")) {
            String tag=parser.getName().toLowerCase();
            String active=parser.getAttributeValue(null,""String_Node_Str"");
            boolean isActive=false;
            if (active != null && active.toLowerCase().equals(""String_Node_Str"")) {
              isActive=true;
            }
            if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              if (nextTagInBlock(""String_Node_Str"")) {
                checkNode(""String_Node_Str"");
                String reminderTime=parser.nextText();
                int days=this.parseInt(reminderTime);
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
 else             if (tag.equals(""String_Node_Str"")) {
              while (nextTagInBlock(""String_Node_Str"")) {
                if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  registrationNamespace=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",registrationNamespace,true);
                }
 else                 if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
                  String logo=parser.nextText();
                  profile.addPropertySetter(""String_Node_Str"",logo,true);
                }
 else {
                  throw new InvalidStructureException(""String_Node_Str"" + parser.getName() + ""String_Node_Str"",parser);
                }
              }
            }
 else             if (tag.equals(""String_Node_Str"")) {
            }
            profile.setFeatureActive(tag,isActive);
          }
        }
 else         if (parser.getName().toLowerCase().equals(""String_Node_Str"")) {
          getNextTagInBlock(""String_Node_Str"");
          Resource resource=new ResourceParser(parser,maximumResourceAuthority).parse();
          table.addResource(resource,table.getInstallers().getSuiteInstaller(),resourceId,initialResourceStatus);
        }
 else {
          System.out.println(""String_Node_Str"" + parser.getName());
        }
      }
 else       if (eventType == KXmlParser.END_TAG) {
      }
 else       if (eventType == KXmlParser.TEXT) {
      }
      eventType=parser.next();
    }
 while (eventType != KXmlParser.END_DOCUMENT);
    return profile;
  }
 catch (  XmlPullParserException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  IOException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
catch (  StorageFullException e) {
    e.printStackTrace();
    throw new InvalidStructureException(""String_Node_Str"",parser);
  }
}",0.9994001199760048
144899,"public UnfullfilledRequirementsException(String message,int severity,int requirement,int maR,int miR,int maA,int miA,boolean majorIsProblem){
  super(message);
  this.severity=severity;
  this.requirement=requirement;
  required=maR + ""String_Node_Str"" + miR;
  available=maA + ""String_Node_Str"" + miA;
}","public UnfullfilledRequirementsException(String message,int severity,int requirement,int maR,int miR,int maA,int miA,boolean majorIsProblem){
  super(message);
  this.severity=severity;
  this.requirement=requirement;
  required=maR + ""String_Node_Str"" + miR;
  available=maA + ""String_Node_Str"" + miA;
  this.majorIsProblem=majorIsProblem;
}",0.9411764705882352
144900,"public void populate(TreeElement incoming,FormDef f){
  if (this.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      this.setValue(null);
    }
 else {
      this.setValue(AnswerDataFactory.templateByDataType(this.dataType).cast(value.uncast()));
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (child.getMaskVar(MASK_REPEATABLE) && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        this.removeChildAt(i);
        i--;
      }
    }
    if (this.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < this.getNumChildren(); j++) {
          child2=this.getChildAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == this.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        this.removeChildAt(j);
        if (children == null) {
          children=new Vector();
        }
        this.children.insertElementAt(child2,i);
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      if (child.getMaskVar(MASK_REPEATABLE)) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          if (children == null) {
            children=new Vector();
          }
          this.children.insertElementAt(newChild,i + k + 1);
          newChild.populate((TreeElement)newChildren.elementAt(k),f);
        }
        i+=newChildren.size();
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          child.populate((TreeElement)newChildren.elementAt(0),f);
        }
      }
    }
  }
}","public void populate(TreeElement incoming,FormDef f){
  if (this.isLeaf()) {
    IAnswerData value=incoming.getValue();
    if (value == null) {
      this.setValue(null);
    }
 else {
      this.setValue(AnswerDataFactory.templateByDataType(this.dataType).cast(value.uncast()));
    }
  }
 else {
    Vector names=new Vector();
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (!names.contains(child.getName())) {
        names.addElement(child.getName());
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      if (child.getMaskVar(MASK_REPEATABLE) && child.getMult() != TreeReference.INDEX_TEMPLATE) {
        this.removeChildAt(i);
        i--;
      }
    }
    if (this.getNumChildren() != names.size()) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      String expectedName=(String)names.elementAt(i);
      if (!child.getName().equals(expectedName)) {
        TreeElement child2=null;
        int j;
        for (j=i + 1; j < this.getNumChildren(); j++) {
          child2=this.getChildAt(j);
          if (child2.getName().equals(expectedName)) {
            break;
          }
        }
        if (j == this.getNumChildren()) {
          throw new RuntimeException(""String_Node_Str"");
        }
        this.removeChildAt(j);
        if (children == null) {
          children=new Vector();
        }
        this.children.insertElementAt(child2,i);
      }
    }
    for (int i=0; i < this.getNumChildren(); i++) {
      TreeElement child=this.getChildAt(i);
      Vector newChildren=incoming.getChildrenWithName(child.getName());
      if (child.getMaskVar(MASK_REPEATABLE)) {
        for (int k=0; k < newChildren.size(); k++) {
          TreeElement newChild=child.deepCopy(true);
          newChild.setMult(k);
          if (children == null) {
            children=new Vector();
          }
          this.children.insertElementAt(newChild,i + k + 1);
          newChild.populate((TreeElement)newChildren.elementAt(k),f);
        }
        i+=newChildren.size();
      }
 else {
        if (newChildren.size() == 0) {
          child.setRelevant(false);
        }
 else {
          child.populate((TreeElement)newChildren.elementAt(0),f);
        }
      }
    }
    for (int i=0; i < incoming.getAttributeCount(); i++) {
      String name=incoming.getAttributeName(i);
      String ns=incoming.getAttributeNamespace(i);
      String value=incoming.getAttributeValue(i);
      this.setAttribute(ns,name,value);
    }
  }
}",0.9500393391030684
144901,"protected void serializeLog(LogEntry log) throws IOException {
  o.startTag(ns,""String_Node_Str"");
  o.attribute(null,""String_Node_Str"",DateUtils.formatDateTime(log.getTime(),DateUtils.FORMAT_ISO8601));
  o.startTag(ns,""String_Node_Str"");
  o.text(log.getType());
  o.endTag(ns,""String_Node_Str"");
  o.startTag(ns,""String_Node_Str"");
  o.text(log.getMessage());
  o.endTag(ns,""String_Node_Str"");
  o.endTag(ns,""String_Node_Str"");
}","protected void serializeLog(LogEntry log) throws IOException {
  o.startTag(ns,""String_Node_Str"");
  try {
    o.attribute(null,""String_Node_Str"",DateUtils.formatDateTime(log.getTime(),DateUtils.FORMAT_ISO8601));
    o.startTag(ns,""String_Node_Str"");
    try {
      o.text(log.getType());
    }
  finally {
      o.endTag(ns,""String_Node_Str"");
    }
    o.startTag(ns,""String_Node_Str"");
    try {
      o.text(log.getMessage());
    }
  finally {
      o.endTag(ns,""String_Node_Str"");
    }
  }
  finally {
    o.endTag(ns,""String_Node_Str"");
  }
}",0.5336048879837068
144902,"private void createDeviceLogSubreport(XmlSerializer o,Vector errors) throws IOException {
  try {
    Logger.log(""String_Node_Str"",Logger._().logSize() + ""String_Node_Str"");
    o.startTag(XMLNS,""String_Node_Str"");
    logSerializer=new XmlStreamLogSerializer(o,XMLNS);
    Logger._().serializeLogs(logSerializer);
    o.endTag(XMLNS,""String_Node_Str"");
  }
 catch (  Exception e) {
    logError(errors,new StatusReportException(e,""String_Node_Str"",""String_Node_Str""));
  }
}","private void createDeviceLogSubreport(XmlSerializer o,Vector errors) throws IOException {
  Logger.log(""String_Node_Str"",Logger._().logSize() + ""String_Node_Str"");
  o.startTag(XMLNS,""String_Node_Str"");
  try {
    logSerializer=new XmlStreamLogSerializer(o,XMLNS);
    Logger._().serializeLogs(logSerializer);
  }
 catch (  Exception e) {
    logError(errors,new StatusReportException(e,""String_Node_Str"",""String_Node_Str""));
  }
 finally {
    o.endTag(XMLNS,""String_Node_Str"");
  }
}",0.7221644120707597
144903,"private void createTransportSubreport(XmlSerializer o,Vector errors) throws IOException {
  try {
    o.startTag(XMLNS,""String_Node_Str"");
    o.startTag(XMLNS,""String_Node_Str"");
    o.text(String.valueOf(TransportService.getCachedMessagesSize()));
    o.endTag(XMLNS,""String_Node_Str"");
    o.endTag(XMLNS,""String_Node_Str"");
  }
 catch (  Exception e) {
    logError(errors,new StatusReportException(e,""String_Node_Str"",""String_Node_Str""));
  }
}","private void createTransportSubreport(XmlSerializer o,Vector errors) throws IOException {
  o.startTag(XMLNS,""String_Node_Str"");
  o.startTag(XMLNS,""String_Node_Str"");
  try {
    o.text(String.valueOf(TransportService.getCachedMessagesSize()));
  }
 catch (  Exception e) {
    logError(errors,new StatusReportException(e,""String_Node_Str"",""String_Node_Str""));
  }
 finally {
    o.endTag(XMLNS,""String_Node_Str"");
    o.endTag(XMLNS,""String_Node_Str"");
  }
}",0.7062706270627063
144904,"public Object getValue(){
  return gp;
}","public double[] getValue(){
  return gp;
}",0.8780487804878049
144905,"public static XPathPathExpr getPathExpr(String nodeset){
  XPathExpression path;
  boolean validNonPathExpr=false;
  try {
    path=XPathParseTool.parseXPath(nodeset);
    if (!(path instanceof XPathPathExpr)) {
      validNonPathExpr=true;
      throw new XPathSyntaxException();
    }
  }
 catch (  XPathSyntaxException xse) {
    if (validNonPathExpr) {
      throw new RuntimeException(""String_Node_Str"" + nodeset + ""String_Node_Str"");
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + nodeset + ""String_Node_Str"");
    }
  }
  return (XPathPathExpr)path;
}","public static XPathPathExpr getPathExpr(String nodeset){
  XPathExpression path;
  boolean validNonPathExpr=false;
  try {
    path=XPathParseTool.parseXPath(nodeset);
    if (!(path instanceof XPathPathExpr)) {
      validNonPathExpr=true;
      throw new XPathSyntaxException();
    }
  }
 catch (  XPathSyntaxException xse) {
    if (validNonPathExpr) {
      throw new RuntimeException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ xse.getMessage());
    }
 else {
      xse.printStackTrace();
      throw new RuntimeException(""String_Node_Str"" + nodeset + ""String_Node_Str""+ (xse.getMessage() == null ? ""String_Node_Str"" : ""String_Node_Str"" + xse.getMessage()));
    }
  }
  return (XPathPathExpr)path;
}",0.896124031007752
144906,"private boolean handled(Object a,Object b,Object sentinal,Vector<Object> pivots) throws UnpivotableExpressionException {
  if (sentinal == a) {
    if (b == null) {
      throw new UnpivotableExpressionException();
    }
 else     if (sentinal == b) {
      throw new UnpivotableExpressionException();
    }
 else {
      Double val=null;
      if (b instanceof Double) {
        val=(Double)b;
      }
 else {
        if (b instanceof Integer) {
          val=new Double(((Integer)b).doubleValue());
        }
        if (b instanceof Long) {
          val=new Double(((Long)b).doubleValue());
        }
        if (b instanceof Float) {
          val=new Double(((Float)b).doubleValue());
        }
        if (b instanceof Short) {
          val=new Double(((Short)b).shortValue());
        }
        if (b instanceof Byte) {
          val=new Double(((Byte)b).byteValue());
        }
 else {
          throw new UnpivotableExpressionException(""String_Node_Str"" + b);
        }
      }
      pivots.addElement(new CmpPivot(val.doubleValue(),op));
      return true;
    }
  }
  return false;
}","private boolean handled(Object a,Object b,Object sentinal,Vector<Object> pivots) throws UnpivotableExpressionException {
  if (sentinal == a) {
    if (b == null) {
      throw new UnpivotableExpressionException();
    }
 else     if (sentinal == b) {
      throw new UnpivotableExpressionException();
    }
 else {
      Double val=null;
      if (b instanceof Double) {
        val=(Double)b;
      }
 else {
        if (b instanceof Integer) {
          val=new Double(((Integer)b).doubleValue());
        }
 else         if (b instanceof Long) {
          val=new Double(((Long)b).doubleValue());
        }
 else         if (b instanceof Float) {
          val=new Double(((Float)b).doubleValue());
        }
 else         if (b instanceof Short) {
          val=new Double(((Short)b).shortValue());
        }
 else         if (b instanceof Byte) {
          val=new Double(((Byte)b).byteValue());
        }
 else {
          if (b instanceof String) {
            try {
              val=(Double)new DecimalData().cast(new UncastData((String)b)).getValue();
            }
 catch (            Exception e) {
              throw new UnpivotableExpressionException(""String_Node_Str"" + b);
            }
          }
 else {
            throw new UnpivotableExpressionException(""String_Node_Str"" + b);
          }
        }
      }
      pivots.addElement(new CmpPivot(val.doubleValue(),op));
      return true;
    }
  }
  return false;
}",0.8646942800788955
144907,"public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (handled(aval,bval,sentinal,pivots) || handled(bval,aval,sentinal,pivots)) {
    return null;
  }
  return this.eval(model,evalContext);
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (bval instanceof XPathNodeset) {
    bval=((XPathNodeset)bval).unpack();
  }
  if (handled(aval,bval,sentinal,pivots) || handled(bval,aval,sentinal,pivots)) {
    return null;
  }
  return this.eval(model,evalContext);
}",0.9084821428571428
144908,"public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  TreeReference ref=this.getReference();
  if (ref.equals(sentinal) || (ref.getRefLevel() == 0)) {
    return sentinal;
  }
 else {
    return this.eval(model,evalContext);
  }
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  TreeReference ref=this.getReference();
  if (ref.equals(sentinal) || (ref.getRefLevel() == 0)) {
    return sentinal;
  }
 else {
    for (int i=0; i < ref.size(); ++i) {
      if (ref.getPredicate(i) != null && ref.getPredicate(i).size() > 0) {
        throw new UnpivotableExpressionException(""String_Node_Str"" + ref.toString(true) + ""String_Node_Str"");
      }
    }
    return this.eval(model,evalContext);
  }
}",0.7174887892376681
144909,"public static Vector lex(String expr) throws XPathSyntaxException {
  Vector tokens=new Vector();
  int i=0;
  int context=LEX_CONTEXT_VAL;
  while (i < expr.length()) {
    int c=expr.charAt(i);
    int d=getChar(expr,i + 1);
    Token token=null;
    int skip=1;
    if (""String_Node_Str"".indexOf(c) >= 0) {
    }
 else     if (c == '=') {
      token=new Token(Token.EQ);
    }
 else     if (c == '!' && d == '=') {
      token=new Token(Token.NEQ);
      skip=2;
    }
 else     if (c == '<') {
      if (d == '=') {
        token=new Token(Token.LTE);
        skip=2;
      }
 else {
        token=new Token(Token.LT);
      }
    }
 else     if (c == '>') {
      if (d == '=') {
        token=new Token(Token.GTE);
        skip=2;
      }
 else {
        token=new Token(Token.GT);
      }
    }
 else     if (c == '+') {
      token=new Token(Token.PLUS);
    }
 else     if (c == '-') {
      token=new Token(context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);
    }
 else     if (c == '*') {
      token=new Token(context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);
    }
 else     if (c == '|') {
      token=new Token(Token.UNION);
    }
 else     if (c == '/') {
      if (d == '/') {
        token=new Token(Token.DBL_SLASH);
        skip=2;
      }
 else {
        token=new Token(Token.SLASH);
      }
    }
 else     if (c == '[') {
      token=new Token(Token.LBRACK);
    }
 else     if (c == ']') {
      token=new Token(Token.RBRACK);
    }
 else     if (c == '(') {
      token=new Token(Token.LPAREN);
    }
 else     if (c == ')') {
      token=new Token(Token.RPAREN);
    }
 else     if (c == '.') {
      if (d == '.') {
        token=new Token(Token.DBL_DOT);
        skip=2;
      }
 else       if (isDigit(d)) {
        skip=matchNumeric(expr,i);
        token=new Token(Token.NUM,Double.valueOf(expr.substring(i,i + skip)));
      }
 else {
        token=new Token(Token.DOT);
      }
    }
 else     if (c == '@') {
      token=new Token(Token.AT);
    }
 else     if (c == ',') {
      token=new Token(Token.COMMA);
    }
 else     if (c == ':' && d == ':') {
      token=new Token(Token.DBL_COLON);
      skip=2;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.AND);
      skip=3;
    }
 else     if (context == LEX_CONTEXT_OP && i + 2 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 2))) {
      token=new Token(Token.OR);
      skip=2;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.DIV);
      skip=3;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.MOD);
      skip=3;
    }
 else     if (c == '$') {
      int len=matchQName(expr,i + 1);
      if (len == 0) {
        throw new XPathSyntaxException();
      }
 else {
        token=new Token(Token.VAR,new XPathQName(expr.substring(i + 1,i + len + 1)));
        skip=len + 1;
      }
    }
 else     if (c == '\'' || c == '\""') {
      int end=expr.indexOf(c,i + 1);
      if (end == -1) {
        throw new XPathSyntaxException();
      }
 else {
        token=new Token(Token.STR,expr.substring(i + 1,end));
        skip=(end - i) + 1;
      }
    }
 else     if (isDigit(c)) {
      skip=matchNumeric(expr,i);
      token=new Token(Token.NUM,Double.valueOf(expr.substring(i,i + skip)));
    }
 else     if (context == LEX_CONTEXT_VAL && (isAlpha(c) || c == '_')) {
      int len=matchQName(expr,i);
      String name=expr.substring(i,i + len);
      if (name.indexOf(':') == -1 && getChar(expr,i + len) == ':' && getChar(expr,i + len + 1) == '*') {
        token=new Token(Token.NSWILDCARD,name);
        skip=len + 2;
      }
 else {
        token=new Token(Token.QNAME,new XPathQName(name));
        skip=len;
      }
    }
 else {
      throw new XPathSyntaxException();
    }
    if (token != null) {
      if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {
        context=LEX_CONTEXT_OP;
      }
 else {
        context=LEX_CONTEXT_VAL;
      }
      tokens.addElement(token);
    }
    i+=skip;
  }
  return tokens;
}","public static Vector lex(String expr) throws XPathSyntaxException {
  Vector tokens=new Vector();
  int i=0;
  int context=LEX_CONTEXT_VAL;
  while (i < expr.length()) {
    int c=expr.charAt(i);
    int d=getChar(expr,i + 1);
    Token token=null;
    int skip=1;
    if (""String_Node_Str"".indexOf(c) >= 0) {
    }
 else     if (c == '=') {
      token=new Token(Token.EQ);
    }
 else     if (c == '!' && d == '=') {
      token=new Token(Token.NEQ);
      skip=2;
    }
 else     if (c == '<') {
      if (d == '=') {
        token=new Token(Token.LTE);
        skip=2;
      }
 else {
        token=new Token(Token.LT);
      }
    }
 else     if (c == '>') {
      if (d == '=') {
        token=new Token(Token.GTE);
        skip=2;
      }
 else {
        token=new Token(Token.GT);
      }
    }
 else     if (c == '+') {
      token=new Token(Token.PLUS);
    }
 else     if (c == '-') {
      token=new Token(context == LEX_CONTEXT_VAL ? Token.UMINUS : Token.MINUS);
    }
 else     if (c == '*') {
      token=new Token(context == LEX_CONTEXT_VAL ? Token.WILDCARD : Token.MULT);
    }
 else     if (c == '|') {
      token=new Token(Token.UNION);
    }
 else     if (c == '/') {
      if (d == '/') {
        token=new Token(Token.DBL_SLASH);
        skip=2;
      }
 else {
        token=new Token(Token.SLASH);
      }
    }
 else     if (c == '[') {
      token=new Token(Token.LBRACK);
    }
 else     if (c == ']') {
      token=new Token(Token.RBRACK);
    }
 else     if (c == '(') {
      token=new Token(Token.LPAREN);
    }
 else     if (c == ')') {
      token=new Token(Token.RPAREN);
    }
 else     if (c == '.') {
      if (d == '.') {
        token=new Token(Token.DBL_DOT);
        skip=2;
      }
 else       if (isDigit(d)) {
        skip=matchNumeric(expr,i);
        token=new Token(Token.NUM,Double.valueOf(expr.substring(i,i + skip)));
      }
 else {
        token=new Token(Token.DOT);
      }
    }
 else     if (c == '@') {
      token=new Token(Token.AT);
    }
 else     if (c == ',') {
      token=new Token(Token.COMMA);
    }
 else     if (c == ':' && d == ':') {
      token=new Token(Token.DBL_COLON);
      skip=2;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.AND);
      skip=3;
    }
 else     if (context == LEX_CONTEXT_OP && i + 2 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 2))) {
      token=new Token(Token.OR);
      skip=2;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.DIV);
      skip=3;
    }
 else     if (context == LEX_CONTEXT_OP && i + 3 <= expr.length() && ""String_Node_Str"".equals(expr.substring(i,i + 3))) {
      token=new Token(Token.MOD);
      skip=3;
    }
 else     if (c == '$') {
      int len=matchQName(expr,i + 1);
      if (len == 0) {
        badParse(expr,i,(char)c);
      }
 else {
        token=new Token(Token.VAR,new XPathQName(expr.substring(i + 1,i + len + 1)));
        skip=len + 1;
      }
    }
 else     if (c == '\'' || c == '\""') {
      int end=expr.indexOf(c,i + 1);
      if (end == -1) {
        badParse(expr,i,(char)c);
      }
 else {
        token=new Token(Token.STR,expr.substring(i + 1,end));
        skip=(end - i) + 1;
      }
    }
 else     if (isDigit(c)) {
      skip=matchNumeric(expr,i);
      token=new Token(Token.NUM,Double.valueOf(expr.substring(i,i + skip)));
    }
 else     if (context == LEX_CONTEXT_VAL && (isAlpha(c) || c == '_')) {
      int len=matchQName(expr,i);
      String name=expr.substring(i,i + len);
      if (name.indexOf(':') == -1 && getChar(expr,i + len) == ':' && getChar(expr,i + len + 1) == '*') {
        token=new Token(Token.NSWILDCARD,name);
        skip=len + 2;
      }
 else {
        token=new Token(Token.QNAME,new XPathQName(name));
        skip=len;
      }
    }
 else {
      badParse(expr,i,(char)c);
    }
    if (token != null) {
      if (token.type == Token.WILDCARD || token.type == Token.NSWILDCARD || token.type == Token.QNAME || token.type == Token.VAR || token.type == Token.NUM || token.type == Token.STR || token.type == Token.RBRACK || token.type == Token.RPAREN || token.type == Token.DOT || token.type == Token.DBL_DOT) {
        context=LEX_CONTEXT_OP;
      }
 else {
        context=LEX_CONTEXT_VAL;
      }
      tokens.addElement(token);
    }
    i+=skip;
  }
  return tokens;
}",0.9846904814732638
144910,"private static void parseBalanced(ASTNode node,SubNodeFactory snf,int lToken,int rToken) throws XPathSyntaxException {
  if (node instanceof ASTNodeAbstractExpr) {
    ASTNodeAbstractExpr absNode=(ASTNodeAbstractExpr)node;
    int i=0;
    while (i < absNode.content.size()) {
      int type=absNode.getTokenType(i);
      if (type == rToken) {
        throw new XPathSyntaxException();
      }
 else       if (type == lToken) {
        int j=absNode.indexOfBalanced(i,rToken,lToken,rToken);
        if (j == -1) {
          throw new XPathSyntaxException();
        }
        absNode.condense(snf.newNode(absNode.extract(i + 1,j)),i,j + 1);
      }
      i++;
    }
  }
  for (Enumeration e=node.getChildren().elements(); e.hasMoreElements(); ) {
    parseBalanced((ASTNode)e.nextElement(),snf,lToken,rToken);
  }
}","private static void parseBalanced(ASTNode node,SubNodeFactory snf,int lToken,int rToken) throws XPathSyntaxException {
  if (node instanceof ASTNodeAbstractExpr) {
    ASTNodeAbstractExpr absNode=(ASTNodeAbstractExpr)node;
    int i=0;
    while (i < absNode.content.size()) {
      int type=absNode.getTokenType(i);
      if (type == rToken) {
        throw new XPathSyntaxException(""String_Node_Str"");
      }
 else       if (type == lToken) {
        int j=absNode.indexOfBalanced(i,rToken,lToken,rToken);
        if (j == -1) {
          throw new XPathSyntaxException();
        }
        absNode.condense(snf.newNode(absNode.extract(i + 1,j)),i,j + 1);
      }
      i++;
    }
  }
  for (Enumeration e=node.getChildren().elements(); e.hasMoreElements(); ) {
    parseBalanced((ASTNode)e.nextElement(),snf,lToken,rToken);
  }
}",0.9896907216494846
144911,"public void questionAnswered(){
  ChatterboxWidget frame=activeFrame();
  if (activeQuestionIndex != this.model.getFormIndex()) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (activeIsInterstitial) {
    if (frame.getData() == null) {
      this.queueError(null,PROMPT_REQUIRED_QUESTION,null,null);
      return;
    }
    String answer=((Selection)frame.getData().getValue()).getValue();
    if (FormEntryModel.REPEAT_STRUCTURE_NON_LINEAR != model.getRepeatStructure()) {
      if (answer.equals(""String_Node_Str"")) {
        controller.newRepeat(this.model.getFormIndex());
        createHeaderForElement(this.model.getFormIndex(),true);
      }
      step(controller.stepToNextEvent());
    }
 else {
      if (answer.startsWith(""String_Node_Str"")) {
        removeFrame(this.activeQuestionIndex);
        int n=Integer.parseInt(answer.substring(3));
        this.activeQuestionIndex=controller.descendIntoRepeat(n);
        createHeaderForElement(activeQuestionIndex,false);
      }
 else       if (answer.equals(""String_Node_Str"")) {
        removeFrame(this.activeQuestionIndex);
        uncommittedRepeats.addElement(this.activeQuestionIndex);
        this.activeQuestionIndex=controller.descendIntoNewRepeat();
        createHeaderForElement(activeQuestionIndex,false);
      }
 else       if (answer.equals(""String_Node_Str"")) {
        deleteInterstitial=true;
        jumpToQuestion(this.activeQuestionIndex);
        return;
      }
 else       if (answer.startsWith(""String_Node_Str"")) {
        int n=Integer.parseInt(answer.substring(3));
        controller.deleteRepeat(n);
        deleteInterstitial=false;
        jumpToQuestion(this.activeQuestionIndex);
        return;
      }
 else       if (answer.equals(""String_Node_Str"")) {
      }
      step(controller.stepToNextEvent());
    }
  }
 else {
    int status=controller.answerQuestion(this.model.getFormIndex(),frame.getData());
    if (status == FormEntryController.ANSWER_REQUIRED_BUT_EMPTY) {
      this.queueError(null,PROMPT_REQUIRED_QUESTION,null,null);
    }
 else     if (status == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
      String msg=frame.getPrompt().getConstraintText(frame.getData());
      String image=frame.getPrompt().getConstraintText(FormEntryCaption.TEXT_FORM_IMAGE,frame.getData());
      String audio=frame.getPrompt().getConstraintText(FormEntryCaption.TEXT_FORM_AUDIO,frame.getData());
      this.queueError(null,msg != null ? msg : PROMPT_DEFAULT_CONSTRAINT_VIOL,image,audio);
    }
 else {
      step(controller.stepToNextEvent());
    }
  }
}","public void questionAnswered(){
  ChatterboxWidget frame=activeFrame();
  if (activeQuestionIndex != this.model.getFormIndex()) {
    System.out.println(""String_Node_Str"");
    return;
  }
  if (activeIsInterstitial) {
    IAnswerData frameData;
    try {
      frameData=frame.getData();
    }
 catch (    InvalidDataException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + e.getMessage());
    }
    if (frameData == null) {
      this.queueError(null,PROMPT_REQUIRED_QUESTION,null,null);
      return;
    }
    String answer=((Selection)frameData.getValue()).getValue();
    if (FormEntryModel.REPEAT_STRUCTURE_NON_LINEAR != model.getRepeatStructure()) {
      if (answer.equals(""String_Node_Str"")) {
        controller.newRepeat(this.model.getFormIndex());
        createHeaderForElement(this.model.getFormIndex(),true);
      }
      step(controller.stepToNextEvent());
    }
 else {
      if (answer.startsWith(""String_Node_Str"")) {
        removeFrame(this.activeQuestionIndex);
        int n=Integer.parseInt(answer.substring(3));
        this.activeQuestionIndex=controller.descendIntoRepeat(n);
        createHeaderForElement(activeQuestionIndex,false);
      }
 else       if (answer.equals(""String_Node_Str"")) {
        removeFrame(this.activeQuestionIndex);
        uncommittedRepeats.addElement(this.activeQuestionIndex);
        this.activeQuestionIndex=controller.descendIntoNewRepeat();
        createHeaderForElement(activeQuestionIndex,false);
      }
 else       if (answer.equals(""String_Node_Str"")) {
        deleteInterstitial=true;
        jumpToQuestion(this.activeQuestionIndex);
        return;
      }
 else       if (answer.startsWith(""String_Node_Str"")) {
        int n=Integer.parseInt(answer.substring(3));
        controller.deleteRepeat(n);
        deleteInterstitial=false;
        jumpToQuestion(this.activeQuestionIndex);
        return;
      }
 else       if (answer.equals(""String_Node_Str"")) {
      }
      step(controller.stepToNextEvent());
    }
  }
 else {
    IAnswerData data;
    try {
      data=frame.getData();
    }
 catch (    InvalidDataException e) {
      IAnswerData uncast=e.getUncastStandin();
      String msg=frame.getPrompt().getConstraintText(uncast);
      if (msg == null) {
        this.queueError(null,e.getMessage(),null,null);
        return;
      }
 else {
        String image=frame.getPrompt().getConstraintText(FormEntryCaption.TEXT_FORM_IMAGE,uncast);
        String audio=frame.getPrompt().getConstraintText(FormEntryCaption.TEXT_FORM_AUDIO,uncast);
        this.queueError(null,msg,image,audio);
        return;
      }
    }
    int status=controller.answerQuestion(this.model.getFormIndex(),data);
    if (status == FormEntryController.ANSWER_REQUIRED_BUT_EMPTY) {
      this.queueError(null,PROMPT_REQUIRED_QUESTION,null,null);
    }
 else     if (status == FormEntryController.ANSWER_CONSTRAINT_VIOLATED) {
      String msg=frame.getPrompt().getConstraintText(data);
      String image=frame.getPrompt().getConstraintText(FormEntryCaption.TEXT_FORM_IMAGE,data);
      String audio=frame.getPrompt().getConstraintText(FormEntryCaption.TEXT_FORM_AUDIO,data);
      this.queueError(null,msg != null ? msg : PROMPT_DEFAULT_CONSTRAINT_VIOL,image,audio);
    }
 else {
      step(controller.stepToNextEvent());
    }
  }
}",0.8409977939928729
144912,"private void commitAndSave(){
  ChatterboxWidget frame=(activeIsInterstitial ? null : activeFrame());
  if (frame != null) {
    controller.answerQuestion(this.model.getFormIndex(),frame.getData());
  }
  controller.saveAndExit(true);
}","private void commitAndSave(){
  ChatterboxWidget frame=(activeIsInterstitial ? null : activeFrame());
  if (frame != null) {
    try {
      controller.answerQuestion(this.model.getFormIndex(),frame.getData());
    }
 catch (    InvalidDataException ide) {
    }
  }
  controller.saveAndExit(true);
}",0.8097014925373134
144913,"public IAnswerData getData(){
  if (viewState == VIEW_EXPANDED) {
    return expandedStyle.getData();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","public IAnswerData getData() throws InvalidDataException {
  if (viewState == VIEW_EXPANDED) {
    return expandedStyle.getData();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9234828496042216
144914,"public boolean canCreateRepeat(TreeReference repeatRef,FormIndex repeatIndex){
  GroupDef repeat=(GroupDef)this.getChild(repeatIndex);
  if (repeat.noAddRemove) {
    if (repeat.getCountReference() != null) {
      int currentMultiplicity=repeatIndex.getElementMultiplicity();
      AbstractTreeElement countNode=this.getMainInstance().resolveReference(repeat.getCountReference());
      if (countNode == null) {
        throw new RuntimeException(""String_Node_Str"" + repeat.getCountReference().getReference().toString());
      }
      long fullcount=((Integer)countNode.getValue().getValue()).intValue();
      if (fullcount <= currentMultiplicity) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  return true;
}","public boolean canCreateRepeat(TreeReference repeatRef,FormIndex repeatIndex){
  GroupDef repeat=(GroupDef)this.getChild(repeatIndex);
  if (repeat.noAddRemove) {
    if (repeat.getCountReference() != null) {
      int currentMultiplicity=repeatIndex.getElementMultiplicity();
      AbstractTreeElement countNode=this.getMainInstance().resolveReference(repeat.getCountReference());
      if (countNode == null) {
        throw new RuntimeException(""String_Node_Str"" + repeat.getCountReference().getReference().toString());
      }
      IAnswerData count=countNode.getValue();
      long fullcount=count == null ? 0 : ((Integer)count.getValue()).intValue();
      if (fullcount <= currentMultiplicity) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  return true;
}",0.9355888093689004
144915,"/** 
 * Writes the form definition object to the supplied stream.
 * @param dos - the stream to write to.
 * @throws IOException
 */
public void writeExternal(DataOutputStream dos) throws IOException {
  ExtUtil.writeNumeric(dos,getID());
  ExtUtil.writeString(dos,ExtUtil.emptyIfNull(getName()));
  ExtUtil.write(dos,new ExtWrapNullable(getTitle()));
  ExtUtil.write(dos,new ExtWrapListPoly(getChildren()));
  ExtUtil.write(dos,getMainInstance());
  ExtUtil.write(dos,new ExtWrapNullable(localizer));
  Vector conditions=new Vector();
  Vector recalcs=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    if (t instanceof Condition) {
      conditions.addElement(t);
    }
 else     if (t instanceof Recalculate) {
      recalcs.addElement(t);
    }
  }
  ExtUtil.write(dos,new ExtWrapList(conditions));
  ExtUtil.write(dos,new ExtWrapList(recalcs));
  ExtUtil.write(dos,new ExtWrapListPoly(outputFragments));
  ExtUtil.write(dos,new ExtWrapMap(submissionProfiles));
  ExtUtil.write(dos,new ExtWrapMap(formInstances,new ExtWrapTagged()));
  ExtUtil.write(dos,new ExtWrapMap(eventListeners,new ExtWrapListPoly()));
}","/** 
 * Writes the form definition object to the supplied stream.
 * @param dos - the stream to write to.
 * @throws IOException
 */
public void writeExternal(DataOutputStream dos) throws IOException {
  ExtUtil.writeNumeric(dos,getID());
  ExtUtil.writeString(dos,ExtUtil.emptyIfNull(getName()));
  ExtUtil.write(dos,new ExtWrapNullable(getTitle()));
  ExtUtil.write(dos,new ExtWrapListPoly(getChildren()));
  ExtUtil.write(dos,getMainInstance());
  ExtUtil.write(dos,new ExtWrapNullable(localizer));
  Vector conditions=new Vector();
  Vector recalcs=new Vector();
  for (int i=0; i < triggerables.size(); i++) {
    Triggerable t=(Triggerable)triggerables.elementAt(i);
    if (t instanceof Condition) {
      conditions.addElement(t);
    }
 else     if (t instanceof Recalculate) {
      recalcs.addElement(t);
    }
  }
  ExtUtil.write(dos,new ExtWrapList(conditions));
  ExtUtil.write(dos,new ExtWrapList(recalcs));
  ExtUtil.write(dos,new ExtWrapListPoly(outputFragments));
  ExtUtil.write(dos,new ExtWrapMap(submissionProfiles));
  ExtUtil.write(dos,new ExtWrapMap(formInstances,new ExtWrapTagged()));
  ExtUtil.write(dos,new ExtWrapMap(eventListeners,new ExtWrapListPoly()));
  ExtUtil.write(dos,new ExtWrapListPoly(extensions));
}",0.9777594728171336
144916,"/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); ) {
    addTriggerable((Condition)e.nextElement());
  }
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); ) {
    addTriggerable((Recalculate)e.nextElement());
  }
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class));
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()));
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()));
  setEvaluationContext(new EvaluationContext(null));
}","/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); ) {
    addTriggerable((Condition)e.nextElement());
  }
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); ) {
    addTriggerable((Recalculate)e.nextElement());
  }
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class));
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()));
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()));
  extensions=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  setEvaluationContext(new EvaluationContext(null));
}",0.9814972957586108
144917,"/** 
 */
public FormDef(){
  setID(-1);
  setChildren(null);
  triggerables=new Vector();
  triggerablesInOrder=true;
  triggerIndex=new Hashtable();
  setEvaluationContext(new EvaluationContext(null));
  outputFragments=new Vector();
  submissionProfiles=new Hashtable<String,SubmissionProfile>();
  formInstances=new Hashtable<String,DataInstance>();
  eventListeners=new Hashtable<String,Vector<Action>>();
}","/** 
 */
public FormDef(){
  setID(-1);
  setChildren(null);
  triggerables=new Vector();
  triggerablesInOrder=true;
  triggerIndex=new Hashtable();
  setEvaluationContext(new EvaluationContext(null));
  outputFragments=new Vector();
  submissionProfiles=new Hashtable<String,SubmissionProfile>();
  formInstances=new Hashtable<String,DataInstance>();
  eventListeners=new Hashtable<String,Vector<Action>>();
  extensions=new Vector<XFormExtension>();
}",0.9502890173410404
144918,"public TreeReference contextualize(TreeReference contextRef){
  if (!contextRef.isAbsolute()) {
    return null;
  }
  TreeReference newRef=anchor(contextRef);
  newRef.setContext(contextRef.getContext());
  for (int i=0; i < contextRef.size() && i < newRef.size(); i++) {
    if (TreeReference.NAME_WILDCARD.equals(newRef.getName(i)) && !TreeReference.NAME_WILDCARD.equals(contextRef.getName(i))) {
      data.setElementAt(data.elementAt(i).setName(contextRef.getName(i)),i);
    }
    if (contextRef.getName(i).equals(newRef.getName(i))) {
      if (newRef.getPredicate(i) == null) {
        newRef.setMultiplicity(i,contextRef.getMultiplicity(i));
      }
    }
 else {
      break;
    }
  }
  return newRef;
}","public TreeReference contextualize(TreeReference contextRef){
  if (!contextRef.isAbsolute()) {
    return null;
  }
  TreeReference newRef=anchor(contextRef);
  newRef.setContext(contextRef.getContext());
  for (int i=0; i < contextRef.size() && i < newRef.size(); i++) {
    if (TreeReference.NAME_WILDCARD.equals(newRef.getName(i)) && !TreeReference.NAME_WILDCARD.equals(contextRef.getName(i))) {
      newRef.data.setElementAt(newRef.data.elementAt(i).setName(contextRef.getName(i)),i);
    }
    if (contextRef.getName(i).equals(newRef.getName(i))) {
      if (newRef.getPredicate(i) == null) {
        newRef.setMultiplicity(i,contextRef.getMultiplicity(i));
      }
    }
 else {
      break;
    }
  }
  return newRef;
}",0.9902912621359224
144919,"public void registerModule(){
  GraphElementHandler graphHandler=new GraphElementHandler();
  graphHandler.registerGraphType(WHOWeightTemplate.WHO_WEIGHT_TEMPLATE_NAME);
  XFormParser.registerHandler(""String_Node_Str"",graphHandler);
  XFormParser.addDataType(""String_Node_Str"",GraphDataGroup.GRAPH_DATA_ID);
  XFormParser.addModelPrototype(GraphDataGroup.GRAPH_DATA_ID,new GraphDataGroup());
  XFormParser.registerControlType(""String_Node_Str"",ImmunizationWidget.CONTROL_IMMUNIZATION);
  String[] classes={""String_Node_Str""};
  PrototypeManager.registerPrototypes(classes);
  ByteArrayOutputStream bis=new ByteArrayOutputStream();
  DataOutputStream out=new DataOutputStream(bis);
  try {
    ExtUtil.write(out,new ExtWrapTagged(new GraphDataGroup()));
    byte[] test=bis.toByteArray();
    DataInputStream in=new DataInputStream(new ByteArrayInputStream(test));
    ExtUtil.read(in,new ExtWrapTagged());
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
catch (  DeserializationException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
}","public void registerModule(){
  XFormParser.addDataType(""String_Node_Str"",GraphDataGroup.GRAPH_DATA_ID);
  XFormParser.addModelPrototype(GraphDataGroup.GRAPH_DATA_ID,new GraphDataGroup());
  XFormParser.registerControlType(""String_Node_Str"",ImmunizationWidget.CONTROL_IMMUNIZATION);
  String[] classes={""String_Node_Str""};
  PrototypeManager.registerPrototypes(classes);
  ByteArrayOutputStream bis=new ByteArrayOutputStream();
  DataOutputStream out=new DataOutputStream(bis);
  try {
    ExtUtil.write(out,new ExtWrapTagged(new GraphDataGroup()));
    byte[] test=bis.toByteArray();
    DataInputStream in=new DataInputStream(new ByteArrayInputStream(test));
    ExtUtil.read(in,new ExtWrapTagged());
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
catch (  DeserializationException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.901979719942057
144920,"public void send(){
  try {
    HttpConnection connection=getConnection();
    int response=connection.getResponseCode();
    if (response == HttpConnection.HTTP_UNAUTHORIZED) {
      String challenge=getChallenge(connection);
      if (this.issueChallenge(connection,challenge)) {
        connection.close();
        connection=getConnection();
        handleResponse(connection);
      }
 else {
        handleResponse(connection);
      }
    }
 else {
      handleResponse(connection);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    this.setStatus(TransportMessageStatus.FAILED);
    this.setFailureReason(WrappedException.printException(e));
  }
}","public void send(){
  HttpConnection connection=null;
  try {
    connection=getConnection();
    int response=connection.getResponseCode();
    if (response == HttpConnection.HTTP_UNAUTHORIZED) {
      String challenge=getChallenge(connection);
      if (this.issueChallenge(connection,challenge)) {
        connection.close();
        connection=getConnection();
        handleResponse(connection);
      }
 else {
        handleResponse(connection);
      }
    }
 else {
      handleResponse(connection);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    this.setStatus(TransportMessageStatus.FAILED);
    this.setFailureReason(WrappedException.printException(e));
  }
 finally {
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.8739159439626417
144921,"private void syncMeta(){
  meta.clear();
  for (Enumeration en=data.keys(); en.hasMoreElements(); ) {
    Integer i=(Integer)en.nextElement();
    Externalizable e=(Externalizable)data.get(i);
    if (e instanceof IMetaData) {
      IMetaData m=(IMetaData)e;
      for (      String key : m.getMetaDataFields()) {
        if (!meta.containsKey(key)) {
          meta.put(key,new Hashtable<Object,Vector<Integer>>());
        }
      }
      for (      String key : dynamicIndices) {
        if (!meta.containsKey(key)) {
          meta.put(key,new Hashtable<Object,Vector<Integer>>());
        }
      }
      for (Enumeration keys=meta.keys(); en.hasMoreElements(); ) {
        String key=(String)keys.nextElement();
        Object value=m.getMetaData(key);
        Hashtable<Object,Vector<Integer>> records=meta.get(key);
        if (!records.containsKey(value)) {
          records.put(value,new Vector<Integer>());
        }
        Vector<Integer> indices=records.get(value);
        if (!indices.contains(i)) {
          records.get(value).addElement(i);
        }
      }
    }
  }
}","private void syncMeta(){
  meta.clear();
  for (Enumeration en=data.keys(); en.hasMoreElements(); ) {
    Integer i=(Integer)en.nextElement();
    Externalizable e=(Externalizable)data.get(i);
    if (e instanceof IMetaData) {
      IMetaData m=(IMetaData)e;
      for (      String key : m.getMetaDataFields()) {
        if (!meta.containsKey(key)) {
          meta.put(key,new Hashtable<Object,Vector<Integer>>());
        }
      }
      for (      String key : dynamicIndices) {
        if (!meta.containsKey(key)) {
          meta.put(key,new Hashtable<Object,Vector<Integer>>());
        }
      }
      for (Enumeration keys=meta.keys(); keys.hasMoreElements(); ) {
        String key=(String)keys.nextElement();
        Object value=m.getMetaData(key);
        Hashtable<Object,Vector<Integer>> records=meta.get(key);
        if (!records.containsKey(value)) {
          records.put(value,new Vector<Integer>());
        }
        Vector<Integer> indices=records.get(value);
        if (!indices.contains(i)) {
          records.get(value).addElement(i);
        }
      }
    }
  }
}",0.997250229147571
144922,"public void registerIndex(String index){
synchronized (metadataAccessLock) {
    if (dynamicIndices == null) {
      dynamicIndices=new Vector<String>();
    }
    dynamicIndices.addElement(index);
    buildIndex();
  }
}","public void registerIndex(String index){
  if (index == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
synchronized (metadataAccessLock) {
    if (dynamicIndices == null) {
      dynamicIndices=new Vector<String>();
    }
    dynamicIndices.addElement(index);
    buildIndex();
  }
}",0.8435114503816794
144923,"private IMetaData getMetaDataForRecord(int record){
  Hashtable<String,Object> data=null;
synchronized (metadataAccessLock) {
    if (hasMetaData) {
      if (exists(record)) {
        data=new Hashtable<String,Object>();
        Integer recordId=DataUtil.integer(record);
        for (        String s : proto.getMetaDataFields()) {
          Hashtable<Object,Vector<Integer>> values=metaDataIndex.get(s);
          for (Enumeration en=values.keys(); en.hasMoreElements(); ) {
            Object o=en.nextElement();
            Vector<Integer> ids=values.get(o);
            if (ids.contains(recordId)) {
              data.put(s,o);
              break;
            }
          }
        }
      }
    }
  }
  return new MetaDataWrapper(data);
}","private IMetaData getMetaDataForRecord(int record){
  Hashtable<String,Object> data=null;
synchronized (metadataAccessLock) {
    if (hasMetaData) {
      if (exists(record)) {
        data=new Hashtable<String,Object>();
        Integer recordId=DataUtil.integer(record);
        for (        String s : getFields()) {
          Hashtable<Object,Vector<Integer>> values=metaDataIndex.get(s);
          for (Enumeration en=values.keys(); en.hasMoreElements(); ) {
            Object o=en.nextElement();
            Vector<Integer> ids=values.get(o);
            if (ids.contains(recordId)) {
              data.put(s,o);
              break;
            }
          }
        }
      }
    }
  }
  return new MetaDataWrapper(data);
}",0.9864864864864864
144924,"private Hashtable<String,Object> getMetaData(IMetaData m,String[] index){
  Hashtable<String,Object> h=new Hashtable<String,Object>();
  for (  String s : index) {
    h.put(s,m.getMetaData(s));
  }
  return h;
}","private Hashtable<String,Object> getMetaData(IMetaData m,String[] index){
  Hashtable<String,Object> h=new Hashtable<String,Object>();
  for (  String s : index) {
    Object o=m.getMetaData(s);
    if (o == null || s == null) {
      ""String_Node_Str"".charAt(0);
    }
    h.put(s,o);
  }
  return h;
}",0.7611650485436893
144925,"public boolean isReadOnly(){
  try {
    FileConnection c=connector();
    if (c.exists()) {
      return c.canWrite();
    }
 else {
      try {
        String local=this.getLocalURI();
        if (local.indexOf(""String_Node_Str"") == -1) {
          return false;
        }
 else {
          String parent=local.substring(0,local.lastIndexOf('/'));
          FileConnection parentConnector=this.connector(parent,false);
          if (parentConnector.exists() && parentConnector.isDirectory()) {
            boolean result=parentConnector.canWrite();
            parentConnector.close();
            return result;
          }
          return false;
        }
      }
 catch (      Exception e) {
        return false;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return true;
  }
catch (  SecurityException se) {
    return true;
  }
}","public boolean isReadOnly(){
  try {
    FileConnection c=connector();
    if (c.exists()) {
      return !c.canWrite();
    }
 else {
      try {
        String local=this.getLocalURI();
        if (local.indexOf(""String_Node_Str"") == -1) {
          return false;
        }
 else {
          String parent=local.substring(0,local.lastIndexOf('/'));
          FileConnection parentConnector=this.connector(parent,false);
          if (parentConnector.exists() && parentConnector.isDirectory()) {
            boolean result=parentConnector.canWrite();
            parentConnector.close();
            return !result;
          }
          return false;
        }
      }
 catch (      Exception e) {
        return false;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return true;
  }
catch (  SecurityException se) {
    return true;
  }
}",0.9988465974625144
144926,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,ExtUtil.emptyIfNull(name));
  ExtUtil.writeNumeric(out,multiplicity);
  ExtUtil.write(out,new ExtWrapList(ExtUtil.emptyIfNull(predicates)));
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.writeString(out,ExtUtil.emptyIfNull(name));
  ExtUtil.writeNumeric(out,multiplicity);
  ExtUtil.write(out,new ExtWrapListPoly(ExtUtil.emptyIfNull(predicates)));
}",0.99163179916318
144927,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  name=ExtUtil.nullIfEmpty(ExtUtil.readString(in));
  multiplicity=ExtUtil.readInt(in);
  predicates=ExtUtil.nullIfEmpty((Vector<XPathExpression>)ExtUtil.read(in,new ExtWrapList(new ExtWrapTagged())));
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  name=ExtUtil.nullIfEmpty(ExtUtil.readString(in));
  multiplicity=ExtUtil.readInt(in);
  predicates=ExtUtil.nullIfEmpty((Vector<XPathExpression>)ExtUtil.read(in,new ExtWrapListPoly()));
}",0.959349593495935
144928,"/** 
 * Get text for locale and exact text ID only, not using any fallbacks. NOTE: This call will only return the full compliment of available strings if and  only if the requested locale is current. Otherwise it will only retrieve strings declared at runtime.
 * @param locale Locale. Must be defined and not null.
 * @param textID Text handle (text ID appended with optional text form). Must not be null.
 * @return Localized text. Return null if none found.
 * @throws UnregisteredLocaleException If the locale is not defined or null.
 * @throws NullPointerException if textID is null
 */
public String getRawText(String locale,String textID){
  if (locale == null) {
    throw new UnregisteredLocaleException(""String_Node_Str"" + textID);
  }
  if (locale.equals(currentLocale)) {
    return currentLocaleData.get(textID).render();
  }
 else {
    return (String)getLocaleMap(locale).get(textID);
  }
}","/** 
 * Get text for locale and exact text ID only, not using any fallbacks. NOTE: This call will only return the full compliment of available strings if and  only if the requested locale is current. Otherwise it will only retrieve strings declared at runtime.
 * @param locale Locale. Must be defined and not null.
 * @param textID Text handle (text ID appended with optional text form). Must not be null.
 * @return Localized text. Return null if none found.
 * @throws UnregisteredLocaleException If the locale is not defined or null.
 * @throws NullPointerException if textID is null
 */
public String getRawText(String locale,String textID){
  if (locale == null) {
    throw new UnregisteredLocaleException(""String_Node_Str"" + textID);
  }
  if (locale.equals(currentLocale)) {
    PrefixTreeNode data=currentLocaleData.get(textID);
    return data == null ? null : data.render();
  }
 else {
    return (String)getLocaleMap(locale).get(textID);
  }
}",0.9645542427497314
144929,"public static void main(String[] args){
  int mode=-1;
  if (args.length == 0) {
    mode=MODE_SCHEMA;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_SCHEMA;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_SUMMARY_TEXT;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_CSV_DUMP;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_CSV_IMPORT;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_VALIDATE_MODEL;
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  if (mode == MODE_VALIDATE_MODEL) {
    String formPath=args[1];
    String modelPath=args[2];
    FileInputStream formInput=null;
    FileInputStream instanceInput=null;
    try {
      formInput=new FileInputStream(formPath);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + formPath);
      System.exit(1);
    }
    try {
      instanceInput=new FileInputStream(modelPath);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + modelPath);
      System.exit(1);
    }
    try {
      FormInstanceValidator validator=new FormInstanceValidator(formInput,instanceInput);
      validator.simulateEntryTest();
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  PrintStream sysOut=System.out;
  System.setOut(System.err);
  if (mode == MODE_CSV_IMPORT) {
    System.setOut(sysOut);
    if (args.length > 1) {
      String delimeter=args[1];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,null,null);
    }
 else     if (args.length > 2) {
      String delimeter=args[1];
      String encoding=args[2];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,encoding,null);
    }
 else     if (args.length > 3) {
      String delimeter=args[1];
      String incoding=args[2];
      String outcoding=args[3];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,incoding,outcoding);
    }
 else {
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out);
    }
    System.exit(0);
  }
  FormDef f=XFormUtils.getFormFromInputStream(System.in);
  System.setOut(sysOut);
  if (mode == MODE_SCHEMA) {
    Document schemaDoc=InstanceSchema.generateInstanceSchema(f);
    KXmlSerializer serializer=new KXmlSerializer();
    try {
      serializer.setOutput(System.out,null);
      schemaDoc.write(serializer);
      serializer.flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (mode == MODE_SUMMARY_TEXT) {
    System.out.println(FormOverview.overview(f));
  }
 else   if (mode == MODE_CSV_DUMP) {
    System.out.println(FormTranslationFormatter.dumpTranslationsIntoCSV(f));
  }
}","public static void main(String[] args){
  int mode=-1;
  if (args.length == 0) {
    mode=MODE_SCHEMA;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_SCHEMA;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_SUMMARY_TEXT;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_CSV_DUMP;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_CSV_IMPORT;
  }
 else   if (args[0].equals(""String_Node_Str"")) {
    mode=MODE_VALIDATE_MODEL;
  }
 else {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.exit(1);
  }
  if (mode == MODE_VALIDATE_MODEL) {
    String formPath=args[1];
    String modelPath=args[2];
    FileInputStream formInput=null;
    FileInputStream instanceInput=null;
    try {
      formInput=new FileInputStream(formPath);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + formPath);
      System.exit(1);
    }
    try {
      instanceInput=new FileInputStream(modelPath);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + modelPath);
      System.exit(1);
    }
    try {
      FormInstanceValidator validator=new FormInstanceValidator(formInput,instanceInput);
      validator.simulateEntryTest();
    }
 catch (    Exception e) {
      e.printStackTrace();
      System.exit(1);
    }
    System.out.println(""String_Node_Str"");
    System.exit(0);
  }
  PrintStream sysOut=System.out;
  System.setOut(System.err);
  if (mode == MODE_CSV_IMPORT) {
    System.setOut(sysOut);
    if (args.length > 1) {
      String delimeter=args[1];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,null,null);
    }
 else     if (args.length > 2) {
      String delimeter=args[1];
      String encoding=args[2];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,encoding,null);
    }
 else     if (args.length > 3) {
      String delimeter=args[1];
      String incoding=args[2];
      String outcoding=args[3];
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out,delimeter,incoding,outcoding);
    }
 else {
      FormTranslationFormatter.turnTranslationsCSVtoItext(System.in,System.out);
    }
    System.exit(0);
  }
  InputStream inputStream=System.in;
  if (args.length > 1) {
    String formPath=args[1];
    FileInputStream formInput=null;
    try {
      inputStream=new FileInputStream(formPath);
    }
 catch (    FileNotFoundException e) {
      System.out.println(""String_Node_Str"" + formPath);
      System.exit(1);
    }
  }
  FormDef f=XFormUtils.getFormFromInputStream(inputStream);
  System.setOut(sysOut);
  if (mode == MODE_SCHEMA) {
    Document schemaDoc=InstanceSchema.generateInstanceSchema(f);
    KXmlSerializer serializer=new KXmlSerializer();
    try {
      serializer.setOutput(System.out,null);
      schemaDoc.write(serializer);
      serializer.flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (mode == MODE_SUMMARY_TEXT) {
    System.out.println(FormOverview.overview(f));
  }
 else   if (mode == MODE_CSV_DUMP) {
    System.out.println(FormTranslationFormatter.dumpTranslationsIntoCSV(f));
  }
  System.exit(0);
}",0.94357515410147
144930,"public void triggerTriggerables(TreeReference ref){
  TreeReference genericRef=ref.genericize();
  Vector triggered=(Vector)triggerIndex.get(genericRef);
  if (triggered == null)   return;
  Vector triggeredCopy=new Vector();
  for (int i=0; i < triggered.size(); i++)   triggeredCopy.addElement(triggered.elementAt(i));
  evaluateTriggerables(triggeredCopy,ref);
}","public void triggerTriggerables(TreeReference ref){
  TreeReference genericRef=ref.genericize();
  Vector triggered=(Vector)triggerIndex.get(genericRef);
  if (triggered == null) {
    return;
  }
  Vector triggeredCopy=new Vector();
  for (int i=0; i < triggered.size(); i++) {
    triggeredCopy.addElement(triggered.elementAt(i));
  }
  evaluateTriggerables(triggeredCopy,ref);
}",0.9785522788203752
144931,"/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); )   addTriggerable((Condition)e.nextElement());
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); )   addTriggerable((Recalculate)e.nextElement());
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class));
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()));
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()));
  setEvaluationContext(new EvaluationContext(null));
}","/** 
 * Reads the form definition object from the supplied stream. Requires that the instance has been set to a prototype of the instance that should be used for deserialization.
 * @param dis - the stream to read from.
 * @throws IOException
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
public void readExternal(DataInputStream dis,PrototypeFactory pf) throws IOException, DeserializationException {
  setID(ExtUtil.readInt(dis));
  setName(ExtUtil.nullIfEmpty(ExtUtil.readString(dis)));
  setTitle((String)ExtUtil.read(dis,new ExtWrapNullable(String.class),pf));
  setChildren((Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf));
  setInstance((FormInstance)ExtUtil.read(dis,FormInstance.class,pf));
  setLocalizer((Localizer)ExtUtil.read(dis,new ExtWrapNullable(Localizer.class),pf));
  Vector vcond=(Vector)ExtUtil.read(dis,new ExtWrapList(Condition.class),pf);
  for (Enumeration e=vcond.elements(); e.hasMoreElements(); ) {
    addTriggerable((Condition)e.nextElement());
  }
  Vector vcalc=(Vector)ExtUtil.read(dis,new ExtWrapList(Recalculate.class),pf);
  for (Enumeration e=vcalc.elements(); e.hasMoreElements(); ) {
    addTriggerable((Recalculate)e.nextElement());
  }
  finalizeTriggerables();
  outputFragments=(Vector)ExtUtil.read(dis,new ExtWrapListPoly(),pf);
  submissionProfiles=(Hashtable<String,SubmissionProfile>)ExtUtil.read(dis,new ExtWrapMap(String.class,SubmissionProfile.class));
  formInstances=(Hashtable<String,DataInstance>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapTagged()));
  eventListeners=(Hashtable<String,Vector<Action>>)ExtUtil.read(dis,new ExtWrapMap(String.class,new ExtWrapListPoly()));
  setEvaluationContext(new EvaluationContext(null));
}",0.9953379953379954
144932,"/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    Triggerable existingTriggerable=(Triggerable)triggerables.elementAt(existingIx);
    existingTriggerable.contextRef=existingTriggerable.contextRef.intersect(t.contextRef);
    return existingTriggerable;
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    return t;
  }
}","/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    Triggerable existingTriggerable=(Triggerable)triggerables.elementAt(existingIx);
    existingTriggerable.contextRef=existingTriggerable.contextRef.intersect(t.contextRef);
    return existingTriggerable;
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger.clone(),new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    return t;
  }
}",0.9956284153005464
144933,"private void evaluateTriggerable(Triggerable t,TreeReference anchorRef){
  TreeReference contextRef=t.contextRef.contextualize(anchorRef);
  Vector v=exprEvalContext.expandReference(contextRef);
  for (int i=0; i < v.size(); i++) {
    EvaluationContext ec=new EvaluationContext(exprEvalContext,(TreeReference)v.elementAt(i));
    try {
      t.apply(mainInstance,ec,this);
    }
 catch (    RuntimeException e) {
      throw e;
    }
  }
}","private void evaluateTriggerable(Triggerable t,TreeReference anchorRef){
  TreeReference contextRef=t.contextRef.contextualize(anchorRef);
  Vector<TreeReference> v=exprEvalContext.expandReference(contextRef);
  for (int i=0; i < v.size(); i++) {
    try {
      t.apply(mainInstance,exprEvalContext,v.elementAt(i),this);
    }
 catch (    RuntimeException e) {
      throw e;
    }
  }
}",0.6183574879227053
144934,Vector getTriggers();,Vector<TreeReference> getTriggers();,0.7368421052631579
144935,"Vector evalNodeset(DataInstance model,EvaluationContext evalContext);","Vector<TreeReference> evalNodeset(DataInstance model,EvaluationContext evalContext);",0.9019607843137256
144936,"public Vector getTargets(){
  return targets;
}","public Vector<TreeReference> getTargets(){
  return targets;
}",0.8623853211009175
144937,"public Vector getTriggers(){
  Vector relTriggers=expr.getTriggers();
  Vector absTriggers=new Vector();
  for (int i=0; i < relTriggers.size(); i++) {
    absTriggers.addElement(((TreeReference)relTriggers.elementAt(i)).anchor(contextRef));
  }
  return absTriggers;
}","public Vector<TreeReference> getTriggers(){
  Vector<TreeReference> relTriggers=expr.getTriggers();
  Vector<TreeReference> absTriggers=new Vector<TreeReference>();
  for (int i=0; i < relTriggers.size(); i++) {
    absTriggers.addElement(((TreeReference)relTriggers.elementAt(i)).anchor(originalContextRef));
  }
  return absTriggers;
}",0.8844884488448845
144938,"public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapTagged(expr));
  ExtUtil.write(out,contextRef);
  ExtUtil.write(out,new ExtWrapList(targets));
}","public void writeExternal(DataOutputStream out) throws IOException {
  ExtUtil.write(out,new ExtWrapTagged(expr));
  ExtUtil.write(out,contextRef);
  ExtUtil.write(out,originalContextRef);
  ExtUtil.write(out,new ExtWrapList(targets));
}",0.9053117782909932
144939,"public void apply(FormInstance instance,EvaluationContext evalContext,FormDef f){
  Object result=eval(instance,evalContext);
  for (int i=0; i < targets.size(); i++) {
    TreeReference targetRef=((TreeReference)targets.elementAt(i)).contextualize(evalContext.getContextRef());
    Vector v=evalContext.expandReference(targetRef);
    for (int j=0; j < v.size(); j++) {
      TreeReference affectedRef=(TreeReference)v.elementAt(j);
      apply(affectedRef,result,instance,f);
    }
  }
}","/** 
 * Not for re-implementation, dispatches all of the evaluation 
 * @param instance
 * @param evalContext
 * @param f
 */
public final void apply(FormInstance instance,EvaluationContext parentContext,TreeReference context,FormDef f){
  TreeReference ungenericised=originalContextRef.contextualize(context);
  EvaluationContext ec=new EvaluationContext(parentContext,ungenericised);
  Object result=eval(instance,ec);
  for (int i=0; i < targets.size(); i++) {
    TreeReference targetRef=((TreeReference)targets.elementAt(i)).contextualize(ec.getContextRef());
    Vector v=ec.expandReference(targetRef);
    for (int j=0; j < v.size(); j++) {
      TreeReference affectedRef=(TreeReference)v.elementAt(j);
      apply(affectedRef,result,instance,f);
    }
  }
}",0.7250996015936255
144940,"public boolean equals(Object o){
  if (o instanceof Triggerable) {
    Triggerable t=(Triggerable)o;
    if (this == t)     return true;
    if (this.expr.equals(t.expr)) {
      Vector Atriggers=this.getTriggers();
      Vector Btriggers=t.getTriggers();
      for (int k=0; k < 2; k++) {
        Vector v1=(k == 0 ? Atriggers : Btriggers);
        Vector v2=(k == 0 ? Btriggers : Atriggers);
        for (int i=0; i < v1.size(); i++) {
          if (v2.indexOf(v1.elementAt(i)) == -1) {
            return false;
          }
        }
      }
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","public boolean equals(Object o){
  if (o instanceof Triggerable) {
    Triggerable t=(Triggerable)o;
    if (this == t)     return true;
    if (this.expr.equals(t.expr)) {
      Vector<TreeReference> Atriggers=this.getTriggers();
      Vector<TreeReference> Btriggers=t.getTriggers();
      for (int k=0; k < 2; k++) {
        Vector<TreeReference> v1=(k == 0 ? Atriggers : Btriggers);
        Vector<TreeReference> v2=(k == 0 ? Btriggers : Atriggers);
        for (int i=0; i < v1.size(); i++) {
          if (!v1.elementAt(i).isAbsolute() || v2.indexOf(v1.elementAt(i)) == -1) {
            return false;
          }
        }
      }
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}",0.9321663019693656
144941,"public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  expr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  contextRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  targets=(Vector)ExtUtil.read(in,new ExtWrapList(TreeReference.class),pf);
}","public void readExternal(DataInputStream in,PrototypeFactory pf) throws IOException, DeserializationException {
  expr=(IConditionExpr)ExtUtil.read(in,new ExtWrapTagged(),pf);
  contextRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  originalContextRef=(TreeReference)ExtUtil.read(in,TreeReference.class,pf);
  targets=(Vector<TreeReference>)ExtUtil.read(in,new ExtWrapList(TreeReference.class),pf);
}",0.8586956521739131
144942,"public Triggerable(IConditionExpr expr,TreeReference contextRef){
  this.expr=expr;
  this.contextRef=contextRef;
  this.targets=new Vector();
}","public Triggerable(IConditionExpr expr,TreeReference contextRef){
  this.expr=expr;
  this.contextRef=contextRef;
  this.originalContextRef=contextRef;
  this.targets=new Vector();
}",0.8834355828220859
144943,"private static void getTriggers(XPathExpression x,Vector v,TreeReference contextRef){
  if (x instanceof XPathPathExpr) {
    TreeReference ref=((XPathPathExpr)x).getReference();
    TreeReference contextualized=ref;
    if (contextRef != null) {
      contextualized=ref.contextualize(contextRef);
    }
    if (!v.contains(contextualized)) {
      v.addElement(contextualized);
    }
    for (int i=0; i < ref.size(); i++) {
      Vector<XPathExpression> predicates=ref.getPredicate(i);
      if (predicates == null) {
        continue;
      }
      if (!ref.isAbsolute()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      TreeReference predicateContext=ref.getSubReference(i);
      for (      XPathExpression predicate : predicates) {
        getTriggers(predicate,v,predicateContext);
      }
    }
  }
 else   if (x instanceof XPathBinaryOpExpr) {
    getTriggers(((XPathBinaryOpExpr)x).a,v,contextRef);
    getTriggers(((XPathBinaryOpExpr)x).b,v,contextRef);
  }
 else   if (x instanceof XPathUnaryOpExpr) {
    getTriggers(((XPathUnaryOpExpr)x).a,v,contextRef);
  }
 else   if (x instanceof XPathFuncExpr) {
    XPathFuncExpr fx=(XPathFuncExpr)x;
    for (int i=0; i < fx.args.length; i++)     getTriggers(fx.args[i],v,contextRef);
  }
}","private static void getTriggers(XPathExpression x,Vector<TreeReference> v,TreeReference contextRef){
  if (x instanceof XPathPathExpr) {
    TreeReference ref=((XPathPathExpr)x).getReference();
    TreeReference contextualized=ref;
    if (contextRef != null) {
      contextualized=ref.contextualize(contextRef);
    }
    if (!v.contains(contextualized)) {
      v.addElement(contextualized);
    }
    for (int i=0; i < ref.size(); i++) {
      Vector<XPathExpression> predicates=ref.getPredicate(i);
      if (predicates == null) {
        continue;
      }
      if (!ref.isAbsolute()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      TreeReference predicateContext=ref.getSubReference(i);
      for (      XPathExpression predicate : predicates) {
        getTriggers(predicate,v,predicateContext);
      }
    }
  }
 else   if (x instanceof XPathBinaryOpExpr) {
    getTriggers(((XPathBinaryOpExpr)x).a,v,contextRef);
    getTriggers(((XPathBinaryOpExpr)x).b,v,contextRef);
  }
 else   if (x instanceof XPathUnaryOpExpr) {
    getTriggers(((XPathUnaryOpExpr)x).a,v,contextRef);
  }
 else   if (x instanceof XPathFuncExpr) {
    XPathFuncExpr fx=(XPathFuncExpr)x;
    for (int i=0; i < fx.args.length; i++)     getTriggers(fx.args[i],v,contextRef);
  }
}",0.9941520467836256
144944,"public void contextualization(){
  TreeReference abc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference ab=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference floatc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference floatc2=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference testabc=floatc.contextualize(ab);
  TreeReference testabc2=floatc2.contextualize(ab);
  TreeReference invalid=floatc.contextualize(floatc2);
  if (!abc.equals(testabc)) {
    fail(""String_Node_Str"" + abc.toString(true) + ""String_Node_Str""+ testabc.toString(true));
  }
  if (!abc.equals(testabc2)) {
    fail(""String_Node_Str"" + abc.toString(true) + ""String_Node_Str""+ testabc2.toString(true));
  }
  if (invalid != null) {
    fail(""String_Node_Str"" + invalid.toString(true));
  }
}","public void contextualization(){
  TreeReference abc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference ab=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference ac=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference floatc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference floatc2=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference backc=XPathReference.getPathExpr(""String_Node_Str"").getReference();
  TreeReference testabc=floatc.contextualize(ab);
  TreeReference testabc2=floatc2.contextualize(ab);
  TreeReference testac=backc.contextualize(ab);
  TreeReference invalid=floatc.contextualize(floatc2);
  if (!abc.equals(testabc)) {
    fail(""String_Node_Str"" + abc.toString(true) + ""String_Node_Str""+ testabc.toString(true));
  }
  if (!abc.equals(testabc2)) {
    fail(""String_Node_Str"" + abc.toString(true) + ""String_Node_Str""+ testabc2.toString(true));
  }
  if (!ac.equals(testac)) {
    fail(""String_Node_Str"" + ac.toString(true) + ""String_Node_Str""+ testac.toString(true));
  }
  if (invalid != null) {
    fail(""String_Node_Str"" + invalid.toString(true));
  }
}",0.8322861285645239
144945,"public String[] getSortFieldNames(){
  Vector<String> fields=new Vector<String>();
  int sortField=this.getSortFieldDefault() - 1;
  String[] headers=getHeaders(false);
  if (sortField == -1) {
    fields.addElement(Localization.get(""String_Node_Str""));
  }
 else {
    fields.addElement(headers[sortField]);
    fields.addElement(Localization.get(""String_Node_Str""));
  }
  for (int i=0; i < headers.length; ++i) {
    if (i == sortField) {
      continue;
    }
    String s=headers[i];
    if (s == null || ""String_Node_Str"".equals(s)) {
      continue;
    }
    fields.addElement(s);
  }
  String[] ret=new String[fields.size()];
  for (int i=0; i < ret.length; ++i) {
    ret[i]=fields.elementAt(i);
  }
  return ret;
}","public String[] getSortFieldNames(){
  Vector<String> fields=new Vector<String>();
  int sortField=this.getSortFieldDefault();
  if (sortField != -1) {
    sortField--;
  }
  String[] headers=getHeaders(false);
  if (sortField == -1) {
    fields.addElement(Localization.get(""String_Node_Str""));
  }
 else {
    fields.addElement(headers[sortField]);
    fields.addElement(Localization.get(""String_Node_Str""));
  }
  for (int i=0; i < headers.length; ++i) {
    if (i == sortField) {
      continue;
    }
    String s=headers[i];
    if (s == null || ""String_Node_Str"".equals(s)) {
      continue;
    }
    fields.addElement(s);
  }
  String[] ret=new String[fields.size()];
  for (int i=0; i < ret.length; ++i) {
    ret[i]=fields.elementAt(i);
  }
  return ret;
}",0.9691689008042896
144946,"public Element serializeNode(TreeElement instanceNode){
  Element e=new Element();
  if (!instanceNode.isRelevant() || instanceNode.getMult() == TreeReference.INDEX_TEMPLATE) {
    return null;
  }
  if (instanceNode.getValue() != null) {
    Object serializedAnswer=serializer.serializeAnswerData(instanceNode.getValue(),instanceNode.getDataType());
    if (serializedAnswer instanceof Element) {
      e=(Element)serializedAnswer;
    }
 else     if (serializedAnswer instanceof String) {
      e=new Element();
      e.addChild(Node.TEXT,(String)serializedAnswer);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + instanceNode.getValue().toString() + ""String_Node_Str""+ serializedAnswer);
    }
    if (serializer.containsExternalData(instanceNode.getValue()).booleanValue()) {
      IDataPointer[] pointer=serializer.retrieveExternalDataPointer(instanceNode.getValue());
      for (int i=0; i < pointer.length; ++i) {
        dataPointers.addElement(pointer[i]);
      }
    }
  }
 else {
    Vector childNames=new Vector();
    for (int i=0; i < instanceNode.getNumChildren(); i++) {
      String childName=instanceNode.getChildAt(i).getName();
      System.out.println(""String_Node_Str"" + childName);
      if (!childNames.contains(childName))       childNames.addElement(childName);
    }
    for (int i=0; i < childNames.size(); i++) {
      String childName=(String)childNames.elementAt(i);
      int mult=instanceNode.getChildMultiplicity(childName);
      for (int j=0; j < mult; j++) {
        Element child=serializeNode(instanceNode.getChild(childName,j));
        if (child != null) {
          e.addChild(Node.ELEMENT,child);
        }
      }
    }
  }
  e.setName(instanceNode.getName());
  for (int i=0; i < instanceNode.getAttributeCount(); i++) {
    String namespace=instanceNode.getAttributeNamespace(i);
    String name=instanceNode.getAttributeName(i);
    String val=instanceNode.getAttributeValue(i);
    e.setAttribute(namespace,name,val);
  }
  if (instanceNode.getNamespace() != null) {
    e.setNamespace(instanceNode.getNamespace());
  }
  return e;
}","public Element serializeNode(TreeElement instanceNode){
  Element e=new Element();
  if (!instanceNode.isRelevant() || instanceNode.getMult() == TreeReference.INDEX_TEMPLATE) {
    return null;
  }
  if (instanceNode.getValue() != null) {
    Object serializedAnswer=serializer.serializeAnswerData(instanceNode.getValue(),instanceNode.getDataType());
    if (serializedAnswer instanceof Element) {
      e=(Element)serializedAnswer;
    }
 else     if (serializedAnswer instanceof String) {
      e=new Element();
      e.addChild(Node.TEXT,(String)serializedAnswer);
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + instanceNode.getValue().toString() + ""String_Node_Str""+ serializedAnswer);
    }
    if (serializer.containsExternalData(instanceNode.getValue()).booleanValue()) {
      IDataPointer[] pointer=serializer.retrieveExternalDataPointer(instanceNode.getValue());
      for (int i=0; i < pointer.length; ++i) {
        dataPointers.addElement(pointer[i]);
      }
    }
  }
 else {
    Vector childNames=new Vector();
    for (int i=0; i < instanceNode.getNumChildren(); i++) {
      String childName=instanceNode.getChildAt(i).getName();
      System.out.println(""String_Node_Str"" + childName);
      if (!childNames.contains(childName))       childNames.addElement(childName);
    }
    for (int i=0; i < childNames.size(); i++) {
      String childName=(String)childNames.elementAt(i);
      int mult=instanceNode.getChildMultiplicity(childName);
      for (int j=0; j < mult; j++) {
        Element child=serializeNode(instanceNode.getChild(childName,j));
        if (child != null) {
          e.addChild(Node.ELEMENT,child);
        }
      }
    }
  }
  e.setName(instanceNode.getName());
  for (int i=0; i < instanceNode.getAttributeCount(); i++) {
    String namespace=instanceNode.getAttributeNamespace(i);
    String name=instanceNode.getAttributeName(i);
    String val=instanceNode.getAttributeValue(i);
    if (val == null) {
      val=""String_Node_Str"";
    }
    e.setAttribute(namespace,name,val);
  }
  if (instanceNode.getNamespace() != null) {
    e.setNamespace(instanceNode.getNamespace());
  }
  return e;
}",0.9863849765258216
144947,"public void refreshView(){
  if (model.getEvent() == FormEntryController.EVENT_QUESTION) {
    FormEntryPrompt prompt=model.getQuestionPrompt();
    SingleQuestionScreen last=currentQuestionScreen;
    SingleQuestionScreen view=getView(prompt,this.goingForward);
    if (last != null && last != currentQuestionScreen) {
      last.releaseMedia();
    }
    J2MEDisplay.setView(view);
  }
 else   if (model.getEvent() == FormEntryController.EVENT_PROMPT_NEW_REPEAT) {
    FormEntryCaption[] hierachy=model.getCaptionHierarchy(model.getFormIndex());
    repeatScreen=new NewRepeatScreen(""String_Node_Str"" + (model.getFormIndex().getElementMultiplicity() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") + hierachy[hierachy.length - 1].getLongText()+ ""String_Node_Str"");
    repeatScreen.setCommandListener(this);
    if (currentQuestionScreen != null) {
      currentQuestionScreen.releaseMedia();
    }
    J2MEDisplay.setView(repeatScreen);
  }
}","public void refreshView(){
  if (model.getEvent() == FormEntryController.EVENT_QUESTION) {
    FormEntryPrompt prompt=model.getQuestionPrompt();
    SingleQuestionScreen last=currentQuestionScreen;
    SingleQuestionScreen view=getView(prompt,this.goingForward);
    if (last != null && last != currentQuestionScreen) {
      last.releaseMedia();
    }
    J2MEDisplay.setView(view);
    view.showNotify();
  }
 else   if (model.getEvent() == FormEntryController.EVENT_PROMPT_NEW_REPEAT) {
    FormEntryCaption[] hierachy=model.getCaptionHierarchy(model.getFormIndex());
    repeatScreen=new NewRepeatScreen(""String_Node_Str"" + (model.getFormIndex().getElementMultiplicity() == 0 ? ""String_Node_Str"" : ""String_Node_Str"") + hierachy[hierachy.length - 1].getLongText()+ ""String_Node_Str"");
    repeatScreen.setCommandListener(this);
    if (currentQuestionScreen != null) {
      currentQuestionScreen.releaseMedia();
    }
    J2MEDisplay.setView(repeatScreen);
  }
}",0.9879518072289156
144948,"private void processCase(TreeElement caseElement) throws MalformedCaseModelException {
  TreeElement caseIdAttribute=caseElement.getAttribute(null,""String_Node_Str"");
  if (caseIdAttribute == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  if (caseIdAttribute.getValue() == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  String caseId=caseIdAttribute.getValue().uncast().getString();
  TreeElement dateModified=caseElement.getAttribute(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  if (dateModified.getValue() == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  Date date=(Date)(new DateTimeData().cast(dateModified.getValue().uncast())).getValue();
  for (int i=0; i < caseElement.getNumChildren(); ++i) {
    TreeElement kid=caseElement.getChildAt(i);
    if (!caseElement.isRelevant()) {
      continue;
    }
    if (kid.getName().equals(""String_Node_Str"")) {
      if (kid.isRelevant()) {
        c=processCaseCreate(kid,caseId,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseMutate(kid,c,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseClose(kid,c,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseIndex(kid,c);
      }
    }
  }
}","private void processCase(TreeElement caseElement) throws MalformedCaseModelException {
  c=null;
  TreeElement caseIdAttribute=caseElement.getAttribute(null,""String_Node_Str"");
  if (caseIdAttribute == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  if (caseIdAttribute.getValue() == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  String caseId=caseIdAttribute.getValue().uncast().getString();
  TreeElement dateModified=caseElement.getAttribute(null,""String_Node_Str"");
  if (dateModified == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  if (dateModified.getValue() == null) {
    throw new MalformedCaseModelException(""String_Node_Str"" + caseElement.getRef().toString(true),""String_Node_Str"");
  }
  Date date=(Date)(new DateTimeData().cast(dateModified.getValue().uncast())).getValue();
  for (int i=0; i < caseElement.getNumChildren(); ++i) {
    TreeElement kid=caseElement.getChildAt(i);
    if (!caseElement.isRelevant()) {
      continue;
    }
    if (kid.getName().equals(""String_Node_Str"")) {
      if (kid.isRelevant()) {
        c=processCaseCreate(kid,caseId,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseMutate(kid,c,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseClose(kid,c,date);
      }
    }
 else     if (kid.getName().equals(""String_Node_Str"")) {
      if (c == null) {
        c=getCase(caseId);
      }
      if (kid.isRelevant()) {
        processCaseIndex(kid,c);
      }
    }
  }
}",0.9974173553719008
144949,"private TreeElement cache(){
synchronized (cache) {
    if (cache.hasEntry(recordId)) {
      return cache.retrieve(recordId);
    }
    if (recordId == -1) {
      Vector<Integer> ids=storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"".intern());
    Case c=(Case)storage.read(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"".intern());
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.isClosed() ? ""String_Node_Str"".intern() : ""String_Node_Str"".intern());
    TreeElement scratch=new TreeElement(""String_Node_Str"".intern());
    scratch.setAnswer(new StringData(c.getName()));
    cacheBuilder.addChild(scratch);
    scratch=new TreeElement(""String_Node_Str"".intern());
    scratch.setAnswer(new DateData(c.getDateOpened()));
    cacheBuilder.addChild(scratch);
    for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      scratch=new TreeElement(key.intern());
      Object temp=c.getProperty(key);
      if (temp instanceof String) {
        scratch.setValue(new UncastData((String)temp));
      }
 else {
        scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
      }
      cacheBuilder.addChild(scratch);
    }
    final boolean[] done=new boolean[]{false};
    TreeElement index=new TreeElement(""String_Node_Str"".intern()){
      public TreeElement getChild(      String name,      int multiplicity){
        TreeElement child=super.getChild(name.intern(),multiplicity);
        if (done[0] == false) {
          return child;
        }
        if (multiplicity >= 0 && child == null) {
          TreeElement emptyNode=new TreeElement(name.intern());
          this.addChild(emptyNode);
          emptyNode.setParent(this);
          return emptyNode;
        }
        return child;
      }
    }
;
    Vector<CaseIndex> indices=c.getIndices();
    for (    CaseIndex i : indices) {
      scratch=new TreeElement(i.getName());
      scratch.setAttribute(null,""String_Node_Str"".intern(),i.getTargetType().intern());
      scratch.setValue(new UncastData(i.getTarget()));
      index.addChild(scratch);
    }
    cacheBuilder.addChild(index);
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    cache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}","private TreeElement cache(){
synchronized (cache) {
    if (cache.hasEntry(recordId)) {
      return cache.retrieve(recordId);
    }
    if (recordId == -1) {
      Vector<Integer> ids=storage.getIDsForValue(""String_Node_Str"",caseId);
      recordId=ids.elementAt(0).intValue();
    }
    TreeElement cacheBuilder=new TreeElement(""String_Node_Str"".intern());
    Case c=(Case)storage.read(recordId);
    caseId=c.getCaseId();
    cacheBuilder=new TreeElement(""String_Node_Str"".intern());
    cacheBuilder.setMult(this.mult);
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.getCaseId());
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.getTypeId());
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.isClosed() ? ""String_Node_Str"".intern() : ""String_Node_Str"".intern());
    cacheBuilder.setAttribute(null,""String_Node_Str"".intern(),c.getUserId());
    TreeElement scratch=new TreeElement(""String_Node_Str"".intern());
    scratch.setAnswer(new StringData(c.getName()));
    cacheBuilder.addChild(scratch);
    scratch=new TreeElement(""String_Node_Str"".intern());
    scratch.setAnswer(new DateData(c.getDateOpened()));
    cacheBuilder.addChild(scratch);
    for (Enumeration en=c.getProperties().keys(); en.hasMoreElements(); ) {
      String key=(String)en.nextElement();
      scratch=new TreeElement(key.intern());
      Object temp=c.getProperty(key);
      if (temp instanceof String) {
        scratch.setValue(new UncastData((String)temp));
      }
 else {
        scratch.setValue(PreloadUtils.wrapIndeterminedObject(temp));
      }
      cacheBuilder.addChild(scratch);
    }
    final boolean[] done=new boolean[]{false};
    TreeElement index=new TreeElement(""String_Node_Str"".intern()){
      public TreeElement getChild(      String name,      int multiplicity){
        TreeElement child=super.getChild(name.intern(),multiplicity);
        if (done[0] == false) {
          return child;
        }
        if (multiplicity >= 0 && child == null) {
          TreeElement emptyNode=new TreeElement(name.intern());
          this.addChild(emptyNode);
          emptyNode.setParent(this);
          return emptyNode;
        }
        return child;
      }
    }
;
    Vector<CaseIndex> indices=c.getIndices();
    for (    CaseIndex i : indices) {
      scratch=new TreeElement(i.getName());
      scratch.setAttribute(null,""String_Node_Str"".intern(),i.getTargetType().intern());
      scratch.setValue(new UncastData(i.getTarget()));
      index.addChild(scratch);
    }
    cacheBuilder.addChild(index);
    cacheBuilder.setParent(this.parent);
    done[0]=true;
    cache.register(recordId,cacheBuilder);
    return cacheBuilder;
  }
}",0.985316265060241
144950,"public TreeElementCache(int capacity){
  cache=new Hashtable<Integer,TreeElement>();
  this.capacityDesired=capacity;
  this.currentCapacity=capacityDesired;
  random=new Random();
  cacheList=new Vector<Integer>();
  totalMem=Runtime.getRuntime().freeMemory();
}","public TreeElementCache(int capacity){
  cache=new Hashtable<Integer,TreeElement>();
  this.capacityDesired=capacity;
  this.currentCapacity=capacityDesired;
  random=new Random();
  cacheList=new Vector<Integer>();
  Runtime.getRuntime().gc();
  totalMem=Runtime.getRuntime().freeMemory();
}",0.9477477477477476
144951,"public void register(int recordId,TreeElement item){
  long freeMemory=Runtime.getRuntime().freeMemory();
  double memory=freeMemory * 1.0 / totalMem;
  if (memory < .2) {
    Runtime.getRuntime().gc();
    freeMemory=Runtime.getRuntime().freeMemory();
    memory=freeMemory * 1.0 / totalMem;
  }
  if (memory < .2) {
    currentCapacity=Math.max(10,(int)(currentCapacity * .6));
    System.out.println(""String_Node_Str"" + currentCapacity);
    while (cache.size() > currentCapacity - 1) {
      randomPop();
    }
  }
  if (cache.size() == currentCapacity) {
    if (currentCapacity < capacityDesired && memory > .3) {
      currentCapacity+=(capacityDesired - currentCapacity) * .3;
      System.out.println(""String_Node_Str"" + currentCapacity);
    }
 else {
      for (int i=0; i < 3; ++i) {
        randomPop();
      }
    }
  }
  cache.put(new Integer(recordId),item);
  cacheList.addElement(new Integer(recordId));
}","public void register(int recordId,TreeElement item){
  long freeMemory=Runtime.getRuntime().freeMemory();
  double memory=freeMemory * 1.0 / totalMem;
  if (memory < .2) {
    Runtime.getRuntime().gc();
    freeMemory=Runtime.getRuntime().freeMemory();
    memory=freeMemory * 1.0 / totalMem;
  }
  if (memory < .2) {
    currentCapacity=Math.max(10,(int)(currentCapacity * .6));
    System.out.println(""String_Node_Str"" + currentCapacity);
    while (cache.size() > currentCapacity - 1) {
      randomPop();
    }
  }
  if (cache.size() == currentCapacity) {
    if (currentCapacity < capacityDesired && memory > .3) {
      currentCapacity++;
      System.out.println(""String_Node_Str"" + currentCapacity);
    }
 else {
      for (int i=0; i < 3; ++i) {
        randomPop();
      }
    }
  }
  cache.put(new Integer(recordId),item);
  cacheList.addElement(new Integer(recordId));
}",0.9767699115044248
144952,"/** 
 * meant to be called after deserialization and initialization of handlers
 * @param newInstance true if the form is to be used for a new entry interaction, false if it is using an existing IDataModel
 */
public void initialize(boolean newInstance,InstanceInitializationFactory factory){
  for (Enumeration en=formInstances.keys(); en.hasMoreElements(); ) {
    String instanceId=(String)en.nextElement();
    DataInstance instance=formInstances.get(instanceId);
    instance.initialize(factory,instanceId);
  }
  if (newInstance) {
    preloadInstance(mainInstance.getRoot());
  }
  if (getLocalizer() != null && getLocalizer().getLocale() == null) {
    getLocalizer().setToDefault();
  }
  initializeTriggerables();
  dispatchFormEvent(Action.EVENT_XFORMS_READY);
}","/** 
 * meant to be called after deserialization and initialization of handlers
 * @param newInstance true if the form is to be used for a new entry interaction, false if it is using an existing IDataModel
 */
public void initialize(boolean newInstance,InstanceInitializationFactory factory){
  for (Enumeration en=formInstances.keys(); en.hasMoreElements(); ) {
    String instanceId=(String)en.nextElement();
    DataInstance instance=formInstances.get(instanceId);
    instance.initialize(factory,instanceId);
  }
  if (newInstance) {
    preloadInstance(mainInstance.getRoot());
  }
  if (getLocalizer() != null && getLocalizer().getLocale() == null) {
    getLocalizer().setToDefault();
  }
  dispatchFormEvent(Action.EVENT_XFORMS_READY);
  initializeTriggerables();
}",0.963777490297542
144953,"protected QuestionDef parseControl(IFormElement parent,Element e,int controlType){
  QuestionDef question=new QuestionDef();
  question.setID(serialQuestionID++);
  Vector usedAtts=new Vector();
  usedAtts.addElement(REF_ATTR);
  usedAtts.addElement(BIND_ATTR);
  usedAtts.addElement(APPEARANCE_ATTR);
  IDataReference dataRef=null;
  boolean refFromBind=false;
  String ref=e.getAttributeValue(null,REF_ATTR);
  String bind=e.getAttributeValue(null,BIND_ATTR);
  if (bind != null) {
    DataBinding binding=bindingsByID.get(bind);
    if (binding == null) {
      throw new XFormParseException(""String_Node_Str"" + bind + ""String_Node_Str"",e);
    }
    dataRef=binding.getReference();
    refFromBind=true;
  }
 else   if (ref != null) {
    dataRef=new XPathReference(ref);
  }
 else {
    if (controlType == Constants.CONTROL_TRIGGER) {
    }
 else {
      throw new XFormParseException(""String_Node_Str"",e);
    }
  }
  if (dataRef != null) {
    if (!refFromBind) {
      dataRef=getAbsRef(dataRef,parent);
    }
    question.setBind(dataRef);
    if (controlType == Constants.CONTROL_SELECT_ONE) {
      selectOnes.addElement((TreeReference)dataRef.getReference());
    }
 else     if (controlType == Constants.CONTROL_SELECT_MULTI) {
      selectMultis.addElement((TreeReference)dataRef.getReference());
    }
  }
  boolean isSelect=(controlType == Constants.CONTROL_SELECT_MULTI || controlType == Constants.CONTROL_SELECT_ONE);
  question.setControlType(controlType);
  question.setAppearanceAttr(e.getAttributeValue(null,APPEARANCE_ATTR));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (LABEL_ELEMENT.equals(childName)) {
      parseQuestionLabel(question,child);
    }
 else     if (""String_Node_Str"".equals(childName)) {
      parseHint(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItem(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItemset(question,child,parent);
    }
  }
  if (isSelect) {
    if (question.getNumChoices() > 0 && question.getDynamicChoices() != null) {
      throw new XFormParseException(""String_Node_Str"");
    }
 else     if (question.getNumChoices() == 0 && question.getDynamicChoices() == null) {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  parent.addChild(question);
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
  return question;
}","protected QuestionDef parseControl(IFormElement parent,Element e,int controlType){
  QuestionDef question=new QuestionDef();
  question.setID(serialQuestionID++);
  Vector usedAtts=new Vector();
  usedAtts.addElement(REF_ATTR);
  usedAtts.addElement(BIND_ATTR);
  usedAtts.addElement(APPEARANCE_ATTR);
  IDataReference dataRef=null;
  boolean refFromBind=false;
  String ref=e.getAttributeValue(null,REF_ATTR);
  String bind=e.getAttributeValue(null,BIND_ATTR);
  if (bind != null) {
    DataBinding binding=bindingsByID.get(bind);
    if (binding == null) {
      throw new XFormParseException(""String_Node_Str"" + bind + ""String_Node_Str"",e);
    }
    dataRef=binding.getReference();
    refFromBind=true;
  }
 else   if (ref != null) {
    try {
      dataRef=new XPathReference(ref);
    }
 catch (    RuntimeException el) {
      System.out.println(this.getVagueLocation(e));
      throw el;
    }
  }
 else {
    if (controlType == Constants.CONTROL_TRIGGER) {
    }
 else {
      throw new XFormParseException(""String_Node_Str"",e);
    }
  }
  if (dataRef != null) {
    if (!refFromBind) {
      dataRef=getAbsRef(dataRef,parent);
    }
    question.setBind(dataRef);
    if (controlType == Constants.CONTROL_SELECT_ONE) {
      selectOnes.addElement((TreeReference)dataRef.getReference());
    }
 else     if (controlType == Constants.CONTROL_SELECT_MULTI) {
      selectMultis.addElement((TreeReference)dataRef.getReference());
    }
  }
  boolean isSelect=(controlType == Constants.CONTROL_SELECT_MULTI || controlType == Constants.CONTROL_SELECT_ONE);
  question.setControlType(controlType);
  question.setAppearanceAttr(e.getAttributeValue(null,APPEARANCE_ATTR));
  for (int i=0; i < e.getChildCount(); i++) {
    int type=e.getType(i);
    Element child=(type == Node.ELEMENT ? e.getElement(i) : null);
    String childName=(child != null ? child.getName() : null);
    if (LABEL_ELEMENT.equals(childName)) {
      parseQuestionLabel(question,child);
    }
 else     if (""String_Node_Str"".equals(childName)) {
      parseHint(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItem(question,child);
    }
 else     if (isSelect && ""String_Node_Str"".equals(childName)) {
      parseItemset(question,child,parent);
    }
  }
  if (isSelect) {
    if (question.getNumChoices() > 0 && question.getDynamicChoices() != null) {
      throw new XFormParseException(""String_Node_Str"");
    }
 else     if (question.getNumChoices() == 0 && question.getDynamicChoices() == null) {
      throw new XFormParseException(""String_Node_Str"");
    }
  }
  parent.addChild(question);
  if (XFormUtils.showUnusedAttributeWarning(e,usedAtts)) {
    System.out.println(XFormUtils.unusedAttWarning(e,usedAtts));
  }
  return question;
}",0.9765725880833794
144954,"public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (aval == sentinal || bval == sentinal) {
    throw new UnpivotableExpressionException();
  }
  if (aval == null || bval == null) {
    return null;
  }
  return this.eval(model,evalContext);
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (aval == sentinal || bval == sentinal) {
    throw new UnpivotableExpressionException();
  }
  if (aval == null || bval == null) {
    return null;
  }
  return this.eval(model,evalContext);
}",0.9913232104121475
144955,"public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (handled(aval,bval,sentinal,pivots) || handled(bval,aval,sentinal,pivots)) {
    return null;
  }
  return this.eval(model,evalContext);
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  Object aval=a.pivot(model,evalContext,pivots,sentinal);
  Object bval=b.pivot(model,evalContext,pivots,sentinal);
  if (handled(aval,bval,sentinal,pivots) || handled(bval,aval,sentinal,pivots)) {
    return null;
  }
  return this.eval(model,evalContext);
}",0.9901719901719902
144956,"public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  throw new UnpivotableExpressionException();
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  throw new UnpivotableExpressionException();
}",0.9794871794871794
144957,"/** 
 */
public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  String[] identities=new String[]{""String_Node_Str""};
  boolean id=false;
  for (  String identity : identities) {
    if (identity.equals(name)) {
      id=true;
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].pivot(model,evalContext,pivots,sentinal);
  }
  boolean pivoted=false;
  for (int i=0; i < argVals.length; ++i) {
    if (argVals[i] == null) {
      pivoted=true;
    }
 else     if (sentinal.equals(argVals[i])) {
      if (id) {
        return sentinal;
      }
 else {
        throw new UnpivotableExpressionException();
      }
    }
  }
  if (pivoted) {
    if (id) {
      return null;
    }
 else {
      throw new UnpivotableExpressionException();
    }
  }
  return eval(model,evalContext);
}","/** 
 */
public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  String[] identities=new String[]{""String_Node_Str""};
  boolean id=false;
  for (  String identity : identities) {
    if (identity.equals(name)) {
      id=true;
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].pivot(model,evalContext,pivots,sentinal);
  }
  boolean pivoted=false;
  for (int i=0; i < argVals.length; ++i) {
    if (argVals[i] == null) {
      pivoted=true;
    }
 else     if (sentinal.equals(argVals[i])) {
      if (id) {
        return sentinal;
      }
 else {
        throw new UnpivotableExpressionException();
      }
    }
  }
  if (pivoted) {
    if (id) {
      return null;
    }
 else {
      throw new UnpivotableExpressionException();
    }
  }
  return eval(model,evalContext);
}",0.9958677685950412
144958,"public Object pivot(FormInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  TreeReference ref=this.getReference();
  if (ref.equals(sentinal) || (ref.getRefLevel() == 0)) {
    return sentinal;
  }
 else {
    return this.eval(model,evalContext);
  }
}","public Object pivot(DataInstance model,EvaluationContext evalContext,Vector<Object> pivots,Object sentinal) throws UnpivotableExpressionException {
  TreeReference ref=this.getReference();
  if (ref.equals(sentinal) || (ref.getRefLevel() == 0)) {
    return sentinal;
  }
 else {
    return this.eval(model,evalContext);
  }
}",0.9877300613496932
144959,"private Vector<String> roots(){
  if (fileroots == null) {
    fileroots=new Vector<String>();
    try {
      for (Enumeration en=FileSystemRegistry.listRoots(); en.hasMoreElements(); ) {
        String root=(String)en.nextElement();
        if (root.endsWith(""String_Node_Str"")) {
          root=root.substring(0,root.length() - 1);
          fileroots.addElement(root);
        }
      }
    }
 catch (    SecurityException e) {
      this.securityException(e);
      if (fileroots.size() > 0) {
        return fileroots;
      }
 else {
        fileroots=null;
        return new Vector<String>();
      }
    }
  }
  return fileroots;
}","private Vector<String> roots(){
  if (fileroots == null) {
    fileroots=new Vector<String>();
    try {
      for (Enumeration en=FileSystemRegistry.listRoots(); en.hasMoreElements(); ) {
        String root=(String)en.nextElement();
        if (root.endsWith(""String_Node_Str"")) {
          root=root.substring(0,root.length() - 1);
          fileroots.addElement(root);
        }
      }
    }
 catch (    SecurityException e) {
      this.securityException(e);
      if (fileroots.size() > 0) {
        return fileroots;
      }
 else {
        fileroots=null;
        return new Vector<String>();
      }
    }
catch (    NullPointerException npe) {
      return new Vector<String>();
    }
  }
  return fileroots;
}",0.9045521292217328
144960,"public static Alert showError(String title,String message,Image image,Displayable next,CommandListener customListener){
  final Alert alert=new Alert(title,message,image,AlertType.ERROR){
    int latches=0;
{
      getKeyStates();
    }
    protected boolean handleKeyPressed(    int keyCode,    int gameAction){
      return super.handleKeyPressed(keyCode,gameAction);
    }
    protected boolean handleKeyReleased(    int keyCode,    int gameAction){
      if (this.getKeyStates() > 0) {
        return super.handleKeyReleased(keyCode,gameAction);
      }
      return true;
    }
  }
;
  alert.setTimeout(Alert.FOREVER);
  if (customListener != null) {
    if (next != null) {
      System.err.println(""String_Node_Str"");
    }
    alert.setCommandListener(customListener);
  }
  if (next == null) {
    setView(alert);
  }
 else {
    loading.cancelLoading();
  }
  return alert;
}","public static Alert showError(String title,String message,Image image,Displayable next,CommandListener customListener){
  final Alert alert=new Alert(title,message,image,AlertType.ERROR){
    int latches=0;
{
      getKeyStates();
    }
    protected boolean handleKeyPressed(    int keyCode,    int gameAction){
      return super.handleKeyPressed(keyCode,gameAction);
    }
    protected boolean handleKeyReleased(    int keyCode,    int gameAction){
      if (this.getKeyStates() > 0) {
        return super.handleKeyReleased(keyCode,gameAction);
      }
      return true;
    }
  }
;
  alert.setTimeout(Alert.FOREVER);
  if (customListener != null) {
    if (next != null) {
      System.err.println(""String_Node_Str"");
    }
    alert.setCommandListener(customListener);
  }
  if (next == null) {
    setView(alert,true);
  }
 else {
    loading.cancelLoading();
  }
  return alert;
}",0.9971830985915492
144961,"public static void setView(Displayable d){
  loading.cancelLoading();
  Displayable old=display.getCurrent();
  display.setCurrent(d);
  if (old instanceof Screen) {
    try {
      old.addCommand(new Command(""String_Node_Str"",2,2));
      UiAccess.releaseResources((Screen)old);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","/** 
 * Sets the current displayable with the option to either clear or not clear the heavy resources from the current view 
 * @param d The new displayable to be viewed
 * @param savePreviousView false if resources should freed from thecurrent screen. True if those resources should be maintained. NOTE: if the current screen has major resources and True is set, those resources might need to be freed manually if any hanging references depend on them.
 */
public static void setView(Displayable d,boolean savePreviousView){
  loading.cancelLoading();
  Displayable old=display.getCurrent();
  display.setCurrent(d);
  if (!savePreviousView) {
    if (old instanceof Screen) {
      try {
        Command placeholder=new Command(""String_Node_Str"",2,2);
        old.addCommand(placeholder);
        UiAccess.releaseResources((Screen)old);
        old.removeCommand(placeholder);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}",0.4897338403041825
144962,"public String[] getSortFields(){
  String[] names=getSortFieldNames();
  String[] ret=new String[names.length];
  int defaultSort=getSortFieldDefault();
  if (defaultSort != -1) {
    ret[0]=String.valueOf(defaultSort);
    ret[1]=""String_Node_Str"";
  }
 else {
    ret[0]=""String_Node_Str"";
  }
  for (int i=1; i < ret.length; ++i) {
    if (defaultSort != i) {
      ret[i]=String.valueOf(i);
    }
  }
  return ret;
}","public String[] getSortFields(){
  String[] names=getSortFieldNames();
  String[] ret=new String[names.length];
  int defaultSort=getSortFieldDefault();
  if (defaultSort != -1) {
    ret[0]=String.valueOf(defaultSort);
    ret[1]=""String_Node_Str"";
  }
 else {
    ret[0]=""String_Node_Str"";
  }
  int position=defaultSort == -1 ? 1 : 2;
  for (int i=1; i < ret.length; ++i) {
    if (defaultSort != i) {
      ret[position]=String.valueOf(i);
      position++;
    }
  }
  return ret;
}",0.9239250275633958
144963,"public String[] getSortFieldNames(){
  Vector<String> fields=new Vector<String>();
  fields.addElement(Localization.get(""String_Node_Str""));
  for (  String s : getHeaders(false)) {
    if (s == null || ""String_Node_Str"".equals(s)) {
      continue;
    }
    fields.addElement(s);
  }
  String[] ret=new String[fields.size()];
  for (int i=0; i < ret.length; ++i) {
    ret[i]=fields.elementAt(i);
  }
  return ret;
}","public String[] getSortFieldNames(){
  Vector<String> fields=new Vector<String>();
  int sortField=this.getSortFieldDefault() - 1;
  String[] headers=getHeaders(false);
  if (sortField == -1) {
    fields.addElement(Localization.get(""String_Node_Str""));
  }
 else {
    fields.addElement(headers[sortField]);
    fields.addElement(Localization.get(""String_Node_Str""));
  }
  for (int i=0; i < headers.length; ++i) {
    if (i == sortField) {
      continue;
    }
    String s=headers[i];
    if (s == null || ""String_Node_Str"".equals(s)) {
      continue;
    }
    fields.addElement(s);
  }
  String[] ret=new String[fields.size()];
  for (int i=0; i < ret.length; ++i) {
    ret[i]=fields.elementAt(i);
  }
  return ret;
}",0.668416447944007
144964,"private int getSortFieldDefault(){
  int topIndex=shortDetail.getDefaultSort();
  if (topIndex == -1) {
    return -1;
  }
  int index=-1;
  Vector<String> fields=new Vector<String>();
  fields.addElement(Localization.get(""String_Node_Str""));
  String[] headers=getHeaders(false);
  for (int i=0; i < headers.length; ++i) {
    if (i == topIndex) {
      return fields.size();
    }
  }
  return -1;
}","private int getSortFieldDefault(){
  int topIndex=shortDetail.getDefaultSort();
  if (topIndex == -1) {
    return -1;
  }
  int index=-1;
  Vector<String> fields=new Vector<String>();
  fields.addElement(Localization.get(""String_Node_Str""));
  String[] headers=getHeaders(false);
  for (int i=0; i < headers.length; ++i) {
    fields.addElement(headers[i]);
    if (i == topIndex) {
      return fields.size() - 1;
    }
  }
  return -1;
}",0.9536266349583828
144965,"protected JrFormEntryController getController(){
  FormDefFetcher fetcher=new FormDefFetcher(new NamespaceRetrievalMethod(formName),preloaders,funcHandlers,iif);
  JrFormEntryController controller=CommCareUtil.createFormEntryController(fetcher);
  controller.setView(loadView(title,controller));
  return controller;
}","protected JrFormEntryController getController(){
  FormDefFetcher fetcher=new FormDefFetcher(new NamespaceRetrievalMethod(formName),preloaders,funcHandlers,iif);
  boolean supportsNewRepeats=false;
  String viewType=PropertyManager._().getSingularProperty(FormManagerProperties.VIEW_TYPE_PROPERTY);
  if (FormManagerProperties.VIEW_CHATTERBOX.equals(viewType)) {
    supportsNewRepeats=true;
  }
  JrFormEntryController controller=CommCareUtil.createFormEntryController(fetcher,supportsNewRepeats);
  controller.setView(loadView(title,controller));
  return controller;
}",0.7154105736782902
144966,"public int indexOfKey(Object key){
  return orderedKeys.indexOf(key);
}","public int indexOfKey(K key){
  return orderedKeys.indexOf(key);
}",0.948905109489051
144967,"public OrderedHashtable(int initialCapacity){
  super(initialCapacity);
  orderedKeys=new Vector(initialCapacity);
}","public OrderedHashtable(int initialCapacity){
  super(initialCapacity);
  orderedKeys=new Vector<K>(initialCapacity);
}",0.9872340425531916
144968,"public Object put(Object key,Object value){
  if (key == null) {
    throw new NullPointerException();
  }
  int i=orderedKeys.indexOf(key);
  if (i == -1) {
    orderedKeys.addElement(key);
  }
 else {
    orderedKeys.setElementAt(key,i);
  }
  return super.put(key,value);
}","public V put(K key,V value){
  if (key == null) {
    throw new NullPointerException();
  }
  int i=orderedKeys.indexOf(key);
  if (i == -1) {
    orderedKeys.addElement(key);
  }
 else {
    orderedKeys.setElementAt(key,i);
  }
  return super.put(key,value);
}",0.9422718808193667
144969,"public Object remove(Object key){
  orderedKeys.removeElement(key);
  return super.remove(key);
}","public V remove(Object key){
  orderedKeys.removeElement((K)key);
  return super.remove(key);
}",0.9479166666666666
144970,"/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return (!isNull(argVals[0]) ? argVals[0] : argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
    return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return stringLength(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Double(MathUtils.getRand().nextDouble());
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 0) {
      return PropertyUtils.genUUID();
    }
    int len=toInt(argVals[0]).intValue();
    return PropertyUtils.genGUID(len);
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals,evalContext);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}","/** 
 * Evaluate the function call. First check if the function is a member of the built-in function suite. If not, then check for any custom handlers registered to handler the function. If not, throw and exception. Both function name and appropriate arguments are taken into account when finding a suitable handler. For built-in functions, the number of arguments must match; for custom functions, the supplied arguments must match one of the function prototypes defined by the handler.
 */
public Object eval(DataInstance model,EvaluationContext evalContext){
  String name=id.toString();
  Object[] argVals=new Object[args.length];
  Hashtable funcHandlers=evalContext.getFunctionHandlers();
  if (name.equals(""String_Node_Str"") && args.length == 3) {
    return ifThenElse(model,evalContext,args,argVals);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    argVals[0]=XPathFuncExpr.unpack(args[0].eval(model,evalContext));
    if (!isNull(argVals[0])) {
      return argVals[0];
    }
 else {
      argVals[1]=args[1].eval(model,evalContext);
      return argVals[1];
    }
  }
  for (int i=0; i < args.length; i++) {
    argVals[i]=args[i].eval(model,evalContext);
  }
  if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.TRUE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return Boolean.FALSE;
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toBoolean(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toNumeric(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toInt(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toString(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return toDate(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolNot(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return boolStr(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return dateStr(argVals[0],argVals[1]);
  }
 else   if ((name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) && args.length == 2) {
    return multiSelected(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return countSelected(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return count(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    if (argVals[0] instanceof XPathNodeset) {
      return sum(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"");
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (argVals[0] instanceof XPathNodeset) {
      return max(((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return max(argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return DateUtils.roundDate(new Date());
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Date();
  }
 else   if (name.equals(""String_Node_Str"")) {
    if (args.length == 1 && argVals[0] instanceof XPathNodeset) {
      return join(""String_Node_Str"",((XPathNodeset)argVals[0]).toArgList());
    }
 else {
      return join(""String_Node_Str"",argVals);
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    if (args.length == 2 && argVals[1] instanceof XPathNodeset) {
      return join(argVals[0],((XPathNodeset)argVals[1]).toArgList());
    }
 else {
      return join(argVals[0],subsetArgList(argVals,1));
    }
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 2 || args.length == 3)) {
    return substring(argVals[0],argVals[1],args.length == 3 ? argVals[2] : null);
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 1) {
    return stringLength(argVals[0]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2) {
    if (args.length == 3 && argVals[2] instanceof XPathNodeset) {
      return checklist(argVals[0],argVals[1],((XPathNodeset)argVals[2]).toArgList());
    }
 else {
      return checklist(argVals[0],argVals[1],subsetArgList(argVals,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 2 && args.length % 2 == 0) {
    if (args.length == 4 && argVals[2] instanceof XPathNodeset && argVals[3] instanceof XPathNodeset) {
      Object[] factors=((XPathNodeset)argVals[2]).toArgList();
      Object[] weights=((XPathNodeset)argVals[3]).toArgList();
      if (factors.length != weights.length) {
        throw new XPathTypeMismatchException(""String_Node_Str"");
      }
      return checklistWeighted(argVals[0],argVals[1],factors,weights);
    }
 else {
      return checklistWeighted(argVals[0],argVals[1],subsetArgList(argVals,2,2),subsetArgList(argVals,3,2));
    }
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 2) {
    return regex(argVals[0],argVals[1]);
  }
 else   if (name.equals(""String_Node_Str"") && args.length >= 1) {
    return argVals[0];
  }
 else   if (name.equals(""String_Node_Str"") && args.length == 0) {
    return new Double(MathUtils.getRand().nextDouble());
  }
 else   if (name.equals(""String_Node_Str"") && (args.length == 0 || args.length == 1)) {
    if (args.length == 0) {
      return PropertyUtils.genUUID();
    }
    int len=toInt(argVals[0]).intValue();
    return PropertyUtils.genGUID(len);
  }
 else {
    IFunctionHandler handler=(IFunctionHandler)funcHandlers.get(name);
    if (handler != null) {
      return evalCustomFunction(handler,argVals,evalContext);
    }
 else {
      throw new XPathUnhandledException(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}",0.9348322501317408
144971,"/** 
 * convert a value to a number using xpath's type conversion rules (note that xpath itself makes no distinction between integer and floating point numbers)
 * @param o
 * @return
 */
public static Double toNumeric(Object o){
  Double val=null;
  o=unpack(o);
  if (o instanceof Boolean) {
    val=new Double(((Boolean)o).booleanValue() ? 1 : 0);
  }
 else   if (o instanceof Double) {
    val=(Double)o;
  }
 else   if (o instanceof String) {
    String s=(String)o;
    double d;
    try {
      s=s.trim();
      for (int i=0; i < s.length(); i++) {
        char c=s.charAt(i);
        if (c != '-' && c != '.' && (c < '0' || c > '9'))         throw new NumberFormatException();
      }
      d=Double.parseDouble(s);
      val=new Double(d);
    }
 catch (    NumberFormatException nfe) {
      val=new Double(Double.NaN);
    }
  }
 else   if (o instanceof Date) {
    val=new Double(DateUtils.daysSinceEpoch((Date)o));
  }
 else   if (o instanceof IExprDataType) {
    val=((IExprDataType)o).toNumeric();
  }
  if (val != null) {
    return val;
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"");
  }
}","/** 
 * convert a value to a number using xpath's type conversion rules (note that xpath itself makes no distinction between integer and floating point numbers)
 * @param o
 * @return
 */
public static Double toNumeric(Object o){
  Double val=null;
  o=unpack(o);
  if (o instanceof Boolean) {
    val=new Double(((Boolean)o).booleanValue() ? 1 : 0);
  }
 else   if (o instanceof Double) {
    val=(Double)o;
  }
 else   if (o instanceof String) {
    String s=(String)o;
    double d;
    try {
      s=s.trim();
      for (int i=0; i < s.length(); i++) {
        char c=s.charAt(i);
        if (c != '-' && c != '.' && (c < '0' || c > '9'))         throw new NumberFormatException();
      }
      d=Double.parseDouble(s);
      val=new Double(d);
    }
 catch (    NumberFormatException nfe) {
      val=new Double(Double.NaN);
    }
  }
 else   if (o instanceof Date) {
    val=new Double(DateUtils.daysSinceEpoch((Date)o));
  }
 else   if (o instanceof IExprDataType) {
    val=((IExprDataType)o).toNumeric();
  }
  if (val != null) {
    return val;
  }
 else {
    throw new XPathTypeMismatchException(""String_Node_Str"" + (o == null ? ""String_Node_Str"" : o.toString()) + ""String_Node_Str"");
  }
}",0.9704749679075738
144972,"public XPathNodeset eval(DataInstance m,EvaluationContext ec){
  TreeReference genericRef=getReference();
  TreeReference ref=genericRef.contextualize(ec.getContextRef());
  if (ref.getInstanceName() != null && ref.isAbsolute()) {
    DataInstance nonMain=ec.getInstance(ref.getInstanceName());
    if (nonMain != null) {
      m=nonMain;
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"" + ref.toString(true) + ""String_Node_Str"");
    }
  }
  if (ref.isAbsolute() && m.getTemplatePath(ref) == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + genericRef.toString() + ""String_Node_Str"");
  }
  Vector<TreeReference> nodesetRefs=ec.expandReference(ref);
  for (int i=0; i < nodesetRefs.size(); i++) {
    if (!m.resolveReference((TreeReference)nodesetRefs.elementAt(i)).isRelevant()) {
      nodesetRefs.removeElementAt(i);
      i--;
    }
  }
  return new XPathNodeset(nodesetRefs,m,ec);
}","public XPathNodeset eval(DataInstance m,EvaluationContext ec){
  TreeReference genericRef=getReference();
  TreeReference ref=genericRef.contextualize(ec.getContextRef());
  if (ref.getInstanceName() != null && ref.isAbsolute()) {
    DataInstance nonMain=ec.getInstance(ref.getInstanceName());
    if (nonMain != null) {
      m=nonMain;
    }
 else {
      throw new XPathTypeMismatchException(""String_Node_Str"" + ref.toString(true) + ""String_Node_Str"");
    }
  }
 else {
    m=ec.getMainInstance();
  }
  if (ref.isAbsolute() && m.getTemplatePath(ref) == null) {
    throw new XPathTypeMismatchException(""String_Node_Str"" + genericRef.toString() + ""String_Node_Str"");
  }
  Vector<TreeReference> nodesetRefs=ec.expandReference(ref);
  for (int i=0; i < nodesetRefs.size(); i++) {
    if (!m.resolveReference((TreeReference)nodesetRefs.elementAt(i)).isRelevant()) {
      nodesetRefs.removeElementAt(i);
      i--;
    }
  }
  return new XPathNodeset(nodesetRefs,m,ec);
}",0.979035639412998
144973,"public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      InputStream incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash + 1);
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        if (destination.isReadOnly()) {
          return cache(incoming,r,table);
        }
        OutputStream output=destination.getOutputStream();
        StreamsUtil.writeFromInputToOutput(incoming,output);
        output.close();
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(incoming,r,table);
      }
    }
 catch (    IOException e) {
      Logger.exception(e);
      return false;
    }
  }
  return false;
}","public boolean install(Resource r,ResourceLocation location,Reference ref,ResourceTable table,CommCareInstance instance,boolean upgrade) throws UnresolvedResourceException {
  if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_LOCAL) {
    try {
      if (ref.doesBinaryExist()) {
        localReference=ref.getURI();
        table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        return true;
      }
 else {
        return false;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      return false;
    }
  }
 else   if (location.getAuthority() == Resource.RESOURCE_AUTHORITY_REMOTE) {
    try {
      if (!ref.doesBinaryExist()) {
        return false;
      }
      InputStream incoming=ref.getStream();
      if (incoming == null) {
        return false;
      }
      String uri=ref.getURI();
      int lastslash=uri.lastIndexOf('/');
      uri=uri.substring(lastslash == -1 ? 0 : lastslash + 1);
      String cleanUri=""String_Node_Str"";
      for (int i=0; i < uri.length(); ++i) {
        char c=uri.charAt(i);
        if (valid.indexOf(c) == -1) {
          cleanUri+=""String_Node_Str"";
        }
 else {
          cleanUri+=c;
        }
      }
      uri=cleanUri;
      int copy=0;
      try {
        Reference destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + uri);
        while (destination.doesBinaryExist()) {
          copy++;
          String newUri=uri + ""String_Node_Str"" + copy;
          destination=ReferenceManager._().DeriveReference(""String_Node_Str"" + newUri);
        }
        if (destination.isReadOnly()) {
          return cache(incoming,r,table);
        }
        OutputStream output=destination.getOutputStream();
        StreamsUtil.writeFromInputToOutput(incoming,output);
        output.close();
        this.localReference=destination.getURI();
        if (upgrade) {
          table.commit(r,Resource.RESOURCE_STATUS_UPGRADE);
        }
 else {
          table.commit(r,Resource.RESOURCE_STATUS_INSTALLED);
        }
        return true;
      }
 catch (      InvalidReferenceException e) {
        return cache(incoming,r,table);
      }
    }
 catch (    IOException e) {
      Logger.exception(e);
      return false;
    }
  }
  return false;
}",0.9354226020892688
144974,"private void expandReference(TreeReference sourceRef,AbstractTreeElement node,Vector<TreeReference> refs,boolean includeTemplates){
  int depth=node.getDepth();
  Vector<XPathExpression> predicates=null;
  if (depth == sourceRef.size()) {
    refs.addElement(node.getRef());
  }
 else {
    String name=sourceRef.getName(depth);
    predicates=sourceRef.getPredicate(depth);
    int mult=sourceRef.getMultiplicity(depth);
    Vector<AbstractTreeElement> set=new Vector<AbstractTreeElement>();
    if (node.getNumChildren() > 0) {
      if (mult == TreeReference.INDEX_UNBOUND) {
        int count=node.getChildMultiplicity(name);
        for (int i=0; i < count; i++) {
          AbstractTreeElement child=node.getChild(name,i);
          if (child != null) {
            set.addElement(child);
          }
 else {
            throw new IllegalStateException();
          }
        }
        if (includeTemplates) {
          AbstractTreeElement template=node.getChild(name,TreeReference.INDEX_TEMPLATE);
          if (template != null) {
            set.addElement(template);
          }
        }
      }
 else       if (mult != TreeReference.INDEX_ATTRIBUTE) {
        AbstractTreeElement child=node.getChild(name,mult);
        if (child != null) {
          set.addElement(child);
        }
      }
    }
    if (mult == TreeReference.INDEX_ATTRIBUTE) {
      AbstractTreeElement attribute=node.getAttribute(null,name);
      if (attribute != null) {
        set.addElement(attribute);
      }
    }
    for (Enumeration e=set.elements(); e.hasMoreElements(); ) {
      AbstractTreeElement treeElement=(AbstractTreeElement)e.nextElement();
      if (predicates != null) {
        TreeReference treeRef=treeElement.getRef();
        boolean passedAll=true;
        for (        XPathExpression xpe : predicates) {
          EvaluationContext evalContext=new EvaluationContext(this,treeRef);
          Object o=xpe.eval(instance,evalContext);
          if (o instanceof Boolean) {
            boolean passed=((Boolean)o).booleanValue();
            if (!passed) {
              passedAll=false;
              break;
            }
          }
        }
        if (passedAll) {
          expandReference(sourceRef,treeElement,refs,includeTemplates);
        }
      }
 else {
        expandReference(sourceRef,treeElement,refs,includeTemplates);
      }
    }
  }
}","private void expandReference(TreeReference sourceRef,AbstractTreeElement node,Vector<TreeReference> refs,boolean includeTemplates){
  int depth=node.getDepth();
  Vector<XPathExpression> predicates=null;
  if (depth == sourceRef.size()) {
    refs.addElement(node.getRef());
  }
 else {
    String name=sourceRef.getName(depth);
    predicates=sourceRef.getPredicate(depth);
    int mult=sourceRef.getMultiplicity(depth);
    Vector<AbstractTreeElement> set=new Vector<AbstractTreeElement>();
    if (node.hasChildren()) {
      if (mult == TreeReference.INDEX_UNBOUND) {
        int count=node.getChildMultiplicity(name);
        for (int i=0; i < count; i++) {
          AbstractTreeElement child=node.getChild(name,i);
          if (child != null) {
            set.addElement(child);
          }
 else {
            throw new IllegalStateException();
          }
        }
        if (includeTemplates) {
          AbstractTreeElement template=node.getChild(name,TreeReference.INDEX_TEMPLATE);
          if (template != null) {
            set.addElement(template);
          }
        }
      }
 else       if (mult != TreeReference.INDEX_ATTRIBUTE) {
        AbstractTreeElement child=node.getChild(name,mult);
        if (child != null) {
          set.addElement(child);
        }
      }
    }
    if (mult == TreeReference.INDEX_ATTRIBUTE) {
      AbstractTreeElement attribute=node.getAttribute(null,name);
      if (attribute != null) {
        set.addElement(attribute);
      }
    }
    for (Enumeration e=set.elements(); e.hasMoreElements(); ) {
      AbstractTreeElement treeElement=(AbstractTreeElement)e.nextElement();
      if (predicates != null) {
        TreeReference treeRef=treeElement.getRef();
        boolean passedAll=true;
        for (        XPathExpression xpe : predicates) {
          EvaluationContext evalContext=new EvaluationContext(this,treeRef);
          Object o=xpe.eval(instance,evalContext);
          if (o instanceof Boolean) {
            boolean passed=((Boolean)o).booleanValue();
            if (!passed) {
              passedAll=false;
              break;
            }
          }
        }
        if (passedAll) {
          expandReference(sourceRef,treeElement,refs,includeTemplates);
        }
      }
 else {
        expandReference(sourceRef,treeElement,refs,includeTemplates);
      }
    }
  }
}",0.9972498413370002
144975,"public Object getValue(){
  return new Integer(n);
}","public Object getValue(){
  return DataUtil.integer(n);
}",0.8623853211009175
144976,"public UncastData uncast(){
  return new UncastData(new Integer(n).toString());
}","public UncastData uncast(){
  return new UncastData(DataUtil.integer(n).toString());
}",0.9101796407185628
144977,"public Vector<XPathExpression> getPredicate(int key){
  return predicates.get(new Integer(key));
}","public Vector<XPathExpression> getPredicate(int key){
  return predicates.get(DataUtil.integer(key));
}",0.9253731343283582
144978,"public int hashCode(){
  int hash=(new Integer(refLevel)).hashCode();
  for (int i=0; i < size(); i++) {
    Integer mult=new Integer(getMultiplicity(i));
    if (i == 0 && mult.intValue() == INDEX_UNBOUND)     mult=new Integer(0);
    hash^=getName(i).hashCode();
    hash^=mult.hashCode();
  }
  return hash;
}","public int hashCode(){
  int hash=(new Integer(refLevel)).hashCode();
  for (int i=0; i < size(); i++) {
    Integer mult=DataUtil.integer(getMultiplicity(i));
    if (i == 0 && mult.intValue() == INDEX_UNBOUND)     mult=DataUtil.integer(0);
    hash^=getName(i).hashCode();
    hash^=mult.hashCode();
  }
  return hash;
}",0.9526813880126184
144979,"public void add(String name,int index){
  names.addElement(name);
  multiplicity.addElement(new Integer(index));
}","public void add(String name,int index){
  names.addElement(name);
  multiplicity.addElement(DataUtil.integer(index));
}",0.9356223175965666
144980,"public TreeReference(){
  names=new Vector(0);
  multiplicity=new Vector(0);
  predicates=new Hashtable<Integer,Vector<XPathExpression>>();
  instanceName=null;
}","public TreeReference(){
  names=new Vector(0);
  multiplicity=new Vector(0);
  predicates=new Hashtable<Integer,Vector<XPathExpression>>(0);
  instanceName=null;
}",0.9969230769230768
144981,"public void setMultiplicity(int i,int mult){
  multiplicity.setElementAt(new Integer(mult),i);
}","public void setMultiplicity(int i,int mult){
  multiplicity.setElementAt(DataUtil.integer(mult),i);
}",0.9238578680203046
144982,"public void addPredicate(int key,Vector<XPathExpression> xpe){
  predicates.put(new Integer(key),xpe);
}","public void addPredicate(int key,Vector<XPathExpression> xpe){
  predicates.put(DataUtil.integer(key),xpe);
}",0.9295774647887324
144983,"private static void initTypeMappings(){
  typeMappings=new Hashtable<String,Integer>();
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_TEXT));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_LONG));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_DATE_TIME));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_DATE));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_TIME));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_BOOLEAN));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(SELECTONE,new Integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(SELECT,new Integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_GEOPOINT));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_BARCODE));
  typeMappings.put(""String_Node_Str"",new Integer(Constants.DATATYPE_BINARY));
}","private static void initTypeMappings(){
  typeMappings=new Hashtable<String,Integer>();
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TEXT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_LONG));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_INTEGER));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DECIMAL));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_DATE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_TIME));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BOOLEAN));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_UNSUPPORTED));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(SELECTONE,DataUtil.integer(Constants.DATATYPE_CHOICE));
  typeMappings.put(SELECT,DataUtil.integer(Constants.DATATYPE_CHOICE_LIST));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_GEOPOINT));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BARCODE));
  typeMappings.put(""String_Node_Str"",DataUtil.integer(Constants.DATATYPE_BINARY));
}",0.6725304465493911
144984,"private static void loadInstanceData(Element node,TreeElement cur,FormDef f){
  int numChildren=node.getChildCount();
  boolean hasElements=false;
  for (int i=0; i < numChildren; i++) {
    if (node.getType(i) == Node.ELEMENT) {
      hasElements=true;
      break;
    }
  }
  if (hasElements) {
    Hashtable<String,Integer> multiplicities=new Hashtable<String,Integer>();
    for (int i=0; i < numChildren; i++) {
      if (node.getType(i) == Node.ELEMENT) {
        Element child=node.getElement(i);
        String name=child.getName();
        int index;
        boolean isTemplate=(child.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"") != null);
        if (isTemplate) {
          index=TreeReference.INDEX_TEMPLATE;
        }
 else {
          Integer mult=multiplicities.get(name);
          index=(mult == null ? 0 : mult.intValue() + 1);
          multiplicities.put(name,new Integer(index));
        }
        loadInstanceData(child,cur.getChild(name,index),f);
      }
    }
  }
 else {
    String text=getXMLText(node,false);
    if (text != null && text.trim().length() > 0) {
      cur.setValue(XFormAnswerDataParser.getAnswerData(text,cur.getDataType(),ghettoGetQuestionDef(cur.getDataType(),f,cur.getRef())));
    }
  }
}","private static void loadInstanceData(Element node,TreeElement cur,FormDef f){
  int numChildren=node.getChildCount();
  boolean hasElements=false;
  for (int i=0; i < numChildren; i++) {
    if (node.getType(i) == Node.ELEMENT) {
      hasElements=true;
      break;
    }
  }
  if (hasElements) {
    Hashtable<String,Integer> multiplicities=new Hashtable<String,Integer>();
    for (int i=0; i < numChildren; i++) {
      if (node.getType(i) == Node.ELEMENT) {
        Element child=node.getElement(i);
        String name=child.getName();
        int index;
        boolean isTemplate=(child.getAttributeValue(NAMESPACE_JAVAROSA,""String_Node_Str"") != null);
        if (isTemplate) {
          index=TreeReference.INDEX_TEMPLATE;
        }
 else {
          Integer mult=multiplicities.get(name);
          index=(mult == null ? 0 : mult.intValue() + 1);
          multiplicities.put(name,DataUtil.integer(index));
        }
        loadInstanceData(child,cur.getChild(name,index),f);
      }
    }
  }
 else {
    String text=getXMLText(node,false);
    if (text != null && text.trim().length() > 0) {
      cur.setValue(XFormAnswerDataParser.getAnswerData(text,cur.getDataType(),ghettoGetQuestionDef(cur.getDataType(),f,cur.getRef())));
    }
  }
}",0.994002399040384
144985,"public static void addDataType(String type,int dataType){
  typeMappings.put(type,new Integer(dataType));
}","public static void addDataType(String type,int dataType){
  typeMappings.put(type,DataUtil.integer(dataType));
}",0.9315068493150684
144986,"/** 
 * Any messages which aren't successfully sent in SendingThreads are then ""Cached"". Applications can activate new attempts to send the CachedMessages via this sendCached method
 */
public static void sendCached(TransportListener listener) throws TransportException {
  if (SENDER == null) {
    SENDER=new TransporterSharingSender();
  }
synchronized (SENDER) {
    Vector messages=getCachedMessages();
    Logger.log(""String_Node_Str"",""String_Node_Str"" + messages.size() + ""String_Node_Str"");
    if (messages.size() > 0) {
      SENDER.init(messages,CACHE(),listener);
      SENDER.send();
    }
  }
}","/** 
 * Any messages which aren't successfully sent in SendingThreads are then ""Cached"". Applications can activate new attempts to send the CachedMessages via this sendCached method
 */
public static void sendCached(TransportListener listener) throws TransportException {
  if (SENDER == null) {
    SENDER=new TransporterSharingSender();
  }
synchronized (SENDER) {
    Vector messages=getCachedMessages();
    Logger.log(""String_Node_Str"",""String_Node_Str"" + messages.size() + ""String_Node_Str"");
    if (messages.size() > 0) {
      try {
        SENDER.init(messages,CACHE(),listener);
        SENDER.send();
      }
  finally {
        SENDER.uninit();
      }
    }
  }
}",0.9463035019455251
144987,"/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    return (Triggerable)triggerables.elementAt(existingIx);
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    return t;
  }
}","/** 
 * Add a Condition to the form's Collection.
 * @param condition the condition to be set
 */
public Triggerable addTriggerable(Triggerable t){
  int existingIx=triggerables.indexOf(t);
  if (existingIx >= 0) {
    Triggerable existingTriggerable=(Triggerable)triggerables.elementAt(existingIx);
    existingTriggerable.contextRef=existingTriggerable.contextRef.intersect(t.contextRef);
    return existingTriggerable;
  }
 else {
    triggerables.addElement(t);
    triggerablesInOrder=false;
    Vector triggers=t.getTriggers();
    for (int i=0; i < triggers.size(); i++) {
      TreeReference trigger=(TreeReference)triggers.elementAt(i);
      if (!triggerIndex.containsKey(trigger)) {
        triggerIndex.put(trigger,new Vector());
      }
      Vector triggered=(Vector)triggerIndex.get(trigger);
      if (!triggered.contains(t)) {
        triggered.addElement(t);
      }
    }
    return t;
  }
}",0.8554360812425329
144988,"/** 
 * Get the workflow for how to manage each step in the pre/post processing workflow. TODO: This can/should be shared with JavaRosa core, probably. Safest way to stay in sync WRT SMS transport, etc.
 */
private FormTransportWorkflow getWorkflowFactory(final SubmissionProfile profile){
  if (CommCareProperties.SEND_STYLE_NONE.equals(profile.getMethod())) {
    return new FormTransportWorkflow(){
      public void preProcessing(      FormInstance instance){
      }
      public void postProcessing(){
        CommCareFormEntryState.this.goHome();
      }
    }
;
  }
 else   if (CommCareProperties.SEND_STYLE_FILE.equals(profile.getMethod())) {
    return new FormTransportWorkflow(){
      public void preProcessing(      FormInstance instance){
      }
      public void postProcessing(){
        CommCareFormEntryState.this.goHome();
      }
    }
;
  }
 else {
    return new FormTransportWorkflow(){
      TransportMessage message;
      boolean cacheable;
      public void preProcessing(      FormInstance instance){
        try {
          cacheable=profile.getMethod().equals(METHOD_POST);
          message=SubmissionTransportHelper.createMessage(instance,profile,cacheable);
          if (cacheable) {
            TransportService.send(message,0,0);
            Logger.log(""String_Node_Str"",""String_Node_Str"" + PropertyUtils.trim(message.getCacheIdentifier(),6));
          }
 else {
            Logger.log(""String_Node_Str"",""String_Node_Str"" + profile.getMethod() + ""String_Node_Str"");
            TransportService.send(message,3,0);
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
          Logger.die(""String_Node_Str"",e);
          return;
        }
catch (        TransportException e) {
          e.printStackTrace();
          Logger.die(""String_Node_Str"",e);
          return;
        }
      }
      public void postProcessing(){
        CommCarePostFormEntryState httpAskSendState=new CommCarePostFormEntryState(message,CommCareSense.isAutoSendEnabled() || cacheable){
          public void goHome(){
            if (CommCareSense.isAutoSendEnabled()) {
              AutomatedSenderService.NotifyPending();
            }
            CommCareFormEntryState.this.goHome();
          }
        }
;
        J2MEDisplay.startStateWithLoadingScreen(httpAskSendState);
      }
    }
;
  }
}","/** 
 * Get the workflow for how to manage each step in the pre/post processing workflow. TODO: This can/should be shared with JavaRosa core, probably. Safest way to stay in sync WRT SMS transport, etc.
 */
private FormTransportWorkflow getWorkflowFactory(final SubmissionProfile profile){
  if (CommCareProperties.SEND_STYLE_NONE.equals(profile.getMethod())) {
    return new FormTransportWorkflow(){
      public void preProcessing(      FormInstance instance){
      }
      public void postProcessing(){
        CommCareFormEntryState.this.goHome();
      }
    }
;
  }
 else   if (CommCareProperties.SEND_STYLE_FILE.equals(profile.getMethod())) {
    return new FormTransportWorkflow(){
      public void preProcessing(      FormInstance instance){
      }
      public void postProcessing(){
        CommCareFormEntryState.this.goHome();
      }
    }
;
  }
 else {
    return new FormTransportWorkflow(){
      TransportMessage message;
      boolean cacheable;
      public void preProcessing(      FormInstance instance){
        try {
          cacheable=profile.getMethod().equals(METHOD_POST);
          message=SubmissionTransportHelper.createMessage(instance,profile,cacheable);
          if (cacheable) {
            TransportService.send(message,0,0);
            Logger.log(""String_Node_Str"",""String_Node_Str"" + PropertyUtils.trim(message.getCacheIdentifier(),6));
          }
 else {
            Logger.log(""String_Node_Str"",""String_Node_Str"" + profile.getMethod() + ""String_Node_Str"");
            TransportService.send(message,3,0);
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
          Logger.die(""String_Node_Str"",e);
          return;
        }
catch (        TransportException e) {
          e.printStackTrace();
          Logger.die(""String_Node_Str"",e);
          return;
        }
      }
      public void postProcessing(){
        CommCarePostFormEntryState httpAskSendState=new CommCarePostFormEntryState(message,CommCareSense.isAutoSendEnabled() || !cacheable){
          public void goHome(){
            if (CommCareSense.isAutoSendEnabled()) {
              AutomatedSenderService.NotifyPending();
            }
            CommCareFormEntryState.this.goHome();
          }
        }
;
        J2MEDisplay.startStateWithLoadingScreen(httpAskSendState);
      }
    }
;
  }
}",0.999787279302276
144989,"public void postProcessing(){
  CommCarePostFormEntryState httpAskSendState=new CommCarePostFormEntryState(message,CommCareSense.isAutoSendEnabled() || cacheable){
    public void goHome(){
      if (CommCareSense.isAutoSendEnabled()) {
        AutomatedSenderService.NotifyPending();
      }
      CommCareFormEntryState.this.goHome();
    }
  }
;
  J2MEDisplay.startStateWithLoadingScreen(httpAskSendState);
}","public void postProcessing(){
  CommCarePostFormEntryState httpAskSendState=new CommCarePostFormEntryState(message,CommCareSense.isAutoSendEnabled() || !cacheable){
    public void goHome(){
      if (CommCareSense.isAutoSendEnabled()) {
        AutomatedSenderService.NotifyPending();
      }
      CommCareFormEntryState.this.goHome();
    }
  }
;
  J2MEDisplay.startStateWithLoadingScreen(httpAskSendState);
}",0.9987849331713244
144990,"public void resetDemoData(){
  System.out.println(""String_Node_Str"");
  StorageManager.getStorage(Case.STORAGE_KEY).removeAll();
  StorageManager.getStorage(PatientReferral.STORAGE_KEY).removeAll();
  StorageManager.getStorage(FormInstance.STORAGE_KEY).removeAll();
}","public void resetDemoData(){
  System.out.println(""String_Node_Str"");
  StorageManager.getStorage(Case.STORAGE_KEY).removeAll();
  StorageManager.getStorage(PatientReferral.STORAGE_KEY).removeAll();
  StorageManager.getStorage(FormInstance.STORAGE_KEY).removeAll();
  StorageManager.getStorage(TransportMessageStore.Q_STORENAME).removeAll();
  StorageManager.getStorage(TransportMessageStore.RECENTLY_SENT_STORENAME).removeAll();
}",0.7650429799426934
144991,"public void toggleDemoMode(boolean demoOn){
  if (demoOn != inDemoMode) {
    inDemoMode=demoOn;
    if (demoOn) {
      registerDemoStorage(Case.STORAGE_KEY,Case.class);
      registerDemoStorage(PatientReferral.STORAGE_KEY,PatientReferral.class);
      registerDemoStorage(FormInstance.STORAGE_KEY,FormInstance.class);
    }
 else {
      StorageManager.registerStorage(Case.STORAGE_KEY,Case.class);
      StorageManager.registerStorage(PatientReferral.STORAGE_KEY,PatientReferral.class);
      StorageManager.registerStorage(FormInstance.STORAGE_KEY,FormInstance.class);
    }
  }
}","public void toggleDemoMode(boolean demoOn){
  if (demoOn != inDemoMode) {
    inDemoMode=demoOn;
    if (demoOn) {
      registerDemoStorage(Case.STORAGE_KEY,Case.class);
      registerDemoStorage(PatientReferral.STORAGE_KEY,PatientReferral.class);
      registerDemoStorage(FormInstance.STORAGE_KEY,FormInstance.class);
      registerWrappedDemoStorage(TransportMessageStore.Q_STORENAME,new TransportMessageSerializationWrapper());
      registerWrappedDemoStorage(TransportMessageStore.RECENTLY_SENT_STORENAME,new TransportMessageSerializationWrapper());
      TransportService.reinit();
    }
 else {
      StorageManager.registerStorage(Case.STORAGE_KEY,Case.class);
      StorageManager.registerStorage(PatientReferral.STORAGE_KEY,PatientReferral.class);
      StorageManager.registerStorage(FormInstance.STORAGE_KEY,FormInstance.class);
      StorageManager.registerWrappedStorage(TransportMessageStore.Q_STORENAME,TransportMessageStore.Q_STORENAME,new TransportMessageSerializationWrapper());
      StorageManager.registerWrappedStorage(TransportMessageStore.RECENTLY_SENT_STORENAME,TransportMessageStore.RECENTLY_SENT_STORENAME,new TransportMessageSerializationWrapper());
      TransportService.reinit();
    }
  }
}",0.6464088397790055
144992,"private Vector scrapeForCaseElements(FormInstance tree){
  Vector caseElements=new Vector();
  Stack children=new Stack();
  children.push(tree.getRoot());
  while (!children.empty()) {
    TreeElement element=(TreeElement)children.pop();
    for (int i=0; i < element.getNumChildren(); ++i) {
      TreeElement caseElement=element.getChildAt(i);
      if (!caseElement.isRelevant()) {
        continue;
      }
      if (caseElement.getName().equals(""String_Node_Str"")) {
        caseElements.addElement(caseElement);
      }
 else {
        children.push(caseElement);
      }
    }
  }
  return caseElements;
}","private Vector scrapeForCaseElements(FormInstance tree){
  Vector caseElements=new Vector();
  Stack children=new Stack();
  children.push(tree.getRoot());
  while (!children.empty()) {
    TreeElement element=(TreeElement)children.pop();
    for (int i=0; i < element.getNumChildren(); ++i) {
      TreeElement caseElement=element.getChildAt(i);
      if (!caseElement.isRelevant() || caseElement.getMult() == TreeReference.INDEX_TEMPLATE) {
        continue;
      }
      if (caseElement.getName().equals(""String_Node_Str"")) {
        caseElements.addElement(caseElement);
      }
 else {
        children.push(caseElement);
      }
    }
  }
  return caseElements;
}",0.9555728760717068
144993,"/** 
 * Registers a resource file as a source of locale data for the specified locale.  
 * @param locale The locale of the definitions provided. 
 * @param resource A LocaleDataSource containing string data for the locale provided
 * @throws NullPointerException if resource or locale are null
 */
public void registerLocaleResource(String locale,LocaleDataSource resource){
  if (locale == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (resource == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Vector resources=new Vector();
  if (localeResources.containsKey(locale)) {
    resources=(Vector)localeResources.get(locale);
  }
  resources.addElement(resource);
  localeResources.put(locale,resources);
  if (locale.equals(currentLocale)) {
    loadCurrentLocaleResources();
  }
}","/** 
 * Registers a resource file as a source of locale data for the specified locale.  
 * @param locale The locale of the definitions provided. 
 * @param resource A LocaleDataSource containing string data for the locale provided
 * @throws NullPointerException if resource or locale are null
 */
public void registerLocaleResource(String locale,LocaleDataSource resource){
  if (locale == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (resource == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Vector resources=new Vector();
  if (localeResources.containsKey(locale)) {
    resources=(Vector)localeResources.get(locale);
  }
  resources.addElement(resource);
  localeResources.put(locale,resources);
  if (locale.equals(currentLocale) || locale.equals(defaultLocale)) {
    loadCurrentLocaleResources();
  }
}",0.9810650887573964
144994,"/** 
 * Load the ID index from the indexing/meta-data RMS
 * @return index hashtable, which maps integer record ID -> record locator
 */
public Hashtable getIDIndexRecord(){
  return (Hashtable)getIndexStore().readRecord(ID_INDEX_REC_ID,new ExtWrapMap(Integer.class,RMSRecordLoc.class));
}","/** 
 * Load the ID index from the indexing/meta-data RMS
 * @return index hashtable, which maps integer record ID -> record locator
 */
public Hashtable getIDIndexRecord(){
  if (this.transactionKey != null) {
    return (Hashtable)this.deleteActionCache[1];
  }
  return (Hashtable)getIndexStore().readRecord(ID_INDEX_REC_ID,new ExtWrapMap(Integer.class,RMSRecordLoc.class));
}",0.8652694610778443
144995,"/** 
 * Check that the StorageUtility is in an initialized, consistent, non-corrupt state. Throw an exception if it is not If the StorageUtility was not properly initialized, this call will fail. If transactions on this StorageUtility are currently in progress (such as by other threads), or a past transaction failed and did not properly clean itself up, this call will fail. 
 */
public void checkNotCorrupt(){
  checkStatusOK(false);
}","/** 
 * Check that the StorageUtility is in an initialized, consistent, non-corrupt state. Throw an exception if it is not If the StorageUtility was not properly initialized, this call will fail. If transactions on this StorageUtility are currently in progress (such as by other threads), or a past transaction failed and did not properly clean itself up, this call will fail. 
 */
public void checkNotCorrupt(){
  if (this.transactionKey == null) {
    checkStatusOK(false);
  }
 else {
    checkStatusOK(true);
  }
}",0.9163179916317992
144996,"public void configureApp(MIDlet m,InitializationListener listener){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  setProperties();
  loadModules();
  registerAddtlStorage();
  StorageManager.repairAll();
  RMSTransaction.cleanup();
  initReferences();
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  final CommCareStartupInteraction interaction=new CommCareStartupInteraction(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  Display.getDisplay(m).setCurrent(interaction);
  CommCareInitializer initializer=new CommCareInitializer(){
    private String validate(){
      this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
      Vector<UnresolvedResourceException> problems=global.verifyInstallation();
      if (problems.size() > 0) {
        String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
        Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
        for (        UnresolvedResourceException ure : problems) {
          String res=ure.getResource().getResourceId();
          Vector<String> list;
          if (problemList.containsKey(res)) {
            list=problemList.get(res);
          }
 else {
            list=new Vector<String>();
          }
          list.addElement(ure.getMessage());
          problemList.put(res,list);
        }
        for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
          String resource=(String)en.nextElement();
          message+=""String_Node_Str"" + resource;
          message+=""String_Node_Str"";
          for (          String s : problemList.get(resource)) {
            message+=""String_Node_Str"" + s;
          }
        }
        return message;
      }
      return null;
    }
    protected boolean runWrapper() throws UnfullfilledRequirementsException {
      manager=new CommCarePlatform(CommCareUtil.getMajorVersion(),CommCareUtil.getMinorVersion());
      try {
        ResourceTable global=RetrieveGlobalResourceTable();
        boolean firstStart=false;
        if (global.isEmpty()) {
          firstStart=true;
          this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
        }
        manager.init(CommCareUtil.getProfileReference(),global,false);
      }
 catch (      UnfullfilledRequirementsException e) {
        if (e.getSeverity() == UnfullfilledRequirementsException.SEVERITY_PROMPT) {
          String message=e.getMessage();
          if (e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION || e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION) {
            message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
          }
          if (this.blockForResponse(message)) {
            try {
              RetrieveGlobalResourceTable().clear();
              manager.init(CommCareUtil.getProfileReference(),RetrieveGlobalResourceTable(),true);
            }
 catch (            UnfullfilledRequirementsException e1) {
              throw e1;
            }
catch (            UnresolvedResourceException e3) {
              throw new RuntimeException(e3.getMessage());
            }
          }
 else {
            throw e;
          }
        }
 else {
          throw e;
        }
      }
catch (      UnresolvedResourceException e) {
        throw new RuntimeException(e.getMessage());
      }
      if (!CommCareUtil.getAppProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && !CommCareProperties.PROPERTY_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.CONTENT_VALIDATED))) {
        String failureMessage=this.validate();
        while (failureMessage != null) {
          Logger.log(""String_Node_Str"",""String_Node_Str"");
          this.blockForResponse(failureMessage);
          if (this.response == CommCareInitializer.RESPONSE_YES) {
            failureMessage=this.validate();
          }
 else {
            CommCareContext.this.exitApp();
            return false;
          }
        }
        PropertyManager._().setProperty(CommCareProperties.CONTENT_VALIDATED,CommCareProperties.PROPERTY_YES);
      }
      Localization.setLocale(""String_Node_Str"");
      manager.initialize(RetrieveGlobalResourceTable());
      purgeScheduler();
      postProfilePropertyInit();
      initUserFramework();
      LogReportUtils.initPendingDates(new Date().getTime());
      LanguageUtils.initializeLanguage(true,""String_Node_Str"");
      J2MEDisplay.init(CommCareContext.this.midlet);
      if (CommCareSense.isAutoSendEnabled()) {
        AutomatedSenderService.InitializeAndSpawnSenderService();
      }
      return true;
    }
    protected void askForResponse(    String message,    YesNoListener yesNoListener){
      interaction.AskYesNo(message,yesNoListener);
    }
    protected void setMessage(    String message){
      interaction.setMessage(message);
    }
  }
;
  initializer.initialize(listener);
}","public void configureApp(MIDlet m,InitializationListener listener){
  failsafeInit(m);
  Logger.log(""String_Node_Str"",""String_Node_Str"");
  this.midlet=m;
  setProperties();
  loadModules();
  registerAddtlStorage();
  StorageManager.repairAll();
  RMSTransaction.cleanup();
  initReferences();
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  Localization.registerLanguageReference(""String_Node_Str"",""String_Node_Str"");
  final CommCareStartupInteraction interaction=new CommCareStartupInteraction(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
  Display.getDisplay(m).setCurrent(interaction);
  CommCareInitializer initializer=new CommCareInitializer(){
    private String validate(){
      this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
      Vector<UnresolvedResourceException> problems=global.verifyInstallation();
      if (problems.size() > 0) {
        String message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
        Hashtable<String,Vector<String>> problemList=new Hashtable<String,Vector<String>>();
        for (        UnresolvedResourceException ure : problems) {
          String res=ure.getResource().getResourceId();
          Vector<String> list;
          if (problemList.containsKey(res)) {
            list=problemList.get(res);
          }
 else {
            list=new Vector<String>();
          }
          list.addElement(ure.getMessage());
          problemList.put(res,list);
        }
        for (Enumeration en=problemList.keys(); en.hasMoreElements(); ) {
          String resource=(String)en.nextElement();
          message+=""String_Node_Str"" + resource;
          message+=""String_Node_Str"";
          for (          String s : problemList.get(resource)) {
            message+=""String_Node_Str"" + s;
          }
        }
        return message;
      }
      return null;
    }
    protected boolean runWrapper() throws UnfullfilledRequirementsException {
      manager=new CommCarePlatform(CommCareUtil.getMajorVersion(),CommCareUtil.getMinorVersion());
      try {
        ResourceTable global=RetrieveGlobalResourceTable();
        boolean firstStart=false;
        if (global.isEmpty()) {
          firstStart=true;
          this.setMessage(CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str""));
        }
        manager.init(CommCareUtil.getProfileReference(),global,false);
      }
 catch (      UnfullfilledRequirementsException e) {
        if (e.getSeverity() == UnfullfilledRequirementsException.SEVERITY_PROMPT) {
          String message=e.getMessage();
          if (e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION || e.getRequirementCode() == UnfullfilledRequirementsException.REQUIREMENT_MAJOR_APP_VERSION) {
            message=CommCareStartupInteraction.failSafeText(""String_Node_Str"",""String_Node_Str"");
          }
          if (this.blockForResponse(message)) {
            try {
              RetrieveGlobalResourceTable().clear();
              manager.init(CommCareUtil.getProfileReference(),RetrieveGlobalResourceTable(),true);
            }
 catch (            UnfullfilledRequirementsException e1) {
              throw e1;
            }
catch (            UnresolvedResourceException e3) {
              throw new RuntimeException(e3.getMessage());
            }
          }
 else {
            throw e;
          }
        }
 else {
          throw e;
        }
      }
catch (      UnresolvedResourceException e) {
        throw new RuntimeException(e.getMessage());
      }
      if (!CommCareUtil.getAppProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && !CommCareProperties.PROPERTY_YES.equals(PropertyManager._().getSingularProperty(CommCareProperties.CONTENT_VALIDATED))) {
        String failureMessage=this.validate();
        while (failureMessage != null) {
          Logger.log(""String_Node_Str"",""String_Node_Str"");
          this.blockForResponse(failureMessage);
          if (this.response == CommCareInitializer.RESPONSE_YES) {
            failureMessage=this.validate();
          }
 else {
            CommCareContext.this.exitApp();
            return false;
          }
        }
        PropertyManager._().setProperty(CommCareProperties.CONTENT_VALIDATED,CommCareProperties.PROPERTY_YES);
      }
      Localization.setLocale(""String_Node_Str"");
      manager.initialize(RetrieveGlobalResourceTable());
      purgeScheduler();
      postProfilePropertyInit();
      initUserFramework();
      LogReportUtils.initPendingDates(new Date().getTime());
      LanguageUtils.initializeLanguage(true,""String_Node_Str"");
      J2MEDisplay.init(CommCareContext.this.midlet);
      if (CommCareSense.isAutoSendEnabled()) {
        AutomatedSenderService.InitializeAndSpawnSenderService();
      }
      return true;
    }
    protected void askForResponse(    String message,    YesNoListener yesNoListener){
      interaction.AskYesNo(message,yesNoListener);
    }
    protected void setMessage(    String message){
      interaction.setMessage(message,true);
    }
  }
;
  initializer.initialize(listener);
}",0.9995211186667944
144997,"protected void setMessage(String message){
  interaction.setMessage(message);
}","protected void setMessage(String message){
  interaction.setMessage(message,true);
}",0.9693251533742332
144998,"public CommCareListView(String title,boolean autoSelect,boolean numericNavigation){
  super(title,List.IMPLICIT);
  this.addCommand(BACK);
  this.choiceGroup=new CustomChoiceGroup(null,ChoiceGroup.IMPLICIT,autoSelect,numericNavigation){
    public void playAudio(    int index){
      if (audioLocations.size() > index && audioLocations.elementAt(index) != null) {
        MediaUtils.playAudio(audioLocations.elementAt(index));
      }
    }
  }
;
  this.choiceGroup.isFocused=true;
  this.container=this.choiceGroup;
}","public CommCareListView(String title,boolean autoSelect,boolean numericNavigation){
  super(title,List.IMPLICIT);
  this.choiceGroup=new CustomChoiceGroup(null,ChoiceGroup.IMPLICIT,autoSelect,numericNavigation){
    public void playAudio(    int index){
      if (audioLocations.size() > index && audioLocations.elementAt(index) != null) {
        MediaUtils.playAudio(audioLocations.elementAt(index));
      }
    }
  }
;
  this.choiceGroup.isFocused=true;
  this.container=this.choiceGroup;
}",0.9753208292201382
144999,"public CommCareStartupInteraction(String message){
  super(failSafeText(""String_Node_Str"",""String_Node_Str""));
  messageItem=new StringItem(null,message);
  this.append(messageItem);
  this.setCommandListener(this);
}","public CommCareStartupInteraction(String message){
  super(failSafeText(""String_Node_Str"",""String_Node_Str""));
  messageItem=new StringItem(null,null);
  gauge=new Gauge(null,false,Gauge.INDEFINITE,Gauge.CONTINUOUS_RUNNING);
  this.append(messageItem);
  this.append(gauge);
  gauge.setVisible(false);
  this.setCommandListener(this);
  setMessage(message,true);
}",0.7228915662650602
145000,"public void AskYesNo(String message,YesNoListener listener){
  messageItem.setText(message);
  this.listener=listener;
  if (yes == null) {
    yes=new Command(failSafeText(""String_Node_Str"",""String_Node_Str""),Command.OK,0);
    no=new Command(failSafeText(""String_Node_Str"",""String_Node_Str""),Command.CANCEL,0);
    this.addCommand(yes);
    this.addCommand(no);
  }
}","public void AskYesNo(String message,YesNoListener listener){
  setMessage(message,false);
  this.listener=listener;
  if (yes == null) {
    yes=new Command(failSafeText(""String_Node_Str"",""String_Node_Str""),Command.OK,0);
    no=new Command(failSafeText(""String_Node_Str"",""String_Node_Str""),Command.CANCEL,0);
    this.addCommand(yes);
    this.addCommand(no);
  }
}",0.9333333333333332
