record_number,buggy_code,fixed_code,code_similarity
137001,"public Object getDataSet(){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  List<Object[]> newColumnElementList=filterAdaptDataList();
  if (newColumnElementList.size() <= 0) {
    columnValue=new String[0][0];
    return SqlExplorerUtils.getDefault().createDataSet(columnHeader,columnValue);
  }
  if (DrillDownEditorInput.judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    columnValue=new String[newColumnElementList.size()][newColumnElementList.get(0).length];
  }
 else {
    columnValue=new String[newColumnElementList.size()][columnElementList.size()];
  }
  int rowIndex=0;
  for (  Object[] tableRow : newColumnElementList) {
    int columnIndex=0;
    for (    Object tableValue : tableRow) {
      if (tableValue == null) {
        if (newColumnElementList.get(0).length != columnElementList.size()) {
          continue;
        }
      }
      columnValue[rowIndex][columnIndex++]=tableValue == null ? ""String_Node_Str"" : tableValue.toString();
    }
    rowIndex++;
  }
  return SqlExplorerUtils.getDefault().createDataSet(columnHeader,columnValue);
}","public Object getDataSet(){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  List<Object[]> newColumnElementList=filterAdaptDataList();
  if (newColumnElementList.size() <= 0) {
    columnValue=new String[0][0];
    return SqlExplorerUtils.getDefault().createDataSet(columnHeader,columnValue);
  }
  if (DrillDownUtils.judgeMenuType(getMenuType(),DrillDownUtils.MENU_VALUE_TYPE)) {
    columnValue=new String[newColumnElementList.size()][newColumnElementList.get(0).length];
  }
 else {
    columnValue=new String[newColumnElementList.size()][columnElementList.size()];
  }
  int rowIndex=0;
  for (  Object[] tableRow : newColumnElementList) {
    int columnIndex=0;
    for (    Object tableValue : tableRow) {
      if (tableValue == null) {
        if (newColumnElementList.get(0).length != columnElementList.size()) {
          continue;
        }
      }
      columnValue[rowIndex][columnIndex++]=tableValue == null ? ""String_Node_Str"" : tableValue.toString();
    }
    rowIndex++;
  }
  return SqlExplorerUtils.getDefault().createDataSet(columnHeader,columnValue);
}",0.9874213836477987
137002,"public String getComputeValue(){
  if (judgeMenuType(this.getMenuType(),MENU_INVALID_TYPE)) {
    return ((PatternChartDataEntity)this.dataEntity).getNumNoMatch();
  }
 else   if (judgeMenuType(this.getMenuType(),MENU_VALID_TYPE)) {
    return ((PatternChartDataEntity)this.dataEntity).getNumMatch();
  }
  return this.dataEntity.getValue();
}","public String getComputeValue(){
  if (DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_INVALID_TYPE)) {
    return ((PatternChartDataEntity)this.dataEntity).getNumNoMatch();
  }
 else   if (DrillDownUtils.judgeMenuType(this.getMenuType(),DrillDownUtils.MENU_VALID_TYPE)) {
    return ((PatternChartDataEntity)this.dataEntity).getNumMatch();
  }
  return this.dataEntity.getValue();
}",0.9195710455764076
137003,"public void loadChildren(){
  _childNames=new ArrayList();
  try {
    ITableInfo[] tables=null;
    String[] tableTypes=_session.getMetaData().getTableTypes();
    try {
      SQLDatabaseMetaData metaData=_session.getMetaData();
      boolean isODBCTeradata=ConnectionUtils.isOdbcTeradata(metaData.getJDBCMetaData()) ? true : false;
      if (isODBCTeradata) {
        tables=metaData.getTables(null,_name,""String_Node_Str"",tableTypes,null);
      }
 else {
        tables=metaData.getTables(_name,_name,""String_Node_Str"",tableTypes,null);
      }
    }
 catch (    Throwable e) {
      _logger.debug(""String_Node_Str"");
    }
    for (int i=0; i < tableTypes.length; ++i) {
      INode childNode=findExtensionNode(tableTypes[i]);
      if (childNode != null) {
        _childNames.add(childNode.getLabelText());
        if (!isExcludedByFilter(childNode.getLabelText())) {
          addChildNode(childNode);
        }
      }
 else {
        if (tables != null) {
          TableFolderNode node=new TableFolderNode(this,tableTypes[i],_session,tables);
          _childNames.add(node.getLabelText());
          if (!isExcludedByFilter(node.getLabelText())) {
            addChildNode(node);
          }
        }
      }
    }
    addExtensionNodes();
  }
 catch (  Throwable e) {
    SQLExplorerPlugin.error(""String_Node_Str"" + _name,e);
  }
}","public void loadChildren(){
  _childNames=new ArrayList();
  try {
    ITableInfo[] tables=null;
    String[] tableTypes=_session.getMetaData().getTableTypes();
    try {
      SQLDatabaseMetaData metaData=_session.getMetaData();
      boolean isODBCTeradata=ConnectionUtils.isOdbcTeradata(metaData.getJDBCMetaData());
      boolean isNetezza=ConnectionUtils.isNetezza(metaData.getJDBCMetaData());
      if (isODBCTeradata || isNetezza) {
        tables=metaData.getTables(null,_name,""String_Node_Str"",tableTypes,null);
      }
 else {
        tables=metaData.getTables(_name,_name,""String_Node_Str"",tableTypes,null);
      }
    }
 catch (    Throwable e) {
      _logger.debug(""String_Node_Str"");
    }
    for (int i=0; i < tableTypes.length; ++i) {
      INode childNode=findExtensionNode(tableTypes[i]);
      if (childNode != null) {
        _childNames.add(childNode.getLabelText());
        if (!isExcludedByFilter(childNode.getLabelText())) {
          addChildNode(childNode);
        }
      }
 else {
        if (tables != null) {
          TableFolderNode node=new TableFolderNode(this,tableTypes[i],_session,tables);
          _childNames.add(node.getLabelText());
          if (!isExcludedByFilter(node.getLabelText())) {
            addChildNode(node);
          }
        }
      }
    }
    addExtensionNodes();
  }
 catch (  Throwable e) {
    SQLExplorerPlugin.error(""String_Node_Str"" + _name,e);
  }
}",0.9613299602457536
137004,"public void initSqlExplorerRootProject(IProject rootProject){
  if (SQLExplorerPlugin.getDefault().getRootProject() == null) {
    SQLExplorerPlugin.getDefault().setRootProject(rootProject);
  }
}","@Override public void initSqlExplorerRootProject(IProject rootProject){
  if (SQLExplorerPlugin.getDefault().getRootProject() == null) {
    SQLExplorerPlugin.getDefault().setRootProject(rootProject);
  }
}",0.9751243781094528
137005,"public void initAllConnectionsToSQLExplorer(List<Connection> conns){
  try {
    if (!SQLExplorerPlugin.getDefault().isInitedAllConnToSQLExpl()) {
      for (      Connection conn : conns) {
        addConnetionAliasToSQLPlugin(conn);
      }
      SQLExplorerPlugin.getDefault().setInitedAllConnToSQLExpl(true);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","@Override public void initAllConnectionsToSQLExplorer(List<Connection> conns){
  try {
    if (!SQLExplorerPlugin.getDefault().isInitedAllConnToSQLExpl()) {
      for (      Connection conn : conns) {
        addConnetionAliasToSQLPlugin(conn);
      }
      SQLExplorerPlugin.getDefault().setInitedAllConnToSQLExpl(true);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.9867724867724867
137006,"public boolean isInstanceofTalendDataSet(Object talendDataSet){
  if (TalendDataSet.class.isInstance(talendDataSet)) {
    return true;
  }
  return false;
}","@Override public boolean isInstanceofTalendDataSet(Object talendDataSet){
  if (TalendDataSet.class.isInstance(talendDataSet)) {
    return true;
  }
  return false;
}",0.9691358024691358
137007,"public void addConnetionAliasToSQLPlugin(ModelElement... dataproviders){
}","@Override public void addConnetionAliasToSQLPlugin(ModelElement... dataproviders){
}",0.9367088607594936
137008,"public Object createMapDBColumnSetDataSet(String[] columnHeader,Object mapDB,Long size,Object currIndicator,int pageSize){
  return new MapDBColumnSetDataSet(columnHeader,(Map<List<Object>,Long>)mapDB,size,(DataValidation)currIndicator,pageSize);
}","@Override public Object createMapDBColumnSetDataSet(String[] columnHeader,Object mapDB,Long size,Object currIndicator,int pageSize){
  return new MapDBColumnSetDataSet(columnHeader,(Map<List<Object>,Long>)mapDB,size,(DataValidation)currIndicator,pageSize);
}",0.9802371541501976
137009,"public Action createExportCSVAction(){
  ExportCSVAction exportAction=new ExportCSVAction();
  exportAction.setEnabled(true);
  return exportAction;
}","@Override public Action createExportCSVAction(){
  ExportCSVAction exportAction=new ExportCSVAction();
  exportAction.setEnabled(true);
  return exportAction;
}",0.967741935483871
137010,"public boolean aliasExist(String connectionName){
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(connectionName);
  return alias != null;
}","@Override public boolean aliasExist(String connectionName){
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(connectionName);
  return alias != null;
}",0.98015873015873
137011,"public Object createDataSet(String[] columnHeader,String[][] columnValue){
  return new DataSet(columnHeader,columnValue);
}","@Override public Object createDataSet(String[] columnHeader,String[][] columnValue){
  return new DataSet(columnHeader,columnValue);
}",0.9612403100775194
137012,"public void removeAliasInSQLExplorer(DataProvider... dataproviders){
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  DatabaseStructureView dsView=sqlPlugin.getDatabaseStructureView();
  try {
    Collection<Alias> aliases=aliasManager.getAliases();
    if (aliases.isEmpty()) {
      return;
    }
    for (    DataProvider dataProvider : dataproviders) {
      String aliasName=dataProvider.getName();
      if (null == aliasName) {
        continue;
      }
      Alias alias=aliasManager.getAlias(aliasName);
      if (alias != null) {
        sqlPlugin.getPropertyFile().remove(alias);
        aliasManager.removeAlias(aliasName);
      }
      if (dsView != null) {
        dsView.closeCurrentCabItem(aliasName);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  aliasManager.modelChanged();
}","@Override public void removeAliasInSQLExplorer(DataProvider... dataproviders){
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  DatabaseStructureView dsView=sqlPlugin.getDatabaseStructureView();
  try {
    Collection<Alias> aliases=aliasManager.getAliases();
    if (aliases.isEmpty()) {
      return;
    }
    for (    DataProvider dataProvider : dataproviders) {
      String aliasName=dataProvider.getName();
      if (null == aliasName) {
        continue;
      }
      Alias alias=aliasManager.getAlias(aliasName);
      if (alias != null) {
        sqlPlugin.getPropertyFile().remove(alias);
        aliasManager.removeAlias(aliasName);
      }
      if (dsView != null) {
        dsView.closeCurrentCabItem(aliasName);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  aliasManager.modelChanged();
}",0.994413407821229
137013,"public Driver getClassDriverFromSQLExplorer(String driverClassName,Properties props) throws InstantiationException, IllegalAccessException {
  Driver driver=null;
  if (Platform.isRunning()) {
    SQLExplorerPlugin sqlExplorerPlugin=SQLExplorerPlugin.getDefault();
    if (sqlExplorerPlugin != null) {
      DriverManager driverModel=sqlExplorerPlugin.getDriverModel();
      String dbType=props.getProperty(TaggedValueHelper.DBTYPE);
      String dbVersion=props.getProperty(TaggedValueHelper.DB_PRODUCT_VERSION);
      String managedDriverId=AliasAndManaDriverHelper.getInstance().joinManagedDriverId(dbType,driverClassName,dbVersion);
      ManagedDriver managedDriver=driverModel.getDriver(managedDriverId);
      if (managedDriver != null) {
        if (!managedDriver.isDriverClassLoaded()) {
          loadDriverByLibManageSystem(dbType,dbVersion,driverClassName);
        }
        driver=managedDriver.getJdbcDriver();
      }
    }
  }
  return driver;
}","@Override public Driver getClassDriverFromSQLExplorer(String driverClassName,Properties props) throws InstantiationException, IllegalAccessException {
  Driver driver=null;
  if (Platform.isRunning()) {
    SQLExplorerPlugin sqlExplorerPlugin=SQLExplorerPlugin.getDefault();
    if (sqlExplorerPlugin != null) {
      DriverManager driverModel=sqlExplorerPlugin.getDriverModel();
      String dbType=props.getProperty(TaggedValueHelper.DBTYPE);
      String dbVersion=props.getProperty(TaggedValueHelper.DB_PRODUCT_VERSION);
      String managedDriverId=AliasAndManaDriverHelper.getInstance().joinManagedDriverId(dbType,driverClassName,dbVersion);
      ManagedDriver managedDriver=driverModel.getDriver(managedDriverId);
      if (managedDriver != null) {
        if (!managedDriver.isDriverClassLoaded()) {
          loadDriverByLibManageSystem(dbType,dbVersion,driverClassName);
        }
        driver=managedDriver.getJdbcDriver();
      }
    }
  }
  return driver;
}",0.9948400412796696
137014,"public Object createMapDBDataSet(String[] columnHeader,Object mapDB,int pageSize,Object columnFilter,Long itemSize){
  return new MapDBDataSet(columnHeader,(Map<Object,List<Object>>)mapDB,pageSize,(ColumnFilter)columnFilter,itemSize);
}","@Override public Object createMapDBDataSet(String[] columnHeader,Object mapDB,int pageSize,Object columnFilter,Long itemSize){
  return new MapDBDataSet(columnHeader,(Map<Object,List<Object>>)mapDB,pageSize,(ColumnFilter)columnFilter,itemSize);
}",0.979253112033195
137015,"public Class[] getMyURLClassLoaderAssignableClasses(URL url){
  Class[] classes=null;
  try {
    classes=new MyURLClassLoader(url).getAssignableClasses(Driver.class);
  }
 catch (  Exception e) {
    classes=new Class[]{};
  }
  return classes;
}","@Override public Class[] getMyURLClassLoaderAssignableClasses(URL url){
  Class[] classes=null;
  try {
    classes=new MyURLClassLoader(url).getAssignableClasses(Driver.class);
  }
 catch (  Exception e) {
    classes=new Class[]{};
  }
  return classes;
}",0.98015873015873
137016,"public void updateConnetionAliasByName(Connection connection,String aliasName){
  if (connection == null || aliasName == null) {
    return;
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  IWorkbenchPage page=sqlPlugin.getActivePage();
  if (page != null) {
    DatabaseStructureView view=(DatabaseStructureView)page.findView(DatabaseStructureView.class.getName());
    if (view != null) {
      view.closeCurrentCabItem(aliasName);
    }
  }
 else {
    log.error(""String_Node_Str"");
  }
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(aliasName);
  if (alias != null) {
    try {
      aliasManager.removeAlias(aliasName);
      addConnetionAliasToSQLPlugin(connection);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
}","@Override public void updateConnetionAliasByName(Connection connection,String aliasName){
  if (connection == null || aliasName == null) {
    return;
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  IWorkbenchPage page=sqlPlugin.getActivePage();
  if (page != null) {
    DatabaseStructureView view=(DatabaseStructureView)page.findView(DatabaseStructureView.class.getName());
    if (view != null) {
      view.closeCurrentCabItem(aliasName);
    }
  }
 else {
    log.error(""String_Node_Str"");
  }
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(aliasName);
  if (alias != null) {
    try {
      aliasManager.removeAlias(aliasName);
      addConnetionAliasToSQLPlugin(connection);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
}",0.9938195302843016
137017,"public boolean needAddDriverConnection(DatabaseConnection dbConn){
  boolean isNeed=false;
  DriverManager driverManager=SQLExplorerPlugin.getDefault().getDriverModel();
  String id=AliasAndManaDriverHelper.getInstance().joinManagedDriverId(dbConn);
  ManagedDriver manDr=driverManager.getDriver(id);
  if (manDr == null) {
    isNeed=true;
  }
 else   if (!manDr.isDriverClassLoaded()) {
    loadDriverByLibManageSystem(dbConn);
    if (!manDr.isDriverClassLoaded()) {
      isNeed=true;
    }
  }
  return isNeed;
}","@Override public boolean needAddDriverConnection(DatabaseConnection dbConn){
  boolean isNeed=false;
  DriverManager driverManager=SQLExplorerPlugin.getDefault().getDriverModel();
  String id=AliasAndManaDriverHelper.getInstance().joinManagedDriverId(dbConn);
  ManagedDriver manDr=driverManager.getDriver(id);
  if (manDr == null) {
    isNeed=true;
  }
 else   if (!manDr.isDriverClassLoaded()) {
    loadDriverByLibManageSystem(dbConn);
    if (!manDr.isDriverClassLoaded()) {
      isNeed=true;
    }
  }
  return isNeed;
}",0.9904214559386972
137018,"public Object createMapDBSetDataSet(String[] columnHeader,Object mapDB,int pageSize){
  return new MapDBSetDataSet(columnHeader,(Set<Object>)mapDB,pageSize);
}","@Override public Object createMapDBSetDataSet(String[] columnHeader,Object mapDB,int pageSize){
  return new MapDBSetDataSet(columnHeader,(Set<Object>)mapDB,pageSize);
}",0.9695121951219512
137019,"public Driver getDriver(String driverClassName,String jarsPath) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  Driver driver=null;
  if (StringUtils.isNotEmpty(jarsPath)) {
    try {
      driver=this.createGenericJDBC(jarsPath,driverClassName);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
    return driver;
  }
  SQLExplorerPlugin sqlExplorerPlugin=SQLExplorerPlugin.getDefault();
  if (sqlExplorerPlugin != null) {
    net.sourceforge.sqlexplorer.dbproduct.DriverManager driverModel=sqlExplorerPlugin.getDriverModel();
    try {
      Collection<ManagedDriver> drivers=driverModel.getDrivers();
      for (      ManagedDriver managedDriver : drivers) {
        LinkedList<String> jars=managedDriver.getJars();
        List<URL> urls=new ArrayList<URL>();
        for (int i=0; i < jars.size(); i++) {
          File file=new File(jars.get(i));
          if (file.exists()) {
            urls.add(file.toURI().toURL());
          }
        }
        if (!urls.isEmpty()) {
          try {
            MyURLClassLoader cl;
            cl=new MyURLClassLoader(urls.toArray(new URL[0]));
            Class<?> clazz=cl.findClass(driverClassName);
            if (clazz != null) {
              driver=(Driver)clazz.newInstance();
              if (driver != null) {
                return driver;
              }
            }
          }
 catch (          ClassNotFoundException e) {
          }
        }
      }
    }
 catch (    MalformedURLException e) {
    }
  }
  if (driver == null) {
    driver=(Driver)Class.forName(driverClassName).newInstance();
  }
  return driver;
}","@Override public Driver getDriver(String driverClassName,String jarsPath) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  Driver driver=null;
  if (StringUtils.isNotEmpty(jarsPath)) {
    try {
      driver=this.createGenericJDBC(jarsPath,driverClassName);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
    return driver;
  }
  SQLExplorerPlugin sqlExplorerPlugin=SQLExplorerPlugin.getDefault();
  if (sqlExplorerPlugin != null) {
    net.sourceforge.sqlexplorer.dbproduct.DriverManager driverModel=sqlExplorerPlugin.getDriverModel();
    try {
      Collection<ManagedDriver> drivers=driverModel.getDrivers();
      for (      ManagedDriver managedDriver : drivers) {
        LinkedList<String> jars=managedDriver.getJars();
        List<URL> urls=new ArrayList<URL>();
        for (int i=0; i < jars.size(); i++) {
          File file=new File(jars.get(i));
          if (file.exists()) {
            urls.add(file.toURI().toURL());
          }
        }
        if (!urls.isEmpty()) {
          try {
            MyURLClassLoader cl;
            cl=new MyURLClassLoader(urls.toArray(new URL[0]));
            Class<?> clazz=cl.findClass(driverClassName);
            if (clazz != null) {
              driver=(Driver)clazz.newInstance();
              if (driver != null) {
                return driver;
              }
            }
          }
 catch (          ClassNotFoundException e) {
          }
        }
      }
    }
 catch (    MalformedURLException e) {
    }
  }
  if (driver == null) {
    driver=(Driver)Class.forName(driverClassName).newInstance();
  }
  return driver;
}",0.9969437652811736
137020,"public void setSqlEditorEditable(Object part,boolean lock){
  if (part instanceof SQLEditor) {
    ((SQLEditor)part).setEditable(lock);
  }
}","@Override public void setSqlEditorEditable(Object part,boolean lock){
  if (part instanceof SQLEditor) {
    ((SQLEditor)part).setEditable(lock);
  }
}",0.9657534246575342
137021,"public void setExportCSVActionTable(Object action,Object table){
  if (action instanceof ExportCSVAction && table instanceof Table) {
    ExportCSVAction exportAction=(ExportCSVAction)action;
    exportAction.setEnabled(true);
    exportAction.setTable((Table)table);
  }
}","@Override public void setExportCSVActionTable(Object action,Object table){
  if (action instanceof ExportCSVAction && table instanceof Table) {
    ExportCSVAction exportAction=(ExportCSVAction)action;
    exportAction.setEnabled(true);
    exportAction.setTable((Table)table);
  }
}",0.9820143884892086
137022,"public void resetTalendDataSetIndex(Object talendDataSet,long fromIndex,long toIndex){
  TalendDataSet tds=(TalendDataSet)talendDataSet;
  tds.setStartIndex(fromIndex);
  tds.setEndIndex(toIndex);
}","@Override public void resetTalendDataSetIndex(Object talendDataSet,long fromIndex,long toIndex){
  TalendDataSet tds=(TalendDataSet)talendDataSet;
  tds.setStartIndex(fromIndex);
  tds.setEndIndex(toIndex);
}",0.9753694581280788
137023,"public void findSqlExplorerTableNode(Connection providerConnection,Package parentPackageElement,String tableName,String activeTabName){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (service != null) {
      service.changePerspectiveAction(SQLExplorerPluginPerspective.class.getName());
    }
 else {
      return;
    }
  }
  Collection<Alias> aliases=SQLExplorerPlugin.getDefault().getAliasManager().getAliases();
  String url=JavaSqlFactory.getURL(providerConnection);
  User currentUser=null;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      currentUser=alias.getDefaultUser();
      OpenPasswordConnectDialogAction openDlgAction=new OpenPasswordConnectDialogAction(alias,alias.getDefaultUser(),false);
      openDlgAction.run();
      break;
    }
  }
  Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
  if (currentUser == null) {
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + tableName);
    return;
  }
  DatabaseNode root=currentUser.getMetaDataSession().getRoot();
  root.load();
  List<INode> catalogs=root.getCatalogs();
  List<INode> schemas=root.getSchemas();
  Catalog doSwitch=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPackageElement);
  Schema schema=SwitchHelpers.SCHEMA_SWITCH.doSwitch(parentPackageElement);
  INode catalogOrSchemaNode=null;
  if (doSwitch != null) {
    if (catalogs.size() != 0) {
      for (      INode catalogNode : catalogs) {
        if (parentPackageElement.getName().equalsIgnoreCase(catalogNode.getName())) {
          catalogOrSchemaNode=catalogNode;
          break;
        }
      }
    }
 else {
      catalogOrSchemaNode=root;
    }
  }
 else {
    if (schemas.size() == 0) {
      Catalog shcmeaOfCatalogNode=CatalogHelper.getParentCatalog(parentPackageElement);
      for (      INode catalogNode : catalogs) {
        if (shcmeaOfCatalogNode.getName().equalsIgnoreCase(catalogNode.getName())) {
          catalogOrSchemaNode=catalogNode;
          break;
        }
      }
    }
    for (    INode schemaNode : schemas) {
      if (parentPackageElement.getName().equalsIgnoreCase(schemaNode.getName())) {
        catalogOrSchemaNode=schemaNode;
        break;
      }
    }
  }
  if (catalogOrSchemaNode == null) {
    throw new NullPointerException(Messages.getString(""String_Node_Str""));
  }
  if (schema != null) {
    if (catalogOrSchemaNode.getSchemaName() == null) {
      catalogOrSchemaNode.setSchemaName(schema.getName());
    }
 else     if (!StringUtils.equals(catalogOrSchemaNode.getSchemaName(),schema.getName())) {
      if (catalogOrSchemaNode.isChildrenLoaded()) {
        SQLExplorerPlugin.getDefault().getDatabaseStructureView().refreshSessionTrees(currentUser.getMetaDataSession());
        List<INode> catalogs2=currentUser.getMetaDataSession().getRoot().getCatalogs();
        if (catalogs2.size() != 0) {
          for (          INode catalogNode : catalogs2) {
            if (catalogOrSchemaNode.getName().equalsIgnoreCase(catalogNode.getName())) {
              catalogOrSchemaNode=catalogNode;
              catalogOrSchemaNode.setSchemaName(schema.getName());
              break;
            }
          }
        }
      }
    }
  }
  INode[] childNodes=catalogOrSchemaNode.getChildNodes();
  TableFolderNode tableFolderNode=null;
  for (  INode node : childNodes) {
    if (""String_Node_Str"".equals(node.getQualifiedName())) {
      tableFolderNode=(TableFolderNode)node;
      break;
    }
  }
  if (tableFolderNode == null) {
    log.fatal(Messages.getString(""String_Node_Str""));
  }
 else {
    INode[] tableNodes=tableFolderNode.getChildNodes();
    for (    INode node : tableNodes) {
      if (tableName.equalsIgnoreCase(node.getName())) {
        DetailTabManager.setActiveTabName(activeTabName);
        DatabaseStructureView dsView=SQLExplorerPlugin.getDefault().getDatabaseStructureView();
        dsView.setSessionSelectionNode(currentUser.getMetaDataSession(),new StructuredSelection(node));
        SQLExplorerPlugin.getDefault().getConnectionsView().getTreeViewer().setSelection(new StructuredSelection(currentUser));
        return;
      }
    }
  }
  MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + tableName);
}","@Override public void findSqlExplorerTableNode(Connection providerConnection,Package parentPackageElement,String tableName,String activeTabName){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (service != null) {
      service.changePerspectiveAction(SQLExplorerPluginPerspective.class.getName());
    }
 else {
      return;
    }
  }
  Collection<Alias> aliases=SQLExplorerPlugin.getDefault().getAliasManager().getAliases();
  String url=JavaSqlFactory.getURL(providerConnection);
  User currentUser=null;
  for (  Alias alias : aliases) {
    if (alias.getUrl().equals(url)) {
      currentUser=alias.getDefaultUser();
      OpenPasswordConnectDialogAction openDlgAction=new OpenPasswordConnectDialogAction(alias,alias.getDefaultUser(),false);
      openDlgAction.run();
      break;
    }
  }
  Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
  if (currentUser == null) {
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + tableName);
    return;
  }
  DatabaseNode root=currentUser.getMetaDataSession().getRoot();
  root.load();
  List<INode> catalogs=root.getCatalogs();
  List<INode> schemas=root.getSchemas();
  Catalog doSwitch=SwitchHelpers.CATALOG_SWITCH.doSwitch(parentPackageElement);
  Schema schema=SwitchHelpers.SCHEMA_SWITCH.doSwitch(parentPackageElement);
  INode catalogOrSchemaNode=null;
  if (doSwitch != null) {
    if (catalogs.size() != 0) {
      for (      INode catalogNode : catalogs) {
        if (parentPackageElement.getName().equalsIgnoreCase(catalogNode.getName())) {
          catalogOrSchemaNode=catalogNode;
          break;
        }
      }
    }
 else {
      catalogOrSchemaNode=root;
    }
  }
 else {
    if (schemas.size() == 0) {
      Catalog shcmeaOfCatalogNode=CatalogHelper.getParentCatalog(parentPackageElement);
      for (      INode catalogNode : catalogs) {
        if (shcmeaOfCatalogNode.getName().equalsIgnoreCase(catalogNode.getName())) {
          catalogOrSchemaNode=catalogNode;
          break;
        }
      }
    }
    for (    INode schemaNode : schemas) {
      if (parentPackageElement.getName().equalsIgnoreCase(schemaNode.getName())) {
        catalogOrSchemaNode=schemaNode;
        break;
      }
    }
  }
  if (catalogOrSchemaNode == null) {
    throw new NullPointerException(Messages.getString(""String_Node_Str""));
  }
  if (schema != null) {
    if (catalogOrSchemaNode.getSchemaName() == null) {
      catalogOrSchemaNode.setSchemaName(schema.getName());
    }
 else     if (!StringUtils.equals(catalogOrSchemaNode.getSchemaName(),schema.getName())) {
      if (catalogOrSchemaNode.isChildrenLoaded()) {
        SQLExplorerPlugin.getDefault().getDatabaseStructureView().refreshSessionTrees(currentUser.getMetaDataSession());
        List<INode> catalogs2=currentUser.getMetaDataSession().getRoot().getCatalogs();
        if (catalogs2.size() != 0) {
          for (          INode catalogNode : catalogs2) {
            if (catalogOrSchemaNode.getName().equalsIgnoreCase(catalogNode.getName())) {
              catalogOrSchemaNode=catalogNode;
              catalogOrSchemaNode.setSchemaName(schema.getName());
              break;
            }
          }
        }
      }
    }
  }
  INode[] childNodes=catalogOrSchemaNode.getChildNodes();
  if (isNetezza(url)) {
    SchemaNode sNode=getNetezzaSchema(childNodes,JavaSqlFactory.getUsername(providerConnection));
    if (sNode != null) {
      childNodes=sNode.getChildNodes();
    }
  }
  TableFolderNode tableFolderNode=null;
  for (  INode node : childNodes) {
    if (""String_Node_Str"".equals(node.getQualifiedName())) {
      tableFolderNode=(TableFolderNode)node;
      break;
    }
  }
  if (tableFolderNode == null) {
    log.fatal(Messages.getString(""String_Node_Str""));
  }
 else {
    INode[] tableNodes=tableFolderNode.getChildNodes();
    for (    INode node : tableNodes) {
      if (tableName.equalsIgnoreCase(node.getName())) {
        DetailTabManager.setActiveTabName(activeTabName);
        DatabaseStructureView dsView=SQLExplorerPlugin.getDefault().getDatabaseStructureView();
        dsView.setSessionSelectionNode(currentUser.getMetaDataSession(),new StructuredSelection(node));
        SQLExplorerPlugin.getDefault().getConnectionsView().getTreeViewer().setSelection(new StructuredSelection(currentUser));
        return;
      }
    }
  }
  MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"") + tableName);
}",0.9774730656219393
137024,"public void selectionChanged(IAction action,ISelection selection){
  if (selection != null && selection instanceof TreeSelection) {
    TreeSelection ts=(TreeSelection)selection;
    TreePath[] treepaths=ts.getPaths();
    if (treepaths.length >= 1) {
      int count=treepaths[0].getSegmentCount();
      for (int i=0; i < count; i++) {
        Object o=treepaths[0].getSegment(i);
        if (o instanceof IFile) {
          if (((IFile)o).getFileExtension().toLowerCase().equals(""String_Node_Str"")) {
            selectedFileObject=(IFile)o;
          }
        }
 else         if (o instanceof Schema) {
          selectedSchema=(Schema)o;
        }
 else         if (o instanceof Catalog) {
          selectedCatalog=(Catalog)o;
        }
 else         if (o instanceof Connection) {
          selectedDataProvider=(Connection)o;
        }
      }
    }
    selectedObject=ts.getFirstElement();
  }
}","@Override public void selectionChanged(IAction action,ISelection selection){
  if (selection != null && selection instanceof TreeSelection) {
    TreeSelection ts=(TreeSelection)selection;
    TreePath[] treepaths=ts.getPaths();
    if (treepaths.length >= 1) {
      int count=treepaths[0].getSegmentCount();
      for (int i=0; i < count; i++) {
        Object o=treepaths[0].getSegment(i);
        if (o instanceof IFile) {
          if (((IFile)o).getFileExtension().toLowerCase().equals(""String_Node_Str"")) {
            selectedFileObject=(IFile)o;
          }
        }
 else         if (o instanceof Schema) {
          selectedSchema=(Schema)o;
        }
 else         if (o instanceof Catalog) {
          selectedCatalog=(Catalog)o;
        }
 else         if (o instanceof Connection) {
          selectedDataProvider=(Connection)o;
        }
      }
    }
    selectedObject=ts.getFirstElement();
  }
}",0.9945054945054944
137025,"public void run(IAction action){
  synchronize();
}","@Override public void run(IAction action){
  synchronize();
}",0.9107142857142856
137026,"public void setActivePart(IAction action,IWorkbenchPart targetPart){
  this.workbenchpart=targetPart;
}","@Override public void setActivePart(IAction action,IWorkbenchPart targetPart){
  this.workbenchpart=targetPart;
}",0.9537037037037036
137027,"private void synchronize(){
  final ResourceSet resourceSet=new ResourceSetImpl();
  try {
    final EObject alreadySavedModel=ModelUtils.load(selectedFileObject.toString(),resourceSet);
    Connection connection=null;
    if (alreadySavedModel instanceof Connection) {
      connection=(Connection)alreadySavedModel;
    }
    Connection newConn=null;
    if (connection != null) {
      String dbUrl=JavaSqlFactory.getURL(connection);
      String driverClassName=JavaSqlFactory.getDriverClass(connection);
      EList<EObject> pcObjects=connection.eContents();
      ListIterator<EObject> liEObject=pcObjects.listIterator();
      Properties parameters=new Properties();
      while (liEObject.hasNext()) {
        EObject eo=liEObject.next();
        if (eo instanceof TaggedValue) {
          String tag=((TaggedValue)eo).getTag();
          System.out.print(tag);
          String value=((TaggedValue)eo).getValue();
          System.out.println(""String_Node_Str"" + value);
          parameters.put(tag,value);
        }
      }
      System.out.println(dbUrl);
      System.out.println(driverClassName);
      DBConnectionParameter dbcp=new DBConnectionParameter();
      dbcp.setName(connection.getName());
      dbcp.setAuthor(MetadataHelper.getAuthor(connection));
      dbcp.setDescription(MetadataHelper.getDescription(connection));
      dbcp.setPurpose(MetadataHelper.getPurpose(connection));
      dbcp.setStatus(MetadataHelper.getDevStatus(connection));
      dbcp.setDriverClassName(driverClassName);
      dbcp.setJdbcUrl(dbUrl);
      dbcp.setParameters(parameters);
      IMetadataConnection metadataConnection=MetadataFillFactory.getDBInstance().fillUIParams(ParameterUtil.toMap(dbcp));
      newConn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
    }
    if (newConn == null) {
      log.error(Messages.getString(""String_Node_Str"",connection == null ? ""String_Node_Str"" : connection.getName()));
      return;
    }
    IFolder folder=ResourceManager.getConnectionFolder();
    FolderProvider fp=new FolderProvider();
    fp.setFolderResource(folder);
    IFile file2=loadDataProviderAndStructureInMemory(newConn,fp);
    final EObject model2=ModelUtils.load(file2.toString(),resourceSet);
    Map<String,Object> options=new HashMap<String,Object>();
    options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
    options.put(MatchOptions.OPTION_SEARCH_WINDOW,500);
    final MatchModel match=MatchService.doMatch(alreadySavedModel,model2,options);
    final DiffModel diff=DiffService.doDiff(match,false);
    EList<UnmatchElement> unMatchedElements=match.getUnmatchedElements();
    for (    Object object : unMatchedElements) {
      UnmatchElement unMatched=(UnmatchElement)object;
      ModelElement modelElt=(ModelElement)unMatched.getElement();
      System.out.println(""String_Node_Str"" + modelElt.getName());
    }
    @SuppressWarnings(""String_Node_Str"") EList<DiffElement> ownedElements=diff.getOwnedElements();
    try {
      System.out.println(ModelUtils.serialize(match));
      System.out.println(ModelUtils.serialize(diff));
    }
 catch (    IOException e) {
      log.error(e,e);
    }
    String outputFile=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + outputFile + ""String_Node_Str"");
    final ComparisonResourceSnapshot snapshot=DiffFactory.eINSTANCE.createComparisonResourceSnapshot();
    snapshot.setDate(Calendar.getInstance().getTime());
    snapshot.setMatch(match);
    snapshot.setDiff(diff);
    ModelUtils.save(snapshot,outputFile);
  }
 catch (  IOException e) {
    System.out.print(e.getMessage());
  }
catch (  InterruptedException e) {
    System.out.print(e.getMessage());
    log.error(e,e);
  }
}","private void synchronize(){
  final ResourceSet resourceSet=new ResourceSetImpl();
  try {
    final EObject alreadySavedModel=ModelUtils.load(selectedFileObject.toString(),resourceSet);
    Connection connection=null;
    if (alreadySavedModel instanceof Connection) {
      connection=(Connection)alreadySavedModel;
    }
    Connection newConn=null;
    if (connection != null) {
      String dbUrl=JavaSqlFactory.getURL(connection);
      String driverClassName=JavaSqlFactory.getDriverClass(connection);
      EList<EObject> pcObjects=connection.eContents();
      ListIterator<EObject> liEObject=pcObjects.listIterator();
      Properties parameters=new Properties();
      while (liEObject.hasNext()) {
        EObject eo=liEObject.next();
        if (eo instanceof TaggedValue) {
          String tag=((TaggedValue)eo).getTag();
          System.out.print(tag);
          String value=((TaggedValue)eo).getValue();
          System.out.println(""String_Node_Str"" + value);
          parameters.put(tag,value);
        }
      }
      System.out.println(dbUrl);
      System.out.println(driverClassName);
      DBConnectionParameter dbcp=new DBConnectionParameter();
      dbcp.setName(connection.getName());
      dbcp.setAuthor(MetadataHelper.getAuthor(connection));
      dbcp.setDescription(MetadataHelper.getDescription(connection));
      dbcp.setPurpose(MetadataHelper.getPurpose(connection));
      dbcp.setStatus(MetadataHelper.getDevStatus(connection));
      dbcp.setDriverClassName(driverClassName);
      dbcp.setJdbcUrl(dbUrl);
      dbcp.setParameters(parameters);
      IMetadataConnection metadataConnection=MetadataFillFactory.getDBInstance(connection).fillUIParams(ParameterUtil.toMap(dbcp));
      newConn=MetadataFillFactory.getDBInstance(connection).fillUIConnParams(metadataConnection,null);
    }
    if (newConn == null) {
      log.error(Messages.getString(""String_Node_Str"",connection == null ? ""String_Node_Str"" : connection.getName()));
      return;
    }
    IFolder folder=ResourceManager.getConnectionFolder();
    FolderProvider fp=new FolderProvider();
    fp.setFolderResource(folder);
    IFile file2=loadDataProviderAndStructureInMemory(newConn,fp);
    final EObject model2=ModelUtils.load(file2.toString(),resourceSet);
    Map<String,Object> options=new HashMap<String,Object>();
    options.put(MatchOptions.OPTION_IGNORE_XMI_ID,true);
    options.put(MatchOptions.OPTION_SEARCH_WINDOW,500);
    final MatchModel match=MatchService.doMatch(alreadySavedModel,model2,options);
    final DiffModel diff=DiffService.doDiff(match,false);
    EList<UnmatchElement> unMatchedElements=match.getUnmatchedElements();
    for (    Object object : unMatchedElements) {
      UnmatchElement unMatched=(UnmatchElement)object;
      ModelElement modelElt=(ModelElement)unMatched.getElement();
      System.out.println(""String_Node_Str"" + modelElt.getName());
    }
    @SuppressWarnings(""String_Node_Str"") EList<DiffElement> ownedElements=diff.getOwnedElements();
    try {
      System.out.println(ModelUtils.serialize(match));
      System.out.println(ModelUtils.serialize(diff));
    }
 catch (    IOException e) {
      log.error(e,e);
    }
    String outputFile=""String_Node_Str"";
    System.out.println(""String_Node_Str"" + outputFile + ""String_Node_Str"");
    final ComparisonResourceSnapshot snapshot=DiffFactory.eINSTANCE.createComparisonResourceSnapshot();
    snapshot.setDate(Calendar.getInstance().getTime());
    snapshot.setMatch(match);
    snapshot.setDiff(diff);
    ModelUtils.save(snapshot,outputFile);
  }
 catch (  IOException e) {
    System.out.print(e.getMessage());
  }
catch (  InterruptedException e) {
    System.out.print(e.getMessage());
    log.error(e,e);
  }
}",0.9973096583266076
137028,"public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  IMetadataConnection metadataConnection=ConvertionHelper.convert((DatabaseConnection)prevDataProvider,false,prevDataProvider.getContextName());
  Connection copyedConnection=null;
  if (mdm) {
    copyedConnection=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(copyedConnection,null,null);
  }
 else {
    EDatabaseTypeName currentEDatabaseType=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
    if (currentEDatabaseType != null) {
      MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(currentEDatabaseType);
      TypedReturnCode<?> trc=(TypedReturnCode<?>)dbInstance.createConnection(metadataConnection);
      Object sqlConnObject=trc.getObject();
      DatabaseMetaData dbJDBCMetadata=null;
      if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
        java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
        dbJDBCMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)prevDataProvider);
        copyedConnection=EObjectHelper.deepCopy(prevDataProvider);
        copyedConnection.getDataPackage().clear();
        MetadataFillFactory.getDBInstance(currentEDatabaseType).fillCatalogs(copyedConnection,dbJDBCMetadata,metadataConnection,MetadataConnectionUtils.getPackageFilter(copyedConnection,dbJDBCMetadata,true));
        MetadataFillFactory.getDBInstance(currentEDatabaseType).fillSchemas(copyedConnection,dbJDBCMetadata,metadataConnection,MetadataConnectionUtils.getPackageFilter(copyedConnection,dbJDBCMetadata,false));
        ConnectionUtils.closeConnection(sqlConn);
      }
 else {
        returnProvider.setMessage(trc.getMessage());
      }
    }
  }
  if (copyedConnection == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(copyedConnection);
  }
  return returnProvider;
}","public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  IMetadataConnection metadataConnection=ConvertionHelper.convert((DatabaseConnection)prevDataProvider,false,prevDataProvider.getContextName());
  Connection copyedConnection=null;
  if (mdm) {
    copyedConnection=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(copyedConnection,null,null);
  }
 else {
    EDatabaseTypeName currentEDatabaseType=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
    if (currentEDatabaseType != null) {
      MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(metadataConnection);
      TypedReturnCode<?> trc=(TypedReturnCode<?>)dbInstance.createConnection(metadataConnection);
      Object sqlConnObject=trc.getObject();
      DatabaseMetaData dbJDBCMetadata=null;
      if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
        java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
        dbJDBCMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)prevDataProvider);
        copyedConnection=EObjectHelper.deepCopy(prevDataProvider);
        copyedConnection.getDataPackage().clear();
        dbInstance.fillCatalogs(copyedConnection,dbJDBCMetadata,metadataConnection,MetadataConnectionUtils.getPackageFilter(copyedConnection,dbJDBCMetadata,true));
        dbInstance.fillSchemas(copyedConnection,dbJDBCMetadata,metadataConnection,MetadataConnectionUtils.getPackageFilter(copyedConnection,dbJDBCMetadata,false));
        ConnectionUtils.closeConnection(sqlConn);
      }
 else {
        returnProvider.setMessage(trc.getMessage());
      }
    }
  }
  if (copyedConnection == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(copyedConnection);
  }
  return returnProvider;
}",0.9678638941398866
137029,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @deprecated Is Replaced By DBConnectionFiller.fillUIConnParams
 * @param dbConn
 * @return
 */
@Deprecated public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.createConnection(metaConnection).getObject();
      if (sqlConn != null) {
        DatabaseMetaData dm=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn,false);
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
  }
  finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @deprecated Is Replaced By DBConnectionFiller.fillUIConnParams
 * @param dbConn
 * @return
 */
@Deprecated public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(dbConn);
      dbConn=(DatabaseConnection)dbInstance.fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.createConnection(metaConnection).getObject();
      if (sqlConn != null) {
        DatabaseMetaData dm=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn,false);
        dbInstance.fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        dbInstance.fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
  }
  finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
  }
  return dbConn;
}",0.9336511720301948
137030,"/** 
 * Updata DB_PRODUCT tagged values for connection item in case they are not present in current file.
 * @throws SQLException
 */
public static synchronized void updataTaggedValueForConnectionItem(Connection dataProvider){
  if (dataProvider instanceof DatabaseConnection && StringUtils.isBlank(TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_NAME,dataProvider))) {
    Property property=PropertyHelper.getProperty(dataProvider);
    if (property != null) {
      Item item=property.getItem();
      if (item != null) {
        DatabaseConnection dbConn=(DatabaseConnection)dataProvider;
        IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
        dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
        if (dbConn != null && Platform.isRunning()) {
          try {
            ProxyRepositoryFactory.getInstance().save(item);
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
}","/** 
 * Updata DB_PRODUCT tagged values for connection item in case they are not present in current file.
 * @throws SQLException
 */
public static synchronized void updataTaggedValueForConnectionItem(Connection dataProvider){
  if (dataProvider instanceof DatabaseConnection && StringUtils.isBlank(TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_NAME,dataProvider))) {
    Property property=PropertyHelper.getProperty(dataProvider);
    if (property != null) {
      Item item=property.getItem();
      if (item != null) {
        DatabaseConnection dbConn=(DatabaseConnection)dataProvider;
        IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
        dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance(dataProvider).fillUIConnParams(metaConnection,dbConn);
        if (dbConn != null && Platform.isRunning()) {
          try {
            ProxyRepositoryFactory.getInstance().save(item);
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
}",0.994392523364486
137031,"/** 
 * DOC yyin Comment method ""addResultToIndicatorToRowMap"".
 * @param indicator
 * @param indicToRowMap
 */
private void addResultToIndicatorToRowMap(Indicator indicator,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  Map<Object,List<Object[]>> dupMap=((DuplicateCountIndicator)indicator).getDuplicateMap();
  Iterator<Object> iterator=dupMap.keySet().iterator();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    List<Object[]> valuelist=dupMap.get(key);
    if (valuelist.size() > 1) {
      List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,key);
      int recordIncrement=valueObjectList.size();
      for (      Object[] row : valuelist) {
        if (recordIncrement < maxNumberRows) {
          valueObjectList.add(row);
        }
 else {
          break;
        }
      }
    }
  }
}","/** 
 * DOC yyin Comment method ""addResultToIndicatorToRowMap"".
 * @param indicator
 * @param indicToRowMap
 */
private void addResultToIndicatorToRowMap(Indicator indicator,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  Map<Object,Object[]> dupMap=((DuplicateCountIndicator)indicator).getDuplicateMap();
  Set<Object> duplicateValues=((DuplicateCountIndicator)indicator).getDuplicateValues();
  Iterator<Object> iterator=duplicateValues.iterator();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    Object[] valueArray=dupMap.get(key);
    if (valueArray == null) {
      continue;
    }
    List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,key);
    int NumberOfRecord=valueObjectList.size();
    if (NumberOfRecord < maxNumberRows) {
      valueObjectList.add(valueArray);
    }
 else {
      break;
    }
  }
}",0.7398015435501654
137032,"private void addResultToIndicatorToRowMap(Indicator indicator,EMap<Indicator,AnalyzedDataSet> indicToRowMap,int maxNumberRows,int columnCount){
  Map<Object,List<Object[]>> dupMap=((DuplicateCountIndicator)indicator).getDuplicateMap();
  Iterator<Object> iterator=dupMap.keySet().iterator();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    List<Object[]> valuelist=dupMap.get(key);
    if (valuelist.size() > 1) {
      List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,key);
      int recordIncrement=valueObjectList.size();
      for (      Object[] row : valuelist) {
        if (recordIncrement < maxNumberRows) {
          valueObjectList.add(row);
        }
 else {
          break;
        }
      }
    }
  }
}","private void addResultToIndicatorToRowMap(Indicator indicator,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  Map<Object,Object[]> dupMap=((DuplicateCountIndicator)indicator).getDuplicateMap();
  Set<Object> duplicateValues=((DuplicateCountIndicator)indicator).getDuplicateValues();
  Iterator<Object> iterator=duplicateValues.iterator();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    Object[] valueArray=dupMap.get(key);
    if (valueArray != null) {
      List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,key);
      int NumberOfRecord=valueObjectList.size();
      if (NumberOfRecord < maxNumberRows) {
        valueObjectList.add(valueArray);
      }
 else {
        break;
      }
    }
  }
}",0.5266538214515093
137033,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=createStatement();
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"",sqlStatement);
    log.warn(mess);
    ok.setReturnCode(mess,false);
    statement.close();
    return ok;
  }
  ok=getMessageForInvalidJUDIs();
  int columnCount=resultSet.getMetaData().getColumnCount();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int columnListSize=columnlist.size();
  label:   while (resultSet.next()) {
    for (int i=0; i < columnListSize; i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(col);
      Object object=null;
      try {
        object=resultSet.getObject(col);
      }
 catch (      SQLException e) {
        if (""String_Node_Str"".equals(resultSet.getString(col))) {
          object=null;
        }
      }
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        indicator.setDrillDownLimitSize(Long.valueOf(maxNumberRows));
        if (!continueRun()) {
          break label;
        }
        if (indicator instanceof DuplicateCountIndicator) {
          ((DuplicateCountIndicator)indicator).handle(object,resultSet,columnCount);
        }
 else {
          indicator.handle(object);
        }
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData()) {
          if (indicator.mustStoreRow()) {
            List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
            recordIncrement=valueObjectList.size();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnList=ColumnSetHelper.getColumns(doSwitch);
            List<Object> inputRowList=new ArrayList<Object>();
            for (int j=0; j < columnCount; j++) {
              String newcol=columnList.get(j).getName();
              Object newobject=null;
              try {
                newobject=resultSet.getObject(newcol);
              }
 catch (              SQLException e) {
                if (""String_Node_Str"".equals(resultSet.getString(newcol))) {
                  newobject=null;
                }
              }
              if (indicator.isUsedMapDBMode()) {
                inputRowList.add(newobject == null ? PluginConstant.NULL_STRING : newobject);
                continue;
              }
 else {
                if (recordIncrement < maxNumberRows) {
                  if (recordIncrement < valueObjectList.size()) {
                    valueObjectList.get(recordIncrement)[j]=newobject;
                  }
 else {
                    Object[] valueObject=new Object[columnCount];
                    valueObject[j]=newobject;
                    valueObjectList.add(valueObject);
                  }
                }
 else {
                  break;
                }
              }
            }
            if (indicator.isUsedMapDBMode()) {
              indicator.handleDrillDownData(object,inputRowList);
            }
          }
 else           if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
            List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnElementList=ColumnSetHelper.getColumns(doSwitch);
            int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
            for (            Object[] dataObject : removeValueObjectList) {
              if (dataObject[offsetting].equals(object)) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
          }
        }
      }
    }
  }
  for (int i=0; i < columnListSize; i++) {
    String col=columnlist.get(i);
    List<Indicator> indicators=getIndicators(col);
    if (indicators.size() > 0 && indicators.get(0).isUsedMapDBMode()) {
      break;
    }
    for (    Indicator indicator : indicators) {
      if (indicator instanceof DuplicateCountIndicator) {
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        addResultToIndicatorToRowMap(indicator,indicToRowMap,maxNumberRows,columnCount);
      }
    }
  }
  resultSet.close();
  statement.close();
  getConnection().close();
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=createStatement();
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"",sqlStatement);
    log.warn(mess);
    ok.setReturnCode(mess,false);
    statement.close();
    return ok;
  }
  ok=getMessageForInvalidJUDIs();
  int columnCount=resultSet.getMetaData().getColumnCount();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int columnListSize=columnlist.size();
  label:   while (resultSet.next()) {
    for (int i=0; i < columnListSize; i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(col);
      Object object=null;
      try {
        object=resultSet.getObject(col);
      }
 catch (      SQLException e) {
        if (""String_Node_Str"".equals(resultSet.getString(col))) {
          object=null;
        }
      }
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        indicator.setDrillDownLimitSize(Long.valueOf(maxNumberRows));
        if (!continueRun()) {
          break label;
        }
        if (indicator instanceof DuplicateCountIndicator) {
          ((DuplicateCountIndicator)indicator).handle(object,resultSet,columnCount);
        }
 else {
          indicator.handle(object);
        }
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData()) {
          if (indicator.mustStoreRow()) {
            List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
            recordIncrement=valueObjectList.size();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnList=ColumnSetHelper.getColumns(doSwitch);
            List<Object> inputRowList=new ArrayList<Object>();
            for (int j=0; j < columnCount; j++) {
              String newcol=columnList.get(j).getName();
              Object newobject=null;
              try {
                newobject=resultSet.getObject(newcol);
              }
 catch (              SQLException e) {
                if (""String_Node_Str"".equals(resultSet.getString(newcol))) {
                  newobject=null;
                }
              }
              if (indicator.isUsedMapDBMode()) {
                inputRowList.add(newobject == null ? PluginConstant.NULL_STRING : newobject);
                continue;
              }
 else {
                if (recordIncrement < maxNumberRows) {
                  if (recordIncrement < valueObjectList.size()) {
                    valueObjectList.get(recordIncrement)[j]=newobject;
                  }
 else {
                    Object[] valueObject=new Object[columnCount];
                    valueObject[j]=newobject;
                    valueObjectList.add(valueObject);
                  }
                }
 else {
                  break;
                }
              }
            }
            if (indicator.isUsedMapDBMode()) {
              indicator.handleDrillDownData(object,inputRowList);
            }
          }
 else           if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
            List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnElementList=ColumnSetHelper.getColumns(doSwitch);
            int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
            for (            Object[] dataObject : removeValueObjectList) {
              if (dataObject[offsetting].equals(object)) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
          }
        }
      }
    }
  }
  for (int i=0; i < columnListSize; i++) {
    String col=columnlist.get(i);
    List<Indicator> indicators=getIndicators(col);
    if (indicators.size() > 0 && indicators.get(0).isUsedMapDBMode()) {
      break;
    }
    for (    Indicator indicator : indicators) {
      if (indicator instanceof DuplicateCountIndicator) {
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        addResultToIndicatorToRowMap(indicator,indicToRowMap);
      }
    }
  }
  resultSet.close();
  statement.close();
  getConnection().close();
  return ok;
}",0.9810158201498752
137034,"public static <T>PageResult<Object[]> createPage(AbstractDB<T> db,Map<Long,T> indexMap,ColumnFilter filter,long fromIndex,long toIndex,long totalSize){
  List<Object[]> content=db.subList(fromIndex,toIndex,indexMap);
  if (filter != null) {
    content=filter.filterArray(content);
  }
  long total=totalSize;
  if (content.size() < total) {
    total=content.size();
  }
  return new PageResult<Object[]>(content,total);
}","public static <T>PageResult<Object[]> createPage(AbstractDB<T> db,Map<Long,T> indexMap,ColumnFilter filter,long fromIndex,long toIndex,long totalSize){
  List<Object[]> content=db.subList(fromIndex,toIndex,indexMap);
  if (filter != null) {
    content=filter.filterArray(content);
  }
  return new PageResult<Object[]>(content,totalSize);
}",0.8821989528795812
137035,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public PageResult<Object[]> loadPage(PageableController controller){
  long totalSize=itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  if (dataValidator == null) {
    if (DBValueMap.class.isInstance(db)) {
      return MapDBPageListHelper.createPageByValue((DBValueMap)db,indexMap,columnFilter,fromIndex,toIndex);
    }
 else {
      return MapDBPageListHelper.createPage(db,indexMap,columnFilter,fromIndex,toIndex,totalSize);
    }
  }
 else {
    return MapDBPageListHelper.createPage(db,indexMap,dataValidator,fromIndex,toIndex,totalSize);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public PageResult<Object[]> loadPage(PageableController controller){
  int dbSize=db.size();
  long totalSize=dbSize < itemsSize ? dbSize : itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  if (dataValidator == null) {
    return MapDBPageListHelper.createPage(db,indexMap,columnFilter,fromIndex,toIndex,totalSize);
  }
 else {
    return MapDBPageListHelper.createPage(db,indexMap,dataValidator,fromIndex,toIndex,totalSize);
  }
}",0.6163349347975292
137036,"private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator());
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysisItem.getAnalysis().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(100);
    try {
      final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object[]>(ssIndicator.getMapDB(StandardDBName.dataSection.name()));
      controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
      ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
      resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}","private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator());
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysisItem.getAnalysis().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
    try {
      final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object[]>(ssIndicator.getMapDB(StandardDBName.dataSection.name()));
      controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
      ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
      resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}",0.9949480774628122
137037,"/** 
 * DataSet is used to be the input on the export wizard. unchecked is for the type of mapDB else will have a warning
 * @param controller
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Object getDataSetForMapDB(int pageSize){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  AbstractDB<?> mapDB=DrillDownUtils.getMapDB(dataEntity,analysis);
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  if (AnalysisType.COLUMN_SET == analysisType) {
    Long size=getCurrentIndicatorResultSize();
    if (ColumnSetDBMap.class.isInstance(mapDB)) {
      return SqlExplorerUtils.getDefault().createMapDBColumnSetDataSet(columnHeader,(ColumnSetDBMap)mapDB,size,currIndicator,pageSize);
    }
  }
  if (DBSet.class.isInstance(mapDB)) {
    return SqlExplorerUtils.getDefault().createMapDBSetDataSet(columnHeader,(DBSet<Object>)mapDB,pageSize);
  }
 else {
    ColumnFilter columnFilter=getColumnFilter();
    Long itemSize=getItemSize(mapDB);
    return SqlExplorerUtils.getDefault().createMapDBDataSet(columnHeader,(DBMap<Object,List<Object>>)mapDB,pageSize,columnFilter,itemSize);
  }
}","/** 
 * DataSet is used to be the input on the export wizard. unchecked is for the type of mapDB else will have a warning
 * @param controller
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Object getDataSetForMapDB(int pageSize){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  AbstractDB<?> mapDB=getMapDB();
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  if (AnalysisType.COLUMN_SET == analysisType) {
    Long size=getCurrentIndicatorResultSize();
    if (ColumnSetDBMap.class.isInstance(mapDB)) {
      return SqlExplorerUtils.getDefault().createMapDBColumnSetDataSet(columnHeader,(ColumnSetDBMap)mapDB,size,currIndicator,pageSize);
    }
  }
  if (DBSet.class.isInstance(mapDB)) {
    return SqlExplorerUtils.getDefault().createMapDBSetDataSet(columnHeader,(DBSet<Object>)mapDB,pageSize);
  }
 else {
    ColumnFilter columnFilter=getColumnFilter();
    Long itemSize=getItemSize(mapDB);
    return SqlExplorerUtils.getDefault().createMapDBDataSet(columnHeader,(DBMap<Object,List<Object>>)mapDB,pageSize,columnFilter,itemSize);
  }
}",0.9867909867909868
137038,"/** 
 * Get the result of current indicator. Which only be used by column Set analysis
 * @return
 */
public Long getCurrentIndicatorResultSize(){
  Long itemsSize=0l;
  if (isColumnSetIndicator()) {
    itemsSize=getColumnSetIndicatorResultSize();
  }
 else {
    itemsSize=currIndicator.getIntegerValue();
  }
  return itemsSize;
}","/** 
 * Get the result of current indicator.
 * @return
 */
private Long getCurrentIndicatorResultSize(){
  Long itemsSize=0l;
  if (isColumnSetIndicator()) {
    itemsSize=getColumnSetIndicatorResultSize();
  }
 else {
    itemsSize=getColumnIndicatorResultsize();
  }
  return itemsSize;
}",0.8269230769230769
137039,"/** 
 * Get index of column whiche will be used on the dirll down
 * @return
 */
public Integer[] getColumnIndexArray(){
  if (!DrillDownEditorInput.judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    return null;
  }
  List<Integer> indexArray=new ArrayList<Integer>();
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  int index=0;
  if (analysisElement instanceof TdColumn) {
    for (    TdColumn column : TableHelper.getColumns(SwitchHelpers.TABLE_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer()))) {
      if (column.getName().equals(analysisElement.getName())) {
        indexArray.add(index);
      }
      index++;
    }
  }
 else   if (analysisElement instanceof MetadataColumn) {
    MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
    for (    MetadataColumn mColumn : mTable.getColumns()) {
      if (mColumn.getLabel().equals(analysisElement.getName())) {
        indexArray.add(index);
      }
      index++;
    }
  }
  return indexArray.toArray(new Integer[indexArray.size()]);
}","/** 
 * Get index of column whiche will be used on the dirll down. Note that One indicator only belong one column so that the array of retrun value just contain one element. And if we create new map for view values menu rather than used same map with view rows menu then method can be removed
 * @return
 */
public Integer[] getColumnIndexArray(){
  if (!DrillDownEditorInput.judgeMenuType(this.getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE) || DuplicateCountIndicator.class.isInstance(currIndicator)) {
    return null;
  }
  List<Integer> indexArray=new ArrayList<Integer>();
  Indicator indicator=this.getCurrIndicator();
  ModelElement analysisElement=indicator.getAnalyzedElement();
  int index=0;
  if (analysisElement instanceof TdColumn) {
    TdTable tdTable=ColumnHelper.getColumnOwnerAsTdTable((TdColumn)analysisElement);
    for (    TdColumn column : TableHelper.getColumns(tdTable)) {
      if (column.getName().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
 else   if (analysisElement instanceof MetadataColumn) {
    MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable((MetadataColumn)analysisElement);
    for (    MetadataColumn mColumn : mTable.getColumns()) {
      if (mColumn.getLabel().equals(analysisElement.getName())) {
        indexArray.add(index);
        break;
      }
      index++;
    }
  }
  return indexArray.toArray(new Integer[indexArray.size()]);
}",0.8137404580152672
137040,"/** 
 * DOC talend Comment method ""getPageSize"".
 * @param controller
 * @return
 */
private Long getItemSize(AbstractDB<?> mapDB){
  if (DrillDownEditorInput.judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    return getCurrentIndicatorResultSize();
  }
 else {
    return Long.valueOf(mapDB.size());
  }
}","/** 
 * Get the result of current indicator.
 * @return if view values then return result of current indicator else return the size of the mapDB
 */
public Long getItemSize(AbstractDB<?> mapDB){
  if (judgeMenuType(getMenuType(),DrillDownEditorInput.MENU_VALUE_TYPE)) {
    return getCurrentIndicatorResultSize();
  }
 else {
    return Long.valueOf(mapDB.size());
  }
}",0.6590257879656161
137041,"/** 
 * DOC talend Comment method ""initTableViewerForMapDB"".
 * @param parent
 * @param table
 * @param ddEditorInput
 */
@SuppressWarnings(""String_Node_Str"") private void initTableViewerForMapDB(final Composite parent,final Table table,DrillDownEditorInput ddEditorInput){
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  tableView.setLabelProvider(new DrillDownResultLabelProvider());
  tableView.setContentProvider(new DrillDownResultContentProvider());
  final PageableController controller=new PageableController(100);
  table.setData(ddEditorInput.getDataSetForMapDB(controller.getPageSize()));
  Analysis analysis=ddEditorInput.getAnalysis();
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  IPageLoader<PageResult<Object[]>> pageLoader=null;
  AbstractDB<Object> mapDB=DrillDownUtils.getMapDB(ddEditorInput.getDataEntity(),ddEditorInput.getAnalysis());
  Indicator generateMapDBIndicator=ddEditorInput.getGenerateMapDBIndicator();
  MapDBManager.getInstance().addDBRef(generateMapDBIndicator.getMapDBFile());
  if (AnalysisType.COLUMN_SET == analysisType) {
    Long itemsSize=ddEditorInput.getCurrentIndicatorResultSize();
    pageLoader=new MapDBPageLoader<Object>(mapDB,ddEditorInput.getCurrIndicator(),itemsSize);
  }
 else {
    ColumnFilter filter=ddEditorInput.getColumnFilter();
    pageLoader=new MapDBPageLoader<Object>(mapDB,null,mapDB.size(),filter);
  }
  controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,tableView,pageLoader,PageResultContentProvider.getInstance(),null));
  controller.addPageChangedListener(new PageChangedAdapter(){
    @Override public void pageIndexChanged(    int oldPageIndex,    int newPageIndex,    PageableController controller){
      Object data=table.getData();
      if (data != null && SqlExplorerUtils.getDefault().isInstanceofTalendDataSet(data)) {
        long totalSize=controller.getTotalElements();
        long pageSize=controller.getPageSize();
        long pageIndex=controller.getPageOffset();
        long fromIndex=pageIndex;
        long toIndex=pageIndex + pageSize;
        if (toIndex > totalSize) {
          toIndex=totalSize;
        }
        SqlExplorerUtils.getDefault().resetTalendDataSetIndex(data,fromIndex,toIndex);
        parent.layout();
      }
    }
  }
);
  ResultAndNavigationPageGraphicsRenderer resultAndNavigationPageGraphicsRenderer=new ResultAndNavigationPageGraphicsRenderer(parent,SWT.NONE,controller);
  resultAndNavigationPageGraphicsRenderer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createColumns(tableView,controller,((DrillDownEditorInput)this.getEditorInput()));
  controller.setCurrentPage(0);
}","/** 
 * DOC talend Comment method ""initTableViewerForMapDB"".
 * @param parent
 * @param table
 * @param ddEditorInput
 */
@SuppressWarnings(""String_Node_Str"") private void initTableViewerForMapDB(final Composite parent,final Table table,DrillDownEditorInput ddEditorInput){
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  tableView.setLabelProvider(new DrillDownResultLabelProvider());
  tableView.setContentProvider(new DrillDownResultContentProvider());
  final PageableController controller=new PageableController(MapDBPageConstant.NUMBER_PER_PAGE);
  table.setData(ddEditorInput.getDataSetForMapDB(controller.getPageSize()));
  Analysis analysis=ddEditorInput.getAnalysis();
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  IPageLoader<PageResult<Object[]>> pageLoader=null;
  AbstractDB<Object> mapDB=ddEditorInput.getMapDB();
  Indicator generateMapDBIndicator=ddEditorInput.getGenerateMapDBIndicator();
  MapDBManager.getInstance().addDBRef(generateMapDBIndicator.getMapDBFile());
  Long itemsSize=ddEditorInput.getItemSize(mapDB);
  if (AnalysisType.COLUMN_SET == analysisType) {
    pageLoader=new MapDBPageLoader<Object>(mapDB,ddEditorInput.getCurrIndicator(),itemsSize);
  }
 else {
    ColumnFilter filter=ddEditorInput.getColumnFilter();
    pageLoader=new MapDBPageLoader<Object>(mapDB,null,itemsSize,filter);
  }
  controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,tableView,pageLoader,PageResultContentProvider.getInstance(),null));
  controller.addPageChangedListener(new PageChangedAdapter(){
    @Override public void pageIndexChanged(    int oldPageIndex,    int newPageIndex,    PageableController controller){
      Object data=table.getData();
      if (data != null && SqlExplorerUtils.getDefault().isInstanceofTalendDataSet(data)) {
        long totalSize=controller.getTotalElements();
        long pageSize=controller.getPageSize();
        long pageIndex=controller.getPageOffset();
        long fromIndex=pageIndex;
        long toIndex=pageIndex + pageSize;
        if (toIndex > totalSize) {
          toIndex=totalSize;
        }
        SqlExplorerUtils.getDefault().resetTalendDataSetIndex(data,fromIndex,toIndex);
        parent.layout();
      }
    }
  }
);
  ResultAndNavigationPageGraphicsRenderer resultAndNavigationPageGraphicsRenderer=new ResultAndNavigationPageGraphicsRenderer(parent,SWT.NONE,controller);
  resultAndNavigationPageGraphicsRenderer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createColumns(tableView,controller,((DrillDownEditorInput)this.getEditorInput()));
  controller.setCurrentPage(0);
}",0.9534970238095238
137042,"/** 
 * create the nattable every time when the user select some columns
 * @param columns
 * @param listOfData
 */
public TControl createTable(Composite parentContainer,ModelElement[] columns,List<Object[]> listOfData){
  reset();
  initTableProperty(columns);
  List<Object[]> results=listOfData == null ? new ArrayList<Object[]>() : listOfData;
  if (results.size() < 1) {
    results.add(getEmptyRow());
  }
  isContainGID=results.get(0).length > additionalColumnPosition.GIDindex;
  if (isContainGID) {
    initGIDMap(results);
    if (minGrpSize > 1) {
      return hideGroup(parentContainer,results);
    }
  }
  return createTableControl(parentContainer,results);
}","/** 
 * create the nattable every time when the user select some columns
 * @param columns
 * @param listOfData
 */
public TControl createTable(Composite parentContainer,ModelElement[] columns,List<Object[]> listOfData){
  reset();
  initTableProperty(columns);
  List<Object[]> results=listOfData == null ? new ArrayList<Object[]>() : listOfData;
  if (results.size() < 1) {
    results.add(getEmptyRow(columns.length));
  }
  isContainGID=results.get(0).length > additionalColumnPosition.GIDindex;
  if (isContainGID) {
    initGIDMap(results);
    if (minGrpSize > 1) {
      return hideGroup(parentContainer,results);
    }
  }
  return createTableControl(parentContainer,results);
}",0.9897058823529412
137043,"/** 
 * when the data is empty, the column can not response the click event, so we need to add an empty row to it.
 * @return
 */
private Object[] getEmptyRow(){
  Object[] emptyRow=new Object[propertyNames.length];
  for (int i=0; i < propertyNames.length; i++) {
    emptyRow[i]=StringUtils.EMPTY;
  }
  return emptyRow;
}","/** 
 * when the data is empty, the column can not response the click event, so we need to add an empty row to it.
 * @param length
 * @return
 */
private Object[] getEmptyRow(int length){
  Object[] emptyRow=new Object[length];
  for (int i=0; i < length; i++) {
    emptyRow[i]=StringUtils.EMPTY;
  }
  return emptyRow;
}",0.9149922720247295
137044,"public static <K,V>PageResult<Object[]> createPageByValue(DBValueMap<K,V> db,PageableController controller,SortProcessor processor,Map<Long,K> indexMap,long itemsSize,ColumnFilter filter){
  long totalSize=itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  List<Object[]> content=((DBMap<K,V>)db).subValueList(fromIndex,toIndex,indexMap);
  if (filter != null) {
    content=filter.filterArray(content);
  }
  return new PageResult<Object[]>(content,content.size());
}","public static <K,V>PageResult<Object[]> createPageByValue(DBValueMap<K,V> db,Map<Long,K> indexMap,ColumnFilter filter,long fromIndex,long toIndex){
  List<Object[]> content=((DBMap<K,V>)db).subValueList(fromIndex,toIndex,indexMap);
  if (filter != null) {
    content=filter.filterArray(content);
  }
  return new PageResult<Object[]>(content,content.size());
}",0.6566566566566566
137045,"public static <T>PageResult<Object[]> createPage(AbstractDB<T> db,PageableController controller,SortProcessor processor,Map<Long,T> indexMap,long itemsSize,DataValidation dataValidator){
  long totalSize=itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  List<Object[]> content=db.subList(fromIndex,toIndex,indexMap,dataValidator);
  if (content.size() < pageSize) {
    totalSize=content.size();
  }
  return new PageResult<Object[]>(content,totalSize);
}","public static <T>PageResult<Object[]> createPage(AbstractDB<T> db,Map<Long,T> indexMap,ColumnFilter filter,long fromIndex,long toIndex,long totalSize){
  List<Object[]> content=db.subList(fromIndex,toIndex,indexMap);
  if (filter != null) {
    content=filter.filterArray(content);
  }
  long total=totalSize;
  if (content.size() < total) {
    total=content.size();
  }
  return new PageResult<Object[]>(content,total);
}",0.4899904671115348
137046,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public PageResult<Object[]> loadPage(PageableController controller){
  if (dataValidator == null) {
    if (DBValueMap.class.isInstance(db)) {
      return MapDBPageListHelper.createPageByValue((DBValueMap)db,controller,indexMap,itemsSize,columnFilter);
    }
    return MapDBPageListHelper.createPage(db,controller,indexMap,itemsSize,columnFilter);
  }
 else {
    return MapDBPageListHelper.createPage(db,controller,indexMap,itemsSize,dataValidator);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public PageResult<Object[]> loadPage(PageableController controller){
  long totalSize=itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  if (dataValidator == null) {
    if (DBValueMap.class.isInstance(db)) {
      return MapDBPageListHelper.createPageByValue((DBValueMap)db,indexMap,columnFilter,fromIndex,toIndex);
    }
 else {
      return MapDBPageListHelper.createPage(db,indexMap,columnFilter,fromIndex,toIndex,totalSize);
    }
  }
 else {
    return MapDBPageListHelper.createPage(db,indexMap,dataValidator,fromIndex,toIndex,totalSize);
  }
}",0.6519421172886519
137047,"public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
        return;
      }
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}","public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
    return;
  }
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
        return;
      }
      if (ExecutionLanguage.JAVA == currentEngine && analysis.getParameters().isStoreData()) {
        if (currentIndicator.isUsedMapDBMode()) {
          if (dataEntity == null || currentIndicator == null || DrillDownUtils.getMapDB(currentDataEntity,analysis).size() == 0) {
            return;
          }
        }
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                log.error(e1,e1);
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}",0.7916063675832128
137048,"private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
            return;
          }
          if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
            return;
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
            return;
          }
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    e1.printStackTrace();
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}","private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
            return;
          }
          if (ExecutionLanguage.JAVA == currentEngine && analysis.getParameters().isStoreData()) {
            if (currentIndicator.isUsedMapDBMode()) {
              if (dataEntity == null || currentIndicator == null || DrillDownUtils.getMapDB(currentDataEntity,analysis).size() == 0) {
                return;
              }
            }
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    log.error(e1,e1);
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}",0.8384855852726641
137049,"/** 
 * Test method for  {@link org.talend.dataquality.record.linkage.ui.composite.utils.MatchRuleAnlaysisUtils#sortDataByColumn(org.talend.dataquality.record.linkage.ui.composite.table.SortState,java.util.List,java.util.List)}.
 */
public void testSortDataByColumn_StringAsDouble(){
  sortState.getNextSortDirection();
  sortState.setGrpSizeIndex(0);
  String[] array={""String_Node_Str""};
  String[] array2={""String_Node_Str""};
  String[] array4={""String_Node_Str""};
  String[] array3={""String_Node_Str""};
  sortData.add(array);
  sortData.add(array2);
  sortData.add(array4);
  sortData.add(array3);
  sqlDataType.setName(""String_Node_Str"");
  sqlDataType.setJavaDataType(Types.REAL);
  List<Object[]> sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(4,sortResult.size());
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array4[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array3[0]),0);
  sortState.setSelectedColumnIndex(0);
  sortState.getNextSortDirection();
  sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array2[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array3[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array4[0]),0);
}","/** 
 * Test method for  {@link org.talend.dataquality.record.linkage.ui.composite.utils.MatchRuleAnlaysisUtils#sortDataByColumn(org.talend.dataquality.record.linkage.ui.composite.table.SortState,java.util.List,java.util.List)}.
 */
public void testSortDataByColumn_StringAsDouble(){
  sortState.getNextSortDirection();
  String[] array={""String_Node_Str""};
  String[] array2={""String_Node_Str""};
  String[] array4={""String_Node_Str""};
  String[] array3={""String_Node_Str""};
  sortData.add(array);
  sortData.add(array2);
  sortData.add(array4);
  sortData.add(array3);
  sqlDataType.setName(""String_Node_Str"");
  sqlDataType.setJavaDataType(Types.REAL);
  List<Object[]> sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(4,sortResult.size());
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array4[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array3[0]),0);
  sortState.setSelectedColumnIndex(0);
  sortState.getNextSortDirection();
  sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array2[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array3[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array4[0]),0);
}",0.988865692414753
137050,"/** 
 * DOC yyin Comment method ""setUp"".
 * @throws java.lang.Exception
 */
protected void setUp() throws Exception {
  sortState=new SortState();
  sortState.setSelectedColumnIndex(0);
  sortState.setSelectedColumnName(""String_Node_Str"");
  sortData=new ArrayList<Object[]>();
  columns=new ArrayList<ModelElement>();
  tdColumn.setSqlDataType(sqlDataType);
  columns.add(tdColumn);
}","/** 
 * DOC yyin Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Override protected void setUp() throws Exception {
  sortState=new SortState(0);
  sortState.setSelectedColumnIndex(0);
  sortState.setSelectedColumnName(""String_Node_Str"");
  sortData=new ArrayList<Object[]>();
  columns=new ArrayList<ModelElement>();
  tdColumn.setSqlDataType(sqlDataType);
  columns.add(tdColumn);
}",0.9859154929577464
137051,"/** 
 * Test method for  {@link org.talend.dataquality.record.linkage.ui.composite.utils.MatchRuleAnlaysisUtils#sortDataByColumn(org.talend.dataquality.record.linkage.ui.composite.table.SortState,java.util.List,java.util.List)}.
 */
public void testSortDataByColumn_GroupSize(){
  sortState.getNextSortDirection();
  sortState.setGrpSizeIndex(0);
  String[] array={""String_Node_Str""};
  String[] array2={""String_Node_Str""};
  String[] array4={""String_Node_Str""};
  String[] array3={""String_Node_Str""};
  sortData.add(array);
  sortData.add(array2);
  sortData.add(array4);
  sortData.add(array3);
  sqlDataType.setName(""String_Node_Str"");
  sqlDataType.setJavaDataType(Types.VARCHAR);
  List<Object[]> sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(4,sortResult.size());
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array4[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array3[0]),0);
  sortState.setSelectedColumnIndex(0);
  sortState.getNextSortDirection();
  sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array2[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array3[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array4[0]),0);
}","/** 
 * Test method for  {@link org.talend.dataquality.record.linkage.ui.composite.utils.MatchRuleAnlaysisUtils#sortDataByColumn(org.talend.dataquality.record.linkage.ui.composite.table.SortState,java.util.List,java.util.List)}.
 */
public void testSortDataByColumn_GroupSize(){
  sortState.getNextSortDirection();
  String[] array={""String_Node_Str""};
  String[] array2={""String_Node_Str""};
  String[] array4={""String_Node_Str""};
  String[] array3={""String_Node_Str""};
  sortData.add(array);
  sortData.add(array2);
  sortData.add(array4);
  sortData.add(array3);
  sqlDataType.setName(""String_Node_Str"");
  sqlDataType.setJavaDataType(Types.VARCHAR);
  List<Object[]> sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(4,sortResult.size());
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array4[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array3[0]),0);
  sortState.setSelectedColumnIndex(0);
  sortState.getNextSortDirection();
  sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array2[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array3[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array4[0]),0);
}",0.9888501742160278
137052,"/** 
 * DOC yyin Comment method ""tearDown"".
 * @throws java.lang.Exception
 */
protected void tearDown() throws Exception {
  sortData=null;
  columns=null;
}","/** 
 * DOC yyin Comment method ""tearDown"".
 * @throws java.lang.Exception
 */
@Override protected void tearDown() throws Exception {
  sortData=null;
  columns=null;
}",0.9693251533742332
137053,"private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    int analysedColumnIndex[]=new int[analysisElementList.size()];
    List<String> columnLabels=new ArrayList<String>();
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
      Collections.addAll(columnLabels,csvReader.getValues());
    }
    for (int j=0; j < analysisElementList.size(); j++) {
      analysedColumnIndex[j]=columnLabels.indexOf(analysisElementList.get(j).getName());
    }
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord=csvReader.getCurrentRecord();
      if (limitValue != -1 && currentRecord > limitValue - 1) {
        break;
      }
      if (delimitedFileconnection.isFirstLineCaption() && currentRecord == 0) {
        continue;
      }
      String[] values=csvReader.getValues();
      String[] analysedValues=new String[analysisElementList.size()];
      for (int i=0; i < analysedColumnIndex.length; i++) {
        analysedValues[i]=values[analysedColumnIndex[i]];
      }
      handleRow(analysedValues);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}","private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    int analysedColumnIndex[]=new int[analysisElementList.size()];
    List<String> columnLabels=new ArrayList<String>();
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
      Collections.addAll(columnLabels,csvReader.getValues());
    }
    for (int j=0; j < analysisElementList.size(); j++) {
      analysedColumnIndex[j]=columnLabels.indexOf(analysisElementList.get(j).getName());
    }
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord++;
      if (limitValue != -1 && currentRecord > limitValue) {
        break;
      }
      String[] values=csvReader.getValues();
      String[] analysedValues=new String[analysisElementList.size()];
      for (int i=0; i < analysedColumnIndex.length; i++) {
        analysedValues[i]=values[analysedColumnIndex[i]];
      }
      handleRow(analysedValues);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}",0.9577211394302848
137054,"/** 
 * DOC qiongli Comment method ""initializeCsvReader"".
 * @param csvReader
 * @param connection
 */
public static void initializeCsvReader(DelimitedFileConnection delimitedFileconnection,CSVReader csvReader){
  String rowSep=JavaSqlFactory.getRowSeparatorValue(delimitedFileconnection);
  if (rowSep != null && !rowSep.equals(ROW_SEPARATOR_N) && !rowSep.equals(ROW_SEPARATOR_R)) {
    csvReader.setSeparator(ParameterUtil.trimParameter(rowSep).charAt(0));
  }
  csvReader.setSkipEmptyRecords(true);
  String textEnclosure=delimitedFileconnection.getTextEnclosure();
  if (textEnclosure != null && textEnclosure.length() > 0) {
    csvReader.setQuoteChar(ParameterUtil.trimParameter(textEnclosure).charAt(0));
  }
 else {
    csvReader.setQuoteChar(QUOTECHAR_NOTVALID);
  }
  String escapeChar=delimitedFileconnection.getEscapeChar();
  if (escapeChar == null || escapeChar.equals(ESCAPECHAR1) || escapeChar.equals(ESCAPECHAR2)) {
    csvReader.setEscapeChar(ESCAPE_CHAR);
  }
}","/** 
 * DOC qiongli Comment method ""initializeCsvReader"".
 * @param csvReader
 * @param connection
 */
public static void initializeCsvReader(DelimitedFileConnection delimitedFileconnection,CSVReader csvReader){
  String rowSep=JavaSqlFactory.getRowSeparatorValue(delimitedFileconnection);
  if (rowSep != null && !rowSep.equals(ROW_SEPARATOR_N) && !rowSep.equals(ROW_SEPARATOR_R)) {
    csvReader.setSeparator(ParameterUtil.trimParameter(rowSep).charAt(0));
  }
  csvReader.setSkipEmptyRecords(true);
  String textEnclosure=delimitedFileconnection.getTextEnclosure();
  if (textEnclosure != null && textEnclosure.length() > 0) {
    csvReader.setQuoteChar(ParameterUtil.trimParameter(textEnclosure).charAt(0));
  }
  String escapeChar=delimitedFileconnection.getEscapeChar();
  if (escapeChar == null || escapeChar.equals(ESCAPECHAR1) || escapeChar.equals(ESCAPECHAR2)) {
    csvReader.setEscapeChar(ESCAPE_CHAR);
  }
}",0.968421052631579
137055,"private void useCsvReader(CSVReader csvReader,File file,DelimitedFileConnection dfCon,List<ModelElement> analysisElementList) throws Exception {
  FileUtils.initializeCsvReader(dfCon,csvReader);
  long currentRecord=0;
  int limitValue=JavaSqlFactory.getLimitValue(dfCon);
  int headValue=JavaSqlFactory.getHeadValue(dfCon);
  for (int i=0; i < headValue && csvReader.readNext(); i++) {
  }
  while (csvReader.readNext()) {
    currentRecord=csvReader.getCurrentRecord();
    if (!continueRun() || limitValue != -1 && currentRecord > limitValue - 1) {
      break;
    }
    if (dfCon.isFirstLineCaption() && currentRecord == 0) {
      continue;
    }
    String[] rowValues=csvReader.getValues();
    this.orgnizeObjectsToHandel(dfCon.getFilePath(),rowValues,currentRecord + 1,analysisElementList,dfCon.getFieldSeparatorValue());
  }
}","private void useCsvReader(CSVReader csvReader,File file,DelimitedFileConnection dfCon,List<ModelElement> analysisElementList) throws Exception {
  FileUtils.initializeCsvReader(dfCon,csvReader);
  long currentRecord=0;
  int limitValue=JavaSqlFactory.getLimitValue(dfCon);
  int headValue=JavaSqlFactory.getHeadValue(dfCon);
  for (int i=0; i < headValue && csvReader.readNext(); i++) {
  }
  while (csvReader.readNext()) {
    currentRecord++;
    if (!continueRun() || limitValue != -1 && currentRecord > limitValue) {
      break;
    }
    String[] rowValues=csvReader.getValues();
    this.orgnizeObjectsToHandel(dfCon.getFilePath(),rowValues,currentRecord,analysisElementList,dfCon.getFieldSeparatorValue());
  }
}",0.922286448298009
137056,"private void useCsvReader(File file,DelimitedFileConnection dfCon,List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
    }
    String[] rowValues=null;
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord=csvReader.getCurrentRecord();
      if (!continueRun() || limitValue != -1 && currentRecord > limitValue - 1) {
        break;
      }
      if (delimitedFileconnection.isFirstLineCaption() && currentRecord == 0) {
        continue;
      }
      rowValues=csvReader.getValues();
      handleByARow(rowValues,currentRecord + 1,analysisElementList,columnElementList,indicToRowMap);
    }
  }
 catch (  IOException e) {
    log.error(e,e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
}","private void useCsvReader(File file,DelimitedFileConnection dfCon,List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
    }
    String[] rowValues=null;
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord++;
      if (!continueRun() || limitValue != -1 && currentRecord > limitValue) {
        break;
      }
      rowValues=csvReader.getValues();
      handleByARow(rowValues,currentRecord,analysisElementList,columnElementList,indicToRowMap);
    }
  }
 catch (  IOException e) {
    log.error(e,e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
}",0.9407437678790356
137057,"public CsvArray preview(IProcessDescription description,String type,boolean errorOutputAsException) throws CoreException {
  CsvArray csvArray=new CsvArray();
  CSVReader csvReader=null;
  try {
    if (description.getLoopLimit() == null) {
      description.setLoopLimit(-1);
    }
    final String pathStr=TalendQuoteUtils.removeQuotes(description.getFilepath());
    String fileSeparator=TalendQuoteUtils.removeQuotes(description.getFieldSeparator());
    String encoding=TalendQuoteUtils.removeQuotes(description.getEncoding());
    int headValue=description.getHeaderRow();
    if (fileSeparator.contains(""String_Node_Str"")) {
      fileSeparator=String.valueOf('\t');
    }
    IPath filePath=new Path(pathStr);
    File file=filePath.toFile();
    if (!file.exists()) {
      MessageUI.openWarning(Messages.getString(""String_Node_Str""));
      return csvArray;
    }
    csvReader=new CSVReader(new BufferedReader(new InputStreamReader(new java.io.FileInputStream(file),encoding == null ? ""String_Node_Str"" : encoding)),ParameterUtil.trimParameter(fileSeparator).charAt(0));
    initCsvReader(csvReader,description);
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
    }
    String[] rowValues=null;
    long currentRecord=csvReader.getCurrentRecord();
    while (csvReader.readNext() && currentRecord < 50) {
      currentRecord=csvReader.getCurrentRecord();
      rowValues=csvReader.getValues();
      csvArray.add(rowValues);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return csvArray;
}","public CsvArray preview(IProcessDescription description,String type,boolean errorOutputAsException) throws CoreException {
  CsvArray csvArray=new CsvArray();
  CSVReader csvReader=null;
  try {
    if (description.getLoopLimit() == null) {
      description.setLoopLimit(-1);
    }
    final String pathStr=TalendQuoteUtils.removeQuotes(description.getFilepath());
    String fileSeparator=TalendQuoteUtils.removeQuotes(description.getFieldSeparator());
    String encoding=TalendQuoteUtils.removeQuotes(description.getEncoding());
    int headValue=description.getHeaderRow();
    if (fileSeparator.contains(""String_Node_Str"")) {
      fileSeparator=String.valueOf('\t');
    }
    IPath filePath=new Path(pathStr);
    File file=filePath.toFile();
    if (!file.exists()) {
      MessageUI.openWarning(Messages.getString(""String_Node_Str""));
      return csvArray;
    }
    csvReader=new CSVReader(new BufferedReader(new InputStreamReader(new java.io.FileInputStream(file),encoding == null ? ""String_Node_Str"" : encoding)),ParameterUtil.trimParameter(fileSeparator).charAt(0));
    initCsvReader(csvReader,description);
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
    }
    int limitRows=description.getLimitRows();
    int currentRecord=0;
    while (csvReader.readNext() && currentRecord < 50) {
      currentRecord++;
      if (limitRows != -1 && currentRecord > limitRows) {
        break;
      }
      csvArray.add(csvReader.getValues());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return csvArray;
}",0.8994152046783626
137058,"/** 
 * DOC qiongli Comment method ""initCsvReader"".
 * @param csvReader
 * @param description
 */
private void initCsvReader(CSVReader csvReader,IProcessDescription description){
  String rowSep=description.getRowSeparator();
  if (!rowSep.equals(FileUtils.ROW_SEPARATOR_N) && !rowSep.equals(FileUtils.ROW_SEPARATOR_R)) {
    csvReader.setSeparator(ParameterUtil.trimParameter(rowSep).charAt(0));
  }
  csvReader.setSkipEmptyRecords(true);
  String textEnclosure=description.getTextEnclosure();
  if (!textEnclosure.equals(""String_Node_Str"") && textEnclosure.length() > 0) {
    csvReader.setQuoteChar(ParameterUtil.trimParameter(textEnclosure).charAt(0));
  }
 else {
    csvReader.setQuoteChar(FileUtils.QUOTECHAR_NOTVALID);
  }
  String escapeChar=description.getEscapeCharacter();
  if (escapeChar == null || escapeChar.equals(FileUtils.ESCAPECHAR1) || escapeChar.equals(FileUtils.ESCAPECHAR2)) {
    csvReader.setEscapeChar('\\');
  }
 else {
    csvReader.setEscapeChar(FileUtils.TEXT_QUAL);
  }
}","/** 
 * DOC qiongli Comment method ""initCsvReader"".
 * @param csvReader
 * @param description
 */
private void initCsvReader(CSVReader csvReader,IProcessDescription description){
  String rowSep=description.getRowSeparator();
  if (!rowSep.equals(FileUtils.ROW_SEPARATOR_N) && !rowSep.equals(FileUtils.ROW_SEPARATOR_R)) {
    csvReader.setSeparator(ParameterUtil.trimParameter(rowSep).charAt(0));
  }
  csvReader.setSkipEmptyRecords(true);
  String textEnclosure=description.getTextEnclosure();
  if (!textEnclosure.equals(""String_Node_Str"") && textEnclosure.length() > 0) {
    csvReader.setQuoteChar(ParameterUtil.trimParameter(textEnclosure).charAt(0));
  }
  String escapeChar=description.getEscapeCharacter();
  if (escapeChar == null || escapeChar.equals(FileUtils.ESCAPECHAR1) || escapeChar.equals(FileUtils.ESCAPECHAR2)) {
    csvReader.setEscapeChar('\\');
  }
 else {
    csvReader.setEscapeChar(FileUtils.TEXT_QUAL);
  }
}",0.9638429752066116
137059,"/** 
 * DOC yyin Comment method ""createCSVReader"".
 * @param csvFileToIndex
 * @return
 * @throws UnsupportedEncodingException
 * @throws FileNotFoundException
 * @throws IOException
 */
private CSVReader createCSVReader(String csvFileToIndex,char seperator) throws UnsupportedEncodingException, FileNotFoundException, IOException {
  CSVReader csvReader=new CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(csvFileToIndex.toString()),""String_Node_Str"")),seperator);
  csvReader.setQuoteChar('""');
  csvReader.readNext();
  return csvReader;
}","/** 
 * DOC yyin Comment method ""createCSVReader"".
 * @param csvFileToIndex
 * @return
 * @throws UnsupportedEncodingException
 * @throws FileNotFoundException
 * @throws IOException
 */
private CSVReader createCSVReader(String csvFileToIndex,char seperator) throws UnsupportedEncodingException, FileNotFoundException, IOException {
  CSVReader csvReader=new CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(csvFileToIndex.toString()),""String_Node_Str"")),seperator);
  csvReader.setQuoteChar('\""');
  csvReader.readNext();
  return csvReader;
}",0.9991518235793044
137060,"private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    int analysedColumnIndex[]=new int[analysisElementList.size()];
    List<String> columnLabels=new ArrayList<String>();
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
      Collections.addAll(columnLabels,csvReader.getValues());
    }
    for (int j=0; j < analysisElementList.size(); j++) {
      analysedColumnIndex[j]=columnLabels.indexOf(analysisElementList.get(j).getName());
    }
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord=csvReader.getCurrentRecord();
      if (limitValue != -1 && currentRecord > limitValue - 1) {
        break;
      }
      if (delimitedFileconnection.isFirstLineCaption() && currentRecord == 0) {
        continue;
      }
      String[] values=csvReader.getValues();
      String[] analysedValues=new String[analysisElementList.size()];
      for (int i=0; i < analysedColumnIndex.length; i++) {
        analysedValues[i]=values[analysedColumnIndex[i]];
      }
      handleRow(analysedValues);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}","private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    int analysedColumnIndex[]=new int[analysisElementList.size()];
    List<String> columnLabels=new ArrayList<String>();
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
      Collections.addAll(columnLabels,csvReader.getValues());
    }
    for (int j=0; j < analysisElementList.size(); j++) {
      analysedColumnIndex[j]=columnLabels.indexOf(analysisElementList.get(j).getName());
    }
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord++;
      if (limitValue != -1 && currentRecord > limitValue) {
        break;
      }
      String[] values=csvReader.getValues();
      String[] analysedValues=new String[analysisElementList.size()];
      for (int i=0; i < analysedColumnIndex.length; i++) {
        analysedValues[i]=values[analysedColumnIndex[i]];
      }
      handleRow(analysedValues);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e.getMessage(),e);
      }
    }
  }
}",0.9577211394302848
137061,"/** 
 * DOC qiongli Comment method ""initializeCsvReader"".
 * @param csvReader
 * @param connection
 */
public static void initializeCsvReader(DelimitedFileConnection delimitedFileconnection,CSVReader csvReader){
  String rowSep=JavaSqlFactory.getRowSeparatorValue(delimitedFileconnection);
  if (rowSep != null && !rowSep.equals(ROW_SEPARATOR_N) && !rowSep.equals(ROW_SEPARATOR_R)) {
    csvReader.setSeparator(ParameterUtil.trimParameter(rowSep).charAt(0));
  }
  csvReader.setSkipEmptyRecords(true);
  String textEnclosure=delimitedFileconnection.getTextEnclosure();
  if (textEnclosure != null && textEnclosure.length() > 0) {
    csvReader.setQuoteChar(ParameterUtil.trimParameter(textEnclosure).charAt(0));
  }
 else {
    csvReader.setQuoteChar(QUOTECHAR_NOTVALID);
  }
  String escapeChar=delimitedFileconnection.getEscapeChar();
  if (escapeChar == null || escapeChar.equals(ESCAPECHAR1) || escapeChar.equals(ESCAPECHAR2)) {
    csvReader.setEscapeChar(ESCAPE_CHAR);
  }
}","/** 
 * DOC qiongli Comment method ""initializeCsvReader"".
 * @param csvReader
 * @param connection
 */
public static void initializeCsvReader(DelimitedFileConnection delimitedFileconnection,CSVReader csvReader){
  String rowSep=JavaSqlFactory.getRowSeparatorValue(delimitedFileconnection);
  if (rowSep != null && !rowSep.equals(ROW_SEPARATOR_N) && !rowSep.equals(ROW_SEPARATOR_R)) {
    csvReader.setSeparator(ParameterUtil.trimParameter(rowSep).charAt(0));
  }
  csvReader.setSkipEmptyRecords(true);
  String textEnclosure=delimitedFileconnection.getTextEnclosure();
  if (textEnclosure != null && textEnclosure.length() > 0) {
    csvReader.setQuoteChar(ParameterUtil.trimParameter(textEnclosure).charAt(0));
  }
  String escapeChar=delimitedFileconnection.getEscapeChar();
  if (escapeChar == null || escapeChar.equals(ESCAPECHAR1) || escapeChar.equals(ESCAPECHAR2)) {
    csvReader.setEscapeChar(ESCAPE_CHAR);
  }
}",0.968421052631579
137062,"private void useCsvReader(CSVReader csvReader,File file,DelimitedFileConnection dfCon,List<ModelElement> analysisElementList) throws Exception {
  FileUtils.initializeCsvReader(dfCon,csvReader);
  long currentRecord=0;
  int limitValue=JavaSqlFactory.getLimitValue(dfCon);
  int headValue=JavaSqlFactory.getHeadValue(dfCon);
  for (int i=0; i < headValue && csvReader.readNext(); i++) {
  }
  while (csvReader.readNext()) {
    currentRecord=csvReader.getCurrentRecord();
    if (!continueRun() || limitValue != -1 && currentRecord > limitValue - 1) {
      break;
    }
    if (dfCon.isFirstLineCaption() && currentRecord == 0) {
      continue;
    }
    String[] rowValues=csvReader.getValues();
    this.orgnizeObjectsToHandel(dfCon.getFilePath(),rowValues,currentRecord + 1,analysisElementList,dfCon.getFieldSeparatorValue());
  }
}","private void useCsvReader(CSVReader csvReader,File file,DelimitedFileConnection dfCon,List<ModelElement> analysisElementList) throws Exception {
  FileUtils.initializeCsvReader(dfCon,csvReader);
  long currentRecord=0;
  int limitValue=JavaSqlFactory.getLimitValue(dfCon);
  int headValue=JavaSqlFactory.getHeadValue(dfCon);
  for (int i=0; i < headValue && csvReader.readNext(); i++) {
  }
  while (csvReader.readNext()) {
    currentRecord++;
    if (!continueRun() || limitValue != -1 && currentRecord > limitValue) {
      break;
    }
    String[] rowValues=csvReader.getValues();
    this.orgnizeObjectsToHandel(dfCon.getFilePath(),rowValues,currentRecord,analysisElementList,dfCon.getFieldSeparatorValue());
  }
}",0.922286448298009
137063,"private void useCsvReader(File file,DelimitedFileConnection dfCon,List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
    }
    String[] rowValues=null;
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord=csvReader.getCurrentRecord();
      if (!continueRun() || limitValue != -1 && currentRecord > limitValue - 1) {
        break;
      }
      if (delimitedFileconnection.isFirstLineCaption() && currentRecord == 0) {
        continue;
      }
      rowValues=csvReader.getValues();
      handleByARow(rowValues,currentRecord + 1,analysisElementList,columnElementList,indicToRowMap);
    }
  }
 catch (  IOException e) {
    log.error(e,e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
}","private void useCsvReader(File file,DelimitedFileConnection dfCon,List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CSVReader csvReader=null;
  try {
    csvReader=FileUtils.createCsvReader(file,delimitedFileconnection);
    FileUtils.initializeCsvReader(delimitedFileconnection,csvReader);
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
    }
    String[] rowValues=null;
    long currentRecord=0;
    while (csvReader.readNext()) {
      currentRecord++;
      if (!continueRun() || limitValue != -1 && currentRecord > limitValue) {
        break;
      }
      rowValues=csvReader.getValues();
      handleByARow(rowValues,currentRecord,analysisElementList,columnElementList,indicToRowMap);
    }
  }
 catch (  IOException e) {
    log.error(e,e);
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        log.error(e,e);
      }
    }
  }
}",0.9407437678790356
137064,"public CsvArray preview(IProcessDescription description,String type,boolean errorOutputAsException) throws CoreException {
  CsvArray csvArray=new CsvArray();
  CSVReader csvReader=null;
  try {
    if (description.getLoopLimit() == null) {
      description.setLoopLimit(-1);
    }
    final String pathStr=TalendQuoteUtils.removeQuotes(description.getFilepath());
    String fileSeparator=TalendQuoteUtils.removeQuotes(description.getFieldSeparator());
    String encoding=TalendQuoteUtils.removeQuotes(description.getEncoding());
    int headValue=description.getHeaderRow();
    if (fileSeparator.contains(""String_Node_Str"")) {
      fileSeparator=String.valueOf('\t');
    }
    IPath filePath=new Path(pathStr);
    File file=filePath.toFile();
    if (!file.exists()) {
      MessageUI.openWarning(Messages.getString(""String_Node_Str""));
      return csvArray;
    }
    csvReader=new CSVReader(new BufferedReader(new InputStreamReader(new java.io.FileInputStream(file),encoding == null ? ""String_Node_Str"" : encoding)),ParameterUtil.trimParameter(fileSeparator).charAt(0));
    initCsvReader(csvReader,description);
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
    }
    String[] rowValues=null;
    long currentRecord=csvReader.getCurrentRecord();
    while (csvReader.readNext() && currentRecord < 50) {
      currentRecord=csvReader.getCurrentRecord();
      rowValues=csvReader.getValues();
      csvArray.add(rowValues);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return csvArray;
}","public CsvArray preview(IProcessDescription description,String type,boolean errorOutputAsException) throws CoreException {
  CsvArray csvArray=new CsvArray();
  CSVReader csvReader=null;
  try {
    if (description.getLoopLimit() == null) {
      description.setLoopLimit(-1);
    }
    final String pathStr=TalendQuoteUtils.removeQuotes(description.getFilepath());
    String fileSeparator=TalendQuoteUtils.removeQuotes(description.getFieldSeparator());
    String encoding=TalendQuoteUtils.removeQuotes(description.getEncoding());
    int headValue=description.getHeaderRow();
    if (fileSeparator.contains(""String_Node_Str"")) {
      fileSeparator=String.valueOf('\t');
    }
    IPath filePath=new Path(pathStr);
    File file=filePath.toFile();
    if (!file.exists()) {
      MessageUI.openWarning(Messages.getString(""String_Node_Str""));
      return csvArray;
    }
    csvReader=new CSVReader(new BufferedReader(new InputStreamReader(new java.io.FileInputStream(file),encoding == null ? ""String_Node_Str"" : encoding)),ParameterUtil.trimParameter(fileSeparator).charAt(0));
    initCsvReader(csvReader,description);
    for (int i=0; i < headValue && csvReader.readNext(); i++) {
    }
    int limitRows=description.getLimitRows();
    int currentRecord=0;
    while (csvReader.readNext() && currentRecord < 50) {
      currentRecord++;
      if (limitRows != -1 && currentRecord > limitRows) {
        break;
      }
      csvArray.add(csvReader.getValues());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (csvReader != null) {
      try {
        csvReader.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return csvArray;
}",0.8994152046783626
137065,"/** 
 * DOC qiongli Comment method ""initCsvReader"".
 * @param csvReader
 * @param description
 */
private void initCsvReader(CSVReader csvReader,IProcessDescription description){
  String rowSep=description.getRowSeparator();
  if (!rowSep.equals(FileUtils.ROW_SEPARATOR_N) && !rowSep.equals(FileUtils.ROW_SEPARATOR_R)) {
    csvReader.setSeparator(ParameterUtil.trimParameter(rowSep).charAt(0));
  }
  csvReader.setSkipEmptyRecords(true);
  String textEnclosure=description.getTextEnclosure();
  if (!textEnclosure.equals(""String_Node_Str"") && textEnclosure.length() > 0) {
    csvReader.setQuoteChar(ParameterUtil.trimParameter(textEnclosure).charAt(0));
  }
 else {
    csvReader.setQuoteChar(FileUtils.QUOTECHAR_NOTVALID);
  }
  String escapeChar=description.getEscapeCharacter();
  if (escapeChar == null || escapeChar.equals(FileUtils.ESCAPECHAR1) || escapeChar.equals(FileUtils.ESCAPECHAR2)) {
    csvReader.setEscapeChar('\\');
  }
 else {
    csvReader.setEscapeChar(FileUtils.TEXT_QUAL);
  }
}","/** 
 * DOC qiongli Comment method ""initCsvReader"".
 * @param csvReader
 * @param description
 */
private void initCsvReader(CSVReader csvReader,IProcessDescription description){
  String rowSep=description.getRowSeparator();
  if (!rowSep.equals(FileUtils.ROW_SEPARATOR_N) && !rowSep.equals(FileUtils.ROW_SEPARATOR_R)) {
    csvReader.setSeparator(ParameterUtil.trimParameter(rowSep).charAt(0));
  }
  csvReader.setSkipEmptyRecords(true);
  String textEnclosure=description.getTextEnclosure();
  if (!textEnclosure.equals(""String_Node_Str"") && textEnclosure.length() > 0) {
    csvReader.setQuoteChar(ParameterUtil.trimParameter(textEnclosure).charAt(0));
  }
  String escapeChar=description.getEscapeCharacter();
  if (escapeChar == null || escapeChar.equals(FileUtils.ESCAPECHAR1) || escapeChar.equals(FileUtils.ESCAPECHAR2)) {
    csvReader.setEscapeChar('\\');
  }
 else {
    csvReader.setEscapeChar(FileUtils.TEXT_QUAL);
  }
}",0.9638429752066116
137066,"/** 
 * DOC yyin Comment method ""createCSVReader"".
 * @param csvFileToIndex
 * @return
 * @throws UnsupportedEncodingException
 * @throws FileNotFoundException
 * @throws IOException
 */
private CSVReader createCSVReader(String csvFileToIndex,char seperator) throws UnsupportedEncodingException, FileNotFoundException, IOException {
  CSVReader csvReader=new CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(csvFileToIndex.toString()),""String_Node_Str"")),seperator);
  csvReader.setQuoteChar('""');
  csvReader.readNext();
  return csvReader;
}","/** 
 * DOC yyin Comment method ""createCSVReader"".
 * @param csvFileToIndex
 * @return
 * @throws UnsupportedEncodingException
 * @throws FileNotFoundException
 * @throws IOException
 */
private CSVReader createCSVReader(String csvFileToIndex,char seperator) throws UnsupportedEncodingException, FileNotFoundException, IOException {
  CSVReader csvReader=new CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(csvFileToIndex.toString()),""String_Node_Str"")),seperator);
  csvReader.setQuoteChar('\""');
  csvReader.readNext();
  return csvReader;
}",0.9991518235793044
137067,"/** 
 * Test method for  {@link org.talend.dataquality.record.linkage.ui.composite.utils.MatchRuleAnlaysisUtils#sortDataByColumn(org.talend.dataquality.record.linkage.ui.composite.table.SortState,java.util.List,java.util.List)}.
 */
public void testSortDataByColumn_StringAsDouble(){
  sortState.getNextSortDirection();
  sortState.setGrpSizeIndex(0);
  String[] array={""String_Node_Str""};
  String[] array2={""String_Node_Str""};
  String[] array4={""String_Node_Str""};
  String[] array3={""String_Node_Str""};
  sortData.add(array);
  sortData.add(array2);
  sortData.add(array4);
  sortData.add(array3);
  sqlDataType.setName(""String_Node_Str"");
  sqlDataType.setJavaDataType(Types.REAL);
  List<Object[]> sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(4,sortResult.size());
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array4[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array3[0]),0);
  sortState.setSelectedColumnIndex(0);
  sortState.getNextSortDirection();
  sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array2[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array3[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array4[0]),0);
}","/** 
 * Test method for  {@link org.talend.dataquality.record.linkage.ui.composite.utils.MatchRuleAnlaysisUtils#sortDataByColumn(org.talend.dataquality.record.linkage.ui.composite.table.SortState,java.util.List,java.util.List)}.
 */
public void testSortDataByColumn_StringAsDouble(){
  sortState.getNextSortDirection();
  String[] array={""String_Node_Str""};
  String[] array2={""String_Node_Str""};
  String[] array4={""String_Node_Str""};
  String[] array3={""String_Node_Str""};
  sortData.add(array);
  sortData.add(array2);
  sortData.add(array4);
  sortData.add(array3);
  sqlDataType.setName(""String_Node_Str"");
  sqlDataType.setJavaDataType(Types.REAL);
  List<Object[]> sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(4,sortResult.size());
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array4[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array3[0]),0);
  sortState.setSelectedColumnIndex(0);
  sortState.getNextSortDirection();
  sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array2[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array3[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array4[0]),0);
}",0.988865692414753
137068,"/** 
 * DOC yyin Comment method ""setUp"".
 * @throws java.lang.Exception
 */
protected void setUp() throws Exception {
  sortState=new SortState();
  sortState.setSelectedColumnIndex(0);
  sortState.setSelectedColumnName(""String_Node_Str"");
  sortData=new ArrayList<Object[]>();
  columns=new ArrayList<ModelElement>();
  tdColumn.setSqlDataType(sqlDataType);
  columns.add(tdColumn);
}","/** 
 * DOC yyin Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Override protected void setUp() throws Exception {
  sortState=new SortState(0);
  sortState.setSelectedColumnIndex(0);
  sortState.setSelectedColumnName(""String_Node_Str"");
  sortData=new ArrayList<Object[]>();
  columns=new ArrayList<ModelElement>();
  tdColumn.setSqlDataType(sqlDataType);
  columns.add(tdColumn);
}",0.9859154929577464
137069,"/** 
 * Test method for  {@link org.talend.dataquality.record.linkage.ui.composite.utils.MatchRuleAnlaysisUtils#sortDataByColumn(org.talend.dataquality.record.linkage.ui.composite.table.SortState,java.util.List,java.util.List)}.
 */
public void testSortDataByColumn_GroupSize(){
  sortState.getNextSortDirection();
  sortState.setGrpSizeIndex(0);
  String[] array={""String_Node_Str""};
  String[] array2={""String_Node_Str""};
  String[] array4={""String_Node_Str""};
  String[] array3={""String_Node_Str""};
  sortData.add(array);
  sortData.add(array2);
  sortData.add(array4);
  sortData.add(array3);
  sqlDataType.setName(""String_Node_Str"");
  sqlDataType.setJavaDataType(Types.VARCHAR);
  List<Object[]> sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(4,sortResult.size());
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array4[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array3[0]),0);
  sortState.setSelectedColumnIndex(0);
  sortState.getNextSortDirection();
  sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array2[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array3[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array4[0]),0);
}","/** 
 * Test method for  {@link org.talend.dataquality.record.linkage.ui.composite.utils.MatchRuleAnlaysisUtils#sortDataByColumn(org.talend.dataquality.record.linkage.ui.composite.table.SortState,java.util.List,java.util.List)}.
 */
public void testSortDataByColumn_GroupSize(){
  sortState.getNextSortDirection();
  String[] array={""String_Node_Str""};
  String[] array2={""String_Node_Str""};
  String[] array4={""String_Node_Str""};
  String[] array3={""String_Node_Str""};
  sortData.add(array);
  sortData.add(array2);
  sortData.add(array4);
  sortData.add(array3);
  sqlDataType.setName(""String_Node_Str"");
  sqlDataType.setJavaDataType(Types.VARCHAR);
  List<Object[]> sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(4,sortResult.size());
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array4[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array3[0]),0);
  sortState.setSelectedColumnIndex(0);
  sortState.getNextSortDirection();
  sortResult=MatchRuleAnlaysisUtils.sortDataByColumn(sortState,sortData,columns);
  Assert.assertEquals(((String)sortResult.get(0)[0]).compareTo(array2[0]),0);
  Assert.assertEquals(((String)sortResult.get(1)[0]).compareTo(array3[0]),0);
  Assert.assertEquals(((String)sortResult.get(2)[0]).compareTo(array4[0]),0);
}",0.9888501742160278
137070,"/** 
 * DOC yyin Comment method ""tearDown"".
 * @throws java.lang.Exception
 */
protected void tearDown() throws Exception {
  sortData=null;
  columns=null;
}","/** 
 * DOC yyin Comment method ""tearDown"".
 * @throws java.lang.Exception
 */
@Override protected void tearDown() throws Exception {
  sortData=null;
  columns=null;
}",0.9693251533742332
137071,"public static <K,V>PageResult<Object[]> createPageByValue(DBValueMap<K,V> db,PageableController controller,SortProcessor processor,Map<Long,K> indexMap,long itemsSize,ColumnFilter filter){
  long totalSize=itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  List<Object[]> content=((DBMap<K,V>)db).subValueList(fromIndex,toIndex,indexMap);
  if (filter != null) {
    content=filter.filterArray(content);
  }
  return new PageResult<Object[]>(content,content.size());
}","public static <K,V>PageResult<Object[]> createPageByValue(DBValueMap<K,V> db,PageableController controller,Map<Long,K> indexMap,long itemsSize,ColumnFilter filter){
  long totalSize=itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  List<Object[]> content=((DBMap<K,V>)db).subValueList(fromIndex,toIndex,indexMap);
  if (filter != null) {
    content=filter.filterArray(content);
  }
  return new PageResult<Object[]>(content,content.size());
}",0.9808306709265175
137072,"public static <T>PageResult<Object[]> createPage(AbstractDB<T> db,PageableController controller,SortProcessor processor,Map<Long,T> indexMap,long itemsSize,DataValidation dataValidator){
  long totalSize=itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  List<Object[]> content=db.subList(fromIndex,toIndex,indexMap,dataValidator);
  if (content.size() < pageSize) {
    totalSize=content.size();
  }
  return new PageResult<Object[]>(content,totalSize);
}","public static <T>PageResult<Object[]> createPage(AbstractDB<T> db,PageableController controller,Map<Long,T> indexMap,long itemsSize,ColumnFilter filter){
  long totalSize=itemsSize;
  long pageSize=controller.getPageSize();
  long pageIndex=controller.getPageOffset();
  long fromIndex=pageIndex;
  long toIndex=pageIndex + pageSize;
  if (toIndex > totalSize) {
    toIndex=totalSize;
  }
  List<Object[]> content=db.subList(fromIndex,toIndex,indexMap);
  if (filter != null) {
    content=filter.filterArray(content);
  }
  if (content.size() < totalSize) {
    totalSize=content.size();
  }
  return new PageResult<Object[]>(content,totalSize);
}",0.8486274509803922
137073,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public PageResult<Object[]> loadPage(PageableController controller){
  if (dataValidator == null) {
    if (DBValueMap.class.isInstance(db)) {
      return MapDBPageListHelper.createPageByValue((DBValueMap)db,controller,indexMap,itemsSize,columnFilter);
    }
    return MapDBPageListHelper.createPage(db,controller,indexMap,itemsSize,columnFilter);
  }
 else {
    return MapDBPageListHelper.createPage(db,controller,indexMap,itemsSize,dataValidator);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public PageResult<Object[]> loadPage(PageableController controller){
  if (dataValidator == null) {
    if (DBValueMap.class.isInstance(db)) {
      return MapDBPageListHelper.createPageByValue((DBValueMap)db,controller,indexMap,itemsSize,columnFilter);
    }
 else {
      return MapDBPageListHelper.createPage(db,controller,indexMap,itemsSize,columnFilter);
    }
  }
 else {
    return MapDBPageListHelper.createPage(db,controller,indexMap,itemsSize,dataValidator);
  }
}",0.9849906191369606
137074,"public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (flag) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
        return;
      }
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                e1.printStackTrace();
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}","public void chartMouseClicked(ChartMouseEvent event){
  boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
  chartComp.setDomainZoomable(flag);
  chartComp.setRangeZoomable(flag);
  if (flag) {
    return;
  }
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
    return;
  }
  if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
    return;
  }
  ChartEntity chartEntity=event.getEntity();
  if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
    CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
    ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
    final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
    if (currentDataEntity != null) {
      final Indicator currentIndicator=currentDataEntity.getIndicator();
      if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
        return;
      }
      if (ExecutionLanguage.JAVA == currentEngine && analysis.getParameters().isStoreData()) {
        if (currentIndicator.isUsedMapDBMode()) {
          if (dataEntity == null || currentIndicator == null || DrillDownUtils.getMapDB(currentDataEntity,analysis).size() == 0) {
            return;
          }
        }
      }
      Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
      chartComp.setMenu(menu);
      int createPatternFlag=0;
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            if (ExecutionLanguage.JAVA == currentEngine) {
              try {
                DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                  CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                }
 else {
                  MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                }
              }
 catch (              PartInitException e1) {
                log.error(e1,e1);
              }
            }
 else {
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                  String query=itemEntity.getQuery();
                  String editorName=currentIndicator.getName();
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
            }
          }
        }
);
        if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              Display.getDefault().asyncExec(new Runnable(){
                public void run(){
                  ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
);
        }
        createPatternFlag++;
      }
      ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
      menu.setVisible(true);
    }
  }
}",0.7916063675832128
137075,"private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (flag) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
            return;
          }
          if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
            return;
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
            return;
          }
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    e1.printStackTrace();
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}","private void addMouseListenerForChart(final ChartComposite chartComp,final IDataExplorer explorer,final Analysis analysis){
  chartComp.addChartMouseListener(new ChartMouseListener(){
    public void chartMouseClicked(    ChartMouseEvent event){
      boolean flag=event.getTrigger().getButton() != MouseEvent.BUTTON3;
      chartComp.setDomainZoomable(flag);
      chartComp.setRangeZoomable(flag);
      if (flag) {
        return;
      }
      final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
      if (ExecutionLanguage.JAVA == currentEngine && 0 == analysis.getResults().getIndicToRowMap().size()) {
        return;
      }
      if (ExecutionLanguage.JAVA == currentEngine && !analysis.getParameters().isStoreData()) {
        return;
      }
      ChartEntity chartEntity=event.getEntity();
      if (chartEntity != null && chartEntity instanceof CategoryItemEntity) {
        CategoryItemEntity cateEntity=(CategoryItemEntity)chartEntity;
        ICustomerDataset dataEntity=(ICustomerDataset)cateEntity.getDataset();
        final ChartDataEntity currentDataEntity=getCurrentChartDateEntity(cateEntity,dataEntity);
        if (currentDataEntity != null) {
          final Indicator currentIndicator=currentDataEntity.getIndicator();
          if (currentIndicator instanceof DatePatternFreqIndicator && null == analysis.getResults().getIndicToRowMap().get(currentIndicator).getFrequencyData()) {
            return;
          }
          if (ExecutionLanguage.JAVA == currentEngine && analysis.getParameters().isStoreData()) {
            if (currentIndicator.isUsedMapDBMode()) {
              if (dataEntity == null || currentIndicator == null || DrillDownUtils.getMapDB(currentDataEntity,analysis).size() == 0) {
                return;
              }
            }
          }
          Menu menu=new Menu(chartComp.getShell(),SWT.POP_UP);
          chartComp.setMenu(menu);
          int createPatternFlag=0;
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,currentDataEntity);
          for (          final MenuItemEntity itemEntity : itemEntities) {
            MenuItem item=new MenuItem(menu,SWT.PUSH);
            item.setText(itemEntity.getLabel());
            item.setImage(itemEntity.getIcon());
            item.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                if (ExecutionLanguage.JAVA == currentEngine) {
                  try {
                    DrillDownEditorInput input=new DrillDownEditorInput(analysis,currentDataEntity,itemEntity);
                    if (input.computeColumnValueLength(input.filterAdaptDataList())) {
                      CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage().openEditor(input,""String_Node_Str"");
                    }
 else {
                      MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    }
                  }
 catch (                  PartInitException e1) {
                    log.error(e1,e1);
                  }
                }
 else {
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      Connection tdDataProvider=SwitchHelpers.CONNECTION_SWITCH.doSwitch(analysis.getContext().getConnection());
                      String query=itemEntity.getQuery();
                      String editorName=currentIndicator.getName();
                      SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                    }
                  }
);
                }
              }
            }
);
            if ((currentIndicator instanceof PatternFreqIndicator || currentIndicator instanceof PatternLowFreqIndicator) && createPatternFlag == 0) {
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              final PatternTransformer pattTransformer=new PatternTransformer(DbmsLanguageFactory.createDbmsLanguage(analysis));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  Display.getDefault().asyncExec(new Runnable(){
                    public void run(){
                      ChartTableFactory.createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
);
            }
            createPatternFlag++;
          }
          ChartTableFactory.addJobGenerationMenu(menu,analysis,currentIndicator);
          menu.setVisible(true);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getCurrentChartDateEntity"". bug 15745.
 * @param cateEntity
 * @param dataEntity
 * @return
 */
    private ChartDataEntity getCurrentChartDateEntity(    CategoryItemEntity cateEntity,    ICustomerDataset dataEntity){
      ChartDataEntity currentDataEntity=null;
      ChartDataEntity[] dataEntities=dataEntity.getDataEntities();
      if (dataEntities.length == 1) {
        currentDataEntity=dataEntities[0];
      }
 else {
        for (        ChartDataEntity entity : dataEntities) {
          if (cateEntity.getColumnKey().compareTo(entity.getLabel()) == 0) {
            currentDataEntity=entity;
          }
 else {
            if (cateEntity.getRowKey().compareTo(entity.getLabel()) == 0) {
              currentDataEntity=entity;
            }
          }
        }
      }
      return currentDataEntity;
    }
    public void chartMouseMoved(    ChartMouseEvent event){
    }
  }
);
  chartComp.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      chartComp.dispose();
    }
  }
);
}",0.8384855852726641
137076,"/** 
 * DataSet is used to be the input on the export wizard. unchecked is for the type of mapDB else will have a warning
 * @param controller
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Object getDataSetForMapDB(int pageSize){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  AbstractDB<?> mapDB=getMapDB();
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  if (AnalysisType.COLUMN_SET == analysisType) {
    Long size=getCurrentIndicatorResultSize();
    if (ColumnSetDBMap.class.isInstance(mapDB)) {
      return SqlExplorerUtils.getDefault().createMapDBColumnSetDataSet(columnHeader,(ColumnSetDBMap)mapDB,size,currIndicator,pageSize);
    }
  }
  if (DBSet.class.isInstance(mapDB)) {
    return SqlExplorerUtils.getDefault().createMapDBSetDataSet(columnHeader,(DBSet<Object>)mapDB,pageSize);
  }
 else {
    ColumnFilter columnFilter=getColumnFilter();
    Long itemSize=getItemSize(mapDB);
    return SqlExplorerUtils.getDefault().createMapDBDataSet(columnHeader,(DBMap<Object,List<Object>>)mapDB,pageSize,columnFilter,itemSize);
  }
}","/** 
 * DataSet is used to be the input on the export wizard. unchecked is for the type of mapDB else will have a warning
 * @param controller
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Object getDataSetForMapDB(int pageSize){
  List<String> columnElementList=filterAdaptColumnHeader();
  columnHeader=new String[columnElementList.size()];
  int headerIndex=0;
  for (  String columnElement : columnElementList) {
    columnHeader[headerIndex++]=columnElement;
  }
  AbstractDB<?> mapDB=DrillDownUtils.getMapDB(dataEntity,analysis);
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  if (AnalysisType.COLUMN_SET == analysisType) {
    Long size=getCurrentIndicatorResultSize();
    if (ColumnSetDBMap.class.isInstance(mapDB)) {
      return SqlExplorerUtils.getDefault().createMapDBColumnSetDataSet(columnHeader,(ColumnSetDBMap)mapDB,size,currIndicator,pageSize);
    }
  }
  if (DBSet.class.isInstance(mapDB)) {
    return SqlExplorerUtils.getDefault().createMapDBSetDataSet(columnHeader,(DBSet<Object>)mapDB,pageSize);
  }
 else {
    ColumnFilter columnFilter=getColumnFilter();
    Long itemSize=getItemSize(mapDB);
    return SqlExplorerUtils.getDefault().createMapDBDataSet(columnHeader,(DBMap<Object,List<Object>>)mapDB,pageSize,columnFilter,itemSize);
  }
}",0.9867909867909868
137077,"/** 
 * Test method for   {@link DQStructureComparer#getRefreshedDataProvider(Connection)}
 */
@Test public void testGetRefreshedDataProviderContextMode() throws Exception {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBCMysqlConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  List<String> catalogNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,true);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    catalogNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
  }
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockCatalogResults.getString(MetaDataConstants.TABLE_CAT.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockSchemaResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getDatabaseProductName()).thenReturn(EDatabaseTypeName.MYSQL.getProduct());
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  ExtractMetaDataUtils extract=SingletonUtil.spySingleton(ExtractMetaDataUtils.class);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenReturn(mockDatabaseMetaData);
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  PowerMockito.mockStatic(MetadataFillFactory.class);
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance(EDatabaseTypeName.MYSQL)).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(schemaPackageFilter);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  TypedReturnCode<Connection> refreshedDataProvider=DQStructureComparer.getRefreshedDataProvider(dbProvider);
  Assert.assertEquals(true,refreshedDataProvider.isOk());
  Assert.assertNotNull(refreshedDataProvider.getObject());
}","/** 
 * Test method for   {@link DQStructureComparer#getRefreshedDataProvider(Connection)}
 */
@Test public void testGetRefreshedDataProviderContextMode() throws Exception {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBCMysqlConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  List<String> catalogNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,true);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    catalogNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
  }
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockCatalogResults.getString(MetaDataConstants.TABLE_CAT.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockSchemaResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getDatabaseProductName()).thenReturn(EDatabaseTypeName.MYSQL.getProduct());
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  ExtractMetaDataUtils extract=SingletonUtil.spySingleton(ExtractMetaDataUtils.class);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenReturn(mockDatabaseMetaData);
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  PowerMockito.mockStatic(MetadataFillFactory.class);
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance(EDatabaseTypeName.MYSQL)).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(schemaPackageFilter);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  TypedReturnCode<Connection> refreshedDataProvider=DQStructureComparer.getRefreshedDataProvider(dbProvider);
  Assert.assertEquals(true,refreshedDataProvider.isOk());
  Assert.assertNotNull(refreshedDataProvider.getObject());
}",0.9955127503556966
137078,"@Test public void testGetRefreshedDataProviderForDB2() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2Connection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  Mockito.when(mockSqlConn.getMetaData()).thenReturn(mockDatabaseMetaData);
  returnCode.setObject(mockSqlConn);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance(EDatabaseTypeName.MYSQL)).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  TypedReturnCode<Connection> refreshedDataProvider=DQStructureComparer.getRefreshedDataProvider(dbProvider);
  Assert.assertEquals(true,refreshedDataProvider.isOk());
  Assert.assertNotNull(refreshedDataProvider.getObject());
}","@Test public void testGetRefreshedDataProviderForDB2() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2Connection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  Mockito.when(mockSqlConn.getMetaData()).thenReturn(mockDatabaseMetaData);
  returnCode.setObject(mockSqlConn);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance(EDatabaseTypeName.IBMDB2)).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  TypedReturnCode<Connection> refreshedDataProvider=DQStructureComparer.getRefreshedDataProvider(dbProvider);
  Assert.assertEquals(true,refreshedDataProvider.isOk());
  Assert.assertNotNull(refreshedDataProvider.getObject());
}",0.9989184937567596
137079,"@Test public void testGetRefreshedDataProviderForDB2ZOS() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2ForZOSConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DB2ForZosDataBaseMetadata.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2ZOS.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance(EDatabaseTypeName.MYSQL)).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  TypedReturnCode<Connection> refreshedDataProvider=DQStructureComparer.getRefreshedDataProvider(dbProvider);
  Assert.assertEquals(true,refreshedDataProvider.isOk());
  Assert.assertNotNull(refreshedDataProvider.getObject());
}","@Test public void testGetRefreshedDataProviderForDB2ZOS() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2ForZOSConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DB2ForZosDataBaseMetadata.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2ZOS.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance(EDatabaseTypeName.IBMDB2ZOS)).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  TypedReturnCode<Connection> refreshedDataProvider=DQStructureComparer.getRefreshedDataProvider(dbProvider);
  Assert.assertEquals(true,refreshedDataProvider.isOk());
  Assert.assertNotNull(refreshedDataProvider.getObject());
}",0.9986089030206676
137080,"/** 
 * Test method for  {@link org.talend.dataquality.matching.date.pattern.DatePatternRetriever#handle(java.lang.String)}.
 * @throws URISyntaxException
 * @throws IOException
 */
@Test public void testHandle() throws IOException, URISyntaxException {
  String expr=""String_Node_Str"";
  DatePatternRetriever dtr=new DatePatternRetriever();
  dtr.handle(expr);
  assertEquals(dtr.getModelMatchers().size(),0);
  ModelMatcher mm=new ModelMatcher(""String_Node_Str"",""String_Node_Str"");
  assertEquals(0,mm.getScore());
  dtr.getModelMatchers().add(mm);
  assertEquals(dtr.getModelMatchers().size(),1);
  dtr.handle(expr);
  assertEquals(1,mm.getScore());
  DatePatternRetriever patt=new DatePatternRetriever();
  File file=ResourceUtil.getFileFromResource(getClass(),""String_Node_Str"");
  File filedates=ResourceUtil.getFileFromResource(getClass(),""String_Node_Str"");
  patt.initModel2Regex(file);
  parseFile(filedates,patt);
  final int[] EXPECTED_SCORE={1,4,3,1,2,1,1,40,1};
  for (int i=0, j=0; i < patt.getModelMatchers().size(); i++) {
    ModelMatcher patternMatcher=patt.getModelMatchers().get(i);
    if (patternMatcher.getScore() > 0) {
      assertEquals(EXPECTED_SCORE[j],patternMatcher.getScore());
      j++;
    }
  }
  if (logger.isInfoEnabled()) {
    patt.showResults();
  }
}","/** 
 * Test method for  {@link org.talend.dataquality.matching.date.pattern.DatePatternRetriever#handle(java.lang.String)}.
 * @throws URISyntaxException
 * @throws IOException
 */
@Test public void testHandle() throws IOException, URISyntaxException {
  String expr=""String_Node_Str"";
  DatePatternRetriever dtr=new DatePatternRetriever();
  dtr.handle(expr);
  assertEquals(dtr.getModelMatchers().size(),0);
  ModelMatcher mm=new ModelMatcher(""String_Node_Str"",""String_Node_Str"");
  assertEquals(0,mm.getScore());
  dtr.getModelMatchers().add(mm);
  assertEquals(dtr.getModelMatchers().size(),1);
  dtr.handle(expr);
  assertEquals(1,mm.getScore());
  DatePatternRetriever patt=new DatePatternRetriever();
  File file=ResourceUtil.getFileFromResource(getClass(),""String_Node_Str"");
  File filedates=ResourceUtil.getFileFromResource(getClass(),""String_Node_Str"");
  patt.initModel2Regex(file);
  parseFile(filedates,patt);
  final int[] EXPECTED_SCORE={1,4,1,2,1,1,40,1};
  for (int i=0, j=0; i < patt.getModelMatchers().size(); i++) {
    ModelMatcher patternMatcher=patt.getModelMatchers().get(i);
    if (patternMatcher.getScore() > 0) {
      assertEquals(EXPECTED_SCORE[j],patternMatcher.getScore());
      j++;
    }
  }
  if (logger.isInfoEnabled()) {
    patt.showResults();
  }
}",0.9992254066615028
137081,"@Override protected void initHeaders(){
  headers.add(MatchAnalysisConstant.BLOCKING_KEY_NAME);
  headers.add(MatchAnalysisConstant.PRECOLUMN);
  headers.add(MatchAnalysisConstant.PRE_ALGO);
  headers.add(MatchAnalysisConstant.PRE_VALUE);
  headers.add(MatchAnalysisConstant.KEY_ALGO);
  headers.add(MatchAnalysisConstant.KEY_VALUE);
  headers.add(MatchAnalysisConstant.POST_ALGO);
  headers.add(MatchAnalysisConstant.POST_VALUE);
}","@Override protected void initHeaders(){
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.BLOCKING_KEY_NAME));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.PRECOLUMN));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.PRE_ALGO));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.PRE_VALUE));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.KEY_ALGO));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.KEY_VALUE));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.POST_ALGO));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.POST_VALUE));
}",0.5881294964028777
137082,"@Override protected void initHeaders(){
  headers.add(MatchAnalysisConstant.DATA_TYPE);
  headers.add(MatchAnalysisConstant.FUNCTION);
  headers.add(MatchAnalysisConstant.PARAMETER);
}","@Override protected void initHeaders(){
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.DATA_TYPE));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.FUNCTION));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.PARAMETER));
}",0.7982646420824295
137083,"@Override protected void initHeaders(){
  headers.add(MatchAnalysisConstant.MATCH_KEY_NAME);
  if (isShowInputColumn) {
    headers.add(MatchAnalysisConstant.INPUT_COLUMN);
  }
  headers.add(MatchAnalysisConstant.MATCHING_TYPE);
  headers.add(MatchAnalysisConstant.CUSTOM_MATCHER);
  headers.add(MatchAnalysisConstant.THRESHOLD);
  headers.add(MatchAnalysisConstant.CONFIDENCE_WEIGHT);
  headers.add(MatchAnalysisConstant.HANDLE_NULL);
  headers.add(MatchAnalysisConstant.FUNCTION);
  headers.add(MatchAnalysisConstant.PARAMETER);
}","@Override protected void initHeaders(){
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.MATCH_KEY_NAME));
  if (isShowInputColumn) {
    headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.INPUT_COLUMN));
  }
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.MATCHING_TYPE));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.CUSTOM_MATCHER));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.THRESHOLD));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.CONFIDENCE_WEIGHT));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.HANDLE_NULL));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.FUNCTION));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.PARAMETER));
}",0.7922561429635145
137084,"/** 
 * DOC zshen Comment method ""initHeaders"".
 */
@Override protected void initHeaders(){
  headers.add(MatchAnalysisConstant.MATCH_KEY_NAME);
  headers.add(MatchAnalysisConstant.INPUT_COLUMN);
  headers.add(MatchAnalysisConstant.MATCHING_TYPE);
  headers.add(MatchAnalysisConstant.CUSTOM_MATCHER);
  headers.add(MatchAnalysisConstant.CONFIDENCE_WEIGHT);
  headers.add(MatchAnalysisConstant.HANDLE_NULL);
}","/** 
 * DOC zshen Comment method ""initHeaders"".
 */
@Override protected void initHeaders(){
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.MATCH_KEY_NAME));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.INPUT_COLUMN));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.MATCHING_TYPE));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.CUSTOM_MATCHER));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.CONFIDENCE_WEIGHT));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.HANDLE_NULL));
}",0.8143712574850299
137085,"@Override protected void initHeaders(){
  headers.add(MatchAnalysisConstant.SURVIVORSHIP_KEY_NAME);
  headers.add(MatchAnalysisConstant.COLUMN);
  headers.add(MatchAnalysisConstant.FUNCTION);
  headers.add(MatchAnalysisConstant.ALLOW_MANUAL_RESOLUTION);
}","@Override protected void initHeaders(){
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.SURVIVORSHIP_KEY_NAME));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.COLUMN));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.FUNCTION));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.ALLOW_MANUAL_RESOLUTION));
}",0.804416403785489
137086,"@Override protected void initHeaders(){
  headers.add(MatchAnalysisConstant.BLOCKING_KEY_NAME);
  headers.add(MatchAnalysisConstant.PRE_ALGO);
  headers.add(MatchAnalysisConstant.PRE_VALUE);
  headers.add(MatchAnalysisConstant.KEY_ALGO);
  headers.add(MatchAnalysisConstant.KEY_VALUE);
  headers.add(MatchAnalysisConstant.POST_ALGO);
  headers.add(MatchAnalysisConstant.POST_VALUE);
}","@Override protected void initHeaders(){
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.BLOCKING_KEY_NAME));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.PRE_ALGO));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.PRE_VALUE));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.KEY_ALGO));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.KEY_VALUE));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.POST_ALGO));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.POST_VALUE));
}",0.7796954314720812
137087,"@Override protected void initHeaders(){
  headers.add(MatchAnalysisConstant.MATCH_KEY_NAME);
  headers.add(MatchAnalysisConstant.MATCHING_TYPE);
  headers.add(MatchAnalysisConstant.CUSTOM_MATCHER);
  if (isAddColumn()) {
    headers.add(MatchAnalysisConstant.THRESHOLD);
  }
  headers.add(MatchAnalysisConstant.CONFIDENCE_WEIGHT);
  headers.add(MatchAnalysisConstant.HANDLE_NULL);
}","@Override protected void initHeaders(){
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.MATCH_KEY_NAME));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.MATCHING_TYPE));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.CUSTOM_MATCHER));
  if (isAddColumn()) {
    headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.THRESHOLD));
  }
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.CONFIDENCE_WEIGHT));
  headers.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.HANDLE_NULL));
}",0.8042105263157895
137088,"/** 
 * DOC zshen Comment method ""initTable"".
 * @param headers the name of column
 * @param columnMap all of columns which can be used by current Table
 * @param pixelDataOfHeaders the width of the column
 */
public void initTable(List<String> headers,List<MetadataColumn> columnMap){
  TableLayout tLayout=new TableLayout();
  innerTable.setLayout(tLayout);
  innerTable.setHeaderVisible(true);
  innerTable.setLinesVisible(true);
  GridData gd=new GridData(GridData.FILL_BOTH);
  innerTable.setLayoutData(gd);
  for (int index=0; index < headers.size(); index++) {
    String columnLabel=getInternationalizedLabel(headers.get(index));
    if (columnLabel != null) {
      if (columnLabel.length() == 1) {
        columnLabel=columnLabel + PluginConstant.SPACE_STRING + PluginConstant.SPACE_STRING;
      }
      tLayout.addColumnData(new ColumnPixelData(columnLabel.length() * getHeaderDisplayWeight(index)));
      new TableColumn(innerTable,SWT.LEFT).setText(columnLabel);
    }
  }
  CellEditor[] editors=getCellEditor(headers,columnMap);
  addContextMenu();
  AbstractMatchCellModifier<T> cellModifier=getTableCellModifier();
  if (cellModifier != null) {
    cellModifier.setColumnMap(columnMap);
    this.setCellModifier(cellModifier);
  }
  this.setCellEditors(editors);
  this.setColumnProperties(headers.toArray(new String[headers.size()]));
  this.setContentProvider(getTableContentProvider());
  this.setLabelProvider(getTableLabelProvider());
  GridData tableGD=new GridData(GridData.FILL_BOTH);
  tableGD.heightHint=getTableHeightHint();
  innerTable.setLayoutData(tableGD);
}","/** 
 * DOC zshen Comment method ""initTable"".
 * @param headers the name of column
 * @param columnMap all of columns which can be used by current Table
 * @param pixelDataOfHeaders the width of the column
 */
public void initTable(List<String> headers,List<MetadataColumn> columnMap){
  TableLayout tLayout=new TableLayout();
  innerTable.setLayout(tLayout);
  innerTable.setHeaderVisible(true);
  innerTable.setLinesVisible(true);
  GridData gd=new GridData(GridData.FILL_BOTH);
  innerTable.setLayoutData(gd);
  for (int index=0; index < headers.size(); index++) {
    String columnLabel=headers.get(index);
    if (columnLabel != null) {
      if (columnLabel.length() == 1) {
        columnLabel=columnLabel + PluginConstant.SPACE_STRING + PluginConstant.SPACE_STRING;
      }
      tLayout.addColumnData(new ColumnPixelData(columnLabel.length() * getHeaderDisplayWeight(index)));
      new TableColumn(innerTable,SWT.LEFT).setText(columnLabel);
    }
  }
  CellEditor[] editors=getCellEditor(headers,columnMap);
  addContextMenu();
  AbstractMatchCellModifier<T> cellModifier=getTableCellModifier();
  if (cellModifier != null) {
    cellModifier.setColumnMap(columnMap);
    this.setCellModifier(cellModifier);
  }
  this.setCellEditors(editors);
  this.setColumnProperties(headers.toArray(new String[headers.size()]));
  this.setContentProvider(getTableContentProvider());
  this.setLabelProvider(getTableLabelProvider());
  GridData tableGD=new GridData(GridData.FILL_BOTH);
  tableGD.heightHint=getTableHeightHint();
  innerTable.setLayoutData(tableGD);
}",0.9914475768134304
137089,"/** 
 * DOC zhao Comment method ""initHeaders"".
 */
private void initHeaders(){
  tableHeaders.add(MatchAnalysisConstant.LABEL);
  tableHeaders.add(MatchAnalysisConstant.COUNT);
  tableHeaders.add(MatchAnalysisConstant.PERCENTAGE);
}","/** 
 * DOC zhao Comment method ""initHeaders"".
 */
private void initHeaders(){
  tableHeaders.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.LABEL));
  tableHeaders.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.COUNT));
  tableHeaders.add(MatchAnalysisConstant.PERCENTAGE);
}",0.8821292775665399
137090,"/** 
 * DOC zhao Comment method ""initHeaders"".
 */
private void initHeaders(){
  tableHeaders.add(MatchAnalysisConstant.GROUP_SIZE);
  tableHeaders.add(MatchAnalysisConstant.GROUP_COUNT);
  tableHeaders.add(MatchAnalysisConstant.RECORD_COUNT);
  tableHeaders.add(MatchAnalysisConstant.RECORDS_PERCENTAGE);
}","/** 
 * DOC zhao Comment method ""initHeaders"".
 */
private void initHeaders(){
  tableHeaders.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.GROUP_SIZE));
  tableHeaders.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.GROUP_COUNT));
  tableHeaders.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.RECORD_COUNT));
  tableHeaders.add(DefaultMessagesImpl.getString(MatchAnalysisConstant.RECORDS_PERCENTAGE));
}",0.8319783197831978
137091,"private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator());
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysisItem.getAnalysis().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(100);
    final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object[]>(ssIndicator.getMapDB(StandardDBName.dataSection.name()));
    controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
    ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
    resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}","private Section createTableSectionPartForMapDB(Composite parentComp,String title,SimpleStatIndicator ssIndicator){
  Section columnSetElementSection=this.createSection(form,parentComp,title,null);
  Composite sectionTableComp=toolkit.createComposite(columnSetElementSection);
  if (ssIndicator.isStoreData()) {
    columnSetElementSection.setExpanded(true);
    columnSetElementSection.setEnabled(true);
    sectionTableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    sectionTableComp.setLayout(new GridLayout());
    Button filterDataBt=new Button(sectionTableComp,SWT.NONE);
    filterDataBt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    filterDataBt.setLayoutData(new GridData(SWT.CENTER,SWT.CENTER,false,false));
    filterDataBt.setEnabled(containAllMatchIndicator());
    filterDataBt.addMouseListener(new MouseListener(){
      public void mouseDoubleClick(      MouseEvent e){
      }
      public void mouseDown(      MouseEvent e){
        List<Indicator> indicatorsList=masterPage.analysisItem.getAnalysis().getResults().getIndicators();
        SelectPatternsWizard wizard=new SelectPatternsWizard(indicatorsList);
        wizard.setFilterType(filterType);
        wizard.setOldTableInputList(ColumnSetResultPage.this.tableFilterResult);
        WizardDialog dialog=new WizardDialog(null,wizard);
        dialog.setPageSize(300,400);
        wizard.setContainer(dialog);
        wizard.setWindowTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
        if (WizardDialog.OK == dialog.open()) {
          ColumnSetResultPage.this.tableFilterResult=wizard.getPatternSelectPage().getTableInputList();
          filterType=wizard.getPatternSelectPage().getFilterType();
          columnsElementViewer.refresh();
        }
      }
      public void mouseUp(      MouseEvent e){
      }
    }
);
    columnsElementViewer=new TableViewer(sectionTableComp,SWT.MULTI | SWT.FULL_SELECTION | SWT.BORDER);
    Table table=columnsElementViewer.getTable();
    table.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
    table.setLinesVisible(true);
    table.setHeaderVisible(true);
    TableSectionViewerProvider provider=new TableSectionViewerProvider();
    columnsElementViewer.setContentProvider(provider);
    columnsElementViewer.addFilter(new PatternDataFilter());
    columnSetElementSection.setClient(sectionTableComp);
    columnSetElementSection.setExpanded(false);
    int pageSize=100;
    setupTableGridDataLimitedSize(table,pageSize);
    final PageableController controller=new PageableController(100);
    try {
      final IPageLoader<PageResult<Object[]>> pageLoader=new MapDBPageLoader<Object[]>(ssIndicator.getMapDB(StandardDBName.dataSection.name()));
      controller.addPageChangedListener(PageLoaderStrategyHelper.createLoadPageAndReplaceItemsListener(controller,columnsElementViewer,pageLoader,PageResultContentProvider.getInstance(),null));
      ResultAndNavigationPageGraphicsRenderer resultAndPageButtonsDecorator=new ResultAndNavigationPageGraphicsRenderer(sectionTableComp,SWT.NONE,controller);
      resultAndPageButtonsDecorator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    }
 catch (    IOError error) {
      log.warn(error.getMessage(),error);
    }
    createColumns(controller,ssIndicator);
    controller.setCurrentPage(0);
    for (    TableColumn column : table.getColumns()) {
      column.pack();
    }
  }
 else {
    columnSetElementSection.setExpanded(false);
    columnSetElementSection.setEnabled(false);
  }
  return columnSetElementSection;
}",0.9855611150822016
137092,"@Override public void handle(Object object,String[] rowValues){
  super.handle(object);
  if (duplicateMap.containsKey(object)) {
    duplicateMap.get(object).add(rowValues);
  }
 else {
    List<Object[]> temp=new ArrayList<Object[]>();
    temp.add(rowValues);
    duplicateMap.put(object,temp);
  }
}","@Override public void handle(Object object,String[] rowValues){
  super.handle(object);
  List<Object[]> duplicateValueList=null;
  if (duplicateMap.containsKey(object)) {
    duplicateValueList=duplicateMap.get(object);
  }
 else {
    duplicateValueList=new ArrayList<Object[]>();
  }
  duplicateValueList.add(rowValues);
  duplicateMap.put(object,duplicateValueList);
}",0.5303703703703704
137093,"@Override public boolean handle(Object data){
  if (isUsedMapDBMode()) {
    if (data == null) {
      List<Object> valueList=soundexFreqMap.get(data);
      if (valueList == null) {
        valueList=new ArrayList<Object>();
        valueList.add(data);
        valueList.add(null);
        valueList.add(0);
        valueList.add(1);
      }
 else {
        Long duplicateCount=Long.valueOf(valueList.get(3).toString()) + 1;
        valueList.set(3,duplicateCount);
      }
      soundexFreqMap.put(data,valueList);
    }
 else {
      String soundexValue=soundex.soundex(data.toString());
      List<Object> valueList=soundexFreqMap.get(soundexValue);
      if (valueList == null) {
        valueList=new ArrayList<Object>();
        valueList.add(data);
        valueList.add(soundexValue);
        valueList.add(1);
        valueList.add(0);
        soundexFreqMap.put(soundexValue,valueList);
      }
 else       if (!getMapForFreq().containsKey(data)) {
        Long distinctCount=Long.valueOf(valueList.get(2).toString()) + 1;
        valueList.set(2,distinctCount);
        if (valueList.get(0).toString().compareTo(data.toString()) < 0) {
          valueList.set(0,data);
        }
      }
 else {
        Long duplicateCount=Long.valueOf(valueList.get(3).toString()) + 1;
        valueList.set(3,duplicateCount);
      }
    }
  }
  boolean returnValue=super.handle(data);
  this.mustStoreRow=false;
  return returnValue;
}","@Override public boolean handle(Object data){
  if (isUsedMapDBMode()) {
    if (data == null) {
      List<Object> valueList=soundexFreqMap.get(data);
      if (valueList == null) {
        valueList=new ArrayList<Object>();
        valueList.add(data);
        valueList.add(null);
        valueList.add(0);
        valueList.add(1);
      }
 else {
        Long duplicateCount=Long.valueOf(valueList.get(3).toString()) + 1;
        valueList.set(3,duplicateCount);
      }
      soundexFreqMap.put(data,valueList);
    }
 else {
      String soundexValue=soundex.soundex(data.toString());
      List<Object> valueList=soundexFreqMap.get(soundexValue);
      if (valueList == null) {
        valueList=new ArrayList<Object>();
        valueList.add(data);
        valueList.add(soundexValue);
        valueList.add(1);
        valueList.add(0);
      }
 else       if (!getMapForFreq().containsKey(data)) {
        Long distinctCount=Long.valueOf(valueList.get(2).toString()) + 1;
        valueList.set(2,distinctCount);
        if (valueList.get(0).toString().compareTo(data.toString()) < 0) {
          valueList.set(0,data);
        }
      }
 else {
        Long duplicateCount=Long.valueOf(valueList.get(3).toString()) + 1;
        valueList.set(3,duplicateCount);
      }
      soundexFreqMap.put(soundexValue,valueList);
    }
  }
  boolean returnValue=super.handle(data);
  this.mustStoreRow=false;
  return returnValue;
}",0.633635729239358
137094,"@Override public void dispose(){
  super.dispose();
  if (this.treeViewer != null) {
    this.treeViewer.removePropertyChangeListener(this);
  }
  if (dataFilterComp != null) {
    this.dataFilterComp.removePropertyChangeListener(this);
  }
  if (this.getCurrentModelElementIndicators() != null) {
    for (    ModelElementIndicator modelIndi : this.getCurrentModelElementIndicators()) {
      for (      Indicator indicator : modelIndi.getIndicators()) {
        indicator.closeMapDB();
      }
    }
  }
}","@Override public void dispose(){
  super.dispose();
  if (this.treeViewer != null) {
    this.treeViewer.removePropertyChangeListener(this);
  }
  if (dataFilterComp != null) {
    this.dataFilterComp.removePropertyChangeListener(this);
  }
  MapDBManager.getInstance().closeDB(getAnalysis());
}",0.6209476309226932
137095,"@Override public void dispose(){
  if (bg != null) {
    bg.dispose();
  }
  if (this.simpleStaticIndicator != null) {
    this.simpleStaticIndicator.closeMapDB();
  }
  super.dispose();
}","@Override public void dispose(){
  if (bg != null) {
    bg.dispose();
  }
  MapDBManager.getInstance().closeDB(masterPage.getAnalysis());
  super.dispose();
}",0.6628242074927954
137096,"/** 
 * DOC talend Comment method ""initValueByGroupMap"".
 * @return
 */
private ColumnSetDBMap initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new ColumnSetDBMap(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this),dbName);
  }
  return null;
}","/** 
 * DOC talend Comment method ""initValueByGroupMap"".
 * @return
 */
private ColumnSetDBMap initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new ColumnSetDBMap(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this),ResourceManager.getMapDBCatalogName(this,dbName));
  }
  return null;
}",0.8827361563517915
137097,"/** 
 * Create a new DBSet
 * @return
 */
private Set<Object> initValueForDBSet(String dbName){
  if (isUsedMapDBMode()) {
    return new DBSet<Object>(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this),dbName);
  }
 else {
    return new HashSet<Object>();
  }
}","/** 
 * Create a new DBSet
 * @return
 */
private Set<Object> initValueForDBSet(String dbName){
  if (isUsedMapDBMode()) {
    return new DBSet<Object>(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this),ResourceManager.getMapDBCatalogName(this,dbName));
  }
 else {
    return new HashSet<Object>();
  }
}",0.881578947368421
137098,"/** 
 * Create a new DBMap
 * @return
 */
private Map<Object,List<Object[]>> initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new DBValueListMap<Object>(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this),dbName);
  }
 else {
    return new HashMap<Object,List<Object[]>>();
  }
}","/** 
 * Create a new DBMap
 * @return
 */
private Map<Object,List<Object[]>> initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new DBValueListMap<Object>(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this),ResourceManager.getMapDBCatalogName(this,dbName));
  }
 else {
    return new HashMap<Object,List<Object[]>>();
  }
}",0.9037900874635568
137099,"/** 
 * Create a new DBSet
 * @return
 */
private Set<Object> initValueForDBSet(String dbName){
  if (isUsedMapDBMode()) {
    return new DBSet<Object>(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this),dbName);
  }
 else {
    return new HashSet<Object>();
  }
}","/** 
 * Create a new DBSet
 * @return
 */
private Set<Object> initValueForDBSet(String dbName){
  if (isUsedMapDBMode()) {
    return new DBSet<Object>(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this),ResourceManager.getMapDBCatalogName(this,dbName));
  }
 else {
    return new HashSet<Object>();
  }
}",0.881578947368421
137100,"/** 
 * init the ValueByGroupMap.
 * @return
 */
private Map<Object,Long> initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new DBMap<Object,Long>(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this),dbName);
  }
  return null;
}","/** 
 * init the ValueByGroupMap.
 * @return
 */
private Map<Object,Long> initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new DBMap<Object,Long>(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this),ResourceManager.getMapDBCatalogName(this,dbName));
  }
  return null;
}",0.8862068965517241
137101,"/** 
 * clear DrillDown Maps.
 * @param valueToFreqForMapDB2
 */
@SuppressWarnings(""String_Node_Str"") protected void clearDrillDownMaps(){
  AbstractDB<?> mapDB=getMapDB(StandardDBName.drillDown.name());
  if (mapDB != null) {
    mapDB.clearDB();
  }
}","/** 
 * clear DrillDown Maps.
 * @param valueToFreqForMapDB2
 */
@SuppressWarnings(""String_Node_Str"") protected void clearDrillDownMaps(){
  AbstractDB<?> mapDB=getMapDB(StandardDBName.drillDown.name());
  if (mapDB != null) {
    mapDB.clearDB(ResourceManager.getMapDBCatalogName(this));
  }
}",0.9250457038391224
137102,"/** 
 * Check whether drill down action is allow
 * @return true is allowed else false
 */
@Override public boolean checkAllowDrillDown(){
  Analysis analysis=AnalysisHelper.getAnalysis(this);
  if (analysis != null) {
    return analysis.getParameters().isStoreData();
  }
  return false;
}","/** 
 * Check whether drill down action is allow
 * @return true is allowed else false
 */
@Override public boolean checkAllowDrillDown(){
  Analysis analysis=AnalysisHelper.getAnalysis(this);
  boolean isStoreData=false;
  if (analysis != null) {
    isStoreData=analysis.getParameters().isStoreData();
  }
  boolean isJavaEngine=AnalysisHelper.isJavaExecutionEngine(analysis);
  return isStoreData && isJavaEngine;
}",0.767277856135402
137103,"@Override public File getMapDBFile(){
  return MapDBManager.createPath(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this));
}","@Override public File getMapDBFile(){
  return MapDBManager.createPath(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this));
}",0.903448275862069
137104,"/** 
 * Create a new DBMap
 * @return
 */
private DBMap<Object,List<Object>> initValueForDBMap(String dbName){
  return new DBMap<Object,List<Object>>(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this),dbName);
}","/** 
 * Create a new DBMap
 * @return
 */
private DBMap<Object,List<Object>> initValueForDBMap(String dbName){
  return new DBMap<Object,List<Object>>(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this),ResourceManager.getMapDBCatalogName(this,dbName));
}",0.8695652173913043
137105,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
@Override public boolean finalizeComputation(){
  if (isUsedMapDBMode()) {
    closeMapDB();
  }
  return true;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
@Override public boolean finalizeComputation(){
  return true;
}",0.851063829787234
137106,"/** 
 * DOC talend Comment method ""clearDrillDownMaps"".
 */
@Override protected void clearDrillDownMap(){
  if (checkAllowDrillDown()) {
    AbstractDB<?> mapDB=getMapDB(StandardDBName.drillDown.name());
    mapDB.clearDB();
  }
}","/** 
 * DOC talend Comment method ""clearDrillDownMaps"".
 */
@Override protected void clearDrillDownMap(){
  if (isUsedMapDBMode() && checkAllowDrillDown()) {
    AbstractDB<?> mapDB=getMapDB(StandardDBName.drillDown.name());
    if (mapDB != null) {
      mapDB.clearDB(ResourceManager.getMapDBCatalogName(this));
    }
  }
}",0.7783783783783784
137107,"/** 
 * Create a new DBMap
 * @return
 */
private Map<Object,Long> initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new DBMap<Object,Long>(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this),dbName);
  }
 else {
    return new TreeMap<Object,Long>();
  }
}","/** 
 * Create a new DBMap
 * @return
 */
private Map<Object,Long> initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new DBMap<Object,Long>(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this),ResourceManager.getMapDBCatalogName(this,dbName));
  }
 else {
    return new TreeMap<Object,Long>();
  }
}",0.896551724137931
137108,"/** 
 * init DBMap
 * @return
 */
private Map<Object,List<Object>> initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new DBMap<Object,List<Object>>(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this),dbName);
  }
  return null;
}","/** 
 * init DBMap
 * @return
 */
private Map<Object,List<Object>> initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new DBMap<Object,List<Object>>(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this),ResourceManager.getMapDBCatalogName(this,dbName));
  }
  return null;
}",0.8865979381443299
137109,"/** 
 * Create a new DBSet
 * @return
 */
private Set<Object> initValueForDBSet(String dbName){
  if (isUsedMapDBMode()) {
    return new DBSet<Object>(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this),dbName);
  }
 else {
    return new HashSet<Object>();
  }
}","/** 
 * Create a new DBSet
 * @return
 */
private Set<Object> initValueForDBSet(String dbName){
  if (isUsedMapDBMode()) {
    return new DBSet<Object>(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this),ResourceManager.getMapDBCatalogName(this,dbName));
  }
 else {
    return new HashSet<Object>();
  }
}",0.881578947368421
137110,"/** 
 * Create a new DBMap
 * @return
 */
private Map<Object,Long> initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new DBMap<Object,Long>(ResourceManager.getMapDBFilePath(this),ResourceHelper.getUUID(this),dbName);
  }
 else {
    return new TreeMap<Object,Long>();
  }
}","/** 
 * Create a new DBMap
 * @return
 */
private Map<Object,Long> initValueForDBMap(String dbName){
  if (isUsedMapDBMode()) {
    return new DBMap<Object,Long>(ResourceManager.getMapDBFilePath(),ResourceManager.getMapDBFileName(this),ResourceManager.getMapDBCatalogName(this,dbName));
  }
 else {
    return new TreeMap<Object,Long>();
  }
}",0.896551724137931
137111,"/** 
 * DOC zshen Comment method ""createHideGroupComposite"".
 * @param chartComposite
 */
protected void createHideGroupComposite(Composite chartComposite){
  GridData gridData;
  Composite toolComp=toolkit.createComposite(chartComposite,SWT.NONE);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  toolComp.setLayoutData(gridData);
  GridLayout gridLayout=new GridLayout(3,false);
  toolComp.setLayout(gridLayout);
  Label lessText=new Label(toolComp,SWT.NONE);
  lessText.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  final Spinner lessSpin=new Spinner(toolComp,SWT.BORDER);
  lessSpin.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (matchRuleChartComp != null) {
        int oldValue=matchRuleChartComp.getTimes();
        String text=lessSpin.getText().trim();
        int times=StringUtils.isEmpty(text) ? 0 : Integer.parseInt(text);
        matchRuleChartComp.setTimes(times);
        matchRuleChartComp.refresh();
        listeners.firePropertyChange(MatchAnalysisConstant.NEED_REFRESH_DATA_SAMPLE_TABLE,oldValue,times);
        matchRows.clear();
      }
    }
  }
);
  lessSpin.setSelection(2);
  Label lessText2=new Label(toolComp,SWT.NONE);
  lessText2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
}","/** 
 * DOC zshen Comment method ""createHideGroupComposite"".
 * @param chartComposite
 */
protected void createHideGroupComposite(Composite chartComposite){
  GridData gridData;
  Composite toolComp=toolkit.createComposite(chartComposite,SWT.NONE);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  toolComp.setLayoutData(gridData);
  GridLayout gridLayout=new GridLayout(3,false);
  toolComp.setLayout(gridLayout);
  Label lessText=new Label(toolComp,SWT.NONE);
  lessText.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  final Spinner lessSpin=new Spinner(toolComp,SWT.BORDER);
  lessSpin.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (matchRuleChartComp != null) {
        int oldValue=matchRuleChartComp.getTimes();
        String text=lessSpin.getText().trim();
        int times=StringUtils.isEmpty(text) ? 0 : Integer.parseInt(text);
        matchRuleChartComp.setTimes(times);
        matchRuleChartComp.refresh();
        listeners.firePropertyChange(MatchAnalysisConstant.NEED_REFRESH_DATA_SAMPLE_TABLE,oldValue,times);
        matchRows.clear();
      }
    }
  }
);
  lessSpin.setSelection(PluginConstant.HIDDEN_GROUP_LESS_THAN_DEFAULT);
  Label lessText2=new Label(toolComp,SWT.NONE);
  lessText2.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
}",0.982615268329554
137112,"@Override protected void handleRemoveElement(ModelElementChangeLeftTarget removeElement){
  ColumnSet removeColumnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removeColumnSet != null) {
    popRemoveElementConfirm();
    if (isValidTableHandle(removeColumnSet) || isValidViewHandle(removeColumnSet)) {
      PackageHelper.removeColumnSet(removeColumnSet,getPackageFromObject(selectedObj));
    }
  }
}","@Override protected void handleRemoveElement(ModelElementChangeLeftTarget removeElement){
  EObject leftElement=removeElement.getLeftElement();
  ColumnSet removeColumnSet=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(leftElement);
  if (removeColumnSet != null) {
    popRemoveElementConfirm();
    if (isValidTableHandle(removeColumnSet) || isValidViewHandle(removeColumnSet)) {
      PackageHelper.removeColumnSet(removeColumnSet,getPackageFromObject(selectedObj));
    }
  }
  if (leftElement instanceof TaggedValue) {
    TdTable elementOwner=SwitchHelpers.TABLE_SWITCH.doSwitch(leftElement.eContainer());
    if (elementOwner != null) {
      TaggedValueHelper.setTaggedValue(elementOwner,((TaggedValue)leftElement).getTag(),null);
    }
  }
}",0.6925675675675675
137113,"@SuppressWarnings(""String_Node_Str"") @Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  ColumnSet columnSetSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    if (isValidTableHandle(columnSetSwitch) || isValidViewHandle(columnSetSwitch)) {
      PackageHelper.addColumnSet(columnSetSwitch,getPackageFromObject(selectedObj));
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  ColumnSet columnSetSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    if (isValidTableHandle(columnSetSwitch) || isValidViewHandle(columnSetSwitch)) {
      PackageHelper.addColumnSet(columnSetSwitch,getPackageFromObject(selectedObj));
    }
  }
  if (rightElement instanceof TaggedValue) {
    TdTable elementOwner=SwitchHelpers.TABLE_SWITCH.doSwitch(addElement.getLeftParent());
    if (elementOwner != null) {
      TaggedValueHelper.setTaggedValue(elementOwner,((TaggedValue)rightElement).getTag(),((TaggedValue)rightElement).getValue());
    }
  }
}",0.7549880287310455
137114,"private EObject getTempTableFromOldFile() throws ReloadCompareException {
  MetadataTable[] metadataTables=ConnectionHelper.getTables((DelimitedFileConnection)tempReloadProvider).toArray(new MetadataTable[0]);
  String tableName=((MetadataTable)selectedObj).getLabel();
  for (  MetadataTable table : metadataTables) {
    if (table.getLabel().equals(tableName)) {
      tempMetadataTable=table;
      comparedColumns.addAll(table.getColumns());
      break;
    }
  }
  util.saveResource(tempMetadataTable.eResource());
  return tempMetadataTable;
}","private EObject getTempTableFromOldFile() throws ReloadCompareException {
  MetadataTable[] metadataTables=ConnectionHelper.getTables(tempReloadProvider).toArray(new MetadataTable[0]);
  String tableName=((MetadataTable)selectedObj).getLabel();
  for (  MetadataTable table : metadataTables) {
    if (table.getLabel().equals(tableName)) {
      tempMetadataTable=table;
      comparedColumns.addAll(table.getColumns());
      break;
    }
  }
  util.saveResource(tempMetadataTable.eResource());
  return tempMetadataTable;
}",0.9767441860465116
137115,"@Override protected EObject getSavedReloadObject() throws ReloadCompareException {
  ColumnSet selectedColumnSet=null;
  if (selectedObj instanceof DBColumnFolderRepNode) {
    DBColumnFolderRepNode columnFolderRepNode=(DBColumnFolderRepNode)selectedObj;
    selectedColumnSet=columnFolderRepNode.getColumnSet();
  }
 else   if (selectedObj instanceof ColumnSet) {
    selectedColumnSet=(ColumnSet)selectedObj;
  }
  ColumnSet toReloadcolumnSet=DQStructureComparer.findMatchedColumnSet(selectedColumnSet,tempReloadProvider);
  ColumnSetHelper.setColumns(toReloadcolumnSet,EMPTY_COLUMN_LIST);
  toReloadcolumnSet.getOwnedElement().clear();
  try {
    DqRepositoryViewService.getColumns(tempReloadProvider,toReloadcolumnSet,true);
    util.saveResource(toReloadcolumnSet.eResource());
  }
 catch (  Exception e1) {
    throw new ReloadCompareException(e1);
  }
  return toReloadcolumnSet;
}","@Override protected EObject getSavedReloadObject() throws ReloadCompareException {
  ColumnSet selectedColumnSet=getCurrentColumnSet();
  ColumnSet toReloadcolumnSet=DQStructureComparer.findMatchedColumnSet(selectedColumnSet,tempReloadProvider);
  ColumnSetHelper.setColumns(toReloadcolumnSet,EMPTY_COLUMN_LIST);
  toReloadcolumnSet.getOwnedElement().clear();
  try {
    DqRepositoryViewService.getColumns(tempReloadProvider,toReloadcolumnSet,true);
    util.saveResource(toReloadcolumnSet.eResource());
  }
 catch (  Exception e1) {
    throw new ReloadCompareException(e1);
  }
  return toReloadcolumnSet;
}",0.789859906604403
137116,"@Override protected void handleRemoveElement(ModelElementChangeLeftTarget removeElement){
  TdColumn removeColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removeColumn != null) {
    ColumnSet columnSet=null;
    if (selectedObj instanceof DBColumnFolderRepNode) {
      DBColumnFolderRepNode columnFolderRepNode=(DBColumnFolderRepNode)selectedObj;
      columnSet=columnFolderRepNode.getColumnSet();
    }
 else     if (selectedObj instanceof ColumnSet) {
      columnSet=(ColumnSet)selectedObj;
    }
    popRemoveElementConfirm();
    ColumnSetHelper.removeColumn(removeColumn,columnSet);
    return;
  }
  TdExpression removedExpression=DataqualitySwitchHelper.TDEXPRESSION_SWITCH.doSwitch(removeElement.getLeftElement());
  if (removedExpression != null) {
    TdColumn expressionOwner=SwitchHelpers.COLUMN_SWITCH.doSwitch(removedExpression.eContainer());
    if (expressionOwner != null) {
      expressionOwner.setInitialValue(null);
    }
  }
}","@Override protected void handleRemoveElement(ModelElementChangeLeftTarget removeElement){
  EObject leftElement=removeElement.getLeftElement();
  TdColumn removeColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(leftElement);
  if (removeColumn != null) {
    ColumnSet columnSet=getCurrentColumnSet();
    popRemoveElementConfirm();
    ColumnSetHelper.removeColumn(removeColumn,columnSet);
    return;
  }
  TdExpression removedExpression=DataqualitySwitchHelper.TDEXPRESSION_SWITCH.doSwitch(leftElement);
  if (removedExpression != null) {
    TdColumn expressionOwner=SwitchHelpers.COLUMN_SWITCH.doSwitch(removedExpression.eContainer());
    if (expressionOwner != null) {
      expressionOwner.setInitialValue(null);
    }
  }
  if (leftElement instanceof TaggedValue) {
    TdColumn elementOwner=SwitchHelpers.COLUMN_SWITCH.doSwitch(leftElement.eContainer());
    if (elementOwner != null) {
      TaggedValueHelper.setTaggedValue(elementOwner,((TaggedValue)leftElement).getTag(),null);
    }
  }
}",0.6330645161290323
137117,"@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  TdColumn columnSetSwitch=SwitchHelpers.COLUMN_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    ColumnSet columnSet=null;
    if (selectedObj instanceof DBColumnFolderRepNode) {
      DBColumnFolderRepNode columnFolderRepNode=(DBColumnFolderRepNode)selectedObj;
      columnSet=columnFolderRepNode.getColumnSet();
    }
 else     if (selectedObj instanceof ColumnSet) {
      columnSet=(ColumnSet)selectedObj;
    }
    ColumnSetHelper.addColumn(columnSetSwitch,columnSet);
    PrimaryKey primaryKey=ColumnHelper.getPrimaryKey(columnSetSwitch);
    if (primaryKey != null) {
      TableHelper.addPrimaryKey((TdTable)columnSet,columnSetSwitch);
    }
    Set<ForeignKey> foreignKeySet=ColumnHelper.getForeignKey(columnSetSwitch);
    for (    ForeignKey foreignKey : foreignKeySet) {
      if (foreignKey != null) {
        TableHelper.addForeignKey((TdTable)columnSet,foreignKey,columnSetSwitch);
      }
    }
    return;
  }
  TdExpression addedExpression=DataqualitySwitchHelper.TDEXPRESSION_SWITCH.doSwitch(rightElement);
  if (addedExpression != null) {
    TdColumn parentColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(addElement.getLeftParent());
    if (parentColumn != null) {
      parentColumn.setInitialValue(addedExpression);
    }
  }
}","@Override protected void handleAddElement(ModelElementChangeRightTarget addElement){
  EObject rightElement=addElement.getRightElement();
  TdColumn columnSetSwitch=SwitchHelpers.COLUMN_SWITCH.doSwitch(rightElement);
  if (columnSetSwitch != null) {
    ColumnSet columnSet=getCurrentColumnSet();
    ColumnSetHelper.addColumn(columnSetSwitch,columnSet);
    PrimaryKey primaryKey=ColumnHelper.getPrimaryKey(columnSetSwitch);
    if (primaryKey != null) {
      TableHelper.addPrimaryKey((TdTable)columnSet,columnSetSwitch);
    }
    Set<ForeignKey> foreignKeySet=ColumnHelper.getForeignKey(columnSetSwitch);
    for (    ForeignKey foreignKey : foreignKeySet) {
      if (foreignKey != null) {
        TableHelper.addForeignKey((TdTable)columnSet,foreignKey,columnSetSwitch);
      }
    }
    return;
  }
  TdExpression addedExpression=DataqualitySwitchHelper.TDEXPRESSION_SWITCH.doSwitch(rightElement);
  if (addedExpression != null) {
    TdColumn parentColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(addElement.getLeftParent());
    if (parentColumn != null) {
      parentColumn.setInitialValue(addedExpression);
    }
  }
  if (rightElement instanceof TaggedValue) {
    TdColumn elementOwner=SwitchHelpers.COLUMN_SWITCH.doSwitch(addElement.getLeftParent());
    if (elementOwner != null) {
      TaggedValueHelper.setTaggedValue(elementOwner,((TaggedValue)rightElement).getTag(),((TaggedValue)rightElement).getValue());
    }
  }
}",0.7790288529204785
137118,"/** 
 * Update the software systems given the database connection instance.<br>
 * @param database connection (Talend type)
 * @return
 * @throws SQLException
 */
public void updateSoftwareSystem(DatabaseConnection databaseConnection) throws SQLException {
  if (databaseConnection == null) {
    return;
  }
  Resource softwareSystemResource=EMFSharedResources.getInstance().getSoftwareDeploymentResource();
  List<EObject> softwareSystems=softwareSystemResource.getContents();
  Boolean isExisted=Boolean.FALSE;
  try {
    isExisted=isExistedInSoftwareSystem(databaseConnection,softwareSystems);
  }
 catch (  TalendException e) {
    return;
  }
  if (!isExisted) {
    update(databaseConnection,softwareSystems,softwareSystemResource);
  }
}","/** 
 * Update the software systems given the database connection instance.<br>
 * @param database connection (Talend type)
 * @return
 * @throws SQLException
 */
public void updateSoftwareSystem(DatabaseConnection databaseConnection) throws SQLException {
  if (databaseConnection == null) {
    return;
  }
  Resource softwareSystemResource=EMFSharedResources.getInstance().getSoftwareDeploymentResource();
  List<EObject> softwareSystems=softwareSystemResource.getContents();
  Boolean isExisted=Boolean.FALSE;
  try {
    isExisted=isExistedInSoftwareSystem(databaseConnection,softwareSystems);
  }
 catch (  TalendException e) {
    log.debug(e.getMessage());
    return;
  }
  if (!isExisted) {
    update(databaseConnection,softwareSystems,softwareSystemResource);
  }
}",0.9717662508207484
137119,"/** 
 * Update the software systems given the database connection instance.<br>
 * @param database connection (Talend type)
 * @return
 * @throws SQLException
 */
public void updateSoftwareSystem(DatabaseConnection databaseConnection) throws SQLException {
  if (databaseConnection == null) {
    return;
  }
  Resource softwareSystemResource=EMFSharedResources.getInstance().getSoftwareDeploymentResource();
  List<EObject> softwareSystems=softwareSystemResource.getContents();
  Boolean isExisted=Boolean.FALSE;
  try {
    isExisted=isExistedInSoftwareSystem(databaseConnection,softwareSystems);
  }
 catch (  TalendException e) {
    log.error(e.getMessage());
    return;
  }
  if (!isExisted) {
    update(databaseConnection,softwareSystems,softwareSystemResource);
  }
}","/** 
 * Update the software systems given the database connection instance.<br>
 * @param database connection (Talend type)
 * @return
 * @throws SQLException
 */
public void updateSoftwareSystem(DatabaseConnection databaseConnection) throws SQLException {
  if (databaseConnection == null) {
    return;
  }
  Resource softwareSystemResource=EMFSharedResources.getInstance().getSoftwareDeploymentResource();
  List<EObject> softwareSystems=softwareSystemResource.getContents();
  Boolean isExisted=Boolean.FALSE;
  try {
    isExisted=isExistedInSoftwareSystem(databaseConnection,softwareSystems);
  }
 catch (  TalendException e) {
    return;
  }
  if (!isExisted) {
    update(databaseConnection,softwareSystems,softwareSystemResource);
  }
}",0.8522652659225214
137120,"/** 
 * check every block keys and match keys, if any key .
 * @param matchRuleDef
 * @return
 */
private boolean isNeedColumnWarning(MatchRuleDefinition matchRuleDef){
  boolean needColumnWarning=false;
  if (dialogType != MATCHGROUP_TYPE && dialogType != RECORD_MATCHING_TYPE) {
    for (    BlockKeyDefinition bkd : matchRuleDef.getBlockKeys()) {
      if (hasColumnMatchTheKey(bkd)) {
        needColumnWarning=true;
        break;
      }
    }
  }
  if (dialogType != GENKEY_TYPE) {
    for (    MatchRule rule : matchRuleDef.getMatchRules()) {
      EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
      for (      MatchKeyDefinition mkd : matchKeys) {
        if (!hasColumnMatchTheKey(mkd)) {
          needColumnWarning=true;
          break;
        }
      }
      if (needColumnWarning) {
        break;
      }
    }
  }
  return needColumnWarning;
}","/** 
 * check every block keys and match keys, if any key .
 * @param matchRuleDef
 * @return
 */
private boolean isNeedColumnWarning(MatchRuleDefinition matchRuleDef){
  boolean needColumnWarning=false;
  if (dialogType != MATCHGROUP_TYPE && dialogType != RECORD_MATCHING_TYPE) {
    for (    BlockKeyDefinition bkd : matchRuleDef.getBlockKeys()) {
      if (!hasColumnMatchTheKey(bkd)) {
        needColumnWarning=true;
        break;
      }
    }
  }
  if (dialogType != GENKEY_TYPE) {
    for (    MatchRule rule : matchRuleDef.getMatchRules()) {
      EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
      for (      MatchKeyDefinition mkd : matchKeys) {
        if (!hasColumnMatchTheKey(mkd)) {
          needColumnWarning=true;
          break;
        }
      }
      if (needColumnWarning) {
        break;
      }
    }
  }
  return needColumnWarning;
}",0.9994275901545506
137121,"/** 
 * validate the selected rule .
 */
private void addValidator(){
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=new Status(IStatus.OK,CorePlugin.PLUGIN_ID,StringUtils.EMPTY);
      if (selection == null || (selection != null && selection.length > 1)) {
        status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
        return status;
      }
 else {
        for (        Object selectObject : selection) {
          if (selectObject instanceof IFile) {
            IFile file=(IFile)selectObject;
            if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
              MatchRuleDefinition matchRuleDef=DQRuleResourceFileHelper.getInstance().findMatchRule(file);
              if (isEmptyRule(matchRuleDef)) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
                return status;
              }
              Set<String> duplicatedKeys=hasDuplicatedKeys(matchRuleDef);
              if (!duplicatedKeys.isEmpty()) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str"",duplicatedKeys.toString()));
                return status;
              }
              if ((dialogType == MATCHGROUP_TYPE || dialogType == RECORD_MATCHING_TYPE) && T_SWOOSH_ALGORITHM.equals(matchRuleDef.getRecordLinkageAlgorithm())) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,""String_Node_Str"");
                return status;
              }
              if (isNeedColumnWarning(matchRuleDef)) {
                String warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
                status=new Status(IStatus.WARNING,CorePlugin.PLUGIN_ID,warningMsg);
              }
            }
          }
        }
      }
      return status;
    }
    /** 
 * check every block keys and match keys, if any key .
 * @param matchRuleDef
 * @return
 */
    private boolean isNeedColumnWarning(    MatchRuleDefinition matchRuleDef){
      boolean needColumnWarning=false;
      if (dialogType != MATCHGROUP_TYPE && dialogType != RECORD_MATCHING_TYPE) {
        for (        BlockKeyDefinition bkd : matchRuleDef.getBlockKeys()) {
          if (hasColumnMatchTheKey(bkd)) {
            needColumnWarning=true;
            break;
          }
        }
      }
      if (dialogType != GENKEY_TYPE) {
        for (        MatchRule rule : matchRuleDef.getMatchRules()) {
          EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
          for (          MatchKeyDefinition mkd : matchKeys) {
            if (!hasColumnMatchTheKey(mkd)) {
              needColumnWarning=true;
              break;
            }
          }
          if (needColumnWarning) {
            break;
          }
        }
      }
      return needColumnWarning;
    }
    /** 
 * check if the key's name equals the .
 * @param needColumnWarning
 * @param bkd
 * @return
 */
    private boolean hasColumnMatchTheKey(    KeyDefinition bkd){
      for (      String column : inputColumnNames) {
        if (isColumnNameEqualsWithKey(bkd,column)) {
          return true;
        }
      }
      return false;
    }
    /** 
 * check if the match key or survivor key has .if the user has choose ""overwrite"",no need to judge then. Judged according to the selected rule type(vsr or tswoosh)
 * @param matchRuleDef
 * @return
 */
    private Set<String> hasDuplicatedKeys(    MatchRuleDefinition matchRuleDef){
      Set<String> duplicatedKeys=new HashSet<String>();
      if (isOverwrite || currentAnaMatchKeys == null) {
        return duplicatedKeys;
      }
      if (RecordMatcherType.simpleVSRMatcher.name().equals(matchRuleDef.getRecordLinkageAlgorithm()) && matchRuleDef.getBlockKeys() != null && currentAnaBlockKeys != null) {
        for (        BlockKeyDefinition blockKey : matchRuleDef.getBlockKeys()) {
          if (blockKey != null && currentAnaBlockKeys.contains(blockKey.getName())) {
            duplicatedKeys.add(blockKey.getName());
          }
        }
      }
      for (      MatchRule rule : matchRuleDef.getMatchRules()) {
        EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
        for (        MatchKeyDefinition mkd : matchKeys) {
          if (mkd != null && currentAnaMatchKeys.contains(mkd.getName())) {
            duplicatedKeys.add(mkd.getName());
          }
        }
      }
      return duplicatedKeys;
    }
    /** 
 * DOC yyin Comment method ""isEmptyRule"".
 * @param matchRuleDef
 * @return
 */
    private boolean isEmptyRule(    MatchRuleDefinition matchRuleDef){
      return (matchRuleDef.getBlockKeys() == null || matchRuleDef.getBlockKeys().size() < 1) && (matchRuleDef.getMatchRules() == null || matchRuleDef.getMatchRules().size() < 1);
    }
  }
);
}","/** 
 * validate the selected rule .
 */
private void addValidator(){
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=new Status(IStatus.OK,CorePlugin.PLUGIN_ID,StringUtils.EMPTY);
      if (selection == null || (selection != null && selection.length > 1)) {
        status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
        return status;
      }
 else {
        for (        Object selectObject : selection) {
          if (selectObject instanceof IFile) {
            IFile file=(IFile)selectObject;
            if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
              MatchRuleDefinition matchRuleDef=DQRuleResourceFileHelper.getInstance().findMatchRule(file);
              if (isEmptyRule(matchRuleDef)) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
                return status;
              }
              Set<String> duplicatedKeys=hasDuplicatedKeys(matchRuleDef);
              if (!duplicatedKeys.isEmpty()) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str"",duplicatedKeys.toString()));
                return status;
              }
              if ((dialogType == MATCHGROUP_TYPE || dialogType == RECORD_MATCHING_TYPE) && T_SWOOSH_ALGORITHM.equals(matchRuleDef.getRecordLinkageAlgorithm())) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,""String_Node_Str"");
                return status;
              }
              if (isNeedColumnWarning(matchRuleDef)) {
                String warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
                status=new Status(IStatus.WARNING,CorePlugin.PLUGIN_ID,warningMsg);
              }
            }
          }
        }
      }
      return status;
    }
    /** 
 * check every block keys and match keys, if any key .
 * @param matchRuleDef
 * @return
 */
    private boolean isNeedColumnWarning(    MatchRuleDefinition matchRuleDef){
      boolean needColumnWarning=false;
      if (dialogType != MATCHGROUP_TYPE && dialogType != RECORD_MATCHING_TYPE) {
        for (        BlockKeyDefinition bkd : matchRuleDef.getBlockKeys()) {
          if (!hasColumnMatchTheKey(bkd)) {
            needColumnWarning=true;
            break;
          }
        }
      }
      if (dialogType != GENKEY_TYPE) {
        for (        MatchRule rule : matchRuleDef.getMatchRules()) {
          EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
          for (          MatchKeyDefinition mkd : matchKeys) {
            if (!hasColumnMatchTheKey(mkd)) {
              needColumnWarning=true;
              break;
            }
          }
          if (needColumnWarning) {
            break;
          }
        }
      }
      return needColumnWarning;
    }
    /** 
 * check if the key's name equals the .
 * @param needColumnWarning
 * @param bkd
 * @return
 */
    private boolean hasColumnMatchTheKey(    KeyDefinition bkd){
      for (      String column : inputColumnNames) {
        if (isColumnNameEqualsWithKey(bkd,column)) {
          return true;
        }
      }
      return false;
    }
    /** 
 * check if the match key or survivor key has .if the user has choose ""overwrite"",no need to judge then. Judged according to the selected rule type(vsr or tswoosh)
 * @param matchRuleDef
 * @return
 */
    private Set<String> hasDuplicatedKeys(    MatchRuleDefinition matchRuleDef){
      Set<String> duplicatedKeys=new HashSet<String>();
      if (isOverwrite || currentAnaMatchKeys == null) {
        return duplicatedKeys;
      }
      if (RecordMatcherType.simpleVSRMatcher.name().equals(matchRuleDef.getRecordLinkageAlgorithm()) && matchRuleDef.getBlockKeys() != null && currentAnaBlockKeys != null) {
        for (        BlockKeyDefinition blockKey : matchRuleDef.getBlockKeys()) {
          if (blockKey != null && currentAnaBlockKeys.contains(blockKey.getName())) {
            duplicatedKeys.add(blockKey.getName());
          }
        }
      }
      for (      MatchRule rule : matchRuleDef.getMatchRules()) {
        EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
        for (        MatchKeyDefinition mkd : matchKeys) {
          if (mkd != null && currentAnaMatchKeys.contains(mkd.getName())) {
            duplicatedKeys.add(mkd.getName());
          }
        }
      }
      return duplicatedKeys;
    }
    /** 
 * DOC yyin Comment method ""isEmptyRule"".
 * @param matchRuleDef
 * @return
 */
    private boolean isEmptyRule(    MatchRuleDefinition matchRuleDef){
      return (matchRuleDef.getBlockKeys() == null || matchRuleDef.getBlockKeys().size() < 1) && (matchRuleDef.getMatchRules() == null || matchRuleDef.getMatchRules().size() < 1);
    }
  }
);
}",0.9998976772741226
137122,"/** 
 * check every block keys and match keys, if any key .
 * @param matchRuleDef
 * @return
 */
private boolean isNeedColumnWarning(MatchRuleDefinition matchRuleDef){
  boolean needColumnWarning=false;
  if (dialogType != MATCHGROUP_TYPE && dialogType != RECORD_MATCHING_TYPE) {
    for (    BlockKeyDefinition bkd : matchRuleDef.getBlockKeys()) {
      if (hasColumnMatchTheKey(bkd)) {
        needColumnWarning=true;
        break;
      }
    }
  }
  if (dialogType != GENKEY_TYPE) {
    for (    MatchRule rule : matchRuleDef.getMatchRules()) {
      EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
      for (      MatchKeyDefinition mkd : matchKeys) {
        if (!hasColumnMatchTheKey(mkd)) {
          needColumnWarning=true;
          break;
        }
      }
      if (needColumnWarning) {
        break;
      }
    }
  }
  return needColumnWarning;
}","/** 
 * check every block keys and match keys, if any key .
 * @param matchRuleDef
 * @return
 */
private boolean isNeedColumnWarning(MatchRuleDefinition matchRuleDef){
  boolean needColumnWarning=false;
  if (dialogType != MATCHGROUP_TYPE && dialogType != RECORD_MATCHING_TYPE) {
    for (    BlockKeyDefinition bkd : matchRuleDef.getBlockKeys()) {
      if (!hasColumnMatchTheKey(bkd)) {
        needColumnWarning=true;
        break;
      }
    }
  }
  if (dialogType != GENKEY_TYPE) {
    for (    MatchRule rule : matchRuleDef.getMatchRules()) {
      EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
      for (      MatchKeyDefinition mkd : matchKeys) {
        if (!hasColumnMatchTheKey(mkd)) {
          needColumnWarning=true;
          break;
        }
      }
      if (needColumnWarning) {
        break;
      }
    }
  }
  return needColumnWarning;
}",0.9994275901545506
137123,"/** 
 * validate the selected rule .
 */
private void addValidator(){
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=new Status(IStatus.OK,CorePlugin.PLUGIN_ID,StringUtils.EMPTY);
      if (selection == null || (selection != null && selection.length > 1)) {
        status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
        return status;
      }
 else {
        for (        Object selectObject : selection) {
          if (selectObject instanceof IFile) {
            IFile file=(IFile)selectObject;
            if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
              MatchRuleDefinition matchRuleDef=DQRuleResourceFileHelper.getInstance().findMatchRule(file);
              if (isEmptyRule(matchRuleDef)) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
                return status;
              }
              Set<String> duplicatedKeys=hasDuplicatedKeys(matchRuleDef);
              if (!duplicatedKeys.isEmpty()) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str"",duplicatedKeys.toString()));
                return status;
              }
              if ((dialogType == MATCHGROUP_TYPE || dialogType == RECORD_MATCHING_TYPE) && T_SWOOSH_ALGORITHM.equals(matchRuleDef.getRecordLinkageAlgorithm())) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,""String_Node_Str"");
                return status;
              }
              if (isNeedColumnWarning(matchRuleDef)) {
                String warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
                status=new Status(IStatus.WARNING,CorePlugin.PLUGIN_ID,warningMsg);
              }
            }
          }
        }
      }
      return status;
    }
    /** 
 * check every block keys and match keys, if any key .
 * @param matchRuleDef
 * @return
 */
    private boolean isNeedColumnWarning(    MatchRuleDefinition matchRuleDef){
      boolean needColumnWarning=false;
      if (dialogType != MATCHGROUP_TYPE && dialogType != RECORD_MATCHING_TYPE) {
        for (        BlockKeyDefinition bkd : matchRuleDef.getBlockKeys()) {
          if (hasColumnMatchTheKey(bkd)) {
            needColumnWarning=true;
            break;
          }
        }
      }
      if (dialogType != GENKEY_TYPE) {
        for (        MatchRule rule : matchRuleDef.getMatchRules()) {
          EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
          for (          MatchKeyDefinition mkd : matchKeys) {
            if (!hasColumnMatchTheKey(mkd)) {
              needColumnWarning=true;
              break;
            }
          }
          if (needColumnWarning) {
            break;
          }
        }
      }
      return needColumnWarning;
    }
    /** 
 * check if the key's name equals the .
 * @param needColumnWarning
 * @param bkd
 * @return
 */
    private boolean hasColumnMatchTheKey(    KeyDefinition bkd){
      for (      String column : inputColumnNames) {
        if (isColumnNameEqualsWithKey(bkd,column)) {
          return true;
        }
      }
      return false;
    }
    /** 
 * check if the match key or survivor key has .if the user has choose ""overwrite"",no need to judge then. Judged according to the selected rule type(vsr or tswoosh)
 * @param matchRuleDef
 * @return
 */
    private Set<String> hasDuplicatedKeys(    MatchRuleDefinition matchRuleDef){
      Set<String> duplicatedKeys=new HashSet<String>();
      if (isOverwrite || currentAnaMatchKeys == null) {
        return duplicatedKeys;
      }
      if (RecordMatcherType.simpleVSRMatcher.name().equals(matchRuleDef.getRecordLinkageAlgorithm()) && matchRuleDef.getBlockKeys() != null && currentAnaBlockKeys != null) {
        for (        BlockKeyDefinition blockKey : matchRuleDef.getBlockKeys()) {
          if (blockKey != null && currentAnaBlockKeys.contains(blockKey.getName())) {
            duplicatedKeys.add(blockKey.getName());
          }
        }
      }
      for (      MatchRule rule : matchRuleDef.getMatchRules()) {
        EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
        for (        MatchKeyDefinition mkd : matchKeys) {
          if (mkd != null && currentAnaMatchKeys.contains(mkd.getName())) {
            duplicatedKeys.add(mkd.getName());
          }
        }
      }
      return duplicatedKeys;
    }
    /** 
 * DOC yyin Comment method ""isEmptyRule"".
 * @param matchRuleDef
 * @return
 */
    private boolean isEmptyRule(    MatchRuleDefinition matchRuleDef){
      return (matchRuleDef.getBlockKeys() == null || matchRuleDef.getBlockKeys().size() < 1) && (matchRuleDef.getMatchRules() == null || matchRuleDef.getMatchRules().size() < 1);
    }
  }
);
}","/** 
 * validate the selected rule .
 */
private void addValidator(){
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=new Status(IStatus.OK,CorePlugin.PLUGIN_ID,StringUtils.EMPTY);
      if (selection == null || (selection != null && selection.length > 1)) {
        status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
        return status;
      }
 else {
        for (        Object selectObject : selection) {
          if (selectObject instanceof IFile) {
            IFile file=(IFile)selectObject;
            if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
              MatchRuleDefinition matchRuleDef=DQRuleResourceFileHelper.getInstance().findMatchRule(file);
              if (isEmptyRule(matchRuleDef)) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
                return status;
              }
              Set<String> duplicatedKeys=hasDuplicatedKeys(matchRuleDef);
              if (!duplicatedKeys.isEmpty()) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str"",duplicatedKeys.toString()));
                return status;
              }
              if ((dialogType == MATCHGROUP_TYPE || dialogType == RECORD_MATCHING_TYPE) && T_SWOOSH_ALGORITHM.equals(matchRuleDef.getRecordLinkageAlgorithm())) {
                status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,""String_Node_Str"");
                return status;
              }
              if (isNeedColumnWarning(matchRuleDef)) {
                String warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
                status=new Status(IStatus.WARNING,CorePlugin.PLUGIN_ID,warningMsg);
              }
            }
          }
        }
      }
      return status;
    }
    /** 
 * check every block keys and match keys, if any key .
 * @param matchRuleDef
 * @return
 */
    private boolean isNeedColumnWarning(    MatchRuleDefinition matchRuleDef){
      boolean needColumnWarning=false;
      if (dialogType != MATCHGROUP_TYPE && dialogType != RECORD_MATCHING_TYPE) {
        for (        BlockKeyDefinition bkd : matchRuleDef.getBlockKeys()) {
          if (!hasColumnMatchTheKey(bkd)) {
            needColumnWarning=true;
            break;
          }
        }
      }
      if (dialogType != GENKEY_TYPE) {
        for (        MatchRule rule : matchRuleDef.getMatchRules()) {
          EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
          for (          MatchKeyDefinition mkd : matchKeys) {
            if (!hasColumnMatchTheKey(mkd)) {
              needColumnWarning=true;
              break;
            }
          }
          if (needColumnWarning) {
            break;
          }
        }
      }
      return needColumnWarning;
    }
    /** 
 * check if the key's name equals the .
 * @param needColumnWarning
 * @param bkd
 * @return
 */
    private boolean hasColumnMatchTheKey(    KeyDefinition bkd){
      for (      String column : inputColumnNames) {
        if (isColumnNameEqualsWithKey(bkd,column)) {
          return true;
        }
      }
      return false;
    }
    /** 
 * check if the match key or survivor key has .if the user has choose ""overwrite"",no need to judge then. Judged according to the selected rule type(vsr or tswoosh)
 * @param matchRuleDef
 * @return
 */
    private Set<String> hasDuplicatedKeys(    MatchRuleDefinition matchRuleDef){
      Set<String> duplicatedKeys=new HashSet<String>();
      if (isOverwrite || currentAnaMatchKeys == null) {
        return duplicatedKeys;
      }
      if (RecordMatcherType.simpleVSRMatcher.name().equals(matchRuleDef.getRecordLinkageAlgorithm()) && matchRuleDef.getBlockKeys() != null && currentAnaBlockKeys != null) {
        for (        BlockKeyDefinition blockKey : matchRuleDef.getBlockKeys()) {
          if (blockKey != null && currentAnaBlockKeys.contains(blockKey.getName())) {
            duplicatedKeys.add(blockKey.getName());
          }
        }
      }
      for (      MatchRule rule : matchRuleDef.getMatchRules()) {
        EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
        for (        MatchKeyDefinition mkd : matchKeys) {
          if (mkd != null && currentAnaMatchKeys.contains(mkd.getName())) {
            duplicatedKeys.add(mkd.getName());
          }
        }
      }
      return duplicatedKeys;
    }
    /** 
 * DOC yyin Comment method ""isEmptyRule"".
 * @param matchRuleDef
 * @return
 */
    private boolean isEmptyRule(    MatchRuleDefinition matchRuleDef){
      return (matchRuleDef.getBlockKeys() == null || matchRuleDef.getBlockKeys().size() < 1) && (matchRuleDef.getMatchRules() == null || matchRuleDef.getMatchRules().size() < 1);
    }
  }
);
}",0.9998976772741226
137124,"/** 
 * Test method for   {@link org.talend.dq.helper.ReportUtils#getTheLatestReport(org.eclipse.core.resources.IFile)}.
 */
@Test public void testGetTheLatestReport(){
  if (this.realProject != null) {
    String folderName1=ERepositoryObjectType.TDQ_DATA_PROFILING.getFolder();
    String folderName2=ERepositoryObjectType.TDQ_REPORT_ELEMENT.getFolder();
    String reportName=""String_Node_Str"" + StringUtilities.getRandomString(7);
    UnitTestBuildHelper.createRealFolder(this.realProject,folderName1);
    IFolder folder2=UnitTestBuildHelper.createRealFolder(this.realProject,folderName2);
    IFile iFile=UnitTestBuildHelper.createRealFile(folder2,reportName + ""String_Node_Str"");
    assertTrue(iFile.exists());
    assertTrue(WorkspaceUtils.ifileToFile(iFile).exists());
    ReportListParameters reportListParameters=ReportUtils.getTheLatestReport(iFile);
    assertNotNull(reportListParameters);
  }
 else {
    fail(""String_Node_Str"");
  }
}","/** 
 * Test method for   {@link org.talend.dq.helper.ReportUtils#getTheLatestReport(org.eclipse.core.resources.IFile)}.
 * @throws Exception
 */
@Test public void testGetTheLatestReport() throws Exception {
  if (this.realProject != null) {
    String folderName1=ERepositoryObjectType.TDQ_DATA_PROFILING.getFolder();
    String folderName2=ERepositoryObjectType.TDQ_REPORT_ELEMENT.getFolder();
    String reportName=""String_Node_Str"" + StringUtilities.getRandomString(7);
    UnitTestBuildHelper.createRealFolder(this.realProject,folderName1);
    IFolder folder2=UnitTestBuildHelper.createRealFolder(this.realProject,folderName2);
    IFile iFile=UnitTestBuildHelper.createRealFile(folder2,reportName + ""String_Node_Str"");
    assertTrue(iFile.exists());
    assertTrue(WorkspaceUtils.ifileToFile(iFile).exists());
    ReportUtils.recordReportFiles(iFile,""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis());
    ReportUtils.recordReportFiles(iFile,""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis());
    ReportUtils.recordReportFiles(iFile,""String_Node_Str"",""String_Node_Str"",System.currentTimeMillis());
    ReportListParameters lastest=ReportUtils.getTheLatestReport(iFile);
    assertNotNull(lastest);
    Assert.assertEquals(""String_Node_Str"",lastest.getName());
  }
 else {
    fail(""String_Node_Str"");
  }
}",0.7783595113438045
137125,"public java.util.Map.Entry<K,V> lowerEntry(K key){
  return dbMap.lowerEntry(key);
}","@Override public java.util.Map.Entry<K,V> lowerEntry(K key){
  return dbMap.lowerEntry(key);
}",0.9438202247191012
137126,"public NavigableSet<K> descendingKeySet(){
  return dbMap.descendingKeySet();
}","@Override public NavigableSet<K> descendingKeySet(){
  return dbMap.descendingKeySet();
}",0.9404761904761904
137127,"public java.util.Map.Entry<K,V> ceilingEntry(K key){
  return dbMap.ceilingEntry(key);
}","@Override public java.util.Map.Entry<K,V> ceilingEntry(K key){
  return dbMap.ceilingEntry(key);
}",0.946236559139785
137128,"public ConcurrentNavigableMap<K,V> descendingMap(){
  return dbMap.descendingMap();
}","@Override public ConcurrentNavigableMap<K,V> descendingMap(){
  return dbMap.descendingMap();
}",0.9444444444444444
137129,"public Collection<V> values(){
  return dbMap.values();
}","@Override public Collection<V> values(){
  return dbMap.values();
}",0.9193548387096774
137130,"public V replace(K key,V value){
  return dbMap.replace(key,value);
}","@Override public V replace(K key,V value){
  return dbMap.replace(key,value);
}",0.9324324324324323
137131,"public NavigableSet<K> navigableKeySet(){
  return dbMap.navigableKeySet();
}","@Override public NavigableSet<K> navigableKeySet(){
  return dbMap.navigableKeySet();
}",0.9390243902439024
137132,"public java.util.Map.Entry<K,V> higherEntry(K key){
  return dbMap.higherEntry(key);
}","@Override public java.util.Map.Entry<K,V> higherEntry(K key){
  return dbMap.higherEntry(key);
}",0.945054945054945
137133,"public boolean containsValue(Object value){
  return dbMap.containsValue(value);
}","@Override public boolean containsValue(Object value){
  return dbMap.containsValue(value);
}",0.942528735632184
137134,"@SuppressWarnings(""String_Node_Str"") public V put(K key,V value){
  if (key == null) {
    return dbMap.put((K)EMPTY,value);
  }
  return dbMap.put(key,value);
}","@Override @SuppressWarnings(""String_Node_Str"") public V put(K key,V value){
  if (key == null) {
    return dbMap.put((K)EMPTY,value);
  }
  return dbMap.put(key,value);
}",0.9698795180722892
137135,"public boolean remove(Object key,Object value){
  return dbMap.remove(key,value);
}","@Override public boolean remove(Object key,Object value){
  return dbMap.remove(key,value);
}",0.9431818181818182
137136,"public java.util.Map.Entry<K,V> pollFirstEntry(){
  return dbMap.pollFirstEntry();
}","@Override public java.util.Map.Entry<K,V> pollFirstEntry(){
  return dbMap.pollFirstEntry();
}",0.9438202247191012
137137,"public K higherKey(K key){
  return dbMap.higherKey(key);
}","@Override public K higherKey(K key){
  return dbMap.higherKey(key);
}",0.921875
137138,"public V get(Object key){
  if (key == null) {
    return dbMap.get(EMPTY);
  }
  return dbMap.get(key);
}","@Override public V get(Object key){
  if (key == null) {
    return dbMap.get(EMPTY);
  }
  return dbMap.get(key);
}",0.954954954954955
137139,"public void putAll(Map<? extends K,? extends V> m){
  dbMap.putAll(m);
}","@Override public void putAll(Map<? extends K,? extends V> m){
  dbMap.putAll(m);
}",0.935064935064935
137140,"public K lastKey(){
  return dbMap.lastKey();
}","@Override public K lastKey(){
  return dbMap.lastKey();
}",0.903846153846154
137141,"public java.util.Map.Entry<K,V> firstEntry(){
  return dbMap.firstEntry();
}","@Override public java.util.Map.Entry<K,V> firstEntry(){
  return dbMap.firstEntry();
}",0.9382716049382716
137142,"public NavigableSet<K> keySet(){
  return dbMap.keySet();
}","@Override public NavigableSet<K> keySet(){
  return dbMap.keySet();
}",0.921875
137143,"public K floorKey(K key){
  return dbMap.floorKey(key);
}","@Override public K floorKey(K key){
  return dbMap.floorKey(key);
}",0.9193548387096774
137144,"public Set<java.util.Map.Entry<K,V>> entrySet(){
  return dbMap.entrySet();
}","@Override public Set<java.util.Map.Entry<K,V>> entrySet(){
  return dbMap.entrySet();
}",0.9390243902439024
137145,"public boolean containsKey(Object key){
  if (key == null) {
    return dbMap.containsKey(EMPTY);
  }
  return dbMap.containsKey(key);
}","@Override public boolean containsKey(Object key){
  if (key == null) {
    return dbMap.containsKey(EMPTY);
  }
  return dbMap.containsKey(key);
}",0.9645390070921984
137146,"public java.util.Map.Entry<K,V> floorEntry(K key){
  return dbMap.floorEntry(key);
}","@Override public java.util.Map.Entry<K,V> floorEntry(K key){
  return dbMap.floorEntry(key);
}",0.9438202247191012
137147,"public ConcurrentNavigableMap<K,V> subMap(K fromKey,K toKey){
  return dbMap.subMap(fromKey,toKey);
}","@Override public ConcurrentNavigableMap<K,V> subMap(K fromKey,K toKey){
  return dbMap.subMap(fromKey,toKey);
}",0.9528301886792452
137148,"public void clear(){
  this.getDB().delete(mapName);
  this.getDB().getEngine().clearCache();
}","@Override public void clear(){
  if (!getDB().isClosed()) {
    dbMap.clear();
    this.getDB().delete(mapName);
    this.getDB().getEngine().clearCache();
  }
}",0.7421875
137149,"public K ceilingKey(K key){
  return dbMap.ceilingKey(key);
}","@Override public K ceilingKey(K key){
  return dbMap.ceilingKey(key);
}",0.9242424242424242
137150,"public java.util.Map.Entry<K,V> pollLastEntry(){
  return dbMap.pollLastEntry();
}","@Override public java.util.Map.Entry<K,V> pollLastEntry(){
  return dbMap.pollLastEntry();
}",0.942528735632184
137151,"public Comparator<? super K> comparator(){
  return dbMap.comparator();
}","@Override public Comparator<? super K> comparator(){
  return dbMap.comparator();
}",0.935897435897436
137152,"public java.util.Map.Entry<K,V> lastEntry(){
  return dbMap.lastEntry();
}","@Override public java.util.Map.Entry<K,V> lastEntry(){
  return dbMap.lastEntry();
}",0.9367088607594936
137153,"public K firstKey(){
  return dbMap.firstKey();
}","@Override public K firstKey(){
  return dbMap.firstKey();
}",0.9074074074074074
137154,"public K lowerKey(K key){
  return dbMap.lowerKey(key);
}","@Override public K lowerKey(K key){
  return dbMap.lowerKey(key);
}",0.9193548387096774
137155,"public ConcurrentNavigableMap<K,V> headMap(K toKey){
  return dbMap.headMap(toKey);
}","@Override public ConcurrentNavigableMap<K,V> headMap(K toKey){
  return dbMap.headMap(toKey);
}",0.9444444444444444
137156,"public V putIfAbsent(K key,V value){
  return dbMap.putIfAbsent(key,value);
}","@Override public V putIfAbsent(K key,V value){
  return dbMap.putIfAbsent(key,value);
}",0.9390243902439024
137157,"public ConcurrentNavigableMap<K,V> tailMap(K fromKey){
  return dbMap.tailMap(fromKey);
}","@Override public ConcurrentNavigableMap<K,V> tailMap(K fromKey){
  return dbMap.tailMap(fromKey);
}",0.946808510638298
137158,"@Override public boolean reset(){
  if (this.isUsedMapDBMode()) {
    if (needReconnect((AbstractDB<?>)duplicateMap)) {
      duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
      if (duplicateMap != null) {
        duplicateMap.clear();
      }
    }
    if (needReconnect((AbstractDB<?>)duplicateMap)) {
      duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
      if (duplicateObjects != null) {
        duplicateObjects.clear();
      }
    }
  }
  return super.reset();
}","@Override public boolean reset(){
  if (this.isUsedMapDBMode()) {
    if (needReconnect((AbstractDB<?>)duplicateMap)) {
      duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
      duplicateMap.clear();
    }
    if (needReconnect((AbstractDB<?>)duplicateObjects)) {
      duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
      duplicateObjects.clear();
    }
  }
 else {
    duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
    duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
    duplicateMap.clear();
    duplicateObjects.clear();
  }
  return super.reset();
}",0.6621735467565291
137159,"@Override public DataSet getCurrentPageDataSet(){
  long pageSize=endIndex - startIndex;
  Comparable[][] compareArray=new Comparable[(int)(pageSize)][this.getColumns().length];
  List<Object[]> subList=MapDBUtils.getDefault().getDataSetDBMapSubList(this.dataMap,startIndex,endIndex,null);
  if (columnFilter != null) {
    subList=columnFilter.filterArray(subList);
  }
  for (int i=0; i < pageSize; i++) {
    Object[] objArray=subList.get(i);
    for (int j=0; j < this.getColumns().length; j++) {
      compareArray[i][j]=(Comparable)objArray[j];
    }
  }
  return new DataSet(this.columnHeads,compareArray);
}","@Override public DataSet getCurrentPageDataSet(){
  long pageSize=endIndex - startIndex;
  List<Object[]> subList=MapDBUtils.getDefault().getDataSetDBMapSubList(this.dataMap,startIndex,endIndex,null);
  if (columnFilter != null) {
    subList=columnFilter.filterArray(subList);
  }
  int count=(int)(pageSize > subList.size() ? subList.size() : pageSize);
  Comparable[][] compareArray=new Comparable[(count)][this.getColumns().length];
  for (int i=0; i < count; i++) {
    Object[] objArray=subList.get(i);
    for (int j=0; j < objArray.length; j++) {
      compareArray[i][j]=(Comparable)objArray[j];
    }
  }
  return new DataSet(this.columnHeads,compareArray);
}",0.780373831775701
137160,"@Override public boolean reset(){
  if (this.isUsedMapDBMode()) {
    if (needReconnect((AbstractDB<?>)duplicateMap)) {
      duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
      duplicateMap.clear();
    }
    if (needReconnect((AbstractDB<?>)duplicateObjects)) {
      duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
      duplicateObjects.clear();
    }
  }
 else {
    duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
    duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
    duplicateMap.clear();
    duplicateObjects.clear();
  }
  return super.reset();
}","@Override public boolean reset(){
  if (this.isUsedMapDBMode()) {
    if (needReconnect((AbstractDB<?>)duplicateMap)) {
      duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
    }
    duplicateMap.clear();
    if (needReconnect((AbstractDB<?>)duplicateObjects)) {
      duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
    }
    duplicateObjects.clear();
  }
 else {
    duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
    duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
    duplicateMap.clear();
    duplicateObjects.clear();
  }
  return super.reset();
}",0.5842185128983308
137161,"@Override public boolean reset(){
  this.uniqueValueCount=UNIQUE_VALUE_COUNT_EDEFAULT;
  if (isUsedMapDBMode()) {
    if (uniqueObjects != null) {
      ((DBSet<Object>)uniqueObjects).clear();
    }
    uniqueObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
    if (duplicateObjects != null) {
      ((DBSet<Object>)duplicateObjects).clear();
    }
    duplicateObjects=initValueForDBSet(StandardDBName.temp.name());
  }
 else {
    this.uniqueObjects.clear();
    this.duplicateObjects.clear();
  }
  return super.reset();
}","@Override public boolean reset(){
  this.uniqueValueCount=UNIQUE_VALUE_COUNT_EDEFAULT;
  if (isUsedMapDBMode()) {
    uniqueObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
    if (uniqueObjects != null) {
      ((DBSet<Object>)uniqueObjects).clear();
    }
    duplicateObjects=initValueForDBSet(StandardDBName.temp.name());
    if (duplicateObjects != null) {
      ((DBSet<Object>)duplicateObjects).clear();
    }
  }
 else {
    this.uniqueObjects.clear();
    this.duplicateObjects.clear();
  }
  return super.reset();
}",0.8382352941176471
137162,"/** 
 * DOC talend Comment method ""cancelCloseTask"".
 * @param db
 */
protected void cancelCloseTask(DB db){
  CloseDBTimeTask closeDBTimeTask=closeTaskMap.get(db);
  if (closeDBTimeTask != null) {
    closeDBTimeTask.cancel();
    timer.purge();
    closeTaskMap.remove(closeDBTimeTask);
  }
}","/** 
 * DOC talend Comment method ""cancelCloseTask"".
 * @param db
 */
protected void cancelCloseTask(DB db){
  CloseDBTimeTask closeDBTimeTask=closeTaskMap.get(db);
  if (closeDBTimeTask != null) {
    closeDBTimeTask.cancel();
    timer.purge();
    closeTaskMap.remove(db);
  }
}",0.9704347826086956
137163,"@Override public boolean reset(){
  this.duplicateValueCount=DUPLICATE_VALUE_COUNT_EDEFAULT;
  if (duplicateMap != null) {
    duplicateMap.clear();
  }
  duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
  if (duplicateObjects != null) {
    duplicateObjects.clear();
  }
  duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
  return super.reset();
}","@Override public boolean reset(){
  if (this.isUsedMapDBMode()) {
    if (needReconnect((AbstractDB<?>)duplicateMap)) {
      duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
      if (duplicateMap != null) {
        duplicateMap.clear();
      }
    }
    if (needReconnect((AbstractDB<?>)duplicateMap)) {
      duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
      if (duplicateObjects != null) {
        duplicateObjects.clear();
      }
    }
  }
  return super.reset();
}",0.5178764897074756
137164,"private void handleByARow(String[] rowValues,long currentRow,List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  Object object=null;
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  int recordIncrement=0;
  element:   for (int i=0; i < analysisElementList.size(); i++) {
    MetadataColumn mColumn=(MetadataColumn)analysisElementList.get(i);
    Integer position=ColumnHelper.getColumnIndex(mColumn);
    if (position == null || position >= rowValues.length) {
      log.warn(Messages.getString(""String_Node_Str"",mColumn.getLabel(),currentRow,delimitedFileconnection.getFilePath()));
      if (!isBablyForm) {
        isBablyForm=true;
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
);
      }
      continue;
    }
    object=TalendTypeConvert.convertToObject(mColumn.getTalendType(),rowValues[position],mColumn.getPattern());
    List<Indicator> indicators=getIndicators(mColumn.getLabel());
    for (    Indicator indicator : indicators) {
      indicator.setDrillDownLimitSize(Long.valueOf(maxNumberRows));
      if (!continueRun()) {
        break element;
      }
      if (object == null && !(indicator instanceof RowCountIndicator)) {
        continue element;
      }
      if (indicator instanceof DuplicateCountIndicator) {
        ((DuplicateCountIndicator)indicator).handle(object,rowValues);
      }
 else {
        indicator.handle(object);
      }
      AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
      if (analyzedDataSet == null) {
        analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
        indicToRowMap.put(indicator,analyzedDataSet);
        analyzedDataSet.setDataCount(maxNumberRows);
        analyzedDataSet.setRecordSize(0);
      }
      if (analysis.getParameters().isStoreData()) {
        if (indicator.mustStoreRow()) {
          List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
          recordIncrement=valueObjectList.size();
          for (int j=0; j < rowValues.length; j++) {
            Object newobject=rowValues[j];
            if (indicator.isUsedMapDBMode()) {
              indicator.handleDrillDownData(object,newobject,rowValues.length,j,mColumn.getLabel());
              continue;
            }
 else {
              if (recordIncrement < maxNumberRows) {
                if (recordIncrement < valueObjectList.size()) {
                  valueObjectList.get(recordIncrement)[j]=newobject;
                }
 else {
                  Object[] valueObject=new Object[rowValues.length];
                  valueObject[j]=newobject;
                  valueObjectList.add(valueObject);
                }
              }
 else {
                break;
              }
            }
          }
        }
 else         if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
          List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
          if (columnElementList.size() == 0) {
            continue;
          }
          int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
          for (          Object[] dataObject : removeValueObjectList) {
            if (object instanceof Integer) {
              if (object.equals(Integer.parseInt((String)dataObject[offsetting]))) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
            if (dataObject[offsetting].equals(object)) {
              removeValueObjectList.remove(dataObject);
              break;
            }
          }
        }
      }
    }
  }
}","private void handleByARow(String[] rowValues,long currentRow,List<ModelElement> analysisElementList,List<MetadataColumn> columnElementList,EMap<Indicator,AnalyzedDataSet> indicToRowMap){
  Object object=null;
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  int recordIncrement=0;
  element:   for (int i=0; i < analysisElementList.size(); i++) {
    MetadataColumn mColumn=(MetadataColumn)analysisElementList.get(i);
    Integer position=ColumnHelper.getColumnIndex(mColumn);
    if (position == null || position >= rowValues.length) {
      log.warn(Messages.getString(""String_Node_Str"",mColumn.getLabel(),currentRow,delimitedFileconnection.getFilePath()));
      if (!isBablyForm) {
        isBablyForm=true;
        Display.getDefault().asyncExec(new Runnable(){
          public void run(){
            MessageDialog.openWarning(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
);
      }
      continue;
    }
    object=TalendTypeConvert.convertToObject(mColumn.getTalendType(),rowValues[position],mColumn.getPattern());
    List<Indicator> indicators=getIndicators(mColumn.getLabel());
    for (    Indicator indicator : indicators) {
      indicator.setDrillDownLimitSize(Long.valueOf(maxNumberRows));
      if (!continueRun()) {
        break element;
      }
      if (object == null && !(indicator instanceof RowCountIndicator)) {
        continue element;
      }
      if (indicator instanceof DuplicateCountIndicator) {
        ((DuplicateCountIndicator)indicator).handle(object,rowValues);
      }
 else {
        indicator.handle(object);
      }
      AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
      if (analyzedDataSet == null) {
        analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
        indicToRowMap.put(indicator,analyzedDataSet);
        analyzedDataSet.setDataCount(maxNumberRows);
        analyzedDataSet.setRecordSize(0);
      }
      if (analysis.getParameters().isStoreData()) {
        if (indicator.mustStoreRow()) {
          List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
          recordIncrement=valueObjectList.size();
          List<Object> inputRowList=new ArrayList<Object>();
          for (int j=0; j < rowValues.length; j++) {
            Object newobject=rowValues[j];
            if (indicator.isUsedMapDBMode()) {
              inputRowList.add(newobject == null ? PluginConstant.NULL_STRING : newobject);
              continue;
            }
 else {
              if (recordIncrement < maxNumberRows) {
                if (recordIncrement < valueObjectList.size()) {
                  valueObjectList.get(recordIncrement)[j]=newobject;
                }
 else {
                  Object[] valueObject=new Object[rowValues.length];
                  valueObject[j]=newobject;
                  valueObjectList.add(valueObject);
                }
              }
 else {
                break;
              }
            }
          }
          if (indicator.isUsedMapDBMode()) {
            indicator.handleDrillDownData(object,inputRowList);
          }
        }
 else         if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
          List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
          if (columnElementList.size() == 0) {
            continue;
          }
          int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
          for (          Object[] dataObject : removeValueObjectList) {
            if (object instanceof Integer) {
              if (object.equals(Integer.parseInt((String)dataObject[offsetting]))) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
            if (dataObject[offsetting].equals(object)) {
              removeValueObjectList.remove(dataObject);
              break;
            }
          }
        }
      }
    }
  }
}",0.8534234572537238
137165,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=createStatement();
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"",sqlStatement);
    log.warn(mess);
    ok.setReturnCode(mess,false);
    statement.close();
    return ok;
  }
  ok=getMessageForInvalidJUDIs();
  int columnCount=resultSet.getMetaData().getColumnCount();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int columnListSize=columnlist.size();
  label:   while (resultSet.next()) {
    for (int i=0; i < columnListSize; i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(col);
      Object object=null;
      try {
        object=resultSet.getObject(col);
      }
 catch (      SQLException e) {
        if (""String_Node_Str"".equals(resultSet.getString(col))) {
          object=null;
        }
      }
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        indicator.setDrillDownLimitSize(Long.valueOf(maxNumberRows));
        if (!continueRun()) {
          break label;
        }
        if (indicator instanceof DuplicateCountIndicator) {
          ((DuplicateCountIndicator)indicator).handle(object,resultSet,columnCount);
        }
 else {
          indicator.handle(object);
        }
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData()) {
          if (indicator.mustStoreRow()) {
            List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
            recordIncrement=valueObjectList.size();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnList=ColumnSetHelper.getColumns(doSwitch);
            for (int j=0; j < columnCount; j++) {
              String newcol=columnList.get(j).getName();
              Object newobject=null;
              try {
                newobject=resultSet.getObject(newcol);
              }
 catch (              SQLException e) {
                if (""String_Node_Str"".equals(resultSet.getString(newcol))) {
                  newobject=null;
                }
              }
              if (indicator.isUsedMapDBMode()) {
                indicator.handleDrillDownData(object,newobject,columnCount,j,newcol);
                continue;
              }
 else {
                if (recordIncrement < maxNumberRows) {
                  if (recordIncrement < valueObjectList.size()) {
                    valueObjectList.get(recordIncrement)[j]=newobject;
                  }
 else {
                    Object[] valueObject=new Object[columnCount];
                    valueObject[j]=newobject;
                    valueObjectList.add(valueObject);
                  }
                }
 else {
                  break;
                }
              }
            }
          }
 else           if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
            List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnElementList=ColumnSetHelper.getColumns(doSwitch);
            int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
            for (            Object[] dataObject : removeValueObjectList) {
              if (dataObject[offsetting].equals(object)) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
          }
        }
      }
    }
  }
  for (int i=0; i < columnListSize; i++) {
    String col=columnlist.get(i);
    List<Indicator> indicators=getIndicators(col);
    if (indicators.size() > 0 && indicators.get(0).isUsedMapDBMode()) {
      break;
    }
    for (    Indicator indicator : indicators) {
      if (indicator instanceof DuplicateCountIndicator) {
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        addResultToIndicatorToRowMap(indicator,indicToRowMap,maxNumberRows,columnCount);
      }
    }
  }
  resultSet.close();
  statement.close();
  getConnection().close();
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=createStatement();
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"",sqlStatement);
    log.warn(mess);
    ok.setReturnCode(mess,false);
    statement.close();
    return ok;
  }
  ok=getMessageForInvalidJUDIs();
  int columnCount=resultSet.getMetaData().getColumnCount();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int columnListSize=columnlist.size();
  label:   while (resultSet.next()) {
    for (int i=0; i < columnListSize; i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(col);
      Object object=null;
      try {
        object=resultSet.getObject(col);
      }
 catch (      SQLException e) {
        if (""String_Node_Str"".equals(resultSet.getString(col))) {
          object=null;
        }
      }
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        indicator.setDrillDownLimitSize(Long.valueOf(maxNumberRows));
        if (!continueRun()) {
          break label;
        }
        if (indicator instanceof DuplicateCountIndicator) {
          ((DuplicateCountIndicator)indicator).handle(object,resultSet,columnCount);
        }
 else {
          indicator.handle(object);
        }
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData()) {
          if (indicator.mustStoreRow()) {
            List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
            recordIncrement=valueObjectList.size();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnList=ColumnSetHelper.getColumns(doSwitch);
            List<Object> inputRowList=new ArrayList<Object>();
            for (int j=0; j < columnCount; j++) {
              String newcol=columnList.get(j).getName();
              Object newobject=null;
              try {
                newobject=resultSet.getObject(newcol);
              }
 catch (              SQLException e) {
                if (""String_Node_Str"".equals(resultSet.getString(newcol))) {
                  newobject=null;
                }
              }
              if (indicator.isUsedMapDBMode()) {
                inputRowList.add(newobject == null ? PluginConstant.NULL_STRING : newobject);
                continue;
              }
 else {
                if (recordIncrement < maxNumberRows) {
                  if (recordIncrement < valueObjectList.size()) {
                    valueObjectList.get(recordIncrement)[j]=newobject;
                  }
 else {
                    Object[] valueObject=new Object[columnCount];
                    valueObject[j]=newobject;
                    valueObjectList.add(valueObject);
                  }
                }
 else {
                  break;
                }
              }
            }
            if (indicator.isUsedMapDBMode()) {
              indicator.handleDrillDownData(object,inputRowList);
            }
          }
 else           if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
            List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnElementList=ColumnSetHelper.getColumns(doSwitch);
            int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
            for (            Object[] dataObject : removeValueObjectList) {
              if (dataObject[offsetting].equals(object)) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
          }
        }
      }
    }
  }
  for (int i=0; i < columnListSize; i++) {
    String col=columnlist.get(i);
    List<Indicator> indicators=getIndicators(col);
    if (indicators.size() > 0 && indicators.get(0).isUsedMapDBMode()) {
      break;
    }
    for (    Indicator indicator : indicators) {
      if (indicator instanceof DuplicateCountIndicator) {
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        addResultToIndicatorToRowMap(indicator,indicToRowMap,maxNumberRows,columnCount);
      }
    }
  }
  resultSet.close();
  statement.close();
  getConnection().close();
  return ok;
}",0.9751647237709072
137166,"@SuppressWarnings(""String_Node_Str"") @Override public void handleDrillDownData(Object masterObject,Object currentObject,int columnCount,int currentIndex,String currentColumnName){
  String dbName=getDBName(masterObject);
  drillDownMap=(DBMap<Object,List<Object>>)getMapDB(dbName);
  super.handleDrillDownData(masterObject,currentObject,columnCount,currentIndex,currentColumnName);
}","@SuppressWarnings(""String_Node_Str"") @Override public void handleDrillDownData(Object masterObject,List<Object> inputRowList){
  String dbName=getDBName(masterObject);
  drillDownMap=(DBMap<Object,List<Object>>)getMapDB(dbName);
  super.handleDrillDownData(masterObject,inputRowList);
}",0.7443946188340808
137167,"@Override public void handleDrillDownData(Object masterObject,Object currentObject,int columnCount,int currentIndex,String currentColumnName){
  List<Object> rowData=drillDownMap.get(count);
  if (rowData == null) {
    rowData=new ArrayList<Object>();
    drillDownMap.put(count,rowData);
    this.drillDownRowCount++;
  }
  rowData.add(currentObject == null ? PluginConstant.NULL_STRING : currentObject);
}","@Override public void handleDrillDownData(Object masterObject,List<Object> inputRowList){
  drillDownRowCount++;
  drillDownMap.put(count,inputRowList);
}",0.4590747330960854
137168,"@Override public void handleDrillDownData(Object masterObject,Object currentObject,int columnCount,int currentIndex,String currentColumnName){
  String dbName=getDBName(masterObject);
  drillDownMap=(DBMap<Object,List<Object>>)getMapDB(dbName);
  super.handleDrillDownData(masterObject,currentObject,columnCount,currentIndex,currentColumnName);
}","@SuppressWarnings(""String_Node_Str"") @Override public void handleDrillDownData(Object masterObject,List<Object> inputRowList){
  String dbName=getDBName(masterObject);
  drillDownMap=(DBMap<Object,List<Object>>)getMapDB(dbName);
  super.handleDrillDownData(masterObject,inputRowList);
}",0.6708860759493671
137169,"@Override public void handleDrillDownData(Object masterObject,Object currentObject,int columnCount,int currentIndex,String currentColumnName){
  List<Object> rowData=drillDownMap.get(masterObject);
  if (rowData == null) {
    rowData=new ArrayList<Object>();
    drillDownMap.put(masterObject,rowData);
    this.drillDownRowCount++;
  }
  rowData.add(currentObject == null ? PluginConstant.NULL_STRING : currentObject);
}","@Override public void handleDrillDownData(Object masterObject,List<Object> inputRowList){
  drillDownRowCount++;
  drillDownMap.put(masterObject,inputRowList);
}",0.4562607204116638
137170,"/** 
 * DOC talend Comment method ""handleDrillDownData"".
 * @param masterObject
 * @param currentObject
 * @param columnCount
 * @param currentIndex
 * @param currentColumnName
 */
void handleDrillDownData(Object masterObject,Object currentObject,int columnCount,int currentIndex,String currentColumnName);","/** 
 * DOC msjian Comment method ""handleDrillDownData"".
 * @param masterObject
 * @param inputRowList
 */
void handleDrillDownData(Object masterObject,List<Object> inputRowList);",0.6309278350515464
137171,"public java.util.Map.Entry<K,V> lowerEntry(K key){
  return dbMap.lowerEntry(key);
}","@Override public java.util.Map.Entry<K,V> lowerEntry(K key){
  return dbMap.lowerEntry(key);
}",0.9438202247191012
137172,"public NavigableSet<K> descendingKeySet(){
  return dbMap.descendingKeySet();
}","@Override public NavigableSet<K> descendingKeySet(){
  return dbMap.descendingKeySet();
}",0.9404761904761904
137173,"public java.util.Map.Entry<K,V> ceilingEntry(K key){
  return dbMap.ceilingEntry(key);
}","@Override public java.util.Map.Entry<K,V> ceilingEntry(K key){
  return dbMap.ceilingEntry(key);
}",0.946236559139785
137174,"public ConcurrentNavigableMap<K,V> descendingMap(){
  return dbMap.descendingMap();
}","@Override public ConcurrentNavigableMap<K,V> descendingMap(){
  return dbMap.descendingMap();
}",0.9444444444444444
137175,"public Collection<V> values(){
  return dbMap.values();
}","@Override public Collection<V> values(){
  return dbMap.values();
}",0.9193548387096774
137176,"public V replace(K key,V value){
  return dbMap.replace(key,value);
}","@Override public V replace(K key,V value){
  return dbMap.replace(key,value);
}",0.9324324324324323
137177,"public NavigableSet<K> navigableKeySet(){
  return dbMap.navigableKeySet();
}","@Override public NavigableSet<K> navigableKeySet(){
  return dbMap.navigableKeySet();
}",0.9390243902439024
137178,"public java.util.Map.Entry<K,V> higherEntry(K key){
  return dbMap.higherEntry(key);
}","@Override public java.util.Map.Entry<K,V> higherEntry(K key){
  return dbMap.higherEntry(key);
}",0.945054945054945
137179,"public boolean containsValue(Object value){
  return dbMap.containsValue(value);
}","@Override public boolean containsValue(Object value){
  return dbMap.containsValue(value);
}",0.942528735632184
137180,"@SuppressWarnings(""String_Node_Str"") public V put(K key,V value){
  if (key == null) {
    return dbMap.put((K)EMPTY,value);
  }
  return dbMap.put(key,value);
}","@Override @SuppressWarnings(""String_Node_Str"") public V put(K key,V value){
  if (key == null) {
    return dbMap.put((K)EMPTY,value);
  }
  return dbMap.put(key,value);
}",0.9698795180722892
137181,"public boolean remove(Object key,Object value){
  return dbMap.remove(key,value);
}","@Override public boolean remove(Object key,Object value){
  return dbMap.remove(key,value);
}",0.9431818181818182
137182,"public java.util.Map.Entry<K,V> pollFirstEntry(){
  return dbMap.pollFirstEntry();
}","@Override public java.util.Map.Entry<K,V> pollFirstEntry(){
  return dbMap.pollFirstEntry();
}",0.9438202247191012
137183,"public K higherKey(K key){
  return dbMap.higherKey(key);
}","@Override public K higherKey(K key){
  return dbMap.higherKey(key);
}",0.921875
137184,"public V get(Object key){
  if (key == null) {
    return dbMap.get(EMPTY);
  }
  return dbMap.get(key);
}","@Override public V get(Object key){
  if (key == null) {
    return dbMap.get(EMPTY);
  }
  return dbMap.get(key);
}",0.954954954954955
137185,"public void putAll(Map<? extends K,? extends V> m){
  dbMap.putAll(m);
}","@Override public void putAll(Map<? extends K,? extends V> m){
  dbMap.putAll(m);
}",0.935064935064935
137186,"public K lastKey(){
  return dbMap.lastKey();
}","@Override public K lastKey(){
  return dbMap.lastKey();
}",0.903846153846154
137187,"public java.util.Map.Entry<K,V> firstEntry(){
  return dbMap.firstEntry();
}","@Override public java.util.Map.Entry<K,V> firstEntry(){
  return dbMap.firstEntry();
}",0.9382716049382716
137188,"public NavigableSet<K> keySet(){
  return dbMap.keySet();
}","@Override public NavigableSet<K> keySet(){
  return dbMap.keySet();
}",0.921875
137189,"public K floorKey(K key){
  return dbMap.floorKey(key);
}","@Override public K floorKey(K key){
  return dbMap.floorKey(key);
}",0.9193548387096774
137190,"public Set<java.util.Map.Entry<K,V>> entrySet(){
  return dbMap.entrySet();
}","@Override public Set<java.util.Map.Entry<K,V>> entrySet(){
  return dbMap.entrySet();
}",0.9390243902439024
137191,"public boolean containsKey(Object key){
  if (key == null) {
    return dbMap.containsKey(EMPTY);
  }
  return dbMap.containsKey(key);
}","@Override public boolean containsKey(Object key){
  if (key == null) {
    return dbMap.containsKey(EMPTY);
  }
  return dbMap.containsKey(key);
}",0.9645390070921984
137192,"public java.util.Map.Entry<K,V> floorEntry(K key){
  return dbMap.floorEntry(key);
}","@Override public java.util.Map.Entry<K,V> floorEntry(K key){
  return dbMap.floorEntry(key);
}",0.9438202247191012
137193,"public ConcurrentNavigableMap<K,V> subMap(K fromKey,K toKey){
  return dbMap.subMap(fromKey,toKey);
}","@Override public ConcurrentNavigableMap<K,V> subMap(K fromKey,K toKey){
  return dbMap.subMap(fromKey,toKey);
}",0.9528301886792452
137194,"public void clear(){
  this.getDB().delete(mapName);
  this.getDB().getEngine().clearCache();
}","@Override public void clear(){
  if (!getDB().isClosed()) {
    dbMap.clear();
    this.getDB().delete(mapName);
    this.getDB().getEngine().clearCache();
  }
}",0.7421875
137195,"public K ceilingKey(K key){
  return dbMap.ceilingKey(key);
}","@Override public K ceilingKey(K key){
  return dbMap.ceilingKey(key);
}",0.9242424242424242
137196,"public java.util.Map.Entry<K,V> pollLastEntry(){
  return dbMap.pollLastEntry();
}","@Override public java.util.Map.Entry<K,V> pollLastEntry(){
  return dbMap.pollLastEntry();
}",0.942528735632184
137197,"public Comparator<? super K> comparator(){
  return dbMap.comparator();
}","@Override public Comparator<? super K> comparator(){
  return dbMap.comparator();
}",0.935897435897436
137198,"public java.util.Map.Entry<K,V> lastEntry(){
  return dbMap.lastEntry();
}","@Override public java.util.Map.Entry<K,V> lastEntry(){
  return dbMap.lastEntry();
}",0.9367088607594936
137199,"public K firstKey(){
  return dbMap.firstKey();
}","@Override public K firstKey(){
  return dbMap.firstKey();
}",0.9074074074074074
137200,"public K lowerKey(K key){
  return dbMap.lowerKey(key);
}","@Override public K lowerKey(K key){
  return dbMap.lowerKey(key);
}",0.9193548387096774
137201,"public ConcurrentNavigableMap<K,V> headMap(K toKey){
  return dbMap.headMap(toKey);
}","@Override public ConcurrentNavigableMap<K,V> headMap(K toKey){
  return dbMap.headMap(toKey);
}",0.9444444444444444
137202,"public V putIfAbsent(K key,V value){
  return dbMap.putIfAbsent(key,value);
}","@Override public V putIfAbsent(K key,V value){
  return dbMap.putIfAbsent(key,value);
}",0.9390243902439024
137203,"public ConcurrentNavigableMap<K,V> tailMap(K fromKey){
  return dbMap.tailMap(fromKey);
}","@Override public ConcurrentNavigableMap<K,V> tailMap(K fromKey){
  return dbMap.tailMap(fromKey);
}",0.946808510638298
137204,"@Override public boolean reset(){
  if (this.isUsedMapDBMode()) {
    if (needReconnect((AbstractDB<?>)duplicateMap)) {
      duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
      if (duplicateMap != null) {
        duplicateMap.clear();
      }
    }
    if (needReconnect((AbstractDB<?>)duplicateMap)) {
      duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
      if (duplicateObjects != null) {
        duplicateObjects.clear();
      }
    }
  }
  return super.reset();
}","@Override public boolean reset(){
  if (this.isUsedMapDBMode()) {
    if (needReconnect((AbstractDB<?>)duplicateMap)) {
      duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
      duplicateMap.clear();
    }
    if (needReconnect((AbstractDB<?>)duplicateObjects)) {
      duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
      duplicateObjects.clear();
    }
  }
 else {
    duplicateMap=initValueForDBMap(StandardDBName.computeProcess.name());
    duplicateObjects=initValueForDBSet(StandardDBName.computeProcessSet.name());
    duplicateMap.clear();
    duplicateObjects.clear();
  }
  return super.reset();
}",0.6621735467565291
137205,"@Override public DataSet getCurrentPageDataSet(){
  long pageSize=endIndex - startIndex;
  Comparable[][] compareArray=new Comparable[(int)(pageSize)][this.getColumns().length];
  List<Object[]> subList=MapDBUtils.getDefault().getDataSetDBMapSubList(this.dataMap,startIndex,endIndex,null);
  if (columnFilter != null) {
    subList=columnFilter.filterArray(subList);
  }
  for (int i=0; i < pageSize; i++) {
    Object[] objArray=subList.get(i);
    for (int j=0; j < this.getColumns().length; j++) {
      compareArray[i][j]=(Comparable)objArray[j];
    }
  }
  return new DataSet(this.columnHeads,compareArray);
}","@Override public DataSet getCurrentPageDataSet(){
  long pageSize=endIndex - startIndex;
  List<Object[]> subList=MapDBUtils.getDefault().getDataSetDBMapSubList(this.dataMap,startIndex,endIndex,null);
  if (columnFilter != null) {
    subList=columnFilter.filterArray(subList);
  }
  int count=(int)(pageSize > subList.size() ? subList.size() : pageSize);
  Comparable[][] compareArray=new Comparable[(count)][this.getColumns().length];
  for (int i=0; i < count; i++) {
    Object[] objArray=subList.get(i);
    for (int j=0; j < objArray.length; j++) {
      compareArray[i][j]=(Comparable)objArray[j];
    }
  }
  return new DataSet(this.columnHeads,compareArray);
}",0.780373831775701
137206,"public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements) throws SQLException {
  dataFromTable.clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return dataFromTable;
  }
  int columnListSize=analysedElements.size();
  TypedReturnCode<java.sql.Connection> sqlconnection=JavaSqlFactory.createConnection((Connection)connection);
  if (!sqlconnection.isOk()) {
    MessageDialogWithToggle.openWarning(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),sqlconnection.getMessage());
    throw new SQLException(sqlconnection.getMessage());
  }
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=sqlconnection.getObject().createStatement();
    statement.execute(createSqlStatement(connection,analysedElements));
    resultSet=statement.getResultSet();
    while (resultSet.next()) {
      Object[] oneRow=new Object[columnListSize];
      for (int i=0; i < columnListSize; i++) {
        oneRow[i]=resultSet.getObject(i + 1);
      }
      handleRow(oneRow);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    ReturnCode closed=ConnectionUtils.closeConnection(sqlconnection.getObject());
    if (!closed.isOk()) {
      log.error(closed.getMessage());
    }
  }
  try {
    endQuery();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return dataFromTable;
}","public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements) throws SQLException {
  dataFromTable.clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return dataFromTable;
  }
  int columnListSize=analysedElements.size();
  TypedReturnCode<java.sql.Connection> sqlconnection=getSQLConnection(connection);
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=sqlconnection.getObject().createStatement();
    statement.execute(createSqlStatement(connection,analysedElements));
    resultSet=statement.getResultSet();
    while (resultSet.next()) {
      Object[] oneRow=new Object[columnListSize];
      for (int i=0; i < columnListSize; i++) {
        oneRow[i]=resultSet.getObject(i + 1);
      }
      handleRow(oneRow);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    ReturnCode closed=ConnectionUtils.closeConnection(sqlconnection.getObject());
    if (!closed.isOk()) {
      log.error(closed.getMessage());
    }
  }
  try {
    endQuery();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return dataFromTable;
}",0.889589905362776
137207,"public StoreOnDiskHandler(RecordMatchingIndicator recordMatchingIndicator,final Map<MetadataColumn,String> columnMap,String container,int buffSize) throws IOException {
  this.columnMap=columnMap;
  this.recordMatchingIndicator=recordMatchingIndicator;
  ExecuteMatchRuleHandler handler=new ExecuteMatchRuleHandler();
  this.blockKeyDefinitions=handler.getBlockKeySchema(StoreOnDiskHandler.this.recordMatchingIndicator);
  initPersistentLookupManager(container,buffSize);
  generateKeyAPI=new AbstractGenerateKey();
}","public StoreOnDiskHandler(RecordMatchingIndicator recordMatchingIndicator,final Map<MetadataColumn,String> columnMap,String container,int buffSize) throws IOException {
  this.columnMap=columnMap;
  this.recordMatchingIndicator=recordMatchingIndicator;
  this.blockKeyDefinitions=AnalysisRecordGroupingUtils.getBlockKeySchema(StoreOnDiskHandler.this.recordMatchingIndicator);
  initPersistentLookupManager(container,buffSize);
  generateKeyAPI=new AbstractGenerateKey();
}",0.8998988877654196
137208,"/** 
 * set StoreData Value And Status.
 */
private void setStoreDataValueAndStatus(){
  if (execLang.equals(ExecutionLanguage.JAVA.getLiteral())) {
    storeDataCheck.setSelection(true);
    storeDataCheck.setEnabled(false);
  }
 else {
    storeDataCheck.setSelection(simpleStatIndicator.isStoreData());
    storeDataCheck.setEnabled(true);
  }
}","/** 
 * set StoreData Value And Status.
 */
private void setStoreDataValueAndStatus(){
  if (execLang.equals(ExecutionLanguage.JAVA.getLiteral())) {
    storeDataCheck.setSelection(true);
    storeDataCheck.setEnabled(false);
  }
 else {
    storeDataCheck.setSelection(simpleStatIndicator.isStoreData());
    storeDataCheck.setEnabled(true);
  }
  simpleStatIndicator.setStoreData(storeDataCheck.getSelection());
  allMatchIndicator.setStoreData(storeDataCheck.getSelection());
}",0.8405797101449275
137209,"/** 
 * Get the name of MapDB
 * @return
 */
private String getDBMapName(AnalysisType analysisType,Indicator indicator,String selectValue){
  String dbMapName=StandardDBName.drillDown.name();
  if (FrequencyIndicator.class.isInstance(indicator)) {
    dbMapName=selectValue;
  }
 else   if (LengthIndicator.class.isInstance(indicator)) {
    String selectValueLength=((LengthIndicator)indicator).getLength().toString();
    dbMapName=selectValue + selectValueLength;
  }
 else   if (AnalysisType.COLUMN_SET == analysisType) {
    dbMapName=StandardDBName.dataSection.name();
  }
  return dbMapName;
}","/** 
 * Get the name of MapDB
 * @return
 */
private String getDBMapName(AnalysisType analysisType,Indicator indicator,String selectValue){
  String dbMapName=StandardDBName.drillDown.name();
  if (FrequencyIndicator.class.isInstance(indicator)) {
    dbMapName=selectValue;
  }
 else   if (LengthIndicator.class.isInstance(indicator)) {
    String selectValueLength;
    Long length=((LengthIndicator)indicator).getLength();
    if (length != null) {
      selectValueLength=length.toString();
    }
 else {
      selectValueLength=((LengthIndicator)indicator).getRealValue().toString();
    }
    dbMapName=selectValue + selectValueLength;
  }
 else   if (AnalysisType.COLUMN_SET == analysisType) {
    dbMapName=StandardDBName.dataSection.name();
  }
  return dbMapName;
}",0.8552727272727273
137210,"public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  final boolean isJAVALanguage=ExecutionLanguage.JAVA == currentEngine;
  final Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
  final boolean isMDMAnalysis=ConnectionUtils.isMdmConnection(tdDataProvider);
  final boolean isDelimitedFileAnalysis=ConnectionUtils.isDelimitedFileConnection(tdDataProvider);
  final boolean isHiveConnection=ConnectionHelper.isHive(tdDataProvider);
  final Table table=tbViewer.getTable();
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      if (e.button == 3) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
        if (indicator != null && dataEntity != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          Long rowCount=getRowCount(analysis,dataEntity.getIndicator().getAnalyzedElement());
          if (!isJAVALanguage) {
            boolean showExtraMenu=false;
            for (            final MenuItemEntity itemEntity : itemEntities) {
              MenuItem item=new MenuItem(menu,SWT.PUSH);
              item.setText(itemEntity.getLabel());
              item.setImage(itemEntity.getIcon());
              item.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  String query=itemEntity.getQuery();
                  String editorName=indicator.getName();
                  if (isPatternMatchingIndicator(indicator) && !((PatternExplorer)explorer).isImplementRegexFunction(itemEntity.getLabel())) {
                    MessageDialog.openInformation(new Shell(),itemEntity.getLabel(),DefaultMessagesImpl.getString(""String_Node_Str""));
                    return;
                  }
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
              if (IndicatorHelper.isWhereRuleIndicatorNotAide(indicator)) {
                WhereRuleIndicator ind=(WhereRuleIndicator)indicator;
                EList<JoinElement> joinConditions=ind.getJoinConditions();
                if (joinConditions.size() > 0) {
                  showExtraMenu=true;
                }
              }
              if (isPatternFrequencyIndicator(indicator)) {
                MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
                itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
                itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                  @Override public void widgetSelected(                  SelectionEvent e){
                    DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                    PatternTransformer pattTransformer=new PatternTransformer(language);
                    createPattern(analysis,itemEntity,pattTransformer);
                  }
                }
);
              }
            }
            if (showExtraMenu) {
              MenuItem itemCreateWhereRule=new MenuItem(menu,SWT.PUSH);
              itemCreateWhereRule.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreateWhereRule.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  final StructuredSelection selectionOne=(StructuredSelection)tbViewer.getSelection();
                  Object firstElement=selectionOne.getFirstElement();
                  if (firstElement instanceof WhereRuleChartDataEntity) {
                    WhereRuleChartDataEntity wrChartDataEntity=(WhereRuleChartDataEntity)firstElement;
                    WhereRuleIndicator wrInd=(WhereRuleIndicator)wrChartDataEntity.getIndicator();
                    CreateDuplicatesAnalysisAction action=new CreateDuplicatesAnalysisAction(buildColumnsMap(wrInd));
                    action.run();
                  }
                }
                /** 
 * DOC xqliu Comment method ""buildColumnsMap"".
 * @param wrInd
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> buildColumnsMap(                WhereRuleIndicator wrInd){
                  Map<ColumnSet,List<TdColumn>> map=new HashMap<ColumnSet,List<TdColumn>>();
                  List<TdColumn> columns=new ArrayList<TdColumn>();
                  EList<JoinElement> joinConditions=wrInd.getJoinConditions();
                  for (                  JoinElement joinElement : joinConditions) {
                    TdColumn tempColumn=(TdColumn)joinElement.getColA();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                    tempColumn=(TdColumn)joinElement.getColB();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                  }
                  for (                  TdColumn column : columns) {
                    ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
                    List<TdColumn> list=map.get(columnSet);
                    if (list == null) {
                      list=new ArrayList<TdColumn>();
                      map.put(columnSet,list);
                    }
                    list.add(column);
                  }
                  return getUserSelectedMap(map);
                }
                /** 
 * DOC xqliu Comment method ""getUserSelectedMap"".
 * @param map
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> getUserSelectedMap(                Map<ColumnSet,List<TdColumn>> map){
                  Map<ColumnSet,List<TdColumn>> userMap=new HashMap<ColumnSet,List<TdColumn>>();
                  List<RepositoryNode> columnNodes=getColumnNodes(map);
                  RepositoryNode rootNode=getConnectionNode(map);
                  if (!columnNodes.isEmpty() && rootNode != null) {
                    ColumnsMapSelectionDialog dialog=new ColumnsMapSelectionDialog(null,PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),columnNodes,rootNode,DefaultMessagesImpl.getString(""String_Node_Str""));
                    dialog.setAllMap(map);
                    if (dialog.open() == Window.OK) {
                      userMap=dialog.getUserMap();
                    }
                  }
                  return userMap;
                }
                /** 
 * DOC xqliu Comment method ""getConnectionNode"".
 * @param map
 * @return
 */
                private RepositoryNode getConnectionNode(                Map<ColumnSet,List<TdColumn>> map){
                  RepositoryNode node=null;
                  if (map != null && !map.isEmpty()) {
                    Connection connection=ConnectionHelper.getConnection(map.keySet().iterator().next());
                    if (connection != null) {
                      node=RepositoryNodeHelper.recursiveFind(connection);
                    }
                  }
                  return node;
                }
                /** 
 * DOC xqliu Comment method ""getColumnNodes"".
 * @param map
 * @return
 */
                private List<RepositoryNode> getColumnNodes(                Map<ColumnSet,List<TdColumn>> map){
                  List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
                  if (map != null && !map.isEmpty()) {
                    List<TdColumn> columns=new ArrayList<TdColumn>();
                    Set<ColumnSet> keySet=map.keySet();
                    for (                    ColumnSet cs : keySet) {
                      columns.addAll(map.get(cs));
                    }
                    if (!columns.isEmpty()) {
                      for (                      TdColumn column : columns) {
                        nodes.add(RepositoryNodeHelper.recursiveFind(column));
                      }
                    }
                  }
                  return nodes;
                }
              }
);
            }
          }
 else {
            if (analysis.getParameters().isStoreData()) {
              if (indicator.isUsedMapDBMode()) {
                createDrillDownMenuForMapDB(dataEntity,menu,itemEntities);
              }
 else {
                createDrillDownMenuForJava(dataEntity,menu,itemEntities);
              }
              if (isPatternFrequencyIndicator(indicator)) {
                for (                final MenuItemEntity itemEntity : itemEntities) {
                  if (itemEntity.getQuery() == null) {
                    if (dataEntity.getKey() == null) {
                      itemEntity.setQuery(dataEntity.getLabel());
                    }
 else {
                      itemEntity.setQuery(dataEntity.getKey().toString());
                    }
                  }
                  MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
                  itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                  itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
                  itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                    @Override public void widgetSelected(                    SelectionEvent e){
                      DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                      PatternTransformer pattTransformer=new PatternTransformer(language);
                      createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
            }
            if (isDatePatternFrequencyIndicator(indicator)) {
              final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                  IFolder folder=ResourceManager.getPatternRegexFolder();
                  String model=dataEntity.getLabel();
                  String regex=dateIndicator.getRegex(model);
                  new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",model == null ? ""String_Node_Str"" : ""String_Node_Str"" + model + ""String_Node_Str"",language.getDbmsName()).run();
                }
              }
);
            }
          }
          addJobGenerationMenu(menu,analysis,indicator);
          menu.setVisible(true);
        }
      }
    }
    private void createDrillDownMenuForMapDB(    final ChartDataEntity dataEntity,    Menu menu,    MenuItemEntity[] itemEntities){
      final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
      if (dataEntity == null || indicator == null || this.getMapDB(dataEntity).size() == 0) {
        return;
      }
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            CorePlugin.getDefault().openEditor(new DrillDownEditorInput(analysis,dataEntity,itemEntity),ChartTableFactory.DRILL_DOWN_EDITOR);
          }
        }
);
      }
    }
    /** 
 * Get MapDB which store the drill down data for current indicator
 * @return
 */
    private AbstractDB<Object> getMapDB(    final ChartDataEntity dataEntity){
      AnalysisType analysisType=analysis.getParameters().getAnalysisType();
      if (AnalysisType.COLUMN_SET == analysisType) {
        return getColumnSetAnalysisMapDB(analysisType);
      }
      Indicator indicator=dataEntity.getIndicator();
      String selectValue=dataEntity.getLabel();
      String dbMapName=getDBMapName(analysisType,indicator,selectValue);
      return indicator.getMapDB(dbMapName);
    }
    /** 
 * Get the name of MapDB
 * @return
 */
    private String getDBMapName(    AnalysisType analysisType,    Indicator indicator,    String selectValue){
      String dbMapName=StandardDBName.drillDown.name();
      if (FrequencyIndicator.class.isInstance(indicator)) {
        dbMapName=selectValue;
      }
 else       if (LengthIndicator.class.isInstance(indicator)) {
        String selectValueLength=((LengthIndicator)indicator).getLength().toString();
        dbMapName=selectValue + selectValueLength;
      }
 else       if (AnalysisType.COLUMN_SET == analysisType) {
        dbMapName=StandardDBName.dataSection.name();
      }
      return dbMapName;
    }
    /** 
 * Get MapDB which store the drill down data for columnSet analysis
 * @param analysisType
 */
    private AbstractDB<Object> getColumnSetAnalysisMapDB(    AnalysisType analysisType){
      if (AnalysisType.COLUMN_SET == analysisType) {
        SimpleStatIndicator simpleStatIndicator=null;
        for (        Indicator indicator : analysis.getResults().getIndicators()) {
          if (SimpleStatIndicator.class.isInstance(indicator)) {
            simpleStatIndicator=(SimpleStatIndicator)indicator;
            break;
          }
        }
        if (simpleStatIndicator != null) {
          return simpleStatIndicator.getMapDB(StandardDBName.dataSection.name());
        }
      }
      return null;
    }
    /** 
 * DOC talend Comment method ""createDrillDownMenu"".
 * @param analysis
 * @param dataEntity
 * @param menu
 * @param itemEntities
 */
    private void createDrillDownMenuForJava(    final ChartDataEntity dataEntity,    Menu menu,    MenuItemEntity[] itemEntities){
      final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(indicator);
      boolean hasData=analyDataSet != null && (analyDataSet.getData() != null && analyDataSet.getData().size() > 0 || analyDataSet.getFrequencyData() != null && analyDataSet.getFrequencyData().size() > 0 || analyDataSet.getPatternData() != null && analyDataSet.getPatternData().size() > 0);
      if (hasData) {
        for (        final MenuItemEntity itemEntity : itemEntities) {
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(itemEntity.getLabel());
          item.setImage(itemEntity.getIcon());
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              CorePlugin.getDefault().openEditor(new DrillDownEditorInput(analysis,dataEntity,itemEntity),ChartTableFactory.DRILL_DOWN_EDITOR);
            }
          }
);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getRowCount"".
 * @param analysis
 * @param analyzedElement
 * @return
 */
    private Long getRowCount(    Analysis analysis,    ModelElement analyzedElement){
      Long rowCount=0L;
      EList<Indicator> indicators=analysis.getResults().getIndicators();
      for (      Indicator ind : indicators) {
        if (ind instanceof RowCountIndicator && ind.getAnalyzedElement().equals(analyzedElement)) {
          rowCount=ind.getCount();
        }
      }
      return rowCount;
    }
    private SelectionAdapter getAdapter(    final IDatabaseJobService service){
      return new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          service.executeJob();
        }
      }
;
    }
  }
);
  TableUtils.addTooltipOnTableItem(table);
}","public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  final boolean isJAVALanguage=ExecutionLanguage.JAVA == currentEngine;
  final Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
  final boolean isMDMAnalysis=ConnectionUtils.isMdmConnection(tdDataProvider);
  final boolean isDelimitedFileAnalysis=ConnectionUtils.isDelimitedFileConnection(tdDataProvider);
  final boolean isHiveConnection=ConnectionHelper.isHive(tdDataProvider);
  final Table table=tbViewer.getTable();
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      if (e.button == 3) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
        if (indicator != null && dataEntity != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          Long rowCount=getRowCount(analysis,dataEntity.getIndicator().getAnalyzedElement());
          if (!isJAVALanguage) {
            boolean showExtraMenu=false;
            for (            final MenuItemEntity itemEntity : itemEntities) {
              MenuItem item=new MenuItem(menu,SWT.PUSH);
              item.setText(itemEntity.getLabel());
              item.setImage(itemEntity.getIcon());
              item.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  String query=itemEntity.getQuery();
                  String editorName=indicator.getName();
                  if (isPatternMatchingIndicator(indicator) && !((PatternExplorer)explorer).isImplementRegexFunction(itemEntity.getLabel())) {
                    MessageDialog.openInformation(new Shell(),itemEntity.getLabel(),DefaultMessagesImpl.getString(""String_Node_Str""));
                    return;
                  }
                  SqlExplorerUtils.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
              if (IndicatorHelper.isWhereRuleIndicatorNotAide(indicator)) {
                WhereRuleIndicator ind=(WhereRuleIndicator)indicator;
                EList<JoinElement> joinConditions=ind.getJoinConditions();
                if (joinConditions.size() > 0) {
                  showExtraMenu=true;
                }
              }
              if (isPatternFrequencyIndicator(indicator)) {
                MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
                itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
                itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                  @Override public void widgetSelected(                  SelectionEvent e){
                    DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                    PatternTransformer pattTransformer=new PatternTransformer(language);
                    createPattern(analysis,itemEntity,pattTransformer);
                  }
                }
);
              }
            }
            if (showExtraMenu) {
              MenuItem itemCreateWhereRule=new MenuItem(menu,SWT.PUSH);
              itemCreateWhereRule.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreateWhereRule.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  final StructuredSelection selectionOne=(StructuredSelection)tbViewer.getSelection();
                  Object firstElement=selectionOne.getFirstElement();
                  if (firstElement instanceof WhereRuleChartDataEntity) {
                    WhereRuleChartDataEntity wrChartDataEntity=(WhereRuleChartDataEntity)firstElement;
                    WhereRuleIndicator wrInd=(WhereRuleIndicator)wrChartDataEntity.getIndicator();
                    CreateDuplicatesAnalysisAction action=new CreateDuplicatesAnalysisAction(buildColumnsMap(wrInd));
                    action.run();
                  }
                }
                /** 
 * DOC xqliu Comment method ""buildColumnsMap"".
 * @param wrInd
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> buildColumnsMap(                WhereRuleIndicator wrInd){
                  Map<ColumnSet,List<TdColumn>> map=new HashMap<ColumnSet,List<TdColumn>>();
                  List<TdColumn> columns=new ArrayList<TdColumn>();
                  EList<JoinElement> joinConditions=wrInd.getJoinConditions();
                  for (                  JoinElement joinElement : joinConditions) {
                    TdColumn tempColumn=(TdColumn)joinElement.getColA();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                    tempColumn=(TdColumn)joinElement.getColB();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                  }
                  for (                  TdColumn column : columns) {
                    ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
                    List<TdColumn> list=map.get(columnSet);
                    if (list == null) {
                      list=new ArrayList<TdColumn>();
                      map.put(columnSet,list);
                    }
                    list.add(column);
                  }
                  return getUserSelectedMap(map);
                }
                /** 
 * DOC xqliu Comment method ""getUserSelectedMap"".
 * @param map
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> getUserSelectedMap(                Map<ColumnSet,List<TdColumn>> map){
                  Map<ColumnSet,List<TdColumn>> userMap=new HashMap<ColumnSet,List<TdColumn>>();
                  List<RepositoryNode> columnNodes=getColumnNodes(map);
                  RepositoryNode rootNode=getConnectionNode(map);
                  if (!columnNodes.isEmpty() && rootNode != null) {
                    ColumnsMapSelectionDialog dialog=new ColumnsMapSelectionDialog(null,PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),columnNodes,rootNode,DefaultMessagesImpl.getString(""String_Node_Str""));
                    dialog.setAllMap(map);
                    if (dialog.open() == Window.OK) {
                      userMap=dialog.getUserMap();
                    }
                  }
                  return userMap;
                }
                /** 
 * DOC xqliu Comment method ""getConnectionNode"".
 * @param map
 * @return
 */
                private RepositoryNode getConnectionNode(                Map<ColumnSet,List<TdColumn>> map){
                  RepositoryNode node=null;
                  if (map != null && !map.isEmpty()) {
                    Connection connection=ConnectionHelper.getConnection(map.keySet().iterator().next());
                    if (connection != null) {
                      node=RepositoryNodeHelper.recursiveFind(connection);
                    }
                  }
                  return node;
                }
                /** 
 * DOC xqliu Comment method ""getColumnNodes"".
 * @param map
 * @return
 */
                private List<RepositoryNode> getColumnNodes(                Map<ColumnSet,List<TdColumn>> map){
                  List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
                  if (map != null && !map.isEmpty()) {
                    List<TdColumn> columns=new ArrayList<TdColumn>();
                    Set<ColumnSet> keySet=map.keySet();
                    for (                    ColumnSet cs : keySet) {
                      columns.addAll(map.get(cs));
                    }
                    if (!columns.isEmpty()) {
                      for (                      TdColumn column : columns) {
                        nodes.add(RepositoryNodeHelper.recursiveFind(column));
                      }
                    }
                  }
                  return nodes;
                }
              }
);
            }
          }
 else {
            if (analysis.getParameters().isStoreData()) {
              if (indicator.isUsedMapDBMode()) {
                createDrillDownMenuForMapDB(dataEntity,menu,itemEntities);
              }
 else {
                createDrillDownMenuForJava(dataEntity,menu,itemEntities);
              }
              if (isPatternFrequencyIndicator(indicator)) {
                for (                final MenuItemEntity itemEntity : itemEntities) {
                  if (itemEntity.getQuery() == null) {
                    if (dataEntity.getKey() == null) {
                      itemEntity.setQuery(dataEntity.getLabel());
                    }
 else {
                      itemEntity.setQuery(dataEntity.getKey().toString());
                    }
                  }
                  MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
                  itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                  itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
                  itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                    @Override public void widgetSelected(                    SelectionEvent e){
                      DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                      PatternTransformer pattTransformer=new PatternTransformer(language);
                      createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
            }
            if (isDatePatternFrequencyIndicator(indicator)) {
              final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                  IFolder folder=ResourceManager.getPatternRegexFolder();
                  String model=dataEntity.getLabel();
                  String regex=dateIndicator.getRegex(model);
                  new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",model == null ? ""String_Node_Str"" : ""String_Node_Str"" + model + ""String_Node_Str"",language.getDbmsName()).run();
                }
              }
);
            }
          }
          addJobGenerationMenu(menu,analysis,indicator);
          menu.setVisible(true);
        }
      }
    }
    private void createDrillDownMenuForMapDB(    final ChartDataEntity dataEntity,    Menu menu,    MenuItemEntity[] itemEntities){
      final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
      if (dataEntity == null || indicator == null || this.getMapDB(dataEntity).size() == 0) {
        return;
      }
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            CorePlugin.getDefault().openEditor(new DrillDownEditorInput(analysis,dataEntity,itemEntity),ChartTableFactory.DRILL_DOWN_EDITOR);
          }
        }
);
      }
    }
    /** 
 * Get MapDB which store the drill down data for current indicator
 * @return
 */
    private AbstractDB<Object> getMapDB(    final ChartDataEntity dataEntity){
      AnalysisType analysisType=analysis.getParameters().getAnalysisType();
      if (AnalysisType.COLUMN_SET == analysisType) {
        return getColumnSetAnalysisMapDB(analysisType);
      }
      Indicator indicator=dataEntity.getIndicator();
      String selectValue=dataEntity.getLabel();
      String dbMapName=getDBMapName(analysisType,indicator,selectValue);
      return indicator.getMapDB(dbMapName);
    }
    /** 
 * Get the name of MapDB
 * @return
 */
    private String getDBMapName(    AnalysisType analysisType,    Indicator indicator,    String selectValue){
      String dbMapName=StandardDBName.drillDown.name();
      if (FrequencyIndicator.class.isInstance(indicator)) {
        dbMapName=selectValue;
      }
 else       if (LengthIndicator.class.isInstance(indicator)) {
        String selectValueLength;
        Long length=((LengthIndicator)indicator).getLength();
        if (length != null) {
          selectValueLength=length.toString();
        }
 else {
          selectValueLength=((LengthIndicator)indicator).getRealValue().toString();
        }
        dbMapName=selectValue + selectValueLength;
      }
 else       if (AnalysisType.COLUMN_SET == analysisType) {
        dbMapName=StandardDBName.dataSection.name();
      }
      return dbMapName;
    }
    /** 
 * Get MapDB which store the drill down data for columnSet analysis
 * @param analysisType
 */
    private AbstractDB<Object> getColumnSetAnalysisMapDB(    AnalysisType analysisType){
      if (AnalysisType.COLUMN_SET == analysisType) {
        SimpleStatIndicator simpleStatIndicator=null;
        for (        Indicator indicator : analysis.getResults().getIndicators()) {
          if (SimpleStatIndicator.class.isInstance(indicator)) {
            simpleStatIndicator=(SimpleStatIndicator)indicator;
            break;
          }
        }
        if (simpleStatIndicator != null) {
          return simpleStatIndicator.getMapDB(StandardDBName.dataSection.name());
        }
      }
      return null;
    }
    /** 
 * DOC talend Comment method ""createDrillDownMenu"".
 * @param analysis
 * @param dataEntity
 * @param menu
 * @param itemEntities
 */
    private void createDrillDownMenuForJava(    final ChartDataEntity dataEntity,    Menu menu,    MenuItemEntity[] itemEntities){
      final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(indicator);
      boolean hasData=analyDataSet != null && (analyDataSet.getData() != null && analyDataSet.getData().size() > 0 || analyDataSet.getFrequencyData() != null && analyDataSet.getFrequencyData().size() > 0 || analyDataSet.getPatternData() != null && analyDataSet.getPatternData().size() > 0);
      if (hasData) {
        for (        final MenuItemEntity itemEntity : itemEntities) {
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(itemEntity.getLabel());
          item.setImage(itemEntity.getIcon());
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              CorePlugin.getDefault().openEditor(new DrillDownEditorInput(analysis,dataEntity,itemEntity),ChartTableFactory.DRILL_DOWN_EDITOR);
            }
          }
);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getRowCount"".
 * @param analysis
 * @param analyzedElement
 * @return
 */
    private Long getRowCount(    Analysis analysis,    ModelElement analyzedElement){
      Long rowCount=0L;
      EList<Indicator> indicators=analysis.getResults().getIndicators();
      for (      Indicator ind : indicators) {
        if (ind instanceof RowCountIndicator && ind.getAnalyzedElement().equals(analyzedElement)) {
          rowCount=ind.getCount();
        }
      }
      return rowCount;
    }
    private SelectionAdapter getAdapter(    final IDatabaseJobService service){
      return new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          service.executeJob();
        }
      }
;
    }
  }
);
  TableUtils.addTooltipOnTableItem(table);
}",0.9940105342362678
137211,"/** 
 * clear DrillDown Maps.
 * @param valueToFreqForMapDB2
 */
@SuppressWarnings(""String_Node_Str"") protected void clearDrillDownMaps(){
  AbstractDB<?> mapDB=getMapDB(StandardDBName.drillDown.name());
  mapDB.clearDB();
}","/** 
 * clear DrillDown Maps.
 * @param valueToFreqForMapDB2
 */
@SuppressWarnings(""String_Node_Str"") protected void clearDrillDownMaps(){
  AbstractDB<?> mapDB=getMapDB(StandardDBName.drillDown.name());
  if (mapDB != null) {
    mapDB.clearDB();
  }
}",0.939203354297694
137212,"@Override public boolean reset(){
  this.uniqueValueCount=0L;
  this.distinctValueCount=0L;
  this.distinctComputed=false;
  this.datePattern=null;
  if (isUsedMapDBMode()) {
    if (valueToFreqForMapDB != null) {
      if (checkAllowDrillDown()) {
        clearDrillDownMaps();
      }
 else {
        ((DBMap<Object,Long>)valueToFreqForMapDB).clear();
      }
    }
    valueToFreqForMapDB=initValueForDBMap(FREQUENCYMAPNAME);
  }
 else {
    this.getValueToFreq().clear();
  }
  return super.reset();
}","@Override public boolean reset(){
  this.uniqueValueCount=0L;
  this.distinctValueCount=0L;
  this.distinctComputed=false;
  this.datePattern=null;
  if (isUsedMapDBMode()) {
    if (checkAllowDrillDown()) {
      clearDrillDownMaps();
    }
    valueToFreqForMapDB=initValueForDBMap(FREQUENCYMAPNAME);
    if (valueToFreqForMapDB != null && !valueToFreqForMapDB.isEmpty()) {
      valueToFreqForMapDB.clear();
    }
  }
 else {
    this.getValueToFreq().clear();
  }
  return super.reset();
}",0.7595190380761523
137213,"@Override public void run(){
  if (db != null && !db.isClosed()) {
    db.close();
  }
}","@Override public void run(){
  if (db != null && !db.isClosed()) {
    MapDBManager.getInstance().removeDB(dbFile);
    db.close();
  }
}",0.7822222222222223
137214,"public CloseDBTimeTask(DB closeDb){
  this.db=closeDb;
}","public CloseDBTimeTask(DB closeDb,File filePath){
  this.db=closeDb;
  dbFile=filePath;
}",0.7724137931034483
137215,"private void closeDB(DB db){
  if (db == null) {
    return;
  }
  scheduleCloseTask(db);
}","private void closeDB(DB db,File filePath){
  if (db == null) {
    return;
  }
  scheduleCloseTask(db,filePath);
}",0.8878048780487805
137216,"/** 
 * DOC talend Comment method ""scheduleCloseTask"".
 * @param db
 */
protected void scheduleCloseTask(DB db){
  CloseDBTimeTask closeDBTimeTask=new CloseDBTimeTask(db);
  timer.schedule(closeDBTimeTask,CLOSE_TIME_DELAY);
  closeTaskMap.put(db,closeDBTimeTask);
}","/** 
 * DOC talend Comment method ""scheduleCloseTask"".
 * @param db
 */
protected void scheduleCloseTask(DB db,File filePath){
  CloseDBTimeTask closeDBTimeTask=new CloseDBTimeTask(db,filePath);
  timer.schedule(closeDBTimeTask,CLOSE_TIME_DELAY);
  closeTaskMap.put(db,closeDBTimeTask);
}",0.9584086799276672
137217,"/** 
 * Reduce the times which one db be used. When the count of times is 0 we will close this db.
 * @param filePath
 */
public void removeDBRef(File filePath){
  DB db=dbMap.get(filePath);
  if (db == null) {
    return;
  }
  Integer refConut=dbRefCountMap.get(db);
  if (refConut == null) {
    return;
  }
  refConut--;
  if (refConut > 0) {
    dbRefCountMap.put(db,refConut);
  }
 else {
    dbRefCountMap.remove(db);
    dbMap.remove(filePath);
    closeDB(db);
  }
}","/** 
 * Reduce the times which one db be used. When the count of times is 0 we will close this db.
 * @param filePath
 */
public void removeDBRef(File filePath){
  DB db=dbMap.get(filePath);
  if (db == null) {
    return;
  }
  Integer refConut=dbRefCountMap.get(db);
  if (refConut == null) {
    return;
  }
  refConut--;
  if (refConut > 0) {
    dbRefCountMap.put(db,refConut);
  }
 else {
    dbRefCountMap.remove(db);
    closeDB(db,filePath);
  }
}",0.9602577873254564
137218,"/** 
 * whether match records in different groups.
 */
protected boolean isMatchDiffGroups(){
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"");
  }
  return false;
}","/** 
 * @return <code>true</code> if algorithm should try to match records from different groups.
 */
protected boolean isMatchDiffGroups(){
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""String_Node_Str"");
  }
  return false;
}",0.7769784172661871
137219,"@Override public List<Record> execute(Iterator<Record> sourceRecords,Callback callback){
  if (callback == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  List<Record> mergedRecords=new ArrayList<Record>();
  int index=0;
  Queue<Record> queue=new ProcessQueue<Record>(sourceRecords);
  callback.onBeginProcessing();
  while (!queue.isEmpty() && !callback.isInterrupted()) {
    if (LOGGER.isDebugEnabled() && index % 10000 == 0) {
      LOGGER.debug(""String_Node_Str"" + index);
    }
    Record currentRecord=queue.poll();
    matchOneRecord(callback,mergedRecords,queue,currentRecord);
    index++;
  }
  callback.onEndProcessing();
  return mergedRecords;
}","/** 
 * <p> Performs match & merge operation on <code>record</code>. For algorithm purposes, the list of previously merged records (<code>mergedRecords</code>) as well as the queue of records (<code>queue</code>) to be processed are needed. </p> <p> A <code>callback</code> is used to notify calling code about decisions the processing does. </p>
 * @param record The record to be compared to previously merged records.
 * @param mergedRecords The previously merged records.
 * @param queue Queue of records to be processed: in case of new merge, algorithm is expected to publish new mergedrecord on this queue for later processing.
 * @param callback A {@link org.talend.dataquality.matchmerge.MatchMergeAlgorithm.Callback} to notify callers ofdecisions the algorithm takes.
 */
protected void execute(Record record,List<Record> mergedRecords,Queue<Record> queue,Callback callback){
  callback.onBeginRecord(record);
  if (record == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  boolean hasCreatedNewMerge=false;
  for (  Record mergedRecord : mergedRecords) {
    MatchResult matchResult=doMatch(mergedRecord,record);
    if (matchResult.isMatch()) {
      callback.onMatch(mergedRecord,record,matchResult);
      Record newMergedRecord=merger.merge(record,mergedRecord);
      queue.offer(newMergedRecord);
      callback.onNewMerge(newMergedRecord);
      mergedRecords.remove(mergedRecord);
      callback.onRemoveMerge(mergedRecord);
      hasCreatedNewMerge=true;
      break;
    }
 else {
      callback.onDifferent(mergedRecord,record,matchResult);
    }
  }
  if (!hasCreatedNewMerge) {
    record.getRelatedIds().add(record.getId());
    mergedRecords.add(record);
    callback.onNewMerge(record);
  }
  callback.onEndRecord(record);
}",0.1382675884505896
137220,"public List<Record> getResult(){
  while (!queue.isEmpty() && !callback.isInterrupted()) {
    Record currentRecord=queue.poll();
    matchOneRecord(callback,mergedRecords,queue,currentRecord);
  }
  callback.onEndProcessing();
  return this.mergedRecords;
}","public List<Record> getResult(){
  while (!queue.isEmpty() && !callback.isInterrupted()) {
    Record currentRecord=queue.poll();
    execute(currentRecord,mergedRecords,queue,callback);
  }
  callback.onEndProcessing();
  return this.mergedRecords;
}",0.8762278978388998
137221,"/** 
 * do the match on one record
 * @param oneRecord
 */
public void matchOneRecord(Record oneRecord){
  matchOneRecord(callback,mergedRecords,queue,oneRecord);
}","/** 
 * do the match on one record
 * @param oneRecord
 */
public void matchOneRecord(Record oneRecord){
  execute(oneRecord,mergedRecords,queue,callback);
}",0.8847352024922118
137222,"/** 
 * DOC yyin Comment method ""useCsvReader"".
 * @param file
 * @param delimitedFileconnection
 * @param analysisElementList
 * @throws IOException
 */
private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList) throws IOException {
  csvLimitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  csvHeadValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  csvReader=AnalysisExecutorHelper.createCsvReader(file,delimitedFileconnection);
  AnalysisExecutorHelper.initializeCsvReader(delimitedFileconnection,csvReader);
  findElementPosition(analysisElementList);
}","/** 
 * DOC yyin Comment method ""useCsvReader"".
 * @param file
 * @param delimitedFileconnection
 * @param analysisElementList
 * @throws IOException
 */
private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList) throws IOException {
  csvLimitValue=AnalysisExecutorHelper.getLimitValue(delimitedFileconnection);
  csvHeadValue=AnalysisExecutorHelper.getHeadValue(delimitedFileconnection);
  csvReader=AnalysisExecutorHelper.createCsvReader(file,delimitedFileconnection);
  AnalysisExecutorHelper.initializeCsvReader(delimitedFileconnection,csvReader);
  findElementPosition(analysisElementList);
}",0.9450381679389313
137223,"public DelimitedFileIterator(DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  String path=JavaSqlFactory.getURL(delimitedFileconnection);
  IPath iPath=new Path(path);
  File file=iPath.toFile();
  if (!file.exists()) {
    return;
  }
  isCSV=Escape.CSV.equals(delimitedFileconnection.getEscapeType());
  analysedColumnIndex=new int[analysisElementList.size()];
  analysedColumnName=new String[analysisElementList.size()];
  try {
    if (isCSV) {
      useCsvReader(file,delimitedFileconnection,analysisElementList);
    }
 else {
      useFileInputDelimited(file,delimitedFileconnection,analysisElementList);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public DelimitedFileIterator(DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  String path=AnalysisExecutorHelper.getFilePath(delimitedFileconnection);
  IPath iPath=new Path(path);
  File file=iPath.toFile();
  if (!file.exists()) {
    return;
  }
  isCSV=Escape.CSV.equals(delimitedFileconnection.getEscapeType());
  analysedColumnIndex=new int[analysisElementList.size()];
  analysedColumnName=new String[analysisElementList.size()];
  try {
    if (isCSV) {
      useCsvReader(file,delimitedFileconnection,analysisElementList);
    }
 else {
      useFileInputDelimited(file,delimitedFileconnection,analysisElementList);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9676975945017182
137224,"/** 
 * Test method for  {@link org.talend.dq.analysis.match.org.talend.dq.analysis.match.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. one block key one match key
 */
@Test public void testExecute2(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule createMatchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  createMatchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(createMatchRule1);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}","/** 
 * Test method for  {@link org.talend.dq.analysis.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. one block key one match key
 */
@Test public void testExecute2(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule createMatchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  createMatchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(createMatchRule1);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}",0.9962570848037644
137225,"/** 
 * Test method for  {@link org.talend.dq.analysis.match.org.talend.dq.analysis.match.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. no block key one match key
 */
@Test public void testExecute1(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule createMatchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  createMatchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName0);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(createMatchRule1);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (  Object[] objectArray : fullMatchResult) {
    Object object=objectArray[7];
    Assert.assertTrue(Boolean.parseBoolean(object.toString()));
  }
}","/** 
 * Test method for  {@link org.talend.dq.analysis.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. no block key one match key
 */
@Test public void testExecute1(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule createMatchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  createMatchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName0);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(createMatchRule1);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (  Object[] objectArray : fullMatchResult) {
    Object object=objectArray[7];
    Assert.assertTrue(Boolean.parseBoolean(object.toString()));
  }
}",0.994948766055708
137226,"/** 
 * Test method for  {@link org.talend.dq.analysis.match.org.talend.dq.analysis.match.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. same to case 3 but the match rule order is exchange
 */
@Test public void testExecute4(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule matchRule2=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition2=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule2.getMatchKeys().add(createMatchKeyDefinition2);
  createMatchKeyDefinition2.setColumn(columnName3);
  createMatchKeyDefinition2.setConfidenceWeight(1);
  createMatchKeyDefinition2.setName(""String_Node_Str"");
  createMatchKeyDefinition2.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition2=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition2.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition2.setAlgorithm(createAlgorithmDefinition2);
  matchRuleDef.getMatchRules().add(matchRule2);
  MatchRule matchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(matchRule1);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue) || ""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}","/** 
 * Test method for  {@link org.talend.dq.analysis.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. same to case 3 but the match rule order is exchange
 */
@Test public void testExecute4(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule matchRule2=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition2=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule2.getMatchKeys().add(createMatchKeyDefinition2);
  createMatchKeyDefinition2.setColumn(columnName3);
  createMatchKeyDefinition2.setConfidenceWeight(1);
  createMatchKeyDefinition2.setName(""String_Node_Str"");
  createMatchKeyDefinition2.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition2=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition2.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition2.setAlgorithm(createAlgorithmDefinition2);
  matchRuleDef.getMatchRules().add(matchRule2);
  MatchRule matchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(matchRule1);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue) || ""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}",0.9968115149858796
137227,"/** 
 * Test method for  {@link org.talend.dq.analysis.match.org.talend.dq.analysis.match.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. one block key, two match rule
 */
@Test public void testExecute3(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule matchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(matchRule1);
  MatchRule matchRule2=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition2=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule2.getMatchKeys().add(createMatchKeyDefinition2);
  createMatchKeyDefinition2.setColumn(columnName3);
  createMatchKeyDefinition2.setConfidenceWeight(1);
  createMatchKeyDefinition2.setName(""String_Node_Str"");
  createMatchKeyDefinition2.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition2=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition2.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition2.setAlgorithm(createAlgorithmDefinition2);
  matchRuleDef.getMatchRules().add(matchRule2);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue) || ""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}","/** 
 * Test method for  {@link org.talend.dq.analysis.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. one block key, two match rule
 */
@Test public void testExecute3(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule matchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(matchRule1);
  MatchRule matchRule2=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition2=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule2.getMatchKeys().add(createMatchKeyDefinition2);
  createMatchKeyDefinition2.setColumn(columnName3);
  createMatchKeyDefinition2.setConfidenceWeight(1);
  createMatchKeyDefinition2.setName(""String_Node_Str"");
  createMatchKeyDefinition2.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition2=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition2.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition2.setAlgorithm(createAlgorithmDefinition2);
  matchRuleDef.getMatchRules().add(matchRule2);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue) || ""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}",0.9967986828866734
137228,"public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements) throws SQLException {
  dataFromTable.clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return dataFromTable;
  }
  int columnListSize=analysedElements.size();
  TypedReturnCode<java.sql.Connection> sqlconnection=getSQLConnection(connection);
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=sqlconnection.getObject().createStatement();
    statement.execute(createSqlStatement(connection,analysedElements));
    resultSet=statement.getResultSet();
    while (resultSet.next()) {
      Object[] oneRow=new Object[columnListSize];
      for (int i=0; i < columnListSize; i++) {
        oneRow[i]=resultSet.getObject(i + 1);
      }
      handleRow(oneRow);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    ReturnCode closed=ConnectionUtils.closeConnection(sqlconnection.getObject());
    if (!closed.isOk()) {
      log.error(closed.getMessage());
    }
  }
  try {
    endQuery();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return dataFromTable;
}","public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements) throws SQLException {
  dataFromTable.clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return dataFromTable;
  }
  int columnListSize=analysedElements.size();
  TypedReturnCode<java.sql.Connection> sqlconnection=JavaSqlFactory.createConnection((Connection)connection);
  if (!sqlconnection.isOk()) {
    MessageDialogWithToggle.openWarning(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),sqlconnection.getMessage());
    throw new SQLException(sqlconnection.getMessage());
  }
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=sqlconnection.getObject().createStatement();
    statement.execute(createSqlStatement(connection,analysedElements));
    resultSet=statement.getResultSet();
    while (resultSet.next()) {
      Object[] oneRow=new Object[columnListSize];
      for (int i=0; i < columnListSize; i++) {
        oneRow[i]=resultSet.getObject(i + 1);
      }
      handleRow(oneRow);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    ReturnCode closed=ConnectionUtils.closeConnection(sqlconnection.getObject());
    if (!closed.isOk()) {
      log.error(closed.getMessage());
    }
  }
  try {
    endQuery();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return dataFromTable;
}",0.889589905362776
137229,"public StoreOnDiskHandler(RecordMatchingIndicator recordMatchingIndicator,final Map<MetadataColumn,String> columnMap,String container,int buffSize) throws IOException {
  this.columnMap=columnMap;
  this.recordMatchingIndicator=recordMatchingIndicator;
  this.blockKeyDefinitions=AnalysisRecordGroupingUtils.getBlockKeySchema(StoreOnDiskHandler.this.recordMatchingIndicator);
  initPersistentLookupManager(container,buffSize);
  generateKeyAPI=new AbstractGenerateKey();
}","public StoreOnDiskHandler(RecordMatchingIndicator recordMatchingIndicator,final Map<MetadataColumn,String> columnMap,String container,int buffSize) throws IOException {
  this.columnMap=columnMap;
  this.recordMatchingIndicator=recordMatchingIndicator;
  ExecuteMatchRuleHandler handler=new ExecuteMatchRuleHandler();
  this.blockKeyDefinitions=handler.getBlockKeySchema(StoreOnDiskHandler.this.recordMatchingIndicator);
  initPersistentLookupManager(container,buffSize);
  generateKeyAPI=new AbstractGenerateKey();
}",0.8998988877654196
137230,"public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements) throws SQLException {
  dataFromTable.clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return dataFromTable;
  }
  int columnListSize=analysedElements.size();
  TypedReturnCode<java.sql.Connection> sqlconnection=getSQLConnection(connection);
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=sqlconnection.getObject().createStatement();
    statement.execute(createSqlStatement(connection,analysedElements));
    resultSet=statement.getResultSet();
    while (resultSet.next()) {
      Object[] oneRow=new Object[columnListSize];
      for (int i=0; i < columnListSize; i++) {
        oneRow[i]=resultSet.getObject(i + 1);
      }
      handleRow(oneRow);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    ReturnCode closed=ConnectionUtils.closeConnection(sqlconnection.getObject());
    if (!closed.isOk()) {
      log.error(closed.getMessage());
    }
  }
  try {
    endQuery();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return dataFromTable;
}","public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements) throws SQLException {
  dataFromTable.clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return dataFromTable;
  }
  int columnListSize=analysedElements.size();
  TypedReturnCode<java.sql.Connection> sqlconnection=JavaSqlFactory.createConnection((Connection)connection);
  if (!sqlconnection.isOk()) {
    MessageDialogWithToggle.openWarning(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),sqlconnection.getMessage());
    throw new SQLException(sqlconnection.getMessage());
  }
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=sqlconnection.getObject().createStatement();
    statement.execute(createSqlStatement(connection,analysedElements));
    resultSet=statement.getResultSet();
    while (resultSet.next()) {
      Object[] oneRow=new Object[columnListSize];
      for (int i=0; i < columnListSize; i++) {
        oneRow[i]=resultSet.getObject(i + 1);
      }
      handleRow(oneRow);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    ReturnCode closed=ConnectionUtils.closeConnection(sqlconnection.getObject());
    if (!closed.isOk()) {
      log.error(closed.getMessage());
    }
  }
  try {
    endQuery();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return dataFromTable;
}",0.889589905362776
137231,"public StoreOnDiskHandler(RecordMatchingIndicator recordMatchingIndicator,final Map<MetadataColumn,String> columnMap,String container,int buffSize) throws IOException {
  this.columnMap=columnMap;
  this.recordMatchingIndicator=recordMatchingIndicator;
  this.blockKeyDefinitions=AnalysisRecordGroupingUtils.getBlockKeySchema(StoreOnDiskHandler.this.recordMatchingIndicator);
  initPersistentLookupManager(container,buffSize);
  generateKeyAPI=new AbstractGenerateKey();
}","public StoreOnDiskHandler(RecordMatchingIndicator recordMatchingIndicator,final Map<MetadataColumn,String> columnMap,String container,int buffSize) throws IOException {
  this.columnMap=columnMap;
  this.recordMatchingIndicator=recordMatchingIndicator;
  ExecuteMatchRuleHandler handler=new ExecuteMatchRuleHandler();
  this.blockKeyDefinitions=handler.getBlockKeySchema(StoreOnDiskHandler.this.recordMatchingIndicator);
  initPersistentLookupManager(container,buffSize);
  generateKeyAPI=new AbstractGenerateKey();
}",0.8998988877654196
137232,"/** 
 * DOC talend Comment method ""filterViewValuesData"".
 */
private Object[] filterViewValuesData(Object[] currentInputData){
  Object filterArray[]=new Object[remaindColumnIndexs.length];
  for (int remainIndex=0; remainIndex < remaindColumnIndexs.length; remainIndex++) {
    if (currentInputData.length >= remaindColumnIndexs[remainIndex]) {
      filterArray[remainIndex]=currentInputData[remaindColumnIndexs[remainIndex]];
    }
  }
  return filterArray;
}","/** 
 * DOC talend Comment method ""filterViewValuesData"".
 */
private Object[] filterViewValuesData(Object[] currentInputData){
  Object filterArray[]=new Object[remaindColumnIndexs.length];
  for (int remainIndex=0; remainIndex < remaindColumnIndexs.length; remainIndex++) {
    if (currentInputData != null && currentInputData.length >= remaindColumnIndexs[remainIndex]) {
      filterArray[remainIndex]=currentInputData[remaindColumnIndexs[remainIndex]];
    }
  }
  return filterArray;
}",0.9706498951781972
137233,"public List<Object[]> filterArray(List<Object[]> inputData){
  List<Object[]> retrunList=new ArrayList<Object[]>();
  for (int i=0; i < inputData.size(); i++) {
    Object[] currentInputData=inputData.get(i);
    if (remaindColumnIndexs.length == 1) {
      Object[] filterViewValuesData=filterViewValuesData(currentInputData);
      if (!isDuplicate(filterViewValuesData,retrunList)) {
        retrunList.add(filterViewValuesData);
      }
    }
 else {
      Object filterArray[]=new Object[remaindColumnIndexs.length];
      for (int remainIndex=0; remainIndex < remaindColumnIndexs.length; remainIndex++) {
        if (inputData.get(i).length >= remaindColumnIndexs[remainIndex]) {
          filterArray[remainIndex]=inputData.get(i)[remaindColumnIndexs[remainIndex]];
        }
      }
      retrunList.add(filterArray);
    }
  }
  return retrunList;
}","public List<Object[]> filterArray(List<Object[]> inputData){
  List<Object[]> returnList=new ArrayList<Object[]>();
  for (int i=0; i < inputData.size(); i++) {
    Object[] currentInputData=inputData.get(i);
    Object[] filterViewValuesData=filterViewValuesData(currentInputData);
    if (remaindColumnIndexs.length == 1) {
      if (!isDuplicate(filterViewValuesData,returnList)) {
        returnList.add(filterViewValuesData);
      }
    }
 else {
      returnList.add(filterViewValuesData);
    }
  }
  return returnList;
}",0.5926459985580389
137234,"/** 
 * Judge wheter current data is duplicate one
 * @param filterViewValuesData
 * @return
 */
private boolean isDuplicate(Object[] filterViewValuesData,List<Object[]> retrunList){
  for (  Object[] noDuplicateArray : retrunList) {
    if (noDuplicateArray[0] == null && filterViewValuesData[0] == null) {
      return true;
    }
 else     if (noDuplicateArray[0] == null || filterViewValuesData[0] == null) {
      continue;
    }
    if (noDuplicateArray[0].equals(filterViewValuesData[0])) {
      return true;
    }
  }
  return false;
}","/** 
 * Judge wheter current data is duplicate one
 * @param filterViewValuesData
 * @return
 */
private boolean isDuplicate(Object[] filterViewValuesData,List<Object[]> returnList){
  for (  Object[] noDuplicateArray : returnList) {
    if (filterViewValuesData != null && filterViewValuesData.length > 0 && (noDuplicateArray != null && noDuplicateArray.length > 0)) {
      if (noDuplicateArray[0] == null && filterViewValuesData[0] == null) {
        return true;
      }
 else       if (noDuplicateArray[0] == null || filterViewValuesData[0] == null) {
        continue;
      }
      if (noDuplicateArray[0].equals(filterViewValuesData[0])) {
        return true;
      }
    }
  }
  return false;
}",0.8157051282051282
137235,"@Override public List<Object[]> subList(long fromIndex,long toIndex,Map<Long,K> indexMap){
  boolean stratToRecord=false;
  List<Object[]> returnList=new ArrayList<Object[]>();
  K fromKey=null;
  K toKey=null;
  if (indexMap != null) {
    fromKey=indexMap.get(fromIndex);
    toKey=indexMap.get(toIndex);
  }
  Iterator<K> iterator=null;
  int index=0;
  if (fromKey == null) {
    iterator=this.iterator();
  }
 else   if (toKey == null) {
    NavigableSet<K> tailSet=tailSet(fromKey,true);
    index=(int)fromIndex;
    iterator=tailSet.iterator();
  }
 else {
    NavigableSet<K> tailSet=subSet(fromKey,toKey);
    index=(int)fromIndex;
    iterator=tailSet.iterator();
  }
  while (iterator.hasNext()) {
    K next=iterator.next();
    if (index == 0 && fromKey == null && indexMap != null) {
      indexMap.put(0l,next);
    }
    if (index == fromIndex) {
      stratToRecord=true;
    }
    if (index == toIndex && indexMap != null) {
      if (toKey == null) {
        indexMap.put(toIndex,next);
      }
      break;
    }
    if (stratToRecord == true) {
      returnList.add(((List)this.get(next)).toArray());
    }
    index++;
  }
  return returnList;
}","@Override public List<Object[]> subList(long fromIndex,long toIndex,Map<Long,K> indexMap){
  boolean stratToRecord=false;
  List<Object[]> returnList=new ArrayList<Object[]>();
  K fromKey=null;
  K toKey=null;
  if (indexMap != null) {
    fromKey=indexMap.get(fromIndex);
    toKey=indexMap.get(toIndex);
  }
  Iterator<K> iterator=null;
  int index=0;
  if (fromKey == null) {
    iterator=this.iterator();
  }
 else   if (toKey == null) {
    NavigableSet<K> tailSet=tailSet(fromKey,true);
    index=(int)fromIndex;
    iterator=tailSet.iterator();
  }
 else {
    NavigableSet<K> tailSet=subSet(fromKey,toKey);
    index=(int)fromIndex;
    iterator=tailSet.iterator();
  }
  while (iterator.hasNext()) {
    K next=iterator.next();
    if (index == 0 && fromKey == null && indexMap != null) {
      indexMap.put(0l,next);
    }
    if (index == fromIndex) {
      stratToRecord=true;
    }
    if (index == toIndex && indexMap != null) {
      if (toKey == null) {
        indexMap.put(toIndex,next);
      }
      break;
    }
    if (stratToRecord == true) {
      V v=this.get(next);
      if (v.getClass().isArray()) {
        returnList.add((Object[])v);
      }
 else       if (v instanceof String) {
        returnList.add(((String)v).split(""String_Node_Str""));
      }
 else {
        returnList.add(((List)v).toArray());
      }
    }
    index++;
  }
  return returnList;
}",0.9018380915134924
137236,"public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements) throws SQLException {
  dataFromTable.clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return dataFromTable;
  }
  int columnListSize=analysedElements.size();
  TypedReturnCode<java.sql.Connection> sqlconnection=JavaSqlFactory.createConnection((Connection)connection);
  if (!sqlconnection.isOk()) {
    MessageDialogWithToggle.openWarning(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),sqlconnection.getMessage());
    throw new SQLException(sqlconnection.getMessage());
  }
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=sqlconnection.getObject().createStatement();
    statement.execute(createSqlStatement(connection,analysedElements));
    resultSet=statement.getResultSet();
    while (resultSet.next()) {
      Object[] oneRow=new Object[columnListSize];
      for (int i=0; i < columnListSize; i++) {
        oneRow[i]=resultSet.getObject(i + 1);
      }
      handleRow(oneRow);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    ReturnCode closed=ConnectionUtils.closeConnection(sqlconnection.getObject());
    if (!closed.isOk()) {
      log.error(closed.getMessage());
    }
  }
  try {
    endQuery();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return dataFromTable;
}","public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements) throws SQLException {
  dataFromTable.clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return dataFromTable;
  }
  int columnListSize=analysedElements.size();
  TypedReturnCode<java.sql.Connection> sqlconnection=getSQLConnection(connection);
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    statement=sqlconnection.getObject().createStatement();
    statement.execute(createSqlStatement(connection,analysedElements));
    resultSet=statement.getResultSet();
    while (resultSet.next()) {
      Object[] oneRow=new Object[columnListSize];
      for (int i=0; i < columnListSize; i++) {
        oneRow[i]=resultSet.getObject(i + 1);
      }
      handleRow(oneRow);
    }
  }
 catch (  Exception e) {
    log.error(e,e);
  }
 finally {
    if (resultSet != null) {
      resultSet.close();
    }
    if (statement != null) {
      statement.close();
    }
    ReturnCode closed=ConnectionUtils.closeConnection(sqlconnection.getObject());
    if (!closed.isOk()) {
      log.error(closed.getMessage());
    }
  }
  try {
    endQuery();
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return dataFromTable;
}",0.889589905362776
137237,"public StoreOnDiskHandler(RecordMatchingIndicator recordMatchingIndicator,final Map<MetadataColumn,String> columnMap,String container,int buffSize) throws IOException {
  this.columnMap=columnMap;
  this.recordMatchingIndicator=recordMatchingIndicator;
  ExecuteMatchRuleHandler handler=new ExecuteMatchRuleHandler();
  this.blockKeyDefinitions=handler.getBlockKeySchema(StoreOnDiskHandler.this.recordMatchingIndicator);
  initPersistentLookupManager(container,buffSize);
  generateKeyAPI=new AbstractGenerateKey();
}","public StoreOnDiskHandler(RecordMatchingIndicator recordMatchingIndicator,final Map<MetadataColumn,String> columnMap,String container,int buffSize) throws IOException {
  this.columnMap=columnMap;
  this.recordMatchingIndicator=recordMatchingIndicator;
  this.blockKeyDefinitions=AnalysisRecordGroupingUtils.getBlockKeySchema(StoreOnDiskHandler.this.recordMatchingIndicator);
  initPersistentLookupManager(container,buffSize);
  generateKeyAPI=new AbstractGenerateKey();
}",0.8998988877654196
137238,"/** 
 * DOC yyin Comment method ""useCsvReader"".
 * @param file
 * @param delimitedFileconnection
 * @param analysisElementList
 * @throws IOException
 */
private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList) throws IOException {
  csvLimitValue=AnalysisExecutorHelper.getLimitValue(delimitedFileconnection);
  csvHeadValue=AnalysisExecutorHelper.getHeadValue(delimitedFileconnection);
  csvReader=AnalysisExecutorHelper.createCsvReader(file,delimitedFileconnection);
  AnalysisExecutorHelper.initializeCsvReader(delimitedFileconnection,csvReader);
  findElementPosition(analysisElementList);
}","/** 
 * DOC yyin Comment method ""useCsvReader"".
 * @param file
 * @param delimitedFileconnection
 * @param analysisElementList
 * @throws IOException
 */
private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList) throws IOException {
  csvLimitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  csvHeadValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  csvReader=AnalysisExecutorHelper.createCsvReader(file,delimitedFileconnection);
  AnalysisExecutorHelper.initializeCsvReader(delimitedFileconnection,csvReader);
  findElementPosition(analysisElementList);
}",0.9450381679389313
137239,"public DelimitedFileIterator(DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  String path=AnalysisExecutorHelper.getFilePath(delimitedFileconnection);
  IPath iPath=new Path(path);
  File file=iPath.toFile();
  if (!file.exists()) {
    return;
  }
  isCSV=Escape.CSV.equals(delimitedFileconnection.getEscapeType());
  analysedColumnIndex=new int[analysisElementList.size()];
  analysedColumnName=new String[analysisElementList.size()];
  try {
    if (isCSV) {
      useCsvReader(file,delimitedFileconnection,analysisElementList);
    }
 else {
      useFileInputDelimited(file,delimitedFileconnection,analysisElementList);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public DelimitedFileIterator(DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  String path=JavaSqlFactory.getURL(delimitedFileconnection);
  IPath iPath=new Path(path);
  File file=iPath.toFile();
  if (!file.exists()) {
    return;
  }
  isCSV=Escape.CSV.equals(delimitedFileconnection.getEscapeType());
  analysedColumnIndex=new int[analysisElementList.size()];
  analysedColumnName=new String[analysisElementList.size()];
  try {
    if (isCSV) {
      useCsvReader(file,delimitedFileconnection,analysisElementList);
    }
 else {
      useFileInputDelimited(file,delimitedFileconnection,analysisElementList);
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9676975945017182
137240,"/** 
 * Test method for  {@link org.talend.dq.analysis.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. one block key one match key
 */
@Test public void testExecute2(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule createMatchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  createMatchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(createMatchRule1);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}","/** 
 * Test method for  {@link org.talend.dq.analysis.match.org.talend.dq.analysis.match.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. one block key one match key
 */
@Test public void testExecute2(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule createMatchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  createMatchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(createMatchRule1);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}",0.9962570848037644
137241,"/** 
 * Test method for  {@link org.talend.dq.analysis.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. no block key one match key
 */
@Test public void testExecute1(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule createMatchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  createMatchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName0);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(createMatchRule1);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (  Object[] objectArray : fullMatchResult) {
    Object object=objectArray[7];
    Assert.assertTrue(Boolean.parseBoolean(object.toString()));
  }
}","/** 
 * Test method for  {@link org.talend.dq.analysis.match.org.talend.dq.analysis.match.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. no block key one match key
 */
@Test public void testExecute1(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule createMatchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  createMatchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName0);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(createMatchRule1);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (  Object[] objectArray : fullMatchResult) {
    Object object=objectArray[7];
    Assert.assertTrue(Boolean.parseBoolean(object.toString()));
  }
}",0.994948766055708
137242,"/** 
 * Test method for  {@link org.talend.dq.analysis.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. same to case 3 but the match rule order is exchange
 */
@Test public void testExecute4(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule matchRule2=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition2=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule2.getMatchKeys().add(createMatchKeyDefinition2);
  createMatchKeyDefinition2.setColumn(columnName3);
  createMatchKeyDefinition2.setConfidenceWeight(1);
  createMatchKeyDefinition2.setName(""String_Node_Str"");
  createMatchKeyDefinition2.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition2=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition2.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition2.setAlgorithm(createAlgorithmDefinition2);
  matchRuleDef.getMatchRules().add(matchRule2);
  MatchRule matchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(matchRule1);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue) || ""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}","/** 
 * Test method for  {@link org.talend.dq.analysis.match.org.talend.dq.analysis.match.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. same to case 3 but the match rule order is exchange
 */
@Test public void testExecute4(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule matchRule2=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition2=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule2.getMatchKeys().add(createMatchKeyDefinition2);
  createMatchKeyDefinition2.setColumn(columnName3);
  createMatchKeyDefinition2.setConfidenceWeight(1);
  createMatchKeyDefinition2.setName(""String_Node_Str"");
  createMatchKeyDefinition2.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition2=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition2.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition2.setAlgorithm(createAlgorithmDefinition2);
  matchRuleDef.getMatchRules().add(matchRule2);
  MatchRule matchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(matchRule1);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue) || ""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}",0.9968115149858796
137243,"/** 
 * Test method for  {@link org.talend.dq.analysis.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. one block key, two match rule
 */
@Test public void testExecute3(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule matchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(matchRule1);
  MatchRule matchRule2=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition2=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule2.getMatchKeys().add(createMatchKeyDefinition2);
  createMatchKeyDefinition2.setColumn(columnName3);
  createMatchKeyDefinition2.setConfidenceWeight(1);
  createMatchKeyDefinition2.setName(""String_Node_Str"");
  createMatchKeyDefinition2.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition2=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition2.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition2.setAlgorithm(createAlgorithmDefinition2);
  matchRuleDef.getMatchRules().add(matchRule2);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue) || ""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}","/** 
 * Test method for  {@link org.talend.dq.analysis.match.org.talend.dq.analysis.match.ExecuteMatchRuleHandler#execute(java.util.Map,org.talend.dataquality.indicators.columnset.RecordMatchingIndicator,java.util.List,org.talend.dataquality.indicators.columnset.BlockKeyIndicator)}. one block key, two match rule
 */
@Test public void testExecute3(){
  Map<MetadataColumn,String> columnMap=new HashMap<MetadataColumn,String>();
  MetadataColumn col0=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col0.setName(columnName0);
  columnMap.put(col0,""String_Node_Str"");
  MetadataColumn col1=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col1.setName(columnName1);
  columnMap.put(col1,""String_Node_Str"");
  MetadataColumn col2=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col2.setName(columnName2);
  columnMap.put(col2,""String_Node_Str"");
  MetadataColumn col3=ConnectionFactory.eINSTANCE.createMetadataColumn();
  col3.setName(columnName3);
  columnMap.put(col3,""String_Node_Str"");
  RecordMatchingIndicator recordMatchingIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDef=RulesPackage.eINSTANCE.getRulesFactory().createMatchRuleDefinition();
  recordMatchingIndicator.setBuiltInMatchRuleDefinition(matchRuleDef);
  MatchRule matchRule1=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule1.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition1.setColumn(columnName2);
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition1.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  matchRuleDef.getMatchRules().add(matchRule1);
  MatchRule matchRule2=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition2=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  matchRule2.getMatchKeys().add(createMatchKeyDefinition2);
  createMatchKeyDefinition2.setColumn(columnName3);
  createMatchKeyDefinition2.setConfidenceWeight(1);
  createMatchKeyDefinition2.setName(""String_Node_Str"");
  createMatchKeyDefinition2.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  AlgorithmDefinition createAlgorithmDefinition2=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createAlgorithmDefinition2.setAlgorithmType(AttributeMatcherType.EXACT.name());
  createMatchKeyDefinition2.setAlgorithm(createAlgorithmDefinition2);
  matchRuleDef.getMatchRules().add(matchRule2);
  BlockKeyDefinition createBlockKeyDefinition=RulesFactory.eINSTANCE.createBlockKeyDefinition();
  createBlockKeyDefinition.setColumn(columnName1);
  createBlockKeyDefinition.setName(""String_Node_Str"");
  AlgorithmDefinition blockPreAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPreAlgorithm.setAlgorithmType(BlockingKeyPreAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPreAlgorithm(blockPreAlgorithm);
  AlgorithmDefinition blockAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockAlgorithm.setAlgorithmType(BlockingKeyAlgorithmEnum.EXACT.getValue());
  createBlockKeyDefinition.setAlgorithm(blockAlgorithm);
  AlgorithmDefinition blockPostAlgorithm=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  blockPostAlgorithm.setAlgorithmType(BlockingKeyPostAlgorithmEnum.NON_ALGO.getValue());
  createBlockKeyDefinition.setPostAlgorithm(blockPostAlgorithm);
  matchRuleDef.getBlockKeys().add(createBlockKeyDefinition);
  List<Object[]> matchRows=new ArrayList<Object[]>();
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  matchRows.add(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  BlockKeyIndicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  ExecuteMatchRuleHandler execHandler=new ExecuteMatchRuleHandler();
  MatchGroupResultConsumer matchResultConsumer=createMatchGroupResultConsumer(columnMap,recordMatchingIndicator);
  TypedReturnCode<MatchGroupResultConsumer> executeResult=execHandler.execute(columnMap,recordMatchingIndicator,matchRows,blockKeyIndicator,matchResultConsumer);
  Assert.assertTrue(executeResult.isOk());
  Assert.assertTrue(executeResult.getMessage() == null);
  Assert.assertTrue(executeResult.getObject() != null);
  MatchGroupResultConsumer ResultConsumer=executeResult.getObject();
  List<Object[]> fullMatchResult=ResultConsumer.getFullMatchResult();
  Assert.assertTrue(fullMatchResult.size() == 4);
  for (int i=0; i < fullMatchResult.size(); i++) {
    Object[] objectArray=fullMatchResult.get(i);
    Object masterValue=objectArray[7];
    Object idValue=objectArray[0];
    if (""String_Node_Str"".equals(idValue) || ""String_Node_Str"".equals(idValue)) {
      Assert.assertFalse(Boolean.parseBoolean(masterValue.toString()));
    }
 else {
      Assert.assertTrue(Boolean.parseBoolean(masterValue.toString()));
    }
  }
}",0.9967986828866734
137244,"/** 
 * store data which from 'simpleIndicator.getListRows()' except RowCountIndicator.
 * @param indicToRowMap
 */
private void storeDataSet(){
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
  for (  Indicator indicator : analysis.getResults().getIndicators()) {
    if (indicator instanceof SimpleStatIndicator) {
      SimpleStatIndicator simpleIndicator=(SimpleStatIndicator)indicator;
      if (!analysis.getParameters().isStoreData()) {
        break;
      }
      if (simpleIndicator.isUsedMapDBMode()) {
      }
 else {
        List<Object[]> listRows=simpleIndicator.getListRows();
        if (listRows == null || listRows.isEmpty()) {
          break;
        }
        for (        Indicator leafIndicator : simpleIndicator.getLeafIndicators()) {
          if (leafIndicator instanceof RowCountIndicator) {
            continue;
          }
          List<Object[]> dataList=new ArrayList<Object[]>();
          AnalyzedDataSet analyzedDataSet=indicToRowMap.get(leafIndicator);
          if (analyzedDataSet == null) {
            analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
            indicToRowMap.put(leafIndicator,analyzedDataSet);
            analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
            analyzedDataSet.setRecordSize(0);
          }
          for (int i=0; i < listRows.size(); i++) {
            Object[] object=listRows.get(i);
            Object count=object[object.length > 0 ? object.length - 1 : 0];
            if (leafIndicator instanceof DistinctCountIndicator) {
              dataList.add(object);
            }
 else             if (leafIndicator instanceof UniqueCountIndicator) {
              if (count != null && NumberUtils.isNumber(count + PluginConstant.EMPTY_STRING)) {
                if (Long.valueOf(count + PluginConstant.EMPTY_STRING).longValue() == 1) {
                  dataList.add(object);
                }
              }
            }
 else             if (leafIndicator instanceof DuplicateCountIndicator) {
              if (count != null && NumberUtils.isNumber(count + PluginConstant.EMPTY_STRING)) {
                if (Long.valueOf(count + PluginConstant.EMPTY_STRING).longValue() > 1) {
                  dataList.add(object);
                }
              }
            }
          }
          analyzedDataSet.setData(dataList);
        }
        if (!simpleIndicator.isStoreData()) {
          simpleIndicator.setListRows(new ArrayList<Object[]>());
        }
      }
    }
    if (indicator instanceof AllMatchIndicator) {
      AllMatchIndicator allMatchIndicator=(AllMatchIndicator)indicator;
      if (!allMatchIndicator.isStoreData()) {
        allMatchIndicator.setListRows(new ArrayList<Object[]>());
      }
    }
  }
}","/** 
 * store data which from 'simpleIndicator.getListRows()' except RowCountIndicator.
 * @param indicToRowMap
 */
private void storeDataSet(){
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
  for (  Indicator indicator : analysis.getResults().getIndicators()) {
    if (indicator instanceof SimpleStatIndicator) {
      SimpleStatIndicator simpleIndicator=(SimpleStatIndicator)indicator;
      if (!analysis.getParameters().isStoreData()) {
        break;
      }
      if (simpleIndicator.isUsedMapDBMode() && AnalysisHelper.isJavaExecutionEngine(analysis)) {
      }
 else {
        List<Object[]> listRows=simpleIndicator.getListRows();
        if (listRows == null || listRows.isEmpty()) {
          break;
        }
        for (        Indicator leafIndicator : simpleIndicator.getLeafIndicators()) {
          if (leafIndicator instanceof RowCountIndicator) {
            continue;
          }
          List<Object[]> dataList=new ArrayList<Object[]>();
          AnalyzedDataSet analyzedDataSet=indicToRowMap.get(leafIndicator);
          if (analyzedDataSet == null) {
            analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
            indicToRowMap.put(leafIndicator,analyzedDataSet);
            analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
            analyzedDataSet.setRecordSize(0);
          }
          for (int i=0; i < listRows.size(); i++) {
            Object[] object=listRows.get(i);
            Object count=object[object.length > 0 ? object.length - 1 : 0];
            if (leafIndicator instanceof DistinctCountIndicator) {
              dataList.add(object);
            }
 else             if (leafIndicator instanceof UniqueCountIndicator) {
              if (count != null && NumberUtils.isNumber(count + PluginConstant.EMPTY_STRING)) {
                if (Long.valueOf(count + PluginConstant.EMPTY_STRING).longValue() == 1) {
                  dataList.add(object);
                }
              }
            }
 else             if (leafIndicator instanceof DuplicateCountIndicator) {
              if (count != null && NumberUtils.isNumber(count + PluginConstant.EMPTY_STRING)) {
                if (Long.valueOf(count + PluginConstant.EMPTY_STRING).longValue() > 1) {
                  dataList.add(object);
                }
              }
            }
          }
          analyzedDataSet.setData(dataList);
        }
        if (!simpleIndicator.isStoreData()) {
          simpleIndicator.setListRows(new ArrayList<Object[]>());
        }
      }
    }
    if (indicator instanceof AllMatchIndicator) {
      AllMatchIndicator allMatchIndicator=(AllMatchIndicator)indicator;
      if (!allMatchIndicator.isStoreData()) {
        allMatchIndicator.setListRows(new ArrayList<Object[]>());
      }
    }
  }
}",0.9911441728657456
137245,"@Override public void update(ViewerCell cell){
  Object element=cell.getElement();
  int index=cell.getColumnIndex();
  cell.setText(getColumnText(element,index));
  cell.setForeground(getForeground(element,index));
}","@Override public void update(ViewerCell cell){
  Object element=cell.getElement();
  int index=cell.getColumnIndex();
  cell.setText(getColumnText(element,index));
  cell.setForeground(getForeground(element,index));
  cell.setBackground(getBackground(element,index));
}",0.8930041152263375
137246,"@Override protected void createResultSection(Composite parent){
  executeData=getAnalysisHandler().getExecuteData();
  graphicsAndTableSection=this.createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite sectionClient=toolkit.createComposite(graphicsAndTableSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite graphicsComp=toolkit.createComposite(sectionClient);
  graphicsComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  graphicsComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
  Composite simpleSatisticsComp=toolkit.createComposite(sectionClient);
  simpleSatisticsComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  simpleSatisticsComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
 else {
    this.createSimpleStatisticsPart(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    if (0 < allMatchIndicator.getCompositeRegexMatchingIndicators().size()) {
      this.createAllMatchPart(sectionClient,""String_Node_Str"",allMatchIndicator);
    }
  }
  Composite tableComp=toolkit.createComposite(sectionClient);
  tableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  tableComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
 else {
    if (simpleStaticIndicator.isUsedMapDBMode()) {
      this.createTableSectionPartForMapDB(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    }
 else {
      this.createTableSectionPart(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    }
  }
  graphicsAndTableSection.setExpanded(true);
  graphicsAndTableSection.setClient(sectionClient);
}","@Override protected void createResultSection(Composite parent){
  executeData=getAnalysisHandler().getExecuteData();
  graphicsAndTableSection=this.createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite sectionClient=toolkit.createComposite(graphicsAndTableSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite graphicsComp=toolkit.createComposite(sectionClient);
  graphicsComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  graphicsComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
  Composite simpleSatisticsComp=toolkit.createComposite(sectionClient);
  simpleSatisticsComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  simpleSatisticsComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
 else {
    this.createSimpleStatisticsPart(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    if (0 < allMatchIndicator.getCompositeRegexMatchingIndicators().size()) {
      this.createAllMatchPart(sectionClient,""String_Node_Str"",allMatchIndicator);
    }
  }
  Composite tableComp=toolkit.createComposite(sectionClient);
  tableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  tableComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
 else {
    if (simpleStaticIndicator.isUsedMapDBMode() && AnalysisHelper.isJavaExecutionEngine(masterPage.getAnalysis())) {
      this.createTableSectionPartForMapDB(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    }
 else {
      this.createTableSectionPart(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    }
  }
  graphicsAndTableSection.setExpanded(true);
  graphicsAndTableSection.setClient(sectionClient);
}",0.9835
137247,"/** 
 * store data which from 'simpleIndicator.getListRows()' except RowCountIndicator.
 * @param indicToRowMap
 */
private void storeDataSet(){
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
  for (  Indicator indicator : analysis.getResults().getIndicators()) {
    if (indicator instanceof SimpleStatIndicator) {
      SimpleStatIndicator simpleIndicator=(SimpleStatIndicator)indicator;
      if (!analysis.getParameters().isStoreData()) {
        break;
      }
      if (simpleIndicator.isSaveTempDataToFile()) {
      }
 else {
        List<Object[]> listRows=simpleIndicator.getListRows();
        if (listRows == null || listRows.isEmpty()) {
          break;
        }
        for (        Indicator leafIndicator : simpleIndicator.getLeafIndicators()) {
          if (leafIndicator instanceof RowCountIndicator) {
            continue;
          }
          List<Object[]> dataList=new ArrayList<Object[]>();
          AnalyzedDataSet analyzedDataSet=indicToRowMap.get(leafIndicator);
          if (analyzedDataSet == null) {
            analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
            indicToRowMap.put(leafIndicator,analyzedDataSet);
            analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
            analyzedDataSet.setRecordSize(0);
          }
          for (int i=0; i < listRows.size(); i++) {
            Object[] object=listRows.get(i);
            Object count=object[object.length > 0 ? object.length - 1 : 0];
            if (leafIndicator instanceof DistinctCountIndicator) {
              dataList.add(object);
            }
 else             if (leafIndicator instanceof UniqueCountIndicator) {
              if (count != null && NumberUtils.isNumber(count + PluginConstant.EMPTY_STRING)) {
                if (Long.valueOf(count + PluginConstant.EMPTY_STRING).longValue() == 1) {
                  dataList.add(object);
                }
              }
            }
 else             if (leafIndicator instanceof DuplicateCountIndicator) {
              if (count != null && NumberUtils.isNumber(count + PluginConstant.EMPTY_STRING)) {
                if (Long.valueOf(count + PluginConstant.EMPTY_STRING).longValue() > 1) {
                  dataList.add(object);
                }
              }
            }
          }
          analyzedDataSet.setData(dataList);
        }
        if (!simpleIndicator.isStoreData()) {
          simpleIndicator.setListRows(new ArrayList<Object[]>());
        }
      }
    }
    if (indicator instanceof AllMatchIndicator) {
      AllMatchIndicator allMatchIndicator=(AllMatchIndicator)indicator;
      if (!allMatchIndicator.isStoreData()) {
        allMatchIndicator.setListRows(new ArrayList<Object[]>());
      }
    }
  }
}","/** 
 * store data which from 'simpleIndicator.getListRows()' except RowCountIndicator.
 * @param indicToRowMap
 */
private void storeDataSet(){
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
  for (  Indicator indicator : analysis.getResults().getIndicators()) {
    if (indicator instanceof SimpleStatIndicator) {
      SimpleStatIndicator simpleIndicator=(SimpleStatIndicator)indicator;
      if (!analysis.getParameters().isStoreData()) {
        break;
      }
      if (simpleIndicator.isUsedMapDBMode()) {
      }
 else {
        List<Object[]> listRows=simpleIndicator.getListRows();
        if (listRows == null || listRows.isEmpty()) {
          break;
        }
        for (        Indicator leafIndicator : simpleIndicator.getLeafIndicators()) {
          if (leafIndicator instanceof RowCountIndicator) {
            continue;
          }
          List<Object[]> dataList=new ArrayList<Object[]>();
          AnalyzedDataSet analyzedDataSet=indicToRowMap.get(leafIndicator);
          if (analyzedDataSet == null) {
            analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
            indicToRowMap.put(leafIndicator,analyzedDataSet);
            analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
            analyzedDataSet.setRecordSize(0);
          }
          for (int i=0; i < listRows.size(); i++) {
            Object[] object=listRows.get(i);
            Object count=object[object.length > 0 ? object.length - 1 : 0];
            if (leafIndicator instanceof DistinctCountIndicator) {
              dataList.add(object);
            }
 else             if (leafIndicator instanceof UniqueCountIndicator) {
              if (count != null && NumberUtils.isNumber(count + PluginConstant.EMPTY_STRING)) {
                if (Long.valueOf(count + PluginConstant.EMPTY_STRING).longValue() == 1) {
                  dataList.add(object);
                }
              }
            }
 else             if (leafIndicator instanceof DuplicateCountIndicator) {
              if (count != null && NumberUtils.isNumber(count + PluginConstant.EMPTY_STRING)) {
                if (Long.valueOf(count + PluginConstant.EMPTY_STRING).longValue() > 1) {
                  dataList.add(object);
                }
              }
            }
          }
          analyzedDataSet.setData(dataList);
        }
        if (!simpleIndicator.isStoreData()) {
          simpleIndicator.setListRows(new ArrayList<Object[]>());
        }
      }
    }
    if (indicator instanceof AllMatchIndicator) {
      AllMatchIndicator allMatchIndicator=(AllMatchIndicator)indicator;
      if (!allMatchIndicator.isStoreData()) {
        allMatchIndicator.setListRows(new ArrayList<Object[]>());
      }
    }
  }
}",0.9955365113372612
137248,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=createStatement();
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"",sqlStatement);
    log.warn(mess);
    ok.setReturnCode(mess,false);
    statement.close();
    return ok;
  }
  ok=getMessageForInvalidJUDIs();
  int columnCount=resultSet.getMetaData().getColumnCount();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int columnListSize=columnlist.size();
  label:   while (resultSet.next()) {
    for (int i=0; i < columnListSize; i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(col);
      Object object=null;
      try {
        object=resultSet.getObject(col);
      }
 catch (      SQLException e) {
        if (""String_Node_Str"".equals(resultSet.getString(col))) {
          object=null;
        }
      }
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        if (!continueRun()) {
          break label;
        }
        if (indicator instanceof DuplicateCountIndicator) {
          ((DuplicateCountIndicator)indicator).handle(object,resultSet,columnCount);
        }
 else {
          indicator.handle(object);
        }
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData()) {
          if (indicator.mustStoreRow()) {
            List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
            recordIncrement=valueObjectList.size();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnList=ColumnSetHelper.getColumns(doSwitch);
            for (int j=0; j < columnCount; j++) {
              String newcol=columnList.get(j).getName();
              Object newobject=null;
              try {
                newobject=resultSet.getObject(newcol);
              }
 catch (              SQLException e) {
                if (""String_Node_Str"".equals(resultSet.getString(newcol))) {
                  newobject=null;
                }
              }
              if (indicator.isSaveTempDataToFile()) {
                AbstractDB<Object> mapDB=indicator.getMapDB(StandardDBName.drillDown.name());
                if (mapDB.size() > maxNumberRows) {
                  break;
                }
                indicator.handleDrillDownData(object,newobject,columnCount,j,newcol);
                continue;
              }
 else {
                if (recordIncrement < maxNumberRows) {
                  if (recordIncrement < valueObjectList.size()) {
                    valueObjectList.get(recordIncrement)[j]=newobject;
                  }
 else {
                    Object[] valueObject=new Object[columnCount];
                    valueObject[j]=newobject;
                    valueObjectList.add(valueObject);
                  }
                }
 else {
                  break;
                }
              }
            }
          }
 else           if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
            List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnElementList=ColumnSetHelper.getColumns(doSwitch);
            int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
            for (            Object[] dataObject : removeValueObjectList) {
              if (dataObject[offsetting].equals(object)) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
          }
        }
      }
    }
  }
  for (int i=0; i < columnListSize; i++) {
    String col=columnlist.get(i);
    List<Indicator> indicators=getIndicators(col);
    if (indicators.size() > 0 && indicators.get(0).isSaveTempDataToFile()) {
      break;
    }
    for (    Indicator indicator : indicators) {
      if (indicator instanceof DuplicateCountIndicator) {
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        addResultToIndicatorToRowMap(indicator,indicToRowMap,maxNumberRows,columnCount);
      }
    }
  }
  resultSet.close();
  statement.close();
  getConnection().close();
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  Set<String> columns=getAnalyzedElements();
  List<String> columnlist=sortColumnName(columns,sqlStatement);
  if (columnlist.isEmpty()) {
    ok.setReturnCode(Messages.getString(""String_Node_Str""),false);
    return ok;
  }
  Map<String,String> columnlistMap=buildColumnListMap(columnlist);
  Statement statement=createStatement();
  if (continueRun()) {
    if (log.isInfoEnabled()) {
      log.info(""String_Node_Str"" + sqlStatement);
    }
    statement.execute(sqlStatement);
  }
  ResultSet resultSet=statement.getResultSet();
  if (resultSet == null) {
    String mess=Messages.getString(""String_Node_Str"",sqlStatement);
    log.warn(mess);
    ok.setReturnCode(mess,false);
    statement.close();
    return ok;
  }
  ok=getMessageForInvalidJUDIs();
  int columnCount=resultSet.getMetaData().getColumnCount();
  int maxNumberRows=analysis.getParameters().getMaxNumberRows();
  AnalysisResult anaResult=analysis.getResults();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=anaResult.getIndicToRowMap();
  indicToRowMap.clear();
  int recordIncrement=0;
  int columnListSize=columnlist.size();
  label:   while (resultSet.next()) {
    for (int i=0; i < columnListSize; i++) {
      String col=columnlist.get(i);
      List<Indicator> indicators=getIndicators(col);
      col=columnlistMap.get(col);
      Object object=null;
      try {
        object=resultSet.getObject(col);
      }
 catch (      SQLException e) {
        if (""String_Node_Str"".equals(resultSet.getString(col))) {
          object=null;
        }
      }
      if (object != null && !(object instanceof String) && object.toString().indexOf(""String_Node_Str"") > -1) {
        object=resultSet.getTimestamp(col);
      }
      for (      Indicator indicator : indicators) {
        indicator.setDirllDownSize(maxNumberRows);
        if (!continueRun()) {
          break label;
        }
        if (indicator instanceof DuplicateCountIndicator) {
          ((DuplicateCountIndicator)indicator).handle(object,resultSet,columnCount);
        }
 else {
          indicator.handle(object);
        }
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        if (analysis.getParameters().isStoreData()) {
          if (indicator.mustStoreRow()) {
            List<Object[]> valueObjectList=initDataSet(indicator,indicToRowMap,object);
            recordIncrement=valueObjectList.size();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnList=ColumnSetHelper.getColumns(doSwitch);
            for (int j=0; j < columnCount; j++) {
              String newcol=columnList.get(j).getName();
              Object newobject=null;
              try {
                newobject=resultSet.getObject(newcol);
              }
 catch (              SQLException e) {
                if (""String_Node_Str"".equals(resultSet.getString(newcol))) {
                  newobject=null;
                }
              }
              if (indicator.isUsedMapDBMode()) {
                indicator.handleDrillDownData(object,newobject,columnCount,j,newcol);
                continue;
              }
 else {
                if (recordIncrement < maxNumberRows) {
                  if (recordIncrement < valueObjectList.size()) {
                    valueObjectList.get(recordIncrement)[j]=newobject;
                  }
 else {
                    Object[] valueObject=new Object[columnCount];
                    valueObject[j]=newobject;
                    valueObjectList.add(valueObject);
                  }
                }
 else {
                  break;
                }
              }
            }
          }
 else           if (indicator instanceof UniqueCountIndicator && analysis.getResults().getIndicToRowMap().get(indicator).getData() != null) {
            List<Object[]> removeValueObjectList=analysis.getResults().getIndicToRowMap().get(indicator).getData();
            ColumnSet doSwitch=SwitchHelpers.COLUMN_SET_SWITCH.doSwitch(indicator.getAnalyzedElement().eContainer());
            List<TdColumn> columnElementList=ColumnSetHelper.getColumns(doSwitch);
            int offsetting=columnElementList.indexOf(indicator.getAnalyzedElement());
            for (            Object[] dataObject : removeValueObjectList) {
              if (dataObject[offsetting].equals(object)) {
                removeValueObjectList.remove(dataObject);
                break;
              }
            }
          }
        }
      }
    }
  }
  for (int i=0; i < columnListSize; i++) {
    String col=columnlist.get(i);
    List<Indicator> indicators=getIndicators(col);
    if (indicators.size() > 0 && indicators.get(0).isUsedMapDBMode()) {
      break;
    }
    for (    Indicator indicator : indicators) {
      if (indicator instanceof DuplicateCountIndicator) {
        AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
        if (analyzedDataSet == null) {
          analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
          indicToRowMap.put(indicator,analyzedDataSet);
          analyzedDataSet.setDataCount(maxNumberRows);
          analyzedDataSet.setRecordSize(0);
        }
        addResultToIndicatorToRowMap(indicator,indicToRowMap,maxNumberRows,columnCount);
      }
    }
  }
  resultSet.close();
  statement.close();
  getConnection().close();
  return ok;
}",0.9753191489361702
137249,"@Override protected void createResultSection(Composite parent){
  executeData=getAnalysisHandler().getExecuteData();
  graphicsAndTableSection=this.createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite sectionClient=toolkit.createComposite(graphicsAndTableSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite graphicsComp=toolkit.createComposite(sectionClient);
  graphicsComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  graphicsComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
  Composite simpleSatisticsComp=toolkit.createComposite(sectionClient);
  simpleSatisticsComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  simpleSatisticsComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
 else {
    this.createSimpleStatisticsPart(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    if (0 < allMatchIndicator.getCompositeRegexMatchingIndicators().size()) {
      this.createAllMatchPart(sectionClient,""String_Node_Str"",allMatchIndicator);
    }
  }
  Composite tableComp=toolkit.createComposite(sectionClient);
  tableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  tableComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
 else {
    if (simpleStaticIndicator.isSaveTempDataToFile()) {
      this.createTableSectionPartForMapDB(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    }
 else {
      this.createTableSectionPart(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    }
  }
  graphicsAndTableSection.setExpanded(true);
  graphicsAndTableSection.setClient(sectionClient);
}","@Override protected void createResultSection(Composite parent){
  executeData=getAnalysisHandler().getExecuteData();
  graphicsAndTableSection=this.createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite sectionClient=toolkit.createComposite(graphicsAndTableSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite graphicsComp=toolkit.createComposite(sectionClient);
  graphicsComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  graphicsComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
  Composite simpleSatisticsComp=toolkit.createComposite(sectionClient);
  simpleSatisticsComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  simpleSatisticsComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
 else {
    this.createSimpleStatisticsPart(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    if (0 < allMatchIndicator.getCompositeRegexMatchingIndicators().size()) {
      this.createAllMatchPart(sectionClient,""String_Node_Str"",allMatchIndicator);
    }
  }
  Composite tableComp=toolkit.createComposite(sectionClient);
  tableComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  tableComp.setLayout(new GridLayout());
  if (executeData == null || executeData.equals(PluginConstant.EMPTY_STRING)) {
    return;
  }
 else {
    if (simpleStaticIndicator.isUsedMapDBMode()) {
      this.createTableSectionPartForMapDB(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    }
 else {
      this.createTableSectionPart(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""),simpleStaticIndicator);
    }
  }
  graphicsAndTableSection.setExpanded(true);
  graphicsAndTableSection.setClient(sectionClient);
}",0.9926377253109926
137250,"/** 
 * Get MapDB which store the drill down data for columnSet analysis
 * @param analysisType
 */
private AbstractDB<Object> getColumnSetAnalysisMapDB(AnalysisType analysisType){
  if (AnalysisType.COLUMN_SET == analysisType) {
    SimpleStatIndicator simpleStatIndicator=null;
    for (    Indicator indicator : analysis.getResults().getIndicators()) {
      if (SimpleStatIndicator.class.isInstance(indicator)) {
        simpleStatIndicator=(SimpleStatIndicator)indicator;
        break;
      }
    }
    if (simpleStatIndicator != null) {
      return simpleStatIndicator.getMapDB(StandardDBName.computeProcess.name());
    }
  }
  return null;
}","/** 
 * Get MapDB which store the drill down data for columnSet analysis
 * @param analysisType
 */
private AbstractDB<Object> getColumnSetAnalysisMapDB(AnalysisType analysisType){
  if (AnalysisType.COLUMN_SET == analysisType) {
    SimpleStatIndicator simpleStatIndicator=null;
    for (    Indicator indicator : analysis.getResults().getIndicators()) {
      if (SimpleStatIndicator.class.isInstance(indicator)) {
        simpleStatIndicator=(SimpleStatIndicator)indicator;
        break;
      }
    }
    if (simpleStatIndicator != null) {
      return simpleStatIndicator.getMapDB(StandardDBName.dataSection.name());
    }
  }
  return null;
}",0.980784012298232
137251,"/** 
 * Get the name of MapDB
 * @return
 */
private String getDBMapName(AnalysisType analysisType){
  String dbMapName=StandardDBName.drillDown.name();
  if (FrequencyIndicator.class.isInstance(currIndicator)) {
    dbMapName=this.getSelectValue();
  }
 else   if (LengthIndicator.class.isInstance(currIndicator)) {
    String selectValue=((LengthIndicator)currIndicator).getLength().toString();
    dbMapName=this.getSelectValue() + selectValue;
  }
 else   if (AnalysisType.COLUMN_SET == analysisType) {
    dbMapName=StandardDBName.computeProcess.name();
  }
  return dbMapName;
}","/** 
 * Get the name of MapDB
 * @return
 */
private String getDBMapName(AnalysisType analysisType){
  String dbMapName=StandardDBName.drillDown.name();
  if (FrequencyIndicator.class.isInstance(currIndicator)) {
    dbMapName=this.getSelectValue();
  }
 else   if (LengthIndicator.class.isInstance(currIndicator)) {
    String selectValue=((LengthIndicator)currIndicator).getLength().toString();
    dbMapName=this.getSelectValue() + selectValue;
  }
 else   if (AnalysisType.COLUMN_SET == analysisType) {
    dbMapName=StandardDBName.dataSection.name();
  }
  return dbMapName;
}",0.9785407725321889
137252,"@Override public void createPartControl(Composite parent){
  GridLayout layout=new GridLayout();
  parent.setLayoutData(new GridData(GridData.FILL_BOTH));
  parent.setLayout(layout);
  makeAction();
  createCoolBar(parent);
  tableView=new TableViewer(parent,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER);
  Table table=tableView.getTable();
  MenuManager popupMenu=new MenuManager();
  popupMenu.add(exportAction);
  Menu menu=popupMenu.createContextMenu(table);
  table.setMenu(menu);
  exportAction.setTable(table);
  GridDataFactory.fillDefaults().grab(true,true).align(SWT.FILL,SWT.FILL).applyTo(table);
  if (this.getEditorInput() instanceof DrillDownEditorInput) {
    DrillDownEditorInput ddEditorInput=(DrillDownEditorInput)this.getEditorInput();
    if (ddEditorInput.getCurrIndicator().isSaveTempDataToFile()) {
      initTableViewerForMapDB(parent,table,ddEditorInput);
    }
 else {
      initTableViewerForJava(table,ddEditorInput);
    }
    for (    TableColumn packColumn : table.getColumns()) {
      packColumn.pack();
    }
  }
}","@Override public void createPartControl(Composite parent){
  GridLayout layout=new GridLayout();
  parent.setLayoutData(new GridData(GridData.FILL_BOTH));
  parent.setLayout(layout);
  makeAction();
  createCoolBar(parent);
  tableView=new TableViewer(parent,SWT.SINGLE | SWT.FULL_SELECTION | SWT.BORDER);
  Table table=tableView.getTable();
  MenuManager popupMenu=new MenuManager();
  popupMenu.add(exportAction);
  Menu menu=popupMenu.createContextMenu(table);
  table.setMenu(menu);
  exportAction.setTable(table);
  GridDataFactory.fillDefaults().grab(true,true).align(SWT.FILL,SWT.FILL).applyTo(table);
  if (this.getEditorInput() instanceof DrillDownEditorInput) {
    DrillDownEditorInput ddEditorInput=(DrillDownEditorInput)this.getEditorInput();
    if (ddEditorInput.getCurrIndicator().isUsedMapDBMode()) {
      initTableViewerForMapDB(parent,table,ddEditorInput);
    }
 else {
      initTableViewerForJava(table,ddEditorInput);
    }
    for (    TableColumn packColumn : table.getColumns()) {
      packColumn.pack();
    }
  }
}",0.9861442904921166
137253,"@Override public void mouseDown(MouseEvent e){
  if (table.getMenu() != null) {
    table.getMenu().setVisible(false);
  }
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
    if (indicator != null && dataEntity != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
      Long rowCount=getRowCount(analysis,dataEntity.getIndicator().getAnalyzedElement());
      if (!isJAVALanguage) {
        boolean showExtraMenu=false;
        for (        final MenuItemEntity itemEntity : itemEntities) {
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(itemEntity.getLabel());
          item.setImage(itemEntity.getIcon());
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              String query=itemEntity.getQuery();
              String editorName=indicator.getName();
              if (isPatternMatchingIndicator(indicator) && !((PatternExplorer)explorer).isImplementRegexFunction(itemEntity.getLabel())) {
                MessageDialog.openInformation(new Shell(),itemEntity.getLabel(),DefaultMessagesImpl.getString(""String_Node_Str""));
                return;
              }
              CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
          if (IndicatorHelper.isWhereRuleIndicatorNotAide(indicator)) {
            WhereRuleIndicator ind=(WhereRuleIndicator)indicator;
            EList<JoinElement> joinConditions=ind.getJoinConditions();
            if (joinConditions.size() > 0) {
              showExtraMenu=true;
            }
          }
          if (isPatternFrequencyIndicator(indicator)) {
            MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
            itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
            itemCreatePatt.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                PatternTransformer pattTransformer=new PatternTransformer(language);
                createPattern(analysis,itemEntity,pattTransformer);
              }
            }
);
          }
        }
        if (showExtraMenu) {
          MenuItem itemCreateWhereRule=new MenuItem(menu,SWT.PUSH);
          itemCreateWhereRule.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreateWhereRule.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              final StructuredSelection selectionOne=(StructuredSelection)tbViewer.getSelection();
              Object firstElement=selectionOne.getFirstElement();
              if (firstElement instanceof WhereRuleChartDataEntity) {
                WhereRuleChartDataEntity wrChartDataEntity=(WhereRuleChartDataEntity)firstElement;
                WhereRuleIndicator wrInd=(WhereRuleIndicator)wrChartDataEntity.getIndicator();
                CreateDuplicatesAnalysisAction action=new CreateDuplicatesAnalysisAction(buildColumnsMap(wrInd));
                action.run();
              }
            }
            /** 
 * DOC xqliu Comment method ""buildColumnsMap"".
 * @param wrInd
 * @return
 */
            private Map<ColumnSet,List<TdColumn>> buildColumnsMap(            WhereRuleIndicator wrInd){
              Map<ColumnSet,List<TdColumn>> map=new HashMap<ColumnSet,List<TdColumn>>();
              List<TdColumn> columns=new ArrayList<TdColumn>();
              EList<JoinElement> joinConditions=wrInd.getJoinConditions();
              for (              JoinElement joinElement : joinConditions) {
                TdColumn tempColumn=(TdColumn)joinElement.getColA();
                if (!columns.contains(tempColumn)) {
                  columns.add(tempColumn);
                }
                tempColumn=(TdColumn)joinElement.getColB();
                if (!columns.contains(tempColumn)) {
                  columns.add(tempColumn);
                }
              }
              for (              TdColumn column : columns) {
                ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
                List<TdColumn> list=map.get(columnSet);
                if (list == null) {
                  list=new ArrayList<TdColumn>();
                  map.put(columnSet,list);
                }
                list.add(column);
              }
              return getUserSelectedMap(map);
            }
            /** 
 * DOC xqliu Comment method ""getUserSelectedMap"".
 * @param map
 * @return
 */
            private Map<ColumnSet,List<TdColumn>> getUserSelectedMap(            Map<ColumnSet,List<TdColumn>> map){
              Map<ColumnSet,List<TdColumn>> userMap=new HashMap<ColumnSet,List<TdColumn>>();
              List<RepositoryNode> columnNodes=getColumnNodes(map);
              RepositoryNode rootNode=getConnectionNode(map);
              if (!columnNodes.isEmpty() && rootNode != null) {
                ColumnsMapSelectionDialog dialog=new ColumnsMapSelectionDialog(null,PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),columnNodes,rootNode,DefaultMessagesImpl.getString(""String_Node_Str""));
                dialog.setAllMap(map);
                if (dialog.open() == Window.OK) {
                  userMap=dialog.getUserMap();
                }
              }
              return userMap;
            }
            /** 
 * DOC xqliu Comment method ""getConnectionNode"".
 * @param map
 * @return
 */
            private RepositoryNode getConnectionNode(            Map<ColumnSet,List<TdColumn>> map){
              RepositoryNode node=null;
              if (map != null && !map.isEmpty()) {
                Connection connection=ConnectionHelper.getConnection(map.keySet().iterator().next());
                if (connection != null) {
                  node=RepositoryNodeHelper.recursiveFind(connection);
                }
              }
              return node;
            }
            /** 
 * DOC xqliu Comment method ""getColumnNodes"".
 * @param map
 * @return
 */
            private List<RepositoryNode> getColumnNodes(            Map<ColumnSet,List<TdColumn>> map){
              List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
              if (map != null && !map.isEmpty()) {
                List<TdColumn> columns=new ArrayList<TdColumn>();
                Set<ColumnSet> keySet=map.keySet();
                for (                ColumnSet cs : keySet) {
                  columns.addAll(map.get(cs));
                }
                if (!columns.isEmpty()) {
                  for (                  TdColumn column : columns) {
                    nodes.add(RepositoryNodeHelper.recursiveFind(column));
                  }
                }
              }
              return nodes;
            }
          }
);
        }
      }
 else {
        if (analysis.getParameters().isStoreData()) {
          if (indicator.isSaveTempDataToFile()) {
            createDrillDownMenuForMapDB(dataEntity,menu,itemEntities);
          }
 else {
            createDrillDownMenuForJava(dataEntity,menu,itemEntities);
          }
          if (isPatternFrequencyIndicator(indicator)) {
            for (            final MenuItemEntity itemEntity : itemEntities) {
              if (itemEntity.getQuery() == null) {
                if (dataEntity.getKey() == null) {
                  itemEntity.setQuery(dataEntity.getLabel());
                }
 else {
                  itemEntity.setQuery(dataEntity.getKey().toString());
                }
              }
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                  PatternTransformer pattTransformer=new PatternTransformer(language);
                  createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
        }
        if (isDatePatternFrequencyIndicator(indicator)) {
          final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
              IFolder folder=ResourceManager.getPatternRegexFolder();
              String model=dataEntity.getLabel();
              String regex=dateIndicator.getRegex(model);
              new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",model == null ? ""String_Node_Str"" : ""String_Node_Str"" + model + ""String_Node_Str"",language.getDbmsName()).run();
            }
          }
);
        }
      }
      addJobGenerationMenu(menu,analysis,indicator);
      menu.setVisible(true);
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  if (table.getMenu() != null) {
    table.getMenu().setVisible(false);
  }
  if (e.button == 3) {
    StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
    final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
    final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
    if (indicator != null && dataEntity != null) {
      Menu menu=new Menu(table.getShell(),SWT.POP_UP);
      table.setMenu(menu);
      MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
      Long rowCount=getRowCount(analysis,dataEntity.getIndicator().getAnalyzedElement());
      if (!isJAVALanguage) {
        boolean showExtraMenu=false;
        for (        final MenuItemEntity itemEntity : itemEntities) {
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(itemEntity.getLabel());
          item.setImage(itemEntity.getIcon());
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              String query=itemEntity.getQuery();
              String editorName=indicator.getName();
              if (isPatternMatchingIndicator(indicator) && !((PatternExplorer)explorer).isImplementRegexFunction(itemEntity.getLabel())) {
                MessageDialog.openInformation(new Shell(),itemEntity.getLabel(),DefaultMessagesImpl.getString(""String_Node_Str""));
                return;
              }
              CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
            }
          }
);
          if (IndicatorHelper.isWhereRuleIndicatorNotAide(indicator)) {
            WhereRuleIndicator ind=(WhereRuleIndicator)indicator;
            EList<JoinElement> joinConditions=ind.getJoinConditions();
            if (joinConditions.size() > 0) {
              showExtraMenu=true;
            }
          }
          if (isPatternFrequencyIndicator(indicator)) {
            MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
            itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
            itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
            itemCreatePatt.addSelectionListener(new SelectionAdapter(){
              @Override public void widgetSelected(              SelectionEvent e){
                DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                PatternTransformer pattTransformer=new PatternTransformer(language);
                createPattern(analysis,itemEntity,pattTransformer);
              }
            }
);
          }
        }
        if (showExtraMenu) {
          MenuItem itemCreateWhereRule=new MenuItem(menu,SWT.PUSH);
          itemCreateWhereRule.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreateWhereRule.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              final StructuredSelection selectionOne=(StructuredSelection)tbViewer.getSelection();
              Object firstElement=selectionOne.getFirstElement();
              if (firstElement instanceof WhereRuleChartDataEntity) {
                WhereRuleChartDataEntity wrChartDataEntity=(WhereRuleChartDataEntity)firstElement;
                WhereRuleIndicator wrInd=(WhereRuleIndicator)wrChartDataEntity.getIndicator();
                CreateDuplicatesAnalysisAction action=new CreateDuplicatesAnalysisAction(buildColumnsMap(wrInd));
                action.run();
              }
            }
            /** 
 * DOC xqliu Comment method ""buildColumnsMap"".
 * @param wrInd
 * @return
 */
            private Map<ColumnSet,List<TdColumn>> buildColumnsMap(            WhereRuleIndicator wrInd){
              Map<ColumnSet,List<TdColumn>> map=new HashMap<ColumnSet,List<TdColumn>>();
              List<TdColumn> columns=new ArrayList<TdColumn>();
              EList<JoinElement> joinConditions=wrInd.getJoinConditions();
              for (              JoinElement joinElement : joinConditions) {
                TdColumn tempColumn=(TdColumn)joinElement.getColA();
                if (!columns.contains(tempColumn)) {
                  columns.add(tempColumn);
                }
                tempColumn=(TdColumn)joinElement.getColB();
                if (!columns.contains(tempColumn)) {
                  columns.add(tempColumn);
                }
              }
              for (              TdColumn column : columns) {
                ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
                List<TdColumn> list=map.get(columnSet);
                if (list == null) {
                  list=new ArrayList<TdColumn>();
                  map.put(columnSet,list);
                }
                list.add(column);
              }
              return getUserSelectedMap(map);
            }
            /** 
 * DOC xqliu Comment method ""getUserSelectedMap"".
 * @param map
 * @return
 */
            private Map<ColumnSet,List<TdColumn>> getUserSelectedMap(            Map<ColumnSet,List<TdColumn>> map){
              Map<ColumnSet,List<TdColumn>> userMap=new HashMap<ColumnSet,List<TdColumn>>();
              List<RepositoryNode> columnNodes=getColumnNodes(map);
              RepositoryNode rootNode=getConnectionNode(map);
              if (!columnNodes.isEmpty() && rootNode != null) {
                ColumnsMapSelectionDialog dialog=new ColumnsMapSelectionDialog(null,PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),columnNodes,rootNode,DefaultMessagesImpl.getString(""String_Node_Str""));
                dialog.setAllMap(map);
                if (dialog.open() == Window.OK) {
                  userMap=dialog.getUserMap();
                }
              }
              return userMap;
            }
            /** 
 * DOC xqliu Comment method ""getConnectionNode"".
 * @param map
 * @return
 */
            private RepositoryNode getConnectionNode(            Map<ColumnSet,List<TdColumn>> map){
              RepositoryNode node=null;
              if (map != null && !map.isEmpty()) {
                Connection connection=ConnectionHelper.getConnection(map.keySet().iterator().next());
                if (connection != null) {
                  node=RepositoryNodeHelper.recursiveFind(connection);
                }
              }
              return node;
            }
            /** 
 * DOC xqliu Comment method ""getColumnNodes"".
 * @param map
 * @return
 */
            private List<RepositoryNode> getColumnNodes(            Map<ColumnSet,List<TdColumn>> map){
              List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
              if (map != null && !map.isEmpty()) {
                List<TdColumn> columns=new ArrayList<TdColumn>();
                Set<ColumnSet> keySet=map.keySet();
                for (                ColumnSet cs : keySet) {
                  columns.addAll(map.get(cs));
                }
                if (!columns.isEmpty()) {
                  for (                  TdColumn column : columns) {
                    nodes.add(RepositoryNodeHelper.recursiveFind(column));
                  }
                }
              }
              return nodes;
            }
          }
);
        }
      }
 else {
        if (analysis.getParameters().isStoreData()) {
          if (indicator.isUsedMapDBMode()) {
            createDrillDownMenuForMapDB(dataEntity,menu,itemEntities);
          }
 else {
            createDrillDownMenuForJava(dataEntity,menu,itemEntities);
          }
          if (isPatternFrequencyIndicator(indicator)) {
            for (            final MenuItemEntity itemEntity : itemEntities) {
              if (itemEntity.getQuery() == null) {
                if (dataEntity.getKey() == null) {
                  itemEntity.setQuery(dataEntity.getLabel());
                }
 else {
                  itemEntity.setQuery(dataEntity.getKey().toString());
                }
              }
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                  PatternTransformer pattTransformer=new PatternTransformer(language);
                  createPattern(analysis,itemEntity,pattTransformer);
                }
              }
);
            }
          }
        }
        if (isDatePatternFrequencyIndicator(indicator)) {
          final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
          MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
          itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
          itemCreatePatt.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
              IFolder folder=ResourceManager.getPatternRegexFolder();
              String model=dataEntity.getLabel();
              String regex=dateIndicator.getRegex(model);
              new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",model == null ? ""String_Node_Str"" : ""String_Node_Str"" + model + ""String_Node_Str"",language.getDbmsName()).run();
            }
          }
);
        }
      }
      addJobGenerationMenu(menu,analysis,indicator);
      menu.setVisible(true);
    }
  }
}",0.998753179392549
137254,"public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  final boolean isJAVALanguage=ExecutionLanguage.JAVA == currentEngine;
  final Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
  final boolean isMDMAnalysis=ConnectionUtils.isMdmConnection(tdDataProvider);
  final boolean isDelimitedFileAnalysis=ConnectionUtils.isDelimitedFileConnection(tdDataProvider);
  final boolean isHiveConnection=ConnectionHelper.isHive(tdDataProvider);
  final Table table=tbViewer.getTable();
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      if (e.button == 3) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
        if (indicator != null && dataEntity != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          Long rowCount=getRowCount(analysis,dataEntity.getIndicator().getAnalyzedElement());
          if (!isJAVALanguage) {
            boolean showExtraMenu=false;
            for (            final MenuItemEntity itemEntity : itemEntities) {
              MenuItem item=new MenuItem(menu,SWT.PUSH);
              item.setText(itemEntity.getLabel());
              item.setImage(itemEntity.getIcon());
              item.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  String query=itemEntity.getQuery();
                  String editorName=indicator.getName();
                  if (isPatternMatchingIndicator(indicator) && !((PatternExplorer)explorer).isImplementRegexFunction(itemEntity.getLabel())) {
                    MessageDialog.openInformation(new Shell(),itemEntity.getLabel(),DefaultMessagesImpl.getString(""String_Node_Str""));
                    return;
                  }
                  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
              if (IndicatorHelper.isWhereRuleIndicatorNotAide(indicator)) {
                WhereRuleIndicator ind=(WhereRuleIndicator)indicator;
                EList<JoinElement> joinConditions=ind.getJoinConditions();
                if (joinConditions.size() > 0) {
                  showExtraMenu=true;
                }
              }
              if (isPatternFrequencyIndicator(indicator)) {
                MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
                itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
                itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                  @Override public void widgetSelected(                  SelectionEvent e){
                    DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                    PatternTransformer pattTransformer=new PatternTransformer(language);
                    createPattern(analysis,itemEntity,pattTransformer);
                  }
                }
);
              }
            }
            if (showExtraMenu) {
              MenuItem itemCreateWhereRule=new MenuItem(menu,SWT.PUSH);
              itemCreateWhereRule.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreateWhereRule.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  final StructuredSelection selectionOne=(StructuredSelection)tbViewer.getSelection();
                  Object firstElement=selectionOne.getFirstElement();
                  if (firstElement instanceof WhereRuleChartDataEntity) {
                    WhereRuleChartDataEntity wrChartDataEntity=(WhereRuleChartDataEntity)firstElement;
                    WhereRuleIndicator wrInd=(WhereRuleIndicator)wrChartDataEntity.getIndicator();
                    CreateDuplicatesAnalysisAction action=new CreateDuplicatesAnalysisAction(buildColumnsMap(wrInd));
                    action.run();
                  }
                }
                /** 
 * DOC xqliu Comment method ""buildColumnsMap"".
 * @param wrInd
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> buildColumnsMap(                WhereRuleIndicator wrInd){
                  Map<ColumnSet,List<TdColumn>> map=new HashMap<ColumnSet,List<TdColumn>>();
                  List<TdColumn> columns=new ArrayList<TdColumn>();
                  EList<JoinElement> joinConditions=wrInd.getJoinConditions();
                  for (                  JoinElement joinElement : joinConditions) {
                    TdColumn tempColumn=(TdColumn)joinElement.getColA();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                    tempColumn=(TdColumn)joinElement.getColB();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                  }
                  for (                  TdColumn column : columns) {
                    ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
                    List<TdColumn> list=map.get(columnSet);
                    if (list == null) {
                      list=new ArrayList<TdColumn>();
                      map.put(columnSet,list);
                    }
                    list.add(column);
                  }
                  return getUserSelectedMap(map);
                }
                /** 
 * DOC xqliu Comment method ""getUserSelectedMap"".
 * @param map
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> getUserSelectedMap(                Map<ColumnSet,List<TdColumn>> map){
                  Map<ColumnSet,List<TdColumn>> userMap=new HashMap<ColumnSet,List<TdColumn>>();
                  List<RepositoryNode> columnNodes=getColumnNodes(map);
                  RepositoryNode rootNode=getConnectionNode(map);
                  if (!columnNodes.isEmpty() && rootNode != null) {
                    ColumnsMapSelectionDialog dialog=new ColumnsMapSelectionDialog(null,PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),columnNodes,rootNode,DefaultMessagesImpl.getString(""String_Node_Str""));
                    dialog.setAllMap(map);
                    if (dialog.open() == Window.OK) {
                      userMap=dialog.getUserMap();
                    }
                  }
                  return userMap;
                }
                /** 
 * DOC xqliu Comment method ""getConnectionNode"".
 * @param map
 * @return
 */
                private RepositoryNode getConnectionNode(                Map<ColumnSet,List<TdColumn>> map){
                  RepositoryNode node=null;
                  if (map != null && !map.isEmpty()) {
                    Connection connection=ConnectionHelper.getConnection(map.keySet().iterator().next());
                    if (connection != null) {
                      node=RepositoryNodeHelper.recursiveFind(connection);
                    }
                  }
                  return node;
                }
                /** 
 * DOC xqliu Comment method ""getColumnNodes"".
 * @param map
 * @return
 */
                private List<RepositoryNode> getColumnNodes(                Map<ColumnSet,List<TdColumn>> map){
                  List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
                  if (map != null && !map.isEmpty()) {
                    List<TdColumn> columns=new ArrayList<TdColumn>();
                    Set<ColumnSet> keySet=map.keySet();
                    for (                    ColumnSet cs : keySet) {
                      columns.addAll(map.get(cs));
                    }
                    if (!columns.isEmpty()) {
                      for (                      TdColumn column : columns) {
                        nodes.add(RepositoryNodeHelper.recursiveFind(column));
                      }
                    }
                  }
                  return nodes;
                }
              }
);
            }
          }
 else {
            if (analysis.getParameters().isStoreData()) {
              if (indicator.isSaveTempDataToFile()) {
                createDrillDownMenuForMapDB(dataEntity,menu,itemEntities);
              }
 else {
                createDrillDownMenuForJava(dataEntity,menu,itemEntities);
              }
              if (isPatternFrequencyIndicator(indicator)) {
                for (                final MenuItemEntity itemEntity : itemEntities) {
                  if (itemEntity.getQuery() == null) {
                    if (dataEntity.getKey() == null) {
                      itemEntity.setQuery(dataEntity.getLabel());
                    }
 else {
                      itemEntity.setQuery(dataEntity.getKey().toString());
                    }
                  }
                  MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
                  itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                  itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
                  itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                    @Override public void widgetSelected(                    SelectionEvent e){
                      DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                      PatternTransformer pattTransformer=new PatternTransformer(language);
                      createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
            }
            if (isDatePatternFrequencyIndicator(indicator)) {
              final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                  IFolder folder=ResourceManager.getPatternRegexFolder();
                  String model=dataEntity.getLabel();
                  String regex=dateIndicator.getRegex(model);
                  new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",model == null ? ""String_Node_Str"" : ""String_Node_Str"" + model + ""String_Node_Str"",language.getDbmsName()).run();
                }
              }
);
            }
          }
          addJobGenerationMenu(menu,analysis,indicator);
          menu.setVisible(true);
        }
      }
    }
    private void createDrillDownMenuForMapDB(    final ChartDataEntity dataEntity,    Menu menu,    MenuItemEntity[] itemEntities){
      final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
      if (dataEntity == null || RowCountIndicator.class.isInstance(indicator)) {
        return;
      }
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            CorePlugin.getDefault().openEditor(new DrillDownEditorInput(analysis,dataEntity,itemEntity),ChartTableFactory.DRILL_DOWN_EDITOR);
          }
        }
);
      }
    }
    /** 
 * DOC talend Comment method ""createDrillDownMenu"".
 * @param analysis
 * @param dataEntity
 * @param menu
 * @param itemEntities
 */
    private void createDrillDownMenuForJava(    final ChartDataEntity dataEntity,    Menu menu,    MenuItemEntity[] itemEntities){
      final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(indicator);
      boolean hasData=analyDataSet != null && (analyDataSet.getData() != null && analyDataSet.getData().size() > 0 || analyDataSet.getFrequencyData() != null && analyDataSet.getFrequencyData().size() > 0 || analyDataSet.getPatternData() != null && analyDataSet.getPatternData().size() > 0);
      if (hasData) {
        for (        final MenuItemEntity itemEntity : itemEntities) {
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(itemEntity.getLabel());
          item.setImage(itemEntity.getIcon());
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              CorePlugin.getDefault().openEditor(new DrillDownEditorInput(analysis,dataEntity,itemEntity),ChartTableFactory.DRILL_DOWN_EDITOR);
            }
          }
);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getRowCount"".
 * @param analysis
 * @param analyzedElement
 * @return
 */
    private Long getRowCount(    Analysis analysis,    ModelElement analyzedElement){
      Long rowCount=0L;
      EList<Indicator> indicators=analysis.getResults().getIndicators();
      for (      Indicator ind : indicators) {
        if (ind instanceof RowCountIndicator && ind.getAnalyzedElement().equals(analyzedElement)) {
          rowCount=ind.getCount();
        }
      }
      return rowCount;
    }
    private SelectionAdapter getAdapter(    final IDatabaseJobService service){
      return new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          service.executeJob();
        }
      }
;
    }
  }
);
  TableUtils.addTooltipOnTableItem(table);
}","public static void addMenuAndTip(final TableViewer tbViewer,final IDataExplorer explorer,final Analysis analysis){
  final ExecutionLanguage currentEngine=analysis.getParameters().getExecutionLanguage();
  final boolean isJAVALanguage=ExecutionLanguage.JAVA == currentEngine;
  final Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
  final boolean isMDMAnalysis=ConnectionUtils.isMdmConnection(tdDataProvider);
  final boolean isDelimitedFileAnalysis=ConnectionUtils.isDelimitedFileConnection(tdDataProvider);
  final boolean isHiveConnection=ConnectionHelper.isHive(tdDataProvider);
  final Table table=tbViewer.getTable();
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (table.getMenu() != null) {
        table.getMenu().setVisible(false);
      }
      if (e.button == 3) {
        StructuredSelection selection=(StructuredSelection)tbViewer.getSelection();
        final ChartDataEntity dataEntity=(ChartDataEntity)selection.getFirstElement();
        final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
        if (indicator != null && dataEntity != null) {
          Menu menu=new Menu(table.getShell(),SWT.POP_UP);
          table.setMenu(menu);
          MenuItemEntity[] itemEntities=ChartTableMenuGenerator.generate(explorer,analysis,dataEntity);
          Long rowCount=getRowCount(analysis,dataEntity.getIndicator().getAnalyzedElement());
          if (!isJAVALanguage) {
            boolean showExtraMenu=false;
            for (            final MenuItemEntity itemEntity : itemEntities) {
              MenuItem item=new MenuItem(menu,SWT.PUSH);
              item.setText(itemEntity.getLabel());
              item.setImage(itemEntity.getIcon());
              item.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  String query=itemEntity.getQuery();
                  String editorName=indicator.getName();
                  if (isPatternMatchingIndicator(indicator) && !((PatternExplorer)explorer).isImplementRegexFunction(itemEntity.getLabel())) {
                    MessageDialog.openInformation(new Shell(),itemEntity.getLabel(),DefaultMessagesImpl.getString(""String_Node_Str""));
                    return;
                  }
                  CorePlugin.getDefault().runInDQViewer(tdDataProvider,query,editorName);
                }
              }
);
              if (IndicatorHelper.isWhereRuleIndicatorNotAide(indicator)) {
                WhereRuleIndicator ind=(WhereRuleIndicator)indicator;
                EList<JoinElement> joinConditions=ind.getJoinConditions();
                if (joinConditions.size() > 0) {
                  showExtraMenu=true;
                }
              }
              if (isPatternFrequencyIndicator(indicator)) {
                MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
                itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
                itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                  @Override public void widgetSelected(                  SelectionEvent e){
                    DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                    PatternTransformer pattTransformer=new PatternTransformer(language);
                    createPattern(analysis,itemEntity,pattTransformer);
                  }
                }
);
              }
            }
            if (showExtraMenu) {
              MenuItem itemCreateWhereRule=new MenuItem(menu,SWT.PUSH);
              itemCreateWhereRule.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreateWhereRule.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  final StructuredSelection selectionOne=(StructuredSelection)tbViewer.getSelection();
                  Object firstElement=selectionOne.getFirstElement();
                  if (firstElement instanceof WhereRuleChartDataEntity) {
                    WhereRuleChartDataEntity wrChartDataEntity=(WhereRuleChartDataEntity)firstElement;
                    WhereRuleIndicator wrInd=(WhereRuleIndicator)wrChartDataEntity.getIndicator();
                    CreateDuplicatesAnalysisAction action=new CreateDuplicatesAnalysisAction(buildColumnsMap(wrInd));
                    action.run();
                  }
                }
                /** 
 * DOC xqliu Comment method ""buildColumnsMap"".
 * @param wrInd
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> buildColumnsMap(                WhereRuleIndicator wrInd){
                  Map<ColumnSet,List<TdColumn>> map=new HashMap<ColumnSet,List<TdColumn>>();
                  List<TdColumn> columns=new ArrayList<TdColumn>();
                  EList<JoinElement> joinConditions=wrInd.getJoinConditions();
                  for (                  JoinElement joinElement : joinConditions) {
                    TdColumn tempColumn=(TdColumn)joinElement.getColA();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                    tempColumn=(TdColumn)joinElement.getColB();
                    if (!columns.contains(tempColumn)) {
                      columns.add(tempColumn);
                    }
                  }
                  for (                  TdColumn column : columns) {
                    ColumnSet columnSet=ColumnHelper.getColumnOwnerAsColumnSet(column);
                    List<TdColumn> list=map.get(columnSet);
                    if (list == null) {
                      list=new ArrayList<TdColumn>();
                      map.put(columnSet,list);
                    }
                    list.add(column);
                  }
                  return getUserSelectedMap(map);
                }
                /** 
 * DOC xqliu Comment method ""getUserSelectedMap"".
 * @param map
 * @return
 */
                private Map<ColumnSet,List<TdColumn>> getUserSelectedMap(                Map<ColumnSet,List<TdColumn>> map){
                  Map<ColumnSet,List<TdColumn>> userMap=new HashMap<ColumnSet,List<TdColumn>>();
                  List<RepositoryNode> columnNodes=getColumnNodes(map);
                  RepositoryNode rootNode=getConnectionNode(map);
                  if (!columnNodes.isEmpty() && rootNode != null) {
                    ColumnsMapSelectionDialog dialog=new ColumnsMapSelectionDialog(null,PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),columnNodes,rootNode,DefaultMessagesImpl.getString(""String_Node_Str""));
                    dialog.setAllMap(map);
                    if (dialog.open() == Window.OK) {
                      userMap=dialog.getUserMap();
                    }
                  }
                  return userMap;
                }
                /** 
 * DOC xqliu Comment method ""getConnectionNode"".
 * @param map
 * @return
 */
                private RepositoryNode getConnectionNode(                Map<ColumnSet,List<TdColumn>> map){
                  RepositoryNode node=null;
                  if (map != null && !map.isEmpty()) {
                    Connection connection=ConnectionHelper.getConnection(map.keySet().iterator().next());
                    if (connection != null) {
                      node=RepositoryNodeHelper.recursiveFind(connection);
                    }
                  }
                  return node;
                }
                /** 
 * DOC xqliu Comment method ""getColumnNodes"".
 * @param map
 * @return
 */
                private List<RepositoryNode> getColumnNodes(                Map<ColumnSet,List<TdColumn>> map){
                  List<RepositoryNode> nodes=new ArrayList<RepositoryNode>();
                  if (map != null && !map.isEmpty()) {
                    List<TdColumn> columns=new ArrayList<TdColumn>();
                    Set<ColumnSet> keySet=map.keySet();
                    for (                    ColumnSet cs : keySet) {
                      columns.addAll(map.get(cs));
                    }
                    if (!columns.isEmpty()) {
                      for (                      TdColumn column : columns) {
                        nodes.add(RepositoryNodeHelper.recursiveFind(column));
                      }
                    }
                  }
                  return nodes;
                }
              }
);
            }
          }
 else {
            if (analysis.getParameters().isStoreData()) {
              if (indicator.isUsedMapDBMode()) {
                createDrillDownMenuForMapDB(dataEntity,menu,itemEntities);
              }
 else {
                createDrillDownMenuForJava(dataEntity,menu,itemEntities);
              }
              if (isPatternFrequencyIndicator(indicator)) {
                for (                final MenuItemEntity itemEntity : itemEntities) {
                  if (itemEntity.getQuery() == null) {
                    if (dataEntity.getKey() == null) {
                      itemEntity.setQuery(dataEntity.getLabel());
                    }
 else {
                      itemEntity.setQuery(dataEntity.getKey().toString());
                    }
                  }
                  MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
                  itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
                  itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
                  itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                    @Override public void widgetSelected(                    SelectionEvent e){
                      DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                      PatternTransformer pattTransformer=new PatternTransformer(language);
                      createPattern(analysis,itemEntity,pattTransformer);
                    }
                  }
);
                }
              }
            }
            if (isDatePatternFrequencyIndicator(indicator)) {
              final DatePatternFreqIndicator dateIndicator=(DatePatternFreqIndicator)indicator;
              MenuItem itemCreatePatt=new MenuItem(menu,SWT.PUSH);
              itemCreatePatt.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              itemCreatePatt.setImage(ImageLib.getImage(ImageLib.PATTERN_REG));
              itemCreatePatt.addSelectionListener(new SelectionAdapter(){
                @Override public void widgetSelected(                SelectionEvent e){
                  DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(analysis);
                  IFolder folder=ResourceManager.getPatternRegexFolder();
                  String model=dataEntity.getLabel();
                  String regex=dateIndicator.getRegex(model);
                  new CreatePatternAction(folder,ExpressionType.REGEXP,""String_Node_Str"" + regex + ""String_Node_Str"",model == null ? ""String_Node_Str"" : ""String_Node_Str"" + model + ""String_Node_Str"",language.getDbmsName()).run();
                }
              }
);
            }
          }
          addJobGenerationMenu(menu,analysis,indicator);
          menu.setVisible(true);
        }
      }
    }
    private void createDrillDownMenuForMapDB(    final ChartDataEntity dataEntity,    Menu menu,    MenuItemEntity[] itemEntities){
      final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
      if (dataEntity == null || RowCountIndicator.class.isInstance(indicator)) {
        return;
      }
      for (      final MenuItemEntity itemEntity : itemEntities) {
        MenuItem item=new MenuItem(menu,SWT.PUSH);
        item.setText(itemEntity.getLabel());
        item.setImage(itemEntity.getIcon());
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            CorePlugin.getDefault().openEditor(new DrillDownEditorInput(analysis,dataEntity,itemEntity),ChartTableFactory.DRILL_DOWN_EDITOR);
          }
        }
);
      }
    }
    /** 
 * DOC talend Comment method ""createDrillDownMenu"".
 * @param analysis
 * @param dataEntity
 * @param menu
 * @param itemEntities
 */
    private void createDrillDownMenuForJava(    final ChartDataEntity dataEntity,    Menu menu,    MenuItemEntity[] itemEntities){
      final Indicator indicator=dataEntity != null ? dataEntity.getIndicator() : null;
      AnalyzedDataSet analyDataSet=analysis.getResults().getIndicToRowMap().get(indicator);
      boolean hasData=analyDataSet != null && (analyDataSet.getData() != null && analyDataSet.getData().size() > 0 || analyDataSet.getFrequencyData() != null && analyDataSet.getFrequencyData().size() > 0 || analyDataSet.getPatternData() != null && analyDataSet.getPatternData().size() > 0);
      if (hasData) {
        for (        final MenuItemEntity itemEntity : itemEntities) {
          MenuItem item=new MenuItem(menu,SWT.PUSH);
          item.setText(itemEntity.getLabel());
          item.setImage(itemEntity.getIcon());
          item.addSelectionListener(new SelectionAdapter(){
            @Override public void widgetSelected(            SelectionEvent e){
              CorePlugin.getDefault().openEditor(new DrillDownEditorInput(analysis,dataEntity,itemEntity),ChartTableFactory.DRILL_DOWN_EDITOR);
            }
          }
);
        }
      }
    }
    /** 
 * DOC xqliu Comment method ""getRowCount"".
 * @param analysis
 * @param analyzedElement
 * @return
 */
    private Long getRowCount(    Analysis analysis,    ModelElement analyzedElement){
      Long rowCount=0L;
      EList<Indicator> indicators=analysis.getResults().getIndicators();
      for (      Indicator ind : indicators) {
        if (ind instanceof RowCountIndicator && ind.getAnalyzedElement().equals(analyzedElement)) {
          rowCount=ind.getCount();
        }
      }
      return rowCount;
    }
    private SelectionAdapter getAdapter(    final IDatabaseJobService service){
      return new SelectionAdapter(){
        @Override public void widgetSelected(        SelectionEvent e){
          service.executeJob();
        }
      }
;
    }
  }
);
  TableUtils.addTooltipOnTableItem(table);
}",0.9991387922422406
137255,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public void setBlockSize2frequency(TreeMap<Object,Long> newBlockSize2frequency){
  TreeMap<Object,Long> oldBlockSize2frequency=blockSize2frequency;
  blockSize2frequency=newBlockSize2frequency;
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,ColumnsetPackage.BLOCK_KEY_INDICATOR__BLOCK_SIZE2FREQUENCY,oldBlockSize2frequency,blockSize2frequency));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public void setBlockSize2frequency(TreeMap<Object,Long> newBlockSize2frequency){
  TreeMap<Object,Long> oldBlockSize2frequency=blockSize2frequency;
  blockSize2frequency=newBlockSize2frequency;
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,ColumnsetPackage.BLOCK_KEY_INDICATOR__BLOCK_SIZE2FREQUENCY,oldBlockSize2frequency,blockSize2frequency));
  }
}",0.98068669527897
137256,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public String toString(){
  if (eIsProxy())   return super.toString();
  StringBuffer result=new StringBuffer(super.toString());
  result.append(""String_Node_Str"");
  result.append(blockSize2frequency);
  result.append(')');
  return result.toString();
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public String toString(){
  if (eIsProxy()) {
    return super.toString();
  }
  StringBuffer result=new StringBuffer(super.toString());
  result.append(""String_Node_Str"");
  result.append(blockSize2frequency);
  result.append(')');
  return result.toString();
}",0.9117647058823528
137257,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public TreeMap<Object,Long> getBlockSize2frequency(){
  return blockSize2frequency;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public TreeMap<Object,Long> getBlockSize2frequency(){
  return blockSize2frequency;
}",0.9691358024691358
137258,"/** 
 * if the DriverClassName is empty or Jar File Path is invalid return false.
 * @param dbConn a General JDBC database connection
 * @return
 */
public static ReturnCode checkGeneralJdbcJarFilePathDriverClassName(DatabaseConnection dbConn){
  ReturnCode returnCode=new ReturnCode();
  String driverClass=dbConn.getDriverClass();
  String driverJarPath=dbConn.getDriverJarPath();
  if (dbConn.isContextMode()) {
    driverClass=getOriginalConntextValue(dbConn,driverClass);
    driverJarPath=getOriginalConntextValue(dbConn,driverJarPath);
  }
  if (driverClass == null || driverClass.trim().equals(""String_Node_Str"")) {
    returnCode.setOk(false);
    returnCode.setMessage(Messages.getString(""String_Node_Str""));
  }
 else {
    if (driverJarPath == null || driverJarPath.trim().equals(""String_Node_Str"")) {
      returnCode.setOk(false);
      returnCode.setMessage(Messages.getString(""String_Node_Str""));
    }
 else {
      String[] splits=driverJarPath.split(""String_Node_Str"");
      for (      String str : splits) {
        if (str != null && str.trim().length() > 0) {
          File jarFile=new File(str);
          if (!jarFile.exists() || jarFile.isDirectory()) {
            returnCode.setOk(false);
            returnCode.setMessage(Messages.getString(""String_Node_Str""));
            break;
          }
        }
      }
    }
  }
  return returnCode;
}","/** 
 * if the DriverClassName is empty or Jar File Path is invalid return false.
 * @param dbConn a General JDBC database connection
 * @return
 */
public static ReturnCode checkGeneralJdbcJarFilePathDriverClassName(DatabaseConnection dbConn){
  ReturnCode returnCode=new ReturnCode();
  String driverClass=JavaSqlFactory.getDriverClass(dbConn);
  String driverJarPath=JavaSqlFactory.getDriverJarPath(dbConn);
  if (driverClass == null || driverClass.trim().equals(""String_Node_Str"")) {
    returnCode.setOk(false);
    returnCode.setMessage(Messages.getString(""String_Node_Str""));
  }
 else {
    if (driverJarPath == null || driverJarPath.trim().equals(""String_Node_Str"")) {
      returnCode.setOk(false);
      returnCode.setMessage(Messages.getString(""String_Node_Str""));
    }
 else {
      String[] splits=driverJarPath.split(""String_Node_Str"");
      for (      String str : splits) {
        if (str != null && str.trim().length() > 0) {
          File jarFile=new File(str);
          if (!jarFile.exists() || jarFile.isDirectory()) {
            returnCode.setOk(false);
            returnCode.setMessage(Messages.getString(""String_Node_Str""));
            break;
          }
        }
      }
    }
  }
  return returnCode;
}",0.9003831417624522
137259,"/** 
 * DOC xqliu Comment method ""createConnectionParam"".
 * @param conn
 * @return
 */
public static DBConnectionParameter createConnectionParam(Connection conn){
  DBConnectionParameter connectionParam=new DBConnectionParameter();
  Properties properties=new Properties();
  properties.setProperty(TaggedValueHelper.USER,JavaSqlFactory.getUsername(conn));
  properties.setProperty(TaggedValueHelper.PASSWORD,JavaSqlFactory.getPassword(conn));
  connectionParam.setParameters(properties);
  connectionParam.setName(conn.getName());
  connectionParam.setAuthor(MetadataHelper.getAuthor(conn));
  connectionParam.setDescription(MetadataHelper.getDescription(conn));
  connectionParam.setPurpose(MetadataHelper.getPurpose(conn));
  connectionParam.setStatus(MetadataHelper.getDevStatus(conn));
  connectionParam.setDriverPath(((DatabaseConnection)conn).getDriverJarPath());
  connectionParam.setDriverClassName(JavaSqlFactory.getDriverClass(conn));
  connectionParam.setJdbcUrl(JavaSqlFactory.getURL(conn));
  connectionParam.setHost(ConnectionUtils.getServerName(conn));
  connectionParam.setPort(ConnectionUtils.getPort(conn));
  if (conn instanceof DatabaseConnection) {
    connectionParam.setSqlTypeName(((DatabaseConnection)conn).getDatabaseType());
    String dbmsId=((DatabaseConnection)conn).getDbmsId();
    connectionParam.setDbmsId(dbmsId);
    connectionParam.setFilterCatalog(dbmsId);
  }
  if (conn instanceof DatabaseConnection) {
    DatabaseConnection dbConnection=(DatabaseConnection)conn;
    connectionParam.setOtherParameter(dbConnection.getUiSchema());
    connectionParam.setFilterSchema(dbConnection.getUiSchema());
  }
  connectionParam.setDbName(ConnectionUtils.getSID(conn));
  String retrieveAllMetadata=MetadataHelper.getRetrieveAllMetadata(conn);
  connectionParam.setRetrieveAllMetadata(retrieveAllMetadata == null ? true : new Boolean(retrieveAllMetadata).booleanValue());
  return connectionParam;
}","/** 
 * DOC xqliu Comment method ""createConnectionParam"".
 * @param conn
 * @return
 */
public static DBConnectionParameter createConnectionParam(Connection conn){
  DBConnectionParameter connectionParam=new DBConnectionParameter();
  Properties properties=new Properties();
  properties.setProperty(TaggedValueHelper.USER,JavaSqlFactory.getUsername(conn));
  properties.setProperty(TaggedValueHelper.PASSWORD,JavaSqlFactory.getPassword(conn));
  connectionParam.setParameters(properties);
  connectionParam.setName(conn.getName());
  connectionParam.setAuthor(MetadataHelper.getAuthor(conn));
  connectionParam.setDescription(MetadataHelper.getDescription(conn));
  connectionParam.setPurpose(MetadataHelper.getPurpose(conn));
  connectionParam.setStatus(MetadataHelper.getDevStatus(conn));
  connectionParam.setDriverPath(((DatabaseConnection)conn).getDriverJarPath());
  connectionParam.setDriverClassName(JavaSqlFactory.getDriverClass(conn));
  connectionParam.setJdbcUrl(JavaSqlFactory.getURL(conn));
  connectionParam.setHost(JavaSqlFactory.getServerName(conn));
  connectionParam.setPort(JavaSqlFactory.getPort(conn));
  if (conn instanceof DatabaseConnection) {
    connectionParam.setSqlTypeName(((DatabaseConnection)conn).getDatabaseType());
    String dbmsId=((DatabaseConnection)conn).getDbmsId();
    connectionParam.setDbmsId(dbmsId);
    connectionParam.setFilterCatalog(dbmsId);
  }
  if (conn instanceof DatabaseConnection) {
    DatabaseConnection dbConnection=(DatabaseConnection)conn;
    connectionParam.setOtherParameter(dbConnection.getUiSchema());
    connectionParam.setFilterSchema(dbConnection.getUiSchema());
  }
  connectionParam.setDbName(JavaSqlFactory.getSID(conn));
  String retrieveAllMetadata=MetadataHelper.getRetrieveAllMetadata(conn);
  connectionParam.setRetrieveAllMetadata(retrieveAllMetadata == null ? true : new Boolean(retrieveAllMetadata).booleanValue());
  return connectionParam;
}",0.9090437937289452
137260,"/** 
 * if the connection has sid return false, else return true (don't need the TaggedValue any more).
 * @param element
 * @return
 */
public static boolean getRetrieveAllMetadata(ModelElement element){
  if (element != null && element instanceof Connection) {
    if (element instanceof DatabaseConnection) {
      DatabaseConnection dbConn=(DatabaseConnection)element;
      String sid=getSID(dbConn);
      if (sid != null && !""String_Node_Str"".equals(sid.trim())) {
        TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.RETRIEVE_ALL,element.getTaggedValue());
        if (taggedValue != null) {
          String value=taggedValue.getValue();
          if (value.equals(""String_Node_Str"")) {
            return true;
          }
        }
        if (ConnectionHelper.isOracle(dbConn) || isPostgresql(dbConn)) {
          String uiSchema=dbConn.getUiSchema();
          if (uiSchema != null && !""String_Node_Str"".equals(uiSchema.trim())) {
            return false;
          }
 else {
            return true;
          }
        }
 else {
          return false;
        }
      }
 else {
        return true;
      }
    }
 else     if (element instanceof MDMConnection) {
      MDMConnection mdmConn=(MDMConnection)element;
      String context=mdmConn.getContext();
      if (context != null && !""String_Node_Str"".equals(context.trim())) {
        return false;
      }
 else {
        return true;
      }
    }
 else     if (element instanceof FileConnection) {
      return true;
    }
  }
  return true;
}","/** 
 * if the connection has sid return false, else return true (don't need the TaggedValue any more).
 * @param element
 * @return
 */
public static boolean getRetrieveAllMetadata(ModelElement element){
  if (element != null && element instanceof Connection) {
    if (element instanceof DatabaseConnection) {
      DatabaseConnection dbConn=(DatabaseConnection)element;
      String sid=JavaSqlFactory.getSID(dbConn);
      if (sid != null && !""String_Node_Str"".equals(sid.trim())) {
        TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TaggedValueHelper.RETRIEVE_ALL,element.getTaggedValue());
        if (taggedValue != null) {
          String value=taggedValue.getValue();
          if (value.equals(""String_Node_Str"")) {
            return true;
          }
        }
        if (ConnectionHelper.isOracle(dbConn) || isPostgresql(dbConn)) {
          String uiSchema=dbConn.getUiSchema();
          if (uiSchema != null && !""String_Node_Str"".equals(uiSchema.trim())) {
            return false;
          }
 else {
            return true;
          }
        }
 else {
          return false;
        }
      }
 else {
        return true;
      }
    }
 else     if (element instanceof MDMConnection) {
      MDMConnection mdmConn=(MDMConnection)element;
      String context=mdmConn.getContext();
      if (context != null && !""String_Node_Str"".equals(context.trim())) {
        return false;
      }
 else {
        return true;
      }
    }
 else     if (element instanceof FileConnection) {
      return true;
    }
  }
  return true;
}",0.995178399228544
137261,"private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  int limitValue=AnalysisExecutorHelper.getLimitValue(delimitedFileconnection);
  int headValue=AnalysisExecutorHelper.getHeadValue(delimitedFileconnection);
  CsvReader csvReader=null;
  try {
    csvReader=AnalysisExecutorHelper.createCsvReader(file,delimitedFileconnection);
    AnalysisExecutorHelper.initializeCsvReader(delimitedFileconnection,csvReader);
    int analysedColumnIndex[]=new int[analysisElementList.size()];
    List<String> columnLabels=new ArrayList<String>();
    for (int i=0; i < headValue && csvReader.readRecord(); i++) {
      Collections.addAll(columnLabels,csvReader.getValues());
    }
    for (int j=0; j < analysisElementList.size(); j++) {
      analysedColumnIndex[j]=columnLabels.indexOf(analysisElementList.get(j).getName());
    }
    long currentRecord=0;
    while (csvReader.readRecord()) {
      currentRecord=csvReader.getCurrentRecord();
      if (limitValue != -1 && currentRecord > limitValue - 1) {
        break;
      }
      if (delimitedFileconnection.isFirstLineCaption() && currentRecord == 0) {
        continue;
      }
      String[] values=csvReader.getValues();
      String[] analysedValues=new String[analysisElementList.size()];
      for (int i=0; i < analysedColumnIndex.length; i++) {
        analysedValues[i]=values[analysedColumnIndex[i]];
      }
      handleRow(analysedValues);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (csvReader != null) {
      csvReader.close();
    }
  }
}","private void useCsvReader(File file,DelimitedFileConnection delimitedFileconnection,List<ModelElement> analysisElementList){
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  CsvReader csvReader=null;
  try {
    csvReader=AnalysisExecutorHelper.createCsvReader(file,delimitedFileconnection);
    AnalysisExecutorHelper.initializeCsvReader(delimitedFileconnection,csvReader);
    int analysedColumnIndex[]=new int[analysisElementList.size()];
    List<String> columnLabels=new ArrayList<String>();
    for (int i=0; i < headValue && csvReader.readRecord(); i++) {
      Collections.addAll(columnLabels,csvReader.getValues());
    }
    for (int j=0; j < analysisElementList.size(); j++) {
      analysedColumnIndex[j]=columnLabels.indexOf(analysisElementList.get(j).getName());
    }
    long currentRecord=0;
    while (csvReader.readRecord()) {
      currentRecord=csvReader.getCurrentRecord();
      if (limitValue != -1 && currentRecord > limitValue - 1) {
        break;
      }
      if (delimitedFileconnection.isFirstLineCaption() && currentRecord == 0) {
        continue;
      }
      String[] values=csvReader.getValues();
      String[] analysedValues=new String[analysisElementList.size()];
      for (int i=0; i < analysedColumnIndex.length; i++) {
        analysedValues[i]=values[analysedColumnIndex[i]];
      }
      handleRow(analysedValues);
    }
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
 finally {
    if (csvReader != null) {
      csvReader.close();
    }
  }
}",0.9785202863961814
137262,"public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements){
  dataFromTable.clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return dataFromTable;
  }
  DelimitedFileConnection delimitedFileconnection=(DelimitedFileConnection)connection;
  String path=AnalysisExecutorHelper.getFilePath(delimitedFileconnection);
  IPath iPath=new Path(path);
  try {
    File file=iPath.toFile();
    if (!file.exists()) {
      return null;
    }
    if (Escape.CSV.equals(delimitedFileconnection.getEscapeType())) {
      useCsvReader(file,delimitedFileconnection,analysedElements);
    }
 else {
      int[] analysedColumnIndex=getAnalysedColumnPositionInFileTable(analysedElements,delimitedFileconnection);
      FileInputDelimited fileInputDelimited=AnalysisExecutorHelper.createFileInputDelimited(delimitedFileconnection);
      int index=0;
      while (fileInputDelimited.nextRecord()) {
        index++;
        int columsCount=analysedElements.size();
        String[] rowValues=new String[columsCount];
        for (int i=0; i < columsCount; i++) {
          rowValues[i]=fileInputDelimited.get(analysedColumnIndex[i]);
        }
        handleRow(rowValues);
        if (limit > 0 && index >= limit) {
          break;
        }
      }
      fileInputDelimited.close();
    }
    endQuery();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return dataFromTable;
}","public List<Object[]> executeQuery(DataManager connection,List<ModelElement> analysedElements){
  dataFromTable.clear();
  try {
    beginQuery();
  }
 catch (  Exception e1) {
    log.error(e1.getMessage(),e1);
    return dataFromTable;
  }
  DelimitedFileConnection delimitedFileconnection=(DelimitedFileConnection)connection;
  String path=JavaSqlFactory.getURL(delimitedFileconnection);
  IPath iPath=new Path(path);
  try {
    File file=iPath.toFile();
    if (!file.exists()) {
      return null;
    }
    if (Escape.CSV.equals(delimitedFileconnection.getEscapeType())) {
      useCsvReader(file,delimitedFileconnection,analysedElements);
    }
 else {
      int[] analysedColumnIndex=getAnalysedColumnPositionInFileTable(analysedElements,delimitedFileconnection);
      FileInputDelimited fileInputDelimited=AnalysisExecutorHelper.createFileInputDelimited(delimitedFileconnection);
      int index=0;
      while (fileInputDelimited.nextRecord()) {
        index++;
        int columsCount=analysedElements.size();
        String[] rowValues=new String[columsCount];
        for (int i=0; i < columsCount; i++) {
          rowValues[i]=fileInputDelimited.get(analysedColumnIndex[i]);
        }
        handleRow(rowValues);
        if (limit > 0 && index >= limit) {
          break;
        }
      }
      fileInputDelimited.close();
    }
    endQuery();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return dataFromTable;
}",0.9826513911620296
137263,"/** 
 * DOC qiongli Comment method ""initializeCsvReader"".
 * @param csvReader
 * @param connection
 */
public static void initializeCsvReader(DelimitedFileConnection delimitedFileconnection,CsvReader csvReader){
  String rowSep=delimitedFileconnection.getRowSeparatorValue();
  if (delimitedFileconnection.isContextMode()) {
    rowSep=ConnectionUtils.getOriginalConntextValue(delimitedFileconnection,rowSep);
  }
  if (!rowSep.equals(""String_Node_Str"") && !rowSep.equals(""String_Node_Str"")) {
    csvReader.setRecordDelimiter(ParameterUtil.trimParameter(rowSep).charAt(0));
  }
  csvReader.setSkipEmptyRecords(true);
  String textEnclosure=delimitedFileconnection.getTextEnclosure();
  if (textEnclosure != null && textEnclosure.length() > 0) {
    csvReader.setTextQualifier(ParameterUtil.trimParameter(textEnclosure).charAt(0));
  }
 else {
    csvReader.setUseTextQualifier(false);
  }
  String escapeChar=delimitedFileconnection.getEscapeChar();
  if (escapeChar == null || escapeChar.equals(""String_Node_Str"") || escapeChar.equals(""String_Node_Str"")) {
    csvReader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
  }
 else {
    csvReader.setEscapeMode(CsvReader.ESCAPE_MODE_DOUBLED);
  }
}","/** 
 * DOC qiongli Comment method ""initializeCsvReader"".
 * @param csvReader
 * @param connection
 */
public static void initializeCsvReader(DelimitedFileConnection delimitedFileconnection,CsvReader csvReader){
  String rowSep=JavaSqlFactory.getRowSeparatorValue(delimitedFileconnection);
  if (rowSep != null && !rowSep.equals(""String_Node_Str"") && !rowSep.equals(""String_Node_Str"")) {
    csvReader.setRecordDelimiter(ParameterUtil.trimParameter(rowSep).charAt(0));
  }
  csvReader.setSkipEmptyRecords(true);
  String textEnclosure=delimitedFileconnection.getTextEnclosure();
  if (textEnclosure != null && textEnclosure.length() > 0) {
    csvReader.setTextQualifier(ParameterUtil.trimParameter(textEnclosure).charAt(0));
  }
 else {
    csvReader.setUseTextQualifier(false);
  }
  String escapeChar=delimitedFileconnection.getEscapeChar();
  if (escapeChar == null || escapeChar.equals(""String_Node_Str"") || escapeChar.equals(""String_Node_Str"")) {
    csvReader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
  }
 else {
    csvReader.setEscapeMode(CsvReader.ESCAPE_MODE_DOUBLED);
  }
}",0.9126637554585152
137264,"public static FileInputDelimited createFileInputDelimited(DelimitedFileConnection delimitedFileconnection) throws IOException {
  String rowSeparator=delimitedFileconnection.getRowSeparatorValue();
  String encoding=delimitedFileconnection.getEncoding();
  String fieldSeparatorValue=delimitedFileconnection.getFieldSeparatorValue();
  if (delimitedFileconnection.isContextMode()) {
    rowSeparator=ConnectionUtils.getOriginalConntextValue(delimitedFileconnection,rowSeparator);
    encoding=ConnectionUtils.getOriginalConntextValue(delimitedFileconnection,encoding);
    fieldSeparatorValue=ConnectionUtils.getOriginalConntextValue(delimitedFileconnection,fieldSeparatorValue);
  }
  boolean isSpliteRecord=delimitedFileconnection.isSplitRecord();
  boolean isSkipeEmptyRow=delimitedFileconnection.isRemoveEmptyRow();
  String languageName=LanguageManager.getCurrentLanguage().getName();
  String zero=""String_Node_Str"";
  int limitValue=AnalysisExecutorHelper.getLimitValue(delimitedFileconnection);
  int headValue=AnalysisExecutorHelper.getHeadValue(delimitedFileconnection);
  int footValue=0;
  String footing=delimitedFileconnection.getFooterValue();
  String path=AnalysisExecutorHelper.getFilePath(delimitedFileconnection);
  if (delimitedFileconnection.isContextMode()) {
    footing=ConnectionUtils.getOriginalConntextValue(delimitedFileconnection,footing);
    footValue=Integer.parseInt(footing == PluginConstant.EMPTY_STRING ? zero : footing);
  }
 else {
    footValue=Integer.parseInt(footing == null || PluginConstant.EMPTY_STRING.equals(footing) ? zero : footing);
  }
  return new FileInputDelimited(ParameterUtil.trimParameter(path),ParameterUtil.trimParameter(encoding),ParameterUtil.trimParameter(StringUtils.loadConvert(fieldSeparatorValue,languageName)),ParameterUtil.trimParameter(StringUtils.loadConvert(rowSeparator,languageName)),isSkipeEmptyRow,headValue,footValue,limitValue,-1,isSpliteRecord);
}","public static FileInputDelimited createFileInputDelimited(DelimitedFileConnection delimitedFileconnection) throws IOException {
  String rowSeparator=JavaSqlFactory.getRowSeparatorValue(delimitedFileconnection);
  String encoding=JavaSqlFactory.getEncoding(delimitedFileconnection);
  String fieldSeparatorValue=JavaSqlFactory.getFieldSeparatorValue(delimitedFileconnection);
  boolean isSpliteRecord=delimitedFileconnection.isSplitRecord();
  boolean isSkipeEmptyRow=delimitedFileconnection.isRemoveEmptyRow();
  String languageName=LanguageManager.getCurrentLanguage().getName();
  int limitValue=JavaSqlFactory.getLimitValue(delimitedFileconnection);
  int headValue=JavaSqlFactory.getHeadValue(delimitedFileconnection);
  int footValue=JavaSqlFactory.getFooterValue(delimitedFileconnection);
  String path=JavaSqlFactory.getURL(delimitedFileconnection);
  return new FileInputDelimited(ParameterUtil.trimParameter(path),ParameterUtil.trimParameter(encoding),ParameterUtil.trimParameter(StringUtils.loadConvert(fieldSeparatorValue,languageName)),ParameterUtil.trimParameter(StringUtils.loadConvert(rowSeparator,languageName)),isSkipeEmptyRow,headValue,footValue,limitValue,-1,isSpliteRecord);
}",0.4257362355953905
137265,"public static CsvReader createCsvReader(File file,DelimitedFileConnection delimitedFileconnection) throws UnsupportedEncodingException, FileNotFoundException {
  String separator=delimitedFileconnection.getFieldSeparatorValue();
  String encoding=delimitedFileconnection.getEncoding();
  if (delimitedFileconnection.isContextMode()) {
    separator=ConnectionUtils.getOriginalConntextValue(delimitedFileconnection,separator);
    encoding=ConnectionUtils.getOriginalConntextValue(delimitedFileconnection,encoding);
  }
  return new CsvReader(new BufferedReader(new InputStreamReader(new java.io.FileInputStream(file),encoding == null ? ""String_Node_Str"" : encoding)),ParameterUtil.trimParameter(separator).charAt(0));
}","public static CsvReader createCsvReader(File file,DelimitedFileConnection delimitedFileconnection) throws UnsupportedEncodingException, FileNotFoundException {
  String separator=JavaSqlFactory.getFieldSeparatorValue(delimitedFileconnection);
  String encoding=JavaSqlFactory.getEncoding(delimitedFileconnection);
  return new CsvReader(new BufferedReader(new InputStreamReader(new java.io.FileInputStream(file),encoding == null ? ""String_Node_Str"" : encoding)),ParameterUtil.trimParameter(separator).charAt(0));
}",0.7137064071370641
137266,"private void useCsvReader(CsvReader csvReader,File file,DelimitedFileConnection dfCon,List<ModelElement> analysisElementList) throws Exception {
  AnalysisExecutorHelper.initializeCsvReader(dfCon,csvReader);
  long currentRecord=0;
  int limitValue=AnalysisExecutorHelper.getLimitValue(dfCon);
  while (csvReader.readRecord()) {
    currentRecord=csvReader.getCurrentRecord();
    if (!continueRun() || limitValue != 0 && currentRecord > limitValue - 1) {
      break;
    }
    if (dfCon.isFirstLineCaption() && currentRecord == 0) {
      continue;
    }
    String[] rowValues=csvReader.getValues();
    this.orgnizeObjectsToHandel(dfCon.getFilePath(),rowValues,currentRecord + 1,analysisElementList,dfCon.getFieldSeparatorValue());
  }
}","private void useCsvReader(CsvReader csvReader,File file,DelimitedFileConnection dfCon,List<ModelElement> analysisElementList) throws Exception {
  AnalysisExecutorHelper.initializeCsvReader(dfCon,csvReader);
  long currentRecord=0;
  int limitValue=JavaSqlFactory.getLimitValue(dfCon);
  while (csvReader.readRecord()) {
    currentRecord=csvReader.getCurrentRecord();
    if (!continueRun() || limitValue != 0 && currentRecord > limitValue - 1) {
      break;
    }
    if (dfCon.isFirstLineCaption() && currentRecord == 0) {
      continue;
    }
    String[] rowValues=csvReader.getValues();
    this.orgnizeObjectsToHandel(dfCon.getFilePath(),rowValues,currentRecord + 1,analysisElementList,dfCon.getFieldSeparatorValue());
  }
}",0.9769335142469472
137267,"/** 
 * orgnize EList 'objectLs' for DelimitedFile connection.
 * @param sqlStatement
 * @param returnCode
 * @return
 */
private ReturnCode evaluateByDelimitedFile(String sqlStatement,ReturnCode returnCode){
  DelimitedFileConnection fileConnection=(DelimitedFileConnection)analysis.getContext().getConnection();
  String path=AnalysisExecutorHelper.getFilePath(fileConnection);
  String rowSeparator=fileConnection.getRowSeparatorValue();
  if (fileConnection.isContextMode()) {
    rowSeparator=ConnectionUtils.getOriginalConntextValue(fileConnection,rowSeparator);
  }
  IPath iPath=new Path(path);
  File file=iPath.toFile();
  if (!file.exists()) {
    returnCode.setReturnCode(Messages.getString(""String_Node_Str"",file.getName()),false);
    return returnCode;
  }
  CsvReader csvReader=null;
  try {
    List<ModelElement> analysisElementList=this.analysis.getContext().getAnalysedElements();
    EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
    indicToRowMap.clear();
    if (Escape.CSV.equals(fileConnection.getEscapeType())) {
      csvReader=AnalysisExecutorHelper.createCsvReader(file,fileConnection);
      this.useCsvReader(csvReader,file,fileConnection,analysisElementList);
    }
 else {
      FileInputDelimited fileInputDelimited=AnalysisExecutorHelper.createFileInputDelimited(fileConnection);
      long currentRow=AnalysisExecutorHelper.getHeadValue(fileConnection);
      int columsCount=0;
      while (fileInputDelimited.nextRecord()) {
        if (!continueRun()) {
          break;
        }
        currentRow++;
        if (columsCount == 0) {
          columsCount=fileInputDelimited.getColumnsCountOfCurrentRow();
        }
        String[] rowValues=new String[columsCount];
        for (int i=0; i < columsCount; i++) {
          rowValues[i]=fileInputDelimited.get(i);
        }
        orgnizeObjectsToHandel(path,rowValues,currentRow,analysisElementList,rowSeparator);
      }
      fileInputDelimited.close();
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
 finally {
    if (csvReader != null) {
      csvReader.close();
    }
  }
  return returnCode;
}","/** 
 * orgnize EList 'objectLs' for DelimitedFile connection.
 * @param sqlStatement
 * @param returnCode
 * @return
 */
private ReturnCode evaluateByDelimitedFile(String sqlStatement,ReturnCode returnCode){
  DelimitedFileConnection fileConnection=(DelimitedFileConnection)analysis.getContext().getConnection();
  String path=JavaSqlFactory.getURL(fileConnection);
  String rowSeparator=JavaSqlFactory.getRowSeparatorValue(fileConnection);
  IPath iPath=new Path(path);
  File file=iPath.toFile();
  if (!file.exists()) {
    returnCode.setReturnCode(Messages.getString(""String_Node_Str"",file.getName()),false);
    return returnCode;
  }
  CsvReader csvReader=null;
  try {
    List<ModelElement> analysisElementList=this.analysis.getContext().getAnalysedElements();
    EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
    indicToRowMap.clear();
    if (Escape.CSV.equals(fileConnection.getEscapeType())) {
      csvReader=AnalysisExecutorHelper.createCsvReader(file,fileConnection);
      this.useCsvReader(csvReader,file,fileConnection,analysisElementList);
    }
 else {
      FileInputDelimited fileInputDelimited=AnalysisExecutorHelper.createFileInputDelimited(fileConnection);
      long currentRow=JavaSqlFactory.getHeadValue(fileConnection);
      int columsCount=0;
      while (fileInputDelimited.nextRecord()) {
        if (!continueRun()) {
          break;
        }
        currentRow++;
        if (columsCount == 0) {
          columsCount=fileInputDelimited.getColumnsCountOfCurrentRow();
        }
        String[] rowValues=new String[columsCount];
        for (int i=0; i < columsCount; i++) {
          rowValues[i]=fileInputDelimited.get(i);
        }
        orgnizeObjectsToHandel(path,rowValues,currentRow,analysisElementList,rowSeparator);
      }
      fileInputDelimited.close();
    }
  }
 catch (  Exception e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
 finally {
    if (csvReader != null) {
      csvReader.close();
    }
  }
  return returnCode;
}",0.5849189570119803
137268,"private SurvivorShipAlgorithmParams createSurvivorShipAlgorithmParams(AnalysisMatchRecordGrouping analysisMatchRecordGrouping,RecordMatchingIndicator recordMatchingIndicator,Map<MetadataColumn,String> columnMap){
  SurvivorShipAlgorithmParams survivorShipAlgorithmParams=new SurvivorShipAlgorithmParams();
  List<SurvivorshipKeyDefinition> survivorshipKeyDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getSurvivorshipKeys();
  List<SurvivorshipFunction> survFunctions=new ArrayList<SurvivorshipFunction>();
  for (  SurvivorshipKeyDefinition survDef : survivorshipKeyDefs) {
    SurvivorshipFunction func=survivorShipAlgorithmParams.new SurvivorshipFunction();
    func.setSurvivorShipKey(survDef.getName());
    func.setParameter(survDef.getFunction().getAlgorithmParameters());
    func.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.getTypeBySavedValue(survDef.getFunction().getAlgorithmType()));
    survFunctions.add(func);
  }
  survivorShipAlgorithmParams.setSurviorShipAlgos(survFunctions.toArray(new SurvivorshipFunction[survivorshipKeyDefs.size()]));
  List<DefaultSurvivorshipDefinition> defSurvDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getDefaultSurvivorshipDefinitions();
  Map<Integer,SurvivorshipFunction> defaultSurvRules=new HashMap<Integer,SurvivorshipFunction>();
  for (  MetadataColumn metaColumn : columnMap.keySet()) {
    String dataTypeName=null;
    if (metaColumn instanceof TdColumn) {
      dataTypeName=((TdColumn)metaColumn).getSqlDataType().getName();
    }
 else {
      dataTypeName=TalendTypeConvert.convertToJavaType(metaColumn.getTalendType());
    }
    for (    DefaultSurvivorshipDefinition defSurvDef : defSurvDefs) {
      if (dataTypeName.equals(defSurvDef.getDataType())) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
 else       if (defSurvDef.getDataType().equals(""String_Node_Str"") && isNumber(dataTypeName)) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
    }
  }
  survivorShipAlgorithmParams.setDefaultSurviorshipRules(defaultSurvRules);
  CombinedRecordMatcher combinedRecordMatcher=analysisMatchRecordGrouping.getCombinedRecordMatcher();
  survivorShipAlgorithmParams.setRecordMatcher(combinedRecordMatcher);
  Map<IRecordMatcher,SurvivorshipFunction[]> survAlgos=new HashMap<IRecordMatcher,SurvivorshipFunction[]>();
  SurvivorshipFunction[] survFuncs=survivorShipAlgorithmParams.getSurviorShipAlgos();
  Map<Integer,SurvivorshipFunction> colIdx2DefaultSurvFunc=survivorShipAlgorithmParams.getDefaultSurviorshipRules();
  int matchRuleIdx=-1;
  List<List<Map<String,String>>> multiRules=analysisMatchRecordGrouping.getMultiMatchRules();
  for (  List<Map<String,String>> matchrule : multiRules) {
    matchRuleIdx++;
    if (matchrule == null) {
      continue;
    }
    SurvivorshipFunction[] surFuncsInMatcher=new SurvivorshipFunction[matchrule.size()];
    int idx=0;
    for (    Map<String,String> mkDef : matchrule) {
      String matcherType=mkDef.get(IRecordGrouping.MATCHING_TYPE);
      if (AttributeMatcherType.DUMMY.name().equals(matcherType)) {
        surFuncsInMatcher[idx]=colIdx2DefaultSurvFunc.get(Integer.valueOf(mkDef.get(IRecordGrouping.COLUMN_IDX)));
        if (surFuncsInMatcher[idx] == null) {
          surFuncsInMatcher[idx]=survivorShipAlgorithmParams.new SurvivorshipFunction();
          surFuncsInMatcher[idx].setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.CONCATENATE);
          surFuncsInMatcher[idx].setParameter(StringUtils.EMPTY);
        }
      }
 else {
        for (        SurvivorshipFunction survFunc : survFuncs) {
          String keyName=mkDef.get(IRecordGrouping.MATCH_KEY_NAME);
          if (keyName.equals(survFunc.getSurvivorShipKey())) {
            surFuncsInMatcher[idx]=survFunc;
            break;
          }
        }
      }
      idx++;
    }
    survAlgos.put(combinedRecordMatcher.getMatchers().get(matchRuleIdx),surFuncsInMatcher);
  }
  survivorShipAlgorithmParams.setSurvivorshipAlgosMap(survAlgos);
  return survivorShipAlgorithmParams;
}","private SurvivorShipAlgorithmParams createSurvivorShipAlgorithmParams(AnalysisMatchRecordGrouping analysisMatchRecordGrouping,RecordMatchingIndicator recordMatchingIndicator,Map<MetadataColumn,String> columnMap){
  SurvivorShipAlgorithmParams survivorShipAlgorithmParams=new SurvivorShipAlgorithmParams();
  List<SurvivorshipKeyDefinition> survivorshipKeyDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getSurvivorshipKeys();
  List<SurvivorshipFunction> survFunctions=new ArrayList<SurvivorshipFunction>();
  for (  SurvivorshipKeyDefinition survDef : survivorshipKeyDefs) {
    SurvivorshipFunction func=survivorShipAlgorithmParams.new SurvivorshipFunction();
    func.setSurvivorShipKey(survDef.getName());
    func.setParameter(survDef.getFunction().getAlgorithmParameters());
    func.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.getTypeBySavedValue(survDef.getFunction().getAlgorithmType()));
    survFunctions.add(func);
  }
  survivorShipAlgorithmParams.setSurviorShipAlgos(survFunctions.toArray(new SurvivorshipFunction[survivorshipKeyDefs.size()]));
  List<DefaultSurvivorshipDefinition> defSurvDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getDefaultSurvivorshipDefinitions();
  Map<Integer,SurvivorshipFunction> defaultSurvRules=new HashMap<Integer,SurvivorshipFunction>();
  for (  MetadataColumn metaColumn : columnMap.keySet()) {
    String dataTypeName=TalendTypeConvert.convertToJavaType(metaColumn.getTalendType());
    for (    DefaultSurvivorshipDefinition defSurvDef : defSurvDefs) {
      if (dataTypeName.equals(defSurvDef.getDataType())) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
 else       if (defSurvDef.getDataType().equals(""String_Node_Str"") || isNumber(dataTypeName)) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
    }
  }
  survivorShipAlgorithmParams.setDefaultSurviorshipRules(defaultSurvRules);
  CombinedRecordMatcher combinedRecordMatcher=analysisMatchRecordGrouping.getCombinedRecordMatcher();
  survivorShipAlgorithmParams.setRecordMatcher(combinedRecordMatcher);
  Map<IRecordMatcher,SurvivorshipFunction[]> survAlgos=new HashMap<IRecordMatcher,SurvivorshipFunction[]>();
  SurvivorshipFunction[] survFuncs=survivorShipAlgorithmParams.getSurviorShipAlgos();
  Map<Integer,SurvivorshipFunction> colIdx2DefaultSurvFunc=survivorShipAlgorithmParams.getDefaultSurviorshipRules();
  int matchRuleIdx=-1;
  List<List<Map<String,String>>> multiRules=analysisMatchRecordGrouping.getMultiMatchRules();
  for (  List<Map<String,String>> matchrule : multiRules) {
    matchRuleIdx++;
    if (matchrule == null) {
      continue;
    }
    SurvivorshipFunction[] surFuncsInMatcher=new SurvivorshipFunction[matchrule.size()];
    int idx=0;
    for (    Map<String,String> mkDef : matchrule) {
      String matcherType=mkDef.get(IRecordGrouping.MATCHING_TYPE);
      if (AttributeMatcherType.DUMMY.name().equals(matcherType)) {
        surFuncsInMatcher[idx]=colIdx2DefaultSurvFunc.get(Integer.valueOf(mkDef.get(IRecordGrouping.COLUMN_IDX)));
        if (surFuncsInMatcher[idx] == null) {
          surFuncsInMatcher[idx]=survivorShipAlgorithmParams.new SurvivorshipFunction();
          surFuncsInMatcher[idx].setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.CONCATENATE);
          surFuncsInMatcher[idx].setParameter(StringUtils.EMPTY);
        }
      }
 else {
        for (        SurvivorshipFunction survFunc : survFuncs) {
          String keyName=mkDef.get(IRecordGrouping.MATCH_KEY_NAME);
          if (keyName.equals(survFunc.getSurvivorShipKey())) {
            surFuncsInMatcher[idx]=survFunc;
            break;
          }
        }
      }
      idx++;
    }
    survAlgos.put(combinedRecordMatcher.getMatchers().get(matchRuleIdx),surFuncsInMatcher);
  }
  survivorShipAlgorithmParams.setSurvivorshipAlgosMap(survAlgos);
  return survivorShipAlgorithmParams;
}",0.9023643268406224
137269,"private SurvivorShipAlgorithmParams createSurvivorShipAlgorithmParams(AnalysisMatchRecordGrouping analysisMatchRecordGrouping,RecordMatchingIndicator recordMatchingIndicator,Map<MetadataColumn,String> columnMap){
  SurvivorShipAlgorithmParams survivorShipAlgorithmParams=new SurvivorShipAlgorithmParams();
  List<SurvivorshipKeyDefinition> survivorshipKeyDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getSurvivorshipKeys();
  List<SurvivorshipFunction> survFunctions=new ArrayList<SurvivorshipFunction>();
  for (  SurvivorshipKeyDefinition survDef : survivorshipKeyDefs) {
    SurvivorshipFunction func=survivorShipAlgorithmParams.new SurvivorshipFunction();
    func.setSurvivorShipKey(survDef.getName());
    func.setParameter(survDef.getFunction().getAlgorithmParameters());
    func.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.getTypeBySavedValue(survDef.getFunction().getAlgorithmType()));
    survFunctions.add(func);
  }
  survivorShipAlgorithmParams.setSurviorShipAlgos(survFunctions.toArray(new SurvivorshipFunction[survivorshipKeyDefs.size()]));
  List<DefaultSurvivorshipDefinition> defSurvDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getDefaultSurvivorshipDefinitions();
  Map<Integer,SurvivorshipFunction> defaultSurvRules=new HashMap<Integer,SurvivorshipFunction>();
  for (  MetadataColumn metaColumn : columnMap.keySet()) {
    String dataTypeName=TalendTypeConvert.convertToJavaType(metaColumn.getTalendType());
    for (    DefaultSurvivorshipDefinition defSurvDef : defSurvDefs) {
      if (dataTypeName.equals(defSurvDef.getDataType())) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
 else       if (defSurvDef.getDataType().equals(""String_Node_Str"") || isNumber(dataTypeName)) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
    }
  }
  survivorShipAlgorithmParams.setDefaultSurviorshipRules(defaultSurvRules);
  CombinedRecordMatcher combinedRecordMatcher=analysisMatchRecordGrouping.getCombinedRecordMatcher();
  survivorShipAlgorithmParams.setRecordMatcher(combinedRecordMatcher);
  Map<IRecordMatcher,SurvivorshipFunction[]> survAlgos=new HashMap<IRecordMatcher,SurvivorshipFunction[]>();
  SurvivorshipFunction[] survFuncs=survivorShipAlgorithmParams.getSurviorShipAlgos();
  Map<Integer,SurvivorshipFunction> colIdx2DefaultSurvFunc=survivorShipAlgorithmParams.getDefaultSurviorshipRules();
  int matchRuleIdx=-1;
  List<List<Map<String,String>>> multiRules=analysisMatchRecordGrouping.getMultiMatchRules();
  for (  List<Map<String,String>> matchrule : multiRules) {
    matchRuleIdx++;
    if (matchrule == null) {
      continue;
    }
    SurvivorshipFunction[] surFuncsInMatcher=new SurvivorshipFunction[matchrule.size()];
    int idx=0;
    for (    Map<String,String> mkDef : matchrule) {
      String matcherType=mkDef.get(IRecordGrouping.MATCHING_TYPE);
      if (AttributeMatcherType.DUMMY.name().equals(matcherType)) {
        surFuncsInMatcher[idx]=colIdx2DefaultSurvFunc.get(Integer.valueOf(mkDef.get(IRecordGrouping.COLUMN_IDX)));
        if (surFuncsInMatcher[idx] == null) {
          surFuncsInMatcher[idx]=survivorShipAlgorithmParams.new SurvivorshipFunction();
          surFuncsInMatcher[idx].setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.CONCATENATE);
          surFuncsInMatcher[idx].setParameter(StringUtils.EMPTY);
        }
      }
 else {
        for (        SurvivorshipFunction survFunc : survFuncs) {
          String keyName=mkDef.get(IRecordGrouping.MATCH_KEY_NAME);
          if (keyName.equals(survFunc.getSurvivorShipKey())) {
            surFuncsInMatcher[idx]=survFunc;
            break;
          }
        }
      }
      idx++;
    }
    survAlgos.put(combinedRecordMatcher.getMatchers().get(matchRuleIdx),surFuncsInMatcher);
  }
  survivorShipAlgorithmParams.setSurvivorshipAlgosMap(survAlgos);
  return survivorShipAlgorithmParams;
}","private SurvivorShipAlgorithmParams createSurvivorShipAlgorithmParams(AnalysisMatchRecordGrouping analysisMatchRecordGrouping,RecordMatchingIndicator recordMatchingIndicator,Map<MetadataColumn,String> columnMap){
  SurvivorShipAlgorithmParams survivorShipAlgorithmParams=new SurvivorShipAlgorithmParams();
  List<SurvivorshipKeyDefinition> survivorshipKeyDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getSurvivorshipKeys();
  List<SurvivorshipFunction> survFunctions=new ArrayList<SurvivorshipFunction>();
  for (  SurvivorshipKeyDefinition survDef : survivorshipKeyDefs) {
    SurvivorshipFunction func=survivorShipAlgorithmParams.new SurvivorshipFunction();
    func.setSurvivorShipKey(survDef.getName());
    func.setParameter(survDef.getFunction().getAlgorithmParameters());
    func.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.getTypeBySavedValue(survDef.getFunction().getAlgorithmType()));
    survFunctions.add(func);
  }
  survivorShipAlgorithmParams.setSurviorShipAlgos(survFunctions.toArray(new SurvivorshipFunction[survivorshipKeyDefs.size()]));
  List<DefaultSurvivorshipDefinition> defSurvDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getDefaultSurvivorshipDefinitions();
  Map<Integer,SurvivorshipFunction> defaultSurvRules=new HashMap<Integer,SurvivorshipFunction>();
  for (  MetadataColumn metaColumn : columnMap.keySet()) {
    String dataTypeName=TalendTypeConvert.convertToJavaType(metaColumn.getTalendType());
    for (    DefaultSurvivorshipDefinition defSurvDef : defSurvDefs) {
      if (dataTypeName.equals(defSurvDef.getDataType())) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
 else       if (defSurvDef.getDataType().equals(""String_Node_Str"") && isNumber(dataTypeName)) {
        putNewSurvFunc(columnMap,survivorShipAlgorithmParams,defaultSurvRules,metaColumn,defSurvDef);
        break;
      }
    }
  }
  survivorShipAlgorithmParams.setDefaultSurviorshipRules(defaultSurvRules);
  CombinedRecordMatcher combinedRecordMatcher=analysisMatchRecordGrouping.getCombinedRecordMatcher();
  survivorShipAlgorithmParams.setRecordMatcher(combinedRecordMatcher);
  Map<IRecordMatcher,SurvivorshipFunction[]> survAlgos=new HashMap<IRecordMatcher,SurvivorshipFunction[]>();
  SurvivorshipFunction[] survFuncs=survivorShipAlgorithmParams.getSurviorShipAlgos();
  Map<Integer,SurvivorshipFunction> colIdx2DefaultSurvFunc=survivorShipAlgorithmParams.getDefaultSurviorshipRules();
  int matchRuleIdx=-1;
  List<List<Map<String,String>>> multiRules=analysisMatchRecordGrouping.getMultiMatchRules();
  for (  List<Map<String,String>> matchrule : multiRules) {
    matchRuleIdx++;
    if (matchrule == null) {
      continue;
    }
    SurvivorshipFunction[] surFuncsInMatcher=new SurvivorshipFunction[matchrule.size()];
    int idx=0;
    for (    Map<String,String> mkDef : matchrule) {
      String matcherType=mkDef.get(IRecordGrouping.MATCHING_TYPE);
      if (AttributeMatcherType.DUMMY.name().equals(matcherType)) {
        surFuncsInMatcher[idx]=colIdx2DefaultSurvFunc.get(Integer.valueOf(mkDef.get(IRecordGrouping.COLUMN_IDX)));
        if (surFuncsInMatcher[idx] == null) {
          surFuncsInMatcher[idx]=survivorShipAlgorithmParams.new SurvivorshipFunction();
          surFuncsInMatcher[idx].setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.CONCATENATE);
          surFuncsInMatcher[idx].setParameter(StringUtils.EMPTY);
        }
      }
 else {
        for (        SurvivorshipFunction survFunc : survFuncs) {
          String keyName=mkDef.get(IRecordGrouping.MATCH_KEY_NAME);
          if (keyName.equals(survFunc.getSurvivorShipKey())) {
            surFuncsInMatcher[idx]=survFunc;
            break;
          }
        }
      }
      idx++;
    }
    survAlgos.put(combinedRecordMatcher.getMatchers().get(matchRuleIdx),surFuncsInMatcher);
  }
  survivorShipAlgorithmParams.setSurvivorshipAlgosMap(survAlgos);
  return survivorShipAlgorithmParams;
}",0.9995003747189608
137270,"@Override public double getMatchingWeight(String[] record1,String[] record2){
  double result=0;
  for (int j=0; j < getUsedIndicesNotblocked().length; j++) {
    int usedIdx=usedIndicesNotblocked[j];
    double pa=computeMatchingWeight(usedIdx,record1,record2);
    result+=pa * attributeWeights[usedIdx];
  }
  return result;
}","@Override public double getMatchingWeight(String[] record1,String[] record2){
  double result=0;
  if (blockedIndices != null) {
    for (int i=0; i < super.blockedIndices.length; i++) {
      int blockedIdx=blockedIndices[i];
      double pa=computeMatchingWeight(blockedIdx,record1,record2);
      if (pa < super.blockingThreshold) {
        return 0;
      }
      result+=pa * attributeWeights[blockedIdx];
    }
  }
  for (int j=0; j < getUsedIndicesNotblocked().length; j++) {
    int usedIdx=usedIndicesNotblocked[j];
    double pa=computeMatchingWeight(usedIdx,record1,record2);
    result+=pa * attributeWeights[usedIdx];
  }
  return result;
}",0.670061099796334
137271,"@Override public boolean handle(Object data){
  String[] values=(String[])data;
  Boolean isMaster=Boolean.valueOf(values[masterColumnIndex]);
  Integer groupSize=Integer.valueOf(values[groupSizeColumnIndex]);
  if (isMaster) {
    if (null == groupSize2groupFrequency.get(values[groupSizeColumnIndex])) {
      groupSize2groupFrequency.put(values[groupSizeColumnIndex],1l);
    }
 else {
      long freq=groupSize2groupFrequency.get(values[groupSizeColumnIndex]) + 1;
      groupSize2groupFrequency.put(values[groupSizeColumnIndex],freq);
    }
    if (builtInMatchRuleDefinition != null && groupSize > 1) {
      double groupScore=Double.valueOf(values[groupQualityColumnIndex]);
      double confidenceThreshold=builtInMatchRuleDefinition.getMatchGroupQualityThreshold();
      if (groupScore >= confidenceThreshold) {
        matchedRecordCount=matchedRecordCount + groupSize;
      }
 else {
        suspectRecordCount=suspectRecordCount + groupSize;
      }
    }
  }
  if (T_SWOOSH_ALG_NAME.equals(getBuiltInMatchRuleDefinition().getRecordLinkageAlgorithm())) {
    if (!(isMaster && groupSize > 1)) {
      count++;
    }
  }
 else {
    count++;
  }
  return Boolean.TRUE;
}","@Override public boolean handle(Object data){
  String[] values=(String[])data;
  Boolean isMaster=Boolean.valueOf(values[masterColumnIndex]);
  Integer groupSize=StringUtils.isEmpty(values[groupSizeColumnIndex]) ? 0 : Integer.valueOf(values[groupSizeColumnIndex]);
  if (isMaster) {
    if (null == groupSize2groupFrequency.get(values[groupSizeColumnIndex])) {
      groupSize2groupFrequency.put(values[groupSizeColumnIndex],1l);
    }
 else {
      long freq=groupSize2groupFrequency.get(values[groupSizeColumnIndex]) + 1;
      groupSize2groupFrequency.put(values[groupSizeColumnIndex],freq);
    }
    if (builtInMatchRuleDefinition != null && groupSize > 1) {
      double groupScore=Double.valueOf(values[groupQualityColumnIndex]);
      double confidenceThreshold=builtInMatchRuleDefinition.getMatchGroupQualityThreshold();
      if (groupScore >= confidenceThreshold) {
        matchedRecordCount=matchedRecordCount + groupSize;
      }
 else {
        suspectRecordCount=suspectRecordCount + groupSize;
      }
    }
  }
  if (T_SWOOSH_ALG_NAME.equals(getBuiltInMatchRuleDefinition().getRecordLinkageAlgorithm())) {
    if (!(isMaster && groupSize > 1)) {
      count++;
    }
  }
 else {
    count++;
  }
  return Boolean.TRUE;
}",0.976878612716763
137272,"@Test public void testDoGroup(){
  recordGroup=new AbstractRecordGrouping<String>(){
    @Override protected void outputRow(    String[] row){
      groupingRecords.add(row);
      for (      String c : row) {
        System.out.print(c + ""String_Node_Str"");
      }
      System.out.println();
    }
    @Override protected String incrementGroupSize(    String oldGroupSize){
      String newGroupSize=String.valueOf(Integer.parseInt(String.valueOf(oldGroupSize)) + 1);
      return newGroupSize;
    }
    @Override protected String castAsType(    Object objectValue){
      String column=String.valueOf(objectValue);
      return column;
    }
    @Override protected boolean isMaster(    String col){
      return ""String_Node_Str"".equals(col);
    }
    @Override protected String[] createTYPEArray(    int size){
      String[] arrays=new String[size];
      return arrays;
    }
    @Override protected void outputRow(    RichRecord row){
    }
  }
;
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  List<Map<String,String>> matchingRule=new ArrayList<Map<String,String>>();
  Map<String,String> lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  matchingRule.add(lnameRecords);
  Map<String,String> accountRecords=new HashMap<String,String>();
  accountRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(6));
  accountRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  accountRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(0.8));
  matchingRule.add(accountRecords);
  recordGroup.addMatchRule(matchingRule);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  recordGroup.setIsOutputDistDetails(true);
  recordGroup.setAcceptableThreshold(0.95f);
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(5,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(6,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(4,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    for (    String rd : rds) {
      log.info(rd + ""String_Node_Str"");
    }
  }
  testGroupQuality();
  testMatchThreshold();
  testMatchThreshold_0();
}","@Test public void testDoGroup(){
  recordGroup=new AbstractRecordGrouping<String>(){
    @Override protected void outputRow(    String[] row){
      groupingRecords.add(row);
      for (      String c : row) {
        System.out.print(c + ""String_Node_Str"");
      }
      System.out.println();
    }
    @Override protected String incrementGroupSize(    String oldGroupSize){
      String newGroupSize=String.valueOf(Integer.parseInt(String.valueOf(oldGroupSize)) + 1);
      return newGroupSize;
    }
    @Override protected String castAsType(    Object objectValue){
      String column=String.valueOf(objectValue);
      return column;
    }
    @Override protected boolean isMaster(    String col){
      return ""String_Node_Str"".equals(col);
    }
    @Override protected String[] createTYPEArray(    int size){
      String[] arrays=new String[size];
      return arrays;
    }
    @Override protected void outputRow(    RichRecord row){
    }
  }
;
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  List<Map<String,String>> matchingRule=new ArrayList<Map<String,String>>();
  Map<String,String> lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.ATTRIBUTE_THRESHOLD,String.valueOf(1));
  matchingRule.add(lnameRecords);
  Map<String,String> accountRecords=new HashMap<String,String>();
  accountRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(6));
  accountRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  accountRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(0.8));
  accountRecords.put(IRecordGrouping.ATTRIBUTE_THRESHOLD,String.valueOf(1));
  matchingRule.add(accountRecords);
  recordGroup.addMatchRule(matchingRule);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  recordGroup.setIsOutputDistDetails(true);
  recordGroup.setAcceptableThreshold(0.95f);
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(5,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(6,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(4,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    for (    String rd : rds) {
      log.info(rd + ""String_Node_Str"");
    }
  }
  testGroupQuality();
  testMatchThreshold();
  testMatchThreshold_0();
}",0.977561263655152
137273,"/** 
 * when RECORD_MATCH_THRESHOLD=0, all records should be in one group
 */
private void testMatchThreshold_0(){
  List<Map<String,String>> matchingRule;
  Map<String,String> lnameRecords;
  groupingRecords.clear();
  recordGroup=new AbstractRecordGrouping<String>(){
    @Override protected void outputRow(    String[] row){
      groupingRecords.add(row);
    }
    @Override protected boolean isMaster(    String col){
      return ""String_Node_Str"".equals(col);
    }
    @Override protected String incrementGroupSize(    String oldGroupSize){
      String newGroupSize=String.valueOf(Integer.parseInt(String.valueOf(oldGroupSize)) + 1);
      return newGroupSize;
    }
    @Override protected String[] createTYPEArray(    int size){
      String[] arrays=new String[size];
      return arrays;
    }
    @Override protected String castAsType(    Object objectValue){
      String column=String.valueOf(objectValue);
      return column;
    }
    @Override protected void outputRow(    RichRecord row){
    }
  }
;
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  matchingRule=new ArrayList<Map<String,String>>();
  lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.0f));
  matchingRule.add(lnameRecords);
  recordGroup.addMatchRule(matchingRule);
  recordGroup.setIsOutputDistDetails(true);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(101,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    for (    String rd : rds) {
      log.info(rd + ""String_Node_Str"");
    }
  }
}","/** 
 * when RECORD_MATCH_THRESHOLD=0, all records should be in one group
 */
private void testMatchThreshold_0(){
  List<Map<String,String>> matchingRule;
  Map<String,String> lnameRecords;
  groupingRecords.clear();
  recordGroup=new AbstractRecordGrouping<String>(){
    @Override protected void outputRow(    String[] row){
      groupingRecords.add(row);
    }
    @Override protected boolean isMaster(    String col){
      return ""String_Node_Str"".equals(col);
    }
    @Override protected String incrementGroupSize(    String oldGroupSize){
      String newGroupSize=String.valueOf(Integer.parseInt(String.valueOf(oldGroupSize)) + 1);
      return newGroupSize;
    }
    @Override protected String[] createTYPEArray(    int size){
      String[] arrays=new String[size];
      return arrays;
    }
    @Override protected String castAsType(    Object objectValue){
      String column=String.valueOf(objectValue);
      return column;
    }
    @Override protected void outputRow(    RichRecord row){
    }
  }
;
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  matchingRule=new ArrayList<Map<String,String>>();
  lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.ATTRIBUTE_THRESHOLD,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.0f));
  matchingRule.add(lnameRecords);
  recordGroup.addMatchRule(matchingRule);
  recordGroup.setIsOutputDistDetails(true);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(101,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    for (    String rd : rds) {
      log.info(rd + ""String_Node_Str"");
    }
  }
}",0.9880782069623272
137274,"/** 
 * DOC zhao Comment method ""testMatchThreshold"".
 */
private void testMatchThreshold(){
  List<Map<String,String>> matchingRule;
  Map<String,String> lnameRecords;
  Map<String,String> accountRecords;
  groupingRecords.clear();
  recordGroup=new AbstractRecordGrouping<String>(){
    @Override protected void outputRow(    String[] row){
      groupingRecords.add(row);
    }
    @Override protected boolean isMaster(    String col){
      return ""String_Node_Str"".equals(col);
    }
    @Override protected String incrementGroupSize(    String oldGroupSize){
      String newGroupSize=String.valueOf(Integer.parseInt(String.valueOf(oldGroupSize)) + 1);
      return newGroupSize;
    }
    @Override protected String[] createTYPEArray(    int size){
      String[] arrays=new String[size];
      return arrays;
    }
    @Override protected String castAsType(    Object objectValue){
      String column=String.valueOf(objectValue);
      return column;
    }
    @Override protected void outputRow(    RichRecord row){
    }
  }
;
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  matchingRule=new ArrayList<Map<String,String>>();
  lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.95f));
  matchingRule.add(lnameRecords);
  lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.0f));
  matchingRule.add(lnameRecords);
  accountRecords=new HashMap<String,String>();
  accountRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(6));
  accountRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  accountRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(0.8));
  accountRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.95f));
  matchingRule.add(accountRecords);
  recordGroup.addMatchRule(matchingRule);
  recordGroup.setIsOutputDistDetails(true);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(5,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(6,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(4,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(1,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    for (    String rd : rds) {
      log.info(rd + ""String_Node_Str"");
    }
  }
}","/** 
 * DOC zhao Comment method ""testMatchThreshold"".
 */
private void testMatchThreshold(){
  List<Map<String,String>> matchingRule;
  Map<String,String> lnameRecords;
  Map<String,String> accountRecords;
  groupingRecords.clear();
  recordGroup=new AbstractRecordGrouping<String>(){
    @Override protected void outputRow(    String[] row){
      groupingRecords.add(row);
    }
    @Override protected boolean isMaster(    String col){
      return ""String_Node_Str"".equals(col);
    }
    @Override protected String incrementGroupSize(    String oldGroupSize){
      String newGroupSize=String.valueOf(Integer.parseInt(String.valueOf(oldGroupSize)) + 1);
      return newGroupSize;
    }
    @Override protected String[] createTYPEArray(    int size){
      String[] arrays=new String[size];
      return arrays;
    }
    @Override protected String castAsType(    Object objectValue){
      String column=String.valueOf(objectValue);
      return column;
    }
    @Override protected void outputRow(    RichRecord row){
    }
  }
;
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  matchingRule=new ArrayList<Map<String,String>>();
  lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.ATTRIBUTE_THRESHOLD,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.95f));
  matchingRule.add(lnameRecords);
  lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.0f));
  matchingRule.add(lnameRecords);
  accountRecords=new HashMap<String,String>();
  accountRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(6));
  accountRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  accountRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(0.8));
  accountRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.95f));
  matchingRule.add(accountRecords);
  recordGroup.addMatchRule(matchingRule);
  recordGroup.setIsOutputDistDetails(true);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(5,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(6,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(4,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(1,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    for (    String rd : rds) {
      log.info(rd + ""String_Node_Str"");
    }
  }
}",0.9900859220092532
137275,"@Test public void testDoGroup() throws IOException {
  InputStream in=this.getClass().getResourceAsStream(""String_Node_Str"");
  BufferedReader bfr=new BufferedReader(new InputStreamReader(in));
  List<String> listOfLines=IOUtils.readLines(bfr);
  inputList=new ArrayList<String[]>();
  for (  String line : listOfLines) {
    String[] fields=StringUtils.splitPreserveAllTokens(line,columnDelimiter);
    inputList.add(fields);
  }
  recordGroup=new AbstractRecordGrouping<String>(){
    @Override protected boolean isMaster(    String col){
      return ""String_Node_Str"".equals(col);
    }
    @Override protected String[] createTYPEArray(    int size){
      return new String[size];
    }
    @Override protected void outputRow(    String[] row){
      for (      String c : row) {
        System.out.print(c + ""String_Node_Str"");
      }
      System.out.println();
      groupingRecords.add(row);
    }
    @Override protected void outputRow(    RichRecord row){
      List<DQAttribute<?>> originRow=row.getOutputRow(swooshGrouping.getOldGID2New());
      String[] strRow=new String[originRow.size()];
      int idx=0;
      for (      DQAttribute<?> attr : originRow) {
        strRow[idx]=attr.getValue();
        idx++;
      }
      outputRow(strRow);
    }
    @Override protected String incrementGroupSize(    String oldGroupSize){
      return String.valueOf(Integer.parseInt(String.valueOf(oldGroupSize)) + 1);
    }
    @Override protected String castAsType(    Object objectValue){
      return String.valueOf(objectValue);
    }
  }
;
  recordGroup.setRecordLinkAlgorithm(RecordMatcherType.T_SwooshAlgorithm);
  SurvivorShipAlgorithmParams survAlgParams=new SurvivorShipAlgorithmParams();
  SurvivorshipFunction func=survAlgParams.new SurvivorshipFunction();
  func.setParameter(""String_Node_Str"");
  func.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_COMMON);
  survAlgParams.setSurviorShipAlgos(new SurvivorshipFunction[]{func});
  Map<Integer,SurvivorshipFunction> defaultSurvRules=new HashMap<Integer,SurvivorshipFunction>();
  SurvivorshipFunction survFunc=survAlgParams.new SurvivorshipFunction();
  survFunc.setParameter(StringUtils.EMPTY);
  survFunc.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.LONGEST);
  defaultSurvRules.put(1,survFunc);
  survAlgParams.setDefaultSurviorshipRules(defaultSurvRules);
  recordGroup.setSurvivorShipAlgorithmParams(survAlgParams);
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  List<Map<String,String>> matchingRule=new ArrayList<Map<String,String>>();
  Map<String,String> lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(0));
  lnameRecords.put(IRecordGrouping.ATTRIBUTE_NAME,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  matchingRule.add(lnameRecords);
  recordGroup.addMatchRule(matchingRule);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  recordGroup.setIsOutputDistDetails(true);
  recordGroup.setAcceptableThreshold(0.95f);
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"") && rds[11].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 5]).intValue());
    }
 else     if (rds[0].equals(""String_Node_Str"") && rds[11].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 5]).intValue());
    }
 else     if (rds[0].equals(""String_Node_Str"") && rds[11].equals(""String_Node_Str"")) {
      Assert.assertEquals(3,Integer.valueOf(rds[rds.length - 5]).intValue());
    }
  }
}","@Test public void testDoGroup() throws IOException {
  InputStream in=this.getClass().getResourceAsStream(""String_Node_Str"");
  BufferedReader bfr=new BufferedReader(new InputStreamReader(in));
  List<String> listOfLines=IOUtils.readLines(bfr);
  inputList=new ArrayList<String[]>();
  for (  String line : listOfLines) {
    String[] fields=StringUtils.splitPreserveAllTokens(line,columnDelimiter);
    inputList.add(fields);
  }
  recordGroup=new AbstractRecordGrouping<String>(){
    @Override protected boolean isMaster(    String col){
      return ""String_Node_Str"".equals(col);
    }
    @Override protected String[] createTYPEArray(    int size){
      return new String[size];
    }
    @Override protected void outputRow(    String[] row){
      for (      String c : row) {
        System.out.print(c + ""String_Node_Str"");
      }
      System.out.println();
      groupingRecords.add(row);
    }
    @Override protected void outputRow(    RichRecord row){
      List<DQAttribute<?>> originRow=row.getOutputRow(swooshGrouping.getOldGID2New());
      String[] strRow=new String[originRow.size()];
      int idx=0;
      for (      DQAttribute<?> attr : originRow) {
        strRow[idx]=attr.getValue();
        idx++;
      }
      outputRow(strRow);
    }
    @Override protected String incrementGroupSize(    String oldGroupSize){
      return String.valueOf(Integer.parseInt(String.valueOf(oldGroupSize)) + 1);
    }
    @Override protected String castAsType(    Object objectValue){
      return String.valueOf(objectValue);
    }
  }
;
  recordGroup.setRecordLinkAlgorithm(RecordMatcherType.T_SwooshAlgorithm);
  SurvivorShipAlgorithmParams survAlgParams=new SurvivorShipAlgorithmParams();
  SurvivorshipFunction func=survAlgParams.new SurvivorshipFunction();
  func.setParameter(""String_Node_Str"");
  func.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_COMMON);
  survAlgParams.setSurviorShipAlgos(new SurvivorshipFunction[]{func});
  Map<Integer,SurvivorshipFunction> defaultSurvRules=new HashMap<Integer,SurvivorshipFunction>();
  SurvivorshipFunction survFunc=survAlgParams.new SurvivorshipFunction();
  survFunc.setParameter(StringUtils.EMPTY);
  survFunc.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.LONGEST);
  defaultSurvRules.put(1,survFunc);
  survAlgParams.setDefaultSurviorshipRules(defaultSurvRules);
  recordGroup.setSurvivorShipAlgorithmParams(survAlgParams);
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  List<Map<String,String>> matchingRule=new ArrayList<Map<String,String>>();
  Map<String,String> lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(0));
  lnameRecords.put(IRecordGrouping.ATTRIBUTE_NAME,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.ATTRIBUTE_THRESHOLD,String.valueOf(1));
  matchingRule.add(lnameRecords);
  recordGroup.addMatchRule(matchingRule);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  recordGroup.setIsOutputDistDetails(true);
  recordGroup.setAcceptableThreshold(0.95f);
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"") && rds[11].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 5]).intValue());
    }
 else     if (rds[0].equals(""String_Node_Str"") && rds[11].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 5]).intValue());
    }
 else     if (rds[0].equals(""String_Node_Str"") && rds[11].equals(""String_Node_Str"")) {
      Assert.assertEquals(3,Integer.valueOf(rds[rds.length - 5]).intValue());
    }
  }
}",0.9912023460410556
137276,"@Test public void testDoGroupMergeValues() throws IOException {
  InputStream in=this.getClass().getResourceAsStream(""String_Node_Str"");
  BufferedReader bfr=new BufferedReader(new InputStreamReader(in));
  List<String> listOfLines=IOUtils.readLines(bfr);
  inputList=new ArrayList<String[]>();
  for (  String line : listOfLines) {
    String[] fields=StringUtils.splitPreserveAllTokens(line,columnDelimiter);
    inputList.add(fields);
  }
  recordGroup=new AbstractRecordGrouping<String>(){
    @Override protected boolean isMaster(    String col){
      return ""String_Node_Str"".equals(col);
    }
    @Override protected String[] createTYPEArray(    int size){
      return new String[size];
    }
    @Override protected void outputRow(    String[] row){
      for (      String c : row) {
        System.out.print(c + ""String_Node_Str"");
      }
      System.out.println();
      groupingRecords.add(row);
    }
    @Override protected void outputRow(    RichRecord row){
      List<DQAttribute<?>> originRow=row.getOutputRow(swooshGrouping.getOldGID2New());
      String[] strRow=new String[originRow.size()];
      int idx=0;
      for (      DQAttribute<?> attr : originRow) {
        strRow[idx]=attr.getValue();
        idx++;
      }
      outputRow(strRow);
    }
    @Override protected String incrementGroupSize(    String oldGroupSize){
      return String.valueOf(Integer.parseInt(String.valueOf(oldGroupSize)) + 1);
    }
    @Override protected String castAsType(    Object objectValue){
      return String.valueOf(objectValue);
    }
  }
;
  recordGroup.setRecordLinkAlgorithm(RecordMatcherType.T_SwooshAlgorithm);
  SurvivorShipAlgorithmParams survivorShipAlgorithmParams=new SurvivorShipAlgorithmParams();
  SurvivorshipFunction func=survivorShipAlgorithmParams.new SurvivorshipFunction();
  func.setParameter(""String_Node_Str"");
  func.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_COMMON);
  survivorShipAlgorithmParams.setSurviorShipAlgos(new SurvivorshipFunction[]{func});
  recordGroup.setSurvivorShipAlgorithmParams(survivorShipAlgorithmParams);
  Map<Integer,SurvivorshipFunction> defaultSurvRules=new HashMap<Integer,SurvivorshipFunction>();
  SurvivorshipFunction survFunc=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc.setParameter(StringUtils.EMPTY);
  survFunc.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_COMMON);
  defaultSurvRules.put(0,survFunc);
  SurvivorshipFunction survFunc2=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc2.setParameter(StringUtils.EMPTY);
  survFunc2.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.LONGEST);
  defaultSurvRules.put(2,survFunc2);
  SurvivorshipFunction survFunc3=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc3.setParameter(StringUtils.EMPTY);
  survFunc3.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_COMMON);
  defaultSurvRules.put(3,survFunc3);
  SurvivorshipFunction survFunc4=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc4.setParameter(StringUtils.EMPTY);
  survFunc4.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.LARGEST);
  defaultSurvRules.put(4,survFunc4);
  SurvivorshipFunction survFunc5=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc5.setParameter(StringUtils.EMPTY);
  survFunc5.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_RECENT);
  defaultSurvRules.put(5,survFunc5);
  SurvivorshipFunction survFunc6=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc6.setParameter(StringUtils.EMPTY);
  survFunc6.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_COMMON);
  defaultSurvRules.put(6,survFunc6);
  survivorShipAlgorithmParams.setDefaultSurviorshipRules(defaultSurvRules);
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  List<Map<String,String>> matchingRule=new ArrayList<Map<String,String>>();
  Map<String,String> lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.ATTRIBUTE_NAME,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  matchingRule.add(lnameRecords);
  recordGroup.addMatchRule(matchingRule);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  recordGroup.setIsOutputDistDetails(true);
  recordGroup.setAcceptableThreshold(0.95f);
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[10].equals(""String_Node_Str"")) {
      Assert.assertEquals(4,Integer.valueOf(rds[rds.length - 5]).intValue());
      Assert.assertEquals(0.9666666746139526,Double.valueOf(rds[rds.length - 2]).doubleValue(),0d);
      Assert.assertEquals(""String_Node_Str"",rds[1]);
      Assert.assertEquals(""String_Node_Str"",rds[2]);
      Assert.assertEquals(""String_Node_Str"",rds[3]);
      Assert.assertEquals(""String_Node_Str"",rds[4]);
      Assert.assertEquals(""String_Node_Str"",rds[5]);
    }
  }
}","@Test public void testDoGroupMergeValues() throws IOException {
  InputStream in=this.getClass().getResourceAsStream(""String_Node_Str"");
  BufferedReader bfr=new BufferedReader(new InputStreamReader(in));
  List<String> listOfLines=IOUtils.readLines(bfr);
  inputList=new ArrayList<String[]>();
  for (  String line : listOfLines) {
    String[] fields=StringUtils.splitPreserveAllTokens(line,columnDelimiter);
    inputList.add(fields);
  }
  recordGroup=new AbstractRecordGrouping<String>(){
    @Override protected boolean isMaster(    String col){
      return ""String_Node_Str"".equals(col);
    }
    @Override protected String[] createTYPEArray(    int size){
      return new String[size];
    }
    @Override protected void outputRow(    String[] row){
      for (      String c : row) {
        System.out.print(c + ""String_Node_Str"");
      }
      System.out.println();
      groupingRecords.add(row);
    }
    @Override protected void outputRow(    RichRecord row){
      List<DQAttribute<?>> originRow=row.getOutputRow(swooshGrouping.getOldGID2New());
      String[] strRow=new String[originRow.size()];
      int idx=0;
      for (      DQAttribute<?> attr : originRow) {
        strRow[idx]=attr.getValue();
        idx++;
      }
      outputRow(strRow);
    }
    @Override protected String incrementGroupSize(    String oldGroupSize){
      return String.valueOf(Integer.parseInt(String.valueOf(oldGroupSize)) + 1);
    }
    @Override protected String castAsType(    Object objectValue){
      return String.valueOf(objectValue);
    }
  }
;
  recordGroup.setRecordLinkAlgorithm(RecordMatcherType.T_SwooshAlgorithm);
  SurvivorShipAlgorithmParams survivorShipAlgorithmParams=new SurvivorShipAlgorithmParams();
  SurvivorshipFunction func=survivorShipAlgorithmParams.new SurvivorshipFunction();
  func.setParameter(""String_Node_Str"");
  func.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_COMMON);
  survivorShipAlgorithmParams.setSurviorShipAlgos(new SurvivorshipFunction[]{func});
  recordGroup.setSurvivorShipAlgorithmParams(survivorShipAlgorithmParams);
  Map<Integer,SurvivorshipFunction> defaultSurvRules=new HashMap<Integer,SurvivorshipFunction>();
  SurvivorshipFunction survFunc=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc.setParameter(StringUtils.EMPTY);
  survFunc.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_COMMON);
  defaultSurvRules.put(0,survFunc);
  SurvivorshipFunction survFunc2=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc2.setParameter(StringUtils.EMPTY);
  survFunc2.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.LONGEST);
  defaultSurvRules.put(2,survFunc2);
  SurvivorshipFunction survFunc3=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc3.setParameter(StringUtils.EMPTY);
  survFunc3.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_COMMON);
  defaultSurvRules.put(3,survFunc3);
  SurvivorshipFunction survFunc4=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc4.setParameter(StringUtils.EMPTY);
  survFunc4.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.LARGEST);
  defaultSurvRules.put(4,survFunc4);
  SurvivorshipFunction survFunc5=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc5.setParameter(StringUtils.EMPTY);
  survFunc5.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_RECENT);
  defaultSurvRules.put(5,survFunc5);
  SurvivorshipFunction survFunc6=survivorShipAlgorithmParams.new SurvivorshipFunction();
  survFunc6.setParameter(StringUtils.EMPTY);
  survFunc6.setSurvivorShipAlgoEnum(SurvivorShipAlgorithmEnum.MOST_COMMON);
  defaultSurvRules.put(6,survFunc6);
  survivorShipAlgorithmParams.setDefaultSurviorshipRules(defaultSurvRules);
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  List<Map<String,String>> matchingRule=new ArrayList<Map<String,String>>();
  Map<String,String> lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.ATTRIBUTE_NAME,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.ATTRIBUTE_THRESHOLD,String.valueOf(0.9));
  matchingRule.add(lnameRecords);
  recordGroup.addMatchRule(matchingRule);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  recordGroup.setIsOutputDistDetails(true);
  recordGroup.setAcceptableThreshold(0.95f);
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[10].equals(""String_Node_Str"")) {
      Assert.assertEquals(4,Integer.valueOf(rds[rds.length - 5]).intValue());
      Assert.assertEquals(0.9666666746139526,Double.valueOf(rds[rds.length - 2]).doubleValue(),0d);
      Assert.assertEquals(""String_Node_Str"",rds[1]);
      Assert.assertEquals(""String_Node_Str"",rds[2]);
      Assert.assertEquals(""String_Node_Str"",rds[3]);
      Assert.assertEquals(""String_Node_Str"",rds[4]);
      Assert.assertEquals(""String_Node_Str"",rds[5]);
    }
  }
}",0.993096027974536
137277,"@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  sForm=new SashForm(body,SWT.NULL);
  sForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp=toolkit.createComposite(sForm);
  topComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp.setLayout(new GridLayout());
  metadataSection=creatMetadataSection(form,topComp);
  metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisColumnsSection(form,topComp);
  createIndicatorsSection(form,topComp);
  createDataFilterSection(form,topComp);
  dataFilterComp.addPropertyChangeListener(this);
  Composite exeEngineComp=createExecuteEngineSection(form,topComp,analyzedColumns,columnSetAnalysisHandler.getAnalysis().getParameters());
  createStoreDataCheck(exeEngineComp);
  if (!EditorPreferencePage.isHideGraphics()) {
    previewComp=toolkit.createComposite(sForm);
    previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    previewComp.setLayout(new GridLayout());
    previewComp.addControlListener(new ControlAdapter(){
      @Override public void controlResized(      ControlEvent e){
        super.controlResized(e);
        sForm.redraw();
        form.reflow(true);
      }
    }
);
    createPreviewSection(form,previewComp);
  }
}","@Override protected void createFormContent(IManagedForm managedForm){
  this.form=managedForm.getForm();
  Composite body=form.getBody();
  body.setLayout(new GridLayout());
  sForm=new SashForm(body,SWT.NULL);
  sForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp=toolkit.createComposite(sForm);
  topComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  topComp.setLayout(new GridLayout());
  metadataSection=creatMetadataSection(form,topComp);
  metadataSection.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  metadataSection.setDescription(DefaultMessagesImpl.getString(""String_Node_Str""));
  form.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  createAnalysisColumnsSection(form,topComp);
  createIndicatorsSection(form,topComp);
  createDataFilterSection(form,topComp);
  dataFilterComp.addPropertyChangeListener(this);
  Composite exeEngineComp=createExecuteEngineSection(form,topComp,analyzedColumns,columnSetAnalysisHandler.getAnalysis().getParameters());
  createStoreDataCheck(exeEngineComp);
  createContextGroupSection(form,topComp);
  if (!EditorPreferencePage.isHideGraphics()) {
    previewComp=toolkit.createComposite(sForm);
    previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
    previewComp.setLayout(new GridLayout());
    previewComp.addControlListener(new ControlAdapter(){
      @Override public void controlResized(      ControlEvent e){
        super.controlResized(e);
        sForm.redraw();
        form.reflow(true);
      }
    }
);
    createPreviewSection(form,previewComp);
  }
}",0.9860886444516338
137278,"@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (newPageIndex == RESULT_PAGE_INDEX) {
    if (masterPage.isDirty()) {
      masterPage.doSave(null);
    }
    setSaveActionButtonState(false);
  }
  if (isRefreshResultPage) {
    resultPage.refresh(getMasterPage());
    isRefreshResultPage=false;
  }
 else {
    EventManager.getInstance().publish(masterPage.analysisItem.getAnalysis(),EventEnum.DQ_DYNAMIC_SWITCH_MASTER_RESULT_PAGE,null);
  }
}","@Override protected void pageChange(int newPageIndex){
  super.pageChange(newPageIndex);
  if (newPageIndex == RESULT_PAGE_INDEX) {
    if (masterPage.isDirty()) {
      masterPage.doSave(null);
    }
    setSaveActionButtonState(false);
  }
  if (isRefreshResultPage) {
    resultPage.refresh(getMasterPage());
    isRefreshResultPage=false;
  }
 else {
    EventManager.getInstance().publish(resultPage.getAnalysisHandler().getAnalysis(),EventEnum.DQ_DYNAMIC_SWITCH_MASTER_RESULT_PAGE,null);
  }
}",0.9595959595959596
137279,"@Override public void doSave(IProgressMonitor monitor){
  if (masterPage != null && masterPage.isDirty()) {
    masterPage.doSave(monitor);
    setPartName(masterPage.getIntactElemenetName());
  }
  setEditorObject(getMasterPage().getAnalysisRepNode());
  super.doSave(monitor);
}","@Override public void doSave(IProgressMonitor monitor){
  if (masterPage != null && masterPage.isDirty()) {
    masterPage.doSave(monitor);
    setPartName(masterPage.getIntactElemenetName());
    if (contextManager instanceof JobContextManager) {
      JobContextManager jobContextManager=(JobContextManager)contextManager;
      jobContextManager.setModified(masterPage.isDirty());
    }
  }
  setEditorObject(getMasterPage().getAnalysisRepNode());
  super.doSave(monitor);
}",0.7397622192866579
137280,"/** 
 * DOC msjian Comment method ""setLastRunContext"".
 * @param lastRunContext
 * @param analysis
 * @return
 */
public static boolean setLastRunContext(String lastRunContext,Analysis analysis){
  return TaggedValueHelper.setTaggedValue(analysis,TaggedValueHelper.REP_LAST_RUN_CONTEXT,lastRunContext);
}","/** 
 * DOC msjian Comment method ""setLastRunContext"".
 * @param lastRunContext
 * @param analysis
 * @return
 */
public static boolean setLastRunContext(String lastRunContext,Analysis analysis){
  return TaggedValueHelper.setTaggedValue(analysis,TaggedValueHelper.ANA_LAST_RUN_CONTEXT,lastRunContext);
}",0.9901315789473684
137281,"/** 
 * DOC bZhou Comment method ""createChart"".
 * @param comp
 * @param chartType
 * @param units
 */
private void createChart(final Composite comp,EIndicatorChartType chartType,List<IndicatorUnit> units){
  IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
  JFreeChart chart=null;
  CategoryDataset dataset=null;
  if (!EditorPreferencePage.isHideGraphics()) {
    chart=chartTypeState.getChart();
    ChartDecorator.decorate(chart,null);
    if (chart != null) {
      if (EIndicatorChartType.BENFORD_LAW_STATISTICS.equals(chartType)) {
        dataset=chart.getCategoryPlot().getDataset(1);
      }
 else {
        dataset=chart.getCategoryPlot().getDataset();
      }
    }
  }
  if (dataset == null) {
    dataset=chartTypeState.getDataset();
  }
  List<Indicator> indicators=null;
  DynamicIndicatorModel dyModel=new DynamicIndicatorModel();
  dyModel.setDataset(dataset);
  dyModel.setChartType(chartType);
  this.dynamicList.add(dyModel);
  indicators=getIndicators(units);
  dyModel.setIndicatorList(indicators);
  ChartWithData chartData=new ChartWithData(chartType,chart,((ICustomerDataset)dataset).getDataEntities());
  ExpandableComposite subComp=uiPagination.getToolkit().createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
  subComp.setText(chartData.getChartType().getLiteral());
  subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  subComp.setExpanded(EditorPreferencePage.isUnfoldingIndicators());
  final Composite composite=uiPagination.getToolkit().createComposite(subComp,SWT.NULL);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
  TableViewer tableviewer=chartTypeState.getTableForm(composite);
  tableviewer.setInput(chartData);
  if (EIndicatorChartType.SUMMARY_STATISTICS.equals(chartType)) {
    dyModel.setSummaryIndicators(getIndicatorsForTable(units,true));
  }
  dyModel.setTableViewer(tableviewer);
  DataExplorer dataExplorer=chartTypeState.getDataExplorer();
  ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
  if (chart != null) {
    ChartComposite cc=new TalendChartComposite(composite,SWT.NONE,chart,true);
    if (EIndicatorChartType.SUMMARY_STATISTICS.equals(chartType)) {
      dyModel.setBawParentChartComp((TalendChartComposite)cc);
    }
    GridData gd=new GridData();
    gd.widthHint=PluginConstant.CHART_STANDARD_WIDHT;
    gd.heightHint=PluginConstant.CHART_STANDARD_HEIGHT;
    cc.setLayoutData(gd);
    addMouseListenerForChart(cc,dataExplorer,analysis);
  }
  subComp.setClient(composite);
  subComp.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      form.reflow(true);
    }
  }
);
  masterPage.registerSection(subComp);
}","/** 
 * DOC bZhou Comment method ""createChart"".
 * @param comp
 * @param chartType
 * @param units
 */
private void createChart(final Composite comp,EIndicatorChartType chartType,List<IndicatorUnit> units){
  IChartTypeStates chartTypeState=ChartTypeStatesOperator.getChartState(chartType,units);
  DynamicIndicatorModel dyModel=new DynamicIndicatorModel();
  JFreeChart chart=null;
  CategoryDataset dataset=null;
  if (!EditorPreferencePage.isHideGraphics()) {
    chart=chartTypeState.getChart();
    ChartDecorator.decorate(chart,null);
    if (chart != null) {
      if (EIndicatorChartType.BENFORD_LAW_STATISTICS.equals(chartType)) {
        dataset=chart.getCategoryPlot().getDataset(1);
        dyModel.setSecondDataset(chart.getCategoryPlot().getDataset(0));
      }
 else {
        dataset=chart.getCategoryPlot().getDataset();
      }
    }
  }
  if (dataset == null) {
    dataset=chartTypeState.getDataset();
  }
  List<Indicator> indicators=null;
  dyModel.setDataset(dataset);
  dyModel.setChartType(chartType);
  this.dynamicList.add(dyModel);
  indicators=getIndicators(units);
  dyModel.setIndicatorList(indicators);
  ChartWithData chartData=new ChartWithData(chartType,chart,((ICustomerDataset)dataset).getDataEntities());
  ExpandableComposite subComp=uiPagination.getToolkit().createExpandableComposite(comp,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.EXPANDED);
  subComp.setText(chartData.getChartType().getLiteral());
  subComp.setLayoutData(new GridData(GridData.FILL_BOTH));
  subComp.setExpanded(EditorPreferencePage.isUnfoldingIndicators());
  final Composite composite=uiPagination.getToolkit().createComposite(subComp,SWT.NULL);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Analysis analysis=masterPage.getAnalysisHandler().getAnalysis();
  TableViewer tableviewer=chartTypeState.getTableForm(composite);
  tableviewer.setInput(chartData);
  if (EIndicatorChartType.SUMMARY_STATISTICS.equals(chartType)) {
    dyModel.setSummaryIndicators(getIndicatorsForTable(units,true));
  }
  dyModel.setTableViewer(tableviewer);
  DataExplorer dataExplorer=chartTypeState.getDataExplorer();
  ChartTableFactory.addMenuAndTip(tableviewer,dataExplorer,analysis);
  if (chart != null) {
    ChartComposite cc=new TalendChartComposite(composite,SWT.NONE,chart,true);
    if (EIndicatorChartType.SUMMARY_STATISTICS.equals(chartType)) {
      dyModel.setBawParentChartComp((TalendChartComposite)cc);
    }
    GridData gd=new GridData();
    gd.widthHint=PluginConstant.CHART_STANDARD_WIDHT;
    gd.heightHint=PluginConstant.CHART_STANDARD_HEIGHT;
    cc.setLayoutData(gd);
    addMouseListenerForChart(cc,dataExplorer,analysis);
  }
  subComp.setClient(composite);
  subComp.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      form.reflow(true);
    }
  }
);
  masterPage.registerSection(subComp);
}",0.967010658095077
137282,"@Override protected void addValueToDataset(DefaultCategoryDataset customerdataset,FrequencyExt freqExt,String keyLabel){
  customerdataset.addValue(freqExt.getFrequency(),""String_Node_Str"",keyLabel);
  ((DefaultCategoryDataset)secondDataset).addValue(BenfordLawFrequencyState.formalValues[Integer.valueOf(keyLabel)],""String_Node_Str"",keyLabel);
}","@Override protected void addValueToDataset(DefaultCategoryDataset customerdataset,FrequencyExt freqExt,String keyLabel){
  customerdataset.addValue(freqExt.getFrequency(),""String_Node_Str"",keyLabel);
  if (!BenfordLawFrequencyIndicatorImpl.INVALID.equals(keyLabel)) {
    ((DefaultCategoryDataset)secondDataset).addValue(BenfordLawFrequencyState.formalValues[Integer.valueOf(keyLabel) - 1],""String_Node_Str"",keyLabel);
  }
}",0.7714285714285715
137283,"/** 
 * <!-- begin-user-doc --> count the occur times for 1~9 at the beginning of every numbers. <!-- end-user-doc -->
 * @generated NOT
 */
@Override public boolean handle(Object data){
  this.count++;
  if (data == null) {
    setValue(""String_Node_Str"");
    return true;
  }
  int isInvalid=isInvalid(data);
  if (isInvalid == 0) {
    setValue(""String_Node_Str"");
  }
 else   if (isInvalid < 0) {
    setValue(""String_Node_Str"");
  }
 else {
    setValue(String.valueOf(data).substring(0,1));
  }
  return true;
}","/** 
 * <!-- begin-user-doc --> count the occur times for 1~9 at the beginning of every numbers. <!-- end-user-doc -->
 * @generated NOT
 */
@Override public boolean handle(Object data){
  this.count++;
  if (data == null) {
    setValue(INVALID);
    return true;
  }
  int isInvalid=isInvalid(data);
  if (isInvalid == 0) {
    setValue(""String_Node_Str"");
  }
 else   if (isInvalid < 0) {
    setValue(INVALID);
  }
 else {
    setValue(String.valueOf(data).substring(0,1));
  }
  return true;
}",0.7263779527559056
137284,"/** 
 * handle some special cases for SQL engine: <ul> <li>when there are null values;</li> <li>when there miss some numbers between 1~9;</li> <li>when the column is double, the leading digit maybe 0;</li> <li>when the column is string type, when the leading is not 1~9, all counted into ""invalid"" one.</li> </ul>
 */
private void handleSpecialCharacterAndMissingValues(){
  if (isChecked && valueToFreq.size() < 1) {
    return;
  }
  long counted=0L;
  List<Object> invalid=new ArrayList<Object>();
  List<Object> lengthMore=new ArrayList<Object>();
  for (  Object val : valueToFreq.keySet()) {
    if (isInvalid(val) < 0) {
      invalid.add(val);
      Long freq=this.valueToFreq.get(val);
      counted=(freq == null) ? counted : counted + freq;
    }
 else     if (String.valueOf(val).length() > 1) {
      lengthMore.add(val);
    }
  }
  if (invalid.size() > 0) {
    for (    Object val : invalid) {
      valueToFreq.remove(val);
    }
    valueToFreq.put(""String_Node_Str"",counted);
  }
  if (lengthMore.size() > 0) {
    for (    Object val : lengthMore) {
      String k=String.valueOf(val).substring(0,1);
      Long freq=this.valueToFreq.get(val);
      valueToFreq.remove(val);
      valueToFreq.put(k,freq);
    }
  }
  for (int i=1; i < 10; i++) {
    Long value=valueToFreq.get(String.valueOf(i));
    if (value == null) {
      valueToFreq.put(String.valueOf(i),0L);
    }
  }
  isChecked=true;
}","/** 
 * handle some special cases for SQL engine: <ul> <li>when there are null values;</li> <li>when there miss some numbers between 1~9;</li> <li>when the column is double, the leading digit maybe 0;</li> <li>when the column is string type, when the leading is not 1~9, all counted into ""invalid"" one.</li> </ul>
 */
private void handleSpecialCharacterAndMissingValues(){
  if (isChecked && valueToFreq.size() < 1) {
    return;
  }
  long counted=0L;
  List<Object> invalid=new ArrayList<Object>();
  List<Object> lengthMore=new ArrayList<Object>();
  for (  Object val : valueToFreq.keySet()) {
    if (isInvalid(val) < 0) {
      invalid.add(val);
      Long freq=this.valueToFreq.get(val);
      counted=(freq == null) ? counted : counted + freq;
    }
 else     if (String.valueOf(val).length() > 1) {
      lengthMore.add(val);
    }
  }
  if (invalid.size() > 0) {
    for (    Object val : invalid) {
      valueToFreq.remove(val);
    }
    valueToFreq.put(INVALID,counted);
  }
  if (lengthMore.size() > 0) {
    for (    Object val : lengthMore) {
      String k=String.valueOf(val).substring(0,1);
      Long freq=this.valueToFreq.get(val);
      valueToFreq.remove(val);
      valueToFreq.put(k,freq);
    }
  }
  for (int i=1; i < 10; i++) {
    Long value=valueToFreq.get(String.valueOf(i));
    if (value == null) {
      valueToFreq.put(String.valueOf(i),0L);
    }
  }
  isChecked=true;
}",0.9922096317280452
137285,"/** 
 * get NumberOfConnections Per Analysis with the real value.
 * @return
 */
public int getNumberOfConnectionsPerAnalysis(){
  int num=TdqAnalysisConnectionPool.CONNECTIONS_PER_ANALYSIS_DEFAULT_LENGTH;
  if (this.analysis != null) {
    TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TdqAnalysisConnectionPool.NUMBER_OF_CONNECTIONS_PER_ANALYSIS,this.analysis.getTaggedValue());
    if (taggedValue != null) {
      try {
        num=Integer.valueOf(ContextHelper.getAnalysisContextValue(analysis,taggedValue.getValue()));
      }
 catch (      NumberFormatException e) {
        log.debug(e);
      }
    }
  }
  return num;
}","/** 
 * get NumberOfConnections Per Analysis with the real value.
 * @return
 */
public int getNumberOfConnectionsPerAnalysis() throws NumberFormatException {
  int num=TdqAnalysisConnectionPool.CONNECTIONS_PER_ANALYSIS_DEFAULT_LENGTH;
  if (this.analysis != null) {
    TaggedValue taggedValue=TaggedValueHelper.getTaggedValue(TdqAnalysisConnectionPool.NUMBER_OF_CONNECTIONS_PER_ANALYSIS,this.analysis.getTaggedValue());
    if (taggedValue != null) {
      num=Integer.valueOf(ContextHelper.getAnalysisContextValue(analysis,taggedValue.getValue()));
    }
  }
  return num;
}",0.8742810188989318
137286,"@Override protected void addValueToDataset(DefaultCategoryDataset customerdataset,FrequencyExt freqExt,String keyLabel){
  customerdataset.addValue(freqExt.getFrequency(),""String_Node_Str"",keyLabel);
  if (!BenfordLawFrequencyIndicatorImpl.INVALID.equals(keyLabel)) {
    ((DefaultCategoryDataset)secondDataset).addValue(BenfordLawFrequencyState.formalValues[Integer.valueOf(keyLabel) - 1],""String_Node_Str"",keyLabel);
  }
 else {
    ((DefaultCategoryDataset)secondDataset).addValue(BenfordLawFrequencyState.formalValues[9],""String_Node_Str"",keyLabel);
  }
}","@Override protected void addValueToDataset(DefaultCategoryDataset customerdataset,FrequencyExt freqExt,String keyLabel){
  customerdataset.addValue(freqExt.getFrequency(),""String_Node_Str"",keyLabel);
  if (!BenfordLawFrequencyIndicatorImpl.INVALID.equals(keyLabel) && !""String_Node_Str"".equals(keyLabel)) {
    ((DefaultCategoryDataset)secondDataset).addValue(BenfordLawFrequencyState.formalValues[Integer.valueOf(keyLabel) - 1],""String_Node_Str"",keyLabel);
  }
 else {
    ((DefaultCategoryDataset)secondDataset).addValue(BenfordLawFrequencyState.formalValues[9],""String_Node_Str"",keyLabel);
  }
}",0.9662921348314608
137287,"/** 
 * 1)The current node is under: hadoop/hadoopcluster, need to get the folder to shown as child: hadoop/hdfs, hadoop/hive, 2) only show hdfs or hive folder, when it has children.
 */
@Override public List<IRepositoryNode> getChildren(){
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>();
  HDFSOfHCFolderRepNode hdfsFolder=new HDFSOfHCFolderRepNode(this.getObject(),this.getParent(),ENodeType.SIMPLE_FOLDER);
  HiveOfHCFolderRepNode hiveFolder=new HiveOfHCFolderRepNode(this.getObject(),this.getParent(),ENodeType.SIMPLE_FOLDER);
  addSubFolder(children,hdfsFolder);
  addSubFolder(children,hiveFolder);
  return children;
}","/** 
 * 1)The current node is under: hadoop/hadoopcluster, need to get the folder to shown as child: hadoop/hdfs, hadoop/hive, 2) only show hdfs or hive folder, when it has children.
 */
@Override public List<IRepositoryNode> getChildren(){
  List<IRepositoryNode> children=new ArrayList<IRepositoryNode>();
  HDFSOfHCFolderRepNode hdfsFolder=new HDFSOfHCFolderRepNode(this.getObject(),this,ENodeType.SIMPLE_FOLDER);
  HiveOfHCFolderRepNode hiveFolder=new HiveOfHCFolderRepNode(this.getObject(),this,ENodeType.SIMPLE_FOLDER);
  addSubFolder(children,hdfsFolder);
  addSubFolder(children,hiveFolder);
  return children;
}",0.981012658227848
137288,"@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(HadoopClusterRepositoryNodeType.HADOOPCLUSTER,RepositoryNodeHelper.getPath(this).toString());
    for (    Container<String,IRepositoryViewObject> container : tdqViewObjects.getSubContainer()) {
      Folder folder=new Folder((Property)container.getProperty(),HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      if (!withDeleted && folder.isDeleted()) {
        continue;
      }
      HadoopClusterSubFolderRepNode childNodeFolder=new HadoopClusterSubFolderRepNode(folder,this,ENodeType.SIMPLE_FOLDER);
      childNodeFolder.setProperties(EProperties.LABEL,HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      childNodeFolder.setProperties(EProperties.CONTENT_TYPE,HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      super.getChildren().add(childNodeFolder);
    }
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      HadoopClusterConnectionRepNode repNode=new HadoopClusterConnectionRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      repNode.setProperties(EProperties.LABEL,HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      repNode.setProperties(EProperties.CONTENT_TYPE,HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return filterResultsIfAny(super.getChildren());
}","@Override public List<IRepositoryNode> getChildren(boolean withDeleted){
  try {
    super.getChildren().clear();
    RootContainer<String,IRepositoryViewObject> tdqViewObjects=ProxyRepositoryFactory.getInstance().getTdqRepositoryViewObjects(HadoopClusterRepositoryNodeType.HADOOPCLUSTER,RepositoryNodeHelper.getPath(this).toString());
    for (    IRepositoryViewObject viewObject : tdqViewObjects.getMembers()) {
      if (!withDeleted && viewObject.isDeleted()) {
        continue;
      }
      HadoopClusterConnectionRepNode repNode=new HadoopClusterConnectionRepNode(viewObject,this,ENodeType.REPOSITORY_ELEMENT);
      repNode.setProperties(EProperties.LABEL,HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      repNode.setProperties(EProperties.CONTENT_TYPE,HadoopClusterRepositoryNodeType.HADOOPCLUSTER);
      viewObject.setRepositoryNode(repNode);
      super.getChildren().add(repNode);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return filterResultsIfAny(super.getChildren());
}",0.5171018756895918
137289,"public CreateDBConnectionAction(){
  RepositoryNode node=(RepositoryNode)RepositoryNodeHelper.getMetadataFolderNode(EResourceConstant.DB_CONNECTIONS);
  super.node=node;
}","public CreateDBConnectionAction(){
  RepositoryNode node2=(RepositoryNode)RepositoryNodeHelper.getMetadataFolderNode(EResourceConstant.DB_CONNECTIONS);
  super.node=node2;
}",0.994186046511628
137290,"@Override protected IWizard createWizard(){
  RepositoryNode dbRootNode=(RepositoryNode)node.getRoot().getRootRepositoryNode(ERepositoryObjectType.METADATA_CONNECTIONS);
  HadoopClusterConnectionItem hcConnectionItem=HCRepositoryUtil.getHCConnectionItemFromRepositoryNode(node);
  Map<String,String> initMap=new HashMap<String,String>();
  initConnectionParameters(initMap,hcConnectionItem);
  return new DatabaseWizard(PlatformUI.getWorkbench(),true,dbRootNode,getExistingNames(),initMap);
}","@Override protected IWizard createWizard(){
  RepositoryNode dbRootNode=RepositoryNodeHelper.getDBConnectionRootNode();
  HadoopClusterConnectionItem hcConnectionItem=HCRepositoryUtil.getHCConnectionItemFromRepositoryNode(node);
  Map<String,String> initMap=new HashMap<String,String>();
  initConnectionParameters(initMap,hcConnectionItem);
  return new DatabaseWizard(PlatformUI.getWorkbench(),true,dbRootNode,getExistingNames(),initMap);
}",0.8907922912205567
137291,"@Override public Image getImage(Object element){
  Image image=super.getImage(element);
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    IRepositoryViewObject viewObject=node.getObject();
    ENodeType type=node.getType();
    if (node instanceof ReportAnalysisRepNode) {
      image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
    }
    if (element instanceof RecycleBinRepNode) {
      image=ImageLib.getImage(ImageLib.RECYCLEBIN_EMPTY);
    }
 else     if (type.equals(ENodeType.SYSTEM_FOLDER)) {
      String label=viewObject.getLabel();
      if (label.equals(EResourceConstant.DATA_PROFILING.getName())) {
        image=ImageLib.getImage(ImageLib.DATA_PROFILING);
      }
 else       if (label.equals(EResourceConstant.METADATA.getName())) {
        image=ImageLib.getImage(ImageLib.METADATA);
      }
 else       if (node instanceof DBConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.CONNECTION);
      }
 else       if (label.equals(EResourceConstant.FILEDELIMITED.getName())) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (label.equals(EResourceConstant.HADOOP_CLUSTER.getName())) {
        image=ImageLib.getImage(ImageLib.HADOOP_CLUSTER);
      }
 else       if (label.equals(EResourceConstant.LIBRARIES.getName())) {
        image=ImageLib.getImage(ImageLib.LIBRARIES);
      }
 else       if (label.equals(EResourceConstant.EXCHANGE.getName())) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
 else     if (type.equals(ENodeType.SIMPLE_FOLDER)) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
    }
 else     if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      String originalImageName=null;
      if (node instanceof DBConnectionRepNode) {
        originalImageName=ImageLib.TD_DATAPROVIDER;
        if (!isSupportedConnection(node) || isNeedAddDriverConnection(node)) {
          image=ImageLib.createErrorIcon(originalImageName).createImage();
        }
 else         if (isInvalidJDBCConnection(node)) {
          image=ImageLib.createInvalidIcon(originalImageName).createImage();
        }
 else {
          image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
        }
      }
 else       if (node instanceof DFConnectionRepNode) {
        originalImageName=ImageLib.FILE_DELIMITED;
      }
 else       if (node instanceof AnalysisRepNode) {
        originalImageName=ImageLib.ANALYSIS_OBJECT;
        image=addWarnIconIfNeeded(node,originalImageName);
      }
 else       if (node instanceof ReportRepNode) {
        originalImageName=ImageLib.REPORT_OBJECT;
        image=addWarnIconIfNeeded(node,originalImageName);
      }
 else       if (node instanceof SysIndicatorDefinitionRepNode) {
        originalImageName=ImageLib.IND_DEFINITION;
      }
 else       if (node instanceof PatternRepNode) {
        originalImageName=ImageLib.PATTERN_REG;
      }
 else       if (node instanceof RuleRepNode) {
        if (((RuleRepNode)node).getRule() instanceof MatchRuleDefinition) {
          originalImageName=ImageLib.MATCH_RULE_ICON;
        }
 else {
          originalImageName=ImageLib.DQ_RULE;
        }
      }
 else       if (node instanceof SourceFileRepNode) {
        originalImageName=ImageLib.SOURCE_FILE;
      }
 else       if (node instanceof HadoopClusterConnectionRepNode) {
        originalImageName=ImageLib.HADOOP_CLUSTER;
      }
 else       if (node instanceof HDFSOfHCConnectionNode) {
        originalImageName=ImageLib.HDFS;
      }
 else       if (node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
        originalImageName=ImageLib.EXCHANGE;
      }
 else       if (node instanceof RepositoryNode) {
        Image imageNode=getImageByContentType((RepositoryNode)node);
        if (image != null) {
          image=imageNode;
        }
      }
      if (originalImageName != null && !(node instanceof DBConnectionRepNode || node instanceof AnalysisRepNode || node instanceof ReportRepNode)) {
        image=ImageLib.getImage(originalImageName);
      }
      if (viewObject != null) {
        ERepositoryStatus status=ProxyRepositoryFactory.getInstance().getStatus(viewObject);
        Context ctx=CoreRuntimePlugin.getInstance().getContext();
        RepositoryContext rc=(RepositoryContext)ctx.getProperty(Context.REPOSITORY_CONTEXT_KEY);
        if (rc.isEditableAsReadOnly()) {
          if (status == ERepositoryStatus.LOCK_BY_USER) {
            status=ERepositoryStatus.DEFAULT;
          }
        }
        if (ERepositoryStatus.DEFAULT != status && originalImageName != null) {
          if (ERepositoryStatus.LOCK_BY_USER == status) {
            image=ImageLib.createLockedByOwnIcon(originalImageName).createImage();
          }
 else           if (ERepositoryStatus.LOCK_BY_OTHER == status) {
            image=ImageLib.createLockedByOtherIcon(originalImageName).createImage();
          }
        }
      }
    }
 else     if (type.equals(ENodeType.TDQ_REPOSITORY_ELEMENT)) {
      if (node instanceof DBCatalogRepNode) {
        image=ImageLib.getImage(ImageLib.CATALOG);
      }
 else       if (node instanceof DBSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.SCHEMA);
      }
 else       if (node instanceof DBTableFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBViewFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBTableRepNode || node instanceof DFTableRepNode) {
        image=ImageLib.getImage(ImageLib.TABLE);
      }
 else       if (node instanceof DBViewRepNode) {
        image=ImageLib.getImage(ImageLib.VIEW);
      }
 else       if (node instanceof DBColumnRepNode) {
        if (((DBColumnRepNode)node).isKey()) {
          image=ImageLib.getImage(ImageLib.PK_COLUMN);
        }
 else {
          image=ImageLib.getImage(ImageLib.TD_COLUMN);
        }
      }
 else       if (node instanceof DFColumnRepNode) {
        image=ImageLib.getImage(ImageLib.TD_COLUMN);
      }
 else       if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof JrxmlTempleteRepNode) {
        image=ImageLib.getImage(ImageLib.XML_DOC);
      }
    }
  }
  return image;
}","@Override public Image getImage(Object element){
  Image image=super.getImage(element);
  if (element instanceof IRepositoryNode) {
    IRepositoryNode node=(IRepositoryNode)element;
    IRepositoryViewObject viewObject=node.getObject();
    ENodeType type=node.getType();
    if (node instanceof ReportAnalysisRepNode) {
      image=ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
    }
    if (element instanceof RecycleBinRepNode) {
      image=ImageLib.getImage(ImageLib.RECYCLEBIN_EMPTY);
    }
 else     if (type.equals(ENodeType.SYSTEM_FOLDER)) {
      String label=viewObject.getLabel();
      if (label.equals(EResourceConstant.DATA_PROFILING.getName())) {
        image=ImageLib.getImage(ImageLib.DATA_PROFILING);
      }
 else       if (label.equals(EResourceConstant.METADATA.getName())) {
        image=ImageLib.getImage(ImageLib.METADATA);
      }
 else       if (node instanceof DBConnectionFolderRepNode) {
        image=ImageLib.getImage(ImageLib.CONNECTION);
      }
 else       if (label.equals(EResourceConstant.FILEDELIMITED.getName())) {
        image=ImageLib.getImage(ImageLib.FILE_DELIMITED);
      }
 else       if (label.equals(EResourceConstant.HADOOP_CLUSTER.getName())) {
        image=ImageLib.getImage(ImageLib.HADOOP_CLUSTER);
      }
 else       if (label.equals(EResourceConstant.LIBRARIES.getName())) {
        image=ImageLib.getImage(ImageLib.LIBRARIES);
      }
 else       if (label.equals(EResourceConstant.EXCHANGE.getName())) {
        image=ImageLib.getImage(ImageLib.EXCHANGE);
      }
 else {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
    }
 else     if (type.equals(ENodeType.SIMPLE_FOLDER)) {
      image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
    }
 else     if (type.equals(ENodeType.REPOSITORY_ELEMENT)) {
      String originalImageName=null;
      if (node instanceof DBConnectionRepNode) {
        originalImageName=ImageLib.TD_DATAPROVIDER;
        if (!isSupportedConnection(node) || isNeedAddDriverConnection(node)) {
          image=ImageLib.createErrorIcon(originalImageName).createImage();
        }
 else         if (isInvalidJDBCConnection(node)) {
          image=ImageLib.createInvalidIcon(originalImageName).createImage();
        }
 else {
          image=ImageLib.getImage(ImageLib.TD_DATAPROVIDER);
        }
      }
 else       if (node instanceof DFConnectionRepNode) {
        originalImageName=ImageLib.FILE_DELIMITED;
      }
 else       if (node instanceof AnalysisRepNode) {
        originalImageName=ImageLib.ANALYSIS_OBJECT;
        image=addWarnIconIfNeeded(node,originalImageName);
      }
 else       if (node instanceof ReportRepNode) {
        originalImageName=ImageLib.REPORT_OBJECT;
        image=addWarnIconIfNeeded(node,originalImageName);
      }
 else       if (node instanceof SysIndicatorDefinitionRepNode) {
        originalImageName=ImageLib.IND_DEFINITION;
      }
 else       if (node instanceof PatternRepNode) {
        originalImageName=ImageLib.PATTERN_REG;
      }
 else       if (node instanceof RuleRepNode) {
        if (((RuleRepNode)node).getRule() instanceof MatchRuleDefinition) {
          originalImageName=ImageLib.MATCH_RULE_ICON;
        }
 else {
          originalImageName=ImageLib.DQ_RULE;
        }
      }
 else       if (node instanceof SourceFileRepNode) {
        originalImageName=ImageLib.SOURCE_FILE;
      }
 else       if (node instanceof HadoopClusterConnectionRepNode) {
        originalImageName=ImageLib.HADOOP_CLUSTER;
      }
 else       if (node instanceof HDFSOfHCConnectionNode) {
        originalImageName=ImageLib.HDFS;
      }
 else       if (node instanceof HiveOfHCConnectionNode) {
        originalImageName=ImageLib.HIVE_LINK;
      }
 else       if (node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
        originalImageName=ImageLib.EXCHANGE;
      }
 else       if (node instanceof RepositoryNode) {
        Image imageNode=getImageByContentType((RepositoryNode)node);
        if (image != null) {
          image=imageNode;
        }
      }
      if (originalImageName != null && !(node instanceof DBConnectionRepNode || node instanceof AnalysisRepNode || node instanceof ReportRepNode)) {
        image=ImageLib.getImage(originalImageName);
      }
      if (viewObject != null) {
        ERepositoryStatus status=ProxyRepositoryFactory.getInstance().getStatus(viewObject);
        Context ctx=CoreRuntimePlugin.getInstance().getContext();
        RepositoryContext rc=(RepositoryContext)ctx.getProperty(Context.REPOSITORY_CONTEXT_KEY);
        if (rc.isEditableAsReadOnly()) {
          if (status == ERepositoryStatus.LOCK_BY_USER) {
            status=ERepositoryStatus.DEFAULT;
          }
        }
        if (ERepositoryStatus.DEFAULT != status && originalImageName != null) {
          if (ERepositoryStatus.LOCK_BY_USER == status) {
            image=ImageLib.createLockedByOwnIcon(originalImageName).createImage();
          }
 else           if (ERepositoryStatus.LOCK_BY_OTHER == status) {
            image=ImageLib.createLockedByOtherIcon(originalImageName).createImage();
          }
        }
      }
    }
 else     if (type.equals(ENodeType.TDQ_REPOSITORY_ELEMENT)) {
      if (node instanceof DBCatalogRepNode) {
        image=ImageLib.getImage(ImageLib.CATALOG);
      }
 else       if (node instanceof DBSchemaRepNode) {
        image=ImageLib.getImage(ImageLib.SCHEMA);
      }
 else       if (node instanceof DBTableFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBViewFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof DBTableRepNode || node instanceof DFTableRepNode) {
        image=ImageLib.getImage(ImageLib.TABLE);
      }
 else       if (node instanceof DBViewRepNode) {
        image=ImageLib.getImage(ImageLib.VIEW);
      }
 else       if (node instanceof DBColumnRepNode) {
        if (((DBColumnRepNode)node).isKey()) {
          image=ImageLib.getImage(ImageLib.PK_COLUMN);
        }
 else {
          image=ImageLib.getImage(ImageLib.TD_COLUMN);
        }
      }
 else       if (node instanceof DFColumnRepNode) {
        image=ImageLib.getImage(ImageLib.TD_COLUMN);
      }
 else       if (node instanceof DBColumnFolderRepNode || node instanceof DFColumnFolderRepNode) {
        image=ImageLib.getImage(ImageLib.FOLDERNODE_IMAGE);
      }
 else       if (node instanceof JrxmlTempleteRepNode) {
        image=ImageLib.getImage(ImageLib.XML_DOC);
      }
    }
  }
  return image;
}",0.9914044512663084
137292,"/** 
 * Test method for   {@link org.talend.dq.dbms.DbmsLanguageFactory#isHive(java.lang.String)}.
 */
@Test public void testIsHive(){
  String hive=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.isHive(hive));
  hive=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.isHive(hive));
  hive=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.isHive(hive));
  hive=""String_Node_Str"";
  Assert.isTrue(!DbmsLanguageFactory.isHive(hive));
  hive=""String_Node_Str"";
  Assert.isTrue(!DbmsLanguageFactory.isHive(hive));
}","/** 
 * Test method for   {@link org.talend.dq.dbms.DbmsLanguageFactory#isHive(java.lang.String)}.
 */
@Test public void testIsHive(){
  String hive=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.isHive(hive));
  hive=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.isHive(hive));
  hive=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.isHive(hive));
  hive=""String_Node_Str"";
  Assert.assertEquals(false,DbmsLanguageFactory.isHive(hive));
  hive=""String_Node_Str"";
  Assert.assertEquals(false,DbmsLanguageFactory.isHive(hive));
}",0.884304932735426
137293,"/** 
 * Test method for  {@link org.talend.dq.dbms.DbmsLanguageFactory#compareDbmsLanguage(java.lang.String,java.lang.String)}.
 */
@Test public void testCompareDbmsLanguage(){
  String dbType=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MYSQL));
  dbType=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MYSQL));
  dbType=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MYSQL));
  dbType=""String_Node_Str"";
  Assert.isTrue(!DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MYSQL));
  dbType=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MSSQL));
  dbType=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MSSQL));
  dbType=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MSSQL));
  dbType=""String_Node_Str"";
  Assert.isTrue(!DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MSSQL));
  dbType=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.ORACLE));
  dbType=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.ORACLE));
  dbType=""String_Node_Str"";
  Assert.isTrue(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.ORACLE));
  dbType=""String_Node_Str"";
  Assert.isTrue(!DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.ORACLE));
}","/** 
 * Test method for  {@link org.talend.dq.dbms.DbmsLanguageFactory#compareDbmsLanguage(java.lang.String,java.lang.String)}.
 */
@Test public void testCompareDbmsLanguage(){
  String dbType=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MYSQL));
  dbType=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MYSQL));
  dbType=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MYSQL));
  dbType=""String_Node_Str"";
  Assert.assertEquals(false,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MYSQL));
  dbType=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MSSQL));
  dbType=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MSSQL));
  dbType=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MSSQL));
  dbType=""String_Node_Str"";
  Assert.assertEquals(false,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MSSQL));
  dbType=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.ORACLE));
  dbType=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.ORACLE));
  dbType=""String_Node_Str"";
  Assert.assertEquals(true,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.ORACLE));
  dbType=""String_Node_Str"";
  Assert.assertEquals(false,DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.ORACLE));
  dbType=""String_Node_Str"";
  Assert.assertEquals(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.SQL),true);
  Assert.assertEquals(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MYSQL),false);
  Assert.assertEquals(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.MSSQL),false);
  Assert.assertEquals(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.POSTGRESQL),false);
  dbType=""String_Node_Str"";
  Assert.assertEquals(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.SQL),false);
  dbType=""String_Node_Str"";
  Assert.assertEquals(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.SQL),false);
  dbType=""String_Node_Str"";
  Assert.assertEquals(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.SQL),false);
  dbType=""String_Node_Str"";
  Assert.assertEquals(DbmsLanguageFactory.compareDbmsLanguage(dbType,DbmsLanguage.SQL),false);
}",0.6046399226679555
137294,"public static boolean compareDbmsLanguage(String lang1,String lang2){
  if (lang1 == null || lang2 == null) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && !StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (!StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(StringUtils.upperCase(lang2),lang1)) {
    return true;
  }
  if (lang1.startsWith(DbmsLanguage.DB2)) {
    if (StringUtils.contains(lang2,DbmsLanguage.AS400)) {
      return false;
    }
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
 else   if (lang1.startsWith(DbmsLanguage.INFOMIX)) {
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
  if (StringUtils.contains(lang1,DbmsLanguage.VERTICA) && StringUtils.contains(lang2,DbmsLanguage.VERTICA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.NETEZZA) && StringUtils.contains(lang2,DbmsLanguage.NETEZZA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.HIVE) && StringUtils.contains(lang2,DbmsLanguage.HIVE)) {
    return true;
  }
  return StringUtils.contains(StringUtils.upperCase(lang1),StringUtils.upperCase(lang2)) || StringUtils.contains(StringUtils.upperCase(lang2),StringUtils.upperCase(lang1));
}","public static boolean compareDbmsLanguage(String lang1,String lang2){
  if (lang1 == null || lang2 == null) {
    return false;
  }
  if (StringUtils.equalsIgnoreCase(lang1,DbmsLanguage.SQL) || StringUtils.equalsIgnoreCase(lang2,DbmsLanguage.SQL)) {
    return StringUtils.equalsIgnoreCase(lang1,lang2);
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && !StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (!StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(StringUtils.upperCase(lang2),lang1)) {
    return true;
  }
  if (lang1.startsWith(DbmsLanguage.DB2)) {
    if (StringUtils.contains(lang2,DbmsLanguage.AS400)) {
      return false;
    }
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
 else   if (lang1.startsWith(DbmsLanguage.INFOMIX)) {
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
  if (StringUtils.contains(lang1,DbmsLanguage.VERTICA) && StringUtils.contains(lang2,DbmsLanguage.VERTICA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.NETEZZA) && StringUtils.contains(lang2,DbmsLanguage.NETEZZA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.HIVE) && StringUtils.contains(lang2,DbmsLanguage.HIVE)) {
    return true;
  }
  return StringUtils.contains(StringUtils.upperCase(lang1),StringUtils.upperCase(lang2)) || StringUtils.contains(StringUtils.upperCase(lang2),StringUtils.upperCase(lang1));
}",0.9511924570160843
137295,"public static boolean compareDbmsLanguage(String lang1,String lang2){
  if (lang1 == null || lang2 == null) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && !StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (!StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(StringUtils.upperCase(lang2),lang1)) {
    return true;
  }
  if (lang1.startsWith(DbmsLanguage.DB2)) {
    if (StringUtils.contains(lang2,DbmsLanguage.AS400)) {
      return false;
    }
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
 else   if (lang1.startsWith(DbmsLanguage.INFOMIX)) {
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
  if (StringUtils.contains(lang1,DbmsLanguage.VERTICA) && StringUtils.contains(lang2,DbmsLanguage.VERTICA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.NETEZZA) && StringUtils.contains(lang2,DbmsLanguage.NETEZZA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.HIVE) && StringUtils.contains(lang2,DbmsLanguage.HIVE)) {
    return true;
  }
  return StringUtils.contains(StringUtils.upperCase(lang1),StringUtils.upperCase(lang2)) || StringUtils.contains(StringUtils.upperCase(lang2),StringUtils.upperCase(lang1));
}","public static boolean compareDbmsLanguage(String lang1,String lang2){
  if (lang1 == null || lang2 == null) {
    return false;
  }
  if (StringUtils.equalsIgnoreCase(lang1,DbmsLanguage.SQL) || StringUtils.equalsIgnoreCase(lang2,DbmsLanguage.SQL)) {
    return StringUtils.equalsIgnoreCase(lang1,lang2);
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && !StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (!StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(StringUtils.upperCase(lang2),lang1)) {
    return true;
  }
  if (lang1.startsWith(DbmsLanguage.DB2)) {
    if (StringUtils.contains(lang2,DbmsLanguage.AS400)) {
      return false;
    }
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
 else   if (lang1.startsWith(DbmsLanguage.INFOMIX)) {
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
  if (StringUtils.contains(lang1,DbmsLanguage.VERTICA) && StringUtils.contains(lang2,DbmsLanguage.VERTICA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.NETEZZA) && StringUtils.contains(lang2,DbmsLanguage.NETEZZA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.HIVE) && StringUtils.contains(lang2,DbmsLanguage.HIVE)) {
    return true;
  }
  return StringUtils.contains(StringUtils.upperCase(lang1),StringUtils.upperCase(lang2)) || StringUtils.contains(StringUtils.upperCase(lang2),StringUtils.upperCase(lang1));
}",0.9511924570160843
137296,"/** 
 * @param object
 * @return SupplierDependencygetClintDependency here will contain system indicators so only will be used by export case
 */
public List<Property> getClintDependencyForExport(ModelElement object){
  List<Property> result=new ArrayList<Property>();
  Property property=PropertyHelper.getProperty(object);
  if (property != null) {
    result=iterateClientDependencies(property);
    if (object instanceof Analysis) {
      result.addAll(getSystemIndicaotrOfAnalysis(property));
    }
  }
  return result;
}","/** 
 * @param object
 * @return SupplierDependencygetClintDependency here will contain system indicators so only will be used by export case
 */
public List<Property> getClintDependencyForExport(ModelElement object){
  List<Property> result=new ArrayList<Property>();
  Property property=PropertyHelper.getProperty(object);
  if (property != null) {
    result=iterateClientDependencies(property);
    if (object instanceof Analysis) {
      result.addAll(getSystemIndicaotrOfAnalysis(property));
    }
 else {
      List<Property> tempList=new ArrayList<Property>();
      tempList.addAll(result);
      for (      Property pro : tempList) {
        if (TDQAnalysisItem.class.isInstance(pro.getItem())) {
          result.addAll(getSystemIndicaotrOfAnalysis(pro));
        }
      }
    }
  }
  return result;
}",0.7856609410007468
137297,"/** 
 * @param object
 * @return SupplierDependencygetClintDependency here will contain system indicators so only will be used by export case
 */
public List<Property> getClintDependencyForExport(ModelElement object){
  List<Property> result=new ArrayList<Property>();
  Property property=PropertyHelper.getProperty(object);
  if (property != null) {
    result=iterateClientDependencies(property);
    if (object instanceof Analysis) {
      result.addAll(getSystemIndicaotrOfAnalysis(property));
    }
  }
  return result;
}","/** 
 * @param object
 * @return SupplierDependencygetClintDependency here will contain system indicators so only will be used by export case
 */
public List<Property> getClintDependencyForExport(ModelElement object){
  List<Property> result=new ArrayList<Property>();
  Property property=PropertyHelper.getProperty(object);
  if (property != null) {
    result=iterateClientDependencies(property);
    if (object instanceof Analysis) {
      result.addAll(getSystemIndicaotrOfAnalysis(property));
    }
 else {
      List<Property> tempList=new ArrayList<Property>();
      tempList.addAll(result);
      for (      Property pro : tempList) {
        if (TDQAnalysisItem.class.isInstance(pro.getItem())) {
          result.addAll(getSystemIndicaotrOfAnalysis(pro));
        }
      }
    }
  }
  return result;
}",0.7856609410007468
137298,"@Override protected ReturnCode removeDependencies(Item item){
  ReturnCode rc=new ReturnCode();
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  Analysis analysis=anaItem.getAnalysis();
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(anaItem.getProperty());
  List<ModelElement> getClientDepListByResultList=getClientDepListByResult(analysis);
  for (  Property currentClient : clintDependency) {
    ModelElement modelElement=PropertyHelper.getModelElement(currentClient);
    if (!getClientDepListByResultList.contains(modelElement)) {
      boolean isSuccess=DependenciesHandler.getInstance().removeDependenciesBetweenModel(analysis,modelElement);
      if (isSuccess) {
        try {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(modelElement.eResource());
        }
 catch (        PersistenceException e) {
          log.error(e,e);
          rc.setOk(false);
          rc.setMessage(e.getMessage());
        }
      }
 else {
        rc.setOk(false);
        rc.setMessage(Messages.getString(""String_Node_Str"",analysis.getName(),modelElement.getName()));
      }
    }
  }
  return rc;
}","@Override protected ReturnCode removeDependencies(Item item){
  ReturnCode rc=new ReturnCode();
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  Analysis analysis=anaItem.getAnalysis();
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(anaItem.getProperty());
  List<ModelElement> clientDepListByResultList=getClientDepListByResult(analysis);
  for (  Property currentClient : clintDependency) {
    ModelElement modelElement=PropertyHelper.getModelElement(currentClient);
    if (!clientDepListByResultList.contains(modelElement)) {
      boolean isSuccess=DependenciesHandler.getInstance().removeDependenciesBetweenModel(analysis,modelElement);
      if (isSuccess) {
        try {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(modelElement.eResource());
        }
 catch (        PersistenceException e) {
          log.error(e,e);
          rc.setOk(false);
          rc.setMessage(e.getMessage());
        }
      }
 else {
        rc.setOk(false);
        rc.setMessage(Messages.getString(""String_Node_Str"",analysis.getName(),modelElement.getName()));
      }
    }
  }
  return rc;
}",0.9958368026644464
137299,"/** 
 * get Client Dependency List.
 * @param Analysis the analysis which we want to save
 * @return The list all of client dependency(Pattern UDI Connection DQRule)
 */
private List<ModelElement> getClientDepListByResult(Analysis analysis){
  List<ModelElement> clientDependencyList=new ArrayList<ModelElement>();
  DataManager connection=analysis.getContext().getConnection();
  clientDependencyList.addAll(AnalysisHelper.getUserDefinedIndicators(analysis));
  clientDependencyList.addAll(AnalysisHelper.getPatterns(analysis));
  if (connection != null) {
    clientDependencyList.add(connection);
  }
  return clientDependencyList;
}","/** 
 * get Client Dependency List.
 * @param Analysis the analysis which we want to save
 * @return The list all of client dependency(Pattern UDI Connection DQRule)
 */
private List<ModelElement> getClientDepListByResult(Analysis analysis){
  List<ModelElement> clientDependencyList=new ArrayList<ModelElement>();
  DataManager connection=analysis.getContext().getConnection();
  if (connection != null) {
    clientDependencyList.addAll(AnalysisHelper.getUserDefinedIndicators(analysis));
    clientDependencyList.addAll(AnalysisHelper.getPatterns(analysis));
    clientDependencyList.add(connection);
  }
  return clientDependencyList;
}",0.7429467084639498
137300,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  Connection tdProvider=null;
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<RepositoryNode> repositoryNodeList=treeViewer.getColumnSetMultiValueList();
  if (repositoryNodeList != null && repositoryNodeList.size() != 0) {
    reposObject=repositoryNodeList.get(0).getObject();
    tdProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnLst=new ArrayList<TdColumn>();
    for (    RepositoryNode repNode : repositoryNodeList) {
      columnLst.add((TdColumn)((MetadataColumnRepositoryObject)repNode.getObject()).getTdColumn());
    }
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnLst);
    correlationAnalysisHandler.addIndicator(columnLst,columnSetMultiIndicator);
  }
 else {
    deleteConnectionDependency(analysis);
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ColumnSetMultiValueIndicator columnSetMultiValueIndicator=null;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createCountAvgNullIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
    fillSimpleIndicators(columnSetMultiValueIndicator);
    analysis.getResults().getIndicators().add(columnSetMultiValueIndicator);
  }
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  Connection tdProvider=null;
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<RepositoryNode> repositoryNodeList=treeViewer.getColumnSetMultiValueList();
  if (repositoryNodeList != null && repositoryNodeList.size() != 0) {
    reposObject=repositoryNodeList.get(0).getObject();
    tdProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnLst=new ArrayList<TdColumn>();
    for (    RepositoryNode repNode : repositoryNodeList) {
      columnLst.add((TdColumn)((MetadataColumnRepositoryObject)repNode.getObject()).getTdColumn());
    }
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnLst);
    correlationAnalysisHandler.addIndicator(columnLst,columnSetMultiIndicator);
  }
 else {
    analysis.getContext().setConnection(null);
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ColumnSetMultiValueIndicator columnSetMultiValueIndicator=null;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createCountAvgNullIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
    fillSimpleIndicators(columnSetMultiValueIndicator);
    analysis.getResults().getIndicators().add(columnSetMultiValueIndicator);
  }
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9877551020408164
137301,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysis.getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    deleteConnectionDependency(analysis);
  }
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysis.getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    analysis.getContext().setConnection(null);
  }
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9858677218767664
137302,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=this.getCurrentModelElementIndicators();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  try {
    Integer.valueOf(numberOfConnectionsPerAnalysisText.getText());
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    String originalValue=TaggedValueHelper.getTaggedValue(TdqAnalysisConnectionPool.NUMBER_OF_CONNECTIONS_PER_ANALYSIS,this.analysis.getTaggedValue()).getValue();
    numberOfConnectionsPerAnalysisText.setText(originalValue);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  try {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    maxNumText.setText(String.valueOf(analysis.getParameters().getMaxNumberRows()));
  }
  analysis.getParameters().setMaxNumberRows(analysis.getParameters().getMaxNumberRows());
  analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    deleteConnectionDependency(analysis);
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysisHandler.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysisHandler.getName()));
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=this.getCurrentModelElementIndicators();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  try {
    Integer.valueOf(numberOfConnectionsPerAnalysisText.getText());
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    String originalValue=TaggedValueHelper.getTaggedValue(TdqAnalysisConnectionPool.NUMBER_OF_CONNECTIONS_PER_ANALYSIS,this.analysis.getTaggedValue()).getValue();
    numberOfConnectionsPerAnalysisText.setText(originalValue);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  try {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    maxNumText.setText(String.valueOf(analysis.getParameters().getMaxNumberRows()));
  }
  analysis.getParameters().setMaxNumberRows(analysis.getParameters().getMaxNumberRows());
  analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    analysis.getContext().setConnection(null);
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  this.updateAnalysisClientDependency();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysisHandler.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysisHandler.getName()));
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9910864229427724
137303,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  analysis.getParameters().setMaxNumberRows(Integer.valueOf(maxNumText.getText()));
  simpleStatIndicator.setMustStoreRow(drillDownCheck.getSelection());
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      if (rd instanceof MDMXmlElementRepNode) {
        columnList.add(((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType());
      }
 else {
        columnList.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
      }
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            IRepositoryViewObject obj=modelElementInd.getModelElementRepositoryNode().getObject();
            ModelElement analyzedElt=obj instanceof MetadataColumnRepositoryObject ? ((MetadataColumnRepositoryObject)obj).getTdColumn() : ((MetadataXmlElementTypeRepositoryObject)obj).getModelElement();
            ind.setAnalyzedElement(analyzedElt);
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    deleteConnectionDependency(analysis);
  }
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(columnSetAnalysisHandler.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(columnSetAnalysisHandler.getName()));
    this.nameText.setText(columnSetAnalysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  analysis.getParameters().setMaxNumberRows(Integer.valueOf(maxNumText.getText()));
  simpleStatIndicator.setMustStoreRow(drillDownCheck.getSelection());
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      if (rd instanceof MDMXmlElementRepNode) {
        columnList.add(((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType());
      }
 else {
        columnList.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
      }
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            IRepositoryViewObject obj=modelElementInd.getModelElementRepositoryNode().getObject();
            ModelElement analyzedElt=obj instanceof MetadataColumnRepositoryObject ? ((MetadataColumnRepositoryObject)obj).getTdColumn() : ((MetadataXmlElementTypeRepositoryObject)obj).getModelElement();
            ind.setAnalyzedElement(analyzedElt);
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    analysis.getContext().setConnection(null);
  }
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(columnSetAnalysisHandler.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(columnSetAnalysisHandler.getName()));
    this.nameText.setText(columnSetAnalysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9911775987725356
137304,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    deleteConnectionDependency(analysis);
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterCompA.setDirty(false);
  dataFilterCompB.setDirty(false);
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysis.getContext().setConnection(tdDataProvider);
    analysis.getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysis,tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysis.getFileName());
    }
  }
 else {
    analysis.getContext().setConnection(null);
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysis);
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysis.getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysis.getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterCompA.setDirty(false);
  dataFilterCompB.setDirty(false);
}",0.9875311720698254
137305,"@Override public void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    deleteConnectionDependency(analysis);
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysisHandler.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysisHandler.getName()));
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","@Override public void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    analysis.getContext().setConnection(null);
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysisHandler.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysisHandler.getName()));
    this.nameText.setText(analysisHandler.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9815754339118824
137306,"@Override protected ReturnCode removeDependencies(Item item){
  ReturnCode rc=new ReturnCode();
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  Analysis analysis=anaItem.getAnalysis();
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(anaItem.getProperty());
  List<ModelElement> getClientDepListByResultList=getClientDepListByResult(analysis);
  for (  Property currentClient : clintDependency) {
    ModelElement modelElement=PropertyHelper.getModelElement(currentClient);
    if (!getClientDepListByResultList.contains(modelElement)) {
      boolean isSuccess=DependenciesHandler.getInstance().removeDependenciesBetweenModel(analysis,modelElement);
      if (isSuccess) {
        try {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(modelElement.eResource());
        }
 catch (        PersistenceException e) {
          log.error(e,e);
          rc.setOk(false);
          rc.setMessage(e.getMessage());
        }
      }
 else {
        rc.setOk(false);
        rc.setMessage(Messages.getString(""String_Node_Str"",analysis.getName(),modelElement.getName()));
      }
    }
  }
  return rc;
}","@Override protected ReturnCode removeDependencies(Item item){
  ReturnCode rc=new ReturnCode();
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  Analysis analysis=anaItem.getAnalysis();
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(anaItem.getProperty());
  List<ModelElement> clientDepListByResultList=getClientDepListByResult(analysis);
  for (  Property currentClient : clintDependency) {
    ModelElement modelElement=PropertyHelper.getModelElement(currentClient);
    if (!clientDepListByResultList.contains(modelElement)) {
      boolean isSuccess=DependenciesHandler.getInstance().removeDependenciesBetweenModel(analysis,modelElement);
      if (isSuccess) {
        try {
          ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().saveResource(modelElement.eResource());
        }
 catch (        PersistenceException e) {
          log.error(e,e);
          rc.setOk(false);
          rc.setMessage(e.getMessage());
        }
      }
 else {
        rc.setOk(false);
        rc.setMessage(Messages.getString(""String_Node_Str"",analysis.getName(),modelElement.getName()));
      }
    }
  }
  return rc;
}",0.9958368026644464
137307,"/** 
 * get Client Dependency List.
 * @param Analysis the analysis which we want to save
 * @return The list all of client dependency(Pattern UDI Connection DQRule)
 */
private List<ModelElement> getClientDepListByResult(Analysis analysis){
  List<ModelElement> clientDependencyList=new ArrayList<ModelElement>();
  DataManager connection=analysis.getContext().getConnection();
  clientDependencyList.addAll(AnalysisHelper.getUserDefinedIndicators(analysis));
  clientDependencyList.addAll(AnalysisHelper.getPatterns(analysis));
  if (connection != null) {
    clientDependencyList.add(connection);
  }
  return clientDependencyList;
}","/** 
 * get Client Dependency List.
 * @param Analysis the analysis which we want to save
 * @return The list all of client dependency(Pattern UDI Connection DQRule)
 */
private List<ModelElement> getClientDepListByResult(Analysis analysis){
  List<ModelElement> clientDependencyList=new ArrayList<ModelElement>();
  DataManager connection=analysis.getContext().getConnection();
  if (connection != null) {
    clientDependencyList.addAll(AnalysisHelper.getUserDefinedIndicators(analysis));
    clientDependencyList.addAll(AnalysisHelper.getPatterns(analysis));
    clientDependencyList.add(connection);
  }
  return clientDependencyList;
}",0.7429467084639498
137308,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysisItem.getAnalysis().getParameters().getDataFilter()) {
    domain.setName(this.analysisItem.getAnalysis().getName());
  }
  IRepositoryViewObject reposObject=null;
  Connection tdProvider=null;
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<RepositoryNode> repositoryNodeList=treeViewer.getColumnSetMultiValueList();
  if (repositoryNodeList != null && repositoryNodeList.size() != 0) {
    reposObject=repositoryNodeList.get(0).getObject();
    tdProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnLst=new ArrayList<TdColumn>();
    for (    RepositoryNode repNode : repositoryNodeList) {
      columnLst.add((TdColumn)((MetadataColumnRepositoryObject)repNode.getObject()).getTdColumn());
    }
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnLst);
    correlationAnalysisHandler.addIndicator(columnLst,columnSetMultiIndicator);
  }
 else {
    deleteConnectionDependency(analysisItem);
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ColumnSetMultiValueIndicator columnSetMultiValueIndicator=null;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createCountAvgNullIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
    fillSimpleIndicators(columnSetMultiValueIndicator);
    analysis.getResults().getIndicators().add(columnSetMultiValueIndicator);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysis.getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysisItem.getAnalysis().getParameters().getDataFilter()) {
    domain.setName(this.analysisItem.getAnalysis().getName());
  }
  IRepositoryViewObject reposObject=null;
  Connection tdProvider=null;
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<RepositoryNode> repositoryNodeList=treeViewer.getColumnSetMultiValueList();
  if (repositoryNodeList != null && repositoryNodeList.size() != 0) {
    reposObject=repositoryNodeList.get(0).getObject();
    tdProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnLst=new ArrayList<TdColumn>();
    for (    RepositoryNode repNode : repositoryNodeList) {
      columnLst.add((TdColumn)((MetadataColumnRepositoryObject)repNode.getObject()).getTdColumn());
    }
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnLst);
    correlationAnalysisHandler.addIndicator(columnLst,columnSetMultiIndicator);
  }
 else {
    analysis.getContext().setConnection(null);
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ColumnSetMultiValueIndicator columnSetMultiValueIndicator=null;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createCountAvgNullIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
    fillSimpleIndicators(columnSetMultiValueIndicator);
    analysis.getResults().getIndicators().add(columnSetMultiValueIndicator);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysis.getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.984983843375784
137309,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysisItem.getAnalysis().getParameters().getDataFilter()) {
    domain.setName(this.analysisItem.getAnalysis().getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysisItem.getAnalysis());
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysisItem.getAnalysis().getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysisItem.getAnalysis().getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysisItem.getAnalysis(),tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysisItem.getAnalysis().getFileName());
    }
  }
 else {
    deleteConnectionDependency(analysisItem);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysisItem.getAnalysis().getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysisItem.getAnalysis().getParameters().getDataFilter()) {
    domain.setName(this.analysisItem.getAnalysis().getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<RepositoryNode> columnListAANode=anaColumnCompareViewer.getColumnListA();
  List<RepositoryNode> columnListBBNode=anaColumnCompareViewer.getColumnListB();
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysisItem.getAnalysis());
  Connection tdDataProvider=null;
  for (int i=0; i < columnListAANode.size(); i++) {
    if (columnListBBNode.size() > i) {
      ColumnDependencyIndicator indicator=ColumnsetFactory.eINSTANCE.createColumnDependencyIndicator();
      TdColumn columnA=(TdColumn)((MetadataColumnRepositoryObject)columnListAANode.get(i).getObject()).getTdColumn();
      TdColumn columnB=(TdColumn)((MetadataColumnRepositoryObject)columnListBBNode.get(i).getObject()).getTdColumn();
      indicator.setColumnA(columnA);
      indicator.setColumnB(columnB);
      indicator.setIndicatorDefinition(DefinitionHandler.getInstance().getFDRuleDefaultIndicatorDefinition());
      analysisItem.getAnalysis().getResults().getIndicators().add(indicator);
      anaBuilder.addElementToAnalyze(columnA,indicator);
      anaBuilder.addElementToAnalyze(columnB,indicator);
    }
  }
  if (columnListAANode.size() > 0) {
    reposObject=columnListAANode.get(0).getObject();
    tdDataProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysisItem.getAnalysis().getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysisItem.getAnalysis(),tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysisItem.getAnalysis().getFileName());
    }
  }
 else {
    analysisItem.getAnalysis().getContext().setConnection(null);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysisItem.getAnalysis().getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9843917040838144
137310,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=this.getCurrentModelElementIndicators();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  for (  Domain domain : this.analysisItem.getAnalysis().getParameters().getDataFilter()) {
    domain.setName(this.analysisItem.getAnalysis().getName());
  }
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  try {
    Integer.valueOf(numberOfConnectionsPerAnalysisText.getText());
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    String originalValue=TaggedValueHelper.getTaggedValue(TdqAnalysisConnectionPool.NUMBER_OF_CONNECTIONS_PER_ANALYSIS,this.analysisItem.getAnalysis().getTaggedValue()).getValue();
    numberOfConnectionsPerAnalysisText.setText(originalValue);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  try {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    maxNumText.setText(String.valueOf(analysis.getParameters().getMaxNumberRows()));
  }
  analysis.getParameters().setMaxNumberRows(analysis.getParameters().getMaxNumberRows());
  analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    deleteConnectionDependency(analysisItem);
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysisHandler.getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=this.getCurrentModelElementIndicators();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  for (  Domain domain : this.analysisItem.getAnalysis().getParameters().getDataFilter()) {
    domain.setName(this.analysisItem.getAnalysis().getName());
  }
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  try {
    Integer.valueOf(numberOfConnectionsPerAnalysisText.getText());
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    String originalValue=TaggedValueHelper.getTaggedValue(TdqAnalysisConnectionPool.NUMBER_OF_CONNECTIONS_PER_ANALYSIS,this.analysisItem.getAnalysis().getTaggedValue()).getValue();
    numberOfConnectionsPerAnalysisText.setText(originalValue);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  try {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    maxNumText.setText(String.valueOf(analysis.getParameters().getMaxNumberRows()));
  }
  analysis.getParameters().setMaxNumberRows(analysis.getParameters().getMaxNumberRows());
  analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    analysis.getContext().setConnection(null);
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysisHandler.getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.8880174291938998
137311,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  Analysis ana=analysisItem.getAnalysis();
  for (  Domain domain : ana.getParameters().getDataFilter()) {
    domain.setName(ana.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  analysis.getParameters().setMaxNumberRows(Integer.valueOf(maxNumText.getText()));
  simpleStatIndicator.setMustStoreRow(drillDownCheck.getSelection());
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      if (rd instanceof MDMXmlElementRepNode) {
        columnList.add(((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType());
      }
 else {
        columnList.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
      }
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            IRepositoryViewObject obj=modelElementInd.getModelElementRepositoryNode().getObject();
            ModelElement analyzedElt=obj instanceof MetadataColumnRepositoryObject ? ((MetadataColumnRepositoryObject)obj).getTdColumn() : ((MetadataXmlElementTypeRepositoryObject)obj).getModelElement();
            ind.setAnalyzedElement(analyzedElt);
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    deleteConnectionDependency(analysisItem);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(columnSetAnalysisHandler.getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  Analysis ana=analysisItem.getAnalysis();
  for (  Domain domain : ana.getParameters().getDataFilter()) {
    domain.setName(ana.getName());
  }
  IRepositoryViewObject reposObject=null;
  columnSetAnalysisHandler.clearAnalysis();
  simpleStatIndicator.getAnalyzedColumns().clear();
  allMatchIndicator.getAnalyzedColumns().clear();
  Analysis analysis=columnSetAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  analysis.getParameters().setMaxNumberRows(Integer.valueOf(maxNumText.getText()));
  simpleStatIndicator.setMustStoreRow(drillDownCheck.getSelection());
  columnSetAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<IRepositoryNode> repositoryNodes=treeViewer.getColumnSetMultiValueList();
  Connection tdProvider=null;
  if (repositoryNodes != null && repositoryNodes.size() != 0) {
    ConnectionItem item=(ConnectionItem)repositoryNodes.get(0).getObject().getProperty().getItem();
    tdProvider=item.getConnection();
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    List<ModelElement> columnList=new ArrayList<ModelElement>();
    for (    IRepositoryNode rd : repositoryNodes) {
      reposObject=rd.getObject();
      if (rd instanceof MDMXmlElementRepNode) {
        columnList.add(((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType());
      }
 else {
        columnList.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
      }
    }
    simpleStatIndicator.getAnalyzedColumns().addAll(columnList);
    columnSetAnalysisHandler.addIndicator(columnList,simpleStatIndicator);
    allMatchIndicator.getCompositeRegexMatchingIndicators().clear();
    ModelElementIndicator[] modelElementIndicator=treeViewer.getModelElementIndicator();
    if (modelElementIndicator != null) {
      for (      ModelElementIndicator modelElementInd : modelElementIndicator) {
        Indicator[] inds=modelElementInd.getPatternIndicators();
        for (        Indicator ind : inds) {
          if (ind instanceof RegexpMatchingIndicator) {
            IRepositoryViewObject obj=modelElementInd.getModelElementRepositoryNode().getObject();
            ModelElement analyzedElt=obj instanceof MetadataColumnRepositoryObject ? ((MetadataColumnRepositoryObject)obj).getTdColumn() : ((MetadataXmlElementTypeRepositoryObject)obj).getModelElement();
            ind.setAnalyzedElement(analyzedElt);
            allMatchIndicator.getCompositeRegexMatchingIndicators().add((RegexpMatchingIndicator)ind);
          }
        }
      }
    }
    if (allMatchIndicator.getCompositeRegexMatchingIndicators().size() > 0) {
      allMatchIndicator.getAnalyzedColumns().addAll(columnList);
      columnSetAnalysisHandler.addIndicator(columnList,allMatchIndicator);
    }
  }
 else {
    analysis.getContext().setConnection(null);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(columnSetAnalysisHandler.getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9893694480850443
137312,"@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysisItem.getAnalysis().getParameters().getDataFilter()) {
    domain.setName(this.analysisItem.getAnalysis().getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysisItem.getAnalysis().getContext().setConnection(tdDataProvider);
    analysisItem.getAnalysis().getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysisItem.getAnalysis(),tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysisItem.getAnalysis().getFileName());
    }
  }
 else {
    deleteConnectionDependency(analysisItem);
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysisItem.getAnalysis());
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysisItem.getAnalysis().getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysisItem.getAnalysis().getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysisItem.getAnalysis().getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterCompA.setDirty(false);
  dataFilterCompB.setDirty(false);
}","@Override protected void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysisItem.getAnalysis().getParameters().getDataFilter()) {
    domain.setName(this.analysisItem.getAnalysis().getName());
  }
  IRepositoryViewObject reposObject=null;
  getAnalysisHandler().clearAnalysis();
  List<ModelElement> analysedElements=new ArrayList<ModelElement>();
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorA,anaColumnCompareViewer.getColumnListA(),anaColumnCompareViewer.getColumnListB());
  anaColumnCompareViewer.setColumnABForMatchingIndicator(rowMatchingIndicatorB,anaColumnCompareViewer.getColumnListB(),anaColumnCompareViewer.getColumnListA());
  Connection tdDataProvider=null;
  for (int i=0; i < anaColumnCompareViewer.getColumnListA().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListA().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  for (int i=0; i < anaColumnCompareViewer.getColumnListB().size(); i++) {
    reposObject=anaColumnCompareViewer.getColumnListB().get(i).getObject();
    analysedElements.add(((MetadataColumnRepositoryObject)reposObject).getTdColumn());
  }
  if (analysedElements.size() > 0) {
    tdDataProvider=ConnectionHelper.getTdDataProvider((TdColumn)analysedElements.get(0));
    analysisItem.getAnalysis().getContext().setConnection(tdDataProvider);
    analysisItem.getAnalysis().getContext().setConnection(tdDataProvider);
    TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setDependencyOn(analysisItem.getAnalysis(),tdDataProvider);
    if (!rc.isOk()) {
      log.info(""String_Node_Str"" + analysisItem.getAnalysis().getFileName());
    }
  }
 else {
    analysisItem.getAnalysis().getContext().setConnection(null);
  }
  AnalysisBuilder anaBuilder=new AnalysisBuilder();
  anaBuilder.setAnalysis(this.analysisItem.getAnalysis());
  if (anaColumnCompareViewer.getCheckComputeButton().getSelection()) {
    analysisItem.getAnalysis().getParameters().getDeactivatedIndicators().add(rowMatchingIndicatorB);
  }
 else {
    analysisItem.getAnalysis().getParameters().getDeactivatedIndicators().clear();
  }
  anaBuilder.addElementsToAnalyze(analysedElements.toArray(new ModelElement[analysedElements.size()]),new Indicator[]{rowMatchingIndicatorA,rowMatchingIndicatorB});
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysisItem.getAnalysis().getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  anaColumnCompareViewer.setDirty(false);
  dataFilterCompA.setDirty(false);
  dataFilterCompB.setDirty(false);
}",0.9866226864577606
137313,"@Override public void saveAnalysis() throws DataprofilerCoreException {
  Analysis ana=this.analysisItem.getAnalysis();
  for (  Domain domain : ana.getParameters().getDataFilter()) {
    domain.setName(ana.getName());
  }
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    deleteConnectionDependency(analysisItem);
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysisHandler.getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","@Override public void saveAnalysis() throws DataprofilerCoreException {
  Analysis ana=this.analysisItem.getAnalysis();
  for (  Domain domain : ana.getParameters().getDataFilter()) {
    domain.setName(ana.getName());
  }
  analysisHandler.clearAnalysis();
  TableIndicator[] tableIndicators=treeViewer.getTableIndicator();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  if (tableIndicators != null && tableIndicators.length != 0) {
    tdProvider=ConnectionHelper.getDataProvider(tableIndicators[0].getColumnSet());
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    TableIndicator tableIndicator : tableIndicators) {
      analysisHandler.addIndicator(tableIndicator.getColumnSet(),tableIndicator.getIndicators());
    }
  }
 else {
    analysis.getContext().setConnection(null);
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysisHandler.getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9742685935847728
137314,"@Override protected void createExtendedControl(Composite container){
}","@Override protected void createExtendedControl(Composite container){
  return;
}",0.9333333333333332
137315,"public void createControl(Composite parent){
  super.createControl(parent);
  pathText.setText(getParameter().getFolderProvider().getFolderURI());
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openFolderSelectionDialog(ResourceManager.getIndicatorFolder());
    }
  }
);
}","@Override public void createControl(Composite parent){
  super.createControl(parent);
  pathText.setText(getParameter().getFolderProvider().getFolderURI());
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      openFolderSelectionDialog(ResourceManager.getIndicatorFolder());
    }
  }
);
}",0.9859154929577464
137316,"public static boolean compareDbmsLanguage(String lang1,String lang2){
  if (lang1 == null || lang2 == null) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && !StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (!StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(StringUtils.upperCase(lang2),lang1)) {
    return true;
  }
  if (lang1.startsWith(DbmsLanguage.DB2)) {
    if (StringUtils.contains(lang2,DbmsLanguage.AS400)) {
      return false;
    }
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
 else   if (lang1.startsWith(DbmsLanguage.INFOMIX)) {
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
  if (StringUtils.contains(lang1,DbmsLanguage.VERTICA) && StringUtils.contains(lang2,DbmsLanguage.VERTICA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.NETEZZA) && StringUtils.contains(lang2,DbmsLanguage.NETEZZA)) {
    return true;
  }
  return StringUtils.equalsIgnoreCase(lang1,lang2);
}","public static boolean compareDbmsLanguage(String lang1,String lang2){
  if (lang1 == null || lang2 == null) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && !StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (!StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(StringUtils.upperCase(lang2),lang1)) {
    return true;
  }
  if (lang1.startsWith(DbmsLanguage.DB2)) {
    if (StringUtils.contains(lang2,DbmsLanguage.AS400)) {
      return false;
    }
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
 else   if (lang1.startsWith(DbmsLanguage.INFOMIX)) {
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
  if (StringUtils.contains(lang1,DbmsLanguage.VERTICA) && StringUtils.contains(lang2,DbmsLanguage.VERTICA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.NETEZZA) && StringUtils.contains(lang2,DbmsLanguage.NETEZZA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.HIVE) && StringUtils.contains(lang2,DbmsLanguage.HIVE)) {
    return true;
  }
  return StringUtils.contains(StringUtils.upperCase(lang1),StringUtils.upperCase(lang2)) || StringUtils.contains(StringUtils.upperCase(lang2),StringUtils.upperCase(lang1));
}",0.9001256281407035
137317,"public static boolean compareDbmsLanguage(String lang1,String lang2){
  if (lang1 == null || lang2 == null) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && !StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (!StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(StringUtils.upperCase(lang2),lang1)) {
    return true;
  }
  if (lang1.startsWith(DbmsLanguage.DB2)) {
    if (StringUtils.contains(lang2,DbmsLanguage.AS400)) {
      return false;
    }
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
 else   if (lang1.startsWith(DbmsLanguage.INFOMIX)) {
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
  if (StringUtils.contains(lang1,DbmsLanguage.VERTICA) && StringUtils.contains(lang2,DbmsLanguage.VERTICA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.NETEZZA) && StringUtils.contains(lang2,DbmsLanguage.NETEZZA)) {
    return true;
  }
  return StringUtils.equalsIgnoreCase(lang1,lang2);
}","public static boolean compareDbmsLanguage(String lang1,String lang2){
  if (lang1 == null || lang2 == null) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && !StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (!StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(lang2,DbmsLanguage.AS400)) {
    return false;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.AS400) && StringUtils.contains(StringUtils.upperCase(lang2),lang1)) {
    return true;
  }
  if (lang1.startsWith(DbmsLanguage.DB2)) {
    if (StringUtils.contains(lang2,DbmsLanguage.AS400)) {
      return false;
    }
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
 else   if (lang1.startsWith(DbmsLanguage.INFOMIX)) {
    return StringUtils.upperCase(lang1).startsWith(StringUtils.upperCase(lang2)) || StringUtils.upperCase(lang2).startsWith(StringUtils.upperCase(lang1));
  }
  if (StringUtils.contains(lang1,DbmsLanguage.VERTICA) && StringUtils.contains(lang2,DbmsLanguage.VERTICA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.NETEZZA) && StringUtils.contains(lang2,DbmsLanguage.NETEZZA)) {
    return true;
  }
  if (StringUtils.contains(lang1,DbmsLanguage.HIVE) && StringUtils.contains(lang2,DbmsLanguage.HIVE)) {
    return true;
  }
  return StringUtils.contains(StringUtils.upperCase(lang1),StringUtils.upperCase(lang2)) || StringUtils.contains(StringUtils.upperCase(lang2),StringUtils.upperCase(lang1));
}",0.9001256281407035
137318,"/** 
 * DOC klliu Comment method ""displayTableAndViewComp"".
 * @param schemaIndicator
 * @param parentNode
 */
protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator,final IRepositoryNode parentNode){
  tableAndViewComposite.setVisible(true);
  EList<TableIndicator> indicatorTableList=schemaIndicator.getTableIndicators();
  List<OverviewIndUIElement> tableElements=wapperInput(indicatorTableList,parentNode);
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        runMenu(cursor,Messages.getString(""String_Node_Str""));
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        runMenu(cursor,Messages.getString(""String_Node_Str""));
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        OverviewIndUIElement data=(OverviewIndUIElement)tableItem.getData();
        runTableAnalysis(data);
      }
    }
);
    cursor.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        int column=cursor.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursor.setMenu(menu2);
          menu2.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
    final Menu menuForView=new Menu(tableCatalogOrSchemaView);
    MenuItem tableAnalysisitemForView=new MenuItem(menuForView,SWT.PUSH);
    tableAnalysisitemForView.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitemForView.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    final TableCursor cursorForView=new TableCursor(tableCatalogOrSchemaView,SWT.NONE);
    cursorForView.setBackground(tableCatalogOrSchemaView.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursorForView.setForeground(tableCatalogOrSchemaView.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursorForView.setLayout(new FillLayout());
    cursorForView.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        int column=cursorForView.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursorForView.setMenu(menuForView);
          menuForView.setVisible(true);
        }
 else {
          cursorForView.setMenu(null);
        }
      }
    }
);
    tableAnalysisitemForView.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursorForView.getRow();
        ViewIndicator viewIndicator=(ViewIndicator)tableItem.getData();
        runTableAnalysis(viewIndicator.getTableName());
      }
    }
);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(tableElements);
  List<ViewIndicator> indicatorViewList=schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}","/** 
 * DOC klliu Comment method ""displayTableAndViewComp"".
 * @param schemaIndicator
 * @param parentNode
 */
protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator,final IRepositoryNode parentNode){
  tableAndViewComposite.setVisible(true);
  EList<TableIndicator> indicatorTableList=schemaIndicator.getTableIndicators();
  List<OverviewIndUIElement> tableElements=wapperInput(indicatorTableList,parentNode);
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        runMenu(cursor,Messages.getString(""String_Node_Str""));
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        runMenu(cursor,Messages.getString(""String_Node_Str""));
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        OverviewIndUIElement data=(OverviewIndUIElement)tableItem.getData();
        runTableAnalysis(data);
      }
    }
);
    cursor.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        boolean isHive=false;
        if (tdDataProvider instanceof DatabaseConnection) {
          isHive=EDatabaseTypeName.HIVE.getXmlName().equals(((DatabaseConnection)tdDataProvider).getDatabaseType());
        }
        int column=cursor.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursor.setMenu(menu2);
          menu2.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEXES) {
          if (!isHive) {
            cursor.setMenu(menu1);
            menu1.setVisible(true);
          }
        }
 else         if (column == VIEW_COLUMN_INDEX) {
          if (!isHive) {
            cursor.setMenu(menu);
            menu.setVisible(true);
          }
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
    final Menu menuForView=new Menu(tableCatalogOrSchemaView);
    MenuItem tableAnalysisitemForView=new MenuItem(menuForView,SWT.PUSH);
    tableAnalysisitemForView.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitemForView.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    final TableCursor cursorForView=new TableCursor(tableCatalogOrSchemaView,SWT.NONE);
    cursorForView.setBackground(tableCatalogOrSchemaView.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursorForView.setForeground(tableCatalogOrSchemaView.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursorForView.setLayout(new FillLayout());
    cursorForView.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        int column=cursorForView.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursorForView.setMenu(menuForView);
          menuForView.setVisible(true);
        }
 else {
          cursorForView.setMenu(null);
        }
      }
    }
);
    tableAnalysisitemForView.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursorForView.getRow();
        ViewIndicator viewIndicator=(ViewIndicator)tableItem.getData();
        runTableAnalysis(viewIndicator.getTableName());
      }
    }
);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(tableElements);
  List<ViewIndicator> indicatorViewList=schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}",0.9743819553364702
137319,"/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case1: between analysis and report
 */
@Test public void testSaveReportCase1() throws PersistenceException {
  ReportWriter createReportWriter=ElementWriterFactory.getInstance().createReportWriter();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  TdReport createTdReport=ReportsFactory.eINSTANCE.createTdReport();
  TDQReportItem createTDQReportItem=PropertiesFactory.eINSTANCE.createTDQReportItem();
  createTDQReportItem.setReport(createTdReport);
  createTdReport.addAnalysis(createAnalysis);
  Property createReportProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createReportProperty.setLabel(""String_Node_Str"");
  createTDQReportItem.setProperty(createReportProperty);
  ReturnCode save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().get(0).getClient().size());
  createTdReport.removeAnalysis(createAnalysis);
  save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(0,createAnalysis.getSupplierDependency().get(0).getClient().size());
}","/** 
 * Test method for   {@link org.talend.dq.writer.AElementPersistance#save(Item,boolean)}.
 * @throws PersistenceException case1: between analysis and report
 */
@Test public void testSaveReportCase1() throws PersistenceException {
  ReportWriter createReportWriter=ElementWriterFactory.getInstance().createReportWriter();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  createAnalysis.setResults(createAnalysisResult);
  createAnalysis.setName(""String_Node_Str"");
  TDQAnalysisItem createTDQAnalysisItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  createTDQAnalysisItem.setAnalysis(createAnalysis);
  Property createAnalysisProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createAnalysisProperty.setLabel(""String_Node_Str"");
  createTDQAnalysisItem.setProperty(createAnalysisProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQAnalysisItem,Path.EMPTY,false);
  TdReport createTdReport=ReportsFactory.eINSTANCE.createTdReport();
  TDQReportItem createTDQReportItem=PropertiesFactory.eINSTANCE.createTDQReportItem();
  createTDQReportItem.setReport(createTdReport);
  Property createReportProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  createReportProperty.setLabel(""String_Node_Str"");
  createTDQReportItem.setProperty(createReportProperty);
  ProxyRepositoryFactory.getInstance().create(createTDQReportItem,Path.EMPTY,false);
  createTdReport.addAnalysis(createAnalysis);
  ReturnCode save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(1,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().get(0).getClient().size());
  createTdReport.removeAnalysis(createAnalysis);
  save=createReportWriter.save(createTDQReportItem,true);
  Assert.assertTrue(save.isOk());
  Assert.assertEquals(0,createTdReport.getClientDependency().size());
  Assert.assertEquals(1,createAnalysis.getSupplierDependency().size());
  Assert.assertEquals(0,createAnalysis.getSupplierDependency().get(0).getClient().size());
}",0.9609530112508272
137320,"/** 
 * delete the folder under TDQ_Data Profiling/Reports from the project and the disk, don't refresh the parent folder, the caller should refresh the parent by hand to change the svn info.
 * @param folder
 */
private static void deleteFolder(File folder){
  try {
    IFolder reportsFolder=ResourceManager.getReportsFolder();
    IFolder tempFolder=WorkspaceUtils.fileToIFolder(folder);
    if (tempFolder != null && tempFolder.exists()) {
      ProxyRepositoryFactory.getInstance().deleteFolder(ERepositoryObjectType.TDQ_REPORT_ELEMENT,tempFolder.getFullPath().makeRelativeTo(reportsFolder.getFullPath()));
    }
  }
 catch (  PersistenceException e) {
    e.printStackTrace();
  }
  if (folder.exists()) {
    FilesUtils.deleteFile(folder,Boolean.TRUE);
  }
}","/** 
 * delete the folder under TDQ_Data Profiling/Reports from the project and the disk, don't refresh the parent folder, the caller should refresh the parent by hand to change the svn info.
 * @param folder
 */
private static void deleteFolder(File folder){
  try {
    IFolder reportsFolder=ResourceManager.getReportsFolder();
    IFolder tempFolder=WorkspaceUtils.fileToIFolder(folder);
    if (tempFolder != null && tempFolder.exists()) {
      IProject fsProject=ResourceModelUtils.getProject(ProjectManager.getInstance().getCurrentProject());
      String completePath=new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.TDQ_REPORT_ELEMENT)).append(tempFolder.getFullPath().makeRelativeTo(reportsFolder.getFullPath())).toString();
      IFolder deleteFolder=ResourceUtils.getFolder(fsProject,completePath,true);
      for (      IResource subResource : deleteFolder.members()) {
        if (subResource.getType() == IResource.FILE) {
          subResource.delete(true,null);
        }
      }
      deleteFolder.delete(true,null);
    }
    if (folder.exists()) {
      FilesUtils.deleteFile(folder,Boolean.TRUE);
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
catch (  CoreException e) {
    log.error(e,e);
  }
}",0.5701581027667985
137321,"/** 
 * Test method for  {@link org.talend.cwm.dependencies.DependenciesHandler#getClintDependency(org.talend.core.model.properties.Property)}.
 */
@Test public void testGetClintDependencyProperty(){
  Property countIndicatorProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  TDQIndicatorDefinitionItem countIndicatorItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  countIndicatorProperty.setItem(countIndicatorItem);
  countIndicatorItem.setProperty(countIndicatorProperty);
  Property anaProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  TDQAnalysisItem createItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  CountsIndicator createCountsIndicator=IndicatorsFactory.eINSTANCE.createCountsIndicator();
  BlankCountIndicator createBlankCountIndicator=IndicatorsFactory.eINSTANCE.createBlankCountIndicator();
  IndicatorDefinition createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  createCountsIndicator.setIndicatorDefinition(createIndicatorDefinition);
  countIndicatorItem.setIndicatorDefinition(createIndicatorDefinition);
  createBlankCountIndicator.setIndicatorDefinition(createIndicatorDefinition);
  createCountsIndicator.getAllChildIndicators().add(createBlankCountIndicator);
  createAnalysisResult.getIndicators().add(createCountsIndicator);
  CompositeIndicator createCompositeIndicator=IndicatorsFactory.eINSTANCE.createTextIndicator();
  createAnalysisResult.getIndicators().add(createCompositeIndicator);
  createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  createCompositeIndicator.setIndicatorDefinition(createIndicatorDefinition);
  createAnalysis.setResults(createAnalysisResult);
  createItem.setAnalysis(createAnalysis);
  anaProperty.setItem(createItem);
  createItem.setProperty(anaProperty);
  PowerMockito.mockStatic(PropertyHelper.class);
  Mockito.when(PropertyHelper.getModelElement(anaProperty)).thenReturn(createAnalysis);
  Mockito.when(PropertyHelper.getProperty(createCountsIndicator.getIndicatorDefinition())).thenReturn(countIndicatorProperty);
  PowerMockito.mockStatic(ModelElementHelper.class);
  ModelElementMatcher modelElementMatcher=new ModelElementMatcher();
  Mockito.when(ModelElementHelper.compareUUID(Mockito.argThat(modelElementMatcher),Mockito.argThat(modelElementMatcher))).thenReturn(modelElementMatcher.equals(modelElementMatcher));
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(anaProperty);
  assertTrue(clintDependency.size() == 1);
  assertTrue(clintDependency.get(0).equals(countIndicatorProperty));
}","/** 
 * Test method for  {@link org.talend.cwm.dependencies.DependenciesHandler#getClintDependency(org.talend.core.model.properties.Property)}.
 */
@Test public void testGetClintDependencyProperty(){
  Property countIndicatorProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  TDQIndicatorDefinitionItem countIndicatorItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  countIndicatorProperty.setItem(countIndicatorItem);
  countIndicatorItem.setProperty(countIndicatorProperty);
  Property anaProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  TDQAnalysisItem createItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  CountsIndicator createCountsIndicator=IndicatorsFactory.eINSTANCE.createCountsIndicator();
  BlankCountIndicator createBlankCountIndicator=IndicatorsFactory.eINSTANCE.createBlankCountIndicator();
  IndicatorDefinition createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  createCountsIndicator.setIndicatorDefinition(createIndicatorDefinition);
  countIndicatorItem.setIndicatorDefinition(createIndicatorDefinition);
  createBlankCountIndicator.setIndicatorDefinition(createIndicatorDefinition);
  createCountsIndicator.getAllChildIndicators().add(createBlankCountIndicator);
  createAnalysisResult.getIndicators().add(createCountsIndicator);
  CompositeIndicator createCompositeIndicator=IndicatorsFactory.eINSTANCE.createTextIndicator();
  createAnalysisResult.getIndicators().add(createCompositeIndicator);
  createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  createCompositeIndicator.setIndicatorDefinition(createIndicatorDefinition);
  createAnalysis.setResults(createAnalysisResult);
  createItem.setAnalysis(createAnalysis);
  anaProperty.setItem(createItem);
  createItem.setProperty(anaProperty);
  PowerMockito.mockStatic(PropertyHelper.class);
  Mockito.when(PropertyHelper.getModelElement(anaProperty)).thenReturn(createAnalysis);
  Mockito.when(PropertyHelper.getProperty(createCountsIndicator.getIndicatorDefinition())).thenReturn(countIndicatorProperty);
  Mockito.when(PropertyHelper.getProperty(createAnalysis)).thenReturn(anaProperty);
  PowerMockito.mockStatic(ModelElementHelper.class);
  ModelElementMatcher modelElementMatcher=new ModelElementMatcher();
  Mockito.when(ModelElementHelper.compareUUID(Mockito.argThat(modelElementMatcher),Mockito.argThat(modelElementMatcher))).thenReturn(modelElementMatcher.equals(modelElementMatcher));
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependencyForExport(createAnalysis);
  Assert.assertEquals(1,clintDependency.size());
  Assert.assertEquals(countIndicatorProperty,clintDependency.get(0));
}",0.954427308958586
137322,"/** 
 * Test method for  {@link org.talend.cwm.dependencies.DependenciesHandler#removeDependenciesBetweenModel(orgomg.cwm.objectmodel.core.ModelElement,orgomg.cwm.objectmodel.core.ModelElement)}.
 */
@Test public void testRemoveDependenciesBetweenModel(){
  ModelElement ana=AnalysisHelper.createAnalysis(""String_Node_Str"");
  ModelElement conn=ConnectionHelper.createDatabaseConnection(""String_Node_Str"");
  EList<Dependency> clientDependencyFirst=ana.getClientDependency();
  assertEquals(0,clientDependencyFirst.size());
  TypedReturnCode<Dependency> setUsageDependencyOn=DependenciesHandler.getInstance().setUsageDependencyOn(ana,conn);
  assertEquals(1,clientDependencyFirst.size());
  EList<ModelElement> supplier=clientDependencyFirst.get(0).getSupplier();
  assertEquals(1,supplier.size());
  assertEquals(conn,supplier.get(0));
  if (setUsageDependencyOn.isOk()) {
    DependenciesHandler.getInstance().removeDependenciesBetweenModel(conn,ana);
  }
  assertEquals(0,clientDependencyFirst.size());
  EList<Dependency> clientDependencyTwo=conn.getClientDependency();
  assertEquals(0,clientDependencyTwo.size());
  setUsageDependencyOn=DependenciesHandler.getInstance().setUsageDependencyOn(conn,ana);
  assertEquals(1,clientDependencyTwo.size());
  supplier=clientDependencyTwo.get(0).getSupplier();
  assertEquals(1,supplier.size());
  assertEquals(ana,supplier.get(0));
  if (setUsageDependencyOn.isOk()) {
    DependenciesHandler.getInstance().removeDependenciesBetweenModel(ana,conn);
  }
  assertEquals(0,clientDependencyTwo.size());
}","/** 
 * Test method for  {@link org.talend.cwm.dependencies.DependenciesHandler#removeDependenciesBetweenModel(orgomg.cwm.objectmodel.core.ModelElement,orgomg.cwm.objectmodel.core.ModelElement)}.
 */
@Test public void testRemoveDependenciesBetweenModel(){
  ModelElement ana=AnalysisHelper.createAnalysis(""String_Node_Str"");
  ModelElement conn=ConnectionHelper.createDatabaseConnection(""String_Node_Str"");
  EList<Dependency> clientDependencyFirst=ana.getClientDependency();
  assertEquals(0,clientDependencyFirst.size());
  TypedReturnCode<Dependency> setUsageDependencyOn=DependenciesHandler.getInstance().setUsageDependencyOn(ana,conn);
  assertEquals(1,clientDependencyFirst.size());
  EList<ModelElement> supplier=clientDependencyFirst.get(0).getSupplier();
  assertEquals(1,supplier.size());
  assertEquals(conn,supplier.get(0));
  if (setUsageDependencyOn.isOk()) {
    DependenciesHandler.getInstance().removeDependenciesBetweenModel(ana,conn);
  }
  assertEquals(0,clientDependencyFirst.size());
  EList<Dependency> clientDependencyTwo=conn.getClientDependency();
  assertEquals(0,clientDependencyTwo.size());
  setUsageDependencyOn=DependenciesHandler.getInstance().setUsageDependencyOn(conn,ana);
  assertEquals(1,clientDependencyTwo.size());
  supplier=clientDependencyTwo.get(0).getSupplier();
  assertEquals(1,supplier.size());
  assertEquals(ana,supplier.get(0));
  if (setUsageDependencyOn.isOk()) {
    DependenciesHandler.getInstance().removeDependenciesBetweenModel(ana,conn);
  }
  assertEquals(0,clientDependencyTwo.size());
}",0.9954780361757106
137323,"/** 
 * Save analysis item and update the dependencies(optional). <B>To update dependencies of the analysis the #careDependency must be set as TRUE.</B>
 * @see org.talend.dq.writer.AElementPersistance#save(org.talend.core.model.properties.Item,boolean[])
 */
@Override public ReturnCode save(final Item item,final boolean careDependency){
  ReturnCode rc=new ReturnCode();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
      TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
      Analysis analysis=anaItem.getAnalysis();
      if (careDependency) {
        saveWithDependencies(anaItem,analysis);
      }
 else {
        saveWithoutDependencies(anaItem,analysis);
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
  try {
    repositoryWorkUnit.throwPersistenceExceptionIfAny();
  }
 catch (  PersistenceException e) {
    log.error(e,e);
    rc.setOk(Boolean.FALSE);
    rc.setMessage(e.getMessage());
  }
  return rc;
}","/** 
 * Save analysis item and update the dependencies(optional). <B>To update dependencies of the analysis the #careDependency must be set as TRUE.</B>
 * @see org.talend.dq.writer.AElementPersistance#save(org.talend.core.model.properties.Item,boolean[])
 */
@Override public ReturnCode save(Item item,boolean careDependency){
  TDQAnalysisItem anaItem=(TDQAnalysisItem)item;
  Analysis analysis=anaItem.getAnalysis();
  return careDependency ? saveWithDependencies(anaItem,analysis) : saveWithoutDependencies(anaItem,analysis);
}",0.5481393975191967
137324,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=this.getCurrentModelElementIndicators();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  for (  Domain domain : this.analysisItem.getAnalysis().getParameters().getDataFilter()) {
    domain.setName(this.analysisItem.getAnalysis().getName());
  }
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  try {
    Integer.valueOf(numberOfConnectionsPerAnalysisText.getText());
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    String originalValue=TaggedValueHelper.getTaggedValue(TdqAnalysisConnectionPool.NUMBER_OF_CONNECTIONS_PER_ANALYSIS,this.analysisItem.getAnalysis().getTaggedValue()).getValue();
    numberOfConnectionsPerAnalysisText.setText(originalValue);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  try {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    maxNumText.setText(String.valueOf(analysis.getParameters().getMaxNumberRows()));
  }
  analysis.getParameters().setMaxNumberRows(analysis.getParameters().getMaxNumberRows());
  analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    deleteConnectionDependency(analysisItem);
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysisHandler.getName());
  HashSet<ModelElement> removedElements=treeViewer.getRemovedElements();
  if (!removedElements.isEmpty()) {
    DependenciesHandler.getInstance().removeDependenciesBetweenModels(analysis,new ArrayList<ModelElement>(removedElements));
  }
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  if (saved.isOk() && !removedElements.isEmpty()) {
    saveRemovedElements();
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  IRepositoryViewObject reposObject=null;
  analysisHandler.clearAnalysis();
  ModelElementIndicator[] modelElementIndicators=this.getCurrentModelElementIndicators();
  Connection tdProvider=null;
  Analysis analysis=analysisHandler.getAnalysis();
  for (  Domain domain : this.analysisItem.getAnalysis().getParameters().getDataFilter()) {
    domain.setName(this.analysisItem.getAnalysis().getName());
  }
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  try {
    Integer.valueOf(numberOfConnectionsPerAnalysisText.getText());
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    String originalValue=TaggedValueHelper.getTaggedValue(TdqAnalysisConnectionPool.NUMBER_OF_CONNECTIONS_PER_ANALYSIS,this.analysisItem.getAnalysis().getTaggedValue()).getValue();
    numberOfConnectionsPerAnalysisText.setText(originalValue);
  }
  this.saveNumberOfConnectionsPerAnalysis();
  try {
    analysis.getParameters().setMaxNumberRows(Integer.parseInt(maxNumText.getText()));
  }
 catch (  NumberFormatException nfe) {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
    maxNumText.setText(String.valueOf(analysis.getParameters().getMaxNumberRows()));
  }
  analysis.getParameters().setMaxNumberRows(analysis.getParameters().getMaxNumberRows());
  analysis.getParameters().setStoreData(drillDownCheck.getSelection());
  if (modelElementIndicators != null && modelElementIndicators.length != 0) {
    tdProvider=ModelElementIndicatorHelper.getTdDataProvider(modelElementIndicators[0]);
    if (tdProvider.eIsProxy()) {
      tdProvider=(Connection)EObjectHelper.resolveObject(tdProvider);
    }
    analysis.getContext().setConnection(tdProvider);
    for (    ModelElementIndicator modelElementIndicator : modelElementIndicators) {
      reposObject=modelElementIndicator.getModelElementRepositoryNode().getObject();
      ModelElement modelEle=null;
      if (reposObject instanceof MetadataColumnRepositoryObject) {
        modelEle=((MetadataColumnRepositoryObject)reposObject).getTdColumn();
      }
 else       if (reposObject instanceof MetadataXmlElementTypeRepositoryObject) {
        modelEle=((MetadataXmlElementTypeRepositoryObject)reposObject).getTdXmlElementType();
      }
      analysisHandler.addIndicator(modelEle,modelElementIndicator.getIndicators());
      DataminingType type=MetadataHelper.getDataminingType(modelEle);
      if (type == null) {
        type=MetadataHelper.getDefaultDataminingType(modelElementIndicator.getJavaType());
      }
      analysisHandler.setDatamingType(type.getLiteral(),modelEle);
    }
  }
 else {
    deleteConnectionDependency(analysisItem);
  }
  analysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  ReturnCode saved=new ReturnCode(false);
  this.nameText.setText(analysisHandler.getName());
  saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(analysisItem,true);
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9125728559533722
137325,"/** 
 * copy the block/match keys from matchRule to ruleDefinition.
 * @param ruleDefinition: created one
 * @param matchRule: exported one from the match analysis
 */
public void copy(MatchRuleDefinition ruleDefinition,MatchRuleDefinition matchRule){
  ruleDefinition.getBlockKeys().clear();
  if (matchRule.getBlockKeys() != null && matchRule.getBlockKeys().size() > 0) {
    for (    BlockKeyDefinition blockKey : matchRule.getBlockKeys()) {
      BlockKeyDefinition copy=EcoreUtil.copy(blockKey);
      ruleDefinition.getBlockKeys().add(copy);
    }
  }
  ruleDefinition.getMatchRules().clear();
  if (matchRule.getMatchRules() != null && matchRule.getMatchRules().size() > 0) {
    int index=1;
    for (    MatchRule oneMatchRule : matchRule.getMatchRules()) {
      ruleDefinition.getMatchRules().add(createMatchRuleByCopy(oneMatchRule,index++));
    }
  }
}","/** 
 * copy the block/match keys from matchRule to ruleDefinition.
 * @param ruleDefinition: created one
 * @param matchRule: exported one from the match analysis
 */
public void copy(MatchRuleDefinition ruleDefinition,MatchRuleDefinition matchRule){
  ruleDefinition.getBlockKeys().clear();
  if (matchRule.getBlockKeys() != null && matchRule.getBlockKeys().size() > 0) {
    for (    BlockKeyDefinition blockKey : matchRule.getBlockKeys()) {
      BlockKeyDefinition copy=EcoreUtil.copy(blockKey);
      ruleDefinition.getBlockKeys().add(copy);
    }
  }
  ruleDefinition.getMatchRules().clear();
  if (matchRule.getMatchRules() != null && matchRule.getMatchRules().size() > 0) {
    for (    MatchRule oneMatchRule : matchRule.getMatchRules()) {
      ruleDefinition.getMatchRules().add(EObjectHelper.deepCopy(oneMatchRule));
    }
  }
}",0.9648300117233294
137326,"/** 
 * create up/down Buttons.
 * @param parent
 */
public void createMoveButtons(Composite parent){
  Composite buttonsComposite=new Composite(parent,SWT.RIGHT);
  buttonsComposite.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  buttonsComposite.setLayout(new GridLayout(2,true));
  GridData labelGd=new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
  labelGd.horizontalAlignment=SWT.LEFT;
  labelGd.widthHint=30;
  upButton=new Button(buttonsComposite,SWT.NONE);
  upButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  upButton.setImage(ImageLib.getImage(ImageLib.UP_ACTION));
  upButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      moveItemUpOrDown(true);
    }
  }
);
  downButton=new Button(buttonsComposite,SWT.NONE);
  downButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  downButton.setImage(ImageLib.getImage(ImageLib.DOWN_ACTION));
  downButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      moveItemUpOrDown(false);
    }
  }
);
}","/** 
 * create up/down Buttons.
 * @param parent
 */
public void createMoveButtons(Composite parent){
  Composite buttonsComposite=new Composite(parent,SWT.RIGHT);
  buttonsComposite.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,false,false,1,1));
  buttonsComposite.setLayout(new GridLayout(2,true));
  GridData labelGd=new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
  labelGd.horizontalAlignment=SWT.LEFT;
  labelGd.widthHint=30;
  upButton=new Button(buttonsComposite,SWT.NONE);
  upButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  upButton.setImage(ImageLib.getImage(ImageLib.UP_ACTION));
  upButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      moveItemUpOrDown(true);
    }
  }
);
  upButton.setEnabled(false);
  downButton=new Button(buttonsComposite,SWT.NONE);
  downButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  downButton.setImage(ImageLib.getImage(ImageLib.DOWN_ACTION));
  downButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      moveItemUpOrDown(false);
    }
  }
);
  downButton.setEnabled(false);
}",0.9736842105263158
137327,"/** 
 * Move the selected item up or down.
 * @param isMoveUp <code>true</code> if move up, and <code>false</code> if move down
 */
private void moveItemUpOrDown(boolean isMoveUp){
  int selectIndex=tableViewer.getTable().getSelectionIndex();
  int targetIndex=isMoveUp ? selectIndex - 1 : selectIndex + 1;
  boolean isValidatedIndex=isMoveUp ? targetIndex >= 0 : targetIndex < tableViewer.getTable().getItemCount();
  if (selectIndex >= 0 && isValidatedIndex) {
    if (hashtable != null && hashtable.size() > 0) {
      MatchRule oldTarget=hashtable.get(targetIndex);
      MatchRule oldSelect=hashtable.get(selectIndex);
      hashtable.put(selectIndex,oldTarget);
      hashtable.put(targetIndex,oldSelect);
    }
    tempList.clear();
    for (int i=0; i < hashtable.size(); i++) {
      tempList.add(hashtable.get(i));
    }
    tableViewer.setInput(tempList.toArray(new MatchRule[tempList.size()]));
    tableViewer.refresh();
    updateButtonsStatus();
    setDirty(true);
  }
}","/** 
 * Move the selected item up or down.
 * @param isMoveUp <code>true</code> if move up, and <code>false</code> if move down
 */
private void moveItemUpOrDown(boolean isMoveUp){
  int selectIndex=tableViewer.getTable().getSelectionIndex();
  int targetIndex=isMoveUp ? selectIndex - 1 : selectIndex + 1;
  boolean isValidatedIndex=isMoveUp ? targetIndex >= 0 : targetIndex < tableViewer.getTable().getItemCount();
  if (selectIndex >= 0 && isValidatedIndex) {
    if (orderMatchRuleList != null && orderMatchRuleList.size() > 0) {
      OrderMatchRule oldTarget=orderMatchRuleList.get(targetIndex);
      OrderMatchRule oldSelect=orderMatchRuleList.get(selectIndex);
      orderMatchRuleList.set(selectIndex,oldTarget);
      orderMatchRuleList.set(targetIndex,oldSelect);
    }
    tableViewer.setInput(orderMatchRuleList.toArray(new OrderMatchRule[orderMatchRuleList.size()]));
    tableViewer.refresh();
    updateButtonsStatus();
    setDirty(true);
    getButton(OK).setEnabled(true);
  }
}",0.5141129032258065
137328,"@Override public String getText(Object element){
  return ((MatchRule)element).getName();
}","@Override public String getText(Object element){
  return ((OrderMatchRule)element).getName();
}",0.9732620320855616
137329,"@Override protected void okPressed(){
  matchRuleList.clear();
  for (int i=0; i < hashtable.size(); i++) {
    matchRuleList.add(hashtable.get(i));
  }
  super.okPressed();
}","@Override protected void okPressed(){
  resultMatchRuleList.clear();
  for (int i=0; i < orderMatchRuleList.size(); i++) {
    OrderMatchRule orderMatchRule=orderMatchRuleList.get(i);
    MatchRule matchRule=orderMatchRule.getMatchRule();
    matchRule.setName(orderMatchRule.getName());
    resultMatchRuleList.add(matchRule);
  }
  super.okPressed();
}",0.5671077504725898
137330,"/** 
 * EditSortMatchRuleNamesDialog constructor.
 * @param parentShell
 * @param matchRuleList
 */
public EditSortMatchRuleNamesDialog(Shell parentShell,List<MatchRule> matchRuleList){
  super(parentShell);
  setShellStyle(SWT.CLOSE | SWT.RESIZE);
  this.matchRuleList=matchRuleList;
  if (matchRuleList != null) {
    int i=0;
    for (    MatchRule matchRule : matchRuleList) {
      hashtable.put(i++,matchRule);
    }
  }
}","/** 
 * EditSortMatchRuleNamesDialog constructor.
 * @param parentShell
 * @param orderMatchRuleList
 */
public EditSortMatchRuleNamesDialog(Shell parentShell,List<MatchRule> matchRuleList){
  super(parentShell);
  setShellStyle(SWT.CLOSE | SWT.RESIZE);
  for (  MatchRule matchRule : matchRuleList) {
    OrderMatchRule orderMatchRule=new OrderMatchRule();
    orderMatchRule.setName(matchRule.getName());
    orderMatchRule.setMatchRule(matchRule);
    this.orderMatchRuleList.add(orderMatchRule);
  }
}",0.6066452304394426
137331,"@Override protected Object getValue(Object element){
  return ((MatchRule)element).getName();
}","@Override protected Object getValue(Object element){
  return ((OrderMatchRule)element).getName();
}",0.9743589743589745
137332,"/** 
 * create Table Viewer.
 * @param parent
 * @return
 */
private void createTableViewer(Composite parent){
  tableViewer=new TableViewer(parent,SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL);
  Table table_1=tableViewer.getTable();
  GridData gd_table_1=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd_table_1.heightHint=217;
  table_1.setLayoutData(gd_table_1);
  Table table=(Table)tableViewer.getControl();
  TableLayout tableLayout=new TableLayout();
  tableLayout.addColumnData(new ColumnPixelData(350));
  table.setLayout(tableLayout);
  tableViewer.setContentProvider(new IStructuredContentProvider(){
    @Override public Object[] getElements(    Object inputElement){
      return (MatchRule[])inputElement;
    }
    @Override public void dispose(){
    }
    @Override public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  createMatchRuleNameColumn();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  tableViewer.setInput(matchRuleList.toArray(new MatchRule[matchRuleList.size()]));
}","/** 
 * create Table Viewer.
 * @param parent
 * @return
 */
private void createTableViewer(Composite parent){
  tableViewer=new TableViewer(parent,SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL);
  Table table_1=tableViewer.getTable();
  GridData gd_table_1=new GridData(SWT.FILL,SWT.FILL,true,true,1,1);
  gd_table_1.heightHint=217;
  table_1.setLayoutData(gd_table_1);
  Table table=(Table)tableViewer.getControl();
  TableLayout tableLayout=new TableLayout();
  tableLayout.addColumnData(new ColumnPixelData(350));
  table.setLayout(tableLayout);
  tableViewer.setContentProvider(new IStructuredContentProvider(){
    @Override public Object[] getElements(    Object inputElement){
      return (OrderMatchRule[])inputElement;
    }
    @Override public void dispose(){
    }
    @Override public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  createMatchRuleNameColumn();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  tableViewer.setInput(orderMatchRuleList.toArray(new OrderMatchRule[orderMatchRuleList.size()]));
  tableViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    @Override public void selectionChanged(    SelectionChangedEvent event){
      updateButtonsStatus();
    }
  }
);
}",0.9072340425531916
137333,"/** 
 * create Match Rule Name Column.
 */
private void createMatchRuleNameColumn(){
  TableViewerColumn vNameColumn=new TableViewerColumn(tableViewer,SWT.CENTER);
  TableColumn nameColumn=vNameColumn.getColumn();
  nameColumn.setWidth(300);
  nameColumn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  vNameColumn.setLabelProvider(new ColumnLabelProvider(){
    @Override public String getText(    Object element){
      return ((MatchRule)element).getName();
    }
  }
);
  vNameColumn.setEditingSupport(new EditingSupport(tableViewer){
    @Override protected boolean canEdit(    Object element){
      return true;
    }
    @Override protected CellEditor getCellEditor(    Object element){
      return new TextCellEditor((Table)tableViewer.getControl());
    }
    @Override protected Object getValue(    Object element){
      return ((MatchRule)element).getName();
    }
    @Override protected void setValue(    Object element,    Object value){
      if (value != null && !StringUtils.isBlank((String)value)) {
        if (!((MatchRule)element).getName().equals(value)) {
          setDirty(true);
        }
        ((MatchRule)element).setName((String)value);
      }
 else {
        ((MatchRule)element).setName(((MatchRule)element).getName());
      }
      tableViewer.refresh();
    }
  }
);
}","/** 
 * create Match Rule Name Column.
 */
private void createMatchRuleNameColumn(){
  TableViewerColumn vNameColumn=new TableViewerColumn(tableViewer,SWT.CENTER);
  TableColumn nameColumn=vNameColumn.getColumn();
  nameColumn.setWidth(300);
  nameColumn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  vNameColumn.setLabelProvider(new ColumnLabelProvider(){
    @Override public String getText(    Object element){
      return ((OrderMatchRule)element).getName();
    }
  }
);
  vNameColumn.setEditingSupport(new EditingSupport(tableViewer){
    @Override protected boolean canEdit(    Object element){
      return true;
    }
    @Override protected CellEditor getCellEditor(    Object element){
      return new TextCellEditor((Table)tableViewer.getControl());
    }
    @Override protected Object getValue(    Object element){
      return ((OrderMatchRule)element).getName();
    }
    @Override protected void setValue(    Object element,    Object value){
      if (value != null && !StringUtils.isBlank((String)value)) {
        if (!((OrderMatchRule)element).getName().equals(value)) {
          setDirty(true);
          getButton(OK).setEnabled(true);
        }
        ((OrderMatchRule)element).setName((String)value);
      }
 else {
        ((OrderMatchRule)element).setName(((OrderMatchRule)element).getName());
      }
      tableViewer.refresh();
    }
  }
);
}",0.9734708916728076
137334,"@Override public Object[] getElements(Object inputElement){
  return (MatchRule[])inputElement;
}","@Override public Object[] getElements(Object inputElement){
  return (OrderMatchRule[])inputElement;
}",0.9748743718592964
137335,"@Override protected void setValue(Object element,Object value){
  if (value != null && !StringUtils.isBlank((String)value)) {
    if (!((MatchRule)element).getName().equals(value)) {
      setDirty(true);
    }
    ((MatchRule)element).setName((String)value);
  }
 else {
    ((MatchRule)element).setName(((MatchRule)element).getName());
  }
  tableViewer.refresh();
}","@Override protected void setValue(Object element,Object value){
  if (value != null && !StringUtils.isBlank((String)value)) {
    if (!((OrderMatchRule)element).getName().equals(value)) {
      setDirty(true);
      getButton(OK).setEnabled(true);
    }
    ((OrderMatchRule)element).setName((String)value);
  }
 else {
    ((OrderMatchRule)element).setName(((OrderMatchRule)element).getName());
  }
  tableViewer.refresh();
}",0.9269521410579346
137336,"@Override protected Composite createSubContent(Composite sectionClient){
  Composite parent=toolkit.createComposite(sectionClient);
  GridLayout tableLayout=new GridLayout(1,Boolean.TRUE);
  parent.setLayout(tableLayout);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  parent.setLayoutData(gridData);
  ruleFolder=new CTabFolder(parent,SWT.MULTI | SWT.BORDER);
  ruleFolder.setRenderer(new MatchRuleCTabFolderRenderer(ruleFolder));
  ruleFolder.setMaximizeVisible(false);
  ruleFolder.setMinimizeVisible(false);
  ruleFolder.setTabHeight(35);
  ruleFolder.setSimple(false);
  ruleFolder.setDragDetect(true);
  GridData folderData=new GridData(GridData.FILL_BOTH);
  ruleFolder.setLayoutData(folderData);
  ruleFolder.addCTabFolder2Listener(new CTabFolder2Adapter(){
    @Override public void close(    CTabFolderEvent event){
      CTabItem tabItem=(CTabItem)event.item;
      deleteMatchRuleTab(tabItem);
    }
  }
);
  ruleFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      fireSwitchRuleTabEvent();
    }
  }
);
  Composite com=toolkit.createComposite(ruleFolder);
  GridLayout comTableLayout=new GridLayout(2,Boolean.TRUE);
  com.setLayout(comTableLayout);
  Button editButton=new Button(com,SWT.FLAT | SWT.CENTER);
  editButton.setImage(EDIT_IMG);
  editButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  editButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      EditSortMatchRuleNamesDialog dialog=new EditSortMatchRuleNamesDialog(Display.getCurrent().getActiveShell(),getMatchRuleList());
      if (dialog.open() == Window.OK) {
        if (dialog.isDirty()) {
          redrawnSubTableContent();
          listeners.firePropertyChange(MatchAnalysisConstant.ISDIRTY_PROPERTY,true,false);
        }
      }
    }
  }
);
  Button addButton=new Button(com,SWT.FLAT | SWT.CENTER);
  addButton.setImage(ADD_IMG);
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  addButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MatchRule newMatchRule=getNewMatchRule();
      addRuleTab(true,newMatchRule);
      addMatchRuleToAnalysis(newMatchRule);
      listeners.firePropertyChange(MatchAnalysisConstant.ISDIRTY_PROPERTY,true,false);
    }
  }
);
  ruleFolder.setTopRight(com);
  initMatchRuleTabs();
  createGroupQualityThreshold(parent);
  return parent;
}","@Override protected Composite createSubContent(Composite sectionClient){
  Composite parent=toolkit.createComposite(sectionClient);
  GridLayout tableLayout=new GridLayout(1,Boolean.TRUE);
  parent.setLayout(tableLayout);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  parent.setLayoutData(gridData);
  ruleFolder=new CTabFolder(parent,SWT.MULTI | SWT.BORDER);
  ruleFolder.setRenderer(new MatchRuleCTabFolderRenderer(ruleFolder));
  ruleFolder.setMaximizeVisible(false);
  ruleFolder.setMinimizeVisible(false);
  ruleFolder.setTabHeight(35);
  ruleFolder.setSimple(false);
  ruleFolder.setDragDetect(true);
  GridData folderData=new GridData(GridData.FILL_BOTH);
  ruleFolder.setLayoutData(folderData);
  ruleFolder.addCTabFolder2Listener(new CTabFolder2Adapter(){
    @Override public void close(    CTabFolderEvent event){
      CTabItem tabItem=(CTabItem)event.item;
      deleteMatchRuleTab(tabItem);
    }
  }
);
  ruleFolder.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      fireSwitchRuleTabEvent();
    }
  }
);
  Composite com=toolkit.createComposite(ruleFolder);
  GridLayout comTableLayout=new GridLayout(2,Boolean.TRUE);
  com.setLayout(comTableLayout);
  Button editButton=new Button(com,SWT.FLAT | SWT.CENTER);
  editButton.setImage(EDIT_IMG);
  editButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  editButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      List<MatchRule> matchRuleList=getMatchRuleList();
      EditSortMatchRuleNamesDialog dialog=new EditSortMatchRuleNamesDialog(Display.getCurrent().getActiveShell(),matchRuleList);
      if (dialog.open() == Window.OK) {
        matchRuleList.clear();
        matchRuleList.addAll(dialog.getResultMatchRuleList());
        redrawnSubTableContent();
        listeners.firePropertyChange(MatchAnalysisConstant.ISDIRTY_PROPERTY,true,false);
      }
    }
  }
);
  Button addButton=new Button(com,SWT.FLAT | SWT.CENTER);
  addButton.setImage(ADD_IMG);
  addButton.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  addButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MatchRule newMatchRule=getNewMatchRule();
      addRuleTab(true,newMatchRule);
      addMatchRuleToAnalysis(newMatchRule);
      listeners.firePropertyChange(MatchAnalysisConstant.ISDIRTY_PROPERTY,true,false);
    }
  }
);
  ruleFolder.setTopRight(com);
  initMatchRuleTabs();
  createGroupQualityThreshold(parent);
  return parent;
}",0.959037080178606
137337,"/** 
 * Comment method ""removeDependenciesBetweenModel"".
 * @param supplier
 * @param client
 * @return
 */
public boolean removeDependenciesBetweenModel(ModelElement supplier,ModelElement client){
  boolean hasFind=false;
  EList<Dependency> supplierDependencies=supplier.getSupplierDependency();
  Iterator<Dependency> suppiterator=supplierDependencies.iterator();
  while (suppiterator.hasNext()) {
    Dependency supplierDep=suppiterator.next();
    if (supplierDep.getClient().contains(client)) {
      supplierDep.getClient().remove(client);
      hasFind=true;
      break;
    }
  }
  if (!hasFind) {
    EList<Dependency> clientDependency=supplier.getClientDependency();
    Iterator<Dependency> clientiterator=clientDependency.iterator();
    while (clientiterator.hasNext()) {
      Dependency clientDep=clientiterator.next();
      if (clientDep.getSupplier().contains(client)) {
        clientDep.getSupplier().remove(client);
        hasFind=true;
        break;
      }
    }
  }
  return hasFind;
}","/** 
 * Comment method ""removeDependenciesBetweenModel"".
 * @param supplier
 * @param client
 * @return
 */
public boolean removeDependenciesBetweenModel(ModelElement supplier,ModelElement client){
  boolean hasFind=false;
  EList<Dependency> supplierDependencies=supplier.getSupplierDependency();
  Iterator<Dependency> suppiterator=supplierDependencies.iterator();
  while (suppiterator.hasNext()) {
    Dependency supplierDep=suppiterator.next();
    if (supplierDep.getClient().contains(client)) {
      supplierDep.getClient().remove(client);
      hasFind=true;
      break;
    }
  }
  if (!hasFind) {
    EList<Dependency> clientDependency=supplier.getClientDependency();
    Iterator<Dependency> clientiterator=clientDependency.iterator();
    while (clientiterator.hasNext()) {
      Dependency clientDep=clientiterator.next();
      if (clientDep.getSupplier().contains(client)) {
        clientiterator.remove();
        hasFind=true;
        break;
      }
    }
  }
  return hasFind;
}",0.9846000993541976
137338,"/** 
 * @param object
 * @return SupplierDependencygetClintDependency
 */
public List<Property> getClintDependency(ModelElement object){
  List<Property> result=new ArrayList<Property>();
  Property property=PropertyHelper.getProperty(object);
  if (property != null) {
    result=iterateClientDependencies(property);
  }
  return result;
}","/** 
 * @param object
 * @return SupplierDependencygetClintDependency system indicators will not be contain at here.
 */
public List<Property> getClintDependency(ModelElement object){
  List<Property> result=new ArrayList<Property>();
  Property property=PropertyHelper.getProperty(object);
  if (property != null) {
    result=iterateClientDependencies(property);
  }
  return result;
}",0.9353507565337
137339,"/** 
 * Test method for  {@link org.talend.cwm.dependencies.DependenciesHandler#getClintDependency(org.talend.core.model.properties.Property)}.
 */
@Test public void testGetClintDependencyProperty(){
  Property countIndicatorProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  TDQIndicatorDefinitionItem countIndicatorItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  countIndicatorProperty.setItem(countIndicatorItem);
  countIndicatorItem.setProperty(countIndicatorProperty);
  Property anaProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  TDQAnalysisItem createItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  CountsIndicator createCountsIndicator=IndicatorsFactory.eINSTANCE.createCountsIndicator();
  BlankCountIndicator createBlankCountIndicator=IndicatorsFactory.eINSTANCE.createBlankCountIndicator();
  IndicatorDefinition createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  createCountsIndicator.setIndicatorDefinition(createIndicatorDefinition);
  countIndicatorItem.setIndicatorDefinition(createIndicatorDefinition);
  createBlankCountIndicator.setIndicatorDefinition(createIndicatorDefinition);
  createCountsIndicator.getAllChildIndicators().add(createBlankCountIndicator);
  createAnalysisResult.getIndicators().add(createCountsIndicator);
  CompositeIndicator createCompositeIndicator=IndicatorsFactory.eINSTANCE.createTextIndicator();
  createAnalysisResult.getIndicators().add(createCompositeIndicator);
  createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  createCompositeIndicator.setIndicatorDefinition(createIndicatorDefinition);
  createAnalysis.setResults(createAnalysisResult);
  createItem.setAnalysis(createAnalysis);
  anaProperty.setItem(createItem);
  createItem.setProperty(anaProperty);
  PowerMockito.mockStatic(PropertyHelper.class);
  Mockito.when(PropertyHelper.getModelElement(anaProperty)).thenReturn(createAnalysis);
  Mockito.when(PropertyHelper.getProperty(createCountsIndicator.getIndicatorDefinition())).thenReturn(countIndicatorProperty);
  PowerMockito.mockStatic(ModelElementHelper.class);
  ModelElementMatcher modelElementMatcher=new ModelElementMatcher();
  Mockito.when(ModelElementHelper.compareUUID(Mockito.argThat(modelElementMatcher),Mockito.argThat(modelElementMatcher))).thenReturn(modelElementMatcher.equals(modelElementMatcher));
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(anaProperty);
  assertTrue(clintDependency.size() == 1);
  assertTrue(clintDependency.get(0).equals(countIndicatorProperty));
}","/** 
 * Test method for  {@link org.talend.cwm.dependencies.DependenciesHandler#getClintDependency(org.talend.core.model.properties.Property)}.
 */
@Test public void testGetClintDependencyProperty(){
  Property countIndicatorProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  TDQIndicatorDefinitionItem countIndicatorItem=PropertiesFactory.eINSTANCE.createTDQIndicatorDefinitionItem();
  countIndicatorProperty.setItem(countIndicatorItem);
  countIndicatorItem.setProperty(countIndicatorProperty);
  Property anaProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  TDQAnalysisItem createItem=PropertiesFactory.eINSTANCE.createTDQAnalysisItem();
  Analysis createAnalysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisResult createAnalysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  CountsIndicator createCountsIndicator=IndicatorsFactory.eINSTANCE.createCountsIndicator();
  BlankCountIndicator createBlankCountIndicator=IndicatorsFactory.eINSTANCE.createBlankCountIndicator();
  IndicatorDefinition createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  createCountsIndicator.setIndicatorDefinition(createIndicatorDefinition);
  countIndicatorItem.setIndicatorDefinition(createIndicatorDefinition);
  createBlankCountIndicator.setIndicatorDefinition(createIndicatorDefinition);
  createCountsIndicator.getAllChildIndicators().add(createBlankCountIndicator);
  createAnalysisResult.getIndicators().add(createCountsIndicator);
  CompositeIndicator createCompositeIndicator=IndicatorsFactory.eINSTANCE.createTextIndicator();
  createAnalysisResult.getIndicators().add(createCompositeIndicator);
  createIndicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  createCompositeIndicator.setIndicatorDefinition(createIndicatorDefinition);
  createAnalysis.setResults(createAnalysisResult);
  createItem.setAnalysis(createAnalysis);
  anaProperty.setItem(createItem);
  createItem.setProperty(anaProperty);
  PowerMockito.mockStatic(PropertyHelper.class);
  Mockito.when(PropertyHelper.getModelElement(anaProperty)).thenReturn(createAnalysis);
  Mockito.when(PropertyHelper.getProperty(createCountsIndicator.getIndicatorDefinition())).thenReturn(countIndicatorProperty);
  Mockito.when(PropertyHelper.getProperty(createAnalysis)).thenReturn(anaProperty);
  PowerMockito.mockStatic(ModelElementHelper.class);
  ModelElementMatcher modelElementMatcher=new ModelElementMatcher();
  Mockito.when(ModelElementHelper.compareUUID(Mockito.argThat(modelElementMatcher),Mockito.argThat(modelElementMatcher))).thenReturn(modelElementMatcher.equals(modelElementMatcher));
  List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependencyForExport(createAnalysis);
  Assert.assertEquals(1,clintDependency.size());
  Assert.assertEquals(countIndicatorProperty,clintDependency.get(0));
}",0.954427308958586
137340,"@Test public void testRemoveConnDependencyAndSave(){
  TDQAnalysisItem analysisItem=PropertiesFactoryImpl.eINSTANCE.createTDQAnalysisItem();
  Analysis analysis=AnalysisFactory.eINSTANCE.createAnalysis();
  analysis.setName(""String_Node_Str"");
  analysisItem.setAnalysis(analysis);
  AnalysisContext analysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  ConnectionItem createConnectionItem=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createConnectionItem();
  Property property=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  property.setId(EcoreUtil.generateUUID());
  property.setLabel(""String_Node_Str"");
  createConnectionItem.setProperty(property);
  Connection connection=ConnectionFactory.eINSTANCE.createConnection();
  connection.setName(""String_Node_Str"");
  setEResource(null,connection);
  createConnectionItem.setConnection(connection);
  stub(method(PropertyHelper.class,""String_Node_Str"",Connection.class)).toReturn(property);
  ReturnCode rc=new ReturnCode(true);
  DataProviderWriter dp=mock(DataProviderWriter.class);
  when(dp.save(createConnectionItem,false)).thenReturn(rc);
  stub(method(ElementWriterFactory.class,""String_Node_Str"")).toReturn(dp);
  AnalysisWriter aw=mock(AnalysisWriter.class);
  when(aw.save(analysisItem,false)).thenReturn(rc);
  stub(method(ElementWriterFactory.class,""String_Node_Str"")).toReturn(aw);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,connection);
  analysis.setContext(analysisContext);
  analysisContext.setConnection(connection);
  DependenciesHandler.getInstance().removeConnDependencyAndSave(analysisItem);
  Assert.isTrue(analysis.getContext().getConnection() == null);
  Assert.isTrue(analysis.getClientDependency().isEmpty());
}","@Test public void testRemoveConnDependencyAndSave(){
  TDQAnalysisItem analysisItem=PropertiesFactoryImpl.eINSTANCE.createTDQAnalysisItem();
  Analysis analysis=AnalysisFactory.eINSTANCE.createAnalysis();
  analysis.setName(""String_Node_Str"");
  analysisItem.setAnalysis(analysis);
  AnalysisContext analysisContext=AnalysisFactory.eINSTANCE.createAnalysisContext();
  ConnectionItem createConnectionItem=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createConnectionItem();
  Property property=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  property.setId(EcoreUtil.generateUUID());
  property.setLabel(""String_Node_Str"");
  createConnectionItem.setProperty(property);
  Connection connection=ConnectionFactory.eINSTANCE.createConnection();
  connection.setName(""String_Node_Str"");
  setEResource(null,connection);
  createConnectionItem.setConnection(connection);
  stub(method(PropertyHelper.class,""String_Node_Str"",Connection.class)).toReturn(property);
  ReturnCode rc=new ReturnCode(true);
  DataProviderWriter dp=mock(DataProviderWriter.class);
  when(dp.save(createConnectionItem,false)).thenReturn(rc);
  stub(method(ElementWriterFactory.class,""String_Node_Str"")).toReturn(dp);
  AnalysisWriter aw=mock(AnalysisWriter.class);
  when(aw.save(analysisItem,false)).thenReturn(rc);
  stub(method(ElementWriterFactory.class,""String_Node_Str"")).toReturn(aw);
  DependenciesHandler.getInstance().setUsageDependencyOn(analysis,connection);
  analysis.setContext(analysisContext);
  analysisContext.setConnection(connection);
  DependenciesHandler.getInstance().removeConnDependencyAndSave(analysisItem);
  Assert.assertNull(analysis.getContext().getConnection());
  Assert.assertEquals(true,analysis.getClientDependency().isEmpty());
}",0.9823182711198428
137341,"/** 
 * Test method for  {@link org.talend.cwm.dependencies.DependenciesHandler#removeDependenciesBetweenModel(orgomg.cwm.objectmodel.core.ModelElement,orgomg.cwm.objectmodel.core.ModelElement)}.
 */
@Test public void testRemoveDependenciesBetweenModel(){
  ModelElement ana=AnalysisHelper.createAnalysis(""String_Node_Str"");
  ModelElement conn=ConnectionHelper.createDatabaseConnection(""String_Node_Str"");
  EList<Dependency> clientDependencyFirst=ana.getClientDependency();
  assertEquals(0,clientDependencyFirst.size());
  TypedReturnCode<Dependency> setUsageDependencyOn=DependenciesHandler.getInstance().setUsageDependencyOn(ana,conn);
  assertEquals(1,clientDependencyFirst.size());
  EList<ModelElement> supplier=clientDependencyFirst.get(0).getSupplier();
  assertEquals(1,supplier.size());
  assertEquals(conn,supplier.get(0));
  if (setUsageDependencyOn.isOk()) {
    DependenciesHandler.getInstance().removeDependenciesBetweenModel(conn,ana);
  }
  assertEquals(0,clientDependencyFirst.size());
  EList<Dependency> clientDependencyTwo=conn.getClientDependency();
  assertEquals(0,clientDependencyTwo.size());
  setUsageDependencyOn=DependenciesHandler.getInstance().setUsageDependencyOn(conn,ana);
  assertEquals(1,clientDependencyTwo.size());
  supplier=clientDependencyTwo.get(0).getSupplier();
  assertEquals(1,supplier.size());
  assertEquals(ana,supplier.get(0));
  if (setUsageDependencyOn.isOk()) {
    DependenciesHandler.getInstance().removeDependenciesBetweenModel(ana,conn);
  }
  assertEquals(0,clientDependencyTwo.size());
}","/** 
 * Test method for  {@link org.talend.cwm.dependencies.DependenciesHandler#removeDependenciesBetweenModel(orgomg.cwm.objectmodel.core.ModelElement,orgomg.cwm.objectmodel.core.ModelElement)}.
 */
@Test public void testRemoveDependenciesBetweenModel(){
  ModelElement ana=AnalysisHelper.createAnalysis(""String_Node_Str"");
  ModelElement conn=ConnectionHelper.createDatabaseConnection(""String_Node_Str"");
  EList<Dependency> clientDependencyFirst=ana.getClientDependency();
  assertEquals(0,clientDependencyFirst.size());
  TypedReturnCode<Dependency> setUsageDependencyOn=DependenciesHandler.getInstance().setUsageDependencyOn(ana,conn);
  assertEquals(1,clientDependencyFirst.size());
  EList<ModelElement> supplier=clientDependencyFirst.get(0).getSupplier();
  assertEquals(1,supplier.size());
  assertEquals(conn,supplier.get(0));
  if (setUsageDependencyOn.isOk()) {
    DependenciesHandler.getInstance().removeDependenciesBetweenModel(ana,conn);
  }
  assertEquals(0,clientDependencyFirst.size());
  EList<Dependency> clientDependencyTwo=conn.getClientDependency();
  assertEquals(0,clientDependencyTwo.size());
  setUsageDependencyOn=DependenciesHandler.getInstance().setUsageDependencyOn(conn,ana);
  assertEquals(1,clientDependencyTwo.size());
  supplier=clientDependencyTwo.get(0).getSupplier();
  assertEquals(1,supplier.size());
  assertEquals(ana,supplier.get(0));
  if (setUsageDependencyOn.isOk()) {
    DependenciesHandler.getInstance().removeDependenciesBetweenModel(ana,conn);
  }
  assertEquals(0,clientDependencyTwo.size());
}",0.9954780361757106
137342,"@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (SOURCE_FILES.equals(folder.getName()) || TDQ_LIBRARIES.equals(folder.getName())) {
      return true;
    }
 else {
      return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !FilesUtils.isSVNFolder(folder.getName());
    }
  }
  return false;
}","@Override public boolean select(Viewer viewer,Object parentElement,Object element){
  if (element instanceof IFolder) {
    IFolder folder=(IFolder)element;
    if (SOURCE_FILES.equals(folder.getName())) {
      return true;
    }
 else {
      return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !FilesUtils.isSVNFolder(folder.getName());
    }
  }
  return false;
}",0.9490291262135924
137343,"/** 
 * qzhang FolderSelectionDialog constructor comment.
 * @param parent
 * @param labelProvider
 * @param contentProvider
 */
public FolderSelectionDialog(Shell parent,ILabelProvider labelProvider,ITreeContentProvider contentProvider){
  super(parent,labelProvider,contentProvider);
  this.setTitle(DIALOG_TITLE);
  this.setMessage(DIALOG_MESSAGE);
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  this.setInput(rootProject);
  final IFolder defaultValidFolder=rootProject.getFolder(TDQ_LIBRARIES).getFolder(SOURCE_FILES);
  this.setInitialSelection(defaultValidFolder);
  this.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (SOURCE_FILES.equals(folder.getName()) || TDQ_LIBRARIES.equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !FilesUtils.isSVNFolder(folder.getName());
        }
      }
      return false;
    }
  }
);
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      if (selection.length == 1) {
        if (selection[0] instanceof IFolder) {
          selectedFolder=(IFolder)selection[0];
          IPath projectRelativePath=selectedFolder.getProjectRelativePath();
          if (SOURCE_FILES.equals(selectedFolder.getName()) || defaultValidFolder.getFullPath().isPrefixOf(selectedFolder.getFullPath())) {
            return checkFileName(fileNameText.getText());
          }
        }
      }
      return SELECT_FOLDER_ERROR_STATUS;
    }
  }
);
  setComparator(new ResourceComparator(ResourceComparator.NAME));
}","/** 
 * qzhang FolderSelectionDialog constructor comment.
 * @param parent
 * @param labelProvider
 * @param contentProvider
 */
public FolderSelectionDialog(Shell parent,ILabelProvider labelProvider,ITreeContentProvider contentProvider){
  super(parent,labelProvider,contentProvider);
  this.setTitle(DIALOG_TITLE);
  this.setMessage(DIALOG_MESSAGE);
  this.setInput(rootFolder);
  this.setInitialSelection(defaultValidFolder);
  this.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (SOURCE_FILES.equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !FilesUtils.isSVNFolder(folder.getName());
        }
      }
      return false;
    }
  }
);
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      if (selection.length == 1) {
        if (selection[0] instanceof IFolder) {
          selectedFolder=(IFolder)selection[0];
          IPath projectRelativePath=selectedFolder.getProjectRelativePath();
          if (SOURCE_FILES.equals(selectedFolder.getName()) || defaultValidFolder.getFullPath().isPrefixOf(selectedFolder.getFullPath())) {
            return checkFileName(fileNameText.getText());
          }
        }
      }
      return SELECT_FOLDER_ERROR_STATUS;
    }
  }
);
  setComparator(new ResourceComparator(ResourceComparator.NAME));
}",0.7662105889351577
137344,"/** 
 * check File Name.
 * @param String: file name
 */
private Status checkFileName(final String name){
  if (name == null || EMPTY_STR.equals(name.trim())) {
    return EMPTY_NAME_STATUS;
  }
 else {
    if (!WorkspaceUtils.checkNameIsOK(name)) {
      return SPECIAL_CHAR_STATUS;
    }
    if (fileNameExist(WorkspaceUtils.ifolderToFile(selectedFolder),name)) {
      return FILE_EXIST_STATUS;
    }
  }
  return OK_STATUS;
}","/** 
 * check File Name.
 * @param String: file name
 */
private Status checkFileName(final String name){
  if (name == null || EMPTY_STR.equals(name.trim())) {
    return EMPTY_NAME_STATUS;
  }
 else {
    if (!WorkspaceUtils.checkNameIsOK(name)) {
      return SPECIAL_CHAR_STATUS;
    }
    if (fileNameExist(WorkspaceUtils.ifolderToFile(defaultValidFolder),name)) {
      return FILE_EXIST_STATUS;
    }
  }
  return OK_STATUS;
}",0.9791183294663574
137345,"@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<MdmWebserviceConnection> trc=this.getMdmConnection(analysis);
  if (!trc.isOk()) {
    return traceError(Messages.getString(""String_Node_Str"",analysis.getName(),trc.getMessage()));
  }
  MdmWebserviceConnection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    ok=runAnalysisIndicators(connection,elementToIndicator,indicators);
    setRowCountAndNullCount(elementToIndicator);
  }
 catch (  RemoteException e) {
    log.error(e.getMessage(),e);
    this.errorMessage=e.getMessage();
    String unableDirectQueryStr=""String_Node_Str"";
    if (getErrorMessage().contains(unableDirectQueryStr)) {
      String sqlModeUnsupportedStr=Messages.getString(""String_Node_Str"");
      String refactoredErrorMessage=StringUtils.replace(getErrorMessage(),unableDirectQueryStr,sqlModeUnsupportedStr,-1);
      setError(refactoredErrorMessage);
    }
    ok=false;
  }
catch (  ServiceException e) {
    log.error(e.getMessage(),e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
  }
  return ok;
}","@Override protected boolean runAnalysis(Analysis analysis,String sqlStatement){
  boolean ok=true;
  TypedReturnCode<MdmWebserviceConnection> trc=this.getMdmConnection(analysis);
  if (!trc.isOk()) {
    return traceError(Messages.getString(""String_Node_Str"",analysis.getName(),trc.getMessage()));
  }
  MdmWebserviceConnection connection=trc.getObject();
  try {
    Map<ModelElement,List<Indicator>> elementToIndicator=new HashMap<ModelElement,List<Indicator>>();
    Collection<Indicator> indicators=IndicatorHelper.getIndicatorLeaves(analysis.getResults());
    ok=runAnalysisIndicators(connection,elementToIndicator,indicators);
    setRowCountAndNullCount(elementToIndicator);
  }
 catch (  RemoteException e) {
    log.error(e.getMessage(),e);
    this.errorMessage=e.getMessage();
    if (this.errorMessage.contains(""String_Node_Str"")) {
      this.errorMessage=Messages.getString(""String_Node_Str"");
    }
    ok=false;
  }
catch (  ServiceException e) {
    log.error(e.getMessage(),e);
    this.errorMessage=e.getMessage();
    ok=false;
  }
 finally {
  }
  return ok;
}",0.8649100794646591
137346,"private boolean setJDBCMysqlConnection(DatabaseConnection dbProvider){
  dbProvider.setComment(""String_Node_Str"");
  dbProvider.setSID(""String_Node_Str"");
  dbProvider.setDatasourceName(""String_Node_Str"");
  dbProvider.setDatabaseType(""String_Node_Str"");
  dbProvider.setDbVersionString(""String_Node_Str"");
  dbProvider.setDriverClass(""String_Node_Str"");
  dbProvider.setFileFieldName(""String_Node_Str"");
  dbProvider.setId(""String_Node_Str"");
  dbProvider.setLabel(""String_Node_Str"");
  dbProvider.setNullChar(""String_Node_Str"");
  dbProvider.setPassword(""String_Node_Str"");
  dbProvider.setPort(""String_Node_Str"");
  dbProvider.setServerName(""String_Node_Str"");
  dbProvider.setSqlSynthax(""String_Node_Str"");
  dbProvider.setUiSchema(""String_Node_Str"");
  dbProvider.setStringQuote(""String_Node_Str"");
  dbProvider.setURL(""String_Node_Str"");
  dbProvider.setAdditionalParams(""String_Node_Str"");
  dbProvider.setUsername(""String_Node_Str"");
  dbProvider.setDbmsId(""String_Node_Str"");
  dbProvider.setProductId(""String_Node_Str"");
  dbProvider.setDBRootPath(""String_Node_Str"");
  dbProvider.setSQLMode(false);
  dbProvider.setContextMode(false);
  dbProvider.setContextId(""String_Node_Str"");
  dbProvider.setContextName(""String_Node_Str"");
  return true;
}","private boolean setJDBCMysqlConnection(DatabaseConnection dbProvider){
  dbProvider.setComment(""String_Node_Str"");
  dbProvider.setSID(""String_Node_Str"");
  dbProvider.setDatasourceName(""String_Node_Str"");
  dbProvider.setDatabaseType(""String_Node_Str"");
  dbProvider.setDbVersionString(""String_Node_Str"");
  dbProvider.setDriverClass(""String_Node_Str"");
  dbProvider.setFileFieldName(""String_Node_Str"");
  dbProvider.setId(""String_Node_Str"");
  dbProvider.setLabel(""String_Node_Str"");
  dbProvider.setNullChar(""String_Node_Str"");
  dbProvider.setPassword(""String_Node_Str"");
  dbProvider.setPort(""String_Node_Str"");
  dbProvider.setServerName(""String_Node_Str"");
  dbProvider.setSqlSynthax(""String_Node_Str"");
  dbProvider.setUiSchema(""String_Node_Str"");
  dbProvider.setStringQuote(""String_Node_Str"");
  dbProvider.setURL(""String_Node_Str"");
  dbProvider.setAdditionalParams(""String_Node_Str"");
  dbProvider.setUsername(""String_Node_Str"");
  dbProvider.setDbmsId(""String_Node_Str"");
  dbProvider.setProductId(""String_Node_Str"");
  dbProvider.setDBRootPath(""String_Node_Str"");
  dbProvider.setSQLMode(false);
  dbProvider.setContextMode(false);
  dbProvider.setContextId(""String_Node_Str"");
  dbProvider.setContextName(""String_Node_Str"");
  dbProvider.setDatabaseType(SupportDBUrlType.MYSQLDEFAULTURL.getDBKey());
  return true;
}",0.964824120603015
137347,"@Test public void testGetRefreshedDataProviderForDB2() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2Connection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  Mockito.when(mockSqlConn.getMetaData()).thenReturn(mockDatabaseMetaData);
  returnCode.setObject(mockSqlConn);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Schema> scheams=SchemaHelper.getSchemas(dbProvider.getDataPackage());
  assertTrue(scheams.size() == schenaNames.size());
  for (int index=0; index < schenaNames.size(); index++) {
    assertTrue(schenaNames.get(index).equalsIgnoreCase(scheams.get(index).getName()));
  }
}","@Test public void testGetRefreshedDataProviderForDB2() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2Connection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  Mockito.when(mockSqlConn.getMetaData()).thenReturn(mockDatabaseMetaData);
  returnCode.setObject(mockSqlConn);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance(EDatabaseTypeName.MYSQL)).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  TypedReturnCode<Connection> refreshedDataProvider=DQStructureComparer.getRefreshedDataProvider(dbProvider);
  Assert.assertEquals(true,refreshedDataProvider.isOk());
  Assert.assertNotNull(refreshedDataProvider.getObject());
}",0.9280349843140984
137348,"@Test public void testGetRefreshedDataProvider() throws Exception {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBCMysqlConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  List<String> catalogNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,true);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    catalogNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
  }
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockCatalogResults.getString(MetaDataConstants.TABLE_CAT.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockSchemaResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getDatabaseProductName()).thenReturn(EDatabaseTypeName.MYSQL.getProduct());
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  ExtractMetaDataUtils extract=SingletonUtil.spySingleton(ExtractMetaDataUtils.class);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenReturn(mockDatabaseMetaData);
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(schemaPackageFilter);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Catalog> catalogs=CatalogHelper.getCatalogs(dbProvider.getDataPackage());
  assertTrue(catalogs.size() == catalogNames.size());
  for (int index=0; index < catalogNames.size(); index++) {
    assertTrue(catalogNames.get(index).equalsIgnoreCase(catalogs.get(index).getName()));
  }
}","@Test public void testGetRefreshedDataProvider() throws Exception {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBCMysqlConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  List<String> catalogNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,true);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    catalogNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
  }
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockCatalogResults.getString(MetaDataConstants.TABLE_CAT.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockSchemaResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getDatabaseProductName()).thenReturn(EDatabaseTypeName.MYSQL.getProduct());
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  ExtractMetaDataUtils extract=SingletonUtil.spySingleton(ExtractMetaDataUtils.class);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenReturn(mockDatabaseMetaData);
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  PowerMockito.mockStatic(MetadataFillFactory.class);
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance(EDatabaseTypeName.MYSQL)).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(schemaPackageFilter);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  TypedReturnCode<Connection> refreshedDataProvider=DQStructureComparer.getRefreshedDataProvider(dbProvider);
  Assert.assertEquals(true,refreshedDataProvider.isOk());
  Assert.assertNotNull(refreshedDataProvider.getObject());
}",0.908327953518399
137349,"@Test public void testGetRefreshedDataProviderForDB2ZOS() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2ForZOSConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DB2ForZosDataBaseMetadata.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2ZOS.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Schema> scheams=SchemaHelper.getSchemas(dbProvider.getDataPackage());
  assertTrue(scheams.size() == schenaNames.size());
  for (int index=0; index < schenaNames.size(); index++) {
    assertTrue(schenaNames.get(index).equalsIgnoreCase(scheams.get(index).getName()));
  }
}","@Test public void testGetRefreshedDataProviderForDB2ZOS() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2ForZOSConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DB2ForZosDataBaseMetadata.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2ZOS.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance(EDatabaseTypeName.MYSQL)).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(null);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  TypedReturnCode<Connection> refreshedDataProvider=DQStructureComparer.getRefreshedDataProvider(dbProvider);
  Assert.assertEquals(true,refreshedDataProvider.isOk());
  Assert.assertNotNull(refreshedDataProvider.getObject());
}",0.9272744740128734
137350,"/** 
 * DOC yyi Comment method ""createTable"".
 */
private void createTable(){
  GridLayout layout=new GridLayout();
  Composite composite=new Composite(this,SWT.BORDER);
  layout.marginHeight=0;
  layout.marginWidth=0;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,Boolean.TRUE,Boolean.TRUE));
  dataViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.NO_SCROLL | SWT.H_SCROLL| SWT.MULTI| SWT.BORDER);
  dataViewer.getTable().setHeaderVisible(true);
  dataViewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
  for (  String title : viewColumn) {
    TableViewerColumn column=new TableViewerColumn(dataViewer,SWT.NONE);
    column.getColumn().setText(title);
    column.getColumn().setWidth(150);
    column.getColumn().setMoveable(true);
  }
  dataViewer.setContentProvider(new ArrayContentProvider());
  dataViewer.setLabelProvider(new DataLabelProvider());
  dataViewer.getTable().addListener(SWT.Resize,new Listener(){
    @Override public void handleEvent(    Event event){
      reComputePageSize();
      loadPage(page);
      dataViewer.getTable().layout();
    }
  }
);
}","/** 
 * DOC yyi Comment method ""createTable"".
 */
private void createTable(){
  GridLayout layout=new GridLayout();
  Composite composite=new Composite(this,SWT.BORDER);
  layout.marginHeight=0;
  layout.marginWidth=0;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,Boolean.TRUE,Boolean.TRUE));
  dataViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.NO_SCROLL | SWT.H_SCROLL| SWT.MULTI| SWT.BORDER);
  dataViewer.getTable().setHeaderVisible(true);
  dataViewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
  for (  String title : viewColumn) {
    TableViewerColumn column=new TableViewerColumn(dataViewer,SWT.NONE);
    column.getColumn().setText(title);
    column.getColumn().setWidth(150);
    column.getColumn().setMoveable(true);
  }
  dataViewer.setContentProvider(new ArrayContentProvider());
  dataViewer.setLabelProvider(new DataLabelProvider());
  dataViewer.getTable().addControlListener(matchRuleTableResizeListener);
}",0.8940737284181055
137351,"protected void loadPage(int page){
  List<String[]> itemPage=new ArrayList<String[]>();
  for (int i=page * rowCount; i < Math.min((page + 1) * rowCount,getDisplayViewData().size()); i++) {
    itemPage.add(getDisplayViewData().get(i));
  }
  if (itemPage.size() >= 0) {
    this.dataViewer.setInput(itemPage);
  }
  updateButons();
}","protected void loadPage(int page){
  List<String[]> itemPage=new ArrayList<String[]>();
  for (int i=page * rowCount; i < Math.min((page + 1) * rowCount,getDisplayViewData().size()); i++) {
    itemPage.add(getDisplayViewData().get(i));
  }
  if (itemPage.size() >= 0) {
    dataViewer.getTable().removeControlListener(matchRuleTableResizeListener);
    this.dataViewer.setInput(itemPage);
    dataViewer.getTable().addControlListener(matchRuleTableResizeListener);
  }
  updateButons();
}",0.8092345078979344
137352,"public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  IMetadataConnection metadataConnection=ConvertionHelper.convert((DatabaseConnection)prevDataProvider,false,prevDataProvider.getContextName());
  Connection copyedConnection=null;
  if (mdm) {
    copyedConnection=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(copyedConnection,null,null);
  }
 else {
    SupportDBUrlType currentDBUrlType=SupportDBUrlType.getDBTypeByKey(metadataConnection.getDbType());
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance(SupportDBUrlType.getDBTypeByKey(metadataConnection.getDbType())).createConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      dbJDBCMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)prevDataProvider);
      copyedConnection=EObjectHelper.deepCopy(prevDataProvider);
      copyedConnection.getDataPackage().clear();
      MetadataFillFactory.getDBInstance(currentDBUrlType).fillCatalogs(copyedConnection,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(copyedConnection,dbJDBCMetadata,true));
      MetadataFillFactory.getDBInstance(currentDBUrlType).fillSchemas(copyedConnection,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(copyedConnection,dbJDBCMetadata,false));
      ConnectionUtils.closeConnection(sqlConn);
    }
  }
  if (copyedConnection == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(copyedConnection);
  }
  return returnProvider;
}","public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  IMetadataConnection metadataConnection=ConvertionHelper.convert((DatabaseConnection)prevDataProvider,false,prevDataProvider.getContextName());
  Connection copyedConnection=null;
  if (mdm) {
    copyedConnection=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(copyedConnection,null,null);
  }
 else {
    EDatabaseTypeName currentEDatabaseType=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
    if (currentEDatabaseType != null) {
      MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(currentEDatabaseType);
      TypedReturnCode<?> trc=(TypedReturnCode<?>)dbInstance.createConnection(metadataConnection);
      Object sqlConnObject=trc.getObject();
      DatabaseMetaData dbJDBCMetadata=null;
      if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
        java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
        dbJDBCMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)prevDataProvider);
        copyedConnection=EObjectHelper.deepCopy(prevDataProvider);
        copyedConnection.getDataPackage().clear();
        MetadataFillFactory.getDBInstance(currentEDatabaseType).fillCatalogs(copyedConnection,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(copyedConnection,dbJDBCMetadata,true));
        MetadataFillFactory.getDBInstance(currentEDatabaseType).fillSchemas(copyedConnection,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(copyedConnection,dbJDBCMetadata,false));
        ConnectionUtils.closeConnection(sqlConn);
      }
    }
  }
  if (copyedConnection == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(copyedConnection);
  }
  return returnProvider;
}",0.7791884490913618
137353,"/** 
 * fill schemas on the catalog
 * @return if fill action is success
 */
private boolean fillSchemaToCatalog(Item databaseItem){
  DatabaseConnection connection=(DatabaseConnection)((DatabaseConnectionItem)databaseItem).getConnection();
  TypedReturnCode<Connection> rcConn=MetadataConnectionUtils.createConnection(connection);
  if (!rcConn.isOk()) {
    log.error(rcConn.getMessage());
    return false;
  }
  java.sql.Connection sqlConnection=rcConn.getObject();
  try {
    DatabaseMetaData dbJDBCMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConnection,connection,false);
    List<Schema> schemaList=MetadataFillFactory.getDBInstance(SupportDBUrlType.SYBASEDEFAULTURL).fillSchemaToCatalog(connection,dbJDBCMetadata,this.getCatalog(),null);
    if (schemaList != null && schemaList.size() > 0) {
      CatalogHelper.addSchemas(schemaList,this.getCatalog());
    }
  }
  finally {
    if (sqlConnection != null) {
      ConnectionUtils.closeConnection(sqlConnection);
    }
  }
  return true;
}","/** 
 * fill schemas on the catalog
 * @return if fill action is success
 */
private boolean fillSchemaToCatalog(Item databaseItem){
  DatabaseConnection connection=(DatabaseConnection)((DatabaseConnectionItem)databaseItem).getConnection();
  TypedReturnCode<Connection> rcConn=MetadataConnectionUtils.createConnection(connection);
  if (!rcConn.isOk()) {
    log.error(rcConn.getMessage());
    return false;
  }
  java.sql.Connection sqlConnection=rcConn.getObject();
  try {
    DatabaseMetaData dbJDBCMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConnection,connection,false);
    EDatabaseTypeName currentEDatabaseType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
    List<Schema> schemaList=null;
    if (currentEDatabaseType != null) {
      schemaList=MetadataFillFactory.getDBInstance(currentEDatabaseType).fillSchemaToCatalog(connection,dbJDBCMetadata,this.getCatalog(),null);
    }
    if (schemaList != null && schemaList.size() > 0) {
      CatalogHelper.addSchemas(schemaList,this.getCatalog());
    }
  }
  finally {
    if (sqlConnection != null) {
      ConnectionUtils.closeConnection(sqlConnection);
    }
  }
  return true;
}",0.8506787330316742
137354,"public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  IMetadataConnection metadataConnection=ConvertionHelper.convert((DatabaseConnection)prevDataProvider,false,prevDataProvider.getContextName());
  Connection conn=null;
  if (mdm) {
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,null);
  }
 else {
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().createConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      dbJDBCMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)prevDataProvider);
      conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
      MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(conn,dbJDBCMetadata,true));
      MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(conn,dbJDBCMetadata,false));
      ConnectionUtils.closeConnection(sqlConn);
    }
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}","public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  IMetadataConnection metadataConnection=ConvertionHelper.convert((DatabaseConnection)prevDataProvider,false,prevDataProvider.getContextName());
  Connection copyedConnection=null;
  if (mdm) {
    copyedConnection=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(copyedConnection,null,null);
  }
 else {
    SupportDBUrlType currentDBUrlType=SupportDBUrlType.getDBTypeByKey(metadataConnection.getDbType());
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance(SupportDBUrlType.getDBTypeByKey(metadataConnection.getDbType())).createConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      dbJDBCMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)prevDataProvider);
      copyedConnection=EObjectHelper.deepCopy(prevDataProvider);
      copyedConnection.getDataPackage().clear();
      MetadataFillFactory.getDBInstance(currentDBUrlType).fillCatalogs(copyedConnection,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(copyedConnection,dbJDBCMetadata,true));
      MetadataFillFactory.getDBInstance(currentDBUrlType).fillSchemas(copyedConnection,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(copyedConnection,dbJDBCMetadata,false));
      ConnectionUtils.closeConnection(sqlConn);
    }
  }
  if (copyedConnection == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(copyedConnection);
  }
  return returnProvider;
}",0.8057874234835838
137355,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=Messages.getString(""String_Node_Str"");
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=Messages.getString(""String_Node_Str"",dataProvider);
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    Schema schema=(Schema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    EObject container=schema.eContainer();
    if (container != null) {
      Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
      if (catalog != null) {
        catName=catalog.getName();
      }
    }
    if (!ConnectionUtils.isOdbcProgress(connection) && !ConnectionUtils.isOdbcOracle(connection)) {
      connection.setCatalog(catName);
    }
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=Messages.getString(""String_Node_Str"");
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=Messages.getString(""String_Node_Str"",dataProvider);
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    Schema schema=(Schema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    EObject container=schema.eContainer();
    if (container != null) {
      Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
      if (catalog != null) {
        catName=catalog.getName();
      }
    }
    if (!ConnectionUtils.isOdbcProgress(connection) && !ConnectionUtils.isOdbcOracle(connection) && StringUtils.isNotEmpty(catName)&& dbms().supportCatalogSelection()) {
      connection.setCatalog(catName);
    }
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}",0.976303317535545
137356,"/** 
 * check whether DND is allowed.
 * @param sourceNode
 * @param targetNode
 * @return
 */
private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (isForbidNode(sourceNode)) {
    return false;
  }
  if (isSubTypeOfTargetNode(sourceNode,targetNode)) {
    return false;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(sourceNode.getObject()) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.equals(targetNode)) {
    return false;
  }
  return true;
}","/** 
 * check whether DND is allowed.
 * @param sourceNode
 * @param targetNode
 * @return
 */
private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (sourceNode.equals(targetNode)) {
    return false;
  }
  if (isForbidNode(sourceNode)) {
    return false;
  }
  if (isSubTypeOfTargetNode(sourceNode,targetNode)) {
    return false;
  }
  if (!isSameType(sourceNode,targetNode)) {
    return false;
  }
  if (ProxyRepositoryFactory.getInstance().getStatus(sourceNode.getObject()) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (sourceNode.getParent().equals(targetNode)) {
    return false;
  }
  if (targetNode.getParent().equals(sourceNode)) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
    if (!canMoveFolderNode(sourceNode,targetNode)) {
      return false;
    }
  }
  return true;
}",0.803125
137357,"/** 
 * move Folder Node.
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
private void moveFolderRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  IPath oldPath=null;
  List<String> jrxmlFileNames=null;
  List<JrxmlTempleteRepNode> jrxmlFileRepNodes=new ArrayList<JrxmlTempleteRepNode>();
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    oldPath=RepositoryNodeHelper.getPath(sourceNode);
    jrxmlFileRepNodes=RepositoryNodeHelper.getJrxmlFileRepNodes(sourceNode,true);
    jrxmlFileNames=RepNodeUtils.getListOfJrxmlNameWithPath(oldPath,jrxmlFileRepNodes);
  }
  if (!canMoveNode(sourceNode,targetNode)) {
    return;
  }
  moveFolder(sourceNode,targetNode);
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    IPath newPath=RepositoryNodeHelper.getPath(targetNode);
    List<String> jrxmlFileNamesAfterMove=new ArrayList<String>();
    for (    JrxmlTempleteRepNode jrxml : jrxmlFileRepNodes) {
      IPath relativeTo=RepositoryNodeHelper.getPath(jrxml.getParent()).makeRelativeTo(oldPath);
      IPath tempPath=newPath.append(RepNodeUtils.getSeparator()).append(sourceNode.getLabel()).append(RepNodeUtils.getSeparator());
      if (relativeTo.segmentCount() > 0) {
        tempPath=tempPath.append(relativeTo).append(RepNodeUtils.getSeparator());
      }
      jrxmlFileNamesAfterMove.add(tempPath.append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml)).toOSString());
    }
    RepNodeUtils.updateJrxmlRelatedReport(jrxmlFileNames,jrxmlFileNamesAfterMove);
  }
}","/** 
 * move Folder Node.
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
private void moveFolderRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  IPath oldPath=null;
  List<String> jrxmlFileNames=null;
  List<JrxmlTempleteRepNode> jrxmlFileRepNodes=new ArrayList<JrxmlTempleteRepNode>();
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    oldPath=RepositoryNodeHelper.getPath(sourceNode);
    jrxmlFileRepNodes=RepositoryNodeHelper.getJrxmlFileRepNodes(sourceNode,true);
    jrxmlFileNames=RepNodeUtils.getListOfJrxmlNameWithPath(oldPath,jrxmlFileRepNodes);
  }
  moveFolder(sourceNode,targetNode);
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    IPath newPath=RepositoryNodeHelper.getPath(targetNode);
    List<String> jrxmlFileNamesAfterMove=new ArrayList<String>();
    for (    JrxmlTempleteRepNode jrxml : jrxmlFileRepNodes) {
      IPath relativeTo=RepositoryNodeHelper.getPath(jrxml.getParent()).makeRelativeTo(oldPath);
      IPath tempPath=newPath.append(RepNodeUtils.getSeparator()).append(sourceNode.getLabel()).append(RepNodeUtils.getSeparator());
      if (relativeTo.segmentCount() > 0) {
        tempPath=tempPath.append(relativeTo).append(RepNodeUtils.getSeparator());
      }
      jrxmlFileNamesAfterMove.add(tempPath.append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml)).toOSString());
    }
    RepNodeUtils.updateJrxmlRelatedReport(jrxmlFileNames,jrxmlFileNamesAfterMove);
  }
}",0.980006555227794
137358,"@Override public Boolean handleDrop(IRepositoryNode targetNode){
  Boolean isHandleOK=Boolean.FALSE;
  try {
    IRepositoryNode[] selectedRepositoryNodes=getSelectedRepositoryNodes();
    for (    IRepositoryNode sourceNode : selectedRepositoryNodes) {
      if (haveLockedItems(sourceNode)) {
        return isHandleOK;
      }
      if (!isSameType(sourceNode,targetNode)) {
        MessageDialog.openWarning(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        return isHandleOK;
      }
    }
    moveRepositoryNodes(selectedRepositoryNodes,targetNode);
    if (DQRepositoryNode.isOnFilterring()) {
      RepositoryNodeHelper.fillTreeList(null);
      RepositoryNodeHelper.setFilteredNode(RepositoryNodeHelper.getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
    }
    isHandleOK=Boolean.TRUE;
  }
 catch (  PersistenceException e) {
    if (log.isInfoEnabled()) {
      log.info(e.toString());
    }
    MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),e.getMessage());
    isHandleOK=Boolean.FALSE;
  }
  ProxyRepositoryManager.getInstance().refresh();
  return isHandleOK;
}","@Override public Boolean handleDrop(IRepositoryNode targetNode){
  Boolean isHandleOK=Boolean.FALSE;
  try {
    IRepositoryNode[] selectedRepositoryNodes=getSelectedRepositoryNodes();
    for (    IRepositoryNode sourceNode : selectedRepositoryNodes) {
      if (haveLockedItems(sourceNode)) {
        return isHandleOK;
      }
    }
    moveRepositoryNodes(selectedRepositoryNodes,targetNode);
    if (DQRepositoryNode.isOnFilterring()) {
      RepositoryNodeHelper.fillTreeList(null);
      RepositoryNodeHelper.setFilteredNode(RepositoryNodeHelper.getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
    }
    isHandleOK=Boolean.TRUE;
  }
 catch (  PersistenceException e) {
    if (log.isInfoEnabled()) {
      log.info(e.toString());
    }
    MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),e.getMessage());
    isHandleOK=Boolean.FALSE;
  }
  ProxyRepositoryManager.getInstance().refresh();
  return isHandleOK;
}",0.8811493252067915
137359,"/** 
 * check whether sourceNode and targetNode is the same Type.
 * @param sourceNode
 * @param targetNode
 * @return
 */
private boolean isSameType(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  String sourceString=sourcePath.removeLastSegments(sourceCount - 2).toOSString();
  String targetString=targetPath.removeLastSegments(targetCount - 2).toOSString();
  ERepositoryObjectType sourceType=sourceNode.getContentType();
  ERepositoryObjectType targetentType=targetNode.getContentType();
  if (sourceType == null || targetentType == null || !sourceType.equals(targetentType)) {
    return false;
  }
  return sourceString.equals(targetString);
}","/** 
 * check whether sourceNode and targetNode is the same Type.
 * @param sourceNode
 * @param targetNode
 * @return
 */
private boolean isSameType(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  ERepositoryObjectType sourceType=sourceNode.getContentType();
  ERepositoryObjectType targetentType=targetNode.getContentType();
  if (sourceType == null || targetentType == null || !sourceType.equals(targetentType)) {
    return false;
  }
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  String sourceString=sourcePath.removeLastSegments(sourceCount - 2).toOSString();
  String targetString=targetPath.removeLastSegments(targetCount - 2).toOSString();
  return sourceString.equals(targetString);
}",0.5744186046511628
137360,"/** 
 * move RepositoryNodes to the target RepositoryNode.
 * @param repositoryNodes
 * @param targetNode
 * @throws PersistenceException
 */
private void moveRepositoryNodes(IRepositoryNode[] repositoryNodes,IRepositoryNode targetNode) throws PersistenceException {
  if (repositoryNodes != null) {
    for (    IRepositoryNode sourceNode : repositoryNodes) {
      if (targetNode == sourceNode.getParent()) {
        continue;
      }
      if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
        if (sourceNode instanceof AnalysisRepNode || sourceNode instanceof ConnectionRepNode) {
          moveAnaConNode(sourceNode,targetNode);
        }
 else         if (sourceNode instanceof ReportRepNode) {
          moveReportRepNode(sourceNode,targetNode);
        }
 else {
          IPath makeRelativeTo=getMakeRelativeTo(sourceNode);
          IPath removeLastSegments=makeRelativeTo.removeLastSegments(1);
          if (sourceNode instanceof SysIndicatorDefinitionRepNode) {
            if (!((SysIndicatorDefinitionRepNode)sourceNode).isSystemIndicator()) {
              moveOthersNode(sourceNode,targetNode,removeLastSegments);
            }
          }
 else           if (sourceNode instanceof PatternRepNode) {
            moveOthersNode(sourceNode,targetNode,removeLastSegments);
          }
 else           if (sourceNode instanceof JrxmlTempleteRepNode) {
            moveJrxmlFileRepNode(sourceNode,targetNode,makeRelativeTo);
          }
 else           if (sourceNode instanceof SourceFileRepNode || sourceNode instanceof RuleRepNode) {
            moveOthersNode(sourceNode,targetNode,makeRelativeTo);
          }
 else {
            moveOthersNode(sourceNode,targetNode,removeLastSegments);
          }
        }
      }
 else       if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
        moveFolderRepNode(sourceNode,targetNode);
      }
      CorePlugin.getDefault().refreshDQView(targetNode.getParent());
      CorePlugin.getDefault().refreshDQView(sourceNode.getParent());
    }
  }
}","/** 
 * move RepositoryNodes to the target RepositoryNode.
 * @param repositoryNodes
 * @param targetNode
 * @throws PersistenceException
 */
private void moveRepositoryNodes(IRepositoryNode[] repositoryNodes,IRepositoryNode targetNode) throws PersistenceException {
  if (repositoryNodes != null) {
    for (    IRepositoryNode sourceNode : repositoryNodes) {
      if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
        if (sourceNode instanceof AnalysisRepNode || sourceNode instanceof ConnectionRepNode) {
          moveAnaConNode(sourceNode,targetNode);
        }
 else         if (sourceNode instanceof ReportRepNode) {
          moveReportRepNode(sourceNode,targetNode);
        }
 else {
          IPath makeRelativeTo=getMakeRelativeTo(sourceNode);
          IPath removeLastSegments=makeRelativeTo.removeLastSegments(1);
          if (sourceNode instanceof SysIndicatorDefinitionRepNode) {
            if (!((SysIndicatorDefinitionRepNode)sourceNode).isSystemIndicator()) {
              moveOthersNode(sourceNode,targetNode,removeLastSegments);
            }
          }
 else           if (sourceNode instanceof PatternRepNode) {
            moveOthersNode(sourceNode,targetNode,removeLastSegments);
          }
 else           if (sourceNode instanceof JrxmlTempleteRepNode) {
            moveJrxmlFileRepNode(sourceNode,targetNode,makeRelativeTo);
          }
 else           if (sourceNode instanceof SourceFileRepNode || sourceNode instanceof RuleRepNode) {
            moveOthersNode(sourceNode,targetNode,makeRelativeTo);
          }
 else {
            moveOthersNode(sourceNode,targetNode,removeLastSegments);
          }
        }
      }
 else       if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
        moveFolderRepNode(sourceNode,targetNode);
      }
      CorePlugin.getDefault().refreshDQView(targetNode.getParent());
      CorePlugin.getDefault().refreshDQView(sourceNode.getParent());
    }
  }
}",0.9808564231738036
137361,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=Messages.getString(""String_Node_Str"");
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=Messages.getString(""String_Node_Str"",dataProvider);
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    Schema schema=(Schema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    EObject container=schema.eContainer();
    if (container != null) {
      Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
      if (catalog != null) {
        catName=catalog.getName();
      }
    }
    if (!ConnectionUtils.isOdbcProgress(connection) && !ConnectionUtils.isOdbcOracle(connection)) {
      connection.setCatalog(catName);
    }
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  DataProvider dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=Messages.getString(""String_Node_Str"");
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  Indicator[] indics=this.getAllIndicators();
  if (indics.length == 0) {
    String msg=Messages.getString(""String_Node_Str"",dataProvider);
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  for (  Indicator indicator : indics) {
    SchemaIndicator schemaIndicator=DataqualitySwitchHelper.SCHEMA_SWITCH.doSwitch(indicator);
    if (schemaIndicator == null) {
      continue;
    }
    Schema schema=(Schema)schemaIndicator.getAnalyzedElement();
    String catName=schema.getName();
    if (!checkSchema(schema)) {
      ok.setReturnCode(Messages.getString(""String_Node_Str"",catName),false);
      return ok;
    }
    EObject container=schema.eContainer();
    if (container != null) {
      Catalog catalog=SwitchHelpers.CATALOG_SWITCH.doSwitch(container);
      if (catalog != null) {
        catName=catalog.getName();
      }
    }
    if (!ConnectionUtils.isOdbcProgress(connection) && !ConnectionUtils.isOdbcOracle(connection) && StringUtils.isNotEmpty(catName)&& dbms().supportCatalogSelection()) {
      connection.setCatalog(catName);
    }
    evalSchemaIndicLow(null,schemaIndicator,null,schema,ok);
  }
  return ok;
}",0.976303317535545
137362,"/** 
 * check the inString is a validate value.
 * @param inString
 * @return
 */
public boolean isOutOfValue(String inString){
  if (inString.equals(""String_Node_Str"")) {
    return true;
  }
  boolean isOutOfValue=false;
  isPercent=inString.indexOf('%') > 0;
  if (isPercent) {
    NumberFormat nFromat=NumberFormat.getPercentInstance();
    try {
      Number number=nFromat.parse(inString);
      if (number instanceof Double) {
        Double doubleString=(Double)number;
        if (doubleString < 0 || doubleString > 1) {
          isOutOfValue=true;
        }
      }
 else       if (number instanceof Long) {
        Long longString=(Long)number;
        if (longString < 0 || longString > 1) {
          isOutOfValue=true;
        }
      }
    }
 catch (    ParseException e) {
      isOutOfValue=false;
    }
  }
 else {
    Double douString=Double.valueOf(inString);
    if (douString < 0) {
      isOutOfValue=true;
    }
  }
  return isOutOfValue;
}","/** 
 * check the inString is a validate value.
 * @param inString
 * @return
 */
public boolean isOutOfValue(String inString){
  if (inString.equals(PluginConstant.NA_STRING)) {
    return true;
  }
  boolean isOutOfValue=false;
  isPercent=inString.indexOf('%') > 0;
  if (isPercent) {
    NumberFormat nFromat=NumberFormat.getPercentInstance();
    try {
      Number number=nFromat.parse(inString);
      if (number instanceof Double) {
        Double doubleString=(Double)number;
        if (doubleString < 0 || doubleString > 1) {
          isOutOfValue=true;
        }
      }
 else       if (number instanceof Long) {
        Long longString=(Long)number;
        if (longString < 0 || longString > 1) {
          isOutOfValue=true;
        }
      }
    }
 catch (    ParseException e) {
      isOutOfValue=false;
    }
  }
 else {
    Double douString=Double.valueOf(inString);
    if (douString < 0) {
      isOutOfValue=true;
    }
  }
  return isOutOfValue;
}",0.980898296334538
137363,"public String getPersent(){
  if (percent != null) {
    if (Double.isNaN(percent) || Double.isInfinite(percent)) {
      return ""String_Node_Str"";
    }
 else {
      return StringFormatUtil.format(percent,StringFormatUtil.PERCENT).toString();
    }
  }
 else {
    return null;
  }
}","public String getPersent(){
  if (percent != null) {
    if (Double.isNaN(percent) || Double.isInfinite(percent)) {
      return PluginConstant.NA_STRING;
    }
 else {
      return StringFormatUtil.format(percent,StringFormatUtil.PERCENT).toString();
    }
  }
 else {
    return null;
  }
}",0.9324090121317158
137364,"public String getPerMatch(){
  Double match=Double.parseDouble(getNumMatch());
  return StringFormatUtil.format(match / getSum(),StringFormatUtil.PERCENT).toString();
}","public String getPerMatch(){
  Double match=Double.parseDouble(getNumMatch());
  Double percent=match / getSum();
  if (Double.isNaN(percent) || Double.isInfinite(percent)) {
    return PluginConstant.NA_STRING;
  }
  return StringFormatUtil.format(percent,StringFormatUtil.PERCENT).toString();
}",0.6551724137931034
137365,"public String getPerNoMatch(){
  Double nomatch=Double.parseDouble(getNumNoMatch());
  return StringFormatUtil.format(nomatch / getSum(),StringFormatUtil.PERCENT).toString();
}","public String getPerNoMatch(){
  Double nomatch=Double.parseDouble(getNumNoMatch());
  Double percent=nomatch / getSum();
  if (Double.isNaN(percent) || Double.isInfinite(percent)) {
    return PluginConstant.NA_STRING;
  }
  return StringFormatUtil.format(percent,StringFormatUtil.PERCENT).toString();
}",0.6583333333333333
137366,"/** 
 * DOC xqliu Comment method ""createTable"".
 * @param composite
 */
private void createTable(Composite composite){
  final TableViewer tableViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER);
  Table resultTable=tableViewer.getTable();
  resultTable.setLinesVisible(true);
  resultTable.setHeaderVisible(true);
  TableStructureEntity tableStructure=getTableStructure();
  String[] fieldNames=tableStructure.getFieldNames();
  Integer[] fieldWidths=tableStructure.getFieldWidths();
  for (int i=0; i < fieldNames.length; ++i) {
    TableColumn columnHeader=new TableColumn(resultTable,SWT.LEFT);
    columnHeader.setText(fieldNames[i]);
    columnHeader.setWidth(fieldWidths[i]);
  }
  CustomerDefaultCategoryDataset dataset=initCustomerDataset();
  ChartDataEntity[] dataEntities=dataset.getDataEntities();
  int i=0;
  if (dataEntities != null) {
    if (dataset.getColumnCount() < dataEntities.length) {
      MessageDialog.openError(this.getEditor().getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    }
 else {
      for (      ChartDataEntity dataEntity : dataEntities) {
        TableItem item=new TableItem(resultTable,SWT.NULL);
        Number match=dataset.getValue(0,i);
        Number notMatch=dataset.getValue(1,i);
        Number row=match.intValue() + notMatch.intValue();
        item.setText(0,dataset.getColumnKey(i).toString());
        item.setText(1,String.valueOf(match.intValue()));
        item.setText(2,StringFormatUtil.format(String.valueOf(match.doubleValue() / row.doubleValue()),StringFormatUtil.PERCENT).toString());
        item.setText(3,String.valueOf(row));
        item.setData(dataEntity);
        i++;
      }
    }
  }
  GridData gd=new GridData();
  gd.heightHint=180;
  gd.widthHint=450;
  resultTable.setLayoutData(gd);
  ChartTableFactory.addMenuAndTip(tableViewer,new ColumnDependencyExplorer(),this.masterPage.analysisItem.getAnalysis());
}","/** 
 * DOC xqliu Comment method ""createTable"".
 * @param composite
 */
private void createTable(Composite composite){
  final TableViewer tableViewer=new TableViewer(composite,SWT.FULL_SELECTION | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL| SWT.BORDER);
  Table resultTable=tableViewer.getTable();
  resultTable.setLinesVisible(true);
  resultTable.setHeaderVisible(true);
  TableStructureEntity tableStructure=getTableStructure();
  String[] fieldNames=tableStructure.getFieldNames();
  Integer[] fieldWidths=tableStructure.getFieldWidths();
  for (int i=0; i < fieldNames.length; ++i) {
    TableColumn columnHeader=new TableColumn(resultTable,SWT.LEFT);
    columnHeader.setText(fieldNames[i]);
    columnHeader.setWidth(fieldWidths[i]);
  }
  CustomerDefaultCategoryDataset dataset=initCustomerDataset();
  ChartDataEntity[] dataEntities=dataset.getDataEntities();
  int i=0;
  if (dataEntities != null) {
    if (dataset.getColumnCount() < dataEntities.length) {
      MessageDialog.openError(this.getEditor().getSite().getShell(),""String_Node_Str"",""String_Node_Str"");
    }
 else {
      for (      ChartDataEntity dataEntity : dataEntities) {
        TableItem item=new TableItem(resultTable,SWT.NULL);
        Number match=dataset.getValue(0,i);
        Number notMatch=dataset.getValue(1,i);
        Number row=match.intValue() + notMatch.intValue();
        item.setText(0,dataset.getColumnKey(i).toString());
        item.setText(1,String.valueOf(match.intValue()));
        double percentage=match.doubleValue() / row.doubleValue();
        if (Double.isNaN(percentage) || Double.isInfinite(percentage)) {
          item.setText(2,PluginConstant.NA_STRING);
        }
 else {
          item.setText(2,StringFormatUtil.format(String.valueOf(percentage),StringFormatUtil.PERCENT).toString());
        }
        item.setText(3,String.valueOf(row));
        item.setData(dataEntity);
        i++;
      }
    }
  }
  GridData gd=new GridData();
  gd.heightHint=180;
  gd.widthHint=450;
  resultTable.setLayoutData(gd);
  ChartTableFactory.addMenuAndTip(tableViewer,new ColumnDependencyExplorer(),this.masterPage.analysisItem.getAnalysis());
}",0.9339185564496464
137367,"private void createTableItems(final Table resultTable){
  Long columnSetARows=rowMatchingIndicatorA.getMatchingValueCount() + rowMatchingIndicatorA.getNotMatchingValueCount();
  TableItem item1=new TableItem(resultTable,SWT.NULL);
  item1.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
  setAMatchPercent=StringFormatUtil.format((rowMatchingIndicatorA.getMatchingValueCount().doubleValue()) / columnSetARows.doubleValue(),StringFormatUtil.PERCENT).toString();
  item1.setText(1,setAMatchPercent);
  TableItem item2=new TableItem(resultTable,SWT.NULL);
  item2.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
  item2.setText(1,StringFormatUtil.format((rowMatchingIndicatorA.getNotMatchingValueCount().doubleValue()) / columnSetARows.doubleValue(),StringFormatUtil.PERCENT).toString());
  TableItem item3=new TableItem(resultTable,SWT.NULL);
  item3.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
  item3.setText(1,rowMatchingIndicatorA.getMatchingValueCount().toString());
  TableItem item4=new TableItem(resultTable,SWT.NULL);
  item4.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
  item4.setText(1,rowMatchingIndicatorA.getNotMatchingValueCount().toString());
  TableItem item5=new TableItem(resultTable,SWT.NULL);
  item5.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
  item5.setText(1,columnSetARows.toString());
  if (!isHasDeactivatedIndicator) {
    Long columnSetBRows=rowMatchingIndicatorB.getMatchingValueCount() + rowMatchingIndicatorB.getNotMatchingValueCount();
    setBMatchPercent=StringFormatUtil.format((rowMatchingIndicatorB.getMatchingValueCount().doubleValue()) / columnSetBRows.doubleValue(),StringFormatUtil.PERCENT).toString();
    item1.setText(2,setBMatchPercent);
    item2.setText(2,StringFormatUtil.format((rowMatchingIndicatorB.getNotMatchingValueCount().doubleValue()) / columnSetBRows.doubleValue(),StringFormatUtil.PERCENT).toString());
    item3.setText(2,rowMatchingIndicatorB.getMatchingValueCount().toString());
    item4.setText(2,rowMatchingIndicatorB.getNotMatchingValueCount().toString());
    item5.setText(2,columnSetBRows.toString());
  }
  final TableCursor cursor=new TableCursor(resultTable,SWT.NONE);
  cursor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      int column=cursor.getColumn();
      if (column == 1) {
        resultTable.setMenu(createMenu(resultTable,rowMatchingIndicatorA));
      }
      if (column == 2) {
        resultTable.setMenu(createMenu(resultTable,rowMatchingIndicatorB));
      }
      if (e.widget instanceof TableCursor) {
        ((TableCursor)e.widget).setForeground(new Color(null,0,0,0));
      }
    }
  }
);
}","private void createTableItems(final Table resultTable){
  Long columnSetARows=rowMatchingIndicatorA.getMatchingValueCount() + rowMatchingIndicatorA.getNotMatchingValueCount();
  TableItem item1=new TableItem(resultTable,SWT.NULL);
  item1.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
  double matchPerA=(rowMatchingIndicatorA.getMatchingValueCount().doubleValue()) / columnSetARows.doubleValue();
  if (Double.isNaN(matchPerA) || Double.isInfinite(matchPerA)) {
    setAMatchPercent=org.talend.dataquality.PluginConstant.NA_STRING;
  }
 else {
    setAMatchPercent=StringFormatUtil.format(matchPerA,StringFormatUtil.PERCENT).toString();
  }
  item1.setText(1,setAMatchPercent);
  TableItem item2=new TableItem(resultTable,SWT.NULL);
  item2.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
  double notMatchPerA=(rowMatchingIndicatorA.getNotMatchingValueCount().doubleValue()) / columnSetARows.doubleValue();
  if (Double.isNaN(notMatchPerA) || Double.isInfinite(notMatchPerA)) {
    item2.setText(1,org.talend.dataquality.PluginConstant.NA_STRING);
  }
 else {
    item2.setText(1,StringFormatUtil.format(notMatchPerA,StringFormatUtil.PERCENT).toString());
  }
  TableItem item3=new TableItem(resultTable,SWT.NULL);
  item3.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
  item3.setText(1,rowMatchingIndicatorA.getMatchingValueCount().toString());
  TableItem item4=new TableItem(resultTable,SWT.NULL);
  item4.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
  item4.setText(1,rowMatchingIndicatorA.getNotMatchingValueCount().toString());
  TableItem item5=new TableItem(resultTable,SWT.NULL);
  item5.setText(0,DefaultMessagesImpl.getString(""String_Node_Str""));
  item5.setText(1,columnSetARows.toString());
  if (!isHasDeactivatedIndicator) {
    Long columnSetBRows=rowMatchingIndicatorB.getMatchingValueCount() + rowMatchingIndicatorB.getNotMatchingValueCount();
    double matchPerB=rowMatchingIndicatorB.getMatchingValueCount().doubleValue() / columnSetBRows.doubleValue();
    if (Double.isNaN(matchPerB) || Double.isInfinite(matchPerB)) {
      setBMatchPercent=org.talend.dataquality.PluginConstant.NA_STRING;
    }
 else {
      setBMatchPercent=StringFormatUtil.format(matchPerB,StringFormatUtil.PERCENT).toString();
    }
    item1.setText(2,setBMatchPercent);
    double notMatchPerB=(rowMatchingIndicatorB.getNotMatchingValueCount().doubleValue()) / columnSetBRows.doubleValue();
    if (Double.isNaN(notMatchPerB) || Double.isInfinite(notMatchPerB)) {
      item2.setText(2,org.talend.dataquality.PluginConstant.NA_STRING);
    }
 else {
      item2.setText(2,StringFormatUtil.format(notMatchPerB,StringFormatUtil.PERCENT).toString());
    }
    item3.setText(2,rowMatchingIndicatorB.getMatchingValueCount().toString());
    item4.setText(2,rowMatchingIndicatorB.getNotMatchingValueCount().toString());
    item5.setText(2,columnSetBRows.toString());
  }
  final TableCursor cursor=new TableCursor(resultTable,SWT.NONE);
  cursor.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      int column=cursor.getColumn();
      if (column == 1) {
        resultTable.setMenu(createMenu(resultTable,rowMatchingIndicatorA));
      }
      if (column == 2) {
        resultTable.setMenu(createMenu(resultTable,rowMatchingIndicatorB));
      }
      if (e.widget instanceof TableCursor) {
        ((TableCursor)e.widget).setForeground(new Color(null,0,0,0));
      }
    }
  }
);
}",0.7903691813804173
137368,"public void openIndicatorOptionDialog(Shell shell,TreeItem indicatorItem){
  if (isDirty()) {
    masterPage.doSave(null);
  }
  Indicator indicator=(Indicator)indicatorItem.getData(INDICATOR_KEY);
  ColumnSetIndicatorUnit indicatorUnit=new ColumnSetIndicatorUnit(IndicatorEnum.findIndicatorEnum(indicator.eClass()),indicator);
  IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
  if (indicatorUnit.isExsitingForm()) {
    String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
    OpeningHelpWizardDialog optionDialog=new OpeningHelpWizardDialog(shell,wizard,href);
    if (Window.OK == optionDialog.open()) {
      masterPage.setDirty(wizard.isDirty());
      createIndicatorParameters(indicatorItem,indicator);
    }
  }
 else {
    MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
}","public void openIndicatorOptionDialog(Shell shell,TreeItem indicatorItem){
  if (isDirty()) {
    masterPage.doSave(null);
  }
  ColumnSetIndicatorUnit indicatorUnit=(ColumnSetIndicatorUnit)indicatorItem.getData(INDICATOR_KEY);
  IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
  if (indicatorUnit.isExsitingForm()) {
    String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
    OpeningHelpWizardDialog optionDialog=new OpeningHelpWizardDialog(shell,wizard,href);
    if (Window.OK == optionDialog.open()) {
      masterPage.setDirty(wizard.isDirty());
      createIndicatorParameters(indicatorItem,indicatorUnit.getIndicator());
    }
  }
 else {
    MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
}",0.8653295128939829
137369,"public boolean isExsitingForm(){
  if (getForms().length > 0) {
    return true;
  }
  return false;
}","public boolean isExsitingForm(){
  if (getForms() != null) {
    return true;
  }
  return false;
}",0.9154228855721394
137370,"/** 
 * DOC bZhou Comment method ""getFileResource"".
 * @param file
 * @return get null if the file is not exist.
 */
public synchronized Resource getFileResource(IFile file){
  if (file.exists()) {
    URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
    Resource res=EMFSharedResources.getInstance().getResource(uri,false);
    if (EMFSharedResources.getInstance().isNeedReload(res)) {
      res=EMFSharedResources.getInstance().reloadResource(uri);
    }
    return res;
  }
  return null;
}","/** 
 * ADD sizhaoliu TDQ-8483
 * @param file
 * @param forceReload
 * @return get null if the file is not exist.
 */
public synchronized Resource getFileResource(IFile file,boolean forceReload){
  if (file.exists()) {
    URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
    Resource res=EMFSharedResources.getInstance().getResource(uri,false);
    if (forceReload || EMFSharedResources.getInstance().isNeedReload(res)) {
      res=EMFSharedResources.getInstance().reloadResource(uri);
    }
    return res;
  }
  return null;
}",0.8884758364312267
137371,"private void refreshColumnAndData(){
  this.analysisHandler.setSelectedColumns(translateSelectedNodeIntoModelElement());
  updateAllColumnsToKeySection();
  refreshDataFromConnection(true);
  this.setDirty(Boolean.TRUE);
}","private void refreshColumnAndData(){
  ModelElement[] modelElements=translateSelectedNodeIntoModelElement();
  this.analysisHandler.setSelectedColumns(modelElements);
  EList<ModelElement> analyzedElements=this.analysisHandler.getAnalysis().getContext().getAnalysedElements();
  analyzedElements.clear();
  analyzedElements.addAll(Arrays.asList(modelElements));
  updateAllColumnsToKeySection();
  refreshDataFromConnection(true);
  this.setDirty(Boolean.TRUE);
}",0.5401459854014599
137372,"/** 
 * DOC bZhou Comment method ""getModelElement"".
 * @param resource
 * @return
 */
public final ModelElement getModelElement(Resource resource){
  if (resource != null) {
    EList<EObject> contents=resource.getContents();
    if (contents.isEmpty()) {
      log.error(Messages.getString(""String_Node_Str"") + resource);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + contents.size());
    }
    for (    EObject object : contents) {
      ModelElement switchObject=doSwitch(object);
      if (switchObject != null) {
        return switchObject;
      }
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""getModelElement"".
 * @param resource
 * @return
 */
public final ModelElement getModelElement(Resource resource){
  if (resource != null) {
    EList<EObject> contents=resource.getContents();
    if (contents.isEmpty()) {
      log.error(Messages.getString(""String_Node_Str"") + resource);
    }
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + contents.size());
      log.debug(""String_Node_Str"" + resource.getURI());
    }
    for (    EObject object : contents) {
      ModelElement switchObject=doSwitch(object);
      if (switchObject != null) {
        return switchObject;
      }
    }
  }
  return null;
}",0.9561128526645768
137373,"/** 
 * ADD sizhaoliu TDQ-8483
 * @param file
 * @param forceReload
 * @return get null if the file is not exist.
 */
public synchronized Resource getFileResource(IFile file,boolean forceReload){
  if (file.exists()) {
    URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
    Resource res=EMFSharedResources.getInstance().getResource(uri,false);
    if (forceReload || EMFSharedResources.getInstance().isNeedReload(res)) {
      res=EMFSharedResources.getInstance().reloadResource(uri);
    }
    return res;
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""getFileResource"".
 * @param file
 * @return get null if the file is not exist.
 */
public synchronized Resource getFileResource(IFile file){
  if (file.exists()) {
    URI uri=URI.createPlatformResourceURI(file.getFullPath().toString(),false);
    Resource res=EMFSharedResources.getInstance().getResource(uri,false);
    if (EMFSharedResources.getInstance().isNeedReload(res)) {
      res=EMFSharedResources.getInstance().reloadResource(uri);
    }
    return res;
  }
  return null;
}",0.8884758364312267
137374,"public List<Map<String,String>> getBlockingKeysFromFiles(Object[] files,boolean retrieveDisplayValue){
  List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
  for (  Object rule : files) {
    if (rule instanceof IFile) {
      MatchRuleDefinition matchRuleDefinition=DQRuleResourceFileHelper.getInstance().findMatchRule((IFile)rule);
      matchExistingColumnForBlockingKeys(matchRuleDefinition);
      ruleValues.addAll(getBlockingKeysFromRules(matchRuleDefinition,retrieveDisplayValue));
    }
  }
  return ruleValues;
}","public List<Map<String,String>> getBlockingKeysFromFiles(Object[] files,boolean retrieveDisplayValue){
  List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
  for (  Object rule : files) {
    if (rule instanceof IFile) {
      MatchRuleDefinition matchRuleDefinition=DQRuleResourceFileHelper.getInstance().findMatchRule((IFile)rule);
      ruleValues.addAll(getBlockingKeysFromRules(matchRuleDefinition,retrieveDisplayValue));
    }
  }
  return ruleValues;
}",0.9385365853658536
137375,"private List<Map<String,String>> getMatchRulesFromRules(MatchRuleDefinition matchRuleDefinition,boolean retrieveDisplayValue){
  if (matchRuleDefinition != null) {
    List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
    for (    MatchRule matchRule : matchRuleDefinition.getMatchRules()) {
      for (      MatchKeyDefinition matchKey : matchRule.getMatchKeys()) {
        Map<String,String> pr=new HashMap<String,String>();
        pr.put(MatchRulesTableLabelProvider.MATCH_KEY_NAME,null == matchKey.getName() ? StringUtils.EMPTY : matchKey.getName());
        pr.put(MatchRulesTableLabelProvider.INPUT_COLUMN,null == matchKey.getColumn() ? StringUtils.EMPTY : matchKey.getColumn());
        if (getLookupColumnNames().size() > 0) {
          for (          String lookupColumnName : getLookupColumnNames()) {
            if (lookupColumnName.equalsIgnoreCase(matchKey.getColumn()) || lookupColumnName.equalsIgnoreCase(matchKey.getName())) {
              pr.put(""String_Node_Str"",null == matchKey.getColumn() ? StringUtils.EMPTY : lookupColumnName);
              break;
            }
          }
        }
        String algorithmType=matchKey.getAlgorithm().getAlgorithmType();
        if (retrieveDisplayValue) {
          pr.put(MatchRulesTableLabelProvider.MATCHING_TYPE,null == algorithmType ? StringUtils.EMPTY : AttributeMatcherType.valueOf(algorithmType).getLabel());
        }
 else {
          pr.put(MatchRulesTableLabelProvider.MATCHING_TYPE,null == algorithmType ? StringUtils.EMPTY : AttributeMatcherType.valueOf(algorithmType).getComponentValue());
        }
        pr.put(MatchRulesTableLabelProvider.CUSTOM_MATCHER,null == matchKey.getAlgorithm().getAlgorithmParameters() ? StringUtils.EMPTY : matchKey.getAlgorithm().getAlgorithmParameters());
        pr.put(MatchRulesTableLabelProvider.CONFIDENCE_WEIGHT,String.valueOf(matchKey.getConfidenceWeight()));
        if (retrieveDisplayValue) {
          pr.put(MatchRulesTableLabelProvider.HANDLE_NULL,null == matchKey.getHandleNull() ? StringUtils.EMPTY : HandleNullEnum.getTypeByValue(matchKey.getHandleNull()).getLabel());
        }
 else {
          pr.put(MatchRulesTableLabelProvider.HANDLE_NULL,null == matchKey.getHandleNull() ? StringUtils.EMPTY : matchKey.getHandleNull());
        }
        ruleValues.add(pr);
      }
    }
    return ruleValues;
  }
  return null;
}","private List<Map<String,String>> getMatchRulesFromRules(MatchRuleDefinition matchRuleDefinition,boolean retrieveDisplayValue){
  if (matchRuleDefinition != null) {
    List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
    for (    MatchRule matchRule : matchRuleDefinition.getMatchRules()) {
      for (      MatchKeyDefinition matchKey : matchRule.getMatchKeys()) {
        Map<String,String> pr=new HashMap<String,String>();
        pr.put(MatchRulesTableLabelProvider.MATCH_KEY_NAME,null == matchKey.getName() ? StringUtils.EMPTY : matchKey.getName());
        String matchedColumnName=matchExistingColumnForMatchRule(matchKey);
        pr.put(MatchRulesTableLabelProvider.INPUT_COLUMN,null == matchedColumnName ? StringUtils.EMPTY : matchedColumnName);
        if (getLookupColumnNames().size() > 0) {
          for (          String lookupColumnName : getLookupColumnNames()) {
            if (lookupColumnName.equalsIgnoreCase(matchKey.getColumn()) || lookupColumnName.equalsIgnoreCase(matchKey.getName())) {
              pr.put(""String_Node_Str"",null == matchKey.getColumn() ? StringUtils.EMPTY : lookupColumnName);
              break;
            }
          }
        }
        String algorithmType=matchKey.getAlgorithm().getAlgorithmType();
        if (retrieveDisplayValue) {
          pr.put(MatchRulesTableLabelProvider.MATCHING_TYPE,null == algorithmType ? StringUtils.EMPTY : AttributeMatcherType.valueOf(algorithmType).getLabel());
        }
 else {
          pr.put(MatchRulesTableLabelProvider.MATCHING_TYPE,null == algorithmType ? StringUtils.EMPTY : AttributeMatcherType.valueOf(algorithmType).getComponentValue());
        }
        pr.put(MatchRulesTableLabelProvider.CUSTOM_MATCHER,null == matchKey.getAlgorithm().getAlgorithmParameters() ? StringUtils.EMPTY : matchKey.getAlgorithm().getAlgorithmParameters());
        pr.put(MatchRulesTableLabelProvider.CONFIDENCE_WEIGHT,String.valueOf(matchKey.getConfidenceWeight()));
        if (retrieveDisplayValue) {
          pr.put(MatchRulesTableLabelProvider.HANDLE_NULL,null == matchKey.getHandleNull() ? StringUtils.EMPTY : HandleNullEnum.getTypeByValue(matchKey.getHandleNull()).getLabel());
        }
 else {
          pr.put(MatchRulesTableLabelProvider.HANDLE_NULL,null == matchKey.getHandleNull() ? StringUtils.EMPTY : matchKey.getHandleNull());
        }
        ruleValues.add(pr);
      }
    }
    return ruleValues;
  }
  return null;
}",0.9779900332225914
137376,"private List<Map<String,String>> getBlockingKeysFromRules(MatchRuleDefinition matchRuleDefinition,boolean retrieveDisplayValue){
  if (matchRuleDefinition != null) {
    List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
    for (    BlockKeyDefinition bkDefinition : matchRuleDefinition.getBlockKeys()) {
      Map<String,String> pr=new HashMap<String,String>();
      pr.put(BlockingKeysTableLabelProvider.BLOCKING_KEY_NAME,null == bkDefinition.getName() ? StringUtils.EMPTY : bkDefinition.getName());
      pr.put(BlockingKeysTableLabelProvider.PRECOLUMN,null == bkDefinition.getColumn() ? StringUtils.EMPTY : bkDefinition.getColumn());
      pr.put(BlockingKeysTableLabelProvider.PRE_ALGO,null == bkDefinition.getPreAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPreAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.PRE_VALUE,null == bkDefinition.getPreAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPreAlgorithm().getAlgorithmParameters());
      pr.put(BlockingKeysTableLabelProvider.KEY_ALGO,null == bkDefinition.getAlgorithm() ? StringUtils.EMPTY : bkDefinition.getAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.KEY_VALUE,null == bkDefinition.getAlgorithm() ? StringUtils.EMPTY : bkDefinition.getAlgorithm().getAlgorithmParameters());
      pr.put(BlockingKeysTableLabelProvider.POST_ALGO,null == bkDefinition.getPostAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPostAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.POST_VALUE,null == bkDefinition.getPostAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPostAlgorithm().getAlgorithmParameters());
      ruleValues.add(pr);
    }
    return ruleValues;
  }
  return null;
}","private List<Map<String,String>> getBlockingKeysFromRules(MatchRuleDefinition matchRuleDefinition,boolean retrieveDisplayValue){
  if (matchRuleDefinition != null) {
    List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
    for (    BlockKeyDefinition bkDefinition : matchRuleDefinition.getBlockKeys()) {
      Map<String,String> pr=new HashMap<String,String>();
      pr.put(BlockingKeysTableLabelProvider.BLOCKING_KEY_NAME,null == bkDefinition.getName() ? StringUtils.EMPTY : bkDefinition.getName());
      String matchedColumnName=matchExistingColumnForBlockingKey(bkDefinition);
      pr.put(BlockingKeysTableLabelProvider.PRECOLUMN,null == matchedColumnName ? StringUtils.EMPTY : matchedColumnName);
      pr.put(BlockingKeysTableLabelProvider.PRE_ALGO,null == bkDefinition.getPreAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPreAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.PRE_VALUE,null == bkDefinition.getPreAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPreAlgorithm().getAlgorithmParameters());
      pr.put(BlockingKeysTableLabelProvider.KEY_ALGO,null == bkDefinition.getAlgorithm() ? StringUtils.EMPTY : bkDefinition.getAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.KEY_VALUE,null == bkDefinition.getAlgorithm() ? StringUtils.EMPTY : bkDefinition.getAlgorithm().getAlgorithmParameters());
      pr.put(BlockingKeysTableLabelProvider.POST_ALGO,null == bkDefinition.getPostAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPostAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.POST_VALUE,null == bkDefinition.getPostAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPostAlgorithm().getAlgorithmParameters());
      ruleValues.add(pr);
    }
    return ruleValues;
  }
  return null;
}",0.961257720381808
137377,"/** 
 * DOC sizhaoliu Comment method ""getMatchRulesFromFiles"".
 * @param files
 * @param retrieveDisplayValue get the display value when this parameter is set to true, otherwise, get thecomponent value.
 * @return
 */
public List<Map<String,String>> getMatchRulesFromFiles(Object[] files,boolean retrieveDisplayValue){
  List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
  for (  Object rule : files) {
    if (rule instanceof IFile) {
      MatchRuleDefinition matchRuleDefinition=DQRuleResourceFileHelper.getInstance().findMatchRule((IFile)rule);
      matchExistingColumnForMatchRules(matchRuleDefinition);
      ruleValues.addAll(getMatchRulesFromRules(matchRuleDefinition,retrieveDisplayValue));
    }
  }
  return ruleValues;
}","/** 
 * DOC sizhaoliu Comment method ""getMatchRulesFromFiles"".
 * @param files
 * @param retrieveDisplayValue get the display value when this parameter is set to true, otherwise, get thecomponent value.
 * @return
 */
public List<Map<String,String>> getMatchRulesFromFiles(Object[] files,boolean retrieveDisplayValue){
  List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
  for (  Object rule : files) {
    if (rule instanceof IFile) {
      MatchRuleDefinition matchRuleDefinition=DQRuleResourceFileHelper.getInstance().findMatchRule((IFile)rule);
      ruleValues.addAll(getMatchRulesFromRules(matchRuleDefinition,retrieveDisplayValue));
    }
  }
  return ruleValues;
}",0.957960027567195
137378,"public void openIndicatorOptionDialog(Shell shell,TreeItem indicatorItem){
  if (isDirty()) {
    masterPage.doSave(null);
  }
  Indicator indicator=(Indicator)indicatorItem.getData(INDICATOR_KEY);
  ColumnSetIndicatorUnit indicatorUnit=new ColumnSetIndicatorUnit(IndicatorEnum.findIndicatorEnum(indicator.eClass()),indicator);
  IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
  if (indicatorUnit.isExsitingForm()) {
    String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
    OpeningHelpWizardDialog optionDialog=new OpeningHelpWizardDialog(shell,wizard,href);
    if (Window.OK == optionDialog.open()) {
      masterPage.setDirty(wizard.isDirty());
      createIndicatorParameters(indicatorItem,indicator);
    }
  }
 else {
    MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
}","public void openIndicatorOptionDialog(Shell shell,TreeItem indicatorItem){
  if (isDirty()) {
    masterPage.doSave(null);
  }
  ColumnSetIndicatorUnit indicatorUnit=(ColumnSetIndicatorUnit)indicatorItem.getData(INDICATOR_KEY);
  IndicatorOptionsWizard wizard=new IndicatorOptionsWizard(indicatorUnit);
  if (indicatorUnit.isExsitingForm()) {
    String href=FormEnum.getFirstFormHelpHref(indicatorUnit);
    OpeningHelpWizardDialog optionDialog=new OpeningHelpWizardDialog(shell,wizard,href);
    if (Window.OK == optionDialog.open()) {
      masterPage.setDirty(wizard.isDirty());
      createIndicatorParameters(indicatorItem,indicatorUnit.getIndicator());
    }
  }
 else {
    MessageDialogWithToggle.openInformation(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  }
}",0.8653295128939829
137379,"public boolean isExsitingForm(){
  if (getForms().length > 0) {
    return true;
  }
  return false;
}","public boolean isExsitingForm(){
  if (getForms() != null) {
    return true;
  }
  return false;
}",0.9154228855721394
137380,"@Override public String getLabeledAttributeMatchWeights(){
  final String separator=""String_Node_Str"";
  StringBuffer buffer=new StringBuffer();
  double[] currentAttributeMatchingWeights=this.getCurrentAttributeMatchingWeights();
  for (int i=0; i < currentAttributeMatchingWeights.length; i++) {
    IAttributeMatcher attributeMatcher=this.attributeMatchers[i];
    if (attributeMatcher instanceof DummyMatcher) {
      continue;
    }
    if (displayLabels) {
      String attributeName=attributeMatcher.getAttributeName();
      if (attributeName != null) {
        if (buffer.length() > 0) {
          buffer.append(separator);
        }
        buffer.append(attributeName).append(""String_Node_Str"");
      }
    }
    buffer.append(currentAttributeMatchingWeights[i]);
  }
  return buffer.toString();
}","@Override public String getLabeledAttributeMatchWeights(){
  final String separator=""String_Node_Str"";
  StringBuffer buffer=new StringBuffer();
  double[] currentAttributeMatchingWeights=this.getCurrentAttributeMatchingWeights();
  for (int i=0; i < currentAttributeMatchingWeights.length; i++) {
    IAttributeMatcher attributeMatcher=this.attributeMatchers[i];
    if (attributeMatcher instanceof DummyMatcher) {
      continue;
    }
    if (buffer.length() > 0) {
      buffer.append(separator);
    }
    if (displayLabels) {
      String attributeName=attributeMatcher.getAttributeName();
      if (attributeName != null) {
        buffer.append(attributeName).append(""String_Node_Str"");
      }
    }
    buffer.append(currentAttributeMatchingWeights[i]);
  }
  return buffer.toString();
}",0.9066002490660025
137381,"@Override public String getLabeledAttributeMatchWeights(){
  final String separator=""String_Node_Str"";
  StringBuffer buffer=new StringBuffer();
  double[] currentAttributeMatchingWeights=this.getCurrentAttributeMatchingWeights();
  for (int i=0; i < currentAttributeMatchingWeights.length; i++) {
    IAttributeMatcher attributeMatcher=this.attributeMatchers[i];
    if (attributeMatcher instanceof DummyMatcher) {
      continue;
    }
    if (displayLabels) {
      String attributeName=attributeMatcher.getAttributeName();
      if (attributeName != null) {
        if (buffer.length() > 0) {
          buffer.append(separator);
        }
        buffer.append(attributeName).append(""String_Node_Str"");
      }
    }
    buffer.append(currentAttributeMatchingWeights[i]);
  }
  return buffer.toString();
}","@Override public String getLabeledAttributeMatchWeights(){
  final String separator=""String_Node_Str"";
  StringBuffer buffer=new StringBuffer();
  double[] currentAttributeMatchingWeights=this.getCurrentAttributeMatchingWeights();
  for (int i=0; i < currentAttributeMatchingWeights.length; i++) {
    IAttributeMatcher attributeMatcher=this.attributeMatchers[i];
    if (attributeMatcher instanceof DummyMatcher) {
      continue;
    }
    if (buffer.length() > 0) {
      buffer.append(separator);
    }
    if (displayLabels) {
      String attributeName=attributeMatcher.getAttributeName();
      if (attributeName != null) {
        buffer.append(attributeName).append(""String_Node_Str"");
      }
    }
    buffer.append(currentAttributeMatchingWeights[i]);
  }
  return buffer.toString();
}",0.9066002490660025
137382,"@Override public String toString(){
  StringBuffer buf=new StringBuffer();
  buf.append(this.getClass().getSimpleName()).append(""String_Node_Str"");
  buf.append(this.recordSize).append(""String_Node_Str"");
  for (int i=0; i < usedIndices.length; i++) {
    buf.append(this.attributeMatchers[usedIndices[i]].getMatchType()).append(""String_Node_Str"");
  }
  return buf.toString();
}","@Override public String toString(){
  StringBuffer buf=new StringBuffer();
  buf.append(this.getClass().getSimpleName()).append(""String_Node_Str"");
  buf.append(this.recordSize).append(""String_Node_Str"");
  for (  int usedIndice : usedIndices) {
    buf.append(this.attributeMatchers[usedIndice].getMatchType()).append(""String_Node_Str"");
  }
  return buf.toString();
}",0.9358288770053476
137383,"@Override public String getLabeledAttributeMatchWeights(){
  final String separator=""String_Node_Str"";
  StringBuffer buffer=new StringBuffer();
  double[] currentAttributeMatchingWeights=this.getCurrentAttributeMatchingWeights();
  for (int i=0; i < currentAttributeMatchingWeights.length; i++) {
    IAttributeMatcher attributeMatcher=this.attributeMatchers[i];
    if (attributeMatcher instanceof DummyMatcher) {
      buffer=new StringBuffer(StringUtils.removeEnd(buffer.toString(),separator));
      continue;
    }
    if (displayLabels) {
      String attributeName=attributeMatcher.getAttributeName();
      if (attributeName != null) {
        buffer.append(attributeName).append(""String_Node_Str"");
      }
    }
    buffer.append(currentAttributeMatchingWeights[i]);
    if (i != currentAttributeMatchingWeights.length - 1) {
      buffer.append(separator);
    }
  }
  return buffer.toString();
}","@Override public String getLabeledAttributeMatchWeights(){
  final String separator=""String_Node_Str"";
  StringBuffer buffer=new StringBuffer();
  double[] currentAttributeMatchingWeights=this.getCurrentAttributeMatchingWeights();
  for (int i=0; i < currentAttributeMatchingWeights.length; i++) {
    IAttributeMatcher attributeMatcher=this.attributeMatchers[i];
    if (attributeMatcher instanceof DummyMatcher) {
      continue;
    }
    if (displayLabels) {
      String attributeName=attributeMatcher.getAttributeName();
      if (attributeName != null) {
        if (buffer.length() > 0) {
          buffer.append(separator);
        }
        buffer.append(attributeName).append(""String_Node_Str"");
      }
    }
    buffer.append(currentAttributeMatchingWeights[i]);
  }
  return buffer.toString();
}",0.81537565521258
137384,"/** 
 * Test method for   {@link org.talend.dq.dbms.MySQLDbmsLanguage#regexLike(java.lang.String,java.lang.String)}.
 */
@Test public void testRegexLike(){
  String regexLike=mySQLDbmsLanguage.regexLike(REGEXP_1,REGEXP_2);
  Assert.assertNotNull(regexLike);
  Assert.assertEquals(regexLike,SPACE + REGEXP_1 + ""String_Node_Str""+ REGEXP_2+ SPACE);
}","/** 
 * Test method for   {@link org.talend.dq.dbms.MySQLDbmsLanguage#regexLike(java.lang.String,java.lang.String)}.
 */
@Test public void testRegexLike(){
  String regexLike=mySQLDbmsLanguage.regexLike(REGEXP_1,REGEXP_2);
  Assert.assertNotNull(regexLike);
  Assert.assertEquals(SPACE + REGEXP_1 + ""String_Node_Str""+ REGEXP_2+ SPACE,regexLike);
}",0.9711815561959656
137385,"/** 
 * Test method for   {@link org.talend.dq.dbms.MySQLDbmsLanguage#regexNotLike(java.lang.String,java.lang.String)}.
 */
@Test public void testRegexNotLike(){
  String regexLike=mySQLDbmsLanguage.regexNotLike(REGEXP_1,REGEXP_2);
  Assert.assertNotNull(regexLike);
  Assert.assertEquals(regexLike,SPACE + REGEXP_1 + ""String_Node_Str""+ REGEXP_2+ SPACE);
}","/** 
 * Test method for   {@link org.talend.dq.dbms.MySQLDbmsLanguage#regexNotLike(java.lang.String,java.lang.String)}.
 */
@Test public void testRegexNotLike(){
  String regexLike=mySQLDbmsLanguage.regexNotLike(REGEXP_1,REGEXP_2);
  Assert.assertNotNull(regexLike);
  Assert.assertEquals(SPACE + REGEXP_1 + ""String_Node_Str""+ REGEXP_2+ SPACE,regexLike);
}",0.9719101123595506
137386,"/** 
 * when the drill down is : invalid, should find all rows which not start with 1~9,and 0. this include: null, and not digitals.
 * @return
 */
private String getInvalidClause(){
  String value=""String_Node_Str"";
  if (isSybase()) {
    return columnName + ""String_Node_Str"" + this.columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isPostGreSQL()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isTeradata()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isOracle()) {
    return columnName + ""String_Node_Str"" + ""String_Node_Str""+ columnName+ ""String_Node_Str"";
  }
 else   if (isDB2()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (isSqlServer()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isInformix()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
  return columnName + ""String_Node_Str"" + columnName+ value;
}","/** 
 * when the drill down is : invalid, should find all rows which not start with 1~9,and 0. this include: null, and not digitals.
 * @return
 */
private String getInvalidClause(){
  String value=""String_Node_Str"";
  if (isSybase()) {
    return columnName + ""String_Node_Str"" + this.columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isPostGreSQL()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isTeradata()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isOracle()) {
    return columnName + ""String_Node_Str"" + ""String_Node_Str""+ columnName+ ""String_Node_Str"";
  }
 else   if (isDB2()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (isSqlServer()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isInformix()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isNetezza()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
  return columnName + ""String_Node_Str"" + columnName+ value;
}",0.9555369127516778
137387,"@Override protected String getInstantiatedClause(){
  String function=getFunction();
  if (function != null && (DbmsLanguageFactory.isInfomix(this.dbmsLanguage.getDbmsName()) || DbmsLanguageFactory.isOracle(this.dbmsLanguage.getDbmsName()))) {
    function=columnName;
  }
  String clause=entity.isLabelNull() || function == null ? columnName + dbmsLanguage.isNull() : SOUNDEX_PREFIX + ""String_Node_Str"" + function+ ""String_Node_Str""+ dbmsLanguage.equal()+ SOUNDEX_PREFIX+ ""String_Node_Str""+ entity.getKey()+ ""String_Node_Str"";
  return clause;
}","@Override protected String getInstantiatedClause(){
  String function=getFunction();
  if (function != null && (DbmsLanguageFactory.isInfomix(this.dbmsLanguage.getDbmsName()) || DbmsLanguageFactory.isOracle(this.dbmsLanguage.getDbmsName()))) {
    function=columnName;
  }
  String clause=entity.isLabelNull() || function == null ? columnName + dbmsLanguage.isNull() : dbmsLanguage.getSoundexPrefix() + ""String_Node_Str"" + function+ ""String_Node_Str""+ dbmsLanguage.equal()+ dbmsLanguage.getSoundexPrefix()+ ""String_Node_Str""+ entity.getKey()+ ""String_Node_Str"";
  return clause;
}",0.9236234458259324
137388,"/** 
 * Test the text by the regular text of regularText.
 */
private void testRegularText(){
  if (isJavaEngine) {
    String regexStr=regularText.getText();
    if (regexStr.length() >= 2 && regexStr.startsWith(""String_Node_Str"") && regexStr.endsWith(""String_Node_Str"")) {
      regexStr=regexStr.substring(1,regexStr.length() - 1);
    }
    boolean flag=java.util.regex.Pattern.compile(regexStr).matcher(testText.getText()).find();
    if (flag) {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
 else {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
  }
 else {
    for (    IRepositoryNode connRepNode : listTdDataProviders) {
      ConnectionItem connItem=(ConnectionItem)connRepNode.getObject().getProperty().getItem();
      Connection tddataprovider=connItem.getConnection();
      if (tddataprovider.getName().equals(dbCombo.getText())) {
        DbmsLanguage createDbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tddataprovider);
        if (null != createDbmsLanguage) {
          createDbmsLanguage.setFunctionName(getFunctionName());
        }
        String selectRegexpTestString=createDbmsLanguage.getSelectRegexpTestString(testText.getText(),regularText.getText());
        TypedReturnCode<java.sql.Connection> rcConn=JavaSqlFactory.createConnection(tddataprovider);
        try {
          if (!rcConn.isOk()) {
            throw new DataprofilerCoreException(rcConn.getMessage());
          }
          java.sql.Connection connection=rcConn.getObject();
          Statement createStatement=connection.createStatement();
          ResultSet resultSet=createStatement.executeQuery(selectRegexpTestString);
          while (resultSet.next()) {
            String okString=resultSet.getString(1);
            if (""String_Node_Str"".equalsIgnoreCase(okString) || (createDbmsLanguage.getDbmsName().equals(SupportDBUrlType.POSTGRESQLEFAULTURL.getLanguage()) && ""String_Node_Str"".equalsIgnoreCase(okString))) {
              emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
              resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              return;
            }
          }
          emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
          resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          return;
        }
 catch (        Exception exception) {
          log.error(exception,exception);
          String exceptionName=exception.getClass().getName();
          Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
          MessageBoxExceptionHandler.process(exception,shell);
          emoticonLabel.setImage(null);
          return;
        }
 finally {
          ConnectionUtils.closeConnection(rcConn.getObject());
        }
      }
    }
  }
  MessageDialog.openWarning(new Shell(),""String_Node_Str"",NO_DATABASE_SELECTEDED);
}","/** 
 * Test the text by the regular text of regularText.
 */
private void testRegularText(){
  if (isJavaEngine) {
    String regexStr=regularText.getText();
    if (regexStr.length() >= 2 && regexStr.startsWith(""String_Node_Str"") && regexStr.endsWith(""String_Node_Str"")) {
      regexStr=regexStr.substring(1,regexStr.length() - 1);
    }
    boolean flag=java.util.regex.Pattern.compile(regexStr).matcher(testText.getText()).find();
    if (flag) {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
 else {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
  }
 else {
    for (    IRepositoryNode connRepNode : listTdDataProviders) {
      ConnectionItem connItem=(ConnectionItem)connRepNode.getObject().getProperty().getItem();
      Connection tddataprovider=connItem.getConnection();
      if (tddataprovider.getName().equals(dbCombo.getText())) {
        DbmsLanguage createDbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tddataprovider);
        String selectRegexpTestString=null;
        if (null != createDbmsLanguage) {
          createDbmsLanguage.setFunctionName(getFunctionName());
          selectRegexpTestString=createDbmsLanguage.getSelectRegexpTestString(testText.getText(),regularText.getText());
        }
        TypedReturnCode<java.sql.Connection> rcConn=JavaSqlFactory.createConnection(tddataprovider);
        try {
          if (!rcConn.isOk()) {
            throw new DataprofilerCoreException(rcConn.getMessage());
          }
          java.sql.Connection connection=rcConn.getObject();
          Statement createStatement=connection.createStatement();
          ResultSet resultSet=createStatement.executeQuery(selectRegexpTestString);
          while (resultSet.next()) {
            String okString=resultSet.getString(1);
            if (""String_Node_Str"".equalsIgnoreCase(okString) || (createDbmsLanguage.getDbmsName().equals(SupportDBUrlType.POSTGRESQLEFAULTURL.getLanguage()) && ""String_Node_Str"".equalsIgnoreCase(okString))) {
              emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
              resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              return;
            }
          }
          emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
          resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          return;
        }
 catch (        Exception exception) {
          log.error(exception,exception);
          String exceptionName=exception.getClass().getName();
          Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
          MessageBoxExceptionHandler.process(exception,shell);
          emoticonLabel.setImage(null);
          return;
        }
 finally {
          ConnectionUtils.closeConnection(rcConn.getObject());
        }
      }
    }
  }
  MessageDialog.openWarning(new Shell(),""String_Node_Str"",NO_DATABASE_SELECTEDED);
}",0.953625498007968
137389,"/** 
 * DOC msjian Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  DataExplorerTestHelper.initDataExplorer();
  patternExplorer=new PatternExplorer();
  PatternMatchingIndicator indicator=mock(PatternMatchingIndicator.class);
  when(indicator.eClass()).thenReturn(null);
  ModelElement element=mock(ModelElement.class);
  when(element.getName()).thenReturn(""String_Node_Str"");
  when(indicator.getAnalyzedElement()).thenReturn(element);
  indicator.setAnalyzedElement(element);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getRegexPatternString(indicator)).thenReturn(RES_VALIED_ROWS);
  when(dbmsLanguage.quote(anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexNotLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.where()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.and()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.from()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.or()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.isNull()).thenReturn(""String_Node_Str"");
  Analysis analysis=DataExplorerTestHelper.getAnalysis(indicator,dbmsLanguage);
  patternExplorer.setAnalysis(analysis);
  ChartDataEntity cdEntity=mock(ChartDataEntity.class);
  when(cdEntity.getIndicator()).thenReturn(indicator);
  PowerMockito.mockStatic(IndicatorEnum.class);
  when(IndicatorEnum.findIndicatorEnum(indicator.eClass())).thenReturn(IndicatorEnum.RowCountIndicatorEnum);
  patternExplorer.setEnitty(cdEntity);
  Expression instantiatedExpression=mock(Expression.class);
  when(dbmsLanguage.getInstantiatedExpression(indicator)).thenReturn(instantiatedExpression);
  when(instantiatedExpression.getBody()).thenReturn(""String_Node_Str"");
}","/** 
 * DOC msjian Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  DataExplorerTestHelper.initDataExplorer();
  patternExplorer=new PatternExplorer();
  PatternMatchingIndicator indicator=mock(PatternMatchingIndicator.class);
  when(indicator.eClass()).thenReturn(null);
  ModelElement element=mock(ModelElement.class);
  when(element.getName()).thenReturn(""String_Node_Str"");
  when(indicator.getAnalyzedElement()).thenReturn(element);
  indicator.setAnalyzedElement(element);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getRegexPatternString(indicator)).thenReturn(RES_VALIED_ROWS);
  when(dbmsLanguage.quote(anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regularFunctionBodyWithReturnValue(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.notRegularFunctionBodyWithReturnValue(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.where()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.and()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.from()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.or()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.isNull()).thenReturn(""String_Node_Str"");
  Analysis analysis=DataExplorerTestHelper.getAnalysis(indicator,dbmsLanguage);
  patternExplorer.setAnalysis(analysis);
  ChartDataEntity cdEntity=mock(ChartDataEntity.class);
  when(cdEntity.getIndicator()).thenReturn(indicator);
  PowerMockito.mockStatic(IndicatorEnum.class);
  when(IndicatorEnum.findIndicatorEnum(indicator.eClass())).thenReturn(IndicatorEnum.RowCountIndicatorEnum);
  patternExplorer.setEnitty(cdEntity);
  Expression instantiatedExpression=mock(Expression.class);
  when(dbmsLanguage.getInstantiatedExpression(indicator)).thenReturn(instantiatedExpression);
  when(instantiatedExpression.getBody()).thenReturn(""String_Node_Str"");
}",0.9373024236037936
137390,"/** 
 * get the Valid Rows Statement.
 * @return
 */
public String getValidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + functionReturnValue;
  return getRowsStatement(regexCmp);
}","/** 
 * get the Valid Rows Statement.
 * @return
 */
public String getValidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regularFunctionBodyWithReturnValue(columnName,regexPatternString);
  return getRowsStatement(regexCmp);
}",0.953995157384988
137391,"/** 
 * get the Invalid Rows Statement.
 * @return
 */
public String getInvalidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + functionReturnValue;
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getRowsStatement(pattCondStr);
}","/** 
 * get the Invalid Rows Statement.
 * @return
 */
public String getInvalidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.notRegularFunctionBodyWithReturnValue(columnName,regexPatternString);
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getRowsStatement(pattCondStr);
}",0.9563567362428842
137392,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=this.indicator.getInstantiatedExpressions();
  if (instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String body=expression.getBody().toUpperCase();
    String functionName=body.split(""String_Node_Str"").length > 1 ? body.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionReturnValue=functionName.split(""String_Node_Str"").length > 1 ? functionName.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionName=functionName.split(""String_Node_Str"").length > 1 ? functionName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
    dbmsLanguage.setFunctionName(functionName);
    functionReturnValue=functionReturnValue.split(""String_Node_Str"").length > 1 ? functionReturnValue.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionReturnValue=functionReturnValue.split(""String_Node_Str"").length > 1 ? functionReturnValue.split(""String_Node_Str"")[0] : ""String_Node_Str"";
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=this.indicator.getInstantiatedExpressions();
  if (instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String regularExpressionFunctionName=dbmsLanguage.extractRegularExpressionFunction(expression);
    dbmsLanguage.setRegularExpressionFunction(regularExpressionFunctionName);
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}",0.6956228956228956
137393,"/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the valid Value of select column
 */
public String getValidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + functionReturnValue;
  return getValuesStatement(columnName,regexCmp);
}","/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the valid Value of select column
 */
public String getValidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regularFunctionBodyWithReturnValue(columnName,regexPatternString);
  return getValuesStatement(columnName,regexCmp);
}",0.9588447653429604
137394,"public boolean isImplementRegexFunction(String menuLabel){
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  if (menuLabel.equals(MENU_VIEW_ROWS) || menuLabel.equals(MENU_VIEW_VALID_VALUES)) {
    if (dbmsLanguage.regexLike(columnName,regexPatternString) != null) {
      return true;
    }
  }
 else   if (menuLabel.equals(DataExplorer.MENU_VIEW_INVALID_ROWS) || menuLabel.equals(MENU_VIEW_INVALID_VALUES)) {
    if (dbmsLanguage.regexNotLike(columnName,regexPatternString) != null) {
      return true;
    }
  }
  return false;
}","public boolean isImplementRegexFunction(String menuLabel){
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  if (menuLabel.equals(MENU_VIEW_ROWS) || menuLabel.equals(MENU_VIEW_VALID_VALUES)) {
    if (dbmsLanguage.regularFunctionBody(columnName,regexPatternString) != null) {
      return true;
    }
  }
 else   if (menuLabel.equals(DataExplorer.MENU_VIEW_INVALID_ROWS) || menuLabel.equals(MENU_VIEW_INVALID_VALUES)) {
    if (dbmsLanguage.notRegularFunctionBody(columnName,regexPatternString) != null) {
      return true;
    }
  }
  return false;
}",0.951219512195122
137395,"/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the invalid Value of select column
 */
public String getInvalidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + functionReturnValue;
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getValuesStatement(columnName,pattCondStr);
}","/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the invalid Value of select column
 */
public String getInvalidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.notRegularFunctionBodyWithReturnValue(columnName,regexPatternString);
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getValuesStatement(columnName,pattCondStr);
}",0.960046323103648
137396,"@Override protected String getInstantiatedClause(){
  String function=getFunction();
  if (function != null && (DbmsLanguageFactory.isInfomix(this.dbmsLanguage.getDbmsName()) || DbmsLanguageFactory.isOracle(this.dbmsLanguage.getDbmsName()))) {
    function=columnName;
  }
  String clause=entity.isLabelNull() || function == null ? columnName + dbmsLanguage.isNull() : SOUNDEX_PREFIX + ""String_Node_Str"" + function+ ""String_Node_Str""+ dbmsLanguage.equal()+ SOUNDEX_PREFIX+ ""String_Node_Str""+ entity.getKey()+ ""String_Node_Str"";
  return clause;
}","@Override protected String getInstantiatedClause(){
  String function=getFunction();
  if (function != null && (DbmsLanguageFactory.isInfomix(this.dbmsLanguage.getDbmsName()) || DbmsLanguageFactory.isOracle(this.dbmsLanguage.getDbmsName()))) {
    function=columnName;
  }
  String clause=entity.isLabelNull() || function == null ? columnName + dbmsLanguage.isNull() : dbmsLanguage.getSoundexPrefix() + ""String_Node_Str"" + function+ ""String_Node_Str""+ dbmsLanguage.equal()+ dbmsLanguage.getSoundexPrefix()+ ""String_Node_Str""+ entity.getKey()+ ""String_Node_Str"";
  return clause;
}",0.9236234458259324
137397,"/** 
 * Test method for   {@link org.talend.dq.dbms.MySQLDbmsLanguage#regexLike(java.lang.String,java.lang.String)}.
 */
@Test public void testRegexLike(){
  String regexLike=mySQLDbmsLanguage.regexLike(REGEXP_1,REGEXP_2);
  Assert.assertNotNull(regexLike);
  Assert.assertEquals(regexLike,SPACE + REGEXP_1 + ""String_Node_Str""+ REGEXP_2+ SPACE);
}","/** 
 * Test method for   {@link org.talend.dq.dbms.MySQLDbmsLanguage#regexLike(java.lang.String,java.lang.String)}.
 */
@Test public void testRegexLike(){
  String regexLike=mySQLDbmsLanguage.regexLike(REGEXP_1,REGEXP_2);
  Assert.assertNotNull(regexLike);
  Assert.assertEquals(SPACE + REGEXP_1 + ""String_Node_Str""+ REGEXP_2+ SPACE,regexLike);
}",0.9711815561959656
137398,"/** 
 * Test method for   {@link org.talend.dq.dbms.MySQLDbmsLanguage#regexNotLike(java.lang.String,java.lang.String)}.
 */
@Test public void testRegexNotLike(){
  String regexLike=mySQLDbmsLanguage.regexNotLike(REGEXP_1,REGEXP_2);
  Assert.assertNotNull(regexLike);
  Assert.assertEquals(regexLike,SPACE + REGEXP_1 + ""String_Node_Str""+ REGEXP_2+ SPACE);
}","/** 
 * Test method for   {@link org.talend.dq.dbms.MySQLDbmsLanguage#regexNotLike(java.lang.String,java.lang.String)}.
 */
@Test public void testRegexNotLike(){
  String regexLike=mySQLDbmsLanguage.regexNotLike(REGEXP_1,REGEXP_2);
  Assert.assertNotNull(regexLike);
  Assert.assertEquals(SPACE + REGEXP_1 + ""String_Node_Str""+ REGEXP_2+ SPACE,regexLike);
}",0.9719101123595506
137399,"/** 
 * DOC msjian Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  DataExplorerTestHelper.initDataExplorer();
  patternExplorer=new PatternExplorer();
  PatternMatchingIndicator indicator=mock(PatternMatchingIndicator.class);
  when(indicator.eClass()).thenReturn(null);
  ModelElement element=mock(ModelElement.class);
  when(element.getName()).thenReturn(""String_Node_Str"");
  when(indicator.getAnalyzedElement()).thenReturn(element);
  indicator.setAnalyzedElement(element);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getRegexPatternString(indicator)).thenReturn(RES_VALIED_ROWS);
  when(dbmsLanguage.quote(anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regularFunctionBodyWithReturnValue(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.notRegularFunctionBodyWithReturnValue(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.where()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.and()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.from()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.or()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.isNull()).thenReturn(""String_Node_Str"");
  Analysis analysis=DataExplorerTestHelper.getAnalysis(indicator,dbmsLanguage);
  patternExplorer.setAnalysis(analysis);
  ChartDataEntity cdEntity=mock(ChartDataEntity.class);
  when(cdEntity.getIndicator()).thenReturn(indicator);
  PowerMockito.mockStatic(IndicatorEnum.class);
  when(IndicatorEnum.findIndicatorEnum(indicator.eClass())).thenReturn(IndicatorEnum.RowCountIndicatorEnum);
  patternExplorer.setEnitty(cdEntity);
  Expression instantiatedExpression=mock(Expression.class);
  when(dbmsLanguage.getInstantiatedExpression(indicator)).thenReturn(instantiatedExpression);
  when(instantiatedExpression.getBody()).thenReturn(""String_Node_Str"");
}","/** 
 * DOC msjian Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  DataExplorerTestHelper.initDataExplorer();
  patternExplorer=new PatternExplorer();
  PatternMatchingIndicator indicator=mock(PatternMatchingIndicator.class);
  when(indicator.eClass()).thenReturn(null);
  ModelElement element=mock(ModelElement.class);
  when(element.getName()).thenReturn(""String_Node_Str"");
  when(indicator.getAnalyzedElement()).thenReturn(element);
  indicator.setAnalyzedElement(element);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getRegexPatternString(indicator)).thenReturn(RES_VALIED_ROWS);
  when(dbmsLanguage.quote(anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexNotLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getFunctionReturnValue()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.where()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.and()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.from()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.or()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.isNull()).thenReturn(""String_Node_Str"");
  Analysis analysis=DataExplorerTestHelper.getAnalysis(indicator,dbmsLanguage);
  patternExplorer.setAnalysis(analysis);
  ChartDataEntity cdEntity=mock(ChartDataEntity.class);
  when(cdEntity.getIndicator()).thenReturn(indicator);
  PowerMockito.mockStatic(IndicatorEnum.class);
  when(IndicatorEnum.findIndicatorEnum(indicator.eClass())).thenReturn(IndicatorEnum.RowCountIndicatorEnum);
  patternExplorer.setEnitty(cdEntity);
  Expression instantiatedExpression=mock(Expression.class);
  when(dbmsLanguage.getInstantiatedExpression(indicator)).thenReturn(instantiatedExpression);
  when(instantiatedExpression.getBody()).thenReturn(""String_Node_Str"");
}",0.9155693261037956
137400,"/** 
 * get the Valid Rows Statement.
 * @return
 */
public String getValidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regularFunctionBodyWithReturnValue(columnName,regexPatternString);
  return getRowsStatement(regexCmp);
}","/** 
 * get the Valid Rows Statement.
 * @return
 */
public String getValidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  return getRowsStatement(regexCmp);
}",0.9228321400159109
137401,"/** 
 * get the Invalid Rows Statement.
 * @return
 */
public String getInvalidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.notRegularFunctionBodyWithReturnValue(columnName,regexPatternString);
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getRowsStatement(pattCondStr);
}","/** 
 * get the Invalid Rows Statement.
 * @return
 */
public String getInvalidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getRowsStatement(pattCondStr);
}",0.9455909943714822
137402,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=this.indicator.getInstantiatedExpressions();
  if (instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String regularExpressionFunctionName=dbmsLanguage.extractRegularExpressionFunction(expression);
    dbmsLanguage.setRegularExpressionFunction(regularExpressionFunctionName);
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=this.indicator.getInstantiatedExpressions();
  if (instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String regularExpressionFunctionName=dbmsLanguage.extractRegularExpressionFunction(expression);
    dbmsLanguage.setRegularExpressionFunction(regularExpressionFunctionName);
    dbmsLanguage.setFunctionReturnValue(expression);
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}",0.978017420157611
137403,"/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the valid Value of select column
 */
public String getValidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regularFunctionBodyWithReturnValue(columnName,regexPatternString);
  return getValuesStatement(columnName,regexCmp);
}","/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the valid Value of select column
 */
public String getValidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  return getValuesStatement(columnName,regexCmp);
}",0.946543121881682
137404,"public boolean isImplementRegexFunction(String menuLabel){
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  if (menuLabel.equals(MENU_VIEW_VALID_ROWS) || menuLabel.equals(MENU_VIEW_VALID_VALUES)) {
    if (dbmsLanguage.regularFunctionBody(columnName,regexPatternString) != null) {
      return true;
    }
  }
 else   if (menuLabel.equals(DataExplorer.MENU_VIEW_INVALID_ROWS) || menuLabel.equals(MENU_VIEW_INVALID_VALUES)) {
    if (dbmsLanguage.notRegularFunctionBody(columnName,regexPatternString) != null) {
      return true;
    }
  }
  return false;
}","public boolean isImplementRegexFunction(String menuLabel){
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  if (menuLabel.equals(MENU_VIEW_VALID_ROWS) || menuLabel.equals(MENU_VIEW_VALID_VALUES)) {
    if (dbmsLanguage.regexLike(columnName,regexPatternString) != null) {
      return true;
    }
  }
 else   if (menuLabel.equals(DataExplorer.MENU_VIEW_INVALID_ROWS) || menuLabel.equals(MENU_VIEW_INVALID_VALUES)) {
    if (dbmsLanguage.regexNotLike(columnName,regexPatternString) != null) {
      return true;
    }
  }
  return false;
}",0.9517241379310344
137405,"/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the invalid Value of select column
 */
public String getInvalidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.notRegularFunctionBodyWithReturnValue(columnName,regexPatternString);
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getValuesStatement(columnName,pattCondStr);
}","/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the invalid Value of select column
 */
public String getInvalidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getValuesStatement(columnName,pattCondStr);
}",0.9501432664756448
137406,"/** 
 * get the body of not Regular function match
 * @param element
 * @param regex
 * @return
 * @deprecated use {@link #notRegularFunctionBody(String,String)} instead of it
 */
@Deprecated public String regexNotLike(String element,String regex){
  return notRegularFunctionBody(element,regex);
}","/** 
 * method ""regexNotLike""
 * @param element
 * @param regex
 * @return get the String of Regular function which is not match(for example :""not regex_like(element,regex)"")
 */
public String regexNotLike(String element,String regex){
  String functionNameSQL=regexLike(element,regex);
  if (functionNameSQL == null) {
    return null;
  }
  return this.not() + functionNameSQL;
}",0.1708394698085419
137407,"/** 
 * Method ""getSelectRegexpTestString"".
 * @param stringToCheck a string to check against the regular expression (can contain quotes at start and end)
 * @param regex a regular expression
 * @return the appropriate SQL SELECT statement that can be used to check a string against a regular expression.
 */
public String getSelectRegexpTestString(String stringToCheck,String regex){
  String surroundedTestString=(stringToCheck.startsWith(""String_Node_Str"") && stringToCheck.endsWith(""String_Node_Str"")) ? stringToCheck : surroundWith('\'',stringToCheck,'\'');
  String regexLikeExpression=regularFunctionBody(surroundedTestString,regex);
  if (regexLikeExpression == null) {
    return null;
  }
  return getSelectRegexp(regexLikeExpression);
}","/** 
 * Method ""getSelectRegexpTestString"".
 * @param stringToCheck a string to check against the regular expression (can contain quotes at start and end)
 * @param regex a regular expression
 * @return the appropriate SQL SELECT statement that can be used to check a string against a regular expression.
 */
public String getSelectRegexpTestString(String stringToCheck,String regex){
  String surroundedTestString=(stringToCheck.startsWith(""String_Node_Str"") && stringToCheck.endsWith(""String_Node_Str"")) ? stringToCheck : surroundWith('\'',stringToCheck,'\'');
  String regexLikeExpression=regexLike(surroundedTestString,regex);
  if (regexLikeExpression == null) {
    return null;
  }
  return getSelectRegexp(regexLikeExpression);
}",0.9851752021563344
137408,"/** 
 * remember the result value for regular expression.So that we can get complete expression and Normal it should be ""=1""
 */
private void setFunctionReturnValue(String inputStr){
  String tempString=inputStr.split(""String_Node_Str"").length > 1 ? inputStr.split(""String_Node_Str"")[1] : ""String_Node_Str"";
  regularfunctionReturnValue=tempString.split(""String_Node_Str"").length > 1 ? tempString.split(""String_Node_Str"")[0] : ""String_Node_Str"";
}","/** 
 * remember the result value for regular expression.So that we can get complete expression and Normal it should be ""=1""
 * @param expression
 */
public void setFunctionReturnValue(Expression expression){
  try {
    String tempString=splictExpression(expression);
    tempString=tempString.split(""String_Node_Str"").length > 1 ? tempString.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    tempString=tempString.split(""String_Node_Str"").length > 1 ? tempString.split(""String_Node_Str"")[0] : ""String_Node_Str"";
    regularfunctionReturnValue=tempString.trim();
  }
 catch (  NullPointerException e) {
    log.error(e,e);
  }
}",0.7099165894346617
137409,"/** 
 * Extract the name of regular Expression Function If current database type need to use UDF deal regular expression, the expresssion which will definition on ""Regular Expression Matching.definition"" should like below: ""* + when REGULAR_FUNCTION(+ * +) + *"". else this method will not return correct result which you want
 * @param expression
 * @return the name of regular Expression Function or null when the expression is invalid
 */
public String extractRegularExpressionFunction(Expression expression){
  String functionName=null;
  try {
    String body=expression.getBody().toUpperCase();
    String tempString=body.split(""String_Node_Str"").length > 1 ? body.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionName=tempString.split(""String_Node_Str"").length > 1 ? tempString.split(""String_Node_Str"")[0] : ""String_Node_Str"";
    functionName=functionName.trim();
    this.setFunctionReturnValue(tempString);
  }
 catch (  NullPointerException e) {
    log.error(e,e);
  }
  return functionName;
}","/** 
 * Extract the name of regular Expression Function If current database type need to use UDF deal regular expression, the expresssion which will definition on ""Regular Expression Matching.definition"" should like below: ""* + when REGULAR_FUNCTION(+ * +) + *"". else this method will not return correct result which you want
 * @param expression
 * @return the name of regular Expression Function or null when the expression is invalid
 */
public String extractRegularExpressionFunction(Expression expression){
  String functionName=null;
  try {
    String tempString=splictExpression(expression);
    functionName=tempString.split(""String_Node_Str"").length > 1 ? tempString.split(""String_Node_Str"")[0] : ""String_Node_Str"";
    functionName=functionName.trim();
  }
 catch (  NullPointerException e) {
    log.error(e,e);
  }
  return functionName;
}",0.7955032119914347
137410,"/** 
 * Method ""regex"".
 * @param element
 * @param regex
 * @return the regular expression according to the DBMS syntax or null if not supported.\
 * @deprecated use {@link #regularFunctionBody(String,String)} instead of it
 */
@Deprecated public String regexLike(String element,String regex){
  return regularFunctionBody(element,regex);
}","/** 
 * Method ""regexLike"".
 * @param element
 * @param regex
 * @return get the String of Regular function(for example : ""regex_like(element,regex)"")
 */
public String regexLike(String element,String regex){
  if (null == regularExpressionFunction || PluginConstant.EMPTY_STRING.equals(regularExpressionFunction) || existEmptyInParameter(element,regex)) {
    return null;
  }
  String functionNameSQL=regularExpressionFunction + ""String_Node_Str"" + element+ ""String_Node_Str""+ regex+ ""String_Node_Str"";
  return surroundWithSpaces(functionNameSQL);
}",0.1746920492721164
137411,"/** 
 * @deprecated use {@link #regularFunctionBody(String,String)} instead of it
 */
@Deprecated @Override public String regexLike(String element,String regex){
  return this.regularFunctionBody(element,regex);
}","@Override public String regexLike(String element,String regex){
  return surroundWithSpaces(element + surroundWithSpaces(getRegularExpressionFunction()) + regex);
}",0.5358090185676393
137412,"/** 
 * @deprecated use {@link #notRegularFunctionBody(String,String)} instead of it
 */
@Deprecated @Override public String regexNotLike(String element,String regex){
  return this.notRegularFunctionBody(element,regex);
}","@Override public String regexNotLike(String element,String regex){
  return surroundWithSpaces(element + surroundWithSpaces(this.not() + getRegularExpressionFunction()) + regex);
}",0.5422885572139303
137413,"/** 
 * @deprecated use {@link #notRegularFunctionBody(String,String)} instead of it
 */
@Deprecated @Override public String regexNotLike(String element,String regex){
  return this.notRegularFunctionBody(element,regex);
}","@Override public String regexNotLike(String element,String regex){
  return surroundWithSpaces(element + surroundWithSpaces(this.not() + getRegularExpressionFunction()) + regex);
}",0.5422885572139303
137414,"/** 
 * @deprecated use {@link #regularFunctionBody(String,String)} instead of it
 */
@Deprecated @Override public String regexLike(String element,String regex){
  return this.regularFunctionBody(element,regex);
}","@Override public String regexLike(String element,String regex){
  return surroundWithSpaces(element + surroundWithSpaces(getRegularExpressionFunction()) + regex);
}",0.5358090185676393
137415,"/** 
 * Method ""regexLike"".
 * @param element
 * @param regex
 * @return get the String of Regular function(for example : ""regex_like(element,regex)"")
 */
public String regexLike(String element,String regex){
  if (null == regularExpressionFunction || PluginConstant.EMPTY_STRING.equals(regularExpressionFunction) || existEmptyInParameter(element,regex)) {
    return null;
  }
  String functionNameSQL=regularExpressionFunction + ""String_Node_Str"" + element+ ""String_Node_Str""+ regex+ ""String_Node_Str"";
  return surroundWithSpaces(functionNameSQL);
}","/** 
 * Method ""regexLike"". By default, it will try to extract the function name from user defined regular expression. If the database support the regex like regular expression function , the sub-class will have to override this method in order to return the correct regex like name.
 * @param element
 * @param regex
 * @return get the String of Regular function(for example : ""regex_like(element,regex)"").
 */
public String regexLike(String element,String regex){
  if (null == regularExpressionFunction || PluginConstant.EMPTY_STRING.equals(regularExpressionFunction) || existEmptyInParameter(element,regex)) {
    return null;
  }
  String functionNameSQL=regularExpressionFunction + ""String_Node_Str"" + element+ ""String_Node_Str""+ regex+ ""String_Node_Str"";
  return surroundWithSpaces(functionNameSQL);
}",0.8111682586333578
137416,"/** 
 * DOC msjian Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  DataExplorerTestHelper.initDataExplorer();
  patternExplorer=new PatternExplorer();
  PatternMatchingIndicator indicator=mock(PatternMatchingIndicator.class);
  when(indicator.eClass()).thenReturn(null);
  ModelElement element=mock(ModelElement.class);
  when(element.getName()).thenReturn(""String_Node_Str"");
  when(indicator.getAnalyzedElement()).thenReturn(element);
  indicator.setAnalyzedElement(element);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getRegexPatternString(indicator)).thenReturn(RES_VALIED_ROWS);
  when(dbmsLanguage.quote(anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexNotLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.where()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.and()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.from()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.or()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.isNull()).thenReturn(""String_Node_Str"");
  Analysis analysis=DataExplorerTestHelper.getAnalysis(indicator,dbmsLanguage);
  patternExplorer.setAnalysis(analysis);
  ChartDataEntity cdEntity=mock(ChartDataEntity.class);
  when(cdEntity.getIndicator()).thenReturn(indicator);
  PowerMockito.mockStatic(IndicatorEnum.class);
  when(IndicatorEnum.findIndicatorEnum(indicator.eClass())).thenReturn(IndicatorEnum.RowCountIndicatorEnum);
  patternExplorer.setEnitty(cdEntity);
  Expression instantiatedExpression=mock(Expression.class);
  when(dbmsLanguage.getInstantiatedExpression(indicator)).thenReturn(instantiatedExpression);
  when(instantiatedExpression.getBody()).thenReturn(""String_Node_Str"");
}","/** 
 * DOC msjian Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  DataExplorerTestHelper.initDataExplorer();
  patternExplorer=new PatternExplorer();
  PatternMatchingIndicator indicator=mock(PatternMatchingIndicator.class);
  when(indicator.eClass()).thenReturn(null);
  ModelElement element=mock(ModelElement.class);
  when(element.getName()).thenReturn(""String_Node_Str"");
  when(indicator.getAnalyzedElement()).thenReturn(element);
  indicator.setAnalyzedElement(element);
  DbmsLanguage dbmsLanguage=mock(DbmsLanguage.class);
  when(dbmsLanguage.getRegexPatternString(indicator)).thenReturn(RES_VALIED_ROWS);
  when(dbmsLanguage.quote(anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.regexNotLike(anyString(),anyString())).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.getFunctionReturnValue()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.where()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.and()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.from()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.or()).thenReturn(""String_Node_Str"");
  when(dbmsLanguage.isNull()).thenReturn(""String_Node_Str"");
  Analysis analysis=DataExplorerTestHelper.getAnalysis(indicator,dbmsLanguage);
  patternExplorer.setAnalysis(analysis);
  ChartDataEntity cdEntity=mock(ChartDataEntity.class);
  when(cdEntity.getIndicator()).thenReturn(indicator);
  PowerMockito.mockStatic(IndicatorEnum.class);
  when(IndicatorEnum.findIndicatorEnum(indicator.eClass())).thenReturn(IndicatorEnum.RowCountIndicatorEnum);
  patternExplorer.setEnitty(cdEntity);
  Expression instantiatedExpression=mock(Expression.class);
  when(dbmsLanguage.getInstantiatedExpression(indicator)).thenReturn(instantiatedExpression);
  when(instantiatedExpression.getBody()).thenReturn(""String_Node_Str"");
}",0.9798587496730315
137417,"/** 
 * get the Valid Rows Statement.
 * @return
 */
public String getValidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + functionReturnValue;
  return getRowsStatement(regexCmp);
}","/** 
 * get the Valid Rows Statement.
 * @return
 */
public String getValidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  return getRowsStatement(regexCmp);
}",0.9840510366826156
137418,"/** 
 * get the Invalid Rows Statement.
 * @return
 */
public String getInvalidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + functionReturnValue;
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getRowsStatement(pattCondStr);
}","/** 
 * get the Invalid Rows Statement.
 * @return
 */
public String getInvalidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getRowsStatement(pattCondStr);
}",0.987468671679198
137419,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=this.indicator.getInstantiatedExpressions();
  if (instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String body=expression.getBody().toUpperCase();
    String functionName=body.split(""String_Node_Str"").length > 1 ? body.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionReturnValue=functionName.split(""String_Node_Str"").length > 1 ? functionName.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionName=functionName.split(""String_Node_Str"").length > 1 ? functionName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
    dbmsLanguage.setFunctionName(functionName);
    functionReturnValue=functionReturnValue.split(""String_Node_Str"").length > 1 ? functionReturnValue.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionReturnValue=functionReturnValue.split(""String_Node_Str"").length > 1 ? functionReturnValue.split(""String_Node_Str"")[0] : ""String_Node_Str"";
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=this.indicator.getInstantiatedExpressions();
  if (instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String regularExpressionFunctionName=dbmsLanguage.extractRegularExpressionFunction(expression);
    dbmsLanguage.setRegularExpressionFunction(regularExpressionFunctionName);
    dbmsLanguage.setFunctionReturnValue(expression);
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}",0.6893814091961628
137420,"/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the valid Value of select column
 */
public String getValidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + functionReturnValue;
  return getValuesStatement(columnName,regexCmp);
}","/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the valid Value of select column
 */
public String getValidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  return getValuesStatement(columnName,regexCmp);
}",0.9857142857142858
137421,"/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the invalid Value of select column
 */
public String getInvalidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + functionReturnValue;
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getValuesStatement(columnName,pattCondStr);
}","/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the invalid Value of select column
 */
public String getInvalidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + dbmsLanguage.getFunctionReturnValue();
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getValuesStatement(columnName,pattCondStr);
}",0.9885189437428245
137422,"@Override protected String getInstantiatedClause(){
  String function=getFunction();
  if (function != null && (DbmsLanguageFactory.isInfomix(this.dbmsLanguage.getDbmsName()) || DbmsLanguageFactory.isOracle(this.dbmsLanguage.getDbmsName()))) {
    function=columnName;
  }
  String clause=entity.isLabelNull() || function == null ? columnName + dbmsLanguage.isNull() : SOUNDEX_PREFIX + ""String_Node_Str"" + function+ ""String_Node_Str""+ dbmsLanguage.equal()+ SOUNDEX_PREFIX+ ""String_Node_Str""+ entity.getKey()+ ""String_Node_Str"";
  return clause;
}","@Override protected String getInstantiatedClause(){
  String function=getFunction();
  if (function != null && (DbmsLanguageFactory.isInfomix(this.dbmsLanguage.getDbmsName()) || DbmsLanguageFactory.isOracle(this.dbmsLanguage.getDbmsName()))) {
    function=columnName;
  }
  String clause=entity.isLabelNull() || function == null ? columnName + dbmsLanguage.isNull() : dbmsLanguage.getSoundexPrefix() + ""String_Node_Str"" + function+ ""String_Node_Str""+ dbmsLanguage.equal()+ dbmsLanguage.getSoundexPrefix()+ ""String_Node_Str""+ entity.getKey()+ ""String_Node_Str"";
  return clause;
}",0.9236234458259324
137423,"public String regexNotLike(String element,String regex){
  if (null == functionName || PluginConstant.EMPTY_STRING.equals(functionName)) {
    return null;
  }
  return surroundWithSpaces(""String_Node_Str"" + functionName + ""String_Node_Str""+ element+ ""String_Node_Str""+ regex+ ""String_Node_Str"");
}","/** 
 * method ""regexNotLike""
 * @param element
 * @param regex
 * @return get the String of Regular function which is not match(for example :""not regex_like(element,regex)"")
 */
public String regexNotLike(String element,String regex){
  String functionNameSQL=regexLike(element,regex);
  if (functionNameSQL == null) {
    return null;
  }
  return this.not() + functionNameSQL;
}",0.2002945508100147
137424,"/** 
 * Method ""regex"".
 * @param element
 * @param regex
 * @return the regular expression according to the DBMS syntax or null if not supported.
 */
public String regexLike(String element,String regex){
  if (null == functionName || PluginConstant.EMPTY_STRING.equals(functionName)) {
    return null;
  }
  String functionNameSQL=functionName + ""String_Node_Str"";
  if (null != element && !element.equals(""String_Node_Str"")) {
    functionNameSQL=functionNameSQL + element;
  }
  if (null != regex && !regex.equals(""String_Node_Str"")) {
    functionNameSQL=functionNameSQL + ""String_Node_Str"" + regex;
  }
  functionNameSQL=functionNameSQL + ""String_Node_Str"";
  return functionNameSQL;
}","/** 
 * Method ""regexLike"". By default, it will try to extract the function name from user defined regular expression. If the database support the regex like regular expression function , the sub-class will have to override this method in order to return the correct regex like name.
 * @param element
 * @param regex
 * @return get the String of Regular function(for example : ""regex_like(element,regex)"").
 */
public String regexLike(String element,String regex){
  if (null == regularExpressionFunction || PluginConstant.EMPTY_STRING.equals(regularExpressionFunction) || existEmptyInParameter(element,regex)) {
    return null;
  }
  String functionNameSQL=regularExpressionFunction + ""String_Node_Str"" + element+ ""String_Node_Str""+ regex+ ""String_Node_Str"";
  return surroundWithSpaces(functionNameSQL);
}",0.384
137425,"@Override public String regexLike(String element,String regex){
  return surroundWithSpaces(element + ""String_Node_Str"" + regex);
}","@Override public String regexLike(String element,String regex){
  return surroundWithSpaces(element + surroundWithSpaces(getRegularExpressionFunction()) + regex);
}",0.8135593220338984
137426,"@Override public String regexNotLike(String element,String regex){
  return surroundWithSpaces(element + ""String_Node_Str"" + regex);
}","@Override public String regexNotLike(String element,String regex){
  return surroundWithSpaces(element + surroundWithSpaces(this.not() + getRegularExpressionFunction()) + regex);
}",0.7834394904458599
137427,"@Override public String regexNotLike(String element,String regex){
  return surroundWithSpaces(element + ""String_Node_Str"" + regex);
}","@Override public String regexNotLike(String element,String regex){
  return surroundWithSpaces(element + surroundWithSpaces(this.not() + getRegularExpressionFunction()) + regex);
}",0.7834394904458599
137428,"@Override public String regexLike(String element,String regex){
  return surroundWithSpaces(element + ""String_Node_Str"" + regex);
}","@Override public String regexLike(String element,String regex){
  return surroundWithSpaces(element + surroundWithSpaces(getRegularExpressionFunction()) + regex);
}",0.8135593220338984
137429,"/** 
 * Establishes a JDBC connection
 * @param user
 * @return
 * @throws ExplorerException
 * @throws SQLException
 */
public SQLConnection getConnection(User user) throws SQLException {
  Properties props=new Properties();
  if (user.getUserName() != null) {
    props.put(""String_Node_Str"",user.getUserName());
  }
  if (user.getPassword() != null) {
    props.put(""String_Node_Str"",user.getPassword());
  }
  if (!isDriverClassLoaded()) {
    try {
      registerSQLDriver();
    }
 catch (    ClassNotFoundException e) {
      throw new SQLException(Messages.getString(""String_Node_Str"",driverClassName) + ""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    }
  }
  if (!isDriverClassLoaded()) {
    throw new SQLException(Messages.getString(""String_Node_Str"",driverClassName));
  }
  Connection jdbcConn=null;
  try {
    jdbcConn=jdbcDriver.connect(user.getAlias().getUrl(),props);
  }
 catch (  SQLException e) {
    throw new SQLCannotConnectException(user,e);
  }
  if (jdbcConn == null) {
    throw new SQLCannotConnectException(user);
  }
  return new SQLConnection(user,jdbcConn,this,getDatabaseProduct().describeConnection(jdbcConn));
}","/** 
 * Establishes a JDBC connection
 * @param user
 * @return
 * @throws ExplorerException
 * @throws SQLException
 */
public SQLConnection getConnection(User user) throws SQLException {
  Properties props=new Properties();
  if (user.getUserName() != null) {
    props.put(""String_Node_Str"",user.getUserName());
  }
  if (user.getPassword() != null) {
    props.put(""String_Node_Str"",user.getPassword());
  }
  if (!isDriverClassLoaded()) {
    try {
      registerSQLDriver();
    }
 catch (    ClassNotFoundException e) {
      throw new SQLException(Messages.getString(""String_Node_Str"",driverClassName) + ""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    }
  }
  if (!isDriverClassLoaded()) {
    throw new SQLException(Messages.getString(""String_Node_Str"",driverClassName));
  }
  Connection jdbcConn=null;
  try {
    String dbUrl=user.getAlias().getUrl();
    dbUrl=ConnectionUtils.addShutDownForHSQLUrl(dbUrl,user.getMetadataConnection().getAdditionalParams());
    jdbcConn=jdbcDriver.connect(dbUrl,props);
  }
 catch (  SQLException e) {
    throw new SQLCannotConnectException(user,e);
  }
  if (jdbcConn == null) {
    throw new SQLCannotConnectException(user);
  }
  return new SQLConnection(user,jdbcConn,this,getDatabaseProduct().describeConnection(jdbcConn));
}",0.9295889295889296
137430,"/** 
 * Releases a connection; the connection will be returned to the pool, unless the pool has grown too large (in which case the connection is closed). Note that the connection may not be in the ""allocated"" list if it is a hidden connection (see hideConnection())
 * @param connection
 * @throws ExplorerException
 */
public void releaseConnection(SQLConnection connection) throws SQLException {
  if (connection.getConnection() == null || connection.getConnection().isClosed()) {
    disposeConnection(connection);
    return;
  }
  boolean forPool=allocated.remove(connection);
  boolean commitOnClose=SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.COMMIT_ON_CLOSE);
  if (!connection.getAutoCommit()) {
    if (commitOnClose) {
      connection.commit();
    }
 else {
      connection.rollback();
    }
  }
  if (forPool && unused.size() < MAX_POOL_SIZE) {
    unused.add(connection);
    return;
  }
  connection.close();
}","/** 
 * Releases a connection; the connection will be returned to the pool, unless the pool has grown too large (in which case the connection is closed). Note that the connection may not be in the ""allocated"" list if it is a hidden connection (see hideConnection())
 * @param connection
 * @throws ExplorerException
 */
public void releaseConnection(SQLConnection connection) throws SQLException {
  if (connection.getConnection() == null || connection.getConnection().isClosed()) {
    disposeConnection(connection);
    return;
  }
  boolean forPool=allocated.remove(connection);
  boolean commitOnClose=SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.COMMIT_ON_CLOSE);
  if (!connection.getAutoCommit()) {
    if (commitOnClose) {
      connection.commit();
    }
 else {
      connection.rollback();
    }
  }
  if (forPool && unused.size() < MAX_POOL_SIZE) {
    unused.add(connection);
    return;
  }
  closeConnection(connection);
}",0.9787234042553192
137431,"/** 
 * Merges the definition of the User ""that"" - IE takes the password, auto-commit behaviour, etc
 * @param that
 */
public void mergeWith(User that){
  password=that.getPassword();
  autoCommit=that.isAutoCommit();
  commitOnClose=that.isCommitOnClose();
  for (  SQLConnection connection : that.unused) {
    connection.setUser(this);
    if (unused.size() < MAX_POOL_SIZE) {
      unused.add(connection);
    }
 else {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        SQLExplorerPlugin.error(""String_Node_Str"",e);
      }
    }
  }
  for (  SQLConnection connection : that.allocated) {
    connection.setUser(this);
    allocated.add(connection);
  }
  for (  Session session : that.sessions) {
    session.setUser(this);
    sessions.add(session);
  }
  metaDataSession=that.metaDataSession;
  that.unused=null;
  that.allocated=null;
  that.sessions=null;
  that.metaDataSession=null;
  that.password=null;
  SQLExplorerPlugin.getDefault().getAliasManager().modelChanged();
}","/** 
 * Merges the definition of the User ""that"" - IE takes the password, auto-commit behaviour, etc
 * @param that
 */
public void mergeWith(User that){
  password=that.getPassword();
  autoCommit=that.isAutoCommit();
  commitOnClose=that.isCommitOnClose();
  for (  SQLConnection connection : that.unused) {
    connection.setUser(this);
    if (unused.size() < MAX_POOL_SIZE) {
      unused.add(connection);
    }
 else {
      try {
        closeConnection(connection);
      }
 catch (      SQLException e) {
        SQLExplorerPlugin.error(""String_Node_Str"",e);
      }
    }
  }
  for (  SQLConnection connection : that.allocated) {
    connection.setUser(this);
    allocated.add(connection);
  }
  for (  Session session : that.sessions) {
    session.setUser(this);
    sessions.add(session);
  }
  metaDataSession=that.metaDataSession;
  that.unused=null;
  that.allocated=null;
  that.sessions=null;
  that.metaDataSession=null;
  that.password=null;
  SQLExplorerPlugin.getDefault().getAliasManager().modelChanged();
}",0.980029225523624
137432,"/** 
 * Disposes of the connection without returning it to the pool; usually called when the connection has been closed by the server
 * @param connection
 */
public void disposeConnection(SQLConnection connection){
  allocated.remove(connection);
  try {
    connection.close();
  }
 catch (  SQLException e) {
  }
}","/** 
 * Disposes of the connection without returning it to the pool; usually called when the connection has been closed by the server
 * @param connection
 */
public void disposeConnection(SQLConnection connection){
  allocated.remove(connection);
  try {
    closeConnection(connection);
  }
 catch (  SQLException e) {
  }
}",0.9393468118195956
137433,"/** 
 * Returns the connection from the pool, assuming the connection is currently in the pool
 * @param connection
 * @return true if the connection was in the and has been removed
 */
public synchronized boolean releaseFromPool(SQLConnection connection){
  try {
    connection.close();
  }
 catch (  SQLException e) {
    SQLExplorerPlugin.error(e);
  }
  if (unused.remove(connection)) {
    SQLExplorerPlugin.getDefault().getAliasManager().modelChanged();
    return true;
  }
  return false;
}","/** 
 * Returns the connection from the pool, assuming the connection is currently in the pool
 * @param connection
 * @return true if the connection was in the and has been removed
 */
public synchronized boolean releaseFromPool(SQLConnection connection){
  try {
    closeConnection(connection);
  }
 catch (  SQLException e) {
    SQLExplorerPlugin.error(e);
  }
  if (unused.remove(connection)) {
    SQLExplorerPlugin.getDefault().getAliasManager().modelChanged();
    return true;
  }
  return false;
}",0.9592850049652432
137434,"@Before public void setUp() throws Exception {
  analysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisContext context=AnalysisFactory.eINSTANCE.createAnalysisContext();
  analysis.setContext(context);
  Package catalog=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createCatalog();
  catalog.setName(""String_Node_Str"");
  Package schema=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createSchema();
  schema.setNamespace(catalog);
  TdTable tdTable=RelationalFactory.eINSTANCE.createTdTable();
  tdTable.setName(""String_Node_Str"");
  tdTable.setNamespace(schema);
  TdColumn tdColumn=RelationalFactory.eINSTANCE.createTdColumn();
  tdColumn.setOwner(tdTable);
  tdColumn.setName(""String_Node_Str"");
  tdColumn.setContentType(DataminingType.INTERVAL.getName());
  TdColumn tdColumn2=RelationalFactory.eINSTANCE.createTdColumn();
  tdColumn2.setOwner(tdTable);
  tdColumn2.setName(""String_Node_Str"");
  tdColumn2.setContentType(DataminingType.INTERVAL.getName());
  AnalysisParameters analysisPara=AnalysisFactory.eINSTANCE.createAnalysisParameters();
  analysisPara.setStoreData(false);
  analysisPara.setAnalysisType(AnalysisType.COLUMN_SET);
  analysis.setParameters(analysisPara);
  context.getAnalysedElements().add(tdColumn);
  context.getAnalysedElements().add(tdColumn2);
  AnalysisResult analysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  ExecutionInformations info=AnalysisFactory.eINSTANCE.createExecutionInformations();
  analysisResult.setResultMetadata(info);
  simpleStatIndicator=ColumnsetFactory.eINSTANCE.createSimpleStatIndicator();
  TdExpression expression=RelationalFactory.eINSTANCE.createTdExpression();
  expression.setBody(""String_Node_Str"");
  expression.setLanguage(""String_Node_Str"");
  IndicatorDefinition indicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  indicatorDefinition.getSqlGenericExpression().add(expression);
  simpleStatIndicator.setIndicatorDefinition(indicatorDefinition);
  simpleStatIndicator.getDateFunctions().add(""String_Node_Str"");
  simpleStatIndicator.getNumericFunctions().add(""String_Node_Str"");
  simpleStatIndicator.setDataminingType(DataminingType.NOMINAL);
  simpleStatIndicator.getAnalyzedColumns().add(tdColumn);
  simpleStatIndicator.getAnalyzedColumns().add(tdColumn2);
  analysisResult.getIndicators().add(simpleStatIndicator);
  analysis.setResults(analysisResult);
}","@Before public void setUp() throws Exception {
  analysis=AnalysisFactory.eINSTANCE.createAnalysis();
  AnalysisContext context=AnalysisFactory.eINSTANCE.createAnalysisContext();
  analysis.setContext(context);
  Package schema=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createSchema();
  schema.setName(""String_Node_Str"");
  TdTable tdTable=RelationalFactory.eINSTANCE.createTdTable();
  tdTable.setName(""String_Node_Str"");
  tdTable.setNamespace(schema);
  TdColumn tdColumn=RelationalFactory.eINSTANCE.createTdColumn();
  tdColumn.setOwner(tdTable);
  tdColumn.setName(""String_Node_Str"");
  tdColumn.setContentType(DataminingType.INTERVAL.getName());
  TdColumn tdColumn2=RelationalFactory.eINSTANCE.createTdColumn();
  tdColumn2.setOwner(tdTable);
  tdColumn2.setName(""String_Node_Str"");
  tdColumn2.setContentType(DataminingType.INTERVAL.getName());
  AnalysisParameters analysisPara=AnalysisFactory.eINSTANCE.createAnalysisParameters();
  analysisPara.setStoreData(false);
  analysisPara.setAnalysisType(AnalysisType.COLUMN_SET);
  analysis.setParameters(analysisPara);
  context.getAnalysedElements().add(tdColumn);
  context.getAnalysedElements().add(tdColumn2);
  AnalysisResult analysisResult=AnalysisFactory.eINSTANCE.createAnalysisResult();
  ExecutionInformations info=AnalysisFactory.eINSTANCE.createExecutionInformations();
  analysisResult.setResultMetadata(info);
  simpleStatIndicator=ColumnsetFactory.eINSTANCE.createSimpleStatIndicator();
  TdExpression expression=RelationalFactory.eINSTANCE.createTdExpression();
  expression.setBody(""String_Node_Str"");
  expression.setLanguage(""String_Node_Str"");
  IndicatorDefinition indicatorDefinition=DefinitionFactory.eINSTANCE.createIndicatorDefinition();
  indicatorDefinition.getSqlGenericExpression().add(expression);
  simpleStatIndicator.setIndicatorDefinition(indicatorDefinition);
  simpleStatIndicator.getDateFunctions().add(""String_Node_Str"");
  simpleStatIndicator.getNumericFunctions().add(""String_Node_Str"");
  simpleStatIndicator.setDataminingType(DataminingType.NOMINAL);
  simpleStatIndicator.getAnalyzedColumns().add(tdColumn);
  simpleStatIndicator.getAnalyzedColumns().add(tdColumn2);
  analysisResult.getIndicators().add(simpleStatIndicator);
  analysis.setResults(analysisResult);
}",0.9626945214240034
137435,"private TdTable createTdTable(){
  Connection conn=ConnectionFactory.eINSTANCE.createConnection();
  Catalog catalog=CatalogHelper.createCatalog(""String_Node_Str"");
  ConnectionHelper.addCatalog(catalog,conn);
  List<TdTable> tables=new ArrayList<TdTable>();
  TdTable tdTable=RelationalFactory.eINSTANCE.createTdTable();
  tdTable.setName(""String_Node_Str"");
  tables.add(tdTable);
  CatalogHelper.addTables(tables,catalog);
  return tdTable;
}","private TdTable createTdTable(){
  Connection conn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  Catalog catalog=CatalogHelper.createCatalog(""String_Node_Str"");
  ConnectionHelper.addCatalog(catalog,conn);
  List<TdTable> tables=new ArrayList<TdTable>();
  TdTable tdTable=RelationalFactory.eINSTANCE.createTdTable();
  tdTable.setName(""String_Node_Str"");
  tables.add(tdTable);
  CatalogHelper.addTables(tables,catalog);
  return tdTable;
}",0.9910913140311804
137436,"/** 
 * get Internationalization Label of indicatorDefinition
 * @param originalName
 * @return
 */
public static String getDefinitionInternationalizationLabel(Property property){
  if (property == null) {
    return StringUtils.EMPTY;
  }
  String originalName=property.getLabel();
  return getDefinitionInternationalizationLabel(originalName);
}","/** 
 * get Internationalization Label of SystemIndicatorDefinition
 * @param property the property of indicatorDefinition
 * @return if property is null or label of property is null we will return EMPTY string else will returninternationalization string
 */
public static String getDefinitionInternationalizationLabel(Property property){
  if (property == null) {
    return StringUtils.EMPTY;
  }
  String originalName=property.getLabel();
  return getDefinitionInternationalizationLabel(originalName);
}",0.7831184056271981
137437,"/** 
 * get Internationalization Label of indicatorDefinition
 * @param originalName the value of parameter should be lable of property
 * @return
 */
public static String getCategoryInternationalizationLabel(String originalName){
  String getInternationalizationLabel=originalName == null ? StringUtils.EMPTY : Messages.getString(originalName.replace(PluginConstant.SPACE_STRING,PluginConstant.UNDER_LINE));
  return getInternationalizationLabel;
}","/** 
 * get Internationalization Label of Category. We must do a replace operation is because of we can only get ""Advanced Statistics"" from frequency indicatorDefinition but we can not use it to do a interational key.So we replace it from ""Advanced Statistics"" to ""Advanced_Statistics"" then do international operation. It will be used on Category of User Definition Indicator and presistence report file by now.
 * @param originalName the value of parameter should be lable of category(for""Bin_Low_Frequency_Table_0.1.definition"" indicatorDefinition it should be ""Advanced Statistics"")
 * @return if originalName is null we will return EMPTY string else will return internationalization string
 */
public static String getCategoryInternationalizationLabel(String originalName){
  return getInternationalizationLabel(originalName.replace(PluginConstant.SPACE_STRING,PluginConstant.UNDER_LINE));
}",0.3630952380952381
137438,"/** 
 * DOC xqliu Comment method ""handleFrequency"".
 * @param indicator
 * @return
 */
private static Object handleFrequency(Indicator indicator){
  FrequencyExt[] frequencyExt=null;
  if (UDIHelper.isUDI(indicator)) {
    UserDefIndicator udi=(UserDefIndicator)indicator;
    Set<Object> valueSet=udi.getDistinctValues();
    if (valueSet == null) {
      return null;
    }
    frequencyExt=new FrequencyExt[valueSet.size()];
    int i=0;
    for (    Object o : valueSet) {
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(o);
      frequencyExt[i].setValue(udi.getCount(o));
      frequencyExt[i].setFrequency(udi.getFrequency(o));
      i++;
    }
  }
 else   if (IndicatorEnum.DatePatternFreqIndicatorEnum.getIndicatorType().isInstance(indicator)) {
    DatePatternFreqIndicator datePatternFrequency=(DatePatternFreqIndicator)indicator;
    List<Object> modelMatchers=datePatternFrequency.getRealModelMatcherList();
    frequencyExt=new FrequencyExt[modelMatchers.size()];
    int i=0;
    for (    Object patternMatcher : modelMatchers) {
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(datePatternFrequency.getModel(patternMatcher));
      frequencyExt[i].setValue(Long.valueOf(String.valueOf(datePatternFrequency.getScore(patternMatcher))));
      frequencyExt[i].setFrequency(datePatternFrequency.getFrequency(patternMatcher));
      i++;
    }
  }
 else {
    FrequencyIndicator frequency=(FrequencyIndicator)indicator;
    Set<Object> valueSet=frequency.getDistinctValues();
    if (valueSet == null) {
      return null;
    }
    frequencyExt=new FrequencyExt[valueSet.size()];
    int i=0;
    for (    Object o : valueSet) {
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(o);
      if (IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator().equals(frequency.eClass()) || IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator().equals(frequency.eClass())) {
        frequencyExt[i].setValue(((SoundexFreqIndicator)frequency).getDistinctCount(o));
      }
 else {
        frequencyExt[i].setValue(frequency.getCount(o));
      }
      frequencyExt[i].setFrequency(frequency.getFrequency(o));
      i++;
    }
  }
  return frequencyExt;
}","/** 
 * DOC xqliu Comment method ""handleFrequency"".
 * @param indicator
 * @return
 */
private static Object handleFrequency(Indicator indicator){
  FrequencyExt[] frequencyExt=null;
  if (UDIHelper.isUDI(indicator)) {
    UserDefIndicator udi=(UserDefIndicator)indicator;
    Set<Object> valueSet=udi.getDistinctValues();
    if (valueSet == null) {
      return null;
    }
    frequencyExt=new FrequencyExt[valueSet.size()];
    int i=0;
    for (    Object o : valueSet) {
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(o);
      frequencyExt[i].setValue(udi.getCount(o));
      frequencyExt[i].setFrequency(udi.getFrequency(o));
      i++;
    }
  }
 else   if (IndicatorEnum.DatePatternFreqIndicatorEnum.getIndicatorType().isInstance(indicator)) {
    DatePatternFreqIndicator datePatternFrequency=(DatePatternFreqIndicator)indicator;
    Map<String,Long> results=datePatternFrequency.getResult();
    frequencyExt=new FrequencyExt[results.size()];
    int i=0;
    for (    String key : results.keySet()) {
      Long value=results.get(key);
      Double frequency=datePatternFrequency.getFrequency(key);
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(key);
      frequencyExt[i].setValue(value);
      frequencyExt[i].setFrequency(frequency);
      i++;
    }
  }
 else {
    FrequencyIndicator frequency=(FrequencyIndicator)indicator;
    Set<Object> valueSet=frequency.getDistinctValues();
    if (valueSet == null) {
      return null;
    }
    frequencyExt=new FrequencyExt[valueSet.size()];
    int i=0;
    for (    Object o : valueSet) {
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(o);
      if (IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator().equals(frequency.eClass()) || IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator().equals(frequency.eClass())) {
        frequencyExt[i].setValue(((SoundexFreqIndicator)frequency).getDistinctCount(o));
      }
 else {
        frequencyExt[i].setValue(frequency.getCount(o));
      }
      frequencyExt[i].setFrequency(frequency.getFrequency(o));
      i++;
    }
  }
  return frequencyExt;
}",0.9026629935720843
137439,"/** 
 * return List for ModelMatcher which Score more than 1.
 */
public List<Object> getRealModelMatcherList();","/** 
 * return List for ModelMatcher which Score more than 1.
 * @deprecated use {@link #getResult()} instead
 */
@Deprecated public List<Object> getRealModelMatcherList();",0.7887323943661971
137440,"public List<ModelMatcher> getModelMatcherList(){
  return dateRetriever.getModelMatchers();
}","@Override public List<ModelMatcher> getModelMatcherList(){
  return dateRetriever.getModelMatchers();
}",0.9489795918367347
137441,"public String getModel(Object matcher){
  if (matcher instanceof ModelMatcher) {
    return ((ModelMatcher)matcher).getModel();
  }
 else {
    return null;
  }
}","@Override public String getModel(Object matcher){
  if (matcher instanceof ModelMatcher) {
    return ((ModelMatcher)matcher).getModel();
  }
 else {
    return null;
  }
}",0.9700598802395208
137442,"/** 
 * DOC zshen Comment method ""getRegex"".
 * @param model the model of matcher.
 * @return if can find corresponding to matcher return it's the Regex of matcher else return null;
 */
public String getRegex(String model){
  return this.dateRetriever.getRegex(model);
}","/** 
 * DOC zshen Comment method ""getRegex"".
 * @param model the model of matcher.
 * @return if can find corresponding to matcher return it's the Regex of matcher else return null;
 */
@Override public String getRegex(String model){
  return this.dateRetriever.getRegex(model);
}",0.9818181818181818
137443,"/** 
 * return List for ModelMatcher which Score more than 1.
 */
public List<Object> getRealModelMatcherList(){
  List<Object> realModelMatcherList=new ArrayList<Object>();
  for (  ModelMatcher matcher : dateRetriever.getModelMatchers()) {
    if (matcher.getScore() > 0) {
      realModelMatcherList.add(matcher);
    }
  }
  return realModelMatcherList;
}","/** 
 * return List for ModelMatcher which Score more than 1.
 * @deprecated use {@link #getResult()} instead
 */
@Deprecated @Override public List<Object> getRealModelMatcherList(){
  List<Object> realModelMatcherList=new ArrayList<Object>();
  for (  ModelMatcher matcher : dateRetriever.getModelMatchers()) {
    if (matcher.getScore() > 0) {
      realModelMatcherList.add(matcher);
    }
  }
  return realModelMatcherList;
}",0.9111675126903552
137444,"public int getScore(Object matcher){
  if (matcher instanceof ModelMatcher) {
    return ((ModelMatcher)matcher).getScore();
  }
 else {
    return -1;
  }
}","@Override public int getScore(Object matcher){
  if (matcher instanceof ModelMatcher) {
    return ((ModelMatcher)matcher).getScore();
  }
 else {
    return -1;
  }
}",0.9691358024691358
137445,"/** 
 * DOC xqliu Comment method ""handleFrequency"".
 * @param indicator
 * @return
 */
private static Object handleFrequency(Indicator indicator){
  FrequencyExt[] frequencyExt=null;
  if (UDIHelper.isUDI(indicator)) {
    UserDefIndicator udi=(UserDefIndicator)indicator;
    Set<Object> valueSet=udi.getDistinctValues();
    if (valueSet == null) {
      return null;
    }
    frequencyExt=new FrequencyExt[valueSet.size()];
    int i=0;
    for (    Object o : valueSet) {
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(o);
      frequencyExt[i].setValue(udi.getCount(o));
      frequencyExt[i].setFrequency(udi.getFrequency(o));
      i++;
    }
  }
 else   if (IndicatorEnum.DatePatternFreqIndicatorEnum.getIndicatorType().isInstance(indicator)) {
    DatePatternFreqIndicator datePatternFrequency=(DatePatternFreqIndicator)indicator;
    List<Object> modelMatchers=datePatternFrequency.getRealModelMatcherList();
    frequencyExt=new FrequencyExt[modelMatchers.size()];
    int i=0;
    for (    Object patternMatcher : modelMatchers) {
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(datePatternFrequency.getModel(patternMatcher));
      frequencyExt[i].setValue(Long.valueOf(String.valueOf(datePatternFrequency.getScore(patternMatcher))));
      frequencyExt[i].setFrequency(datePatternFrequency.getFrequency(patternMatcher));
      i++;
    }
  }
 else {
    FrequencyIndicator frequency=(FrequencyIndicator)indicator;
    Set<Object> valueSet=frequency.getDistinctValues();
    if (valueSet == null) {
      return null;
    }
    frequencyExt=new FrequencyExt[valueSet.size()];
    int i=0;
    for (    Object o : valueSet) {
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(o);
      if (IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator().equals(frequency.eClass()) || IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator().equals(frequency.eClass())) {
        frequencyExt[i].setValue(((SoundexFreqIndicator)frequency).getDistinctCount(o));
      }
 else {
        frequencyExt[i].setValue(frequency.getCount(o));
      }
      frequencyExt[i].setFrequency(frequency.getFrequency(o));
      i++;
    }
  }
  return frequencyExt;
}","/** 
 * DOC xqliu Comment method ""handleFrequency"".
 * @param indicator
 * @return
 */
private static Object handleFrequency(Indicator indicator){
  FrequencyExt[] frequencyExt=null;
  if (UDIHelper.isUDI(indicator)) {
    UserDefIndicator udi=(UserDefIndicator)indicator;
    Set<Object> valueSet=udi.getDistinctValues();
    if (valueSet == null) {
      return null;
    }
    frequencyExt=new FrequencyExt[valueSet.size()];
    int i=0;
    for (    Object o : valueSet) {
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(o);
      frequencyExt[i].setValue(udi.getCount(o));
      frequencyExt[i].setFrequency(udi.getFrequency(o));
      i++;
    }
  }
 else   if (IndicatorEnum.DatePatternFreqIndicatorEnum.getIndicatorType().isInstance(indicator)) {
    DatePatternFreqIndicator datePatternFrequency=(DatePatternFreqIndicator)indicator;
    Map<String,Long> results=datePatternFrequency.getResult();
    frequencyExt=new FrequencyExt[results.size()];
    int i=0;
    for (    String key : results.keySet()) {
      Long value=results.get(key);
      Double frequency=datePatternFrequency.getFrequency(key);
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(key);
      frequencyExt[i].setValue(value);
      frequencyExt[i].setFrequency(frequency);
      i++;
    }
  }
 else {
    FrequencyIndicator frequency=(FrequencyIndicator)indicator;
    Set<Object> valueSet=frequency.getDistinctValues();
    if (valueSet == null) {
      return null;
    }
    frequencyExt=new FrequencyExt[valueSet.size()];
    int i=0;
    for (    Object o : valueSet) {
      frequencyExt[i]=new FrequencyExt();
      frequencyExt[i].setKey(o);
      if (IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator().equals(frequency.eClass()) || IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator().equals(frequency.eClass())) {
        frequencyExt[i].setValue(((SoundexFreqIndicator)frequency).getDistinctCount(o));
      }
 else {
        frequencyExt[i].setValue(frequency.getCount(o));
      }
      frequencyExt[i].setFrequency(frequency.getFrequency(o));
      i++;
    }
  }
  return frequencyExt;
}",0.9026629935720843
137446,"/** 
 * return List for ModelMatcher which Score more than 1.
 */
public List<Object> getRealModelMatcherList();","/** 
 * return List for ModelMatcher which Score more than 1.
 * @deprecated use {@link #getResult()} instead
 */
@Deprecated public List<Object> getRealModelMatcherList();",0.7887323943661971
137447,"/** 
 * return List for ModelMatcher which Score more than 1.
 */
@Override public List<Object> getRealModelMatcherList(){
  List<Object> realModelMatcherList=new ArrayList<Object>();
  for (  ModelMatcher matcher : dateRetriever.getModelMatchers()) {
    if (matcher.getScore() > 0) {
      realModelMatcherList.add(matcher);
    }
  }
  return realModelMatcherList;
}","/** 
 * return List for ModelMatcher which Score more than 1.
 * @deprecated use {@link #getResult()} instead
 */
@Deprecated @Override public List<Object> getRealModelMatcherList(){
  List<Object> realModelMatcherList=new ArrayList<Object>();
  for (  ModelMatcher matcher : dateRetriever.getModelMatchers()) {
    if (matcher.getScore() > 0) {
      realModelMatcherList.add(matcher);
    }
  }
  return realModelMatcherList;
}",0.924812030075188
137448,"/** 
 * Establishes a JDBC connection
 * @param user
 * @return
 * @throws ExplorerException
 * @throws SQLException
 */
public SQLConnection getConnection(User user) throws SQLException {
  Properties props=new Properties();
  if (user.getUserName() != null) {
    props.put(Messages.getString(""String_Node_Str""),user.getUserName());
  }
  if (user.getPassword() != null) {
    props.put(Messages.getString(""String_Node_Str""),user.getPassword());
  }
  if (!isDriverClassLoaded()) {
    try {
      registerSQLDriver();
    }
 catch (    ClassNotFoundException e) {
      throw new SQLException(Messages.getString(""String_Node_Str"",driverClassName) + ""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    }
  }
  if (!isDriverClassLoaded()) {
    throw new SQLException(Messages.getString(""String_Node_Str"",driverClassName));
  }
  Connection jdbcConn=null;
  try {
    jdbcConn=jdbcDriver.connect(user.getAlias().getUrl(),props);
  }
 catch (  SQLException e) {
    throw new SQLCannotConnectException(user,e);
  }
  if (jdbcConn == null) {
    throw new SQLCannotConnectException(user);
  }
  return new SQLConnection(user,jdbcConn,this,getDatabaseProduct().describeConnection(jdbcConn));
}","/** 
 * Establishes a JDBC connection
 * @param user
 * @return
 * @throws ExplorerException
 * @throws SQLException
 */
public SQLConnection getConnection(User user) throws SQLException {
  Properties props=new Properties();
  if (user.getUserName() != null) {
    props.put(""String_Node_Str"",user.getUserName());
  }
  if (user.getPassword() != null) {
    props.put(""String_Node_Str"",user.getPassword());
  }
  if (!isDriverClassLoaded()) {
    try {
      registerSQLDriver();
    }
 catch (    ClassNotFoundException e) {
      throw new SQLException(Messages.getString(""String_Node_Str"",driverClassName) + ""String_Node_Str"" + Messages.getString(""String_Node_Str""));
    }
  }
  if (!isDriverClassLoaded()) {
    throw new SQLException(Messages.getString(""String_Node_Str"",driverClassName));
  }
  Connection jdbcConn=null;
  try {
    jdbcConn=jdbcDriver.connect(user.getAlias().getUrl(),props);
  }
 catch (  SQLException e) {
    throw new SQLCannotConnectException(user,e);
  }
  if (jdbcConn == null) {
    throw new SQLCannotConnectException(user);
  }
  return new SQLConnection(user,jdbcConn,this,getDatabaseProduct().describeConnection(jdbcConn));
}",0.9830938292476754
137449,"/** 
 * get Internationalization Label of indicatorDefinition
 * @param originalName
 * @return
 */
public static String getDefinitionInternationalizationLabel(Property property){
  if (property == null) {
    return StringUtils.EMPTY;
  }
  String originalName=property.getLabel();
  return getDefinitionInternationalizationLabel(originalName);
}","/** 
 * get Internationalization Label of SystemIndicatorDefinition
 * @param property the property of indicatorDefinition
 * @return if property is null or label of property is null we will return EMPTY string else will returninternationalization string
 */
public static String getDefinitionInternationalizationLabel(Property property){
  if (property == null) {
    return StringUtils.EMPTY;
  }
  String originalName=property.getLabel();
  return getDefinitionInternationalizationLabel(originalName);
}",0.7831184056271981
137450,"/** 
 * get Internationalization Label of indicatorDefinition
 * @param originalName the value of parameter should be lable of property
 * @return
 */
public static String getCategoryInternationalizationLabel(String originalName){
  String getInternationalizationLabel=originalName == null ? StringUtils.EMPTY : Messages.getString(originalName.replace(PluginConstant.SPACE_STRING,PluginConstant.UNDER_LINE));
  return getInternationalizationLabel;
}","/** 
 * get Internationalization Label of Category. We must do a replace operation is because of we can only get ""Advanced Statistics"" from frequency indicatorDefinition but we can not use it to do a interational key.So we replace it from ""Advanced Statistics"" to ""Advanced_Statistics"" then do international operation. It will be used on Category of User Definition Indicator and presistence report file by now.
 * @param originalName the value of parameter should be lable of category(for""Bin_Low_Frequency_Table_0.1.definition"" indicatorDefinition it should be ""Advanced Statistics"")
 * @return if originalName is null we will return EMPTY string else will return internationalization string
 */
public static String getCategoryInternationalizationLabel(String originalName){
  return getInternationalizationLabel(originalName.replace(PluginConstant.SPACE_STRING,PluginConstant.UNDER_LINE));
}",0.3630952380952381
137451,"/** 
 * get the RepositoryNode according to the ERepositoryObjectType(the ERepositoryObjectType should not be RECYCLE_BIN, because there doesn't exist a physical folder, so there will return null and log an error message; use getRecycleBinRepNode() to get the RecycleBinNode).
 * @param nodeType the node's ERepositoryObjectType
 * @param open if the DQView is not show, show it or not
 * @return
 */
public static RepositoryNode getRootNode(ERepositoryObjectType nodeType,boolean open){
  FolderItem folderItem=ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),nodeType,Path.EMPTY);
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer(open);
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      node=(RepositoryNode)item.getData();
      if (node.isBin()) {
        continue;
      }
      if (folderItem != null) {
        boolean isSysFolder=ENodeType.SYSTEM_FOLDER == node.getType() && FolderType.SYSTEM_FOLDER_LITERAL == folderItem.getType();
        if (isSysFolder) {
          String viewFolderLabel=folderItem.getProperty().getLabel();
          String folderLabel=node.getObject().getProperty().getLabel();
          if (viewFolderLabel.equals(folderLabel)) {
            return node;
          }
        }
      }
    }
  }
  log.error(Messages.getString(""String_Node_Str"") + nodeType.getLabel());
  return node;
}","/** 
 * get the RepositoryNode according to the ERepositoryObjectType(the ERepositoryObjectType should not be RECYCLE_BIN, because there doesn't exist a physical folder, so there will return null and log an error message; use getRecycleBinRepNode() to get the RecycleBinNode).
 * @param nodeType the node's ERepositoryObjectType
 * @param open if the DQView is not show, show it or not
 * @return
 */
public static RepositoryNode getRootNode(ERepositoryObjectType nodeType,boolean open){
  FolderItem folderItem=ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),nodeType,Path.EMPTY);
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer(open);
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      node=(RepositoryNode)item.getData();
      if (node.isBin()) {
        continue;
      }
      if (folderItem != null) {
        boolean isSysFolder=ENodeType.SYSTEM_FOLDER == node.getType() && FolderType.SYSTEM_FOLDER_LITERAL == folderItem.getType();
        if (isSysFolder) {
          String viewFolderLabel=folderItem.getProperty().getLabel();
          String folderLabel=node.getObject().getProperty().getLabel();
          if (viewFolderLabel.equals(folderLabel)) {
            return node;
          }
        }
      }
    }
    log.error(Messages.getString(""String_Node_Str"") + nodeType.getLabel());
  }
  return node;
}",0.9979661016949152
137452,"/** 
 * physical Delete all selected nodes, if the node has dependency, will popup a confirm dialog with lists of dependencies
 */
private void physicalDelete(){
  confirmForDQ=true;
  List<IRepositoryNode> folderNodeWhichChildHadDepend=null;
  for (int i=selectedNodes.size() - 1; i >= 0; i--) {
    if (selectedNodes.size() == 0) {
      break;
    }
    IRepositoryNode node=selectedNodes.get(i);
    IRepositoryNode parent=node.getParent();
    if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
      List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
      boolean haveSubNode=false;
      for (      IRepositoryNode subNode : newLs) {
        if (!hasDependencyClients(subNode)) {
          excuteSuperRun(subNode,node);
        }
 else {
          haveSubNode=true;
          if (folderNodeWhichChildHadDepend == null) {
            folderNodeWhichChildHadDepend=new ArrayList<IRepositoryNode>();
          }
          folderNodeWhichChildHadDepend.add(node);
        }
      }
      if (!haveSubNode) {
        excuteSuperRun(node,parent);
      }
    }
 else {
      if (!hasDependencyClients(node)) {
        excuteSuperRun(node,parent);
      }
    }
  }
  boolean forceDelete=false;
  if (nodeWithDependsMap.size() > 0) {
    forceDelete=DeleteModelElementConfirmDialog.showDialog(nodeWithDependsMap,DefaultMessagesImpl.getString(""String_Node_Str""),true);
    if (forceDelete) {
      Iterator iter=nodeWithDependsMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<IRepositoryNode,List<ModelElement>> entry=(Map.Entry<IRepositoryNode,List<ModelElement>>)iter.next();
        IRepositoryNode node=entry.getKey();
        List<ModelElement> dependencies=entry.getValue();
        excuteSuperRun(node,node.getParent());
        physicalDeleteDependencies(dependencies);
      }
    }
  }
  nodeWithDependsMap.clear();
  if (folderNodeWhichChildHadDepend != null && folderNodeWhichChildHadDepend.size() > 0) {
    if (forceDelete) {
      for (      IRepositoryNode folder : folderNodeWhichChildHadDepend) {
        excuteSuperRun(folder,folder.getParent());
      }
    }
  }
  confirmForDQ=false;
}","/** 
 * physical Delete all selected nodes, if the node has dependency, will popup a confirm dialog with lists of dependencies
 */
private void physicalDelete(){
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>();
  nodes.addAll(selectedNodes);
  confirmForDQ=true;
  List<IRepositoryNode> folderNodeWhichChildHadDepend=null;
  Iterator<IRepositoryNode> iterator=nodes.iterator();
  while (iterator.hasNext()) {
    IRepositoryNode node=iterator.next();
    IRepositoryNode parent=node.getParent();
    if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
      List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
      boolean haveSubNode=false;
      for (      IRepositoryNode subNode : newLs) {
        if (!hasDependencyClients(subNode)) {
          excuteSuperRun(subNode,node);
        }
 else {
          haveSubNode=true;
          if (folderNodeWhichChildHadDepend == null) {
            folderNodeWhichChildHadDepend=new ArrayList<IRepositoryNode>();
          }
          if (!folderNodeWhichChildHadDepend.contains(node)) {
            folderNodeWhichChildHadDepend.add(node);
          }
        }
      }
      if (!haveSubNode) {
        excuteSuperRun(node,parent);
      }
    }
 else {
      if (!hasDependencyClients(node)) {
        excuteSuperRun(node,parent);
      }
    }
  }
  boolean forceDelete=false;
  if (nodeWithDependsMap.size() > 0) {
    forceDelete=DeleteModelElementConfirmDialog.showDialog(nodeWithDependsMap,DefaultMessagesImpl.getString(""String_Node_Str""),true);
    if (forceDelete) {
      Iterator<Entry<IRepositoryNode,List<ModelElement>>> iter=nodeWithDependsMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<IRepositoryNode,List<ModelElement>> entry=iter.next();
        IRepositoryNode node=entry.getKey();
        List<ModelElement> dependencies=entry.getValue();
        excuteSuperRun(node,node.getParent());
        physicalDeleteDependencies(dependencies);
      }
    }
  }
  nodeWithDependsMap.clear();
  if (folderNodeWhichChildHadDepend != null && folderNodeWhichChildHadDepend.size() > 0) {
    if (forceDelete) {
      for (      IRepositoryNode folder : folderNodeWhichChildHadDepend) {
        excuteSuperRun(folder,folder.getParent());
      }
    }
  }
  confirmForDQ=false;
}",0.8375956284153006
137453,"/** 
 * Sort the selected nodes with special order: - first report type, - then (jrxml, analysis) type, - then (connection, DQ Rule, Pattern) type. - finally : the type which has no dependency,
 */
private void sortNodesBeforePhysicalDelete(){
  List<IRepositoryNode> anaOrJrxml=new ArrayList<IRepositoryNode>();
  List<IRepositoryNode> finalLevel=new ArrayList<IRepositoryNode>();
  List<IRepositoryNode> reportNodes=new ArrayList<IRepositoryNode>();
  for (  IRepositoryNode node : selectedNodes) {
    if (isReport(node)) {
      reportNodes.add(node);
    }
 else     if (isAna(node) || isJrxml(node)) {
      anaOrJrxml.add(node);
    }
 else {
      finalLevel.add(node);
    }
  }
  selectedNodes.clear();
  selectedNodes.addAll(finalLevel);
  selectedNodes.addAll(anaOrJrxml);
  selectedNodes.addAll(reportNodes);
}","/** 
 * Sort the selected nodes with special order: - first report type, - then (jrxml, analysis) type, - then (connection, DQ Rule, Pattern) type. - finally : the type which has no dependency,
 */
private void sortNodesBeforePhysicalDelete(){
  List<IRepositoryNode> reportNodes=new ArrayList<IRepositoryNode>();
  List<IRepositoryNode> anaOrJrxml=new ArrayList<IRepositoryNode>();
  List<IRepositoryNode> files=new ArrayList<IRepositoryNode>();
  List<IRepositoryNode> folders=new ArrayList<IRepositoryNode>();
  for (  IRepositoryNode node : selectedNodes) {
    if (isReport(node)) {
      reportNodes.add(node);
    }
 else     if (isAna(node) || isJrxml(node)) {
      anaOrJrxml.add(node);
    }
 else     if (node.getType() == ENodeType.SIMPLE_FOLDER) {
      folders.add(node);
    }
 else {
      files.add(node);
    }
  }
  selectedNodes.clear();
  selectedNodes.addAll(folders);
  selectedNodes.addAll(files);
  selectedNodes.addAll(anaOrJrxml);
  selectedNodes.addAll(reportNodes);
}",0.8648351648351649
137454,"protected boolean isPatternTextEditable(){
  return false;
}","@Override protected boolean isPatternTextEditable(){
  return false;
}",0.9230769230769232
137455,"public void updateLineAndOtherCombos(final CCombo combo,TdExpression expression,String oldLanguage){
  if (combo.getText().equals(PatternLanguageType.JAVA.getName())) {
    updateLineForJava(combo);
  }
 else {
    updateLineForExpression(combo,expression,oldLanguage);
  }
  updateOtherCombos(combo);
}","@Override public void updateLineAndOtherCombos(final CCombo combo,TdExpression expression,String oldLanguage){
  if (combo.getText().equals(PatternLanguageType.JAVA.getName())) {
    updateLineForJava(combo);
  }
 else {
    updateLineForExpression(combo,expression,oldLanguage);
  }
  updateOtherCombos(combo);
}",0.9837662337662336
137456,"protected void handleSelectExpression(final CCombo combo,final ExpressionEditDialog editDialog){
  super.handleSelectExpression(combo,editDialog);
  if (IndicatorCategoryHelper.isUserDefMatching(category)) {
    tempViewValidRowsExpressionMap.put(combo,editDialog.getTempViewValidRowsExp());
    tempViewInvalidRowsExpressionMap.put(combo,editDialog.getTempViewInvalidRowsExp());
    tempViewValidValuesExpressionMap.put(combo,editDialog.getTempViewValidValuesExp());
    tempViewInvalidValuesExpressionMap.put(combo,editDialog.getTempViewInvalidValuesExp());
  }
 else {
    tempViewRowsExpressionMap.put(combo,editDialog.getTempViewRowsExp());
  }
}","@Override protected void handleSelectExpression(final CCombo combo,final ExpressionEditDialog editDialog){
  super.handleSelectExpression(combo,editDialog);
  if (IndicatorCategoryHelper.isUserDefMatching(category)) {
    tempViewValidRowsExpressionMap.put(combo,editDialog.getTempViewValidRowsExp());
    tempViewInvalidRowsExpressionMap.put(combo,editDialog.getTempViewInvalidRowsExp());
    tempViewValidValuesExpressionMap.put(combo,editDialog.getTempViewValidValuesExp());
    tempViewInvalidValuesExpressionMap.put(combo,editDialog.getTempViewInvalidValuesExp());
  }
 else {
    tempViewRowsExpressionMap.put(combo,editDialog.getTempViewRowsExp());
  }
}",0.992378048780488
137457,"protected void disposeExpressionChild(){
  int languageLength=javaLanguageComp == null ? 0 : javaLanguageComp.getChildren().length;
  int dataBaseLength=dataBaseComp == null ? 0 : dataBaseComp.getChildren().length;
  if (languageLength == 0 && dataBaseLength == 0) {
    addTitleComp(dataBaseComp);
  }
  if (languageLength == 1) {
    Control[] children=javaLanguageComp.getChildren();
    children[0].dispose();
  }
}","@Override protected void disposeExpressionChild(){
  int languageLength=javaLanguageComp == null ? 0 : javaLanguageComp.getChildren().length;
  int dataBaseLength=dataBaseComp == null ? 0 : dataBaseComp.getChildren().length;
  if (languageLength == 0 && dataBaseLength == 0) {
    addTitleComp(dataBaseComp);
  }
  if (languageLength == 1) {
    Control[] children=javaLanguageComp.getChildren();
    children[0].dispose();
  }
}",0.9882075471698112
137458,"protected ReturnCode checkBeforeSave(){
  ReturnCode rc=super.checkBeforeSave();
  if (tempParameters != null) {
    Map<String,Integer> paraMap=new HashMap<String,Integer>();
    for (    IndicatorDefinitionParameter para : tempParameters) {
      String key=para.getKey();
      Integer keyCount=paraMap.get(key);
      if (keyCount == null) {
        paraMap.put(key,Integer.valueOf(1));
      }
 else {
        paraMap.put(key,Integer.valueOf(keyCount.intValue() + 1));
      }
    }
    if (paraMap.size() != tempParameters.size()) {
      StringBuffer duplicateKeywords=new StringBuffer();
      for (      String key : paraMap.keySet()) {
        Integer value=paraMap.get(key);
        if (value.intValue() > 1) {
          duplicateKeywords.append(""String_Node_Str"" + key);
        }
      }
      rc.setOk(false);
      rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str"",duplicateKeywords.toString()));
      return rc;
    }
    for (    IndicatorDefinitionParameter para : tempParameters) {
      String key=para.getKey();
      String value=para.getValue();
      if (!StringUtils.isBlank(key) && (key.indexOf(UDIHelper.PARA_SEPARATE_1) > -1 || key.indexOf(UDIHelper.PARA_SEPARATE_2) > -1)) {
        rc.setOk(false);
        rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str"",""String_Node_Str"" + UDIHelper.PARA_SEPARATE_1 + ""String_Node_Str""+ UDIHelper.PARA_SEPARATE_2));
        return rc;
      }
      if (!StringUtils.isBlank(value) && (value.indexOf(UDIHelper.PARA_SEPARATE_1) > -1 || value.indexOf(UDIHelper.PARA_SEPARATE_2) > -1)) {
        rc.setOk(false);
        rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str"",""String_Node_Str"" + UDIHelper.PARA_SEPARATE_1 + ""String_Node_Str""+ UDIHelper.PARA_SEPARATE_2));
        return rc;
      }
    }
  }
  if (!checkJavaUDIBeforeSave()) {
    ((IndicatorEditor)this.getEditor()).setSaveActionButtonState(false);
    rc.setOk(false);
    rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
    return rc;
  }
  return rc;
}","@Override protected ReturnCode checkBeforeSave(){
  ReturnCode rc=super.checkBeforeSave();
  if (tempParameters != null) {
    Map<String,Integer> paraMap=new HashMap<String,Integer>();
    for (    IndicatorDefinitionParameter para : tempParameters) {
      String key=para.getKey();
      Integer keyCount=paraMap.get(key);
      if (keyCount == null) {
        paraMap.put(key,Integer.valueOf(1));
      }
 else {
        paraMap.put(key,Integer.valueOf(keyCount.intValue() + 1));
      }
    }
    if (paraMap.size() != tempParameters.size()) {
      StringBuffer duplicateKeywords=new StringBuffer();
      for (      String key : paraMap.keySet()) {
        Integer value=paraMap.get(key);
        if (value.intValue() > 1) {
          duplicateKeywords.append(""String_Node_Str"" + key);
        }
      }
      rc.setOk(false);
      rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str"",duplicateKeywords.toString()));
      return rc;
    }
    for (    IndicatorDefinitionParameter para : tempParameters) {
      String key=para.getKey();
      String value=para.getValue();
      if (!StringUtils.isBlank(key) && (key.indexOf(UDIHelper.PARA_SEPARATE_1) > -1 || key.indexOf(UDIHelper.PARA_SEPARATE_2) > -1)) {
        rc.setOk(false);
        rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str"",""String_Node_Str"" + UDIHelper.PARA_SEPARATE_1 + ""String_Node_Str""+ UDIHelper.PARA_SEPARATE_2));
        return rc;
      }
      if (!StringUtils.isBlank(value) && (value.indexOf(UDIHelper.PARA_SEPARATE_1) > -1 || value.indexOf(UDIHelper.PARA_SEPARATE_2) > -1)) {
        rc.setOk(false);
        rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str"",""String_Node_Str"" + UDIHelper.PARA_SEPARATE_1 + ""String_Node_Str""+ UDIHelper.PARA_SEPARATE_2));
        return rc;
      }
    }
  }
  if (!checkJavaUDIBeforeSave()) {
    ((IndicatorEditor)this.getEditor()).setSaveActionButtonState(false);
    rc.setOk(false);
    rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
    return rc;
  }
  return rc;
}",0.9975490196078431
137459,"@Override public void initialize(FormEditor editor){
  super.initialize(editor);
  category=DefinitionHandler.getInstance().getUserDefinedCountIndicatorCategory();
  initTempIndicatorDefinitionParameter(definition);
}","@Override public void initialize(FormEditor editor){
  super.initialize(editor);
  if (definition != null && definition.getCategories().size() > 0) {
    category=definition.getCategories().get(0);
  }
 else {
    category=DefinitionHandler.getInstance().getUserDefinedCountIndicatorCategory();
  }
  initTempIndicatorDefinitionParameter(definition);
}",0.7627416520210897
137460,"/** 
 * judge if has connection in recycle bin which depended by DQ analysis.
 */
@Override public List<IRepositoryNode> getDependentConnNodesInRecycleBin(List<IRepositoryNode> firstLevelRecyNodes){
  List<IRepositoryNode> canBeDependedNodes=new ArrayList<IRepositoryNode>();
  for (  IRepositoryNode node : firstLevelRecyNodes) {
    canBeDependedNodes=getCanBeDependedNodes(node);
  }
  return DQDeleteHelper.getCanNotDeletedNodes(canBeDependedNodes,false);
}","/** 
 * judge if has connection in recycle bin which depended by DQ analysis.
 */
@Override public List<IRepositoryNode> getDependentConnNodesInRecycleBin(List<IRepositoryNode> firstLevelRecyNodes){
  List<IRepositoryNode> canBeDependedNodes=new ArrayList<IRepositoryNode>();
  for (  IRepositoryNode node : firstLevelRecyNodes) {
    canBeDependedNodes.addAll(getCanBeDependedNodes(node));
  }
  return DQDeleteHelper.getCanNotDeletedNodes(canBeDependedNodes,false);
}",0.989247311827957
137461,"public static IIndicatorNode[] buildIndicatorCategory(){
  if (indicatorCategoryNodes != null) {
    return indicatorCategoryNodes;
  }
  IndicatorCategoryNode simpleCategoryNode=new IndicatorCategoryNode(IndicatorEnum.CountsIndicatorEnum);
  IndicatorCategoryNode textCategoryNode=new IndicatorCategoryNode(IndicatorEnum.TextIndicatorEnum);
  IndicatorCategoryNode boxCategoryNode=new IndicatorCategoryNode(IndicatorEnum.BoxIIndicatorEnum);
  IndicatorEnum[] patternFinderEnums=new IndicatorEnum[]{IndicatorEnum.PatternFreqIndicatorEnum,IndicatorEnum.PatternLowFreqIndicatorEnum,IndicatorEnum.DatePatternFreqIndicatorEnum};
  IndicatorCategoryNode patternFinderCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),patternFinderEnums);
  IndicatorEnum[] soundexIndicatorEnums=new IndicatorEnum[]{IndicatorEnum.SoundexIndicatorEnum,IndicatorEnum.SoundexLowIndicatorEnum};
  IndicatorCategoryNode soundexCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),soundexIndicatorEnums);
  IndicatorCategoryNode phoneCategoryNode=new IndicatorCategoryNode(IndicatorEnum.PhoneNumbStatisticsIndicatorEnum);
  IndicatorEnum[] advanceIndicatorEnums=new IndicatorEnum[]{IndicatorEnum.ModeIndicatorEnum,IndicatorEnum.FrequencyIndicatorEnum,IndicatorEnum.DateFrequencyIndicatorEnum,IndicatorEnum.WeekFrequencyIndicatorEnum,IndicatorEnum.MonthFrequencyIndicatorEnum,IndicatorEnum.QuarterFrequencyIndicatorEnum,IndicatorEnum.YearFrequencyIndicatorEnum,IndicatorEnum.BinFrequencyIndicatorEnum,IndicatorEnum.LowFrequencyIndicatorEnum,IndicatorEnum.DateLowFrequencyIndicatorEnum,IndicatorEnum.WeekLowFrequencyIndicatorEnum,IndicatorEnum.MonthLowFrequencyIndicatorEnum,IndicatorEnum.QuarterLowFrequencyIndicatorEnum,IndicatorEnum.YearLowFrequencyIndicatorEnum,IndicatorEnum.BinLowFrequencyIndicatorEnum};
  IndicatorCategoryNode advanceCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),advanceIndicatorEnums);
  IndicatorEnum[] fraudIndicatorEnums=new IndicatorEnum[]{IndicatorEnum.BenfordLawFrequencyIndicatorEnum};
  IndicatorCategoryNode fraudCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),fraudIndicatorEnums);
  indicatorCategoryNodes=new IndicatorCategoryNode[]{simpleCategoryNode,textCategoryNode,boxCategoryNode,advanceCategoryNode,patternFinderCategoryNode,soundexCategoryNode,phoneCategoryNode,fraudCategoryNode};
  return indicatorCategoryNodes;
}","public static IIndicatorNode[] buildIndicatorCategory(){
  if (indicatorCategoryNodes != null) {
    return indicatorCategoryNodes;
  }
  IndicatorCategoryNode simpleCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),IndicatorEnum.CountsIndicatorEnum);
  IndicatorCategoryNode textCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),IndicatorEnum.TextIndicatorEnum);
  IndicatorCategoryNode boxCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),IndicatorEnum.BoxIIndicatorEnum);
  IndicatorEnum[] patternFinderEnums=new IndicatorEnum[]{IndicatorEnum.PatternFreqIndicatorEnum,IndicatorEnum.PatternLowFreqIndicatorEnum,IndicatorEnum.DatePatternFreqIndicatorEnum};
  IndicatorCategoryNode patternFinderCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),patternFinderEnums);
  IndicatorEnum[] soundexIndicatorEnums=new IndicatorEnum[]{IndicatorEnum.SoundexIndicatorEnum,IndicatorEnum.SoundexLowIndicatorEnum};
  IndicatorCategoryNode soundexCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),soundexIndicatorEnums);
  IndicatorCategoryNode phoneCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),IndicatorEnum.PhoneNumbStatisticsIndicatorEnum);
  IndicatorEnum[] advanceIndicatorEnums=new IndicatorEnum[]{IndicatorEnum.ModeIndicatorEnum,IndicatorEnum.FrequencyIndicatorEnum,IndicatorEnum.DateFrequencyIndicatorEnum,IndicatorEnum.WeekFrequencyIndicatorEnum,IndicatorEnum.MonthFrequencyIndicatorEnum,IndicatorEnum.QuarterFrequencyIndicatorEnum,IndicatorEnum.YearFrequencyIndicatorEnum,IndicatorEnum.BinFrequencyIndicatorEnum,IndicatorEnum.LowFrequencyIndicatorEnum,IndicatorEnum.DateLowFrequencyIndicatorEnum,IndicatorEnum.WeekLowFrequencyIndicatorEnum,IndicatorEnum.MonthLowFrequencyIndicatorEnum,IndicatorEnum.QuarterLowFrequencyIndicatorEnum,IndicatorEnum.YearLowFrequencyIndicatorEnum,IndicatorEnum.BinLowFrequencyIndicatorEnum};
  IndicatorCategoryNode advanceCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),advanceIndicatorEnums);
  IndicatorEnum[] fraudIndicatorEnums=new IndicatorEnum[]{IndicatorEnum.BenfordLawFrequencyIndicatorEnum};
  IndicatorCategoryNode fraudCategoryNode=new IndicatorCategoryNode(Messages.getString(""String_Node_Str""),fraudIndicatorEnums);
  indicatorCategoryNodes=new IndicatorCategoryNode[]{simpleCategoryNode,textCategoryNode,boxCategoryNode,advanceCategoryNode,patternFinderCategoryNode,soundexCategoryNode,phoneCategoryNode,fraudCategoryNode};
  return indicatorCategoryNodes;
}",0.9698053237981724
137462,"public String getLabel(){
  String displayLabel=label;
  if (indicatorEnum != null) {
    displayLabel=this.indicatorEnum.getLabel();
  }
  return displayLabel;
}","/** 
 * the label should be a Internationalized string
 */
@Override public String getLabel(){
  String displayLabel=label;
  if (StringUtil.isEmpty(displayLabel) && indicatorEnum != null) {
    displayLabel=this.indicatorEnum.getLabel();
  }
  return displayLabel;
}",0.7552447552447552
137463,"/** 
 * the label should be a Internationalized string
 */
@Override public String getLabel(){
  String displayLabel=label;
  if (StringUtil.isEmpty(displayLabel) && indicatorEnum != null) {
    displayLabel=this.indicatorEnum.getLabel();
  }
  return displayLabel;
}","/** 
 * the label should be a Internationalized string
 */
@Override public String getLabel(){
  String displayLabel=label;
  if (StringUtils.isEmpty(displayLabel) && indicatorEnum != null) {
    displayLabel=this.indicatorEnum.getLabel();
  }
  return displayLabel;
}",0.9981308411214952
137464,"/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
protected void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  dErrors.addAll(writer.check());
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    for (    File depFile : record.getDependencyMap().keySet()) {
      ModelElement element=record.getDependencyMap().get(depFile);
      ItemRecord findRecord=ItemRecord.findRecord(depFile);
      boolean isJrxmlDepFile=depFile.getName().endsWith(FactoriesUtil.JRXML);
      String dptLabel=element != null && !isJrxmlDepFile && PropertyHelper.getProperty(element) != null ? PropertyHelper.getProperty(element).getDisplayName() : depFile.getName();
      if (findRecord == null || !repositoryTree.getChecked(findRecord)) {
        if (element instanceof IndicatorDefinition) {
          String uuid=ResourceHelper.getUUID(element);
          if (IndicatorDefinitionFileHelper.isTechnialIndicator(uuid)) {
            continue;
          }
        }
        dErrors.add(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ dptLabel);
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}","/** 
 * check that directory exist and issue an error message if not. <br> check that the folder is a data quality repository or issue an error.<br> check that anything is check in the tree or issue an error.<br>
 */
protected void checkforErrors(){
  List<String> dErrors=new ArrayList<String>();
  if (repositoryTree.getTree().getItems().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  if (repositoryTree.getCheckedElements().length == 0) {
    dErrors.add(Messages.getString(""String_Node_Str""));
  }
  dErrors.addAll(writer.check());
  ItemRecord[] elements=getElements();
  for (  ItemRecord record : elements) {
    dErrors.addAll(record.getErrors());
    for (    File depFile : record.getDependencyMap().keySet()) {
      ModelElement element=record.getDependencyMap().get(depFile);
      ItemRecord findRecord=ItemRecord.findRecord(depFile);
      boolean isJrxmlDepFile=depFile.getName().endsWith(FactoriesUtil.JRXML);
      String dptLabel=element != null && !isJrxmlDepFile && PropertyHelper.getProperty(element) != null ? PropertyHelper.getProperty(element).getDisplayName() : depFile.getName();
      if (findRecord == null || !repositoryTree.getChecked(findRecord)) {
        if (element instanceof IndicatorDefinition) {
          String uuid=ResourceHelper.getUUID(element);
          if (IndicatorDefinitionFileHelper.isTechnialIndicator(uuid)) {
            continue;
          }
        }
        dErrors.add(""String_Node_Str"" + record.getName() + ""String_Node_Str""+ dptLabel);
      }
    }
  }
  if (!dErrors.isEmpty()) {
    setErrorMessage(dErrors.get(0));
  }
 else {
    setErrorMessage(null);
  }
  updatePageStatus();
}",0.9879154078549848
137465,"@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        boolean isDelete=true;
        ModelElement modEle=record.getElement();
        if (object != null) {
          if (isIndicator(modEle)) {
            mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isParserRule(modEle)) {
            mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isPattern(modEle)) {
            mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
            isDelete=false;
          }
 else {
            ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
          }
        }
        if (isDelete) {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
              write(resPath,desPath);
              allCopiedFiles.add(desPath.toFile());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        boolean isDelete=true;
        ModelElement modEle=record.getElement();
        if (object != null) {
          if (isIndicator(modEle)) {
            mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isParserRule(modEle)) {
            mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isPattern(modEle)) {
            mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
            isDelete=false;
          }
 else {
            EObjectHelper.removeDependencys(PropertyHelper.getModelElement(object.getProperty()));
            ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
          }
        }
        if (isDelete) {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
              write(resPath,desPath);
              allCopiedFiles.add(desPath.toFile());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.9737051792828684
137466,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicator(modEle)) {
                mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isParserRule(modEle)) {
                mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isPattern(modEle)) {
                mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
                isDelete=false;
              }
 else {
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicator(modEle)) {
                mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isParserRule(modEle)) {
                mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isPattern(modEle)) {
                mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
                isDelete=false;
              }
 else {
                EObjectHelper.removeDependencys(PropertyHelper.getModelElement(object.getProperty()));
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}",0.9797204174050008
137467,"/** 
 * remove invalid client depenedences before migration.
 */
private void removeInvalidDependency(Property property){
  ModelElement modelElement=PropertyHelper.getModelElement(property);
  if (modelElement != null) {
    EList<Dependency> clientDependencys=modelElement.getSupplierDependency();
    for (    Dependency dependency : clientDependencys) {
      EList<ModelElement> clients=dependency.getClient();
      Iterator<ModelElement> dependencyIterator=clients.iterator();
      while (dependencyIterator.hasNext()) {
        ModelElement client=dependencyIterator.next();
        if (client == null || client.eIsProxy()) {
          dependencyIterator.remove();
        }
      }
    }
    Resource modEResource=modelElement.eResource();
    if (!clientDependencys.isEmpty() && modEResource != null) {
      EMFUtil.saveSingleResource(modEResource);
    }
  }
}","private void removeInvalidDependency(ModelElement modelElement){
  EList<Dependency> clientDependencys=modelElement.getSupplierDependency();
  for (  Dependency dependency : clientDependencys) {
    EList<ModelElement> clients=dependency.getClient();
    Iterator<ModelElement> dependencyIterator=clients.iterator();
    while (dependencyIterator.hasNext()) {
      ModelElement client=dependencyIterator.next();
      if (client == null || client.eIsProxy()) {
        dependencyIterator.remove();
      }
    }
  }
  Resource modEResource=modelElement.eResource();
  if (!clientDependencys.isEmpty() && modEResource != null) {
    EMFUtil.saveSingleResource(modEResource);
  }
}",0.8203477141017386
137468,"public boolean isVirtualFolder(){
  return this.getObject() == null;
}","@Override public boolean isVirtualFolder(){
  return this.getObject() == null;
}",0.9333333333333332
137469,"/** 
 * DOC klliu Comment method ""doSwichNode"".
 * @param analyzedElement
 * @return
 */
private IRepositoryNode doSwichNode(ModelElement analyzedElement,AnalysisSubFolderRepNode childNodeFolder){
  Property anaEleProperty=PropertyHelper.getProperty(analyzedElement);
  IRepositoryViewObject medataViewObject=null;
  try {
    medataViewObject=ProxyRepositoryFactory.getInstance().getLastVersion(anaEleProperty.getId());
  }
 catch (  Exception e) {
    log.error(e);
  }
  if (medataViewObject != null) {
    if (analyzedElement instanceof DatabaseConnection) {
      DBConnectionRepNode connNode=new DBConnectionRepNode(medataViewObject,this,ENodeType.REPOSITORY_ELEMENT);
      connNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      connNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
      medataViewObject.setRepositoryNode(connNode);
      return connNode;
    }
 else     if (analyzedElement instanceof Catalog) {
      RepositoryNode catalogNode=new DBCatalogRepNode(new MetadataCatalogRepositoryObject(medataViewObject,(Catalog)analyzedElement),this,ENodeType.TDQ_REPOSITORY_ELEMENT);
      catalogNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_CATALOG);
      catalogNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_CATALOG);
      medataViewObject.setRepositoryNode(catalogNode);
      return catalogNode;
    }
 else     if (analyzedElement instanceof Schema) {
      RepositoryNode schemaNode=new DBSchemaRepNode(new MetadataSchemaRepositoryObject(medataViewObject,(Schema)analyzedElement),this,ENodeType.TDQ_REPOSITORY_ELEMENT);
      schemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_SCHEMA);
      schemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_SCHEMA);
      medataViewObject.setRepositoryNode(schemaNode);
      return schemaNode;
    }
 else     if (analyzedElement instanceof TdTable) {
      DBTableRepNode tableNode=new DBTableRepNode(new TdTableRepositoryObject(medataViewObject,(TdTable)analyzedElement),childNodeFolder,ENodeType.TDQ_REPOSITORY_ELEMENT);
      tableNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_TABLE);
      tableNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_TABLE);
      medataViewObject.setRepositoryNode(tableNode);
      return tableNode;
    }
 else     if (analyzedElement instanceof MetadataColumn) {
      RepositoryNode columnNode=null;
      if (analyzedElement instanceof TdColumn) {
        columnNode=new DBColumnRepNode(new MetadataColumnRepositoryObject(medataViewObject,(MetadataColumn)analyzedElement),childNodeFolder,ENodeType.TDQ_REPOSITORY_ELEMENT);
      }
 else {
        columnNode=new DFColumnRepNode(new MetadataColumnRepositoryObject(medataViewObject,(MetadataColumn)analyzedElement),this,ENodeType.TDQ_REPOSITORY_ELEMENT);
      }
      columnNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_COLUMN);
      columnNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_COLUMN);
      medataViewObject.setRepositoryNode(columnNode);
      return columnNode;
    }
 else     if (analyzedElement instanceof TdXmlElementType) {
      MDMXmlElementRepNode mdmXmlElementNode=new MDMXmlElementRepNode(new MetadataXmlElementTypeRepositoryObject(medataViewObject,(TdXmlElementType)analyzedElement),this,ENodeType.REPOSITORY_ELEMENT);
      mdmXmlElementNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.MDM_ELEMENT_TYPE);
      mdmXmlElementNode.setProperties(EProperties.LABEL,ERepositoryObjectType.MDM_ELEMENT_TYPE);
      medataViewObject.setRepositoryNode(mdmXmlElementNode);
      return mdmXmlElementNode;
    }
  }
  return null;
}","/** 
 * DOC klliu Comment method ""doSwichNode"".
 * @param analyzedElement
 * @return
 */
private IRepositoryNode doSwichNode(ModelElement analyzedElement,AnalysisSubFolderRepNode childNodeFolder){
  Property anaEleProperty=PropertyHelper.getProperty(analyzedElement);
  IRepositoryViewObject medataViewObject=null;
  try {
    medataViewObject=ProxyRepositoryFactory.getInstance().getLastVersion(anaEleProperty.getId());
  }
 catch (  Exception e) {
    log.error(e);
  }
  if (medataViewObject != null) {
    if (analyzedElement instanceof DatabaseConnection) {
      DBConnectionRepNode connNode=new DBConnectionRepNode(medataViewObject,this,ENodeType.REPOSITORY_ELEMENT);
      connNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CONNECTIONS);
      connNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CONNECTIONS);
      medataViewObject.setRepositoryNode(connNode);
      return connNode;
    }
 else     if (analyzedElement instanceof Catalog) {
      RepositoryNode catalogNode=DQRepNodeCreateFactory.createDBCatalogRepNode(new MetadataCatalogRepositoryObject(medataViewObject,(Catalog)analyzedElement),this,ENodeType.TDQ_REPOSITORY_ELEMENT);
      catalogNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_CATALOG);
      catalogNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_CATALOG);
      medataViewObject.setRepositoryNode(catalogNode);
      return catalogNode;
    }
 else     if (analyzedElement instanceof Schema) {
      RepositoryNode schemaNode=new DBSchemaRepNode(new MetadataSchemaRepositoryObject(medataViewObject,(Schema)analyzedElement),this,ENodeType.TDQ_REPOSITORY_ELEMENT);
      schemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_SCHEMA);
      schemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_SCHEMA);
      medataViewObject.setRepositoryNode(schemaNode);
      return schemaNode;
    }
 else     if (analyzedElement instanceof TdTable) {
      DBTableRepNode tableNode=new DBTableRepNode(new TdTableRepositoryObject(medataViewObject,(TdTable)analyzedElement),childNodeFolder,ENodeType.TDQ_REPOSITORY_ELEMENT);
      tableNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_TABLE);
      tableNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_TABLE);
      medataViewObject.setRepositoryNode(tableNode);
      return tableNode;
    }
 else     if (analyzedElement instanceof MetadataColumn) {
      RepositoryNode columnNode=null;
      if (analyzedElement instanceof TdColumn) {
        columnNode=new DBColumnRepNode(new MetadataColumnRepositoryObject(medataViewObject,(MetadataColumn)analyzedElement),childNodeFolder,ENodeType.TDQ_REPOSITORY_ELEMENT);
      }
 else {
        columnNode=new DFColumnRepNode(new MetadataColumnRepositoryObject(medataViewObject,(MetadataColumn)analyzedElement),this,ENodeType.TDQ_REPOSITORY_ELEMENT);
      }
      columnNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_COLUMN);
      columnNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_COLUMN);
      medataViewObject.setRepositoryNode(columnNode);
      return columnNode;
    }
 else     if (analyzedElement instanceof TdXmlElementType) {
      MDMXmlElementRepNode mdmXmlElementNode=new MDMXmlElementRepNode(new MetadataXmlElementTypeRepositoryObject(medataViewObject,(TdXmlElementType)analyzedElement),this,ENodeType.REPOSITORY_ELEMENT);
      mdmXmlElementNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.MDM_ELEMENT_TYPE);
      mdmXmlElementNode.setProperties(EProperties.LABEL,ERepositoryObjectType.MDM_ELEMENT_TYPE);
      medataViewObject.setRepositoryNode(mdmXmlElementNode);
      return mdmXmlElementNode;
    }
  }
  return null;
}",0.9956935925877594
137470,"private void initializedCatalogRepNode(List<IRepositoryNode> nodes,Package pack){
  if (pack instanceof Catalog) {
    MetadataCatalogRepositoryObject metadataCatalog=new MetadataCatalogRepositoryObject(getObject(),(Catalog)pack);
    RepositoryNode catalogNode=new DBCatalogRepNode(metadataCatalog,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
    catalogNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_CATALOG);
    catalogNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_CATALOG);
    metadataCatalog.setRepositoryNode(catalogNode);
    nodes.add(catalogNode);
  }
}","private void initializedCatalogRepNode(List<IRepositoryNode> nodes,Package pack){
  if (pack instanceof Catalog) {
    MetadataCatalogRepositoryObject metadataCatalog=new MetadataCatalogRepositoryObject(getObject(),(Catalog)pack);
    RepositoryNode catalogNode=DQRepNodeCreateFactory.createDBCatalogRepNode(metadataCatalog,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
    catalogNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_CATALOG);
    catalogNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_CATALOG);
    metadataCatalog.setRepositoryNode(catalogNode);
    nodes.add(catalogNode);
  }
}",0.9737887212073074
137471,"/** 
 * create the node of parent.
 * @param object
 * @return
 */
private RepositoryNode createParentNode(){
  RepositoryNode dbParentRepNode=null;
  Package parentPackage=PackageHelper.getParentPackage(getSchema());
  if (parentPackage == null) {
    dbParentRepNode=new DBConnectionRepNode(getParentViewObject(),null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
 else   if (parentPackage instanceof Catalog) {
    dbParentRepNode=new DBCatalogRepNode(getParentViewObject(),null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
  return dbParentRepNode;
}","/** 
 * create the node of parent.
 * @param object
 * @return
 */
private RepositoryNode createParentNode(){
  RepositoryNode dbParentRepNode=null;
  Package parentPackage=PackageHelper.getParentPackage(getSchema());
  if (parentPackage == null) {
    dbParentRepNode=new DBConnectionRepNode(getParentViewObject(),null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
 else   if (parentPackage instanceof Catalog) {
    dbParentRepNode=DQRepNodeCreateFactory.createDBCatalogRepNode(getParentViewObject(),null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
  return dbParentRepNode;
}",0.9701897018970188
137472,"/** 
 * create the node of parent.
 * @param object
 * @return
 */
private RepositoryNode createParentNode(IRepositoryViewObject object){
  RepositoryNode dbParentRepNode=null;
  if (object instanceof MetadataCatalogRepositoryObject) {
    dbParentRepNode=new DBCatalogRepNode(object,null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
 else   if (object instanceof MetadataSchemaRepositoryObject) {
    dbParentRepNode=new DBSchemaRepNode(object,null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
  object.setRepositoryNode(dbParentRepNode);
  return dbParentRepNode;
}","/** 
 * create the node of parent.
 * @param object
 * @return
 */
private RepositoryNode createParentNode(IRepositoryViewObject object){
  RepositoryNode dbParentRepNode=null;
  if (object instanceof MetadataCatalogRepositoryObject) {
    dbParentRepNode=DQRepNodeCreateFactory.createDBCatalogRepNode(object,null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
 else   if (object instanceof MetadataSchemaRepositoryObject) {
    dbParentRepNode=new DBSchemaRepNode(object,null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
  object.setRepositoryNode(dbParentRepNode);
  return dbParentRepNode;
}",0.9709251101321584
137473,"/** 
 * create the node of parent.
 * @param object
 * @return
 */
private RepositoryNode createParentNode(){
  RepositoryNode dbParentRepNode=null;
  if (viewObject instanceof MetadataCatalogRepositoryObject) {
    dbParentRepNode=new DBCatalogRepNode(viewObject,null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
 else   if (viewObject instanceof MetadataSchemaRepositoryObject) {
    dbParentRepNode=new DBSchemaRepNode(viewObject,null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
  viewObject.setRepositoryNode(dbParentRepNode);
  return dbParentRepNode;
}","/** 
 * create the node of parent.
 * @param object
 * @return
 */
private RepositoryNode createParentNode(){
  RepositoryNode dbParentRepNode=null;
  if (viewObject instanceof MetadataCatalogRepositoryObject) {
    dbParentRepNode=DQRepNodeCreateFactory.createDBCatalogRepNode(viewObject,null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
 else   if (viewObject instanceof MetadataSchemaRepositoryObject) {
    dbParentRepNode=new DBSchemaRepNode(viewObject,null,ENodeType.TDQ_REPOSITORY_ELEMENT);
  }
  viewObject.setRepositoryNode(dbParentRepNode);
  return dbParentRepNode;
}",0.970509383378016
137474,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.DQEmptyRecycleBinAction#run()}. there is not any dependcy for each node in recycle bin
 * @throws Exception
 */
@Test public void testRun_1() throws Exception {
  PowerMockito.doNothing().when(dqEmptyAction_mock,""String_Node_Str"");
  IRepositoryNode node1=mock(IRepositoryNode.class);
  IRepositoryNode node2=mock(IRepositoryNode.class);
  IRepositoryObject object1=mock(IRepositoryObject.class);
  when(node1.getObject()).thenReturn(object1);
  when(node2.getObject()).thenReturn(object1);
  Property prop=mock(Property.class);
  when(object1.getProperty()).thenReturn(prop);
  List<IRepositoryNode> seleLs=new ArrayList<IRepositoryNode>();
  ISelection selecetion=new StructuredSelection(seleLs);
  PowerMockito.doReturn(selecetion).when(dqEmptyAction_mock).getSelection();
  seleLs.add(node2);
  seleLs.add(node1);
  stub(method(MessageDialog.class,""String_Node_Str"")).toReturn(true);
  PowerMockito.mockStatic(ProxyRepositoryFactory.class);
  ProxyRepositoryFactory factory=mock(ProxyRepositoryFactory.class);
  when(ProxyRepositoryFactory.getInstance()).thenReturn(factory);
  stub(method(DQDeleteHelper.class,""String_Node_Str""));
  PowerMockito.mockStatic(DQDeleteHelper.class);
  when(DQDeleteHelper.getCanNotDeletedNodes(seleLs,false)).thenReturn(new ArrayList<IRepositoryNode>());
  RecycleBinRepNode recyBin=mock(RecycleBinRepNode.class);
  PowerMockito.mockStatic(RepositoryNodeHelper.class);
  when(RepositoryNodeHelper.getRecycleBinRepNode()).thenReturn(recyBin);
  when(RepositoryNodeHelper.findAllChildrenNodes(seleLs)).thenReturn(seleLs);
  when(recyBin.getChildren()).thenReturn(seleLs);
  dqEmptyAction_mock.run();
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.DQEmptyRecycleBinAction#run()}. there is not any dependcy for each node in recycle bin
 * @throws Exception
 */
@Test public void testRun_1() throws Exception {
  PowerMockito.doNothing().when(dqEmptyAction_mock,""String_Node_Str"");
  IRepositoryNode node1=mock(IRepositoryNode.class);
  IRepositoryNode node2=mock(IRepositoryNode.class);
  IRepositoryObject object1=mock(IRepositoryObject.class);
  when(node1.getObject()).thenReturn(object1);
  when(node2.getObject()).thenReturn(object1);
  Property prop=mock(Property.class);
  when(object1.getProperty()).thenReturn(prop);
  Set<IRepositoryNode> seleLs=new HashSet<IRepositoryNode>();
  ISelection selecetion=new StructuredSelection(seleLs);
  PowerMockito.doReturn(selecetion).when(dqEmptyAction_mock).getSelection();
  seleLs.add(node2);
  seleLs.add(node1);
  stub(method(MessageDialog.class,""String_Node_Str"")).toReturn(true);
  PowerMockito.mockStatic(ProxyRepositoryFactory.class);
  ProxyRepositoryFactory factory=mock(ProxyRepositoryFactory.class);
  when(ProxyRepositoryFactory.getInstance()).thenReturn(factory);
  stub(method(DQDeleteHelper.class,""String_Node_Str""));
  PowerMockito.mockStatic(DQDeleteHelper.class);
  when(DQDeleteHelper.getCanNotDeletedNodes(seleLs,false)).thenReturn(new ArrayList<IRepositoryNode>());
  RecycleBinRepNode recyBin=mock(RecycleBinRepNode.class);
  PowerMockito.mockStatic(RepositoryNodeHelper.class);
  when(RepositoryNodeHelper.getRecycleBinRepNode()).thenReturn(recyBin);
  when(RepositoryNodeHelper.findAllChildrenNodes(seleLs)).thenReturn(seleLs);
  List<IRepositoryNode> repsList=new ArrayList<IRepositoryNode>();
  repsList.addAll(seleLs);
  when(recyBin.getChildren()).thenReturn(repsList);
  dqEmptyAction_mock.run();
}",0.9644987219539904
137475,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.DQEmptyRecycleBinAction#run()}. there is a dependce for a node in recycle bin,and this depence is not in recycle bin.
 * @throws Exception
 */
@Test public void testRun_2() throws Exception {
  PowerMockito.doNothing().when(dqEmptyAction_mock,""String_Node_Str"");
  IRepositoryNode node1=mock(IRepositoryNode.class);
  List<IRepositoryNode> seleLs=new ArrayList<IRepositoryNode>();
  ISelection selecetion=new StructuredSelection(seleLs);
  PowerMockito.doReturn(selecetion).when(dqEmptyAction_mock).getSelection();
  seleLs.add(node1);
  PowerMockito.mockStatic(DQDeleteHelper.class);
  List<IRepositoryNode> ls=new ArrayList<IRepositoryNode>();
  when(DQDeleteHelper.getCanNotDeletedNodes(seleLs,false)).thenReturn(ls);
  RecycleBinRepNode recyBin=mock(RecycleBinRepNode.class);
  PowerMockito.mockStatic(RepositoryNodeHelper.class);
  when(RepositoryNodeHelper.getRecycleBinRepNode()).thenReturn(recyBin);
  when(RepositoryNodeHelper.findAllChildrenNodes(seleLs)).thenReturn(seleLs);
  when(recyBin.getChildren()).thenReturn(seleLs);
  dqEmptyAction_mock.run();
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.DQEmptyRecycleBinAction#run()}. there is a dependce for a node in recycle bin,and this depence is not in recycle bin.
 * @throws Exception
 */
@Test public void testRun_2() throws Exception {
  PowerMockito.doNothing().when(dqEmptyAction_mock,""String_Node_Str"");
  IRepositoryNode node1=mock(IRepositoryNode.class);
  Set<IRepositoryNode> seleLs=new HashSet<IRepositoryNode>();
  ISelection selecetion=new StructuredSelection(seleLs);
  PowerMockito.doReturn(selecetion).when(dqEmptyAction_mock).getSelection();
  seleLs.add(node1);
  PowerMockito.mockStatic(DQDeleteHelper.class);
  List<IRepositoryNode> ls=new ArrayList<IRepositoryNode>();
  when(DQDeleteHelper.getCanNotDeletedNodes(seleLs,false)).thenReturn(ls);
  RecycleBinRepNode recyBin=mock(RecycleBinRepNode.class);
  PowerMockito.mockStatic(RepositoryNodeHelper.class);
  when(RepositoryNodeHelper.getRecycleBinRepNode()).thenReturn(recyBin);
  when(RepositoryNodeHelper.findAllChildrenNodes(seleLs)).thenReturn(seleLs);
  List<IRepositoryNode> repsList=new ArrayList<IRepositoryNode>();
  repsList.addAll(seleLs);
  when(recyBin.getChildren()).thenReturn(repsList);
  dqEmptyAction_mock.run();
}",0.946705832983634
137476,"/** 
 * if these items in recycle bin are depended by others which is not in recycle bin,show a warning and return.
 * @param allNodes
 * @param isCurrentPerspectiveDQ
 * @return these list will be used to pop a dialog and display the detail nodes which are depended by others.
 */
public static List<IRepositoryNode> getCanNotDeletedNodes(List<IRepositoryNode> allNodes,boolean isCurrentPerspectiveDQ){
  List<IRepositoryNode> canNotDeletedNodes=new ArrayList<IRepositoryNode>();
  if (allNodes == null) {
    return canNotDeletedNodes;
  }
  for (  IRepositoryNode node : allNodes) {
    List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
    if (node.getObject() != null && ERepositoryObjectType.TDQ_JRAXML_ELEMENT.equals(node.getObject().getRepositoryObjectType())) {
      dependencies=getDependedReportOfJrxml(node);
    }
    if (dependencies == null || dependencies.isEmpty()) {
      continue;
    }
    if (!isCurrentPerspectiveDQ) {
      canNotDeletedNodes.add(node);
      continue;
    }
    for (    ModelElement mod : dependencies) {
      Property property=PropertyHelper.getProperty(mod);
      if (property == null) {
        continue;
      }
      Item item=property.getItem();
      if (item != null && !item.getState().isDeleted()) {
        canNotDeletedNodes.add(node);
      }
    }
  }
  return canNotDeletedNodes;
}","/** 
 * if these items in recycle bin are depended by others which is not in recycle bin,show a warning and return.
 * @param allNodes
 * @param isCurrentPerspectiveDQ
 * @return these list will be used to pop a dialog and display the detail nodes which are depended by others.
 */
public static List<IRepositoryNode> getCanNotDeletedNodes(Collection<IRepositoryNode> allNodes,boolean isCurrentPerspectiveDQ){
  List<IRepositoryNode> canNotDeletedNodes=new ArrayList<IRepositoryNode>();
  if (allNodes == null) {
    return canNotDeletedNodes;
  }
  for (  IRepositoryNode node : allNodes) {
    List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
    if (node.getObject() != null && ERepositoryObjectType.TDQ_JRAXML_ELEMENT.equals(node.getObject().getRepositoryObjectType())) {
      dependencies=getDependedReportOfJrxml(node);
    }
    if (dependencies == null || dependencies.isEmpty()) {
      continue;
    }
    if (!isCurrentPerspectiveDQ) {
      canNotDeletedNodes.add(node);
      continue;
    }
    for (    ModelElement mod : dependencies) {
      Property property=PropertyHelper.getProperty(mod);
      if (property == null) {
        continue;
      }
      Item item=property.getItem();
      if (item != null && !item.getState().isDeleted()) {
        canNotDeletedNodes.add(node);
      }
    }
  }
  return canNotDeletedNodes;
}",0.9948867786705624
137477,"/** 
 * DOC gdbu Comment method ""fillTreeList"". Filter's entry method.
 * @param monitor
 */
public static void fillTreeList(IProgressMonitor monitor){
  allFilteredNodeList.clear();
  DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
  List<IRepositoryNode> list=new ArrayList<IRepositoryNode>();
  list.add(getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
  list.add(getRootNode(ERepositoryObjectType.TDQ_LIBRARIES,true));
  list.add(getRootNode(ERepositoryObjectType.METADATA,true));
  list.add(getRootNode(ERepositoryObjectType.RECYCLE_BIN,true));
  for (  IRepositoryNode iRepositoryNode : list) {
    allFilteredNodeList.addAll(getTreeList(iRepositoryNode));
    if (null != monitor) {
      monitor.worked(2);
    }
  }
  DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
}","/** 
 * DOC gdbu Comment method ""fillTreeList"". Filter's entry method.
 * @param monitor
 */
public static void fillTreeList(IProgressMonitor monitor){
  allFilteredNodeList.clear();
  DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
  List<IRepositoryNode> list=new ArrayList<IRepositoryNode>();
  list.add(getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
  list.add(getRootNode(ERepositoryObjectType.TDQ_LIBRARIES,true));
  list.add(getRootNode(ERepositoryObjectType.METADATA,true));
  list.add(getRecycleBinRepNode());
  for (  IRepositoryNode iRepositoryNode : list) {
    allFilteredNodeList.addAll(getTreeList(iRepositoryNode));
    if (null != monitor) {
      monitor.worked(2);
    }
  }
  DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
}",0.96403785488959
137478,"/** 
 * ADD gdbu 2011-11-15 TDQ-3969 DOC gdbu Comment method ""getRecycleBinFilteredNodes"". This method could return a list contains recycle bin node and all of it's children.
 * @return
 */
private static List<IRepositoryNode> getRecycleBinFilteredNodes(){
  return getTreeList(getRootNode(ERepositoryObjectType.RECYCLE_BIN,true));
}","/** 
 * ADD gdbu 2011-11-15 TDQ-3969 DOC gdbu Comment method ""getRecycleBinFilteredNodes"". This method could return a list contains recycle bin node and all of it's children.
 * @return
 */
private static List<IRepositoryNode> getRecycleBinFilteredNodes(){
  return getTreeList(getRecycleBinRepNode());
}",0.9167974882260596
137479,"/** 
 * get recycle bin node.
 * @return
 */
public static RepositoryNode getRecycleBinRootNode(){
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer(true);
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      node=(RepositoryNode)item.getData();
      if (node.isBin()) {
        break;
      }
    }
  }
  return node;
}","/** 
 * get recycle bin node.
 * @return
 * @deprecated use {@link #getRecycleBinRepNode()} instead
 */
@Deprecated public static RepositoryNode getRecycleBinRootNode(){
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer(true);
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      node=(RepositoryNode)item.getData();
      if (node.isBin()) {
        break;
      }
    }
  }
  return node;
}",0.9224043715846996
137480,"/** 
 * ADD gdbu 2011-11-24 TDQ-4068 To get all children nodes. DOC gdbu Comment method ""findRecycleBinNodeWhenFiltering"".
 * @param recycleBinNodes
 * @return
 */
public static List<IRepositoryNode> findAllChildrenNodes(List<IRepositoryNode> recycleBinNodes){
  List<IRepositoryNode> findAllRecycleBinNode=new ArrayList<IRepositoryNode>();
  findAllRecycleBinNode.addAll(recycleBinNodes);
  for (  IRepositoryNode iRepositoryNode : recycleBinNodes) {
    findAllRecycleBinNode.addAll(findAllChildrenNodes(iRepositoryNode.getChildren()));
  }
  return findAllRecycleBinNode;
}","/** 
 * ADD gdbu 2011-11-24 TDQ-4068 To get all children nodes. DOC gdbu Comment method ""findRecycleBinNodeWhenFiltering"".
 * @param recycleBinNodes
 * @return
 */
public static Collection<IRepositoryNode> findAllChildrenNodes(Collection<IRepositoryNode> recycleBinNodes){
  Set<IRepositoryNode> allChindrenNode=new HashSet<IRepositoryNode>();
  allChindrenNode.addAll(recycleBinNodes);
  for (  IRepositoryNode iRepositoryNode : recycleBinNodes) {
    allChindrenNode.addAll(findAllChildrenNodes(iRepositoryNode.getChildren()));
  }
  return allChindrenNode;
}",0.7370272647317502
137481,"/** 
 * get the RepositoryNode according to the nodeName.
 * @param nodeName the node name
 * @param open if the DQView is not show, show it or not
 * @return
 */
public static RepositoryNode getRootNode(ERepositoryObjectType nodeName,boolean open){
  FolderItem folderItem=ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),nodeName,Path.EMPTY);
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer(open);
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      node=(RepositoryNode)item.getData();
      if (node.isBin()) {
        continue;
      }
      if (folderItem != null) {
        boolean isSysFolder=ENodeType.SYSTEM_FOLDER == node.getType() && FolderType.SYSTEM_FOLDER_LITERAL == folderItem.getType();
        if (isSysFolder) {
          String viewFolderLabel=folderItem.getProperty().getLabel();
          String folderLabel=node.getObject().getProperty().getLabel();
          if (viewFolderLabel.equals(folderLabel)) {
            return node;
          }
        }
      }
    }
  }
  log.error(Messages.getString(""String_Node_Str"") + nodeName.getLabel());
  return node;
}","/** 
 * get the RepositoryNode according to the ERepositoryObjectType(the ERepositoryObjectType should not be RECYCLE_BIN, because there doesn't exist a physical folder, so there will return null and log an error message; use getRecycleBinRepNode() to get the RecycleBinNode).
 * @param nodeType the node's ERepositoryObjectType
 * @param open if the DQView is not show, show it or not
 * @return
 */
public static RepositoryNode getRootNode(ERepositoryObjectType nodeType,boolean open){
  FolderItem folderItem=ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),nodeType,Path.EMPTY);
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer(open);
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      node=(RepositoryNode)item.getData();
      if (node.isBin()) {
        continue;
      }
      if (folderItem != null) {
        boolean isSysFolder=ENodeType.SYSTEM_FOLDER == node.getType() && FolderType.SYSTEM_FOLDER_LITERAL == folderItem.getType();
        if (isSysFolder) {
          String viewFolderLabel=folderItem.getProperty().getLabel();
          String folderLabel=node.getObject().getProperty().getLabel();
          if (viewFolderLabel.equals(folderLabel)) {
            return node;
          }
        }
      }
    }
  }
  log.error(Messages.getString(""String_Node_Str"") + nodeType.getLabel());
  return node;
}",0.8952029520295203
137482,"/** 
 * find a node from recycle bin.
 * @param modelElement
 * @return
 */
public static RepositoryNode recursiveFindRecycleBin(ModelElement modelElement){
  if (modelElement == null) {
    return null;
  }
  String uuid=getUUID(modelElement);
  RepositoryNode recyBinNode=getRecycleBinRootNode();
  if (uuid == null || recyBinNode == null) {
    return null;
  }
  List<IRepositoryNode> children=recyBinNode.getChildren();
  return recursiveFindByUuid(uuid,children);
}","/** 
 * find a node from recycle bin.
 * @param modelElement
 * @return
 */
public static RepositoryNode recursiveFindRecycleBin(ModelElement modelElement){
  if (modelElement == null) {
    return null;
  }
  String uuid=getUUID(modelElement);
  RepositoryNode recyBinNode=getRecycleBinRepNode();
  if (uuid == null || recyBinNode == null) {
    return null;
  }
  List<IRepositoryNode> children=recyBinNode.getChildren();
  return recursiveFindByUuid(uuid,children);
}",0.9946865037194474
137483,"/** 
 * DOC xqliu Comment method ""addDataEntity2CustomerDataset"". ADD xqliu 2010-03-10 feature 10834
 * @param customerDataset
 * @param unit
 */
private void addDataEntity2CustomerDataset(CustomerDefaultCategoryDataset customerDataset,TableIndicatorUnit unit){
  if (IndicatorEnum.WhereRuleIndicatorEnum.equals(unit.getType())) {
    String columnKey=unit.getIndicatorName();
    double value=Double.parseDouble(unit.getValue().toString());
    customerDataset.addValue(unit.geIndicatorCount() - value,ROW_KEY_NOT_PASS,columnKey);
    customerDataset.addValue(value,ROW_KEY_PASS,columnKey);
    WhereRuleChartDataEntity entity=new WhereRuleChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(columnKey);
    entity.setNumMatch(String.valueOf(value));
    entity.setNumNoMatch(String.valueOf(unit.geIndicatorCount() - value));
    entity.setToolTip(getUnitToolTip(unit));
    customerDataset.addDataEntity(entity);
  }
}","/** 
 * DOC xqliu Comment method ""addDataEntity2CustomerDataset"". ADD xqliu 2010-03-10 feature 10834
 * @param customerDataset
 * @param unit
 */
private void addDataEntity2CustomerDataset(CustomerDefaultCategoryDataset customerDataset,TableIndicatorUnit unit){
  if (IndicatorEnum.WhereRuleIndicatorEnum.equals(unit.getType())) {
    if (unit.getValue() == null) {
      return;
    }
    String columnKey=unit.getIndicatorName();
    double value=Double.parseDouble(unit.getValue().toString());
    customerDataset.addValue(unit.geIndicatorCount() - value,ROW_KEY_NOT_PASS,columnKey);
    customerDataset.addValue(value,ROW_KEY_PASS,columnKey);
    WhereRuleChartDataEntity entity=new WhereRuleChartDataEntity();
    entity.setIndicator(unit.getIndicator());
    entity.setLabel(columnKey);
    entity.setNumMatch(String.valueOf(value));
    entity.setNumNoMatch(String.valueOf(unit.geIndicatorCount() - value));
    entity.setToolTip(getUnitToolTip(unit));
    customerDataset.addDataEntity(entity);
  }
}",0.9719530851606324
137484,"@Override public void doGroup(String[] inputRow) throws IOException, InterruptedException {
  extSize=isOutputDistDetails ? 5 : 4;
  extSize=isSeperateOutput ? extSize + 1 : extSize;
  if (isLinkToPrevious && !inputRow[inputRow.length - extSize + 2].equalsIgnoreCase(""String_Node_Str"")) {
    outputRow(StringUtilities.join(inputRow,columnDelimiter,escapeCharacter));
    return;
  }
  if (multiMatchRules.size() == 0) {
    return;
  }
  List<Map<String,String>> matchingRule=multiMatchRules.get(0);
  String[] lookupDataArray=new String[matchingRule.size()];
  for (int idx=0; idx < lookupDataArray.length; idx++) {
    lookupDataArray[idx]=inputRow[Integer.parseInt(matchingRule.get(idx).get(IRecordGrouping.COLUMN_IDX))];
  }
  boolean isSimilar=false;
  for (  String[] masterRecord : masterRecords) {
    if (isLinkToPrevious) {
      int masterGRPSize=Integer.valueOf(masterRecord[inputRow.length - extSize + 1]);
      int inputGRPSize=Integer.valueOf(inputRow[inputRow.length - extSize + 1]);
      if (masterGRPSize > 1 && inputGRPSize > 1) {
        continue;
      }
    }
    String[] masterMatchRecord=new String[lookupDataArray.length];
    for (int idx=0; idx < lookupDataArray.length; idx++) {
      masterMatchRecord[idx]=masterRecord[Integer.parseInt(matchingRule.get(idx).get(IRecordGrouping.COLUMN_IDX))];
    }
    double matchingProba=combinedRecordMatcher.getMatchingWeight(masterMatchRecord,lookupDataArray);
    if (matchingProba >= combinedRecordMatcher.getRecordMatchThreshold()) {
      String distanceDetails=computeOutputDetails();
      isSimilar=true;
      if (isLinkToPrevious) {
        int masterGRPSize=Integer.valueOf(masterRecord[masterRecord.length - extSize + 1]);
        if (masterGRPSize == 1) {
          inputRow[inputRow.length - extSize + 1]=String.valueOf(Integer.parseInt(inputRow[inputRow.length - extSize + 1]) + 1);
          updateWithExtendedColumn(masterRecord,inputRow,matchingProba,distanceDetails,columnDelimiter,escapeCharacter);
          masterRecords.remove(masterRecord);
          masterRecords.add(inputRow);
          break;
        }
      }
      masterRecord[masterRecord.length - extSize + 1]=String.valueOf(Integer.parseInt(masterRecord[masterRecord.length - extSize + 1]) + 1);
      updateWithExtendedColumn(inputRow,masterRecord,matchingProba,distanceDetails,columnDelimiter,escapeCharacter);
      break;
    }
  }
  if (!isSimilar) {
    String[] masterRow=new String[inputRow.length + (isLinkToPrevious ? 0 : extSize)];
    for (int idx=0; idx < inputRow.length; idx++) {
      masterRow[idx]=inputRow[idx];
    }
    if (!isLinkToPrevious) {
      masterRow[masterRow.length - extSize]=String.valueOf(UUID.randomUUID());
      masterRow[masterRow.length - extSize + 1]=String.valueOf(1);
      masterRow[masterRow.length - extSize + 2]=String.valueOf(true);
      masterRow[masterRow.length - extSize + 3]=String.valueOf(1.0);
      int extIdx=3;
      if (isSeperateOutput) {
        extIdx++;
        masterRow[masterRow.length - extSize + extIdx]=String.valueOf(1.0);
      }
      if (isOutputDistDetails) {
        extIdx++;
        masterRow[masterRow.length - extSize + extIdx]=""String_Node_Str"";
      }
    }
    masterRecords.add(masterRow);
  }
}","@Override public void doGroup(String[] inputRow) throws IOException, InterruptedException {
  extSize=isOutputDistDetails ? 5 : 4;
  extSize=isSeperateOutput ? extSize + 1 : extSize;
  if (isLinkToPrevious && !inputRow[inputRow.length - extSize + 2].equalsIgnoreCase(""String_Node_Str"")) {
    outputRow(StringUtilities.join(inputRow,columnDelimiter,StringUtilities.ESCAPE_CHARACTER));
    return;
  }
  if (multiMatchRules.size() == 0) {
    return;
  }
  List<Map<String,String>> matchingRule=multiMatchRules.get(0);
  String[] lookupDataArray=new String[matchingRule.size()];
  for (int idx=0; idx < lookupDataArray.length; idx++) {
    lookupDataArray[idx]=inputRow[Integer.parseInt(matchingRule.get(idx).get(IRecordGrouping.COLUMN_IDX))];
  }
  boolean isSimilar=false;
  for (  String[] masterRecord : masterRecords) {
    if (isLinkToPrevious) {
      int masterGRPSize=Integer.valueOf(masterRecord[inputRow.length - extSize + 1]);
      int inputGRPSize=Integer.valueOf(inputRow[inputRow.length - extSize + 1]);
      if (masterGRPSize > 1 && inputGRPSize > 1) {
        continue;
      }
    }
    String[] masterMatchRecord=new String[lookupDataArray.length];
    for (int idx=0; idx < lookupDataArray.length; idx++) {
      masterMatchRecord[idx]=masterRecord[Integer.parseInt(matchingRule.get(idx).get(IRecordGrouping.COLUMN_IDX))];
    }
    double matchingProba=combinedRecordMatcher.getMatchingWeight(masterMatchRecord,lookupDataArray);
    if (matchingProba >= combinedRecordMatcher.getRecordMatchThreshold()) {
      String distanceDetails=computeOutputDetails();
      isSimilar=true;
      if (isLinkToPrevious) {
        int masterGRPSize=Integer.valueOf(masterRecord[masterRecord.length - extSize + 1]);
        if (masterGRPSize == 1) {
          inputRow[inputRow.length - extSize + 1]=String.valueOf(Integer.parseInt(inputRow[inputRow.length - extSize + 1]) + 1);
          updateWithExtendedColumn(masterRecord,inputRow,matchingProba,distanceDetails,columnDelimiter);
          masterRecords.remove(masterRecord);
          masterRecords.add(inputRow);
          break;
        }
      }
      masterRecord[masterRecord.length - extSize + 1]=String.valueOf(Integer.parseInt(masterRecord[masterRecord.length - extSize + 1]) + 1);
      updateWithExtendedColumn(inputRow,masterRecord,matchingProba,distanceDetails,columnDelimiter);
      break;
    }
  }
  if (!isSimilar) {
    String[] masterRow=new String[inputRow.length + (isLinkToPrevious ? 0 : extSize)];
    for (int idx=0; idx < inputRow.length; idx++) {
      masterRow[idx]=inputRow[idx];
    }
    if (!isLinkToPrevious) {
      masterRow[masterRow.length - extSize]=String.valueOf(UUID.randomUUID());
      masterRow[masterRow.length - extSize + 1]=String.valueOf(1);
      masterRow[masterRow.length - extSize + 2]=String.valueOf(true);
      masterRow[masterRow.length - extSize + 3]=String.valueOf(1.0);
      int extIdx=3;
      if (isSeperateOutput) {
        extIdx++;
        masterRow[masterRow.length - extSize + extIdx]=String.valueOf(1.0);
      }
      if (isOutputDistDetails) {
        extIdx++;
        masterRow[masterRow.length - extSize + extIdx]=""String_Node_Str"";
      }
    }
    masterRecords.add(masterRow);
  }
}",0.988078649945812
137485,"@Override public void end() throws IOException, InterruptedException {
  for (  String[] mst : masterRecords) {
    outputRow(StringUtilities.join(mst,columnDelimiter,escapeCharacter));
  }
}","@Override public void end() throws IOException, InterruptedException {
  for (  String[] mst : masterRecords) {
    outputRow(StringUtilities.join(mst,columnDelimiter,StringUtilities.ESCAPE_CHARACTER));
  }
}",0.8872180451127819
137486,"private void updateWithExtendedColumn(String[] inputRow,String[] masterRecord,double matchingProba,String distanceDetails,String delimiter,String escCharacter) throws IOException, InterruptedException {
  String[] duplicateRecord=new String[masterRecord.length];
  for (int idx=0; idx < inputRow.length; idx++) {
    duplicateRecord[idx]=inputRow[idx];
  }
  duplicateRecord[duplicateRecord.length - extSize]=masterRecord[masterRecord.length - extSize];
  duplicateRecord[duplicateRecord.length - extSize + 1]=String.valueOf(0);
  duplicateRecord[duplicateRecord.length - extSize + 2]=String.valueOf(false);
  duplicateRecord[duplicateRecord.length - extSize + 3]=String.valueOf(matchingProba);
  int extIdx=3;
  if (isSeperateOutput) {
    extIdx++;
    double groupQuality=computeGroupQuality(masterRecord,matchingProba,extIdx);
    masterRecord[duplicateRecord.length - extSize + extIdx]=String.valueOf(groupQuality);
  }
  if (isOutputDistDetails) {
    extIdx++;
    duplicateRecord[duplicateRecord.length - extSize + extIdx]=distanceDetails;
  }
  outputRow(StringUtilities.join(duplicateRecord,delimiter,escCharacter));
}","private void updateWithExtendedColumn(String[] inputRow,String[] masterRecord,double matchingProba,String distanceDetails,String delimiter) throws IOException, InterruptedException {
  String[] duplicateRecord=new String[masterRecord.length];
  for (int idx=0; idx < inputRow.length; idx++) {
    duplicateRecord[idx]=inputRow[idx];
  }
  duplicateRecord[duplicateRecord.length - extSize]=masterRecord[masterRecord.length - extSize];
  duplicateRecord[duplicateRecord.length - extSize + 1]=String.valueOf(0);
  duplicateRecord[duplicateRecord.length - extSize + 2]=String.valueOf(false);
  duplicateRecord[duplicateRecord.length - extSize + 3]=String.valueOf(matchingProba);
  int extIdx=3;
  if (isSeperateOutput) {
    extIdx++;
    double groupQuality=computeGroupQuality(masterRecord,matchingProba,extIdx);
    masterRecord[duplicateRecord.length - extSize + extIdx]=String.valueOf(groupQuality);
  }
  if (isOutputDistDetails) {
    extIdx++;
    duplicateRecord[duplicateRecord.length - extSize + extIdx]=distanceDetails;
  }
  outputRow(StringUtilities.join(duplicateRecord,delimiter,StringUtilities.ESCAPE_CHARACTER));
}",0.9725177304964538
137487,"public AnalysisMatchRecordGrouping(MatchGroupResultConsumer matchResultConsumer){
  this.matchResultConsumer=matchResultConsumer;
  setColumnDelimiter(columnDelimiter);
  setEscapeCharacter(escapeCharacter);
  setIsOutputDistDetails(true);
  setSeperateOutput(Boolean.TRUE);
}","public AnalysisMatchRecordGrouping(MatchGroupResultConsumer matchResultConsumer){
  this.matchResultConsumer=matchResultConsumer;
  setColumnDelimiter(columnDelimiter);
  setIsOutputDistDetails(true);
  setSeperateOutput(Boolean.TRUE);
}",0.9239766081871345
137488,"@Override protected void outputRow(String row){
  matchResultConsumer.handle(StringUtilities.split(row,columnDelimiter,escapeCharacter));
}","@Override protected void outputRow(String row){
  matchResultConsumer.handle(StringUtilities.split(row,columnDelimiter,StringUtilities.ESCAPE_CHARACTER));
}",0.8610169491525423
137489,"@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        boolean isDelete=true;
        ModelElement modEle=record.getElement();
        if (object != null) {
          if (isIndicatorDefinition(modEle)) {
            if (isDQRule(modEle)) {
              if (isParserRule(modEle)) {
                mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isWhereRule(modEle)) {
              }
            }
 else             if (isMatchRuleDefinition(modEle)) {
            }
 else {
              mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
              isDelete=false;
            }
          }
 else           if (isPattern(modEle)) {
            mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
            isDelete=false;
          }
        }
        if (isDelete) {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
              write(resPath,desPath);
              allCopiedFiles.add(desPath.toFile());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        boolean isDelete=true;
        ModelElement modEle=record.getElement();
        if (object != null) {
          if (isIndicatorDefinition(modEle)) {
            if (isDQRule(modEle)) {
              if (isParserRule(modEle)) {
                mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isWhereRule(modEle)) {
              }
            }
 else             if (isMatchRuleDefinition(modEle)) {
            }
 else {
              mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
              isDelete=false;
            }
          }
 else           if (isPattern(modEle)) {
            mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
            isDelete=false;
          }
 else {
            ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
          }
        }
        if (isDelete) {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
              write(resPath,desPath);
              allCopiedFiles.add(desPath.toFile());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.8878946060154114
137490,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicatorDefinition(modEle)) {
                if (isDQRule(modEle)) {
                  if (isParserRule(modEle)) {
                    mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                    isDelete=false;
                  }
 else                   if (isWhereRule(modEle)) {
                  }
                }
 else                 if (isMatchRuleDefinition(modEle)) {
                }
 else {
                  mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
                  isDelete=false;
                }
              }
 else               if (isPattern(modEle)) {
                mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
                isDelete=false;
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicatorDefinition(modEle)) {
                if (isDQRule(modEle)) {
                  if (isParserRule(modEle)) {
                    mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                    isDelete=false;
                  }
 else                   if (isWhereRule(modEle)) {
                  }
                }
 else                 if (isMatchRuleDefinition(modEle)) {
                }
 else {
                  mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
                  isDelete=false;
                }
              }
 else               if (isPattern(modEle)) {
                mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
                isDelete=false;
              }
 else {
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}",0.98011522021929
137491,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.DQEmptyRecycleBinAction#run()}. there is not any dependcy for each node in recycle bin
 * @throws Exception
 */
@Test public void testRun_1() throws Exception {
  PowerMockito.doNothing().when(dqEmptyAction_mock,""String_Node_Str"");
  IRepositoryNode node1=mock(IRepositoryNode.class);
  IRepositoryNode node2=mock(IRepositoryNode.class);
  IRepositoryObject object1=mock(IRepositoryObject.class);
  when(node1.getObject()).thenReturn(object1);
  when(node2.getObject()).thenReturn(object1);
  Property prop=mock(Property.class);
  when(object1.getProperty()).thenReturn(prop);
  List<IRepositoryNode> seleLs=new ArrayList<IRepositoryNode>();
  ISelection selecetion=new StructuredSelection(seleLs);
  PowerMockito.doReturn(selecetion).when(dqEmptyAction_mock).getSelection();
  seleLs.add(node2);
  seleLs.add(node1);
  stub(method(MessageDialog.class,""String_Node_Str"")).toReturn(true);
  PowerMockito.mockStatic(ProxyRepositoryFactory.class);
  ProxyRepositoryFactory factory=mock(ProxyRepositoryFactory.class);
  when(ProxyRepositoryFactory.getInstance()).thenReturn(factory);
  stub(method(DQDeleteHelper.class,""String_Node_Str""));
  PowerMockito.mockStatic(DQDeleteHelper.class);
  when(DQDeleteHelper.getCanNotDeletedNodes(seleLs,false)).thenReturn(new ArrayList<IRepositoryNode>());
  RecycleBinRepNode recyBin=mock(RecycleBinRepNode.class);
  PowerMockito.mockStatic(RepositoryNodeHelper.class);
  when(RepositoryNodeHelper.getRecycleBinRepNode()).thenReturn(recyBin);
  when(RepositoryNodeHelper.findAllChildrenNodes(seleLs)).thenReturn(seleLs);
  when(recyBin.getChildren()).thenReturn(seleLs);
  dqEmptyAction_mock.run();
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.DQEmptyRecycleBinAction#run()}. there is not any dependcy for each node in recycle bin
 * @throws Exception
 */
@Test public void testRun_1() throws Exception {
  PowerMockito.doNothing().when(dqEmptyAction_mock,""String_Node_Str"");
  IRepositoryNode node1=mock(IRepositoryNode.class);
  IRepositoryNode node2=mock(IRepositoryNode.class);
  IRepositoryObject object1=mock(IRepositoryObject.class);
  when(node1.getObject()).thenReturn(object1);
  when(node2.getObject()).thenReturn(object1);
  Property prop=mock(Property.class);
  when(object1.getProperty()).thenReturn(prop);
  Set<IRepositoryNode> seleLs=new HashSet<IRepositoryNode>();
  ISelection selecetion=new StructuredSelection(seleLs);
  PowerMockito.doReturn(selecetion).when(dqEmptyAction_mock).getSelection();
  seleLs.add(node2);
  seleLs.add(node1);
  stub(method(MessageDialog.class,""String_Node_Str"")).toReturn(true);
  PowerMockito.mockStatic(ProxyRepositoryFactory.class);
  ProxyRepositoryFactory factory=mock(ProxyRepositoryFactory.class);
  when(ProxyRepositoryFactory.getInstance()).thenReturn(factory);
  stub(method(DQDeleteHelper.class,""String_Node_Str""));
  PowerMockito.mockStatic(DQDeleteHelper.class);
  when(DQDeleteHelper.getCanNotDeletedNodes(seleLs,false)).thenReturn(new ArrayList<IRepositoryNode>());
  RecycleBinRepNode recyBin=mock(RecycleBinRepNode.class);
  PowerMockito.mockStatic(RepositoryNodeHelper.class);
  when(RepositoryNodeHelper.getRecycleBinRepNode()).thenReturn(recyBin);
  when(RepositoryNodeHelper.findAllChildrenNodes(seleLs)).thenReturn(seleLs);
  List<IRepositoryNode> repsList=new ArrayList<IRepositoryNode>();
  repsList.addAll(seleLs);
  when(recyBin.getChildren()).thenReturn(repsList);
  dqEmptyAction_mock.run();
}",0.9644987219539904
137492,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.DQEmptyRecycleBinAction#run()}. there is a dependce for a node in recycle bin,and this depence is not in recycle bin.
 * @throws Exception
 */
@Test public void testRun_2() throws Exception {
  PowerMockito.doNothing().when(dqEmptyAction_mock,""String_Node_Str"");
  IRepositoryNode node1=mock(IRepositoryNode.class);
  List<IRepositoryNode> seleLs=new ArrayList<IRepositoryNode>();
  ISelection selecetion=new StructuredSelection(seleLs);
  PowerMockito.doReturn(selecetion).when(dqEmptyAction_mock).getSelection();
  seleLs.add(node1);
  PowerMockito.mockStatic(DQDeleteHelper.class);
  List<IRepositoryNode> ls=new ArrayList<IRepositoryNode>();
  when(DQDeleteHelper.getCanNotDeletedNodes(seleLs,false)).thenReturn(ls);
  RecycleBinRepNode recyBin=mock(RecycleBinRepNode.class);
  PowerMockito.mockStatic(RepositoryNodeHelper.class);
  when(RepositoryNodeHelper.getRecycleBinRepNode()).thenReturn(recyBin);
  when(RepositoryNodeHelper.findAllChildrenNodes(seleLs)).thenReturn(seleLs);
  when(recyBin.getChildren()).thenReturn(seleLs);
  dqEmptyAction_mock.run();
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.DQEmptyRecycleBinAction#run()}. there is a dependce for a node in recycle bin,and this depence is not in recycle bin.
 * @throws Exception
 */
@Test public void testRun_2() throws Exception {
  PowerMockito.doNothing().when(dqEmptyAction_mock,""String_Node_Str"");
  IRepositoryNode node1=mock(IRepositoryNode.class);
  Set<IRepositoryNode> seleLs=new HashSet<IRepositoryNode>();
  ISelection selecetion=new StructuredSelection(seleLs);
  PowerMockito.doReturn(selecetion).when(dqEmptyAction_mock).getSelection();
  seleLs.add(node1);
  PowerMockito.mockStatic(DQDeleteHelper.class);
  List<IRepositoryNode> ls=new ArrayList<IRepositoryNode>();
  when(DQDeleteHelper.getCanNotDeletedNodes(seleLs,false)).thenReturn(ls);
  RecycleBinRepNode recyBin=mock(RecycleBinRepNode.class);
  PowerMockito.mockStatic(RepositoryNodeHelper.class);
  when(RepositoryNodeHelper.getRecycleBinRepNode()).thenReturn(recyBin);
  when(RepositoryNodeHelper.findAllChildrenNodes(seleLs)).thenReturn(seleLs);
  List<IRepositoryNode> repsList=new ArrayList<IRepositoryNode>();
  repsList.addAll(seleLs);
  when(recyBin.getChildren()).thenReturn(repsList);
  dqEmptyAction_mock.run();
}",0.946705832983634
137493,"@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        boolean isDelete=true;
        if (object != null) {
          if (isIndicator(record.getElement())) {
            mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isParserRule(record.getElement())) {
            mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isPattern(record.getElement())) {
            mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
            isDelete=false;
          }
        }
        if (isDelete) {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
              write(resPath,desPath);
              allCopiedFiles.add(desPath.toFile());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        boolean isDelete=true;
        if (object != null) {
          if (isIndicator(record.getElement())) {
            mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isParserRule(record.getElement())) {
            mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isPattern(record.getElement())) {
            mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
            isDelete=false;
          }
 else {
            ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
          }
        }
        if (isDelete) {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
              write(resPath,desPath);
              allCopiedFiles.add(desPath.toFile());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.8728502960248097
137494,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            if (object != null) {
              if (isIndicator(record.getElement())) {
                mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isParserRule(record.getElement())) {
                mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isPattern(record.getElement())) {
                mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
                isDelete=false;
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            if (object != null) {
              if (isIndicator(record.getElement())) {
                mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isParserRule(record.getElement())) {
                mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isPattern(record.getElement())) {
                mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
                isDelete=false;
              }
 else {
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}",0.977897128692419
137495,"@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        boolean isDelete=true;
        ModelElement modEle=record.getElement();
        if (object != null) {
          if (isIndicator(modEle)) {
            mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isParserRule(modEle)) {
            mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isPattern(modEle)) {
            mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
            isDelete=false;
          }
        }
        if (isDelete) {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
              write(resPath,desPath);
              allCopiedFiles.add(desPath.toFile());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        boolean isDelete=true;
        ModelElement modEle=record.getElement();
        if (object != null) {
          if (isIndicator(modEle)) {
            mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isParserRule(modEle)) {
            mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isPattern(modEle)) {
            mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
            isDelete=false;
          }
 else {
            ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
          }
        }
        if (isDelete) {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
              write(resPath,desPath);
              allCopiedFiles.add(desPath.toFile());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.8735632183908046
137496,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicator(modEle)) {
                mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isParserRule(modEle)) {
                mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isPattern(modEle)) {
                mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
                isDelete=false;
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicator(modEle)) {
                mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isParserRule(modEle)) {
                mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isPattern(modEle)) {
                mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
                isDelete=false;
              }
 else {
                ProxyRepositoryFactory.getInstance().deleteObjectPhysical(object);
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}",0.9780242349558432
137497,"/** 
 * Find the matched columnSet of matchDataProvider.
 * @param selectedColumnSet
 * @return
 * @throws ReloadCompareException
 */
public static ColumnSet findMatchedColumnSet(ColumnSet selectedColumnSet,Connection toMatchDataProvider) throws ReloadCompareException {
  Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(selectedColumnSet);
  Package toReloadPackage=DQStructureComparer.findMatchedPackage(parentCatalogOrSchema,toMatchDataProvider);
  TdTable oldTable=SwitchHelpers.TABLE_SWITCH.doSwitch(selectedColumnSet);
  ColumnSet toReloadcolumnSet=null;
  if (oldTable != null) {
    List<TdTable> tables=PackageHelper.getTables(toReloadPackage);
    for (    TdTable table : tables) {
      if (oldTable.getName().equals(table.getName()) && (ColumnSetHelper.getTableOwner(oldTable) == null || ColumnSetHelper.getTableOwner(oldTable).equals(ColumnSetHelper.getTableOwner(table)))) {
        toReloadcolumnSet=table;
        break;
      }
    }
  }
 else {
    List<TdView> views=PackageHelper.getViews(toReloadPackage);
    for (    TdView view : views) {
      if (selectedColumnSet.getName().equals(view.getName()) && (ColumnSetHelper.getTableOwner(selectedColumnSet) == null || ColumnSetHelper.getTableOwner(selectedColumnSet).equals(ColumnSetHelper.getTableOwner(view)))) {
        toReloadcolumnSet=view;
        break;
      }
    }
  }
  if (toReloadcolumnSet == null) {
    throw new ReloadCompareException(DefaultMessagesImpl.getString(""String_Node_Str"",selectedColumnSet.getName()));
  }
  return toReloadcolumnSet;
}","/** 
 * Find the matched columnSet of matchDataProvider.
 * @param selectedColumnSet
 * @return
 * @throws ReloadCompareException
 */
public static ColumnSet findMatchedColumnSet(ColumnSet selectedColumnSet,Connection toMatchDataProvider) throws ReloadCompareException {
  Package parentCatalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(selectedColumnSet);
  Package toReloadPackage=DQStructureComparer.findMatchedPackage(parentCatalogOrSchema,toMatchDataProvider);
  TdTable oldTable=SwitchHelpers.TABLE_SWITCH.doSwitch(selectedColumnSet);
  ColumnSet toReloadcolumnSet=null;
  if (oldTable != null) {
    List<TdTable> tables=PackageHelper.getTables(toReloadPackage);
    for (    TdTable table : tables) {
      if (oldTable.getName().equals(table.getName())) {
        toReloadcolumnSet=table;
        break;
      }
    }
  }
 else {
    List<TdView> views=PackageHelper.getViews(toReloadPackage);
    for (    TdView view : views) {
      if (selectedColumnSet.getName().equals(view.getName())) {
        toReloadcolumnSet=view;
        break;
      }
    }
  }
  if (toReloadcolumnSet == null) {
    throw new ReloadCompareException(DefaultMessagesImpl.getString(""String_Node_Str"",selectedColumnSet.getName()));
  }
  return toReloadcolumnSet;
}",0.6666666666666666
137498,"/** 
 * try the sybase db type. Test method for  {@link org.talend.dq.helper.AnalysisExecutorHelper#getTableName(orgomg.cwm.objectmodel.core.ModelElement,org.talend.dq.dbms.DbmsLanguage)}.
 */
@Test public void testGetTableName_3(){
  TdColumn tdColumn=RelationalFactory.eINSTANCE.createTdColumn();
  TdTable tdTable=RelationalFactory.eINSTANCE.createTdTable();
  tdTable.setName(""String_Node_Str"");
  tdColumn.setOwner(tdTable);
  tdColumn.setName(""String_Node_Str"");
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage(),null);
  Package schema=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createSchema();
  schema.setName(""String_Node_Str"");
  tdTable.setNamespace(schema);
  Package catalog=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createCatalog();
  catalog.setName(""String_Node_Str"");
  schema.setNamespace(catalog);
  TaggedValue taggedValue=TaggedValueHelper.createTaggedValue(TaggedValueHelper.TABLE_OWNER,""String_Node_Str"");
  tdTable.getTaggedValue().add(taggedValue);
  assertEquals(""String_Node_Str"",AnalysisExecutorHelper.getTableName(tdColumn,dbmsLanguage));
}","/** 
 * try the sybase db type. Test method for  {@link org.talend.dq.helper.AnalysisExecutorHelper#getTableName(orgomg.cwm.objectmodel.core.ModelElement,org.talend.dq.dbms.DbmsLanguage)}.
 */
@Test public void testGetTableName_3(){
  TdColumn tdColumn=RelationalFactory.eINSTANCE.createTdColumn();
  TdTable tdTable=RelationalFactory.eINSTANCE.createTdTable();
  tdTable.setName(""String_Node_Str"");
  tdColumn.setOwner(tdTable);
  tdColumn.setName(""String_Node_Str"");
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(SupportDBUrlType.SYBASEDEFAULTURL.getLanguage(),null);
  Package schema=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createSchema();
  schema.setName(""String_Node_Str"");
  tdTable.setNamespace(schema);
  Package catalog=orgomg.cwm.resource.relational.RelationalFactory.eINSTANCE.createCatalog();
  catalog.setName(""String_Node_Str"");
  schema.setNamespace(catalog);
  assertEquals(""String_Node_Str"",AnalysisExecutorHelper.getTableName(tdColumn,dbmsLanguage));
}",0.9279486002753556
137499,"@Override public void doGroup(String[] inputRow) throws IOException, InterruptedException {
  extSize=isOutputDistDetails ? 5 : 4;
  extSize=isSeperateOutput ? extSize + 1 : extSize;
  if (isLinkToPrevious && !inputRow[inputRow.length - extSize + 2].equalsIgnoreCase(""String_Node_Str"")) {
    outputRow(StringUtils.join(inputRow,columnDelimiter));
    return;
  }
  if (multiMatchRules.size() == 0) {
    return;
  }
  List<Map<String,String>> matchingRule=multiMatchRules.get(0);
  String[] lookupDataArray=new String[matchingRule.size()];
  for (int idx=0; idx < lookupDataArray.length; idx++) {
    lookupDataArray[idx]=inputRow[Integer.parseInt(matchingRule.get(idx).get(IRecordGrouping.COLUMN_IDX))];
  }
  boolean isSimilar=false;
  for (  String[] masterRecord : masterRecords) {
    if (isLinkToPrevious) {
      int masterGRPSize=Integer.valueOf(masterRecord[inputRow.length - extSize + 1]);
      int inputGRPSize=Integer.valueOf(inputRow[inputRow.length - extSize + 1]);
      if (masterGRPSize > 1 && inputGRPSize > 1) {
        continue;
      }
    }
    String[] masterMatchRecord=new String[lookupDataArray.length];
    for (int idx=0; idx < lookupDataArray.length; idx++) {
      masterMatchRecord[idx]=masterRecord[Integer.parseInt(matchingRule.get(idx).get(IRecordGrouping.COLUMN_IDX))];
    }
    double matchingProba=combinedRecordMatcher.getMatchingWeight(masterMatchRecord,lookupDataArray);
    if (matchingProba >= combinedRecordMatcher.getRecordMatchThreshold()) {
      String distanceDetails=computeOutputDetails();
      isSimilar=true;
      if (isLinkToPrevious) {
        int masterGRPSize=Integer.valueOf(masterRecord[masterRecord.length - extSize + 1]);
        if (masterGRPSize == 1) {
          inputRow[inputRow.length - extSize + 1]=String.valueOf(Integer.parseInt(inputRow[inputRow.length - extSize + 1]) + 1);
          updateWithExtendedColumn(masterRecord,inputRow,matchingProba,distanceDetails,columnDelimiter);
          masterRecords.remove(masterRecord);
          masterRecords.add(inputRow);
          break;
        }
      }
      masterRecord[masterRecord.length - extSize + 1]=String.valueOf(Integer.parseInt(masterRecord[masterRecord.length - extSize + 1]) + 1);
      updateWithExtendedColumn(inputRow,masterRecord,matchingProba,distanceDetails,columnDelimiter);
      break;
    }
  }
  if (!isSimilar) {
    String[] masterRow=new String[inputRow.length + (isLinkToPrevious ? 0 : extSize)];
    for (int idx=0; idx < inputRow.length; idx++) {
      masterRow[idx]=inputRow[idx];
    }
    if (!isLinkToPrevious) {
      masterRow[masterRow.length - extSize]=String.valueOf(UUID.randomUUID());
      masterRow[masterRow.length - extSize + 1]=String.valueOf(1);
      masterRow[masterRow.length - extSize + 2]=String.valueOf(true);
      masterRow[masterRow.length - extSize + 3]=String.valueOf(1.0);
      int extIdx=3;
      if (isSeperateOutput) {
        extIdx++;
        masterRow[masterRow.length - extSize + extIdx]=String.valueOf(1.0);
      }
      if (isOutputDistDetails) {
        extIdx++;
        masterRow[masterRow.length - extSize + extIdx]=""String_Node_Str"";
      }
    }
    masterRecords.add(masterRow);
  }
}","@Override public void doGroup(String[] inputRow) throws IOException, InterruptedException {
  extSize=isOutputDistDetails ? 5 : 4;
  extSize=isSeperateOutput ? extSize + 1 : extSize;
  if (isLinkToPrevious && !inputRow[inputRow.length - extSize + 2].equalsIgnoreCase(""String_Node_Str"")) {
    outputRow(StringUtilities.join(inputRow,columnDelimiter,escapeCharacter));
    return;
  }
  if (multiMatchRules.size() == 0) {
    return;
  }
  List<Map<String,String>> matchingRule=multiMatchRules.get(0);
  String[] lookupDataArray=new String[matchingRule.size()];
  for (int idx=0; idx < lookupDataArray.length; idx++) {
    lookupDataArray[idx]=inputRow[Integer.parseInt(matchingRule.get(idx).get(IRecordGrouping.COLUMN_IDX))];
  }
  boolean isSimilar=false;
  for (  String[] masterRecord : masterRecords) {
    if (isLinkToPrevious) {
      int masterGRPSize=Integer.valueOf(masterRecord[inputRow.length - extSize + 1]);
      int inputGRPSize=Integer.valueOf(inputRow[inputRow.length - extSize + 1]);
      if (masterGRPSize > 1 && inputGRPSize > 1) {
        continue;
      }
    }
    String[] masterMatchRecord=new String[lookupDataArray.length];
    for (int idx=0; idx < lookupDataArray.length; idx++) {
      masterMatchRecord[idx]=masterRecord[Integer.parseInt(matchingRule.get(idx).get(IRecordGrouping.COLUMN_IDX))];
    }
    double matchingProba=combinedRecordMatcher.getMatchingWeight(masterMatchRecord,lookupDataArray);
    if (matchingProba >= combinedRecordMatcher.getRecordMatchThreshold()) {
      String distanceDetails=computeOutputDetails();
      isSimilar=true;
      if (isLinkToPrevious) {
        int masterGRPSize=Integer.valueOf(masterRecord[masterRecord.length - extSize + 1]);
        if (masterGRPSize == 1) {
          inputRow[inputRow.length - extSize + 1]=String.valueOf(Integer.parseInt(inputRow[inputRow.length - extSize + 1]) + 1);
          updateWithExtendedColumn(masterRecord,inputRow,matchingProba,distanceDetails,columnDelimiter,escapeCharacter);
          masterRecords.remove(masterRecord);
          masterRecords.add(inputRow);
          break;
        }
      }
      masterRecord[masterRecord.length - extSize + 1]=String.valueOf(Integer.parseInt(masterRecord[masterRecord.length - extSize + 1]) + 1);
      updateWithExtendedColumn(inputRow,masterRecord,matchingProba,distanceDetails,columnDelimiter,escapeCharacter);
      break;
    }
  }
  if (!isSimilar) {
    String[] masterRow=new String[inputRow.length + (isLinkToPrevious ? 0 : extSize)];
    for (int idx=0; idx < inputRow.length; idx++) {
      masterRow[idx]=inputRow[idx];
    }
    if (!isLinkToPrevious) {
      masterRow[masterRow.length - extSize]=String.valueOf(UUID.randomUUID());
      masterRow[masterRow.length - extSize + 1]=String.valueOf(1);
      masterRow[masterRow.length - extSize + 2]=String.valueOf(true);
      masterRow[masterRow.length - extSize + 3]=String.valueOf(1.0);
      int extIdx=3;
      if (isSeperateOutput) {
        extIdx++;
        masterRow[masterRow.length - extSize + extIdx]=String.valueOf(1.0);
      }
      if (isOutputDistDetails) {
        extIdx++;
        masterRow[masterRow.length - extSize + extIdx]=""String_Node_Str"";
      }
    }
    masterRecords.add(masterRow);
  }
}",0.9919028340080972
137500,"@Override public void end() throws IOException, InterruptedException {
  for (  String[] mst : masterRecords) {
    outputRow(StringUtils.join(mst,columnDelimiter));
  }
}","@Override public void end() throws IOException, InterruptedException {
  for (  String[] mst : masterRecords) {
    outputRow(StringUtilities.join(mst,columnDelimiter,escapeCharacter));
  }
}",0.9447513812154696
137501,"private void updateWithExtendedColumn(String[] inputRow,String[] masterRecord,double matchingProba,String distanceDetails,String delimiter) throws IOException, InterruptedException {
  String[] duplicateRecord=new String[masterRecord.length];
  for (int idx=0; idx < inputRow.length; idx++) {
    duplicateRecord[idx]=inputRow[idx];
  }
  duplicateRecord[duplicateRecord.length - extSize]=masterRecord[masterRecord.length - extSize];
  duplicateRecord[duplicateRecord.length - extSize + 1]=String.valueOf(0);
  duplicateRecord[duplicateRecord.length - extSize + 2]=String.valueOf(false);
  duplicateRecord[duplicateRecord.length - extSize + 3]=String.valueOf(matchingProba);
  int extIdx=3;
  if (isSeperateOutput) {
    extIdx++;
    double groupQuality=computeGroupQuality(masterRecord,matchingProba,extIdx);
    masterRecord[duplicateRecord.length - extSize + extIdx]=String.valueOf(groupQuality);
  }
  if (isOutputDistDetails) {
    extIdx++;
    duplicateRecord[duplicateRecord.length - extSize + extIdx]=distanceDetails;
  }
  outputRow(StringUtils.join(duplicateRecord,delimiter));
}","private void updateWithExtendedColumn(String[] inputRow,String[] masterRecord,double matchingProba,String distanceDetails,String delimiter,String escCharacter) throws IOException, InterruptedException {
  String[] duplicateRecord=new String[masterRecord.length];
  for (int idx=0; idx < inputRow.length; idx++) {
    duplicateRecord[idx]=inputRow[idx];
  }
  duplicateRecord[duplicateRecord.length - extSize]=masterRecord[masterRecord.length - extSize];
  duplicateRecord[duplicateRecord.length - extSize + 1]=String.valueOf(0);
  duplicateRecord[duplicateRecord.length - extSize + 2]=String.valueOf(false);
  duplicateRecord[duplicateRecord.length - extSize + 3]=String.valueOf(matchingProba);
  int extIdx=3;
  if (isSeperateOutput) {
    extIdx++;
    double groupQuality=computeGroupQuality(masterRecord,matchingProba,extIdx);
    masterRecord[duplicateRecord.length - extSize + extIdx]=String.valueOf(groupQuality);
  }
  if (isOutputDistDetails) {
    extIdx++;
    duplicateRecord[duplicateRecord.length - extSize + extIdx]=distanceDetails;
  }
  outputRow(StringUtilities.join(duplicateRecord,delimiter,escCharacter));
}",0.9833258224425416
137502,"public AnalysisMatchRecordGrouping(MatchGroupResultConsumer matchResultConsumer){
  this.matchResultConsumer=matchResultConsumer;
  setColumnDelimiter(columnDelimiter);
  setIsOutputDistDetails(true);
  setSeperateOutput(Boolean.TRUE);
}","public AnalysisMatchRecordGrouping(MatchGroupResultConsumer matchResultConsumer){
  this.matchResultConsumer=matchResultConsumer;
  setColumnDelimiter(columnDelimiter);
  setEscapeCharacter(escapeCharacter);
  setIsOutputDistDetails(true);
  setSeperateOutput(Boolean.TRUE);
}",0.9239766081871345
137503,"@Override protected void outputRow(String row){
  matchResultConsumer.handle(StringUtils.splitByWholeSeparatorPreserveAllTokens(row,columnDelimiter));
}","@Override protected void outputRow(String row){
  matchResultConsumer.handle(StringUtilities.split(row,columnDelimiter,escapeCharacter));
}",0.8178694158075601
137504,"/** 
 * if these items in recycle bin are depended by others which is not in recycle bin,show a warning and return.
 * @param allNodes
 * @param isCurrentPerspectiveDQ
 * @return these list will be used to pop a dialog and display the detail nodes which are depended by others.
 */
public static List<IRepositoryNode> getCanNotDeletedNodes(List<IRepositoryNode> allNodes,boolean isCurrentPerspectiveDQ){
  List<IRepositoryNode> canNotDeletedNodes=new ArrayList<IRepositoryNode>();
  if (allNodes == null) {
    return canNotDeletedNodes;
  }
  for (  IRepositoryNode node : allNodes) {
    List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
    if (node.getObject() != null && ERepositoryObjectType.TDQ_JRAXML_ELEMENT.equals(node.getObject().getRepositoryObjectType())) {
      dependencies=getDependedReportOfJrxml(node);
    }
    if (dependencies == null || dependencies.isEmpty()) {
      continue;
    }
    if (!isCurrentPerspectiveDQ) {
      canNotDeletedNodes.add(node);
      continue;
    }
    for (    ModelElement mod : dependencies) {
      Property property=PropertyHelper.getProperty(mod);
      if (property == null) {
        continue;
      }
      Item item=property.getItem();
      if (item != null && !item.getState().isDeleted()) {
        canNotDeletedNodes.add(node);
      }
    }
  }
  return canNotDeletedNodes;
}","/** 
 * if these items in recycle bin are depended by others which is not in recycle bin,show a warning and return.
 * @param allNodes
 * @param isCurrentPerspectiveDQ
 * @return these list will be used to pop a dialog and display the detail nodes which are depended by others.
 */
public static List<IRepositoryNode> getCanNotDeletedNodes(Collection<IRepositoryNode> allNodes,boolean isCurrentPerspectiveDQ){
  List<IRepositoryNode> canNotDeletedNodes=new ArrayList<IRepositoryNode>();
  if (allNodes == null) {
    return canNotDeletedNodes;
  }
  for (  IRepositoryNode node : allNodes) {
    List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
    if (node.getObject() != null && ERepositoryObjectType.TDQ_JRAXML_ELEMENT.equals(node.getObject().getRepositoryObjectType())) {
      dependencies=getDependedReportOfJrxml(node);
    }
    if (dependencies == null || dependencies.isEmpty()) {
      continue;
    }
    if (!isCurrentPerspectiveDQ) {
      canNotDeletedNodes.add(node);
      continue;
    }
    for (    ModelElement mod : dependencies) {
      Property property=PropertyHelper.getProperty(mod);
      if (property == null) {
        continue;
      }
      Item item=property.getItem();
      if (item != null && !item.getState().isDeleted()) {
        canNotDeletedNodes.add(node);
      }
    }
  }
  return canNotDeletedNodes;
}",0.9948867786705624
137505,"/** 
 * DOC gdbu Comment method ""fillTreeList"". Filter's entry method.
 * @param monitor
 */
public static void fillTreeList(IProgressMonitor monitor){
  allFilteredNodeList.clear();
  DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
  List<IRepositoryNode> list=new ArrayList<IRepositoryNode>();
  list.add(getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
  list.add(getRootNode(ERepositoryObjectType.TDQ_LIBRARIES,true));
  list.add(getRootNode(ERepositoryObjectType.METADATA,true));
  list.add(getRootNode(ERepositoryObjectType.RECYCLE_BIN,true));
  for (  IRepositoryNode iRepositoryNode : list) {
    allFilteredNodeList.addAll(getTreeList(iRepositoryNode));
    if (null != monitor) {
      monitor.worked(2);
    }
  }
  DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
}","/** 
 * DOC gdbu Comment method ""fillTreeList"". Filter's entry method.
 * @param monitor
 */
public static void fillTreeList(IProgressMonitor monitor){
  allFilteredNodeList.clear();
  DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
  List<IRepositoryNode> list=new ArrayList<IRepositoryNode>();
  list.add(getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
  list.add(getRootNode(ERepositoryObjectType.TDQ_LIBRARIES,true));
  list.add(getRootNode(ERepositoryObjectType.METADATA,true));
  list.add(getRecycleBinRepNode());
  for (  IRepositoryNode iRepositoryNode : list) {
    allFilteredNodeList.addAll(getTreeList(iRepositoryNode));
    if (null != monitor) {
      monitor.worked(2);
    }
  }
  DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
}",0.96403785488959
137506,"/** 
 * ADD gdbu 2011-11-15 TDQ-3969 DOC gdbu Comment method ""getRecycleBinFilteredNodes"". This method could return a list contains recycle bin node and all of it's children.
 * @return
 */
private static List<IRepositoryNode> getRecycleBinFilteredNodes(){
  return getTreeList(getRootNode(ERepositoryObjectType.RECYCLE_BIN,true));
}","/** 
 * ADD gdbu 2011-11-15 TDQ-3969 DOC gdbu Comment method ""getRecycleBinFilteredNodes"". This method could return a list contains recycle bin node and all of it's children.
 * @return
 */
private static List<IRepositoryNode> getRecycleBinFilteredNodes(){
  return getTreeList(getRecycleBinRepNode());
}",0.9167974882260596
137507,"/** 
 * get recycle bin node.
 * @return
 */
public static RepositoryNode getRecycleBinRootNode(){
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer(false);
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      node=(RepositoryNode)item.getData();
      if (node.isBin()) {
        break;
      }
    }
  }
  return node;
}","/** 
 * get recycle bin node.
 * @return
 * @deprecated use {@link #getRecycleBinRepNode()} instead
 */
@Deprecated public static RepositoryNode getRecycleBinRootNode(){
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer(false);
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      node=(RepositoryNode)item.getData();
      if (node.isBin()) {
        break;
      }
    }
  }
  return node;
}",0.9225736095965104
137508,"/** 
 * ADD gdbu 2011-11-24 TDQ-4068 To get all children nodes. DOC gdbu Comment method ""findRecycleBinNodeWhenFiltering"".
 * @param recycleBinNodes
 * @return
 */
public static List<IRepositoryNode> findAllChildrenNodes(List<IRepositoryNode> recycleBinNodes){
  List<IRepositoryNode> findAllRecycleBinNode=new ArrayList<IRepositoryNode>();
  findAllRecycleBinNode.addAll(recycleBinNodes);
  for (  IRepositoryNode iRepositoryNode : recycleBinNodes) {
    findAllRecycleBinNode.addAll(findAllChildrenNodes(iRepositoryNode.getChildren()));
  }
  return findAllRecycleBinNode;
}","/** 
 * ADD gdbu 2011-11-24 TDQ-4068 To get all children nodes. DOC gdbu Comment method ""findRecycleBinNodeWhenFiltering"".
 * @param recycleBinNodes
 * @return
 */
public static Collection<IRepositoryNode> findAllChildrenNodes(Collection<IRepositoryNode> recycleBinNodes){
  Set<IRepositoryNode> allChindrenNode=new HashSet<IRepositoryNode>();
  allChindrenNode.addAll(recycleBinNodes);
  for (  IRepositoryNode iRepositoryNode : recycleBinNodes) {
    allChindrenNode.addAll(findAllChildrenNodes(iRepositoryNode.getChildren()));
  }
  return allChindrenNode;
}",0.7370272647317502
137509,"/** 
 * get the RepositoryNode according to the nodeName.
 * @param nodeName the node name
 * @param open if the DQView is not show, show it or not
 * @return
 */
public static RepositoryNode getRootNode(ERepositoryObjectType nodeName,boolean open){
  FolderItem folderItem=ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),nodeName,Path.EMPTY);
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer(open);
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      node=(RepositoryNode)item.getData();
      if (node.isBin()) {
        continue;
      }
      if (folderItem != null) {
        boolean isSysFolder=ENodeType.SYSTEM_FOLDER == node.getType() && FolderType.SYSTEM_FOLDER_LITERAL == folderItem.getType();
        if (isSysFolder) {
          String viewFolderLabel=folderItem.getProperty().getLabel();
          String folderLabel=node.getObject().getProperty().getLabel();
          if (viewFolderLabel.equals(folderLabel)) {
            return node;
          }
        }
      }
    }
  }
  log.error(Messages.getString(""String_Node_Str"") + nodeName.getLabel());
  return node;
}","/** 
 * get the RepositoryNode according to the ERepositoryObjectType(the ERepositoryObjectType should not be RECYCLE_BIN, because there doesn't exist a physical folder, so there will return null and log an error message; use getRecycleBinRepNode() to get the RecycleBinNode).
 * @param nodeType the node's ERepositoryObjectType
 * @param open if the DQView is not show, show it or not
 * @return
 */
public static RepositoryNode getRootNode(ERepositoryObjectType nodeType,boolean open){
  FolderItem folderItem=ProxyRepositoryFactory.getInstance().getFolderItem(ProjectManager.getInstance().getCurrentProject(),nodeType,Path.EMPTY);
  RepositoryNode node=null;
  CommonViewer commonViewer=getDQCommonViewer(open);
  if (commonViewer != null) {
    TreeItem[] items=commonViewer.getTree().getItems();
    for (    TreeItem item : items) {
      node=(RepositoryNode)item.getData();
      if (node.isBin()) {
        continue;
      }
      if (folderItem != null) {
        boolean isSysFolder=ENodeType.SYSTEM_FOLDER == node.getType() && FolderType.SYSTEM_FOLDER_LITERAL == folderItem.getType();
        if (isSysFolder) {
          String viewFolderLabel=folderItem.getProperty().getLabel();
          String folderLabel=node.getObject().getProperty().getLabel();
          if (viewFolderLabel.equals(folderLabel)) {
            return node;
          }
        }
      }
    }
  }
  log.error(Messages.getString(""String_Node_Str"") + nodeType.getLabel());
  return node;
}",0.8952029520295203
137510,"/** 
 * find a node from recycle bin.
 * @param modelElement
 * @return
 */
public static RepositoryNode recursiveFindRecycleBin(ModelElement modelElement){
  if (modelElement == null) {
    return null;
  }
  String uuid=getUUID(modelElement);
  RepositoryNode recyBinNode=getRecycleBinRootNode();
  if (uuid == null || recyBinNode == null) {
    return null;
  }
  List<IRepositoryNode> children=recyBinNode.getChildren();
  return recursiveFindByUuid(uuid,children);
}","/** 
 * find a node from recycle bin.
 * @param modelElement
 * @return
 */
public static RepositoryNode recursiveFindRecycleBin(ModelElement modelElement){
  if (modelElement == null) {
    return null;
  }
  String uuid=getUUID(modelElement);
  RepositoryNode recyBinNode=getRecycleBinRepNode();
  if (uuid == null || recyBinNode == null) {
    return null;
  }
  List<IRepositoryNode> children=recyBinNode.getChildren();
  return recursiveFindByUuid(uuid,children);
}",0.9946865037194474
137511,"/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
@SuppressWarnings(""String_Node_Str"") private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  if (tdColumn.eIsProxy()) {
    tdColumn=(TdColumn)EObjectHelper.resolveObject(tdColumn);
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(Messages.getString(""String_Node_Str"",colName,buf.toString().trim()));
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || PluginConstant.EMPTY_STRING.equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(Messages.getString(""String_Node_Str"",language));
    }
    Object[] args=new Object[]{(indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()),ResourceHelper.getUUID(indicatorDefinition)};
    String warnInfo=Messages.getString(""String_Node_Str"",args) + Messages.getString(""String_Node_Str"",language);
    return traceError(warnInfo);
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
      }
 else {
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getAverageLengthIndicator().isSuperTypeOf(indicatorEclass) && !IndicatorsPackage.eINSTANCE.getAverageLengthIndicator().equals(indicatorEclass)) {
      }
    }
  }
  String table=dbms().getQueryColumnSetWithPrefix(tdColumn);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      if (!PluginConstant.EMPTY_STRING.equals(completedSqlString)) {
        whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
        completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      }
 else {
        completedSqlString=""String_Node_Str"" + table;
      }
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getSqlDataType().getJavaDataType()) || Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
          if (colName == null) {
            return traceError(Messages.getString(""String_Node_Str"",language,indicator.getName()));
          }
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      return traceError(Messages.getString(""String_Node_Str"",language,indicator.getName()));
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(Messages.getString(""String_Node_Str"",colName,indicator.getName()));
      }
      int javaType=tdColumn.getSqlDataType().getJavaDataType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table) || (Java2SqlType.isDateInSQL(javaType) && SupportDBUrlType.MYSQLDEFAULTURL.getLanguage().equals(language))) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    String sqlBody=sqlGenericExpression.getBody();
    if (sqlBody.indexOf(GenericSQLHandler.GROUP_BY_ALIAS) != -1) {
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlBody,colName,table,colName);
    }
 else {
      completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlBody,colName,table);
    }
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}","/** 
 * Method ""createSqlQuery"".
 * @param dataFilterExpression
 * @param analysis
 * @param indicator
 * @throws ParseException
 * @throws AnalysisExecutionException
 */
@SuppressWarnings(""String_Node_Str"") private boolean createSqlQuery(String dataFilterAsString,Indicator indicator) throws ParseException, AnalysisExecutionException {
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  if (analyzedElement == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(indicator.getAnalyzedElement());
  if (tdColumn == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  if (tdColumn.eIsProxy()) {
    tdColumn=(TdColumn)EObjectHelper.resolveObject(tdColumn);
  }
  String colName=getQuotedColumnName(tdColumn);
  if (!belongToSameSchemata(tdColumn)) {
    StringBuffer buf=new StringBuffer();
    for (    orgomg.cwm.objectmodel.core.Package schema : schemata.values()) {
      buf.append(schema.getName() + ""String_Node_Str"");
    }
    log.error(Messages.getString(""String_Node_Str"",colName,buf.toString().trim()));
    return false;
  }
  colName=castColumn(indicator,tdColumn,colName);
  String language=dbms().getDbmsName();
  Expression sqlGenericExpression=null;
  IndicatorDefinition indicatorDefinition;
  String label=indicator.getIndicatorDefinition().getLabel();
  if (label == null || PluginConstant.EMPTY_STRING.equals(label)) {
    indicatorDefinition=indicator.getIndicatorDefinition();
  }
 else {
    indicatorDefinition=DefinitionHandler.getInstance().getIndicatorDefinition(label);
  }
  if (indicatorDefinition == null) {
    return traceError(Messages.getString(""String_Node_Str"",indicator.getName()));
  }
  sqlGenericExpression=dbms().getSqlExpression(indicatorDefinition);
  final EClass indicatorEclass=indicator.eClass();
  if (sqlGenericExpression == null || sqlGenericExpression.getBody() == null) {
    if (UDIHelper.isUDI(indicator) && indicator.getInstantiatedExpressions().size() > 0) {
      return Boolean.TRUE;
    }
    if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indicatorEclass)) {
      return traceError(Messages.getString(""String_Node_Str"",language));
    }
    Object[] args=new Object[]{(indicator.getName() != null ? indicator.getName() : indicatorEclass.getName()),ResourceHelper.getUUID(indicatorDefinition)};
    String warnInfo=Messages.getString(""String_Node_Str"",args) + Messages.getString(""String_Node_Str"",language);
    return traceError(warnInfo);
  }
  List<String> whereExpression=new ArrayList<String>();
  if (StringUtils.isNotBlank(dataFilterAsString)) {
    whereExpression.add(dataFilterAsString);
  }
  List<String> rangeStrings=null;
  DateGrain dateAggregationType=null;
  IndicatorParameters parameters=indicator.getParameters();
  if (parameters != null) {
    Domain bins=parameters.getBins();
    if (bins != null) {
      rangeStrings=getBinsAsGenericString(bins.getRanges(),colName);
    }
    DateParameters dateParameters=parameters.getDateParameters();
    if (dateParameters != null) {
      dateAggregationType=dateParameters.getDateAggregationType();
    }
    TextParameters textParameter=parameters.getTextParameter();
    if (textParameter != null) {
      if (textParameter.isUseNulls()) {
      }
 else {
      }
      if (textParameter.isIgnoreCase()) {
        colName=dbms().toUpperCase(colName);
      }
      if (!textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getLengthIndicator().isSuperTypeOf(indicatorEclass)) {
        String tdColName=getQuotedColumnName(tdColumn);
        tdColName=dbms().replaceNullsWithString(tdColName,""String_Node_Str"");
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass)) {
        colName=dbms().trim(colName);
      }
 else       if (textParameter.isUseBlank() && IndicatorsPackage.eINSTANCE.getAverageLengthIndicator().isSuperTypeOf(indicatorEclass) && !IndicatorsPackage.eINSTANCE.getAverageLengthIndicator().equals(indicatorEclass)) {
      }
    }
  }
  String table=dbms().getQueryColumnSetWithPrefix(tdColumn);
  String completedSqlString=null;
  if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getMedianIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getLowerQuartileIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getUpperQuartileIndicator())) {
    completedSqlString=getCompletedStringForQuantiles(indicator,sqlGenericExpression,colName,table,whereExpression);
    if (completedSqlString != null) {
      if (!PluginConstant.EMPTY_STRING.equals(completedSqlString)) {
        whereExpression=duplicateForCrossJoin(completedSqlString,whereExpression,tdColumn);
        completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      }
 else {
        completedSqlString=""String_Node_Str"" + table;
      }
    }
  }
 else   if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getFrequencyIndicator()) || IndicatorsPackage.eINSTANCE.getFrequencyIndicator().isSuperTypeOf(indicatorEclass) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())|| UDIHelper.isFrequency(indicator)) {
    int topN=indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator()) ? 1 : getTopN(indicator);
    if (topN <= 0) {
      topN=TOP_N;
    }
    if (rangeStrings != null) {
      completedSqlString=getUnionCompletedString(indicator,sqlGenericExpression,colName,table,whereExpression,rangeStrings);
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getModeIndicator())) {
        completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
      }
    }
 else     if (dateAggregationType != null && !dateAggregationType.equals(DateGrain.NONE) && Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
      completedSqlString=getDateAggregatedCompletedStringWithoutAlia(sqlGenericExpression,colName,table,dateAggregationType);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
 else {
      if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getPatternLowFreqIndicator())) {
        if (Java2SqlType.isNumbericInSQL(tdColumn.getSqlDataType().getJavaDataType()) || Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
          colName=addFunctionTypeConvert(colName);
        }
        final EList<CharactersMapping> charactersMapping=indicatorDefinition.getCharactersMapping();
        colName=dbms().getPatternFinderFunction(colName,charactersMapping);
        if (colName == null) {
          colName=dbms().getPatternFinderDefaultFunction(colName);
          if (colName == null) {
            return traceError(Messages.getString(""String_Node_Str"",language,indicator.getName()));
          }
        }
      }
 else       if (indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexFreqIndicator()) || indicatorEclass.equals(IndicatorsPackage.eINSTANCE.getSoundexLowFreqIndicator())) {
        table=dbms().getSoundexFunction(table,colName);
      }
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),colName,table,colName);
      completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
      completedSqlString=dbms().getTopNQuery(completedSqlString,topN);
    }
  }
 else   if (IndicatorsPackage.eINSTANCE.getPatternMatchingIndicator().isSuperTypeOf(indicatorEclass)) {
    List<String> patterns=getPatterns(indicator);
    if (patterns.isEmpty()) {
      if (indicator.getInstantiatedExpressions().size() > 0) {
        return Boolean.TRUE;
      }
      return traceError(Messages.getString(""String_Node_Str"",language,indicator.getName()));
    }
    completedSqlString=replaceVariables(sqlGenericExpression.getBody(),colName,table,patterns);
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
 else {
    if (IndicatorsPackage.eINSTANCE.getDefValueCountIndicator().equals(indicatorEclass)) {
      String defValue=ColumnHelper.getDefaultValue(tdColumn);
      if (defValue == null) {
        return traceError(Messages.getString(""String_Node_Str"",colName,indicator.getName()));
      }
      int javaType=tdColumn.getSqlDataType().getJavaDataType();
      if (!Java2SqlType.isNumbericInSQL(javaType) && !isFunction(defValue,table) || (Java2SqlType.isDateInSQL(javaType) && SupportDBUrlType.MYSQLDEFAULTURL.getLanguage().equals(language))) {
        defValue=""String_Node_Str"" + defValue + ""String_Node_Str"";
      }
      whereExpression.add(colName + dbms().equal() + defValue);
    }
    String sqlBody=sqlGenericExpression.getBody();
    if (sqlBody.indexOf(GenericSQLHandler.GROUP_BY_ALIAS) != -1) {
      completedSqlString=dbms().fillGenericQueryWithColumnTableAndAlias(sqlBody,colName,table,colName);
    }
 else {
      completedSqlString=dbms().fillGenericQueryWithColumnsAndTable(sqlBody,colName,table);
    }
    completedSqlString=addWhereToSqlStringStatement(whereExpression,completedSqlString);
  }
  String finalQuery=completedSqlString;
  if (finalQuery != null) {
    TdExpression instantiateSqlExpression=BooleanExpressionHelper.createTdExpression(language,finalQuery);
    indicator.setInstantiatedExpression(instantiateSqlExpression);
    return true;
  }
  return false;
}",0.9881669307976756
137512,"/** 
 * set the execution number of the analysis, if the running result is ok
 * @param analysis - which need to update the execution number
 * @param isRunAnaResultok - the running result of the analysis is ok or not
 */
public static void setExecutionNumberInAnalysisResult(Analysis analysis,boolean isRunAnaResultok){
  final ExecutionInformations resultMetadata=analysis.getResults().getResultMetadata();
  resultMetadata.setLastRunOk(isRunAnaResultok);
  int executionNumber=resultMetadata.getExecutionNumber() + 1;
  resultMetadata.setExecutionNumber(executionNumber);
  if (isRunAnaResultok) {
    resultMetadata.setLastExecutionNumberOk(executionNumber);
  }
}","/** 
 * set the execution number of the analysis, if the running result is ok
 * @param analysis - which need to update the execution number
 * @param isRunAnaResultok - the running result of the analysis is ok or not
 */
public static void setExecutionNumberInAnalysisResult(Analysis analysis,boolean isRunAnaResultok){
  final ExecutionInformations resultMetadata=analysis.getResults().getResultMetadata();
  resultMetadata.setLastRunOk(isRunAnaResultok);
  resultMetadata.setExecutionNumber(resultMetadata.getExecutionNumber() + 1);
  if (isRunAnaResultok) {
    resultMetadata.setLastExecutionNumberOk(resultMetadata.getLastExecutionNumberOk() + 1);
  }
}",0.8620949510173324
137513,"protected void evalSchemaIndicLow(final CatalogIndicator catalogIndic,final SchemaIndicator schemaIndic,final Catalog tdCatalog,final Schema tdSchema,ReturnCode ok) throws SQLException {
  boolean hasSchema=tdSchema != null;
  boolean hasCatalog=false;
  String schemaName=hasSchema ? tdSchema.getName() : null;
  String catName=null;
  if (tdCatalog == null) {
    if (tdSchema.eContainer() instanceof Catalog) {
      hasCatalog=true;
      catName=((Catalog)tdSchema.eContainer()).getName();
    }
  }
 else {
    hasCatalog=true;
    catName=hasCatalog ? tdCatalog.getName() : null;
  }
  schemaIndic.setAnalyzedElement(hasSchema ? tdSchema : tdCatalog);
  int tableCount=0;
  final String[] tablePatterns=tablePattern != null && tablePattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.tablePattern,FILTER_SEP) : new String[]{this.tablePattern};
  for (  String pat : tablePatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      List<? extends NamedColumnSet> tables=DqRepositoryViewService.getTables(getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : tables) {
        if (this.getMonitor() != null) {
          StringBuilder taskName=new StringBuilder();
          if (catName != null) {
            taskName.append(Messages.getString(""String_Node_Str"",catName)).append(""String_Node_Str"");
          }
          if (schemaName != null) {
            taskName.append(Messages.getString(""String_Node_Str"",schemaName)).append(""String_Node_Str"");
          }
          taskName.append(Messages.getString(""String_Node_Str"",t.getName()));
          this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"",taskName.toString()));
        }
        tableCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,true,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setTableCount(tableCount);
  int viewCount=0;
  final String[] viewPatterns=viewPattern != null && viewPattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.viewPattern,FILTER_SEP) : new String[]{this.viewPattern};
  for (  String pat : viewPatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      List<? extends NamedColumnSet> views=DqRepositoryViewService.getViews(getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : views) {
        viewCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,false,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setViewCount(viewCount);
  if (hasCatalog && hasSchema && catalogIndic != null) {
    this.addToConnectionIndicator(catalogIndic);
    catalogIndic.addSchemaIndicator(schemaIndic);
    catalogIndic.setTableCount(catalogIndic.getTableCount() + tableCount);
    catalogIndic.setTableRowCount(catalogIndic.getTableRowCount() + schemaIndic.getTableRowCount());
    catalogIndic.setViewRowCount(catalogIndic.getViewRowCount() + schemaIndic.getViewRowCount());
    catalogIndic.setViewCount(catalogIndic.getViewCount() + schemaIndic.getViewCount());
    catalogIndic.setKeyCount(catalogIndic.getKeyCount() + schemaIndic.getKeyCount());
    catalogIndic.setIndexCount(catalogIndic.getIndexCount() + schemaIndic.getIndexCount());
  }
 else   if (!hasCatalog) {
    this.addToConnectionIndicator(schemaIndic);
  }
 else   if (!hasSchema) {
    if (SchemaPackage.eINSTANCE.getCatalogIndicator().equals(schemaIndic.eClass())) {
      this.addToConnectionIndicator(schemaIndic);
    }
 else {
      log.error(Messages.getString(""String_Node_Str""));
    }
  }
}","protected void evalSchemaIndicLow(final CatalogIndicator catalogIndic,final SchemaIndicator schemaIndic,final Catalog tdCatalog,final Schema tdSchema,ReturnCode ok) throws SQLException {
  boolean hasSchema=tdSchema != null;
  boolean hasCatalog=false;
  String schemaName=hasSchema ? tdSchema.getName() : null;
  String catName=null;
  if (tdCatalog == null) {
    if (tdSchema.eContainer() instanceof Catalog) {
      hasCatalog=true;
      catName=((Catalog)tdSchema.eContainer()).getName();
    }
  }
 else {
    hasCatalog=true;
    catName=hasCatalog ? tdCatalog.getName() : null;
  }
  schemaIndic.setAnalyzedElement(hasSchema ? tdSchema : tdCatalog);
  int tableCount=0;
  final String[] tablePatterns=tablePattern != null && tablePattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.tablePattern,FILTER_SEP) : new String[]{this.tablePattern};
  for (  String pat : tablePatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      checkConnectionBeforeGetTableView();
      List<? extends NamedColumnSet> tables=DqRepositoryViewService.getTables(getConnection(),getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : tables) {
        if (this.getMonitor() != null) {
          StringBuilder taskName=new StringBuilder();
          if (catName != null) {
            taskName.append(Messages.getString(""String_Node_Str"",catName)).append(""String_Node_Str"");
          }
          if (schemaName != null) {
            taskName.append(Messages.getString(""String_Node_Str"",schemaName)).append(""String_Node_Str"");
          }
          taskName.append(Messages.getString(""String_Node_Str"",t.getName()));
          this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"",taskName.toString()));
        }
        tableCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,true,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setTableCount(tableCount);
  int viewCount=0;
  final String[] viewPatterns=viewPattern != null && viewPattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.viewPattern,FILTER_SEP) : new String[]{this.viewPattern};
  for (  String pat : viewPatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      checkConnectionBeforeGetTableView();
      List<? extends NamedColumnSet> views=DqRepositoryViewService.getViews(getConnection(),getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : views) {
        viewCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,false,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setViewCount(viewCount);
  if (hasCatalog && hasSchema && catalogIndic != null) {
    this.addToConnectionIndicator(catalogIndic);
    catalogIndic.addSchemaIndicator(schemaIndic);
    catalogIndic.setTableCount(catalogIndic.getTableCount() + tableCount);
    catalogIndic.setTableRowCount(catalogIndic.getTableRowCount() + schemaIndic.getTableRowCount());
    catalogIndic.setViewRowCount(catalogIndic.getViewRowCount() + schemaIndic.getViewRowCount());
    catalogIndic.setViewCount(catalogIndic.getViewCount() + schemaIndic.getViewCount());
    catalogIndic.setKeyCount(catalogIndic.getKeyCount() + schemaIndic.getKeyCount());
    catalogIndic.setIndexCount(catalogIndic.getIndexCount() + schemaIndic.getIndexCount());
  }
 else   if (!hasCatalog) {
    this.addToConnectionIndicator(schemaIndic);
  }
 else   if (!hasSchema) {
    if (SchemaPackage.eINSTANCE.getCatalogIndicator().equals(schemaIndic.eClass())) {
      this.addToConnectionIndicator(schemaIndic);
    }
 else {
      log.error(Messages.getString(""String_Node_Str""));
    }
  }
}",0.9847702632937532
137514,"/** 
 * physical Delete all selected nodes, if the node has dependency, will popup a confirm dialog with lists of dependencies
 * @param deleteNodes
 * @param shownNodes
 * @param findAllRecycleBinNodes
 * @param isStateDeleted
 */
private void physicalDelete(List deleteNodes,List<IRepositoryNode> shownNodes,List<IRepositoryNode> findAllRecycleBinNodes){
  confirmFromDialog=true;
  List<IRepositoryNode> folderNodeWhichChildHadDepend=null;
  for (int i=selectedNodes.size() - 1; i >= 0; i--) {
    if (selectedNodes.size() == 0) {
      break;
    }
    RepositoryNode node=selectedNodes.get(i);
    RepositoryNode parent=node.getParent();
    if (DQRepositoryNode.isOnFilterring()) {
      for (      IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
        if (node.equals(iRepositoryNode)) {
          node=(RepositoryNode)iRepositoryNode;
          shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
          break;
        }
      }
      if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
        break;
      }
    }
    if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
      List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
      boolean haveSubNode=false;
      for (      IRepositoryNode subNode : newLs) {
        if (!hasDependencyClients(subNode)) {
          excuteSuperRun((RepositoryNode)subNode,node);
        }
 else {
          haveSubNode=true;
          if (folderNodeWhichChildHadDepend == null) {
            folderNodeWhichChildHadDepend=new ArrayList<IRepositoryNode>();
          }
          folderNodeWhichChildHadDepend.add(node);
        }
      }
      if (!haveSubNode) {
        excuteSuperRun(node,parent);
      }
    }
 else {
      if (!hasDependencyClients(node)) {
        excuteSuperRun(node,parent);
      }
    }
  }
  boolean forceDelete=false;
  if (nodeWithDependsMap.size() > 0) {
    forceDelete=DeleteModelElementConfirmDialog.showDialog(nodeWithDependsMap,DefaultMessagesImpl.getString(""String_Node_Str""),true);
    if (forceDelete) {
      Iterator iter=nodeWithDependsMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<IRepositoryNode,List<ModelElement>> entry=(Map.Entry<IRepositoryNode,List<ModelElement>>)iter.next();
        IRepositoryNode node=entry.getKey();
        List<ModelElement> dependencies=entry.getValue();
        excuteSuperRun((RepositoryNode)node,node.getParent());
        physicalDeleteDependencies(dependencies);
      }
    }
  }
  nodeWithDependsMap.clear();
  if (folderNodeWhichChildHadDepend != null && folderNodeWhichChildHadDepend.size() > 0) {
    if (forceDelete) {
      for (      IRepositoryNode folder : folderNodeWhichChildHadDepend) {
        excuteSuperRun((RepositoryNode)folder,folder.getParent());
      }
    }
  }
  confirmFromDialog=false;
}","/** 
 * physical Delete all selected nodes, if the node has dependency, will popup a confirm dialog with lists of dependencies
 * @param deleteNodes
 * @param shownNodes
 * @param findAllRecycleBinNodes
 * @param isStateDeleted
 */
private void physicalDelete(List deleteNodes,List<IRepositoryNode> shownNodes,List<IRepositoryNode> findAllRecycleBinNodes){
  confirmForDQ=true;
  List<IRepositoryNode> folderNodeWhichChildHadDepend=null;
  for (int i=selectedNodes.size() - 1; i >= 0; i--) {
    if (selectedNodes.size() == 0) {
      break;
    }
    RepositoryNode node=selectedNodes.get(i);
    RepositoryNode parent=node.getParent();
    if (DQRepositoryNode.isOnFilterring()) {
      for (      IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
        if (node.equals(iRepositoryNode)) {
          node=(RepositoryNode)iRepositoryNode;
          shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
          break;
        }
      }
      if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
        break;
      }
    }
    if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
      List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
      boolean haveSubNode=false;
      for (      IRepositoryNode subNode : newLs) {
        if (!hasDependencyClients(subNode)) {
          excuteSuperRun((RepositoryNode)subNode,node);
        }
 else {
          haveSubNode=true;
          if (folderNodeWhichChildHadDepend == null) {
            folderNodeWhichChildHadDepend=new ArrayList<IRepositoryNode>();
          }
          folderNodeWhichChildHadDepend.add(node);
        }
      }
      if (!haveSubNode) {
        excuteSuperRun(node,parent);
      }
    }
 else {
      if (!hasDependencyClients(node)) {
        excuteSuperRun(node,parent);
      }
    }
  }
  boolean forceDelete=false;
  if (nodeWithDependsMap.size() > 0) {
    forceDelete=DeleteModelElementConfirmDialog.showDialog(nodeWithDependsMap,DefaultMessagesImpl.getString(""String_Node_Str""),true);
    if (forceDelete) {
      Iterator iter=nodeWithDependsMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<IRepositoryNode,List<ModelElement>> entry=(Map.Entry<IRepositoryNode,List<ModelElement>>)iter.next();
        IRepositoryNode node=entry.getKey();
        List<ModelElement> dependencies=entry.getValue();
        excuteSuperRun((RepositoryNode)node,node.getParent());
        physicalDeleteDependencies(dependencies);
      }
    }
  }
  nodeWithDependsMap.clear();
  if (folderNodeWhichChildHadDepend != null && folderNodeWhichChildHadDepend.size() > 0) {
    if (forceDelete) {
      for (      IRepositoryNode folder : folderNodeWhichChildHadDepend) {
        excuteSuperRun((RepositoryNode)folder,folder.getParent());
      }
    }
  }
  confirmForDQ=false;
}",0.9955280357757138
137515,"/** 
 * DOC yyi 2011-07-07 22246:view rows for average length for Oracle
 * @return average length sql statement
 */
public String getAverageLengthRows(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}","/** 
 * DOC yyi 2011-07-07 22246:view rows for average length for Oracle
 * @return average length sql statement
 */
@Override public String getAverageLengthRows(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.9825174825174824
137516,"public String toQualifiedName(String catalog,String schema,String table){
  return super.toQualifiedName(null,null,table);
}","@Override public String toQualifiedName(String catalog,String schema,String table){
  return super.toQualifiedName(null,null,table);
}",0.9612403100775194
137517,"/** 
 * physical Delete all selected nodes, if the node has dependency, will popup a confirm dialog with lists of dependencies
 * @param deleteNodes
 * @param shownNodes
 * @param findAllRecycleBinNodes
 * @param isStateDeleted
 */
private void physicalDelete(List deleteNodes,List<IRepositoryNode> shownNodes,List<IRepositoryNode> findAllRecycleBinNodes){
  confirmFromDialog=true;
  List<IRepositoryNode> folderNodeWhichChildHadDepend=null;
  for (int i=selectedNodes.size() - 1; i >= 0; i--) {
    if (selectedNodes.size() == 0) {
      break;
    }
    RepositoryNode node=selectedNodes.get(i);
    RepositoryNode parent=node.getParent();
    if (DQRepositoryNode.isOnFilterring()) {
      for (      IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
        if (node.equals(iRepositoryNode)) {
          node=(RepositoryNode)iRepositoryNode;
          shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
          break;
        }
      }
      if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
        break;
      }
    }
    if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
      List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
      boolean haveSubNode=false;
      for (      IRepositoryNode subNode : newLs) {
        if (!hasDependencyClients(subNode)) {
          excuteSuperRun((RepositoryNode)subNode,node);
        }
 else {
          haveSubNode=true;
          if (folderNodeWhichChildHadDepend == null) {
            folderNodeWhichChildHadDepend=new ArrayList<IRepositoryNode>();
          }
          folderNodeWhichChildHadDepend.add(node);
        }
      }
      if (!haveSubNode) {
        excuteSuperRun(node,parent);
      }
    }
 else {
      if (!hasDependencyClients(node)) {
        excuteSuperRun(node,parent);
      }
    }
  }
  boolean forceDelete=false;
  if (nodeWithDependsMap.size() > 0) {
    forceDelete=DeleteModelElementConfirmDialog.showDialog(nodeWithDependsMap,DefaultMessagesImpl.getString(""String_Node_Str""),true);
    if (forceDelete) {
      Iterator iter=nodeWithDependsMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<IRepositoryNode,List<ModelElement>> entry=(Map.Entry<IRepositoryNode,List<ModelElement>>)iter.next();
        IRepositoryNode node=entry.getKey();
        List<ModelElement> dependencies=entry.getValue();
        excuteSuperRun((RepositoryNode)node,node.getParent());
        physicalDeleteDependencies(dependencies);
      }
    }
  }
  nodeWithDependsMap.clear();
  if (folderNodeWhichChildHadDepend != null && folderNodeWhichChildHadDepend.size() > 0) {
    if (forceDelete) {
      for (      IRepositoryNode folder : folderNodeWhichChildHadDepend) {
        excuteSuperRun((RepositoryNode)folder,folder.getParent());
      }
    }
  }
  confirmFromDialog=false;
}","/** 
 * physical Delete all selected nodes, if the node has dependency, will popup a confirm dialog with lists of dependencies
 * @param deleteNodes
 * @param shownNodes
 * @param findAllRecycleBinNodes
 * @param isStateDeleted
 */
private void physicalDelete(List deleteNodes,List<IRepositoryNode> shownNodes,List<IRepositoryNode> findAllRecycleBinNodes){
  confirmForDQ=true;
  List<IRepositoryNode> folderNodeWhichChildHadDepend=null;
  for (int i=selectedNodes.size() - 1; i >= 0; i--) {
    if (selectedNodes.size() == 0) {
      break;
    }
    RepositoryNode node=selectedNodes.get(i);
    RepositoryNode parent=node.getParent();
    if (DQRepositoryNode.isOnFilterring()) {
      for (      IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
        if (node.equals(iRepositoryNode)) {
          node=(RepositoryNode)iRepositoryNode;
          shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
          break;
        }
      }
      if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
        break;
      }
    }
    if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
      List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
      boolean haveSubNode=false;
      for (      IRepositoryNode subNode : newLs) {
        if (!hasDependencyClients(subNode)) {
          excuteSuperRun((RepositoryNode)subNode,node);
        }
 else {
          haveSubNode=true;
          if (folderNodeWhichChildHadDepend == null) {
            folderNodeWhichChildHadDepend=new ArrayList<IRepositoryNode>();
          }
          folderNodeWhichChildHadDepend.add(node);
        }
      }
      if (!haveSubNode) {
        excuteSuperRun(node,parent);
      }
    }
 else {
      if (!hasDependencyClients(node)) {
        excuteSuperRun(node,parent);
      }
    }
  }
  boolean forceDelete=false;
  if (nodeWithDependsMap.size() > 0) {
    forceDelete=DeleteModelElementConfirmDialog.showDialog(nodeWithDependsMap,DefaultMessagesImpl.getString(""String_Node_Str""),true);
    if (forceDelete) {
      Iterator iter=nodeWithDependsMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<IRepositoryNode,List<ModelElement>> entry=(Map.Entry<IRepositoryNode,List<ModelElement>>)iter.next();
        IRepositoryNode node=entry.getKey();
        List<ModelElement> dependencies=entry.getValue();
        excuteSuperRun((RepositoryNode)node,node.getParent());
        physicalDeleteDependencies(dependencies);
      }
    }
  }
  nodeWithDependsMap.clear();
  if (folderNodeWhichChildHadDepend != null && folderNodeWhichChildHadDepend.size() > 0) {
    if (forceDelete) {
      for (      IRepositoryNode folder : folderNodeWhichChildHadDepend) {
        excuteSuperRun((RepositoryNode)folder,folder.getParent());
      }
    }
  }
  confirmForDQ=false;
}",0.9955280357757138
137518,"/** 
 * get full name as: db.catalog.table, if has catalog/schema
 * @param analyzedColumns
 * @param dbmsLanguage
 * @return
 */
public static String getTableName(ModelElement analyzedColumn,DbmsLanguage dbmsLanguage){
  ModelElement columnSetOwner=findColumnSetOwner(analyzedColumn);
  String tableName=columnSetOwner.getName();
  String schemaName=getQuotedSchemaName(columnSetOwner,dbmsLanguage);
  String catalogName=getQuotedCatalogName(columnSetOwner,dbmsLanguage);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  DatabaseConnection dbConn=ConnectionHelper.getTdDataProvider(SwitchHelpers.COLUMN_SWITCH.doSwitch(analyzedColumn));
  if (dbConn.isContextMode()) {
    return getTableNameFromContext(dbConn,catalogName,schemaName,tableName,dbmsLanguage);
  }
 else {
    return dbmsLanguage.toQualifiedName(catalogName,schemaName,tableName);
  }
}","/** 
 * get full name as: db.catalog.table, if has catalog/schema
 * @param analyzedColumns
 * @param dbmsLanguage
 * @return
 */
public static String getTableName(ModelElement analyzedColumn,DbmsLanguage dbmsLanguage){
  ModelElement columnSetOwner=findColumnSetOwner(analyzedColumn);
  String tableName=columnSetOwner.getName();
  String schemaName=getQuotedSchemaName(columnSetOwner,dbmsLanguage);
  String catalogName=getQuotedCatalogName(columnSetOwner,dbmsLanguage);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  DatabaseConnection dbConn=ConnectionHelper.getTdDataProvider(SwitchHelpers.COLUMN_SWITCH.doSwitch(analyzedColumn));
  if (dbConn != null && dbConn.isContextMode()) {
    return getTableNameFromContext(dbConn,catalogName,schemaName,tableName,dbmsLanguage);
  }
 else {
    return dbmsLanguage.toQualifiedName(catalogName,schemaName,tableName);
  }
}",0.992706645056726
137519,"/** 
 * DOC zshen Comment method ""deleteIndicatorItems"".
 * @param meIndicator
 * @param inidicatorUnit remove all the indicatorUnit which in the ModelElementIndicator.
 */
protected void deleteIndicatorItems(ModelElementIndicator meIndicator){
  for (  IndicatorUnit indiUnit : meIndicator.getIndicatorUnits()) {
    meIndicator.removeIndicatorUnit(indiUnit);
    addRemovedElements(absMasterPage.getAnalysis(),indiUnit);
  }
}","/** 
 * remove all the indicatorUnit which in the ModelElementIndicator.
 * @param meIndicator
 */
protected void deleteIndicatorItems(ModelElementIndicator meIndicator){
  for (  IndicatorUnit indiUnit : meIndicator.getIndicatorUnits()) {
    deleteIndicatorItems(meIndicator,indiUnit);
  }
}",0.5464632454923717
137520,"@Override public void mouseDown(MouseEvent e){
  DataManager dm=getAnalysis().getContext().getConnection();
  if (dm == null) {
    masterPage.doSave(null);
  }
  if (dm != null && dm instanceof Connection) {
    Connection dp=(Connection)dm;
    if (ConnectionUtils.isMdmConnection(dp)) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
  }
  IFolder udiProject=ResourceManager.getUDIFolder();
  CheckedTreeSelectionDialog dialog=UDIUtils.createUdiCheckedTreeSelectionDialog(udiProject,meIndicator);
  if (dialog.open() == Window.OK) {
    List<IFile> allSelectedFiles=new ArrayList<IFile>();
    Set<String> allSelectedIndNames=new HashSet<String>();
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof IFile) {
        allSelectedFiles.add((IFile)obj);
        IndicatorDefinition udid=IndicatorResourceFileHelper.getInstance().findIndDefinition((IFile)obj);
        if (udid != null) {
          allSelectedIndNames.add(udid.getName());
        }
      }
    }
    Set<String> oldSelectedIndNames=new HashSet<String>();
    for (    IndicatorUnit indicatorUnit : meIndicator.getIndicatorUnits()) {
      Indicator indicator=indicatorUnit.getIndicator();
      if (indicator instanceof UserDefIndicator) {
        if (allSelectedIndNames.contains(indicator.getName())) {
          oldSelectedIndNames.add(indicator.getName());
        }
 else {
          meIndicator.removeIndicatorUnit(indicatorUnit);
          if (!isDirty()) {
            setDirty(true);
          }
        }
      }
    }
    treeItem.removeAll();
    for (    IFile file : allSelectedFiles) {
      IndicatorDefinition udid=IndicatorResourceFileHelper.getInstance().findIndDefinition(file);
      if (udid != null && oldSelectedIndNames.contains(udid.getName())) {
        continue;
      }
      IndicatorUnit[] addIndicatorUnits=null;
      try {
        addIndicatorUnits=UDIUtils.createIndicatorUnit(file,meIndicator,getAnalysis());
      }
 catch (      Throwable e1) {
        log.warn(e1,e1);
      }
      if (addIndicatorUnits != null && addIndicatorUnits.length > 0) {
        for (        IndicatorUnit unit : addIndicatorUnits) {
          createOneUnit(treeItem,unit);
        }
        if (!isDirty()) {
          setDirty(true);
        }
      }
    }
    treeItem.setExpanded(true);
    masterPage.refreshTheTree(masterPage.getCurrentModelElementIndicators());
  }
}","@Override public void mouseDown(MouseEvent e){
  DataManager dm=getAnalysis().getContext().getConnection();
  if (dm == null) {
    masterPage.doSave(null);
  }
  if (dm != null && dm instanceof Connection) {
    Connection dp=(Connection)dm;
    if (ConnectionUtils.isMdmConnection(dp)) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
  }
  IFolder udiProject=ResourceManager.getUDIFolder();
  CheckedTreeSelectionDialog dialog=UDIUtils.createUdiCheckedTreeSelectionDialog(udiProject,meIndicator);
  if (dialog.open() == Window.OK) {
    List<IFile> allSelectedFiles=new ArrayList<IFile>();
    Set<String> allSelectedIndNames=new HashSet<String>();
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof IFile) {
        allSelectedFiles.add((IFile)obj);
        IndicatorDefinition udid=IndicatorResourceFileHelper.getInstance().findIndDefinition((IFile)obj);
        if (udid != null) {
          allSelectedIndNames.add(udid.getName());
        }
      }
    }
    Set<String> oldSelectedIndNames=new HashSet<String>();
    for (    IndicatorUnit indicatorUnit : meIndicator.getIndicatorUnits()) {
      Indicator indicator=indicatorUnit.getIndicator();
      if (indicator instanceof UserDefIndicator) {
        if (allSelectedIndNames.contains(indicator.getName())) {
          oldSelectedIndNames.add(indicator.getName());
        }
 else {
          deleteIndicatorItems(meIndicator,indicatorUnit);
          if (!isDirty()) {
            setDirty(true);
          }
        }
      }
    }
    treeItem.removeAll();
    for (    IFile file : allSelectedFiles) {
      IndicatorDefinition udid=IndicatorResourceFileHelper.getInstance().findIndDefinition(file);
      if (udid != null && oldSelectedIndNames.contains(udid.getName())) {
        continue;
      }
      IndicatorUnit[] addIndicatorUnits=null;
      try {
        addIndicatorUnits=UDIUtils.createIndicatorUnit(file,meIndicator,getAnalysis());
      }
 catch (      Throwable e1) {
        log.warn(e1,e1);
      }
      if (addIndicatorUnits != null && addIndicatorUnits.length > 0) {
        for (        IndicatorUnit unit : addIndicatorUnits) {
          createOneUnit(treeItem,unit);
        }
        if (!isDirty()) {
          setDirty(true);
        }
      }
    }
    treeItem.setExpanded(true);
    masterPage.refreshTheTree(masterPage.getCurrentModelElementIndicators());
  }
}",0.986639260020555
137521,"/** 
 * DOC xqliu Comment method ""addColumnUdi"". ADD xqliu 2010-02-23 feature 11617
 * @param treeItem
 * @param meIndicator
 * @param columnIndex
 * @return
 */
private TreeEditor addColumnUdi(final TreeItem treeItem,final ModelElementIndicator meIndicator,int columnIndex){
  TreeEditor addUdiEditor=new TreeEditor(tree);
  Label addUdiLabl=new Label(tree,SWT.NONE);
  addUdiLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  addUdiLabl.setImage(ImageLib.getImage(ImageLib.ADD_IND_DEFINITION));
  addUdiLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  addUdiLabl.pack();
  addUdiLabl.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      DataManager dm=getAnalysis().getContext().getConnection();
      if (dm == null) {
        masterPage.doSave(null);
      }
      if (dm != null && dm instanceof Connection) {
        Connection dp=(Connection)dm;
        if (ConnectionUtils.isMdmConnection(dp)) {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
          return;
        }
      }
      IFolder udiProject=ResourceManager.getUDIFolder();
      CheckedTreeSelectionDialog dialog=UDIUtils.createUdiCheckedTreeSelectionDialog(udiProject,meIndicator);
      if (dialog.open() == Window.OK) {
        List<IFile> allSelectedFiles=new ArrayList<IFile>();
        Set<String> allSelectedIndNames=new HashSet<String>();
        for (        Object obj : dialog.getResult()) {
          if (obj instanceof IFile) {
            allSelectedFiles.add((IFile)obj);
            IndicatorDefinition udid=IndicatorResourceFileHelper.getInstance().findIndDefinition((IFile)obj);
            if (udid != null) {
              allSelectedIndNames.add(udid.getName());
            }
          }
        }
        Set<String> oldSelectedIndNames=new HashSet<String>();
        for (        IndicatorUnit indicatorUnit : meIndicator.getIndicatorUnits()) {
          Indicator indicator=indicatorUnit.getIndicator();
          if (indicator instanceof UserDefIndicator) {
            if (allSelectedIndNames.contains(indicator.getName())) {
              oldSelectedIndNames.add(indicator.getName());
            }
 else {
              meIndicator.removeIndicatorUnit(indicatorUnit);
              if (!isDirty()) {
                setDirty(true);
              }
            }
          }
        }
        treeItem.removeAll();
        for (        IFile file : allSelectedFiles) {
          IndicatorDefinition udid=IndicatorResourceFileHelper.getInstance().findIndDefinition(file);
          if (udid != null && oldSelectedIndNames.contains(udid.getName())) {
            continue;
          }
          IndicatorUnit[] addIndicatorUnits=null;
          try {
            addIndicatorUnits=UDIUtils.createIndicatorUnit(file,meIndicator,getAnalysis());
          }
 catch (          Throwable e1) {
            log.warn(e1,e1);
          }
          if (addIndicatorUnits != null && addIndicatorUnits.length > 0) {
            for (            IndicatorUnit unit : addIndicatorUnits) {
              createOneUnit(treeItem,unit);
            }
            if (!isDirty()) {
              setDirty(true);
            }
          }
        }
        treeItem.setExpanded(true);
        masterPage.refreshTheTree(masterPage.getCurrentModelElementIndicators());
      }
    }
  }
);
  addUdiEditor.minimumWidth=addUdiLabl.getImage().getBounds().width;
  addUdiEditor.setEditor(addUdiLabl,treeItem,columnIndex);
  return addUdiEditor;
}","/** 
 * DOC xqliu Comment method ""addColumnUdi"". ADD xqliu 2010-02-23 feature 11617
 * @param treeItem
 * @param meIndicator
 * @param columnIndex
 * @return
 */
private TreeEditor addColumnUdi(final TreeItem treeItem,final ModelElementIndicator meIndicator,int columnIndex){
  TreeEditor addUdiEditor=new TreeEditor(tree);
  Label addUdiLabl=new Label(tree,SWT.NONE);
  addUdiLabl.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
  addUdiLabl.setImage(ImageLib.getImage(ImageLib.ADD_IND_DEFINITION));
  addUdiLabl.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  addUdiLabl.pack();
  addUdiLabl.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      DataManager dm=getAnalysis().getContext().getConnection();
      if (dm == null) {
        masterPage.doSave(null);
      }
      if (dm != null && dm instanceof Connection) {
        Connection dp=(Connection)dm;
        if (ConnectionUtils.isMdmConnection(dp)) {
          MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
          return;
        }
      }
      IFolder udiProject=ResourceManager.getUDIFolder();
      CheckedTreeSelectionDialog dialog=UDIUtils.createUdiCheckedTreeSelectionDialog(udiProject,meIndicator);
      if (dialog.open() == Window.OK) {
        List<IFile> allSelectedFiles=new ArrayList<IFile>();
        Set<String> allSelectedIndNames=new HashSet<String>();
        for (        Object obj : dialog.getResult()) {
          if (obj instanceof IFile) {
            allSelectedFiles.add((IFile)obj);
            IndicatorDefinition udid=IndicatorResourceFileHelper.getInstance().findIndDefinition((IFile)obj);
            if (udid != null) {
              allSelectedIndNames.add(udid.getName());
            }
          }
        }
        Set<String> oldSelectedIndNames=new HashSet<String>();
        for (        IndicatorUnit indicatorUnit : meIndicator.getIndicatorUnits()) {
          Indicator indicator=indicatorUnit.getIndicator();
          if (indicator instanceof UserDefIndicator) {
            if (allSelectedIndNames.contains(indicator.getName())) {
              oldSelectedIndNames.add(indicator.getName());
            }
 else {
              deleteIndicatorItems(meIndicator,indicatorUnit);
              if (!isDirty()) {
                setDirty(true);
              }
            }
          }
        }
        treeItem.removeAll();
        for (        IFile file : allSelectedFiles) {
          IndicatorDefinition udid=IndicatorResourceFileHelper.getInstance().findIndDefinition(file);
          if (udid != null && oldSelectedIndNames.contains(udid.getName())) {
            continue;
          }
          IndicatorUnit[] addIndicatorUnits=null;
          try {
            addIndicatorUnits=UDIUtils.createIndicatorUnit(file,meIndicator,getAnalysis());
          }
 catch (          Throwable e1) {
            log.warn(e1,e1);
          }
          if (addIndicatorUnits != null && addIndicatorUnits.length > 0) {
            for (            IndicatorUnit unit : addIndicatorUnits) {
              createOneUnit(treeItem,unit);
            }
            if (!isDirty()) {
              setDirty(true);
            }
          }
        }
        treeItem.setExpanded(true);
        masterPage.refreshTheTree(masterPage.getCurrentModelElementIndicators());
      }
    }
  }
);
  addUdiEditor.minimumWidth=addUdiLabl.getImage().getBounds().width;
  addUdiEditor.setEditor(addUdiLabl,treeItem,columnIndex);
  return addUdiEditor;
}",0.9908412005072564
137522,"/** 
 * DOC xqliu Comment method ""removeUncheckedWhereRuleIndicator"". ADD xqliu 2009-04-30 bug 6808
 * @param ownedWhereRuleFiles
 * @param results
 * @param tableIndicator
 * @param whereRuleFolder
 */
private void removeUncheckedWhereRuleIndicator(Object[] ownedWhereRuleFiles,Object[] results,TableIndicator tableIndicator,IFolder whereRuleFolder){
  ArrayList removeList=new ArrayList();
  for (  Object file : ownedWhereRuleFiles) {
    boolean remove=true;
    for (    Object result : results) {
      if (file.equals(result)) {
        remove=false;
        break;
      }
    }
    if (remove) {
      removeList.add(file);
    }
  }
  TableIndicatorUnit[] indicatorUnits=tableIndicator.getIndicatorUnits();
  for (  TableIndicatorUnit unit : indicatorUnits) {
    IndicatorDefinition indicatorDefinition=unit.getIndicator().getIndicatorDefinition();
    if (indicatorDefinition instanceof WhereRule) {
      WhereRule wr=(WhereRule)indicatorDefinition;
      IFile whereRuleFile=ResourceFileMap.findCorrespondingFile(wr);
      for (      Object obj : removeList) {
        IFile file=(IFile)obj;
        if (whereRuleFile.equals(file)) {
          tableIndicator.removeIndicatorUnit(unit);
          removeItemBranch(this.indicatorTreeItemMap.get(unit));
          this.indicatorTreeItemMap.remove(unit);
          break;
        }
      }
    }
  }
}","/** 
 * DOC xqliu Comment method ""removeUncheckedWhereRuleIndicator"". ADD xqliu 2009-04-30 bug 6808
 * @param ownedWhereRuleFiles
 * @param results
 * @param tableIndicator
 * @param whereRuleFolder
 */
private void removeUncheckedWhereRuleIndicator(Object[] ownedWhereRuleFiles,Object[] results,TableIndicator tableIndicator,IFolder whereRuleFolder){
  ArrayList removeList=new ArrayList();
  for (  Object file : ownedWhereRuleFiles) {
    boolean remove=true;
    for (    Object result : results) {
      if (file.equals(result)) {
        remove=false;
        break;
      }
    }
    if (remove) {
      removeList.add(file);
    }
  }
  TableIndicatorUnit[] indicatorUnits=tableIndicator.getIndicatorUnits();
  for (  TableIndicatorUnit unit : indicatorUnits) {
    IndicatorDefinition indicatorDefinition=unit.getIndicator().getIndicatorDefinition();
    if (indicatorDefinition instanceof WhereRule) {
      WhereRule wr=(WhereRule)indicatorDefinition;
      IFile whereRuleFile=ResourceFileMap.findCorrespondingFile(wr);
      for (      Object obj : removeList) {
        IFile file=(IFile)obj;
        if (whereRuleFile.equals(file)) {
          removeItemBranch(this.indicatorTreeItemMap.get(unit));
          deleteIndicatorItems(tableIndicator,unit);
          break;
        }
      }
    }
  }
}",0.9547663551401868
137523,"/** 
 * delete all TableIndicatorUnit which contain in the tableIndicator.
 */
private void deleteIndicatorItems(TableIndicator tableIndicator){
  for (  TableIndicatorUnit indiUnit : tableIndicator.getIndicatorUnits()) {
    deleteIndicatorAideItems(tableIndicator,indiUnit);
    tableIndicator.removeIndicatorUnit(indiUnit);
    this.indicatorTreeItemMap.remove(indiUnit);
    addRemovedElements(masterPage.getAnalysis(),indiUnit);
  }
}","/** 
 * delete all TableIndicatorUnit which contain in the tableIndicator.
 */
private void deleteIndicatorItems(TableIndicator tableIndicator){
  for (  TableIndicatorUnit indiUnit : tableIndicator.getIndicatorUnits()) {
    deleteIndicatorAideItems(tableIndicator,indiUnit);
    tableIndicator.removeIndicatorUnit(indiUnit);
    this.indicatorTreeItemMap.remove(indiUnit);
    removedElements(masterPage.getAnalysis(),indiUnit);
  }
}",0.9942857142857144
137524,"/** 
 * get full name as: db.catalog.table, if has catalog/schema
 * @param analyzedColumns
 * @param dbmsLanguage
 * @return
 */
public static String getTableName(ModelElement analyzedColumn,DbmsLanguage dbmsLanguage){
  ModelElement columnSetOwner=findColumnSetOwner(analyzedColumn);
  String tableName=columnSetOwner.getName();
  String schemaName=getQuotedSchemaName(columnSetOwner,dbmsLanguage);
  String catalogName=getQuotedCatalogName(columnSetOwner,dbmsLanguage);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  DatabaseConnection dbConn=ConnectionHelper.getTdDataProvider(SwitchHelpers.COLUMN_SWITCH.doSwitch(analyzedColumn));
  if (dbConn.isContextMode()) {
    return getTableNameFromContext(dbConn,catalogName,schemaName,tableName,dbmsLanguage);
  }
 else {
    return dbmsLanguage.toQualifiedName(catalogName,schemaName,tableName);
  }
}","/** 
 * get full name as: db.catalog.table, if has catalog/schema
 * @param analyzedColumns
 * @param dbmsLanguage
 * @return
 */
public static String getTableName(ModelElement analyzedColumn,DbmsLanguage dbmsLanguage){
  ModelElement columnSetOwner=findColumnSetOwner(analyzedColumn);
  String tableName=columnSetOwner.getName();
  String schemaName=getQuotedSchemaName(columnSetOwner,dbmsLanguage);
  String catalogName=getQuotedCatalogName(columnSetOwner,dbmsLanguage);
  if (catalogName == null && schemaName != null) {
    final Schema parentSchema=SchemaHelper.getParentSchema(columnSetOwner);
    final Catalog parentCatalog=CatalogHelper.getParentCatalog(parentSchema);
    catalogName=parentCatalog != null ? parentCatalog.getName() : null;
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnSetOwner);
  }
  DatabaseConnection dbConn=ConnectionHelper.getTdDataProvider(SwitchHelpers.COLUMN_SWITCH.doSwitch(analyzedColumn));
  if (dbConn != null && dbConn.isContextMode()) {
    return getTableNameFromContext(dbConn,catalogName,schemaName,tableName,dbmsLanguage);
  }
 else {
    return dbmsLanguage.toQualifiedName(catalogName,schemaName,tableName);
  }
}",0.992706645056726
137525,"private EmfFileResourceUtil(){
  EMFUtil util=new EMFUtil();
  resourceSet=util.getResourceSet();
  Resource.Factory.Registry reg=Resource.Factory.Registry.INSTANCE;
  reg.getExtensionToFactoryMap().put(""String_Node_Str"",new CwmResourceFactory());
}","private EmfFileResourceUtil(){
  EMFUtil util=new EMFUtil();
  resourceSet=util.getResourceSet();
  Resource.Factory.Registry reg=Resource.Factory.Registry.INSTANCE;
  CwmResourceFactory cwmFactory=new CwmResourceFactory();
  reg.getExtensionToFactoryMap().put(""String_Node_Str"",cwmFactory);
  reg.getExtensionToFactoryMap().put(""String_Node_Str"",cwmFactory);
}",0.7377049180327869
137526,"/** 
 * Updata DB_PRODUCT tagged values for connection item in case they are not present in current file.
 * @throws SQLException
 */
public static synchronized void updataTaggedValueForConnectionItem(Connection dataProvider){
  if (dataProvider instanceof DatabaseConnection && StringUtils.isBlank(TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_NAME,dataProvider))) {
    Property property=PropertyHelper.getProperty(dataProvider);
    if (property != null) {
      Item item=property.getItem();
      if (item != null) {
        DatabaseConnection dbConn=(DatabaseConnection)dataProvider;
        IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
        dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
        if (dbConn != null) {
          try {
            ProxyRepositoryFactory.getInstance().save(item);
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
}","/** 
 * Updata DB_PRODUCT tagged values for connection item in case they are not present in current file.
 * @throws SQLException
 */
public static synchronized void updataTaggedValueForConnectionItem(Connection dataProvider){
  if (dataProvider instanceof DatabaseConnection && StringUtils.isBlank(TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_NAME,dataProvider))) {
    Property property=PropertyHelper.getProperty(dataProvider);
    if (property != null) {
      Item item=property.getItem();
      if (item != null) {
        DatabaseConnection dbConn=(DatabaseConnection)dataProvider;
        IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
        dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
        if (dbConn != null && Platform.isRunning()) {
          try {
            ProxyRepositoryFactory.getInstance().save(item);
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
}",0.988593155893536
137527,"@Override public void mouseDown(MouseEvent e){
  DataManager dm=analysis.getContext().getConnection();
  if (dm == null) {
    masterPage.doSave(null);
  }
  IRepositoryNode patternFolderNode=null;
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  if (AnalysisType.COLUMN_SET.equals(analysisType)) {
    if (ExecutionLanguage.SQL.equals(executionLanguage)) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
 else     if (ExecutionLanguage.JAVA.equals(executionLanguage)) {
      patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERN_REGEX);
    }
  }
 else   if (AnalysisType.MULTIPLE_COLUMN.equals(analysisType)) {
    if (ExecutionLanguage.JAVA.equals(executionLanguage)) {
      patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERN_REGEX);
    }
  }
  if (null == patternFolderNode) {
    patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERNS);
  }
  CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(patternFolderNode);
  if (null != filters) {
    for (    ViewerFilter filter : filters) {
      dialog.addFilter(filter);
    }
  }
  Object[] selectedRepNodes=PatternUtilities.getPatternRepNodesByIndicator(meIndicator);
  dialog.setInitialSelections(selectedRepNodes);
  dialog.create();
  if (dialog.open() == Window.OK) {
    List<PatternRepNode> allSelectedPatternNodes=new ArrayList<PatternRepNode>();
    Set<String> allSelectedNodeNames=new HashSet<String>();
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof PatternRepNode) {
        PatternRepNode patternNode=(PatternRepNode)obj;
        allSelectedPatternNodes.add(patternNode);
        allSelectedNodeNames.add(patternNode.getLabel());
      }
    }
    Set<String> oldSelectedNodeNames=new HashSet<String>();
    Map<String,IndicatorUnit> oldSelectedUnits=new HashMap<String,IndicatorUnit>();
    for (    IndicatorUnit indicatorUnit : meIndicator.getIndicatorUnits()) {
      Indicator indicator=indicatorUnit.getIndicator();
      if (indicator instanceof PatternMatchingIndicator) {
        if (!allSelectedNodeNames.contains(indicator.getName())) {
          meIndicator.removeIndicatorUnit(indicatorUnit);
          if (!columnDropTree.isDirty()) {
            columnDropTree.setDirty(true);
          }
        }
 else {
          oldSelectedNodeNames.add(indicator.getName());
          oldSelectedUnits.put(indicator.getName(),indicatorUnit);
        }
      }
    }
    boolean addOldSelected=false;
    if (masterPage instanceof ColumnSetMasterPage) {
      addOldSelected=true;
    }
    if (addOldSelected) {
      for (      TreeItem child : treeItem.getItems()) {
        masterPage.getTreeViewer().removeItemBranch(child);
      }
    }
    treeItem.removeAll();
    for (    PatternRepNode patternNode : allSelectedPatternNodes) {
      if (oldSelectedNodeNames.contains(patternNode.getLabel()) && !addOldSelected) {
        continue;
      }
      TypedReturnCode<IndicatorUnit> trc=PatternUtilities.createIndicatorUnit(patternNode.getPattern(),meIndicator,analysis);
      if (trc.isOk()) {
        createOneUnit(trc.getObject());
      }
    }
    treeItem.setExpanded(true);
    if (masterPage instanceof ColumnMasterDetailsPage) {
      ColumnMasterDetailsPage page=(ColumnMasterDetailsPage)masterPage;
      page.refreshTheTree(page.getCurrentModelElementIndicators());
    }
  }
}","@Override public void mouseDown(MouseEvent e){
  DataManager dm=analysis.getContext().getConnection();
  if (dm == null) {
    masterPage.doSave(null);
  }
  IRepositoryNode patternFolderNode=null;
  AnalysisType analysisType=analysis.getParameters().getAnalysisType();
  ExecutionLanguage executionLanguage=analysis.getParameters().getExecutionLanguage();
  if (AnalysisType.COLUMN_SET.equals(analysisType)) {
    if (ExecutionLanguage.SQL.equals(executionLanguage)) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
 else     if (ExecutionLanguage.JAVA.equals(executionLanguage)) {
      patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERN_REGEX);
    }
  }
 else   if (AnalysisType.MULTIPLE_COLUMN.equals(analysisType)) {
    if (ExecutionLanguage.JAVA.equals(executionLanguage)) {
      patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERN_REGEX);
    }
  }
  if (null == patternFolderNode) {
    patternFolderNode=RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERNS);
  }
  CheckedTreeSelectionDialog dialog=PatternUtilities.createPatternCheckedTreeSelectionDialog(patternFolderNode);
  if (null != filters) {
    for (    ViewerFilter filter : filters) {
      dialog.addFilter(filter);
    }
  }
  Object[] selectedRepNodes=PatternUtilities.getPatternRepNodesByIndicator(meIndicator);
  dialog.setInitialSelections(selectedRepNodes);
  dialog.create();
  if (dialog.open() == Window.OK) {
    List<PatternRepNode> allSelectedPatternNodes=new ArrayList<PatternRepNode>();
    Set<String> allSelectedNodeNames=new HashSet<String>();
    for (    Object obj : dialog.getResult()) {
      if (obj instanceof PatternRepNode) {
        PatternRepNode patternNode=(PatternRepNode)obj;
        allSelectedPatternNodes.add(patternNode);
        allSelectedNodeNames.add(patternNode.getLabel());
      }
    }
    Set<String> oldSelectedNodeNames=new HashSet<String>();
    Map<String,IndicatorUnit> oldSelectedUnits=new HashMap<String,IndicatorUnit>();
    for (    IndicatorUnit indicatorUnit : meIndicator.getIndicatorUnits()) {
      Indicator indicator=indicatorUnit.getIndicator();
      if (indicator instanceof PatternMatchingIndicator) {
        if (!allSelectedNodeNames.contains(indicator.getName())) {
          columnDropTree.deleteIndicatorItems(meIndicator,indicatorUnit);
          if (!columnDropTree.isDirty()) {
            columnDropTree.setDirty(true);
          }
        }
 else {
          oldSelectedNodeNames.add(indicator.getName());
          oldSelectedUnits.put(indicator.getName(),indicatorUnit);
        }
      }
    }
    boolean addOldSelected=false;
    if (masterPage instanceof ColumnSetMasterPage) {
      addOldSelected=true;
    }
    if (addOldSelected) {
      for (      TreeItem child : treeItem.getItems()) {
        masterPage.getTreeViewer().removeItemBranch(child);
      }
    }
    treeItem.removeAll();
    for (    PatternRepNode patternNode : allSelectedPatternNodes) {
      if (oldSelectedNodeNames.contains(patternNode.getLabel()) && !addOldSelected) {
        continue;
      }
      TypedReturnCode<IndicatorUnit> trc=PatternUtilities.createIndicatorUnit(patternNode.getPattern(),meIndicator,analysis);
      if (trc.isOk()) {
        createOneUnit(trc.getObject());
      }
    }
    treeItem.setExpanded(true);
    if (masterPage instanceof ColumnMasterDetailsPage) {
      ColumnMasterDetailsPage page=(ColumnMasterDetailsPage)masterPage;
      page.refreshTheTree(page.getCurrentModelElementIndicators());
    }
  }
}",0.99196675900277
137528,"/** 
 * DOC mzhao feature 11128, If the execute engine and by the same time Java User Defined Indicator is also defined, then compute via Java UDI, here convert common udi to a Java UDI.
 * @param udi
 * @return
 * @throws Exception
 */
public static Indicator adaptToJavaUDI(Indicator indicator) throws Throwable {
  Indicator returnIndicator=getUDIFromMap(indicator);
  if (returnIndicator != null) {
    return returnIndicator;
  }
  UserDefIndicator adaptedUDI=null;
  if (userDefIndSwitch.doSwitch(indicator) != null) {
    EList<TaggedValue> taggedValues=indicator.getIndicatorDefinition().getTaggedValue();
    String userJavaClassName=null;
    String jarPath=null;
    for (    TaggedValue tv : taggedValues) {
      if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
        userJavaClassName=tv.getValue();
        continue;
      }
      if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
        jarPath=tv.getValue();
      }
    }
    if (validateJavaUDI(userJavaClassName,jarPath)) {
      List<URL> jarUrls=new ArrayList<URL>();
      for (      File file : getContainJarFile(jarPath)) {
        jarUrls.add(file.toURI().toURL());
      }
      TalendURLClassLoader cl;
      cl=new TalendURLClassLoader(jarUrls.toArray(new URL[jarUrls.size()]));
      Class<?> clazz=null;
      clazz=cl.findClass(userJavaClassName);
      if (clazz != null) {
        UserDefIndicator judi=(UserDefIndicator)clazz.newInstance();
        PropertyUtils.copyProperties(judi,indicator);
        adaptedUDI=judi;
        JAVAUDIMAP.put(indicator,adaptedUDI);
      }
    }
  }
  return adaptedUDI;
}","/** 
 * DOC mzhao feature 11128, If the execute engine and by the same time Java User Defined Indicator is also defined, then compute via Java UDI, here convert common udi to a Java UDI.
 * @param udi
 * @return
 * @throws Exception
 */
public static Indicator adaptToJavaUDI(Indicator indicator) throws Throwable {
  Indicator returnIndicator=getUDIFromMap(indicator);
  if (returnIndicator != null) {
    return returnIndicator;
  }
  UserDefIndicator adaptedUDI=null;
  if (userDefIndSwitch.doSwitch(indicator) != null) {
    EList<TaggedValue> taggedValues=indicator.getIndicatorDefinition().getTaggedValue();
    String userJavaClassName=null;
    String jarPath=null;
    for (    TaggedValue tv : taggedValues) {
      if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
        userJavaClassName=tv.getValue();
        continue;
      }
      if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
        jarPath=tv.getValue();
      }
    }
    if (validateJavaUDI(userJavaClassName,jarPath)) {
      List<URL> jarUrls=new ArrayList<URL>();
      for (      File file : getContainJarFile(jarPath)) {
        jarUrls.add(file.toURI().toURL());
      }
      TalendURLClassLoader cl;
      cl=new TalendURLClassLoader(jarUrls.toArray(new URL[jarUrls.size()]),UDIHelper.class.getClassLoader());
      Class<?> clazz=null;
      clazz=cl.findClass(userJavaClassName);
      if (clazz != null) {
        UserDefIndicator judi=(UserDefIndicator)clazz.newInstance();
        PropertyUtils.copyProperties(judi,indicator);
        adaptedUDI=judi;
        JAVAUDIMAP.put(indicator,adaptedUDI);
      }
    }
  }
  return adaptedUDI;
}",0.989886607416488
137529,"/** 
 * DOC klliu Comment method ""checkJavaIndicatorIsEixt"".
 * @return
 */
private boolean checkJavaIndicatorIsEixt(){
  String className=this.getClassNameForSave();
  String jarPath=this.getJarPathForSave();
  if (className != null && jarPath != null && !className.trim().equals(PluginConstant.EMPTY_STRING) && !jarPath.trim().equals(PluginConstant.EMPTY_STRING)) {
    for (    IFile file : UDIUtils.getContainJarFile(jarPath)) {
      TalendURLClassLoader cl;
      try {
        cl=new TalendURLClassLoader(new URL[]{file.getLocation().toFile().toURI().toURL()});
        Class<?> theClass=cl.findClass(className);
        if (theClass != null) {
          return true;
        }
      }
 catch (      MalformedURLException e1) {
        Log.error(e1.getStackTrace());
      }
catch (      ClassNotFoundException e1) {
        Log.error(e1.getStackTrace());
      }
    }
    return false;
  }
 else {
    return false;
  }
}","/** 
 * DOC klliu Comment method ""checkJavaIndicatorIsEixt"".
 * @return
 */
private boolean checkJavaIndicatorIsEixt(){
  String className=this.getClassNameForSave();
  String jarPath=this.getJarPathForSave();
  if (className != null && jarPath != null && !className.trim().equals(PluginConstant.EMPTY_STRING) && !jarPath.trim().equals(PluginConstant.EMPTY_STRING)) {
    for (    IFile file : UDIUtils.getContainJarFile(jarPath)) {
      TalendURLClassLoader cl;
      try {
        cl=new TalendURLClassLoader(new URL[]{file.getLocation().toFile().toURI().toURL()},IndicatorDefinitionMaterPage.class.getClassLoader());
        Class<?> theClass=cl.findClass(className);
        if (theClass != null) {
          return true;
        }
      }
 catch (      MalformedURLException e1) {
        Log.error(e1.getStackTrace());
      }
catch (      ClassNotFoundException e1) {
        Log.error(e1.getStackTrace());
      }
    }
    return false;
  }
 else {
    return false;
  }
}",0.9728033472803348
137530,"/** 
 * ADD mzhao 11128, try to load by current thread loader.
 */
@Override public Class<?> findClass(String className) throws ClassNotFoundException {
  Class<?> cls=(Class<?>)classesMap.get(className);
  if (cls == null) {
    try {
      cls=super.findClass(className);
    }
 catch (    ClassNotFoundException cne) {
      cls=getClass().getClassLoader().loadClass(className);
    }
    classesMap.put(className,cls);
  }
  return cls;
}","/** 
 * ADD mzhao 11128, try to load by current thread loader.
 */
@Override public Class<?> findClass(String className) throws ClassNotFoundException {
  Class<?> cls=classesMap.get(className);
  if (cls == null) {
    try {
      cls=super.findClass(className);
    }
 catch (    ClassNotFoundException cne) {
      cls=getClass().getClassLoader().loadClass(className);
    }
    classesMap.put(className,cls);
  }
  return cls;
}",0.988558352402746
137531,"/** 
 * DOC zhao mzhao 11128, try to load by current thread loader.
 * @param urls
 */
public TalendURLClassLoader(URL[] urls){
  super(urls,TalendURLClassLoader.class.getClassLoader());
}","/** 
 * The classloader initiated by this contractor will load the class from urls class path , if not find it will use the given classloader to load it.
 * @param urls The url array used to load class.
 * @param classLoader when the class is not found from class path of urls, this classloader will be employeed to load it again.
 */
public TalendURLClassLoader(URL[] urls,ClassLoader classLoader){
  super(urls,classLoader);
}",0.2987012987012987
137532,"protected void evalSchemaIndicLow(final CatalogIndicator catalogIndic,final SchemaIndicator schemaIndic,final Catalog tdCatalog,final Schema tdSchema,ReturnCode ok) throws SQLException {
  boolean hasSchema=tdSchema != null;
  boolean hasCatalog=false;
  String schemaName=hasSchema ? tdSchema.getName() : null;
  String catName=null;
  if (tdCatalog == null) {
    if (tdSchema.eContainer() instanceof Catalog) {
      hasCatalog=true;
      catName=((Catalog)tdSchema.eContainer()).getName();
    }
  }
 else {
    hasCatalog=true;
    catName=hasCatalog ? tdCatalog.getName() : null;
  }
  schemaIndic.setAnalyzedElement(hasSchema ? tdSchema : tdCatalog);
  int tableCount=0;
  final String[] tablePatterns=tablePattern != null && tablePattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.tablePattern,FILTER_SEP) : new String[]{this.tablePattern};
  for (  String pat : tablePatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      List<? extends NamedColumnSet> tables=DqRepositoryViewService.getTables(getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : tables) {
        if (this.getMonitor() != null) {
          StringBuilder taskName=new StringBuilder();
          if (catName != null) {
            taskName.append(Messages.getString(""String_Node_Str"",catName)).append(""String_Node_Str"");
          }
          if (schemaName != null) {
            taskName.append(Messages.getString(""String_Node_Str"",schemaName)).append(""String_Node_Str"");
          }
          taskName.append(Messages.getString(""String_Node_Str"",t.getName()));
          this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"",taskName.toString()));
        }
        tableCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,true,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setTableCount(tableCount);
  int viewCount=0;
  final String[] viewPatterns=viewPattern != null && viewPattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.viewPattern,FILTER_SEP) : new String[]{this.viewPattern};
  for (  String pat : viewPatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      List<? extends NamedColumnSet> views=DqRepositoryViewService.getViews(getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : views) {
        viewCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,false,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setViewCount(viewCount);
  if (hasCatalog && hasSchema && catalogIndic != null) {
    this.addToConnectionIndicator(catalogIndic);
    catalogIndic.addSchemaIndicator(schemaIndic);
    catalogIndic.setTableCount(catalogIndic.getTableCount() + tableCount);
    catalogIndic.setTableRowCount(catalogIndic.getTableRowCount() + schemaIndic.getTableRowCount());
    catalogIndic.setViewRowCount(catalogIndic.getViewRowCount() + schemaIndic.getViewRowCount());
    catalogIndic.setViewCount(catalogIndic.getViewCount() + schemaIndic.getViewCount());
    catalogIndic.setKeyCount(catalogIndic.getKeyCount() + schemaIndic.getKeyCount());
    catalogIndic.setIndexCount(catalogIndic.getIndexCount() + schemaIndic.getIndexCount());
  }
 else   if (!hasCatalog) {
    this.addToConnectionIndicator(schemaIndic);
  }
 else   if (!hasSchema) {
    if (SchemaPackage.eINSTANCE.getCatalogIndicator().equals(schemaIndic.eClass())) {
      this.addToConnectionIndicator(schemaIndic);
    }
 else {
      log.error(Messages.getString(""String_Node_Str""));
    }
  }
}","protected void evalSchemaIndicLow(final CatalogIndicator catalogIndic,final SchemaIndicator schemaIndic,final Catalog tdCatalog,final Schema tdSchema,ReturnCode ok) throws SQLException {
  boolean hasSchema=tdSchema != null;
  boolean hasCatalog=false;
  String schemaName=hasSchema ? tdSchema.getName() : null;
  String catName=null;
  if (tdCatalog == null) {
    if (tdSchema.eContainer() instanceof Catalog) {
      hasCatalog=true;
      catName=((Catalog)tdSchema.eContainer()).getName();
    }
  }
 else {
    hasCatalog=true;
    catName=hasCatalog ? tdCatalog.getName() : null;
  }
  schemaIndic.setAnalyzedElement(hasSchema ? tdSchema : tdCatalog);
  int tableCount=0;
  final String[] tablePatterns=tablePattern != null && tablePattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.tablePattern,FILTER_SEP) : new String[]{this.tablePattern};
  for (  String pat : tablePatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      checkConnectionBeforeGetTableView();
      List<? extends NamedColumnSet> tables=DqRepositoryViewService.getTables(getConnection(),getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : tables) {
        if (this.getMonitor() != null) {
          StringBuilder taskName=new StringBuilder();
          if (catName != null) {
            taskName.append(Messages.getString(""String_Node_Str"",catName)).append(""String_Node_Str"");
          }
          if (schemaName != null) {
            taskName.append(Messages.getString(""String_Node_Str"",schemaName)).append(""String_Node_Str"");
          }
          taskName.append(Messages.getString(""String_Node_Str"",t.getName()));
          this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"",taskName.toString()));
        }
        tableCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,true,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setTableCount(tableCount);
  int viewCount=0;
  final String[] viewPatterns=viewPattern != null && viewPattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.viewPattern,FILTER_SEP) : new String[]{this.viewPattern};
  for (  String pat : viewPatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      checkConnectionBeforeGetTableView();
      List<? extends NamedColumnSet> views=DqRepositoryViewService.getViews(getConnection(),getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : views) {
        viewCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,false,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setViewCount(viewCount);
  if (hasCatalog && hasSchema && catalogIndic != null) {
    this.addToConnectionIndicator(catalogIndic);
    catalogIndic.addSchemaIndicator(schemaIndic);
    catalogIndic.setTableCount(catalogIndic.getTableCount() + tableCount);
    catalogIndic.setTableRowCount(catalogIndic.getTableRowCount() + schemaIndic.getTableRowCount());
    catalogIndic.setViewRowCount(catalogIndic.getViewRowCount() + schemaIndic.getViewRowCount());
    catalogIndic.setViewCount(catalogIndic.getViewCount() + schemaIndic.getViewCount());
    catalogIndic.setKeyCount(catalogIndic.getKeyCount() + schemaIndic.getKeyCount());
    catalogIndic.setIndexCount(catalogIndic.getIndexCount() + schemaIndic.getIndexCount());
  }
 else   if (!hasCatalog) {
    this.addToConnectionIndicator(schemaIndic);
  }
 else   if (!hasSchema) {
    if (SchemaPackage.eINSTANCE.getCatalogIndicator().equals(schemaIndic.eClass())) {
      this.addToConnectionIndicator(schemaIndic);
    }
 else {
      log.error(Messages.getString(""String_Node_Str""));
    }
  }
}",0.9847702632937532
137533,"/** 
 * physical Delete all selected nodes, if the node has dependency, will popup a confirm dialog with lists of dependencies
 * @param deleteNodes
 * @param shownNodes
 * @param findAllRecycleBinNodes
 * @param isStateDeleted
 */
private void physicalDelete(List deleteNodes,List<IRepositoryNode> shownNodes,List<IRepositoryNode> findAllRecycleBinNodes){
  confirmFromDialog=true;
  List<IRepositoryNode> folderNodeWhichChildHadDepend=null;
  for (int i=selectedNodes.size() - 1; i >= 0; i--) {
    if (selectedNodes.size() == 0) {
      break;
    }
    RepositoryNode node=selectedNodes.get(i);
    RepositoryNode parent=node.getParent();
    if (DQRepositoryNode.isOnFilterring()) {
      for (      IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
        if (node.equals(iRepositoryNode)) {
          node=(RepositoryNode)iRepositoryNode;
          shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
          break;
        }
      }
      if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
        break;
      }
    }
    if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
      List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
      boolean haveSubNode=false;
      for (      IRepositoryNode subNode : newLs) {
        if (!hasDependencyClients(subNode)) {
          excuteSuperRun((RepositoryNode)subNode,node);
        }
 else {
          haveSubNode=true;
          if (folderNodeWhichChildHadDepend == null) {
            folderNodeWhichChildHadDepend=new ArrayList<IRepositoryNode>();
          }
          folderNodeWhichChildHadDepend.add(node);
        }
      }
      if (!haveSubNode) {
        excuteSuperRun(node,parent);
      }
    }
 else {
      if (!hasDependencyClients(node)) {
        excuteSuperRun(node,parent);
      }
    }
  }
  boolean forceDelete=false;
  if (nodeWithDependsMap.size() > 0) {
    forceDelete=DeleteModelElementConfirmDialog.showDialog(nodeWithDependsMap,DefaultMessagesImpl.getString(""String_Node_Str""),true);
    if (forceDelete) {
      Iterator iter=nodeWithDependsMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<IRepositoryNode,List<ModelElement>> entry=(Map.Entry<IRepositoryNode,List<ModelElement>>)iter.next();
        IRepositoryNode node=entry.getKey();
        List<ModelElement> dependencies=entry.getValue();
        excuteSuperRun((RepositoryNode)node,node.getParent());
        physicalDeleteDependencies(dependencies);
      }
    }
  }
  nodeWithDependsMap.clear();
  if (folderNodeWhichChildHadDepend != null && folderNodeWhichChildHadDepend.size() > 0) {
    if (forceDelete) {
      for (      IRepositoryNode folder : folderNodeWhichChildHadDepend) {
        excuteSuperRun((RepositoryNode)folder,folder.getParent());
      }
    }
  }
  confirmFromDialog=false;
}","/** 
 * physical Delete all selected nodes, if the node has dependency, will popup a confirm dialog with lists of dependencies
 * @param deleteNodes
 * @param shownNodes
 * @param findAllRecycleBinNodes
 * @param isStateDeleted
 */
private void physicalDelete(List deleteNodes,List<IRepositoryNode> shownNodes,List<IRepositoryNode> findAllRecycleBinNodes){
  confirmForDQ=true;
  List<IRepositoryNode> folderNodeWhichChildHadDepend=null;
  for (int i=selectedNodes.size() - 1; i >= 0; i--) {
    if (selectedNodes.size() == 0) {
      break;
    }
    RepositoryNode node=selectedNodes.get(i);
    RepositoryNode parent=node.getParent();
    if (DQRepositoryNode.isOnFilterring()) {
      for (      IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
        if (node.equals(iRepositoryNode)) {
          node=(RepositoryNode)iRepositoryNode;
          shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
          break;
        }
      }
      if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
        break;
      }
    }
    if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
      List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
      boolean haveSubNode=false;
      for (      IRepositoryNode subNode : newLs) {
        if (!hasDependencyClients(subNode)) {
          excuteSuperRun((RepositoryNode)subNode,node);
        }
 else {
          haveSubNode=true;
          if (folderNodeWhichChildHadDepend == null) {
            folderNodeWhichChildHadDepend=new ArrayList<IRepositoryNode>();
          }
          folderNodeWhichChildHadDepend.add(node);
        }
      }
      if (!haveSubNode) {
        excuteSuperRun(node,parent);
      }
    }
 else {
      if (!hasDependencyClients(node)) {
        excuteSuperRun(node,parent);
      }
    }
  }
  boolean forceDelete=false;
  if (nodeWithDependsMap.size() > 0) {
    forceDelete=DeleteModelElementConfirmDialog.showDialog(nodeWithDependsMap,DefaultMessagesImpl.getString(""String_Node_Str""),true);
    if (forceDelete) {
      Iterator iter=nodeWithDependsMap.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<IRepositoryNode,List<ModelElement>> entry=(Map.Entry<IRepositoryNode,List<ModelElement>>)iter.next();
        IRepositoryNode node=entry.getKey();
        List<ModelElement> dependencies=entry.getValue();
        excuteSuperRun((RepositoryNode)node,node.getParent());
        physicalDeleteDependencies(dependencies);
      }
    }
  }
  nodeWithDependsMap.clear();
  if (folderNodeWhichChildHadDepend != null && folderNodeWhichChildHadDepend.size() > 0) {
    if (forceDelete) {
      for (      IRepositoryNode folder : folderNodeWhichChildHadDepend) {
        excuteSuperRun((RepositoryNode)folder,folder.getParent());
      }
    }
  }
  confirmForDQ=false;
}",0.9955280357757138
137534,"private void createSimpleRecordMatcher(List<Map<String,String>> matchRule) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  final int recordSize=matchRule.size();
  double[] arrAttrWeights=new double[recordSize];
  String[] attributeNames=new String[recordSize];
  String[][] algorithmName=new String[recordSize][2];
  String[] arrMatchHandleNull=new String[recordSize];
  double recordMatchThreshold=acceptableThreshold;
  int recordIdx=0;
  for (  Map<String,String> recordMap : matchRule) {
    arrAttrWeights[recordIdx]=Double.parseDouble(recordMap.get(IRecordGrouping.CONFIDENCE_WEIGHT));
    attributeNames[recordIdx]=recordMap.get(IRecordGrouping.ATTRIBUTE_NAME);
    algorithmName[recordIdx][0]=recordMap.get(IRecordGrouping.MATCHING_TYPE);
    algorithmName[recordIdx][1]=recordMap.get(IRecordGrouping.CUSTOMER_MATCH_CLASS);
    arrMatchHandleNull[recordIdx]=recordMap.get(IRecordGrouping.HANDLE_NULL);
    String rcdMathThresholdEach=recordMap.get(IRecordGrouping.RECORD_MATCH_THRESHOLD);
    if (!StringUtils.isEmpty(rcdMathThresholdEach)) {
      recordMatchThreshold=Double.valueOf(rcdMathThresholdEach);
    }
    recordIdx++;
  }
  IAttributeMatcher[] attributeMatcher=new IAttributeMatcher[recordSize];
  for (int indx=0; indx < recordSize; indx++) {
    AttributeMatcherType attrMatcherType=AttributeMatcherType.valueOf(algorithmName[indx][0]);
    attributeMatcher[indx]=org.talend.dataquality.record.linkage.attribute.AttributeMatcherFactory.createMatcher(attrMatcherType,algorithmName[indx][1]);
    attributeMatcher[indx].setNullOption(arrMatchHandleNull[indx]);
    attributeMatcher[indx].setAttributeName(attributeNames[indx]);
  }
  IRecordMatcher simpleRecordMatcher=RecordMatcherFactory.createMatcher(RecordMatcherType.simpleVSRMatcher);
  simpleRecordMatcher.setRecordSize(recordSize);
  simpleRecordMatcher.setAttributeWeights(arrAttrWeights);
  simpleRecordMatcher.setAttributeMatchers(attributeMatcher);
  simpleRecordMatcher.setRecordMatchThreshold(recordMatchThreshold);
  combinedRecordMatcher.add(simpleRecordMatcher);
}","private void createSimpleRecordMatcher(List<Map<String,String>> matchRule) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  final int recordSize=matchRule.size();
  double[] arrAttrWeights=new double[recordSize];
  String[] attributeNames=new String[recordSize];
  String[][] algorithmName=new String[recordSize][2];
  String[] arrMatchHandleNull=new String[recordSize];
  double recordMatchThreshold=acceptableThreshold;
  int recordIdx=0;
  for (  Map<String,String> recordMap : matchRule) {
    arrAttrWeights[recordIdx]=Double.parseDouble(recordMap.get(IRecordGrouping.CONFIDENCE_WEIGHT));
    attributeNames[recordIdx]=recordMap.get(IRecordGrouping.ATTRIBUTE_NAME);
    algorithmName[recordIdx][0]=recordMap.get(IRecordGrouping.MATCHING_TYPE);
    algorithmName[recordIdx][1]=recordMap.get(IRecordGrouping.CUSTOMER_MATCH_CLASS);
    arrMatchHandleNull[recordIdx]=recordMap.get(IRecordGrouping.HANDLE_NULL);
    String rcdMathThresholdEach=recordMap.get(IRecordGrouping.RECORD_MATCH_THRESHOLD);
    if (!StringUtils.isEmpty(rcdMathThresholdEach)) {
      recordMatchThreshold=Double.valueOf(rcdMathThresholdEach);
    }
    recordIdx++;
  }
  IAttributeMatcher[] attributeMatcher=new IAttributeMatcher[recordSize];
  for (int indx=0; indx < recordSize; indx++) {
    AttributeMatcherType attrMatcherType=AttributeMatcherType.get(algorithmName[indx][0]);
    attributeMatcher[indx]=org.talend.dataquality.record.linkage.attribute.AttributeMatcherFactory.createMatcher(attrMatcherType,algorithmName[indx][1]);
    attributeMatcher[indx].setNullOption(arrMatchHandleNull[indx]);
    attributeMatcher[indx].setAttributeName(attributeNames[indx]);
  }
  IRecordMatcher simpleRecordMatcher=RecordMatcherFactory.createMatcher(RecordMatcherType.simpleVSRMatcher);
  simpleRecordMatcher.setRecordSize(recordSize);
  simpleRecordMatcher.setAttributeWeights(arrAttrWeights);
  simpleRecordMatcher.setAttributeMatchers(attributeMatcher);
  simpleRecordMatcher.setRecordMatchThreshold(recordMatchThreshold);
  combinedRecordMatcher.add(simpleRecordMatcher);
}",0.679136690647482
137535,"/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  String folderName=mainPage.getName();
  if (defaultLabel == null) {
    IRepositoryNode currentSelectionNode=CorePlugin.getDefault().getCurrentSelectionNode();
    IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(path);
    IFolder newFolder=folder.getFolder(folderName);
    try {
      if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
        ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA_CONNECTIONS,path.makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath()),folderName);
      }
 else       if (ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
        ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA_MDMCONNECTION,path.makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath()),folderName);
      }
 else {
        newFolder.create(false,true,null);
      }
      folder.refreshLocal(IResource.DEPTH_INFINITE,null);
      DQRespositoryView findView=CorePlugin.getDefault().getRepositoryView();
      if (findView != null) {
        findView.getCommonViewer().setExpandedState(newFolder,true);
        findView.getCommonViewer().refresh(currentSelectionNode);
      }
      if (DQRepositoryNode.isOnFilterring()) {
        RepositoryNodeHelper.fillTreeList(null);
        RepositoryNodeHelper.setFilteredNode(RepositoryNodeHelper.getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
      }
    }
 catch (    CoreException e) {
      MessageDialog.openError(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      ExceptionHandler.process(e);
      return false;
    }
catch (    PersistenceException e) {
      Log.error(e,e);
    }
  }
  return true;
}","/** 
 * @see org.eclipse.jface.wizard.Wizard#performFinish()
 */
@Override public boolean performFinish(){
  final ReturnCode returncode=new ReturnCode(true);
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(DefaultMessagesImpl.getString(""String_Node_Str"")){
    @Override protected void run() throws LoginException, PersistenceException {
      String folderName=mainPage.getName();
      if (defaultLabel == null) {
        IRepositoryNode currentSelectionNode=CorePlugin.getDefault().getCurrentSelectionNode();
        IFolder folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(path);
        IFolder newFolder=folder.getFolder(folderName);
        if (ResourceManager.getConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
          ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA_CONNECTIONS,path.makeRelativeTo(ResourceManager.getConnectionFolder().getFullPath()),folderName);
        }
 else         if (ResourceManager.getMDMConnectionFolder().getFullPath().isPrefixOf(folder.getFullPath())) {
          ProxyRepositoryFactory.getInstance().createFolder(ERepositoryObjectType.METADATA_MDMCONNECTION,path.makeRelativeTo(ResourceManager.getMDMConnectionFolder().getFullPath()),folderName);
        }
 else {
          try {
            newFolder.create(false,true,null);
            folder.refreshLocal(IResource.DEPTH_INFINITE,null);
            DQRespositoryView findView=CorePlugin.getDefault().getRepositoryView();
            if (findView != null) {
              findView.getCommonViewer().setExpandedState(newFolder,true);
              findView.getCommonViewer().refresh(currentSelectionNode);
            }
            if (DQRepositoryNode.isOnFilterring()) {
              RepositoryNodeHelper.fillTreeList(null);
              RepositoryNodeHelper.setFilteredNode(RepositoryNodeHelper.getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
            }
          }
 catch (          CoreException e) {
            MessageDialog.openError(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
            ExceptionHandler.process(e);
            returncode.setOk(false);
            return;
          }
        }
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
  return returncode.isOk();
}",0.8397435897435898
137536,"/** 
 * DOC yyin Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  jrxmlItem=PropertiesFactory.eINSTANCE.createTDQJrxmlItem();
  EMFUtil emfUtil=new EMFUtil();
  File position=new File(""String_Node_Str"");
  file=new File(position.getAbsolutePath() + File.separator + ""String_Node_Str"");
  writeToFile(""String_Node_Str"");
  ResourceSet rs=emfUtil.getResourceSet();
  ByteArray byteArray=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContentFromFile(file);
  byteArrayResource=new ByteArrayResource(URI.createFileURI(file.getAbsolutePath()));
  byteArrayResource.getContents().add(byteArray);
  rs.getResources().add(byteArrayResource);
  org.talend.core.model.properties.Property fileProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  fileProperty.setId(EcoreUtil.generateUUID());
  fileProperty.setItem(jrxmlItem);
  fileProperty.setLabel(""String_Node_Str"");
  jrxmlItem.setName(""String_Node_Str"");
  jrxmlItem.setProperty(fileProperty);
  ItemState itemState=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createItemState();
  itemState.setPath(""String_Node_Str"");
  jrxmlItem.setState(itemState);
  File property=new File(position.getAbsolutePath() + File.separator + ""String_Node_Str"");
  Resource propertyResource=emfUtil.getResourceSet().createResource(URI.createFileURI(property.getAbsolutePath()));
  propertyResource.getContents().add(jrxmlItem.getProperty());
  propertyResource.getContents().add(jrxmlItem.getState());
  propertyResource.getContents().add(jrxmlItem);
  rs.getResources().add(propertyResource);
  byteArrayResource.load(null);
  jrxmlItem.setContent(byteArray);
  emfUtil.save();
}","/** 
 * DOC yyin Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  jrxmlItem=PropertiesFactory.eINSTANCE.createTDQJrxmlItem();
  EMFUtil emfUtil=new EMFUtil();
  file=new File(""String_Node_Str"");
  writeToFile(""String_Node_Str"");
  ResourceSet rs=emfUtil.getResourceSet();
  ByteArray byteArray=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContentFromFile(file);
  byteArrayResource=new ByteArrayResource(URI.createFileURI(file.getAbsolutePath()));
  byteArrayResource.getContents().add(byteArray);
  rs.getResources().add(byteArrayResource);
  org.talend.core.model.properties.Property fileProperty=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createProperty();
  fileProperty.setId(EcoreUtil.generateUUID());
  fileProperty.setItem(jrxmlItem);
  fileProperty.setLabel(""String_Node_Str"");
  jrxmlItem.setName(""String_Node_Str"");
  jrxmlItem.setProperty(fileProperty);
  ItemState itemState=org.talend.core.model.properties.PropertiesFactory.eINSTANCE.createItemState();
  itemState.setPath(""String_Node_Str"");
  jrxmlItem.setState(itemState);
  File property=new File(""String_Node_Str"");
  Resource propertyResource=emfUtil.getResourceSet().createResource(URI.createFileURI(property.getAbsolutePath()));
  propertyResource.getContents().add(jrxmlItem.getProperty());
  propertyResource.getContents().add(jrxmlItem.getState());
  propertyResource.getContents().add(jrxmlItem);
  rs.getResources().add(propertyResource);
  byteArrayResource.load(null);
  jrxmlItem.setContent(byteArray);
  emfUtil.save();
}",0.7179336659818022
137537,"@Override public void onMatch(Record record1,Record record2,MatchResult matchResult){
  LOGGER.info(""String_Node_Str"" + record1.getId() + ""String_Node_Str""+ record2.getId());
  if (LOGGER.isDebugEnabled()) {
    StringBuilder messagesBuilder=new StringBuilder();
    int i=0;
    for (    MatchResult.Score score : matchResult.getScores()) {
      messagesBuilder.append(""String_Node_Str"").append(score.algorithm.getComponentValue()).append(""String_Node_Str"").append(score.values[0]).append(""String_Node_Str"").append(score.values[1]).append(""String_Node_Str"").append(score.score).append(""String_Node_Str"").append(matchResult.getThresholds().get(i)).append(""String_Node_Str"");
      i++;
    }
    messagesBuilder.append('\n');
    messagesBuilder.append(""String_Node_Str"").append(matchResult.getNormalizedConfidence());
    messagesBuilder.append(""String_Node_Str"").append(matchResult.getMinConfidenceValue()).append(""String_Node_Str"");
    LOGGER.debug(messagesBuilder.toString());
  }
}","@Override public void onMatch(Record record1,Record record2,MatchResult matchResult){
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"" + record1.getId() + ""String_Node_Str""+ record2.getId());
  }
  if (LOGGER.isDebugEnabled()) {
    StringBuilder messagesBuilder=new StringBuilder();
    int i=0;
    for (    MatchResult.Score score : matchResult.getScores()) {
      messagesBuilder.append(""String_Node_Str"").append(score.algorithm.getComponentValue()).append(""String_Node_Str"").append(score.values[0]).append(""String_Node_Str"").append(score.values[1]).append(""String_Node_Str"").append(score.score).append(""String_Node_Str"").append(matchResult.getThresholds().get(i)).append(""String_Node_Str"");
      i++;
    }
    messagesBuilder.append('\n');
    messagesBuilder.append(""String_Node_Str"").append(matchResult.getNormalizedConfidence());
    messagesBuilder.append(""String_Node_Str"").append(matchResult.getMinConfidenceValue()).append(""String_Node_Str"");
    LOGGER.debug(messagesBuilder.toString());
  }
}",0.138033763654419
137538,"@Override public void onDifferent(Record record1,Record record2,MatchResult matchResult){
  LOGGER.info(""String_Node_Str"" + record1.getId() + ""String_Node_Str""+ record2.getId());
  if (LOGGER.isDebugEnabled()) {
    StringBuilder messagesBuilder=new StringBuilder();
    int i=0;
    for (    MatchResult.Score score : matchResult.getScores()) {
      Float threshold=matchResult.getThresholds().get(i);
      String compareSymbol;
      if (score.score < threshold) {
        compareSymbol=""String_Node_Str"";
      }
 else {
        compareSymbol=""String_Node_Str"";
      }
      messagesBuilder.append(""String_Node_Str"").append(score.algorithm.getComponentValue()).append(""String_Node_Str"").append(score.values[0]).append(""String_Node_Str"").append(score.values[1]).append(""String_Node_Str"").append(score.score).append(""String_Node_Str"").append(compareSymbol).append(""String_Node_Str"").append(threshold).append(""String_Node_Str"");
      i++;
    }
    messagesBuilder.append('\n');
    messagesBuilder.append(""String_Node_Str"").append(matchResult.getNormalizedConfidence());
    messagesBuilder.append(""String_Node_Str"").append(matchResult.getMinConfidenceValue()).append(""String_Node_Str"");
    LOGGER.debug(messagesBuilder.toString());
  }
}","@Override public void onDifferent(Record record1,Record record2,MatchResult matchResult){
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"" + record1.getId() + ""String_Node_Str""+ record2.getId());
  }
  if (LOGGER.isDebugEnabled()) {
    StringBuilder messagesBuilder=new StringBuilder();
    int i=0;
    for (    MatchResult.Score score : matchResult.getScores()) {
      Float threshold=matchResult.getThresholds().get(i);
      String compareSymbol;
      if (score.score < threshold) {
        compareSymbol=""String_Node_Str"";
      }
 else {
        compareSymbol=""String_Node_Str"";
      }
      messagesBuilder.append(""String_Node_Str"").append(score.algorithm.getComponentValue()).append(""String_Node_Str"").append(score.values[0]).append(""String_Node_Str"").append(score.values[1]).append(""String_Node_Str"").append(score.score).append(""String_Node_Str"").append(compareSymbol).append(""String_Node_Str"").append(threshold).append(""String_Node_Str"");
      i++;
    }
    messagesBuilder.append('\n');
    messagesBuilder.append(""String_Node_Str"").append(matchResult.getNormalizedConfidence());
    messagesBuilder.append(""String_Node_Str"").append(matchResult.getMinConfidenceValue()).append(""String_Node_Str"");
    LOGGER.debug(messagesBuilder.toString());
  }
}",0.1132224861441013
137539,"@Override public void onBeginProcessing(){
  LOGGER.info(""String_Node_Str"");
}","@Override public void onBeginProcessing(){
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"");
  }
}",0.8041237113402062
137540,"@Override public void onEndRecord(Record record){
  LOGGER.info(""String_Node_Str"" + record.getId());
}","@Override public void onEndRecord(Record record){
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"" + record.getId());
  }
}",0.8429752066115702
137541,"@Override public void onEndProcessing(){
  LOGGER.info(""String_Node_Str"");
}","@Override public void onEndProcessing(){
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"");
  }
}",0.8
137542,"@Override public void onNewMerge(Record record){
  if (record.getRelatedIds().size() > 1) {
    LOGGER.info(""String_Node_Str"" + record.getId() + ""String_Node_Str""+ record.getRelatedIds().size()+ ""String_Node_Str"");
  }
 else {
    LOGGER.info(""String_Node_Str"" + record.getId() + ""String_Node_Str"");
  }
  if (LOGGER.isDebugEnabled()) {
    StringBuilder messageBuilder=new StringBuilder();
    for (    Attribute attribute : record.getAttributes()) {
      messageBuilder.append(""String_Node_Str"").append(attribute.getLabel()).append(""String_Node_Str"").append(attribute.getValue()).append(""String_Node_Str"");
    }
    LOGGER.debug(messageBuilder.toString());
  }
}","@Override public void onNewMerge(Record record){
  if (LOGGER.isInfoEnabled()) {
    if (record.getRelatedIds().size() > 1) {
      LOGGER.info(""String_Node_Str"" + record.getId() + ""String_Node_Str""+ record.getRelatedIds().size()+ ""String_Node_Str"");
    }
 else {
      LOGGER.info(""String_Node_Str"" + record.getId() + ""String_Node_Str"");
    }
  }
  if (LOGGER.isDebugEnabled()) {
    StringBuilder messageBuilder=new StringBuilder();
    for (    Attribute attribute : record.getAttributes()) {
      messageBuilder.append(""String_Node_Str"").append(attribute.getLabel()).append(""String_Node_Str"").append(attribute.getValue()).append(""String_Node_Str"");
    }
    LOGGER.debug(messageBuilder.toString());
  }
}",0.3105950653120464
137543,"@Override public void onBeginRecord(Record record){
  LOGGER.info(""String_Node_Str"" + record.getId());
}","@Override public void onBeginRecord(Record record){
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"" + record.getId());
  }
}",0.8455284552845529
137544,"@Override public void onBeginPostMergeProcess(){
  LOGGER.info(""String_Node_Str"");
}","@Override public void onBeginPostMergeProcess(){
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"");
  }
}",0.8155339805825242
137545,"@Override public void onEndPostMergeProcess(){
  LOGGER.info(""String_Node_Str"");
}","@Override public void onEndPostMergeProcess(){
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"");
  }
}",0.8118811881188119
137546,"@Override public void onRemoveMerge(Record record){
  LOGGER.info(""String_Node_Str"" + record.getId());
}","@Override public void onRemoveMerge(Record record){
  if (LOGGER.isInfoEnabled()) {
    LOGGER.info(""String_Node_Str"" + record.getId());
  }
}",0.8455284552845529
137547,"private NonMatchResult(MatchResult result){
  this.result=result;
}","private NonMatchResult(MatchResult result){
  super(result.getScores().size());
  this.result=result;
}",0.788235294117647
137548,"private MatchResult matchRecords(Record mergedRecord,Record currentRecord){
  if (mergedRecord.getAttributes().size() != currentRecord.getAttributes().size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mergedRecord.getGroupId() != null && currentRecord.getGroupId() != null) {
    if (!mergedRecord.getGroupId().equals(currentRecord.getGroupId())) {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"");
      }
      return NonMatchResult.INSTANCE;
    }
 else {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"");
      }
    }
  }
  Iterator<Attribute> mergedRecordAttributes=mergedRecord.getAttributes().iterator();
  Iterator<Attribute> currentRecordAttributes=currentRecord.getAttributes().iterator();
  double confidence=0;
  int matchIndex=0;
  MatchResult result=new MatchResult();
  while (mergedRecordAttributes.hasNext()) {
    Attribute left=mergedRecordAttributes.next();
    Attribute right=currentRecordAttributes.next();
    double score=MatchMerge.matchScore(left,right,algorithms[matchIndex],nullOptions[matchIndex],subStrings[matchIndex]);
    result.setScore(matchIndex,algorithms[matchIndex],score,left.getValue(),right.getValue());
    result.setThreshold(matchIndex,thresholds[matchIndex]);
    confidence+=score * weights[matchIndex];
    matchIndex++;
  }
  double normalizedConfidence=confidence > 0 ? confidence / maxWeight : confidence;
  result.setConfidence(normalizedConfidence,minConfidenceValue);
  if (normalizedConfidence < minConfidenceValue) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + normalizedConfidence + ""String_Node_Str""+ minConfidenceValue+ ""String_Node_Str"");
    }
    return NonMatchResult.wrap(result);
  }
  currentRecord.setConfidence(normalizedConfidence);
  return result;
}","private MatchResult matchRecords(Record mergedRecord,Record currentRecord){
  if (mergedRecord.getAttributes().size() != currentRecord.getAttributes().size()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mergedRecord.getGroupId() != null && currentRecord.getGroupId() != null) {
    if (!mergedRecord.getGroupId().equals(currentRecord.getGroupId())) {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"");
      }
      return NonMatchResult.INSTANCE;
    }
 else {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""String_Node_Str"");
      }
    }
  }
  Iterator<Attribute> mergedRecordAttributes=mergedRecord.getAttributes().iterator();
  Iterator<Attribute> currentRecordAttributes=currentRecord.getAttributes().iterator();
  double confidence=0;
  int matchIndex=0;
  MatchResult result=new MatchResult(mergedRecord.getAttributes().size());
  while (mergedRecordAttributes.hasNext()) {
    Attribute left=mergedRecordAttributes.next();
    Attribute right=currentRecordAttributes.next();
    double score=MatchMerge.matchScore(left,right,algorithms[matchIndex],nullOptions[matchIndex],subStrings[matchIndex]);
    result.setScore(matchIndex,algorithms[matchIndex],score,left.getValue(),right.getValue());
    result.setThreshold(matchIndex,thresholds[matchIndex]);
    confidence+=score * weights[matchIndex];
    matchIndex++;
  }
  double normalizedConfidence=confidence > 0 ? confidence / maxWeight : confidence;
  result.setConfidence(normalizedConfidence,minConfidenceValue);
  if (normalizedConfidence < minConfidenceValue) {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug(""String_Node_Str"" + normalizedConfidence + ""String_Node_Str""+ minConfidenceValue+ ""String_Node_Str"");
    }
    return NonMatchResult.wrap(result);
  }
  currentRecord.setConfidence(normalizedConfidence);
  return result;
}",0.9905634942032892
137549,"public MigrationTaskManager(IMigrationTaskProvider taskProvider,ProductVersion workspaceVersion,ProductVersion currentVersion,MigrationTaskType taskType){
  if (taskProvider == null) {
    taskProvider=new DefaultMigrationTaskProvider();
  }
  if (currentVersion == null) {
    this.currentVersion=MigrationPlugin.getDefault().getProductVersion();
  }
 else {
    this.currentVersion=currentVersion;
  }
  this.workspaceVersion=workspaceVersion;
  this.taskType=taskType;
  this.allMigrationTask=new ArrayList<IMigrationTask>();
  if (taskProvider != null) {
    allMigrationTask.addAll(Arrays.asList(taskProvider.getMigrationTasks()));
    sortTasks(allMigrationTask);
  }
}","public MigrationTaskManager(IMigrationTaskProvider taskProvider,ProductVersion workspaceVersion,ProductVersion currentVersion,MigrationTaskType taskType){
  super(taskProvider,workspaceVersion,currentVersion,taskType);
}",0.3910614525139664
137550,"/** 
 * DOC zhao Comment method ""setRuleMatcher"".
 * @param columnMap
 * @param recordMatchingIndicator
 * @param analysisMatchRecordGrouping
 * @throws BusinessException
 */
private static void setRuleMatcher(Map<String,String> columnMap,RecordMatchingIndicator recordMatchingIndicator,AnalysisMatchRecordGrouping analysisMatchRecordGrouping) throws BusinessException {
  List<MatchRule> matchRules=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getMatchRules();
  for (  MatchRule matcher : matchRules) {
    List<Map<String,String>> ruleMatcherConvertResult=new ArrayList<Map<String,String>>();
    if (matcher == null) {
      continue;
    }
    for (    MatchKeyDefinition matchDef : matcher.getMatchKeys()) {
      if (matchDef.getColumn() == null || StringUtils.EMPTY.equals(matchDef.getColumn())) {
        BusinessException businessException=new BusinessException();
        businessException.setAdditonalMessage(Messages.getString(""String_Node_Str"",matchDef.getName()));
        throw businessException;
      }
      Map<String,String> matchKeyMap=AnalysisRecordGroupingUtils.getMatchKeyMap(matchDef.getColumn(),matchDef.getAlgorithm().getAlgorithmType(),matchDef.getAlgorithm().getAlgorithmParameters(),matchDef.getConfidenceWeight(),columnMap,matcher.getMatchInterval(),matchDef.getColumn());
      ruleMatcherConvertResult.add(matchKeyMap);
    }
    analysisMatchRecordGrouping.addRuleMatcher(ruleMatcherConvertResult);
  }
}","/** 
 * DOC zhao Comment method ""setRuleMatcher"".
 * @param columnMap
 * @param recordMatchingIndicator
 * @param analysisMatchRecordGrouping
 * @throws BusinessException
 */
private static void setRuleMatcher(Map<String,String> columnMap,RecordMatchingIndicator recordMatchingIndicator,AnalysisMatchRecordGrouping analysisMatchRecordGrouping) throws BusinessException {
  List<MatchRule> matchRules=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getMatchRules();
  for (  MatchRule matcher : matchRules) {
    List<Map<String,String>> ruleMatcherConvertResult=new ArrayList<Map<String,String>>();
    if (matcher == null) {
      continue;
    }
    for (    MatchKeyDefinition matchDef : matcher.getMatchKeys()) {
      if (matchDef.getColumn() == null || StringUtils.EMPTY.equals(matchDef.getColumn())) {
        BusinessException businessException=new BusinessException();
        businessException.setAdditonalMessage(Messages.getString(""String_Node_Str"",matchDef.getName()));
        throw businessException;
      }
      Map<String,String> matchKeyMap=AnalysisRecordGroupingUtils.getMatchKeyMap(matchDef.getColumn(),matchDef.getAlgorithm().getAlgorithmType(),matchDef.getAlgorithm().getAlgorithmParameters(),matchDef.getConfidenceWeight(),columnMap,matcher.getMatchInterval(),matchDef.getColumn(),matchDef.getHandleNull());
      ruleMatcherConvertResult.add(matchKeyMap);
    }
    analysisMatchRecordGrouping.addRuleMatcher(ruleMatcherConvertResult);
  }
}",0.9914529914529916
137551,"/** 
 * get the key map of the match table's columns(<column, index>)
 * @param column
 * @param algoType
 * @param algoParameter
 * @param confidentWeight
 * @param columnIndexMap
 * @param matchInterval
 * @param attributeName
 * @return
 */
public static Map<String,String> getMatchKeyMap(String column,String algoType,String algoParameter,int confidentWeight,Map<String,String> columnIndexMap,double matchInterval,String attributeName){
  Map<String,String> matchKeyMap=new HashMap<String,String>();
  matchKeyMap.put(IRecordGrouping.COLUMN_IDX,columnIndexMap.get(column));
  matchKeyMap.put(IRecordGrouping.MATCHING_TYPE,AttributeMatcherType.valueOf(algoType).name());
  matchKeyMap.put(IRecordGrouping.CUSTOMER_MATCH_CLASS,algoParameter);
  matchKeyMap.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(confidentWeight));
  matchKeyMap.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(matchInterval));
  matchKeyMap.put(IRecordGrouping.ATTRIBUTE_NAME,attributeName);
  return matchKeyMap;
}","/** 
 * get the key map of the match table's columns(<column, index>)
 * @param column
 * @param algoType
 * @param algoParameter
 * @param confidentWeight
 * @param columnIndexMap
 * @param matchInterval
 * @param attributeName
 * @return
 */
public static Map<String,String> getMatchKeyMap(String column,String algoType,String algoParameter,int confidentWeight,Map<String,String> columnIndexMap,double matchInterval,String attributeName,String handleNull){
  Map<String,String> matchKeyMap=new HashMap<String,String>();
  matchKeyMap.put(IRecordGrouping.COLUMN_IDX,columnIndexMap.get(column));
  matchKeyMap.put(IRecordGrouping.MATCHING_TYPE,AttributeMatcherType.valueOf(algoType).name());
  matchKeyMap.put(IRecordGrouping.CUSTOMER_MATCH_CLASS,algoParameter);
  matchKeyMap.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(confidentWeight));
  matchKeyMap.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(matchInterval));
  matchKeyMap.put(IRecordGrouping.ATTRIBUTE_NAME,attributeName);
  matchKeyMap.put(IRecordGrouping.HANDLE_NULL,handleNull);
  return matchKeyMap;
}",0.9565217391304348
137552,"/** 
 * TMDM-6549,Check and collect match rule objects from deleted objects.
 * @param node
 * @param matchRules
 */
private void collectSelectedMatchRuleObjs(IRepositoryNode node,List<IRepositoryViewObject> matchRules){
  IRepositoryViewObject viewObj=node.getObject();
  if (viewObj instanceof Folder) {
    for (    IRepositoryNode childNode : node.getChildren()) {
      collectSelectedMatchRuleObjs(childNode,matchRules);
    }
  }
 else   if (viewObj.getRepositoryObjectType() == ERepositoryObjectType.TDQ_RULES_MATCHER) {
    matchRules.add(viewObj);
  }
}","/** 
 * TMDM-6549,Check and collect match rule objects from deleted objects.
 * @param node
 * @param matchRules
 */
private void collectSelectedMatchRuleObjs(IRepositoryNode node,List<IRepositoryViewObject> matchRules){
  IRepositoryViewObject viewObj=node.getObject();
  if (viewObj == null) {
    return;
  }
  if (viewObj instanceof Folder) {
    for (    IRepositoryNode childNode : node.getChildren()) {
      collectSelectedMatchRuleObjs(childNode,matchRules);
    }
  }
 else   if (viewObj.getRepositoryObjectType() == ERepositoryObjectType.TDQ_RULES_MATCHER) {
    matchRules.add(viewObj);
  }
}",0.9648671808054842
137553,"public MigrationTaskManager(IMigrationTaskProvider taskProvider,ProductVersion workspaceVersion,ProductVersion currentVersion,MigrationTaskType taskType){
  if (taskProvider == null) {
    taskProvider=new DefaultMigrationTaskProvider();
  }
  if (currentVersion == null) {
    this.currentVersion=MigrationPlugin.getDefault().getProductVersion();
  }
 else {
    this.currentVersion=currentVersion;
  }
  this.workspaceVersion=workspaceVersion;
  this.taskType=taskType;
  this.allMigrationTask=new ArrayList<IMigrationTask>();
  if (taskProvider != null) {
    allMigrationTask.addAll(Arrays.asList(taskProvider.getMigrationTasks()));
    sortTasks(allMigrationTask);
  }
}","public MigrationTaskManager(IMigrationTaskProvider taskProvider,ProductVersion workspaceVersion,ProductVersion currentVersion,MigrationTaskType taskType){
  super(taskProvider,workspaceVersion,currentVersion,taskType);
}",0.3910614525139664
137554,"/** 
 * if overwrite: need to delete all current keyss, and insert the keys according to the parameter:matchRule; else: only add the keys in the parameter matchrule, to the current keys.
 * @param matchRule
 * @param overwrite
 */
public void importMatchRule(MatchRuleDefinition matchRule,boolean overwrite){
  if (overwrite) {
    this.getBlockKeyDefinitionList().clear();
    this.tableComposite.redraw();
  }
  List<String> conflictKeys=new ArrayList<String>();
  for (  BlockKeyDefinition blockKey : matchRule.getBlockKeys()) {
    if (!overwrite && isKeyDefinitionAdded(blockKey.getName())) {
      conflictKeys.add(blockKey.getName());
      continue;
    }
    BlockKeyDefinition blockKeyDefinition=EcoreUtil.copy(blockKey);
    setColumnValueIfMatch(blockKeyDefinition);
    tableComposite.addKeyDefinition(blockKeyDefinition,this.getMatchRuleDefinition().getBlockKeys());
  }
  if (conflictKeys.size() > 0) {
    StringBuffer names=new StringBuffer();
    for (    String name : conflictKeys) {
      names.append(name);
      names.append(PluginConstant.COMMA_STRING);
    }
    if (names.length() > 0) {
      names.deleteCharAt(names.lastIndexOf(PluginConstant.COMMA_STRING));
    }
    MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + names.toString());
  }
}","/** 
 * if overwrite: need to delete all current keyss, and insert the keys according to the parameter:matchRule; else: only add the keys in the parameter matchrule, to the current keys.
 * @param matchRule
 * @param overwrite
 */
public void importMatchRule(MatchRuleDefinition matchRule,boolean overwrite){
  if (overwrite) {
    this.removeAllBlockingKey();
  }
  List<String> conflictKeys=new ArrayList<String>();
  for (  BlockKeyDefinition blockKey : matchRule.getBlockKeys()) {
    if (!overwrite && isKeyDefinitionAdded(blockKey.getName())) {
      conflictKeys.add(blockKey.getName());
      continue;
    }
    BlockKeyDefinition blockKeyDefinition=EcoreUtil.copy(blockKey);
    setColumnValueIfMatch(blockKeyDefinition);
    tableComposite.addKeyDefinition(blockKeyDefinition,this.getMatchRuleDefinition().getBlockKeys());
  }
  if (conflictKeys.size() > 0) {
    StringBuffer names=new StringBuffer();
    for (    String name : conflictKeys) {
      names.append(name);
      names.append(PluginConstant.COMMA_STRING);
    }
    if (names.length() > 0) {
      names.deleteCharAt(names.lastIndexOf(PluginConstant.COMMA_STRING));
    }
    MessageDialog.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"") + names.toString());
  }
}",0.9710635099586622
137555,"public void removeKeyFromAllTab(String column){
  CTabItem[] tabItems=ruleFolder.getItems();
  if (tabItems != null && tabItems.length > 0) {
    for (    CTabItem oneTab : tabItems) {
      MatchRuleTableComposite matchRuleTableComp=(MatchRuleTableComposite)oneTab.getData(MatchAnalysisConstant.MATCH_RULE_TABLE_COMPOSITE);
      matchRuleTableComp.removeKeyDefinition(column,matchRuleTableComp.getMatchRule().getMatchKeys());
      checkAndRemoveEmptyMatchRule(oneTab);
    }
    this.redrawnContent();
  }
  columnMap.remove(column);
}","public void removeKeyFromAllTab(String column){
  CTabItem[] tabItems=ruleFolder.getItems();
  if (tabItems != null && tabItems.length > 0) {
    for (    CTabItem oneTab : tabItems) {
      MatchRuleTableComposite matchRuleTableComp=(MatchRuleTableComposite)oneTab.getData(MatchAnalysisConstant.MATCH_RULE_TABLE_COMPOSITE);
      matchRuleTableComp.removeKeyDefinition(column,matchRuleTableComp.getMatchRule().getMatchKeys());
      checkAndRemoveEmptyMatchRule(oneTab);
    }
    this.redrawnSubTableContent();
  }
  columnMap.remove(column);
}",0.992619926199262
137556,"/** 
 * DOC zshen Comment method ""createButtons"".
 */
private void createRefreshButton(Composite currentSectionClient){
  Composite buttonsComposite=new Composite(currentSectionClient,SWT.NONE);
  buttonsComposite.setLayout(new GridLayout(10,true));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.LEFT;
  labelGd.widthHint=30;
  createAddAndRemoveButton(buttonsComposite,labelGd);
  createMoveButton(buttonsComposite,labelGd);
  labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.CENTER;
  labelGd.horizontalSpan=5;
  String buttonText=DefaultMessagesImpl.getString(""String_Node_Str"");
  labelGd.widthHint=buttonText.length() * 10;
  final Button refresh=new Button(buttonsComposite,SWT.NONE);
  refresh.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  refresh.setText(buttonText);
  refresh.setLayoutData(labelGd);
  refresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RefreshChartAction(AbstractMatchAnaysisTableSection.this).run();
    }
  }
);
}","/** 
 * DOC zshen Comment method ""createButtons"".
 */
private void createRefreshButton(Composite currentSectionClient){
  Composite buttonsComposite=new Composite(currentSectionClient,SWT.NONE);
  buttonsComposite.setLayout(new GridLayout(10,true));
  buttonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,true,false));
  Composite commonButtonsComposite=new Composite(buttonsComposite,SWT.NONE);
  commonButtonsComposite.setLayout(new GridLayout(10,true));
  commonButtonsComposite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,true,false,8,1));
  GridData labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.LEFT;
  labelGd.widthHint=30;
  createAddAndRemoveButton(commonButtonsComposite,labelGd);
  createMoveButton(commonButtonsComposite,labelGd);
  Composite refreshButtonComposite=new Composite(buttonsComposite,SWT.NONE);
  refreshButtonComposite.setLayoutData(new GridData(SWT.FILL,SWT.NONE,true,false,2,1));
  refreshButtonComposite.setLayout(new GridLayout(1,true));
  labelGd=new GridData();
  labelGd.horizontalAlignment=SWT.RIGHT;
  String buttonText=DefaultMessagesImpl.getString(""String_Node_Str"");
  labelGd.widthHint=buttonText.length() * 10;
  final Button refresh=new Button(refreshButtonComposite,SWT.NONE);
  refresh.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  refresh.setText(buttonText);
  refresh.setLayoutData(labelGd);
  refresh.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RefreshChartAction(AbstractMatchAnaysisTableSection.this).run();
    }
  }
);
}",0.4598046581517656
137557,"public void removeKeyFromAllTab(String column){
  CTabItem[] tabItems=ruleFolder.getItems();
  if (tabItems != null && tabItems.length > 0) {
    for (    CTabItem oneTab : tabItems) {
      MatchRuleTableComposite matchRuleTableComp=(MatchRuleTableComposite)oneTab.getData(MatchAnalysisConstant.MATCH_RULE_TABLE_COMPOSITE);
      matchRuleTableComp.removeKeyDefinition(column,getCurrentMatchRuleTableComposite().getMatchRule().getMatchKeys());
    }
  }
  columnMap.remove(column);
}","public void removeKeyFromAllTab(String column){
  CTabItem[] tabItems=ruleFolder.getItems();
  if (tabItems != null && tabItems.length > 0) {
    for (    CTabItem oneTab : tabItems) {
      MatchRuleTableComposite matchRuleTableComp=(MatchRuleTableComposite)oneTab.getData(MatchAnalysisConstant.MATCH_RULE_TABLE_COMPOSITE);
      matchRuleTableComp.removeKeyDefinition(column,matchRuleTableComp.getMatchRule().getMatchKeys());
      checkAndRemoveEmptyMatchRule(oneTab);
    }
    this.redrawnContent();
  }
  columnMap.remove(column);
}",0.8610567514677103
137558,"/** 
 * DOC mzhao feature 11128, If the execute engine and by the same time Java User Defined Indicator is also defined, then compute via Java UDI, here convert common udi to a Java UDI.
 * @param udi
 * @return
 * @throws Exception
 */
public static Indicator adaptToJavaUDI(Indicator indicator) throws Throwable {
  if (JAVAUDIMAP.get(indicator) != null) {
    return JAVAUDIMAP.get(indicator);
  }
  if (JAVAUDIMAP.values().contains(indicator)) {
    return indicator;
  }
  UserDefIndicator adaptedUDI=null;
  if (userDefIndSwitch.doSwitch(indicator) != null) {
    EList<TaggedValue> taggedValues=indicator.getIndicatorDefinition().getTaggedValue();
    String userJavaClassName=null;
    String jarPath=null;
    for (    TaggedValue tv : taggedValues) {
      if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
        userJavaClassName=tv.getValue();
        continue;
      }
      if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
        jarPath=tv.getValue();
      }
    }
    if (validateJavaUDI(userJavaClassName,jarPath)) {
      List<URL> jarUrls=new ArrayList<URL>();
      for (      File file : getContainJarFile(jarPath)) {
        jarUrls.add(file.toURI().toURL());
      }
      TalendURLClassLoader cl;
      cl=new TalendURLClassLoader(jarUrls.toArray(new URL[jarUrls.size()]));
      Class<?> clazz=null;
      clazz=cl.findClass(userJavaClassName);
      if (clazz != null) {
        UserDefIndicator judi=(UserDefIndicator)clazz.newInstance();
        PropertyUtils.copyProperties(judi,indicator);
        adaptedUDI=judi;
        JAVAUDIMAP.put(indicator,adaptedUDI);
      }
    }
  }
  return adaptedUDI;
}","/** 
 * DOC mzhao feature 11128, If the execute engine and by the same time Java User Defined Indicator is also defined, then compute via Java UDI, here convert common udi to a Java UDI.
 * @param udi
 * @return
 * @throws Exception
 */
public static Indicator adaptToJavaUDI(Indicator indicator) throws Throwable {
  Indicator returnIndicator=getUDIFromMap(indicator);
  if (returnIndicator != null) {
    return returnIndicator;
  }
  UserDefIndicator adaptedUDI=null;
  if (userDefIndSwitch.doSwitch(indicator) != null) {
    EList<TaggedValue> taggedValues=indicator.getIndicatorDefinition().getTaggedValue();
    String userJavaClassName=null;
    String jarPath=null;
    for (    TaggedValue tv : taggedValues) {
      if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
        userJavaClassName=tv.getValue();
        continue;
      }
      if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
        jarPath=tv.getValue();
      }
    }
    if (validateJavaUDI(userJavaClassName,jarPath)) {
      List<URL> jarUrls=new ArrayList<URL>();
      for (      File file : getContainJarFile(jarPath)) {
        jarUrls.add(file.toURI().toURL());
      }
      TalendURLClassLoader cl;
      cl=new TalendURLClassLoader(jarUrls.toArray(new URL[jarUrls.size()]));
      Class<?> clazz=null;
      clazz=cl.findClass(userJavaClassName);
      if (clazz != null) {
        UserDefIndicator judi=(UserDefIndicator)clazz.newInstance();
        PropertyUtils.copyProperties(judi,indicator);
        adaptedUDI=judi;
        JAVAUDIMAP.put(indicator,adaptedUDI);
      }
    }
  }
  return adaptedUDI;
}",0.9409966371140324
137559,"/** 
 * DOC mzhao feature 11128, If the execute engine and by the same time Java User Defined Indicator is also defined, then compute via Java UDI, here convert common udi to a Java UDI.
 * @param udi
 * @return
 * @throws Exception
 */
public static Indicator adaptToJavaUDI(Indicator indicator) throws Throwable {
  if (JAVAUDIMAP.get(indicator) != null) {
    return JAVAUDIMAP.get(indicator);
  }
  if (JAVAUDIMAP.values().contains(indicator)) {
    return indicator;
  }
  UserDefIndicator adaptedUDI=null;
  if (userDefIndSwitch.doSwitch(indicator) != null) {
    EList<TaggedValue> taggedValues=indicator.getIndicatorDefinition().getTaggedValue();
    String userJavaClassName=null;
    String jarPath=null;
    for (    TaggedValue tv : taggedValues) {
      if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
        userJavaClassName=tv.getValue();
        continue;
      }
      if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
        jarPath=tv.getValue();
      }
    }
    if (validateJavaUDI(userJavaClassName,jarPath)) {
      List<URL> jarUrls=new ArrayList<URL>();
      for (      IFile file : getContainJarFile(jarPath)) {
        jarUrls.add(file.getLocationURI().toURL());
      }
      TalendURLClassLoader cl;
      cl=new TalendURLClassLoader(jarUrls.toArray(new URL[jarUrls.size()]));
      Class<?> clazz=null;
      clazz=cl.findClass(userJavaClassName);
      if (clazz != null) {
        UserDefIndicator judi=(UserDefIndicator)clazz.newInstance();
        PropertyUtils.copyProperties(judi,indicator);
        adaptedUDI=judi;
        JAVAUDIMAP.put(indicator,adaptedUDI);
      }
    }
  }
  return adaptedUDI;
}","/** 
 * DOC mzhao feature 11128, If the execute engine and by the same time Java User Defined Indicator is also defined, then compute via Java UDI, here convert common udi to a Java UDI.
 * @param udi
 * @return
 * @throws Exception
 */
public static Indicator adaptToJavaUDI(Indicator indicator) throws Throwable {
  Indicator returnIndicator=getUDIFromMap(indicator);
  if (returnIndicator != null) {
    return returnIndicator;
  }
  UserDefIndicator adaptedUDI=null;
  if (userDefIndSwitch.doSwitch(indicator) != null) {
    EList<TaggedValue> taggedValues=indicator.getIndicatorDefinition().getTaggedValue();
    String userJavaClassName=null;
    String jarPath=null;
    for (    TaggedValue tv : taggedValues) {
      if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
        userJavaClassName=tv.getValue();
        continue;
      }
      if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
        jarPath=tv.getValue();
      }
    }
    if (validateJavaUDI(userJavaClassName,jarPath)) {
      List<URL> jarUrls=new ArrayList<URL>();
      for (      IFile file : getContainJarFile(jarPath)) {
        jarUrls.add(file.getLocationURI().toURL());
      }
      TalendURLClassLoader cl;
      cl=new TalendURLClassLoader(jarUrls.toArray(new URL[jarUrls.size()]));
      Class<?> clazz=null;
      clazz=cl.findClass(userJavaClassName);
      if (clazz != null) {
        UserDefIndicator judi=(UserDefIndicator)clazz.newInstance();
        PropertyUtils.copyProperties(judi,indicator);
        adaptedUDI=judi;
        JAVAUDIMAP.put(indicator,adaptedUDI);
      }
    }
  }
  return adaptedUDI;
}",0.9413552111820116
137560,"/** 
 * DOC mzhao feature 11128, If the execute engine and by the same time Java User Defined Indicator is also defined, then compute via Java UDI, here convert common udi to a Java UDI.
 * @param udi
 * @return
 * @throws Exception
 */
public static Indicator adaptToJavaUDI(Indicator indicator) throws Throwable {
  if (JAVAUDIMAP.get(indicator) != null) {
    return JAVAUDIMAP.get(indicator);
  }
  if (JAVAUDIMAP.values().contains(indicator)) {
    return indicator;
  }
  UserDefIndicator adaptedUDI=null;
  if (userDefIndSwitch.doSwitch(indicator) != null) {
    EList<TaggedValue> taggedValues=indicator.getIndicatorDefinition().getTaggedValue();
    String userJavaClassName=null;
    String jarPath=null;
    for (    TaggedValue tv : taggedValues) {
      if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
        userJavaClassName=tv.getValue();
        continue;
      }
      if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
        jarPath=tv.getValue();
      }
    }
    if (validateJavaUDI(userJavaClassName,jarPath)) {
      List<URL> jarUrls=new ArrayList<URL>();
      for (      File file : getContainJarFile(jarPath)) {
        jarUrls.add(file.toURI().toURL());
      }
      TalendURLClassLoader cl;
      cl=new TalendURLClassLoader(jarUrls.toArray(new URL[jarUrls.size()]));
      Class<?> clazz=null;
      clazz=cl.findClass(userJavaClassName);
      if (clazz != null) {
        UserDefIndicator judi=(UserDefIndicator)clazz.newInstance();
        PropertyUtils.copyProperties(judi,indicator);
        adaptedUDI=judi;
        JAVAUDIMAP.put(indicator,adaptedUDI);
      }
    }
  }
  return adaptedUDI;
}","/** 
 * DOC mzhao feature 11128, If the execute engine and by the same time Java User Defined Indicator is also defined, then compute via Java UDI, here convert common udi to a Java UDI.
 * @param udi
 * @return
 * @throws Exception
 */
public static Indicator adaptToJavaUDI(Indicator indicator) throws Throwable {
  Indicator returnIndicator=getUDIFromMap(indicator);
  if (returnIndicator != null) {
    return returnIndicator;
  }
  UserDefIndicator adaptedUDI=null;
  if (userDefIndSwitch.doSwitch(indicator) != null) {
    EList<TaggedValue> taggedValues=indicator.getIndicatorDefinition().getTaggedValue();
    String userJavaClassName=null;
    String jarPath=null;
    for (    TaggedValue tv : taggedValues) {
      if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
        userJavaClassName=tv.getValue();
        continue;
      }
      if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
        jarPath=tv.getValue();
      }
    }
    if (validateJavaUDI(userJavaClassName,jarPath)) {
      List<URL> jarUrls=new ArrayList<URL>();
      for (      File file : getContainJarFile(jarPath)) {
        jarUrls.add(file.toURI().toURL());
      }
      TalendURLClassLoader cl;
      cl=new TalendURLClassLoader(jarUrls.toArray(new URL[jarUrls.size()]));
      Class<?> clazz=null;
      clazz=cl.findClass(userJavaClassName);
      if (clazz != null) {
        UserDefIndicator judi=(UserDefIndicator)clazz.newInstance();
        PropertyUtils.copyProperties(judi,indicator);
        adaptedUDI=judi;
        JAVAUDIMAP.put(indicator,adaptedUDI);
      }
    }
  }
  return adaptedUDI;
}",0.9409966371140324
137561,"@Override public void doSave(IProgressMonitor monitor){
  ReturnCode rc=canSave();
  if (!rc.isOk()) {
    return;
  }
  super.doSave(monitor);
  boolean needReloadJUDIJar=false;
  if (!checkJavaUDIBeforeSave()) {
    ((IndicatorEditor)this.getEditor()).setSaveActionButtonState(false);
    String message=DefaultMessagesImpl.getString(""String_Node_Str"");
    MessageUI.openWarning(message);
    return;
  }
  if (!checkWhithspace()) {
    MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  rc=checkBeforeSave();
  if (rc.isOk()) {
    if (definition instanceof UDIndicatorDefinition) {
      UDIndicatorDefinition def=(UDIndicatorDefinition)definition;
      EList<TdExpression> viewValidRowsExpression=def.getViewValidRowsExpression();
      viewValidRowsExpression.clear();
      viewValidRowsExpression=saveFromTempMapToDefinition(viewValidRowsExpression,tempViewValidRowsExpressionMap);
      EList<TdExpression> viewInvalidRowsExpression=def.getViewInvalidRowsExpression();
      viewInvalidRowsExpression.clear();
      viewInvalidRowsExpression=saveFromTempMapToDefinition(viewInvalidRowsExpression,tempViewInvalidRowsExpressionMap);
      EList<TdExpression> viewValidValuesExpression=def.getViewValidValuesExpression();
      viewValidValuesExpression.clear();
      viewValidValuesExpression=saveFromTempMapToDefinition(viewValidValuesExpression,tempViewValidValuesExpressionMap);
      EList<TdExpression> viewInvalidValuesExpression=def.getViewInvalidValuesExpression();
      viewInvalidValuesExpression.clear();
      viewInvalidValuesExpression=saveFromTempMapToDefinition(viewInvalidValuesExpression,tempViewInvalidValuesExpressionMap);
      EList<TdExpression> viewRowsExpression=def.getViewRowsExpression();
      viewRowsExpression.clear();
      viewRowsExpression=saveFromTempMapToDefinition(viewRowsExpression,tempViewRowsExpressionMap);
      if (category != null) {
        UDIHelper.setUDICategory(definition,category);
      }
    }
    EList<TdExpression> expressions=definition.getSqlGenericExpression();
    expressions.clear();
    Iterator<CCombo> it=tempExpressionMap.keySet().iterator();
    CCombo javaUIDCombo=null;
    while (it.hasNext()) {
      CCombo cb=it.next();
      if (cb.getText().equals(PatternLanguageType.JAVA.getName())) {
        javaUIDCombo=cb;
      }
 else {
        TdExpression exp=tempExpressionMap.get(cb);
        if (exp.getBody() != null && !PluginConstant.EMPTY_STRING.equals(exp.getBody())) {
          TdExpression cloneExpression=cloneExpression(exp);
          expressions.add(cloneExpression);
        }
      }
    }
    EList<TaggedValue> tvs=definition.getTaggedValue();
    if (javaUIDCombo != null) {
      boolean isNewTaggedValue=true;
      for (      TaggedValue tv : tvs) {
        if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
          String newTagValue=((Text)javaUIDCombo.getData(TaggedValueHelper.CLASS_NAME_TEXT)).getText();
          needReloadJUDIJar=!StringUtils.equals(tv.getValue(),newTagValue);
          tv.setValue(newTagValue);
          isNewTaggedValue=false;
          continue;
        }
        if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
          String newTagValue=((Text)javaUIDCombo.getData(TaggedValueHelper.JAR_FILE_PATH)).getText();
          needReloadJUDIJar=!StringUtils.equals(tv.getValue(),newTagValue);
          tv.setValue(newTagValue);
        }
      }
      if (isNewTaggedValue) {
        TaggedValue classNameTV=TaggedValueHelper.createTaggedValue(TaggedValueHelper.CLASS_NAME_TEXT,((Text)javaUIDCombo.getData(TaggedValueHelper.CLASS_NAME_TEXT)).getText());
        TaggedValue jarPathTV=TaggedValueHelper.createTaggedValue(TaggedValueHelper.JAR_FILE_PATH,((Text)javaUIDCombo.getData(TaggedValueHelper.JAR_FILE_PATH)).getText());
        definition.getTaggedValue().add(classNameTV);
        definition.getTaggedValue().add(jarPathTV);
      }
    }
 else {
      TaggedValue tvCN=null;
      TaggedValue tvJARP=null;
      for (      TaggedValue tv : tvs) {
        if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
          tvCN=tv;
          continue;
        }
        if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
          tvJARP=tv;
        }
      }
      if (tvCN != null) {
        tvs.remove(tvCN);
      }
      if (tvJARP != null) {
        tvs.remove(tvJARP);
      }
    }
    if (hasAggregateExpression) {
      EList<TdExpression> aggregate1argFunctions=definition.getAggregate1argFunctions();
      aggregate1argFunctions.clear();
      for (      AggregateDateExpression ade : afExpressionMapTemp.values()) {
        TdExpression expression=ade.getAggregateExpression();
        if (expression.getBody() != null && !PluginConstant.EMPTY_STRING.equals(expression.getBody())) {
          aggregate1argFunctions.add(expression);
        }
      }
    }
    if (hasDateExpression) {
      EList<TdExpression> date1argFunctions=definition.getDate1argFunctions();
      date1argFunctions.clear();
      for (      AggregateDateExpression ade : afExpressionMapTemp.values()) {
        TdExpression expression=ade.getDateExpression();
        if (expression.getBody() != null && !PluginConstant.EMPTY_STRING.equals(expression.getBody())) {
          date1argFunctions.add(expression);
        }
      }
    }
    if (hasCharactersMapping) {
      EList<CharactersMapping> charactersMappings=definition.getCharactersMapping();
      charactersMappings.clear();
      for (      CharactersMapping cm : charactersMappingMapTemp.values()) {
        String c=cm.getCharactersToReplace();
        String r=cm.getReplacementCharacters();
        if (checkMappingString(c,r)) {
          charactersMappings.add(cm);
        }
 else {
          MessageUI.openError(""String_Node_Str"" + cm.getLanguage() + ""String_Node_Str"");
          return;
        }
      }
    }
    saveDefinitionParameters(definition);
    rc=UDIHelper.validate(definition);
  }
  if (this.definitionItem != null) {
    this.definitionItem.setIndicatorDefinition(definition);
  }
  ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().save(definitionItem,true);
  this.isDirty=false;
  if (!rc.isOk()) {
    this.isDirty=true;
    MessageDialog.openError(null,""String_Node_Str"",rc.getMessage());
  }
 else   if (UDIHelper.isJUDIValid(definition) && needReloadJUDIJar) {
    UDIHelper.clearJAVAUDIMAPByIndicatorDefinition(definition);
  }
}","@Override public void doSave(IProgressMonitor monitor){
  ReturnCode rc=canSave();
  if (!rc.isOk()) {
    return;
  }
  super.doSave(monitor);
  boolean needReloadJUDIJar=false;
  if (!checkJavaUDIBeforeSave()) {
    ((IndicatorEditor)this.getEditor()).setSaveActionButtonState(false);
    String message=DefaultMessagesImpl.getString(""String_Node_Str"");
    MessageUI.openWarning(message);
    return;
  }
  if (!checkWhithspace()) {
    MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  rc=checkBeforeSave();
  if (rc.isOk()) {
    if (definition instanceof UDIndicatorDefinition) {
      UDIndicatorDefinition def=(UDIndicatorDefinition)definition;
      EList<TdExpression> viewValidRowsExpression=def.getViewValidRowsExpression();
      viewValidRowsExpression.clear();
      viewValidRowsExpression=saveFromTempMapToDefinition(viewValidRowsExpression,tempViewValidRowsExpressionMap);
      EList<TdExpression> viewInvalidRowsExpression=def.getViewInvalidRowsExpression();
      viewInvalidRowsExpression.clear();
      viewInvalidRowsExpression=saveFromTempMapToDefinition(viewInvalidRowsExpression,tempViewInvalidRowsExpressionMap);
      EList<TdExpression> viewValidValuesExpression=def.getViewValidValuesExpression();
      viewValidValuesExpression.clear();
      viewValidValuesExpression=saveFromTempMapToDefinition(viewValidValuesExpression,tempViewValidValuesExpressionMap);
      EList<TdExpression> viewInvalidValuesExpression=def.getViewInvalidValuesExpression();
      viewInvalidValuesExpression.clear();
      viewInvalidValuesExpression=saveFromTempMapToDefinition(viewInvalidValuesExpression,tempViewInvalidValuesExpressionMap);
      EList<TdExpression> viewRowsExpression=def.getViewRowsExpression();
      viewRowsExpression.clear();
      viewRowsExpression=saveFromTempMapToDefinition(viewRowsExpression,tempViewRowsExpressionMap);
      if (category != null) {
        UDIHelper.setUDICategory(definition,category);
      }
    }
    EList<TdExpression> expressions=definition.getSqlGenericExpression();
    expressions.clear();
    Iterator<CCombo> it=tempExpressionMap.keySet().iterator();
    CCombo javaUIDCombo=null;
    while (it.hasNext()) {
      CCombo cb=it.next();
      if (cb.getText().equals(PatternLanguageType.JAVA.getName())) {
        javaUIDCombo=cb;
      }
 else {
        TdExpression exp=tempExpressionMap.get(cb);
        if (exp.getBody() != null && !PluginConstant.EMPTY_STRING.equals(exp.getBody())) {
          TdExpression cloneExpression=cloneExpression(exp);
          expressions.add(cloneExpression);
        }
      }
    }
    EList<TaggedValue> tvs=definition.getTaggedValue();
    if (javaUIDCombo != null) {
      boolean isNewTaggedValue=true;
      for (      TaggedValue tv : tvs) {
        if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
          String newTagValue=((Text)javaUIDCombo.getData(TaggedValueHelper.CLASS_NAME_TEXT)).getText();
          needReloadJUDIJar|=!StringUtils.equals(tv.getValue(),newTagValue);
          tv.setValue(newTagValue);
          isNewTaggedValue=false;
          continue;
        }
        if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
          String newTagValue=((Text)javaUIDCombo.getData(TaggedValueHelper.JAR_FILE_PATH)).getText();
          needReloadJUDIJar|=!StringUtils.equals(tv.getValue(),newTagValue);
          tv.setValue(newTagValue);
        }
      }
      if (isNewTaggedValue) {
        TaggedValue classNameTV=TaggedValueHelper.createTaggedValue(TaggedValueHelper.CLASS_NAME_TEXT,((Text)javaUIDCombo.getData(TaggedValueHelper.CLASS_NAME_TEXT)).getText());
        TaggedValue jarPathTV=TaggedValueHelper.createTaggedValue(TaggedValueHelper.JAR_FILE_PATH,((Text)javaUIDCombo.getData(TaggedValueHelper.JAR_FILE_PATH)).getText());
        definition.getTaggedValue().add(classNameTV);
        definition.getTaggedValue().add(jarPathTV);
      }
    }
 else {
      TaggedValue tvCN=null;
      TaggedValue tvJARP=null;
      for (      TaggedValue tv : tvs) {
        if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
          tvCN=tv;
          continue;
        }
        if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
          tvJARP=tv;
        }
      }
      if (tvCN != null) {
        tvs.remove(tvCN);
      }
      if (tvJARP != null) {
        tvs.remove(tvJARP);
      }
    }
    if (hasAggregateExpression) {
      EList<TdExpression> aggregate1argFunctions=definition.getAggregate1argFunctions();
      aggregate1argFunctions.clear();
      for (      AggregateDateExpression ade : afExpressionMapTemp.values()) {
        TdExpression expression=ade.getAggregateExpression();
        if (expression.getBody() != null && !PluginConstant.EMPTY_STRING.equals(expression.getBody())) {
          aggregate1argFunctions.add(expression);
        }
      }
    }
    if (hasDateExpression) {
      EList<TdExpression> date1argFunctions=definition.getDate1argFunctions();
      date1argFunctions.clear();
      for (      AggregateDateExpression ade : afExpressionMapTemp.values()) {
        TdExpression expression=ade.getDateExpression();
        if (expression.getBody() != null && !PluginConstant.EMPTY_STRING.equals(expression.getBody())) {
          date1argFunctions.add(expression);
        }
      }
    }
    if (hasCharactersMapping) {
      EList<CharactersMapping> charactersMappings=definition.getCharactersMapping();
      charactersMappings.clear();
      for (      CharactersMapping cm : charactersMappingMapTemp.values()) {
        String c=cm.getCharactersToReplace();
        String r=cm.getReplacementCharacters();
        if (checkMappingString(c,r)) {
          charactersMappings.add(cm);
        }
 else {
          MessageUI.openError(""String_Node_Str"" + cm.getLanguage() + ""String_Node_Str"");
          return;
        }
      }
    }
    saveDefinitionParameters(definition);
    rc=UDIHelper.validate(definition);
  }
  if (this.definitionItem != null) {
    this.definitionItem.setIndicatorDefinition(definition);
  }
  ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().save(definitionItem,true);
  this.isDirty=false;
  if (!rc.isOk()) {
    this.isDirty=true;
    MessageDialog.openError(null,""String_Node_Str"",rc.getMessage());
  }
 else   if (UDIHelper.isJUDIValid(definition) && needReloadJUDIJar) {
    UDIHelper.clearJAVAUDIMAPByIndicatorDefinition(definition);
  }
}",0.9998448650325784
137562,"/** 
 * DOC zshen Comment method ""deleteConnectionDependency"".
 * @param analysis
 * @return whether it has been deleteddelete the dependency between analysis and connection
 */
public boolean deleteConnectionDependency(Analysis analysis){
  Connection tdProvider=(Connection)analysis.getContext().getConnection();
  if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
    List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(analysis);
    tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
    analysis.getContext().setConnection(null);
    analysis.getClientDependency().clear();
    for (    Property clintProperty : clintDependency) {
      Item item=clintProperty.getItem();
      AElementPersistance create=ElementWriterFactory.getInstance().create(item);
      create.save(item,false);
    }
  }
  return true;
}","/** 
 * DOC zshen Comment method ""deleteConnectionDependency"".
 * @param analysis
 * @return whether it has been deleteddelete the dependency between analysis and connection
 */
public boolean deleteConnectionDependency(Analysis analysis){
  Connection tdProvider=(Connection)analysis.getContext().getConnection();
  if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
    List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(analysis);
    tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
    for (    Property clintProperty : clintDependency) {
      Item item=clintProperty.getItem();
      AElementPersistance create=ElementWriterFactory.getInstance().create(item);
      create.save(item,false);
    }
  }
  analysis.getContext().setConnection(null);
  analysis.getClientDependency().clear();
  return true;
}",0.8913773796192609
137563,"public void partDeactivated(IWorkbenchPart part){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqContextViewService.class)) {
    ITdqContextViewService tdqContextViewService=(ITdqContextViewService)GlobalServiceRegister.getDefault().getService(ITdqContextViewService.class);
    if (tdqContextViewService != null) {
      tdqContextViewService.resetContextView();
    }
  }
}","public void partDeactivated(IWorkbenchPart part){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqContextService.class)) {
    ITdqContextService tdqContextViewService=(ITdqContextService)GlobalServiceRegister.getDefault().getService(ITdqContextService.class);
    if (tdqContextViewService != null) {
      tdqContextViewService.resetContextView();
    }
  }
}",0.7046632124352331
137564,"public void partActivated(IWorkbenchPart part){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqContextViewService.class)) {
    ITdqContextViewService tdqContextViewService=(ITdqContextViewService)GlobalServiceRegister.getDefault().getService(ITdqContextViewService.class);
    if (tdqContextViewService != null) {
      tdqContextViewService.updateContextView(part);
    }
  }
}","public void partActivated(IWorkbenchPart part){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqContextService.class)) {
    ITdqContextService tdqContextViewService=(ITdqContextService)GlobalServiceRegister.getDefault().getService(ITdqContextService.class);
    if (tdqContextViewService != null) {
      tdqContextViewService.updateContextView(part);
    }
  }
}",0.7069408740359897
137565,"public void partClosed(IWorkbenchPart part){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqContextViewService.class)) {
    ITdqContextViewService tdqContextViewService=(ITdqContextViewService)GlobalServiceRegister.getDefault().getService(ITdqContextViewService.class);
    if (tdqContextViewService != null) {
      tdqContextViewService.hideContextView(part);
    }
  }
}","public void partClosed(IWorkbenchPart part){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITdqContextService.class)) {
    ITdqContextService tdqContextViewService=(ITdqContextService)GlobalServiceRegister.getDefault().getService(ITdqContextService.class);
    if (tdqContextViewService != null) {
      tdqContextViewService.hideContextView(part);
    }
  }
}",0.703125
137566,"public String getColumnText(Object element,int columnIndex){
  Map<String,String> rule=(HashMap<String,String>)element;
  String result=null;
switch (columnIndex) {
case 0:
    result=rule.get(MATCH_KEY_NAME);
  break;
case 1:
result=rule.get(INPUT_COLUMN);
break;
case 2:
result=AttributeMatcherType.getTypeByComponentValue(rule.get(MATCHING_TYPE)).getLabel();
break;
case 3:
result=rule.get(CUSTOM_MATCHER);
break;
case 4:
result=rule.get(CONFIDENCE_WEIGHT);
break;
case 5:
result=rule.get(HANDLE_NULL);
break;
}
return result;
}","public String getColumnText(Object element,int columnIndex){
  Map<String,String> rule=(HashMap<String,String>)element;
  String result=null;
switch (columnIndex) {
case 0:
    result=rule.get(MATCH_KEY_NAME);
  break;
case 1:
result=rule.get(INPUT_COLUMN);
break;
case 2:
result=rule.get(MATCHING_TYPE);
break;
case 3:
result=rule.get(CUSTOM_MATCHER);
break;
case 4:
result=rule.get(CONFIDENCE_WEIGHT);
break;
case 5:
result=rule.get(HANDLE_NULL);
break;
}
return result;
}",0.9432835820895522
137567,"/** 
 * DOC xqliu Comment method ""showAddDQRuleDialog"".
 * @param treeItem
 * @param tableIndicator
 */
private void showAddDQRuleDialog(final TreeItem treeItem,final TableIndicator tableIndicator){
  IndicatorCheckedTreeSelectionDialog dialog=new IndicatorCheckedTreeSelectionDialog(null,new DQRuleLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(ResourceManager.getLibrariesFolder());
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object whereRule : selection) {
        if (whereRule instanceof IFile) {
          IFile file=(IFile)whereRule;
          if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
            WhereRule findWhereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findWhereRule);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(AnalysisExecutorHelper.createRuleFilter());
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  dialog.create();
  IFolder whereRuleFolder=ResourceManager.getRulesFolder();
  Object[] ownedWhereRuleFiles=getOwnedWhereRuleFiles(tableIndicator,whereRuleFolder);
  dialog.setCheckedElements(ownedWhereRuleFiles);
  if (dialog.open() == Window.OK) {
    removeUncheckedWhereRuleIndicator(ownedWhereRuleFiles,dialog.getResult(),tableIndicator,whereRuleFolder);
    Object[] results=clearAddedResult(ownedWhereRuleFiles,dialog.getResult());
    for (    Object obj : results) {
      if (obj instanceof IFile) {
        IFile file=(IFile)obj;
        TableIndicatorUnit addIndicatorUnit=DQRuleUtilities.createIndicatorUnit(file,tableIndicator,getAnalysis());
        if (addIndicatorUnit != null) {
          createOneUnit(treeItem,addIndicatorUnit);
          setDirty(true);
        }
 else {
          WhereRule whereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
          MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",whereRule.getName()));
        }
      }
    }
  }
}","/** 
 * DOC xqliu Comment method ""showAddDQRuleDialog"".
 * @param treeItem
 * @param tableIndicator
 */
private void showAddDQRuleDialog(final TreeItem treeItem,final TableIndicator tableIndicator){
  IndicatorCheckedTreeSelectionDialog dialog=new IndicatorCheckedTreeSelectionDialog(null,new DQRuleLabelProvider(),new WorkbenchContentProvider());
  dialog.setInput(ResourceManager.getLibrariesFolder());
  dialog.setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=Status.OK_STATUS;
      for (      Object whereRule : selection) {
        if (whereRule instanceof IFile) {
          IFile file=(IFile)whereRule;
          if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
            WhereRule findWhereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
            boolean validStatus=TaggedValueHelper.getValidStatus(findWhereRule);
            if (!validStatus) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
            }
          }
        }
      }
      return status;
    }
  }
);
  dialog.addFilter(AnalysisUtils.createRuleFilter());
  dialog.setContainerMode(true);
  dialog.setTitle(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
  dialog.setSize(80,30);
  dialog.create();
  IFolder whereRuleFolder=ResourceManager.getRulesFolder();
  Object[] ownedWhereRuleFiles=getOwnedWhereRuleFiles(tableIndicator,whereRuleFolder);
  dialog.setCheckedElements(ownedWhereRuleFiles);
  if (dialog.open() == Window.OK) {
    removeUncheckedWhereRuleIndicator(ownedWhereRuleFiles,dialog.getResult(),tableIndicator,whereRuleFolder);
    Object[] results=clearAddedResult(ownedWhereRuleFiles,dialog.getResult());
    for (    Object obj : results) {
      if (obj instanceof IFile) {
        IFile file=(IFile)obj;
        TableIndicatorUnit addIndicatorUnit=DQRuleUtilities.createIndicatorUnit(file,tableIndicator,getAnalysis());
        if (addIndicatorUnit != null) {
          createOneUnit(treeItem,addIndicatorUnit);
          setDirty(true);
        }
 else {
          WhereRule whereRule=DQRuleResourceFileHelper.getInstance().findWhereRule(file);
          MessageUI.openError(DefaultMessagesImpl.getString(""String_Node_Str"",whereRule.getName()));
        }
      }
    }
  }
}",0.9960881202388304
137568,"public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  FillLayout layout=new FillLayout();
  container.setLayout(layout);
  cViewer=new ContainerCheckedTreeViewer(container,SWT.NONE);
  cViewer.setLabelProvider(new DQRuleLabelProvider());
  cViewer.setContentProvider(new WorkbenchContentProvider());
  cViewer.setInput(ResourceManager.getLibrariesFolder());
  cViewer.addFilter(new DQFolderFliter(true));
  cViewer.addFilter(new RuleFolderFliter(true));
  cViewer.addFilter(AnalysisExecutorHelper.createRuleFilter());
  setControl(container);
}","public void createControl(Composite parent){
  Composite container=new Composite(parent,SWT.NONE);
  FillLayout layout=new FillLayout();
  container.setLayout(layout);
  cViewer=new ContainerCheckedTreeViewer(container,SWT.NONE);
  cViewer.setLabelProvider(new DQRuleLabelProvider());
  cViewer.setContentProvider(new WorkbenchContentProvider());
  cViewer.setInput(ResourceManager.getLibrariesFolder());
  cViewer.addFilter(new DQFolderFliter(true));
  cViewer.addFilter(new RuleFolderFliter(true));
  cViewer.addFilter(AnalysisUtils.createRuleFilter());
  setControl(container);
}",0.9838022165387894
137569,"/** 
 * DOC zshen Comment method ""deleteConnectionDependency"".
 * @param analysis
 * @return whether it has been deleteddelete the dependency between analysis and connection
 */
public boolean deleteConnectionDependency(Analysis analysis){
  Connection tdProvider=(Connection)analysis.getContext().getConnection();
  if (tdProvider != null && tdProvider.getSupplierDependency().size() > 0) {
    List<Property> clintDependency=DependenciesHandler.getInstance().getClintDependency(analysis);
    tdProvider.getSupplierDependency().get(0).getClient().remove(analysis);
    for (    Property clintProperty : clintDependency) {
      Item item=clintProperty.getItem();
      AElementPersistance create=ElementWriterFactory.getInstance().create(item);
      create.save(item,false);
    }
  }
  analysis.getContext().setConnection(null);
  analysis.getClientDependency().clear();
  return true;
}","/** 
 * DOC zshen Comment method ""deleteConnectionDependency"".
 * @param analysis
 * @return whether it has been deleteddelete the dependency between analysis and connection
 */
public boolean deleteConnectionDependency(Analysis ana){
  return AnalysisUtils.deleteConnectionDependency(ana);
}",0.4091293322062553
137570,"private List<Map<String,String>> getMatchRulesFromRules(MatchRuleDefinition matchRuleDefinition){
  if (matchRuleDefinition != null && matchRuleDefinition instanceof MatchRuleDefinition) {
    List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
    for (    MatchRule matchRule : matchRuleDefinition.getMatchRules()) {
      for (      MatchKeyDefinition matchKey : matchRule.getMatchKeys()) {
        Map<String,String> pr=new HashMap<String,String>();
        pr.put(MatchRulesTableLabelProvider.MATCH_KEY_NAME,null == matchKey.getName() ? StringUtils.EMPTY : matchKey.getName());
        pr.put(MatchRulesTableLabelProvider.INPUT_COLUMN,null == matchKey.getColumn() ? StringUtils.EMPTY : matchKey.getColumn());
        pr.put(MatchRulesTableLabelProvider.MATCHING_TYPE,null == matchKey.getAlgorithm().getAlgorithmType() ? StringUtils.EMPTY : matchKey.getAlgorithm().getAlgorithmType());
        pr.put(MatchRulesTableLabelProvider.CUSTOM_MATCHER,null == matchKey.getAlgorithm().getAlgorithmParameters() ? StringUtils.EMPTY : matchKey.getAlgorithm().getAlgorithmParameters());
        pr.put(MatchRulesTableLabelProvider.CONFIDENCE_WEIGHT,String.valueOf(matchKey.getConfidenceWeight()));
        pr.put(MatchRulesTableLabelProvider.HANDLE_NULL,null == matchKey.getHandleNull() ? StringUtils.EMPTY : matchKey.getHandleNull());
        ruleValues.add(pr);
      }
    }
    return ruleValues;
  }
  return null;
}","private List<Map<String,String>> getMatchRulesFromRules(MatchRuleDefinition matchRuleDefinition){
  if (matchRuleDefinition != null) {
    List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
    for (    MatchRule matchRule : matchRuleDefinition.getMatchRules()) {
      for (      MatchKeyDefinition matchKey : matchRule.getMatchKeys()) {
        Map<String,String> pr=new HashMap<String,String>();
        pr.put(MatchRulesTableLabelProvider.MATCH_KEY_NAME,null == matchKey.getName() ? StringUtils.EMPTY : matchKey.getName());
        pr.put(MatchRulesTableLabelProvider.INPUT_COLUMN,null == matchKey.getColumn() ? StringUtils.EMPTY : matchKey.getColumn());
        pr.put(MatchRulesTableLabelProvider.MATCHING_TYPE,null == matchKey.getAlgorithm().getAlgorithmType() ? StringUtils.EMPTY : AttributeMatcherType.valueOf(matchKey.getAlgorithm().getAlgorithmType()).getComponentValue());
        pr.put(MatchRulesTableLabelProvider.CUSTOM_MATCHER,null == matchKey.getAlgorithm().getAlgorithmParameters() ? StringUtils.EMPTY : matchKey.getAlgorithm().getAlgorithmParameters());
        pr.put(MatchRulesTableLabelProvider.CONFIDENCE_WEIGHT,String.valueOf(matchKey.getConfidenceWeight()));
        pr.put(MatchRulesTableLabelProvider.HANDLE_NULL,null == matchKey.getHandleNull() ? StringUtils.EMPTY : matchKey.getHandleNull());
        ruleValues.add(pr);
      }
    }
    return ruleValues;
  }
  return null;
}",0.9636871508379888
137571,"/** 
 * DOC yyin Comment method ""addValidator"".
 */
private void addValidator(){
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=new Status(IStatus.OK,CorePlugin.PLUGIN_ID,StringUtils.EMPTY);
      if (selection != null && selection.length > 2) {
        status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      for (      Object selectObject : selection) {
        if (selectObject instanceof IFile) {
          IFile file=(IFile)selectObject;
          if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
            MatchRuleDefinition matchRule=DQRuleResourceFileHelper.getInstance().findMatchRule(file);
            if ((matchRule.getBlockKeys() == null || matchRule.getBlockKeys().size() < 1) && (matchRule.getMatchRules() == null || matchRule.getMatchRules().size() < 1)) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
              return status;
            }
            String warningMsg=StringUtils.EMPTY;
            if (T_SWOOSH_ALGORITHM.equals(matchRule.getRecordLinkageAlgorithm())) {
              warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
            }
            boolean needColumnWarning=false;
            if (dialogType != MATCHGROUP_TYPE) {
              for (              BlockKeyDefinition bkd : matchRule.getBlockKeys()) {
                for (                String col : inputColumnNames) {
                  if (!col.equalsIgnoreCase(bkd.getColumn()) && !col.equalsIgnoreCase(bkd.getName())) {
                    needColumnWarning=true;
                    break;
                  }
                }
                if (needColumnWarning) {
                  break;
                }
              }
            }
            if (dialogType != GENKEY_TYPE) {
              for (              MatchRule rule : matchRule.getMatchRules()) {
                EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
                for (                MatchKeyDefinition mkd : matchKeys) {
                  for (                  String col : inputColumnNames) {
                    if (!col.equalsIgnoreCase(mkd.getColumn()) && !col.equalsIgnoreCase(mkd.getName())) {
                      needColumnWarning=true;
                      break;
                    }
                  }
                  if (needColumnWarning) {
                    break;
                  }
                }
                if (needColumnWarning) {
                  break;
                }
              }
            }
            if (needColumnWarning) {
              warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
            }
            if (!StringUtils.EMPTY.equals(warningMsg)) {
              status=new Status(IStatus.WARNING,CorePlugin.PLUGIN_ID,warningMsg);
            }
          }
        }
      }
      return status;
    }
  }
);
}","/** 
 * DOC yyin Comment method ""addValidator"".
 */
private void addValidator(){
  setValidator(new ISelectionStatusValidator(){
    public IStatus validate(    Object[] selection){
      IStatus status=new Status(IStatus.OK,CorePlugin.PLUGIN_ID,StringUtils.EMPTY);
      if (selection != null && selection.length > 2) {
        status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      for (      Object selectObject : selection) {
        if (selectObject instanceof IFile) {
          IFile file=(IFile)selectObject;
          if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
            MatchRuleDefinition matchRule=DQRuleResourceFileHelper.getInstance().findMatchRule(file);
            if ((matchRule.getBlockKeys() == null || matchRule.getBlockKeys().size() < 1) && (matchRule.getMatchRules() == null || matchRule.getMatchRules().size() < 1)) {
              status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
              return status;
            }
            String warningMsg=StringUtils.EMPTY;
            if (T_SWOOSH_ALGORITHM.equals(matchRule.getRecordLinkageAlgorithm())) {
              warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
            }
            boolean needColumnWarning=false;
            if (dialogType != MATCHGROUP_TYPE) {
              for (              BlockKeyDefinition bkd : matchRule.getBlockKeys()) {
                boolean hasColumnMatch=false;
                for (                String col : inputColumnNames) {
                  if (col.equalsIgnoreCase(bkd.getColumn()) || col.equalsIgnoreCase(bkd.getName())) {
                    hasColumnMatch=true;
                    break;
                  }
                }
                if (!hasColumnMatch) {
                  needColumnWarning=true;
                  break;
                }
              }
            }
            if (dialogType != GENKEY_TYPE) {
              for (              MatchRule rule : matchRule.getMatchRules()) {
                EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
                for (                MatchKeyDefinition mkd : matchKeys) {
                  boolean hasColumnMatch=false;
                  for (                  String col : inputColumnNames) {
                    if (col.equalsIgnoreCase(mkd.getColumn()) || col.equalsIgnoreCase(mkd.getName())) {
                      hasColumnMatch=true;
                      break;
                    }
                  }
                  if (!hasColumnMatch) {
                    needColumnWarning=true;
                    break;
                  }
                }
                if (needColumnWarning) {
                  break;
                }
              }
            }
            if (needColumnWarning) {
              warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
            }
            if (!StringUtils.EMPTY.equals(warningMsg)) {
              status=new Status(IStatus.WARNING,CorePlugin.PLUGIN_ID,warningMsg);
            }
          }
        }
      }
      return status;
    }
  }
);
}",0.899097356544165
137572,"public IStatus validate(Object[] selection){
  IStatus status=new Status(IStatus.OK,CorePlugin.PLUGIN_ID,StringUtils.EMPTY);
  if (selection != null && selection.length > 2) {
    status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  for (  Object selectObject : selection) {
    if (selectObject instanceof IFile) {
      IFile file=(IFile)selectObject;
      if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
        MatchRuleDefinition matchRule=DQRuleResourceFileHelper.getInstance().findMatchRule(file);
        if ((matchRule.getBlockKeys() == null || matchRule.getBlockKeys().size() < 1) && (matchRule.getMatchRules() == null || matchRule.getMatchRules().size() < 1)) {
          status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
          return status;
        }
        String warningMsg=StringUtils.EMPTY;
        if (T_SWOOSH_ALGORITHM.equals(matchRule.getRecordLinkageAlgorithm())) {
          warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
        }
        boolean needColumnWarning=false;
        if (dialogType != MATCHGROUP_TYPE) {
          for (          BlockKeyDefinition bkd : matchRule.getBlockKeys()) {
            for (            String col : inputColumnNames) {
              if (!col.equalsIgnoreCase(bkd.getColumn()) && !col.equalsIgnoreCase(bkd.getName())) {
                needColumnWarning=true;
                break;
              }
            }
            if (needColumnWarning) {
              break;
            }
          }
        }
        if (dialogType != GENKEY_TYPE) {
          for (          MatchRule rule : matchRule.getMatchRules()) {
            EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
            for (            MatchKeyDefinition mkd : matchKeys) {
              for (              String col : inputColumnNames) {
                if (!col.equalsIgnoreCase(mkd.getColumn()) && !col.equalsIgnoreCase(mkd.getName())) {
                  needColumnWarning=true;
                  break;
                }
              }
              if (needColumnWarning) {
                break;
              }
            }
            if (needColumnWarning) {
              break;
            }
          }
        }
        if (needColumnWarning) {
          warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
        }
        if (!StringUtils.EMPTY.equals(warningMsg)) {
          status=new Status(IStatus.WARNING,CorePlugin.PLUGIN_ID,warningMsg);
        }
      }
    }
  }
  return status;
}","public IStatus validate(Object[] selection){
  IStatus status=new Status(IStatus.OK,CorePlugin.PLUGIN_ID,StringUtils.EMPTY);
  if (selection != null && selection.length > 2) {
    status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
  }
  for (  Object selectObject : selection) {
    if (selectObject instanceof IFile) {
      IFile file=(IFile)selectObject;
      if (FactoriesUtil.DQRULE.equals(file.getFileExtension())) {
        MatchRuleDefinition matchRule=DQRuleResourceFileHelper.getInstance().findMatchRule(file);
        if ((matchRule.getBlockKeys() == null || matchRule.getBlockKeys().size() < 1) && (matchRule.getMatchRules() == null || matchRule.getMatchRules().size() < 1)) {
          status=new Status(IStatus.ERROR,CorePlugin.PLUGIN_ID,DefaultMessagesImpl.getString(""String_Node_Str""));
          return status;
        }
        String warningMsg=StringUtils.EMPTY;
        if (T_SWOOSH_ALGORITHM.equals(matchRule.getRecordLinkageAlgorithm())) {
          warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
        }
        boolean needColumnWarning=false;
        if (dialogType != MATCHGROUP_TYPE) {
          for (          BlockKeyDefinition bkd : matchRule.getBlockKeys()) {
            boolean hasColumnMatch=false;
            for (            String col : inputColumnNames) {
              if (col.equalsIgnoreCase(bkd.getColumn()) || col.equalsIgnoreCase(bkd.getName())) {
                hasColumnMatch=true;
                break;
              }
            }
            if (!hasColumnMatch) {
              needColumnWarning=true;
              break;
            }
          }
        }
        if (dialogType != GENKEY_TYPE) {
          for (          MatchRule rule : matchRule.getMatchRules()) {
            EList<MatchKeyDefinition> matchKeys=rule.getMatchKeys();
            for (            MatchKeyDefinition mkd : matchKeys) {
              boolean hasColumnMatch=false;
              for (              String col : inputColumnNames) {
                if (col.equalsIgnoreCase(mkd.getColumn()) || col.equalsIgnoreCase(mkd.getName())) {
                  hasColumnMatch=true;
                  break;
                }
              }
              if (!hasColumnMatch) {
                needColumnWarning=true;
                break;
              }
            }
            if (needColumnWarning) {
              break;
            }
          }
        }
        if (needColumnWarning) {
          warningMsg=DefaultMessagesImpl.getString(""String_Node_Str"");
        }
        if (!StringUtils.EMPTY.equals(warningMsg)) {
          status=new Status(IStatus.WARNING,CorePlugin.PLUGIN_ID,warningMsg);
        }
      }
    }
  }
  return status;
}",0.8981343283582089
137573,"public String getColumnText(Object element,int columnIndex){
  Map<String,String> rule=(HashMap<String,String>)element;
  String result=null;
switch (columnIndex) {
case 0:
    result=rule.get(MATCH_KEY_NAME);
  break;
case 1:
result=rule.get(INPUT_COLUMN);
break;
case 2:
result=AttributeMatcherType.valueOf(rule.get(MATCHING_TYPE)).getLabel();
break;
case 3:
result=rule.get(CUSTOM_MATCHER);
break;
case 4:
result=rule.get(CONFIDENCE_WEIGHT);
break;
case 5:
result=rule.get(HANDLE_NULL);
break;
}
return result;
}","public String getColumnText(Object element,int columnIndex){
  Map<String,String> rule=(HashMap<String,String>)element;
  String result=null;
switch (columnIndex) {
case 0:
    result=rule.get(MATCH_KEY_NAME);
  break;
case 1:
result=rule.get(INPUT_COLUMN);
break;
case 2:
result=AttributeMatcherType.getTypeByComponentValue(rule.get(MATCHING_TYPE)).getLabel();
break;
case 3:
result=rule.get(CUSTOM_MATCHER);
break;
case 4:
result=rule.get(CONFIDENCE_WEIGHT);
break;
case 5:
result=rule.get(HANDLE_NULL);
break;
}
return result;
}",0.97131931166348
137574,"@Override public ModelElement initCWMResourceBuilder(){
  Analysis analysis=(Analysis)super.initCWMResourceBuilder();
  Indicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  analysis.getResults().getIndicators().add(blockKeyIndicator);
  RecordMatchingIndicator matchRuleIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDefinition=RulesFactory.eINSTANCE.createMatchRuleDefinition();
  matchRuleIndicator.setBuiltInMatchRuleDefinition(matchRuleDefinition);
  analysis.getResults().getIndicators().add(matchRuleIndicator);
  analysis.getParameters().setMaxNumberRows(Integer.valueOf(DefaultMessagesImpl.getString(""String_Node_Str"")));
  return analysis;
}","@Override public ModelElement initCWMResourceBuilder(){
  Analysis analysis=(Analysis)super.initCWMResourceBuilder();
  Indicator blockKeyIndicator=ColumnsetFactory.eINSTANCE.createBlockKeyIndicator();
  analysis.getResults().getIndicators().add(blockKeyIndicator);
  RecordMatchingIndicator matchRuleIndicator=ColumnsetFactory.eINSTANCE.createRecordMatchingIndicator();
  MatchRuleDefinition matchRuleDefinition=RulesFactory.eINSTANCE.createMatchRuleDefinition();
  matchRuleIndicator.setBuiltInMatchRuleDefinition(matchRuleDefinition);
  analysis.getResults().getIndicators().add(matchRuleIndicator);
  Integer maxRows=10000;
  try {
    maxRows=Integer.valueOf(DefaultMessagesImpl.getString(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    log.warn(DefaultMessagesImpl.getString(""String_Node_Str"",DefaultMessagesImpl.getString(""String_Node_Str"")));
  }
  analysis.getParameters().setMaxNumberRows(maxRows);
  return analysis;
}",0.8049940546967895
137575,"public List<Map<String,String>> getBlockingKeysFromFiles(Object[] files){
  List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
  for (  Object rule : files) {
    if (rule instanceof IFile) {
      MatchRuleDefinition matchRuleDefinition=DQRuleResourceFileHelper.getInstance().findMatchRule((IFile)rule);
      matchExistingColumnForBlockingKeys(matchRuleDefinition);
      ruleValues.addAll(getBlockingKeysFromRules(matchRuleDefinition));
    }
  }
  return ruleValues;
}","public List<Map<String,String>> getBlockingKeysFromFiles(Object[] files,boolean retrieveDisplayValue){
  List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
  for (  Object rule : files) {
    if (rule instanceof IFile) {
      MatchRuleDefinition matchRuleDefinition=DQRuleResourceFileHelper.getInstance().findMatchRule((IFile)rule);
      matchExistingColumnForBlockingKeys(matchRuleDefinition);
      ruleValues.addAll(getBlockingKeysFromRules(matchRuleDefinition,retrieveDisplayValue));
    }
  }
  return ruleValues;
}",0.9518304431599228
137576,"private List<Map<String,String>> getMatchRulesFromRules(MatchRuleDefinition matchRuleDefinition){
  if (matchRuleDefinition != null) {
    List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
    for (    MatchRule matchRule : matchRuleDefinition.getMatchRules()) {
      for (      MatchKeyDefinition matchKey : matchRule.getMatchKeys()) {
        Map<String,String> pr=new HashMap<String,String>();
        pr.put(MatchRulesTableLabelProvider.MATCH_KEY_NAME,null == matchKey.getName() ? StringUtils.EMPTY : matchKey.getName());
        pr.put(MatchRulesTableLabelProvider.INPUT_COLUMN,null == matchKey.getColumn() ? StringUtils.EMPTY : matchKey.getColumn());
        pr.put(MatchRulesTableLabelProvider.MATCHING_TYPE,null == matchKey.getAlgorithm().getAlgorithmType() ? StringUtils.EMPTY : AttributeMatcherType.valueOf(matchKey.getAlgorithm().getAlgorithmType()).getComponentValue());
        pr.put(MatchRulesTableLabelProvider.CUSTOM_MATCHER,null == matchKey.getAlgorithm().getAlgorithmParameters() ? StringUtils.EMPTY : matchKey.getAlgorithm().getAlgorithmParameters());
        pr.put(MatchRulesTableLabelProvider.CONFIDENCE_WEIGHT,String.valueOf(matchKey.getConfidenceWeight()));
        pr.put(MatchRulesTableLabelProvider.HANDLE_NULL,null == matchKey.getHandleNull() ? StringUtils.EMPTY : matchKey.getHandleNull());
        ruleValues.add(pr);
      }
    }
    return ruleValues;
  }
  return null;
}","private List<Map<String,String>> getMatchRulesFromRules(MatchRuleDefinition matchRuleDefinition,boolean retrieveDisplayValue){
  if (matchRuleDefinition != null) {
    List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
    for (    MatchRule matchRule : matchRuleDefinition.getMatchRules()) {
      for (      MatchKeyDefinition matchKey : matchRule.getMatchKeys()) {
        Map<String,String> pr=new HashMap<String,String>();
        pr.put(MatchRulesTableLabelProvider.MATCH_KEY_NAME,null == matchKey.getName() ? StringUtils.EMPTY : matchKey.getName());
        pr.put(MatchRulesTableLabelProvider.INPUT_COLUMN,null == matchKey.getColumn() ? StringUtils.EMPTY : matchKey.getColumn());
        if (retrieveDisplayValue) {
          pr.put(MatchRulesTableLabelProvider.MATCHING_TYPE,null == matchKey.getAlgorithm().getAlgorithmType() ? StringUtils.EMPTY : AttributeMatcherType.valueOf(matchKey.getAlgorithm().getAlgorithmType()).getLabel());
        }
 else {
          pr.put(MatchRulesTableLabelProvider.MATCHING_TYPE,null == matchKey.getAlgorithm().getAlgorithmType() ? StringUtils.EMPTY : AttributeMatcherType.valueOf(matchKey.getAlgorithm().getAlgorithmType()).getComponentValue());
        }
        pr.put(MatchRulesTableLabelProvider.CUSTOM_MATCHER,null == matchKey.getAlgorithm().getAlgorithmParameters() ? StringUtils.EMPTY : matchKey.getAlgorithm().getAlgorithmParameters());
        pr.put(MatchRulesTableLabelProvider.CONFIDENCE_WEIGHT,String.valueOf(matchKey.getConfidenceWeight()));
        if (retrieveDisplayValue) {
          pr.put(MatchRulesTableLabelProvider.HANDLE_NULL,null == matchKey.getHandleNull() ? StringUtils.EMPTY : HandleNullEnum.getTypeByValue(matchKey.getHandleNull()).getLabel());
        }
 else {
          pr.put(MatchRulesTableLabelProvider.HANDLE_NULL,null == matchKey.getHandleNull() ? StringUtils.EMPTY : matchKey.getHandleNull());
        }
        ruleValues.add(pr);
      }
    }
    return ruleValues;
  }
  return null;
}",0.8357685563997662
137577,"@Override protected Control createDialogArea(Composite parent){
  SashForm form=new SashForm(parent,SWT.SMOOTH | SWT.VERTICAL | SWT.FILL);
  form.setSize(Math.min(Display.getCurrent().getActiveShell().getSize().x,800),580);
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true,0,0);
  form.setLayoutData(data);
  Composite composite=(Composite)super.createDialogArea(form);
  getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      if (blockingKeysTable != null) {
        blockingKeysTable.setInput(getBlockingKeysFromFiles(selection.toArray()));
      }
      if (matchingRulesTable != null) {
        matchingRulesTable.setInput(getMatchRulesFromFiles(selection.toArray()));
      }
    }
  }
);
  if (dialogType == GENKEY_TYPE) {
    createSelectBlockingKeysTable(form);
    form.setWeights(new int[]{3,2});
  }
 else   if (dialogType == MATCHGROUP_TYPE) {
    createSelectMatchRulesTable(form);
    form.setWeights(new int[]{3,2});
  }
 else   if (dialogType == MATCH_ANALYSIS_TYPE) {
    createSelectBlockingKeysTable(form);
    createSelectMatchRulesTable(form);
    form.setWeights(new int[]{5,2,3});
  }
  createCheckerArea(composite);
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  SashForm form=new SashForm(parent,SWT.SMOOTH | SWT.VERTICAL | SWT.FILL);
  form.setSize(Math.min(Display.getCurrent().getActiveShell().getSize().x,800),580);
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true,0,0);
  form.setLayoutData(data);
  Composite composite=(Composite)super.createDialogArea(form);
  getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      if (blockingKeysTable != null) {
        blockingKeysTable.setInput(getBlockingKeysFromFiles(selection.toArray(),true));
      }
      if (matchingRulesTable != null) {
        matchingRulesTable.setInput(getMatchRulesFromFiles(selection.toArray(),true));
      }
    }
  }
);
  if (dialogType == GENKEY_TYPE) {
    createSelectBlockingKeysTable(form);
    form.setWeights(new int[]{3,2});
  }
 else   if (dialogType == MATCHGROUP_TYPE) {
    createSelectMatchRulesTable(form);
    form.setWeights(new int[]{3,2});
  }
 else   if (dialogType == MATCH_ANALYSIS_TYPE) {
    createSelectBlockingKeysTable(form);
    createSelectMatchRulesTable(form);
    form.setWeights(new int[]{5,2,3});
  }
  createCheckerArea(composite);
  return composite;
}",0.9962962962962963
137578,"private List<Map<String,String>> getBlockingKeysFromRules(MatchRuleDefinition matchRuleDefinition){
  if (matchRuleDefinition != null) {
    List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
    for (    BlockKeyDefinition bkDefinition : matchRuleDefinition.getBlockKeys()) {
      Map<String,String> pr=new HashMap<String,String>();
      pr.put(BlockingKeysTableLabelProvider.BLOCKING_KEY_NAME,null == bkDefinition.getName() ? StringUtils.EMPTY : bkDefinition.getName());
      pr.put(BlockingKeysTableLabelProvider.PRECOLUMN,null == bkDefinition.getColumn() ? StringUtils.EMPTY : bkDefinition.getColumn());
      pr.put(BlockingKeysTableLabelProvider.PRE_ALGO,null == bkDefinition.getPreAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPreAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.PRE_VALUE,null == bkDefinition.getPreAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPreAlgorithm().getAlgorithmParameters());
      pr.put(BlockingKeysTableLabelProvider.KEY_ALGO,null == bkDefinition.getAlgorithm() ? StringUtils.EMPTY : bkDefinition.getAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.KEY_VALUE,null == bkDefinition.getAlgorithm() ? StringUtils.EMPTY : bkDefinition.getAlgorithm().getAlgorithmParameters());
      pr.put(BlockingKeysTableLabelProvider.POST_ALGO,null == bkDefinition.getPostAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPostAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.POST_VALUE,null == bkDefinition.getPostAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPostAlgorithm().getAlgorithmParameters());
      ruleValues.add(pr);
    }
    return ruleValues;
  }
  return null;
}","private List<Map<String,String>> getBlockingKeysFromRules(MatchRuleDefinition matchRuleDefinition,boolean retrieveDisplayValue){
  if (matchRuleDefinition != null) {
    List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
    for (    BlockKeyDefinition bkDefinition : matchRuleDefinition.getBlockKeys()) {
      Map<String,String> pr=new HashMap<String,String>();
      pr.put(BlockingKeysTableLabelProvider.BLOCKING_KEY_NAME,null == bkDefinition.getName() ? StringUtils.EMPTY : bkDefinition.getName());
      pr.put(BlockingKeysTableLabelProvider.PRECOLUMN,null == bkDefinition.getColumn() ? StringUtils.EMPTY : bkDefinition.getColumn());
      pr.put(BlockingKeysTableLabelProvider.PRE_ALGO,null == bkDefinition.getPreAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPreAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.PRE_VALUE,null == bkDefinition.getPreAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPreAlgorithm().getAlgorithmParameters());
      pr.put(BlockingKeysTableLabelProvider.KEY_ALGO,null == bkDefinition.getAlgorithm() ? StringUtils.EMPTY : bkDefinition.getAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.KEY_VALUE,null == bkDefinition.getAlgorithm() ? StringUtils.EMPTY : bkDefinition.getAlgorithm().getAlgorithmParameters());
      pr.put(BlockingKeysTableLabelProvider.POST_ALGO,null == bkDefinition.getPostAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPostAlgorithm().getAlgorithmType());
      pr.put(BlockingKeysTableLabelProvider.POST_VALUE,null == bkDefinition.getPostAlgorithm() ? StringUtils.EMPTY : bkDefinition.getPostAlgorithm().getAlgorithmParameters());
      ruleValues.add(pr);
    }
    return ruleValues;
  }
  return null;
}",0.9916354196711856
137579,"public void selectionChanged(SelectionChangedEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  if (blockingKeysTable != null) {
    blockingKeysTable.setInput(getBlockingKeysFromFiles(selection.toArray()));
  }
  if (matchingRulesTable != null) {
    matchingRulesTable.setInput(getMatchRulesFromFiles(selection.toArray()));
  }
}","public void selectionChanged(SelectionChangedEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  if (blockingKeysTable != null) {
    blockingKeysTable.setInput(getBlockingKeysFromFiles(selection.toArray(),true));
  }
  if (matchingRulesTable != null) {
    matchingRulesTable.setInput(getMatchRulesFromFiles(selection.toArray(),true));
  }
}",0.9867724867724867
137580,"public List<Map<String,String>> getMatchRulesFromFiles(Object[] files){
  List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
  for (  Object rule : files) {
    if (rule instanceof IFile) {
      MatchRuleDefinition matchRuleDefinition=DQRuleResourceFileHelper.getInstance().findMatchRule((IFile)rule);
      matchExistingColumnForMatchRules(matchRuleDefinition);
      ruleValues.addAll(getMatchRulesFromRules(matchRuleDefinition));
    }
  }
  return ruleValues;
}","/** 
 * DOC sizhaoliu Comment method ""getMatchRulesFromFiles"".
 * @param files
 * @param retrieveDisplayValue get the display value when this parameter is set to true, otherwise, get thecomponent value.
 * @return
 */
public List<Map<String,String>> getMatchRulesFromFiles(Object[] files,boolean retrieveDisplayValue){
  List<Map<String,String>> ruleValues=new ArrayList<Map<String,String>>();
  for (  Object rule : files) {
    if (rule instanceof IFile) {
      MatchRuleDefinition matchRuleDefinition=DQRuleResourceFileHelper.getInstance().findMatchRule((IFile)rule);
      matchExistingColumnForMatchRules(matchRuleDefinition);
      ruleValues.addAll(getMatchRulesFromRules(matchRuleDefinition,retrieveDisplayValue));
    }
  }
  return ruleValues;
}",0.7845659163987139
137581,"@Test public void testGetRefreshedDataProviderForDB2() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2Connection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  Mockito.when(mockSqlConn.getMetaData()).thenReturn(mockDatabaseMetaData);
  returnCode.setObject(mockSqlConn);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance().getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.getInstance().createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Schema> scheams=SchemaHelper.getSchemas(dbProvider.getDataPackage());
  assertTrue(scheams.size() == schenaNames.size());
  for (int index=0; index < schenaNames.size(); index++) {
    assertTrue(schenaNames.get(index).equalsIgnoreCase(scheams.get(index).getName()));
  }
}","@Test public void testGetRefreshedDataProviderForDB2() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2Connection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  Mockito.when(mockSqlConn.getMetaData()).thenReturn(mockDatabaseMetaData);
  returnCode.setObject(mockSqlConn);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Schema> scheams=SchemaHelper.getSchemas(dbProvider.getDataPackage());
  assertTrue(scheams.size() == schenaNames.size());
  for (int index=0; index < schenaNames.size(); index++) {
    assertTrue(schenaNames.get(index).equalsIgnoreCase(scheams.get(index).getName()));
  }
}",0.962976607109965
137582,"@Test public void testGetRefreshedDataProvider() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBCMysqlConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  List<String> catalogNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,true);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    catalogNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
  }
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockCatalogResults.getString(MetaDataConstants.TABLE_CAT.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockSchemaResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getDatabaseProductName()).thenReturn(EDatabaseTypeName.MYSQL.getProduct());
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance().getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(schemaPackageFilter);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Catalog> catalogs=CatalogHelper.getCatalogs(dbProvider.getDataPackage());
  assertTrue(catalogs.size() == catalogNames.size());
  for (int index=0; index < catalogNames.size(); index++) {
    assertTrue(catalogNames.get(index).equalsIgnoreCase(catalogs.get(index).getName()));
  }
}","@Test public void testGetRefreshedDataProvider() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBCMysqlConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  List<String> catalogNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,true);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    catalogNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
  }
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockCatalogResults.getString(MetaDataConstants.TABLE_CAT.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockSchemaResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getDatabaseProductName()).thenReturn(EDatabaseTypeName.MYSQL.getProduct());
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(schemaPackageFilter);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Catalog> catalogs=CatalogHelper.getCatalogs(dbProvider.getDataPackage());
  assertTrue(catalogs.size() == catalogNames.size());
  for (int index=0; index < catalogNames.size(); index++) {
    assertTrue(catalogNames.get(index).equalsIgnoreCase(catalogs.get(index).getName()));
  }
}",0.9838674983867498
137583,"@Test public void testGetRefreshedDataProviderForDB2ZOS() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2ForZOSConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DB2ForZosDataBaseMetadata.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance().getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.getInstance().createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2ZOS.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Schema> scheams=SchemaHelper.getSchemas(dbProvider.getDataPackage());
  assertTrue(scheams.size() == schenaNames.size());
  for (int index=0; index < schenaNames.size(); index++) {
    assertTrue(schenaNames.get(index).equalsIgnoreCase(scheams.get(index).getName()));
  }
}","@Test public void testGetRefreshedDataProviderForDB2ZOS() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2ForZOSConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DB2ForZosDataBaseMetadata.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  ExtractMetaDataUtils extract=Mockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance()).thenReturn(extract);
  Mockito.when(extract.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(extract.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2ZOS.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Schema> scheams=SchemaHelper.getSchemas(dbProvider.getDataPackage());
  assertTrue(scheams.size() == schenaNames.size());
  for (int index=0; index < schenaNames.size(); index++) {
    assertTrue(schenaNames.get(index).equalsIgnoreCase(scheams.get(index).getName()));
  }
}",0.962597692593971
137584,"@Override public void dispose(){
  super.dispose();
  this.currentModelElement.eResource().unload();
}","@Override public void dispose(){
  super.dispose();
  if (this.currentModelElement != null && this.currentModelElement.eResource() != null) {
    this.currentModelElement.eResource().unload();
  }
}",0.68
137585,"@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        boolean isDelete=true;
        ModelElement modEle=record.getElement();
        if (object != null) {
          if (isIndicator(modEle)) {
            mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isParserRule(modEle)) {
            mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
            isDelete=false;
          }
 else           if (isPattern(modEle)) {
            mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
            isDelete=false;
          }
        }
        if (isDelete) {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
              write(resPath,desPath);
              allCopiedFiles.add(desPath.toFile());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}","@Override protected void run(){
  try {
    for (    ItemRecord record : fRecords) {
      if (fMonitor.isCanceled()) {
        break;
      }
      Map<IPath,IPath> toImportMap=mapping(record);
      fMonitor.subTask(""String_Node_Str"" + record.getName());
      if (record.isValid()) {
        log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
        IRepositoryViewObject object=record.getConflictObject();
        boolean isDelete=true;
        ModelElement modEle=record.getElement();
        if (object != null) {
          if (isIndicatorDefinition(modEle)) {
            if (isDQRule(modEle)) {
              if (isParserRule(modEle)) {
                mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isWhereRule(modEle)) {
              }
            }
 else             if (isMatchRuleDefinition(modEle)) {
            }
 else {
              mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
              isDelete=false;
            }
          }
 else           if (isPattern(modEle)) {
            mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
            isDelete=false;
          }
        }
        if (isDelete) {
          for (          IPath resPath : toImportMap.keySet()) {
            IPath desPath=toImportMap.get(resPath);
            ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
              write(resPath,desPath);
              allCopiedFiles.add(desPath.toFile());
            }
          }
        }
      }
 else {
        for (        String error : record.getErrors()) {
          log.error(error);
        }
      }
      fMonitor.worked(1);
    }
    finish(fRecords,fMonitor);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
}",0.8409090909090909
137586,"public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicator(modEle)) {
                mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isParserRule(modEle)) {
                mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                isDelete=false;
              }
 else               if (isPattern(modEle)) {
                mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
                isDelete=false;
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}","public void write(ItemRecord[] records,IProgressMonitor monitor){
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  final ItemRecord[] fRecords=records;
  final IProgressMonitor fMonitor=monitor;
  RepositoryWorkUnit<Object> workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      try {
        for (        ItemRecord record : fRecords) {
          if (fMonitor.isCanceled()) {
            break;
          }
          Map<IPath,IPath> toImportMap=mapping(record);
          fMonitor.subTask(""String_Node_Str"" + record.getName());
          if (record.isValid()) {
            log.info(""String_Node_Str"" + record.getFile().getAbsolutePath());
            IRepositoryViewObject object=record.getConflictObject();
            boolean isDelete=true;
            ModelElement modEle=record.getElement();
            if (object != null) {
              if (isIndicatorDefinition(modEle)) {
                if (isDQRule(modEle)) {
                  if (isParserRule(modEle)) {
                    mergeParserRule(record,(TDQBusinessRuleItem)object.getProperty().getItem());
                    isDelete=false;
                  }
 else                   if (isWhereRule(modEle)) {
                  }
                }
 else                 if (isMatchRuleDefinition(modEle)) {
                }
 else {
                  mergeSystemIndicator(record,(TDQIndicatorDefinitionItem)object.getProperty().getItem());
                  isDelete=false;
                }
              }
 else               if (isPattern(modEle)) {
                mergePattern(record,(TDQPatternItem)object.getProperty().getItem());
                isDelete=false;
              }
            }
            if (isDelete) {
              for (              IPath resPath : toImportMap.keySet()) {
                IPath desPath=toImportMap.get(resPath);
                ResourceSet resourceSet=ProxyRepositoryFactory.getInstance().getRepositoryFactoryFromProvider().getResourceManager().resourceSet;
synchronized (resourceSet) {
                  write(resPath,desPath);
                  allCopiedFiles.add(desPath.toFile());
                }
              }
            }
          }
 else {
            for (            String error : record.getErrors()) {
              log.error(error);
            }
          }
          fMonitor.worked(1);
        }
        finish(fRecords,fMonitor);
      }
 catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(Boolean.TRUE);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}",0.8824232762056596
137587,"public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkConflict(record,isIndicator(record.getElement()) || isPattern(record.getElement()));
    if (!checkExisted && (isIndicator(record.getElement()) || isPattern(record.getElement()))) {
      continue;
    }
    checkDependency(record);
    if (checkExisted && record.getConflictObject() != null) {
      record.addError(DefaultMessagesImpl.getString(""String_Node_Str"",record.getName()));
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}","public ItemRecord[] populate(ItemRecord[] elements,boolean checkExisted){
  List<ItemRecord> inValidRecords=new ArrayList<ItemRecord>();
  for (  ItemRecord record : elements) {
    record.getErrors().clear();
    checkConflict(record,isIndicatorDefinition(record.getElement()) || isPattern(record.getElement()));
    if (!checkExisted && (isIndicatorDefinition(record.getElement()) || isPattern(record.getElement()))) {
      continue;
    }
    checkDependency(record);
    if (checkExisted && record.getConflictObject() != null) {
      record.addError(DefaultMessagesImpl.getString(""String_Node_Str"",record.getName()));
    }
    if (!record.isValid()) {
      inValidRecords.add(record);
    }
  }
  return inValidRecords.toArray(new ItemRecord[inValidRecords.size()]);
}",0.9869451697127938
137588,"@Override public void partClosed(IWorkbenchPart part){
  if (part instanceof SQLEditor) {
    unlockFile(part);
    super.partClosed(part);
    return;
  }
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  if (ProxyRepositoryManager.getInstance().isReadOnly() || ProxyRepositoryManager.getInstance().isEditable(item)) {
    ProxyRepositoryManager.getInstance().unLock(item);
    WorkspaceResourceHelper.refreshItem(item);
  }
 else {
    ProxyRepositoryManager.getInstance().refresh();
    CorePlugin.getDefault().refreshDQView();
  }
  super.partClosed(part);
}","@Override public void partClosed(IWorkbenchPart part){
  if (part instanceof org.eclipse.ui.internal.ViewIntroAdapterPart && part.getTitle().equals(""String_Node_Str"")) {
    IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    if (activePage != null) {
      if (activePage.getPerspective().getId().equals(IBrandingConfiguration.PERSPECTIVE_DQ_ID)) {
        CheatSheetPerspectiveAdapter.getInstance().cheetSheetInPerspective.put(IBrandingConfiguration.PERSPECTIVE_DQ_ID,true);
        CheatSheetPerspectiveAdapter.getInstance().perspectiveActivated(activePage,PlatformUI.getWorkbench().getPerspectiveRegistry().findPerspectiveWithId(IBrandingConfiguration.PERSPECTIVE_DQ_ID));
      }
    }
  }
  if (part instanceof SQLEditor) {
    unlockFile(part);
    super.partClosed(part);
    return;
  }
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  if (ProxyRepositoryManager.getInstance().isReadOnly() || ProxyRepositoryManager.getInstance().isEditable(item)) {
    ProxyRepositoryManager.getInstance().unLock(item);
    WorkspaceResourceHelper.refreshItem(item);
  }
 else {
    ProxyRepositoryManager.getInstance().refresh();
    CorePlugin.getDefault().refreshDQView();
  }
  super.partClosed(part);
}",0.6514690982776089
137589,"/** 
 * get FullPath from objectType.
 * @param objectType
 * @return
 */
private IPath getFullPathFormObjectType(ERepositoryObjectType objectType){
  IPath fullPath=null;
  if (objectType == ERepositoryObjectType.TDQ_JRAXML_ELEMENT) {
    fullPath=ResourceManager.getJRXMLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_PATTERN_REGEX) {
    fullPath=ResourceManager.getPatternRegexFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_PATTERN_SQL) {
    fullPath=ResourceManager.getPatternSQLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT) {
    fullPath=ResourceManager.getSourceFileFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_RULES_SQL) {
    fullPath=ResourceManager.getRulesSQLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS) {
    fullPath=ResourceManager.getUDIFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS) {
    fullPath=ResourceManager.getConnectionFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT) {
    fullPath=ResourceManager.getAnalysisFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_REPORT_ELEMENT) {
    fullPath=ResourceManager.getReportsFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    fullPath=ResourceManager.getFileDelimitedFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    fullPath=ResourceManager.getMDMConnectionFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_RULES_PARSER) {
    fullPath=ResourceManager.getRulesParserFolder().getFullPath();
  }
  return fullPath;
}","/** 
 * get FullPath from objectType.
 * @param objectType
 * @return
 */
private IPath getFullPathFormObjectType(ERepositoryObjectType objectType){
  IPath fullPath=null;
  if (objectType == ERepositoryObjectType.TDQ_JRAXML_ELEMENT) {
    fullPath=ResourceManager.getJRXMLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_PATTERN_REGEX) {
    fullPath=ResourceManager.getPatternRegexFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_PATTERN_SQL) {
    fullPath=ResourceManager.getPatternSQLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT) {
    fullPath=ResourceManager.getSourceFileFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_RULES_SQL) {
    fullPath=ResourceManager.getRulesSQLFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS) {
    fullPath=ResourceManager.getUDIFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS) {
    fullPath=ResourceManager.getConnectionFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT) {
    fullPath=ResourceManager.getAnalysisFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_REPORT_ELEMENT) {
    fullPath=ResourceManager.getReportsFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    fullPath=ResourceManager.getFileDelimitedFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    fullPath=ResourceManager.getMDMConnectionFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_RULES_PARSER) {
    fullPath=ResourceManager.getRulesParserFolder().getFullPath();
  }
 else   if (objectType == ERepositoryObjectType.TDQ_RULES_MATCHER) {
    fullPath=ResourceManager.getRulesMatcherFolder().getFullPath();
  }
  return fullPath;
}",0.9554238598299408
137590,"/** 
 * Method ""getTopNQuery"".
 * @param query
 * @param n
 * @return the n first row of the given query
 */
public String getTopNQuery(String query,int n){
  return query;
}","/** 
 * Method ""getTopNQuery"".
 * @param query
 * @param n
 * @return the n first row of the given query
 */
public String getTopNQuery(String query,int n){
  return query + ""String_Node_Str"" + n;
}",0.935483870967742
137591,"@Override public String getTopNQuery(String query,int n){
  Matcher m=SELECT_PATTERN.matcher(query);
  return m.replaceFirst(""String_Node_Str"" + n + ""String_Node_Str"");
}","@Override public String getTopNQuery(String query,int n){
  Matcher m=SELECT_PATTERN.matcher(query);
  return m.replaceFirst(""String_Node_Str"" + n + PluginConstant.SPACE_STRING);
}",0.9028571428571428
137592,"/** 
 * DOC yyi 2011-08-10 22246:view rows for aveagge length
 * @return average length sql statement
 */
public String getAverageLengthRows(){
  return ""String_Node_Str"";
}","/** 
 * DOC yyi 2011-08-10 22246:view rows for aveagge length
 * @return average length sql statement
 */
@Override public String getAverageLengthRows(){
  return ""String_Node_Str"";
}",0.9719101123595506
137593,"/** 
 * DOC yyin Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  DataExplorerTestHelper.initDataExplorer();
  benExp=new BenfordLawFrequencyExplorer();
  mockDbLanguage=mock(DbmsLanguage.class);
  when(mockDbLanguage.like()).thenReturn(""String_Node_Str"");
  stub(method(DbmsLanguageFactory.class,""String_Node_Str"",DataManager.class)).toReturn(mockDbLanguage);
  benfordIndicator=mock(BenfordLawFrequencyIndicator.class);
  when(benfordIndicator.eClass()).thenReturn(null);
  Analysis analysis=DataExplorerTestHelper.getAnalysis(benfordIndicator,mockDbLanguage);
  benExp.setAnalysis(analysis);
  ChartDataEntity entity=mock(ChartDataEntity.class);
  when(entity.getIndicator()).thenReturn(benfordIndicator);
  PowerMockito.mockStatic(IndicatorEnum.class);
  when(IndicatorEnum.findIndicatorEnum(benfordIndicator.eClass())).thenReturn(IndicatorEnum.BenfordLawFrequencyIndicatorEnum);
  benExp.setEnitty(entity);
  when(entity.getKey()).thenReturn(""String_Node_Str"");
  when(entity.isLabelNull()).thenReturn(false);
}","/** 
 * DOC yyin Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  DataExplorerTestHelper.initDataExplorer();
  benExp=new BenfordLawFrequencyExplorer();
  mockDbLanguage=mock(DbmsLanguage.class);
  when(mockDbLanguage.like()).thenReturn(""String_Node_Str"");
  stub(method(DbmsLanguageFactory.class,""String_Node_Str"",DataManager.class)).toReturn(mockDbLanguage);
  benfordIndicator=mock(BenfordLawFrequencyIndicator.class);
  when(benfordIndicator.eClass()).thenReturn(null);
  Analysis analysis=DataExplorerTestHelper.getAnalysis(benfordIndicator,mockDbLanguage);
  benExp.setAnalysis(analysis);
  setValueToDrillDown(""String_Node_Str"");
}",0.7663656884875847
137594,"/** 
 * when the drill down is : invalid, should find all rows which not start with 1~9,and 0. this include: null, and not digitals.
 * @return
 */
private String getInvalidClause(){
  String value=""String_Node_Str"";
  if (isSybase()) {
    return columnName + ""String_Node_Str"" + this.columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isPostGreSQL()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isTeradata()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isOracle()) {
    return columnName + ""String_Node_Str"" + ""String_Node_Str""+ columnName+ ""String_Node_Str"";
  }
 else   if (isDB2()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (isSqlServer()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isInformix()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isVertica()) {
    return columnName + ""String_Node_Str"" + ""String_Node_Str""+ columnName+ ""String_Node_Str"";
  }
  return columnName + ""String_Node_Str"" + columnName+ value;
}","/** 
 * when the drill down is : invalid, should find all rows which not start with 1~9,and 0. this include: null, and not digitals. FIXME use object language instead of if/else!!
 * @return
 */
private String getInvalidClause(){
  String value=""String_Node_Str"";
  if (isSybase()) {
    return columnName + ""String_Node_Str"" + this.columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isPostGreSQL()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isTeradata()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isOracle()) {
    return columnName + ""String_Node_Str"" + ""String_Node_Str""+ columnName+ ""String_Node_Str"";
  }
 else   if (isDB2()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (isSqlServer()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isInformix()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isVertica()) {
    return columnName + ""String_Node_Str"" + ""String_Node_Str""+ columnName+ ""String_Node_Str"";
  }
  return columnName + ""String_Node_Str"" + columnName+ value;
}",0.981747572815534
137595,"@Test public void testGetRefreshedDataProviderForDB2() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2Connection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  Mockito.when(mockSqlConn.getMetaData()).thenReturn(mockDatabaseMetaData);
  returnCode.setObject(mockSqlConn);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Schema> scheams=SchemaHelper.getSchemas(dbProvider.getDataPackage());
  assertTrue(scheams.size() == schenaNames.size());
  for (int index=0; index < schenaNames.size(); index++) {
    assertTrue(schenaNames.get(index).equalsIgnoreCase(scheams.get(index).getName()));
  }
}","@Test public void testGetRefreshedDataProviderForDB2() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2Connection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  Mockito.when(mockSqlConn.getMetaData()).thenReturn(mockDatabaseMetaData);
  returnCode.setObject(mockSqlConn);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance().getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.getInstance().createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Schema> scheams=SchemaHelper.getSchemas(dbProvider.getDataPackage());
  assertTrue(scheams.size() == schenaNames.size());
  for (int index=0; index < schenaNames.size(); index++) {
    assertTrue(schenaNames.get(index).equalsIgnoreCase(scheams.get(index).getName()));
  }
}",0.9935052885507516
137596,"@Test public void testGetRefreshedDataProvider() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBCMysqlConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  List<String> catalogNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,true);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    catalogNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
  }
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockCatalogResults.getString(MetaDataConstants.TABLE_CAT.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockSchemaResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getDatabaseProductName()).thenReturn(EDatabaseTypeName.MYSQL.getProduct());
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(schemaPackageFilter);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Catalog> catalogs=CatalogHelper.getCatalogs(dbProvider.getDataPackage());
  assertTrue(catalogs.size() == catalogNames.size());
  for (int index=0; index < catalogNames.size(); index++) {
    assertTrue(catalogNames.get(index).equalsIgnoreCase(catalogs.get(index).getName()));
  }
}","@Test public void testGetRefreshedDataProvider() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBCMysqlConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DatabaseMetaData.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  List<String> catalogNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,true);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    catalogNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
    catalogNames.add(""String_Node_Str"");
  }
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockCatalogResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockCatalogResults.getString(MetaDataConstants.TABLE_CAT.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockSchemaResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getDatabaseProductName()).thenReturn(EDatabaseTypeName.MYSQL.getProduct());
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mock(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance().getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenReturn(schemaPackageFilter);
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Catalog> catalogs=CatalogHelper.getCatalogs(dbProvider.getDataPackage());
  assertTrue(catalogs.size() == catalogNames.size());
  for (int index=0; index < catalogNames.size(); index++) {
    assertTrue(catalogNames.get(index).equalsIgnoreCase(catalogs.get(index).getName()));
  }
}",0.998471615720524
137597,"@Test public void testGetRefreshedDataProviderForDB2ZOS() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2ForZOSConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DB2ForZosDataBaseMetadata.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2ZOS.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Schema> scheams=SchemaHelper.getSchemas(dbProvider.getDataPackage());
  assertTrue(scheams.size() == schenaNames.size());
  for (int index=0; index < schenaNames.size(); index++) {
    assertTrue(schenaNames.get(index).equalsIgnoreCase(scheams.get(index).getName()));
  }
}","@Test public void testGetRefreshedDataProviderForDB2ZOS() throws SQLException {
  DatabaseConnection dbProvider=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  setJDBDB2ForZOSConnection(dbProvider);
  List<Catalog> catalogPackageFilter=new ArrayList<Catalog>();
  List<orgomg.cwm.objectmodel.core.Package> schemaPackageFilter=new ArrayList<orgomg.cwm.objectmodel.core.Package>();
  TypedReturnCode<java.sql.Connection> returnCode=new TypedReturnCode<java.sql.Connection>(true);
  java.sql.Connection mockSqlConn=Mockito.mock(java.sql.Connection.class);
  returnCode.setObject(mockSqlConn);
  DatabaseMetaData mockDatabaseMetaData=Mockito.mock(DB2ForZosDataBaseMetadata.class);
  Mockito.when(mockDatabaseMetaData.supportsCatalogsInIndexDefinitions()).thenReturn(true);
  Mockito.when(mockDatabaseMetaData.supportsSchemasInIndexDefinitions()).thenReturn(true);
  List<String> schenaNames=new ArrayList<String>();
  List<String> packageFilter=MetadataConnectionUtils.getPackageFilter(dbProvider,mockDatabaseMetaData,false);
  boolean haveFilter=false;
  if (packageFilter.size() > 0) {
    schenaNames.addAll(packageFilter);
    haveFilter=true;
  }
 else {
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
    schenaNames.add(""String_Node_Str"");
  }
  ResultSet mockSchemaResults=Mockito.mock(ResultSet.class);
  if (haveFilter) {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,false);
  }
 else {
    Mockito.when(mockSchemaResults.next()).thenReturn(true,true,true,false);
  }
  Mockito.when(mockSchemaResults.getString(MetaDataConstants.TABLE_SCHEM.name())).thenReturn(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ResultSet mockCatalogResults=Mockito.mock(ResultSet.class);
  Mockito.when(mockCatalogResults.next()).thenReturn(false);
  Mockito.when(mockDatabaseMetaData.getCatalogs()).thenReturn(mockCatalogResults);
  Mockito.when(mockDatabaseMetaData.getDriverName()).thenReturn(""String_Node_Str"");
  Mockito.when(mockDatabaseMetaData.getSchemas()).thenReturn(mockSchemaResults);
  CoreRuntimePlugin instanceMock=Mockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  Mockito.when(CoreRuntimePlugin.getInstance()).thenReturn(instanceMock);
  Mockito.when(instanceMock.getRepositoryService()).thenReturn(null);
  PowerMockito.mockStatic(ExtractMetaDataUtils.class);
  Mockito.when(ExtractMetaDataUtils.getInstance().getConnectionMetadata(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.getInstance().createDB2ForZosFakeDatabaseMetaData(mockSqlConn)).thenReturn(mockDatabaseMetaData);
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,dbProvider)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,dbProvider,false)).thenCallRealMethod();
  Mockito.when(ExtractMetaDataUtils.getInstance().getDatabaseMetaData(mockSqlConn,EDatabaseTypeName.IBMDB2ZOS.getXmlName(),false,""String_Node_Str"")).thenCallRealMethod();
  PowerMockito.mockStatic(ConnectionHelper.class);
  Set<MetadataTable> result=new HashSet<MetadataTable>();
  Mockito.when(ConnectionHelper.getTables(dbProvider)).thenReturn(result);
  Mockito.when(ConnectionHelper.addCatalogs((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Catalog>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addSchemas((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  Mockito.when(ConnectionHelper.addPackages((Collection<Schema>)Mockito.any(),(Connection)Mockito.any())).thenCallRealMethod();
  MetadataFillFactory mockMetadataFillFactory=Mockito.mock(MetadataFillFactory.class);
  PowerMockito.mockStatic(MetadataFillFactory.class);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(MetadataFillFactory.getDBInstance()).thenCallRealMethod();
  Mockito.when(MetadataFillFactory.getDBInstance()).thenReturn(mockMetadataFillFactory);
  Mockito.when(mockMetadataFillFactory.createConnection((IMetadataConnection)Mockito.any())).thenReturn(returnCode);
  Mockito.when(mockMetadataFillFactory.fillUIConnParams((IMetadataConnection)Mockito.any(),(Connection)Mockito.isNull())).thenReturn(dbProvider);
  Mockito.when(mockMetadataFillFactory.fillCatalogs((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  Mockito.when(mockMetadataFillFactory.fillSchemas((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),Mockito.anyList())).thenCallRealMethod();
  List<Schema> schemaList=new ArrayList<Schema>();
  Mockito.when(mockMetadataFillFactory.fillSchemaToCatalog((Connection)Mockito.any(),(DatabaseMetaData)Mockito.any(),(Catalog)Mockito.any(),(List<String>)Mockito.any())).thenReturn(schemaList);
  DQStructureComparer.getRefreshedDataProvider(dbProvider);
  List<Schema> scheams=SchemaHelper.getSchemas(dbProvider.getDataPackage());
  assertTrue(scheams.size() == schenaNames.size());
  for (int index=0; index < schenaNames.size(); index++) {
    assertTrue(schenaNames.get(index).equalsIgnoreCase(scheams.get(index).getName()));
  }
}",0.9934383202099738
137598,"@Test public void testGetFileExtension(){
  Assert.assertEquals(FileConstants.SQL_EXTENSION,sqlItem.getFileExtension());
}","@Test public void testGetFileExtension(){
  Assert.assertEquals(WorkspaceUtils.SQL_EXTENSION,sqlItem.getFileExtension());
}",0.9142857142857144
137599,"/** 
 * DOC bZhou Comment method ""initConnectionProperty"".
 * @param tdDataProvider
 * @return
 */
private Property initConnectionProperty(DatabaseConnection tdDataProvider,Package pack){
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  String purpose=MetadataHelper.getPurpose(tdDataProvider);
  String description=MetadataHelper.getDescription(tdDataProvider);
  String status=MetadataHelper.getDevStatus(tdDataProvider);
  connectionProperty.setLabel(tdDataProvider.getName() + ""String_Node_Str"" + pack.getName());
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setPurpose(purpose);
  connectionProperty.setDescription(description);
  connectionProperty.setStatusCode(status);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  return connectionProperty;
}","/** 
 * DOC bZhou Comment method ""initConnectionProperty"".
 * @param tdDataProvider
 * @return
 */
private Property initConnectionProperty(DatabaseConnection tdDataProvider,Package pack){
  Property connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  String purpose=MetadataHelper.getPurpose(tdDataProvider);
  String description=MetadataHelper.getDescription(tdDataProvider);
  String status=MetadataHelper.getDevStatus(tdDataProvider);
  connectionProperty.setLabel(tdDataProvider.getName());
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setPurpose(purpose);
  connectionProperty.setDescription(description);
  connectionProperty.setStatusCode(status);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  return connectionProperty;
}",0.9796814936847886
137600,"/** 
 * DOC zshen Comment method ""updateConnectionParameter"".
 * @param exportedConn
 */
private void updateConnectionParameter(DatabaseConnection exportedConn,Package pack){
  String connName=exportedConn.getName();
  exportedConn.setLabel(connName + ""String_Node_Str"" + pack.getName());
  String database=pack.getName();
  if (pack instanceof Schema) {
    Package parent=ColumnSetHelper.getParentCatalogOrSchema(pack);
    if (parent != null) {
      database=parent.getName();
    }
 else {
      database=exportedConn.getSID();
    }
    exportedConn.setUiSchema(pack.getName());
    if (EDatabaseTypeName.TERADATA.getXmlName().equalsIgnoreCase(exportedConn.getDatabaseType())) {
      if (database.isEmpty()) {
        database=pack.getName();
      }
    }
  }
  exportedConn.setSID(database);
}","/** 
 * DOC zshen Comment method ""updateConnectionParameter"".
 * @param exportedConn
 */
private void updateConnectionParameter(DatabaseConnection exportedConn,Package pack){
  String connName=exportedConn.getName();
  exportedConn.setLabel(connName + ""String_Node_Str"" + pack.getName());
  exportedConn.setName(connName + ""String_Node_Str"" + pack.getName());
  String database=pack.getName();
  if (pack instanceof Schema) {
    Package parent=ColumnSetHelper.getParentCatalogOrSchema(pack);
    if (parent != null) {
      database=parent.getName();
    }
 else {
      database=exportedConn.getSID();
    }
    exportedConn.setUiSchema(pack.getName());
    if (EDatabaseTypeName.TERADATA.getXmlName().equalsIgnoreCase(exportedConn.getDatabaseType())) {
      if (database.isEmpty()) {
        database=pack.getName();
      }
    }
  }
  exportedConn.setSID(database);
}",0.9576119402985076
137601,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.ExportConnectionToTOSAction#run()}.
 * @throws PersistenceException case1: create new connection from catalog case
 */
@Test public void testRuncase1() throws PersistenceException {
  DatabaseConnectionItem createOldConnectionItem=createConnectionItem(""String_Node_Str"",null,false,true);
  initCatalogList(createOldConnectionItem);
  List<Package> packageList=new ArrayList<Package>();
  packageList.add(catalog1);
  createAction=PowerMockito.spy(new ExportConnectionToTOSAction(packageList));
  PowerMockito.doNothing().when(createAction).openSuccessInformation();
  PowerMockito.doNothing().when(createAction).refreshViewerAndNode();
  createAction.run();
  List<IRepositoryViewObject> all=factory.getAll(ERepositoryObjectType.METADATA_CONNECTIONS,false);
  Assert.assertTrue(all.size() == 2);
  IRepositoryViewObject lastVersion=all.get(1);
  DatabaseConnectionItem item=(DatabaseConnectionItem)lastVersion.getProperty().getItem();
  Connection newConnection=item.getConnection();
  Catalog exportedCatalog=CatalogHelper.getCatalog(newConnection,catalog1.getName());
  Assert.assertTrue(newConnection.getLabel().equals(createOldConnectionItem.getConnection().getLabel() + ""String_Node_Str"" + catalog1.getName()));
  Assert.assertTrue(exportedCatalog != null);
  Assert.assertTrue(exportedCatalog != catalog1);
  factory.deleteObjectPhysical(lastVersion);
  factory.deleteObjectPhysical(all.get(0));
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.ExportConnectionToTOSAction#run()}.
 * @throws PersistenceException case1: create new connection from catalog case
 */
@Test public void testRuncase1() throws PersistenceException {
  DatabaseConnectionItem createOldConnectionItem=createConnectionItem(""String_Node_Str"",null,false,true);
  Assert.assertTrue(createOldConnectionItem.getConnection() != null);
  Assert.assertTrue(createOldConnectionItem.getConnection().eResource() != null);
  Assert.assertTrue(!createOldConnectionItem.getConnection().eIsProxy());
  initCatalogList(createOldConnectionItem);
  List<Package> packageList=new ArrayList<Package>();
  packageList.add(catalog1);
  createAction=PowerMockito.spy(new ExportConnectionToTOSAction(packageList));
  PowerMockito.doNothing().when(createAction).openSuccessInformation();
  PowerMockito.doNothing().when(createAction).refreshViewerAndNode();
  createAction.run();
  List<IRepositoryViewObject> all=factory.getAll(ERepositoryObjectType.METADATA_CONNECTIONS,false);
  Assert.assertTrue(all != null);
  Assert.assertTrue(all.size() == 2);
  IRepositoryViewObject lastVersion=all.get(1);
  DatabaseConnectionItem item=(DatabaseConnectionItem)lastVersion.getProperty().getItem();
  Connection newConnection=item.getConnection();
  Catalog exportedCatalog=CatalogHelper.getCatalog(newConnection,catalog1.getName());
  Assert.assertTrue(newConnection.getLabel().equals(createOldConnectionItem.getConnection().getLabel() + ""String_Node_Str"" + catalog1.getName()));
  Assert.assertTrue(exportedCatalog != null);
  Assert.assertTrue(exportedCatalog != catalog1);
  factory.deleteObjectPhysical(lastVersion);
  factory.deleteObjectPhysical(all.get(0));
}",0.9194048357098574
137602,"/** 
 * DOC zshen Comment method ""compareResult"".
 * @param newConnectionItem
 * @param oldConnectionItem
 */
private void compareResult(DatabaseConnectionItem newConnectionItem,DatabaseConnectionItem oldConnectionItem){
  Connection newConnection=newConnectionItem.getConnection();
  Connection oldConnection=oldConnectionItem.getConnection();
  Assert.assertTrue(newConnection != null);
  Assert.assertTrue(newConnection.eResource() != null);
  Assert.assertTrue(!newConnection.eIsProxy());
  boolean isConnUUIDSame=ResourceHelper.getUUID(newConnection).equalsIgnoreCase(ResourceHelper.getUUID(oldConnection));
  Catalog oldCatalog=CatalogHelper.getCatalog(oldConnection,""String_Node_Str"");
  Catalog newCatalog=CatalogHelper.getCatalog(newConnection,""String_Node_Str"");
  boolean isCatalogUUIDSame=ResourceHelper.getUUID(oldCatalog).equalsIgnoreCase(ResourceHelper.getUUID(newCatalog));
  Assert.assertFalse(isConnUUIDSame);
  Assert.assertFalse(isCatalogUUIDSame);
}","/** 
 * DOC zshen Comment method ""compareResult"".
 * @param newConnectionItem
 * @param oldConnectionItem
 */
private void compareResult(DatabaseConnectionItem newConnectionItem,DatabaseConnectionItem oldConnectionItem){
  Connection newConnection=newConnectionItem.getConnection();
  Connection oldConnection=oldConnectionItem.getConnection();
  Assert.assertTrue(newConnection != null);
  Assert.assertTrue(newConnection.eResource() != null);
  Assert.assertTrue(!newConnection.eIsProxy());
  boolean isConnUUIDSame=StringUtils.equalsIgnoreCase(ResourceHelper.getUUID(newConnection),ResourceHelper.getUUID(oldConnection));
  Catalog oldCatalog=CatalogHelper.getCatalog(oldConnection,""String_Node_Str"");
  Catalog newCatalog=CatalogHelper.getCatalog(newConnection,""String_Node_Str"");
  boolean isCatalogUUIDSame=StringUtils.equalsIgnoreCase(ResourceHelper.getUUID(oldCatalog),ResourceHelper.getUUID(newCatalog));
  Assert.assertFalse(isConnUUIDSame);
  Assert.assertFalse(isCatalogUUIDSame);
}",0.9511201629327902
137603,"/** 
 * DOC xqliu Comment method ""createStatement"".
 * @param connection
 * @return
 * @throws SQLException
 */
public Statement createStatement(Connection connection,int fetchSize) throws SQLException {
  Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
  statement.setFetchSize(fetchSize);
  return statement;
}","/** 
 * DOC xqliu Comment method ""createStatement"".
 * @param connection
 * @return
 * @throws SQLException
 */
public Statement createStatement(java.sql.Connection connection,int fetchSize) throws SQLException {
  Statement statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);
  statement.setFetchSize(fetchSize);
  return statement;
}",0.988110964332893
137604,"@Override public Statement createStatement(Connection connection,int fetchSize) throws SQLException {
  return connection.createStatement();
}","@Override public Statement createStatement(java.sql.Connection connection,int fetchSize) throws SQLException {
  return connection.createStatement();
}",0.969283276450512
137605,"/** 
 * DOC zqin Comment method ""getQualifiedName"".
 * @param tdDataProvider
 * @return
 */
public static String getColumnSetQualifiedName(Connection tdDataProvider,ColumnSet columnset){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tdDataProvider);
  Package catalogOrSchema=ColumnSetHelper.getParentCatalogOrSchema(columnset);
  if (catalogOrSchema == null) {
    return columnset.getName();
  }
  String catalogName=null;
  String schemaName=null;
  if (catalogOrSchema != null && RelationalPackage.eINSTANCE.getSchema().equals(catalogOrSchema.eClass())) {
    schemaName=catalogOrSchema.getName();
    Catalog parentCatalog=CatalogHelper.getParentCatalog(catalogOrSchema);
    if (parentCatalog != null) {
      catalogName=parentCatalog.getName();
    }
  }
 else {
    catalogName=catalogOrSchema.getName();
  }
  if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
    schemaName=ColumnSetHelper.getTableOwner(columnset);
  }
  return dbmsLanguage.toQualifiedName(catalogName,schemaName,columnset.getName());
}","/** 
 * DOC zqin Comment method ""getQualifiedName"".
 * @param tdDataProvider
 * @return
 */
public static String getColumnSetQualifiedName(Connection tdDataProvider,ColumnSet columnset){
  DbmsLanguage dbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tdDataProvider);
  return dbmsLanguage.getQueryColumnSetWithPrefix(columnset);
}",0.4140905823148814
137606,"@Override public void run(){
  if (modelElements[0] instanceof TdColumn) {
    TdColumn[] columns=new TdColumn[modelElements.length];
    int i=0;
    for (    ModelElement me : modelElements) {
      columns[i]=(TdColumn)me;
      ++i;
    }
    if (ColumnHelper.isFromSameTable(Arrays.asList((TdColumn[])columns))) {
      TdColumn oneColumn=columns[0];
      Connection dataprovider=ConnectionHelper.getTdDataProvider(oneColumn);
      ColumnSet columnSetOwner=ColumnHelper.getColumnOwnerAsColumnSet(oneColumn);
      String tableName=ColumnSetNameHelper.getColumnSetQualifiedName(dataprovider,columnSetOwner);
      DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(dataprovider);
      String columnClause=PluginConstant.EMPTY_STRING;
      for (      TdColumn column : columns) {
        columnClause+=language.quote(column.getName()) + PluginConstant.COMMA_STRING;
      }
      columnClause=columnClause.substring(0,columnClause.length() - 1);
      String query=""String_Node_Str"" + tableName + ""String_Node_Str""+ columnClause+ ""String_Node_Str""+ tableName;
      CorePlugin.getDefault().runInDQViewer(dataprovider,query,tableName);
    }
 else {
      MessageDialogWithToggle.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    }
  }
}","@Override public void run(){
  if (modelElements[0] instanceof TdColumn) {
    TdColumn[] columns=new TdColumn[modelElements.length];
    int i=0;
    for (    ModelElement me : modelElements) {
      columns[i]=(TdColumn)me;
      ++i;
    }
    if (ColumnHelper.isFromSameTable(Arrays.asList(columns))) {
      TdColumn oneColumn=columns[0];
      Connection dataprovider=ConnectionHelper.getTdDataProvider(oneColumn);
      ColumnSet columnSetOwner=ColumnHelper.getColumnOwnerAsColumnSet(oneColumn);
      DbmsLanguage language=DbmsLanguageFactory.createDbmsLanguage(dataprovider);
      String columnsWithPrefix=language.getQueryColumnsWithPrefix(columns);
      String columnSetName=language.getQueryColumnSetWithPrefix(columnSetOwner);
      String query=""String_Node_Str"" + columnsWithPrefix + ""String_Node_Str""+ columnSetName;
      CorePlugin.getDefault().runInDQViewer(dataprovider,query,columnSetName);
    }
 else {
      MessageDialogWithToggle.openWarning(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    }
  }
}",0.7692946058091287
137607,"public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  IMetadataConnection metadataConnection=ConvertionHelper.convert((DatabaseConnection)prevDataProvider,false,prevDataProvider.getContextName());
  Connection conn=null;
  if (mdm) {
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,null);
  }
 else {
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().createConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      dbJDBCMetadata=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,(DatabaseConnection)prevDataProvider);
      conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
      MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(conn,dbJDBCMetadata,true));
      MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(conn,dbJDBCMetadata,false));
      ConnectionUtils.closeConnection(sqlConn);
    }
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}","public static TypedReturnCode<Connection> getRefreshedDataProvider(Connection prevDataProvider){
  TypedReturnCode<Connection> returnProvider=new TypedReturnCode<Connection>();
  boolean mdm=ConnectionUtils.isMdmConnection(prevDataProvider);
  IMetadataConnection metadataConnection=ConvertionHelper.convert((DatabaseConnection)prevDataProvider,false,prevDataProvider.getContextName());
  Connection conn=null;
  if (mdm) {
    conn=MetadataFillFactory.getMDMInstance().fillUIConnParams(metadataConnection,null);
    MetadataFillFactory.getMDMInstance().fillSchemas(conn,null,null);
  }
 else {
    TypedReturnCode<?> trc=(TypedReturnCode<?>)MetadataFillFactory.getDBInstance().createConnection(metadataConnection);
    Object sqlConnObject=trc.getObject();
    DatabaseMetaData dbJDBCMetadata=null;
    if (trc.isOk() && sqlConnObject instanceof java.sql.Connection) {
      java.sql.Connection sqlConn=(java.sql.Connection)sqlConnObject;
      dbJDBCMetadata=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,(DatabaseConnection)prevDataProvider);
      conn=MetadataFillFactory.getDBInstance().fillUIConnParams(metadataConnection,null);
      MetadataFillFactory.getDBInstance().fillCatalogs(conn,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(conn,dbJDBCMetadata,true));
      MetadataFillFactory.getDBInstance().fillSchemas(conn,dbJDBCMetadata,MetadataConnectionUtils.getPackageFilter(conn,dbJDBCMetadata,false));
      ConnectionUtils.closeConnection(sqlConn);
    }
  }
  if (conn == null) {
    returnProvider.setOk(false);
  }
 else {
    returnProvider.setObject(conn);
  }
  return returnProvider;
}",0.9956923076923077
137608,"/** 
 * abstract this function from getClassDriver(String driverClassName, String url, Properties props).
 * @param driverClassName
 * @return
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
private static Driver getClassDriverFromSQLExplorer(String driverClassName) throws InstantiationException, IllegalAccessException {
  Driver driver=null;
  if (Platform.isRunning()) {
    SQLExplorerPlugin sqlExplorerPlugin=SQLExplorerPlugin.getDefault();
    if (sqlExplorerPlugin != null) {
      net.sourceforge.sqlexplorer.dbproduct.DriverManager driverModel=sqlExplorerPlugin.getDriverModel();
      try {
        Collection<ManagedDriver> drivers=driverModel.getDrivers();
        for (        ManagedDriver managedDriver : drivers) {
          LinkedList<String> jars=managedDriver.getJars();
          List<URL> urls=new ArrayList<URL>();
          for (int i=0; i < jars.size(); i++) {
            File file=new File(jars.get(i));
            if (file.exists()) {
              urls.add(file.toURI().toURL());
            }
          }
          if (!urls.isEmpty()) {
            try {
              Class<?> clazz=null;
              MyURLClassLoader cl;
              cl=new MyURLClassLoader(urls.toArray(new URL[0]));
              clazz=cl.findClass(driverClassName);
              if (clazz != null) {
                driver=(Driver)clazz.newInstance();
                MetadataConnectionUtils.getDriverCache().put(driverClassName,driver);
                ExtractMetaDataUtils.getDriverCache().put(driverClassName,new DriverShim(driver));
                return driver;
              }
            }
 catch (            ClassNotFoundException e) {
            }
          }
        }
      }
 catch (      MalformedURLException e) {
      }
    }
  }
  return driver;
}","/** 
 * abstract this function from getClassDriver(String driverClassName, String url, Properties props).
 * @param driverClassName
 * @return
 * @throws InstantiationException
 * @throws IllegalAccessException
 */
private static Driver getClassDriverFromSQLExplorer(String driverClassName) throws InstantiationException, IllegalAccessException {
  Driver driver=null;
  if (Platform.isRunning()) {
    SQLExplorerPlugin sqlExplorerPlugin=SQLExplorerPlugin.getDefault();
    if (sqlExplorerPlugin != null) {
      net.sourceforge.sqlexplorer.dbproduct.DriverManager driverModel=sqlExplorerPlugin.getDriverModel();
      try {
        Collection<ManagedDriver> drivers=driverModel.getDrivers();
        for (        ManagedDriver managedDriver : drivers) {
          LinkedList<String> jars=managedDriver.getJars();
          List<URL> urls=new ArrayList<URL>();
          for (int i=0; i < jars.size(); i++) {
            File file=new File(jars.get(i));
            if (file.exists()) {
              urls.add(file.toURI().toURL());
            }
          }
          if (!urls.isEmpty()) {
            try {
              Class<?> clazz=null;
              MyURLClassLoader cl;
              cl=new MyURLClassLoader(urls.toArray(new URL[0]));
              clazz=cl.findClass(driverClassName);
              if (clazz != null) {
                driver=(Driver)clazz.newInstance();
                MetadataConnectionUtils.getDriverCache().put(driverClassName,driver);
                ExtractMetaDataUtils.getInstance().getDriverCache().put(driverClassName,new DriverShim(driver));
                return driver;
              }
            }
 catch (            ClassNotFoundException e) {
            }
          }
        }
      }
 catch (      MalformedURLException e) {
      }
    }
  }
  return driver;
}",0.996124031007752
137609,"/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @deprecated Is Replaced By DBConnectionFiller.fillUIConnParams
 * @param dbConn
 * @return
 */
@Deprecated public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      if (sqlConn != null) {
        DatabaseMetaData dm=ExtractMetaDataUtils.getDatabaseMetaData(sqlConn,dbConn,false);
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
  }
  finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
  }
  return dbConn;
}","/** 
 * DOC xqliu Comment method ""fillDbConnectionInformation"".
 * @deprecated Is Replaced By DBConnectionFiller.fillUIConnParams
 * @param dbConn
 * @return
 */
@Deprecated public static DatabaseConnection fillDbConnectionInformation(DatabaseConnection dbConn){
  boolean noStructureExists=ConnectionHelper.getAllCatalogs(dbConn).isEmpty() && ConnectionHelper.getAllSchemas(dbConn).isEmpty();
  java.sql.Connection sqlConn=null;
  try {
    if (noStructureExists) {
      IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
      dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
      sqlConn=MetadataConnectionUtils.checkConnection(metaConnection).getObject();
      if (sqlConn != null) {
        DatabaseMetaData dm=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbConn,false);
        MetadataFillFactory.getDBInstance().fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        MetadataFillFactory.getDBInstance().fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
  }
  finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
  }
  return dbConn;
}",0.9943910256410255
137610,"/** 
 * DOC qzhang Comment method ""getClassDriver"".
 * @param driverClassName
 * @param url
 * @return
 * @throws IllegalAccessException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 */
private static Driver getClassDriver(String driverClassName,String url,Properties props) throws InstantiationException, IllegalAccessException {
  Driver driver=ExtractMetaDataUtils.getDriverCache().get(driverClassName);
  if (driver == null) {
    driver=MetadataConnectionUtils.getDriverCache().get(driverClassName);
  }
  if (driver != null) {
    return driver;
  }
  driver=getClassDriverFromSQLExplorer(driverClassName);
  if (driver != null) {
    return driver;
  }
  try {
    driver=(Driver)Class.forName(driverClassName).newInstance();
  }
 catch (  ClassNotFoundException e) {
    driver=findDriverByLibManageSystem(driverClassName,props);
  }
  return driver;
}","/** 
 * DOC qzhang Comment method ""getClassDriver"".
 * @param driverClassName
 * @param url
 * @return
 * @throws IllegalAccessException
 * @throws InstantiationException
 * @throws ClassNotFoundException
 */
private static Driver getClassDriver(String driverClassName,String url,Properties props) throws InstantiationException, IllegalAccessException {
  Driver driver=ExtractMetaDataUtils.getInstance().getDriverCache().get(driverClassName);
  if (driver == null) {
    driver=MetadataConnectionUtils.getDriverCache().get(driverClassName);
  }
  if (driver != null) {
    return driver;
  }
  driver=getClassDriverFromSQLExplorer(driverClassName);
  if (driver != null) {
    return driver;
  }
  try {
    driver=(Driver)Class.forName(driverClassName).newInstance();
  }
 catch (  ClassNotFoundException e) {
    driver=findDriverByLibManageSystem(driverClassName,props);
  }
  return driver;
}",0.9921348314606742
137611,"/** 
 * Load the driver by lib management system , which will configure the SQL Explorer driver classpath from xml.
 * @param dbType
 * @param dbVersion
 * @param driverClassName
 */
public void loadDriverByLibManageSystem(String dbType,String dbVersion,String driverClassName){
  if (dbType == null || driverClassName == null) {
    return;
  }
  DriverManager driverManager=SQLExplorerPlugin.getDefault().getDriverModel();
  ManagedDriver manDr=driverManager.getDriver(EDriverName.getId(driverClassName));
  if (manDr != null && !manDr.isDriverClassLoaded()) {
    String librariesPath=LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA);
    List<String> jarNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    Set<String> allJarPath=findAllJarPath(new File(librariesPath),jarNames);
    if (allJarPath.isEmpty()) {
      librariesPath=ExtractMetaDataUtils.getJavaLibPath();
      allJarPath=findAllJarPath(new File(librariesPath),jarNames);
    }
    if (allJarPath.isEmpty()) {
      Project currentProject=ProjectManager.getInstance().getCurrentProject();
      String projectLabel=currentProject.getTechnicalLabel();
      librariesPath=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      librariesPath=librariesPath + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS);
      allJarPath=findAllJarPath(new File(librariesPath),jarNames);
    }
    if (!allJarPath.isEmpty()) {
      manDr.getJars().clear();
      manDr.getJars().addAll(allJarPath);
      try {
        driverManager.saveDrivers();
      }
 catch (      ExplorerException e) {
        log.error(e);
      }
    }
    try {
      manDr.registerSQLDriver();
    }
 catch (    ClassNotFoundException e) {
      log.error(e);
    }
  }
}","/** 
 * Load the driver by lib management system , which will configure the SQL Explorer driver classpath from xml.
 * @param dbType
 * @param dbVersion
 * @param driverClassName
 */
public void loadDriverByLibManageSystem(String dbType,String dbVersion,String driverClassName){
  if (dbType == null || driverClassName == null) {
    return;
  }
  DriverManager driverManager=SQLExplorerPlugin.getDefault().getDriverModel();
  ManagedDriver manDr=driverManager.getDriver(EDriverName.getId(driverClassName));
  if (manDr != null && !manDr.isDriverClassLoaded()) {
    String librariesPath=LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA);
    List<String> jarNames=EDatabaseVersion4Drivers.getDrivers(dbType,dbVersion);
    Set<String> allJarPath=findAllJarPath(new File(librariesPath),jarNames);
    if (allJarPath.isEmpty()) {
      librariesPath=ExtractMetaDataUtils.getInstance().getJavaLibPath();
      allJarPath=findAllJarPath(new File(librariesPath),jarNames);
    }
    if (allJarPath.isEmpty()) {
      Project currentProject=ProjectManager.getInstance().getCurrentProject();
      String projectLabel=currentProject.getTechnicalLabel();
      librariesPath=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getPath();
      librariesPath=librariesPath + File.separatorChar + projectLabel+ File.separatorChar+ ERepositoryObjectType.getFolderName(ERepositoryObjectType.LIBS);
      allJarPath=findAllJarPath(new File(librariesPath),jarNames);
    }
    if (!allJarPath.isEmpty()) {
      manDr.getJars().clear();
      manDr.getJars().addAll(allJarPath);
      try {
        driverManager.saveDrivers();
      }
 catch (      ExplorerException e) {
        log.error(e);
      }
    }
    try {
      manDr.registerSQLDriver();
    }
 catch (    ClassNotFoundException e) {
      log.error(e);
    }
  }
}",0.9961852861035424
137612,"/** 
 * Method ""changeCatalog"".
 * @param catalogName unquoted catalog's name
 * @param connection
 * @throws SQLException
 */
protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    if (!(ConnectionUtils.isOdbcMssql(connection) || ConnectionUtils.isOdbcOracle(connection) || ConnectionUtils.isOdbcProgress(connection)|| ConnectionUtils.isOdbcTeradata(connection)|| ExtractMetaDataUtils.isHiveConnection(connection))) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(Messages.getString(""String_Node_Str"",catalogName,e.getMessage()));
  }
catch (  SQLException e) {
    return traceError(Messages.getString(""String_Node_Str"",catalogName,e.getMessage()));
  }
}","/** 
 * Method ""changeCatalog"".
 * @param catalogName unquoted catalog's name
 * @param connection
 * @throws SQLException
 */
protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    if (!(ConnectionUtils.isOdbcMssql(connection) || ConnectionUtils.isOdbcOracle(connection) || ConnectionUtils.isOdbcProgress(connection)|| ConnectionUtils.isOdbcTeradata(connection)|| ExtractMetaDataUtils.getInstance().isHiveConnection(connection))) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(Messages.getString(""String_Node_Str"",catalogName,e.getMessage()));
  }
catch (  SQLException e) {
    return traceError(Messages.getString(""String_Node_Str"",catalogName,e.getMessage()));
  }
}",0.9909443725743856
137613,"/** 
 * DOC xqliu Comment method ""canParallel"".
 * @return
 */
private boolean canParallel(Connection connection){
  try {
    @SuppressWarnings(""String_Node_Str"") DatabaseMetaData connectionMetadata=org.talend.utils.sql.ConnectionUtils.getConnectionMetadata(connection);
    if (connectionMetadata.getDriverName() != null && connectionMetadata.getDriverName().toLowerCase().startsWith(DatabaseConstant.ODBC_DRIVER_NAME)) {
      return false;
    }
    if (""String_Node_Str"".equals(connection.getMetaData().getDatabaseProductName())) {
      return false;
    }
    if (ExtractMetaDataUtils.isHiveConnection(connection)) {
      return false;
    }
  }
 catch (  SQLException e) {
    log.warn(e,e);
  }
  return this.parallel;
}","/** 
 * DOC xqliu Comment method ""canParallel"".
 * @return
 */
private boolean canParallel(Connection connection){
  try {
    @SuppressWarnings(""String_Node_Str"") DatabaseMetaData connectionMetadata=org.talend.utils.sql.ConnectionUtils.getConnectionMetadata(connection);
    if (connectionMetadata.getDriverName() != null && connectionMetadata.getDriverName().toLowerCase().startsWith(DatabaseConstant.ODBC_DRIVER_NAME)) {
      return false;
    }
    if (""String_Node_Str"".equals(connection.getMetaData().getDatabaseProductName())) {
      return false;
    }
    if (ExtractMetaDataUtils.getInstance().isHiveConnection(connection)) {
      return false;
    }
  }
 catch (  SQLException e) {
    log.warn(e,e);
  }
  return this.parallel;
}",0.9905020352781548
137614,"protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    if (!(ConnectionUtils.isOdbcMssql(connection) || ConnectionUtils.isOdbcOracle(connection) || ConnectionUtils.isOdbcProgress(connection)|| ConnectionUtils.isOdbcTeradata(connection)|| ExtractMetaDataUtils.isHiveConnection(connection))) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(Messages.getString(""String_Node_Str"",catalogName,e.getMessage()));
  }
catch (  SQLException e) {
    return traceError(Messages.getString(""String_Node_Str"",catalogName,e.getMessage()));
  }
}","protected boolean changeCatalog(String catalogName,Connection connection){
  try {
    if (!(ConnectionUtils.isOdbcMssql(connection) || ConnectionUtils.isOdbcOracle(connection) || ConnectionUtils.isOdbcProgress(connection)|| ConnectionUtils.isOdbcTeradata(connection)|| ExtractMetaDataUtils.getInstance().isHiveConnection(connection))) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  RuntimeException e) {
    return traceError(Messages.getString(""String_Node_Str"",catalogName,e.getMessage()));
  }
catch (  SQLException e) {
    return traceError(Messages.getString(""String_Node_Str"",catalogName,e.getMessage()));
  }
}",0.9891640866873064
137615,"/** 
 * Method ""selectCatalog"" attempts to set the catalog for the current connection.
 * @param catalogName the catalog to select
 * @return true if set, false if problem
 */
public boolean selectCatalog(String catalogName){
  if (connection == null) {
    return false;
  }
  try {
    if (!(ConnectionUtils.isOdbcProgress(connection) || ExtractMetaDataUtils.isHiveConnection(connection))) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  SQLException e) {
    return false;
  }
}","/** 
 * Method ""selectCatalog"" attempts to set the catalog for the current connection.
 * @param catalogName the catalog to select
 * @return true if set, false if problem
 */
public boolean selectCatalog(String catalogName){
  if (connection == null) {
    return false;
  }
  try {
    if (!(ConnectionUtils.isOdbcProgress(connection) || ExtractMetaDataUtils.getInstance().isHiveConnection(connection))) {
      connection.setCatalog(catalogName);
    }
    return true;
  }
 catch (  SQLException e) {
    return false;
  }
}",0.9865642994241842
137616,"/** 
 * DOC gdbu Comment method ""fillCatalogSchema"".
 * @deprecated Won't be used.
 * @param tdDataProvider
 */
@Deprecated protected DatabaseConnection fillCatalogSchema(IMetadataConnection newMetadataConn){
  MetadataFillFactory instance=MetadataFillFactory.getDBInstance();
  ReturnCode rc=instance.checkConnection(newMetadataConn);
  DatabaseConnection dbConn=null;
  if (rc.isOk()) {
    dbConn=(DatabaseConnection)instance.fillUIConnParams(newMetadataConn,null);
    DatabaseMetaData dbMetadata=null;
    java.sql.Connection sqlConn=null;
    try {
      if (rc instanceof TypedReturnCode) {
        Object sqlConnObject=((TypedReturnCode)rc).getObject();
        if (sqlConnObject instanceof java.sql.Connection) {
          sqlConn=(java.sql.Connection)sqlConnObject;
          dbMetadata=ExtractMetaDataUtils.getConnectionMetadata(sqlConn);
        }
      }
      List<String> packageFilterCatalog=MetadataConnectionUtils.getPackageFilter(dbConn,dbMetadata,true);
      instance.fillCatalogs(dbConn,dbMetadata,packageFilterCatalog);
      List<String> packageFilterSchema=MetadataConnectionUtils.getPackageFilter(dbConn,dbMetadata,false);
      instance.fillSchemas(dbConn,dbMetadata,packageFilterSchema);
    }
 catch (    SQLException e) {
      log.error(e,e);
    }
 finally {
      if (sqlConn != null) {
        ConnectionUtils.closeConnection(sqlConn);
      }
    }
  }
 else {
    log.error(rc.getMessage());
  }
  return dbConn;
}","/** 
 * DOC gdbu Comment method ""fillCatalogSchema"".
 * @deprecated Won't be used.
 * @param tdDataProvider
 */
@Deprecated protected DatabaseConnection fillCatalogSchema(IMetadataConnection newMetadataConn){
  MetadataFillFactory instance=MetadataFillFactory.getDBInstance();
  ReturnCode rc=instance.checkConnection(newMetadataConn);
  DatabaseConnection dbConn=null;
  if (rc.isOk()) {
    dbConn=(DatabaseConnection)instance.fillUIConnParams(newMetadataConn,null);
    DatabaseMetaData dbMetadata=null;
    java.sql.Connection sqlConn=null;
    try {
      if (rc instanceof TypedReturnCode) {
        Object sqlConnObject=((TypedReturnCode)rc).getObject();
        if (sqlConnObject instanceof java.sql.Connection) {
          sqlConn=(java.sql.Connection)sqlConnObject;
          dbMetadata=ExtractMetaDataUtils.getInstance().getConnectionMetadata(sqlConn);
        }
      }
      List<String> packageFilterCatalog=MetadataConnectionUtils.getPackageFilter(dbConn,dbMetadata,true);
      instance.fillCatalogs(dbConn,dbMetadata,packageFilterCatalog);
      List<String> packageFilterSchema=MetadataConnectionUtils.getPackageFilter(dbConn,dbMetadata,false);
      instance.fillSchemas(dbConn,dbMetadata,packageFilterSchema);
    }
 catch (    SQLException e) {
      log.error(e,e);
    }
 finally {
      if (sqlConn != null) {
        ConnectionUtils.closeConnection(sqlConn);
      }
    }
  }
 else {
    log.error(rc.getMessage());
  }
  return dbConn;
}",0.9951956074124916
137617,"public double getWeight(String arg0,String arg1){
  final int max=4;
  int nbIdenticalChar=Math.min(max,Math.min(arg0.length(),arg1.length()));
  for (int c=0; c < max; c++) {
    if (arg0.charAt(c) != arg1.charAt(c)) {
      nbIdenticalChar=c;
      break;
    }
  }
  return (max - nbIdenticalChar) / ((double)max);
}","@Override public double getWeight(String arg0,String arg1){
  final int max=4;
  int nbIdenticalChar=Math.min(max,Math.min(arg0.length(),arg1.length()));
  for (int c=0; c < max; c++) {
    if (arg0.charAt(c) != arg1.charAt(c)) {
      nbIdenticalChar=c;
      break;
    }
  }
  return (max - nbIdenticalChar) / ((double)max);
}",0.984567901234568
137618,"public AttributeMatcherType getMatchType(){
  return AttributeMatcherType.custom;
}","@Override public AttributeMatcherType getMatchType(){
  return AttributeMatcherType.CUSTOM;
}",0.875
137619,"@Override public AttributeMatcherType getMatchType(){
  return AttributeMatcherType.custom;
}","@Override public AttributeMatcherType getMatchType(){
  return AttributeMatcherType.CUSTOM;
}",0.935483870967742
137620,"/** 
 * DOC xqliu Comment method ""executeAnalysis"".
 * @param analysis
 * @param monitor
 * @return
 */
public static ReturnCode executeAnalysis(final Analysis analysis,IProgressMonitor monitor){
  IAnalysisExecutor analysisExecutor=getAnalysisExecutor(analysis);
  if (analysisExecutor != null) {
    analysisExecutor.setMonitor(monitor);
    ReturnCode execute=analysisExecutor.execute(analysis);
    if (Platform.isRunning()) {
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          AnaResourceFileHelper.getInstance().save(analysis);
        }
      }
);
    }
    return execute;
  }
  return new ReturnCode(Messages.getString(""String_Node_Str"",analysis.getName()),false);
}","/** 
 * DOC xqliu Comment method ""executeAnalysis"".
 * @param analysis
 * @param monitor
 * @return
 * @deprecated use {@link #executeAnalysis(TDQAnalysisItem,IProgressMonitor)} instead.
 */
@Deprecated public static ReturnCode executeAnalysis(final Analysis analysis,IProgressMonitor monitor){
  IAnalysisExecutor analysisExecutor=getAnalysisExecutor(analysis);
  if (analysisExecutor != null) {
    analysisExecutor.setMonitor(monitor);
    ReturnCode execute=analysisExecutor.execute(analysis);
    if (Platform.isRunning()) {
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          AnaResourceFileHelper.getInstance().save(analysis);
        }
      }
);
    }
    return execute;
  }
  return new ReturnCode(Messages.getString(""String_Node_Str"",analysis.getName()),false);
}",0.8814669286182056
137621,"/** 
 * DOC bZhou Comment method ""save"".
 * @param dqrule
 * @return
 */
public ReturnCode save(ModelElement element){
  AElementPersistance writer=ElementWriterFactory.getInstance().create(element);
  return writer.save(element);
}","/** 
 * DOC bZhou Comment method ""save"".
 * @param dqrule
 * @return
 * @deprecated use {@link AElementPersistance#save(org.talend.core.model.properties.Item,boolean)} class instead
 */
@Deprecated public ReturnCode save(ModelElement element){
  AElementPersistance writer=ElementWriterFactory.getInstance().create(element);
  return writer.save(element);
}",0.6247877758913413
137622,"/** 
 * DOC zhao Comment method ""testGroupQuality"".
 */
private void testGroupQuality(){
  recordGroup.initialize();
  groupingRecords.clear();
  recordGroup.setSeperateOutput(Boolean.TRUE);
  recordGroup.setIsOutputDistDetails(true);
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0.9768518573708005,Double.valueOf(rds[rds.length - 2]).doubleValue(),0d);
    }
  }
}","/** 
 * DOC zhao Comment method ""testGroupQuality"".
 */
private void testGroupQuality(){
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  groupingRecords.clear();
  recordGroup.setSeperateOutput(Boolean.TRUE);
  recordGroup.setIsOutputDistDetails(true);
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(0.9768518573708005,Double.valueOf(rds[rds.length - 2]).doubleValue(),0d);
    }
  }
}",0.825
137623,"@Test public void testDoGroup(){
  recordGroup=new AbstractRecordGrouping(){
    @Override protected void outputRow(    String row){
      System.out.println(row);
      groupingRecords.add(StringUtils.splitByWholeSeparator(row,columnDelimiter));
    }
  }
;
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  List<Map<String,String>> matchingRule=new ArrayList<Map<String,String>>();
  Map<String,String> lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  matchingRule.add(lnameRecords);
  Map<String,String> accountRecords=new HashMap<String,String>();
  accountRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(6));
  accountRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  accountRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(0.8));
  matchingRule.add(accountRecords);
  recordGroup.addMatchRule(matchingRule);
  recordGroup.initialize();
  recordGroup.setIsOutputDistDetails(true);
  recordGroup.setAcceptableThreshold(0.95f);
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(5,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(6,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(4,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    for (    String rd : rds) {
      log.info(rd + ""String_Node_Str"");
    }
  }
  testGroupQuality();
  testMatchThreshold();
}","@Test public void testDoGroup(){
  recordGroup=new AbstractRecordGrouping(){
    @Override protected void outputRow(    String row){
      System.out.println(row);
      groupingRecords.add(StringUtils.splitByWholeSeparator(row,columnDelimiter));
    }
  }
;
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  List<Map<String,String>> matchingRule=new ArrayList<Map<String,String>>();
  Map<String,String> lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  matchingRule.add(lnameRecords);
  Map<String,String> accountRecords=new HashMap<String,String>();
  accountRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(6));
  accountRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  accountRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(0.8));
  matchingRule.add(accountRecords);
  recordGroup.addMatchRule(matchingRule);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  recordGroup.setIsOutputDistDetails(true);
  recordGroup.setAcceptableThreshold(0.95f);
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(5,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(6,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(4,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    for (    String rd : rds) {
      log.info(rd + ""String_Node_Str"");
    }
  }
  testGroupQuality();
  testMatchThreshold();
}",0.939729397293973
137624,"/** 
 * DOC zhao Comment method ""testMatchThreshold"".
 */
private void testMatchThreshold(){
  List<Map<String,String>> matchingRule;
  Map<String,String> lnameRecords;
  Map<String,String> accountRecords;
  groupingRecords.clear();
  recordGroup=new AbstractRecordGrouping(){
    @Override protected void outputRow(    String row){
      System.out.println(row);
      groupingRecords.add(StringUtils.splitByWholeSeparator(row,columnDelimiter));
    }
  }
;
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  matchingRule=new ArrayList<Map<String,String>>();
  lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.95f));
  matchingRule.add(lnameRecords);
  accountRecords=new HashMap<String,String>();
  accountRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(6));
  accountRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  accountRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(0.8));
  accountRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.95f));
  matchingRule.add(accountRecords);
  recordGroup.addMatchRule(matchingRule);
  recordGroup.setIsOutputDistDetails(true);
  recordGroup.initialize();
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(5,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(6,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(4,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    for (    String rd : rds) {
      log.info(rd + ""String_Node_Str"");
    }
  }
}","/** 
 * DOC zhao Comment method ""testMatchThreshold"".
 */
private void testMatchThreshold(){
  List<Map<String,String>> matchingRule;
  Map<String,String> lnameRecords;
  Map<String,String> accountRecords;
  groupingRecords.clear();
  recordGroup=new AbstractRecordGrouping(){
    @Override protected void outputRow(    String row){
      System.out.println(row);
      groupingRecords.add(StringUtils.splitByWholeSeparator(row,columnDelimiter));
    }
  }
;
  recordGroup.setColumnDelimiter(columnDelimiter);
  recordGroup.setIsLinkToPrevious(Boolean.FALSE);
  matchingRule=new ArrayList<Map<String,String>>();
  lnameRecords=new HashMap<String,String>();
  lnameRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  lnameRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(1));
  lnameRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.95f));
  matchingRule.add(lnameRecords);
  accountRecords=new HashMap<String,String>();
  accountRecords.put(IRecordGrouping.COLUMN_IDX,String.valueOf(6));
  accountRecords.put(IRecordGrouping.MATCHING_TYPE,""String_Node_Str"");
  accountRecords.put(IRecordGrouping.CONFIDENCE_WEIGHT,String.valueOf(0.8));
  accountRecords.put(IRecordGrouping.RECORD_MATCH_THRESHOLD,String.valueOf(0.95f));
  matchingRule.add(accountRecords);
  recordGroup.addMatchRule(matchingRule);
  recordGroup.setIsOutputDistDetails(true);
  try {
    recordGroup.initialize();
  }
 catch (  InstantiationException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  IllegalAccessException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
catch (  ClassNotFoundException e) {
    log.error(e.getMessage(),e);
    Assert.fail();
  }
  try {
    for (    String[] inputRow : inputList) {
      recordGroup.doGroup(inputRow);
    }
    recordGroup.end();
  }
 catch (  IOException e) {
    log.error(e.getMessage(),e);
  }
catch (  InterruptedException e) {
    log.error(e.getMessage(),e);
  }
  for (  String[] rds : groupingRecords) {
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(5,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(6,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(4,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    if (rds[0].equals(""String_Node_Str"")) {
      Assert.assertEquals(2,Integer.valueOf(rds[rds.length - 4]).intValue());
    }
    for (    String rd : rds) {
      log.info(rd + ""String_Node_Str"");
    }
  }
}",0.944549226706903
137625,"/** 
 * DOC yyin Comment method ""getColumnName"".
 * @return
 */
private String getColumnName(){
  if (isSybase()) {
    return ""String_Node_Str"" + this.columnName + ""String_Node_Str"";
  }
 else   if (isPostGreSQL() || isTeradata()) {
    return ""String_Node_Str"" + this.columnName + ""String_Node_Str"";
  }
  return this.columnName;
}","/** 
 * DOC yyin Comment method ""getColumnName"".
 * @return
 */
private String getColumnName(){
  if (isSybase()) {
    return ""String_Node_Str"" + this.columnName + ""String_Node_Str"";
  }
 else   if (isPostGreSQL() || isTeradata()) {
    return ""String_Node_Str"" + this.columnName + ""String_Node_Str"";
  }
 else   if (isVertica()) {
    return ""String_Node_Str"" + columnName + ""String_Node_Str"";
  }
  return this.columnName;
}",0.8763157894736842
137626,"/** 
 * when the drill down is : invalid, should find all rows which not start with 1~9,and 0. this include: null, and not digitals.
 * @return
 */
private String getInvalidClause(){
  String value=""String_Node_Str"";
  if (isSybase()) {
    return columnName + ""String_Node_Str"" + this.columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isPostGreSQL()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isTeradata()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isOracle()) {
    return columnName + ""String_Node_Str"" + ""String_Node_Str""+ columnName+ ""String_Node_Str"";
  }
 else   if (isDB2()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (isSqlServer()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isInformix()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
  return columnName + ""String_Node_Str"" + columnName+ value;
}","/** 
 * when the drill down is : invalid, should find all rows which not start with 1~9,and 0. this include: null, and not digitals.
 * @return
 */
private String getInvalidClause(){
  String value=""String_Node_Str"";
  if (isSybase()) {
    return columnName + ""String_Node_Str"" + this.columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isPostGreSQL()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isTeradata()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isOracle()) {
    return columnName + ""String_Node_Str"" + ""String_Node_Str""+ columnName+ ""String_Node_Str"";
  }
 else   if (isDB2()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else   if (isSqlServer()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isInformix()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isVertica()) {
    return columnName + ""String_Node_Str"" + ""String_Node_Str""+ columnName+ ""String_Node_Str"";
  }
  return columnName + ""String_Node_Str"" + columnName+ value;
}",0.9479816895547232
137627,"/** 
 * add contextual menu for job generation.
 * @param menu
 * @param analysis
 * @param currentIndicator
 */
public static void addJobGenerationMenu(final Menu menu,final Analysis analysis,final Indicator currentIndicator){
  final Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
  final boolean isMDMAnalysis=ConnectionUtils.isMdmConnection(tdDataProvider);
  final boolean isDelimitedFileAnalysis=ConnectionUtils.isDelimitedFileConnection(tdDataProvider);
  final boolean isHiveConnection=ConnectionHelper.isHive(tdDataProvider);
  if (PluginChecker.isTDCPLoaded() && !(isMDMAnalysis || isDelimitedFileAnalysis || isHiveConnection)) {
    final IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
    if (service != null) {
      service.setIndicator(currentIndicator);
      service.setAnalysis(analysis);
      MenuItem item=null;
      if (ChartTableFactory.isDUDIndicator(currentIndicator) && AnalysisType.COLUMN_SET != analysis.getParameters().getAnalysisType()) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (ChartTableFactory.isPatternMatchingIndicator(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (ChartTableFactory.isAllMatchIndicator(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (ChartTableFactory.isPhonseNumberIndicator(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (ChartTableFactory.isDqRule(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (item != null) {
        item.setImage(ImageLib.getImage(ImageLib.ICON_PROCESS));
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            service.executeJob();
          }
        }
);
      }
    }
  }
}","/** 
 * add contextual menu for job generation.
 * @param menu
 * @param analysis
 * @param currentIndicator
 */
public static void addJobGenerationMenu(final Menu menu,final Analysis analysis,final Indicator currentIndicator){
  final Connection tdDataProvider=(Connection)analysis.getContext().getConnection();
  final boolean isMDMAnalysis=ConnectionUtils.isMdmConnection(tdDataProvider);
  final boolean isDelimitedFileAnalysis=ConnectionUtils.isDelimitedFileConnection(tdDataProvider);
  final boolean isHiveConnection=ConnectionHelper.isHive(tdDataProvider);
  final boolean isVertica=ConnectionHelper.isVertica(tdDataProvider);
  if (PluginChecker.isTDCPLoaded() && !(isMDMAnalysis || isDelimitedFileAnalysis || isHiveConnection)) {
    final IDatabaseJobService service=(IDatabaseJobService)GlobalServiceRegister.getDefault().getService(IJobService.class);
    if (service != null) {
      service.setIndicator(currentIndicator);
      service.setAnalysis(analysis);
      MenuItem item=null;
      if (ChartTableFactory.isDUDIndicator(currentIndicator) && AnalysisType.COLUMN_SET != analysis.getParameters().getAnalysisType()) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (ChartTableFactory.isPatternMatchingIndicator(currentIndicator) && !isVertica) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (ChartTableFactory.isAllMatchIndicator(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (ChartTableFactory.isPhonseNumberIndicator(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
 else       if (ChartTableFactory.isDqRule(currentIndicator)) {
        item=new MenuItem(menu,SWT.PUSH);
        item.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (item != null) {
        item.setImage(ImageLib.getImage(ImageLib.ICON_PROCESS));
        item.addSelectionListener(new SelectionAdapter(){
          @Override public void widgetSelected(          SelectionEvent e){
            service.executeJob();
          }
        }
);
      }
    }
  }
}",0.9819199311235473
137628,"protected boolean continueRun(){
  if (!Platform.isRunning()) {
    return true;
  }
  boolean ret=true;
  if (getMonitor() != null && getMonitor().isCanceled()) {
    ret=false;
  }
 else   if (this.isLowMemory) {
    ret=false;
  }
 else   if (AnalysisThreadMemoryChangeNotifier.getInstance().isUsageThresholdExceeded()) {
    this.usedMemory=AnalysisThreadMemoryChangeNotifier.convertToMB(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed());
    ret=false;
    this.isLowMemory=true;
  }
  return ret;
}","protected boolean continueRun(){
  checkContinueCount++;
  if (checkContinueCount % Evaluator.CHECK_EVERY_N_COUNT != 0) {
    return keepRunning;
  }
  if (!Platform.isRunning()) {
    return true;
  }
  if (getMonitor() != null && getMonitor().isCanceled()) {
    keepRunning=false;
  }
 else   if (this.isLowMemory) {
    keepRunning=false;
  }
 else   if (AnalysisThreadMemoryChangeNotifier.getInstance().isUsageThresholdExceeded()) {
    this.usedMemory=AnalysisThreadMemoryChangeNotifier.convertToMB(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed());
    this.isLowMemory=true;
    keepRunning=false;
  }
  return keepRunning;
}",0.7843137254901961
137629,"protected boolean continueRun(){
  if (!Platform.isRunning()) {
    return true;
  }
  boolean ret=true;
  if (monitor != null && monitor.isCanceled()) {
    ret=false;
  }
 else   if (this.isLowMemory) {
    ret=false;
  }
 else   if (AnalysisThreadMemoryChangeNotifier.getInstance().isUsageThresholdExceeded()) {
    this.usedMemory=AnalysisThreadMemoryChangeNotifier.convertToMB(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed());
    ret=false;
    this.isLowMemory=true;
  }
  return ret;
}","protected boolean continueRun(){
  checkContinueCount++;
  if (checkContinueCount % Evaluator.CHECK_EVERY_N_COUNT != 0) {
    return keepRunning;
  }
  if (!Platform.isRunning()) {
    return true;
  }
  if (monitor != null && monitor.isCanceled()) {
    keepRunning=false;
  }
 else   if (this.isLowMemory) {
    keepRunning=false;
  }
 else   if (AnalysisThreadMemoryChangeNotifier.getInstance().isUsageThresholdExceeded()) {
    this.usedMemory=AnalysisThreadMemoryChangeNotifier.convertToMB(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed());
    this.isLowMemory=true;
    keepRunning=false;
  }
  return keepRunning;
}",0.7805724197745013
137630,"protected void setUsageThreshold(long threshold){
  if (threshold <= 0) {
    tenuredGenPoll.setUsageThreshold(0);
  }
 else {
    tenuredGenPoll.setUsageThreshold(threshold);
  }
}","private void setUsageThreshold(long threshold){
  if (threshold <= 0) {
    tenuredGenPoll.setUsageThreshold(0);
  }
 else {
    tenuredGenPoll.setUsageThreshold(threshold);
  }
}",0.9777777777777776
137631,"public boolean isUsageThresholdExceeded(){
  if (!AnalysisThreadMemoryChangeNotifier.isAnaMemControl()) {
    return false;
  }
  boolean isExceeded=tenuredGenPoll.isUsageThresholdExceeded();
  if (isExceeded) {
    ManagementFactory.getMemoryMXBean().gc();
    isExceeded=tenuredGenPoll.isUsageThresholdExceeded();
  }
  return isExceeded;
}","/** 
 * Method ""isUsageThresholdExceeded"".
 * @return true when the memory control is activated and the used memory exceeds the threshold defined by the userin the preference page.
 */
public boolean isUsageThresholdExceeded(){
  if (!isThresholdControl) {
    return false;
  }
  boolean isExceeded=tenuredGenPoll.isUsageThresholdExceeded();
  if (isExceeded) {
    ManagementFactory.getMemoryMXBean().gc();
    isExceeded=tenuredGenPoll.isUsageThresholdExceeded();
  }
  return isExceeded;
}",0.7113772455089821
137632,"protected boolean initialize(){
  tenuredGenPoll=findTenuredGenPool();
  return null != tenuredGenPoll;
}","protected boolean initialize(){
  tenuredGenPoll=findTenuredGenPool();
  this.initializeThresholdsFromPreferences();
  return null != tenuredGenPoll;
}",0.8203125
137633,"protected AbstractMemoryChangeNotifier(){
  initialize();
  final MemoryMXBean mbean=ManagementFactory.getMemoryMXBean();
  final NotificationEmitter emitter=(NotificationEmitter)mbean;
  emitter.addNotificationListener(new NotificationListener(){
    public void handleNotification(    Notification n,    Object hb){
      if (n.getType().equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED)) {
        long maxMemory=tenuredGenPoll.getUsage().getMax();
        long usedMemory=tenuredGenPoll.getUsage().getUsed();
        for (        IMemoryChangeListener listener : listeners) {
          listener.onMemoryChange(maxMemory - usedMemory);
        }
      }
    }
  }
,getListenerFilter(),getListenerHandBack());
}","protected AbstractMemoryChangeNotifier(){
  initialize();
}",0.1514762516046213
137634,"/** 
 * Method ""createConnection"".
 * @param url the database url
 * @param driverClassName the Driver classname
 * @param props properties passed to the driver manager for getting the connection (normally at least a ""user"" and""password"" property should be included)
 * @return the connection
 * @throws SQLException
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws ClassNotFoundException
 * @throws IOException
 */
public static java.sql.Connection createConnection(String url,String driverClassName,Properties props) throws SQLException, InstantiationException, IllegalAccessException, ClassNotFoundException {
  Driver driver=getClassDriver(driverClassName,url,props);
  if (driver != null) {
    DriverManager.registerDriver(driver);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + driverClassName);
      log.debug(""String_Node_Str"");
      Enumeration<Driver> drivers=DriverManager.getDrivers();
      while (drivers.hasMoreElements()) {
        log.debug(drivers.nextElement());
      }
    }
    java.sql.Connection connection=null;
    if (driverClassName.equals(EDriverName.HSQLDEFAULTURL.getDbDriver())) {
      try {
        Class.forName(""String_Node_Str"");
      }
 catch (      ClassNotFoundException e) {
        log.error(e,e);
      }
      if (isTimeout()) {
        DriverManager.setLoginTimeout(LOGIN_TIMEOUT_SECOND);
      }
      connection=DriverManager.getConnection(url,props);
    }
 else {
      connection=createConnectionWithTimeout(driver,url,props);
    }
    return connection;
  }
  return null;
}","/** 
 * Method ""createConnection"".
 * @param url the database url
 * @param driverClassName the Driver classname
 * @param props properties passed to the driver manager for getting the connection (normally at least a ""user"" and""password"" property should be included)
 * @return the connection
 * @throws SQLException
 * @throws InstantiationException
 * @throws IllegalAccessException
 * @throws ClassNotFoundException
 * @throws IOException
 */
public static java.sql.Connection createConnection(String url,String driverClassName,Properties props) throws SQLException, InstantiationException, IllegalAccessException, ClassNotFoundException {
  Driver driver=getClassDriver(driverClassName,url,props);
  if (driver != null) {
    DriverManager.registerDriver(driver);
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + driverClassName);
      log.debug(""String_Node_Str"");
      Enumeration<Driver> drivers=DriverManager.getDrivers();
      while (drivers.hasMoreElements()) {
        log.debug(drivers.nextElement());
      }
    }
    java.sql.Connection connection=null;
    if (driverClassName.equals(EDatabase4DriverClassName.HSQLDB.getDriverClass())) {
      try {
        Class.forName(EDatabase4DriverClassName.HSQLDB.getDriverClass());
      }
 catch (      ClassNotFoundException e) {
        log.error(e,e);
      }
      if (isTimeout()) {
        DriverManager.setLoginTimeout(LOGIN_TIMEOUT_SECOND);
      }
      connection=DriverManager.getConnection(url,props);
    }
 else {
      connection=createConnectionWithTimeout(driver,url,props);
    }
    return connection;
  }
  return null;
}",0.9353730877302529
137635,"/** 
 * This method is used to check conectiton is avalible for analysis or report ,when analysis or report runs.
 * @param analysisDataProvider
 * @return
 */
public static ReturnCode isConnectionAvailable(Connection analysisDataProvider){
  ReturnCode returnCode=new ReturnCode();
  IMetadataConnection metadataConnection=ConvertionHelper.convert(analysisDataProvider);
  if (metadataConnection != null) {
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConnection.getDbType())) {
      try {
        HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        returnCode.setOk(true);
        return returnCode;
      }
 catch (      ClassNotFoundException e) {
        returnCode.setOk(false);
        returnCode.setMessage(e.toString());
        return returnCode;
      }
catch (      InstantiationException e) {
        returnCode.setOk(false);
        returnCode.setMessage(e.toString());
        return returnCode;
      }
catch (      IllegalAccessException e) {
        returnCode.setOk(false);
        returnCode.setMessage(e.toString());
        return returnCode;
      }
catch (      SQLException e) {
        returnCode.setOk(false);
        returnCode.setMessage(e.toString());
        return returnCode;
      }
    }
  }
  if (analysisDataProvider instanceof FileConnection) {
    FileConnection fileConn=(FileConnection)analysisDataProvider;
    if (fileConn.isContextMode()) {
      fileConn=getOriginalFileConnection(fileConn);
    }
    String filePath=fileConn.getFilePath();
    try {
      BufferedReader filePathAvalible=FileConnectionContextUtils.isFilePathAvailable(filePath,fileConn);
      if (filePathAvalible != null) {
        returnCode.setOk(true);
        return returnCode;
      }
    }
 catch (    UnsupportedEncodingException e) {
      returnCode.setOk(false);
      returnCode.setMessage(filePath);
      return returnCode;
    }
catch (    FileNotFoundException e) {
      returnCode.setOk(false);
      returnCode.setMessage(filePath);
      return returnCode;
    }
catch (    IOException e) {
      returnCode.setOk(false);
      returnCode.setMessage(filePath);
      return returnCode;
    }
  }
  Properties props=new Properties();
  String userName=JavaSqlFactory.getUsername(analysisDataProvider);
  String password=JavaSqlFactory.getPassword(analysisDataProvider);
  String url=JavaSqlFactory.getURL(analysisDataProvider);
  props.put(TaggedValueHelper.USER,userName);
  props.put(TaggedValueHelper.PASSWORD,password);
  if (analysisDataProvider instanceof MDMConnection) {
    props.put(TaggedValueHelper.UNIVERSE,ConnectionHelper.getUniverse((MDMConnection)analysisDataProvider));
    props.put(TaggedValueHelper.DATA_FILTER,ConnectionHelper.getDataFilter((MDMConnection)analysisDataProvider));
    MdmWebserviceConnection mdmWebserviceConnection=new MdmWebserviceConnection(JavaSqlFactory.getURL(analysisDataProvider),props);
    returnCode=mdmWebserviceConnection.checkDatabaseConnection();
    return returnCode;
  }
 else   if (isGeneralJdbc(analysisDataProvider)) {
    ReturnCode rcJdbc=checkGeneralJdbcJarFilePathDriverClassName((DatabaseConnection)analysisDataProvider);
    if (!rcJdbc.isOk()) {
      return rcJdbc;
    }
  }
 else   if (analysisDataProvider instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)analysisDataProvider;
    String databaseType=dbConn.getDatabaseType();
    String dbVersionString=dbConn.getDbVersionString();
    if (databaseType != null) {
      props.put(TaggedValueHelper.DBTYPE,dbConn.getDatabaseType());
    }
    if (dbVersionString != null) {
      props.put(TaggedValueHelper.DB_PRODUCT_VERSION,dbVersionString);
    }
  }
  if (isHiveEmbedded(analysisDataProvider)) {
    JavaSqlFactory.doHivePreSetup(analysisDataProvider);
  }
  returnCode=ConnectionUtils.checkConnection(url,JavaSqlFactory.getDriverClass(analysisDataProvider),props);
  return returnCode;
}","/** 
 * This method is used to check conectiton is avalible for analysis or report ,when analysis or report runs.
 * @param analysisDataProvider
 * @return
 */
public static ReturnCode isConnectionAvailable(Connection analysisDataProvider){
  ReturnCode returnCode=new ReturnCode();
  IMetadataConnection metadataConnection=ConvertionHelper.convert(analysisDataProvider);
  if (metadataConnection != null) {
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConnection.getDbType())) {
      try {
        HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        returnCode.setOk(true);
        return returnCode;
      }
 catch (      ClassNotFoundException e) {
        returnCode.setOk(false);
        returnCode.setMessage(e.toString());
        return returnCode;
      }
catch (      InstantiationException e) {
        returnCode.setOk(false);
        returnCode.setMessage(e.toString());
        return returnCode;
      }
catch (      IllegalAccessException e) {
        returnCode.setOk(false);
        returnCode.setMessage(e.toString());
        return returnCode;
      }
catch (      SQLException e) {
        returnCode.setOk(false);
        returnCode.setMessage(e.toString());
        return returnCode;
      }
    }
  }
  if (analysisDataProvider instanceof FileConnection) {
    FileConnection fileConn=(FileConnection)analysisDataProvider;
    if (fileConn.isContextMode()) {
      IRepositoryContextService service=CoreRuntimePlugin.getInstance().getRepositoryContextService();
      if (service != null) {
        fileConn=service.cloneOriginalValueConnection(fileConn);
      }
    }
    String filePath=fileConn.getFilePath();
    try {
      BufferedReader filePathAvalible=FilesUtils.isFilePathAvailable(filePath,fileConn);
      if (filePathAvalible != null) {
        returnCode.setOk(true);
        return returnCode;
      }
    }
 catch (    UnsupportedEncodingException e) {
      returnCode.setOk(false);
      returnCode.setMessage(filePath);
      return returnCode;
    }
catch (    FileNotFoundException e) {
      returnCode.setOk(false);
      returnCode.setMessage(filePath);
      return returnCode;
    }
catch (    IOException e) {
      returnCode.setOk(false);
      returnCode.setMessage(filePath);
      return returnCode;
    }
  }
  Properties props=new Properties();
  String userName=JavaSqlFactory.getUsername(analysisDataProvider);
  String password=JavaSqlFactory.getPassword(analysisDataProvider);
  String url=JavaSqlFactory.getURL(analysisDataProvider);
  props.put(TaggedValueHelper.USER,userName);
  props.put(TaggedValueHelper.PASSWORD,password);
  if (analysisDataProvider instanceof MDMConnection) {
    props.put(TaggedValueHelper.UNIVERSE,ConnectionHelper.getUniverse((MDMConnection)analysisDataProvider));
    props.put(TaggedValueHelper.DATA_FILTER,ConnectionHelper.getDataFilter((MDMConnection)analysisDataProvider));
    MdmWebserviceConnection mdmWebserviceConnection=new MdmWebserviceConnection(JavaSqlFactory.getURL(analysisDataProvider),props);
    returnCode=mdmWebserviceConnection.checkDatabaseConnection();
    return returnCode;
  }
 else   if (isGeneralJdbc(analysisDataProvider)) {
    ReturnCode rcJdbc=checkGeneralJdbcJarFilePathDriverClassName((DatabaseConnection)analysisDataProvider);
    if (!rcJdbc.isOk()) {
      return rcJdbc;
    }
  }
 else   if (analysisDataProvider instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)analysisDataProvider;
    String databaseType=dbConn.getDatabaseType();
    String dbVersionString=dbConn.getDbVersionString();
    if (databaseType != null) {
      props.put(TaggedValueHelper.DBTYPE,dbConn.getDatabaseType());
    }
    if (dbVersionString != null) {
      props.put(TaggedValueHelper.DB_PRODUCT_VERSION,dbVersionString);
    }
  }
  if (isHiveEmbedded(analysisDataProvider)) {
    JavaSqlFactory.doHivePreSetup(analysisDataProvider);
  }
  returnCode=ConnectionUtils.checkConnection(url,JavaSqlFactory.getDriverClass(analysisDataProvider),props);
  return returnCode;
}",0.9754026719940068
137636,"@Override protected ReturnCode executeSqlQuery(String sqlStatement){
  ReturnCode returnCode=new ReturnCode(true);
  if (delimitedFileconnection == null) {
    delimitedFileconnection=(DelimitedFileConnection)analysis.getContext().getConnection();
  }
  String path=AnalysisExecutorHelper.getFilePath(delimitedFileconnection);
  IPath iPath=new Path(path);
  try {
    File file=iPath.toFile();
    if (!file.exists()) {
      returnCode.setReturnCode(Messages.getString(""String_Node_Str""),false);
      return returnCode;
    }
    List<ModelElement> analysisElementList=this.analysis.getContext().getAnalysedElements();
    EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
    indicToRowMap.clear();
    List<MetadataColumn> columnElementList=new ArrayList<MetadataColumn>();
    for (int i=0; i < analysisElementList.size(); i++) {
      MetadataColumn mColumn=(MetadataColumn)analysisElementList.get(i);
      MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable(mColumn);
      columnElementList=mTable == null ? columnElementList : mTable.getColumns();
      if (!columnElementList.isEmpty()) {
        break;
      }
    }
    if (Escape.CSV.equals(delimitedFileconnection.getEscapeType())) {
      useCsvReader(file,delimitedFileconnection,analysisElementList,columnElementList,indicToRowMap);
    }
 else {
      FileInputDelimited fileInputDelimited=AnalysisExecutorHelper.createFileInputDelimited(delimitedFileconnection);
      long currentRow=AnalysisExecutorHelper.getHeadValue(delimitedFileconnection);
      while (fileInputDelimited.nextRecord()) {
        if (!continueRun()) {
          break;
        }
        currentRow++;
        int columsCount=fileInputDelimited.getColumnsCountOfCurrentRow();
        String[] rowValues=new String[columsCount];
        for (int i=0; i < columsCount; i++) {
          rowValues[i]=fileInputDelimited.get(i);
        }
        handleByARow(rowValues,currentRow,analysisElementList,columnElementList,indicToRowMap);
      }
      fileInputDelimited.close();
    }
    for (    MetadataColumn col : columnElementList) {
      List<Indicator> indicators=getIndicators(col.getLabel());
      for (      Indicator indicator : indicators) {
        if (indicator instanceof DuplicateCountIndicator) {
          AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
          if (analyzedDataSet == null) {
            analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
            indicToRowMap.put(indicator,analyzedDataSet);
            analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
            analyzedDataSet.setRecordSize(0);
          }
          addResultToIndicatorToRowMap(indicator,indicToRowMap);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return returnCode;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement){
  ReturnCode returnCode=new ReturnCode(true);
  if (delimitedFileconnection == null) {
    delimitedFileconnection=(DelimitedFileConnection)analysis.getContext().getConnection();
  }
  if (delimitedFileconnection.isContextMode()) {
    IRepositoryContextService service=CoreRuntimePlugin.getInstance().getRepositoryContextService();
    delimitedFileconnection=(DelimitedFileConnection)service.cloneOriginalValueConnection(delimitedFileconnection);
  }
  String path=AnalysisExecutorHelper.getFilePath(delimitedFileconnection);
  IPath iPath=new Path(path);
  try {
    File file=iPath.toFile();
    if (!file.exists()) {
      returnCode.setReturnCode(Messages.getString(""String_Node_Str""),false);
      return returnCode;
    }
    List<ModelElement> analysisElementList=this.analysis.getContext().getAnalysedElements();
    EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
    indicToRowMap.clear();
    List<MetadataColumn> columnElementList=new ArrayList<MetadataColumn>();
    for (int i=0; i < analysisElementList.size(); i++) {
      MetadataColumn mColumn=(MetadataColumn)analysisElementList.get(i);
      MetadataTable mTable=ColumnHelper.getColumnOwnerAsMetadataTable(mColumn);
      columnElementList=mTable == null ? columnElementList : mTable.getColumns();
      if (!columnElementList.isEmpty()) {
        break;
      }
    }
    if (Escape.CSV.equals(delimitedFileconnection.getEscapeType())) {
      useCsvReader(file,delimitedFileconnection,analysisElementList,columnElementList,indicToRowMap);
    }
 else {
      FileInputDelimited fileInputDelimited=AnalysisExecutorHelper.createFileInputDelimited(delimitedFileconnection);
      long currentRow=AnalysisExecutorHelper.getHeadValue(delimitedFileconnection);
      while (fileInputDelimited.nextRecord()) {
        if (!continueRun()) {
          break;
        }
        currentRow++;
        int columsCount=fileInputDelimited.getColumnsCountOfCurrentRow();
        String[] rowValues=new String[columsCount];
        for (int i=0; i < columsCount; i++) {
          rowValues[i]=fileInputDelimited.get(i);
        }
        handleByARow(rowValues,currentRow,analysisElementList,columnElementList,indicToRowMap);
      }
      fileInputDelimited.close();
    }
    for (    MetadataColumn col : columnElementList) {
      List<Indicator> indicators=getIndicators(col.getLabel());
      for (      Indicator indicator : indicators) {
        if (indicator instanceof DuplicateCountIndicator) {
          AnalyzedDataSet analyzedDataSet=indicToRowMap.get(indicator);
          if (analyzedDataSet == null) {
            analyzedDataSet=AnalysisFactory.eINSTANCE.createAnalyzedDataSet();
            indicToRowMap.put(indicator,analyzedDataSet);
            analyzedDataSet.setDataCount(analysis.getParameters().getMaxNumberRows());
            analyzedDataSet.setRecordSize(0);
          }
          addResultToIndicatorToRowMap(indicator,indicToRowMap);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return returnCode;
}",0.9550599201065246
137637,"/** 
 * Getter for indicatorName.
 * @return the indicatorName
 */
public String getIndicatorName(){
  Property property=PropertyHelper.getProperty(indicator.getIndicatorDefinition());
  if (property != null) {
    return property.getDisplayName();
  }
 else {
    return this.indicator.getName();
  }
}","/** 
 * Getter for indicatorName.
 * @return the indicatorName
 */
public String getIndicatorName(){
  if (indicator.getIndicatorDefinition() != null) {
    Property property=PropertyHelper.getProperty(indicator.getIndicatorDefinition());
    if (property != null) {
      return property.getDisplayName();
    }
  }
  return this.indicator.getName();
}",0.8475609756097561
137638,"/** 
 * Create SchemaRepositoryNode under CatalogRepositoryNode.
 * @param node parent CatalogRepositoryNode
 * @param metadataCatalog parent CatalogViewObject
 * @param schema the schema should to be added under the catalog
 */
private List<IRepositoryNode> createRepositoryNodeSchema(List<Schema> schemas){
  if (!schemaChildren.isEmpty()) {
    return schemaChildren;
  }
  for (  Schema schema : schemas) {
    MetadataSchemaRepositoryObject metadataSchema=new MetadataSchemaRepositoryObject(((MetadataCatalogRepositoryObject)getObject()).getViewObject(),schema);
    RepositoryNode schemaNode=new DBSchemaRepNode(metadataSchema,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
    schemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_SCHEMA);
    schemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_SCHEMA);
    metadataSchema.setRepositoryNode(schemaNode);
    schemaChildren.add(schemaNode);
  }
  return schemaChildren;
}","/** 
 * Create SchemaRepositoryNode under CatalogRepositoryNode.
 * @param node parent CatalogRepositoryNode
 * @param metadataCatalog parent CatalogViewObject
 * @param schema the schema should to be added under the catalog
 */
private List<IRepositoryNode> createRepositoryNodeSchema(List<Schema> schemas){
  if (!schemaChildren.isEmpty()) {
    return schemaChildren;
  }
  for (  Schema schema : schemas) {
    MetadataSchemaRepositoryObject metadataSchema=new MetadataSchemaRepositoryObject(((MetadataCatalogRepositoryObject)getObject()).getViewObject(),schema);
    metadataSchema.setParentCatalogObject(metadataCatalogObject);
    RepositoryNode schemaNode=new DBSchemaRepNode(metadataSchema,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
    schemaNode.setProperties(EProperties.LABEL,ERepositoryObjectType.METADATA_CON_SCHEMA);
    schemaNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_CON_SCHEMA);
    metadataSchema.setRepositoryNode(schemaNode);
    schemaChildren.add(schemaNode);
  }
  return schemaChildren;
}",0.9673590504451038
137639,"/** 
 * ADD mzhao 15750 , build dq metadata tree, get connection root node.
 */
public static List<IRepositoryNode> getConnectionRepositoryNodes(boolean withDeleted){
  RepositoryNode node=getRootNode(ERepositoryObjectType.METADATA);
  List<IRepositoryNode> connNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof DFConnectionFolderRepNode || subNode instanceof MDMConnectionFolderRepNode) {
        connNodes.addAll(getModelElementFromFolder(subNode,withDeleted));
      }
    }
  }
  return connNodes;
}","/** 
 * ADD mzhao 15750 , build dq metadata tree, get connection root node.
 */
public static List<IRepositoryNode> getConnectionRepositoryNodes(boolean withDeleted){
  RepositoryNode node=getRootNode(ERepositoryObjectType.METADATA);
  List<IRepositoryNode> connNodes=new ArrayList<IRepositoryNode>();
  if (node != null) {
    List<IRepositoryNode> childrens=node.getChildren();
    for (    IRepositoryNode subNode : childrens) {
      if (subNode instanceof DBConnectionFolderRepNode || subNode instanceof DFConnectionFolderRepNode || subNode instanceof MDMConnectionFolderRepNode) {
        connNodes.addAll(getModelElementFromFolder(subNode,withDeleted));
      }
    }
  }
  return connNodes;
}",0.9644970414201184
137640,"/** 
 * DOC zshen Comment method ""getTableViewerList"".
 * @param ctabFolder
 * @return
 */
private Collection<? extends AbstractMatchAnalysisTableViewer> getTableViewerList(){
  List<AbstractMatchAnalysisTableViewer> returnList=new ArrayList<>();
  if (matchingKeySection == null) {
    return returnList;
  }
  CTabFolder ctabFolder=matchingKeySection.getRuleFolder();
  if (ctabFolder == null || ctabFolder.getItemCount() == 0) {
    return returnList;
  }
  for (  CTabItem item : ctabFolder.getItems()) {
    MatchRuleTableComposite data=(MatchRuleTableComposite)item.getData(MatchAnalysisConstant.MATCH_RULE_TABLE_COMPOSITE);
    returnList.add(data.getTableViewer());
  }
  return returnList;
}","/** 
 * DOC zshen Comment method ""getTableViewerList"".
 * @param ctabFolder
 * @return
 */
private Collection<? extends AbstractMatchAnalysisTableViewer> getTableViewerList(){
  List<AbstractMatchAnalysisTableViewer> returnList=new ArrayList<AbstractMatchAnalysisTableViewer>();
  if (matchingKeySection == null) {
    return returnList;
  }
  CTabFolder ctabFolder=matchingKeySection.getRuleFolder();
  if (ctabFolder == null || ctabFolder.getItemCount() == 0) {
    return returnList;
  }
  for (  CTabItem item : ctabFolder.getItems()) {
    MatchRuleTableComposite data=(MatchRuleTableComposite)item.getData(MatchAnalysisConstant.MATCH_RULE_TABLE_COMPOSITE);
    returnList.add(data.getTableViewer());
  }
  return returnList;
}",0.9776536312849162
137641,"/** 
 * DOC zshen Comment method ""getTableViewerList"".
 * @param ctabFolder
 * @return
 */
private Collection<? extends AbstractMatchAnalysisTableViewer> getTableViewerList(){
  List<AbstractMatchAnalysisTableViewer> returnList=new ArrayList<>();
  if (matchingKeySection == null) {
    return returnList;
  }
  CTabFolder ctabFolder=matchingKeySection.getRuleFolder();
  if (ctabFolder == null || ctabFolder.getItemCount() == 0) {
    return returnList;
  }
  for (  CTabItem item : ctabFolder.getItems()) {
    MatchRuleTableComposite data=(MatchRuleTableComposite)item.getData(MatchAnalysisConstant.MATCH_RULE_TABLE_COMPOSITE);
    returnList.add(data.getTableViewer());
  }
  return returnList;
}","/** 
 * DOC zshen Comment method ""getTableViewerList"".
 * @param ctabFolder
 * @return
 */
private Collection<? extends AbstractMatchAnalysisTableViewer> getTableViewerList(){
  List<AbstractMatchAnalysisTableViewer> returnList=new ArrayList<AbstractMatchAnalysisTableViewer>();
  if (matchingKeySection == null) {
    return returnList;
  }
  CTabFolder ctabFolder=matchingKeySection.getRuleFolder();
  if (ctabFolder == null || ctabFolder.getItemCount() == 0) {
    return returnList;
  }
  for (  CTabItem item : ctabFolder.getItems()) {
    MatchRuleTableComposite data=(MatchRuleTableComposite)item.getData(MatchAnalysisConstant.MATCH_RULE_TABLE_COMPOSITE);
    returnList.add(data.getTableViewer());
  }
  return returnList;
}",0.9776536312849162
137642,"/** 
 * DOC yyin Comment method ""convertToList"".
 * @param asList
 * @return
 */
private List<BlockKeyDefinition> convertToList(BlockKeyDefinition[] blockArray){
  List<BlockKeyDefinition> resultList=new ArrayList<>();
  for (  BlockKeyDefinition blocKey : blockArray) {
    resultList.add(blocKey);
  }
  return resultList;
}","/** 
 * DOC yyin Comment method ""convertToList"".
 * @param asList
 * @return
 */
private List<BlockKeyDefinition> convertToList(BlockKeyDefinition[] blockArray){
  List<BlockKeyDefinition> resultList=new ArrayList<BlockKeyDefinition>();
  for (  BlockKeyDefinition blocKey : blockArray) {
    resultList.add(blocKey);
  }
  return resultList;
}",0.9731343283582088
137643,"@Override public boolean addElement(String columnName,Analysis analysis){
  if (isAddedAlready(columnName)) {
    return false;
  }
  RecordMatchingIndicator recordMatchingIndiator=MatchRuleAnlaysisUtils.getRecordMatchIndicatorFromAna(analysis);
  if (recordMatchingIndiator == null) {
    log.error(""String_Node_Str"" + analysis.getName());
    return Boolean.FALSE;
  }
  List<BlockKeyDefinition> bkdList=recordMatchingIndiator.getBuiltInMatchRuleDefinition().getBlockKeys();
  BlockKeyDefinition blockKeyDef=createNewBlockDefinition(columnName);
  bkdList.add(blockKeyDef);
  List<KeyDefinition> keyDefListCopy=new ArrayList<>(bkdList.size());
  keyDefListCopy.addAll(bkdList);
  setInputData(keyDefListCopy);
  return true;
}","@Override public boolean addElement(String columnName,Analysis analysis){
  if (isAddedAlready(columnName)) {
    return false;
  }
  RecordMatchingIndicator recordMatchingIndiator=MatchRuleAnlaysisUtils.getRecordMatchIndicatorFromAna(analysis);
  if (recordMatchingIndiator == null) {
    log.error(""String_Node_Str"" + analysis.getName());
    return Boolean.FALSE;
  }
  List<BlockKeyDefinition> bkdList=recordMatchingIndiator.getBuiltInMatchRuleDefinition().getBlockKeys();
  BlockKeyDefinition blockKeyDef=createNewBlockDefinition(columnName);
  bkdList.add(blockKeyDef);
  List<KeyDefinition> keyDefListCopy=new ArrayList<KeyDefinition>(bkdList.size());
  keyDefListCopy.addAll(bkdList);
  setInputData(keyDefListCopy);
  return true;
}",0.991150442477876
137644,"private void initData(List<MatchRule> tempMatcherList){
  List<MatchRule> matcherList=new ArrayList<>();
  MatchRule createRuleMatcher=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  MatchKeyDefinition createMatchKeyDefinition2=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  AlgorithmDefinition createAlgorithmDefinition2=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setColumn(""String_Node_Str"");
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  createAlgorithmDefinition1.setAlgorithmParameters(""String_Node_Str"");
  createAlgorithmDefinition1.setAlgorithmType(MatchingTypeEnum.EXACT.getValue());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  createRuleMatcher.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition2.setName(""String_Node_Str"");
  createMatchKeyDefinition2.setColumn(""String_Node_Str"");
  createMatchKeyDefinition2.setConfidenceWeight(2);
  createMatchKeyDefinition2.setHandleNull(HandleNullEnum.NULL_MATCH_ALL.getValue());
  createAlgorithmDefinition2.setAlgorithmParameters(""String_Node_Str"");
  createAlgorithmDefinition2.setAlgorithmType(MatchingTypeEnum.CUSTOM.getValue());
  createMatchKeyDefinition2.setAlgorithm(createAlgorithmDefinition2);
  createRuleMatcher.getMatchKeys().add(createMatchKeyDefinition2);
  matcherList.add(createRuleMatcher);
  tempMatcherList.addAll(matcherList);
}","private void initData(List<MatchRule> tempMatcherList){
  List<MatchRule> matcherList=new ArrayList<MatchRule>();
  MatchRule createRuleMatcher=RulesFactory.eINSTANCE.createMatchRule();
  MatchKeyDefinition createMatchKeyDefinition1=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  MatchKeyDefinition createMatchKeyDefinition2=RulesFactory.eINSTANCE.createMatchKeyDefinition();
  AlgorithmDefinition createAlgorithmDefinition1=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  AlgorithmDefinition createAlgorithmDefinition2=RulesFactory.eINSTANCE.createAlgorithmDefinition();
  createMatchKeyDefinition1.setName(""String_Node_Str"");
  createMatchKeyDefinition1.setColumn(""String_Node_Str"");
  createMatchKeyDefinition1.setConfidenceWeight(1);
  createMatchKeyDefinition1.setHandleNull(HandleNullEnum.NULL_MATCH_NULL.getValue());
  createAlgorithmDefinition1.setAlgorithmParameters(""String_Node_Str"");
  createAlgorithmDefinition1.setAlgorithmType(MatchingTypeEnum.EXACT.getValue());
  createMatchKeyDefinition1.setAlgorithm(createAlgorithmDefinition1);
  createRuleMatcher.getMatchKeys().add(createMatchKeyDefinition1);
  createMatchKeyDefinition2.setName(""String_Node_Str"");
  createMatchKeyDefinition2.setColumn(""String_Node_Str"");
  createMatchKeyDefinition2.setConfidenceWeight(2);
  createMatchKeyDefinition2.setHandleNull(HandleNullEnum.NULL_MATCH_ALL.getValue());
  createAlgorithmDefinition2.setAlgorithmParameters(""String_Node_Str"");
  createAlgorithmDefinition2.setAlgorithmType(MatchingTypeEnum.CUSTOM.getValue());
  createMatchKeyDefinition2.setAlgorithm(createAlgorithmDefinition2);
  createRuleMatcher.getMatchKeys().add(createMatchKeyDefinition2);
  matcherList.add(createRuleMatcher);
  tempMatcherList.addAll(matcherList);
}",0.9974189848006882
137645,"public static List<MatchRule> convertDataMapToRuleMatcher(Map<String,String> columnMap){
  List<MatchRule> matcherList=new ArrayList<>();
  if (columnMap == null) {
    return matcherList;
  }
  MatchRule createRuleMatcher=RulesFactory.eINSTANCE.createMatchRule();
  for (  String columnName : columnMap.keySet()) {
    MatchKeyDefinition createDefaultMatchRow=createDefaultMatchRow(columnName);
    createRuleMatcher.getMatchKeys().add(createDefaultMatchRow);
  }
  matcherList.add(createRuleMatcher);
  return matcherList;
}","public static List<MatchRule> convertDataMapToRuleMatcher(Map<String,String> columnMap){
  List<MatchRule> matcherList=new ArrayList<MatchRule>();
  if (columnMap == null) {
    return matcherList;
  }
  MatchRule createRuleMatcher=RulesFactory.eINSTANCE.createMatchRule();
  for (  String columnName : columnMap.keySet()) {
    MatchKeyDefinition createDefaultMatchRow=createDefaultMatchRow(columnName);
    createRuleMatcher.getMatchKeys().add(createDefaultMatchRow);
  }
  matcherList.add(createRuleMatcher);
  return matcherList;
}",0.9915174363807728
137646,"/** 
 * DOC yyin Comment method ""ruleMatcherConvert"".
 * @param blockKeyDef
 * @param columnMap
 * @return
 */
public static List<Map<String,String>> blockingKeyDataConvert(List<KeyDefinition> blockKeyDefList){
  List<Map<String,String>> resultListData=new ArrayList<>();
  for (  KeyDefinition keyDef : blockKeyDefList) {
    BlockKeyDefinition blockKeydef=(BlockKeyDefinition)keyDef;
    Map<String,String> blockKeyDefMap=new HashMap<>();
    blockKeyDefMap.put(MatchAnalysisConstant.COLUMN,blockKeydef.getColumn());
    blockKeyDefMap.put(MatchAnalysisConstant.PRE_ALGORITHM,blockKeydef.getPreAlgorithm().getAlgorithmType());
    blockKeyDefMap.put(MatchAnalysisConstant.PRE_VALUE,blockKeydef.getPreAlgorithm().getAlgorithmParameters());
    blockKeyDefMap.put(MatchAnalysisConstant.ALGORITHM,blockKeydef.getAlgorithm().getAlgorithmType());
    blockKeyDefMap.put(MatchAnalysisConstant.VALUE,blockKeydef.getAlgorithm().getAlgorithmParameters());
    blockKeyDefMap.put(MatchAnalysisConstant.POST_ALGORITHM,blockKeydef.getPostAlgorithm().getAlgorithmType());
    blockKeyDefMap.put(MatchAnalysisConstant.POST_VALUE,blockKeydef.getPostAlgorithm().getAlgorithmParameters());
    resultListData.add(blockKeyDefMap);
  }
  return resultListData;
}","/** 
 * DOC yyin Comment method ""ruleMatcherConvert"".
 * @param blockKeyDef
 * @param columnMap
 * @return
 */
public static List<Map<String,String>> blockingKeyDataConvert(List<KeyDefinition> blockKeyDefList){
  List<Map<String,String>> resultListData=new ArrayList<Map<String,String>>();
  for (  KeyDefinition keyDef : blockKeyDefList) {
    BlockKeyDefinition blockKeydef=(BlockKeyDefinition)keyDef;
    Map<String,String> blockKeyDefMap=new HashMap<String,String>();
    blockKeyDefMap.put(MatchAnalysisConstant.COLUMN,blockKeydef.getColumn());
    blockKeyDefMap.put(MatchAnalysisConstant.PRE_ALGORITHM,blockKeydef.getPreAlgorithm().getAlgorithmType());
    blockKeyDefMap.put(MatchAnalysisConstant.PRE_VALUE,blockKeydef.getPreAlgorithm().getAlgorithmParameters());
    blockKeyDefMap.put(MatchAnalysisConstant.ALGORITHM,blockKeydef.getAlgorithm().getAlgorithmType());
    blockKeyDefMap.put(MatchAnalysisConstant.VALUE,blockKeydef.getAlgorithm().getAlgorithmParameters());
    blockKeyDefMap.put(MatchAnalysisConstant.POST_ALGORITHM,blockKeydef.getPostAlgorithm().getAlgorithmType());
    blockKeyDefMap.put(MatchAnalysisConstant.POST_VALUE,blockKeydef.getPostAlgorithm().getAlgorithmParameters());
    resultListData.add(blockKeyDefMap);
  }
  return resultListData;
}",0.878222927409758
137647,"/** 
 * DOC zhao Comment method ""initTableInput"".
 */
private void initTableInput(){
  RecordMatchingIndicator recordMatchingIndicator=MatchRuleAnlaysisUtils.getRecordMatchIndicatorFromAna(analysis);
  List<BlockKeyDefinition> keyDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getBlockKeys();
  List<KeyDefinition> keyDefsCopy=new ArrayList<>(keyDefs.size());
  keyDefsCopy.addAll(keyDefs);
  blockingKeyComposite.setInput(keyDefsCopy);
}","/** 
 * DOC zhao Comment method ""initTableInput"".
 */
private void initTableInput(){
  RecordMatchingIndicator recordMatchingIndicator=MatchRuleAnlaysisUtils.getRecordMatchIndicatorFromAna(analysis);
  List<BlockKeyDefinition> keyDefs=recordMatchingIndicator.getBuiltInMatchRuleDefinition().getBlockKeys();
  List<KeyDefinition> keyDefsCopy=new ArrayList<KeyDefinition>(keyDefs.size());
  keyDefsCopy.addAll(keyDefs);
  blockingKeyComposite.setInput(keyDefsCopy);
}",0.9858233369683752
137648,"/** 
 * save the removed elements(clean depency) in treeviewer.
 */
protected void saveRemovedElements(){
  HashSet<ModelElement> removedElements=this.getTreeViewer().getRemovedElements();
  for (  ModelElement mod : removedElements) {
    EMFUtil.saveSingleResource(mod.eResource());
  }
  this.getTreeViewer().getRemovedElements().clear();
}","/** 
 * save the removed elements(clean depency) in treeviewer.
 */
protected void saveRemovedElements(){
  HashSet<ModelElement> removedElements=this.getTreeViewer().getRemovedElements();
  for (  ModelElement mod : removedElements) {
    if (mod.eIsProxy()) {
      mod=(ModelElement)EObjectHelper.resolveObject(mod);
    }
    if (mod.eResource() == null) {
      log.error(""String_Node_Str"" + mod.getName() + ""String_Node_Str""+ this.getAnalysis().getName());
    }
 else {
      EMFUtil.saveSingleResource(mod.eResource());
    }
  }
  this.getTreeViewer().getRemovedElements().clear();
}",0.7336898395721925
137649,"@Override public void partOpened(IWorkbenchPart part){
  if (part instanceof SQLEditor) {
    lockFile(part);
    super.partOpened(part);
    return;
  }
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  CorePlugin.getDefault().refreshWorkSpace();
  if (!ProxyRepositoryFactory.getInstance().isEditableAndLockIfPossible(item)) {
    String message=""String_Node_Str"";
    ERepositoryStatus status=ProxyRepositoryFactory.getInstance().getStatus(item);
    if (status == ERepositoryStatus.LOCK_BY_OTHER) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
 else {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
    MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),""String_Node_Str"",part.getTitle() + DefaultMessagesImpl.getString(""String_Node_Str"") + message);
    lockCommonFormEditor(part);
    WorkspaceResourceHelper.refreshItem(item);
    return;
  }
  WorkspaceResourceHelper.refreshItem(item);
  super.partOpened(part);
}","@Override public void partOpened(IWorkbenchPart part){
  if (part instanceof SQLEditor) {
    lockFile(part);
    super.partOpened(part);
    return;
  }
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  CorePlugin.getDefault().refreshWorkSpace();
  if (!ProxyRepositoryFactory.getInstance().isEditableAndLockIfPossible(item)) {
    lockCommonFormEditor(part);
    WorkspaceResourceHelper.refreshItem(item);
    return;
  }
  WorkspaceResourceHelper.refreshItem(item);
  super.partOpened(part);
}",0.5050989802039592
137650,"@Override public void partOpened(IWorkbenchPart part){
  if (part instanceof SQLEditor) {
    lockFile(part);
    super.partOpened(part);
    return;
  }
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  CorePlugin.getDefault().refreshWorkSpace();
  if (!ProxyRepositoryFactory.getInstance().isEditableAndLockIfPossible(item)) {
    String message=""String_Node_Str"";
    ERepositoryStatus status=ProxyRepositoryFactory.getInstance().getStatus(item);
    if (status == ERepositoryStatus.LOCK_BY_OTHER) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
 else {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
    MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),""String_Node_Str"",part.getTitle() + DefaultMessagesImpl.getString(""String_Node_Str"") + message);
    lockCommonFormEditor(part);
    WorkspaceResourceHelper.refreshItem(item);
    return;
  }
  WorkspaceResourceHelper.refreshItem(item);
  super.partOpened(part);
}","@Override public void partOpened(IWorkbenchPart part){
  if (part instanceof SQLEditor) {
    lockFile(part);
    super.partOpened(part);
    return;
  }
  if (!isCommonFormEditor(part)) {
    return;
  }
  Item item=getItem((IEditorPart)part);
  if (item == null) {
    return;
  }
  CorePlugin.getDefault().refreshWorkSpace();
  if (!ProxyRepositoryFactory.getInstance().isEditableAndLockIfPossible(item)) {
    lockCommonFormEditor(part);
    WorkspaceResourceHelper.refreshItem(item);
    return;
  }
  WorkspaceResourceHelper.refreshItem(item);
  super.partOpened(part);
}",0.5050989802039592
137651,"/** 
 * DOC hcheng Comment method ""getInRangeRowsStatement"".
 * @return
 */
private String getInRangeRowsStatement(){
  Double upperValue=null;
  Double lowerValue=null;
  if (indicator instanceof RangeIndicator) {
    upperValue=((RangeIndicator)indicator).getUpperValue().getRealValue();
    lowerValue=((RangeIndicator)indicator).getLowerValue().getRealValue();
  }
 else   if (indicator instanceof IQRIndicator) {
    upperValue=((IQRIndicator)indicator).getUpperValue().getRealValue();
    lowerValue=((IQRIndicator)indicator).getLowerValue().getRealValue();
  }
  String whereClause=dbmsLanguage.where() + this.columnName + dbmsLanguage.greaterOrEqual()+ lowerValue+ dbmsLanguage.and()+ this.columnName+ dbmsLanguage.lessOrEqual()+ upperValue;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  return SELECT_ALL + dbmsLanguage.from() + getFullyQualifiedTableName(column)+ whereClause;
}","/** 
 * DOC hcheng Comment method ""getInRangeRowsStatement"".
 * @return
 */
private String getInRangeRowsStatement(){
  Double upperValue=null;
  Double lowerValue=null;
  if (indicator instanceof RangeIndicator) {
    upperValue=((RangeIndicator)indicator).getUpperValue().getRealValue();
    lowerValue=((RangeIndicator)indicator).getLowerValue().getRealValue();
  }
 else   if (indicator instanceof IQRIndicator) {
    upperValue=((IQRIndicator)indicator).getUpperValue().getRealValue();
    lowerValue=((IQRIndicator)indicator).getLowerValue().getRealValue();
  }
  String whereClause=dbmsLanguage.where() + this.columnName + dbmsLanguage.greaterOrEqual()+ lowerValue+ dbmsLanguage.and()+ this.columnName+ dbmsLanguage.lessOrEqual()+ upperValue;
  return SELECT_ALL + dbmsLanguage.from() + getFullyQualifiedTableName(indicator.getAnalyzedElement())+ whereClause;
}",0.945823927765237
137652,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
switch (indicatorEnum) {
case MeanIndicatorEnum:
    break;
case IQRIndicatorEnum:
case RangeIndicatorEnum:
  map.put(MENU_ROWS_IN_RANGE,getComment(MENU_ROWS_IN_RANGE) + getInRangeRowsStatement());
map.put(MENU_ROWS_OUTSIDE_RANGE,getComment(MENU_ROWS_OUTSIDE_RANGE) + getOutRangeRowsStatement());
break;
default :
if (entity.isOutOfRange(entity.getValue())) {
map.put(MENU_VIEW_INVALID_ROWS,getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement());
}
map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getMatchingRowsStatement());
}
return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  boolean isJavaEngine=ExecutionLanguage.JAVA.equals(this.analysis.getParameters().getExecutionLanguage());
  if (isSqlEngine) {
switch (indicatorEnum) {
case MeanIndicatorEnum:
      break;
case IQRIndicatorEnum:
case RangeIndicatorEnum:
    map.put(MENU_ROWS_IN_RANGE,getComment(MENU_ROWS_IN_RANGE) + getInRangeRowsStatement());
  map.put(MENU_ROWS_OUTSIDE_RANGE,getComment(MENU_ROWS_OUTSIDE_RANGE) + getOutRangeRowsStatement());
break;
default :
if (entity.isOutOfRange(entity.getValue())) {
map.put(MENU_VIEW_INVALID_ROWS,getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement());
}
map.put(MENU_VIEW_ROWS,getComment(MENU_VIEW_ROWS) + getMatchingRowsStatement());
}
}
 else if (isJavaEngine) {
switch (indicatorEnum) {
case MeanIndicatorEnum:
case IQRIndicatorEnum:
case RangeIndicatorEnum:
break;
default :
map.put(MENU_VIEW_ROWS,null);
}
}
return map;
}",0.7431566686080373
137653,"/** 
 * Method ""getMatchingRowsStatement"".
 * @return the query to get the rows with a matching value
 */
private String getMatchingRowsStatement(){
  double value=Double.valueOf(entity.getValue());
  String whereClause=dbmsLanguage.where() + this.columnName + dbmsLanguage.equal()+ value;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  return SELECT_ALL + dbmsLanguage.from() + getFullyQualifiedTableName(column)+ whereClause;
}","/** 
 * Method ""getMatchingRowsStatement"".
 * @return the query to get the rows with a matching value
 */
private String getMatchingRowsStatement(){
  double value=Double.valueOf(entity.getValue());
  String whereClause=dbmsLanguage.where() + this.columnName + dbmsLanguage.equal()+ value;
  return SELECT_ALL + dbmsLanguage.from() + getFullyQualifiedTableName(indicator.getAnalyzedElement())+ whereClause;
}",0.8896713615023474
137654,"/** 
 * Test method for  {@link org.talend.dataprofiler.core.migration.helper.IndicatorDefinitionFileHelper#isSubCategoryIndicator(java.lang.String)}.
 */
@Test public void testIsTechnialIndicatorWithSubCategory(){
  Context ctx=CoreRuntimePlugin.getInstance().getContext();
  RepositoryContext repositoryContext=(RepositoryContext)ctx.getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext != null) {
    originalProject=repositoryContext.getProject();
  }
  String textStatisticsUuid=""String_Node_Str"";
  String summaryStatisticsUuid=""String_Node_Str"";
  String interQuartileRangeUuid=""String_Node_Str"";
  String rangeUuid=""String_Node_Str"";
  String simpleStatisticsUuid=""String_Node_Str"";
  String phoneNumberStatisticsUuid=""String_Node_Str"";
  String connectionOverviewUuid=""String_Node_Str"";
  String catalogOverviewUuid=""String_Node_Str"";
  String schemaOverviewUuid=""String_Node_Str"";
  String tableOverviewUuid=""String_Node_Str"";
  String viewOverviewUuid=""String_Node_Str"";
  String datePatternFrequencyUuid=""String_Node_Str"";
  String rowCountUuid=""String_Node_Str"";
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(textStatisticsUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(summaryStatisticsUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(interQuartileRangeUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(rangeUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(simpleStatisticsUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(phoneNumberStatisticsUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(connectionOverviewUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(catalogOverviewUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(schemaOverviewUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(tableOverviewUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(viewOverviewUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(datePatternFrequencyUuid));
  assertFalse(IndicatorDefinitionFileHelper.isTechnialIndicator(rowCountUuid));
  if (originalProject != null) {
    ctx=CoreRuntimePlugin.getInstance().getContext();
    repositoryContext=(RepositoryContext)ctx.getProperty(Context.REPOSITORY_CONTEXT_KEY);
    repositoryContext.setProject(originalProject);
  }
}","/** 
 * Test method for  {@link org.talend.dataprofiler.core.migration.helper.IndicatorDefinitionFileHelper#isSubCategoryIndicator(java.lang.String)}.
 */
@Test public void testIsTechnialIndicatorWithSubCategory(){
  String textStatisticsUuid=""String_Node_Str"";
  String summaryStatisticsUuid=""String_Node_Str"";
  String interQuartileRangeUuid=""String_Node_Str"";
  String rangeUuid=""String_Node_Str"";
  String simpleStatisticsUuid=""String_Node_Str"";
  String phoneNumberStatisticsUuid=""String_Node_Str"";
  String connectionOverviewUuid=""String_Node_Str"";
  String catalogOverviewUuid=""String_Node_Str"";
  String schemaOverviewUuid=""String_Node_Str"";
  String tableOverviewUuid=""String_Node_Str"";
  String viewOverviewUuid=""String_Node_Str"";
  String datePatternFrequencyUuid=""String_Node_Str"";
  String rowCountUuid=""String_Node_Str"";
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(textStatisticsUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(summaryStatisticsUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(interQuartileRangeUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(rangeUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(simpleStatisticsUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(phoneNumberStatisticsUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(connectionOverviewUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(catalogOverviewUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(schemaOverviewUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(tableOverviewUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(viewOverviewUuid));
  assertTrue(IndicatorDefinitionFileHelper.isTechnialIndicator(datePatternFrequencyUuid));
  assertFalse(IndicatorDefinitionFileHelper.isTechnialIndicator(rowCountUuid));
}",0.888635846048736
137655,"public void recomputeIndicators(){
  analysisHandler=new ModelElementAnalysisHandler();
  analysisHandler.setAnalysis((Analysis)this.currentModelElement);
  EList<Indicator> allIndics=analysis.getResults().getIndicators();
  List<Indicator> updatedIndWithJUDI=new ArrayList<Indicator>();
  for (  Indicator indicator : allIndics) {
    if (UDIHelper.isJUDIValid(indicator.getIndicatorDefinition())) {
      try {
        indicator=UDIHelper.adaptToJavaUDI(indicator);
        updatedIndWithJUDI.add(indicator);
      }
 catch (      Throwable e) {
        log.error(e);
      }
    }
    updatedIndWithJUDI.add(indicator);
  }
  allIndics.clear();
  allIndics.addAll(updatedIndWithJUDI);
  stringDataFilter=analysisHandler.getStringDataFilter();
  EList<ModelElement> analyzedColumns=analysisHandler.getAnalyzedColumns();
  List<ModelElementIndicator> meIndicatorList=new ArrayList<ModelElementIndicator>();
  ModelElementIndicator currentIndicator=null;
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    TdXmlElementType xmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(element);
    MetadataColumn mdColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null && xmlElement == null && mdColumn == null) {
      continue;
    }
    if (tdColumn == null && mdColumn != null) {
      currentIndicator=ModelElementIndicatorHelper.createDFColumnIndicator(RepositoryNodeHelper.recursiveFind(mdColumn));
    }
 else     if (tdColumn != null) {
      currentIndicator=ModelElementIndicatorHelper.createModelElementIndicator(RepositoryNodeHelper.recursiveFind(tdColumn));
    }
 else     if (xmlElement != null) {
      currentIndicator=ModelElementIndicatorHelper.createModelElementIndicator(RepositoryNodeHelper.recursiveFind(xmlElement));
    }
    DataminingType dataminingType=DataminingType.get(analysisHandler.getDatamingType(element));
    MetadataHelper.setDataminingType(dataminingType == null ? DataminingType.NOMINAL : dataminingType,element);
    Collection<Indicator> indicatorList=analysisHandler.getIndicators(element);
    if (currentIndicator != null) {
      currentIndicator.setIndicators(indicatorList.toArray(new Indicator[indicatorList.size()]));
      meIndicatorList.add(currentIndicator);
    }
  }
  currentModelElementIndicators=meIndicatorList.toArray(new ModelElementIndicator[meIndicatorList.size()]);
}","public void recomputeIndicators(){
  analysisHandler=new ModelElementAnalysisHandler();
  analysisHandler.setAnalysis((Analysis)this.currentModelElement);
  EList<Indicator> allIndics=analysis.getResults().getIndicators();
  List<Indicator> updatedIndWithJUDI=new ArrayList<Indicator>();
  for (  Indicator indicator : allIndics) {
    if (UDIHelper.isJUDIValid(indicator.getIndicatorDefinition())) {
      try {
        indicator=UDIHelper.adaptToJavaUDI(indicator);
        updatedIndWithJUDI.add(indicator);
      }
 catch (      Throwable e) {
        log.error(e);
      }
    }
    updatedIndWithJUDI.add(indicator);
  }
  allIndics.clear();
  allIndics.addAll(updatedIndWithJUDI);
  stringDataFilter=analysisHandler.getStringDataFilter();
  EList<ModelElement> analyzedColumns=analysisHandler.getAnalyzedColumns();
  List<ModelElementIndicator> meIndicatorList=new ArrayList<ModelElementIndicator>();
  ModelElementIndicator currentIndicator=null;
  for (  ModelElement element : analyzedColumns) {
    TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.doSwitch(element);
    TdXmlElementType xmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(element);
    MetadataColumn mdColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(element);
    if (tdColumn == null && xmlElement == null && mdColumn == null) {
      continue;
    }
    RepositoryNode repNode=RepositoryNodeHelper.recursiveFind(element);
    if (repNode == null) {
      repNode=RepositoryNodeHelper.createRepositoryNode(element);
    }
    if (tdColumn == null && mdColumn != null) {
      currentIndicator=ModelElementIndicatorHelper.createDFColumnIndicator(repNode);
    }
 else     if (tdColumn != null) {
      currentIndicator=ModelElementIndicatorHelper.createModelElementIndicator(repNode);
    }
 else     if (xmlElement != null) {
      currentIndicator=ModelElementIndicatorHelper.createModelElementIndicator(repNode);
    }
    DataminingType dataminingType=DataminingType.get(analysisHandler.getDatamingType(element));
    MetadataHelper.setDataminingType(dataminingType == null ? DataminingType.NOMINAL : dataminingType,element);
    Collection<Indicator> indicatorList=analysisHandler.getIndicators(element);
    if (currentIndicator != null) {
      currentIndicator.setIndicators(indicatorList.toArray(new Indicator[indicatorList.size()]));
      meIndicatorList.add(currentIndicator);
    }
  }
  currentModelElementIndicators=meIndicatorList.toArray(new ModelElementIndicator[meIndicatorList.size()]);
}",0.8864097363083164
137656,"protected ModelElementIndicator[] translateSelectedNodeIntoIndicator(Object[] objs){
  List<IRepositoryNode> reposList=new ArrayList<IRepositoryNode>();
  for (  Object obj : objs) {
    if (obj instanceof MDMXmlElementRepNode) {
      boolean isleaf=isLeaf((MDMXmlElementRepNode)obj);
      if (isleaf) {
        reposList.add((RepositoryNode)obj);
      }
    }
    if (obj instanceof DBColumnRepNode || obj instanceof DFColumnRepNode) {
      reposList.add((RepositoryNode)obj);
    }
    if (obj instanceof DBTableRepNode || obj instanceof DBViewRepNode || obj instanceof DFTableRepNode) {
      List<IRepositoryNode> children=((IRepositoryNode)obj).getChildren().get(0).getChildren();
      reposList.addAll(children);
    }
 else     if (obj instanceof MDMXmlElementRepNode) {
      boolean isLeaf=RepositoryNodeHelper.getMdmChildren(obj,true).length > 0;
      if (!isLeaf) {
        List<IRepositoryNode> children=((IRepositoryNode)obj).getChildren();
        reposList.addAll(children);
      }
    }
 else     if (obj instanceof TdColumn) {
      reposList.add(RepositoryNodeHelper.recursiveFind((TdColumn)obj));
    }
 else     if (obj instanceof MetadataColumn) {
      reposList.add(RepositoryNodeHelper.recursiveFind((MetadataColumn)obj));
    }
 else     if (obj instanceof TdXmlElementType) {
      reposList.add(RepositoryNodeHelper.recursiveFind((TdXmlElementType)obj));
    }
  }
  if (reposList.size() == 0) {
    return new ModelElementIndicator[0];
  }
  boolean isMdm=false;
  boolean isDelimitedFile=false;
  if (objs != null && objs.length != 0) {
    isMdm=objs[0] instanceof MetadataXmlElementTypeRepositoryObject || objs[0] instanceof MDMXmlElementRepNode;
    isDelimitedFile=objs[0] instanceof DFTableRepNode || objs[0] instanceof DFColumnRepNode;
    if (!(reposList.get(0) instanceof DBColumnRepNode || isMdm || isDelimitedFile)) {
      return null;
    }
  }
  List<ModelElementIndicator> modelElementIndicatorList=new ArrayList<ModelElementIndicator>();
  for (  ModelElementIndicator modelElementIndicator : getAllTheElementIndicator()) {
    if (reposList.contains(modelElementIndicator.getModelElementRepositoryNode())) {
      modelElementIndicatorList.add(modelElementIndicator);
      reposList.remove(modelElementIndicator.getModelElementRepositoryNode());
    }
  }
  for (  IRepositoryNode repObj : reposList) {
    ModelElementIndicator temp=isMdm ? ModelElementIndicatorHelper.createXmlElementIndicator(repObj) : isDelimitedFile ? ModelElementIndicatorHelper.createDFColumnIndicator(repObj) : ModelElementIndicatorHelper.createColumnIndicator(repObj);
    modelElementIndicatorList.add(temp);
  }
  return modelElementIndicatorList.toArray(new ModelElementIndicator[modelElementIndicatorList.size()]);
}","protected ModelElementIndicator[] translateSelectedNodeIntoIndicator(Object[] objs){
  List<IRepositoryNode> reposList=new ArrayList<IRepositoryNode>();
  for (  Object obj : objs) {
    if (obj instanceof MDMXmlElementRepNode) {
      boolean isleaf=isLeaf((MDMXmlElementRepNode)obj);
      if (isleaf) {
        reposList.add((RepositoryNode)obj);
      }
    }
    if (obj instanceof DBColumnRepNode || obj instanceof DFColumnRepNode) {
      reposList.add((RepositoryNode)obj);
    }
    if (obj instanceof DBTableRepNode || obj instanceof DBViewRepNode || obj instanceof DFTableRepNode) {
      List<IRepositoryNode> children=((IRepositoryNode)obj).getChildren().get(0).getChildren();
      reposList.addAll(children);
    }
 else     if (obj instanceof MDMXmlElementRepNode) {
      boolean isLeaf=RepositoryNodeHelper.getMdmChildren(obj,true).length > 0;
      if (!isLeaf) {
        List<IRepositoryNode> children=((IRepositoryNode)obj).getChildren();
        reposList.addAll(children);
      }
    }
 else     if (obj instanceof MetadataColumn || obj instanceof TdXmlElementType) {
      RepositoryNode repNode=RepositoryNodeHelper.recursiveFind((ModelElement)obj);
      if (repNode == null) {
        repNode=RepositoryNodeHelper.createRepositoryNode((ModelElement)obj);
      }
      reposList.add(repNode);
    }
  }
  if (reposList.size() == 0) {
    return new ModelElementIndicator[0];
  }
  boolean isMdm=false;
  boolean isDelimitedFile=false;
  if (objs != null && objs.length != 0) {
    isMdm=objs[0] instanceof MetadataXmlElementTypeRepositoryObject || objs[0] instanceof MDMXmlElementRepNode;
    isDelimitedFile=objs[0] instanceof DFTableRepNode || objs[0] instanceof DFColumnRepNode;
    if (!(reposList.get(0) instanceof DBColumnRepNode || isMdm || isDelimitedFile)) {
      return null;
    }
  }
  List<ModelElementIndicator> modelElementIndicatorList=new ArrayList<ModelElementIndicator>();
  for (  ModelElementIndicator modelElementIndicator : getAllTheElementIndicator()) {
    if (reposList.contains(modelElementIndicator.getModelElementRepositoryNode())) {
      modelElementIndicatorList.add(modelElementIndicator);
      reposList.remove(modelElementIndicator.getModelElementRepositoryNode());
    }
  }
  for (  IRepositoryNode repObj : reposList) {
    ModelElementIndicator temp=isMdm ? ModelElementIndicatorHelper.createXmlElementIndicator(repObj) : isDelimitedFile ? ModelElementIndicatorHelper.createDFColumnIndicator(repObj) : ModelElementIndicatorHelper.createColumnIndicator(repObj);
    modelElementIndicatorList.add(temp);
  }
  return modelElementIndicatorList.toArray(new ModelElementIndicator[modelElementIndicatorList.size()]);
}",0.907182320441989
137657,"/** 
 * add zshen feature 12919.
 */
protected Composite createjavaEnginSection(Composite sectionClient){
  AnalysisParameters anaParameters=analysisHandler.getAnalysis().getParameters();
  Composite javaEnginSection=toolkit.createComposite(sectionClient);
  Composite checkSection=toolkit.createComposite(javaEnginSection);
  Composite numberSection=toolkit.createComposite(javaEnginSection);
  GridLayout gridLayout=new GridLayout(2,false);
  gridLayout.marginWidth=0;
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(javaEnginSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(checkSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(numberSection);
  javaEnginSection.setLayout(gridLayout);
  checkSection.setLayout(gridLayout);
  numberSection.setLayout(gridLayout);
  toolkit.createLabel(checkSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  drillDownCheck=toolkit.createButton(checkSection,""String_Node_Str"",SWT.CHECK);
  drillDownCheck.setSelection(true);
  drillDownCheck.setSelection(anaParameters.isStoreData());
  drillDownCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirty(true);
    }
  }
);
  Label maxNumLabel=toolkit.createLabel(numberSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  maxNumText=toolkit.createText(numberSection,null,SWT.BORDER);
  maxNumText.setText(String.valueOf(anaParameters.getMaxNumberRows()));
  maxNumText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String textContent=maxNumText.getText();
      if (StringUtils.isNumeric(textContent)) {
        setDirty(true);
      }
 else {
        MessageDialog.openWarning(e.display.getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        maxNumText.setText(textContent.substring(0,textContent.length() - 1));
      }
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(maxNumText);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(maxNumLabel);
  GridDataFactory.fillDefaults().grab(true,false).align(SWT.FILL,SWT.BEGINNING).applyTo(drillDownCheck);
  return javaEnginSection;
}","/** 
 * add zshen feature 12919.
 */
protected Composite createjavaEnginSection(Composite sectionClient){
  AnalysisParameters anaParameters=analysisHandler.getAnalysis().getParameters();
  Composite javaEnginSection=toolkit.createComposite(sectionClient);
  Composite checkSection=toolkit.createComposite(javaEnginSection);
  Composite numberSection=toolkit.createComposite(javaEnginSection);
  GridLayout gridLayout=new GridLayout(2,false);
  gridLayout.marginWidth=0;
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(javaEnginSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(checkSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(numberSection);
  javaEnginSection.setLayout(gridLayout);
  checkSection.setLayout(gridLayout);
  numberSection.setLayout(gridLayout);
  toolkit.createLabel(checkSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  drillDownCheck=toolkit.createButton(checkSection,""String_Node_Str"",SWT.CHECK);
  drillDownCheck.setSelection(true);
  drillDownCheck.setSelection(anaParameters.isStoreData());
  drillDownCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setDirty(true);
    }
  }
);
  Label maxNumLabel=toolkit.createLabel(numberSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  maxNumText=toolkit.createText(numberSection,null,SWT.BORDER);
  maxNumText.setText(String.valueOf(anaParameters.getMaxNumberRows()));
  maxNumText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  maxNumText.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent e){
      String inputValue=e.text;
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      char[] charArray=inputValue.toCharArray();
      for (      char c : charArray) {
        if (!pattern.matcher(String.valueOf(c)).matches()) {
          e.doit=false;
        }
      }
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(maxNumText);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(maxNumLabel);
  GridDataFactory.fillDefaults().grab(true,false).align(SWT.FILL,SWT.BEGINNING).applyTo(drillDownCheck);
  return javaEnginSection;
}",0.8447953459380844
137658,"public void modifyText(ModifyEvent e){
  String textContent=maxNumText.getText();
  if (StringUtils.isNumeric(textContent)) {
    setDirty(true);
  }
 else {
    MessageDialog.openWarning(e.display.getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    maxNumText.setText(textContent.substring(0,textContent.length() - 1));
  }
}","public void modifyText(ModifyEvent e){
  setDirty(true);
}",0.2560706401766004
137659,"/** 
 * DOC qiongli Comment method ""createjavaEnginSection"".
 * @param sectionClient
 * @return
 */
protected Composite createjavaEnginSection(Composite sectionClient){
  AnalysisParameters anaParameters=columnSetAnalysisHandler.getAnalysis().getParameters();
  Composite javaEnginSection=toolkit.createComposite(sectionClient);
  Composite checkSection=toolkit.createComposite(javaEnginSection);
  Composite numberSection=toolkit.createComposite(javaEnginSection);
  GridLayout gridLayout=new GridLayout(2,false);
  gridLayout.marginWidth=0;
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(javaEnginSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(checkSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(numberSection);
  javaEnginSection.setLayout(gridLayout);
  checkSection.setLayout(gridLayout);
  numberSection.setLayout(gridLayout);
  toolkit.createLabel(checkSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  drillDownCheck=toolkit.createButton(checkSection,""String_Node_Str"",SWT.CHECK);
  drillDownCheck.setSelection(true);
  drillDownCheck.setSelection(anaParameters.isStoreData());
  drillDownCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      storeDataCheck.setSelection(drillDownCheck.getSelection());
      simpleStatIndicator.setStoreData(drillDownCheck.getSelection());
      columnSetAnalysisHandler.getAnalysis().getParameters().setStoreData(drillDownCheck.getSelection());
      setDirty(true);
    }
  }
);
  Label maxNumLabel=toolkit.createLabel(numberSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  maxNumText=toolkit.createText(numberSection,null,SWT.BORDER);
  maxNumText.setText(String.valueOf(anaParameters.getMaxNumberRows()));
  maxNumText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      String textContent=maxNumText.getText();
      if (StringUtils.isNumeric(textContent)) {
        setDirty(true);
      }
 else {
        MessageDialog.openWarning(e.display.getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        maxNumText.setText(textContent.substring(0,textContent.length() - 1));
      }
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(maxNumText);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(maxNumLabel);
  GridDataFactory.fillDefaults().grab(true,false).align(SWT.FILL,SWT.BEGINNING).applyTo(drillDownCheck);
  return javaEnginSection;
}","/** 
 * DOC qiongli Comment method ""createjavaEnginSection"".
 * @param sectionClient
 * @return
 */
protected Composite createjavaEnginSection(Composite sectionClient){
  AnalysisParameters anaParameters=columnSetAnalysisHandler.getAnalysis().getParameters();
  Composite javaEnginSection=toolkit.createComposite(sectionClient);
  Composite checkSection=toolkit.createComposite(javaEnginSection);
  Composite numberSection=toolkit.createComposite(javaEnginSection);
  GridLayout gridLayout=new GridLayout(2,false);
  gridLayout.marginWidth=0;
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(javaEnginSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(checkSection);
  GridDataFactory.fillDefaults().grab(true,false).span(2,0).align(SWT.FILL,SWT.BEGINNING).applyTo(numberSection);
  javaEnginSection.setLayout(gridLayout);
  checkSection.setLayout(gridLayout);
  numberSection.setLayout(gridLayout);
  toolkit.createLabel(checkSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  drillDownCheck=toolkit.createButton(checkSection,""String_Node_Str"",SWT.CHECK);
  drillDownCheck.setSelection(true);
  drillDownCheck.setSelection(anaParameters.isStoreData());
  drillDownCheck.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      storeDataCheck.setSelection(drillDownCheck.getSelection());
      simpleStatIndicator.setStoreData(drillDownCheck.getSelection());
      columnSetAnalysisHandler.getAnalysis().getParameters().setStoreData(drillDownCheck.getSelection());
      setDirty(true);
    }
  }
);
  Label maxNumLabel=toolkit.createLabel(numberSection,DefaultMessagesImpl.getString(""String_Node_Str""));
  maxNumText=toolkit.createText(numberSection,null,SWT.BORDER);
  maxNumText.setText(String.valueOf(anaParameters.getMaxNumberRows()));
  maxNumText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      setDirty(true);
    }
  }
);
  maxNumText.addVerifyListener(new VerifyListener(){
    public void verifyText(    VerifyEvent e){
      String inputValue=e.text;
      Pattern pattern=Pattern.compile(""String_Node_Str"");
      char[] charArray=inputValue.toCharArray();
      for (      char c : charArray) {
        if (!pattern.matcher(String.valueOf(c)).matches()) {
          e.doit=false;
        }
      }
    }
  }
);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(maxNumText);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.BEGINNING).applyTo(maxNumLabel);
  GridDataFactory.fillDefaults().grab(true,false).align(SWT.FILL,SWT.BEGINNING).applyTo(drillDownCheck);
  return javaEnginSection;
}",0.8627595076244718
137660,"public void modifyText(ModifyEvent e){
  String textContent=maxNumText.getText();
  if (StringUtils.isNumeric(textContent)) {
    setDirty(true);
  }
 else {
    MessageDialog.openWarning(e.display.getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    maxNumText.setText(textContent.substring(0,textContent.length() - 1));
  }
}","public void modifyText(ModifyEvent e){
  setDirty(true);
}",0.2560706401766004
137661,"@Before public void setup(){
  indiDefinition=mock(IndicatorDefinition.class);
  EList<TdExpression> tdExpessionLs=new BasicEList<TdExpression>();
  TdExpression tdExpression1=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",""String_Node_Str"");
  TdExpression tdExpression2=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",""String_Node_Str"");
  tdExpessionLs.add(tdExpression1);
  tdExpessionLs.add(tdExpression2);
  when(indiDefinition.getSqlGenericExpression()).thenReturn(tdExpessionLs);
}","@Before public void setup(){
  indiDefinition=mock(IndicatorDefinition.class);
  EList<TdExpression> tdExpessionLs=new BasicEList<TdExpression>();
  TdExpression tdExpression1=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",""String_Node_Str"");
  TdExpression tdExpression2=BooleanExpressionHelper.createTdExpression(""String_Node_Str"",""String_Node_Str"");
  tdExpessionLs.add(tdExpression1);
  tdExpessionLs.add(tdExpression2);
  when(indiDefinition.getSqlGenericExpression()).thenReturn(tdExpessionLs);
  UnitTestBuildHelper.deleteCurrentProject(""String_Node_Str"");
  UnitTestBuildHelper.createRealProject(""String_Node_Str"");
}",0.8935064935064935
137662,"/** 
 * DOC bZhou Comment method ""saveAndRefresh"".
 */
private void saveAndRefresh(){
  ProxyRepositoryManager.getInstance().save();
  CorePlugin.getDefault().refreshDQView(node);
  CorePlugin.getDefault().refreshWorkSpace();
}","/** 
 * DOC bZhou Comment method ""saveAndRefresh"".
 */
private void saveAndRefresh(){
  CorePlugin.getDefault().refreshDQView(node);
}",0.7423822714681441
137663,"/** 
 * Remove all items from parent
 */
private void clearParent(){
  Control[] children=_parent.getChildren();
  if (children != null) {
    for (int i=0; i < children.length; i++) {
      children[i].dispose();
    }
  }
}","/** 
 * Remove all items from parent
 */
private void clearParent(){
  Control[] children=_parent.getChildren();
  if (children != null) {
    for (    Control element : children) {
      element.dispose();
    }
  }
}",0.7268623024830699
137664,"/** 
 * Adds a new user
 * @param user
 */
public void addUser(final User user) throws SQLCannotConnectException {
  for (  Session session : _allSessions)   if (session.getUser() == user)   return;
  MetaDataSession session=user.getMetaDataSession();
  if (session != null)   addSession(user.getMetaDataSession());
}","/** 
 * Adds a new user
 * @param user
 */
public void addUser(final User user) throws SQLCannotConnectException {
  for (  Session session : _allSessions) {
    if (session.getUser() == user) {
      return;
    }
  }
  MetaDataSession session=user.getMetaDataSession();
  if (session != null) {
    addSession(user.getMetaDataSession());
  }
}",0.9577039274924471
137665,"public void dragStart(DragSourceEvent event){
  event.doit=!treeViewer.getSelection().isEmpty();
  if (event.doit) {
    Object sel=((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
    if (!(sel instanceof TableNode)) {
      event.doit=false;
    }
 else {
      TableNode tn=(TableNode)sel;
      TableNodeTransfer.getInstance().setSelection(tn);
      if (!tn.isTable())       event.doit=false;
    }
  }
}","public void dragStart(DragSourceEvent event){
  event.doit=!treeViewer.getSelection().isEmpty();
  if (event.doit) {
    Object sel=((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
    if (!(sel instanceof TableNode)) {
      event.doit=false;
    }
 else {
      TableNode tn=(TableNode)sel;
      TableNodeTransfer.getInstance().setSelection(tn);
      if (!tn.isTable()) {
        event.doit=false;
      }
    }
  }
}",0.986206896551724
137666,"/** 
 * Loop through all tabs and refresh trees for sessions with session
 */
public void refreshSessionTrees(Session session){
  if (_tabFolder == null || _tabFolder.getSelectionIndex() < 0)   return;
  CTabItem[] items=_tabFolder.getItems();
  if (items != null) {
    for (    CTabItem item : items) {
      TabData tabData=(TabData)item.getData();
      if (tabData.session.getUser() == session.getUser()) {
        tabData.session.getRoot().refresh();
        tabData.treeViewer.refresh();
      }
    }
  }
}","/** 
 * Loop through all tabs and refresh trees for sessions with session
 */
public void refreshSessionTrees(Session session){
  if (_tabFolder == null || _tabFolder.getSelectionIndex() < 0) {
    return;
  }
  CTabItem[] items=_tabFolder.getItems();
  if (items != null) {
    for (    CTabItem item : items) {
      TabData tabData=(TabData)item.getData();
      if (tabData.session.getUser() == session.getUser()) {
        tabData.session.getRoot().refresh();
        tabData.treeViewer.refresh();
      }
    }
  }
}",0.9922779922779924
137667,"public void close(CTabFolderEvent event){
  CTabItem tabItem=(CTabItem)event.item;
  TabData tabData=(TabData)tabItem.getData();
  _allSessions.remove(tabData.session);
  event.doit=true;
}","@Override public void close(CTabFolderEvent event){
  CTabItem tabItem=(CTabItem)event.item;
  TabData tabData=(TabData)tabItem.getData();
  _allSessions.remove(tabData.session);
  event.doit=true;
}",0.9742268041237112
137668,"/** 
 * DOC qiongli Comment method ""closeCurrentCabItem"".bug 16394.
 */
public void closeCurrentCabItem(String conName){
  if (_tabFolder == null || _tabFolder.isDisposed() || conName == null)   return;
  CTabItem items[]=_tabFolder.getItems();
  for (  CTabItem item : items) {
    if (!item.isDisposed() && item.getText().startsWith(conName + ""String_Node_Str"")) {
      TabData tabData=(TabData)item.getData();
      _allSessions.remove(tabData.session);
      item.dispose();
      this.dispose();
      _filterAction.setEnabled(!_allSessions.isEmpty());
      _tabFolder.layout();
      _tabFolder.redraw();
      break;
    }
  }
}","/** 
 * DOC qiongli Comment method ""closeCurrentCabItem"".bug 16394.
 */
public void closeCurrentCabItem(String conName){
  if (_tabFolder == null || _tabFolder.isDisposed() || conName == null) {
    return;
  }
  CTabItem items[]=_tabFolder.getItems();
  for (  CTabItem item : items) {
    if (!item.isDisposed() && item.getText().startsWith(conName + ""String_Node_Str"")) {
      TabData tabData=(TabData)item.getData();
      _allSessions.remove(tabData.session);
      _filterAction.setEnabled(!_allSessions.isEmpty());
      _tabFolder.layout();
      _tabFolder.redraw();
      item.dispose();
      this.dispose();
      break;
    }
  }
}",0.9110764430577224
137669,"public void widgetSelected(SelectionEvent e){
  DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
  synchronizeDetailView(detailView);
}","@Override public void widgetSelected(SelectionEvent e){
  DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
  synchronizeDetailView(detailView);
}",0.9770642201834864
137670,"/** 
 * Set focus on our database structure view..
 * @see org.eclipse.ui.IWorkbenchPart#setFocus()
 */
public void setFocus(){
}","/** 
 * Set focus on our database structure view..
 * @see org.eclipse.ui.IWorkbenchPart#setFocus()
 */
@Override public void setFocus(){
}",0.9626865671641792
137671,"public boolean isConnectedToUser(User user){
  for (  Session session : _allSessions)   if (session.getUser().compareTo(user) == 0)   return true;
  return false;
}","public boolean isConnectedToUser(User user){
  for (  Session session : _allSessions) {
    if (session.getUser().compareTo(user) == 0) {
      return true;
    }
  }
  return false;
}",0.942528735632184
137672,"/** 
 * Add a new session to the database structure view. This will create a new tab for the session.
 * @param session
 */
private void addSession(final MetaDataSession session) throws SQLCannotConnectException {
  if (_allSessions.contains(session))   return;
  try {
    session.getMetaData();
    session.setAutoCommit(true);
  }
 catch (  SQLCannotConnectException e) {
    SQLExplorerPlugin.error(e);
    throw e;
  }
catch (  SQLException e) {
    SQLExplorerPlugin.error(e);
    MessageDialog.openError(getSite().getShell(),""String_Node_Str"",e.getMessage());
  }
  DatabaseNode rootNode=session.getRoot();
  if (rootNode == null)   return;
  _allSessions.add(session);
  if (_filterAction != null) {
    _filterAction.setEnabled(true);
  }
  if (_tabFolder == null || _tabFolder.isDisposed()) {
    clearParent();
    _tabFolder=new CTabFolder(_parent,SWT.TOP | SWT.CLOSE);
    _tabFolder.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        synchronizeDetailView(detailView);
      }
    }
);
    Display display=getSite().getShell().getDisplay();
    _tabFolder.setSelectionBackground(new Color[]{display.getSystemColor(SWT.COLOR_WHITE),new Color(null,211,225,250),new Color(null,175,201,246),IConstants.TAB_BORDER_COLOR},new int[]{25,50,75},true);
    _tabFolder.addCTabFolder2Listener(new CTabFolder2Adapter(){
      public void close(      CTabFolderEvent event){
        CTabItem tabItem=(CTabItem)event.item;
        TabData tabData=(TabData)tabItem.getData();
        _allSessions.remove(tabData.session);
        event.doit=true;
      }
    }
);
    _parent.layout();
    _parent.redraw();
  }
  final CTabItem tabItem=new CTabItem(_tabFolder,SWT.NULL);
  TabData tabData=new TabData();
  tabItem.setData(tabData);
  tabData.session=session;
  String labelText=session.getUser().getDescription();
  tabItem.setText(labelText);
  Composite composite=new Composite(_tabFolder,SWT.NULL);
  composite.setLayout(new FillLayout());
  tabItem.setControl(composite);
  final TreeViewer treeViewer=new TreeViewer(composite,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  tabData.treeViewer=treeViewer;
  Transfer[] transfers=new Transfer[]{TableNodeTransfer.getInstance()};
  treeViewer.addDragSupport(DND.DROP_COPY,transfers,new DragSourceListener(){
    public void dragFinished(    DragSourceEvent event){
      System.out.println(""String_Node_Str"");
      TableNodeTransfer.getInstance().setSelection(null);
    }
    public void dragSetData(    DragSourceEvent event){
      Object sel=((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
      event.data=sel;
    }
    public void dragStart(    DragSourceEvent event){
      event.doit=!treeViewer.getSelection().isEmpty();
      if (event.doit) {
        Object sel=((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
        if (!(sel instanceof TableNode)) {
          event.doit=false;
        }
 else {
          TableNode tn=(TableNode)sel;
          TableNodeTransfer.getInstance().setSelection(tn);
          if (!tn.isTable())           event.doit=false;
        }
      }
    }
  }
);
  treeViewer.setUseHashlookup(true);
  treeViewer.setContentProvider(new DBTreeContentProvider());
  treeViewer.setLabelProvider(new DBTreeLabelProvider());
  treeViewer.setInput(rootNode);
  treeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent ev){
      DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
      synchronizeDetailView(detailView);
    }
  }
);
  treeViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      try {
        DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        if (detailView == null) {
          getSite().getPage().showView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        }
        getSite().getPage().bringToTop(detailView);
        synchronizeDetailView(detailView);
      }
 catch (      Exception e) {
      }
    }
  }
);
  treeViewer.addTreeListener(new ITreeViewerListener(){
    public void treeCollapsed(    TreeExpansionEvent event){
      INode node=(INode)event.getElement();
      node.setExpanded(false);
      TreeViewer viewer=(TreeViewer)event.getSource();
      viewer.update(node,null);
    }
    public void treeExpanded(    TreeExpansionEvent event){
      INode node=(INode)event.getElement();
      node.setExpanded(true);
      TreeViewer viewer=(TreeViewer)event.getSource();
      viewer.update(node,null);
    }
  }
);
  _tabFolder.setSelection(_tabFolder.getItemCount() - 1);
  DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
  if (detailView != null) {
    synchronizeDetailView(detailView);
    getSite().getPage().bringToTop(detailView);
  }
  composite.layout();
  _tabFolder.layout();
  _tabFolder.redraw();
  getSite().getPage().bringToTop(this);
  final DBTreeActionGroup actionGroup=new DBTreeActionGroup(treeViewer);
  MenuManager menuManager=new MenuManager(""String_Node_Str"");
  menuManager.setRemoveAllWhenShown(true);
  Menu contextMenu=menuManager.createContextMenu(treeViewer.getTree());
  treeViewer.getTree().setMenu(contextMenu);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      actionGroup.fillContextMenu(manager);
    }
  }
);
}","/** 
 * Add a new session to the database structure view. This will create a new tab for the session.
 * @param session
 */
private void addSession(final MetaDataSession session) throws SQLCannotConnectException {
  if (_allSessions.contains(session)) {
    return;
  }
  try {
    session.getMetaData();
    session.setAutoCommit(true);
  }
 catch (  SQLCannotConnectException e) {
    SQLExplorerPlugin.error(e);
    throw e;
  }
catch (  SQLException e) {
    SQLExplorerPlugin.error(e);
    MessageDialog.openError(getSite().getShell(),""String_Node_Str"",e.getMessage());
  }
  DatabaseNode rootNode=session.getRoot();
  if (rootNode == null) {
    return;
  }
  _allSessions.add(session);
  if (_filterAction != null) {
    _filterAction.setEnabled(true);
  }
  if (_tabFolder == null || _tabFolder.isDisposed()) {
    clearParent();
    _tabFolder=new CTabFolder(_parent,SWT.TOP | SWT.CLOSE);
    _tabFolder.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        synchronizeDetailView(detailView);
      }
    }
);
    Display display=getSite().getShell().getDisplay();
    _tabFolder.setSelectionBackground(new Color[]{display.getSystemColor(SWT.COLOR_WHITE),new Color(null,211,225,250),new Color(null,175,201,246),IConstants.TAB_BORDER_COLOR},new int[]{25,50,75},true);
    _tabFolder.addCTabFolder2Listener(new CTabFolder2Adapter(){
      @Override public void close(      CTabFolderEvent event){
        CTabItem tabItem=(CTabItem)event.item;
        TabData tabData=(TabData)tabItem.getData();
        _allSessions.remove(tabData.session);
        event.doit=true;
      }
    }
);
    _parent.layout();
    _parent.redraw();
  }
  final CTabItem tabItem=new CTabItem(_tabFolder,SWT.NULL);
  TabData tabData=new TabData();
  tabItem.setData(tabData);
  tabData.session=session;
  String labelText=session.getUser().getDescription();
  tabItem.setText(labelText);
  Composite composite=new Composite(_tabFolder,SWT.NULL);
  composite.setLayout(new FillLayout());
  tabItem.setControl(composite);
  final TreeViewer treeViewer=new TreeViewer(composite,SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI| SWT.BORDER);
  tabData.treeViewer=treeViewer;
  Transfer[] transfers=new Transfer[]{TableNodeTransfer.getInstance()};
  treeViewer.addDragSupport(DND.DROP_COPY,transfers,new DragSourceListener(){
    public void dragFinished(    DragSourceEvent event){
      System.out.println(""String_Node_Str"");
      TableNodeTransfer.getInstance().setSelection(null);
    }
    public void dragSetData(    DragSourceEvent event){
      Object sel=((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
      event.data=sel;
    }
    public void dragStart(    DragSourceEvent event){
      event.doit=!treeViewer.getSelection().isEmpty();
      if (event.doit) {
        Object sel=((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
        if (!(sel instanceof TableNode)) {
          event.doit=false;
        }
 else {
          TableNode tn=(TableNode)sel;
          TableNodeTransfer.getInstance().setSelection(tn);
          if (!tn.isTable()) {
            event.doit=false;
          }
        }
      }
    }
  }
);
  treeViewer.setUseHashlookup(true);
  treeViewer.setContentProvider(new DBTreeContentProvider());
  treeViewer.setLabelProvider(new DBTreeLabelProvider());
  treeViewer.setInput(rootNode);
  treeViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent ev){
      DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
      synchronizeDetailView(detailView);
    }
  }
);
  treeViewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      try {
        DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        if (detailView == null) {
          getSite().getPage().showView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
        }
        getSite().getPage().bringToTop(detailView);
        synchronizeDetailView(detailView);
      }
 catch (      Exception e) {
      }
    }
  }
);
  treeViewer.addTreeListener(new ITreeViewerListener(){
    public void treeCollapsed(    TreeExpansionEvent event){
      INode node=(INode)event.getElement();
      node.setExpanded(false);
      TreeViewer viewer=(TreeViewer)event.getSource();
      viewer.update(node,null);
    }
    public void treeExpanded(    TreeExpansionEvent event){
      INode node=(INode)event.getElement();
      node.setExpanded(true);
      TreeViewer viewer=(TreeViewer)event.getSource();
      viewer.update(node,null);
    }
  }
);
  _tabFolder.setSelection(_tabFolder.getItemCount() - 1);
  DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
  if (detailView != null) {
    synchronizeDetailView(detailView);
    getSite().getPage().bringToTop(detailView);
  }
  composite.layout();
  _tabFolder.layout();
  _tabFolder.redraw();
  getSite().getPage().bringToTop(this);
  final DBTreeActionGroup actionGroup=new DBTreeActionGroup(treeViewer);
  MenuManager menuManager=new MenuManager(""String_Node_Str"");
  menuManager.setRemoveAllWhenShown(true);
  Menu contextMenu=menuManager.createContextMenu(treeViewer.getTree());
  treeViewer.getTree().setMenu(contextMenu);
  menuManager.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager manager){
      actionGroup.fillContextMenu(manager);
    }
  }
);
}",0.9923928077455048
137673,"/** 
 * Cleanup and reset detail view.
 * @see org.eclipse.ui.IWorkbenchPart#dispose()
 */
public void dispose(){
  DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
  if (detailView != null) {
    detailView.setSelectedNode(null);
    detailView.dispose();
  }
  _allSessions.clear();
  if (_tabFolder != null && !_tabFolder.isDisposed()) {
    _tabFolder.dispose();
  }
  SQLExplorerPlugin.getDefault().setDatabaseStructureView(null);
}","/** 
 * Cleanup and reset detail view.
 * @see org.eclipse.ui.IWorkbenchPart#dispose()
 */
@Override public void dispose(){
  DatabaseDetailView detailView=(DatabaseDetailView)getSite().getPage().findView(SqlexplorerViewConstants.SQLEXPLORER_DBDETAIL);
  if (detailView != null) {
    detailView.setSelectedNode(null);
  }
  _allSessions.clear();
  if (_tabFolder != null && !_tabFolder.isDisposed()) {
    _tabFolder.dispose();
  }
  SQLExplorerPlugin.getDefault().setDatabaseStructureView(null);
}",0.9644970414201184
137674,"/** 
 * Initializes the view and creates the root tabfolder that holds all the sessions.
 * @see org.eclipse.ui.IWorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
 */
public void createPartControl(Composite parent){
  PlatformUI.getWorkbench().getHelpSystem().setHelp(parent,SQLExplorerPlugin.PLUGIN_ID + ""String_Node_Str"");
  _parent=parent;
  if (_allSessions.isEmpty()) {
    setDefaultMessage();
  }
  _filterAction=new FilterStructureAction();
  _filterAction.setEnabled(!_allSessions.isEmpty());
  IToolBarManager toolBarMgr=getViewSite().getActionBars().getToolBarManager();
  toolBarMgr.add(_filterAction);
}","/** 
 * Initializes the view and creates the root tabfolder that holds all the sessions.
 * @see org.eclipse.ui.IWorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
 */
@Override public void createPartControl(Composite parent){
  PlatformUI.getWorkbench().getHelpSystem().setHelp(parent,SQLExplorerPlugin.PLUGIN_ID + ""String_Node_Str"");
  _parent=parent;
  if (_allSessions.isEmpty()) {
    setDefaultMessage();
  }
  _filterAction=new FilterStructureAction();
  _filterAction.setEnabled(!_allSessions.isEmpty());
  IToolBarManager toolBarMgr=getViewSite().getActionBars().getToolBarManager();
  toolBarMgr.add(_filterAction);
}",0.9921630094043888
137675,"public MetaDataSession getSession(){
  if (_tabFolder == null || _tabFolder.getSelectionIndex() < 0)   return null;
  CTabItem item=_tabFolder.getItem(_tabFolder.getSelectionIndex());
  TabData tabData=(TabData)item.getData();
  return tabData.session;
}","public MetaDataSession getSession(){
  if (_tabFolder == null || _tabFolder.getSelectionIndex() < 0) {
    return null;
  }
  CTabItem item=_tabFolder.getItem(_tabFolder.getSelectionIndex());
  TabData tabData=(TabData)item.getData();
  return tabData.session;
}",0.9302325581395348
137676,"/** 
 * DOC qiongli Comment method ""updateConnetionAliasByName"".
 * @param connection
 * @param aliasName
 */
public void updateConnetionAliasByName(Connection connection,String aliasName){
  if (connection == null || aliasName == null) {
    return;
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  DatabaseStructureView view=sqlPlugin.getDatabaseStructureView();
  if (view != null) {
    view.closeCurrentCabItem(aliasName);
  }
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(aliasName);
  if (alias != null) {
    try {
      aliasManager.removeAlias(aliasName);
      aliasManager.saveAliases();
      aliasManager.modelChanged();
      addConnetionAliasToSQLPlugin(connection);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
}","/** 
 * DOC qiongli Comment method ""updateConnetionAliasByName"".
 * @param connection
 * @param aliasName
 */
public void updateConnetionAliasByName(Connection connection,String aliasName){
  if (connection == null || aliasName == null) {
    return;
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  IWorkbenchPage page=sqlPlugin.getActivePage();
  if (page != null) {
    DatabaseStructureView view=(DatabaseStructureView)page.findView(DatabaseStructureView.class.getName());
    if (view != null) {
      view.closeCurrentCabItem(aliasName);
    }
  }
 else {
    log.error(""String_Node_Str"");
  }
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(aliasName);
  if (alias != null) {
    try {
      aliasManager.removeAlias(aliasName);
      aliasManager.saveAliases();
      aliasManager.modelChanged();
      addConnetionAliasToSQLPlugin(connection);
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
}",0.8843159065628476
137677,"private static boolean containsJavaUDI(IndicatorDefinition definition){
  EList<TaggedValue> tvs=definition.getTaggedValue();
  int findCount=0;
  for (  TaggedValue tv : tvs) {
    if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
      findCount++;
    }
 else     if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
      findCount++;
    }
    if (findCount == 2) {
      return true;
    }
  }
  return false;
}","public static boolean containsJavaUDI(IndicatorDefinition definition){
  EList<TaggedValue> tvs=definition.getTaggedValue();
  int findCount=0;
  for (  TaggedValue tv : tvs) {
    if (tv.getTag().equals(TaggedValueHelper.CLASS_NAME_TEXT)) {
      findCount++;
    }
 else     if (tv.getTag().equals(TaggedValueHelper.JAR_FILE_PATH)) {
      findCount++;
    }
    if (findCount == 2) {
      return true;
    }
  }
  return false;
}",0.9873125720876584
137678,"/** 
 * Returns unused connections
 * @return
 */
public List<SQLConnection> getUnusedConnections(){
  LinkedList<SQLConnection> result=new LinkedList<SQLConnection>();
  result.addAll(allocated);
  result.addAll(unused);
  return result;
}","/** 
 * Returns unused connections
 * @return
 */
public List<SQLConnection> getUnusedConnections(){
  LinkedList<SQLConnection> result=new LinkedList<SQLConnection>();
  result.addAll(unused);
  return result;
}",0.8716814159292036
137679,"@Override public List<IRepositoryNode> getChildren(){
  reloadConnectionViewObject();
  if (!this.isReload() && !children.isEmpty()) {
    return filterResultsIfAny(children);
  }
  children.clear();
  String filterCharater=null;
  List<TdColumn> tdcolumns=new ArrayList<TdColumn>();
  IRepositoryViewObject meataColumnSetObject=this.getParent().getObject();
  if (meataColumnSetObject instanceof TdTableRepositoryObject) {
    TdTableRepositoryObject tdTableRepositoryObject=(TdTableRepositoryObject)meataColumnSetObject;
    tdTable=tdTableRepositoryObject.getTdTable();
    columns=tdTable.getColumns();
    filterCharater=ColumnHelper.getColumnFilter(tdTable);
    item=(ConnectionItem)tdTableRepositoryObject.getViewObject().getProperty().getItem();
  }
 else   if (meataColumnSetObject instanceof TdViewRepositoryObject) {
    TdViewRepositoryObject tdViewRepositoryObject=(TdViewRepositoryObject)meataColumnSetObject;
    tdView=tdViewRepositoryObject.getTdView();
    columns=tdView.getColumns();
    filterCharater=ColumnHelper.getColumnFilter(tdView);
    item=(ConnectionItem)tdViewRepositoryObject.getViewObject().getProperty().getItem();
  }
  connection=item.getConnection();
  if (columns.size() <= 0 && !isOnFilterring()) {
    try {
      if (tdTable != null) {
        tdcolumns=DqRepositoryViewService.getColumns(connection,tdTable,null,true);
      }
 else       if (tdView != null) {
        tdcolumns=DqRepositoryViewService.getColumns(connection,tdView,null,true);
      }
      if (tdcolumns.size() > 0) {
        ElementWriterFactory.getInstance().createDataProviderWriter().save(item,false);
      }
    }
 catch (    RuntimeException e) {
      throw new RuntimeException(e);
    }
catch (    Exception e) {
      log.error(e,e);
    }
  }
 else {
    for (    MetadataColumn mec : columns) {
      tdcolumns.add((TdColumn)mec);
    }
  }
  if (filterCharater != null && !filterCharater.equals(""String_Node_Str"")) {
    tdcolumns=RepositoryNodeHelper.filterColumns(tdcolumns,filterCharater);
  }
  createTdcolumnsNode(tdcolumns,children);
  this.setReload(false);
  return filterResultsIfAny(children);
}","@Override public List<IRepositoryNode> getChildren(){
  reloadConnectionViewObject();
  if (!this.isReload() && !children.isEmpty()) {
    return filterResultsIfAny(children);
  }
  children.clear();
  String filterCharater=null;
  List<TdColumn> tdcolumns=new ArrayList<TdColumn>();
  IRepositoryViewObject meataColumnSetObject=this.getParent().getObject();
  if (meataColumnSetObject instanceof TdTableRepositoryObject) {
    TdTableRepositoryObject tdTableRepositoryObject=(TdTableRepositoryObject)meataColumnSetObject;
    tdTable=tdTableRepositoryObject.getTdTable();
    columns=tdTable.getColumns();
    filterCharater=ColumnHelper.getColumnFilter(tdTable);
    item=(ConnectionItem)tdTableRepositoryObject.getViewObject().getProperty().getItem();
  }
 else   if (meataColumnSetObject instanceof TdViewRepositoryObject) {
    TdViewRepositoryObject tdViewRepositoryObject=(TdViewRepositoryObject)meataColumnSetObject;
    tdView=tdViewRepositoryObject.getTdView();
    columns=tdView.getColumns();
    filterCharater=ColumnHelper.getColumnFilter(tdView);
    item=(ConnectionItem)tdViewRepositoryObject.getViewObject().getProperty().getItem();
  }
  connection=item.getConnection();
  if (columns.size() <= 0 && !isOnFilterring()) {
    try {
      if (tdTable != null) {
        tdcolumns=DqRepositoryViewService.getColumns(connection,tdTable,null,true);
      }
 else       if (tdView != null) {
        tdcolumns=DqRepositoryViewService.getColumns(connection,tdView,null,true);
      }
      if (tdcolumns.size() > 0) {
        ElementWriterFactory.getInstance().createDataProviderWriter().save(item,false);
      }
    }
 catch (    MissingDriverException e) {
      throw e;
    }
catch (    Exception e) {
      log.error(e,e);
    }
  }
 else {
    for (    MetadataColumn mec : columns) {
      tdcolumns.add((TdColumn)mec);
    }
  }
  if (filterCharater != null && !filterCharater.equals(""String_Node_Str"")) {
    tdcolumns=RepositoryNodeHelper.filterColumns(tdcolumns,filterCharater);
  }
  createTdcolumnsNode(tdcolumns,children);
  this.setReload(false);
  return filterResultsIfAny(children);
}",0.9806877060763072
137680,"private boolean hasChildrenInDataBase(){
  boolean hasChildrenInDB=false;
  IRepositoryViewObject object=this.getParent().getObject();
  if (object instanceof MetadataCatalogRepositoryObject) {
    viewObject=((MetadataCatalogRepositoryObject)object).getViewObject();
    item=(ConnectionItem)viewObject.getProperty().getItem();
    connection=item.getConnection();
    catalog=((MetadataCatalogRepositoryObject)object).getCatalog();
    try {
      hasChildrenInDB=DqRepositoryViewService.isContainsTable(connection,catalog,null);
    }
 catch (    Exception e) {
      log.error(e.toString());
    }
  }
 else {
    viewObject=((MetadataSchemaRepositoryObject)object).getViewObject();
    item=(ConnectionItem)viewObject.getProperty().getItem();
    connection=item.getConnection();
    schema=((MetadataSchemaRepositoryObject)object).getSchema();
    try {
      hasChildrenInDB=DqRepositoryViewService.isContainsTable(connection,schema,null);
    }
 catch (    RuntimeException e) {
      throw new RuntimeException(e);
    }
catch (    Exception e) {
      log.error(e.toString());
    }
  }
  return hasChildrenInDB;
}","private boolean hasChildrenInDataBase(){
  boolean hasChildrenInDB=false;
  IRepositoryViewObject object=this.getParent().getObject();
  if (object instanceof MetadataCatalogRepositoryObject) {
    viewObject=((MetadataCatalogRepositoryObject)object).getViewObject();
    item=(ConnectionItem)viewObject.getProperty().getItem();
    connection=item.getConnection();
    catalog=((MetadataCatalogRepositoryObject)object).getCatalog();
    try {
      hasChildrenInDB=DqRepositoryViewService.isContainsTable(connection,catalog,null);
    }
 catch (    Exception e) {
      log.error(e.toString());
    }
  }
 else {
    viewObject=((MetadataSchemaRepositoryObject)object).getViewObject();
    item=(ConnectionItem)viewObject.getProperty().getItem();
    connection=item.getConnection();
    schema=((MetadataSchemaRepositoryObject)object).getSchema();
    try {
      hasChildrenInDB=DqRepositoryViewService.isContainsTable(connection,schema,null);
    }
 catch (    MissingDriverException e) {
      throw e;
    }
catch (    Exception e) {
      log.error(e.toString());
    }
  }
  return hasChildrenInDB;
}",0.9632616487455196
137681,"private boolean hasChildrenInDataBase(){
  boolean hasChildrenInDB=false;
  IRepositoryViewObject object=this.getParent().getObject();
  if (object instanceof MetadataCatalogRepositoryObject) {
    viewObject=((MetadataCatalogRepositoryObject)object).getViewObject();
    item=(ConnectionItem)viewObject.getProperty().getItem();
    connection=item.getConnection();
    catalog=((MetadataCatalogRepositoryObject)object).getCatalog();
    try {
      hasChildrenInDB=DqRepositoryViewService.isContainsView(connection,catalog,null);
    }
 catch (    Exception e) {
      log.error(e.toString());
    }
  }
 else {
    viewObject=((MetadataSchemaRepositoryObject)object).getViewObject();
    item=(ConnectionItem)viewObject.getProperty().getItem();
    connection=item.getConnection();
    schema=((MetadataSchemaRepositoryObject)object).getSchema();
    try {
      hasChildrenInDB=DqRepositoryViewService.isContainsView(connection,schema,null);
    }
 catch (    RuntimeException e) {
      throw new RuntimeException(e);
    }
catch (    Exception e) {
      log.error(e.toString());
    }
  }
  return hasChildrenInDB;
}","private boolean hasChildrenInDataBase(){
  boolean hasChildrenInDB=false;
  IRepositoryViewObject object=this.getParent().getObject();
  if (object instanceof MetadataCatalogRepositoryObject) {
    viewObject=((MetadataCatalogRepositoryObject)object).getViewObject();
    item=(ConnectionItem)viewObject.getProperty().getItem();
    connection=item.getConnection();
    catalog=((MetadataCatalogRepositoryObject)object).getCatalog();
    try {
      hasChildrenInDB=DqRepositoryViewService.isContainsView(connection,catalog,null);
    }
 catch (    Exception e) {
      log.error(e.toString());
    }
  }
 else {
    viewObject=((MetadataSchemaRepositoryObject)object).getViewObject();
    item=(ConnectionItem)viewObject.getProperty().getItem();
    connection=item.getConnection();
    schema=((MetadataSchemaRepositoryObject)object).getSchema();
    try {
      hasChildrenInDB=DqRepositoryViewService.isContainsView(connection,schema,null);
    }
 catch (    MissingDriverException e) {
      throw e;
    }
catch (    Exception e) {
      log.error(e.toString());
    }
  }
  return hasChildrenInDB;
}",0.9631956912028724
137682,"public void selectionChanged(IWorkbenchPart part,ISelection selection){
  clearContainer();
  boolean isNeedcreateDefault=true;
  try {
    if (part instanceof DQRespositoryView) {
      if (selection.equals(currentSelection)) {
        return;
      }
 else {
        currentSelection=selection;
      }
      StructuredSelection sel=(StructuredSelection)selection;
      Object fe=sel.getFirstElement();
      if (fe instanceof AnalysisRepNode || fe instanceof ReportRepNode || fe instanceof SysIndicatorDefinitionRepNode|| fe instanceof PatternRepNode|| fe instanceof RuleRepNode) {
        fe=((IRepositoryNode)fe).getObject();
      }
      if (fe instanceof IFile) {
        IFile fe2=(IFile)fe;
        isNeedcreateDefault=createFileDetail(isNeedcreateDefault,fe2);
      }
 else       if (fe instanceof IRepositoryViewObject) {
        isNeedcreateDefault=createFileDetail(isNeedcreateDefault,(IRepositoryViewObject)fe);
      }
 else       if (fe instanceof DBConnectionRepNode) {
        DBConnectionRepNode connNode=(DBConnectionRepNode)fe;
        ConnectionItem connectionItem=(ConnectionItem)connNode.getObject().getProperty().getItem();
        createDataProviderDetail(connectionItem);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DBCatalogRepNode) {
        DBCatalogRepNode catalogNode=(DBCatalogRepNode)fe;
        Catalog catalog=catalogNode.getCatalog();
        createTdCatalogDetail(catalog);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DBSchemaRepNode) {
        DBSchemaRepNode schemaNode=(DBSchemaRepNode)fe;
        Schema schema=schemaNode.getSchema();
        createTdSchemaDetail(schema);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DBTableRepNode) {
        DBTableRepNode tableNode=(DBTableRepNode)fe;
        if (!DQRepositoryNode.isOnFilterring()) {
          tableNode.getChildren().get(0).getChildren();
        }
        TdTable tdTable=tableNode.getTdTable();
        createTableDetail(tdTable);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DBViewRepNode) {
        DBViewRepNode viewNode=(DBViewRepNode)fe;
        if (!DQRepositoryNode.isOnFilterring()) {
          viewNode.getChildren().get(0).getChildren();
        }
        createNameCommentDetail(viewNode.getTdView());
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DBColumnRepNode) {
        DBColumnRepNode columnNode=(DBColumnRepNode)fe;
        TdColumn column=columnNode.getTdColumn();
        createTdColumn(column);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof IEcosComponent) {
        IEcosComponent component=(IEcosComponent)fe;
        createEcosComponent(component);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof RegularExpression) {
        RegularExpression regularExpression=(RegularExpression)fe;
        createRegularExpression(regularExpression);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof PatternLanguageRepNode) {
        PatternLanguageRepNode pattLangNode=(PatternLanguageRepNode)fe;
        createRegularExpression(pattLangNode.getRegularExpression());
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof SourceFileRepNode) {
        IPath filePath=WorkbenchUtils.getFilePath((SourceFileRepNode)fe);
        IFile file=ResourceManager.getRootProject().getFile(filePath);
        createSqlFileDetail(file);
      }
 else       if (fe instanceof ExchangeComponentRepNode) {
        IEcosComponent ecosComponent=((ExchangeComponentRepNode)fe).getEcosComponent();
        IEcosComponent component=ecosComponent;
        createEcosComponent(component);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof MDMConnectionRepNode) {
        MDMConnectionRepNode mdmNode=(MDMConnectionRepNode)fe;
        MDMConnection mdmConnection=mdmNode.getMdmConnection();
        createDataProviderDetail(mdmConnection);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DFConnectionRepNode) {
        DFConnectionRepNode dfNode=(DFConnectionRepNode)fe;
        DelimitedFileConnection dfConnection=dfNode.getDfConnection();
        createDFconnectionName(dfNode.getObject().getLabel());
        createDataProviderDetail(dfConnection);
        isNeedcreateDefault=false;
      }
      if (PluginChecker.isTDQLoaded()) {
        if (fe instanceof EObject) {
          createTechnicalDetail((EObject)fe);
        }
 else         if (fe instanceof IFile) {
          createTechnicalDetail((IFile)fe);
        }
 else         if (fe instanceof IRepositoryViewObject) {
          createTechnicalDetail((IRepositoryViewObject)fe);
        }
 else {
          createExtDefault();
        }
      }
      if (!scomp.isDisposed()) {
        scomp.setMinSize(composite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
        composite.layout();
      }
    }
 else     if (part instanceof CommonFormEditor) {
      CommonFormEditor editor=(CommonFormEditor)part;
      IEditorInput editorInput=editor.getEditorInput();
      if (editorInput instanceof IFileEditorInput) {
        IFileEditorInput input=(IFileEditorInput)editorInput;
        IFile file=input.getFile();
        isNeedcreateDefault=createFileDetail(isNeedcreateDefault,file);
      }
    }
    if (isNeedcreateDefault) {
      createDefault();
    }
    if (!gContainer.isDisposed()) {
      gContainer.layout();
      if (tContainer != null) {
        tContainer.layout();
      }
    }
  }
 catch (  RuntimeException e) {
    int indexOf=e.getMessage().indexOf(""String_Node_Str"");
    if (indexOf > 0 && PluginChecker.isOnlyTopLoaded()) {
      String errorMessage=e.getMessage().substring(indexOf);
      MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),errorMessage);
    }
 else {
      log.error(e);
    }
  }
}","public void selectionChanged(IWorkbenchPart part,ISelection selection){
  clearContainer();
  boolean isNeedcreateDefault=true;
  try {
    if (part instanceof DQRespositoryView) {
      if (selection.equals(currentSelection)) {
        return;
      }
 else {
        currentSelection=selection;
      }
      StructuredSelection sel=(StructuredSelection)selection;
      Object fe=sel.getFirstElement();
      if (fe instanceof AnalysisRepNode || fe instanceof ReportRepNode || fe instanceof SysIndicatorDefinitionRepNode|| fe instanceof PatternRepNode|| fe instanceof RuleRepNode) {
        fe=((IRepositoryNode)fe).getObject();
      }
      if (fe instanceof IFile) {
        IFile fe2=(IFile)fe;
        isNeedcreateDefault=createFileDetail(isNeedcreateDefault,fe2);
      }
 else       if (fe instanceof IRepositoryViewObject) {
        isNeedcreateDefault=createFileDetail(isNeedcreateDefault,(IRepositoryViewObject)fe);
      }
 else       if (fe instanceof DBConnectionRepNode) {
        DBConnectionRepNode connNode=(DBConnectionRepNode)fe;
        ConnectionItem connectionItem=(ConnectionItem)connNode.getObject().getProperty().getItem();
        createDataProviderDetail(connectionItem);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DBCatalogRepNode) {
        DBCatalogRepNode catalogNode=(DBCatalogRepNode)fe;
        Catalog catalog=catalogNode.getCatalog();
        createTdCatalogDetail(catalog);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DBSchemaRepNode) {
        DBSchemaRepNode schemaNode=(DBSchemaRepNode)fe;
        Schema schema=schemaNode.getSchema();
        createTdSchemaDetail(schema);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DBTableRepNode) {
        DBTableRepNode tableNode=(DBTableRepNode)fe;
        if (!DQRepositoryNode.isOnFilterring()) {
          tableNode.getChildren().get(0).getChildren();
        }
        TdTable tdTable=tableNode.getTdTable();
        createTableDetail(tdTable);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DBViewRepNode) {
        DBViewRepNode viewNode=(DBViewRepNode)fe;
        if (!DQRepositoryNode.isOnFilterring()) {
          viewNode.getChildren().get(0).getChildren();
        }
        createNameCommentDetail(viewNode.getTdView());
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DBColumnRepNode) {
        DBColumnRepNode columnNode=(DBColumnRepNode)fe;
        TdColumn column=columnNode.getTdColumn();
        createTdColumn(column);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof IEcosComponent) {
        IEcosComponent component=(IEcosComponent)fe;
        createEcosComponent(component);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof RegularExpression) {
        RegularExpression regularExpression=(RegularExpression)fe;
        createRegularExpression(regularExpression);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof PatternLanguageRepNode) {
        PatternLanguageRepNode pattLangNode=(PatternLanguageRepNode)fe;
        createRegularExpression(pattLangNode.getRegularExpression());
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof SourceFileRepNode) {
        IPath filePath=WorkbenchUtils.getFilePath((SourceFileRepNode)fe);
        IFile file=ResourceManager.getRootProject().getFile(filePath);
        createSqlFileDetail(file);
      }
 else       if (fe instanceof ExchangeComponentRepNode) {
        IEcosComponent ecosComponent=((ExchangeComponentRepNode)fe).getEcosComponent();
        IEcosComponent component=ecosComponent;
        createEcosComponent(component);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof MDMConnectionRepNode) {
        MDMConnectionRepNode mdmNode=(MDMConnectionRepNode)fe;
        MDMConnection mdmConnection=mdmNode.getMdmConnection();
        createDataProviderDetail(mdmConnection);
        isNeedcreateDefault=false;
      }
 else       if (fe instanceof DFConnectionRepNode) {
        DFConnectionRepNode dfNode=(DFConnectionRepNode)fe;
        DelimitedFileConnection dfConnection=dfNode.getDfConnection();
        createDFconnectionName(dfNode.getObject().getLabel());
        createDataProviderDetail(dfConnection);
        isNeedcreateDefault=false;
      }
      if (PluginChecker.isTDQLoaded()) {
        if (fe instanceof EObject) {
          createTechnicalDetail((EObject)fe);
        }
 else         if (fe instanceof IFile) {
          createTechnicalDetail((IFile)fe);
        }
 else         if (fe instanceof IRepositoryViewObject) {
          createTechnicalDetail((IRepositoryViewObject)fe);
        }
 else {
          createExtDefault();
        }
      }
      if (!scomp.isDisposed()) {
        scomp.setMinSize(composite.computeSize(SWT.DEFAULT,SWT.DEFAULT));
        composite.layout();
      }
    }
 else     if (part instanceof CommonFormEditor) {
      CommonFormEditor editor=(CommonFormEditor)part;
      IEditorInput editorInput=editor.getEditorInput();
      if (editorInput instanceof IFileEditorInput) {
        IFileEditorInput input=(IFileEditorInput)editorInput;
        IFile file=input.getFile();
        isNeedcreateDefault=createFileDetail(isNeedcreateDefault,file);
      }
    }
    if (isNeedcreateDefault) {
      createDefault();
    }
    if (!gContainer.isDisposed()) {
      gContainer.layout();
      if (tContainer != null) {
        tContainer.layout();
      }
    }
  }
 catch (  MissingDriverException e) {
    if (PluginChecker.isOnlyTopLoaded()) {
      MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),e.getErrorMessage());
    }
 else {
      log.error(e,e);
    }
  }
}",0.9855515893251744
137683,"@Override public String getText(Object element){
  try {
    if (element != null && element instanceof IRepositoryNode) {
      IRepositoryNode node=(IRepositoryNode)element;
      if (node instanceof RecycleBinRepNode || node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
        return node.getLabel();
      }
 else       if (node instanceof DBConnectionSubFolderRepNode) {
        return ((DBConnectionSubFolderRepNode)node).getObject().getLabel();
      }
 else       if (node instanceof DBConnectionFolderRepNode) {
        return DefaultMessagesImpl.getString(""String_Node_Str"");
      }
 else       if (node instanceof DFConnectionSubFolderRepNode) {
        return ((DFConnectionSubFolderRepNode)node).getObject().getLabel();
      }
 else       if (node instanceof DFConnectionFolderRepNode) {
        return DefaultMessagesImpl.getString(""String_Node_Str"");
      }
 else       if (node instanceof MDMSchemaRepNode) {
        return ((MDMSchemaRepNode)node).getLabel();
      }
 else       if (node instanceof MDMConnectionSubFolderRepNode) {
        return ((MDMConnectionSubFolderRepNode)node).getObject().getLabel();
      }
 else       if (node instanceof MDMConnectionFolderRepNode) {
        return DefaultMessagesImpl.getString(""String_Node_Str"");
      }
 else       if (node instanceof DBTableFolderRepNode) {
        return ((DBTableFolderRepNode)node).getLabel();
      }
 else       if (node instanceof DBViewFolderRepNode) {
        return ((DBViewFolderRepNode)node).getLabel();
      }
 else       if (node instanceof DBColumnFolderRepNode) {
        return ((DBColumnFolderRepNode)node).getNodeName();
      }
 else       if (node instanceof DFColumnFolderRepNode) {
        return ((DFColumnFolderRepNode)node).getNodeName();
      }
 else       if (node instanceof DBTableRepNode) {
        return ((DBTableRepNode)node).getLabel();
      }
 else       if (node instanceof DBViewRepNode) {
        return ((DBViewRepNode)node).getLabel();
      }
 else       if (node instanceof DBColumnRepNode) {
        DBColumnRepNode columnNode=(DBColumnRepNode)node;
        return columnNode.getLabel() + LEFT + columnNode.getNodeDataType()+ RIGHT;
      }
 else       if (node instanceof DFColumnRepNode) {
        DFColumnRepNode dfColumnRepNode=(DFColumnRepNode)node;
        String nodeDataType=dfColumnRepNode.getNodeDataType();
        return dfColumnRepNode.getId() + LEFT + nodeDataType+ RIGHT;
      }
 else       if (node instanceof MDMXmlElementRepNode) {
        MDMXmlElementRepNode mdmColumnRepNode=(MDMXmlElementRepNode)node;
        String nodeDataType=mdmColumnRepNode.getNodeDataType();
        if (!PluginConstant.EMPTY_STRING.equals(nodeDataType)) {
          return mdmColumnRepNode.getTdXmlElementType().getName() + LEFT + nodeDataType+ RIGHT;
        }
        return mdmColumnRepNode.getTdXmlElementType().getName();
      }
 else       if (node instanceof AnalysisRepNode || node instanceof ReportRepNode || node instanceof SysIndicatorDefinitionRepNode|| node instanceof PatternRepNode|| node instanceof RuleRepNode|| node instanceof SourceFileRepNode|| node instanceof DFConnectionRepNode|| node instanceof MDMConnectionRepNode) {
        return node.getLabel() + ""String_Node_Str"" + node.getObject().getVersion();
      }
 else       if (node instanceof DBConnectionRepNode) {
        if (!isSupportedConnection(node)) {
          return node.getObject().getLabel() + ""String_Node_Str"";
        }
 else {
          return node.getLabel() + ""String_Node_Str"" + node.getObject().getVersion();
        }
      }
 else       if (node instanceof DBCatalogRepNode) {
        String catalogName=node.getObject().getLabel();
        IPath catalogPath=new Path(catalogName);
        catalogName=catalogPath.removeFileExtension().lastSegment();
        return catalogName;
      }
 else       if (node instanceof AnalysisFolderRepNode) {
        if (node instanceof AnalysisSubFolderRepNode) {
          AnalysisSubFolderRepNode anaSubNode=(AnalysisSubFolderRepNode)node;
          if (node.getObject() == null) {
            return DefaultMessagesImpl.getString(""String_Node_Str"") + anaSubNode.getCount();
          }
          return anaSubNode.getLabelWithCount();
        }
        AnalysisFolderRepNode anaNode=(AnalysisFolderRepNode)node;
        return anaNode.getLabelWithCount();
      }
 else       if (node instanceof ReportFolderRepNode) {
        if (node instanceof ReportSubFolderRepNode) {
          ReportSubFolderRepNode repSubNode=(ReportSubFolderRepNode)node;
          if (!ReportSubFolderType.SUB_FOLDER.equals(repSubNode.getReportSubFolderType())) {
            return (String)node.getProperties(EProperties.LABEL) + repSubNode.getCount();
          }
          return repSubNode.getLabelWithCount();
        }
        ReportFolderRepNode repNode=(ReportFolderRepNode)node;
        return repNode.getLabelWithCount();
      }
 else       if (node instanceof PatternLanguageRepNode) {
        return node.getLabel();
      }
 else       if (node instanceof ReportFileRepNode || node instanceof ReportAnalysisRepNode) {
        return node.getLabel();
      }
      String label=node.getObject().getLabel();
      boolean startsWith=label.startsWith(DQStructureManager.PREFIX_TDQ);
      if (startsWith) {
        label=label.substring(4,label.length());
        return label;
      }
 else       if (label.equals(EResourceConstant.METADATA.getName())) {
        label=label.substring(0,1).toUpperCase() + label.substring(1);
        return label;
      }
      return node.getObject() == null ? PluginConstant.EMPTY_STRING : label;
    }
  }
 catch (  RuntimeException e) {
    int indexOf=e.getMessage().indexOf(""String_Node_Str"");
    if (indexOf > 0 && PluginChecker.isOnlyTopLoaded()) {
      String errorMessage=e.getMessage().substring(indexOf);
      MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),errorMessage);
    }
 else {
      log.error(e);
    }
  }
  String text=super.getText(element);
  return PluginConstant.EMPTY_STRING.equals(text) ? DefaultMessagesImpl.getString(""String_Node_Str"") : text;
}","@Override public String getText(Object element){
  try {
    if (element != null && element instanceof IRepositoryNode) {
      IRepositoryNode node=(IRepositoryNode)element;
      if (node instanceof RecycleBinRepNode || node instanceof ExchangeCategoryRepNode || node instanceof ExchangeComponentRepNode) {
        return node.getLabel();
      }
 else       if (node instanceof DBConnectionSubFolderRepNode) {
        return ((DBConnectionSubFolderRepNode)node).getObject().getLabel();
      }
 else       if (node instanceof DBConnectionFolderRepNode) {
        return DefaultMessagesImpl.getString(""String_Node_Str"");
      }
 else       if (node instanceof DFConnectionSubFolderRepNode) {
        return ((DFConnectionSubFolderRepNode)node).getObject().getLabel();
      }
 else       if (node instanceof DFConnectionFolderRepNode) {
        return DefaultMessagesImpl.getString(""String_Node_Str"");
      }
 else       if (node instanceof MDMSchemaRepNode) {
        return ((MDMSchemaRepNode)node).getLabel();
      }
 else       if (node instanceof MDMConnectionSubFolderRepNode) {
        return ((MDMConnectionSubFolderRepNode)node).getObject().getLabel();
      }
 else       if (node instanceof MDMConnectionFolderRepNode) {
        return DefaultMessagesImpl.getString(""String_Node_Str"");
      }
 else       if (node instanceof DBTableFolderRepNode) {
        return ((DBTableFolderRepNode)node).getLabel();
      }
 else       if (node instanceof DBViewFolderRepNode) {
        return ((DBViewFolderRepNode)node).getLabel();
      }
 else       if (node instanceof DBColumnFolderRepNode) {
        return ((DBColumnFolderRepNode)node).getNodeName();
      }
 else       if (node instanceof DFColumnFolderRepNode) {
        return ((DFColumnFolderRepNode)node).getNodeName();
      }
 else       if (node instanceof DBTableRepNode) {
        return ((DBTableRepNode)node).getLabel();
      }
 else       if (node instanceof DBViewRepNode) {
        return ((DBViewRepNode)node).getLabel();
      }
 else       if (node instanceof DBColumnRepNode) {
        DBColumnRepNode columnNode=(DBColumnRepNode)node;
        return columnNode.getLabel() + LEFT + columnNode.getNodeDataType()+ RIGHT;
      }
 else       if (node instanceof DFColumnRepNode) {
        DFColumnRepNode dfColumnRepNode=(DFColumnRepNode)node;
        String nodeDataType=dfColumnRepNode.getNodeDataType();
        return dfColumnRepNode.getId() + LEFT + nodeDataType+ RIGHT;
      }
 else       if (node instanceof MDMXmlElementRepNode) {
        MDMXmlElementRepNode mdmColumnRepNode=(MDMXmlElementRepNode)node;
        String nodeDataType=mdmColumnRepNode.getNodeDataType();
        if (!PluginConstant.EMPTY_STRING.equals(nodeDataType)) {
          return mdmColumnRepNode.getTdXmlElementType().getName() + LEFT + nodeDataType+ RIGHT;
        }
        return mdmColumnRepNode.getTdXmlElementType().getName();
      }
 else       if (node instanceof AnalysisRepNode || node instanceof ReportRepNode || node instanceof SysIndicatorDefinitionRepNode|| node instanceof PatternRepNode|| node instanceof RuleRepNode|| node instanceof SourceFileRepNode|| node instanceof DFConnectionRepNode|| node instanceof MDMConnectionRepNode) {
        return node.getLabel() + ""String_Node_Str"" + node.getObject().getVersion();
      }
 else       if (node instanceof DBConnectionRepNode) {
        if (!isSupportedConnection(node)) {
          return node.getObject().getLabel() + ""String_Node_Str"";
        }
 else {
          return node.getLabel() + ""String_Node_Str"" + node.getObject().getVersion();
        }
      }
 else       if (node instanceof DBCatalogRepNode) {
        String catalogName=node.getObject().getLabel();
        IPath catalogPath=new Path(catalogName);
        catalogName=catalogPath.removeFileExtension().lastSegment();
        return catalogName;
      }
 else       if (node instanceof AnalysisFolderRepNode) {
        if (node instanceof AnalysisSubFolderRepNode) {
          AnalysisSubFolderRepNode anaSubNode=(AnalysisSubFolderRepNode)node;
          if (node.getObject() == null) {
            return DefaultMessagesImpl.getString(""String_Node_Str"") + anaSubNode.getCount();
          }
          return anaSubNode.getLabelWithCount();
        }
        AnalysisFolderRepNode anaNode=(AnalysisFolderRepNode)node;
        return anaNode.getLabelWithCount();
      }
 else       if (node instanceof ReportFolderRepNode) {
        if (node instanceof ReportSubFolderRepNode) {
          ReportSubFolderRepNode repSubNode=(ReportSubFolderRepNode)node;
          if (!ReportSubFolderType.SUB_FOLDER.equals(repSubNode.getReportSubFolderType())) {
            return (String)node.getProperties(EProperties.LABEL) + repSubNode.getCount();
          }
          return repSubNode.getLabelWithCount();
        }
        ReportFolderRepNode repNode=(ReportFolderRepNode)node;
        return repNode.getLabelWithCount();
      }
 else       if (node instanceof PatternLanguageRepNode) {
        return node.getLabel();
      }
 else       if (node instanceof ReportFileRepNode || node instanceof ReportAnalysisRepNode) {
        return node.getLabel();
      }
      String label=node.getObject().getLabel();
      boolean startsWith=label.startsWith(DQStructureManager.PREFIX_TDQ);
      if (startsWith) {
        label=label.substring(4,label.length());
        return label;
      }
 else       if (label.equals(EResourceConstant.METADATA.getName())) {
        label=label.substring(0,1).toUpperCase() + label.substring(1);
        return label;
      }
      return node.getObject() == null ? PluginConstant.EMPTY_STRING : label;
    }
  }
 catch (  MissingDriverException e) {
    if (PluginChecker.isOnlyTopLoaded()) {
      MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),e.getErrorMessage());
    }
 else {
      log.error(e,e);
    }
  }
  String text=super.getText(element);
  return PluginConstant.EMPTY_STRING.equals(text) ? DefaultMessagesImpl.getString(""String_Node_Str"") : text;
}",0.9861540967584296
137684,"private boolean isNeedAddDriverConnection(IRepositoryNode repNode){
  ERepositoryObjectType objectType=repNode.getObjectType();
  if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS) {
    ConnectionItem connectionItem=(ConnectionItem)repNode.getObject().getProperty().getItem();
    if (connectionItem.getConnection() instanceof DatabaseConnection) {
      IMetadataConnection metadataConnection=ConvertionHelper.convert(connectionItem.getConnection());
      try {
        MetadataConnectionUtils.getClassDriver(metadataConnection);
      }
 catch (      RuntimeException e) {
        int indexOf=e.getMessage().indexOf(""String_Node_Str"");
        if (indexOf > 0) {
          return true;
        }
 else {
          log.error(e,e);
        }
      }
catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
  return false;
}","private boolean isNeedAddDriverConnection(IRepositoryNode repNode){
  ERepositoryObjectType objectType=repNode.getObjectType();
  if (objectType == ERepositoryObjectType.METADATA_CONNECTIONS) {
    ConnectionItem connectionItem=(ConnectionItem)repNode.getObject().getProperty().getItem();
    if (connectionItem.getConnection() instanceof DatabaseConnection) {
      IMetadataConnection metadataConnection=ConvertionHelper.convert(connectionItem.getConnection());
      try {
        if (!EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConnection.getDbType())) {
          MetadataConnectionUtils.getClassDriver(metadataConnection);
        }
      }
 catch (      MissingDriverException e) {
        return true;
      }
catch (      Exception e) {
        log.error(e,e);
      }
    }
  }
  return false;
}",0.8200836820083682
137685,"@Override public boolean hasChildren(Object element){
  try {
    if (element instanceof IRepositoryNode) {
      IRepositoryNode node=(IRepositoryNode)element;
      IRepositoryViewObject viewObject=node.getObject();
      if (viewObject instanceof MetadataColumnRepositoryObject) {
        return false;
      }
 else       if (viewObject instanceof IMetadataXmlElementType) {
        MetadataXmlElementTypeRepositoryObject metadataXmlElementType=(MetadataXmlElementTypeRepositoryObject)viewObject;
        List<TdXmlElementType> xmlElements=org.talend.cwm.db.connection.ConnectionUtils.getXMLElementsWithOutSave(metadataXmlElementType.getTdXmlElementType());
        return xmlElements.size() > 0;
      }
 else       if (node instanceof ExchangeFolderRepNode) {
        return true;
      }
 else       if (node instanceof ExchangeCategoryRepNode) {
        return true;
      }
 else       if (node instanceof ExchangeComponentRepNode) {
        return false;
      }
 else       if (node instanceof SysIndicatorFolderRepNode) {
        return true;
      }
    }
    if (element instanceof IEcosCategory) {
      return true;
    }
    if (element instanceof DBTableFolderRepNode) {
      if (DQRepositoryNode.isOnFilterring()) {
        return true;
      }
      DBTableFolderRepNode dbTableFolder=(DBTableFolderRepNode)element;
      return dbTableFolder.hasChildren();
    }
    if (element instanceof DBTableRepNode) {
      return true;
    }
    if (element instanceof DBViewRepNode) {
      return true;
    }
    if (element instanceof DBCatalogRepNode) {
      return true;
    }
    if (element instanceof DBSchemaRepNode) {
      return true;
    }
    if (element instanceof DBViewFolderRepNode) {
      if (DQRepositoryNode.isOnFilterring()) {
        return true;
      }
      DBViewFolderRepNode dbViewFolder=(DBViewFolderRepNode)element;
      return dbViewFolder.hasChildren();
    }
  }
 catch (  RuntimeException e) {
    int indexOf=e.getMessage().indexOf(""String_Node_Str"");
    if (indexOf > 0 && PluginChecker.isOnlyTopLoaded()) {
      String errorMessage=e.getMessage().substring(indexOf);
      MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),errorMessage);
    }
 else {
      log.error(e);
    }
    return false;
  }
  return super.hasChildren(element);
}","@Override public boolean hasChildren(Object element){
  try {
    if (element instanceof IRepositoryNode) {
      IRepositoryNode node=(IRepositoryNode)element;
      IRepositoryViewObject viewObject=node.getObject();
      if (viewObject instanceof MetadataColumnRepositoryObject) {
        return false;
      }
 else       if (viewObject instanceof IMetadataXmlElementType) {
        MetadataXmlElementTypeRepositoryObject metadataXmlElementType=(MetadataXmlElementTypeRepositoryObject)viewObject;
        List<TdXmlElementType> xmlElements=org.talend.cwm.db.connection.ConnectionUtils.getXMLElementsWithOutSave(metadataXmlElementType.getTdXmlElementType());
        return xmlElements.size() > 0;
      }
 else       if (node instanceof ExchangeFolderRepNode) {
        return true;
      }
 else       if (node instanceof ExchangeCategoryRepNode) {
        return true;
      }
 else       if (node instanceof ExchangeComponentRepNode) {
        return false;
      }
 else       if (node instanceof SysIndicatorFolderRepNode) {
        return true;
      }
    }
    if (element instanceof IEcosCategory) {
      return true;
    }
    if (element instanceof DBTableFolderRepNode) {
      if (DQRepositoryNode.isOnFilterring()) {
        return true;
      }
      DBTableFolderRepNode dbTableFolder=(DBTableFolderRepNode)element;
      return dbTableFolder.hasChildren();
    }
    if (element instanceof DBTableRepNode) {
      return true;
    }
    if (element instanceof DBViewRepNode) {
      return true;
    }
    if (element instanceof DBCatalogRepNode) {
      return true;
    }
    if (element instanceof DBSchemaRepNode) {
      return true;
    }
    if (element instanceof DBViewFolderRepNode) {
      if (DQRepositoryNode.isOnFilterring()) {
        return true;
      }
      DBViewFolderRepNode dbViewFolder=(DBViewFolderRepNode)element;
      return dbViewFolder.hasChildren();
    }
  }
 catch (  MissingDriverException e) {
    if (PluginChecker.isOnlyTopLoaded()) {
      MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),e.getErrorMessage());
    }
 else {
      log.error(e,e);
    }
    return false;
  }
  return super.hasChildren(element);
}",0.9634093844167024
137686,"/** 
 * get the jrxml folder according to the Report file(if the Report file is out of current workspace, the Jrxml Folder should also out of it).
 * @param rep the Report file
 * @param folder the Jrxml Folder in the current project
 * @return
 */
private File getJrxmlFolderFromReport(TdReport rep,IFolder folder){
  File jrxmlFolderFile=null;
  String repFileString=rep.eResource().getURI().toFileString();
  String projectString=folder.getProject().getLocation().toString();
  if (repFileString.startsWith(projectString)) {
    jrxmlFolderFile=folder.getLocation().toFile();
  }
 else {
    String jrxmlFolderString=folder.getLocation().toString();
    jrxmlFolderFile=new File(jrxmlFolderString.replaceFirst(projectString,repFileString.substring(0,repFileString.indexOf(EResourceConstant.DATA_PROFILING.getPath()) - 1)));
  }
  return jrxmlFolderFile;
}","/** 
 * get the jrxml folder according to the Report file(if the Report file is out of current workspace, the Jrxml Folder should also out of it).
 * @param rep the Report file
 * @param folder the Jrxml Folder in the current project
 * @return
 */
private File getJrxmlFolderFromReport(TdReport rep,IFolder folder){
  File jrxmlFolderFile=null;
  String repFileString=new File(rep.eResource().getURI().toFileString()).getAbsolutePath();
  String projectString=folder.getProject().getLocation().toFile().getAbsolutePath();
  if (repFileString.startsWith(projectString)) {
    jrxmlFolderFile=folder.getLocation().toFile();
  }
 else {
    String jrxmlFolderString=folder.getLocation().toFile().getAbsolutePath();
    jrxmlFolderFile=new File(jrxmlFolderString.replaceFirst(projectString,repFileString.substring(0,repFileString.indexOf(EResourceConstant.DATA_PROFILING.getPath()) - 1)));
  }
  return jrxmlFolderFile;
}",0.9527027027027029
137687,"private void writeToFile(String content) throws FileNotFoundException {
  BufferedOutputStream stream=new BufferedOutputStream(new FileOutputStream(file));
  try {
    stream.write(content.getBytes());
  }
 catch (  IOException e) {
    Assert.fail(""String_Node_Str"");
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        Assert.fail(""String_Node_Str"");
      }
    }
  }
}","private void writeToFile(String content) throws FileNotFoundException {
  BufferedOutputStream stream=new BufferedOutputStream(new FileOutputStream(file.getAbsoluteFile()));
  try {
    stream.write(content.getBytes());
  }
 catch (  IOException e) {
    Assert.fail(""String_Node_Str"");
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException e) {
        Assert.fail(""String_Node_Str"");
      }
    }
  }
}",0.9801324503311258
137688,"@Override protected int getHScrollSelectionInPixels(){
  ScrollBar hScrollBar=getHorizontalBar();
  int res=hScrollBar.getSelection() * COLUMN_WIDTH;
  int max=hScrollBar.getMaximum();
  if (max > 1 && hScrollBar.getSelection() >= max - 3) {
    return res + 100;
  }
  return res;
}","@Override protected int getHScrollSelectionInPixels(){
  ScrollBar hScrollBar=getHorizontalBar();
  int res=hScrollBar.getSelection() * COLUMN_WIDTH;
  int max=hScrollBar.getMaximum();
  if (max > 3 && hScrollBar.getSelection() >= max - 3) {
    return res + 100;
  }
  return res;
}",0.9964664310954064
137689,"/** 
 * DOC bZhou Comment method ""initConnectionItem"".
 * @param tdDataProvider
 * @return
 */
private ConnectionItem initConnectionItem(DatabaseConnection tdDataProvider,Package pack){
  ConnectionItem connectionItem=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
  if (tdDataProvider != null) {
    IMetadataConnection newMetadataConnection=ConvertionHelper.convert(tdDataProvider);
    String connName=tdDataProvider.getName();
    newMetadataConnection.setLabel(connName + ""String_Node_Str"" + pack.getName());
    String database=pack.getName();
    if (pack instanceof Schema) {
      Package parent=ColumnSetHelper.getParentCatalogOrSchema(pack);
      if (parent != null) {
        database=parent.getName();
      }
 else {
        database=tdDataProvider.getSID();
      }
      newMetadataConnection.setUiSchema(pack.getName());
    }
    newMetadataConnection.setDatabase(database);
    DatabaseConnection newConnection=fillCatalogSchema(newMetadataConnection);
    connectionItem.setConnection(newConnection);
  }
  return connectionItem;
}","/** 
 * DOC bZhou Comment method ""initConnectionItem"".
 * @param tdDataProvider
 * @return
 */
private ConnectionItem initConnectionItem(DatabaseConnection tdDataProvider,Package pack){
  ConnectionItem connectionItem=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
  if (tdDataProvider != null) {
    IMetadataConnection newMetadataConnection=ConvertionHelper.convert(tdDataProvider);
    String connName=tdDataProvider.getName();
    newMetadataConnection.setLabel(connName + ""String_Node_Str"" + pack.getName());
    String database=pack.getName();
    if (pack instanceof Schema) {
      Package parent=ColumnSetHelper.getParentCatalogOrSchema(pack);
      if (parent != null) {
        database=parent.getName();
      }
 else {
        database=tdDataProvider.getSID();
      }
      newMetadataConnection.setUiSchema(pack.getName());
      if (EDatabaseTypeName.TERADATA.getXmlName().equalsIgnoreCase(tdDataProvider.getDatabaseType())) {
        if (database.isEmpty()) {
          database=pack.getName();
        }
      }
    }
    newMetadataConnection.setDatabase(database);
    DatabaseConnection newConnection=fillCatalogSchema(newMetadataConnection);
    connectionItem.setConnection(newConnection);
  }
  return connectionItem;
}",0.917707884532529
137690,"@Override protected int getHScrollSelectionInPixels(){
  ScrollBar hScrollBar=getHorizontalBar();
  int res=hScrollBar.getSelection() * COLUMN_WIDTH;
  int max=hScrollBar.getMaximum();
  if (max > 3 && hScrollBar.getSelection() >= max - 3) {
    return res + 100;
  }
  return res;
}","@Override protected int getHScrollSelectionInPixels(){
  ScrollBar hScrollBar=getHorizontalBar();
  int res=hScrollBar.getSelection() * COLUMN_WIDTH;
  int max=hScrollBar.getMaximum();
  if (max > 1 && hScrollBar.getSelection() >= max - 1) {
    return res + 100;
  }
  return res;
}",0.9929328621908128
137691,"public void widgetSelected(SelectionEvent e){
  ReturnCode rc=selectedObjectAvailable();
  if (rc.isOk()) {
    dataProvider=callChangeConnectionAction(masterPage,prevSelect,dataProvider);
    prevSelect=masterPage.getConnCombo().getSelectionIndex();
  }
 else {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",rc.getMessage()));
    masterPage.reloadDataproviderAndFillConnCombo();
    masterPage.getConnCombo().removeSelectionListener(selectionListener);
    String uuid=ResourceHelper.getUUID(dataProvider);
    if (uuid != null) {
      int itemCount=masterPage.getConnCombo().getItemCount();
      for (int i=0; i < itemCount; i++) {
        Object connectionObj=masterPage.getConnCombo().getData(String.valueOf(i));
        RepositoryNode repoNode=(RepositoryNode)connectionObj;
        Connection connection=getConnectionFromRepositoryNode(repoNode);
        if (connection != null && uuid.endsWith(ResourceHelper.getUUID(connection))) {
          masterPage.getConnCombo().select(i);
          break;
        }
      }
    }
    masterPage.getConnCombo().addSelectionListener(selectionListener);
  }
}","public void widgetSelected(SelectionEvent e){
  ReturnCode rc=selectedObjectAvailable();
  if (rc.isOk()) {
    if (dataProvider.eIsProxy()) {
      dataProvider=(Connection)EObjectHelper.resolveObject(dataProvider);
    }
    dataProvider=callChangeConnectionAction(masterPage,prevSelect,dataProvider);
    prevSelect=masterPage.getConnCombo().getSelectionIndex();
  }
 else {
    MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",rc.getMessage()));
    masterPage.reloadDataproviderAndFillConnCombo();
    masterPage.getConnCombo().removeSelectionListener(selectionListener);
    String uuid=ResourceHelper.getUUID(dataProvider);
    if (uuid != null) {
      int itemCount=masterPage.getConnCombo().getItemCount();
      for (int i=0; i < itemCount; i++) {
        Object connectionObj=masterPage.getConnCombo().getData(String.valueOf(i));
        RepositoryNode repoNode=(RepositoryNode)connectionObj;
        Connection connection=getConnectionFromRepositoryNode(repoNode);
        if (connection != null && uuid.endsWith(ResourceHelper.getUUID(connection))) {
          masterPage.getConnCombo().select(i);
          break;
        }
      }
    }
    masterPage.getConnCombo().addSelectionListener(selectionListener);
  }
}",0.954310687326182
137692,"private void setConnectionState(final AbstractAnalysisMetadataPage masterPage,final DataManager dataManager){
  DataManager newDataManager=dataManager;
  final DataManager fianlDataManager;
  if (newDataManager != null) {
    Property prop=PropertyHelper.getProperty(newDataManager);
    masterPage.reloadDataproviderAndFillConnCombo();
    try {
      if (newDataManager.eIsProxy()) {
        IRepositoryViewObject lastVersion=ProxyRepositoryFactory.getInstance().getLastVersion(prop.getId());
        prop=lastVersion.getProperty();
        newDataManager=(DataManager)PropertyHelper.getModelElement(prop);
      }
    }
 catch (    PersistenceException e1) {
      log.error(e1,e1);
    }
    fianlDataManager=newDataManager;
    Object value=null;
    if (SwitchHelpers.CONNECTION_SWITCH.doSwitch(newDataManager) != null) {
      value=masterPage.getConnCombo().getData(prop.getDisplayName() + RepositoryNodeHelper.getConnectionType(newDataManager));
    }
    Integer index=0;
    if (value != null && value instanceof Integer) {
      index=(Integer)value;
    }
    masterPage.getConnCombo().select(index);
    if (prop != null && prop.getItem() != null && prop.getItem().getState() != null && prop.getItem().getState().isDeleted()) {
      masterPage.getLabelConnDeleted().setVisible(true);
      masterPage.getLabelConnDeleted().setText(DefaultMessagesImpl.getString(""String_Node_Str"",prop.getDisplayName()));
    }
 else {
      masterPage.getLabelConnDeleted().setVisible(false);
    }
    if (selectionListener == null) {
      selectionListener=new SelectionListener(){
        private int prevSelect=masterPage.getConnCombo().getSelectionIndex();
        private Connection dataProvider=(Connection)fianlDataManager;
        public void widgetDefaultSelected(        SelectionEvent e){
        }
        public void widgetSelected(        SelectionEvent e){
          ReturnCode rc=selectedObjectAvailable();
          if (rc.isOk()) {
            dataProvider=callChangeConnectionAction(masterPage,prevSelect,dataProvider);
            prevSelect=masterPage.getConnCombo().getSelectionIndex();
          }
 else {
            MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",rc.getMessage()));
            masterPage.reloadDataproviderAndFillConnCombo();
            masterPage.getConnCombo().removeSelectionListener(selectionListener);
            String uuid=ResourceHelper.getUUID(dataProvider);
            if (uuid != null) {
              int itemCount=masterPage.getConnCombo().getItemCount();
              for (int i=0; i < itemCount; i++) {
                Object connectionObj=masterPage.getConnCombo().getData(String.valueOf(i));
                RepositoryNode repoNode=(RepositoryNode)connectionObj;
                Connection connection=getConnectionFromRepositoryNode(repoNode);
                if (connection != null && uuid.endsWith(ResourceHelper.getUUID(connection))) {
                  masterPage.getConnCombo().select(i);
                  break;
                }
              }
            }
            masterPage.getConnCombo().addSelectionListener(selectionListener);
          }
        }
        /** 
 * check the connection is available or not(the connection is exist and not proxy, don't check the connection).
 * @return a ReturnCode, the message is the connection label
 */
        private ReturnCode selectedObjectAvailable(){
          ReturnCode rc=new ReturnCode(""String_Node_Str"",Boolean.FALSE);
          Object connectionObj=masterPage.getConnCombo().getData(masterPage.getConnCombo().getSelectionIndex() + PluginConstant.EMPTY_STRING);
          RepositoryNode repoNode=(RepositoryNode)connectionObj;
          rc.setMessage(repoNode.getLabel());
          Connection connection=getConnectionFromRepositoryNode(repoNode);
          if (connection != null && !connection.eIsProxy()) {
            rc.setOk(true);
          }
          return rc;
        }
        /** 
 * DOC xqliu Comment method ""getConnectionFromRepositoryNode"".
 * @param repoNode
 * @return
 */
        private Connection getConnectionFromRepositoryNode(        RepositoryNode repoNode){
          Connection connection=null;
          IRepositoryViewObject repoViewObject=repoNode.getObject();
          if (repoViewObject != null) {
            Property property=repoViewObject.getProperty();
            if (property != null) {
              Item item=property.getItem();
              if (item != null && item instanceof ConnectionItem) {
                connection=((ConnectionItem)item).getConnection();
              }
            }
          }
          return connection;
        }
      }
;
      masterPage.getConnCombo().addSelectionListener(selectionListener);
    }
  }
 else {
    masterPage.getConnCombo().setText(""String_Node_Str"");
  }
}","private void setConnectionState(final AbstractAnalysisMetadataPage masterPage,final DataManager dataManager){
  DataManager newDataManager=dataManager;
  final DataManager fianlDataManager;
  if (newDataManager != null) {
    Property prop=PropertyHelper.getProperty(newDataManager);
    masterPage.reloadDataproviderAndFillConnCombo();
    if (newDataManager.eIsProxy()) {
      newDataManager=(DataManager)EObjectHelper.resolveObject(newDataManager);
    }
    fianlDataManager=newDataManager;
    Object value=null;
    if (SwitchHelpers.CONNECTION_SWITCH.doSwitch(newDataManager) != null) {
      value=masterPage.getConnCombo().getData(prop.getDisplayName() + RepositoryNodeHelper.getConnectionType(newDataManager));
    }
    Integer index=0;
    if (value != null && value instanceof Integer) {
      index=(Integer)value;
    }
    masterPage.getConnCombo().select(index);
    if (prop != null && prop.getItem() != null && prop.getItem().getState() != null && prop.getItem().getState().isDeleted()) {
      masterPage.getLabelConnDeleted().setVisible(true);
      masterPage.getLabelConnDeleted().setText(DefaultMessagesImpl.getString(""String_Node_Str"",prop.getDisplayName()));
    }
 else {
      masterPage.getLabelConnDeleted().setVisible(false);
    }
    if (selectionListener == null) {
      selectionListener=new SelectionListener(){
        private int prevSelect=masterPage.getConnCombo().getSelectionIndex();
        private Connection dataProvider=(Connection)fianlDataManager;
        public void widgetDefaultSelected(        SelectionEvent e){
        }
        public void widgetSelected(        SelectionEvent e){
          ReturnCode rc=selectedObjectAvailable();
          if (rc.isOk()) {
            if (dataProvider.eIsProxy()) {
              dataProvider=(Connection)EObjectHelper.resolveObject(dataProvider);
            }
            dataProvider=callChangeConnectionAction(masterPage,prevSelect,dataProvider);
            prevSelect=masterPage.getConnCombo().getSelectionIndex();
          }
 else {
            MessageDialogWithToggle.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",rc.getMessage()));
            masterPage.reloadDataproviderAndFillConnCombo();
            masterPage.getConnCombo().removeSelectionListener(selectionListener);
            String uuid=ResourceHelper.getUUID(dataProvider);
            if (uuid != null) {
              int itemCount=masterPage.getConnCombo().getItemCount();
              for (int i=0; i < itemCount; i++) {
                Object connectionObj=masterPage.getConnCombo().getData(String.valueOf(i));
                RepositoryNode repoNode=(RepositoryNode)connectionObj;
                Connection connection=getConnectionFromRepositoryNode(repoNode);
                if (connection != null && uuid.endsWith(ResourceHelper.getUUID(connection))) {
                  masterPage.getConnCombo().select(i);
                  break;
                }
              }
            }
            masterPage.getConnCombo().addSelectionListener(selectionListener);
          }
        }
        /** 
 * check the connection is available or not(the connection is exist and not proxy, don't check the connection).
 * @return a ReturnCode, the message is the connection label
 */
        private ReturnCode selectedObjectAvailable(){
          ReturnCode rc=new ReturnCode(""String_Node_Str"",Boolean.FALSE);
          Object connectionObj=masterPage.getConnCombo().getData(masterPage.getConnCombo().getSelectionIndex() + PluginConstant.EMPTY_STRING);
          RepositoryNode repoNode=(RepositoryNode)connectionObj;
          rc.setMessage(repoNode.getLabel());
          Connection connection=getConnectionFromRepositoryNode(repoNode);
          if (connection != null && !connection.eIsProxy()) {
            rc.setOk(true);
          }
          return rc;
        }
        /** 
 * DOC xqliu Comment method ""getConnectionFromRepositoryNode"".
 * @param repoNode
 * @return
 */
        private Connection getConnectionFromRepositoryNode(        RepositoryNode repoNode){
          Connection connection=null;
          IRepositoryViewObject repoViewObject=repoNode.getObject();
          if (repoViewObject != null) {
            Property property=repoViewObject.getProperty();
            if (property != null) {
              Item item=property.getItem();
              if (item != null && item instanceof ConnectionItem) {
                connection=((ConnectionItem)item).getConnection();
              }
            }
          }
          return connection;
        }
      }
;
      masterPage.getConnCombo().addSelectionListener(selectionListener);
    }
  }
 else {
    masterPage.getConnCombo().setText(""String_Node_Str"");
  }
}",0.9514724180837828
137693,"/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<ModelElement> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    final String caseStr=""String_Node_Str"";
    if (""String_Node_Str"".equals(dbms().getDbmsName()) && (dateFunctions.contains(caseStr) || numericFunctions.contains(caseStr))) {
      this.errorMessage=Messages.getString(""String_Node_Str"");
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),errorMessage);
          return;
        }
      }
);
    }
    List<String> nominalColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(getQuotedColumnName(column));
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    for (    ModelElement column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    String selectItems=createSelect(nominalColumns,computedColumns);
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    String grpByClause=createGroupBy(nominalColumns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=PluginConstant.EMPTY_STRING;
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(sqlGenericExpression.getLanguage(),sqlExpr));
    if (ColumnsetPackage.eINSTANCE.getSimpleStatIndicator().isSuperTypeOf(indicator.eClass())) {
      SimpleStatIndicator simpleIndicator=(SimpleStatIndicator)indicator;
      String columnsName=createSelect(nominalColumns,new ArrayList<String>());
      for (      Indicator leafIndicator : simpleIndicator.getLeafIndicators()) {
        final Expression leafSqlGenericExpression=dbms().getSqlExpression(leafIndicator.getIndicatorDefinition());
        String leafSqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(leafSqlGenericExpression.getBody(),columnsName,tableName,grpByClause);
        leafSqlExpr=dbms().addWhereToStatement(leafSqlExpr,stringDataFilter);
        leafIndicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(leafSqlGenericExpression.getLanguage(),leafSqlExpr));
      }
    }
  }
}","/** 
 * DOC scorreia Comment method ""instantiateQuery"".
 * @param indicator
 */
private void instantiateQuery(Indicator indicator){
  if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
    ColumnSetMultiValueIndicator colSetMultValIndicator=(ColumnSetMultiValueIndicator)indicator;
    final EList<ModelElement> analyzedColumns=colSetMultValIndicator.getAnalyzedColumns();
    final EList<String> numericFunctions=initializeNumericFunctions(colSetMultValIndicator);
    final EList<String> dateFunctions=initializeDateFunctions(colSetMultValIndicator);
    final String caseStr=""String_Node_Str"";
    if (""String_Node_Str"".equals(dbms().getDbmsName()) && (dateFunctions.contains(caseStr) || numericFunctions.contains(caseStr))) {
      this.errorMessage=Messages.getString(""String_Node_Str"");
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          MessageDialog.openWarning(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),errorMessage);
          return;
        }
      }
);
    }
    final Expression sqlGenericExpression=dbms().getSqlExpression(indicator.getIndicatorDefinition());
    List<String> nominalColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNominalColumns()) {
      nominalColumns.add(getQuotedColumnName(column));
    }
    List<String> computedColumns=new ArrayList<String>();
    for (    ModelElement column : colSetMultValIndicator.getNumericColumns()) {
      for (      String f : numericFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    for (    ModelElement column : colSetMultValIndicator.getDateColumns()) {
      for (      String f : dateFunctions) {
        computedColumns.add(replaceVariablesLow(f,getQuotedColumnName(column)));
      }
    }
    computedColumns.add(colSetMultValIndicator.getCountAll());
    List<String> columns=new ArrayList<String>();
    if (AnalysisType.COLUMN_SET == cachedAnalysis.getParameters().getAnalysisType()) {
      for (      ModelElement column : analyzedColumns) {
        columns.add(getQuotedColumnName(column));
      }
    }
 else {
      columns=nominalColumns;
    }
    String selectItems=createSelect(columns,computedColumns);
    String grpByClause=createGroupBy(columns);
    String tableName=getTableName(analyzedColumns);
    String sqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(sqlGenericExpression.getBody(),selectItems,tableName,grpByClause);
    String stringDataFilter=AnalysisHelper.getStringDataFilter(cachedAnalysis);
    if (stringDataFilter == null) {
      stringDataFilter=PluginConstant.EMPTY_STRING;
    }
    sqlExpr=dbms().addWhereToStatement(sqlExpr,stringDataFilter);
    indicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(sqlGenericExpression.getLanguage(),sqlExpr));
    if (ColumnsetPackage.eINSTANCE.getSimpleStatIndicator().isSuperTypeOf(indicator.eClass())) {
      SimpleStatIndicator simpleIndicator=(SimpleStatIndicator)indicator;
      String columnsName=createSelect(nominalColumns,new ArrayList<String>());
      for (      Indicator leafIndicator : simpleIndicator.getLeafIndicators()) {
        final Expression leafSqlGenericExpression=dbms().getSqlExpression(leafIndicator.getIndicatorDefinition());
        String leafSqlExpr=dbms().fillGenericQueryWithColumnTableAndAlias(leafSqlGenericExpression.getBody(),columnsName,tableName,grpByClause);
        leafSqlExpr=dbms().addWhereToStatement(leafSqlExpr,stringDataFilter);
        leafIndicator.setInstantiatedExpression(BooleanExpressionHelper.createTdExpression(leafSqlGenericExpression.getLanguage(),leafSqlExpr));
      }
    }
  }
}",0.927639708911163
137694,"public DataSet nextDataSet() throws SQLException {
  if (currentResultSet != null) {
    currentResultSet.close();
    currentResultSet=null;
  }
  if (state == State.CLOSED) {
    return null;
  }
  if (state == State.PRIMARY_RESULTS) {
    currentResultSet=stmt.getResultSet();
    state=State.SECONDARY_RESULTS;
    if (currentResultSet != null) {
      return new DataSet(currentResultSet,null,maxRows);
    }
  }
  while (state == State.SECONDARY_RESULTS) {
    if (!(""String_Node_Str"".equals(stmt.getClass().getName())) && stmt.getMoreResults()) {
      currentResultSet=stmt.getResultSet();
    }
 else {
      int updateCount=stmt.getUpdateCount();
      if (updateCount != -1 && updateCount != 0) {
        this.updateCount+=updateCount;
      }
 else {
        state=State.PARAMETER_RESULTS;
      }
    }
  }
  if (currentResultSet != null) {
    this.updateCount+=stmt.getUpdateCount();
    return new DataSet(currentResultSet,null,maxRows);
  }
  if (state == State.PARAMETER_RESULTS && parameters != null) {
    CallableStatement stmt=(CallableStatement)this.stmt;
    if (paramIter == null) {
      paramIter=parameters.iterator();
      paramColumnIndex=1;
    }
    while (paramIter.hasNext()) {
      NamedParameter param=paramIter.next();
      if (param.getDataType() == NamedParameter.DataType.CURSOR) {
        currentResultSet=product.getResultSet(stmt,param,paramColumnIndex);
      }
      paramColumnIndex++;
      if (currentResultSet != null) {
        return new DataSet(Messages.getString(""String_Node_Str"") + ' ' + param.getName(),currentResultSet,null,maxRows);
      }
    }
  }
  state=State.CLOSED;
  if (parameters == null) {
    return null;
  }
  if (!(stmt instanceof CallableStatement)) {
    return null;
  }
  CallableStatement stmt=(CallableStatement)this.stmt;
  TreeMap<NamedParameter,ParamValues> params=new TreeMap<NamedParameter,ParamValues>();
  int columnIndex=1;
  int numValues=0;
  for (  NamedParameter param : parameters) {
    if (param.getDataType() != NamedParameter.DataType.CURSOR && param.isOutput()) {
      ParamValues pv=params.get(param);
      if (pv == null) {
        params.put(param,new ParamValues(param,columnIndex));
      }
 else {
        pv.add(columnIndex);
      }
      numValues++;
    }
    columnIndex++;
  }
  if (numValues == 0) {
    return null;
  }
  Comparable[][] rows=new Comparable[numValues][2];
  columnIndex=1;
  int rowIndex=0;
  for (  ParamValues pv : params.values()) {
    int valueIndex=1;
    for (    Integer index : pv.columnIndexes) {
      Comparable[] row=rows[rowIndex++];
      row[0]=pv.param.getName();
      if (pv.columnIndexes.size() > 1) {
        row[0]=(pv.param.getName() + '[' + valueIndex+ ']');
      }
 else {
        row[0]=pv.param.getName();
      }
      row[1]=stmt.getString(index);
      valueIndex++;
    }
  }
  return new DataSet(Messages.getString(""String_Node_Str""),new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},rows);
}","public DataSet nextDataSet() throws SQLException {
  if (currentResultSet != null) {
    currentResultSet.close();
    currentResultSet=null;
  }
  if (state == State.CLOSED) {
    return null;
  }
  if (state == State.PRIMARY_RESULTS) {
    currentResultSet=stmt.getResultSet();
    state=State.SECONDARY_RESULTS;
    if (currentResultSet != null) {
      return new DataSet(currentResultSet,null,maxRows);
    }
  }
  while (state == State.SECONDARY_RESULTS) {
    if (""String_Node_Str"".equals(stmt.getClass().getName())) {
      return null;
    }
    if (!(""String_Node_Str"".equals(stmt.getClass().getName())) && stmt.getMoreResults()) {
      currentResultSet=stmt.getResultSet();
    }
 else {
      int updateCount=stmt.getUpdateCount();
      if (updateCount != -1 && updateCount != 0) {
        this.updateCount+=updateCount;
      }
 else {
        state=State.PARAMETER_RESULTS;
      }
    }
  }
  if (currentResultSet != null) {
    this.updateCount+=stmt.getUpdateCount();
    return new DataSet(currentResultSet,null,maxRows);
  }
  if (state == State.PARAMETER_RESULTS && parameters != null) {
    CallableStatement stmt=(CallableStatement)this.stmt;
    if (paramIter == null) {
      paramIter=parameters.iterator();
      paramColumnIndex=1;
    }
    while (paramIter.hasNext()) {
      NamedParameter param=paramIter.next();
      if (param.getDataType() == NamedParameter.DataType.CURSOR) {
        currentResultSet=product.getResultSet(stmt,param,paramColumnIndex);
      }
      paramColumnIndex++;
      if (currentResultSet != null) {
        return new DataSet(Messages.getString(""String_Node_Str"") + ' ' + param.getName(),currentResultSet,null,maxRows);
      }
    }
  }
  state=State.CLOSED;
  if (parameters == null) {
    return null;
  }
  if (!(stmt instanceof CallableStatement)) {
    return null;
  }
  CallableStatement stmt=(CallableStatement)this.stmt;
  TreeMap<NamedParameter,ParamValues> params=new TreeMap<NamedParameter,ParamValues>();
  int columnIndex=1;
  int numValues=0;
  for (  NamedParameter param : parameters) {
    if (param.getDataType() != NamedParameter.DataType.CURSOR && param.isOutput()) {
      ParamValues pv=params.get(param);
      if (pv == null) {
        params.put(param,new ParamValues(param,columnIndex));
      }
 else {
        pv.add(columnIndex);
      }
      numValues++;
    }
    columnIndex++;
  }
  if (numValues == 0) {
    return null;
  }
  Comparable[][] rows=new Comparable[numValues][2];
  columnIndex=1;
  int rowIndex=0;
  for (  ParamValues pv : params.values()) {
    int valueIndex=1;
    for (    Integer index : pv.columnIndexes) {
      Comparable[] row=rows[rowIndex++];
      row[0]=pv.param.getName();
      if (pv.columnIndexes.size() > 1) {
        row[0]=(pv.param.getName() + '[' + valueIndex+ ']');
      }
 else {
        row[0]=pv.param.getName();
      }
      row[1]=stmt.getString(index);
      valueIndex++;
    }
  }
  return new DataSet(Messages.getString(""String_Node_Str""),new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},rows);
}",0.9855310753041764
137695,"/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(Connection tdDataProvider,String query,String editorName){
  String lEditorName=editorName;
  if (lEditorName == null) {
    lEditorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  String username=JavaSqlFactory.getUsername(tdDataProvider);
  if (username == null || ""String_Node_Str"".equals(username)) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return null;
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    Collection<Connection> allDataProviders=new ArrayList<Connection>();
    List<Connection> conns=new ArrayList<Connection>();
    try {
      for (      ConnectionItem connItem : ProxyRepositoryFactory.getInstance().getMetadataConnectionsItem()) {
        conns.add(connItem.getConnection());
      }
    }
 catch (    PersistenceException e) {
      Log.error(e,e);
    }
    allDataProviders.addAll(conns);
    for (    Connection dataProvider : allDataProviders) {
      if (dataProvider.getName().equals(tdDataProvider.getName())) {
        CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,lEditorName);
      }
    }
  }
 else {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(tdDataProvider);
      if (connection != null) {
        String userName=JavaSqlFactory.getUsername(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ lEditorName+ ""String_Node_Str"");
        net.sourceforge.sqlexplorer.dbproduct.User user=alias.getUser(userName);
        DatabaseConnection databaseConnection=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(connection);
        if (databaseConnection != null) {
          IMetadataConnection metadataConnection=ConvertionHelper.convert(databaseConnection);
          if (metadataConnection != null) {
            user.setMetadataConnection(metadataConnection);
          }
        }
        input.setUser(user);
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor(input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(Connection tdDataProvider,String query,String editorName){
  String lEditorName=editorName;
  if (lEditorName == null) {
    lEditorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    Collection<Connection> allDataProviders=new ArrayList<Connection>();
    List<Connection> conns=new ArrayList<Connection>();
    try {
      for (      ConnectionItem connItem : ProxyRepositoryFactory.getInstance().getMetadataConnectionsItem()) {
        conns.add(connItem.getConnection());
      }
    }
 catch (    PersistenceException e) {
      Log.error(e,e);
    }
    allDataProviders.addAll(conns);
    for (    Connection dataProvider : allDataProviders) {
      if (dataProvider.getName().equals(tdDataProvider.getName())) {
        CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,lEditorName);
      }
    }
  }
 else {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(tdDataProvider);
      if (connection != null) {
        String userName=JavaSqlFactory.getUsername(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ lEditorName+ ""String_Node_Str"");
        net.sourceforge.sqlexplorer.dbproduct.User user=alias.hasNoUserName() ? alias.getDefaultUser() : alias.getUser(userName);
        DatabaseConnection databaseConnection=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(connection);
        if (databaseConnection != null) {
          IMetadataConnection metadataConnection=ConvertionHelper.convert(databaseConnection);
          if (metadataConnection != null) {
            user.setMetadataConnection(metadataConnection);
          }
        }
        input.setUser(user);
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor(input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}",0.9469799961157508
137696,"public DataSet nextDataSet() throws SQLException {
  if (currentResultSet != null) {
    currentResultSet.close();
    currentResultSet=null;
  }
  if (state == State.CLOSED)   return null;
  if (state == State.PRIMARY_RESULTS) {
    currentResultSet=stmt.getResultSet();
    state=State.SECONDARY_RESULTS;
    if (currentResultSet != null)     return new DataSet(currentResultSet,null,maxRows);
  }
  while (state == State.SECONDARY_RESULTS) {
    if (stmt.getMoreResults())     currentResultSet=stmt.getResultSet();
 else {
      int updateCount=stmt.getUpdateCount();
      if (updateCount != -1 && updateCount != 0)       this.updateCount+=updateCount;
 else       state=State.PARAMETER_RESULTS;
    }
  }
  if (currentResultSet != null) {
    this.updateCount+=stmt.getUpdateCount();
    return new DataSet(currentResultSet,null,maxRows);
  }
  if (state == State.PARAMETER_RESULTS && parameters != null) {
    CallableStatement stmt=(CallableStatement)this.stmt;
    if (paramIter == null) {
      paramIter=parameters.iterator();
      paramColumnIndex=1;
    }
    while (paramIter.hasNext()) {
      NamedParameter param=paramIter.next();
      if (param.getDataType() == NamedParameter.DataType.CURSOR)       currentResultSet=product.getResultSet(stmt,param,paramColumnIndex);
      paramColumnIndex++;
      if (currentResultSet != null)       return new DataSet(Messages.getString(""String_Node_Str"") + ' ' + param.getName(),currentResultSet,null,maxRows);
    }
  }
  state=State.CLOSED;
  if (parameters == null)   return null;
  if (!(stmt instanceof CallableStatement))   return null;
  CallableStatement stmt=(CallableStatement)this.stmt;
  TreeMap<NamedParameter,ParamValues> params=new TreeMap<NamedParameter,ParamValues>();
  int columnIndex=1;
  int numValues=0;
  for (  NamedParameter param : parameters) {
    if (param.getDataType() != NamedParameter.DataType.CURSOR && param.isOutput()) {
      ParamValues pv=params.get(param);
      if (pv == null)       params.put(param,new ParamValues(param,columnIndex));
 else       pv.add(columnIndex);
      numValues++;
    }
    columnIndex++;
  }
  if (numValues == 0)   return null;
  Comparable[][] rows=new Comparable[numValues][2];
  columnIndex=1;
  int rowIndex=0;
  for (  ParamValues pv : params.values()) {
    int valueIndex=1;
    for (    Integer index : pv.columnIndexes) {
      Comparable[] row=rows[rowIndex++];
      row[0]=pv.param.getName();
      if (pv.columnIndexes.size() > 1)       row[0]=(pv.param.getName() + '[' + valueIndex+ ']');
 else       row[0]=pv.param.getName();
      row[1]=stmt.getString(index);
      valueIndex++;
    }
  }
  return new DataSet(Messages.getString(""String_Node_Str""),new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},rows);
}","public DataSet nextDataSet() throws SQLException {
  if (currentResultSet != null) {
    currentResultSet.close();
    currentResultSet=null;
  }
  if (state == State.CLOSED)   return null;
  if (state == State.PRIMARY_RESULTS) {
    currentResultSet=stmt.getResultSet();
    state=State.SECONDARY_RESULTS;
    if (currentResultSet != null)     return new DataSet(currentResultSet,null,maxRows);
  }
  while (state == State.SECONDARY_RESULTS) {
    if (""String_Node_Str"".equals(stmt.getClass().getName())) {
      return null;
    }
    if (stmt.getMoreResults())     currentResultSet=stmt.getResultSet();
 else {
      int updateCount=stmt.getUpdateCount();
      if (updateCount != -1 && updateCount != 0)       this.updateCount+=updateCount;
 else       state=State.PARAMETER_RESULTS;
    }
  }
  if (currentResultSet != null) {
    this.updateCount+=stmt.getUpdateCount();
    return new DataSet(currentResultSet,null,maxRows);
  }
  if (state == State.PARAMETER_RESULTS && parameters != null) {
    CallableStatement stmt=(CallableStatement)this.stmt;
    if (paramIter == null) {
      paramIter=parameters.iterator();
      paramColumnIndex=1;
    }
    while (paramIter.hasNext()) {
      NamedParameter param=paramIter.next();
      if (param.getDataType() == NamedParameter.DataType.CURSOR)       currentResultSet=product.getResultSet(stmt,param,paramColumnIndex);
      paramColumnIndex++;
      if (currentResultSet != null)       return new DataSet(Messages.getString(""String_Node_Str"") + ' ' + param.getName(),currentResultSet,null,maxRows);
    }
  }
  state=State.CLOSED;
  if (parameters == null)   return null;
  if (!(stmt instanceof CallableStatement))   return null;
  CallableStatement stmt=(CallableStatement)this.stmt;
  TreeMap<NamedParameter,ParamValues> params=new TreeMap<NamedParameter,ParamValues>();
  int columnIndex=1;
  int numValues=0;
  for (  NamedParameter param : parameters) {
    if (param.getDataType() != NamedParameter.DataType.CURSOR && param.isOutput()) {
      ParamValues pv=params.get(param);
      if (pv == null)       params.put(param,new ParamValues(param,columnIndex));
 else       pv.add(columnIndex);
      numValues++;
    }
    columnIndex++;
  }
  if (numValues == 0)   return null;
  Comparable[][] rows=new Comparable[numValues][2];
  columnIndex=1;
  int rowIndex=0;
  for (  ParamValues pv : params.values()) {
    int valueIndex=1;
    for (    Integer index : pv.columnIndexes) {
      Comparable[] row=rows[rowIndex++];
      row[0]=pv.param.getName();
      if (pv.columnIndexes.size() > 1)       row[0]=(pv.param.getName() + '[' + valueIndex+ ']');
 else       row[0]=pv.param.getName();
      row[1]=stmt.getString(index);
      valueIndex++;
    }
  }
  return new DataSet(Messages.getString(""String_Node_Str""),new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},rows);
}",0.9844797178130512
137697,"/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(Connection tdDataProvider,String query,String editorName){
  String lEditorName=editorName;
  if (lEditorName == null) {
    lEditorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  String username=JavaSqlFactory.getUsername(tdDataProvider);
  if (username == null || ""String_Node_Str"".equals(username)) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return null;
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    Collection<Connection> allDataProviders=new ArrayList<Connection>();
    List<Connection> conns=new ArrayList<Connection>();
    try {
      for (      ConnectionItem connItem : ProxyRepositoryFactory.getInstance().getMetadataConnectionsItem()) {
        conns.add(connItem.getConnection());
      }
    }
 catch (    PersistenceException e) {
      Log.error(e,e);
    }
    allDataProviders.addAll(conns);
    for (    Connection dataProvider : allDataProviders) {
      if (dataProvider.getName().equals(tdDataProvider.getName())) {
        CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,lEditorName);
      }
    }
  }
 else {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(tdDataProvider);
      if (connection != null) {
        String userName=JavaSqlFactory.getUsername(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ lEditorName+ ""String_Node_Str"");
        input.setUser(alias.getUser(userName));
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor(input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(Connection tdDataProvider,String query,String editorName){
  String lEditorName=editorName;
  if (lEditorName == null) {
    lEditorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    Collection<Connection> allDataProviders=new ArrayList<Connection>();
    List<Connection> conns=new ArrayList<Connection>();
    try {
      for (      ConnectionItem connItem : ProxyRepositoryFactory.getInstance().getMetadataConnectionsItem()) {
        conns.add(connItem.getConnection());
      }
    }
 catch (    PersistenceException e) {
      Log.error(e,e);
    }
    allDataProviders.addAll(conns);
    for (    Connection dataProvider : allDataProviders) {
      if (dataProvider.getName().equals(tdDataProvider.getName())) {
        CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,lEditorName);
      }
    }
  }
 else {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(tdDataProvider);
      if (connection != null) {
        String userName=JavaSqlFactory.getUsername(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ lEditorName+ ""String_Node_Str"");
        net.sourceforge.sqlexplorer.dbproduct.User user=alias.hasNoUserName() ? alias.getDefaultUser() : alias.getUser(userName);
        DatabaseConnection databaseConnection=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(connection);
        if (databaseConnection != null) {
          IMetadataConnection metadataConnection=ConvertionHelper.convert(databaseConnection);
          if (metadataConnection != null) {
            user.setMetadataConnection(metadataConnection);
          }
        }
        input.setUser(user);
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor(input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}",0.8379983036471587
137698,"public ExecutionResultImpl(AbstractDatabaseProduct product,Statement stmt,boolean hasResults,LinkedList<NamedParameter> parameters,int maxRows) throws SQLException {
  super();
  this.product=product;
  this.stmt=stmt;
  this.parameters=parameters;
  this.maxRows=maxRows;
  if (!hasResults)   state=State.SECONDARY_RESULTS;
}","public ExecutionResultImpl(AbstractDatabaseProduct product,Statement stmt,boolean hasResults,LinkedList<NamedParameter> parameters,int maxRows) throws SQLException {
  super();
  this.product=product;
  this.stmt=stmt;
  this.parameters=parameters;
  this.maxRows=maxRows;
  if (!hasResults) {
    state=State.SECONDARY_RESULTS;
  }
}",0.987878787878788
137699,"public DataSet nextDataSet() throws SQLException {
  if (currentResultSet != null) {
    currentResultSet.close();
    currentResultSet=null;
  }
  if (state == State.CLOSED)   return null;
  if (state == State.PRIMARY_RESULTS) {
    currentResultSet=stmt.getResultSet();
    state=State.SECONDARY_RESULTS;
    if (currentResultSet != null)     return new DataSet(currentResultSet,null,maxRows);
  }
  while (state == State.SECONDARY_RESULTS) {
    if (!(stmt instanceof HivePreparedStatement) && stmt.getMoreResults())     currentResultSet=stmt.getResultSet();
 else {
      int updateCount=stmt.getUpdateCount();
      if (updateCount != -1 && updateCount != 0)       this.updateCount+=updateCount;
 else       state=State.PARAMETER_RESULTS;
    }
  }
  if (currentResultSet != null) {
    this.updateCount+=stmt.getUpdateCount();
    return new DataSet(currentResultSet,null,maxRows);
  }
  if (state == State.PARAMETER_RESULTS && parameters != null) {
    CallableStatement stmt=(CallableStatement)this.stmt;
    if (paramIter == null) {
      paramIter=parameters.iterator();
      paramColumnIndex=1;
    }
    while (paramIter.hasNext()) {
      NamedParameter param=paramIter.next();
      if (param.getDataType() == NamedParameter.DataType.CURSOR)       currentResultSet=product.getResultSet(stmt,param,paramColumnIndex);
      paramColumnIndex++;
      if (currentResultSet != null)       return new DataSet(Messages.getString(""String_Node_Str"") + ' ' + param.getName(),currentResultSet,null,maxRows);
    }
  }
  state=State.CLOSED;
  if (parameters == null)   return null;
  if (!(stmt instanceof CallableStatement))   return null;
  CallableStatement stmt=(CallableStatement)this.stmt;
  TreeMap<NamedParameter,ParamValues> params=new TreeMap<NamedParameter,ParamValues>();
  int columnIndex=1;
  int numValues=0;
  for (  NamedParameter param : parameters) {
    if (param.getDataType() != NamedParameter.DataType.CURSOR && param.isOutput()) {
      ParamValues pv=params.get(param);
      if (pv == null)       params.put(param,new ParamValues(param,columnIndex));
 else       pv.add(columnIndex);
      numValues++;
    }
    columnIndex++;
  }
  if (numValues == 0)   return null;
  Comparable[][] rows=new Comparable[numValues][2];
  columnIndex=1;
  int rowIndex=0;
  for (  ParamValues pv : params.values()) {
    int valueIndex=1;
    for (    Integer index : pv.columnIndexes) {
      Comparable[] row=rows[rowIndex++];
      row[0]=pv.param.getName();
      if (pv.columnIndexes.size() > 1)       row[0]=(pv.param.getName() + '[' + valueIndex+ ']');
 else       row[0]=pv.param.getName();
      row[1]=stmt.getString(index);
      valueIndex++;
    }
  }
  return new DataSet(Messages.getString(""String_Node_Str""),new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},rows);
}","public DataSet nextDataSet() throws SQLException {
  if (currentResultSet != null) {
    currentResultSet.close();
    currentResultSet=null;
  }
  if (state == State.CLOSED) {
    return null;
  }
  if (state == State.PRIMARY_RESULTS) {
    currentResultSet=stmt.getResultSet();
    state=State.SECONDARY_RESULTS;
    if (currentResultSet != null) {
      return new DataSet(currentResultSet,null,maxRows);
    }
  }
  while (state == State.SECONDARY_RESULTS) {
    if (""String_Node_Str"".equals(stmt.getClass().getName())) {
      return null;
    }
    if (!(stmt instanceof HivePreparedStatement) && stmt.getMoreResults())     currentResultSet=stmt.getResultSet();
 else {
      int updateCount=stmt.getUpdateCount();
      if (updateCount != -1 && updateCount != 0) {
        this.updateCount+=updateCount;
      }
 else {
        state=State.PARAMETER_RESULTS;
      }
    }
  }
  if (currentResultSet != null) {
    this.updateCount+=stmt.getUpdateCount();
    return new DataSet(currentResultSet,null,maxRows);
  }
  if (state == State.PARAMETER_RESULTS && parameters != null) {
    CallableStatement stmt=(CallableStatement)this.stmt;
    if (paramIter == null) {
      paramIter=parameters.iterator();
      paramColumnIndex=1;
    }
    while (paramIter.hasNext()) {
      NamedParameter param=paramIter.next();
      if (param.getDataType() == NamedParameter.DataType.CURSOR) {
        currentResultSet=product.getResultSet(stmt,param,paramColumnIndex);
      }
      paramColumnIndex++;
      if (currentResultSet != null) {
        return new DataSet(Messages.getString(""String_Node_Str"") + ' ' + param.getName(),currentResultSet,null,maxRows);
      }
    }
  }
  state=State.CLOSED;
  if (parameters == null) {
    return null;
  }
  if (!(stmt instanceof CallableStatement)) {
    return null;
  }
  CallableStatement stmt=(CallableStatement)this.stmt;
  TreeMap<NamedParameter,ParamValues> params=new TreeMap<NamedParameter,ParamValues>();
  int columnIndex=1;
  int numValues=0;
  for (  NamedParameter param : parameters) {
    if (param.getDataType() != NamedParameter.DataType.CURSOR && param.isOutput()) {
      ParamValues pv=params.get(param);
      if (pv == null) {
        params.put(param,new ParamValues(param,columnIndex));
      }
 else {
        pv.add(columnIndex);
      }
      numValues++;
    }
    columnIndex++;
  }
  if (numValues == 0) {
    return null;
  }
  Comparable[][] rows=new Comparable[numValues][2];
  columnIndex=1;
  int rowIndex=0;
  for (  ParamValues pv : params.values()) {
    int valueIndex=1;
    for (    Integer index : pv.columnIndexes) {
      Comparable[] row=rows[rowIndex++];
      row[0]=pv.param.getName();
      if (pv.columnIndexes.size() > 1) {
        row[0]=(pv.param.getName() + '[' + valueIndex+ ']');
      }
 else {
        row[0]=pv.param.getName();
      }
      row[1]=stmt.getString(index);
      valueIndex++;
    }
  }
  return new DataSet(Messages.getString(""String_Node_Str""),new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")},rows);
}",0.9386024423337856
137700,"public void close() throws SQLException {
  try {
    stmt.close();
  }
 catch (  SQLException e) {
  }
  if (currentResultSet != null)   currentResultSet.close();
}","public void close() throws SQLException {
  try {
    stmt.close();
  }
 catch (  SQLException e) {
  }
  if (currentResultSet != null) {
    currentResultSet.close();
  }
}",0.9763313609467456
137701,"/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(Connection tdDataProvider,String query,String editorName){
  String lEditorName=editorName;
  if (lEditorName == null) {
    lEditorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  String username=JavaSqlFactory.getUsername(tdDataProvider);
  if (username == null || ""String_Node_Str"".equals(username)) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return null;
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    Collection<Connection> allDataProviders=new ArrayList<Connection>();
    List<Connection> conns=new ArrayList<Connection>();
    try {
      for (      ConnectionItem connItem : ProxyRepositoryFactory.getInstance().getMetadataConnectionsItem()) {
        conns.add(connItem.getConnection());
      }
    }
 catch (    PersistenceException e) {
      Log.error(e,e);
    }
    allDataProviders.addAll(conns);
    for (    Connection dataProvider : allDataProviders) {
      if (dataProvider.getName().equals(tdDataProvider.getName())) {
        CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,lEditorName);
      }
    }
  }
 else {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(tdDataProvider);
      if (connection != null) {
        String userName=JavaSqlFactory.getUsername(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ lEditorName+ ""String_Node_Str"");
        input.setUser(alias.getUser(userName));
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor(input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}","/** 
 * DOC bZhou Comment method ""openInSqlEditor"".
 * @param tdDataProvider
 * @param query
 * @param editorName
 * @return the specified sql editor.
 */
public SQLEditor openInSqlEditor(Connection tdDataProvider,String query,String editorName){
  String lEditorName=editorName;
  if (lEditorName == null) {
    lEditorName=String.valueOf(SQLExplorerPlugin.getDefault().getEditorSerialNo());
  }
  SQLExplorerPlugin sqlPlugin=SQLExplorerPlugin.getDefault();
  AliasManager aliasManager=sqlPlugin.getAliasManager();
  Alias alias=aliasManager.getAlias(tdDataProvider.getName());
  if (alias == null) {
    Collection<Connection> allDataProviders=new ArrayList<Connection>();
    List<Connection> conns=new ArrayList<Connection>();
    try {
      for (      ConnectionItem connItem : ProxyRepositoryFactory.getInstance().getMetadataConnectionsItem()) {
        conns.add(connItem.getConnection());
      }
    }
 catch (    PersistenceException e) {
      Log.error(e,e);
    }
    allDataProviders.addAll(conns);
    for (    Connection dataProvider : allDataProviders) {
      if (dataProvider.getName().equals(tdDataProvider.getName())) {
        CWMPlugin.getDefault().addConnetionAliasToSQLPlugin(dataProvider);
        openInSqlEditor(tdDataProvider,query,lEditorName);
      }
    }
  }
 else {
    try {
      Connection connection=SwitchHelpers.CONNECTION_SWITCH.doSwitch(tdDataProvider);
      if (connection != null) {
        String userName=JavaSqlFactory.getUsername(connection);
        SQLEditorInput input=new SQLEditorInput(""String_Node_Str"" + alias.getName() + ""String_Node_Str""+ lEditorName+ ""String_Node_Str"");
        net.sourceforge.sqlexplorer.dbproduct.User user=alias.hasNoUserName() ? alias.getDefaultUser() : alias.getUser(userName);
        DatabaseConnection databaseConnection=SwitchHelpers.DATABASECONNECTION_SWITCH.doSwitch(connection);
        if (databaseConnection != null) {
          IMetadataConnection metadataConnection=ConvertionHelper.convert(databaseConnection);
          if (metadataConnection != null) {
            user.setMetadataConnection(metadataConnection);
          }
        }
        input.setUser(user);
        IWorkbenchPage page=SQLExplorerPlugin.getDefault().getActivePage();
        SQLEditor editorPart=(SQLEditor)page.openEditor(input,SQLEditor.class.getName());
        editorPart.setText(query);
        return editorPart;
      }
    }
 catch (    PartInitException e) {
      log.error(e,e);
    }
  }
  return null;
}",0.8379983036471587
137702,"/** 
 * DOC xqliu Comment method ""createAndStoreUDI"".
 * @param parameters
 * @param selectionFolder
 */
private static TypedReturnCode<Object> createAndStoreUDI(UDIParameters parameters,IFolder selectionFolder){
  IndicatorDefinition indDef=UDIHelper.createUDI(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status,parameters.category,parameters.javaClassName,parameters.javaJarPath);
  for (  String key : parameters.regex.keySet()) {
    TdExpression expression=BooleanExpressionHelper.createTdExpression(key,parameters.regex.get(key));
    indDef.getSqlGenericExpression().add(expression);
  }
  boolean validStatus=UDIHelper.isUDIValid(indDef);
  TaggedValueHelper.setValidStatus(validStatus,indDef);
  Map<String,String> paraMap=parameters.getParaMap();
  if (!paraMap.isEmpty()) {
    for (    String key : paraMap.keySet()) {
      String value=paraMap.get(key);
      IndicatorDefinitionParameter idPara=DefinitionFactory.eINSTANCE.createIndicatorDefinitionParameter();
      idPara.setKey(key);
      idPara.setValue(value);
      indDef.getIndicatorDefinitionParameter().add(idPara);
    }
  }
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  return ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().create(indDef,selectionFolder);
}","/** 
 * DOC xqliu Comment method ""createAndStoreUDI"".
 * @param parameters
 * @param selectionFolder
 */
private static TypedReturnCode<Object> createAndStoreUDI(UDIParameters parameters,IFolder selectionFolder){
  IndicatorDefinition indDef=UDIHelper.createUDI(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status,parameters.category,parameters.javaClassName,parameters.javaJarPath);
  for (  String key : parameters.regex.keySet()) {
    TdExpression expression=BooleanExpressionHelper.createTdExpression(key,parameters.regex.get(key));
    indDef.getSqlGenericExpression().add(expression);
  }
  boolean validStatus=UDIHelper.isUDIValid(indDef);
  TaggedValueHelper.setValidStatus(validStatus,indDef);
  Map<String,String> paraMap=parameters.getParaMap();
  if (!paraMap.isEmpty()) {
    for (    String key : paraMap.keySet()) {
      String value=paraMap.get(key);
      IndicatorDefinitionParameter idPara=DefinitionFactory.eINSTANCE.createIndicatorDefinitionParameter();
      idPara.setKey(key);
      idPara.setValue(value);
      indDef.getIndicatorDefinitionParameter().add(idPara);
    }
  }
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  return ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().create(indDef,selectionFolder);
}",0.923217550274223
137703,"public IFile duplicate(String newLabel) throws BusinessException {
  if (modelElement != null) {
    ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(modelElement);
    newObject.setName(newLabel);
    if (newObject instanceof AbstractMetadataObject) {
      AbstractMetadataObject amObj=(AbstractMetadataObject)newObject;
      amObj.setLabel(newLabel);
    }
    if (modelElement instanceof DatabaseConnection) {
      DatabaseConnection dbcon=(DatabaseConnection)modelElement;
      EList<Package> dataPackages=dbcon.getDataPackage();
      if (dataPackages != null) {
        for (        Package oldDataPackage : dataPackages) {
          EList<Package> newDataPackages=((DatabaseConnection)newObject).getDataPackage();
          newDataPackages.add(oldDataPackage);
        }
      }
    }
    IFolder folder=extractFolder(modelElement);
    if (folder != null) {
      newObject=update(modelElement,newObject);
      AElementPersistance elementWriter=ElementWriterFactory.getInstance().create(modelElement);
      if (elementWriter != null) {
        elementWriter.create(newObject,folder);
        for (        Dependency dependency : modelElement.getClientDependency()) {
          for (          ModelElement supplyier : dependency.getSupplier()) {
            TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setUsageDependencyOn(newObject,supplyier);
            EMFSharedResources.getInstance().saveResource(rc.getObject().eResource());
          }
        }
        URI uri;
        if (newObject.eIsProxy()) {
          uri=((InternalEObject)newObject).eProxyURI();
        }
 else {
          uri=newObject.eResource().getURI();
        }
        return ResourceManager.getRoot().getFile(new Path(uri.toPlatformString(false)));
      }
    }
  }
  return null;
}","public IFile duplicate(String newLabel) throws BusinessException {
  if (modelElement != null) {
    ModelElement newObject=(ModelElement)EMFSharedResources.getInstance().copyEObject(modelElement);
    newObject.setName(newLabel);
    if (newObject instanceof AbstractMetadataObject) {
      AbstractMetadataObject amObj=(AbstractMetadataObject)newObject;
      amObj.setLabel(newLabel);
    }
    if (modelElement instanceof DatabaseConnection) {
      DatabaseConnection dbcon=(DatabaseConnection)modelElement;
      EList<Package> dataPackages=dbcon.getDataPackage();
      if (dataPackages != null) {
        for (        Package oldDataPackage : dataPackages) {
          EList<Package> newDataPackages=((DatabaseConnection)newObject).getDataPackage();
          Package copyEObject=(Package)EMFSharedResources.getInstance().copyEObject(oldDataPackage);
          newDataPackages.add(copyEObject);
        }
      }
    }
    IFolder folder=extractFolder(modelElement);
    if (folder != null) {
      newObject=update(modelElement,newObject);
      AElementPersistance elementWriter=ElementWriterFactory.getInstance().create(modelElement);
      if (elementWriter != null) {
        elementWriter.create(newObject,folder);
        for (        Dependency dependency : modelElement.getClientDependency()) {
          for (          ModelElement supplyier : dependency.getSupplier()) {
            TypedReturnCode<Dependency> rc=DependenciesHandler.getInstance().setUsageDependencyOn(newObject,supplyier);
            EMFSharedResources.getInstance().saveResource(rc.getObject().eResource());
          }
        }
        URI uri;
        if (newObject.eIsProxy()) {
          uri=((InternalEObject)newObject).eProxyURI();
        }
 else {
          uri=newObject.eResource().getURI();
        }
        return ResourceManager.getRoot().getFile(new Path(uri.toPlatformString(false)));
      }
    }
  }
  return null;
}",0.9664179104477612
137704,"public void selectionChanged(SelectionChangedEvent event){
  RepositoryNode selectedObj=(RepositoryNode)((IStructuredSelection)event.getSelection()).getFirstElement();
  if (selectedObj != null) {
    if (selectedObj.hasChildren()) {
      this.setOutput(selectedObj);
      Boolean allCheckFlag=this.getTreeViewer().getChecked(selectedObj);
      List<?> repositoryNodeList=(List<?>)modelElementCheckedMap.get(selectedObj);
      if (repositoryNodeList != null) {
        this.getTableViewer().setCheckedElements(repositoryNodeList.toArray());
      }
 else       if (selectedObj instanceof DBTableRepNode || selectedObj instanceof DBViewRepNode || selectedObj instanceof DFTableRepNode) {
        if (allCheckFlag) {
          this.getTableViewer().setCheckedElements(selectedObj.getChildren().get(0).getChildren().toArray());
        }
      }
 else       if (selectedObj instanceof MDMXmlElementRepNode) {
        if (allCheckFlag) {
          this.getTableViewer().setCheckedElements(selectedObj.getChildren().toArray());
        }
      }
    }
  }
 else {
    this.getTableViewer().setInput(null);
  }
}","public void selectionChanged(SelectionChangedEvent event){
  RepositoryNode selectedObj=(RepositoryNode)((IStructuredSelection)event.getSelection()).getFirstElement();
  if (selectedObj != null) {
    if (selectedObj.hasChildren()) {
      this.setOutput(selectedObj);
      Boolean allCheckFlag=this.getTreeViewer().getChecked(selectedObj);
      List<?> repositoryNodeList=(List<?>)modelElementCheckedMap.get(selectedObj);
      if (repositoryNodeList != null) {
        this.getTableViewer().setCheckedElements(repositoryNodeList.toArray());
      }
 else       if (selectedObj instanceof DBTableRepNode || selectedObj instanceof DBViewRepNode || selectedObj instanceof DFTableRepNode) {
        if (allCheckFlag) {
          this.getTableViewer().setCheckedElements(selectedObj.getChildren().get(0).getChildren().toArray());
        }
      }
 else       if (selectedObj instanceof MDMXmlElementRepNode) {
        if (allCheckFlag) {
          this.getTableViewer().setCheckedElements(selectedObj.getChildren().toArray());
        }
      }
    }
  }
}",0.9750692520775625
137705,"public void run(){
  boolean save=DQRepositoryNode.isOnFilterring();
  String value=DQRepositoryNode.getFilterStr();
  boolean untilSchema=false;
  boolean untilTable=false;
  try {
    if (DIALOG_TYPE_TABLE == getDialogType()) {
      untilSchema=DQRepositoryNode.isUntilSchema();
    }
 else     if (isfViewer) {
      untilTable=DQRepositoryNode.isUntilTable();
    }
    DQRepositoryNode.setFilterStr(filter);
    if (filter.equals(""String_Node_Str"")) {
      DQRepositoryNode.setFiltering(false);
      if (isfViewer) {
        fViewer.refresh();
        restoreCheckStatus();
      }
 else {
        sTableViewer.refresh();
      }
      unfoldToCheckedElements();
    }
 else {
      DQRepositoryNode.setFiltering(true);
      if (isfViewer) {
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          DQRepositoryNode.setUntilSchema(true);
        }
 else {
          DQRepositoryNode.setUntilTable(true);
        }
        DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
        fViewer.refresh();
        fViewer.expandAll();
        DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
        restoreCheckStatus();
      }
 else {
        DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
        sTableViewer.refresh();
        DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
      }
    }
  }
  finally {
    DQRepositoryNode.setFiltering(save);
    DQRepositoryNode.setFilterStr(value);
    if (isfViewer) {
      DQRepositoryNode.setUntilTable(untilTable);
    }
    if (DIALOG_TYPE_TABLE == getDialogType()) {
      DQRepositoryNode.setUntilSchema(untilSchema);
    }
  }
  updateOKStatus();
}","public void run(){
  boolean save=DQRepositoryNode.isOnFilterring();
  String value=DQRepositoryNode.getFilterStr();
  boolean untilSchema=false;
  boolean untilTable=false;
  try {
    if (DIALOG_TYPE_TABLE == getDialogType()) {
      untilSchema=DQRepositoryNode.isUntilSchema();
    }
 else     if (isfViewer) {
      untilTable=DQRepositoryNode.isUntilTable();
    }
    DQRepositoryNode.setFilterStr(filter);
    if (filter.equals(""String_Node_Str"")) {
      DQRepositoryNode.setFiltering(false);
      if (isfViewer) {
        fViewer.refresh();
        restoreCheckStatus();
      }
 else {
        sTableViewer.refresh();
      }
      unfoldToCheckedElements();
    }
 else {
      DQRepositoryNode.setFiltering(true);
      if (isfViewer) {
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          DQRepositoryNode.setUntilSchema(true);
        }
 else {
          DQRepositoryNode.setUntilTable(true);
        }
        DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
        fViewer.refresh();
        fViewer.expandAll();
        DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
        restoreCheckStatus();
      }
 else {
        DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
        sTableViewer.refresh();
        DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
        restoreTableCheckStatus();
      }
    }
  }
  finally {
    DQRepositoryNode.setFiltering(save);
    DQRepositoryNode.setFilterStr(value);
    if (isfViewer) {
      DQRepositoryNode.setUntilTable(untilTable);
    }
    if (DIALOG_TYPE_TABLE == getDialogType()) {
      DQRepositoryNode.setUntilSchema(untilSchema);
    }
  }
  updateOKStatus();
}",0.9894736842105264
137706,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  getDisplay().asyncExec(new Runnable(){
    public void run(){
      boolean save=DQRepositoryNode.isOnFilterring();
      String value=DQRepositoryNode.getFilterStr();
      boolean untilSchema=false;
      boolean untilTable=false;
      try {
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          untilSchema=DQRepositoryNode.isUntilSchema();
        }
 else         if (isfViewer) {
          untilTable=DQRepositoryNode.isUntilTable();
        }
        DQRepositoryNode.setFilterStr(filter);
        if (filter.equals(""String_Node_Str"")) {
          DQRepositoryNode.setFiltering(false);
          if (isfViewer) {
            fViewer.refresh();
            restoreCheckStatus();
          }
 else {
            sTableViewer.refresh();
          }
          unfoldToCheckedElements();
        }
 else {
          DQRepositoryNode.setFiltering(true);
          if (isfViewer) {
            if (DIALOG_TYPE_TABLE == getDialogType()) {
              DQRepositoryNode.setUntilSchema(true);
            }
 else {
              DQRepositoryNode.setUntilTable(true);
            }
            DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
            fViewer.refresh();
            fViewer.expandAll();
            DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
            restoreCheckStatus();
          }
 else {
            DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
            sTableViewer.refresh();
            DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
          }
        }
      }
  finally {
        DQRepositoryNode.setFiltering(save);
        DQRepositoryNode.setFilterStr(value);
        if (isfViewer) {
          DQRepositoryNode.setUntilTable(untilTable);
        }
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          DQRepositoryNode.setUntilSchema(untilSchema);
        }
      }
      updateOKStatus();
    }
  }
);
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  getDisplay().asyncExec(new Runnable(){
    public void run(){
      boolean save=DQRepositoryNode.isOnFilterring();
      String value=DQRepositoryNode.getFilterStr();
      boolean untilSchema=false;
      boolean untilTable=false;
      try {
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          untilSchema=DQRepositoryNode.isUntilSchema();
        }
 else         if (isfViewer) {
          untilTable=DQRepositoryNode.isUntilTable();
        }
        DQRepositoryNode.setFilterStr(filter);
        if (filter.equals(""String_Node_Str"")) {
          DQRepositoryNode.setFiltering(false);
          if (isfViewer) {
            fViewer.refresh();
            restoreCheckStatus();
          }
 else {
            sTableViewer.refresh();
          }
          unfoldToCheckedElements();
        }
 else {
          DQRepositoryNode.setFiltering(true);
          if (isfViewer) {
            if (DIALOG_TYPE_TABLE == getDialogType()) {
              DQRepositoryNode.setUntilSchema(true);
            }
 else {
              DQRepositoryNode.setUntilTable(true);
            }
            DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
            fViewer.refresh();
            fViewer.expandAll();
            DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
            restoreCheckStatus();
          }
 else {
            DQRepositoryNode.setIsReturnAllNodesWhenFiltering(false);
            sTableViewer.refresh();
            DQRepositoryNode.setIsReturnAllNodesWhenFiltering(true);
            restoreTableCheckStatus();
          }
        }
      }
  finally {
        DQRepositoryNode.setFiltering(save);
        DQRepositoryNode.setFilterStr(value);
        if (isfViewer) {
          DQRepositoryNode.setUntilTable(untilTable);
        }
        if (DIALOG_TYPE_TABLE == getDialogType()) {
          DQRepositoryNode.setUntilSchema(untilSchema);
        }
      }
      updateOKStatus();
    }
  }
);
  return Status.OK_STATUS;
}",0.9903727474697606
137707,protected abstract void restoreCheckStatus();,"/** 
 * restore the left viewer's check status.
 */
protected abstract void restoreCheckStatus();",0.6338028169014085
137708,"public void selectionChanged(SelectionChangedEvent event){
  Object selectedObj=((IStructuredSelection)event.getSelection()).getFirstElement();
  if (selectedObj != null) {
    if (selectedObj instanceof DBTableFolderRepNode || selectedObj instanceof DBViewFolderRepNode) {
      IRepositoryNode node=(IRepositoryNode)selectedObj;
      this.setOutput(node);
      IRepositoryNode[] tables=getCheckedTableNodes(node);
      if (tables != null) {
        this.getTableViewer().setCheckedElements(tables);
      }
    }
  }
 else {
    this.getTableViewer().setInput(null);
  }
}","public void selectionChanged(SelectionChangedEvent event){
  Object selectedObj=((IStructuredSelection)event.getSelection()).getFirstElement();
  if (selectedObj != null) {
    if (selectedObj instanceof DBTableFolderRepNode || selectedObj instanceof DBViewFolderRepNode) {
      IRepositoryNode node=(IRepositoryNode)selectedObj;
      this.setOutput(node);
      IRepositoryNode[] tables=getCheckedTableNodes(node);
      if (tables != null) {
        this.getTableViewer().setCheckedElements(tables);
      }
    }
  }
}",0.9509090909090908
137709,"@Override public void run(){
  try {
    for (    IFile file : folder) {
      if (!file.exists()) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(file.getName());
        throw createBusinessException;
      }
    }
    new ChangePerspectiveAction(PluginConstant.SE_ID).run();
    IWorkbenchWindow aww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    IWorkbenchPage ap=aww.getActivePage();
    for (    IFile file : folder) {
      try {
        IDE.openEditor(ap,file,true);
      }
 catch (      PartInitException e) {
        log.error(e,e);
      }
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
}","@Override public void run(){
  try {
    for (    IFile file : folder) {
      if (!file.exists()) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(file.getName());
        throw createBusinessException;
      }
    }
    new ChangePerspectiveAction(PluginConstant.SE_ID).run();
    IWorkbenchWindow aww=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    IWorkbenchPage ap=aww.getActivePage();
    for (    IFile file : folder) {
      try {
        IDE.openEditor(ap,file,SQLEditor.EDITOR_ID,true);
      }
 catch (      PartInitException e) {
        log.error(e,e);
      }
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
}",0.986206896551724
137710,"/** 
 * get the ItemEditorInput according to the reposViewObj, if there no ItemEditorInput return null.
 * @param isOpenItemEditorAction
 * @return
 */
public IEditorInput computeEditorInput(boolean isOpenItemEditorAction) throws BusinessException {
  IEditorInput result=null;
  if (repViewObj != null) {
    String key=repViewObj.getRepositoryObjectType().getKey();
    Item item=repViewObj.getProperty().getItem();
    if (item instanceof TDQItem && !(item instanceof TDQFileItem)) {
      ModelElement modelElement=PropertyHelper.getModelElement(repViewObj.getProperty());
      if (modelElement == null || modelElement.eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(((TDQItem)item).getFilename());
        throw createBusinessException;
      }
    }
    if (ERepositoryObjectType.METADATA_CONNECTIONS.getKey().equals(key) || ERepositoryObjectType.METADATA_MDMCONNECTION.getKey().equals(key)) {
      result=new ConnectionItemEditorInput(item);
      editorID=ConnectionEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT.getKey().equals(key)) {
      result=new AnalysisItemEditorInput(item);
      Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
      if (analysis == null || analysis.getContext() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(repViewObj);
        throw createBusinessException;
      }
      EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
      RepositoryNode connectionRepositoryNode=null;
      if (analysedElements.size() > 0) {
        ModelElement modelElement=analysedElements.get(0);
        if (modelElement instanceof Connection) {
          connection=(Connection)modelElement;
        }
        if (modelElement instanceof Catalog) {
          Catalog catalog=SwitchHelpers.CATALOG_SWITCH.caseCatalog((Catalog)modelElement);
          connection=ConnectionHelper.getConnection(catalog);
        }
 else         if (modelElement instanceof Schema) {
          Schema schema=SwitchHelpers.SCHEMA_SWITCH.caseSchema((Schema)modelElement);
          if (schema != null) {
            connection=ConnectionHelper.getConnection(schema);
          }
        }
 else         if (modelElement instanceof TdTable) {
          TdTable tdTable=SwitchHelpers.TABLE_SWITCH.caseTdTable((TdTable)modelElement);
          connection=ConnectionHelper.getConnection(tdTable);
        }
 else         if (modelElement instanceof TdView) {
          TdView tdView=SwitchHelpers.VIEW_SWITCH.caseTdView((TdView)modelElement);
          connection=ConnectionHelper.getConnection(tdView);
        }
 else         if (modelElement instanceof TdColumn) {
          TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.caseTdColumn((TdColumn)modelElement);
          connection=ConnectionHelper.getConnection(tdColumn);
        }
 else         if (modelElement instanceof MetadataColumn) {
          MetadataColumn mColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(modelElement);
          connection=ConnectionHelper.getTdDataProvider(mColumn);
        }
 else         if (modelElement instanceof TdXmlElementType) {
          TdXmlElementType tdXmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(modelElement);
          TdXmlSchema ownedDocument=tdXmlElement.getOwnedDocument();
          connection=SwitchHelpers.MDMCONNECTION_SWITCH.doSwitch(ownedDocument.getDataManager().get(0));
        }
        connectionRepositoryNode=RepositoryNodeHelper.recursiveFind(connection);
      }
      ((AnalysisItemEditorInput)result).setConnectionNode(connectionRepositoryNode);
      editorID=AnalysisEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_INDICATOR_ELEMENT.getKey().equals(key)) {
      result=new IndicatorDefinitionItemEditorInput(item);
      TDQIndicatorDefinitionItem definitionItem=(TDQIndicatorDefinitionItem)item;
      if (definitionItem.getIndicatorDefinition().eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
        throw createBusinessException;
      }
      if (UDIHelper.getUDICategory(definitionItem.getIndicatorDefinition()) == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
        throw createBusinessException;
      }
      editorID=IndicatorEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_RULES_SQL.getKey().equals(key)) {
      result=new BusinessRuleItemEditorInput(item);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_RULES_PARSER.getKey().equals(key)) {
      result=new ParserRuleItemEditorInput(item);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_PATTERN_ELEMENT.getKey().equals(key)) {
      result=new PatternItemEditorInput(item);
      TDQPatternItem patternItem=(TDQPatternItem)item;
      if (patternItem.getPattern() == null || patternItem.getPattern().eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(patternItem.getFilename());
        throw createBusinessException;
      }
      editorID=PatternEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_REPORT_ELEMENT.getKey().equals(key)) {
      result=new ReportItemEditorInput(item);
      TDQReportItem reportItem=(TDQReportItem)item;
      if (!(reportItem.getReport() instanceof TdReport)) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
        throw createBusinessException;
      }
      for (      AnalysisMap anaMap : ((TdReport)reportItem.getReport()).getAnalysisMap()) {
        Analysis analysis=anaMap.getAnalysis();
        if (analysis.eResource() == null) {
          BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
          throw createBusinessException;
        }
      }
      editorID=""String_Node_Str"";
    }
    if (!isOpenItemEditorAction) {
      if (ERepositoryObjectType.TDQ_JRAXML_ELEMENT.getKey().equals(key) || ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key)) {
        IPath append=WorkbenchUtils.getFilePath(repViewObj.getRepositoryNode());
        result=new FileEditorInput(ResourceManager.getRootProject().getFile(append));
        editorID=FileEditorInput.class.getName();
      }
    }
  }
  return result;
}","/** 
 * get the ItemEditorInput according to the reposViewObj, if there no ItemEditorInput return null.
 * @param isOpenItemEditorAction
 * @return
 */
public IEditorInput computeEditorInput(boolean isOpenItemEditorAction) throws BusinessException {
  IEditorInput result=null;
  if (repViewObj != null) {
    String key=repViewObj.getRepositoryObjectType().getKey();
    Item item=repViewObj.getProperty().getItem();
    if (item instanceof TDQItem && !(item instanceof TDQFileItem)) {
      ModelElement modelElement=PropertyHelper.getModelElement(repViewObj.getProperty());
      if (modelElement == null || modelElement.eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(((TDQItem)item).getFilename());
        throw createBusinessException;
      }
    }
    if (ERepositoryObjectType.METADATA_CONNECTIONS.getKey().equals(key) || ERepositoryObjectType.METADATA_MDMCONNECTION.getKey().equals(key)) {
      result=new ConnectionItemEditorInput(item);
      editorID=ConnectionEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT.getKey().equals(key)) {
      result=new AnalysisItemEditorInput(item);
      Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
      if (analysis == null || analysis.getContext() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(repViewObj);
        throw createBusinessException;
      }
      EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
      RepositoryNode connectionRepositoryNode=null;
      if (analysedElements.size() > 0) {
        ModelElement modelElement=analysedElements.get(0);
        if (modelElement instanceof Connection) {
          connection=(Connection)modelElement;
        }
        if (modelElement instanceof Catalog) {
          Catalog catalog=SwitchHelpers.CATALOG_SWITCH.caseCatalog((Catalog)modelElement);
          connection=ConnectionHelper.getConnection(catalog);
        }
 else         if (modelElement instanceof Schema) {
          Schema schema=SwitchHelpers.SCHEMA_SWITCH.caseSchema((Schema)modelElement);
          if (schema != null) {
            connection=ConnectionHelper.getConnection(schema);
          }
        }
 else         if (modelElement instanceof TdTable) {
          TdTable tdTable=SwitchHelpers.TABLE_SWITCH.caseTdTable((TdTable)modelElement);
          connection=ConnectionHelper.getConnection(tdTable);
        }
 else         if (modelElement instanceof TdView) {
          TdView tdView=SwitchHelpers.VIEW_SWITCH.caseTdView((TdView)modelElement);
          connection=ConnectionHelper.getConnection(tdView);
        }
 else         if (modelElement instanceof TdColumn) {
          TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.caseTdColumn((TdColumn)modelElement);
          connection=ConnectionHelper.getConnection(tdColumn);
        }
 else         if (modelElement instanceof MetadataColumn) {
          MetadataColumn mColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(modelElement);
          connection=ConnectionHelper.getTdDataProvider(mColumn);
        }
 else         if (modelElement instanceof TdXmlElementType) {
          TdXmlElementType tdXmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(modelElement);
          TdXmlSchema ownedDocument=tdXmlElement.getOwnedDocument();
          connection=SwitchHelpers.MDMCONNECTION_SWITCH.doSwitch(ownedDocument.getDataManager().get(0));
        }
        connectionRepositoryNode=RepositoryNodeHelper.recursiveFind(connection);
      }
      ((AnalysisItemEditorInput)result).setConnectionNode(connectionRepositoryNode);
      editorID=AnalysisEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_INDICATOR_ELEMENT.getKey().equals(key)) {
      result=new IndicatorDefinitionItemEditorInput(item);
      TDQIndicatorDefinitionItem definitionItem=(TDQIndicatorDefinitionItem)item;
      if (definitionItem.getIndicatorDefinition().eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
        throw createBusinessException;
      }
      if (UDIHelper.getUDICategory(definitionItem.getIndicatorDefinition()) == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
        throw createBusinessException;
      }
      editorID=IndicatorEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_RULES_SQL.getKey().equals(key)) {
      result=new BusinessRuleItemEditorInput(item);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_RULES_PARSER.getKey().equals(key)) {
      result=new ParserRuleItemEditorInput(item);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_PATTERN_ELEMENT.getKey().equals(key)) {
      result=new PatternItemEditorInput(item);
      TDQPatternItem patternItem=(TDQPatternItem)item;
      if (patternItem.getPattern() == null || patternItem.getPattern().eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(patternItem.getFilename());
        throw createBusinessException;
      }
      editorID=PatternEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_REPORT_ELEMENT.getKey().equals(key)) {
      result=new ReportItemEditorInput(item);
      TDQReportItem reportItem=(TDQReportItem)item;
      if (!(reportItem.getReport() instanceof TdReport)) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
        throw createBusinessException;
      }
      for (      AnalysisMap anaMap : ((TdReport)reportItem.getReport()).getAnalysisMap()) {
        Analysis analysis=anaMap.getAnalysis();
        if (analysis.eResource() == null) {
          BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
          throw createBusinessException;
        }
      }
      editorID=""String_Node_Str"";
    }
 else     if (ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key)) {
      IPath append=WorkbenchUtils.getFilePath(repViewObj.getRepositoryNode());
      file=ResourceManager.getRootProject().getFile(append);
      if (!file.exists()) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(repViewObj);
        throw createBusinessException;
      }
      editorID=SQLEditor.EDITOR_ID;
      result=new FileEditorInput(ResourceManager.getRootProject().getFile(append));
    }
    if (!isOpenItemEditorAction) {
      if (ERepositoryObjectType.TDQ_JRAXML_ELEMENT.getKey().equals(key) || ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key)) {
        IPath append=WorkbenchUtils.getFilePath(repViewObj.getRepositoryNode());
        result=new FileEditorInput(ResourceManager.getRootProject().getFile(append));
        editorID=FileEditorInput.class.getName();
      }
    }
  }
  return result;
}",0.9610277757841096
137711,"public double getWeight(String str1,String str2){
  String code1=algorithm.encode(str1);
  String code2=algorithm.encode(str2);
  algorithm.setMaxCodeLen(Math.max(code1.length(),code2.length()));
  return StringComparisonUtil.difference(code1,code2) / (double)algorithm.getMaxCodeLen();
}","@Override public double getWeight(String str1,String str2){
  String code1=algorithm.encode(str1);
  String code2=algorithm.encode(str2);
  int maxLengh=Math.max(code1.length(),code2.length());
  if (maxLengh == 0) {
    return 0d;
  }
  algorithm.setMaxCodeLen(maxLengh);
  return StringComparisonUtil.difference(code1,code2) / (double)algorithm.getMaxCodeLen();
}",0.7228177641653905
137712,"public AttributeMatcherType getMatchType(){
  return AttributeMatcherType.metaphone;
}","@Override public AttributeMatcherType getMatchType(){
  return AttributeMatcherType.metaphone;
}",0.945054945054945
137713,"@Override public double getMatchingWeight(String[] record1,String[] record2){
  double matchingWeight=0;
  for (  IRecordMatcher matcher : matchers) {
    double currentWeight=matcher.getMatchingWeight(record1,record2);
    if (currentWeight > matchingWeight) {
      lastPositiveMatcher=matcher;
      matchingWeight=currentWeight;
    }
    if (matchingWeight >= matcher.getRecordMatchThreshold()) {
      return matchingWeight;
    }
  }
  return matchingWeight;
}","@Override public double getMatchingWeight(String[] record1,String[] record2){
  double matchingWeight=0;
  for (  IRecordMatcher matcher : matchers) {
    double currentWeight=matcher.getMatchingWeight(record1,record2);
    if (currentWeight >= matchingWeight) {
      lastPositiveMatcher=matcher;
      matchingWeight=currentWeight;
    }
    if (matchingWeight >= matcher.getRecordMatchThreshold()) {
      return matchingWeight;
    }
  }
  return matchingWeight;
}",0.9989304812834224
137714,"/** 
 * handle Objects and store data for MDM.
 * @param rowMap
 * @param objectLs
 * @param columnList
 */
private void handleObjects(Map<String,String> rowMap,EList<Object> objectLs,List<TdXmlElementType> columnList){
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
  int recordIncrement=0;
  for (  Indicator indicator : indicators) {
    if (!this.continueRun()) {
      break;
    }
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      indicator.handle(objectLs);
      if (indicator instanceof SimpleStatIndicator) {
        if (!indicator.isStoreData()) {
          break;
        }
        SimpleStatIndicator simpIndi=(SimpleStatIndicator)indicator;
        for (        Indicator leafIndicator : simpIndi.getLeafIndicators()) {
          if (!this.continueRun()) {
            break;
          }
          if (!(leafIndicator instanceof RowCountIndicator)) {
            continue;
          }
          List<Object[]> valueObjectList=initDataSet(leafIndicator,indicToRowMap);
          recordIncrement=valueObjectList.size();
          int offset=0;
          for (          TdXmlElementType columnElement : columnList) {
            if (!this.continueRun()) {
              break;
            }
            Object newobject=rowMap.get(columnElement.getName());
            if (recordIncrement < analysis.getParameters().getMaxNumberRows()) {
              if (recordIncrement < valueObjectList.size()) {
                valueObjectList.get(recordIncrement)[offset]=newobject;
              }
 else {
                Object[] valueObject=new Object[columnList.size()];
                valueObject[offset]=newobject;
                valueObjectList.add(valueObject);
              }
            }
            offset++;
          }
        }
      }
    }
  }
}","/** 
 * handle Objects and store data for MDM.
 * @param rowMap
 * @param objectLs
 * @param columnList
 */
private void handleObjects(Map<String,String> rowMap,EList<Object> objectLs,List<TdXmlElementType> columnList){
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
  int recordIncrement=0;
  for (  Indicator indicator : indicators) {
    if (!this.continueRun()) {
      break;
    }
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      indicator.handle(objectLs);
      if (indicator instanceof SimpleStatIndicator) {
        if (!indicator.isStoreData()) {
          continue;
        }
        SimpleStatIndicator simpIndi=(SimpleStatIndicator)indicator;
        for (        Indicator leafIndicator : simpIndi.getLeafIndicators()) {
          if (!this.continueRun()) {
            break;
          }
          if (!(leafIndicator instanceof RowCountIndicator)) {
            continue;
          }
          List<Object[]> valueObjectList=initDataSet(leafIndicator,indicToRowMap);
          recordIncrement=valueObjectList.size();
          int offset=0;
          for (          TdXmlElementType columnElement : columnList) {
            if (!this.continueRun()) {
              break;
            }
            Object newobject=rowMap.get(columnElement.getName());
            if (recordIncrement < analysis.getParameters().getMaxNumberRows()) {
              if (recordIncrement < valueObjectList.size()) {
                valueObjectList.get(recordIncrement)[offset]=newobject;
              }
 else {
                Object[] valueObject=new Object[columnList.size()];
                valueObject[offset]=newobject;
                valueObjectList.add(valueObject);
              }
            }
            offset++;
          }
        }
      }
    }
  }
}",0.9966503478484926
137715,"/** 
 * @return
 */
public DatabaseNode getRoot(){
  return (DatabaseNode)_root;
}","/** 
 * @return
 */
public DatabaseNode getRoot(){
  return _root;
}",0.9066666666666666
137716,"/** 
 * handle Objects and store data for MDM.
 * @param rowMap
 * @param objectLs
 * @param columnList
 */
private void handleObjects(Map<String,String> rowMap,EList<Object> objectLs,List<TdXmlElementType> columnList){
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
  int recordIncrement=0;
  for (  Indicator indicator : indicators) {
    if (!this.continueRun()) {
      break;
    }
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      indicator.handle(objectLs);
      if (indicator instanceof SimpleStatIndicator) {
        if (!indicator.isStoreData()) {
          break;
        }
        SimpleStatIndicator simpIndi=(SimpleStatIndicator)indicator;
        for (        Indicator leafIndicator : simpIndi.getLeafIndicators()) {
          if (!this.continueRun()) {
            break;
          }
          if (!(leafIndicator instanceof RowCountIndicator)) {
            continue;
          }
          List<Object[]> valueObjectList=initDataSet(leafIndicator,indicToRowMap);
          recordIncrement=valueObjectList.size();
          int offset=0;
          for (          TdXmlElementType columnElement : columnList) {
            if (!this.continueRun()) {
              break;
            }
            Object newobject=rowMap.get(columnElement.getName());
            if (recordIncrement < analysis.getParameters().getMaxNumberRows()) {
              if (recordIncrement < valueObjectList.size()) {
                valueObjectList.get(recordIncrement)[offset]=newobject;
              }
 else {
                Object[] valueObject=new Object[columnList.size()];
                valueObject[offset]=newobject;
                valueObjectList.add(valueObject);
              }
            }
            offset++;
          }
        }
      }
    }
  }
}","/** 
 * handle Objects and store data for MDM.
 * @param rowMap
 * @param objectLs
 * @param columnList
 */
private void handleObjects(Map<String,String> rowMap,EList<Object> objectLs,List<TdXmlElementType> columnList){
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
  int recordIncrement=0;
  for (  Indicator indicator : indicators) {
    if (!this.continueRun()) {
      break;
    }
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      indicator.handle(objectLs);
      if (indicator instanceof SimpleStatIndicator) {
        if (!indicator.isStoreData()) {
          continue;
        }
        SimpleStatIndicator simpIndi=(SimpleStatIndicator)indicator;
        for (        Indicator leafIndicator : simpIndi.getLeafIndicators()) {
          if (!this.continueRun()) {
            break;
          }
          if (!(leafIndicator instanceof RowCountIndicator)) {
            continue;
          }
          List<Object[]> valueObjectList=initDataSet(leafIndicator,indicToRowMap);
          recordIncrement=valueObjectList.size();
          int offset=0;
          for (          TdXmlElementType columnElement : columnList) {
            if (!this.continueRun()) {
              break;
            }
            Object newobject=rowMap.get(columnElement.getName());
            if (recordIncrement < analysis.getParameters().getMaxNumberRows()) {
              if (recordIncrement < valueObjectList.size()) {
                valueObjectList.get(recordIncrement)[offset]=newobject;
              }
 else {
                Object[] valueObject=new Object[columnList.size()];
                valueObject[offset]=newobject;
                valueObjectList.add(valueObject);
              }
            }
            offset++;
          }
        }
      }
    }
  }
}",0.9966503478484926
137717,"/** 
 * create Tab0 Page content.
 * @param sform
 */
public void createTab0Page(SashForm sform){
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      useAutoGenQueryFlag=true;
    }
  }
;
  if (IndicatorCategoryHelper.isUserDefCount(category)) {
    tab0_count_where_var=createTextPart(sform,WHERE_EXPRESSION_TITLE,20,getVaribleFromMap(GenericSQLHandler.UDI_WHERE));
    tab0_count_where_var.addModifyListener(listener);
  }
 else   if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
    tab0_realvalue_column_var=createTextPart(sform,COLUMN_EXPRESSION_TITLE,10,getVaribleFromMap(GenericSQLHandler.UDI_COLUMN));
    tab0_realvalue_column_var.addModifyListener(listener);
    tab0_realvalue_where_var=createTextPart(sform,WHERE_EXPRESSION_TITLE,10,getVaribleFromMap(GenericSQLHandler.UDI_WHERE));
    tab0_realvalue_where_var.addModifyListener(listener);
  }
 else   if (IndicatorCategoryHelper.isUserDefFrequency(category)) {
    tab0_fre_first_var=createTextPart(sform,FIRST_COLUMN_TITLE,5,getVaribleFromMap(GenericSQLHandler.UDI_FIRST_COLUMN));
    tab0_fre_first_var.addModifyListener(listener);
    tab0_fre_second_var=createTextPart(sform,SECOND_COLUMN_TITLE,5,getVaribleFromMap(GenericSQLHandler.UDI_SECOND_COLUMN));
    tab0_fre_second_var.addModifyListener(listener);
    tab0_fre_where_var=createTextPart(sform,WHERE_EXPRESSION_TITLE,5,getVaribleFromMap(GenericSQLHandler.UDI_WHERE));
    tab0_fre_where_var.addModifyListener(listener);
    tab0_fre_groupby_var=createTextPart(sform,GROUP_BY_TITLE,5,getVaribleFromMap(GenericSQLHandler.UDI_GROUP_BY));
    tab0_fre_groupby_var.addModifyListener(listener);
    tab0_fre_orderby_var=createTextPart(sform,ORDER_BY_TITLE,5,getVaribleFromMap(GenericSQLHandler.UDI_ORDER_BY));
    tab0_fre_orderby_var.addModifyListener(listener);
  }
 else   if (IndicatorCategoryHelper.isUserDefMatching(category)) {
    tab0_match_match_var=createTextPart(sform,MATCH_EXPRESSION_TITLE,10,getVaribleFromMap(GenericSQLHandler.UDI_MATCHING));
    tab0_match_match_var.addModifyListener(listener);
    tab0_match_where_var=createTextPart(sform,WHERE_EXPRESSION_TITLE,10,getVaribleFromMap(GenericSQLHandler.UDI_WHERE));
    tab0_match_where_var.addModifyListener(listener);
  }
}","/** 
 * create Tab0 Page content.
 * @param sform
 */
public void createTab0Page(SashForm sform){
  ModifyListener listener=new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      useAutoGenQueryFlag=true;
      int tempSelectNumber=selectTabNumber;
      if (canBeOverwriten_tab1) {
        selectTabNumber=1;
        tab1_fullSql.setText(getAutoGeneratedQuery());
        canBeOverwriten_tab1=true;
      }
      if (IndicatorCategoryHelper.isUserDefMatching(category)) {
        if (canBeOverwriten_tab2_match) {
          selectTabNumber=2;
          tab2_match_viewvalidRows.setText(getAutoGeneratedQuery());
          canBeOverwriten_tab2_match=true;
        }
        if (canBeOverwriten_tab3_match) {
          selectTabNumber=3;
          tab3_match_viewInvalidRows.setText(getAutoGeneratedQuery());
          canBeOverwriten_tab3_match=true;
        }
        if (canBeOverwriten_tab4_match) {
          selectTabNumber=4;
          tab4_match_viewValidValues.setText(getAutoGeneratedQuery());
          canBeOverwriten_tab4_match=true;
        }
        if (canBeOverwriten_tab5_match) {
          selectTabNumber=5;
          tab5_match_viewInvalidValues.setText(getAutoGeneratedQuery());
          canBeOverwriten_tab5_match=true;
        }
      }
 else {
        if (canBeOverwriten_tab2_viewRows) {
          selectTabNumber=2;
          tab2_viewRows.setText(getAutoGeneratedQuery());
          canBeOverwriten_tab2_viewRows=true;
        }
      }
      selectTabNumber=tempSelectNumber;
      useAutoGenQueryFlag=true;
    }
  }
;
  if (IndicatorCategoryHelper.isUserDefCount(category)) {
    tab0_count_where_var=createTextPart(sform,WHERE_EXPRESSION_TITLE,20,getVaribleFromMap(GenericSQLHandler.UDI_WHERE));
    tab0_count_where_var.addModifyListener(listener);
  }
 else   if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
    tab0_realvalue_column_var=createTextPart(sform,COLUMN_EXPRESSION_TITLE,10,getVaribleFromMap(GenericSQLHandler.UDI_COLUMN));
    tab0_realvalue_column_var.addModifyListener(listener);
    tab0_realvalue_where_var=createTextPart(sform,WHERE_EXPRESSION_TITLE,10,getVaribleFromMap(GenericSQLHandler.UDI_WHERE));
    tab0_realvalue_where_var.addModifyListener(listener);
  }
 else   if (IndicatorCategoryHelper.isUserDefFrequency(category)) {
    tab0_fre_first_var=createTextPart(sform,FIRST_COLUMN_TITLE,5,getVaribleFromMap(GenericSQLHandler.UDI_FIRST_COLUMN));
    tab0_fre_first_var.addModifyListener(listener);
    tab0_fre_second_var=createTextPart(sform,SECOND_COLUMN_TITLE,5,getVaribleFromMap(GenericSQLHandler.UDI_SECOND_COLUMN));
    tab0_fre_second_var.addModifyListener(listener);
    tab0_fre_where_var=createTextPart(sform,WHERE_EXPRESSION_TITLE,5,getVaribleFromMap(GenericSQLHandler.UDI_WHERE));
    tab0_fre_where_var.addModifyListener(listener);
    tab0_fre_groupby_var=createTextPart(sform,GROUP_BY_TITLE,5,getVaribleFromMap(GenericSQLHandler.UDI_GROUP_BY));
    tab0_fre_groupby_var.addModifyListener(listener);
    tab0_fre_orderby_var=createTextPart(sform,ORDER_BY_TITLE,5,getVaribleFromMap(GenericSQLHandler.UDI_ORDER_BY));
    tab0_fre_orderby_var.addModifyListener(listener);
  }
 else   if (IndicatorCategoryHelper.isUserDefMatching(category)) {
    tab0_match_match_var=createTextPart(sform,MATCH_EXPRESSION_TITLE,10,getVaribleFromMap(GenericSQLHandler.UDI_MATCHING));
    tab0_match_match_var.addModifyListener(listener);
    tab0_match_where_var=createTextPart(sform,WHERE_EXPRESSION_TITLE,10,getVaribleFromMap(GenericSQLHandler.UDI_WHERE));
    tab0_match_where_var.addModifyListener(listener);
  }
}",0.7732379979570991
137718,"/** 
 * create Dialog Area For UDI.
 * @param parent
 * @return
 */
public Control createDialogAreaForUDI(Composite parent){
  final Composite comp=(Composite)super.createDialogArea(parent);
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.widthHint=750;
  data.heightHint=650;
  comp.setLayoutData(data);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(comp,HelpPlugin.getDefault().getExpressionEditContextID());
  final TabFolder tabFolder=new TabFolder(comp,SWT.FILL);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.widthHint=convertWidthInCharsToPixels(200);
  gridData.heightHint=convertHeightInCharsToPixels(300);
  tabFolder.setLayoutData(gridData);
  TabItem tab0=new TabItem(tabFolder,SWT.NULL);
  tab0.setText(tab0_name);
  tab0Composite=new Composite(tabFolder,SWT.None);
  tab0Composite.setLayout(new GridLayout());
  tab0.setControl(tab0Composite);
  selectTabNumber=0;
  createTabPart(tab0Composite);
  TabItem tab1=new TabItem(tabFolder,SWT.NULL);
  tab1.setText(tab1_name);
  tab1Composite=new Composite(tabFolder,SWT.None);
  tab1Composite.setLayout(new GridLayout());
  tab1.setControl(tab1Composite);
  selectTabNumber=1;
  createTabPart(tab1Composite);
  if (IndicatorCategoryHelper.isUserDefMatching(category)) {
    TabItem tab3=new TabItem(tabFolder,SWT.NULL);
    tab3.setText(tab3_name);
    tab3Composite=new Composite(tabFolder,SWT.None);
    tab3Composite.setLayout(new GridLayout());
    tab3.setControl(tab3Composite);
    selectTabNumber=2;
    createTabPart(tab3Composite);
    TabItem tab4=new TabItem(tabFolder,SWT.NULL);
    tab4.setText(tab4_name);
    tab4Composite=new Composite(tabFolder,SWT.None);
    tab4Composite.setLayout(new GridLayout());
    tab4.setControl(tab4Composite);
    selectTabNumber=3;
    createTabPart(tab4Composite);
    TabItem tab5=new TabItem(tabFolder,SWT.NULL);
    tab5.setText(tab5_name);
    tab5Composite=new Composite(tabFolder,SWT.None);
    tab5Composite.setLayout(new GridLayout());
    tab5.setControl(tab5Composite);
    selectTabNumber=4;
    createTabPart(tab5Composite);
    TabItem tab6=new TabItem(tabFolder,SWT.NULL);
    tab6.setText(tab6_name);
    tab6Composite=new Composite(tabFolder,SWT.None);
    tab6Composite.setLayout(new GridLayout());
    tab6.setControl(tab6Composite);
    selectTabNumber=5;
    createTabPart(tab6Composite);
  }
 else {
    TabItem tab2=new TabItem(tabFolder,SWT.NULL);
    tab2.setText(tab2_name);
    tab2Composite=new Composite(tabFolder,SWT.None);
    tab2Composite.setLayout(new GridLayout());
    tab2.setControl(tab2Composite);
    selectTabNumber=2;
    createTabPart(tab2Composite);
  }
  tabFolder.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String text=((TabItem)e.item).getText();
      selectTabNumber=tabFolder.getSelectionIndex();
      if (tab0_name.equals(text)) {
        tab0Composite.layout();
      }
 else {
        if (tab1_name.equals(text)) {
          if (useAutoGenQueryFlag && canBeOverwriten_tab1) {
            tab1_fullSql.setText(getAutoGeneratedQuery());
            useAutoGenQueryFlag=true;
            canBeOverwriten_tab1=true;
          }
          tab1Composite.layout();
        }
 else         if (tab2_name.equals(text)) {
          if (useAutoGenQueryFlag && canBeOverwriten_tab2_viewRows) {
            tab2_viewRows.setText(getAutoGeneratedQuery());
            useAutoGenQueryFlag=true;
            canBeOverwriten_tab2_viewRows=true;
          }
          tab2Composite.layout();
        }
 else         if (tab3_name.equals(text)) {
          if (useAutoGenQueryFlag && canBeOverwriten_tab2_match) {
            tab2_match_viewvalidRows.setText(getAutoGeneratedQuery());
            useAutoGenQueryFlag=true;
            canBeOverwriten_tab2_match=true;
          }
          tab3Composite.layout();
        }
 else         if (tab4_name.equals(text)) {
          if (useAutoGenQueryFlag && canBeOverwriten_tab3_match) {
            tab3_match_viewInvalidRows.setText(getAutoGeneratedQuery());
            useAutoGenQueryFlag=true;
            canBeOverwriten_tab3_match=true;
          }
          tab4Composite.layout();
        }
 else         if (tab5_name.equals(text)) {
          if (useAutoGenQueryFlag && canBeOverwriten_tab4_match) {
            tab4_match_viewValidValues.setText(getAutoGeneratedQuery());
            useAutoGenQueryFlag=true;
            canBeOverwriten_tab4_match=true;
          }
          tab5Composite.layout();
        }
 else         if (tab6_name.equals(text)) {
          if (useAutoGenQueryFlag && canBeOverwriten_tab5_match) {
            tab5_match_viewInvalidValues.setText(getAutoGeneratedQuery());
            useAutoGenQueryFlag=true;
            canBeOverwriten_tab5_match=true;
          }
          tab6Composite.layout();
        }
        if (selectTabNumber == 1) {
          resetButton_tab1.setEnabled(!getAutoGeneratedQuery().equals(tab1_fullSql.getText()));
        }
 else         if (selectTabNumber == 2) {
          if (IndicatorCategoryHelper.isUserDefMatching(category)) {
            resetButton_tab2_match.setEnabled(!getAutoGeneratedQuery().equals(tab2_match_viewvalidRows.getText()));
          }
 else {
            resetButton_tab2_viewRows.setEnabled(!getAutoGeneratedQuery().equals(tab2_viewRows.getText()));
          }
        }
 else         if (selectTabNumber == 3) {
          resetButton_tab3_match.setEnabled(!getAutoGeneratedQuery().equals(tab3_match_viewInvalidRows.getText()));
        }
 else         if (selectTabNumber == 4) {
          resetButton_tab4_match.setEnabled(!getAutoGeneratedQuery().equals(tab4_match_viewValidValues.getText()));
        }
 else         if (selectTabNumber == 5) {
          resetButton_tab5_match.setEnabled(!getAutoGeneratedQuery().equals(tab5_match_viewInvalidValues.getText()));
        }
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  if (fullSqlContent == null || fullSqlContent.equals(""String_Node_Str"")) {
    selectTabNumber=0;
    tabFolder.setSelection(selectTabNumber);
    tab0Composite.layout();
  }
 else {
    selectTabNumber=1;
    tabFolder.setSelection(selectTabNumber);
    tab1Composite.layout();
    canBeOverwriten_tab1=getAutoGeneratedQuery().equals(tab1_fullSql.getText());
    resetButton_tab1.setEnabled(!canBeOverwriten_tab1);
  }
  comp.layout();
  return comp;
}","/** 
 * create Dialog Area For UDI.
 * @param parent
 * @return
 */
public Control createDialogAreaForUDI(Composite parent){
  final Composite comp=(Composite)super.createDialogArea(parent);
  GridData data=new GridData(SWT.FILL,SWT.FILL,true,true);
  data.widthHint=750;
  data.heightHint=650;
  comp.setLayoutData(data);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(comp,HelpPlugin.getDefault().getExpressionEditContextID());
  final TabFolder tabFolder=new TabFolder(comp,SWT.FILL);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.widthHint=convertWidthInCharsToPixels(200);
  gridData.heightHint=convertHeightInCharsToPixels(300);
  tabFolder.setLayoutData(gridData);
  TabItem tab0=new TabItem(tabFolder,SWT.NULL);
  tab0.setText(tab0_name);
  tab0Composite=new Composite(tabFolder,SWT.None);
  tab0Composite.setLayout(new GridLayout());
  tab0.setControl(tab0Composite);
  selectTabNumber=0;
  createTabPart(tab0Composite);
  TabItem tab1=new TabItem(tabFolder,SWT.NULL);
  tab1.setText(tab1_name);
  tab1Composite=new Composite(tabFolder,SWT.None);
  tab1Composite.setLayout(new GridLayout());
  tab1.setControl(tab1Composite);
  selectTabNumber=1;
  createTabPart(tab1Composite);
  if (IndicatorCategoryHelper.isUserDefMatching(category)) {
    TabItem tab3=new TabItem(tabFolder,SWT.NULL);
    tab3.setText(tab3_name);
    tab3Composite=new Composite(tabFolder,SWT.None);
    tab3Composite.setLayout(new GridLayout());
    tab3.setControl(tab3Composite);
    selectTabNumber=2;
    createTabPart(tab3Composite);
    TabItem tab4=new TabItem(tabFolder,SWT.NULL);
    tab4.setText(tab4_name);
    tab4Composite=new Composite(tabFolder,SWT.None);
    tab4Composite.setLayout(new GridLayout());
    tab4.setControl(tab4Composite);
    selectTabNumber=3;
    createTabPart(tab4Composite);
    TabItem tab5=new TabItem(tabFolder,SWT.NULL);
    tab5.setText(tab5_name);
    tab5Composite=new Composite(tabFolder,SWT.None);
    tab5Composite.setLayout(new GridLayout());
    tab5.setControl(tab5Composite);
    selectTabNumber=4;
    createTabPart(tab5Composite);
    TabItem tab6=new TabItem(tabFolder,SWT.NULL);
    tab6.setText(tab6_name);
    tab6Composite=new Composite(tabFolder,SWT.None);
    tab6Composite.setLayout(new GridLayout());
    tab6.setControl(tab6Composite);
    selectTabNumber=5;
    createTabPart(tab6Composite);
  }
 else {
    TabItem tab2=new TabItem(tabFolder,SWT.NULL);
    tab2.setText(tab2_name);
    tab2Composite=new Composite(tabFolder,SWT.None);
    tab2Composite.setLayout(new GridLayout());
    tab2.setControl(tab2Composite);
    selectTabNumber=2;
    createTabPart(tab2Composite);
  }
  tabFolder.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      String text=((TabItem)e.item).getText();
      selectTabNumber=tabFolder.getSelectionIndex();
      if (tab0_name.equals(text)) {
        tab0Composite.layout();
      }
 else {
        if (tab1_name.equals(text)) {
          tab1Composite.layout();
        }
 else         if (tab2_name.equals(text)) {
          tab2Composite.layout();
        }
 else         if (tab3_name.equals(text)) {
          tab3Composite.layout();
        }
 else         if (tab4_name.equals(text)) {
          tab4Composite.layout();
        }
 else         if (tab5_name.equals(text)) {
          tab5Composite.layout();
        }
 else         if (tab6_name.equals(text)) {
          tab6Composite.layout();
        }
        if (selectTabNumber == 1) {
          resetButton_tab1.setEnabled(!getAutoGeneratedQuery().equals(tab1_fullSql.getText()));
        }
 else         if (selectTabNumber == 2) {
          if (IndicatorCategoryHelper.isUserDefMatching(category)) {
            resetButton_tab2_match.setEnabled(!getAutoGeneratedQuery().equals(tab2_match_viewvalidRows.getText()));
          }
 else {
            resetButton_tab2_viewRows.setEnabled(!getAutoGeneratedQuery().equals(tab2_viewRows.getText()));
          }
        }
 else         if (selectTabNumber == 3) {
          resetButton_tab3_match.setEnabled(!getAutoGeneratedQuery().equals(tab3_match_viewInvalidRows.getText()));
        }
 else         if (selectTabNumber == 4) {
          resetButton_tab4_match.setEnabled(!getAutoGeneratedQuery().equals(tab4_match_viewValidValues.getText()));
        }
 else         if (selectTabNumber == 5) {
          resetButton_tab5_match.setEnabled(!getAutoGeneratedQuery().equals(tab5_match_viewInvalidValues.getText()));
        }
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  if (fullSqlContent == null || fullSqlContent.equals(""String_Node_Str"")) {
    selectTabNumber=0;
    tabFolder.setSelection(selectTabNumber);
    tab0Composite.layout();
  }
 else {
    selectTabNumber=1;
    tabFolder.setSelection(selectTabNumber);
    tab1Composite.layout();
    canBeOverwriten_tab1=getAutoGeneratedQuery().equals(tab1_fullSql.getText());
    resetButton_tab1.setEnabled(!canBeOverwriten_tab1);
  }
  comp.layout();
  return comp;
}",0.5849499782514137
137719,"public void modifyText(ModifyEvent e){
  useAutoGenQueryFlag=true;
}","public void modifyText(ModifyEvent e){
  useAutoGenQueryFlag=true;
  int tempSelectNumber=selectTabNumber;
  if (canBeOverwriten_tab1) {
    selectTabNumber=1;
    tab1_fullSql.setText(getAutoGeneratedQuery());
    canBeOverwriten_tab1=true;
  }
  if (IndicatorCategoryHelper.isUserDefMatching(category)) {
    if (canBeOverwriten_tab2_match) {
      selectTabNumber=2;
      tab2_match_viewvalidRows.setText(getAutoGeneratedQuery());
      canBeOverwriten_tab2_match=true;
    }
    if (canBeOverwriten_tab3_match) {
      selectTabNumber=3;
      tab3_match_viewInvalidRows.setText(getAutoGeneratedQuery());
      canBeOverwriten_tab3_match=true;
    }
    if (canBeOverwriten_tab4_match) {
      selectTabNumber=4;
      tab4_match_viewValidValues.setText(getAutoGeneratedQuery());
      canBeOverwriten_tab4_match=true;
    }
    if (canBeOverwriten_tab5_match) {
      selectTabNumber=5;
      tab5_match_viewInvalidValues.setText(getAutoGeneratedQuery());
      canBeOverwriten_tab5_match=true;
    }
  }
 else {
    if (canBeOverwriten_tab2_viewRows) {
      selectTabNumber=2;
      tab2_viewRows.setText(getAutoGeneratedQuery());
      canBeOverwriten_tab2_viewRows=true;
    }
  }
  selectTabNumber=tempSelectNumber;
  useAutoGenQueryFlag=true;
}",0.1027190332326284
137720,"/** 
 * Updata DB_PRODUCT tagged values for connection item in case they are not present in current file.
 * @throws SQLException
 */
public static void updataTaggedValueForConnectionItem(Connection dataProvider){
  if (dataProvider instanceof DatabaseConnection && StringUtils.isBlank(TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_NAME,dataProvider))) {
    Property property=PropertyHelper.getProperty(dataProvider);
    if (property != null) {
      Item item=property.getItem();
      if (item != null) {
        DatabaseConnection dbConn=(DatabaseConnection)dataProvider;
        IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
        dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
        if (dbConn != null) {
          try {
            ProxyRepositoryFactory.getInstance().save(item);
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
}","/** 
 * Updata DB_PRODUCT tagged values for connection item in case they are not present in current file.
 * @throws SQLException
 */
public static synchronized void updataTaggedValueForConnectionItem(Connection dataProvider){
  if (dataProvider instanceof DatabaseConnection && StringUtils.isBlank(TaggedValueHelper.getValueString(TaggedValueHelper.DB_PRODUCT_NAME,dataProvider))) {
    Property property=PropertyHelper.getProperty(dataProvider);
    if (property != null) {
      Item item=property.getItem();
      if (item != null) {
        DatabaseConnection dbConn=(DatabaseConnection)dataProvider;
        IMetadataConnection metaConnection=ConvertionHelper.convert(dbConn);
        dbConn=(DatabaseConnection)MetadataFillFactory.getDBInstance().fillUIConnParams(metaConnection,dbConn);
        if (dbConn != null) {
          try {
            ProxyRepositoryFactory.getInstance().save(item);
          }
 catch (          PersistenceException e) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
  }
}",0.9937106918238994
137721,"/** 
 * handle Objects and store data for MDM.
 * @param rowMap
 * @param objectLs
 * @param columnList
 */
private void handleObjects(Map<String,String> rowMap,EList<Object> objectLs,List<TdXmlElementType> columnList){
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
  int recordIncrement=0;
  for (  Indicator indicator : indicators) {
    if (!this.continueRun()) {
      break;
    }
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      indicator.handle(objectLs);
      if (indicator instanceof SimpleStatIndicator) {
        if (!indicator.isStoreData()) {
          break;
        }
        SimpleStatIndicator simpIndi=(SimpleStatIndicator)indicator;
        for (        Indicator leafIndicator : simpIndi.getLeafIndicators()) {
          if (!this.continueRun()) {
            break;
          }
          if (!(leafIndicator instanceof RowCountIndicator)) {
            continue;
          }
          List<Object[]> valueObjectList=initDataSet(leafIndicator,indicToRowMap);
          recordIncrement=valueObjectList.size();
          int offset=0;
          for (          TdXmlElementType columnElement : columnList) {
            if (!this.continueRun()) {
              break;
            }
            Object newobject=rowMap.get(columnElement.getName());
            if (recordIncrement < analysis.getParameters().getMaxNumberRows()) {
              if (recordIncrement < valueObjectList.size()) {
                valueObjectList.get(recordIncrement)[offset]=newobject;
              }
 else {
                Object[] valueObject=new Object[columnList.size()];
                valueObject[offset]=newobject;
                valueObjectList.add(valueObject);
              }
            }
            offset++;
          }
        }
      }
    }
  }
}","/** 
 * handle Objects and store data for MDM.
 * @param rowMap
 * @param objectLs
 * @param columnList
 */
private void handleObjects(Map<String,String> rowMap,EList<Object> objectLs,List<TdXmlElementType> columnList){
  EList<Indicator> indicators=analysis.getResults().getIndicators();
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=analysis.getResults().getIndicToRowMap();
  int recordIncrement=0;
  for (  Indicator indicator : indicators) {
    if (!this.continueRun()) {
      break;
    }
    if (ColumnsetPackage.eINSTANCE.getColumnSetMultiValueIndicator().isSuperTypeOf(indicator.eClass())) {
      indicator.handle(objectLs);
      if (indicator instanceof SimpleStatIndicator) {
        if (!indicator.isStoreData()) {
          continue;
        }
        SimpleStatIndicator simpIndi=(SimpleStatIndicator)indicator;
        for (        Indicator leafIndicator : simpIndi.getLeafIndicators()) {
          if (!this.continueRun()) {
            break;
          }
          if (!(leafIndicator instanceof RowCountIndicator)) {
            continue;
          }
          List<Object[]> valueObjectList=initDataSet(leafIndicator,indicToRowMap);
          recordIncrement=valueObjectList.size();
          int offset=0;
          for (          TdXmlElementType columnElement : columnList) {
            if (!this.continueRun()) {
              break;
            }
            Object newobject=rowMap.get(columnElement.getName());
            if (recordIncrement < analysis.getParameters().getMaxNumberRows()) {
              if (recordIncrement < valueObjectList.size()) {
                valueObjectList.get(recordIncrement)[offset]=newobject;
              }
 else {
                Object[] valueObject=new Object[columnList.size()];
                valueObject[offset]=newobject;
                valueObjectList.add(valueObject);
              }
            }
            offset++;
          }
        }
      }
    }
  }
}",0.9966503478484926
137722,"/** 
 * store ViewRows Expression value.
 */
public void storeViewRowsExp(){
  storeTdExpValuesFromText(tempViewRowsExp,tab2_viewRows);
}","/** 
 * store text value to temp ViewRows Expression.
 */
public void storeViewRowsExp(){
  tempViewRowsExp=storeTdExpValuesFromText(tab2_viewRows);
}",0.8013937282229965
137723,"@Override protected void okPressed(){
  if (!IndicatorCategoryHelper.isUserDefCategory(category)) {
    storeTdExpValuesFromText(tempExpression,editTextNotUDI);
  }
 else {
    storeTdExpValuesFromText(tempExpression,tab1_fullSql);
    tempVariableMap.clear();
    if (IndicatorCategoryHelper.isUserDefMatching(category)) {
      tempVariableMap.put(GenericSQLHandler.UDI_MATCHING,tab0_match_match_var.getText());
      tempVariableMap.put(GenericSQLHandler.UDI_WHERE,tab0_match_where_var.getText());
      storeExpForMatch();
    }
 else {
      if (IndicatorCategoryHelper.isUserDefCount(category)) {
        tempVariableMap.put(GenericSQLHandler.UDI_WHERE,tab0_count_where_var.getText());
      }
 else       if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
        tempVariableMap.put(GenericSQLHandler.UDI_COLUMN,tab0_realvalue_column_var.getText());
        tempVariableMap.put(GenericSQLHandler.UDI_WHERE,tab0_realvalue_where_var.getText());
      }
 else       if (IndicatorCategoryHelper.isUserDefFrequency(category)) {
        tempVariableMap.put(GenericSQLHandler.UDI_FIRST_COLUMN,tab0_fre_first_var.getText());
        tempVariableMap.put(GenericSQLHandler.UDI_SECOND_COLUMN,tab0_fre_second_var.getText());
        tempVariableMap.put(GenericSQLHandler.UDI_WHERE,tab0_fre_where_var.getText());
        tempVariableMap.put(GenericSQLHandler.UDI_GROUP_BY,tab0_fre_groupby_var.getText());
        tempVariableMap.put(GenericSQLHandler.UDI_ORDER_BY,tab0_fre_orderby_var.getText());
      }
      storeViewRowsExp();
    }
    tempExpression.setExpressionVariableMap(tempVariableMap);
  }
  super.okPressed();
}","@Override protected void okPressed(){
  if (!IndicatorCategoryHelper.isUserDefCategory(category)) {
    tempExpression=storeTdExpValuesFromText(editTextNotUDI);
  }
 else {
    tempExpression=storeTdExpValuesFromText(tab1_fullSql);
    tempVariableMap.clear();
    if (IndicatorCategoryHelper.isUserDefMatching(category)) {
      tempVariableMap.put(GenericSQLHandler.UDI_MATCHING,tab0_match_match_var.getText());
      tempVariableMap.put(GenericSQLHandler.UDI_WHERE,tab0_match_where_var.getText());
      storeExpForMatch();
    }
 else {
      if (IndicatorCategoryHelper.isUserDefCount(category)) {
        tempVariableMap.put(GenericSQLHandler.UDI_WHERE,tab0_count_where_var.getText());
      }
 else       if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
        tempVariableMap.put(GenericSQLHandler.UDI_COLUMN,tab0_realvalue_column_var.getText());
        tempVariableMap.put(GenericSQLHandler.UDI_WHERE,tab0_realvalue_where_var.getText());
      }
 else       if (IndicatorCategoryHelper.isUserDefFrequency(category)) {
        tempVariableMap.put(GenericSQLHandler.UDI_FIRST_COLUMN,tab0_fre_first_var.getText());
        tempVariableMap.put(GenericSQLHandler.UDI_SECOND_COLUMN,tab0_fre_second_var.getText());
        tempVariableMap.put(GenericSQLHandler.UDI_WHERE,tab0_fre_where_var.getText());
        tempVariableMap.put(GenericSQLHandler.UDI_GROUP_BY,tab0_fre_groupby_var.getText());
        tempVariableMap.put(GenericSQLHandler.UDI_ORDER_BY,tab0_fre_orderby_var.getText());
      }
      storeViewRowsExp();
    }
    tempExpression.setExpressionVariableMap(tempVariableMap);
  }
  super.okPressed();
}",0.98158379373849
137724,"/** 
 * set Text value as body of TdExpression.
 * @param tdExp
 * @param text
 */
public void storeTdExpValuesFromText(TdExpression tdExp,Text text){
  tdExp.setBody(text.getText());
  tdExp.setVersion(version);
  tdExp.setLanguage(language);
  tdExp.setModificationDate(UDIUtils.getCurrentDateTime());
}","/** 
 * set Text value as body of TdExpression.
 * @param text
 */
public TdExpression storeTdExpValuesFromText(Text text){
  TdExpression result=BooleanExpressionHelper.createTdExpression(language,text.getText(),version);
  result.setModificationDate(UDIUtils.getCurrentDateTime());
  return result;
}",0.3986820428336079
137725,"/** 
 * store Expression values when indicator is user define match.
 */
public void storeExpForMatch(){
  storeTdExpValuesFromText(tempViewValidRowsExp,tab2_match_viewvalidRows);
  storeTdExpValuesFromText(tempViewInvalidRowsExp,tab3_match_viewInvalidRows);
  storeTdExpValuesFromText(tempViewValidValuesExp,tab4_match_viewValidValues);
  storeTdExpValuesFromText(tempViewInvalidValuesExp,tab5_match_viewInvalidValues);
}","/** 
 * store Expression values when indicator is user define match.
 */
public void storeExpForMatch(){
  tempViewValidRowsExp=storeTdExpValuesFromText(tab2_match_viewvalidRows);
  tempViewInvalidRowsExp=storeTdExpValuesFromText(tab3_match_viewInvalidRows);
  tempViewValidValuesExp=storeTdExpValuesFromText(tab4_match_viewValidValues);
  tempViewInvalidValuesExp=storeTdExpValuesFromText(tab5_match_viewInvalidValues);
}",0.7819905213270142
137726,"@Override public void run(){
  try {
    if (this.node != null) {
      if (WorkspaceResourceHelper.sourceFileHasBeenOpened(this.node)) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",this.node.getLabel()));
        return;
      }
    }
    if (!this.filePath.toFile().exists()) {
      BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(this.filePath.toFile().getName());
      throw createBusinessException;
    }
    RenameDialog dialog=new RenameDialog(Display.getDefault().getActiveShell());
    existNames=new ArrayList<String>();
    getExistNames(parentNode,existNames);
    if (dialog.open() == RenameDialog.OK) {
      try {
        CorePlugin.getDefault().closeEditorIfOpened(sourceFiletem);
        Project project=ProjectManager.getInstance().getCurrentProject();
        if (!isNeedToMove(newFolderPath)) {
          renameSourceFile(project);
        }
 else {
          moveSourceFile(project,newFolderPath);
        }
        CorePlugin.getDefault().refreshDQView(parentNode);
      }
 catch (      PersistenceException e) {
        log.error(e);
      }
catch (      BusinessException e) {
        log.error(e);
      }
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
}","@Override public void run(){
  try {
    if (this.node != null) {
      if (WorkspaceResourceHelper.sourceFileHasBeenOpened(this.node)) {
        MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",this.node.getLabel()));
        return;
      }
    }
    if (!ResourceManager.getRootProject().exists(filePath)) {
      BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(this.filePath.toFile().getName());
      throw createBusinessException;
    }
    RenameDialog dialog=new RenameDialog(Display.getDefault().getActiveShell());
    existNames=new ArrayList<String>();
    getExistNames(parentNode,existNames);
    if (dialog.open() == RenameDialog.OK) {
      try {
        CorePlugin.getDefault().closeEditorIfOpened(sourceFiletem);
        Project project=ProjectManager.getInstance().getCurrentProject();
        if (!isNeedToMove(newFolderPath)) {
          renameSourceFile(project);
        }
 else {
          moveSourceFile(project,newFolderPath);
        }
        CorePlugin.getDefault().refreshDQView(parentNode);
      }
 catch (      PersistenceException e) {
        log.error(e);
      }
catch (      BusinessException e) {
        log.error(e);
      }
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
}",0.9719484457922668
137727,"@Override public void run(){
  try {
    IFile duplicateObject=null;
    for (    final IRepositoryNode node : nodeArray) {
      if (node != null) {
        IRepositoryViewObject viewObject=node.getObject();
        ModelElement modelElement=null;
        if (viewObject != null) {
          modelElement=PropertyHelper.getModelElement(viewObject.getProperty());
        }
        if (modelElement == null || modelElement.eResource() == null || modelElement instanceof UDIndicatorDefinition && UDIHelper.getUDICategory(modelElement) == null) {
          BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(viewObject);
          throw createBusinessException;
        }
        final IDuplicateHandle handle=ActionHandleFactory.createDuplicateHandle(node);
        if (handle != null) {
          String initLabel=generateInitialLabel(node);
          InputDialog dialog=new InputDialog(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),initLabel,new IInputValidator(){
            public String isValid(            String newText){
              if (PropertyHelper.existDuplicateName(newText,null,node.getContentType())) {
                return DefaultMessagesImpl.getString(""String_Node_Str"");
              }
              return null;
            }
          }
);
          if (dialog.open() == Window.OK) {
            String newLabel=dialog.getValue();
            if (ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS.equals(node.getProperties(IRepositoryNode.EProperties.LABEL))) {
              duplicateObject=handle.duplicate(newLabel);
            }
 else {
              ReturnCode rc=handle.validDuplicated();
              if (rc.isOk()) {
                duplicateObject=handle.duplicate(newLabel);
              }
 else {
                MessageDialog.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),rc.getMessage());
              }
            }
          }
        }
      }
    }
    CorePlugin.getDefault().refreshWorkSpace();
    if (duplicateObject != null) {
      selectAndReveal(duplicateObject);
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
}","@Override public void run(){
  try {
    IFile duplicateObject=null;
    for (    final IRepositoryNode node : nodeArray) {
      if (node != null) {
        IRepositoryViewObject viewObject=node.getObject();
        ModelElement modelElement=null;
        if (viewObject != null) {
          modelElement=PropertyHelper.getModelElement(viewObject.getProperty());
        }
        if (viewObject == null || viewObject.getProperty() == null || viewObject.getProperty().getItem() == null) {
          BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(""String_Node_Str"");
          throw createBusinessException;
        }
        Item item=viewObject.getProperty().getItem();
        if ((modelElement == null || modelElement.eResource() == null || modelElement.getName() == null || modelElement instanceof UDIndicatorDefinition && UDIHelper.getUDICategory(modelElement) == null) && !(item instanceof TDQFileItem)) {
          BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(viewObject);
          throw createBusinessException;
        }
        final IDuplicateHandle handle=ActionHandleFactory.createDuplicateHandle(node);
        if (handle != null) {
          String initLabel=generateInitialLabel(node);
          InputDialog dialog=new InputDialog(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),initLabel,new IInputValidator(){
            public String isValid(            String newText){
              if (PropertyHelper.existDuplicateName(newText,null,node.getContentType())) {
                return DefaultMessagesImpl.getString(""String_Node_Str"");
              }
              return null;
            }
          }
);
          if (dialog.open() == Window.OK) {
            String newLabel=dialog.getValue();
            if (ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS.equals(node.getProperties(IRepositoryNode.EProperties.LABEL))) {
              duplicateObject=handle.duplicate(newLabel);
            }
 else {
              ReturnCode rc=handle.validDuplicated();
              if (rc.isOk()) {
                duplicateObject=handle.duplicate(newLabel);
              }
 else {
                MessageDialog.openError(null,DefaultMessagesImpl.getString(""String_Node_Str""),rc.getMessage());
              }
            }
          }
        }
      }
    }
    CorePlugin.getDefault().refreshWorkSpace();
    if (duplicateObject != null) {
      selectAndReveal(duplicateObject);
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
}",0.9098360655737704
137728,"/** 
 * get the ItemEditorInput according to the reposViewObj, if there no ItemEditorInput return null.
 * @param isOpenItemEditorAction
 * @return
 */
public IEditorInput computeEditorInput(boolean isOpenItemEditorAction) throws BusinessException {
  IEditorInput result=null;
  if (repViewObj != null) {
    String key=repViewObj.getRepositoryObjectType().getKey();
    Item item=repViewObj.getProperty().getItem();
    if (item instanceof TDQItem) {
      ModelElement modelElement=PropertyHelper.getModelElement(repViewObj.getProperty());
      if (modelElement == null || modelElement.eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(((TDQItem)item).getFilename());
        throw createBusinessException;
      }
    }
    if (ERepositoryObjectType.METADATA_CONNECTIONS.getKey().equals(key) || ERepositoryObjectType.METADATA_MDMCONNECTION.getKey().equals(key)) {
      result=new ConnectionItemEditorInput(item);
      editorID=ConnectionEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT.getKey().equals(key)) {
      result=new AnalysisItemEditorInput(item);
      Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
      if (analysis == null || analysis.getContext() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(repViewObj);
        throw createBusinessException;
      }
      EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
      RepositoryNode connectionRepositoryNode=null;
      if (analysedElements.size() > 0) {
        ModelElement modelElement=analysedElements.get(0);
        if (modelElement instanceof Connection) {
          connection=(Connection)modelElement;
        }
        if (modelElement instanceof Catalog) {
          Catalog catalog=SwitchHelpers.CATALOG_SWITCH.caseCatalog((Catalog)modelElement);
          connection=ConnectionHelper.getConnection(catalog);
        }
 else         if (modelElement instanceof Schema) {
          Schema schema=SwitchHelpers.SCHEMA_SWITCH.caseSchema((Schema)modelElement);
          if (schema != null) {
            connection=ConnectionHelper.getConnection(schema);
          }
        }
 else         if (modelElement instanceof TdTable) {
          TdTable tdTable=SwitchHelpers.TABLE_SWITCH.caseTdTable((TdTable)modelElement);
          connection=ConnectionHelper.getConnection(tdTable);
        }
 else         if (modelElement instanceof TdView) {
          TdView tdView=SwitchHelpers.VIEW_SWITCH.caseTdView((TdView)modelElement);
          connection=ConnectionHelper.getConnection(tdView);
        }
 else         if (modelElement instanceof TdColumn) {
          TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.caseTdColumn((TdColumn)modelElement);
          connection=ConnectionHelper.getConnection(tdColumn);
        }
 else         if (modelElement instanceof MetadataColumn) {
          MetadataColumn mColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(modelElement);
          connection=ConnectionHelper.getTdDataProvider(mColumn);
        }
 else         if (modelElement instanceof TdXmlElementType) {
          TdXmlElementType tdXmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(modelElement);
          TdXmlSchema ownedDocument=tdXmlElement.getOwnedDocument();
          connection=SwitchHelpers.MDMCONNECTION_SWITCH.doSwitch(ownedDocument.getDataManager().get(0));
        }
        connectionRepositoryNode=RepositoryNodeHelper.recursiveFind(connection);
      }
      ((AnalysisItemEditorInput)result).setConnectionNode(connectionRepositoryNode);
      editorID=AnalysisEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_INDICATOR_ELEMENT.getKey().equals(key)) {
      result=new IndicatorDefinitionItemEditorInput(item);
      TDQIndicatorDefinitionItem definitionItem=(TDQIndicatorDefinitionItem)item;
      if (definitionItem.getIndicatorDefinition().eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
        throw createBusinessException;
      }
      if (UDIHelper.getUDICategory(definitionItem.getIndicatorDefinition()) == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
        throw createBusinessException;
      }
      editorID=IndicatorEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_RULES_SQL.getKey().equals(key)) {
      result=new BusinessRuleItemEditorInput(item);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_RULES_PARSER.getKey().equals(key)) {
      result=new ParserRuleItemEditorInput(item);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_PATTERN_ELEMENT.getKey().equals(key)) {
      result=new PatternItemEditorInput(item);
      TDQPatternItem patternItem=(TDQPatternItem)item;
      if (patternItem.getPattern() == null || patternItem.getPattern().eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(patternItem.getFilename());
        throw createBusinessException;
      }
      editorID=PatternEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_REPORT_ELEMENT.getKey().equals(key)) {
      result=new ReportItemEditorInput(item);
      TDQReportItem reportItem=(TDQReportItem)item;
      if (!(reportItem.getReport() instanceof TdReport)) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
        throw createBusinessException;
      }
      for (      AnalysisMap anaMap : ((TdReport)reportItem.getReport()).getAnalysisMap()) {
        Analysis analysis=anaMap.getAnalysis();
        if (analysis.eResource() == null) {
          BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
          throw createBusinessException;
        }
      }
      editorID=""String_Node_Str"";
    }
    if (!isOpenItemEditorAction) {
      if (ERepositoryObjectType.TDQ_JRAXML_ELEMENT.getKey().equals(key) || ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key)) {
        IPath append=WorkbenchUtils.getFilePath(repViewObj.getRepositoryNode());
        result=new FileEditorInput(ResourceManager.getRootProject().getFile(append));
        editorID=FileEditorInput.class.getName();
      }
    }
  }
  return result;
}","/** 
 * get the ItemEditorInput according to the reposViewObj, if there no ItemEditorInput return null.
 * @param isOpenItemEditorAction
 * @return
 */
public IEditorInput computeEditorInput(boolean isOpenItemEditorAction) throws BusinessException {
  IEditorInput result=null;
  if (repViewObj != null) {
    String key=repViewObj.getRepositoryObjectType().getKey();
    Item item=repViewObj.getProperty().getItem();
    if (item instanceof TDQItem && !(item instanceof TDQFileItem)) {
      ModelElement modelElement=PropertyHelper.getModelElement(repViewObj.getProperty());
      if (modelElement == null || modelElement.eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(((TDQItem)item).getFilename());
        throw createBusinessException;
      }
    }
    if (ERepositoryObjectType.METADATA_CONNECTIONS.getKey().equals(key) || ERepositoryObjectType.METADATA_MDMCONNECTION.getKey().equals(key)) {
      result=new ConnectionItemEditorInput(item);
      editorID=ConnectionEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT.getKey().equals(key)) {
      result=new AnalysisItemEditorInput(item);
      Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
      if (analysis == null || analysis.getContext() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(repViewObj);
        throw createBusinessException;
      }
      EList<ModelElement> analysedElements=analysis.getContext().getAnalysedElements();
      RepositoryNode connectionRepositoryNode=null;
      if (analysedElements.size() > 0) {
        ModelElement modelElement=analysedElements.get(0);
        if (modelElement instanceof Connection) {
          connection=(Connection)modelElement;
        }
        if (modelElement instanceof Catalog) {
          Catalog catalog=SwitchHelpers.CATALOG_SWITCH.caseCatalog((Catalog)modelElement);
          connection=ConnectionHelper.getConnection(catalog);
        }
 else         if (modelElement instanceof Schema) {
          Schema schema=SwitchHelpers.SCHEMA_SWITCH.caseSchema((Schema)modelElement);
          if (schema != null) {
            connection=ConnectionHelper.getConnection(schema);
          }
        }
 else         if (modelElement instanceof TdTable) {
          TdTable tdTable=SwitchHelpers.TABLE_SWITCH.caseTdTable((TdTable)modelElement);
          connection=ConnectionHelper.getConnection(tdTable);
        }
 else         if (modelElement instanceof TdView) {
          TdView tdView=SwitchHelpers.VIEW_SWITCH.caseTdView((TdView)modelElement);
          connection=ConnectionHelper.getConnection(tdView);
        }
 else         if (modelElement instanceof TdColumn) {
          TdColumn tdColumn=SwitchHelpers.COLUMN_SWITCH.caseTdColumn((TdColumn)modelElement);
          connection=ConnectionHelper.getConnection(tdColumn);
        }
 else         if (modelElement instanceof MetadataColumn) {
          MetadataColumn mColumn=SwitchHelpers.METADATA_COLUMN_SWITCH.doSwitch(modelElement);
          connection=ConnectionHelper.getTdDataProvider(mColumn);
        }
 else         if (modelElement instanceof TdXmlElementType) {
          TdXmlElementType tdXmlElement=SwitchHelpers.XMLELEMENTTYPE_SWITCH.doSwitch(modelElement);
          TdXmlSchema ownedDocument=tdXmlElement.getOwnedDocument();
          connection=SwitchHelpers.MDMCONNECTION_SWITCH.doSwitch(ownedDocument.getDataManager().get(0));
        }
        connectionRepositoryNode=RepositoryNodeHelper.recursiveFind(connection);
      }
      ((AnalysisItemEditorInput)result).setConnectionNode(connectionRepositoryNode);
      editorID=AnalysisEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_INDICATOR_ELEMENT.getKey().equals(key)) {
      result=new IndicatorDefinitionItemEditorInput(item);
      TDQIndicatorDefinitionItem definitionItem=(TDQIndicatorDefinitionItem)item;
      if (definitionItem.getIndicatorDefinition().eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
        throw createBusinessException;
      }
      if (UDIHelper.getUDICategory(definitionItem.getIndicatorDefinition()) == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(definitionItem.getFilename());
        throw createBusinessException;
      }
      editorID=IndicatorEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_RULES_SQL.getKey().equals(key)) {
      result=new BusinessRuleItemEditorInput(item);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_RULES_PARSER.getKey().equals(key)) {
      result=new ParserRuleItemEditorInput(item);
      editorID=DQRuleEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_PATTERN_ELEMENT.getKey().equals(key)) {
      result=new PatternItemEditorInput(item);
      TDQPatternItem patternItem=(TDQPatternItem)item;
      if (patternItem.getPattern() == null || patternItem.getPattern().eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(patternItem.getFilename());
        throw createBusinessException;
      }
      editorID=PatternEditor.class.getName();
    }
 else     if (ERepositoryObjectType.TDQ_REPORT_ELEMENT.getKey().equals(key)) {
      result=new ReportItemEditorInput(item);
      TDQReportItem reportItem=(TDQReportItem)item;
      if (!(reportItem.getReport() instanceof TdReport)) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
        throw createBusinessException;
      }
      for (      AnalysisMap anaMap : ((TdReport)reportItem.getReport()).getAnalysisMap()) {
        Analysis analysis=anaMap.getAnalysis();
        if (analysis.eResource() == null) {
          BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(reportItem.getFilename());
          throw createBusinessException;
        }
      }
      editorID=""String_Node_Str"";
    }
    if (!isOpenItemEditorAction) {
      if (ERepositoryObjectType.TDQ_JRAXML_ELEMENT.getKey().equals(key) || ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT.getKey().equals(key)) {
        IPath append=WorkbenchUtils.getFilePath(repViewObj.getRepositoryNode());
        result=new FileEditorInput(ResourceManager.getRootProject().getFile(append));
        editorID=FileEditorInput.class.getName();
      }
    }
  }
  return result;
}",0.9974543276430068
137729,"@Override public void run(){
  try {
    TdTaskPropertiesDialog dialog=new TdTaskPropertiesDialog(shell);
    ModelElement modelElement=null;
    IFile file=null;
    if (navObj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)navObj;
      modelElement=RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
      if (modelElement == null || modelElement.eResource() == null) {
        BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(node.getObject());
        throw createBusinessException;
      }
      file=WorkspaceUtils.getModelElementResource(modelElement);
    }
 else {
      modelElement=(ModelElement)navObj;
      file=WorkspaceUtils.getModelElementResource(modelElement);
    }
    if (modelElement != null) {
      TdResourceModel tdResModel=new TdResourceModel(file.getFullPath(),(Workspace)file.getWorkspace(),modelElement);
      dialog.setResource(tdResModel);
      Map<String,Object> attMap=new HashMap<String,Object>();
      attMap.put(MarkerViewUtil.NAME_ATTRIBUTE,modelElement.getName());
      attMap.put(IMarker.LOCATION,file.getRawLocation().toString());
      attMap.put(IMarker.LINE_NUMBER,file.getRawLocation().toString());
      dialog.setInitialAttributes(attMap);
      dialog.open();
    }
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
catch (  Exception e1) {
    log.error(e1,e1);
  }
}","@Override public void run(){
  try {
    TdTaskPropertiesDialog dialog=new TdTaskPropertiesDialog(shell);
    ModelElement modelElement=null;
    if (navObj instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)navObj;
      modelElement=RepositoryNodeHelper.getModelElementFromRepositoryNode(node);
    }
 else {
      modelElement=(ModelElement)navObj;
    }
    if (modelElement == null || modelElement.eResource() == null || modelElement.getName() == null) {
      String fileName=""String_Node_Str"";
      if (navObj instanceof RepositoryNode) {
        Item item=((RepositoryNode)navObj).getObject().getProperty().getItem();
        if (item instanceof TDQItem) {
          fileName=((TDQItem)item).getFilename();
        }
      }
      BusinessException createBusinessException=ExceptionFactory.getInstance().createBusinessException(fileName);
      throw createBusinessException;
    }
    IFile file=WorkspaceUtils.getModelElementResource(modelElement);
    TdResourceModel tdResModel=new TdResourceModel(file.getFullPath(),(Workspace)file.getWorkspace(),modelElement);
    dialog.setResource(tdResModel);
    Map<String,Object> attMap=new HashMap<String,Object>();
    attMap.put(MarkerViewUtil.NAME_ATTRIBUTE,modelElement.getName());
    attMap.put(IMarker.LOCATION,file.getRawLocation().toString());
    attMap.put(IMarker.LINE_NUMBER,file.getRawLocation().toString());
    dialog.setInitialAttributes(attMap);
    dialog.open();
  }
 catch (  BusinessException e) {
    ExceptionHandler.process(e,Level.FATAL);
  }
catch (  Exception e1) {
    log.error(e1,e1);
  }
}",0.5938117182356814
137730,"/** 
 * get Query For User define indicator.
 * @param indicatorDefinition
 * @return
 */
private String getQueryForUDIndicator(IndicatorDefinition indicatorDefinition){
  String sql=PluginConstant.EMPTY_STRING;
  EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewRowsExpression();
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  if (!dataFilterClause.equals(PluginConstant.EMPTY_STRING)) {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,dbmsLanguage.and() + dataFilterClause);
  }
 else {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
  }
  ModelElement analyzedElement=this.indicator.getAnalyzedElement();
  String tableName=getFullyQualifiedTableName(analyzedElement);
  sql=sql.replace(GenericSQLHandler.TABLE_NAME,tableName);
  sql=sql.replace(GenericSQLHandler.COLUMN_NAMES,analyzedElement.getName());
  if (sql.indexOf(GenericSQLHandler.UDI_INDICATOR_VALUE) != -1) {
    sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,""String_Node_Str"" + entity.getKey() + ""String_Node_Str"");
  }
  if (sql.indexOf(GenericSQLHandler.GROUP_BY_ALIAS) != -1) {
    sql=sql.replace(GenericSQLHandler.GROUP_BY_ALIAS,""String_Node_Str"" + analyzedElement.getName() + ""String_Node_Str"");
  }
  return sql;
}","/** 
 * get Query For User define indicator.
 * @param indicatorDefinition
 * @return
 */
private String getQueryForUDIndicator(IndicatorDefinition indicatorDefinition){
  String sql=PluginConstant.EMPTY_STRING;
  EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewRowsExpression();
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  if (!dataFilterClause.equals(PluginConstant.EMPTY_STRING)) {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + ""String_Node_Str"" + dataFilterClause+ ""String_Node_Str"");
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,dbmsLanguage.and() + ""String_Node_Str"" + dataFilterClause+ ""String_Node_Str"");
  }
 else {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
  }
  ModelElement analyzedElement=this.indicator.getAnalyzedElement();
  String tableName=getFullyQualifiedTableName(analyzedElement);
  sql=sql.replace(GenericSQLHandler.TABLE_NAME,tableName);
  sql=sql.replace(GenericSQLHandler.COLUMN_NAMES,analyzedElement.getName());
  if (sql.indexOf(GenericSQLHandler.UDI_INDICATOR_VALUE) != -1) {
    Object key=entity.getKey();
    if (key == null) {
      sql=sql.replace(""String_Node_Str"" + GenericSQLHandler.UDI_INDICATOR_VALUE,""String_Node_Str"");
    }
 else {
      sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
  if (sql.indexOf(GenericSQLHandler.GROUP_BY_ALIAS) != -1) {
    sql=sql.replace(GenericSQLHandler.GROUP_BY_ALIAS,""String_Node_Str"" + analyzedElement.getName() + ""String_Node_Str"");
  }
  return sql;
}",0.9213809109370468
137731,"/** 
 * get the Query After Replaced.
 * @param indicatorDefinition
 * @param list
 * @return String
 */
public String getQueryAfterReplaced(IndicatorDefinition indicatorDefinition,EList<TdExpression> list){
  String sql=PluginConstant.EMPTY_STRING;
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  if (!dataFilterClause.equals(PluginConstant.EMPTY_STRING)) {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,dbmsLanguage.and() + dataFilterClause);
  }
 else {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
  }
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  String tableName=getFullyQualifiedTableName(analyzedElement);
  sql=dbmsLanguage.fillGenericQueryWithColumnsAndTable(sql,analyzedElement.getName(),tableName);
  if (sql.indexOf(GenericSQLHandler.GROUP_BY_ALIAS) != -1) {
    sql=sql.replace(GenericSQLHandler.GROUP_BY_ALIAS,""String_Node_Str"" + analyzedElement.getName() + ""String_Node_Str"");
  }
  return sql;
}","/** 
 * get the Query After Replaced.
 * @param indicatorDefinition
 * @param list
 * @return String
 */
public String getQueryAfterReplaced(IndicatorDefinition indicatorDefinition,EList<TdExpression> list){
  String sql=PluginConstant.EMPTY_STRING;
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  if (!dataFilterClause.equals(PluginConstant.EMPTY_STRING)) {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + ""String_Node_Str"" + dataFilterClause+ ""String_Node_Str"");
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,dbmsLanguage.and() + ""String_Node_Str"" + dataFilterClause+ ""String_Node_Str"");
  }
 else {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
  }
  ModelElement analyzedElement=indicator.getAnalyzedElement();
  String tableName=getFullyQualifiedTableName(analyzedElement);
  sql=dbmsLanguage.fillGenericQueryWithColumnsAndTable(sql,analyzedElement.getName(),tableName);
  if (sql.indexOf(GenericSQLHandler.GROUP_BY_ALIAS) != -1) {
    sql=sql.replace(GenericSQLHandler.GROUP_BY_ALIAS,""String_Node_Str"" + analyzedElement.getName() + ""String_Node_Str"");
  }
  return sql;
}",0.971153846153846
137732,"/** 
 * get Query For View Rows.
 * @param indicatorDefinition
 * @return
 */
private String getQueryForViewRows(IndicatorDefinition indicatorDefinition){
  String sql=PluginConstant.EMPTY_STRING;
  IndicatorCategory category=IndicatorCategoryHelper.getCategory(indicatorDefinition);
  EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewRowsExpression();
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  if (!dataFilterClause.equals(PluginConstant.EMPTY_STRING)) {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,dbmsLanguage.and() + dataFilterClause);
  }
 else {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
  }
  String tableName=getFullyQualifiedTableName(this.indicator.getAnalyzedElement());
  sql=sql.replace(GenericSQLHandler.TABLE_NAME,tableName);
  sql=sql.replace(GenericSQLHandler.COLUMN_NAMES,this.indicator.getAnalyzedElement().getName());
  if (sql.indexOf(GenericSQLHandler.UDI_INDICATOR_VALUE) != -1) {
    if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
      sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,this.indicator.getRealValue().toString());
    }
 else {
      sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,(String.valueOf(this.indicator.getIntegerValue().intValue())));
    }
  }
  return sql;
}","/** 
 * get Query For View Rows.
 * @param indicatorDefinition
 * @return
 */
private String getQueryForViewRows(IndicatorDefinition indicatorDefinition){
  String sql=PluginConstant.EMPTY_STRING;
  IndicatorCategory category=IndicatorCategoryHelper.getCategory(indicatorDefinition);
  EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewRowsExpression();
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  if (!dataFilterClause.equals(PluginConstant.EMPTY_STRING)) {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + ""String_Node_Str"" + dataFilterClause+ ""String_Node_Str"");
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,dbmsLanguage.and() + ""String_Node_Str"" + dataFilterClause+ ""String_Node_Str"");
  }
 else {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
  }
  String tableName=getFullyQualifiedTableName(this.indicator.getAnalyzedElement());
  sql=sql.replace(GenericSQLHandler.TABLE_NAME,tableName);
  sql=sql.replace(GenericSQLHandler.COLUMN_NAMES,this.indicator.getAnalyzedElement().getName());
  if (sql.indexOf(GenericSQLHandler.UDI_INDICATOR_VALUE) != -1) {
    if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
      sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,this.indicator.getRealValue().toString());
    }
 else {
      sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,(String.valueOf(this.indicator.getIntegerValue().intValue())));
    }
  }
  return sql;
}",0.9769775678866588
137733,"public GenericSQLHandler replaceUDIQueryToMatch(){
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_WHERE + PluginConstant.SPACE_STRING+ AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_WHERE + PluginConstant.SPACE_STRING+ AND_WHERE_CLAUSE,AND_WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_ORDER_BY,PluginConstant.SPACE_STRING);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_GROUP_BY,PluginConstant.SPACE_STRING);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,AND_WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,""String_Node_Str"" + WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,""String_Node_Str"" + WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.trim();
  if (sqlString.endsWith(""String_Node_Str"")) {
    sqlString=sqlString.replace(""String_Node_Str"",PluginConstant.EMPTY_STRING);
  }
  sqlString=sqlString.trim();
  if (sqlString.endsWith(""String_Node_Str"")) {
    sqlString=sqlString.replace(""String_Node_Str"",PluginConstant.EMPTY_STRING);
  }
  sqlString=sqlString.trim();
  return this;
}","public GenericSQLHandler replaceUDIQueryToMatch(){
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_WHERE + PluginConstant.SPACE_STRING+ AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_WHERE + PluginConstant.SPACE_STRING+ AND_WHERE_CLAUSE,AND_WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_ORDER_BY,PluginConstant.SPACE_STRING);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_GROUP_BY,PluginConstant.SPACE_STRING);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,AND_WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,AND_WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,""String_Node_Str"" + WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,""String_Node_Str"" + WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.trim();
  if (sqlString.endsWith(""String_Node_Str"")) {
    sqlString=sqlString.replace(""String_Node_Str"",PluginConstant.EMPTY_STRING);
  }
  sqlString=sqlString.trim();
  if (sqlString.endsWith(""String_Node_Str"")) {
    sqlString=sqlString.replace(""String_Node_Str"",PluginConstant.EMPTY_STRING);
  }
  sqlString=sqlString.trim();
  return this;
}",0.9461045891141944
137734,"public GenericSQLHandler replaceUDIWhere(String UDIWhere){
  sqlString=sqlString.replace(UDI_WHERE,UDIWhere);
  return this;
}","public GenericSQLHandler replaceUDIWhere(String UDIWhere){
  sqlString=sqlString.replace(UDI_WHERE,""String_Node_Str"" + UDIWhere + ""String_Node_Str"");
  return this;
}",0.863013698630137
137735,"/** 
 * return the duplicate object property.
 * @param newName
 * @param objectType
 */
public static Property getDuplicateObject(String newName,ERepositoryObjectType objectType){
  Property prop=null;
  String normalizeName=WorkspaceUtils.normalize(newName);
  List<IRepositoryViewObject> existObjects;
  try {
    existObjects=ProxyRepositoryFactory.getInstance().getAll(objectType,true,false);
    if (existObjects != null) {
      for (      IRepositoryViewObject object : existObjects) {
        if (object == null || object.getProperty() == null) {
          continue;
        }
        prop=object.getProperty();
        if (newName.equals(prop.getDisplayName()) || normalizeName.equals(prop.getLabel())) {
          return prop;
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return prop;
}","/** 
 * return the duplicate object property.
 * @param newName
 * @param objectType
 */
public static Property getDuplicateObject(String newName,ERepositoryObjectType objectType){
  Property prop=null;
  String normalizeName=WorkspaceUtils.normalize(newName);
  List<IRepositoryViewObject> existObjects;
  try {
    existObjects=ProxyRepositoryFactory.getInstance().getAll(objectType,true,false);
    if (existObjects != null) {
      for (      IRepositoryViewObject object : existObjects) {
        if (object == null || object.getProperty() == null) {
          continue;
        }
        if (newName.equals(object.getProperty().getDisplayName()) || normalizeName.equals(object.getProperty().getLabel())) {
          return object.getProperty();
        }
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(e,e);
  }
  return prop;
}",0.9369475545079552
137736,"@Override public IFile duplicate(String newLabel){
  IFile duplicatedFile=super.duplicate(newLabel);
  UDIndicatorDefinition definition=(UDIndicatorDefinition)ModelElementFileFactory.getModelElement(duplicatedFile);
  IndicatorCategory category=UDIHelper.getUDICategory(definition);
  if (category == null || !IndicatorCategoryHelper.isUserDefCategory(category)) {
    UDIHelper.setUDICategory(definition,DefinitionHandler.getInstance().getUserDefinedCountIndicatorCategory());
  }
  TaggedValueHelper.setValidStatus(true,definition);
  definition.setLabel(definition.getName());
  definition=UDIUtils.createDefaultDrillDownList(definition);
  IndicatorResourceFileHelper.getInstance().save(definition);
  DefinitionHandler.reload();
  return duplicatedFile;
}","@Override public IFile duplicate(String newLabel){
  IFile duplicatedFile=super.duplicate(newLabel);
  IndicatorDefinition definition=(IndicatorDefinition)ModelElementFileFactory.getModelElement(duplicatedFile);
  IndicatorCategory category=UDIHelper.getUDICategory(definition);
  if (category == null || !IndicatorCategoryHelper.isUserDefCategory(category)) {
    UDIHelper.setUDICategory(definition,DefinitionHandler.getInstance().getUserDefinedCountIndicatorCategory());
  }
  TaggedValueHelper.setValidStatus(true,definition);
  definition.setLabel(definition.getName());
  IndicatorResourceFileHelper.getInstance().save(definition);
  DefinitionHandler.reload();
  UpdateUDIIndicatorsWithNewModelTask task=new UpdateUDIIndicatorsWithNewModelTask();
  task.execute();
  return duplicatedFile;
}",0.7535301668806161
137737,"@Override public String getText(Object obj){
  if (obj == null) {
    return ""String_Node_Str"";
  }
  if (obj instanceof ImpactNode) {
    return ((ImpactNode)obj).toString();
  }
 else   if (obj instanceof IFile) {
    IFile file=(IFile)obj;
    ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
    String name=modelElement != null ? PropertyHelper.getProperty(modelElement).getDisplayName() : file.getName();
    return name;
  }
 else   if (obj instanceof RepositoryViewObject) {
    return ((IRepositoryViewObject)obj).getLabel();
  }
  return PropertyHelper.getProperty((ModelElement)obj).getDisplayName();
}","@Override public String getText(Object obj){
  if (obj == null) {
    return ""String_Node_Str"";
  }
  if (obj instanceof ImpactNode) {
    return ((ImpactNode)obj).toString();
  }
 else   if (obj instanceof IFile) {
    IFile file=(IFile)obj;
    ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
    String name=modelElement != null ? PropertyHelper.getProperty(modelElement).getDisplayName() : file.getName();
    return name;
  }
 else   if (obj instanceof RepositoryViewObject) {
    return ((IRepositoryViewObject)obj).getLabel();
  }
  return ((ModelElement)obj).getName();
}",0.9427880741337632
137738,"protected static LabelProvider getLabelProvider(){
  if (fLabelProvider == null) {
    fLabelProvider=new LabelProvider(){
      @Override public String getText(      Object obj){
        if (obj == null) {
          return ""String_Node_Str"";
        }
        if (obj instanceof ImpactNode) {
          return ((ImpactNode)obj).toString();
        }
 else         if (obj instanceof IFile) {
          IFile file=(IFile)obj;
          ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
          String name=modelElement != null ? PropertyHelper.getProperty(modelElement).getDisplayName() : file.getName();
          return name;
        }
 else         if (obj instanceof RepositoryViewObject) {
          return ((IRepositoryViewObject)obj).getLabel();
        }
        return PropertyHelper.getProperty((ModelElement)obj).getDisplayName();
      }
      @Override public Image getImage(      Object obj){
        ModelElement modelElement=null;
        if (obj instanceof ModelElement) {
          modelElement=(ModelElement)obj;
        }
 else         if (obj instanceof ImpactNode) {
          modelElement=((ImpactNode)obj).getNodeElement();
        }
 else         if (obj instanceof IFile) {
          modelElement=ModelElementFileFactory.getModelElement((IFile)obj);
        }
 else         if (obj instanceof RepositoryViewObject) {
          return ImageLib.getImage(ImageLib.XML_DOC);
        }
        if (modelElement == null) {
          if (((ImpactNode)obj).node != null) {
            return ImageLib.getImage(ImageLib.XML_DOC);
          }
          return super.getImage(obj);
        }
        if (modelElement instanceof Analysis) {
          return ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
        }
        if (modelElement instanceof TdReport) {
          return ImageLib.getImage(ImageLib.REPORT_OBJECT);
        }
        if (modelElement instanceof DatabaseConnection) {
          return ImageLib.getImage(ImageLib.CONNECTION);
        }
        if (modelElement instanceof MDMConnection) {
          return ImageLib.getImage(ImageLib.MDM_CONNECTION);
        }
        if (modelElement instanceof DelimitedFileConnection) {
          return ImageLib.getImage(ImageLib.FILE_DELIMITED);
        }
        if (modelElement instanceof Pattern) {
          return ImageLib.getImage(ImageLib.PATTERN_REG);
        }
        if (modelElement instanceof IndicatorDefinition) {
          return ImageLib.getImage(ImageLib.IND_DEFINITION);
        }
        if (modelElement instanceof DQRule) {
          return ImageLib.getImage(ImageLib.DQ_RULE);
        }
        return super.getImage(obj);
      }
    }
;
  }
  return fLabelProvider;
}","protected static LabelProvider getLabelProvider(){
  if (fLabelProvider == null) {
    fLabelProvider=new LabelProvider(){
      @Override public String getText(      Object obj){
        if (obj == null) {
          return ""String_Node_Str"";
        }
        if (obj instanceof ImpactNode) {
          return ((ImpactNode)obj).toString();
        }
 else         if (obj instanceof IFile) {
          IFile file=(IFile)obj;
          ModelElement modelElement=ModelElementFileFactory.getModelElement(file);
          String name=modelElement != null ? PropertyHelper.getProperty(modelElement).getDisplayName() : file.getName();
          return name;
        }
 else         if (obj instanceof RepositoryViewObject) {
          return ((IRepositoryViewObject)obj).getLabel();
        }
        return ((ModelElement)obj).getName();
      }
      @Override public Image getImage(      Object obj){
        ModelElement modelElement=null;
        if (obj instanceof ModelElement) {
          modelElement=(ModelElement)obj;
        }
 else         if (obj instanceof ImpactNode) {
          modelElement=((ImpactNode)obj).getNodeElement();
        }
 else         if (obj instanceof IFile) {
          modelElement=ModelElementFileFactory.getModelElement((IFile)obj);
        }
 else         if (obj instanceof RepositoryViewObject) {
          return ImageLib.getImage(ImageLib.XML_DOC);
        }
        if (modelElement == null) {
          if (((ImpactNode)obj).node != null) {
            return ImageLib.getImage(ImageLib.XML_DOC);
          }
          return super.getImage(obj);
        }
        if (modelElement instanceof Analysis) {
          return ImageLib.getImage(ImageLib.ANALYSIS_OBJECT);
        }
        if (modelElement instanceof TdReport) {
          return ImageLib.getImage(ImageLib.REPORT_OBJECT);
        }
        if (modelElement instanceof DatabaseConnection) {
          return ImageLib.getImage(ImageLib.CONNECTION);
        }
        if (modelElement instanceof MDMConnection) {
          return ImageLib.getImage(ImageLib.MDM_CONNECTION);
        }
        if (modelElement instanceof DelimitedFileConnection) {
          return ImageLib.getImage(ImageLib.FILE_DELIMITED);
        }
        if (modelElement instanceof Pattern) {
          return ImageLib.getImage(ImageLib.PATTERN_REG);
        }
        if (modelElement instanceof IndicatorDefinition) {
          return ImageLib.getImage(ImageLib.IND_DEFINITION);
        }
        if (modelElement instanceof DQRule) {
          return ImageLib.getImage(ImageLib.DQ_RULE);
        }
        return super.getImage(obj);
      }
    }
;
  }
  return fLabelProvider;
}",0.9938283149429586
137739,"/** 
 * get Query For User define indicator.
 * @param indicatorDefinition
 * @return
 */
private String getQueryForUDIndicator(IndicatorDefinition indicatorDefinition){
  String sql=PluginConstant.EMPTY_STRING;
  EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewRowsExpression();
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
  sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING.equals(dataFilterClause) ? PluginConstant.EMPTY_STRING : dbmsLanguage.and() + dataFilterClause);
  String tableName=getFullyQualifiedTableName(this.indicator.getAnalyzedElement());
  sql=sql.replace(GenericSQLHandler.TABLE_NAME,tableName);
  sql=sql.replace(GenericSQLHandler.COLUMN_NAMES,this.indicator.getAnalyzedElement().getName());
  sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,(String.valueOf(this.indicator.getIntegerValue().intValue())));
  return sql;
}","/** 
 * get Query For User define indicator.
 * @param indicatorDefinition
 * @return
 */
private String getQueryForUDIndicator(IndicatorDefinition indicatorDefinition){
  String sql=PluginConstant.EMPTY_STRING;
  EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewRowsExpression();
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  if (!dataFilterClause.equals(PluginConstant.EMPTY_STRING)) {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,dbmsLanguage.and() + dataFilterClause);
  }
 else {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
  }
  String tableName=getFullyQualifiedTableName(this.indicator.getAnalyzedElement());
  sql=sql.replace(GenericSQLHandler.TABLE_NAME,tableName);
  sql=sql.replace(GenericSQLHandler.COLUMN_NAMES,this.indicator.getAnalyzedElement().getName());
  if (sql.indexOf(GenericSQLHandler.UDI_INDICATOR_VALUE) != -1) {
    sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,(String.valueOf(this.indicator.getIntegerValue().intValue())));
  }
  return sql;
}",0.7570532915360502
137740,"/** 
 * get the Query After Replaced.
 * @param indicatorDefinition
 * @param list
 * @return String
 */
public String getQueryAfterReplaced(IndicatorDefinition indicatorDefinition,EList<TdExpression> list){
  String sql=PluginConstant.EMPTY_STRING;
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  String tableName=getFullyQualifiedTableName(this.indicator.getAnalyzedElement());
  sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
  sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING.equals(dataFilterClause) ? PluginConstant.EMPTY_STRING : dbmsLanguage.and() + dataFilterClause);
  sql=dbmsLanguage.fillGenericQueryWithColumnsAndTable(sql,indicator.getAnalyzedElement().getName(),tableName);
  return sql;
}","/** 
 * get the Query After Replaced.
 * @param indicatorDefinition
 * @param list
 * @return String
 */
public String getQueryAfterReplaced(IndicatorDefinition indicatorDefinition,EList<TdExpression> list){
  String sql=PluginConstant.EMPTY_STRING;
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  if (!dataFilterClause.equals(PluginConstant.EMPTY_STRING)) {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,dbmsLanguage.and() + dataFilterClause);
  }
 else {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
  }
  String tableName=getFullyQualifiedTableName(this.indicator.getAnalyzedElement());
  sql=dbmsLanguage.fillGenericQueryWithColumnsAndTable(sql,indicator.getAnalyzedElement().getName(),tableName);
  return sql;
}",0.7738446411012783
137741,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=this.indicator.getInstantiatedExpressions();
  if (ConnectionHelper.isMssql((Connection)this.analysis.getContext().getConnection()) && instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String body=expression.getBody().toUpperCase();
    String functionName=body.split(""String_Node_Str"").length > 1 ? body.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionReturnValue=functionName.split(""String_Node_Str"").length > 1 ? functionName.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionName=functionName.split(""String_Node_Str"").length > 1 ? functionName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
    dbmsLanguage.setFunctionName(functionName);
    functionReturnValue=functionReturnValue.split(""String_Node_Str"").length > 1 ? functionReturnValue.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionReturnValue=functionReturnValue.split(""String_Node_Str"").length > 1 ? functionReturnValue.split(""String_Node_Str"")[0] : ""String_Node_Str"";
    map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
    map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
    map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
    map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
    return map;
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  if (ColumnsetPackage.eINSTANCE.getAllMatchIndicator().isSuperTypeOf(indicator.eClass())) {
    return map;
  }
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  EList<Expression> instantiatedExpressions=this.indicator.getInstantiatedExpressions();
  if (ConnectionHelper.isMssql((Connection)this.analysis.getContext().getConnection()) && instantiatedExpressions.size() > 0) {
    Expression expression=instantiatedExpressions.get(0);
    String body=expression.getBody().toUpperCase();
    String functionName=body.split(""String_Node_Str"").length > 1 ? body.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionReturnValue=functionName.split(""String_Node_Str"").length > 1 ? functionName.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionName=functionName.split(""String_Node_Str"").length > 1 ? functionName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
    dbmsLanguage.setFunctionName(functionName);
    functionReturnValue=functionReturnValue.split(""String_Node_Str"").length > 1 ? functionReturnValue.split(""String_Node_Str"")[1] : ""String_Node_Str"";
    functionReturnValue=functionReturnValue.split(""String_Node_Str"").length > 1 ? functionReturnValue.split(""String_Node_Str"")[0] : ""String_Node_Str"";
  }
  map.put(MENU_VIEW_INVALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_INVALID_VALUES) + getInvalidValuesStatement() : null);
  map.put(MENU_VIEW_VALID_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALID_VALUES) + getValidValuesStatement() : null);
  map.put(MENU_VIEW_INVALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_INVALID_ROWS) + getInvalidRowsStatement() : null);
  map.put(MENU_VIEW_VALID_ROWS,isSqlEngine ? getComment(MENU_VIEW_VALID_ROWS) + getValidRowsStatement() : null);
  return map;
}",0.8814117647058823
137742,"/** 
 * get Query For View Rows.
 * @param indicatorDefinition
 * @return
 */
public String getQueryForViewRows(IndicatorDefinition indicatorDefinition){
  String sql=PluginConstant.EMPTY_STRING;
  IndicatorCategory category=IndicatorCategoryHelper.getCategory(indicatorDefinition);
  EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewRowsExpression();
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
  sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING.equals(dataFilterClause) ? PluginConstant.EMPTY_STRING : dbmsLanguage.and() + dataFilterClause);
  String tableName=getFullyQualifiedTableName(this.indicator.getAnalyzedElement());
  sql=sql.replace(GenericSQLHandler.TABLE_NAME,tableName);
  sql=sql.replace(GenericSQLHandler.COLUMN_NAMES,this.indicator.getAnalyzedElement().getName());
  if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
    sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,this.indicator.getRealValue().toString());
  }
 else {
    sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,(String.valueOf(this.indicator.getIntegerValue().intValue())));
  }
  return sql;
}","/** 
 * get Query For View Rows.
 * @param indicatorDefinition
 * @return
 */
public String getQueryForViewRows(IndicatorDefinition indicatorDefinition){
  String sql=PluginConstant.EMPTY_STRING;
  IndicatorCategory category=IndicatorCategoryHelper.getCategory(indicatorDefinition);
  EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewRowsExpression();
  TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
  sql=tdExp.getBody();
  String dataFilterClause=getDataFilterClause();
  if (!dataFilterClause.equals(PluginConstant.EMPTY_STRING)) {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,dbmsLanguage.and() + dataFilterClause);
  }
 else {
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING);
  }
  String tableName=getFullyQualifiedTableName(this.indicator.getAnalyzedElement());
  sql=sql.replace(GenericSQLHandler.TABLE_NAME,tableName);
  sql=sql.replace(GenericSQLHandler.COLUMN_NAMES,this.indicator.getAnalyzedElement().getName());
  if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
    sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,this.indicator.getRealValue().toString());
  }
 else {
    sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,(String.valueOf(this.indicator.getIntegerValue().intValue())));
  }
  return sql;
}",0.8264075067024129
137743,"public GenericSQLHandler replaceUDIQueryToMatch(){
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_WHERE + PluginConstant.SPACE_STRING+ GenericSQLHandler.AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_WHERE + PluginConstant.SPACE_STRING+ AND_WHERE_CLAUSE,AND_WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_ORDER_BY,PluginConstant.SPACE_STRING);
  sqlString=sqlString.replace(""String_Node_Str"" + GenericSQLHandler.UDI_GROUP_BY,PluginConstant.SPACE_STRING);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,AND_WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,""String_Node_Str"" + WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,""String_Node_Str"" + WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"" + WHERE_CLAUSE);
  return this;
}","public GenericSQLHandler replaceUDIQueryToMatch(){
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_WHERE + PluginConstant.SPACE_STRING+ AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_WHERE + PluginConstant.SPACE_STRING+ AND_WHERE_CLAUSE,AND_WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_ORDER_BY,PluginConstant.SPACE_STRING);
  sqlString=sqlString.replace(""String_Node_Str"" + UDI_GROUP_BY,PluginConstant.SPACE_STRING);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,AND_WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,""String_Node_Str"" + WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,""String_Node_Str"" + WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + AND_WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"" + WHERE_CLAUSE,WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",WHERE_CLAUSE);
  sqlString=sqlString.replace(""String_Node_Str"",""String_Node_Str"");
  sqlString=sqlString.trim();
  if (sqlString.endsWith(""String_Node_Str"")) {
    sqlString=sqlString.replace(""String_Node_Str"",PluginConstant.EMPTY_STRING);
  }
  sqlString=sqlString.trim();
  if (sqlString.endsWith(""String_Node_Str"")) {
    sqlString=sqlString.replace(""String_Node_Str"",PluginConstant.EMPTY_STRING);
  }
  sqlString=sqlString.trim();
  return this;
}",0.7951570680628273
137744,"protected String getFreqRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    String sql=PluginConstant.EMPTY_STRING;
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewRowsExpression();
    TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
    sql=tdExp.getBody();
    String dataFilterClause=getDataFilterClause();
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING.equals(dataFilterClause) ? PluginConstant.EMPTY_STRING : dbmsLanguage.and() + dataFilterClause);
    String tableName=getFullyQualifiedTableName(this.indicator.getAnalyzedElement());
    sql=sql.replace(GenericSQLHandler.TABLE_NAME,tableName);
    sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,this.indicator.getAnalyzedElement().getName());
    return sql;
  }
  String clause=PluginConstant.EMPTY_STRING;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getSqlDataType().getJavaDataType();
  if (Java2SqlType.isTextInSQL(javaType)) {
    clause=getInstantiatedClause();
  }
 else   if (Java2SqlType.isDateInSQL(javaType)) {
    if (entity.isLabelNull()) {
      clause=getInstantiatedClause();
    }
 else {
      IndicatorParameters parameters=indicator.getParameters();
      if (parameters != null) {
        DateParameters dateParameters=parameters.getDateParameters();
        if (dateParameters != null) {
          DateGrain dateGrain=dateParameters.getDateAggregationType();
          clause=entity.isLabelNull() ? getInstantiatedClause() : getClauseWithDate(dateGrain,clause);
        }
 else {
          clause=getInstantiatedClause();
        }
      }
 else {
        clause=getInstantiatedClause();
      }
    }
  }
 else   if (Java2SqlType.isNumbericInSQL(javaType)) {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters != null) {
      Domain bins=parameters.getBins();
      if (bins != null) {
        final EList<RangeRestriction> ranges=bins.getRanges();
        for (        RangeRestriction rangeRestriction : ranges) {
          if (entity.getLabel() != null && entity.getLabel().equals(rangeRestriction.getName())) {
            clause=createWhereClause(rangeRestriction);
            break;
          }
        }
      }
 else {
        clause=getInstantiatedClause();
      }
    }
 else {
      clause=getInstantiatedClause();
    }
  }
 else {
    clause=getDefaultQuotedStatement(PluginConstant.EMPTY_STRING);
  }
  return ""String_Node_Str"" + getFullyQualifiedTableName(column) + dbmsLanguage.where()+ inBrackets(clause)+ andDataFilterClause();
}","protected String getFreqRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    return getQueryForUDIndicator(indicatorDefinition);
  }
  String clause=PluginConstant.EMPTY_STRING;
  TdColumn column=(TdColumn)indicator.getAnalyzedElement();
  int javaType=column.getSqlDataType().getJavaDataType();
  if (Java2SqlType.isTextInSQL(javaType)) {
    clause=getInstantiatedClause();
  }
 else   if (Java2SqlType.isDateInSQL(javaType)) {
    if (entity.isLabelNull()) {
      clause=getInstantiatedClause();
    }
 else {
      IndicatorParameters parameters=indicator.getParameters();
      if (parameters != null) {
        DateParameters dateParameters=parameters.getDateParameters();
        if (dateParameters != null) {
          DateGrain dateGrain=dateParameters.getDateAggregationType();
          clause=entity.isLabelNull() ? getInstantiatedClause() : getClauseWithDate(dateGrain,clause);
        }
 else {
          clause=getInstantiatedClause();
        }
      }
 else {
        clause=getInstantiatedClause();
      }
    }
  }
 else   if (Java2SqlType.isNumbericInSQL(javaType)) {
    IndicatorParameters parameters=indicator.getParameters();
    if (parameters != null) {
      Domain bins=parameters.getBins();
      if (bins != null) {
        final EList<RangeRestriction> ranges=bins.getRanges();
        for (        RangeRestriction rangeRestriction : ranges) {
          if (entity.getLabel() != null && entity.getLabel().equals(rangeRestriction.getName())) {
            clause=createWhereClause(rangeRestriction);
            break;
          }
        }
      }
 else {
        clause=getInstantiatedClause();
      }
    }
 else {
      clause=getInstantiatedClause();
    }
  }
 else {
    clause=getDefaultQuotedStatement(PluginConstant.EMPTY_STRING);
  }
  return ""String_Node_Str"" + getFullyQualifiedTableName(column) + dbmsLanguage.where()+ inBrackets(clause)+ andDataFilterClause();
}",0.1608019639934533
137745,"/** 
 * DOC msjian Comment method ""getValidRowsStatement"".
 * @return
 */
public String getValidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidRowsExpression();
    return getReplacedSql(list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + functionReturnValue;
  return getRowsStatement(regexCmp);
}","/** 
 * get the Valid Rows Statement.
 * @return
 */
public String getValidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + functionReturnValue;
  return getRowsStatement(regexCmp);
}",0.9076433121019108
137746,"/** 
 * DOC msjian Comment method ""getInvalidRowsStatement"".
 * @return
 */
public String getInvalidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidRowsExpression();
    return getReplacedSql(list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + functionReturnValue;
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getRowsStatement(pattCondStr);
}","/** 
 * get the Invalid Rows Statement.
 * @return
 */
public String getInvalidRowsStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidRowsExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + functionReturnValue;
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getRowsStatement(pattCondStr);
}",0.9274092615769712
137747,"/** 
 * DOC zshen Comment method ""getValidValuesStatement"".
 * @return SELECT statement for the valid Value of select column
 */
public String getValidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidValuesExpression();
    return getReplacedSql(list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + functionReturnValue;
  return getValuesStatement(columnName,regexCmp);
}","/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the valid Value of select column
 */
public String getValidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewValidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexLike(columnName,regexPatternString) + functionReturnValue;
  return getValuesStatement(columnName,regexCmp);
}",0.9022127052105638
137748,"/** 
 * DOC zshen Comment method ""getValidValuesStatement"".
 * @return SELECT statement for the invalid Value of select column
 */
public String getInvalidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidValuesExpression();
    return getReplacedSql(list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString((PatternMatchingIndicator)this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + functionReturnValue;
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getValuesStatement(columnName,pattCondStr);
}","/** 
 * get the Valid Values Statement.
 * @return SELECT statement for the invalid Value of select column
 */
public String getInvalidValuesStatement(){
  IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewInvalidValuesExpression();
    return getQueryAfterReplaced(indicatorDefinition,list);
  }
  String regexPatternString=dbmsLanguage.getRegexPatternString(this.indicator);
  String regexCmp=dbmsLanguage.regexNotLike(columnName,regexPatternString) + functionReturnValue;
  String nullClause=dbmsLanguage.or() + columnName + dbmsLanguage.isNull();
  String pattCondStr=""String_Node_Str"" + regexCmp + nullClause+ ""String_Node_Str"";
  return getValuesStatement(columnName,pattCondStr);
}",0.934021801491681
137749,"public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  AnalysisType analysisType=this.analysis.getParameters().getAnalysisType();
  boolean isHive=dbmsLanguage instanceof HiveDbmsLanguage;
  if (!isXml() || !isSqlEngine) {
switch (this.indicatorEnum) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case BlankCountIndicatorEnum:
case DefValueCountIndicatorEnum:
case UserDefinedIndicatorEnum:
      String sql=getRowsStatement();
    IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
  if (indicatorDefinition instanceof UDIndicatorDefinition) {
    IndicatorCategory category=IndicatorCategoryHelper.getCategory(indicatorDefinition);
    EList<TdExpression> list=((UDIndicatorDefinition)indicatorDefinition).getViewRowsExpression();
    TdExpression tdExp=DbmsLanguage.getSqlExpression(indicatorDefinition,dbmsLanguage.getDbmsName(),list,dbmsLanguage.getDbVersion());
    sql=tdExp.getBody();
    String dataFilterClause=getDataFilterClause();
    sql=sql.replace(GenericSQLHandler.WHERE_CLAUSE,dbmsLanguage.where() + dataFilterClause);
    sql=sql.replace(GenericSQLHandler.AND_WHERE_CLAUSE,PluginConstant.EMPTY_STRING.equals(dataFilterClause) ? PluginConstant.EMPTY_STRING : dbmsLanguage.and() + dataFilterClause);
    String tableName=getFullyQualifiedTableName(this.indicator.getAnalyzedElement());
    sql=sql.replace(GenericSQLHandler.TABLE_NAME,tableName);
    if (IndicatorCategoryHelper.isUserDefRealValue(category)) {
      sql=sql.replace(GenericSQLHandler.UDI_INDICATOR_VALUE,this.indicator.getRealValue().toString());
    }
  }
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + sql : null);
break;
case UniqueIndicatorEnum:
if (analysisType != AnalysisType.COLUMN_SET) {
if (!isHive) {
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getRowsStatementWithSubQuery() : null);
}
 else if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getValuesStatement(this.columnName) : null);
break;
case DistinctCountIndicatorEnum:
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getDistinctValuesStatement(this.columnName) : null);
break;
case DuplicateCountIndicatorEnum:
if (analysisType != AnalysisType.COLUMN_SET) {
if (!isHive) {
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getRowsStatementWithSubQuery() : null);
}
 else if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getValuesStatement(this.columnName) : null);
break;
default :
}
}
return map;
}","public Map<String,String> getQueryMap(){
  Map<String,String> map=new HashMap<String,String>();
  boolean isSqlEngine=ExecutionLanguage.SQL.equals(this.analysis.getParameters().getExecutionLanguage());
  AnalysisType analysisType=this.analysis.getParameters().getAnalysisType();
  boolean isHive=dbmsLanguage instanceof HiveDbmsLanguage;
  if (!isXml() || !isSqlEngine) {
switch (this.indicatorEnum) {
case RowCountIndicatorEnum:
case NullCountIndicatorEnum:
case BlankCountIndicatorEnum:
case DefValueCountIndicatorEnum:
case UserDefinedIndicatorEnum:
      IndicatorDefinition indicatorDefinition=this.indicator.getIndicatorDefinition();
    String sql=indicatorDefinition instanceof UDIndicatorDefinition ? getQueryForViewRows(indicatorDefinition) : getRowsStatement();
  map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + sql : null);
break;
case UniqueIndicatorEnum:
if (analysisType != AnalysisType.COLUMN_SET) {
if (!isHive) {
  map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getRowsStatementWithSubQuery() : null);
}
 else if (!isSqlEngine) {
  map.put(MENU_VIEW_ROWS,null);
}
}
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getValuesStatement(this.columnName) : null);
break;
case DistinctCountIndicatorEnum:
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getDistinctValuesStatement(this.columnName) : null);
break;
case DuplicateCountIndicatorEnum:
if (analysisType != AnalysisType.COLUMN_SET) {
if (!isHive) {
map.put(MENU_VIEW_ROWS,isSqlEngine ? getComment(MENU_VIEW_ROWS) + getRowsStatementWithSubQuery() : null);
}
 else if (!isSqlEngine) {
map.put(MENU_VIEW_ROWS,null);
}
}
map.put(MENU_VIEW_VALUES,isSqlEngine ? getComment(MENU_VIEW_VALUES) + getValuesStatement(this.columnName) : null);
break;
default :
}
}
return map;
}",0.7238675958188153
137750,"private boolean prepareIndicators(){
  boolean ok=true;
  for (  Indicator indic : allIndicators) {
    if (!indic.prepare()) {
      if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indic.eClass())) {
        javaPatternMessage=((RegexpMatchingIndicatorImpl)indic).getJavaPatternMessage();
      }
      ok=false;
    }
  }
  return ok;
}","private boolean prepareIndicators(){
  boolean ok=true;
  for (  Indicator indic : allIndicators) {
    if (!indic.prepare()) {
      if (IndicatorsPackage.eINSTANCE.getRegexpMatchingIndicator().equals(indic.eClass())) {
        javaPatternMessage=((RegexpMatchingIndicatorImpl)indic).getJavaPatternMessage();
      }
 else       if (UDIHelper.isUDI(indic)) {
        javaPatternMessage=""String_Node_Str"" + indic.getName();
      }
      ok=false;
    }
  }
  return ok;
}",0.8626506024096385
137751,"/** 
 * DOC qiongli Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  UnitTestBuildHelper.mockLocalRepositoryObjectCRUD();
  corePlugin=mock(CorePlugin.class);
  PowerMockito.mockStatic(CorePlugin.class);
  when(CorePlugin.getDefault()).thenReturn(corePlugin);
  ResourceBundle rb2=mock(ResourceBundle.class);
  stub(method(ResourceBundle.class,""String_Node_Str"",String.class)).toReturn(rb2);
  PowerMockito.mockStatic(Messages.class);
  when(Messages.getString(anyString())).thenReturn(""String_Node_Str"");
  PowerMockito.mock(DefaultMessagesImpl.class);
  when(DefaultMessagesImpl.getString(anyString())).thenReturn(""String_Node_Str"").thenReturn(""String_Node_Str"").thenReturn(""String_Node_Str"").thenReturn(""String_Node_Str"");
  dqDeleteAction_real=new DQDeleteAction();
  deleteAction_mock=PowerMockito.spy(dqDeleteAction_real);
  PowerMockito.doReturn(null).when(deleteAction_mock).getActivePage();
  PowerMockito.doNothing().when(deleteAction_mock,""String_Node_Str"");
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  CoreRuntimePlugin coreRuntPlugin=mock(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRuntPlugin);
  IProxyRepositoryFactory proxFactory=mock(IProxyRepositoryFactory.class);
  when(coreRuntPlugin.getProxyRepositoryFactory()).thenReturn(proxFactory);
}","/** 
 * DOC qiongli Comment method ""setUp"".
 * @throws java.lang.Exception
 */
@Before public void setUp() throws Exception {
  UnitTestBuildHelper.mockLocalRepositoryObjectCRUD();
  corePlugin=mock(CorePlugin.class);
  PowerMockito.mockStatic(CorePlugin.class);
  when(CorePlugin.getDefault()).thenReturn(corePlugin);
  ResourceBundle rb2=mock(ResourceBundle.class);
  stub(method(ResourceBundle.class,""String_Node_Str"",String.class)).toReturn(rb2);
  PowerMockito.mockStatic(Messages.class);
  when(Messages.getString(anyString())).thenReturn(""String_Node_Str"");
  PowerMockito.mockStatic(DefaultMessagesImpl.class);
  when(DefaultMessagesImpl.getString(anyString())).thenReturn(""String_Node_Str"").thenReturn(""String_Node_Str"").thenReturn(""String_Node_Str"").thenReturn(""String_Node_Str"");
  dqDeleteAction_real=new DQDeleteAction();
  deleteAction_mock=PowerMockito.spy(dqDeleteAction_real);
  PowerMockito.doReturn(null).when(deleteAction_mock).getActivePage();
  PowerMockito.doNothing().when(deleteAction_mock,""String_Node_Str"");
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  CoreRuntimePlugin coreRuntPlugin=mock(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRuntPlugin);
  IProxyRepositoryFactory proxFactory=mock(IProxyRepositoryFactory.class);
  when(coreRuntPlugin.getProxyRepositoryFactory()).thenReturn(proxFactory);
}",0.9978102189781022
137752,"/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.dqDeleteAction_real#run()}.
 * @throws Exception
 */
@Test public void testRun_2() throws Exception {
  DQRespositoryView dqView=mock(DQRespositoryView.class);
  when(corePlugin.getRepositoryView()).thenReturn(dqView);
  CommonViewer commonView=mock(CommonViewer.class);
  List<RepositoryNode> seleLs=new ArrayList<RepositoryNode>();
  RepositoryNode nodeConn=mock(RepositoryNode.class);
  RepositoryNode nodeAna=mock(RepositoryNode.class);
  IRepositoryObject objectConn=mock(IRepositoryObject.class);
  Property propConn=mock(Property.class);
  ConnectionItem itemConn=mock(ConnectionItem.class);
  ItemState stateConn=mock(ItemState.class);
  when(propConn.getItem()).thenReturn(itemConn);
  when(nodeConn.getObject()).thenReturn(objectConn);
  when(objectConn.getProperty()).thenReturn(propConn);
  when(itemConn.getState()).thenReturn(stateConn);
  when(stateConn.isDeleted()).thenReturn(true);
  IRepositoryObject objectAna=mock(IRepositoryObject.class);
  Property propAna=mock(Property.class);
  Item itemAna=mock(Item.class);
  ItemState stateAna=mock(ItemState.class);
  when(propAna.getItem()).thenReturn(itemAna);
  when(nodeAna.getObject()).thenReturn(objectAna);
  when(objectAna.getProperty()).thenReturn(propAna);
  when(itemAna.getState()).thenReturn(stateAna);
  when(stateAna.isDeleted()).thenReturn(true);
  ModelElement modAna=mock(ModelElement.class);
  ModelElement modConn=mock(ModelElement.class);
  List<ModelElement> dependenceLs=new ArrayList<ModelElement>();
  dependenceLs.add(modAna);
  RepositoryNode nodeOther=mock(RepositoryNode.class);
  IRepositoryObject objectOther=mock(IRepositoryObject.class);
  Property propOther=mock(Property.class);
  ConnectionItem itemOther=mock(ConnectionItem.class);
  ItemState stateOther=mock(ItemState.class);
  when(propOther.getItem()).thenReturn(itemOther);
  when(nodeOther.getObject()).thenReturn(objectOther);
  when(objectOther.getProperty()).thenReturn(propOther);
  when(itemOther.getState()).thenReturn(stateOther);
  when(stateOther.isDeleted()).thenReturn(true);
  seleLs.add(nodeAna);
  seleLs.add(nodeConn);
  seleLs.add(nodeOther);
  ISelection selecetion=new StructuredSelection(seleLs);
  PowerMockito.mockStatic(DeleteModelElementConfirmDialog.class);
  when(DeleteModelElementConfirmDialog.showDialog(null,modConn,dependenceLs.toArray(new ModelElement[dependenceLs.size()]),DefaultMessagesImpl.getString(""String_Node_Str"",""String_Node_Str""),true)).thenReturn(true);
  PowerMockito.mockStatic(RepositoryNodeHelper.class);
  RecycleBinRepNode recyBinNode=mock(RecycleBinRepNode.class);
  when(RepositoryNodeHelper.getRecycleBinRepNode()).thenReturn(recyBinNode);
  when(RepositoryNodeHelper.getResourceModelElement(nodeAna)).thenReturn(modAna);
  when(RepositoryNodeHelper.recursiveFind(modAna)).thenReturn(nodeAna);
  when(RepositoryNodeHelper.recursiveFindRecycleBin(modAna)).thenReturn(nodeAna);
  when(RepositoryNodeHelper.getModelElementFromRepositoryNode(nodeConn)).thenReturn(modConn);
  when(RepositoryNodeHelper.isStateDeleted(nodeConn)).thenReturn(true);
  when(RepositoryNodeHelper.isStateDeleted(nodeAna)).thenReturn(true);
  when(RepositoryNodeHelper.isStateDeleted(nodeOther)).thenReturn(true);
  when(RepositoryNodeHelper.hasDependencyClients(nodeConn)).thenReturn(true);
  PowerMockito.mockStatic(EObjectHelper.class);
  when(EObjectHelper.getDependencyClients(nodeConn)).thenReturn(dependenceLs);
  PowerMockito.mockStatic(PropertyHelper.class);
  when(PropertyHelper.getPropertyFile(modAna)).thenReturn(null);
  when(dqView.getCommonViewer()).thenReturn(commonView);
  when(commonView.getSelection()).thenReturn(selecetion);
  assertNotNull(dqDeleteAction_real.getSelection());
  deleteAction_mock.run();
}","/** 
 * Test method for   {@link org.talend.dataprofiler.core.ui.action.actions.dqDeleteAction_real#run()}.
 * @throws Exception
 */
@Test public void testRun_2() throws Exception {
  DQRespositoryView dqView=mock(DQRespositoryView.class);
  when(corePlugin.getRepositoryView()).thenReturn(dqView);
  CommonViewer commonView=mock(CommonViewer.class);
  List<RepositoryNode> seleLs=new ArrayList<RepositoryNode>();
  RepositoryNode nodeConn=mock(RepositoryNode.class);
  RepositoryNode nodeAna=mock(RepositoryNode.class);
  IRepositoryObject objectConn=mock(IRepositoryObject.class);
  Property propConn=mock(Property.class);
  ConnectionItem itemConn=mock(ConnectionItem.class);
  ItemState stateConn=mock(ItemState.class);
  when(propConn.getItem()).thenReturn(itemConn);
  when(nodeConn.getObject()).thenReturn(objectConn);
  when(objectConn.getProperty()).thenReturn(propConn);
  when(itemConn.getState()).thenReturn(stateConn);
  when(stateConn.isDeleted()).thenReturn(true);
  IRepositoryObject objectAna=mock(IRepositoryObject.class);
  Property propAna=mock(Property.class);
  Item itemAna=mock(Item.class);
  ItemState stateAna=mock(ItemState.class);
  when(propAna.getItem()).thenReturn(itemAna);
  when(nodeAna.getObject()).thenReturn(objectAna);
  when(objectAna.getProperty()).thenReturn(propAna);
  when(itemAna.getState()).thenReturn(stateAna);
  when(stateAna.isDeleted()).thenReturn(true);
  ModelElement modAna=mock(ModelElement.class);
  ModelElement modConn=mock(ModelElement.class);
  List<ModelElement> dependenceLs=new ArrayList<ModelElement>();
  dependenceLs.add(modAna);
  RepositoryNode nodeOther=mock(RepositoryNode.class);
  IRepositoryObject objectOther=mock(IRepositoryObject.class);
  Property propOther=mock(Property.class);
  ConnectionItem itemOther=mock(ConnectionItem.class);
  ItemState stateOther=mock(ItemState.class);
  when(propOther.getItem()).thenReturn(itemOther);
  when(nodeOther.getObject()).thenReturn(objectOther);
  when(objectOther.getProperty()).thenReturn(propOther);
  when(itemOther.getState()).thenReturn(stateOther);
  when(stateOther.isDeleted()).thenReturn(true);
  seleLs.add(nodeAna);
  seleLs.add(nodeConn);
  seleLs.add(nodeOther);
  ISelection selecetion=new StructuredSelection(seleLs);
  PowerMockito.mockStatic(DeleteModelElementConfirmDialog.class);
  when(DeleteModelElementConfirmDialog.showDialog(null,modConn,dependenceLs.toArray(new ModelElement[dependenceLs.size()]),DefaultMessagesImpl.getString(""String_Node_Str"",""String_Node_Str""),true)).thenReturn(true);
  PowerMockito.mockStatic(RepositoryNodeHelper.class);
  RecycleBinRepNode recyBinNode=mock(RecycleBinRepNode.class);
  when(RepositoryNodeHelper.getRecycleBinRepNode()).thenReturn(recyBinNode);
  when(RepositoryNodeHelper.getResourceModelElement(nodeAna)).thenReturn(modAna);
  when(RepositoryNodeHelper.recursiveFind(modAna)).thenReturn(nodeAna);
  when(RepositoryNodeHelper.recursiveFindRecycleBin(modAna)).thenReturn(nodeAna);
  when(RepositoryNodeHelper.getModelElementFromRepositoryNode(nodeConn)).thenReturn(modConn);
  when(RepositoryNodeHelper.isStateDeleted(nodeConn)).thenReturn(true);
  when(RepositoryNodeHelper.isStateDeleted(nodeAna)).thenReturn(true);
  when(RepositoryNodeHelper.isStateDeleted(nodeOther)).thenReturn(true);
  when(RepositoryNodeHelper.hasDependencyClients(nodeConn)).thenReturn(true);
  PowerMockito.mockStatic(EObjectHelper.class);
  when(EObjectHelper.getDependencyClients(nodeConn)).thenReturn(dependenceLs);
  PowerMockito.mockStatic(PropertyHelper.class);
  when(PropertyHelper.getPropertyFile(modAna)).thenReturn(null);
  when(dqView.getCommonViewer()).thenReturn(commonView);
  when(commonView.getSelection()).thenReturn(selecetion);
  assertNotNull(dqDeleteAction_real.getSelection());
  PowerMockito.mockStatic(MessageDialog.class);
  stub(method(MessageDialog.class,""String_Node_Str""));
  deleteAction_mock.run();
}",0.9865902877229528
137753,"public boolean isUseMailLoginCheck(){
  return useMainLoginCheck;
}","@Override public boolean isUseMailLoginCheck(){
  return useMainLoginCheck;
}",0.9305555555555556
137754,"public String getAdditionalTitle(){
  return title;
}","@Override public String getAdditionalTitle(){
  return title;
}",0.913793103448276
137755,"public void fillMenuBar(IMenuManager menuBar){
  if (helper != null) {
    helper.fillMenuBar(menuBar);
  }
}","@Override public void fillMenuBar(IMenuManager menuBar){
  if (helper != null) {
    helper.fillMenuBar(menuBar);
  }
}",0.956140350877193
137756,"public String[] getAvailableComponents(){
  return null;
}","@Override public String[] getAvailableComponents(){
  return null;
}",0.9206349206349206
137757,"public String getInitialWindowPerspectiveId(){
  return ""String_Node_Str"";
}","@Override public String getInitialWindowPerspectiveId(){
  return ""String_Node_Str"";
}",0.9382716049382716
137758,"public boolean isAllowDebugMode(){
  return true;
}","@Override public boolean isAllowDebugMode(){
  return true;
}",0.9107142857142856
137759,"public void fillCoolBar(ICoolBarManager coolBar){
  if (helper != null) {
    helper.fillCoolBar(coolBar);
  }
}","@Override public void fillCoolBar(ICoolBarManager coolBar){
  if (helper != null) {
    helper.fillCoolBar(coolBar);
  }
}",0.9572649572649572
137760,"public void setUseProductRegistration(boolean useProductRegistration){
  this.useProductRegistration=useProductRegistration;
}","@Override public void setUseProductRegistration(boolean useProductRegistration){
  this.useProductRegistration=useProductRegistration;
}",0.9618320610687024
137761,"public void setUseMailLoginCheck(boolean useMainLoginCheck){
  this.useMainLoginCheck=useMainLoginCheck;
}","@Override public void setUseMailLoginCheck(boolean useMainLoginCheck){
  this.useMainLoginCheck=useMainLoginCheck;
}",0.954954954954955
137762,"public IActionBarHelper getHelper(){
  return this.helper;
}","@Override public IActionBarHelper getHelper(){
  return this.helper;
}",0.9230769230769232
137763,"public boolean isUseDemoProjects(){
  return true;
}","@Override public boolean isUseDemoProjects(){
  return true;
}",0.912280701754386
137764,"public void setHelper(IActionBarHelper helper){
  this.helper=helper;
}","@Override public void setHelper(IActionBarHelper helper){
  this.helper=helper;
}",0.9342105263157896
137765,"public String[] getAvailableLanguages(){
  String[] languages;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICorePerlService.class)) {
    languages=new String[]{ECodeLanguage.JAVA.getName(),ECodeLanguage.PERL.getName()};
  }
 else {
    languages=new String[]{ECodeLanguage.JAVA.getName()};
  }
  return languages;
}","@Override public String[] getAvailableLanguages(){
  return new String[]{ECodeLanguage.JAVA.getName()};
}",0.4292237442922374
137766,"public void initPerspective(IPageLayout layout){
  String componentSettingViewerId=""String_Node_Str"";
  String navigatorId=""String_Node_Str"";
  String outlineId=""String_Node_Str"";
  String codeId=""String_Node_Str"";
  String repositoryId=IRepositoryView.VIEW_ID;
  String runProcessViewId=""String_Node_Str"";
  String problemsViewId=""String_Node_Str"";
  String modulesViewId=""String_Node_Str"";
  String schedulerViewId=""String_Node_Str"";
  String contextsViewId=""String_Node_Str"";
  String gefPaletteViewId=""String_Node_Str"";
  String jobSettingsViewId=""String_Node_Str"";
  String jobHierarchyViewId=""String_Node_Str"";
  IFolderLayout leftTopLayout=layout.createFolder(""String_Node_Str"",IPageLayout.LEFT,new Float(0.3),IPageLayout.ID_EDITOR_AREA);
  leftTopLayout.addView(repositoryId);
  leftTopLayout.addView(navigatorId);
  IFolderLayout leftBottomLayout=layout.createFolder(""String_Node_Str"",IPageLayout.BOTTOM,new Float(0.6),repositoryId);
  leftBottomLayout.addView(outlineId);
  leftBottomLayout.addView(codeId);
  IFolderLayout rightTopLayout=layout.createFolder(""String_Node_Str"",IPageLayout.RIGHT,new Float(0.8),IPageLayout.ID_EDITOR_AREA);
  rightTopLayout.addView(gefPaletteViewId);
  IFolderLayout bottomLayout=layout.createFolder(""String_Node_Str"",IPageLayout.BOTTOM,new Float(0.6),IPageLayout.ID_EDITOR_AREA);
  bottomLayout.addView(jobSettingsViewId);
  bottomLayout.addView(contextsViewId);
  bottomLayout.addView(componentSettingViewerId);
  bottomLayout.addView(runProcessViewId);
  bottomLayout.addView(problemsViewId);
  bottomLayout.addView(modulesViewId);
  bottomLayout.addView(schedulerViewId);
  bottomLayout.addView(jobHierarchyViewId);
  bottomLayout.addPlaceholder(""String_Node_Str"");
}","@Override public void initPerspective(IPageLayout layout){
  String componentSettingViewerId=""String_Node_Str"";
  String navigatorId=""String_Node_Str"";
  String outlineId=""String_Node_Str"";
  String codeId=""String_Node_Str"";
  String repositoryId=IRepositoryView.VIEW_ID;
  String runProcessViewId=""String_Node_Str"";
  String problemsViewId=""String_Node_Str"";
  String modulesViewId=""String_Node_Str"";
  String schedulerViewId=""String_Node_Str"";
  String contextsViewId=""String_Node_Str"";
  String gefPaletteViewId=""String_Node_Str"";
  String jobSettingsViewId=""String_Node_Str"";
  String jobHierarchyViewId=""String_Node_Str"";
  IFolderLayout leftTopLayout=layout.createFolder(""String_Node_Str"",IPageLayout.LEFT,new Float(0.3),IPageLayout.ID_EDITOR_AREA);
  leftTopLayout.addView(repositoryId);
  leftTopLayout.addView(navigatorId);
  IFolderLayout leftBottomLayout=layout.createFolder(""String_Node_Str"",IPageLayout.BOTTOM,new Float(0.6),repositoryId);
  leftBottomLayout.addView(outlineId);
  leftBottomLayout.addView(codeId);
  IFolderLayout rightTopLayout=layout.createFolder(""String_Node_Str"",IPageLayout.RIGHT,new Float(0.8),IPageLayout.ID_EDITOR_AREA);
  rightTopLayout.addView(gefPaletteViewId);
  IFolderLayout bottomLayout=layout.createFolder(""String_Node_Str"",IPageLayout.BOTTOM,new Float(0.6),IPageLayout.ID_EDITOR_AREA);
  bottomLayout.addView(jobSettingsViewId);
  bottomLayout.addView(contextsViewId);
  bottomLayout.addView(componentSettingViewerId);
  bottomLayout.addView(runProcessViewId);
  bottomLayout.addView(problemsViewId);
  bottomLayout.addView(modulesViewId);
  bottomLayout.addView(schedulerViewId);
  bottomLayout.addView(jobHierarchyViewId);
  bottomLayout.addPlaceholder(""String_Node_Str"");
}",0.9970896391152504
137767,"public Map<String,Object> getJobEditorSettings(){
  return new HashMap<String,Object>();
}","@Override public Map<String,Object> getJobEditorSettings(){
  return new HashMap<String,Object>();
}",0.9473684210526316
137768,"public boolean isOnlyRemoteConnection(){
  return false;
}","@Override public boolean isOnlyRemoteConnection(){
  return false;
}",0.9206349206349206
137769,"public List<IRepositoryNode> getHiddenRepositoryCategory(IRepositoryNode parent,String type){
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>();
  return nodes;
}","@Override public List<IRepositoryNode> getHiddenRepositoryCategory(IRepositoryNode parent,String type){
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>();
  return nodes;
}",0.9722222222222222
137770,"public boolean isUseProductRegistration(){
  return useProductRegistration;
}","@Override public boolean isUseProductRegistration(){
  return useProductRegistration;
}",0.9390243902439024
137771,"public void setAdditionalTitle(String title){
  this.title=title;
}","@Override public void setAdditionalTitle(String title){
  this.title=title;
}",0.9305555555555556
137772,"@Override public void run(){
  if (jrxmlNode != null) {
    if (WorkspaceResourceHelper.sourceFileHasBeenOpened(jrxmlNode)) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",jrxmlNode.getLabel()));
      return;
    }
  }
  RenameDialog dialog=new RenameDialog(Display.getDefault().getActiveShell());
  existNames=new ArrayList<String>();
  getExistNames(parentNode,existNames);
  if (dialog.open() == RenameDialog.OK) {
    CorePlugin.getDefault().closeEditorIfOpened(jrxmlItem);
    try {
      String filenameBeforeRename=""String_Node_Str"" + RepositoryNodeHelper.getFileNameOfTheNode(jrxmlNode);
      IPath path=RepositoryNodeHelper.getPath(jrxmlNode);
      renameJrxmlFile();
      String filenameAfterRename=""String_Node_Str"" + RepositoryNodeHelper.getFileNameOfTheNode(jrxmlNode);
      ReturnCode returnCode=RepNodeUtils.updateJrxmlRelatedReport(path.append(filenameBeforeRename),path.append(filenameAfterRename));
      if (!returnCode.isOk()) {
        MessageUI.openWarning(returnCode.getMessage());
      }
      CorePlugin.getDefault().refreshDQView(parentNode);
    }
 catch (    PersistenceException e) {
      log.error(e,e);
    }
  }
}","@Override public void run(){
  if (jrxmlNode != null) {
    if (WorkspaceResourceHelper.sourceFileHasBeenOpened(jrxmlNode)) {
      MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str"",jrxmlNode.getLabel()));
      return;
    }
  }
  RenameDialog dialog=new RenameDialog(Display.getDefault().getActiveShell());
  existNames=new ArrayList<String>();
  getExistNames(parentNode,existNames);
  if (dialog.open() == RenameDialog.OK) {
    CorePlugin.getDefault().closeEditorIfOpened(jrxmlItem);
    try {
      String filenameBeforeRename=File.separator + RepositoryNodeHelper.getFileNameOfTheNode(jrxmlNode);
      IPath path=RepositoryNodeHelper.getPath(jrxmlNode);
      renameJrxmlFile();
      String filenameAfterRename=File.separator + RepositoryNodeHelper.getFileNameOfTheNode(jrxmlNode);
      ReturnCode returnCode=RepNodeUtils.updateJrxmlRelatedReport(path.append(filenameBeforeRename),path.append(filenameAfterRename));
      if (!returnCode.isOk()) {
        MessageUI.openWarning(returnCode.getMessage());
      }
      CorePlugin.getDefault().refreshDQView(parentNode);
    }
 catch (    PersistenceException e) {
      log.error(e,e);
    }
  }
}",0.9737065309584394
137773,"/** 
 * when the report's user defined template(Jrxml file) changed its name, or be moved, the path info in the report's anaMap: jrxml source should also be updated. This method is used to update the related reports when the jrxml name or path is changed.
 * @param jrxmlFileNames : the whole path with whole name of the jrxml, e.g./TDQ_Libraries/JRXMLTemplate/columnset/column_set_basic_0.1.jrxml
 * @param jrxmlFileNamesAfterMove
 * @return  ReturnCode.ok if suceed; ko, if any exception.
 */
public static ReturnCode updateJrxmlRelatedReport(List<String> jrxmlFileNames,List<String> jrxmlFileNamesAfterMove){
  ReturnCode rc=new ReturnCode();
  if (jrxmlFileNames.size() == 0 || jrxmlFileNamesAfterMove.size() < jrxmlFileNames.size()) {
    rc.setOk(Boolean.FALSE);
    rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
    return rc;
  }
  Project project=ProjectManager.getInstance().getCurrentProject();
  IRepositoryNode ReportRootFolderNode=RepositoryNodeHelper.getDataProfilingFolderNode(EResourceConstant.REPORTS);
  List<ReportRepNode> repNodes=RepositoryNodeHelper.getReportRepNodes(ReportRootFolderNode,true,true);
  for (  ReportRepNode report : repNodes) {
    boolean isUpdated=false;
    EList<AnalysisMap> analysisMap=((TdReport)report.getReport()).getAnalysisMap();
    for (    AnalysisMap anaMap : analysisMap) {
      for (int i=0; i < jrxmlFileNames.size(); i++) {
        String oldPath=jrxmlFileNames.get(i);
        if (isUsedByJrxml(new Path(oldPath),anaMap)) {
          EventManager.getInstance().publish(report,EventEnum.DQ_JRXML_RENAME,jrxmlFileNamesAfterMove.get(i));
          anaMap.setJrxmlSource(jrxmlFileNamesAfterMove.get(i));
          isUpdated=true;
        }
      }
    }
    if (isUpdated) {
      try {
        ProxyRepositoryFactory.getInstance().save(project,report.getObject().getProperty().getItem());
      }
 catch (      PersistenceException e) {
        rc.setOk(Boolean.FALSE);
        rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str"",report.getLabel()));
      }
    }
  }
  return rc;
}","/** 
 * when the report's user defined template(Jrxml file) changed its name, or be moved, the path info in the report's anaMap: jrxml source should also be updated. This method is used to update the related reports when the jrxml name or path is changed.
 * @param jrxmlFileNames : the whole path with whole name of the jrxml, e.g./TDQ_Libraries/JRXMLTemplate/columnset/column_set_basic_0.1.jrxml
 * @param jrxmlFileNamesAfterMove
 * @return  ReturnCode.ok if suceed; ko, if any exception.
 */
public static ReturnCode updateJrxmlRelatedReport(List<String> jrxmlFileNames,List<String> jrxmlFileNamesAfterMove){
  ReturnCode rc=new ReturnCode();
  if (jrxmlFileNames.size() == 0 || jrxmlFileNamesAfterMove.size() < jrxmlFileNames.size()) {
    rc.setOk(Boolean.FALSE);
    rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str""));
    return rc;
  }
  Project project=ProjectManager.getInstance().getCurrentProject();
  IRepositoryNode ReportRootFolderNode=RepositoryNodeHelper.getDataProfilingFolderNode(EResourceConstant.REPORTS);
  List<ReportRepNode> repNodes=RepositoryNodeHelper.getReportRepNodes(ReportRootFolderNode,true,true);
  for (  ReportRepNode report : repNodes) {
    boolean isUpdated=false;
    EList<AnalysisMap> analysisMap=((TdReport)report.getReport()).getAnalysisMap();
    for (    AnalysisMap anaMap : analysisMap) {
      for (int i=0; i < jrxmlFileNames.size(); i++) {
        String oldPath=jrxmlFileNames.get(i);
        if (isUsedByJrxml(new Path(oldPath),anaMap)) {
          String before=anaMap.getJrxmlSource().substring(0,anaMap.getJrxmlSource().lastIndexOf(""String_Node_Str"" + File.separator) + 3);
          EventManager.getInstance().publish(report,EventEnum.DQ_JRXML_RENAME,before + jrxmlFileNamesAfterMove.get(i));
          anaMap.setJrxmlSource(before + jrxmlFileNamesAfterMove.get(i));
          isUpdated=true;
        }
      }
    }
    if (isUpdated) {
      try {
        ProxyRepositoryFactory.getInstance().save(project,report.getObject().getProperty().getItem());
      }
 catch (      PersistenceException e) {
        rc.setOk(Boolean.FALSE);
        rc.setMessage(DefaultMessagesImpl.getString(""String_Node_Str"",report.getLabel()));
      }
    }
  }
  return rc;
}",0.9636871508379888
137774,"/** 
 * check if the anaMap comtains the Jrxml or not, by compare the jrxml's path with anaMap's jrxml source(when user mode)
 * @param path contain the file name like:/TDQ_Libraries/JRXMLTemplate/column/column_basic_0.1.jrxml
 * @param anaMap
 * @return true :if the anaMap contains the path.
 */
private static boolean isUsedByJrxml(IPath path,AnalysisMap anaMap){
  ReportType reportType=ReportHelper.ReportType.getReportType(anaMap.getAnalysis(),anaMap.getReportType());
  if (ReportHelper.ReportType.USER_MADE.equals(reportType)) {
    String jrxmlPath=anaMap.getJrxmlSource();
    String oldPath=path.removeFirstSegments(2).toString();
    if (jrxmlPath.contains(oldPath)) {
      return true;
    }
  }
  return false;
}","/** 
 * check if the anaMap comtains the Jrxml or not, by compare the jrxml's path with anaMap's jrxml source(when user mode)
 * @param path contain the file name like:/TDQ_Libraries/JRXMLTemplate/column/column_basic_0.1.jrxml
 * @param anaMap
 * @return true :if the anaMap contains the path.
 */
private static boolean isUsedByJrxml(IPath path,AnalysisMap anaMap){
  ReportType reportType=ReportHelper.ReportType.getReportType(anaMap.getAnalysis(),anaMap.getReportType());
  if (ReportHelper.ReportType.USER_MADE.equals(reportType)) {
    String jrxmlPath=anaMap.getJrxmlSource();
    if (jrxmlPath.contains(path.toString())) {
      return true;
    }
  }
  return false;
}",0.8610121168923734
137775,"/** 
 * get the full jrxml name with path before move/rename its parent folder.
 * @param oldPath: the path before rename
 * @param jrxmlFileRepNodes the related reports list with name
 * @return the full jrxml new names with path
 */
public static List<String> getListOfJrxmlNameWithPath(IPath path,List<JrxmlTempleteRepNode> jrxmlFileRepNodes){
  List<String> jrxmlFileNames=new ArrayList<String>();
  IPath basePath=ResourceManager.getRootProject().getLocation().removeFirstSegments(1);
  for (  JrxmlTempleteRepNode jrxml : jrxmlFileRepNodes) {
    IPath parentPath=RepositoryNodeHelper.getPath(jrxml.getParent());
    IPath makeRelativeTo=null;
    if (path.equals(parentPath)) {
      makeRelativeTo=path.append(""String_Node_Str"").append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml));
      makeRelativeTo=makeRelativeTo.makeRelativeTo(basePath);
    }
 else {
      parentPath=parentPath.append(""String_Node_Str"").append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml));
      makeRelativeTo=parentPath.makeRelativeTo(basePath);
    }
    jrxmlFileNames.add(makeRelativeTo.toOSString());
  }
  return jrxmlFileNames;
}","/** 
 * get the full jrxml name with path before move/rename its parent folder.
 * @param oldPath: the path before rename
 * @param jrxmlFileRepNodes the related reports list with name
 * @return the full jrxml new names with path
 */
public static List<String> getListOfJrxmlNameWithPath(IPath path,List<JrxmlTempleteRepNode> jrxmlFileRepNodes){
  List<String> jrxmlFileNames=new ArrayList<String>();
  IPath basePath=ResourceManager.getRootProject().getLocation().removeFirstSegments(1);
  for (  JrxmlTempleteRepNode jrxml : jrxmlFileRepNodes) {
    IPath parentPath=RepositoryNodeHelper.getPath(jrxml.getParent());
    IPath makeRelativeTo=null;
    if (path.equals(parentPath)) {
      makeRelativeTo=path.append(File.separator).append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml));
    }
 else {
      makeRelativeTo=parentPath.append(File.separator).append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml));
    }
    jrxmlFileNames.add(makeRelativeTo.toOSString());
  }
  return jrxmlFileNames;
}",0.8868101028999065
137776,"/** 
 * Used for replace only the renamed folder name, the path of the parent& the path of the sub folder should remain.
 * @param oldPath: the path before rename
 * @param newPath: the new foler name
 * @param jrxmlFileRepNodes the related reports list with name
 * @return the full jrxml new names after folder renamed
 */
public static List<String> getListOfJrxmlNewNameWithPath(IPath oldPath,IPath newPath,List<JrxmlTempleteRepNode> jrxmlFileRepNodes){
  IPath basePath=ResourceManager.getRootProject().getLocation().removeFirstSegments(1);
  List<String> jrxmlFileNames=new ArrayList<String>();
  for (  JrxmlTempleteRepNode jrxml : jrxmlFileRepNodes) {
    IPath parentPath=RepositoryNodeHelper.getPath(jrxml.getParent());
    if (oldPath.equals(parentPath)) {
      jrxmlFileNames.add(newPath.append(""String_Node_Str"").append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml)).makeRelativeTo(basePath).toOSString());
    }
 else {
      IPath replacedPath=new Path(""String_Node_Str"");
      for (int i=0; i < parentPath.segmentCount(); i++) {
        if (i < newPath.segmentCount() && !newPath.segment(i).equals(parentPath.segment(i))) {
          replacedPath=replacedPath.append(newPath.segment(i)).append(""String_Node_Str"");
        }
 else {
          replacedPath=replacedPath.append(parentPath.segment(i)).append(""String_Node_Str"");
        }
      }
      jrxmlFileNames.add(replacedPath.append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml)).makeRelativeTo(basePath).toOSString());
    }
  }
  return jrxmlFileNames;
}","/** 
 * Used for replace only the renamed folder name, the path of the parent& the path of the sub folder should remain.
 * @param oldPath: the path before rename
 * @param newPath: the new foler name
 * @param jrxmlFileRepNodes the related reports list with name
 * @return the full jrxml new names after folder renamed
 */
public static List<String> getListOfJrxmlNewNameWithPath(IPath oldPath,IPath newPath,List<JrxmlTempleteRepNode> jrxmlFileRepNodes){
  IPath basePath=ResourceManager.getRootProject().getLocation().removeFirstSegments(1);
  List<String> jrxmlFileNames=new ArrayList<String>();
  for (  JrxmlTempleteRepNode jrxml : jrxmlFileRepNodes) {
    IPath parentPath=RepositoryNodeHelper.getPath(jrxml.getParent());
    if (oldPath.equals(parentPath)) {
      jrxmlFileNames.add(newPath.append(File.separator).append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml)).toOSString());
    }
 else {
      IPath replacedPath=new Path(""String_Node_Str"");
      for (int i=0; i < parentPath.segmentCount(); i++) {
        if (i < newPath.segmentCount() && !newPath.segment(i).equals(parentPath.segment(i))) {
          replacedPath=replacedPath.append(newPath.segment(i)).append(File.separator);
        }
 else {
          replacedPath=replacedPath.append(parentPath.segment(i)).append(File.separator);
        }
      }
      jrxmlFileNames.add(replacedPath.append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml)).toOSString());
    }
  }
  return jrxmlFileNames;
}",0.952475905616484
137777,"/** 
 * move Folder Node.
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
private void moveFolderRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  IPath oldPath=null;
  List<String> jrxmlFileNames=null;
  List<JrxmlTempleteRepNode> jrxmlFileRepNodes=null;
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    oldPath=RepositoryNodeHelper.getPath(sourceNode);
    jrxmlFileRepNodes=RepositoryNodeHelper.getJrxmlFileRepNodes(sourceNode,true);
    jrxmlFileNames=RepNodeUtils.getListOfJrxmlNameWithPath(oldPath,jrxmlFileRepNodes);
  }
  if (!canMoveNode(sourceNode,targetNode)) {
    return;
  }
  moveFolder(sourceNode,targetNode);
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    IPath newPath=RepositoryNodeHelper.getPath(targetNode);
    oldPath.makeRelativeTo(newPath);
    newPath.makeRelativeTo(oldPath);
    List<String> jrxmlFileNamesAfterMove=new ArrayList<String>();
    IPath basePath=ResourceManager.getRootProject().getLocation().removeFirstSegments(1);
    for (    JrxmlTempleteRepNode jrxml : jrxmlFileRepNodes) {
      IPath relativeTo=RepositoryNodeHelper.getPath(jrxml.getParent()).makeRelativeTo(oldPath);
      IPath tempPath=newPath.append(""String_Node_Str"").append(sourceNode.getLabel()).append(""String_Node_Str"");
      if (relativeTo.segmentCount() > 0) {
        tempPath=tempPath.append(relativeTo).append(""String_Node_Str"");
      }
      jrxmlFileNamesAfterMove.add(tempPath.append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml)).makeRelativeTo(basePath).toOSString());
    }
    ReturnCode returnCode=RepNodeUtils.updateJrxmlRelatedReport(jrxmlFileNames,jrxmlFileNamesAfterMove);
    if (!returnCode.isOk()) {
      MessageUI.openWarning(returnCode.getMessage());
    }
  }
}","/** 
 * move Folder Node.
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
private void moveFolderRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  IPath oldPath=null;
  List<String> jrxmlFileNames=null;
  List<JrxmlTempleteRepNode> jrxmlFileRepNodes=null;
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    oldPath=RepositoryNodeHelper.getPath(sourceNode);
    jrxmlFileRepNodes=RepositoryNodeHelper.getJrxmlFileRepNodes(sourceNode,true);
    jrxmlFileNames=RepNodeUtils.getListOfJrxmlNameWithPath(oldPath,jrxmlFileRepNodes);
  }
  if (!canMoveNode(sourceNode,targetNode)) {
    return;
  }
  moveFolder(sourceNode,targetNode);
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    IPath newPath=RepositoryNodeHelper.getPath(targetNode);
    List<String> jrxmlFileNamesAfterMove=new ArrayList<String>();
    IPath basePath=ResourceManager.getRootProject().getLocation().removeFirstSegments(1);
    for (    JrxmlTempleteRepNode jrxml : jrxmlFileRepNodes) {
      IPath relativeTo=RepositoryNodeHelper.getPath(jrxml.getParent()).makeRelativeTo(oldPath);
      IPath tempPath=newPath.append(File.separator).append(sourceNode.getLabel()).append(File.separator);
      if (relativeTo.segmentCount() > 0) {
        tempPath=tempPath.append(relativeTo).append(File.separator);
      }
      jrxmlFileNamesAfterMove.add(tempPath.append(RepositoryNodeHelper.getFileNameOfTheNode(jrxml)).toOSString());
    }
    ReturnCode returnCode=RepNodeUtils.updateJrxmlRelatedReport(jrxmlFileNames,jrxmlFileNamesAfterMove);
    if (!returnCode.isOk()) {
      MessageUI.openWarning(returnCode.getMessage());
    }
  }
}",0.9448275862068966
137778,"/** 
 * move Jrxml File. MOD yyin 20130123 TDQ-5392
 * @param sourceNode
 * @param targetNode
 * @param makeRelativeTo
 * @throws PersistenceException
 */
private void moveJrxmlFileRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode,IPath makeRelativeTo) throws PersistenceException {
  String filename=""String_Node_Str"" + RepositoryNodeHelper.getFileNameOfTheNode(sourceNode);
  IPath oldPath=RepositoryNodeHelper.getPath(sourceNode).append(filename);
  this.moveObject(sourceNode,targetNode,makeRelativeTo);
  ReturnCode returnCode=RepNodeUtils.updateJrxmlRelatedReport(oldPath,RepositoryNodeHelper.getPath(targetNode).append(""String_Node_Str"").append(filename));
  if (!returnCode.isOk()) {
    MessageUI.openWarning(returnCode.getMessage());
  }
}","/** 
 * move Jrxml File. MOD yyin 20130123 TDQ-5392
 * @param sourceNode
 * @param targetNode
 * @param makeRelativeTo
 * @throws PersistenceException
 */
private void moveJrxmlFileRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode,IPath makeRelativeTo) throws PersistenceException {
  String filename=File.separator + RepositoryNodeHelper.getFileNameOfTheNode(sourceNode);
  IPath oldPath=RepositoryNodeHelper.getPath(sourceNode).append(filename);
  this.moveObject(sourceNode,targetNode,makeRelativeTo);
  ReturnCode returnCode=RepNodeUtils.updateJrxmlRelatedReport(oldPath,RepositoryNodeHelper.getPath(targetNode).append(File.separator).append(filename));
  if (!returnCode.isOk()) {
    MessageUI.openWarning(returnCode.getMessage());
  }
}",0.9591029023746702
137779,"/** 
 * ADDED scorreia Method ""computeDistinctValues"" updates the distinctValues field and set distinctComputed field to true.
 */
private void computeDistinctValues(){
  if (valueToFreq == null) {
    log.error(Messages.getString(""String_Node_Str"",this.name));
    return;
  }
  this.setDistinctValueCount(Long.valueOf(distinctValues.size()));
  distinctComputed=true;
}","/** 
 * ADDED scorreia Method ""computeDistinctValues"" updates the distinctValues field and set distinctComputed field to true.
 */
private void computeDistinctValues(){
  if (valueToFreq == null) {
    log.error(Messages.getString(""String_Node_Str"",this.name));
    return;
  }
  this.distinctValues=this.valueToFreq.keySet();
  this.setDistinctValueCount(Long.valueOf(distinctValues.size()));
  distinctComputed=true;
}",0.9380530973451328
137780,"/** 
 * Get i18n label in resource bundle. 2010-03-16 yyi 11739
 * @param key
 * @return
 */
public static String getLabel(String categoryLabel){
  String messageKey=Messages.getString(""String_Node_Str"" + categoryLabel.replaceAll(""String_Node_Str"",PluginConstant.EMPTY_STRING));
  if (messageKey.startsWith(MessagesCore.KEY_NOT_FOUND_PREFIX) && messageKey.endsWith(MessagesCore.KEY_NOT_FOUND_SUFFIX)) {
    return categoryLabel;
  }
  return messageKey;
}","/** 
 * Get i18n label in resource bundle. 2010-03-16 yyi 11739
 * @param key
 * @return
 */
public static String getLabel(String categoryLabel){
  String messageKey=Messages.getString(""String_Node_Str"" + categoryLabel.replaceAll(""String_Node_Str"",PluginConstant.EMPTY_STRING));
  if (messageKey.startsWith(Messages.KEY_NOT_FOUND_PREFIX) && messageKey.endsWith(Messages.KEY_NOT_FOUND_SUFFIX)) {
    return categoryLabel;
  }
  return messageKey;
}",0.991130820399113
137781,"public static String getString(String key){
  String message=key;
  String messageKey=MESSAGEMAP.get(key);
  if (null != messageKey && !DefaultMessagesImpl.getString(messageKey).startsWith(MessagesCore.KEY_NOT_FOUND_PREFIX) && !DefaultMessagesImpl.getString(messageKey).endsWith(MessagesCore.KEY_NOT_FOUND_SUFFIX)) {
    message=DefaultMessagesImpl.getString(messageKey);
  }
  return message;
}","public static String getString(String key){
  String message=key;
  String messageKey=MESSAGEMAP.get(key);
  if (null != messageKey && !DefaultMessagesImpl.getString(messageKey).startsWith(DefaultMessagesImpl.KEY_NOT_FOUND_PREFIX) && !DefaultMessagesImpl.getString(messageKey).endsWith(DefaultMessagesImpl.KEY_NOT_FOUND_SUFFIX)) {
    message=DefaultMessagesImpl.getString(messageKey);
  }
  return message;
}",0.9228855721393034
137782,"private Connection getConnection(){
  Connection conn=null;
  IRepositoryViewObject object=null;
  if (selectedObject == null) {
    return conn;
  }
  if (selectedObject instanceof RepositoryNode) {
    object=((RepositoryNode)selectedObject).getObject();
  }
  if (object != null) {
    Item item=object.getProperty().getItem();
    if (item instanceof ConnectionItem) {
      conn=((ConnectionItem)item).getConnection();
    }
  }
 else   if (selectedObject instanceof IConnectionElementSubFolder) {
    conn=((IConnectionElementSubFolder)selectedObject).getConnection();
  }
  return conn;
}","private Connection getConnection(){
  Connection conn=null;
  IRepositoryViewObject object=null;
  if (selectedObject == null) {
    return conn;
  }
  if (selectedObject instanceof RepositoryNode) {
    object=((RepositoryNode)selectedObject).getObject();
  }
  if (object != null) {
    Item item=object.getProperty().getItem();
    if (item instanceof ConnectionItem) {
      conn=((ConnectionItem)item).getConnection();
    }
  }
 else   if (selectedObject instanceof IConnectionElementSubFolder) {
    conn=((IConnectionElementSubFolder)selectedObject).getConnection();
  }
 else   if (selectedObject instanceof Connection) {
    conn=(Connection)selectedObject;
  }
  return conn;
}",0.9056897895557288
137783,"public void run(){
  try {
    DataProvider oldDataProvider=creatComparisonLevel.reloadCurrentLevelElement();
    WorkbenchUtils.impactExistingAnalyses(oldDataProvider);
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
catch (  PartInitException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
}","public void run(){
  try {
    Connection oldDataProvider=creatComparisonLevel.reloadCurrentLevelElement();
    Property property=PropertyHelper.getProperty(oldDataProvider);
    if (property != null) {
      Item newItem=property.getItem();
      if (newItem != null) {
        CWMPlugin.getDefault().updateConnetionAliasByName(oldDataProvider,oldDataProvider.getLabel());
      }
    }
    WorkbenchUtils.impactExistingAnalyses(oldDataProvider);
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
catch (  PartInitException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
}",0.6492537313432836
137784,"private Connection getConnection(){
  Connection conn=null;
  IRepositoryViewObject object=null;
  if (selectedObject == null) {
    return conn;
  }
  if (selectedObject instanceof RepositoryNode) {
    object=((RepositoryNode)selectedObject).getObject();
  }
  if (object != null) {
    Item item=object.getProperty().getItem();
    if (item instanceof ConnectionItem) {
      conn=((ConnectionItem)item).getConnection();
    }
  }
 else   if (selectedObject instanceof IConnectionElementSubFolder) {
    conn=((IConnectionElementSubFolder)selectedObject).getConnection();
  }
  return conn;
}","private Connection getConnection(){
  Connection conn=null;
  IRepositoryViewObject object=null;
  if (selectedObject == null) {
    return conn;
  }
  if (selectedObject instanceof RepositoryNode) {
    object=((RepositoryNode)selectedObject).getObject();
  }
  if (object != null) {
    Item item=object.getProperty().getItem();
    if (item instanceof ConnectionItem) {
      conn=((ConnectionItem)item).getConnection();
    }
  }
 else   if (selectedObject instanceof IConnectionElementSubFolder) {
    conn=((IConnectionElementSubFolder)selectedObject).getConnection();
  }
 else   if (selectedObject instanceof Connection) {
    conn=(Connection)selectedObject;
  }
  return conn;
}",0.9056897895557288
137785,"public void run(){
  try {
    Connection oldDataProvider=creatComparisonLevel.reloadCurrentLevelElement();
    WorkbenchUtils.impactExistingAnalyses(oldDataProvider);
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
catch (  PartInitException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
}","public void run(){
  try {
    Connection oldDataProvider=creatComparisonLevel.reloadCurrentLevelElement();
    Property property=PropertyHelper.getProperty(oldDataProvider);
    if (property != null) {
      Item newItem=property.getItem();
      if (newItem != null) {
        CWMPlugin.getDefault().updateConnetionAliasByName(oldDataProvider,oldDataProvider.getLabel());
      }
    }
    WorkbenchUtils.impactExistingAnalyses(oldDataProvider);
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
catch (  PartInitException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
}",0.7383177570093458
137786,"/** 
 * Comment method ""reloadDatabase"".
 * @param connectionItem
 */
public ReturnCode reloadDatabase(ConnectionItem connectionItem){
  ReturnCode retCode=new ReturnCode(Boolean.TRUE);
  Connection conn=connectionItem.getConnection();
  if (conn instanceof DatabaseConnection) {
    List<ModelElement> dependencyClients=EObjectHelper.getDependencyClients(conn);
    if (!(dependencyClients == null || dependencyClients.isEmpty())) {
      int isOk=DeleteModelElementConfirmDialog.showElementImpactConfirmDialog(null,new ModelElement[]{conn},DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",conn.getLabel()));
      if (isOk != Dialog.OK) {
        retCode.setOk(Boolean.FALSE);
        retCode.setMessage(""String_Node_Str"");
        return retCode;
      }
    }
    RepositoryNode recursiveFind=RepositoryNodeHelper.recursiveFind(conn);
    ReloadDatabaseAction reloadDatabaseAction=new ReloadDatabaseAction(recursiveFind,ReloadDatabaseProvider.RELOADDATABASE_MENUTEXT);
    reloadDatabaseAction.run();
    retCode=reloadDatabaseAction.getReturnCode();
  }
  return retCode;
}","/** 
 * Comment method ""reloadDatabase"".
 * @param connectionItem
 */
public ReturnCode reloadDatabase(ConnectionItem connectionItem){
  ReturnCode retCode=new ReturnCode(Boolean.TRUE);
  Connection conn=connectionItem.getConnection();
  if (conn instanceof DatabaseConnection) {
    List<ModelElement> dependencyClients=EObjectHelper.getDependencyClients(conn);
    if (!(dependencyClients == null || dependencyClients.isEmpty())) {
      int isOk=DeleteModelElementConfirmDialog.showElementImpactConfirmDialog(null,new ModelElement[]{conn},DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"",conn.getLabel()));
      if (isOk != Dialog.OK) {
        retCode.setOk(Boolean.FALSE);
        retCode.setMessage(""String_Node_Str"");
        return retCode;
      }
    }
    ReloadDatabaseAction reloadDatabaseAction=new ReloadDatabaseAction(conn,ReloadDatabaseProvider.RELOADDATABASE_MENUTEXT);
    reloadDatabaseAction.run();
    retCode=reloadDatabaseAction.getReturnCode();
  }
  return retCode;
}",0.9169741697416974
137787,"private Connection getConnection(){
  Connection conn=null;
  IRepositoryViewObject object=null;
  if (selectedObject == null) {
    return conn;
  }
  if (selectedObject instanceof RepositoryNode) {
    object=((RepositoryNode)selectedObject).getObject();
  }
  if (object != null) {
    Item item=object.getProperty().getItem();
    if (item instanceof ConnectionItem) {
      conn=((ConnectionItem)item).getConnection();
    }
  }
 else   if (selectedObject instanceof IConnectionElementSubFolder) {
    conn=((IConnectionElementSubFolder)selectedObject).getConnection();
  }
  return conn;
}","private Connection getConnection(){
  Connection conn=null;
  IRepositoryViewObject object=null;
  if (selectedObject == null) {
    return conn;
  }
  if (selectedObject instanceof RepositoryNode) {
    object=((RepositoryNode)selectedObject).getObject();
  }
  if (object != null) {
    Item item=object.getProperty().getItem();
    if (item instanceof ConnectionItem) {
      conn=((ConnectionItem)item).getConnection();
    }
  }
 else   if (selectedObject instanceof IConnectionElementSubFolder) {
    conn=((IConnectionElementSubFolder)selectedObject).getConnection();
  }
 else   if (selectedObject instanceof Connection) {
    conn=(Connection)selectedObject;
  }
  return conn;
}",0.9056897895557288
137788,"public void run(){
  try {
    DataProvider oldDataProvider=creatComparisonLevel.reloadCurrentLevelElement();
    WorkbenchUtils.impactExistingAnalyses(oldDataProvider);
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
catch (  PartInitException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
}","public void run(){
  try {
    Connection oldDataProvider=creatComparisonLevel.reloadCurrentLevelElement();
    Property property=PropertyHelper.getProperty(oldDataProvider);
    if (property != null) {
      Item newItem=property.getItem();
      if (newItem != null) {
        CWMPlugin.getDefault().updateConnetionAliasByName(oldDataProvider,oldDataProvider.getLabel());
      }
    }
    WorkbenchUtils.impactExistingAnalyses(oldDataProvider);
  }
 catch (  ReloadCompareException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
catch (  PartInitException e) {
    log.error(e,e);
    returnCode.setReturnCode(e.getMessage(),false);
  }
}",0.6492537313432836
137789,"private static Map<PatternToExcelEnum,String> getRelatedValueFromPattern(Pattern pattern,IFolder folder){
  Map<PatternToExcelEnum,String> patternMap=new HashMap<PatternToExcelEnum,String>();
  if (folder != null) {
    IFile file=ResourceFileMap.findCorrespondingFile(pattern);
    URI parentURI=ResourceManager.getPatternFolder().getLocationURI();
    String relativePath=parentURI.relativize(file.getParent().getLocationURI()).toString();
    relativePath=relativePath.substring(relativePath.indexOf('/') + 1);
    patternMap.put(PatternToExcelEnum.Label,pattern.getName());
    patternMap.put(PatternToExcelEnum.Purpose,MetadataHelper.getPurpose(pattern));
    patternMap.put(PatternToExcelEnum.Description,MetadataHelper.getDescription(pattern));
    patternMap.put(PatternToExcelEnum.Author,MetadataHelper.getAuthor(pattern));
    patternMap.put(PatternToExcelEnum.RelativePath,relativePath);
    for (    PatternLanguageType languagetype : PatternLanguageType.values()) {
      for (      PatternComponent component : pattern.getComponents()) {
        Expression expression=((RegularExpression)component).getExpression();
        if (expression != null && expression.getLanguage().equalsIgnoreCase(languagetype.getLiteral())) {
          patternMap.put(languagetype.getExcelEnum(),expression.getBody());
        }
      }
      if (!patternMap.containsKey(languagetype.getExcelEnum())) {
        patternMap.put(languagetype.getExcelEnum(),""String_Node_Str"");
      }
    }
  }
  return patternMap;
}","private static Map<PatternToExcelEnum,String> getRelatedValueFromPattern(Pattern pattern,IFolder folder){
  Map<PatternToExcelEnum,String> patternMap=new HashMap<PatternToExcelEnum,String>();
  if (folder != null) {
    IFile file=ResourceFileMap.findCorrespondingFile(pattern);
    URI parentURI=ResourceManager.getPatternFolder().getLocationURI();
    String relativePath=parentURI.relativize(file.getParent().getLocationURI()).toString();
    relativePath=relativePath.substring(relativePath.indexOf('/') + 1);
    if (EResourceConstant.PATTERN_REGEX.getName().equals(relativePath) || EResourceConstant.PATTERN_SQL.getName().equals(relativePath)) {
      relativePath=PluginConstant.EMPTY_STRING;
    }
    patternMap.put(PatternToExcelEnum.Label,pattern.getName());
    patternMap.put(PatternToExcelEnum.Purpose,MetadataHelper.getPurpose(pattern));
    patternMap.put(PatternToExcelEnum.Description,MetadataHelper.getDescription(pattern));
    patternMap.put(PatternToExcelEnum.Author,MetadataHelper.getAuthor(pattern));
    patternMap.put(PatternToExcelEnum.RelativePath,relativePath);
    for (    PatternLanguageType languagetype : PatternLanguageType.values()) {
      for (      PatternComponent component : pattern.getComponents()) {
        Expression expression=((RegularExpression)component).getExpression();
        if (expression != null && expression.getLanguage().equalsIgnoreCase(languagetype.getLiteral())) {
          patternMap.put(languagetype.getExcelEnum(),expression.getBody());
        }
      }
      if (!patternMap.containsKey(languagetype.getExcelEnum())) {
        patternMap.put(languagetype.getExcelEnum(),""String_Node_Str"");
      }
    }
  }
  return patternMap;
}",0.9401122894572675
137790,"private static String createAndStorePattern(PatternParameters parameters,IFolder selectionFolder,ExpressionType type) throws TalendInternalPersistenceException {
  Pattern pattern=createPattern(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status);
  for (  String key : parameters.regex.keySet()) {
    RegularExpression regularExpr=BooleanExpressionHelper.createRegularExpression(key,parameters.regex.get(key),type);
    pattern.getComponents().add(regularExpr);
  }
  boolean validStatus=PatternUtilities.isPatternValid(pattern);
  TaggedValueHelper.setValidStatus(validStatus,pattern);
  String fname=DqRepositoryViewService.createFilename(parameters.name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  TypedReturnCode<Object> create=ElementWriterFactory.getInstance().createPatternWriter().create(pattern,selectionFolder);
  if (create.isOk()) {
    return ResourceManager.getPatternFolder().getLocationURI().relativize(selectionFolder.getLocationURI()).toString();
  }
 else {
    throw new TalendInternalPersistenceException(create.getMessage());
  }
}","private static String createAndStorePattern(PatternParameters parameters,IFolder selectionFolder,ExpressionType type) throws TalendInternalPersistenceException {
  Pattern pattern=createPattern(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status);
  for (  String key : parameters.regex.keySet()) {
    RegularExpression regularExpr=BooleanExpressionHelper.createRegularExpression(key,parameters.regex.get(key),type);
    pattern.getComponents().add(regularExpr);
  }
  boolean validStatus=PatternUtilities.isPatternValid(pattern);
  TaggedValueHelper.setValidStatus(validStatus,pattern);
  String fname=DqRepositoryViewService.createFilename(parameters.name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  try {
    String relativePath=parameters.relativePath;
    if (EResourceConstant.PATTERN_REGEX.getName().equals(relativePath) || EResourceConstant.PATTERN_SQL.getName().equals(relativePath)) {
      relativePath=PluginConstant.EMPTY_STRING;
    }
    String[] folderNames=relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  TypedReturnCode<Object> create=ElementWriterFactory.getInstance().createPatternWriter().create(pattern,selectionFolder);
  if (create.isOk()) {
    return ResourceManager.getPatternFolder().getLocationURI().relativize(selectionFolder.getLocationURI()).toString();
  }
 else {
    throw new TalendInternalPersistenceException(create.getMessage());
  }
}",0.9226519337016574
137791,"/** 
 * DOC xqliu Comment method ""importToStucture"".
 * @param importObject
 * @param selectionFolder
 * @param type
 * @param skip
 * @param rename
 * @param importItemName
 * @return
 */
public static List<ReturnCode> importToStucture(ImportObject importObject,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename,String importItemName){
  List<ReturnCode> importEvent=new ArrayList<ReturnCode>();
  Set<String> names=PatternUtilities.getNestFolderPatternNames(new HashSet<String>(),selectionFolder);
  File importFile=importObject.getObjFile();
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(CsvReader.ESCAPE_MODE_DOUBLED);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        try {
          String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
          names.add(name);
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name,relativePath),true));
        }
 catch (        Exception e) {
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
        }
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents,relativePath),true));
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    IOException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    TalendInternalPersistenceException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  importObject.copyJarFiles();
  checkImportEvent(importItemName,importEvent);
  return importEvent;
}","/** 
 * DOC xqliu Comment method ""importToStucture"".
 * @param importObject
 * @param selectionFolder
 * @param type
 * @param skip
 * @param rename
 * @param importItemName
 * @return
 */
public static List<ReturnCode> importToStucture(ImportObject importObject,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename,String importItemName){
  List<ReturnCode> importEvent=new ArrayList<ReturnCode>();
  Set<String> names=PatternUtilities.getNestFolderPatternNames(new HashSet<String>(),ResourceManager.getPatternFolder());
  File importFile=importObject.getObjFile();
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(CsvReader.ESCAPE_MODE_DOUBLED);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        try {
          String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
          names.add(name);
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name,relativePath),true));
        }
 catch (        Exception e) {
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
        }
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents,relativePath),true));
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    IOException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    TalendInternalPersistenceException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  importObject.copyJarFiles();
  checkImportEvent(importItemName,importEvent);
  return importEvent;
}",0.9969918349806618
137792,"/** 
 * DOC klliu Comment method ""displayTableAndViewComp"".
 * @param schemaIndicator
 * @param parentNode
 */
protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator,final IRepositoryNode parentNode){
  tableAndViewComposite.setVisible(true);
  EList<TableIndicator> indicatorTableList=(EList<TableIndicator>)schemaIndicator.getTableIndicators();
  List<OverviewIndUIElement> tableElements=wapperInput(indicatorTableList,parentNode);
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        if (currentCatalogIndicator != null)         parentPack=(Package)currentCatalogIndicator.getAnalyzedElement();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(tdDataProvider,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        if (currentCatalogIndicator != null)         parentPack=(Package)currentCatalogIndicator.getAnalyzedElement();
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(tdDataProvider,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
        }
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        OverviewIndUIElement data=(OverviewIndUIElement)tableItem.getData();
        runTableAnalysis(data);
      }
    }
);
    cursor.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        int column=cursor.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursor.setMenu(menu2);
          menu2.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(tableElements);
  List<ViewIndicator> indicatorViewList=(List<ViewIndicator>)schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}","/** 
 * DOC klliu Comment method ""displayTableAndViewComp"".
 * @param schemaIndicator
 * @param parentNode
 */
protected void displayTableAndViewComp(final SchemaIndicator schemaIndicator,final IRepositoryNode parentNode){
  tableAndViewComposite.setVisible(true);
  EList<TableIndicator> indicatorTableList=schemaIndicator.getTableIndicators();
  List<OverviewIndUIElement> tableElements=wapperInput(indicatorTableList,parentNode);
  if (tableOfCatalogOrSchemaViewer == null) {
    tableOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE);
    final Table catalogOrSchemaTable=tableOfCatalogOrSchemaViewer.getTable();
    catalogOrSchemaTable.setHeaderVisible(true);
    catalogOrSchemaTable.setLinesVisible(true);
    GridData layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    catalogOrSchemaTable.setLayoutData(layoutData);
    String[] columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(tableOfCatalogOrSchemaViewer,columnTexts,tableSorters,COLUMN_TABLE_WIDTH);
    TableOfCatalogOrSchemaProvider providerTable=new TableOfCatalogOrSchemaProvider();
    tableOfCatalogOrSchemaViewer.setLabelProvider(providerTable);
    tableOfCatalogOrSchemaViewer.setContentProvider(providerTable);
    final TableCursor cursor=new TableCursor(catalogOrSchemaTable,SWT.NONE);
    cursor.setBackground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));
    cursor.setForeground(catalogOrSchemaTable.getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
    cursor.setLayout(new FillLayout());
    final Menu menu=new Menu(catalogOrSchemaTable);
    MenuItem keyitem=new MenuItem(menu,SWT.PUSH);
    keyitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    keyitem.setImage(ImageLib.getImage(ImageLib.PK_DECORATE));
    final Menu menu1=new Menu(catalogOrSchemaTable);
    MenuItem indexitem=new MenuItem(menu1,SWT.PUSH);
    indexitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    indexitem.setImage(ImageLib.getImage(ImageLib.INDEX_VIEW));
    final Menu menu2=new Menu(catalogOrSchemaTable);
    MenuItem tableAnalysisitem=new MenuItem(menu2,SWT.PUSH);
    tableAnalysisitem.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
    tableAnalysisitem.setImage(ImageLib.getImage(ImageLib.ACTION_NEW_ANALYSIS));
    keyitem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        if (currentCatalogIndicator != null) {
          parentPack=(Package)currentCatalogIndicator.getAnalyzedElement();
        }
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(tdDataProvider,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
        }
      }
    }
);
    indexitem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        String tableName=tableItem.getText(0);
        Package parentPack=(Package)currentSelectionSchemaIndicator.getAnalyzedElement();
        if (currentCatalogIndicator != null) {
          parentPack=(Package)currentCatalogIndicator.getAnalyzedElement();
        }
        TypedReturnCode<TableNode> findSqlExplorerTableNode=SqlExplorerBridge.findSqlExplorerTableNode(tdDataProvider,parentPack,tableName,Messages.getString(""String_Node_Str""));
        if (!findSqlExplorerTableNode.isOk()) {
        }
      }
    }
);
    tableAnalysisitem.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        TableItem tableItem=cursor.getRow();
        OverviewIndUIElement data=(OverviewIndUIElement)tableItem.getData();
        runTableAnalysis(data);
      }
    }
);
    cursor.addMenuDetectListener(new MenuDetectListener(){
      public void menuDetected(      MenuDetectEvent e){
        int column=cursor.getColumn();
        if (column == TABLE_COLUMN_INDEX) {
          cursor.setMenu(menu2);
          menu2.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEXES) {
          cursor.setMenu(menu1);
          menu1.setVisible(true);
        }
 else         if (column == VIEW_COLUMN_INDEX) {
          cursor.setMenu(menu);
          menu.setVisible(true);
        }
 else {
          cursor.setMenu(null);
        }
      }
    }
);
    viewOfCatalogOrSchemaViewer=new TableViewer(tableAndViewComposite,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
    Table tableCatalogOrSchemaView=viewOfCatalogOrSchemaViewer.getTable();
    tableCatalogOrSchemaView.setHeaderVisible(true);
    tableCatalogOrSchemaView.setLinesVisible(true);
    layoutData=new GridData(SWT.FILL,SWT.FILL,true,true);
    layoutData.heightHint=150;
    tableCatalogOrSchemaView.setLayoutData(layoutData);
    columnTexts=new String[]{DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str"")};
    createSorterColumns(viewOfCatalogOrSchemaViewer,columnTexts,viewSorters,COLUMN_VIEW_WIDTH);
    ViewOfCatalogOrSchemaProvider viewProvider=new ViewOfCatalogOrSchemaProvider();
    viewOfCatalogOrSchemaViewer.setLabelProvider(viewProvider);
    viewOfCatalogOrSchemaViewer.setContentProvider(viewProvider);
  }
  tableOfCatalogOrSchemaViewer.getTable().setMenu(null);
  tableOfCatalogOrSchemaViewer.setInput(tableElements);
  List<ViewIndicator> indicatorViewList=schemaIndicator.getViewIndicators();
  viewOfCatalogOrSchemaViewer.setInput(indicatorViewList);
  tableAndViewComposite.pack();
  statisticalSection.pack();
  statisticalSection.layout();
  form.reflow(true);
}",0.9916598528209322
137793,"public void saveAnalysis() throws DataprofilerCoreException {
  if (isConnectionAnalysis()) {
    AnalysisHelper.setReloadDatabases(analysis,reloadDatabasesBtn.getSelection());
  }
  EList<Domain> dataFilters=analysis.getParameters().getDataFilter();
  if (!this.tableFilterText.getText().equals(DomainHelper.getTablePattern(dataFilters))) {
    DomainHelper.setDataFilterTablePattern(dataFilters,tableFilterText.getText());
    latestTableFilterValue=this.tableFilterText.getText();
  }
  if (!this.viewFilterText.getText().equals(DomainHelper.getViewPattern(dataFilters))) {
    DomainHelper.setDataFilterViewPattern(dataFilters,viewFilterText.getText());
    latestViewFilterValue=this.viewFilterText.getText();
  }
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
}","@Override public void saveAnalysis() throws DataprofilerCoreException {
  if (isConnectionAnalysis()) {
    AnalysisHelper.setReloadDatabases(analysis,reloadDatabasesBtn.getSelection());
  }
  EList<Domain> dataFilters=analysis.getParameters().getDataFilter();
  if (!this.tableFilterText.getText().equals(DomainHelper.getTablePattern(dataFilters))) {
    DomainHelper.setDataFilterTablePattern(dataFilters,tableFilterText.getText());
    latestTableFilterValue=this.tableFilterText.getText();
  }
  if (!this.viewFilterText.getText().equals(DomainHelper.getViewPattern(dataFilters))) {
    DomainHelper.setDataFilterViewPattern(dataFilters,viewFilterText.getText());
    latestViewFilterValue=this.viewFilterText.getText();
  }
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(analysis.getName());
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
}",0.99645390070922
137794,"public void widgetSelected(SelectionEvent e){
  TableItem tableItem=cursor.getRow();
  OverviewIndUIElement data=(OverviewIndUIElement)tableItem.getData();
  runTableAnalysis(data);
}","@Override public void widgetSelected(SelectionEvent e){
  TableItem tableItem=cursor.getRow();
  OverviewIndUIElement data=(OverviewIndUIElement)tableItem.getData();
  runTableAnalysis(data);
}",0.973404255319149
137795,"public void fireRuningItemChanged(boolean status){
  currentEditor.setRunActionButtonState(status);
  if (status) {
    refresh();
  }
  statisticalSection.setExpanded(status);
}","@Override public void fireRuningItemChanged(boolean status){
  currentEditor.setRunActionButtonState(status);
  if (status) {
    refresh();
  }
  statisticalSection.setExpanded(status);
}",0.9726775956284152
137796,"public void linkActivated(HyperlinkEvent e){
  for (  Control control : chartComposite.getChildren()) {
    control.dispose();
  }
  boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
  if (!analysisStatue) {
    boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    if (returnCode) {
      new RunAnalysisAction().run();
      message.setVisible(false);
    }
 else {
      createPreviewCharts(form,chartComposite,false);
      message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      message.setVisible(true);
    }
  }
 else {
    createPreviewCharts(form,chartComposite,true);
  }
  chartComposite.layout();
  form.reflow(true);
}","@Override public void linkActivated(HyperlinkEvent e){
  for (  Control control : chartComposite.getChildren()) {
    control.dispose();
  }
  boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
  if (!analysisStatue) {
    boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    if (returnCode) {
      new RunAnalysisAction().run();
      message.setVisible(false);
    }
 else {
      createPreviewCharts(form,chartComposite,false);
      message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      message.setVisible(true);
    }
  }
 else {
    createPreviewCharts(form,chartComposite,true);
  }
  chartComposite.layout();
  form.reflow(true);
}",0.9941176470588236
137797,"public Composite[] getPreviewChartCompsites(){
  return previewChartCompsites;
}","public Composite[] getPreviewChartCompsites(){
  if (previewChartCompsites != null && previewChartCompsites.length > 0) {
    List<Composite> withOutDisposed=new ArrayList<Composite>();
    for (    Composite com : previewChartCompsites) {
      if (!com.isDisposed()) {
        withOutDisposed.add(com);
      }
    }
    this.previewChartCompsites=withOutDisposed.toArray(new ExpandableComposite[withOutDisposed.size()]);
  }
  return previewChartCompsites;
}",0.1922365988909427
137798,"public void controlResized(ControlEvent e){
  super.controlResized(e);
  sForm.redraw();
  form.reflow(true);
}","@Override public void controlResized(ControlEvent e){
  super.controlResized(e);
  sForm.redraw();
  form.reflow(true);
}",0.956896551724138
137799,"/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
public void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  Connection tdProvider=null;
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<RepositoryNode> repositoryNodeList=treeViewer.getColumnSetMultiValueList();
  if (repositoryNodeList != null && repositoryNodeList.size() != 0) {
    reposObject=repositoryNodeList.get(0).getObject();
    tdProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnLst=new ArrayList<TdColumn>();
    for (    RepositoryNode repNode : repositoryNodeList) {
      columnLst.add((TdColumn)((MetadataColumnRepositoryObject)repNode.getObject()).getTdColumn());
    }
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnLst);
    correlationAnalysisHandler.addIndicator(columnLst,columnSetMultiIndicator);
  }
 else {
    deleteConnectionDependency(analysis);
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ColumnSetMultiValueIndicator columnSetMultiValueIndicator=null;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createCountAvgNullIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
    fillSimpleIndicators(columnSetMultiValueIndicator);
    analysis.getResults().getIndicators().add(columnSetMultiValueIndicator);
  }
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}","/** 
 * @param outputFolder
 * @throws DataprofilerCoreException
 */
@Override public void saveAnalysis() throws DataprofilerCoreException {
  for (  Domain domain : this.analysis.getParameters().getDataFilter()) {
    domain.setName(this.analysis.getName());
  }
  IRepositoryViewObject reposObject=null;
  Connection tdProvider=null;
  correlationAnalysisHandler.clearAnalysis();
  columnSetMultiIndicator.getAnalyzedColumns().clear();
  Analysis analysis=correlationAnalysisHandler.getAnalysis();
  analysis.getParameters().setExecutionLanguage(ExecutionLanguage.get(execLang));
  correlationAnalysisHandler.setStringDataFilter(dataFilterComp.getDataFilterString());
  List<RepositoryNode> repositoryNodeList=treeViewer.getColumnSetMultiValueList();
  if (repositoryNodeList != null && repositoryNodeList.size() != 0) {
    reposObject=repositoryNodeList.get(0).getObject();
    tdProvider=((ConnectionItem)reposObject.getProperty().getItem()).getConnection();
    analysis.getContext().setConnection(tdProvider);
    List<TdColumn> columnLst=new ArrayList<TdColumn>();
    for (    RepositoryNode repNode : repositoryNodeList) {
      columnLst.add((TdColumn)((MetadataColumnRepositoryObject)repNode.getObject()).getTdColumn());
    }
    columnSetMultiIndicator.getAnalyzedColumns().addAll(columnLst);
    correlationAnalysisHandler.addIndicator(columnLst,columnSetMultiIndicator);
  }
 else {
    deleteConnectionDependency(analysis);
    ColumnsetFactory columnsetFactory=ColumnsetFactory.eINSTANCE;
    ColumnSetMultiValueIndicator columnSetMultiValueIndicator=null;
    if (ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createCountAvgNullIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createMinMaxDateIndicator();
    }
    if (ColumnsetPackage.eINSTANCE.getWeakCorrelationIndicator() == columnSetMultiIndicator.eClass()) {
      columnSetMultiValueIndicator=columnsetFactory.createWeakCorrelationIndicator();
    }
    fillSimpleIndicators(columnSetMultiValueIndicator);
    analysis.getResults().getIndicators().add(columnSetMultiValueIndicator);
  }
  this.updateAnalysisClientDependency();
  this.saveNumberOfConnectionsPerAnalysis();
  ReturnCode saved=new ReturnCode(false);
  IEditorInput editorInput=this.getEditorInput();
  if (editorInput instanceof AnalysisItemEditorInput) {
    AnalysisItemEditorInput analysisInput=(AnalysisItemEditorInput)editorInput;
    TDQAnalysisItem tdqAnalysisItem=analysisInput.getTDQAnalysisItem();
    tdqAnalysisItem.getProperty().setDisplayName(analysis.getName());
    tdqAnalysisItem.getProperty().setLabel(WorkspaceUtils.normalize(analysis.getName()));
    this.nameText.setText(analysis.getName());
    saved=ElementWriterFactory.getInstance().createAnalysisWrite().save(tdqAnalysisItem,true);
  }
  logSaved(saved);
  treeViewer.setDirty(false);
  dataFilterComp.setDirty(false);
}",0.9983633387888708
137800,"/** 
 * Getter for treeViewer.
 * @return the treeViewer
 */
public AnalysisColumnNominalIntervalTreeViewer getTreeViewer(){
  return this.treeViewer;
}","/** 
 * Getter for treeViewer.
 * @return the treeViewer
 */
@Override public AnalysisColumnNominalIntervalTreeViewer getTreeViewer(){
  return this.treeViewer;
}",0.9681528662420382
137801,"@Override public void refresh(){
  if (EditorPreferencePage.isHideGraphics()) {
    if (sForm.getChildren().length > 1) {
      if (null != sForm.getChildren()[1] && !sForm.getChildren()[1].isDisposed())       sForm.getChildren()[1].dispose();
      topComp.getParent().layout();
      topComp.layout();
    }
  }
 else {
    if (chartComposite != null && !chartComposite.isDisposed()) {
      try {
        for (        Control control : chartComposite.getChildren()) {
          control.dispose();
        }
        createPreviewCharts(form,chartComposite,true);
        chartComposite.getParent().layout();
        chartComposite.layout();
      }
 catch (      Exception ex) {
        log.error(ex,ex);
      }
    }
 else {
      previewComp=toolkit.createComposite(sForm);
      previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
      previewComp.setLayout(new GridLayout());
      previewComp.addControlListener(new ControlAdapter(){
        public void controlResized(        ControlEvent e){
          super.controlResized(e);
          sForm.redraw();
          form.reflow(true);
        }
      }
);
      createPreviewSection(form,previewComp);
      createPreviewCharts(form,chartComposite,true);
    }
  }
}","@Override public void refresh(){
  if (EditorPreferencePage.isHideGraphics()) {
    if (sForm.getChildren().length > 1) {
      if (null != sForm.getChildren()[1] && !sForm.getChildren()[1].isDisposed()) {
        sForm.getChildren()[1].dispose();
      }
      topComp.getParent().layout();
      topComp.layout();
    }
  }
 else {
    if (chartComposite != null && !chartComposite.isDisposed()) {
      try {
        for (        Control control : chartComposite.getChildren()) {
          control.dispose();
        }
        createPreviewCharts(form,chartComposite,true);
        chartComposite.getParent().layout();
        chartComposite.layout();
      }
 catch (      Exception ex) {
        log.error(ex,ex);
      }
    }
 else {
      previewComp=toolkit.createComposite(sForm);
      previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
      previewComp.setLayout(new GridLayout());
      previewComp.addControlListener(new ControlAdapter(){
        @Override public void controlResized(        ControlEvent e){
          super.controlResized(e);
          sForm.redraw();
          form.reflow(true);
        }
      }
);
      createPreviewSection(form,previewComp);
      createPreviewCharts(form,chartComposite,true);
    }
  }
}",0.9911575562700964
137802,"public Composite getChartComposite(){
  return chartComposite;
}","@Override public Composite getChartComposite(){
  return chartComposite;
}",0.927536231884058
137803,"void createAnalysisColumnsSection(final ScrolledForm form,Composite anasisDataComp){
  analysisColSection=createSection(form,anasisDataComp,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite topComp=toolkit.createComposite(analysisColSection);
  topComp.setLayout(new GridLayout());
  createConnBindWidget(topComp);
  Hyperlink clmnBtn=toolkit.createHyperlink(topComp,DefaultMessagesImpl.getString(""String_Node_Str""),SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(clmnBtn);
  clmnBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      openColumnsSelectionDialog();
    }
  }
);
  Composite tree=toolkit.createComposite(topComp,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tree);
  tree.setLayout(new GridLayout());
  ((GridData)tree.getLayoutData()).heightHint=TREE_MAX_LENGTH;
  treeViewer=new AnalysisColumnNominalIntervalTreeViewer(tree,this);
  treeViewer.addPropertyChangeListener(this);
  treeViewer.setInput(analyzedColumns.toArray());
  treeViewer.setDirty(false);
  analysisColSection.setClient(topComp);
}","void createAnalysisColumnsSection(final ScrolledForm form,Composite anasisDataComp){
  analysisColSection=createSection(form,anasisDataComp,DefaultMessagesImpl.getString(""String_Node_Str""),null);
  Composite topComp=toolkit.createComposite(analysisColSection);
  topComp.setLayout(new GridLayout());
  createConnBindWidget(topComp);
  Hyperlink clmnBtn=toolkit.createHyperlink(topComp,DefaultMessagesImpl.getString(""String_Node_Str""),SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(clmnBtn);
  clmnBtn.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      openColumnsSelectionDialog();
    }
  }
);
  Composite tree=toolkit.createComposite(topComp,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.FILL).grab(true,true).applyTo(tree);
  tree.setLayout(new GridLayout());
  ((GridData)tree.getLayoutData()).heightHint=TREE_MAX_LENGTH;
  treeViewer=new AnalysisColumnNominalIntervalTreeViewer(tree,this);
  treeViewer.addPropertyChangeListener(this);
  treeViewer.setInput(analyzedColumns.toArray());
  treeViewer.setDirty(false);
  analysisColSection.setClient(topComp);
}",0.9957155098543272
137804,"public void initialize(FormEditor editor){
  super.initialize(editor);
  recomputeIndicators();
}","@Override public void initialize(FormEditor editor){
  super.initialize(editor);
  recomputeIndicators();
}",0.9509803921568628
137805,"void createPreviewSection(final ScrolledForm form,Composite parent){
  previewSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  previewSection.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(previewSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  ImageHyperlink refreshBtn=toolkit.createImageHyperlink(sectionClient,SWT.NONE);
  refreshBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  refreshBtn.setImage(ImageLib.getImage(ImageLib.SECTION_PREVIEW));
  final Label message=toolkit.createLabel(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  message.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  message.setVisible(false);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  chartComposite=toolkit.createComposite(sectionClient);
  chartComposite.setLayout(new GridLayout());
  chartComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Analysis analysis=correlationAnalysisHandler.getAnalysis();
  refreshBtn.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
      if (!analysisStatue) {
        boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        if (returnCode) {
          new RunAnalysisAction().run();
          message.setVisible(false);
        }
 else {
          createPreviewCharts(form,chartComposite,false);
          message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          message.setVisible(true);
        }
      }
 else {
        createPreviewCharts(form,chartComposite,true);
      }
      chartComposite.layout();
      form.reflow(true);
    }
  }
);
  previewSection.setClient(sectionClient);
}","void createPreviewSection(final ScrolledForm form,Composite parent){
  previewSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  previewSection.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(previewSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  ImageHyperlink refreshBtn=toolkit.createImageHyperlink(sectionClient,SWT.NONE);
  refreshBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  refreshBtn.setImage(ImageLib.getImage(ImageLib.SECTION_PREVIEW));
  final Label message=toolkit.createLabel(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  message.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  message.setVisible(false);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  chartComposite=toolkit.createComposite(sectionClient);
  chartComposite.setLayout(new GridLayout());
  chartComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Analysis analysis=correlationAnalysisHandler.getAnalysis();
  refreshBtn.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
      if (!analysisStatue) {
        boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        if (returnCode) {
          new RunAnalysisAction().run();
          message.setVisible(false);
        }
 else {
          createPreviewCharts(form,chartComposite,false);
          message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          message.setVisible(true);
        }
      }
 else {
        createPreviewCharts(form,chartComposite,true);
      }
      chartComposite.layout();
      form.reflow(true);
    }
  }
);
  previewSection.setClient(sectionClient);
}",0.9977876106194692
137806,"/** 
 * DOC hcheng Comment method ""verifyColumn"". For 7513,Condition striction when save the correlation analysis.
 * @param columns
 * @param className
 * @return
 */
private String verifyColumn(List<RepositoryNode> columns,EClass className){
  List<TdColumn> invalidCols=new ArrayList<TdColumn>();
  List<TdColumn> nominalCols=new ArrayList<TdColumn>();
  List<TdColumn> intervalCols=new ArrayList<TdColumn>();
  String message=null;
  for (int i=0; i < columns.size(); i++) {
    RepositoryNode tdColumnNode=(RepositoryNode)columns.get(i);
    TdColumn tdColumn=(TdColumn)((MetadataColumnRepositoryObject)tdColumnNode.getObject()).getTdColumn();
    if (className == ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator()) {
      if (Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
        invalidCols.add(tdColumn);
        break;
      }
    }
 else     if (className == ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator()) {
      if (Java2SqlType.isNumbericInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
        invalidCols.add(tdColumn);
        break;
      }
    }
    if (correlationAnalysisHandler.getDatamingType(tdColumn) == DataminingType.NOMINAL) {
      nominalCols.add(tdColumn);
    }
    if (correlationAnalysisHandler.getDatamingType(tdColumn) == DataminingType.INTERVAL) {
      intervalCols.add(tdColumn);
    }
  }
  if (invalidCols.size() > 0) {
    if (className == ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator()) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
 else     if (className == ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator()) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
  }
 else   if (nominalCols.size() == 0 || intervalCols.size() == 0) {
    message=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  return message;
}","/** 
 * DOC hcheng Comment method ""verifyColumn"". For 7513,Condition striction when save the correlation analysis.
 * @param columns
 * @param className
 * @return
 */
private String verifyColumn(List<RepositoryNode> columns,EClass className){
  List<TdColumn> invalidCols=new ArrayList<TdColumn>();
  List<TdColumn> nominalCols=new ArrayList<TdColumn>();
  List<TdColumn> intervalCols=new ArrayList<TdColumn>();
  String message=null;
  for (int i=0; i < columns.size(); i++) {
    RepositoryNode tdColumnNode=columns.get(i);
    TdColumn tdColumn=(TdColumn)((MetadataColumnRepositoryObject)tdColumnNode.getObject()).getTdColumn();
    if (className == ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator()) {
      if (Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
        invalidCols.add(tdColumn);
        break;
      }
    }
 else     if (className == ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator()) {
      if (Java2SqlType.isNumbericInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
        invalidCols.add(tdColumn);
        break;
      }
    }
    if (correlationAnalysisHandler.getDatamingType(tdColumn) == DataminingType.NOMINAL) {
      nominalCols.add(tdColumn);
    }
    if (correlationAnalysisHandler.getDatamingType(tdColumn) == DataminingType.INTERVAL) {
      intervalCols.add(tdColumn);
    }
  }
  if (invalidCols.size() > 0) {
    if (className == ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator()) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
 else     if (className == ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator()) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
  }
 else   if (nominalCols.size() == 0 || intervalCols.size() == 0) {
    message=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  return message;
}",0.9956780118854672
137807,"public Composite[] getPreviewChartCompsites(){
  return previewChartCompsites;
}","public Composite[] getPreviewChartCompsites(){
  if (previewChartCompsites != null && previewChartCompsites.length > 0) {
    List<Composite> withOutDisposed=new ArrayList<Composite>();
    for (    Composite com : previewChartCompsites) {
      if (!com.isDisposed()) {
        withOutDisposed.add(com);
      }
    }
    this.previewChartCompsites=withOutDisposed.toArray(new ExpandableComposite[withOutDisposed.size()]);
  }
  return previewChartCompsites;
}",0.1922365988909427
137808,"public Composite getChartComposite(){
  return chartComposite;
}","@Override public Composite getChartComposite(){
  return chartComposite;
}",0.927536231884058
137809,"/** 
 * DOC hcheng Comment method ""verifyColumn"". For 7513,Condition striction when save the correlation analysis.
 * @param columns
 * @param className
 * @return
 */
private String verifyColumn(List<RepositoryNode> columns,EClass className){
  List<TdColumn> invalidCols=new ArrayList<TdColumn>();
  List<TdColumn> nominalCols=new ArrayList<TdColumn>();
  List<TdColumn> intervalCols=new ArrayList<TdColumn>();
  String message=null;
  for (int i=0; i < columns.size(); i++) {
    RepositoryNode tdColumnNode=(RepositoryNode)columns.get(i);
    TdColumn tdColumn=(TdColumn)((MetadataColumnRepositoryObject)tdColumnNode.getObject()).getTdColumn();
    if (className == ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator()) {
      if (Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
        invalidCols.add(tdColumn);
        break;
      }
    }
 else     if (className == ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator()) {
      if (Java2SqlType.isNumbericInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
        invalidCols.add(tdColumn);
        break;
      }
    }
    if (correlationAnalysisHandler.getDatamingType(tdColumn) == DataminingType.NOMINAL) {
      nominalCols.add(tdColumn);
    }
    if (correlationAnalysisHandler.getDatamingType(tdColumn) == DataminingType.INTERVAL) {
      intervalCols.add(tdColumn);
    }
  }
  if (invalidCols.size() > 0) {
    if (className == ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator()) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
 else     if (className == ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator()) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
  }
 else   if (nominalCols.size() == 0 || intervalCols.size() == 0) {
    message=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  return message;
}","/** 
 * DOC hcheng Comment method ""verifyColumn"". For 7513,Condition striction when save the correlation analysis.
 * @param columns
 * @param className
 * @return
 */
private String verifyColumn(List<RepositoryNode> columns,EClass className){
  List<TdColumn> invalidCols=new ArrayList<TdColumn>();
  List<TdColumn> nominalCols=new ArrayList<TdColumn>();
  List<TdColumn> intervalCols=new ArrayList<TdColumn>();
  String message=null;
  for (int i=0; i < columns.size(); i++) {
    RepositoryNode tdColumnNode=columns.get(i);
    TdColumn tdColumn=(TdColumn)((MetadataColumnRepositoryObject)tdColumnNode.getObject()).getTdColumn();
    if (className == ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator()) {
      if (Java2SqlType.isDateInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
        invalidCols.add(tdColumn);
        break;
      }
    }
 else     if (className == ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator()) {
      if (Java2SqlType.isNumbericInSQL(tdColumn.getSqlDataType().getJavaDataType())) {
        invalidCols.add(tdColumn);
        break;
      }
    }
    if (correlationAnalysisHandler.getDatamingType(tdColumn) == DataminingType.NOMINAL) {
      nominalCols.add(tdColumn);
    }
    if (correlationAnalysisHandler.getDatamingType(tdColumn) == DataminingType.INTERVAL) {
      intervalCols.add(tdColumn);
    }
  }
  if (invalidCols.size() > 0) {
    if (className == ColumnsetPackage.eINSTANCE.getCountAvgNullIndicator()) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
 else     if (className == ColumnsetPackage.eINSTANCE.getMinMaxDateIndicator()) {
      message=DefaultMessagesImpl.getString(""String_Node_Str"");
    }
  }
 else   if (nominalCols.size() == 0 || intervalCols.size() == 0) {
    message=DefaultMessagesImpl.getString(""String_Node_Str"");
  }
  return message;
}",0.9956780118854672
137810,"public Composite[] getPreviewChartCompsites(){
  if (previewChartList != null && !previewChartList.isEmpty()) {
    this.previewChartCompsites=previewChartList.toArray(new Composite[previewChartList.size()]);
  }
  return previewChartCompsites;
}","public ExpandableComposite[] getPreviewChartCompsites(){
  if (previewChartList != null && !previewChartList.isEmpty()) {
    List<ExpandableComposite> withOutDisposed=new ArrayList<ExpandableComposite>();
    for (    ExpandableComposite com : previewChartList) {
      if (!com.isDisposed()) {
        withOutDisposed.add(com);
      }
    }
  }
  return previewChartCompsites;
}",0.5039872408293461
137811,"/** 
 * DOC zshen Comment method ""computePagination"".
 */
private void computePagination(){
  if (chartComposite != null) {
    for (    Control control : chartComposite.getChildren()) {
      control.dispose();
    }
  }
  if (uiPagination == null) {
    uiPagination=new UIPagination(toolkit);
    uiPagination.setComposite(navigationComposite);
  }
 else {
    uiPagination.reset();
  }
  final ModelElementIndicator[] modelElementIndicatorArrary=this.getCurrentModelElementIndicators();
  int pageSize=IndicatorPaginationInfo.getPageSize();
  int totalPages=modelElementIndicatorArrary.length / pageSize;
  List<ModelElementIndicator> modelElementIndicatorList=null;
  for (int index=0; index < totalPages; index++) {
    modelElementIndicatorList=new ArrayList<ModelElementIndicator>();
    for (int idx=0; idx < pageSize; idx++) {
      modelElementIndicatorList.add(modelElementIndicatorArrary[index * pageSize + idx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicatorList,uiPagination,treeViewer);
    uiPagination.addPage(pginfo);
  }
  int left=modelElementIndicatorArrary.length % pageSize;
  if (left != 0 || totalPages == 0) {
    modelElementIndicatorList=new ArrayList<ModelElementIndicator>();
    for (int leftIdx=0; leftIdx < left; leftIdx++) {
      modelElementIndicatorList.add(modelElementIndicatorArrary[totalPages * pageSize + leftIdx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicatorList,uiPagination,treeViewer);
    uiPagination.addPage(pginfo);
    totalPages++;
  }
  uiPagination.init();
}","/** 
 * DOC zshen Comment method ""computePagination"".
 */
private void computePagination(){
  disposeChartComposite();
  if (uiPagination == null) {
    uiPagination=new UIPagination(toolkit);
    uiPagination.setComposite(navigationComposite);
  }
 else {
    uiPagination.reset();
  }
  final ModelElementIndicator[] modelElementIndicatorArrary=this.getCurrentModelElementIndicators();
  int pageSize=IndicatorPaginationInfo.getPageSize();
  int totalPages=modelElementIndicatorArrary.length / pageSize;
  List<ModelElementIndicator> modelElementIndicatorList=null;
  for (int index=0; index < totalPages; index++) {
    modelElementIndicatorList=new ArrayList<ModelElementIndicator>();
    for (int idx=0; idx < pageSize; idx++) {
      modelElementIndicatorList.add(modelElementIndicatorArrary[index * pageSize + idx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicatorList,uiPagination,treeViewer);
    uiPagination.addPage(pginfo);
  }
  int left=modelElementIndicatorArrary.length % pageSize;
  if (left != 0 || totalPages == 0) {
    modelElementIndicatorList=new ArrayList<ModelElementIndicator>();
    for (int leftIdx=0; leftIdx < left; leftIdx++) {
      modelElementIndicatorList.add(modelElementIndicatorArrary[totalPages * pageSize + leftIdx]);
    }
    IndicatorPaginationInfo pginfo=new MasterPaginationInfo(form,previewChartList,modelElementIndicatorList,uiPagination,treeViewer);
    uiPagination.addPage(pginfo);
    totalPages++;
  }
  uiPagination.init();
}",0.9538171536286524
137812,"/** 
 * DOC yyi 2011-06-02 16929:expand the selected column in the graphical chart.
 * @param indicator
 */
protected void expandChart(ModelElementIndicator indicator){
  if (uiPagination == null) {
    return;
  }
  if (previewChartList != null && !previewChartList.isEmpty()) {
    for (    ExpandableComposite comp : previewChartList) {
      if (comp.getData() != indicator) {
        comp.setExpanded(false);
        comp.getParent().pack();
      }
    }
  }
}","/** 
 * DOC yyi 2011-06-02 16929:expand the selected column in the graphical chart.
 * @param indicator
 */
protected void expandChart(ModelElementIndicator indicator){
  if (uiPagination == null) {
    return;
  }
  ExpandableComposite[] previewChartCompsitesa=getPreviewChartCompsites();
  if (previewChartList != null && !previewChartList.isEmpty()) {
    for (    ExpandableComposite comp : previewChartList) {
      if (comp.getData() != indicator) {
        comp.setExpanded(false);
        comp.getParent().pack();
      }
    }
  }
}",0.9255213505461768
137813,"void createPreviewSection(final ScrolledForm form,Composite parent){
  previewSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  previewSection.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(previewSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite actionBarComp=toolkit.createComposite(sectionClient);
  GridLayout gdLayout=new GridLayout();
  gdLayout.numColumns=2;
  actionBarComp.setLayout(gdLayout);
  ImageHyperlink collapseAllImageLink=toolkit.createImageHyperlink(actionBarComp,SWT.NONE);
  collapseAllImageLink.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  collapseAllImageLink.setImage(ImageLib.getImage(ImageLib.COLLAPSE_ALL));
  collapseAllImageLink.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      if (previewChartList != null && !previewChartList.isEmpty()) {
        for (        ExpandableComposite comp : previewChartList) {
          comp.setExpanded(false);
          comp.getParent().pack();
        }
      }
    }
  }
);
  ImageHyperlink expandAllImageLink=toolkit.createImageHyperlink(actionBarComp,SWT.NONE);
  expandAllImageLink.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  expandAllImageLink.setImage(ImageLib.getImage(ImageLib.EXPAND_ALL));
  expandAllImageLink.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      if (previewChartList != null && !previewChartList.isEmpty()) {
        for (        ExpandableComposite comp : previewChartList) {
          comp.setExpanded(true);
          comp.getParent().pack();
        }
      }
    }
  }
);
  ImageHyperlink refreshBtn=toolkit.createImageHyperlink(sectionClient,SWT.NONE);
  refreshBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  refreshBtn.setImage(ImageLib.getImage(ImageLib.SECTION_PREVIEW));
  final Label message=toolkit.createLabel(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  message.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  message.setVisible(false);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  chartComposite=toolkit.createComposite(sectionClient);
  chartComposite.setLayout(new GridLayout());
  chartComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Analysis analysis=analysisHandler.getAnalysis();
  refreshBtn.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      for (      Control control : chartComposite.getChildren()) {
        control.dispose();
      }
      boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
      if (!analysisStatue) {
        boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        if (returnCode) {
          new RunAnalysisAction().run();
          message.setVisible(false);
        }
 else {
          createPreviewCharts(form,chartComposite,false);
          message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          message.setVisible(true);
        }
      }
 else {
        createPreviewCharts(form,chartComposite,true);
      }
      chartComposite.layout();
      form.reflow(true);
    }
  }
);
  previewSection.setClient(sectionClient);
}","void createPreviewSection(final ScrolledForm form,Composite parent){
  previewSection=createSection(form,parent,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
  previewSection.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite sectionClient=toolkit.createComposite(previewSection);
  sectionClient.setLayout(new GridLayout());
  sectionClient.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite actionBarComp=toolkit.createComposite(sectionClient);
  GridLayout gdLayout=new GridLayout();
  gdLayout.numColumns=2;
  actionBarComp.setLayout(gdLayout);
  ImageHyperlink collapseAllImageLink=toolkit.createImageHyperlink(actionBarComp,SWT.NONE);
  collapseAllImageLink.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  collapseAllImageLink.setImage(ImageLib.getImage(ImageLib.COLLAPSE_ALL));
  collapseAllImageLink.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      if (previewChartList != null && !previewChartList.isEmpty()) {
        for (        ExpandableComposite comp : previewChartList) {
          comp.setExpanded(false);
          comp.getParent().pack();
        }
      }
    }
  }
);
  ImageHyperlink expandAllImageLink=toolkit.createImageHyperlink(actionBarComp,SWT.NONE);
  expandAllImageLink.setToolTipText(DefaultMessagesImpl.getString(""String_Node_Str""));
  expandAllImageLink.setImage(ImageLib.getImage(ImageLib.EXPAND_ALL));
  expandAllImageLink.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      if (previewChartList != null && !previewChartList.isEmpty()) {
        for (        ExpandableComposite comp : previewChartList) {
          comp.setExpanded(true);
          comp.getParent().pack();
        }
      }
    }
  }
);
  ImageHyperlink refreshBtn=toolkit.createImageHyperlink(sectionClient,SWT.NONE);
  refreshBtn.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
  refreshBtn.setImage(ImageLib.getImage(ImageLib.SECTION_PREVIEW));
  final Label message=toolkit.createLabel(sectionClient,DefaultMessagesImpl.getString(""String_Node_Str""));
  message.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));
  message.setVisible(false);
  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.TOP).applyTo(sectionClient);
  chartComposite=toolkit.createComposite(sectionClient);
  chartComposite.setLayout(new GridLayout());
  chartComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Analysis analysis=analysisHandler.getAnalysis();
  refreshBtn.addHyperlinkListener(new HyperlinkAdapter(){
    @Override public void linkActivated(    HyperlinkEvent e){
      disposeChartComposite();
      boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
      if (!analysisStatue) {
        boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
        if (returnCode) {
          new RunAnalysisAction().run();
          message.setVisible(false);
        }
 else {
          createPreviewCharts(form,chartComposite,false);
          message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          message.setVisible(true);
        }
      }
 else {
        createPreviewCharts(form,chartComposite,true);
      }
      chartComposite.layout();
      form.reflow(true);
    }
  }
);
  previewSection.setClient(sectionClient);
}",0.987174182871328
137814,"@Override public void linkActivated(HyperlinkEvent e){
  for (  Control control : chartComposite.getChildren()) {
    control.dispose();
  }
  boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
  if (!analysisStatue) {
    boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    if (returnCode) {
      new RunAnalysisAction().run();
      message.setVisible(false);
    }
 else {
      createPreviewCharts(form,chartComposite,false);
      message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      message.setVisible(true);
    }
  }
 else {
    createPreviewCharts(form,chartComposite,true);
  }
  chartComposite.layout();
  form.reflow(true);
}","@Override public void linkActivated(HyperlinkEvent e){
  disposeChartComposite();
  boolean analysisStatue=analysis.getResults().getResultMetadata() != null && analysis.getResults().getResultMetadata().getExecutionDate() != null;
  if (!analysisStatue) {
    boolean returnCode=MessageDialog.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    if (returnCode) {
      new RunAnalysisAction().run();
      message.setVisible(false);
    }
 else {
      createPreviewCharts(form,chartComposite,false);
      message.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      message.setVisible(true);
    }
  }
 else {
    createPreviewCharts(form,chartComposite,true);
  }
  chartComposite.layout();
  form.reflow(true);
}",0.9509388249545728
137815,"@Override public void refresh(){
  if (EditorPreferencePage.isHideGraphics()) {
    if (sForm.getChildren().length > 1) {
      if (null != sForm.getChildren()[1] && !sForm.getChildren()[1].isDisposed()) {
        sForm.getChildren()[1].dispose();
      }
      topComp.getParent().layout();
      topComp.layout();
    }
  }
 else {
    if (chartComposite != null && !chartComposite.isDisposed()) {
      try {
        for (        Control control : chartComposite.getChildren()) {
          control.dispose();
        }
        createPreviewCharts(form,chartComposite,true);
        chartComposite.getParent().layout();
        chartComposite.layout();
      }
 catch (      Exception ex) {
        log.error(ex,ex);
      }
    }
 else {
      previewComp=toolkit.createComposite(sForm);
      previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
      previewComp.setLayout(new GridLayout());
      previewComp.addControlListener(new ControlAdapter(){
        @Override public void controlResized(        ControlEvent e){
          super.controlResized(e);
          sForm.redraw();
          form.reflow(true);
        }
      }
);
      createPreviewSection(form,previewComp);
      createPreviewCharts(form,chartComposite,false);
    }
  }
}","@Override public void refresh(){
  if (EditorPreferencePage.isHideGraphics()) {
    if (sForm.getChildren().length > 1) {
      if (null != sForm.getChildren()[1] && !sForm.getChildren()[1].isDisposed()) {
        sForm.getChildren()[1].dispose();
      }
      topComp.getParent().layout();
      topComp.layout();
    }
  }
 else {
    if (chartComposite != null && !chartComposite.isDisposed()) {
      disposeChartComposite();
      createPreviewCharts(form,chartComposite,true);
      chartComposite.getParent().layout();
      chartComposite.layout();
    }
 else {
      previewComp=toolkit.createComposite(sForm);
      previewComp.setLayoutData(new GridData(GridData.FILL_BOTH));
      previewComp.setLayout(new GridLayout());
      previewComp.addControlListener(new ControlAdapter(){
        @Override public void controlResized(        ControlEvent e){
          super.controlResized(e);
          sForm.redraw();
          form.reflow(true);
        }
      }
);
      createPreviewSection(form,previewComp);
      createPreviewCharts(form,chartComposite,false);
    }
  }
}",0.8083653435766112
137816,"public Composite[] getPreviewChartCompsites(){
  return previewChartCompsites;
}","public Composite[] getPreviewChartCompsites(){
  if (previewChartCompsites != null && previewChartCompsites.length > 0) {
    List<Composite> withOutDisposed=new ArrayList<Composite>();
    for (    Composite com : previewChartCompsites) {
      if (!com.isDisposed()) {
        withOutDisposed.add(com);
      }
    }
    this.previewChartCompsites=withOutDisposed.toArray(new ExpandableComposite[withOutDisposed.size()]);
  }
  return previewChartCompsites;
}",0.1922365988909427
137817,"private static Map<PatternToExcelEnum,String> getRelatedValueFromPattern(Pattern pattern,IFolder folder,boolean isForExchange){
  Map<PatternToExcelEnum,String> patternMap=new HashMap<PatternToExcelEnum,String>();
  if (folder != null) {
    IFile file=ResourceFileMap.findCorrespondingFile(pattern);
    String relativePath=null;
    if (isForExchange) {
      URI parentURI=ResourceManager.getPatternFolder().getLocationURI();
      relativePath=parentURI.relativize(file.getParent().getLocationURI()).toString();
      relativePath=relativePath.substring(relativePath.indexOf('/') + 1);
    }
 else {
      URI relativeURI=folder.getLocationURI().relativize(file.getParent().getLocationURI());
      relativePath=relativeURI == null ? PluginConstant.EMPTY_STRING : relativeURI.toString();
    }
    patternMap.put(PatternToExcelEnum.Label,pattern.getName());
    patternMap.put(PatternToExcelEnum.Purpose,MetadataHelper.getPurpose(pattern));
    patternMap.put(PatternToExcelEnum.Description,MetadataHelper.getDescription(pattern));
    patternMap.put(PatternToExcelEnum.Author,MetadataHelper.getAuthor(pattern));
    patternMap.put(PatternToExcelEnum.RelativePath,relativePath);
    for (    PatternLanguageType languagetype : PatternLanguageType.values()) {
      for (      PatternComponent component : pattern.getComponents()) {
        Expression expression=((RegularExpression)component).getExpression();
        if (expression != null && expression.getLanguage().equalsIgnoreCase(languagetype.getLiteral())) {
          patternMap.put(languagetype.getExcelEnum(),expression.getBody());
        }
      }
      if (!patternMap.containsKey(languagetype.getExcelEnum())) {
        patternMap.put(languagetype.getExcelEnum(),""String_Node_Str"");
      }
    }
  }
  return patternMap;
}","private static Map<PatternToExcelEnum,String> getRelatedValueFromPattern(Pattern pattern,IFolder folder){
  Map<PatternToExcelEnum,String> patternMap=new HashMap<PatternToExcelEnum,String>();
  if (folder != null) {
    IFile file=ResourceFileMap.findCorrespondingFile(pattern);
    String relativePath=null;
    URI parentURI=ResourceManager.getPatternFolder().getLocationURI();
    relativePath=parentURI.relativize(file.getParent().getLocationURI()).toString();
    relativePath=relativePath.substring(relativePath.indexOf('/') + 1);
    if (EResourceConstant.PATTERN_REGEX.getName().equals(relativePath) || EResourceConstant.PATTERN_SQL.getName().equals(relativePath)) {
      relativePath=PluginConstant.EMPTY_STRING;
    }
    patternMap.put(PatternToExcelEnum.Label,pattern.getName());
    patternMap.put(PatternToExcelEnum.Purpose,MetadataHelper.getPurpose(pattern));
    patternMap.put(PatternToExcelEnum.Description,MetadataHelper.getDescription(pattern));
    patternMap.put(PatternToExcelEnum.Author,MetadataHelper.getAuthor(pattern));
    patternMap.put(PatternToExcelEnum.RelativePath,relativePath);
    for (    PatternLanguageType languagetype : PatternLanguageType.values()) {
      for (      PatternComponent component : pattern.getComponents()) {
        Expression expression=((RegularExpression)component).getExpression();
        if (expression != null && expression.getLanguage().equalsIgnoreCase(languagetype.getLiteral())) {
          patternMap.put(languagetype.getExcelEnum(),expression.getBody());
        }
      }
      if (!patternMap.containsKey(languagetype.getExcelEnum())) {
        patternMap.put(languagetype.getExcelEnum(),""String_Node_Str"");
      }
    }
  }
  return patternMap;
}",0.90577853686308
137818,"@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof PatternRepNode) {
      PatternRepNode patternNode=(PatternRepNode)element;
      Pattern pattern=patternNode.getPattern();
      seletedPatterns.add(pattern);
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(isForExchange,resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
      for (      Pattern pattern : seletedPatterns) {
        File patternFile=new File(resource,ExportFactory.toLocalFileName(pattern.getName() + ""String_Node_Str""));
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (!isContinue) {
        return false;
      }
      ExportFactory.export(isForExchange,resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
    }
    CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERNS));
    CorePlugin.getDefault().refreshWorkSpace();
    return true;
  }
}","@Override public boolean performFinish(){
  String targetFile=page.getTargetFile();
  Object[] elements=page.getSelectedPatternsTree().getCheckedElements();
  List<Pattern> seletedPatterns=new ArrayList<Pattern>();
  for (  Object element : elements) {
    if (element instanceof PatternRepNode) {
      PatternRepNode patternNode=(PatternRepNode)element;
      Pattern pattern=patternNode.getPattern();
      seletedPatterns.add(pattern);
    }
  }
  if (""String_Node_Str"".equals(targetFile)) {
    MessageDialog.openError(getShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return false;
  }
 else {
    File resource=new File(targetFile);
    if (isForExchange) {
      ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
      for (      Pattern pattern : seletedPatterns) {
        File patternFile=new File(resource,ExportFactory.toLocalFileName(pattern.getName() + ""String_Node_Str""));
        if (patternFile.isFile() && patternFile.exists()) {
          try {
            FilesUtils.zip(patternFile,patternFile.getPath() + ""String_Node_Str"");
            patternFile.delete();
          }
 catch (          Exception e) {
            log.error(e.getMessage(),e);
          }
        }
      }
    }
 else {
      boolean isContinue=true;
      if (resource.exists()) {
        isContinue=MessageDialogWithToggle.openConfirm(null,DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
      }
      if (!isContinue) {
        return false;
      }
      ExportFactory.export(resource,folder,seletedPatterns.toArray(new Pattern[seletedPatterns.size()]));
    }
    CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getLibrariesFolderNode(EResourceConstant.PATTERNS));
    CorePlugin.getDefault().refreshWorkSpace();
    return true;
  }
}",0.9927234927234928
137819,"/** 
 * DOC yyi Comment method ""varifyImportFile"".
 * @param importFile
 */
private static String createAndStorePattern(PatternParameters parameters,IFolder selectionFolder,ExpressionType type){
  Pattern pattern=createPattern(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status);
  for (  String key : parameters.regex.keySet()) {
    RegularExpression regularExpr=BooleanExpressionHelper.createRegularExpression(key,parameters.regex.get(key),type);
    pattern.getComponents().add(regularExpr);
  }
  boolean validStatus=PatternUtilities.isPatternValid(pattern);
  TaggedValueHelper.setValidStatus(validStatus,pattern);
  String fname=DqRepositoryViewService.createFilename(parameters.name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  try {
    String[] folderNames=parameters.relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  ElementWriterFactory.getInstance().createPatternWriter().create(pattern,selectionFolder);
  return ResourceManager.getPatternFolder().getLocationURI().relativize(selectionFolder.getLocationURI()).toString();
}","/** 
 * DOC yyi Comment method ""varifyImportFile"".
 * @param importFile
 */
private static String createAndStorePattern(PatternParameters parameters,IFolder selectionFolder,ExpressionType type){
  Pattern pattern=createPattern(parameters.name,parameters.auther,parameters.description,parameters.purpose,parameters.status);
  for (  String key : parameters.regex.keySet()) {
    RegularExpression regularExpr=BooleanExpressionHelper.createRegularExpression(key,parameters.regex.get(key),type);
    pattern.getComponents().add(regularExpr);
  }
  boolean validStatus=PatternUtilities.isPatternValid(pattern);
  TaggedValueHelper.setValidStatus(validStatus,pattern);
  String fname=DqRepositoryViewService.createFilename(parameters.name,NewSourcePatternActionProvider.EXTENSION_PATTERN);
  try {
    String relativePath=parameters.relativePath;
    if (EResourceConstant.PATTERN_REGEX.getName().equals(relativePath) || EResourceConstant.PATTERN_SQL.getName().equals(relativePath)) {
      relativePath=PluginConstant.EMPTY_STRING;
    }
    String[] folderNames=relativePath.split(""String_Node_Str"");
    for (    String folderName : folderNames) {
      IFolder folder=selectionFolder.getFolder(folderName);
      if (!folder.exists()) {
        folder.create(false,true,null);
      }
      selectionFolder=folder;
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  IFile pfile=selectionFolder.getFile(fname);
  ElementWriterFactory.getInstance().createPatternWriter().create(pattern,selectionFolder);
  return ResourceManager.getPatternFolder().getLocationURI().relativize(selectionFolder.getLocationURI()).toString();
}",0.9170506912442395
137820,"private static String trimQuote(String text){
  if (text.length() < 2)   return text;
  int beginLen=0;
  int endLen=text.length();
  if ('\""' == text.charAt(beginLen) && '\""' == text.charAt(endLen - 1)) {
    return text.substring(1,endLen - 1);
  }
  return text;
}","private static String trimQuote(String text){
  if (text.length() < 2) {
    return text;
  }
  int beginLen=0;
  int endLen=text.length();
  if ('\""' == text.charAt(beginLen) && '\""' == text.charAt(endLen - 1)) {
    return text.substring(1,endLen - 1);
  }
  return text;
}",0.933579335793358
137821,"/** 
 * DOC xqliu Comment method ""importToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param type
 * @param skip
 * @param rename
 * @param importItemName
 * @return
 */
public static List<ReturnCode> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename,String importItemName){
  List<ReturnCode> importEvent=new ArrayList<ReturnCode>();
  Set<String> names=PatternUtilities.getNestFolderPatternNames(new HashSet<String>(),selectionFolder);
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(CsvReader.ESCAPE_MODE_DOUBLED);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        try {
          String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
          names.add(name);
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name,relativePath),true));
        }
 catch (        Exception e) {
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
        }
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents,relativePath),true));
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    IOException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  checkImportEvent(importItemName,importEvent);
  return importEvent;
}","/** 
 * DOC xqliu Comment method ""importToStucture"".
 * @param importFile
 * @param selectionFolder
 * @param type
 * @param skip
 * @param rename
 * @param importItemName
 * @return
 */
public static List<ReturnCode> importToStucture(File importFile,IFolder selectionFolder,ExpressionType type,boolean skip,boolean rename,String importItemName){
  List<ReturnCode> importEvent=new ArrayList<ReturnCode>();
  Set<String> names=PatternUtilities.getNestFolderPatternNames(new HashSet<String>(),ResourceManager.getPatternFolder());
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(CsvReader.ESCAPE_MODE_DOUBLED);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        String name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
          }
        }
        PatternParameters patternParameters=new ImportFactory().new PatternParameters();
        patternParameters.name=name;
        patternParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        patternParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        patternParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        patternParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=reader.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            patternParameters.regex.put(languagetype.getLiteral(),cellStr);
          }
        }
        try {
          String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
          names.add(name);
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name,relativePath),true));
        }
 catch (        Exception e) {
          importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
        }
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            String contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            PatternParameters patternParameters=new ImportFactory().new PatternParameters();
            patternParameters.name=contents;
            patternParameters.auther=row[6].getContents();
            patternParameters.description=row[2].getContents();
            patternParameters.purpose=row[1].getContents();
            patternParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                patternParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            String relativePath=""String_Node_Str"" + createAndStorePattern(patternParameters,selectionFolder,type);
            names.add(contents);
            importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents,relativePath),true));
          }
        }
      }
      rwb.close();
    }
 catch (    BiffException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
catch (    IOException e) {
      log.error(e,e);
      importEvent.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str""),false));
    }
  }
  checkImportEvent(importItemName,importEvent);
  return importEvent;
}",0.996849968499685
137822,"public String getDelimiter(){
  return DOT;
}","/** 
 * Getter for default SQL delimiter of the database. For the delimiter between catalog and schema, we should use   {@link #getCatalogDelimiter()} instead of this.
 * @return default SQL delimiter
 */
public String getDelimiter(){
  return DOT;
}",0.3050847457627119
137823,"public String toQualifiedName(String catalog,String schema,String table){
  StringBuffer qualName=new StringBuffer();
  if (catalog != null && catalog.trim().length() > 0) {
    qualName.append(this.handleContextModeOrAddQuotes(catalog));
    qualName.append(getDelimiter());
  }
  if (schema != null && schema.trim().length() > 0) {
    qualName.append(this.handleContextModeOrAddQuotes(schema));
    qualName.append(getSchemaDelimiter());
  }
  qualName.append(this.handleContextModeOrAddQuotes(table));
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",catalog,schema,table,qualName));
  }
  return qualName.toString();
}","public String toQualifiedName(String catalog,String schema,String table){
  StringBuffer qualName=new StringBuffer();
  if (catalog != null && catalog.trim().length() > 0) {
    qualName.append(this.handleContextModeOrAddQuotes(catalog));
    qualName.append(getCatalogDelimiter());
  }
  if (schema != null && schema.trim().length() > 0) {
    qualName.append(this.handleContextModeOrAddQuotes(schema));
    qualName.append(getDelimiter());
  }
  qualName.append(this.handleContextModeOrAddQuotes(table));
  if (log.isDebugEnabled()) {
    log.debug(String.format(""String_Node_Str"",catalog,schema,table,qualName));
  }
  return qualName.toString();
}",0.9900076863950809
137824,"private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (item == null || DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        Menu m=tree.getMenu();
        if (m != null && !m.isDisposed()) {
          m.dispose();
        }
        tree.setMenu(null);
      }
 else {
        new AnalysisColumnColumnMenuProvider(tree).createTreeMenu(Boolean.FALSE);
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      comp.layout();
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
 else {
        propertyChangeSupport.firePropertyChange(PluginConstant.EXPAND_TREE,null,e.item);
      }
      comp.layout();
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
        if (meobj != null && indicatorobj == null) {
          ModelElementIndicator[] modelElementIndicator=openIndicatorSelectDialog(null);
          if (modelElementIndicator.length > 0) {
            setElements(modelElementIndicator);
          }
        }
 else         if (meobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}","private void addTreeListener(final Tree tree){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TreeItem item=(TreeItem)e.item;
      if (item == null || DATA_PARAM.equals(item.getData(DATA_PARAM))) {
        Menu m=tree.getMenu();
        if (m != null && !m.isDisposed()) {
          m.dispose();
        }
        tree.setMenu(null);
      }
 else {
        new AnalysisColumnColumnMenuProvider(tree).createTreeMenu(Boolean.FALSE);
      }
    }
  }
);
  tree.addTreeListener(new TreeAdapter(){
    @Override public void treeCollapsed(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
        getTheSuitedComposite(e).setExpanded(false);
      }
      if (comp != null) {
        comp.layout();
      }
      form.reflow(true);
    }
    @Override public void treeExpanded(    TreeEvent e){
      ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
      ScrolledForm form=masterPage.getForm();
      Composite comp=masterPage.getChartComposite();
      if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
        theSuitedComposite.setExpanded(true);
      }
 else {
        propertyChangeSupport.firePropertyChange(PluginConstant.EXPAND_TREE,null,e.item);
      }
      if (comp != null) {
        comp.layout();
      }
      form.reflow(true);
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    @Override public void mouseDoubleClick(    MouseEvent e){
      TreeItem[] treeSelection=tree.getSelection();
      if (treeSelection.length > 0) {
        TreeItem item=treeSelection[0];
        Object indicatorobj=item.getData(INDICATOR_UNIT_KEY);
        Object meobj=item.getData(MODELELEMENT_INDICATOR_KEY);
        if (meobj != null && indicatorobj == null) {
          ModelElementIndicator[] modelElementIndicator=openIndicatorSelectDialog(null);
          if (modelElementIndicator.length > 0) {
            setElements(modelElementIndicator);
          }
        }
 else         if (meobj != null && indicatorobj != null) {
          openIndicatorOptionDialog(null,item);
        }
      }
    }
  }
);
}",0.9843953185955788
137825,"@Override public void treeExpanded(TreeEvent e){
  ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
  ScrolledForm form=masterPage.getForm();
  Composite comp=masterPage.getChartComposite();
  if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
    theSuitedComposite.setExpanded(true);
  }
 else {
    propertyChangeSupport.firePropertyChange(PluginConstant.EXPAND_TREE,null,e.item);
  }
  comp.layout();
  form.reflow(true);
}","@Override public void treeExpanded(TreeEvent e){
  ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
  ScrolledForm form=masterPage.getForm();
  Composite comp=masterPage.getChartComposite();
  if (theSuitedComposite != null && !theSuitedComposite.isExpanded()) {
    theSuitedComposite.setExpanded(true);
  }
 else {
    propertyChangeSupport.firePropertyChange(PluginConstant.EXPAND_TREE,null,e.item);
  }
  if (comp != null) {
    comp.layout();
  }
  form.reflow(true);
}",0.9705882352941176
137826,"@Override public void treeCollapsed(TreeEvent e){
  ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
  ScrolledForm form=masterPage.getForm();
  Composite comp=masterPage.getChartComposite();
  if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
    getTheSuitedComposite(e).setExpanded(false);
  }
  comp.layout();
  form.reflow(true);
}","@Override public void treeCollapsed(TreeEvent e){
  ExpandableComposite theSuitedComposite=getTheSuitedComposite(e);
  ScrolledForm form=masterPage.getForm();
  Composite comp=masterPage.getChartComposite();
  if (theSuitedComposite != null && theSuitedComposite.isExpanded()) {
    getTheSuitedComposite(e).setExpanded(false);
  }
  if (comp != null) {
    comp.layout();
  }
  form.reflow(true);
}",0.9636363636363636
137827,"/** 
 * update Mean/Median indicators definition by uuid.
 */
@Override protected boolean doExecute() throws Exception {
  DefinitionHandler definitionHandler=DefinitionHandler.getInstance();
  boolean isMeanAdded=true;
  boolean isMedianUpdated=true;
  IndicatorDefinition meanDefinition=definitionHandler.getDefinitionById(MEAN_UUID);
  if (meanDefinition != null && !IndicatorDefinitionFileHelper.isExistSqlExprWithLanguage(meanDefinition,DB2)) {
    IndicatorDefinitionFileHelper.addSqlExpression(meanDefinition,DB2,""String_Node_Str"");
    isMeanAdded=IndicatorDefinitionFileHelper.save(meanDefinition);
  }
  IndicatorDefinition medianDefinition=definitionHandler.getDefinitionById(MEDIAN_UUID);
  if (medianDefinition != null && IndicatorDefinitionFileHelper.removeSqlExpression(medianDefinition,DB2)) {
    IndicatorDefinitionFileHelper.removeSqlExpression(medianDefinition,SupportDBUrlType.ACCESS.getLanguage());
    List<TdExpression> remainExpLs=new ArrayList<TdExpression>();
    remainExpLs.addAll(medianDefinition.getSqlGenericExpression());
    medianDefinition.getSqlGenericExpression().clear();
    IndicatorDefinitionFileHelper.addSqlExpression(medianDefinition,DB2,""String_Node_Str"");
    medianDefinition.getSqlGenericExpression().addAll(remainExpLs);
    isMedianUpdated=IndicatorDefinitionFileHelper.save(medianDefinition);
  }
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  if (!isMeanAdded || !isMedianUpdated) {
    return false;
  }
  return true;
}","/** 
 * update Mean/Median indicators definition by uuid.
 */
@Override protected boolean doExecute() throws Exception {
  DefinitionHandler definitionHandler=DefinitionHandler.getInstance();
  boolean isMeanAdded=true;
  boolean isMedianUpdated=true;
  IndicatorDefinition meanDefinition=definitionHandler.getDefinitionById(MEAN_UUID);
  if (meanDefinition != null && !IndicatorDefinitionFileHelper.isExistSqlExprWithLanguage(meanDefinition,DB2)) {
    IndicatorDefinitionFileHelper.addSqlExpression(meanDefinition,DB2,""String_Node_Str"");
    isMeanAdded=IndicatorDefinitionFileHelper.save(meanDefinition);
  }
  IndicatorDefinition medianDefinition=definitionHandler.getDefinitionById(MEDIAN_UUID);
  if (medianDefinition != null && IndicatorDefinitionFileHelper.removeSqlExpression(medianDefinition,DB2)) {
    List<TdExpression> remainExpLs=new ArrayList<TdExpression>();
    remainExpLs.addAll(medianDefinition.getSqlGenericExpression());
    medianDefinition.getSqlGenericExpression().clear();
    IndicatorDefinitionFileHelper.addSqlExpression(medianDefinition,DB2,""String_Node_Str"");
    medianDefinition.getSqlGenericExpression().addAll(remainExpLs);
    isMedianUpdated=IndicatorDefinitionFileHelper.save(medianDefinition);
  }
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  if (!isMeanAdded || !isMedianUpdated) {
    return false;
  }
  return true;
}",0.9614181438998958
137828,"@Override protected boolean doExecute() throws Exception {
  IndicatorDefinition definition0=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH);
  IndicatorDefinition definition1=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_BLANK);
  IndicatorDefinition definition2=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition3=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_NULL);
  IndicatorDefinition definition4=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH);
  IndicatorDefinition definition5=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_BLANK);
  IndicatorDefinition definition6=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition7=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_NULL);
  IndicatorDefinition definition8=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH);
  IndicatorDefinition definition9=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_BLANK);
  IndicatorDefinition definition10=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition11=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_NULL);
  if (definition0 != null && definition1 != null && definition2 != null && definition3 != null && definition4 != null && definition5 != null && definition6 != null && definition7 != null && definition8 != null && definition9 != null && definition10 != null && definition11 != null) {
    IndicatorDefinitionFileHelper.addSqlExpression(definition0,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition1,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition2,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition3,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition4,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition5,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition6,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition7,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition8,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition9,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition10,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition11,SQLITE,""String_Node_Str"");
    return IndicatorDefinitionFileHelper.save(definition0) & IndicatorDefinitionFileHelper.save(definition1) & IndicatorDefinitionFileHelper.save(definition2)& IndicatorDefinitionFileHelper.save(definition3)& IndicatorDefinitionFileHelper.save(definition4)& IndicatorDefinitionFileHelper.save(definition5)& IndicatorDefinitionFileHelper.save(definition6)& IndicatorDefinitionFileHelper.save(definition7)& IndicatorDefinitionFileHelper.save(definition8)& IndicatorDefinitionFileHelper.save(definition9)& IndicatorDefinitionFileHelper.save(definition10)& IndicatorDefinitionFileHelper.save(definition11);
  }
  return false;
}","@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  for (  String indicatorName : TextStatisticsIndicators) {
    IndicatorDefinition indiDefinition=IndicatorDefinitionFileHelper.getSystemIndicatorByName(indicatorName);
    if (indiDefinition != null && IndicatorDefinitionFileHelper.removeSqlExpression(indiDefinition,SQLITE)) {
      String body=""String_Node_Str"";
      if (indicatorName.startsWith(""String_Node_Str"")) {
        body=BODY_AVERAGE;
      }
 else       if (indicatorName.startsWith(""String_Node_Str"")) {
        body=BODY_MAX;
      }
 else       if (indicatorName.startsWith(""String_Node_Str"")) {
        body=BODY_MIN;
      }
      List<TdExpression> remainExpLs=new ArrayList<TdExpression>();
      remainExpLs.addAll(indiDefinition.getSqlGenericExpression());
      indiDefinition.getSqlGenericExpression().clear();
      IndicatorDefinitionFileHelper.addSqlExpression(indiDefinition,SQLITE,body);
      indiDefinition.getSqlGenericExpression().addAll(remainExpLs);
      result=result && IndicatorDefinitionFileHelper.save(indiDefinition);
    }
  }
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  return result;
}",0.1359223300970873
137829,"/** 
 * update Mean/Median indicators definition by uuid.
 */
@Override protected boolean doExecute() throws Exception {
  DefinitionHandler definitionHandler=DefinitionHandler.getInstance();
  boolean isMeanAdded=true;
  boolean isMedianUpdated=true;
  IndicatorDefinition meanDefinition=definitionHandler.getDefinitionById(MEAN_UUID);
  if (meanDefinition != null && !IndicatorDefinitionFileHelper.isExistSqlExprWithLanguage(meanDefinition,DB2)) {
    IndicatorDefinitionFileHelper.addSqlExpression(meanDefinition,DB2,""String_Node_Str"");
    isMeanAdded=IndicatorDefinitionFileHelper.save(meanDefinition);
  }
  IndicatorDefinition medianDefinition=definitionHandler.getDefinitionById(MEDIAN_UUID);
  if (medianDefinition != null && IndicatorDefinitionFileHelper.removeSqlExpression(medianDefinition,DB2)) {
    IndicatorDefinitionFileHelper.removeSqlExpression(medianDefinition,SupportDBUrlType.ACCESS.getLanguage());
    List<TdExpression> remainExpLs=new ArrayList<TdExpression>();
    remainExpLs.addAll(medianDefinition.getSqlGenericExpression());
    medianDefinition.getSqlGenericExpression().clear();
    IndicatorDefinitionFileHelper.addSqlExpression(medianDefinition,DB2,""String_Node_Str"");
    medianDefinition.getSqlGenericExpression().addAll(remainExpLs);
    isMedianUpdated=IndicatorDefinitionFileHelper.save(medianDefinition);
  }
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  if (!isMeanAdded || !isMedianUpdated) {
    return false;
  }
  return true;
}","/** 
 * update Mean/Median indicators definition by uuid.
 */
@Override protected boolean doExecute() throws Exception {
  DefinitionHandler definitionHandler=DefinitionHandler.getInstance();
  boolean isMeanAdded=true;
  boolean isMedianUpdated=true;
  IndicatorDefinition meanDefinition=definitionHandler.getDefinitionById(MEAN_UUID);
  if (meanDefinition != null && !IndicatorDefinitionFileHelper.isExistSqlExprWithLanguage(meanDefinition,DB2)) {
    IndicatorDefinitionFileHelper.addSqlExpression(meanDefinition,DB2,""String_Node_Str"");
    isMeanAdded=IndicatorDefinitionFileHelper.save(meanDefinition);
  }
  IndicatorDefinition medianDefinition=definitionHandler.getDefinitionById(MEDIAN_UUID);
  if (medianDefinition != null && IndicatorDefinitionFileHelper.removeSqlExpression(medianDefinition,DB2)) {
    List<TdExpression> remainExpLs=new ArrayList<TdExpression>();
    remainExpLs.addAll(medianDefinition.getSqlGenericExpression());
    medianDefinition.getSqlGenericExpression().clear();
    IndicatorDefinitionFileHelper.addSqlExpression(medianDefinition,DB2,""String_Node_Str"");
    medianDefinition.getSqlGenericExpression().addAll(remainExpLs);
    isMedianUpdated=IndicatorDefinitionFileHelper.save(medianDefinition);
  }
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  if (!isMeanAdded || !isMedianUpdated) {
    return false;
  }
  return true;
}",0.9614181438998958
137830,"@Override protected boolean doExecute() throws Exception {
  IndicatorDefinition definition0=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH);
  IndicatorDefinition definition1=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_BLANK);
  IndicatorDefinition definition2=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition3=IndicatorDefinitionFileHelper.getSystemIndicatorByName(AVERAGE_LENGTH_WITH_NULL);
  IndicatorDefinition definition4=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH);
  IndicatorDefinition definition5=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_BLANK);
  IndicatorDefinition definition6=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition7=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MAXIMAL_LENGTH_WITH_NULL);
  IndicatorDefinition definition8=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH);
  IndicatorDefinition definition9=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_BLANK);
  IndicatorDefinition definition10=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_BLANK_AND_NULL);
  IndicatorDefinition definition11=IndicatorDefinitionFileHelper.getSystemIndicatorByName(MINIMAL_LENGTH_WITH_NULL);
  if (definition0 != null && definition1 != null && definition2 != null && definition3 != null && definition4 != null && definition5 != null && definition6 != null && definition7 != null && definition8 != null && definition9 != null && definition10 != null && definition11 != null) {
    IndicatorDefinitionFileHelper.addSqlExpression(definition0,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition1,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition2,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition3,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition4,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition5,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition6,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition7,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition8,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition9,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition10,SQLITE,""String_Node_Str"");
    IndicatorDefinitionFileHelper.addSqlExpression(definition11,SQLITE,""String_Node_Str"");
    return IndicatorDefinitionFileHelper.save(definition0) & IndicatorDefinitionFileHelper.save(definition1) & IndicatorDefinitionFileHelper.save(definition2)& IndicatorDefinitionFileHelper.save(definition3)& IndicatorDefinitionFileHelper.save(definition4)& IndicatorDefinitionFileHelper.save(definition5)& IndicatorDefinitionFileHelper.save(definition6)& IndicatorDefinitionFileHelper.save(definition7)& IndicatorDefinitionFileHelper.save(definition8)& IndicatorDefinitionFileHelper.save(definition9)& IndicatorDefinitionFileHelper.save(definition10)& IndicatorDefinitionFileHelper.save(definition11);
  }
  return false;
}","@Override protected boolean doExecute() throws Exception {
  boolean result=true;
  for (  String indicatorName : TextStatisticsIndicators) {
    IndicatorDefinition indiDefinition=IndicatorDefinitionFileHelper.getSystemIndicatorByName(indicatorName);
    if (indiDefinition != null && IndicatorDefinitionFileHelper.removeSqlExpression(indiDefinition,SQLITE)) {
      String body=""String_Node_Str"";
      if (indicatorName.startsWith(""String_Node_Str"")) {
        body=BODY_AVERAGE;
      }
 else       if (indicatorName.startsWith(""String_Node_Str"")) {
        body=BODY_MAX;
      }
 else       if (indicatorName.startsWith(""String_Node_Str"")) {
        body=BODY_MIN;
      }
      List<TdExpression> remainExpLs=new ArrayList<TdExpression>();
      remainExpLs.addAll(indiDefinition.getSqlGenericExpression());
      indiDefinition.getSqlGenericExpression().clear();
      IndicatorDefinitionFileHelper.addSqlExpression(indiDefinition,SQLITE,body);
      indiDefinition.getSqlGenericExpression().addAll(remainExpLs);
      result=result && IndicatorDefinitionFileHelper.save(indiDefinition);
    }
  }
  DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
  return result;
}",0.1359223300970873
137831,"public ReturnCode execute(TdReport report) throws AnalysisExecutionException {
  atLeastOneFailure=false;
  long startTime=System.currentTimeMillis();
  EList<AnalysisMap> analysisMaps=report.getAnalysisMap();
  StringBuilder strBuilder=new StringBuilder();
  for (  AnalysisMap analysisMap : analysisMaps) {
    Analysis analysis=analysisMap.getAnalysis();
    if (analysisMap.isMustRefresh()) {
      if (analysis == null) {
        return new ReturnCode(Messages.getString(""String_Node_Str"",report.getName()),false);
      }
      ReturnCode executeRc=AnalysisExecutorSelector.executeAnalysis(analysis);
      if (executeRc.getMessage() != null) {
        throw new AnalysisExecutionException(Messages.getString(""String_Node_Str"",analysis.getName(),executeRc.getMessage()));
      }
      TdqAnalysisConnectionPool connectionPool=TdqAnalysisConnectionPool.getConnectionPool(analysis);
      if (connectionPool != null) {
        connectionPool.closeConnectionPool();
      }
      if (!executeRc.isOk()) {
        log.error(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ executeRc.getMessage());
        atLeastOneFailure=true;
      }
      if (log.isInfoEnabled()) {
        strBuilder.append(""String_Node_Str"" + report.getName() + ""String_Node_Str""+ analysis.getName()+ ""String_Node_Str""+ executeRc.isOk()+ ""String_Node_Str"");
      }
    }
 else {
      if (log.isInfoEnabled()) {
        strBuilder.append(""String_Node_Str"" + report.getName() + ""String_Node_Str""+ analysis.getName()+ ""String_Node_Str"");
      }
    }
  }
  if (log.isInfoEnabled()) {
    if (strBuilder.length() == 0) {
      log.info(""String_Node_Str"" + report.getName() + ""String_Node_Str"");
    }
 else {
      log.info(strBuilder.toString());
    }
  }
  long endTime=System.currentTimeMillis();
  ExecutionInformations execInformations=ReportHelper.getExecutionInformations(report);
  execInformations.setExecutionDate(new Date(startTime));
  int duration=(int)(endTime - startTime);
  execInformations.setExecutionDuration(duration);
  execInformations.setExecutionNumber(execInformations.getExecutionNumber() + 1);
  if (atLeastOneFailure) {
    execInformations.setLastRunOk(false);
    String err=Messages.getString(""String_Node_Str"",report.getName());
    execInformations.setMessage(err);
    return new ReturnCode(err,false);
  }
  execInformations.setLastRunOk(true);
  execInformations.setLastExecutionNumberOk(execInformations.getExecutionNumber());
  execInformations.setMessage(null);
  return new ReturnCode();
}","public ReturnCode execute(TdReport report) throws AnalysisExecutionException {
  atLeastOneFailure=false;
  long startTime=System.currentTimeMillis();
  if (report.eIsProxy()) {
    report=(TdReport)EObjectHelper.resolveObject(report);
  }
  EList<AnalysisMap> analysisMaps=report.getAnalysisMap();
  StringBuilder strBuilder=new StringBuilder();
  for (  AnalysisMap analysisMap : analysisMaps) {
    Analysis analysis=analysisMap.getAnalysis();
    if (analysisMap.isMustRefresh()) {
      if (analysis == null) {
        return new ReturnCode(Messages.getString(""String_Node_Str"",report.getName()),false);
      }
      ReturnCode executeRc=AnalysisExecutorSelector.executeAnalysis(analysis);
      if (executeRc.getMessage() != null) {
        throw new AnalysisExecutionException(Messages.getString(""String_Node_Str"",analysis.getName(),executeRc.getMessage()));
      }
      TdqAnalysisConnectionPool connectionPool=TdqAnalysisConnectionPool.getConnectionPool(analysis);
      if (connectionPool != null) {
        connectionPool.closeConnectionPool();
      }
      if (!executeRc.isOk()) {
        log.error(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ executeRc.getMessage());
        atLeastOneFailure=true;
      }
      if (log.isInfoEnabled()) {
        strBuilder.append(""String_Node_Str"" + report.getName() + ""String_Node_Str""+ analysis.getName()+ ""String_Node_Str""+ executeRc.isOk()+ ""String_Node_Str"");
      }
    }
 else {
      if (log.isInfoEnabled()) {
        strBuilder.append(""String_Node_Str"" + report.getName() + ""String_Node_Str""+ analysis.getName()+ ""String_Node_Str"");
      }
    }
  }
  if (log.isInfoEnabled()) {
    if (strBuilder.length() == 0) {
      log.info(""String_Node_Str"" + report.getName() + ""String_Node_Str"");
    }
 else {
      log.info(strBuilder.toString());
    }
  }
  long endTime=System.currentTimeMillis();
  ExecutionInformations execInformations=ReportHelper.getExecutionInformations(report);
  execInformations.setExecutionDate(new Date(startTime));
  int duration=(int)(endTime - startTime);
  execInformations.setExecutionDuration(duration);
  execInformations.setExecutionNumber(execInformations.getExecutionNumber() + 1);
  if (atLeastOneFailure) {
    execInformations.setLastRunOk(false);
    String err=Messages.getString(""String_Node_Str"",report.getName());
    execInformations.setMessage(err);
    return new ReturnCode(err,false);
  }
  execInformations.setLastRunOk(true);
  execInformations.setLastExecutionNumberOk(execInformations.getExecutionNumber());
  execInformations.setMessage(null);
  return new ReturnCode();
}",0.9826341463414634
137832,"public ReturnCode execute(TdReport report){
  atLeastOneFailure=false;
  long startTime=System.currentTimeMillis();
  EList<AnalysisMap> analysisMaps=report.getAnalysisMap();
  StringBuilder strBuilder=new StringBuilder();
  for (  AnalysisMap analysisMap : analysisMaps) {
    Analysis analysis=analysisMap.getAnalysis();
    if (analysisMap.isMustRefresh()) {
      if (analysis == null) {
        return new ReturnCode(Messages.getString(""String_Node_Str"",report.getName()),false);
      }
      ReturnCode executeRc=AnalysisExecutorSelector.executeAnalysis(analysis);
      TdqAnalysisConnectionPool connectionPool=TdqAnalysisConnectionPool.getConnectionPool(analysis);
      if (connectionPool != null) {
        connectionPool.closeConnectionPool();
      }
      if (executeRc.getMessage() != null) {
        final Analysis finalAnalysis=analysis;
        final ReturnCode finalExecuteRc=executeRc;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            MessageDialogWithToggle.openError(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",finalAnalysis.getName(),finalExecuteRc.getMessage()));
          }
        }
);
      }
      if (!executeRc.isOk()) {
        log.error(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ executeRc.getMessage());
        atLeastOneFailure=true;
      }
      if (log.isInfoEnabled()) {
        strBuilder.append(""String_Node_Str"" + report.getName() + ""String_Node_Str""+ analysis.getName()+ ""String_Node_Str""+ executeRc.isOk()+ ""String_Node_Str"");
      }
    }
 else {
      if (log.isInfoEnabled()) {
        strBuilder.append(""String_Node_Str"" + report.getName() + ""String_Node_Str""+ analysis.getName()+ ""String_Node_Str"");
      }
    }
  }
  if (log.isInfoEnabled()) {
    if (strBuilder.length() == 0) {
      log.info(""String_Node_Str"" + report.getName() + ""String_Node_Str"");
    }
 else {
      log.info(strBuilder.toString());
    }
  }
  long endTime=System.currentTimeMillis();
  ExecutionInformations execInformations=ReportHelper.getExecutionInformations(report);
  execInformations.setExecutionDate(new Date());
  int duration=(int)(endTime - startTime);
  execInformations.setExecutionDuration(duration);
  execInformations.setExecutionNumber(execInformations.getExecutionNumber() + 1);
  if (atLeastOneFailure) {
    execInformations.setLastRunOk(false);
    String err=Messages.getString(""String_Node_Str"",report.getName());
    execInformations.setMessage(err);
    return new ReturnCode(err,false);
  }
  execInformations.setLastRunOk(true);
  execInformations.setLastExecutionNumberOk(execInformations.getExecutionNumber());
  execInformations.setMessage(null);
  return new ReturnCode();
}","public ReturnCode execute(TdReport report){
  atLeastOneFailure=false;
  long startTime=System.currentTimeMillis();
  if (report.eIsProxy()) {
    report=(TdReport)EObjectHelper.resolveObject(report);
  }
  EList<AnalysisMap> analysisMaps=report.getAnalysisMap();
  StringBuilder strBuilder=new StringBuilder();
  for (  AnalysisMap analysisMap : analysisMaps) {
    Analysis analysis=analysisMap.getAnalysis();
    if (analysisMap.isMustRefresh()) {
      if (analysis == null) {
        return new ReturnCode(Messages.getString(""String_Node_Str"",report.getName()),false);
      }
      ReturnCode executeRc=AnalysisExecutorSelector.executeAnalysis(analysis);
      TdqAnalysisConnectionPool connectionPool=TdqAnalysisConnectionPool.getConnectionPool(analysis);
      if (connectionPool != null) {
        connectionPool.closeConnectionPool();
      }
      if (executeRc.getMessage() != null) {
        final Analysis finalAnalysis=analysis;
        final ReturnCode finalExecuteRc=executeRc;
        Display.getDefault().syncExec(new Runnable(){
          public void run(){
            MessageDialogWithToggle.openError(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",finalAnalysis.getName(),finalExecuteRc.getMessage()));
          }
        }
);
      }
      if (!executeRc.isOk()) {
        log.error(""String_Node_Str"" + analysis.getName() + ""String_Node_Str""+ executeRc.getMessage());
        atLeastOneFailure=true;
      }
      if (log.isInfoEnabled()) {
        strBuilder.append(""String_Node_Str"" + report.getName() + ""String_Node_Str""+ analysis.getName()+ ""String_Node_Str""+ executeRc.isOk()+ ""String_Node_Str"");
      }
    }
 else {
      if (log.isInfoEnabled()) {
        strBuilder.append(""String_Node_Str"" + report.getName() + ""String_Node_Str""+ analysis.getName()+ ""String_Node_Str"");
      }
    }
  }
  if (log.isInfoEnabled()) {
    if (strBuilder.length() == 0) {
      log.info(""String_Node_Str"" + report.getName() + ""String_Node_Str"");
    }
 else {
      log.info(strBuilder.toString());
    }
  }
  long endTime=System.currentTimeMillis();
  ExecutionInformations execInformations=ReportHelper.getExecutionInformations(report);
  execInformations.setExecutionDate(new Date());
  int duration=(int)(endTime - startTime);
  execInformations.setExecutionDuration(duration);
  execInformations.setExecutionNumber(execInformations.getExecutionNumber() + 1);
  if (atLeastOneFailure) {
    execInformations.setLastRunOk(false);
    String err=Messages.getString(""String_Node_Str"",report.getName());
    execInformations.setMessage(err);
    return new ReturnCode(err,false);
  }
  execInformations.setLastRunOk(true);
  execInformations.setLastExecutionNumberOk(execInformations.getExecutionNumber());
  execInformations.setMessage(null);
  return new ReturnCode();
}",0.9839841641173296
137833,"/** 
 * Test the text by the regular text of regularText.
 */
private void testRegularText(){
  if (isJavaEngine) {
    String regexStr=regularText.getText();
    if (regexStr.length() >= 2) {
      regexStr=regexStr.substring(1,regexStr.length() - 1);
    }
    boolean flag=java.util.regex.Pattern.compile(regexStr).matcher(testText.getText()).find();
    if (flag) {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
 else {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
  }
 else {
    for (    IRepositoryNode connRepNode : listTdDataProviders) {
      ConnectionItem connItem=(ConnectionItem)connRepNode.getObject().getProperty().getItem();
      Connection tddataprovider=connItem.getConnection();
      if (tddataprovider.getName().equals(dbCombo.getText())) {
        DbmsLanguage createDbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tddataprovider);
        if (null != createDbmsLanguage) {
          createDbmsLanguage.setFunctionName(getFunctionName());
        }
        String selectRegexpTestString=createDbmsLanguage.getSelectRegexpTestString(testText.getText(),regularText.getText());
        TypedReturnCode<java.sql.Connection> rcConn=JavaSqlFactory.createConnection(tddataprovider);
        try {
          if (!rcConn.isOk()) {
            throw new DataprofilerCoreException(rcConn.getMessage());
          }
          java.sql.Connection connection=rcConn.getObject();
          Statement createStatement=connection.createStatement();
          ResultSet resultSet=createStatement.executeQuery(selectRegexpTestString);
          while (resultSet.next()) {
            String okString=resultSet.getString(1);
            if (""String_Node_Str"".equalsIgnoreCase(okString) || (createDbmsLanguage.getDbmsName().equals(SupportDBUrlType.POSTGRESQLEFAULTURL.getLanguage()) && ""String_Node_Str"".equalsIgnoreCase(okString))) {
              emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
              resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              return;
            }
          }
          emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
          resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          return;
        }
 catch (        Exception exception) {
          log.error(exception,exception);
          String exceptionName=exception.getClass().getName();
          Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
          MessageBoxExceptionHandler.process(exception,shell,exceptionName);
          emoticonLabel.setImage(null);
          return;
        }
 finally {
          ConnectionUtils.closeConnection(rcConn.getObject());
        }
      }
    }
  }
  MessageDialog.openWarning(new Shell(),""String_Node_Str"",NO_DATABASE_SELECTEDED);
}","/** 
 * Test the text by the regular text of regularText.
 */
private void testRegularText(){
  if (isJavaEngine) {
    String regexStr=regularText.getText();
    if (regexStr.length() >= 2 && regexStr.startsWith(""String_Node_Str"") && regexStr.endsWith(""String_Node_Str"")) {
      regexStr=regexStr.substring(1,regexStr.length() - 1);
    }
    boolean flag=java.util.regex.Pattern.compile(regexStr).matcher(testText.getText()).find();
    if (flag) {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
 else {
      emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
      resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
      return;
    }
  }
 else {
    for (    IRepositoryNode connRepNode : listTdDataProviders) {
      ConnectionItem connItem=(ConnectionItem)connRepNode.getObject().getProperty().getItem();
      Connection tddataprovider=connItem.getConnection();
      if (tddataprovider.getName().equals(dbCombo.getText())) {
        DbmsLanguage createDbmsLanguage=DbmsLanguageFactory.createDbmsLanguage(tddataprovider);
        if (null != createDbmsLanguage) {
          createDbmsLanguage.setFunctionName(getFunctionName());
        }
        String selectRegexpTestString=createDbmsLanguage.getSelectRegexpTestString(testText.getText(),regularText.getText());
        TypedReturnCode<java.sql.Connection> rcConn=JavaSqlFactory.createConnection(tddataprovider);
        try {
          if (!rcConn.isOk()) {
            throw new DataprofilerCoreException(rcConn.getMessage());
          }
          java.sql.Connection connection=rcConn.getObject();
          Statement createStatement=connection.createStatement();
          ResultSet resultSet=createStatement.executeQuery(selectRegexpTestString);
          while (resultSet.next()) {
            String okString=resultSet.getString(1);
            if (""String_Node_Str"".equalsIgnoreCase(okString) || (createDbmsLanguage.getDbmsName().equals(SupportDBUrlType.POSTGRESQLEFAULTURL.getLanguage()) && ""String_Node_Str"".equalsIgnoreCase(okString))) {
              emoticonLabel.setImage(ImageLib.getImage(ImageLib.EMOTICON_SMILE));
              resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
              return;
            }
          }
          emoticonLabel.setImage(ImageLib.getImage(ImageLib.EXCLAMATION));
          resultLabel.setText(DefaultMessagesImpl.getString(""String_Node_Str""));
          return;
        }
 catch (        Exception exception) {
          log.error(exception,exception);
          String exceptionName=exception.getClass().getName();
          Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
          MessageBoxExceptionHandler.process(exception,shell,exceptionName);
          emoticonLabel.setImage(null);
          return;
        }
 finally {
          ConnectionUtils.closeConnection(rcConn.getObject());
        }
      }
    }
  }
  MessageDialog.openWarning(new Shell(),""String_Node_Str"",NO_DATABASE_SELECTEDED);
}",0.986735684244581
137834,"/** 
 * Test method for   {@link org.talend.dq.helper.ReportUtils#getReportListFile(org.eclipse.core.resources.IFile)}.
 */
@Test public void testGetReportListFile(){
  if (this.realProject != null) {
    String folderName1=ERepositoryObjectType.TDQ_DATA_PROFILING.getFolder();
    String folderName2=ERepositoryObjectType.TDQ_REPORT_ELEMENT.getFolder();
    String reportName=""String_Node_Str"" + StringUtilities.getRandomString(7);
    UnitTestBuildHelper.createRealFolder(this.realProject,folderName1);
    IFolder folder2=UnitTestBuildHelper.createRealFolder(this.realProject,folderName2);
    IFile iFile=UnitTestBuildHelper.createRealFile(folder2,reportName + ""String_Node_Str"");
    assertTrue(iFile.exists());
    assertTrue(WorkspaceUtils.ifileToFile(iFile).exists());
    try {
      File reportListFile=ReportUtils.getReportListFile(iFile);
      assertTrue(reportListFile.exists());
    }
 catch (    IOException e) {
      fail(e.getMessage());
    }
  }
 else {
    fail(""String_Node_Str"");
  }
}","/** 
 * Test method for   {@link org.talend.dq.helper.ReportUtils#getReportListFile(org.eclipse.core.resources.IFile)}.
 */
@Test public void testGetReportListFile(){
  if (this.realProject != null) {
    String folderName1=ERepositoryObjectType.TDQ_DATA_PROFILING.getFolder();
    String folderName2=ERepositoryObjectType.TDQ_REPORT_ELEMENT.getFolder();
    String reportName=""String_Node_Str"" + StringUtilities.getRandomString(7);
    UnitTestBuildHelper.createRealFolder(this.realProject,folderName1);
    IFolder folder2=UnitTestBuildHelper.createRealFolder(this.realProject,folderName2);
    IFile iFile=UnitTestBuildHelper.createRealFile(folder2,reportName + ""String_Node_Str"");
    assertTrue(iFile.exists());
    assertTrue(WorkspaceUtils.ifileToFile(iFile).exists());
    File reportListFile=ReportUtils.getReportListFile(iFile);
    assertTrue(reportListFile.exists());
  }
 else {
    fail(""String_Node_Str"");
  }
}",0.8196382428940568
137835,"/** 
 * Test method for   {@link org.talend.dq.nodes.ReportSubFolderRepNode#setReport(orgomg.cwmx.analysis.informationreporting.Report)}.
 */
@Test public void testSetReport(){
}","/** 
 * Test method for  {@link org.talend.dq.nodes.ReportSubFolderRepNode#setReport(orgomg.cwmx.analysis.informationreporting.Report)}.
 */
@Test public void testSetReport(){
}",0.9971830985915492
137836,"/** 
 * Test method for   {@link org.talend.dq.nodes.ReportSubFolderRepNode#setReportSubFolderType(org.talend.dq.nodes.ReportSubFolderRepNode.ReportSubFolderType)}.
 */
@Test public void testSetReportSubFolderType(){
}","/** 
 * Test method for  {@link org.talend.dq.nodes.ReportSubFolderRepNode#setReportSubFolderType(org.talend.dq.nodes.ReportSubFolderRepNode.ReportSubFolderType)}.
 */
@Test public void testSetReportSubFolderType(){
}",0.9977011494252872
137837,"private void mockForGetChildren() throws Exception {
  IResource[] res=new IResource[3];
  for (int i=0; i < 3; i++) {
    IFile fe=mock(IFile.class);
    when(fe.getFullPath()).thenReturn(new Path(""String_Node_Str""));
    res[i]=fe;
  }
  PowerMockito.mockStatic(ReportUtils.class);
  IFile repFile=mock(IFile.class);
  when(ReportUtils.getReportListFiles(repFile)).thenReturn(res);
  PowerMockito.mockStatic(ResourceFileMap.class);
  when(ResourceFileMap.findCorrespondingFile(report)).thenReturn(repFile);
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager projManager=mock(ProjectManager.class);
  when(projManager.getProjectNode(""String_Node_Str"")).thenReturn(null);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  CoreRuntimePlugin coreRunPlugin=mock(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRunPlugin).thenReturn(coreRunPlugin).thenReturn(coreRunPlugin);
  when(ProjectManager.getInstance()).thenReturn(projManager).thenReturn(projManager).thenReturn(projManager);
}","private void mockForGetChildren() throws Exception {
  IResource[] res=new IResource[3];
  for (int i=0; i < 3; i++) {
    IFile fe=mock(IFile.class);
    when(fe.getFullPath()).thenReturn(new Path(""String_Node_Str""));
    res[i]=fe;
  }
  PowerMockito.mockStatic(ReportUtils.class);
  IFile repFile=mock(IFile.class);
  when(ReportUtils.getReportGeneratedDocs(repFile)).thenReturn(res);
  PowerMockito.mockStatic(ResourceFileMap.class);
  when(ResourceFileMap.findCorrespondingFile(report)).thenReturn(repFile);
  PowerMockito.mockStatic(ProjectManager.class);
  ProjectManager projManager=mock(ProjectManager.class);
  when(projManager.getProjectNode(""String_Node_Str"")).thenReturn(null);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  CoreRuntimePlugin coreRunPlugin=mock(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRunPlugin).thenReturn(coreRunPlugin).thenReturn(coreRunPlugin);
  when(ProjectManager.getInstance()).thenReturn(projManager).thenReturn(projManager).thenReturn(projManager);
}",0.9903474903474904
137838,"/** 
 * Test method for   {@link org.talend.dq.nodes.ReportSubFolderRepNode#ReportSubFolderRepNode(org.talend.core.model.repository.IRepositoryViewObject,org.talend.repository.model.RepositoryNode,org.talend.repository.model.IRepositoryNode.ENodeType)}.
 */
@Test public void testReportSubFolderRepNode(){
}","/** 
 * Test method for  {@link org.talend.dq.nodes.ReportSubFolderRepNode#ReportSubFolderRepNode(org.talend.core.model.repository.IRepositoryViewObject,org.talend.repository.model.RepositoryNode,org.talend.repository.model.IRepositoryNode.ENodeType)}.
 */
@Test public void testReportSubFolderRepNode(){
}",0.99836867862969
137839,"public void openEditor(Item item){
  Class<?> clazz=null;
  IEditorInput editorInput=null;
  if (item instanceof ConnectionItem) {
    clazz=ConnectionEditor.class;
    editorInput=new ConnectionItemEditorInput(item);
  }
  if (editorInput != null && clazz != null) {
    CorePlugin.getDefault().closeEditorIfOpened(item);
    CorePlugin.getDefault().openEditor(editorInput,clazz.getName());
  }
}","public void openEditor(Item item){
  Class<?> clazz=null;
  IEditorInput editorInput=null;
  if (item instanceof ConnectionItem) {
    clazz=ConnectionEditor.class;
    editorInput=new ConnectionItemEditorInput(item);
  }
  if (editorInput != null && clazz != null) {
    boolean isOpenedThenClosed=CorePlugin.getDefault().itemIsOpening(item,true);
    if (isOpenedThenClosed || CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
      CorePlugin.getDefault().openEditor(editorInput,clazz.getName());
    }
  }
}",0.6724137931034483
137840,"public void doSave(IProgressMonitor monitor){
  if (masterPage.isDirty()) {
    masterPage.doSave(monitor);
    setPartName(masterPage.getIntactElemenetName());
    ConnectionItem item=(ConnectionItem)((ConnectionItemEditorInput)this.getEditorInput()).getItem();
    if (item instanceof DatabaseConnectionItem) {
      String name=((DatabaseConnectionItem)item).getConnection().getName();
      CWMPlugin.getDefault().updateAliasInSQLExplorer(masterPage.getOldDataproviderName(),name);
      masterPage.setOldDataproviderName(name);
    }
  }
  setEditorObject(masterPage.getConnectionRepNode());
  super.doSave(monitor);
}","@Override public void doSave(IProgressMonitor monitor){
  if (masterPage.isDirty()) {
    masterPage.doSave(monitor);
    setPartName(masterPage.getIntactElemenetName());
    ConnectionItem item=(ConnectionItem)((ConnectionItemEditorInput)this.getEditorInput()).getItem();
    if (item instanceof DatabaseConnectionItem) {
      String name=((DatabaseConnectionItem)item).getConnection().getName();
      CWMPlugin.getDefault().updateConnetionAliasByName(item.getConnection(),masterPage.getOldDataproviderName());
      masterPage.setOldDataproviderName(name);
    }
  }
  setEditorObject(masterPage.getConnectionRepNode());
  super.doSave(monitor);
}",0.9481946624803768
137841,"protected void firePropertyChange(final int propertyId){
  super.firePropertyChange(propertyId);
}","@Override protected void firePropertyChange(final int propertyId){
  super.firePropertyChange(propertyId);
}",0.9514563106796116
137842,"protected void addPages(){
  masterPage=new ConnectionInfoPage(this,ID,DefaultMessagesImpl.getString(""String_Node_Str""));
  try {
    addPage(masterPage);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
  setPartName(masterPage.getIntactElemenetName());
}","@Override protected void addPages(){
  masterPage=new ConnectionInfoPage(this,ID,DefaultMessagesImpl.getString(""String_Node_Str""));
  try {
    addPage(masterPage);
  }
 catch (  PartInitException e) {
    MessageBoxExceptionHandler.process(e);
  }
  setPartName(masterPage.getIntactElemenetName());
}",0.983108108108108
137843,"protected void setInput(IEditorInput input){
  super.setInput(input);
}","@Override protected void setInput(IEditorInput input){
  super.setInput(input);
}",0.9342105263157896
137844,"private void saveConnectionInfo() throws DataprofilerCoreException {
  if (connection != null && connection.eIsProxy()) {
    connection=(Connection)EObjectHelper.resolveObject(connection);
  }
  ConnectionUtils.checkUsernameBeforeSaveConnection4Sqlite(connection);
  ReturnCode returnCode=ElementWriterFactory.getInstance().createDataProviderWriter().save(connection);
  if (returnCode.isOk()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + connection.eResource().getURI().toFileString() + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",connection.eResource().getURI().toFileString(),returnCode.getMessage()));
  }
}","private void saveConnectionInfo() throws DataprofilerCoreException {
  if (connection != null && connection.eIsProxy()) {
    connection=(Connection)EObjectHelper.resolveObject(connection);
  }
  ConnectionUtils.checkUsernameBeforeSaveConnection4Sqlite(connection);
  ReturnCode returnCode=ElementWriterFactory.getInstance().createDataProviderWriter().save(connectionItem,true);
  if (returnCode.isOk()) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + connection.eResource().getURI().toFileString() + ""String_Node_Str"");
    }
  }
 else {
    throw new DataprofilerCoreException(DefaultMessagesImpl.getString(""String_Node_Str"",connection.eResource().getURI().toFileString(),returnCode.getMessage()));
  }
}",0.9937802349689012
137845,"@Override protected ModelElement getCurrentModelElement(FormEditor editor){
  IEditorInput editorInput=editor.getEditorInput();
  if (editorInput instanceof ConnectionItemEditorInput) {
    ConnectionItemEditorInput input=(ConnectionItemEditorInput)editorInput;
    connectionItem=input.getItem();
    connection=((ConnectionItem)input.getItem()).getConnection();
  }
 else   if (editorInput instanceof FileEditorInput) {
    Property proty=PropertyHelper.getProperty(((FileEditorInput)editorInput).getFile());
    Item item=proty.getItem();
    if (item instanceof ConnectionItem) {
      connectionItem=(ConnectionItem)item;
      connection=((ConnectionItem)item).getConnection();
    }
  }
  initConnectionRepNode(connection);
  return connection;
}","@Override protected ModelElement getCurrentModelElement(FormEditor editor){
  IEditorInput editorInput=editor.getEditorInput();
  if (editorInput instanceof ConnectionItemEditorInput) {
    ConnectionItemEditorInput input=(ConnectionItemEditorInput)editorInput;
    connectionItem=input.getItem();
    connection=((ConnectionItem)input.getItem()).getConnection();
  }
 else   if (editorInput instanceof FileEditorInput) {
    Property proty=PropertyHelper.getProperty(((FileEditorInput)editorInput).getFile());
    Item item=proty.getItem();
    if (item instanceof ConnectionItem) {
      connectionItem=item;
      connection=((ConnectionItem)item).getConnection();
    }
  }
  initConnectionRepNode(connection);
  return connection;
}",0.9892617449664428
137846,"/** 
 * DOC xqliu Comment method ""runAnalysisIndicatorsParallel"".
 * @param analysis
 * @param elementToIndicator
 * @param indicators
 * @param pooledConnection
 * @return
 * @throws SQLException
 */
private boolean runAnalysisIndicatorsParallel(Analysis analysis,Map<ModelElement,List<Indicator>> elementToIndicator,List<Indicator> indicators,boolean pooledConnection) throws SQLException {
  resetConnectionPool(analysis);
  List<ExecutiveAnalysisJob> excuteAnalysisJober=new ArrayList<ExecutiveAnalysisJob>();
  try {
    List<ExecutiveAnalysisJob> jobs=new ArrayList<ExecutiveAnalysisJob>();
    this.getMonitor().beginTask(""String_Node_Str"",100);
    int temp=0;
    for (int i=0; i < indicators.size(); i++) {
      Indicator indicator=indicators.get(i);
      if (this.continueRun()) {
        this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"") + indicator.getAnalyzedElement().getName());
        Connection conn=null;
        if (pooledConnection) {
          conn=getPooledConnection(analysis).getObject();
        }
 else {
          conn=getConnection(analysis).getObject();
        }
        if (conn != null) {
          ExecutiveAnalysisJob eaj=new ExecutiveAnalysisJob(ColumnAnalysisSqlExecutor.this,conn,elementToIndicator,indicator);
          excuteAnalysisJober.add(eaj);
          eaj.schedule();
          jobs.add(eaj);
          if (this.continueRun()) {
            eaj.join();
          }
          if (eaj.errorMessage != null) {
            ColumnAnalysisSqlExecutor.this.errorMessage=eaj.errorMessage;
            ColumnAnalysisSqlExecutor.this.parallelExeStatus=false;
          }
        }
        int current=(i + 1) * 100 / indicators.size();
        if (current > temp) {
          this.getMonitor().worked(current - temp);
          temp=current;
        }
      }
    }
    this.getMonitor().done();
  }
 catch (  Throwable thr) {
    log.error(thr);
  }
 finally {
    resetConnectionPool(analysis);
  }
  return parallelExeStatus;
}","/** 
 * DOC xqliu Comment method ""runAnalysisIndicatorsParallel"".
 * @param analysis
 * @param elementToIndicator
 * @param indicators
 * @param pooledConnection
 * @return
 * @throws SQLException
 */
private boolean runAnalysisIndicatorsParallel(Analysis analysis,Map<ModelElement,List<Indicator>> elementToIndicator,List<Indicator> indicators,boolean pooledConnection) throws SQLException {
  resetConnectionPool(analysis);
  List<ExecutiveAnalysisJob> excuteAnalysisJober=new ArrayList<ExecutiveAnalysisJob>();
  try {
    List<ExecutiveAnalysisJob> jobs=new ArrayList<ExecutiveAnalysisJob>();
    this.getMonitor().beginTask(""String_Node_Str"",100);
    int temp=0;
    for (int i=0; i < indicators.size(); i++) {
      Indicator indicator=indicators.get(i);
      if (this.continueRun()) {
        this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + indicator.getAnalyzedElement().getName());
        Connection conn=null;
        if (pooledConnection) {
          conn=getPooledConnection(analysis).getObject();
        }
 else {
          conn=getConnection(analysis).getObject();
        }
        if (conn != null) {
          ExecutiveAnalysisJob eaj=new ExecutiveAnalysisJob(ColumnAnalysisSqlExecutor.this,conn,elementToIndicator,indicator);
          excuteAnalysisJober.add(eaj);
          eaj.schedule();
          jobs.add(eaj);
          if (this.continueRun()) {
            eaj.join();
          }
          if (eaj.errorMessage != null) {
            ColumnAnalysisSqlExecutor.this.errorMessage=eaj.errorMessage;
            ColumnAnalysisSqlExecutor.this.parallelExeStatus=false;
          }
        }
        int current=(i + 1) * 100 / indicators.size();
        if (current > temp) {
          this.getMonitor().worked(current - temp);
          temp=current;
        }
      }
    }
    this.getMonitor().done();
  }
 catch (  Throwable thr) {
    log.error(thr);
  }
 finally {
    resetConnectionPool(analysis);
  }
  return parallelExeStatus;
}",0.994994994994995
137847,"protected void evalSchemaIndicLow(final CatalogIndicator catalogIndic,final SchemaIndicator schemaIndic,final Catalog tdCatalog,final Schema tdSchema,ReturnCode ok) throws SQLException {
  boolean hasSchema=tdSchema != null;
  boolean hasCatalog=false;
  String schemaName=hasSchema ? tdSchema.getName() : null;
  String catName=null;
  if (tdCatalog == null) {
    if (tdSchema.eContainer() instanceof Catalog) {
      hasCatalog=true;
      catName=((Catalog)tdSchema.eContainer()).getName();
    }
  }
 else {
    hasCatalog=true;
    catName=hasCatalog ? tdCatalog.getName() : null;
  }
  schemaIndic.setAnalyzedElement(hasSchema ? tdSchema : tdCatalog);
  int tableCount=0;
  final String[] tablePatterns=tablePattern != null && tablePattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.tablePattern,FILTER_SEP) : new String[]{this.tablePattern};
  for (  String pat : tablePatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      List<? extends NamedColumnSet> tables=DqRepositoryViewService.getTables(getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : tables) {
        tableCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,true,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setTableCount(tableCount);
  int viewCount=0;
  final String[] viewPatterns=viewPattern != null && viewPattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.viewPattern,FILTER_SEP) : new String[]{this.viewPattern};
  for (  String pat : viewPatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      List<? extends NamedColumnSet> views=DqRepositoryViewService.getViews(getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : views) {
        viewCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,false,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setViewCount(viewCount);
  if (hasCatalog && hasSchema && catalogIndic != null) {
    this.addToConnectionIndicator(catalogIndic);
    catalogIndic.addSchemaIndicator(schemaIndic);
    catalogIndic.setTableCount(catalogIndic.getTableCount() + tableCount);
    catalogIndic.setTableRowCount(catalogIndic.getTableRowCount() + schemaIndic.getTableRowCount());
    catalogIndic.setViewRowCount(catalogIndic.getViewRowCount() + schemaIndic.getViewRowCount());
  }
 else   if (!hasCatalog) {
    this.addToConnectionIndicator(schemaIndic);
  }
 else   if (!hasSchema) {
    if (SchemaPackage.eINSTANCE.getCatalogIndicator().equals(schemaIndic.eClass())) {
      this.addToConnectionIndicator(schemaIndic);
    }
 else {
      log.error(Messages.getString(""String_Node_Str""));
    }
  }
}","protected void evalSchemaIndicLow(final CatalogIndicator catalogIndic,final SchemaIndicator schemaIndic,final Catalog tdCatalog,final Schema tdSchema,ReturnCode ok) throws SQLException {
  boolean hasSchema=tdSchema != null;
  boolean hasCatalog=false;
  String schemaName=hasSchema ? tdSchema.getName() : null;
  String catName=null;
  if (tdCatalog == null) {
    if (tdSchema.eContainer() instanceof Catalog) {
      hasCatalog=true;
      catName=((Catalog)tdSchema.eContainer()).getName();
    }
  }
 else {
    hasCatalog=true;
    catName=hasCatalog ? tdCatalog.getName() : null;
  }
  schemaIndic.setAnalyzedElement(hasSchema ? tdSchema : tdCatalog);
  int tableCount=0;
  final String[] tablePatterns=tablePattern != null && tablePattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.tablePattern,FILTER_SEP) : new String[]{this.tablePattern};
  for (  String pat : tablePatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      List<? extends NamedColumnSet> tables=DqRepositoryViewService.getTables(getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : tables) {
        this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + catName+ ""String_Node_Str""+ t.getName());
        tableCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,true,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setTableCount(tableCount);
  int viewCount=0;
  final String[] viewPatterns=viewPattern != null && viewPattern.contains(String.valueOf(FILTER_SEP)) ? StringUtils.split(this.viewPattern,FILTER_SEP) : new String[]{this.viewPattern};
  for (  String pat : viewPatterns) {
    String trimPat=pat != null && !PluginConstant.EMPTY_STRING.equals(pat) ? pat.trim() : null;
    try {
      Package pacage=tdSchema == null ? tdCatalog : tdSchema;
      List<? extends NamedColumnSet> views=DqRepositoryViewService.getViews(getDataManager(),pacage,trimPat,true);
      for (      NamedColumnSet t : views) {
        viewCount++;
        evalAllCounts(catName,schemaName,t,schemaIndic,false,ok);
      }
    }
 catch (    Exception e) {
      log.error(e,e);
    }
  }
  schemaIndic.setViewCount(viewCount);
  if (hasCatalog && hasSchema && catalogIndic != null) {
    this.addToConnectionIndicator(catalogIndic);
    catalogIndic.addSchemaIndicator(schemaIndic);
    catalogIndic.setTableCount(catalogIndic.getTableCount() + tableCount);
    catalogIndic.setTableRowCount(catalogIndic.getTableRowCount() + schemaIndic.getTableRowCount());
    catalogIndic.setViewRowCount(catalogIndic.getViewRowCount() + schemaIndic.getViewRowCount());
  }
 else   if (!hasCatalog) {
    this.addToConnectionIndicator(schemaIndic);
  }
 else   if (!hasSchema) {
    if (SchemaPackage.eINSTANCE.getCatalogIndicator().equals(schemaIndic.eClass())) {
      this.addToConnectionIndicator(schemaIndic);
    }
 else {
      log.error(Messages.getString(""String_Node_Str""));
    }
  }
}",0.9769357495881384
137848,"/** 
 * DOC scorreia Comment method ""queryOnTable"".
 * @param catalog
 * @param schema
 * @param schemaIndic
 * @param tablesSet
 * @param tableCube
 * @param ok
 * @throws SQLException
 */
protected void evalAllCounts(String catalog,String schema,NamedColumnSet t,SchemaIndicator schemaIndic,boolean isTable,ReturnCode ok) throws SQLException {
  EObject eContainer=schemaIndic.getAnalyzedElement().eContainer();
  String quCatalog=null;
  if (eContainer instanceof Catalog) {
    quCatalog=dbms().quote(((Catalog)eContainer).getName());
  }
  String quSchema=schema == null ? null : dbms().quote(schema);
  final String table=t.getName();
  String quTable=dbms().quote(table);
  if (isTable) {
    long rowCount=getRowCounts(quCatalog,quSchema,quTable);
    schemaIndic.setTableRowCount(schemaIndic.getTableRowCount() + rowCount);
    if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
      schema=ColumnSetHelper.getTableOwner(t);
    }
    boolean isPkIndexSupported=dbmsLanguage.isPkIndexSupported();
    int pkCount=0;
    int idxCount=0;
    if (!isPkIndexSupported) {
      pkCount=getPKCount(catalog,schema,table);
      schemaIndic.setKeyCount(schemaIndic.getKeyCount() + pkCount);
      idxCount=getIndexCount(catalog,schema,table);
      schemaIndic.setIndexCount(schemaIndic.getIndexCount() + idxCount);
    }
    createTableIndicator(t,schemaIndic,rowCount,pkCount,idxCount);
  }
 else {
    if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
      schema=ColumnSetHelper.getTableOwner(t);
    }
    long rowCount=getRowCounts(quCatalog,schema,quTable);
    schemaIndic.setViewRowCount(schemaIndic.getViewRowCount() + rowCount);
    createViewIndicator(t,schemaIndic,rowCount);
  }
}","/** 
 * DOC scorreia Comment method ""queryOnTable"".
 * @param catalog
 * @param schema
 * @param schemaIndic
 * @param tablesSet
 * @param tableCube
 * @param ok
 * @throws SQLException
 */
protected void evalAllCounts(String catalog,String schema,NamedColumnSet t,SchemaIndicator schemaIndic,boolean isTable,ReturnCode ok) throws SQLException {
  EObject eContainer=schemaIndic.getAnalyzedElement().eContainer();
  String quCatalog=null;
  if (eContainer instanceof Catalog) {
    quCatalog=dbms().quote(((Catalog)eContainer).getName());
  }
  String quSchema=schema == null ? null : dbms().quote(schema);
  final String table=t.getName();
  String quTable=dbms().quote(table);
  if (isTable) {
    long rowCount=getRowCounts(quCatalog,quSchema,quTable);
    schemaIndic.setTableRowCount(schemaIndic.getTableRowCount() + rowCount);
    if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
      schema=ColumnSetHelper.getTableOwner(t);
    }
    boolean isPkIndexSupported=dbmsLanguage.isPkIndexSupported();
    int pkCount=0;
    int idxCount=0;
    if (isPkIndexSupported) {
      pkCount=getPKCount(catalog,schema,table);
      schemaIndic.setKeyCount(schemaIndic.getKeyCount() + pkCount);
      idxCount=getIndexCount(catalog,schema,table);
      schemaIndic.setIndexCount(schemaIndic.getIndexCount() + idxCount);
    }
    createTableIndicator(t,schemaIndic,rowCount,pkCount,idxCount);
  }
 else {
    if (ConnectionUtils.isSybaseeDBProducts(dbmsLanguage.getDbmsName())) {
      schema=ColumnSetHelper.getTableOwner(t);
    }
    long rowCount=getRowCounts(quCatalog,schema,quTable);
    schemaIndic.setViewRowCount(schemaIndic.getViewRowCount() + rowCount);
    createViewIndicator(t,schemaIndic,rowCount);
  }
}",0.9997122302158272
137849,"@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=Messages.getString(""String_Node_Str"");
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  elementIndics=this.elementToIndicators.values().iterator().next();
  if (elementIndics.isEmpty()) {
    String msg=Messages.getString(""String_Node_Str"",dataProvider);
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  ConnectionIndicator connectionIndicator=getConnectionIndicator();
  this.resetCounts(connectionIndicator);
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dataProvider);
  if (isTos(dataProvider)) {
    cleanUpCatalog(catalogs);
  }
  this.getMonitor().beginTask(""String_Node_Str"",100);
  int temp=0;
  if (catalogs.isEmpty()) {
    List<Schema> schemata=ConnectionHelper.getSchema(dataProvider);
    for (    Schema tdSchema : schemata) {
      if (!checkSchema(tdSchema)) {
        ok.setReturnCode(Messages.getString(""String_Node_Str"",tdSchema.getName()),false);
        return ok;
      }
    }
    for (int i=0; i < schemata.size(); i++) {
      Schema tdSchema=schemata.get(i);
      this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + tdSchema.getName());
      evalSchemaIndic(tdSchema,ok);
      int current=(i + 1) * 100 / catalogs.size();
      if (current > temp) {
        this.getMonitor().worked(current - temp);
        temp=current;
      }
    }
  }
 else {
    for (    Catalog tdCatalog : catalogs) {
      if (!checkCatalog(tdCatalog.getName())) {
        ok.setReturnCode(Messages.getString(""String_Node_Str"",tdCatalog.getName()),false);
        return ok;
      }
    }
    for (int i=0; i < catalogs.size(); i++) {
      if (this.continueRun()) {
        Catalog tdCatalog=catalogs.get(i);
        String catName=tdCatalog.getName();
        this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + catName);
        try {
          connection.setCatalog(catName);
        }
 catch (        Exception e) {
          log.warn(""String_Node_Str"" + sqlStatement,e);
        }
        CatalogIndicator catalogIndic=SchemaFactory.eINSTANCE.createCatalogIndicator();
        DefinitionHandler.getInstance().setDefaultIndicatorDefinition(catalogIndic);
        List<Schema> schemas=CatalogHelper.getSchemas(tdCatalog);
        if (schemas.isEmpty()) {
          evalCatalogIndic(catalogIndic,tdCatalog,ok);
        }
 else {
          catalogIndic.setAnalyzedElement(tdCatalog);
          for (          Schema tdSchema : schemas) {
            if (this.continueRun()) {
              this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + catName+ ""String_Node_Str""+ tdSchema.getName());
              SchemaIndicator schemaIndic=SchemaFactory.eINSTANCE.createSchemaIndicator();
              DefinitionHandler.getInstance().setDefaultIndicatorDefinition(schemaIndic);
              evalSchemaIndicLow(catalogIndic,schemaIndic,tdCatalog,tdSchema,ok);
            }
          }
          catalogIndic.setSchemaCount(schemas.size());
        }
        int current=(i + 1) * 100 / catalogs.size();
        if (current > temp) {
          this.getMonitor().worked(current - temp);
          temp=current;
        }
      }
    }
    this.getMonitor().done();
  }
  if (log.isDebugEnabled()) {
    printCounts(connectionIndicator);
  }
  return ok;
}","@Override protected ReturnCode executeSqlQuery(String sqlStatement) throws SQLException {
  ReturnCode ok=new ReturnCode(true);
  dataProvider=this.getDataManager();
  if (this.elementToIndicators.values().isEmpty()) {
    String msg=Messages.getString(""String_Node_Str"");
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  elementIndics=this.elementToIndicators.values().iterator().next();
  if (elementIndics.isEmpty()) {
    String msg=Messages.getString(""String_Node_Str"",dataProvider);
    log.error(msg);
    ok.setReturnCode(msg,false);
    return ok;
  }
  ConnectionIndicator connectionIndicator=getConnectionIndicator();
  this.resetCounts(connectionIndicator);
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dataProvider);
  if (isTos(dataProvider)) {
    cleanUpCatalog(catalogs);
  }
  this.getMonitor().beginTask(""String_Node_Str"",100);
  int temp=0;
  if (catalogs.isEmpty()) {
    List<Schema> schemata=ConnectionHelper.getSchema(dataProvider);
    for (    Schema tdSchema : schemata) {
      if (!checkSchema(tdSchema)) {
        ok.setReturnCode(Messages.getString(""String_Node_Str"",tdSchema.getName()),false);
        return ok;
      }
    }
    for (int i=0; i < schemata.size(); i++) {
      Schema tdSchema=schemata.get(i);
      this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + tdSchema.getName());
      evalSchemaIndic(tdSchema,ok);
      int current=(i + 1) * 100 / catalogs.size();
      if (current > temp) {
        this.getMonitor().worked(current - temp);
        temp=current;
      }
    }
  }
 else {
    for (    Catalog tdCatalog : catalogs) {
      if (!checkCatalog(tdCatalog.getName())) {
        ok.setReturnCode(Messages.getString(""String_Node_Str"",tdCatalog.getName()),false);
        return ok;
      }
    }
    for (int i=0; i < catalogs.size(); i++) {
      if (this.continueRun()) {
        Catalog tdCatalog=catalogs.get(i);
        String catName=tdCatalog.getName();
        this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + catName);
        if (dbms().supportCatalogSelection()) {
          connection.setCatalog(catName);
        }
        CatalogIndicator catalogIndic=SchemaFactory.eINSTANCE.createCatalogIndicator();
        DefinitionHandler.getInstance().setDefaultIndicatorDefinition(catalogIndic);
        List<Schema> schemas=CatalogHelper.getSchemas(tdCatalog);
        if (schemas.isEmpty()) {
          evalCatalogIndic(catalogIndic,tdCatalog,ok);
        }
 else {
          catalogIndic.setAnalyzedElement(tdCatalog);
          for (          Schema tdSchema : schemas) {
            if (this.continueRun()) {
              this.getMonitor().setTaskName(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + catName+ ""String_Node_Str""+ tdSchema.getName());
              SchemaIndicator schemaIndic=SchemaFactory.eINSTANCE.createSchemaIndicator();
              DefinitionHandler.getInstance().setDefaultIndicatorDefinition(schemaIndic);
              evalSchemaIndicLow(catalogIndic,schemaIndic,tdCatalog,tdSchema,ok);
            }
          }
          catalogIndic.setSchemaCount(schemas.size());
        }
        int current=(i + 1) * 100 / catalogs.size();
        if (current > temp) {
          this.getMonitor().worked(current - temp);
          temp=current;
        }
      }
    }
    this.getMonitor().done();
  }
  if (log.isDebugEnabled()) {
    printCounts(connectionIndicator);
  }
  return ok;
}",0.980597649058207
137850,"/** 
 * physical delete related.
 * @param item
 */
public static ReturnCode deleteRelations(Item item){
  ReturnCode rc=new ReturnCode(Boolean.TRUE);
  if (item == null || item.getProperty() == null || item instanceof FolderItem) {
    rc.setOk(Boolean.FALSE);
    return rc;
  }
  IFile itemFile=PropertyHelper.getItemFile(item.getProperty());
  if (itemFile == null || itemFile.exists()) {
    rc.setOk(Boolean.FALSE);
    return rc;
  }
  if (item instanceof TDQReportItem) {
    return ReportUtils.deleteRepOutputFolder(itemFile);
  }
  return rc;
}","/** 
 * physical delete related.
 * @param item
 */
public static ReturnCode deleteRelations(Item item){
  ReturnCode rc=new ReturnCode(Boolean.TRUE);
  if (item == null || item.getProperty() == null || item instanceof FolderItem) {
    rc.setOk(Boolean.FALSE);
    return rc;
  }
  IFile itemFile=PropertyHelper.getItemFile(item.getProperty());
  if (itemFile == null || itemFile.exists()) {
    rc.setOk(Boolean.FALSE);
    return rc;
  }
  if (item instanceof TDQReportItem) {
    try {
      rc=ReportUtils.deleteRepOutputFolder(itemFile);
    }
 catch (    PersistenceException e) {
      log.error(e);
      rc.setMessage(e.getMessage());
      rc.setOk(false);
    }
    return rc;
  }
  return rc;
}",0.8485329103885805
137851,"/** 
 * delete the related output folder of reports.
 * @param repFiles
 */
public static void deleteRepOutputFolders(List<IFile> repFiles){
  for (  IFile repFile : repFiles) {
    deleteRepOutputFolder(repFile);
  }
}","/** 
 * delete the related output folder of reports.
 * @param repFiles
 */
public static void deleteRepOutputFolders(List<IFile> repFiles){
  for (  IFile repFile : repFiles) {
    try {
      deleteRepOutputFolder(repFile);
    }
 catch (    PersistenceException e) {
      log.error(e);
    }
  }
}",0.8423076923076923
137852,"/** 
 * delete the related output folder of report.
 * @param reportFile
 */
public static ReturnCode deleteRepOutputFolder(IFile reportFile){
  ReturnCode rc=new ReturnCode(Boolean.TRUE);
  IFolder currentRportFolder=ReportUtils.getOutputFolder(reportFile);
  if (currentRportFolder != null && currentRportFolder.exists()) {
    try {
      currentRportFolder.delete(true,new NullProgressMonitor());
    }
 catch (    CoreException e) {
      log.error(e,e);
      rc.setOk(Boolean.FALSE);
      rc.setMessage(e.getMessage());
    }
  }
 else {
    rc.setOk(Boolean.FALSE);
  }
  return rc;
}","/** 
 * delete the related output folder of report.
 * @param reportFile
 * @throws PersistenceException
 */
public static ReturnCode deleteRepOutputFolder(final IFile reportFile) throws PersistenceException {
  final ReturnCode rc=new ReturnCode(Boolean.TRUE);
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(ProjectManager.getInstance().getCurrentProject(),""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
      IFolder reportOutputFolder=ReportUtils.getOutputFolder(reportFile);
      if (reportOutputFolder != null && reportOutputFolder.exists()) {
        try {
          IContainer parent=reportOutputFolder.getParent();
          if (parent != null) {
            parent.refreshLocal(IResource.DEPTH_INFINITE,null);
          }
          File file=WorkspaceUtils.ifolderToFile(reportOutputFolder);
          if (file != null && file.exists()) {
            deleteFolder(file);
          }
          if (parent != null) {
            parent.refreshLocal(IResource.DEPTH_INFINITE,null);
          }
        }
 catch (        CoreException e) {
          log.warn(e);
        }
      }
 else {
        rc.setOk(Boolean.FALSE);
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
  repositoryWorkUnit.throwPersistenceExceptionIfAny();
  return rc;
}",0.3875123885034688
137853,"/** 
 * DOC xqliu Comment method ""moveHiddenFolders"".
 * @param srcFolder
 * @param tarFolder
 */
public static void moveHiddenFolders(File srcFolder,File tarFolder){
  if (srcFolder == null || tarFolder == null) {
    return;
  }
  File[] listFiles=srcFolder.listFiles();
  for (  File file : listFiles) {
    if (file.isDirectory()) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        if (file.getName().equals(""String_Node_Str"")) {
          continue;
        }
        FilesUtils.copyDirectory(file,tarFolder);
      }
 else {
        moveHiddenFolders(file,getTargetFile(file,srcFolder,tarFolder));
      }
    }
  }
}","/** 
 * DOC xqliu Comment method ""moveHiddenFolders"".
 * @param srcFolder
 * @param tarFolder
 */
public static void moveHiddenFolders(File srcFolder,File tarFolder){
  if (srcFolder == null || tarFolder == null) {
    return;
  }
  File[] listFiles=srcFolder.listFiles();
  if (listFiles != null) {
    for (    File file : listFiles) {
      if (file.isDirectory()) {
        if (file.getName().startsWith(""String_Node_Str"")) {
          if (file.getName().equals(""String_Node_Str"")) {
            continue;
          }
          FilesUtils.copyDirectoryWithoutSvnFolder(file,tarFolder);
        }
 else {
          moveHiddenFolders(file,getTargetFile(file,srcFolder,tarFolder));
        }
      }
    }
  }
}",0.9385640266469282
137854,"/** 
 * get the .report.list file for the report.
 * @param reportFile the IFile of report
 * @return
 * @throws IOException
 */
public static File getReportListFile(IFile reportFile) throws IOException {
  String reportFileName=reportFile.getName();
  String simpleName=getSimpleName(reportFileName);
  File file=new File(ReportHelper.getOutputFolderNameDefault((IFolder)reportFile.getParent(),simpleName) + File.separator + REPORT_LIST);
  if (!file.exists()) {
    File parentFile=file.getParentFile();
    if (parentFile != null) {
      if (!parentFile.exists()) {
        if (parentFile.mkdirs()) {
          file.createNewFile();
        }
      }
 else {
        file.createNewFile();
      }
    }
  }
  return file;
}","/** 
 * get the .report.list file for the report, if it doesn't exist, create it.
 * @param reportFile the IFile of report
 * @return
 */
public static File getReportListFile(IFile reportFile){
  File file=reportListFile(reportFile);
  if (!file.exists()) {
    try {
      createReportListFile(reportFile);
    }
 catch (    PersistenceException e) {
      log.error(e);
    }
  }
  return file;
}",0.2097777777777777
137855,"/** 
 * get the link files which link to the Report Generated Doc File.
 * @param file Report file
 * @return
 */
public static List<IFile> getRepDocLinkFiles(IFile file){
  List<IFile> linkFiles=new ArrayList<IFile>();
  if (file != null) {
    try {
      IResource[] reportListFiles=ReportUtils.getReportListFiles(file);
      for (      IResource res : reportListFiles) {
        IFile linkFile=ResourceManager.getRoot().getFile(res.getFullPath());
        if (linkFile.exists() && linkFile.isLinked()) {
          linkFiles.add(linkFile);
        }
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return linkFiles;
}","/** 
 * get the link files which link to the Report Generated Doc File.
 * @param file Report file
 * @return
 */
public static List<IFile> getRepDocLinkFiles(IFile file){
  List<IFile> linkFiles=new ArrayList<IFile>();
  if (file != null) {
    try {
      IResource[] reportListFiles=ReportUtils.getReportGeneratedDocs(file);
      for (      IResource res : reportListFiles) {
        IFile linkFile=ResourceManager.getRoot().getFile(res.getFullPath());
        if (linkFile.exists() && linkFile.isLinked()) {
          linkFiles.add(linkFile);
        }
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return linkFiles;
}",0.9849170437405732
137856,"/** 
 * DOC xqliu Comment method ""getReportListParameters"".
 * @param reportListFile
 * @return
 * @throws IOException
 */
private static List<ReportListParameters> getReportListParameters(File reportListFile) throws IOException {
  List<ReportListParameters> repList=new ArrayList<ReportListParameters>();
  if (reportListFile != null && reportListFile.exists()) {
    CsvReader reader=new CsvReader(new FileReader(reportListFile),CURRENT_SEPARATOR);
    reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
    reader.setTextQualifier(TEXT_QUAL);
    reader.setUseTextQualifier(USE_TEXT_QUAL);
    reader.readHeaders();
    while (reader.readRecord()) {
      repList.add(buildRepListParams(reader.get(ReportListEnum.Name.getLiteral()),reader.get(ReportListEnum.Path.getLiteral()),reader.get(ReportListEnum.CreateTime.getLiteral())));
    }
    reader.close();
  }
  return repList;
}","/** 
 * DOC xqliu Comment method ""getReportListParameters"".
 * @param reportListFile
 * @return
 * @throws IOException
 */
private static List<ReportListParameters> getReportListParameters(File reportListFile){
  List<ReportListParameters> repList=new ArrayList<ReportListParameters>();
  if (reportListFile != null && reportListFile.exists()) {
    try {
      CsvReader reader=new CsvReader(new FileReader(reportListFile),CURRENT_SEPARATOR);
      reader.setEscapeMode(ESCAPE_MODE_BACKSLASH);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      while (reader.readRecord()) {
        repList.add(buildRepListParams(reader.get(ReportListEnum.Name.getLiteral()),reader.get(ReportListEnum.Path.getLiteral()),reader.get(ReportListEnum.CreateTime.getLiteral())));
      }
      reader.close();
    }
 catch (    FileNotFoundException e) {
      log.error(e);
    }
catch (    IllegalArgumentException e) {
      log.error(e);
    }
catch (    IOException e) {
      log.error(e);
    }
  }
  return repList;
}",0.843558282208589
137857,"/** 
 * get the report doc folder name from the report's preperty.
 * @param repProp
 * @return
 */
public static String getSimpleName(Property repProp){
  return repProp.getLabel() + ""String_Node_Str"" + repProp.getVersion();
}","/** 
 * remove the extension of full name to get the simple name of a report file.
 * @param reportFileName
 * @return
 */
public static String getSimpleName(String reportFileName){
  int indexOf=reportFileName.lastIndexOf(PluginConstant.DOT_STRING);
  String simpleName=PluginConstant.EMPTY_STRING;
  if (indexOf != -1) {
    simpleName=reportFileName.substring(0,indexOf);
  }
 else {
    simpleName=null;
  }
  return simpleName;
}",0.0726172465960665
137858,"/** 
 * DOC xqliu Comment method ""saveReportListFile"".
 * @param reportListFile
 * @param repList
 * @throws IOException
 */
private static void saveReportListFile(File reportListFile,List<ReportListParameters> repList) throws IOException {
  CsvWriter out=new CsvWriter(new FileOutputStream(reportListFile),CURRENT_SEPARATOR,Charset.defaultCharset());
  out.setEscapeMode(ESCAPE_MODE_BACKSLASH);
  out.setTextQualifier(TEXT_QUAL);
  out.setForceQualifier(USE_TEXT_QUAL);
  ReportListEnum[] values=ReportListEnum.values();
  String[] temp=new String[values.length];
  for (int i=0; i < repList.size() + 1; i++) {
    if (i == 0) {
      temp[0]=ReportListEnum.Name.getLiteral();
      temp[1]=ReportListEnum.Path.getLiteral();
      temp[2]=ReportListEnum.CreateTime.getLiteral();
    }
 else {
      temp[0]=repList.get(i - 1).name;
      temp[1]=repList.get(i - 1).path;
      temp[2]=repList.get(i - 1).createTime;
    }
    out.writeRecord(temp);
  }
  out.flush();
  out.close();
}","/** 
 * DOC xqliu Comment method ""saveReportListFile"".
 * @param reportListFile
 * @param repList
 * @throws IOException
 * @throws PersistenceException
 */
private static void saveReportListFile(final File reportListFile,final List<ReportListParameters> repList) throws PersistenceException {
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(ProjectManager.getInstance().getCurrentProject(),""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
      try {
        CsvWriter out=new CsvWriter(new FileOutputStream(reportListFile),CURRENT_SEPARATOR,Charset.defaultCharset());
        out.setEscapeMode(ESCAPE_MODE_BACKSLASH);
        out.setTextQualifier(TEXT_QUAL);
        out.setForceQualifier(USE_TEXT_QUAL);
        ReportListEnum[] values=ReportListEnum.values();
        String[] temp=new String[values.length];
        for (int i=0; i < repList.size() + 1; i++) {
          if (i == 0) {
            temp[0]=ReportListEnum.Name.getLiteral();
            temp[1]=ReportListEnum.Path.getLiteral();
            temp[2]=ReportListEnum.CreateTime.getLiteral();
          }
 else {
            temp[0]=repList.get(i - 1).name;
            temp[1]=repList.get(i - 1).path;
            temp[2]=repList.get(i - 1).createTime;
          }
          out.writeRecord(temp);
        }
        out.flush();
        out.close();
      }
 catch (      FileNotFoundException e) {
        log.error(e);
      }
catch (      IOException e) {
        log.error(e);
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
  repositoryWorkUnit.throwPersistenceExceptionIfAny();
}",0.7170228445099485
137859,"/** 
 */
public static void initRepListFile(IFile reportFile) throws Exception {
  String reportFileName=reportFile.getName();
  String simpleName=getSimpleName(reportFileName);
  if (simpleName == null) {
    return;
  }
  IFolder reportFileFolder=((IFolder)reportFile.getParent()).getFolder(PluginConstant.DOT_STRING + simpleName);
  if (reportFileFolder != null && reportFileFolder.exists()) {
    File repListFile=new File(ReportHelper.getOutputFolderNameDefault((IFolder)reportFile.getParent(),simpleName) + File.separator + REPORT_LIST);
    List<ReportListParameters> repList=new ArrayList<ReportListParameters>();
    IResource[] members=reportFileFolder.members();
    for (    IResource res : members) {
      if (res.getType() == IResource.FILE) {
        IFile repFile=(IFile)res;
        repList.add(buildRepListParams(repFile.getName(),repFile.getRawLocation().toOSString(),String.valueOf(repFile.getModificationStamp())));
      }
    }
    saveReportListFile(repListFile,repList);
  }
}","/** 
 * DOC xqliu Comment method ""initRepListFile"".
 * @param reportFile
 * @throws Exception
 * @deprecated
 */
@Deprecated public static void initRepListFile(IFile reportFile) throws Exception {
  String reportFileName=reportFile.getName();
  String simpleName=getSimpleName(reportFileName);
  if (simpleName == null) {
    return;
  }
  IFolder reportFileFolder=((IFolder)reportFile.getParent()).getFolder(PluginConstant.DOT_STRING + simpleName);
  if (reportFileFolder != null && reportFileFolder.exists()) {
    File repListFile=new File(ReportHelper.getOutputFolderNameDefault((IFolder)reportFile.getParent(),simpleName) + File.separator + REPORT_LIST);
    List<ReportListParameters> repList=new ArrayList<ReportListParameters>();
    IResource[] members=reportFileFolder.members();
    for (    IResource res : members) {
      if (res.getType() == IResource.FILE) {
        IFile repFile=(IFile)res;
        repList.add(buildRepListParams(repFile.getName(),repFile.getRawLocation().toOSString(),String.valueOf(repFile.getModificationStamp())));
      }
    }
    saveReportListFile(repListFile,repList);
  }
}",0.9452830188679244
137860,"/** 
 * build RepositoryNode(Analysis) children according to IResource array.
 * @param analyses
 * @return
 */
private List<IRepositoryNode> buildChildrenAnalysis(List<Analysis> analyses){
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>();
  for (  Analysis analysis : analyses) {
    Property anaEleProperty=PropertyHelper.getProperty(analysis);
    IRepositoryViewObject viewObject=null;
    try {
      viewObject=ProxyRepositoryFactory.getInstance().getLastVersion(anaEleProperty.getId());
    }
 catch (    Exception e) {
      log.error(e);
    }
    if (null == viewObject) {
      continue;
    }
    ReportAnalysisRepNode node=new ReportAnalysisRepNode(viewObject,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
    node.setReport(this.getReport());
    node.setAnalysis(analysis);
    node.setId(this.getReport().getName() + analysis.getName());
    nodes.add(node);
  }
  this.getReportSubFolderChildren().clear();
  if (nodes.size() > 0) {
    this.getReportSubFolderChildren().addAll(nodes);
  }
  return this.getReportSubFolderChildren();
}","/** 
 * build RepositoryNode(Analysis) children according to IResource array.
 * @param analyses
 * @return
 */
private List<IRepositoryNode> buildChildrenAnalysis(List<Analysis> analyses){
  List<IRepositoryNode> nodes=new ArrayList<IRepositoryNode>();
  for (  Analysis analysis : analyses) {
    Property anaEleProperty=PropertyHelper.getProperty(analysis);
    IRepositoryViewObject viewObject=null;
    if (anaEleProperty != null) {
      try {
        viewObject=ProxyRepositoryFactory.getInstance().getLastVersion(anaEleProperty.getId());
      }
 catch (      Exception e) {
        log.error(e);
      }
    }
 else {
      log.error(""String_Node_Str"" + analysis.getName() + ""String_Node_Str"");
    }
    if (null == viewObject) {
      continue;
    }
    ReportAnalysisRepNode node=new ReportAnalysisRepNode(viewObject,this,ENodeType.TDQ_REPOSITORY_ELEMENT);
    node.setReport(this.getReport());
    node.setAnalysis(analysis);
    node.setId(this.getReport().getName() + analysis.getName());
    nodes.add(node);
  }
  this.getReportSubFolderChildren().clear();
  if (nodes.size() > 0) {
    this.getReportSubFolderChildren().addAll(nodes);
  }
  return this.getReportSubFolderChildren();
}",0.9244365885992046
137861,"@Override public List<IRepositoryNode> getChildren(){
  if (this.getReport() != null) {
    try {
      if (ReportSubFolderType.ANALYSIS.equals(getReportSubFolderType())) {
        buildChildrenAnalysis(ReportHelper.getAnalyses(this.getReport()));
      }
 else       if (ReportSubFolderType.GENERATED_DOCS.equals(getReportSubFolderType())) {
        IResource[] repFiles=ReportUtils.getReportListFiles(ResourceFileMap.findCorrespondingFile(this.getReport()));
        buildChildrenReportFile(repFiles);
      }
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    return filterResultsIfAny(this.getReportSubFolderChildren());
  }
 else {
    return filterResultsIfAny(super.getChildren());
  }
}","@Override public List<IRepositoryNode> getChildren(){
  if (this.getReport() != null) {
    try {
      if (ReportSubFolderType.ANALYSIS.equals(getReportSubFolderType())) {
        buildChildrenAnalysis(ReportHelper.getAnalyses(this.getReport()));
      }
 else       if (ReportSubFolderType.GENERATED_DOCS.equals(getReportSubFolderType())) {
        IResource[] repFiles=ReportUtils.getReportGeneratedDocs(ResourceFileMap.findCorrespondingFile(this.getReport()));
        buildChildrenReportFile(repFiles);
      }
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
    return filterResultsIfAny(this.getReportSubFolderChildren());
  }
 else {
    return filterResultsIfAny(super.getChildren());
  }
}",0.9858956276445698
137862,"public boolean isVirtualFolder(){
  return this.getReport() != null;
}","@Override public boolean isVirtualFolder(){
  return this.getReport() != null;
}",0.9333333333333332
137863,"public ReturnCode save(Item item,boolean careDependency){
  TDQReportItem repItem=(TDQReportItem)item;
  Report report=repItem.getReport();
  return careDependency ? saveWithDependencies(repItem,report) : saveWithoutDependencies(repItem,report);
}","@Override public ReturnCode save(Item item,boolean careDependency){
  TDQReportItem repItem=(TDQReportItem)item;
  Report report=repItem.getReport();
  return careDependency ? saveWithDependencies(repItem,report) : saveWithoutDependencies(repItem,report);
}",0.98015873015873
137864,"public Resource create(IProject project,Item item,int classID,IPath path){
  String fileExtension=FileConstants.ITEM_EXTENSION;
  Resource itemResource=null;
  try {
switch (classID) {
case org.talend.dataquality.properties.PropertiesPackage.TDQ_ANALYSIS_ITEM:
      fileExtension=FileConstants.ANA_EXTENSION;
    itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT,false,fileExtension);
  AnalysisWriter createAnalysisWrite=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createAnalysisWrite();
Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
createAnalysisWrite.addResourceContent(itemResource,analysis);
createAnalysisWrite.addDependencies(analysis);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_REPORT_ITEM:
fileExtension=FileConstants.REP_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_REPORT_ELEMENT,false,fileExtension);
ReportWriter createReportWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createReportWriter();
Report report=((TDQReportItem)item).getReport();
createReportWriter.addResourceContent(itemResource,report);
createReportWriter.addDependencies(report);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_INDICATOR_DEFINITION_ITEM:
fileExtension=FileConstants.DEF_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_INDICATOR_ELEMENT,false,fileExtension);
IndicatorDefinition indicatorDefinition=((TDQIndicatorDefinitionItem)item).getIndicatorDefinition();
IndicatorDefinitionWriter createIndicatorDefinitionWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createIndicatorDefinitionWriter();
createIndicatorDefinitionWriter.addResourceContent(itemResource,indicatorDefinition);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_PATTERN_ITEM:
fileExtension=FileConstants.PAT_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_PATTERN_ELEMENT,false,fileExtension);
Pattern pattern=((TDQPatternItem)item).getPattern();
PatternWriter createPatternWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createPatternWriter();
createPatternWriter.addResourceContent(itemResource,pattern);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_BUSINESS_RULE_ITEM:
fileExtension=FileConstants.RULE_EXTENSION;
DQRule dqrule=((TDQBusinessRuleItem)item).getDqrule();
if (dqrule instanceof WhereRule) {
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_RULES_SQL,false,fileExtension);
}
 else {
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_RULES_PARSER,false,fileExtension);
}
DQRuleWriter createdRuleWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createdRuleWriter();
createdRuleWriter.addResourceContent(itemResource,dqrule);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_JRXML_ITEM:
fileExtension=FileConstants.JRXML_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_JRAXML_ELEMENT,true,fileExtension);
itemResource.getContents().add(((TDQFileItem)item).getContent());
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_SOURCE_FILE_ITEM:
fileExtension=FileConstants.SQL_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT,true,fileExtension);
itemResource.getContents().add(((TDQFileItem)item).getContent());
break;
default :
}
}
 catch (PersistenceException e) {
log.error(e,e);
}
return itemResource;
}","@Override public Resource create(IProject project,Item item,int classID,IPath path){
  String fileExtension=FileConstants.ITEM_EXTENSION;
  Resource itemResource=null;
  try {
switch (classID) {
case org.talend.dataquality.properties.PropertiesPackage.TDQ_ANALYSIS_ITEM:
      fileExtension=FileConstants.ANA_EXTENSION;
    itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT,false,fileExtension);
  AnalysisWriter createAnalysisWrite=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createAnalysisWrite();
Analysis analysis=((TDQAnalysisItem)item).getAnalysis();
createAnalysisWrite.addResourceContent(itemResource,analysis);
createAnalysisWrite.addDependencies(analysis);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_REPORT_ITEM:
fileExtension=FileConstants.REP_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_REPORT_ELEMENT,false,fileExtension);
ReportWriter createReportWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createReportWriter();
Report report=((TDQReportItem)item).getReport();
createReportWriter.addResourceContent(itemResource,report);
createReportWriter.addDependencies(report);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_INDICATOR_DEFINITION_ITEM:
fileExtension=FileConstants.DEF_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_INDICATOR_ELEMENT,false,fileExtension);
IndicatorDefinition indicatorDefinition=((TDQIndicatorDefinitionItem)item).getIndicatorDefinition();
IndicatorDefinitionWriter createIndicatorDefinitionWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createIndicatorDefinitionWriter();
createIndicatorDefinitionWriter.addResourceContent(itemResource,indicatorDefinition);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_PATTERN_ITEM:
fileExtension=FileConstants.PAT_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_PATTERN_ELEMENT,false,fileExtension);
Pattern pattern=((TDQPatternItem)item).getPattern();
PatternWriter createPatternWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createPatternWriter();
createPatternWriter.addResourceContent(itemResource,pattern);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_BUSINESS_RULE_ITEM:
fileExtension=FileConstants.RULE_EXTENSION;
DQRule dqrule=((TDQBusinessRuleItem)item).getDqrule();
if (dqrule instanceof WhereRule) {
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_RULES_SQL,false,fileExtension);
}
 else {
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_RULES_PARSER,false,fileExtension);
}
DQRuleWriter createdRuleWriter=org.talend.dq.writer.impl.ElementWriterFactory.getInstance().createdRuleWriter();
createdRuleWriter.addResourceContent(itemResource,dqrule);
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_JRXML_ITEM:
fileExtension=FileConstants.JRXML_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_JRAXML_ELEMENT,true,fileExtension);
itemResource.getContents().add(((TDQFileItem)item).getContent());
break;
case org.talend.dataquality.properties.PropertiesPackage.TDQ_SOURCE_FILE_ITEM:
fileExtension=FileConstants.SQL_EXTENSION;
itemResource=xmiResourceManager.createItemResourceWithExtension(project,item,path,ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT,true,fileExtension);
itemResource.getContents().add(((TDQFileItem)item).getContent());
break;
default :
}
}
 catch (PersistenceException e) {
log.error(e,e);
}
return itemResource;
}",0.9987129987129988
137865,"@Override public void run(){
  ISelection selection=this.getSelection();
  Object[] deleteElements=((IStructuredSelection)selection).toArray();
  if (deleteElements.length == 0) {
    return;
  }
  if (forbiddenDeleteJrxmlFileFolder(deleteElements)) {
    return;
  }
  deleteElements=checkSourceFilesEditorOpening(deleteElements);
  for (  Object obj : deleteElements) {
    if (obj instanceof RepositoryNode) {
      selectedNodes.add((RepositoryNode)obj);
    }
  }
  if (DQRepositoryNode.isOnFilterring()) {
    if (deleteElements[0] instanceof RepositoryNode) {
      setPreviousFilteredNode((RepositoryNode)deleteElements[0]);
    }
    for (    RepositoryNode node : selectedNodes) {
      RepositoryNodeHelper.removeChildrenNodesWhenFiltering(node);
    }
  }
  List deleteNodes=null;
  List<IRepositoryNode> shownNodes=null;
  List<IRepositoryNode> findAllRecycleBinNodes=null;
  if (DQRepositoryNode.isOnFilterring()) {
    deleteNodes=new ArrayList();
    Collections.addAll(deleteNodes,deleteElements);
    shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
    List<IRepositoryNode> recycleBinNodeFirstLevelChildren=((RepositoryNode)RepositoryNodeHelper.getRecycleBinRepNode()).getChildren();
    findAllRecycleBinNodes=RepositoryNodeHelper.findAllChildrenNodes(recycleBinNodeFirstLevelChildren);
  }
  for (int i=selectedNodes.size() - 1; i >= 0; i--) {
    if (selectedNodes.size() == 0) {
      break;
    }
    RepositoryNode node=selectedNodes.get(i);
    RepositoryNode parent=node.getParent();
    if (node instanceof ReportFileRepNode) {
      deleteReportFile((ReportFileRepNode)node);
      continue;
    }
    boolean isStateDeleted=RepositoryNodeHelper.isStateDeleted(node);
    if (!isStateDeleted) {
      excuteSuperRun(null,parent);
      break;
    }
    if (DQRepositoryNode.isOnFilterring() && isStateDeleted) {
      for (      IRepositoryNode iRepositoryNode : findAllRecycleBinNodes) {
        if (node.equals(iRepositoryNode)) {
          node=(RepositoryNode)iRepositoryNode;
          shownNodes=RepositoryNodeHelper.findAllChildrenNodes(deleteNodes);
          break;
        }
      }
      if (!RepositoryNodeHelper.isEmptyRecycleBin(findAllRecycleBinNodes,shownNodes)) {
        break;
      }
    }
    boolean hasDependency=false;
    if (node.getType() == ENodeType.SIMPLE_FOLDER || node.getType() == ENodeType.SYSTEM_FOLDER) {
      List<IRepositoryNode> newLs=RepositoryNodeHelper.getRepositoryElementFromFolder(node,true);
      boolean haveSubNode=false;
      for (      IRepositoryNode subNode : newLs) {
        hasDependency=RepositoryNodeHelper.hasDependencyClients(subNode);
        if (!hasDependency || hasDependency && handleDependencies(subNode)) {
          excuteSuperRun((RepositoryNode)subNode,node);
        }
 else {
          haveSubNode=true;
        }
      }
      if (!haveSubNode) {
        excuteSuperRun(node,parent);
      }
    }
 else {
      hasDependency=RepositoryNodeHelper.hasDependencyClients(node);
      if (!hasDependency || hasDependency && handleDependencies(node)) {
        excuteSuperRun(node,parent);
      }
    }
  }
  if (DQRepositoryNode.isOnFilterring()) {
    RepositoryNodeHelper.regainRecycleBinFilteredNode();
  }
  CorePlugin.getDefault().refreshWorkSpace();
  CorePlugin.getDefault().refreshDQView(RepositoryNodeHelper.getRecycleBinRepNode());
}","public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    ISchedulingRule schedulingRule=workspace.getRoot();
    workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
}",0.00535762121618
137866,"/** 
 * physical delete generating report file.
 * @param repFileNode
 */
private void deleteReportFile(ReportFileRepNode repFileNode){
  try {
    RepositoryNode parentNode=repFileNode.getParent();
    IPath location=Path.fromOSString(repFileNode.getResource().getProjectRelativePath().toOSString());
    IFile latestRepIFile=ResourceManager.getRootProject().getFile(location);
    if (showConfirmDialog(repFileNode.getLabel())) {
      if (latestRepIFile.isLinked()) {
        File file=new File(latestRepIFile.getRawLocation().toOSString());
        if (file.exists()) {
          file.delete();
        }
      }
      latestRepIFile.delete(true,null);
      if (parentNode != null) {
        CorePlugin.getDefault().refreshDQView(parentNode);
      }
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
}","/** 
 * physical delete generating report file.
 * @param repFileNode
 * @throws PersistenceException
 */
private void deleteReportFile(final ReportFileRepNode repFileNode) throws PersistenceException {
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(ProjectManager.getInstance().getCurrentProject(),""String_Node_Str""){
    @Override protected void run() throws LoginException, PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        public void run(        IProgressMonitor monitor){
          try {
            IPath location=Path.fromOSString(repFileNode.getResource().getProjectRelativePath().toOSString());
            IFile latestRepIFile=ResourceManager.getRootProject().getFile(location);
            if (showConfirmDialog(repFileNode.getLabel())) {
              if (latestRepIFile.isLinked()) {
                File file=new File(latestRepIFile.getRawLocation().toOSString());
                if (file.exists()) {
                  file.delete();
                }
              }
              latestRepIFile.delete(true,null);
              IContainer parent=latestRepIFile.getParent();
              if (parent != null) {
                parent.refreshLocal(IResource.DEPTH_INFINITE,monitor);
              }
            }
          }
 catch (          CoreException e) {
            log.error(e,e);
          }
        }
      }
;
      IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
        public void run(        IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          IWorkspace workspace=ResourcesPlugin.getWorkspace();
          try {
            ISchedulingRule schedulingRule=workspace.getRoot();
            workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
          }
 catch (          CoreException e) {
            throw new InvocationTargetException(e);
          }
        }
      }
;
      try {
        PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
      }
 catch (      InterruptedException e) {
        ExceptionHandler.process(e);
      }
catch (      InvocationTargetException e) {
        ExceptionHandler.process(e);
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(true);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
  repositoryWorkUnit.throwPersistenceExceptionIfAny();
  RepositoryNode parent=repFileNode.getParent();
  if (parent != null) {
    CorePlugin.getDefault().refreshDQView(parent);
  }
}",0.409923213230951
137867,"/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importObject
 * @param selectionFolder
 * @param skip
 * @param rename
 * @param importItemName
 * @return
 */
public static List<ReturnCode> importIndicatorToStucture(ImportObject importObject,IFolder selectionFolder,boolean skip,boolean rename,String importItemName){
  List<ReturnCode> information=new ArrayList<ReturnCode>();
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  File importFile=importObject.getObjFile();
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    String name=PluginConstant.EMPTY_STRING;
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
      while (reader.readRecord()) {
        name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
          }
        }
        UDIParameters udiParameters=new ImportFactory().new UDIParameters();
        udiParameters.name=name;
        udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
        udiParameters.javaClassName=reader.get(PatternToExcelEnum.JavaClassName.getLiteral());
        udiParameters.javaJarPath=reader.get(PatternToExcelEnum.JavaJarPath.getLiteral());
        String[] headers=reader.getHeaders();
        String[] columnsValue=reader.getValues();
        HashMap<String,String> record=new HashMap<String,String>();
        for (int i=0; i < headers.length; i++) {
          record.put(headers[i],columnsValue[i]);
        }
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=record.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            udiParameters.regex.put(languagetype.getLiteral(),trimQuote(cellStr));
          }
        }
        createAndStoreUDI(udiParameters,selectionFolder);
        names.add(name);
        information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),true));
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    String contents=PluginConstant.EMPTY_STRING;
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=contents;
            udiParameters.auther=row[6].getContents();
            udiParameters.description=row[2].getContents();
            udiParameters.purpose=row[1].getContents();
            udiParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            udiParameters.category=row[16].getContents();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                udiParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(contents);
            information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),true));
          }
        }
      }
      rwb.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
    }
  }
  if (FactoriesUtil.DEFINITION.equalsIgnoreCase(fileExtName)) {
    String propFilePath=importFile.getPath().replaceFirst(PluginConstant.DOT_STRING + fileExtName,PluginConstant.DOT_STRING + FactoriesUtil.PROPERTIES_EXTENSION);
    File propFile=new File(propFilePath);
    if (!propFile.exists()) {
      return information;
    }
    String name=importFile.getName();
    try {
      if (names.contains(name)) {
        if (skip) {
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
          return information;
        }
        if (rename) {
          name=name + ""String_Node_Str"" + new Date()+ Math.random()+ ""String_Node_Str"";
        }
      }
      IFile elementFile=selectionFolder.getFile(name);
      if (!elementFile.exists()) {
        elementFile.create(new FileInputStream(importFile),false,null);
        ModelElement modelElement=ModelElementFileFactory.getModelElement(elementFile);
        if (modelElement != null) {
          ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().create(modelElement,selectionFolder);
          DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
          names.add(name);
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),true));
        }
      }
    }
 catch (    Exception e) {
      log.error(e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
    }
  }
  importObject.copyJarFiles();
  checkImportEvent(importItemName,information);
  return information;
}","/** 
 * DOC xqliu Comment method ""importIndicatorToStucture"".
 * @param importObject
 * @param selectionFolder
 * @param skip
 * @param rename
 * @param importItemName
 * @return
 */
public static List<ReturnCode> importIndicatorToStucture(ImportObject importObject,IFolder selectionFolder,boolean skip,boolean rename,String importItemName){
  List<ReturnCode> information=new ArrayList<ReturnCode>();
  Set<String> names=UDIHelper.getAllIndicatorNames(selectionFolder);
  File importFile=importObject.getObjFile();
  String fileExtName=getFileExtName(importFile);
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    String name=PluginConstant.EMPTY_STRING;
    try {
      CsvReader reader=new CsvReader(new FileReader(importFile),CURRENT_SEPARATOR);
      reader.setTextQualifier(TEXT_QUAL);
      reader.setUseTextQualifier(USE_TEXT_QUAL);
      reader.readHeaders();
      java.text.SimpleDateFormat simpleDateFormat=new java.text.SimpleDateFormat(""String_Node_Str"");
      while (reader.readRecord()) {
        name=reader.get(PatternToExcelEnum.Label.getLiteral());
        if (names.contains(name)) {
          if (skip) {
            information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
            continue;
          }
          if (rename) {
            name=name + ""String_Node_Str"" + simpleDateFormat.format(new Date())+ Math.random()+ ""String_Node_Str"";
          }
        }
        UDIParameters udiParameters=new ImportFactory().new UDIParameters();
        udiParameters.name=name;
        udiParameters.auther=reader.get(PatternToExcelEnum.Author.getLiteral());
        udiParameters.description=reader.get(PatternToExcelEnum.Description.getLiteral());
        udiParameters.purpose=reader.get(PatternToExcelEnum.Purpose.getLiteral());
        udiParameters.relativePath=reader.get(PatternToExcelEnum.RelativePath.getLiteral());
        udiParameters.category=reader.get(PatternToExcelEnum.Category.getLiteral());
        udiParameters.javaClassName=reader.get(PatternToExcelEnum.JavaClassName.getLiteral());
        udiParameters.javaJarPath=reader.get(PatternToExcelEnum.JavaJarPath.getLiteral());
        String[] headers=reader.getHeaders();
        String[] columnsValue=reader.getValues();
        HashMap<String,String> record=new HashMap<String,String>();
        for (int i=0; i < headers.length; i++) {
          if (columnsValue[i] != null && columnsValue[i].length() > 0) {
            record.put(headers[i],columnsValue[i]);
          }
        }
        for (        PatternLanguageType languagetype : PatternLanguageType.values()) {
          String cellStr=record.get(languagetype.getExcelEnum().getLiteral());
          if (cellStr != null && !cellStr.equals(""String_Node_Str"")) {
            udiParameters.regex.put(languagetype.getLiteral(),trimQuote(cellStr));
          }
        }
        createAndStoreUDI(udiParameters,selectionFolder);
        names.add(name);
        information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),true));
      }
      reader.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(fileExtName)) {
    Map<Integer,PatternLanguageType> expressionMap=new HashMap<Integer,PatternLanguageType>();
    String contents=PluginConstant.EMPTY_STRING;
    try {
      WorkbookSettings settings=new WorkbookSettings();
      settings.setEncoding(""String_Node_Str"");
      Workbook rwb=Workbook.getWorkbook(importFile,settings);
      Sheet[] sheets=rwb.getSheets();
      for (      Sheet sheet : sheets) {
        Cell[] headerRow=sheet.getRow(0);
        for (        Cell cell : headerRow) {
          for (          PatternLanguageType languageType : PatternLanguageType.values()) {
            if (cell.getContents().equals(languageType.getExcelEnum().getLiteral())) {
              expressionMap.put(cell.getColumn(),languageType);
            }
          }
        }
        for (int i=1; i < sheet.getRows(); i++) {
          Cell[] row=sheet.getRow(i);
          Cell cell=row[0];
          if (CellType.LABEL.equals(cell.getType())) {
            contents=cell.getContents();
            if (names.contains(contents)) {
              if (skip) {
                continue;
              }
              if (rename) {
                contents=contents + ""String_Node_Str"" + new Date()+ ""String_Node_Str"";
              }
            }
            UDIParameters udiParameters=new ImportFactory().new UDIParameters();
            udiParameters.name=contents;
            udiParameters.auther=row[6].getContents();
            udiParameters.description=row[2].getContents();
            udiParameters.purpose=row[1].getContents();
            udiParameters.status=DevelopmentStatus.DRAFT.getLiteral();
            udiParameters.category=row[16].getContents();
            for (            int columnIndex : expressionMap.keySet()) {
              String rowContent=row[columnIndex].getContents();
              if (!rowContent.equals(""String_Node_Str"")) {
                udiParameters.regex.put(expressionMap.get(columnIndex).getLiteral(),rowContent);
              }
            }
            createAndStoreUDI(udiParameters,selectionFolder);
            names.add(contents);
            information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),true));
          }
        }
      }
      rwb.close();
    }
 catch (    Exception e) {
      log.error(e,e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",contents),false));
    }
  }
  if (FactoriesUtil.DEFINITION.equalsIgnoreCase(fileExtName)) {
    String propFilePath=importFile.getPath().replaceFirst(PluginConstant.DOT_STRING + fileExtName,PluginConstant.DOT_STRING + FactoriesUtil.PROPERTIES_EXTENSION);
    File propFile=new File(propFilePath);
    if (!propFile.exists()) {
      return information;
    }
    String name=importFile.getName();
    try {
      if (names.contains(name)) {
        if (skip) {
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
          return information;
        }
        if (rename) {
          name=name + ""String_Node_Str"" + new Date()+ Math.random()+ ""String_Node_Str"";
        }
      }
      IFile elementFile=selectionFolder.getFile(name);
      if (!elementFile.exists()) {
        elementFile.create(new FileInputStream(importFile),false,null);
        ModelElement modelElement=ModelElementFileFactory.getModelElement(elementFile);
        if (modelElement != null) {
          ElementWriterFactory.getInstance().createIndicatorDefinitionWriter().create(modelElement,selectionFolder);
          DefinitionHandler.getInstance().reloadIndicatorsDefinitions();
          names.add(name);
          information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),true));
        }
      }
    }
 catch (    Exception e) {
      log.error(e);
      information.add(new ReturnCode(DefaultMessagesImpl.getString(""String_Node_Str"",name),false));
    }
  }
  importObject.copyJarFiles();
  checkImportEvent(importItemName,information);
  return information;
}",0.9940078517804256
137868,"/** 
 * DOC talend Comment method ""checkEmptyError"".
 * @param obj
 * @param index
 */
private void checkEmptyError(String[] values){
  if (hasEmptyRow) {
    return;
  }
  try {
    String[] headers=reader.getHeaders();
    for (int index=0; index < headers.length; index++) {
      String header=headers[index];
      String value=values[index];
      if (isNotEmpty(value)) {
        if (isRegEx(index)) {
          emptyError=false;
        }
 else         if (PatternToExcelEnum.Category.getLiteral().equalsIgnoreCase(header)) {
          emptyError=false;
        }
 else         if (PatternToExcelEnum.JavaClassName.getLiteral().equalsIgnoreCase(header)) {
          emptyError=false;
        }
 else         if (PatternToExcelEnum.JavaJarPath.getLiteral().equalsIgnoreCase(header)) {
          emptyError=false;
        }
      }
      if (isLastOne(index,headers.length)) {
        if (emptyError) {
          hasEmptyRow=true;
        }
      }
    }
  }
 catch (  IOException e) {
    log.error(e,e);
  }
}","/** 
 * DOC talend Comment method ""checkEmptyError"".
 * @param obj
 * @param index
 */
private void checkEmptyError(String[] values){
  if (hasEmptyRow) {
    return;
  }
  try {
    String[] headers=reader.getHeaders();
    if (values.length < headers.length) {
      String errorRow=""String_Node_Str"";
      for (      String value : values) {
        errorRow+=value;
      }
      log.error(""String_Node_Str"" + errorRow);
      return;
    }
    for (int index=0; index < headers.length; index++) {
      String header=headers[index];
      String value=values[index];
      if (isNotEmpty(value)) {
        if (isRegEx(index)) {
          emptyError=false;
        }
 else         if (PatternToExcelEnum.Category.getLiteral().equalsIgnoreCase(header)) {
          emptyError=false;
        }
 else         if (PatternToExcelEnum.JavaClassName.getLiteral().equalsIgnoreCase(header)) {
          emptyError=false;
        }
 else         if (PatternToExcelEnum.JavaJarPath.getLiteral().equalsIgnoreCase(header)) {
          emptyError=false;
        }
      }
      if (isLastOne(index,headers.length)) {
        if (emptyError) {
          hasEmptyRow=true;
        }
      }
    }
  }
 catch (  IOException e) {
    log.error(e,e);
  }
}",0.900398406374502
137869,"@Override public Map<String,List<String>> getRoutineAndJars(){
  return null;
}","@Override public Map<String,List<LibraryInfo>> getRoutineAndJars(){
  return null;
}",0.9202453987730062
137870,"@Override public Map<String,List<String>> getRoutineAndJars(){
  throw new UnsupportedOperationException();
}","@Override public Map<String,List<LibraryInfo>> getRoutineAndJars(){
  throw new UnsupportedOperationException();
}",0.9417040358744396
137871,"/** 
 * Save item with dependencies.
 * @param element
 */
protected ReturnCode saveWithDependencies(Item item,ModelElement element){
  ReturnCode rc=new ReturnCode();
  addDependencies(element);
  addResourceContent(element.eResource(),element);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(element.eResource());
  Set<Resource> needSaves=new HashSet<Resource>();
  for (  EObject object : find.keySet()) {
    Resource re=object.eResource();
    if (re == null) {
      continue;
    }
    needSaves.add(re);
  }
  try {
    ProxyRepositoryFactory.getInstance().save(item);
  }
 catch (  PersistenceException e) {
    log.error(e,e);
    rc.setOk(Boolean.FALSE);
    rc.setMessage(e.getMessage());
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    for (    Resource toSave : needSaves) {
      EcoreUtil.resolveAll(toSave);
      resChangeService.saveResourceByEMFShared(toSave);
    }
  }
  return rc;
}","/** 
 * Save item with dependencies.
 * @param element
 */
protected ReturnCode saveWithDependencies(Item item,ModelElement element){
  ReturnCode rc=new ReturnCode();
  addDependencies(element);
  addResourceContent(element.eResource(),element);
  Map<EObject,Collection<Setting>> find=EcoreUtil.ExternalCrossReferencer.find(element.eResource());
  Set<Resource> needSaves=new HashSet<Resource>();
  for (  EObject object : find.keySet()) {
    Resource re=object.eResource();
    if (re == null) {
      continue;
    }
    EcoreUtil.resolveAll(re);
    needSaves.add(re);
  }
  try {
    ProxyRepositoryFactory.getInstance().save(item);
  }
 catch (  PersistenceException e) {
    log.error(e,e);
    rc.setOk(Boolean.FALSE);
    rc.setMessage(e.getMessage());
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  if (resChangeService != null) {
    for (    Resource toSave : needSaves) {
      resChangeService.saveResourceByEMFShared(toSave);
    }
  }
  return rc;
}",0.9693308550185874
137872,"/** 
 * DOC xqliu Comment method ""moveHiddenFolders"".
 * @param srcFolder
 * @param tarFolder
 */
public static void moveHiddenFolders(File srcFolder,File tarFolder){
  if (srcFolder == null || tarFolder == null) {
    return;
  }
  File[] listFiles=srcFolder.listFiles();
  for (  File file : listFiles) {
    if (file.isDirectory()) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        FilesUtils.copyDirectory(file,tarFolder);
      }
 else {
        moveHiddenFolders(file,getTargetFile(file,srcFolder,tarFolder));
      }
    }
  }
}","/** 
 * DOC xqliu Comment method ""moveHiddenFolders"".
 * @param srcFolder
 * @param tarFolder
 */
public static void moveHiddenFolders(File srcFolder,File tarFolder){
  if (srcFolder == null || tarFolder == null) {
    return;
  }
  File[] listFiles=srcFolder.listFiles();
  for (  File file : listFiles) {
    if (file.isDirectory()) {
      if (file.getName().startsWith(""String_Node_Str"")) {
        if (file.getName().equals(""String_Node_Str"")) {
          continue;
        }
        FilesUtils.copyDirectory(file,tarFolder);
      }
 else {
        moveHiddenFolders(file,getTargetFile(file,srcFolder,tarFolder));
      }
    }
  }
}",0.9278523489932886
137873,"/** 
 * when the drill down is : invalid, should find all rows which not start with 1~9,and 0. this include: null, and not digitals.
 * @return
 */
private String getInvalidClause(){
  String value=""String_Node_Str"";
  if (isSybase()) {
    return columnName + ""String_Node_Str"" + this.columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isPostGreSQL()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isTeradata()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isOracle()) {
    value=""String_Node_Str"" + dbmsLanguage.like() + ""String_Node_Str"";
  }
  return columnName + ""String_Node_Str"" + columnName+ value;
}","/** 
 * when the drill down is : invalid, should find all rows which not start with 1~9,and 0. this include: null, and not digitals.
 * @return
 */
private String getInvalidClause(){
  String value=""String_Node_Str"";
  if (isSybase()) {
    return columnName + ""String_Node_Str"" + this.columnName+ ""String_Node_Str""+ dbmsLanguage.like()+ ""String_Node_Str"";
  }
 else   if (isPostGreSQL()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isTeradata()) {
    return columnName + ""String_Node_Str"" + columnName+ ""String_Node_Str"";
  }
 else   if (isOracle()) {
    return columnName + ""String_Node_Str"" + ""String_Node_Str""+ columnName+ ""String_Node_Str"";
  }
 else   if (isDB2()) {
    value=""String_Node_Str"";
  }
 else   if (isSqlServer()) {
    value=""String_Node_Str"" + dbmsLanguage.like() + ""String_Node_Str"";
  }
 else   if (isInformix()) {
    value=""String_Node_Str"" + dbmsLanguage.like() + ""String_Node_Str"";
  }
  return columnName + ""String_Node_Str"" + columnName+ value;
}",0.7791619479048698
137874,"@Override protected void doRun(){
  if (this.repositoryNode instanceof JrxmlTempSubFolderNode) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  if (this.repositoryNode instanceof SourceFileSubFolderNode) {
    ReturnCode rc=WorkspaceResourceHelper.checkSourceFileSubFolderNodeOpening((SourceFileSubFolderNode)repositoryNode);
    if (rc.isOk()) {
      WorkspaceResourceHelper.showSourceFilesOpeningWarnMessages(rc.getMessage());
      return;
    }
  }
  InputDialog dialog=new InputDialog(Display.getDefault().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""),null,new IInputValidator(){
    public String isValid(    String newText){
      return null;
    }
  }
);
  if (dialog.open() == InputDialog.OK) {
    String value2=dialog.getValue();
    try {
      List<IRepositoryNode> openRepNodes=getOpenRepNodeForReName(this.repositoryNode,true);
      RepNodeUtils.closeModelElementEditor(openRepNodes,true);
      boolean isReportSubFolderRepNode=this.repositoryNode instanceof ReportSubFolderRepNode;
      IFolder folder=null;
      File tarFile=null;
      if (isReportSubFolderRepNode) {
        String tempFolderName=StringUtilities.getRandomString(8);
        folder=RepositoryNodeHelper.getIFolder(this.repositoryNode);
        File srcFile=WorkspaceUtils.ifolderToFile(folder);
        tarFile=WorkspaceUtils.ifolderToFile(folder.getParent().getFolder(new Path(tempFolderName)));
        if (!tarFile.exists()) {
          tarFile.mkdirs();
        }
        if (srcFile.exists() && tarFile.exists()) {
          FilesUtils.copyDirectory(srcFile,tarFile);
        }
      }
      IPath path=WorkbenchUtils.getPath(this.repositoryNode);
      ProxyRepositoryFactory.getInstance().renameFolder(this.repositoryNode.getObjectType(),path,value2);
      if (isReportSubFolderRepNode && folder != null && tarFile != null) {
        ReportUtils.copyAndUpdateRepGenDocFileInfo(folder.getParent().getFolder(new Path(value2)),tarFile,folder.getName());
      }
      if (this.repositoryNode != null && this.repositoryNode.getParent() != null) {
        CorePlugin.getDefault().refreshDQView(this.repositoryNode.getParent());
      }
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage());
      CorePlugin.getDefault().refreshDQView(this.repositoryNode.getParent());
      MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),e.getMessage());
    }
  }
}","@Override protected void doRun(){
  if (this.repositoryNode instanceof JrxmlTempSubFolderNode) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  if (this.repositoryNode instanceof SourceFileSubFolderNode) {
    ReturnCode rc=WorkspaceResourceHelper.checkSourceFileSubFolderNodeOpening((SourceFileSubFolderNode)repositoryNode);
    if (rc.isOk()) {
      WorkspaceResourceHelper.showSourceFilesOpeningWarnMessages(rc.getMessage());
      return;
    }
  }
  boolean isReportSubFolderRepNode=this.repositoryNode instanceof ReportSubFolderRepNode;
  IFolder folder=null;
  File tarFile=null;
  if (isReportSubFolderRepNode) {
    String tempFolderName=StringUtilities.getRandomString(8);
    folder=RepositoryNodeHelper.getIFolder(this.repositoryNode);
    File srcFile=WorkspaceUtils.ifolderToFile(folder);
    tarFile=WorkspaceUtils.ifolderToFile(folder.getParent().getFolder(new Path(tempFolderName)));
    if (!tarFile.exists()) {
      tarFile.mkdirs();
    }
    if (srcFile.exists() && tarFile.exists()) {
      FilesUtils.copyDirectory(srcFile,tarFile);
    }
  }
  ISelection selection=getSelection();
  Object obj=((IStructuredSelection)selection).getFirstElement();
  RepositoryNode node=(RepositoryNode)obj;
  String firstChildOpen=getFirstOpenedChild(node);
  if (firstChildOpen != null) {
    MessageDialog.openWarning(new Shell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",firstChildOpen,node.getProperties(EProperties.LABEL)));
    return;
  }
  ERepositoryObjectType objectType=null;
  IPath path=null;
  path=RepositoryNodeUtilities.getPath(node);
  objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (objectType != null) {
    FolderWizard processWizard=new TdqFolderWizard(path,objectType,node,tarFile);
    Shell activeShell=Display.getCurrent().getActiveShell();
    WizardDialog dialog=new WizardDialog(activeShell,processWizard);
    dialog.setPageSize(400,60);
    dialog.create();
    dialog.open();
    if (this.repositoryNode != null && this.repositoryNode.getParent() != null) {
      CorePlugin.getDefault().refreshDQView(this.repositoryNode.getParent());
    }
  }
}",0.4316848281642917
137875,"/** 
 * paint dragging column. MOD sizhaoliu TDQ-6010 extract this method so that it can be customized.
 * @param gc
 * @param offset 
 * @param alpha 
 */
protected void paintDraggingColumn(GC gc,int offset,int alpha){
  int y=0;
  gc.setAlpha(alpha);
  columnBeingPushed.getHeaderRenderer().setSelected(true);
  int height=0;
  if (columnBeingPushed.getColumnGroup() != null) {
    height=headerHeight - groupHeaderHeight;
    y=groupHeaderHeight;
  }
 else {
    height=headerHeight;
    y=0;
  }
  columnBeingPushed.getHeaderRenderer().setBounds(currentHeaderDragX - columnBeingPushed.getWidth() / 2 + offset,y,columnBeingPushed.getWidth(),height);
  columnBeingPushed.getHeaderRenderer().paint(gc,columnBeingPushed);
  columnBeingPushed.getHeaderRenderer().setSelected(false);
  gc.setAlpha(-1);
  gc.setAdvanced(false);
}","/** 
 * paint dragging column. MOD sizhaoliu TDQ-6010 extract this method so that it can be customized.
 * @param gc
 * @param offset 
 * @param alpha 
 */
protected void paintDraggingColumn(GC gc,int offset,int alpha){
  int y=0;
  gc.setAlpha(alpha);
  columnBeingPushed.getHeaderRenderer().setSelected(true);
  int height=0;
  if (columnBeingPushed.getColumnGroup() != null) {
    height=headerHeight - groupHeaderHeight;
    y=groupHeaderHeight;
  }
 else {
    height=headerHeight;
    y=0;
  }
  columnBeingPushed.getHeaderRenderer().setBounds(currentHeaderDragX - columnBeingPushed.getWidth() / 2 + offset,y,columnBeingPushed.getWidth(),height);
  columnBeingPushed.getHeaderRenderer().paint(gc,columnBeingPushed);
  gc.setAlpha(-1);
  gc.setAdvanced(false);
}",0.9623588456712672
137876,"private void onMouseMove(MouseEvent e){
  Point cell=getCell(new Point(e.x,e.y));
  if (cell != null && cell.x != 0) {
    GridVisibleRange range=getVisibleRange();
    for (    GridItem item : range.getItems()) {
      int i=indexOf(item);
      if (i == cell.y) {
        item.setBackground(0,yellow);
        item.setBackground(1,lightYellow);
      }
 else {
        item.setBackground(0,gray);
        item.setBackground(1,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
        if (item.getCheckable(1)) {
          item.setBackground(yellow);
        }
      }
      for (      GridColumn column : range.getColumns()) {
        int j=indexOf(column);
        if (i == cell.y && j == cell.x) {
          item.setBackground(j,yellow);
        }
 else         if (i == cell.y && j < cell.x || j == cell.x && i < cell.y) {
          item.setBackground(j,lightYellow);
        }
 else {
          item.setBackground(j,null);
        }
      }
    }
    for (int j=0; j < getColumnCount(); j++) {
      getColumn(j).getHeaderRenderer().setSelected(j == cell.x);
    }
  }
 else {
    GridItem currentItem=getItem(new Point(e.x,e.y));
    GridVisibleRange range=getVisibleRange();
    if (currentItem != null) {
      if (overRowSelect(currentItem,new Point(e.x,e.y))) {
        for (        GridItem item : range.getItems()) {
          int i=indexOf(item);
          if (item.getCheckable(0)) {
            if (i == indexOf(currentItem)) {
              item.setBackground(0,yellow);
              item.setBackground(1,yellow);
            }
 else {
              item.setBackground(0,gray);
              item.setBackground(1,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
            }
          }
          for (          GridColumn column : range.getColumns()) {
            int j=indexOf(column);
            if (i == indexOf(currentItem)) {
              item.setBackground(j,lightYellow);
            }
 else {
              item.setBackground(j,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
            }
          }
        }
        for (        GridColumn column : range.getColumns()) {
          column.getHeaderRenderer().setSelected(false);
        }
        return;
      }
    }
 else {
      GridColumn currentColumn=getColumn(new Point(e.x,e.y));
      if (currentColumn != null && !isDraggingColumn()) {
        int currentColumnIndex=indexOf(currentColumn);
        for (        GridItem item : range.getItems()) {
          for (          GridColumn column : range.getColumns()) {
            int j=indexOf(column);
            if (j == currentColumnIndex) {
              item.setBackground(j,lightYellow);
            }
 else {
              item.setBackground(j,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
            }
          }
          item.setBackground(0,IndicatorSelectGrid.gray);
          item.setBackground(1,null);
        }
        for (        GridColumn column : range.getColumns()) {
          int j=indexOf(column);
          column.getHeaderRenderer().setSelected(j == currentColumnIndex);
        }
      }
    }
  }
}","private void onMouseMove(MouseEvent e){
  Point cell=getCell(new Point(e.x,e.y));
  if (cell != null && cell.x != 0) {
    GridVisibleRange range=getVisibleRange();
    List<GridColumn> columnList=Arrays.asList(range.getColumns());
    cell.x=columnList.indexOf(getColumn(cell.x)) + 2;
    for (    GridItem item : range.getItems()) {
      int i=indexOf(item);
      if (i == cell.y) {
        item.setBackground(0,yellow);
        item.setBackground(1,lightYellow);
      }
 else {
        item.setBackground(0,gray);
        item.setBackground(1,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
        if (item.getCheckable(1)) {
          item.setBackground(yellow);
        }
      }
      for (      GridColumn column : range.getColumns()) {
        int realIdx=columnList.indexOf(column) + 2;
        int j=indexOf(column);
        if (i == cell.y && realIdx == cell.x) {
          item.setBackground(j,yellow);
        }
 else         if (i == cell.y && realIdx < cell.x || realIdx == cell.x && i < cell.y) {
          item.setBackground(j,lightYellow);
        }
 else {
          item.setBackground(j,null);
        }
      }
    }
    for (    GridColumn column : range.getColumns()) {
      int realIdx=columnList.indexOf(column) + 2;
      column.getHeaderRenderer().setSelected(realIdx == cell.x);
    }
  }
 else {
    GridItem currentItem=getItem(new Point(e.x,e.y));
    GridVisibleRange range=getVisibleRange();
    if (currentItem != null) {
      if (overRowSelect(currentItem,new Point(e.x,e.y))) {
        for (        GridItem item : range.getItems()) {
          int i=indexOf(item);
          if (item.getCheckable(0)) {
            if (i == indexOf(currentItem)) {
              item.setBackground(0,yellow);
              item.setBackground(1,yellow);
            }
 else {
              item.setBackground(0,gray);
              item.setBackground(1,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
            }
          }
          for (          GridColumn column : range.getColumns()) {
            int j=indexOf(column);
            if (i == indexOf(currentItem)) {
              item.setBackground(j,lightYellow);
            }
 else {
              item.setBackground(j,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
            }
          }
        }
        for (        GridColumn column : range.getColumns()) {
          column.getHeaderRenderer().setSelected(false);
        }
        return;
      }
    }
 else {
      GridColumn currentColumn=getColumn(new Point(e.x,e.y));
      if (currentColumn != null && !isDraggingColumn()) {
        int currentColumnIndex=indexOf(currentColumn);
        for (        GridItem item : range.getItems()) {
          for (          GridColumn column : range.getColumns()) {
            int j=indexOf(column);
            if (j == currentColumnIndex) {
              item.setBackground(j,lightYellow);
            }
 else {
              item.setBackground(j,getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
            }
          }
          item.setBackground(0,IndicatorSelectGrid.gray);
          item.setBackground(1,null);
        }
        for (        GridColumn column : range.getColumns()) {
          int j=indexOf(column);
          column.getHeaderRenderer().setSelected(j == currentColumnIndex);
        }
      }
    }
  }
}",0.9425963174996131
137877,"/** 
 * recursively check if a entire row/column is selected/
 * @param grid
 * @param parentItem
 * @param currentItem
 */
void processNodeSelection(GridItem parentItem,GridItem currentItem){
  if (currentItem.hasChildren()) {
    Boolean allCheckedInColumn[]=new Boolean[getColumnCount()];
    Boolean hasCheckedInColumn[]=new Boolean[getColumnCount()];
    for (int j=1; j < getColumnCount(); j++) {
      allCheckedInColumn[j]=true;
      hasCheckedInColumn[j]=false;
    }
    for (int i=0; i < currentItem.getItemCount(); i++) {
      GridItem childItem=currentItem.getItem(i);
      processNodeSelection(currentItem,childItem);
      boolean allCheckedInRow=true;
      boolean hasCheckedInRow=false;
      boolean expanded=false;
      for (int j=2; j < getColumnCount(); j++) {
        if (childItem.getChecked(j)) {
          hasCheckedInRow=true;
          hasCheckedInColumn[j]=true;
          expanded=true;
          if (childItem.getGrayed(j)) {
            allCheckedInRow=false;
            allCheckedInColumn[j]=false;
          }
        }
 else {
          if (childItem.getCheckable(j)) {
            allCheckedInRow=false;
            allCheckedInColumn[j]=false;
          }
        }
      }
      childItem.setChecked(1,hasCheckedInRow);
      childItem.setGrayed(1,hasCheckedInRow && !allCheckedInRow);
      if (expanded) {
        currentItem.setExpanded(true);
        if (parentItem != null) {
          parentItem.setExpanded(true);
        }
      }
    }
    boolean entireCategoryChecked=true;
    for (int j=2; j < getColumnCount(); j++) {
      if (currentItem.getCheckable(j)) {
        if (hasCheckedInColumn[j]) {
          hasCheckedInColumn[1]=true;
          currentItem.setChecked(j,true);
        }
 else {
          currentItem.setChecked(j,false);
        }
        if (allCheckedInColumn[j]) {
          currentItem.setGrayed(j,false);
        }
 else {
          currentItem.setGrayed(j,true);
          entireCategoryChecked=false;
        }
      }
    }
    if (currentItem.getCheckable(1)) {
      currentItem.setChecked(1,hasCheckedInColumn[1]);
      currentItem.setGrayed(1,!entireCategoryChecked);
    }
  }
}","/** 
 * recursively check if a entire row/column is selected/
 * @param grid
 * @param parentItem
 * @param currentItem
 */
void processNodeSelection(GridItem parentItem,GridItem currentItem){
  if (currentItem.hasChildren()) {
    Boolean allCheckedInColumn[]=new Boolean[getColumnCount()];
    Boolean hasCheckedInColumn[]=new Boolean[getColumnCount()];
    for (int j=1; j < getColumnCount(); j++) {
      allCheckedInColumn[j]=true;
      hasCheckedInColumn[j]=false;
    }
    for (int i=0; i < currentItem.getItemCount(); i++) {
      GridItem childItem=currentItem.getItem(i);
      processNodeSelection(currentItem,childItem);
      boolean allCheckedInRow=true;
      boolean hasCheckedInRow=false;
      boolean expanded=false;
      for (int j=2; j < getColumnCount(); j++) {
        if (childItem.getChecked(j)) {
          hasCheckedInRow=true;
          hasCheckedInColumn[j]=true;
          expanded=true;
          if (childItem.getGrayed(j)) {
            allCheckedInRow=false;
            allCheckedInColumn[j]=false;
          }
        }
 else {
          if (childItem.getCheckable(j)) {
            allCheckedInRow=false;
            allCheckedInColumn[j]=false;
          }
        }
      }
      childItem.setChecked(1,hasCheckedInRow);
      childItem.setGrayed(1,hasCheckedInRow && !allCheckedInRow);
      if (expanded) {
        currentItem.setExpanded(true);
        if (parentItem != null) {
          parentItem.setExpanded(true);
        }
      }
    }
    boolean entireCategoryChecked=true;
    for (int j=1; j < getColumnCount(); j++) {
      if (currentItem.getCheckable(j)) {
        if (hasCheckedInColumn[j]) {
          hasCheckedInColumn[1]=true;
          currentItem.setChecked(j,true);
        }
 else {
          currentItem.setChecked(j,false);
        }
        if (!allCheckedInColumn[j]) {
          currentItem.setGrayed(j,hasCheckedInColumn[j]);
          entireCategoryChecked=false;
        }
 else {
          currentItem.setGrayed(j,false);
        }
      }
    }
    if (currentItem.getCheckable(1)) {
      currentItem.setChecked(1,hasCheckedInColumn[1]);
      currentItem.setGrayed(1,hasCheckedInColumn[1] && !entireCategoryChecked);
    }
  }
}",0.9668419849073864
137878,"public Job initializeTemplates(){
  return null;
}","@Override public Job initializeTemplates(){
  return null;
}",0.9090909090909092
137879,"public void deleteAllJobs(boolean fromPluginModel){
}","@Override public void deleteAllJobs(boolean fromPluginModel){
}",0.913793103448276
137880,"public boolean getContextFlagFromQueryUtils(){
  return false;
}","@Override public boolean getContextFlagFromQueryUtils(){
  return false;
}",0.927536231884058
137881,"public void syncAllBeans() throws SystemException {
}","@Override public void syncAllBeans() throws SystemException {
}",0.913793103448276
137882,"public IMetadataTable convert(MetadataTable originalTable){
  return null;
}","@Override public IMetadataTable convert(MetadataTable originalTable){
  return null;
}",0.9382716049382716
137883,"public void synchronizeSapLib(){
}","@Override public void synchronizeSapLib(){
}",0.8717948717948718
137884,"public boolean checkJob(String name) throws BusinessException {
  return false;
}","@Override public boolean checkJob(String name) throws BusinessException {
  return false;
}",0.9418604651162792
137885,"public String getContextFileNameForPerl(String projectName,String jobName,String version,String context){
  return null;
}","@Override public String getContextFileNameForPerl(String projectName,String jobName,String version,String context){
  return null;
}",0.9606299212598424
137886,"public String getLanTypeString(){
  return null;
}","@Override public String getLanTypeString(){
  return null;
}",0.9090909090909092
137887,"public void removeJobLaunch(IRepositoryViewObject objToDelete){
}","@Override public void removeJobLaunch(IRepositoryViewObject objToDelete){
}",0.9285714285714286
137888,"public void deleteBeanfile(IRepositoryViewObject objToDelete){
}","@Override public void deleteBeanfile(IRepositoryViewObject objToDelete){
}",0.927536231884058
137889,"public void componentsReset(){
}","@Override public void componentsReset(){
}",0.8648648648648649
137890,"public String getJavaJobFolderName(String jobName,String version){
  return null;
}","@Override public String getJavaJobFolderName(String jobName,String version){
  return null;
}",0.9431818181818182
137891,"public List<ColumnNameChanged> getRemoveMetadataColumns(IMetadataTable oldTable,IMetadataTable newTable){
  return null;
}","@Override public List<ColumnNameChanged> getRemoveMetadataColumns(IMetadataTable oldTable,IMetadataTable newTable){
  return null;
}",0.9606299212598424
137892,"public void resetUniservLibraries(){
}","@Override public void resetUniservLibraries(){
}",0.8837209302325582
137893,"public Image getImageWithDocExt(String extension){
  return null;
}","@Override public Image getImageWithDocExt(String extension){
  return null;
}",0.9305555555555556
137894,"public String validateValueForDBType(String columnName){
  return null;
}","@Override public String validateValueForDBType(String columnName){
  return null;
}",0.935897435897436
137895,"public void createStatsLogAndImplicitParamter(Project project){
}","@Override public void createStatsLogAndImplicitParamter(Project project){
}",0.9285714285714286
137896,"public String getLastUser(){
  return null;
}","@Override public String getLastUser(){
  return null;
}",0.9
137897,"public void syncAllRoutines() throws SystemException {
}","@Override public void syncAllRoutines() throws SystemException {
}",0.918032786885246
137898,"public void deleteRoutinefile(IRepositoryViewObject objToDelete){
}","@Override public void deleteRoutinefile(IRepositoryViewObject objToDelete){
}",0.9305555555555556
137899,"public void syncAllRules(){
}","@Override public void syncAllRules(){
}",0.8529411764705882
137900,"public String getRootProjectNameForPerl(Item item){
  return null;
}","@Override public String getRootProjectNameForPerl(Item item){
  return null;
}",0.9315068493150684
137901,"public boolean isKeyword(String word){
  return false;
}","@Override public boolean isKeyword(String word){
  return false;
}",0.918032786885246
137902,"public List<ColumnNameChanged> getNewMetadataColumns(IMetadataTable oldTable,IMetadataTable newTable){
  return null;
}","@Override public List<ColumnNameChanged> getNewMetadataColumns(IMetadataTable oldTable,IMetadataTable newTable){
  return null;
}",0.9596774193548387
137903,"public boolean isContainContextParam(String code){
  return false;
}","@Override public boolean isContainContextParam(String code){
  return false;
}",0.9315068493150684
137904,"public String getJavaProjectFolderName(Item item){
  return null;
}","@Override public String getJavaProjectFolderName(Item item){
  return null;
}",0.9305555555555556
137905,"public IResource getSpecificResourceInJavaProject(IPath path) throws CoreException {
  return null;
}","@Override public IResource getSpecificResourceInJavaProject(IPath path) throws CoreException {
  return null;
}",0.9528301886792452
137906,"public void updatePalette(){
}","@Override public void updatePalette(){
}",0.8571428571428571
137907,"public boolean isOpenedItemInEditor(IRepositoryViewObject object){
  return false;
}","@Override public boolean isOpenedItemInEditor(IRepositoryViewObject object){
  return false;
}",0.9438202247191012
137908,"public List<String> readWorkspaceTasksDone(){
  return new ArrayList<String>();
}","@Override public List<String> readWorkspaceTasksDone(){
  return new ArrayList<String>();
}",0.9418604651162792
137909,"public List<ColumnNameChanged> getColumnNameChanged(IMetadataTable oldTable,IMetadataTable newTable){
  return null;
}","@Override public List<ColumnNameChanged> getColumnNameChanged(IMetadataTable oldTable,IMetadataTable newTable){
  return null;
}",0.959349593495935
137910,"public void synchronizeMapptingXML(){
}","@Override public void synchronizeMapptingXML(){
}",0.8863636363636364
137911,"public void initializeForTalendStartupJob(){
}","@Override public void initializeForTalendStartupJob(){
}",0.9019607843137256
137912,"public String filterSpecialChar(String input){
  return null;
}","@Override public String filterSpecialChar(String input){
  return null;
}",0.9264705882352942
137913,"public IResource getSpecificResourceInPerlProject(IPath path) throws CoreException {
  return null;
}","@Override public IResource getSpecificResourceInPerlProject(IPath path) throws CoreException {
  return null;
}",0.9528301886792452
137914,"public void syncLibraries(IProgressMonitor... monitorWrap){
}","@Override public void syncLibraries(IProgressMonitor... monitorWrap){
}",0.9242424242424242
137915,"public String getTemplateString(){
  return null;
}","@Override public String getTemplateString(){
  return null;
}",0.9107142857142856
137916,"public MenuManager[] getRepositoryContextualsActionGroups(){
  return null;
}","@Override public MenuManager[] getRepositoryContextualsActionGroups(){
  return null;
}",0.9390243902439024
137917,"public boolean isAlreadyBuilt(Project project){
  return false;
}","@Override public boolean isAlreadyBuilt(Project project){
  return false;
}",0.9285714285714286
137918,"public String getParameterUNIQUENAME(NodeType node){
  return null;
}","@Override public String getParameterUNIQUENAME(NodeType node){
  return null;
}",0.9324324324324323
137919,"public IPreferenceStore getPreferenceStore(){
  return CorePlugin.getDefault().getPreferenceStore();
}","@Override public IPreferenceStore getPreferenceStore(){
  return CorePlugin.getDefault().getPreferenceStore();
}",0.9532710280373832
137920,"public ImageDescriptor getImageWithSpecial(Image source){
  return null;
}","@Override public ImageDescriptor getImageWithSpecial(Image source){
  return null;
}",0.9367088607594936
137921,"public Map<String,List<URI>> getRoutineAndJars(){
  return null;
}","@Override public Map<String,List<String>> getRoutineAndJars(){
  return null;
}",0.8689655172413793
137922,"public void initializeComponents(IProgressMonitor monitor){
}","@Override public void initializeComponents(IProgressMonitor monitor){
}",0.9242424242424242
137923,"public void setFlagForQueryUtils(boolean flag){
}","@Override public void setFlagForQueryUtils(boolean flag){
}",0.9074074074074074
137924,"public void addWorkspaceTaskDone(String task){
}","@Override public void addWorkspaceTaskDone(String task){
}",0.9056603773584906
137925,"public void removeItemRelations(Item item){
}","@Override public void removeItemRelations(Item item){
}",0.9
137926,"@Override public Map<String,List<URI>> getRoutineAndJars(){
  throw new UnsupportedOperationException();
}","@Override public Map<String,List<String>> getRoutineAndJars(){
  throw new UnsupportedOperationException();
}",0.958139534883721
137927,"/** 
 * Resize event handler.
 */
private void onResize(){
  scrollValuesObsolete=true;
  topIndex=-1;
  bottomIndex=-1;
}","/** 
 * Resize event handler.
 */
private void onResize(){
  scrollValuesObsolete=true;
  topIndex=-1;
  bottomIndex=-1;
  startColumnIndex=-1;
  endColumnIndex=-1;
}",0.8472222222222222
137928,"/** 
 * Scrollbar selection event handler.
 */
private void onScrollSelection(){
  topIndex=-1;
  bottomIndex=-1;
  refreshHoverState();
  redraw(getClientArea().x,getClientArea().y,getClientArea().width,getClientArea().height,false);
}","/** 
 * Scrollbar selection event handler.
 */
private void onScrollSelection(){
  topIndex=-1;
  bottomIndex=-1;
  startColumnIndex=-1;
  endColumnIndex=-1;
  refreshHoverState();
  redraw(getClientArea().x,getClientArea().y,getClientArea().width,getClientArea().height,false);
}",0.9147286821705426
137929,"private void onMouseMove(MouseEvent e){
  Point cell=getCell(new Point(e.x,e.y));
  if (cell != null && cell.x != 0) {
    GridVisibleRange range=getVisibleRange();
    for (    GridItem item : range.getItems()) {
      int i=indexOf(item);
      if (i == cell.y) {
        item.setBackground(0,yellow);
      }
 else {
        item.setBackground(0,gray);
      }
      for (int j=1; j < getColumns().length; j++) {
        if (i == cell.y && j == cell.x) {
          item.setBackground(j,yellow);
        }
 else         if (i == cell.y && j < cell.x || j == cell.x && i < cell.y) {
          item.setBackground(j,lightYellow);
        }
 else {
          item.setBackground(j,null);
        }
      }
    }
    for (int j=0; j < getColumnCount(); j++) {
      getColumn(j).getHeaderRenderer().setSelected(j == cell.x);
    }
  }
}","private void onMouseMove(MouseEvent e){
  Point cell=getCell(new Point(e.x,e.y));
  if (cell != null && cell.x != 0) {
    GridVisibleRange range=getVisibleRange();
    for (    GridItem item : range.getItems()) {
      int i=indexOf(item);
      if (i == cell.y) {
        item.setBackground(0,yellow);
      }
 else {
        item.setBackground(0,gray);
      }
      for (      GridColumn column : range.getColumns()) {
        int j=indexOf(column);
        if (i == cell.y && j == cell.x) {
          item.setBackground(j,yellow);
        }
 else         if (i == cell.y && j < cell.x || j == cell.x && i < cell.y) {
          item.setBackground(j,lightYellow);
        }
 else {
          item.setBackground(j,null);
        }
      }
    }
    for (int j=0; j < getColumnCount(); j++) {
      getColumn(j).getHeaderRenderer().setSelected(j == cell.x);
    }
  }
}",0.4888366627497062
137930,"/** 
 * if these items in recycle bin are depended by others which is not in recycle bin,show a warning and return.
 * @param allNodes
 * @return
 */
public static boolean canEmptyRecyBin(List<IRepositoryNode> allNodes){
  for (  IRepositoryNode node : allNodes) {
    List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
    if (dependencies == null || dependencies.isEmpty()) {
      continue;
    }
    for (    ModelElement mod : dependencies) {
      Property property=PropertyHelper.getProperty(mod);
      if (property == null) {
        continue;
      }
      Item item=property.getItem();
      if (item != null && !item.getState().isDeleted()) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * if these items in recycle bin are depended by others which is not in recycle bin,show a warning and return.
 * @param allNodes
 * @return
 */
public static boolean canEmptyRecyBin(List<IRepositoryNode> allNodes){
  if (allNodes == null) {
    return false;
  }
  for (  IRepositoryNode node : allNodes) {
    List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
    if (dependencies == null || dependencies.isEmpty()) {
      continue;
    }
    for (    ModelElement mod : dependencies) {
      Property property=PropertyHelper.getProperty(mod);
      if (property == null) {
        continue;
      }
      Item item=property.getItem();
      if (item != null && !item.getState().isDeleted()) {
        return false;
      }
    }
  }
  return true;
}",0.9683377308707124
137931,"/** 
 * get the link files which link to the Report Generated Doc File.
 * @param file Report file
 * @return
 */
public static List<IFile> getRepDocLinkFiles(IFile file){
  List<IFile> linkFiles=new ArrayList<IFile>();
  try {
    IResource[] reportListFiles=ReportUtils.getReportListFiles(file);
    for (    IResource res : reportListFiles) {
      IFile linkFile=ResourceManager.getRoot().getFile(res.getFullPath());
      if (linkFile.exists() && linkFile.isLinked()) {
        linkFiles.add(linkFile);
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return linkFiles;
}","/** 
 * get the link files which link to the Report Generated Doc File.
 * @param file Report file
 * @return
 */
public static List<IFile> getRepDocLinkFiles(IFile file){
  List<IFile> linkFiles=new ArrayList<IFile>();
  if (file != null) {
    try {
      IResource[] reportListFiles=ReportUtils.getReportListFiles(file);
      for (      IResource res : reportListFiles) {
        IFile linkFile=ResourceManager.getRoot().getFile(res.getFullPath());
        if (linkFile.exists() && linkFile.isLinked()) {
          linkFiles.add(linkFile);
        }
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return linkFiles;
}",0.9511811023622048
137932,"private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)sourceNode);
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (isForbidNode(sourceNode)) {
    return false;
  }
  if (isSubObjectType(sourceNode,targetNode)) {
    return false;
  }
  IRepositoryViewObject object=sourceNode.getObject();
  if (object != null) {
    if (object.getProperty().getItem().getState().isLocked()) {
      return false;
    }
  }
  return true;
}","private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (isForbidNode(sourceNode)) {
    return false;
  }
  if (isSubObjectType(sourceNode,targetNode)) {
    return false;
  }
  IRepositoryViewObject object=sourceNode.getObject();
  if (object != null) {
    if (object.getProperty().getItem().getState().isLocked()) {
      return false;
    }
  }
  return true;
}",0.976470588235294
137933,"/** 
 * rename the RepositoryNode's folder name (the RepositoryNode must be a folder).
 * @param folderNode
 * @param label
 * @throws PersistenceException
 * @deprecated use ProxyRepositoryFactory.getInstance().renameFolder() instead
 */
public void renameFolderRepNode(IRepositoryNode folderNode,String label) throws PersistenceException {
  if (folderNode == null || label == null || ""String_Node_Str"".equals(label)) {
    return;
  }
  IRepositoryViewObject object=folderNode.getObject();
  if (object == null || !(object instanceof Folder)) {
    return;
  }
 else {
    if (WorkbenchUtils.equalsOS(label,((Folder)object).getLabel())) {
      return;
    }
  }
  String path=null;
  IRepositoryNode parentNode=folderNode.getParent();
  ERepositoryObjectType objectType=folderNode.getContentType();
  try {
    path=WorkbenchUtils.getPath(folderNode).makeRelativeTo(new Path(ERepositoryObjectType.getFolderName(objectType))).removeLastSegments(1).toString();
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  path=path == null ? ""String_Node_Str"" : path;
  path=path.startsWith(String.valueOf(IPath.SEPARATOR)) ? path : IPath.SEPARATOR + path;
  ProxyRepositoryFactory.getInstance().updateLockStatus();
  if (ProxyRepositoryManager.getInstance().hasLockedItems(folderNode)) {
    MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  Folder targetFoler=ProxyRepositoryFactory.getInstance().createFolder(folderNode.getContentType(),new Path(path),label);
  RepositoryNode targetNode=new RepositoryNode(targetFoler,folderNode.getParent(),ENodeType.SIMPLE_FOLDER);
  targetNode.setParent(folderNode.getParent());
  CorePlugin.getDefault().refreshDQView(parentNode);
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)folderNode);
  List<IRepositoryNode> children=folderNode.getChildren();
  if (children != null) {
    IRepositoryNode[] array=children.toArray(new IRepositoryNode[children.size()]);
    for (    IRepositoryNode inode : array) {
      if (inode != null) {
        if (inode instanceof ConnectionRepNode) {
          moveConnectionRepNode(inode,targetNode);
        }
 else         if (inode instanceof AnalysisRepNode) {
          moveAnalysisRepNode(inode,targetNode);
        }
 else         if (inode instanceof ReportRepNode) {
          moveReportRepNode(inode,targetNode);
        }
 else         if (inode instanceof SysIndicatorDefinitionRepNode) {
          moveUDIRepNode(inode,targetNode);
        }
 else         if (inode instanceof PatternRepNode) {
          movePatternRepNode(inode,targetNode);
        }
 else         if (inode instanceof SourceFileRepNode) {
          moveSourceFileRepNode(inode,targetNode);
        }
 else {
          IRepositoryViewObject viewObj=inode.getObject();
          if (viewObj != null) {
            if (viewObj instanceof Folder) {
              moveFolderRepNode(inode,targetNode);
            }
 else {
              moveCommonRepNode(inode,targetNode);
            }
          }
        }
      }
    }
  }
  try {
    IFolder folder=ResourceManager.getRootProject().getProject().getFolder(sourcePath);
    if (folder != null && folder.exists()) {
      folder.delete(true,null);
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  CorePlugin.getDefault().refreshDQView(parentNode);
}","/** 
 * rename the RepositoryNode's folder name (the RepositoryNode must be a folder).
 * @param folderNode
 * @param label
 * @throws PersistenceException
 * @deprecated use ProxyRepositoryFactory.getInstance().renameFolder() instead
 */
@Deprecated public void renameFolderRepNode(IRepositoryNode folderNode,String label) throws PersistenceException {
  if (folderNode == null || label == null || ""String_Node_Str"".equals(label)) {
    return;
  }
  IRepositoryViewObject object=folderNode.getObject();
  if (object == null || !(object instanceof Folder)) {
    return;
  }
 else {
    if (WorkbenchUtils.equalsOS(label,((Folder)object).getLabel())) {
      return;
    }
  }
  String path=null;
  IRepositoryNode parentNode=folderNode.getParent();
  ERepositoryObjectType objectType=folderNode.getContentType();
  try {
    path=WorkbenchUtils.getPath(folderNode).makeRelativeTo(new Path(ERepositoryObjectType.getFolderName(objectType))).removeLastSegments(1).toString();
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  path=path == null ? ""String_Node_Str"" : path;
  path=path.startsWith(String.valueOf(IPath.SEPARATOR)) ? path : IPath.SEPARATOR + path;
  ProxyRepositoryFactory.getInstance().updateLockStatus();
  if (ProxyRepositoryManager.getInstance().hasLockedItems(folderNode)) {
    MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  Folder targetFoler=ProxyRepositoryFactory.getInstance().createFolder(folderNode.getContentType(),new Path(path),label);
  RepositoryNode targetNode=new RepositoryNode(targetFoler,folderNode.getParent(),ENodeType.SIMPLE_FOLDER);
  targetNode.setParent(folderNode.getParent());
  CorePlugin.getDefault().refreshDQView(parentNode);
  IPath sourcePath=WorkbenchUtils.getPath(folderNode);
  List<IRepositoryNode> children=folderNode.getChildren();
  if (children != null) {
    IRepositoryNode[] array=children.toArray(new IRepositoryNode[children.size()]);
    for (    IRepositoryNode inode : array) {
      if (inode != null) {
        if (inode instanceof ConnectionRepNode) {
          moveConnectionRepNode(inode,targetNode);
        }
 else         if (inode instanceof AnalysisRepNode) {
          moveAnalysisRepNode(inode,targetNode);
        }
 else         if (inode instanceof ReportRepNode) {
          moveReportRepNode(inode,targetNode);
        }
 else         if (inode instanceof SysIndicatorDefinitionRepNode) {
          moveUDIRepNode(inode,targetNode);
        }
 else         if (inode instanceof PatternRepNode) {
          movePatternRepNode(inode,targetNode);
        }
 else         if (inode instanceof SourceFileRepNode) {
          moveSourceFileRepNode(inode,targetNode);
        }
 else {
          IRepositoryViewObject viewObj=inode.getObject();
          if (viewObj != null) {
            if (viewObj instanceof Folder) {
              moveFolderRepNode(inode,targetNode);
            }
 else {
              moveCommonRepNode(inode,targetNode);
            }
          }
        }
      }
    }
  }
  try {
    IFolder folder=ResourceManager.getRootProject().getProject().getFolder(sourcePath);
    if (folder != null && folder.exists()) {
      folder.delete(true,null);
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  CorePlugin.getDefault().refreshDQView(parentNode);
}",0.9959088252483927
137934,"/** 
 * move the IRepositoryViewObject from the sourceNode to targetNode, don't refresh the source and target node, user need to refresh the dq repository view tree by hand.
 * @param objectToMove
 * @param sourceNode
 * @param targetNode
 * @param basePath
 */
public void moveObject(IRepositoryViewObject objectToMove,IRepositoryNode sourceNode,IRepositoryNode targetNode,IPath basePath){
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  try {
    IPath makeRelativeTo=Path.EMPTY;
    if (!basePath.isEmpty()) {
      makeRelativeTo=targetPath.makeRelativeTo(basePath);
    }
    factory.moveObject(objectToMove,makeRelativeTo,Path.EMPTY);
  }
 catch (  PersistenceException e) {
    Log.error(sourceNode,e);
  }
catch (  BusinessException e) {
    Log.error(sourceNode,e);
  }
}","/** 
 * move the IRepositoryViewObject from the sourceNode to targetNode, don't refresh the source and target node, user need to refresh the dq repository view tree by hand.
 * @param objectToMove
 * @param sourceNode
 * @param targetNode
 * @param basePath
 */
public void moveObject(IRepositoryViewObject objectToMove,IRepositoryNode sourceNode,IRepositoryNode targetNode,IPath basePath){
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  try {
    IPath makeRelativeTo=Path.EMPTY;
    if (!basePath.isEmpty()) {
      makeRelativeTo=targetPath.makeRelativeTo(basePath);
    }
    factory.moveObject(objectToMove,makeRelativeTo,Path.EMPTY);
  }
 catch (  PersistenceException e) {
    Log.error(sourceNode,e);
  }
catch (  BusinessException e) {
    Log.error(sourceNode,e);
  }
}",0.9899623588456712
137935,"private void closeEditorIfOpened(IRepositoryNode fileNode){
  IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editorReferences=activePage.getEditorReferences();
  for (  IEditorReference reference : editorReferences) {
    try {
      IEditorInput editorInput=reference.getEditorInput();
      if (editorInput instanceof AbstractItemEditorInput) {
        AbstractItemEditorInput fileInput=(AbstractItemEditorInput)editorInput;
        if (fileNode.getObject().getLabel().equals(fileInput.getItem().getProperty().getLabel())) {
          activePage.closeEditor(reference.getEditor(false),false);
          break;
        }
      }
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
}","private void closeEditorIfOpened(IRepositoryNode fileNode){
  if (CorePlugin.getDefault() != null && CorePlugin.getDefault().getWorkbench() != null && CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow() != null) {
    IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
    if (activePage != null) {
      IEditorReference[] editorReferences=activePage.getEditorReferences();
      if (editorReferences != null) {
        for (        IEditorReference reference : editorReferences) {
          try {
            IEditorInput editorInput=reference.getEditorInput();
            if (editorInput instanceof AbstractItemEditorInput) {
              AbstractItemEditorInput fileInput=(AbstractItemEditorInput)editorInput;
              if (fileNode.getObject().getLabel().equals(fileInput.getItem().getProperty().getLabel())) {
                activePage.closeEditor(reference.getEditor(false),false);
                break;
              }
            }
          }
 catch (          PartInitException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
}",0.811340206185567
137936,"public void moveFolderRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  if (sourceNode instanceof SourceFileSubFolderNode) {
    SourceFileSubFolderNode folderNode=(SourceFileSubFolderNode)sourceNode;
    ReturnCode rc=WorkspaceResourceHelper.checkSourceFileSubFolderNodeOpening(folderNode);
    if (rc.isOk()) {
      WorkspaceResourceHelper.showSourceFilesOpeningWarnMessages(rc.getMessage());
      return;
    }
  }
  if (!canMoveNode(sourceNode,targetNode)) {
    return;
  }
  boolean isReportSubFolderRepNode=sourceNode instanceof ReportSubFolderRepNode;
  Map<IFolder,IFolder> reportGenDocInfoMap=new HashMap<IFolder,IFolder>();
  IFolder folder=null;
  File tarFile=null;
  if (isReportSubFolderRepNode) {
    String tempFolderName=StringUtilities.getRandomString(8);
    folder=RepositoryNodeHelper.getIFolder(sourceNode);
    File srcFile=WorkspaceUtils.ifolderToFile(folder);
    tarFile=WorkspaceUtils.ifolderToFile(folder.getParent().getFolder(new Path(tempFolderName)));
    if (!tarFile.exists()) {
      tarFile.mkdirs();
    }
    if (srcFile.exists() && tarFile.exists()) {
      FilesUtils.copyDirectory(srcFile,tarFile);
    }
    IFolder sourceFolder=RepositoryNodeHelper.getIFolder(sourceNode);
    IFolder targetFolder=RepositoryNodeHelper.getIFolder(targetNode);
    List<ReportRepNode> reportRepNodeList=new ArrayList<ReportRepNode>();
    getAllReportRepNode((ReportSubFolderRepNode)sourceNode,reportRepNodeList);
    if (!reportRepNodeList.isEmpty()) {
      buildReportGenDocInfoMap(reportRepNodeList,sourceFolder,targetFolder,reportGenDocInfoMap);
    }
  }
  RepositoryNodeBuilder instance=RepositoryNodeBuilder.getInstance();
  FolderHelper folderHelper=instance.getFolderHelper();
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)sourceNode);
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  ERepositoryObjectType objectType=targetNode.getContentType();
  IPath nodeFullPath=this.getNodeFullPath(objectType);
  IPath makeRelativeTo=nodeFullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath());
  computePath(folderHelper,sourcePath,targetPath,makeRelativeTo,objectType,sourceNode,targetNode);
  if (isReportSubFolderRepNode) {
    if (tarFile != null) {
      File file1=new File(tarFile.getAbsolutePath() + IPath.SEPARATOR + sourceNode.getLabel());
      File file2=WorkspaceUtils.ifolderToFile(RepositoryNodeHelper.getIFolder(targetNode).getFolder(new Path(sourceNode.getLabel())));
      ReportUtils.moveHiddenFolders(file1,file2);
      FilesUtils.deleteFile(tarFile,Boolean.TRUE);
    }
    if (!reportGenDocInfoMap.isEmpty()) {
      for (      IFolder outputFolder : reportGenDocInfoMap.keySet()) {
        ReportUtils.updateReportListFile(outputFolder,reportGenDocInfoMap.get(outputFolder));
      }
    }
  }
}","public void moveFolderRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  if (sourceNode instanceof SourceFileSubFolderNode) {
    SourceFileSubFolderNode folderNode=(SourceFileSubFolderNode)sourceNode;
    ReturnCode rc=WorkspaceResourceHelper.checkSourceFileSubFolderNodeOpening(folderNode);
    if (rc.isOk()) {
      WorkspaceResourceHelper.showSourceFilesOpeningWarnMessages(rc.getMessage());
      return;
    }
  }
  if (!canMoveNode(sourceNode,targetNode)) {
    return;
  }
  boolean isReportSubFolderRepNode=sourceNode instanceof ReportSubFolderRepNode;
  Map<IFolder,IFolder> reportGenDocInfoMap=new HashMap<IFolder,IFolder>();
  IFolder folder=null;
  File tarFile=null;
  if (isReportSubFolderRepNode) {
    String tempFolderName=StringUtilities.getRandomString(8);
    folder=RepositoryNodeHelper.getIFolder(sourceNode);
    File srcFile=WorkspaceUtils.ifolderToFile(folder);
    tarFile=WorkspaceUtils.ifolderToFile(folder.getParent().getFolder(new Path(tempFolderName)));
    if (!tarFile.exists()) {
      tarFile.mkdirs();
    }
    if (srcFile.exists() && tarFile.exists()) {
      FilesUtils.copyDirectory(srcFile,tarFile);
    }
    IFolder sourceFolder=RepositoryNodeHelper.getIFolder(sourceNode);
    IFolder targetFolder=RepositoryNodeHelper.getIFolder(targetNode);
    List<ReportRepNode> reportRepNodeList=new ArrayList<ReportRepNode>();
    getAllReportRepNode((ReportSubFolderRepNode)sourceNode,reportRepNodeList);
    if (!reportRepNodeList.isEmpty()) {
      buildReportGenDocInfoMap(reportRepNodeList,sourceFolder,targetFolder,reportGenDocInfoMap);
    }
  }
  RepositoryNodeBuilder instance=RepositoryNodeBuilder.getInstance();
  FolderHelper folderHelper=instance.getFolderHelper();
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  ERepositoryObjectType objectType=targetNode.getContentType();
  IPath nodeFullPath=this.getNodeFullPath(objectType);
  IPath makeRelativeTo=nodeFullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath());
  computePath(folderHelper,sourcePath,targetPath,makeRelativeTo,objectType,sourceNode,targetNode);
  if (isReportSubFolderRepNode) {
    if (tarFile != null) {
      File file1=new File(tarFile.getAbsolutePath() + IPath.SEPARATOR + sourceNode.getLabel());
      File file2=WorkspaceUtils.ifolderToFile(RepositoryNodeHelper.getIFolder(targetNode).getFolder(new Path(sourceNode.getLabel())));
      ReportUtils.moveHiddenFolders(file1,file2);
      FilesUtils.deleteFile(tarFile,Boolean.TRUE);
    }
    if (!reportGenDocInfoMap.isEmpty()) {
      for (      IFolder outputFolder : reportGenDocInfoMap.keySet()) {
        ReportUtils.updateReportListFile(outputFolder,reportGenDocInfoMap.get(outputFolder));
      }
    }
  }
}",0.9946236559139784
137937,"/** 
 * remove the report node (remove the report generate doc folder also).
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
private void moveReportRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  relocateJrxmlTemplates(sourceNode,targetNode);
  IFolder outputFolder=ReportUtils.getOutputFolder((ReportRepNode)sourceNode);
  File sourceFile=WorkspaceUtils.ifolderToFile(outputFolder);
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  IPath fullPath=ResourceManager.getReportsFolder().getFullPath();
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,Path.EMPTY);
  }
  IFolder targetFolder=RepositoryNodeHelper.getIFolder(targetNode);
  if (targetFolder != null) {
    File targetFile=WorkspaceUtils.ifolderToFile(targetFolder);
    FilesUtils.copyDirectory(sourceFile,targetFile);
    FilesUtils.deleteFile(sourceFile,true);
    ReportUtils.updateReportListFile(outputFolder,targetFolder);
    CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  }
}","/** 
 * remove the report node (remove the report generate doc folder also).
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
private void moveReportRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  relocateJrxmlTemplates(sourceNode,targetNode);
  IFolder outputFolder=ReportUtils.getOutputFolder((ReportRepNode)sourceNode);
  File sourceFile=WorkspaceUtils.ifolderToFile(outputFolder);
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  IPath fullPath=ResourceManager.getReportsFolder().getFullPath();
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,Path.EMPTY);
  }
  IFolder targetFolder=RepositoryNodeHelper.getIFolder(targetNode);
  if (targetFolder != null) {
    File targetFile=WorkspaceUtils.ifolderToFile(targetFolder);
    if (sourceFile.exists()) {
      if (targetFile.exists()) {
        FilesUtils.copyDirectory(sourceFile,targetFile);
      }
      FilesUtils.deleteFile(sourceFile,true);
    }
    ReportUtils.updateReportListFile(outputFolder,targetFolder);
    CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  }
}",0.9687034277198212
137938,"@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object aTarget){
  IRepositoryNode targetNode=null;
  try {
    IRepositoryNode[] selectedRepositoryNodes=null;
    targetNode=(IRepositoryNode)aTarget;
    if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
      return Status.CANCEL_STATUS;
    }
    TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
    if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
      selectedRepositoryNodes=getSelectedRepositoryNodes();
    }
    computeRepNodeType(selectedRepositoryNodes,targetNode);
    if (DQRepositoryNode.isOnFilterring()) {
      RepositoryNodeHelper.fillTreeList(null);
      RepositoryNodeHelper.setFilteredNode(RepositoryNodeHelper.getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
    }
  }
 catch (  PersistenceException e) {
    if (log.isInfoEnabled()) {
      log.info(e.toString());
    }
  }
  ProxyRepositoryManager.getInstance().refresh();
  return Status.OK_STATUS;
}","@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object aTarget){
  IRepositoryNode targetNode=null;
  try {
    IRepositoryNode[] selectedRepositoryNodes=null;
    targetNode=(IRepositoryNode)aTarget;
    if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
      return Status.CANCEL_STATUS;
    }
    TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
    if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
      selectedRepositoryNodes=getSelectedRepositoryNodes();
    }
    moveRepositoryNodes(selectedRepositoryNodes,targetNode);
    if (DQRepositoryNode.isOnFilterring()) {
      RepositoryNodeHelper.fillTreeList(null);
      RepositoryNodeHelper.setFilteredNode(RepositoryNodeHelper.getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
    }
  }
 catch (  PersistenceException e) {
    if (log.isInfoEnabled()) {
      log.info(e.toString());
    }
  }
  ProxyRepositoryManager.getInstance().refresh();
  return Status.OK_STATUS;
}",0.983575786015955
137939,"private boolean isSameType(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)sourceNode);
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  String sourceString=sourcePath.removeLastSegments(sourceCount - 2).toOSString();
  String targetString=targetPath.removeLastSegments(targetCount - 2).toOSString();
  ERepositoryObjectType sourceType=sourceNode.getContentType();
  ERepositoryObjectType targetentType=targetNode.getContentType();
  if (sourceType == null || targetentType == null || !sourceType.equals(targetentType)) {
    return false;
  }
  return sourceString.equals(targetString);
}","private boolean isSameType(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  String sourceString=sourcePath.removeLastSegments(sourceCount - 2).toOSString();
  String targetString=targetPath.removeLastSegments(targetCount - 2).toOSString();
  ERepositoryObjectType sourceType=sourceNode.getContentType();
  ERepositoryObjectType targetentType=targetNode.getContentType();
  if (sourceType == null || targetentType == null || !sourceType.equals(targetentType)) {
    return false;
  }
  return sourceString.equals(targetString);
}",0.9787516600265604
137940,"/** 
 * if these items in recycle bin are depended by others which is not in recycle bin,show a warning and return.
 * @param allNodes
 * @return
 */
public static boolean canEmptyRecyBin(List<IRepositoryNode> allNodes){
  for (  IRepositoryNode node : allNodes) {
    List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
    if (dependencies == null || dependencies.isEmpty()) {
      continue;
    }
    for (    ModelElement mod : dependencies) {
      Property property=PropertyHelper.getProperty(mod);
      if (property == null) {
        continue;
      }
      Item item=property.getItem();
      if (item != null && !item.getState().isDeleted()) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * if these items in recycle bin are depended by others which is not in recycle bin,show a warning and return.
 * @param allNodes
 * @return
 */
public static boolean canEmptyRecyBin(List<IRepositoryNode> allNodes){
  if (allNodes == null) {
    return false;
  }
  for (  IRepositoryNode node : allNodes) {
    List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
    if (dependencies == null || dependencies.isEmpty()) {
      continue;
    }
    for (    ModelElement mod : dependencies) {
      Property property=PropertyHelper.getProperty(mod);
      if (property == null) {
        continue;
      }
      Item item=property.getItem();
      if (item != null && !item.getState().isDeleted()) {
        return false;
      }
    }
  }
  return true;
}",0.9683377308707124
137941,"/** 
 * get the link files which link to the Report Generated Doc File.
 * @param file Report file
 * @return
 */
public static List<IFile> getRepDocLinkFiles(IFile file){
  List<IFile> linkFiles=new ArrayList<IFile>();
  try {
    IResource[] reportListFiles=ReportUtils.getReportListFiles(file);
    for (    IResource res : reportListFiles) {
      IFile linkFile=ResourceManager.getRoot().getFile(res.getFullPath());
      if (linkFile.exists() && linkFile.isLinked()) {
        linkFiles.add(linkFile);
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return linkFiles;
}","/** 
 * get the link files which link to the Report Generated Doc File.
 * @param file Report file
 * @return
 */
public static List<IFile> getRepDocLinkFiles(IFile file){
  List<IFile> linkFiles=new ArrayList<IFile>();
  if (file != null) {
    try {
      IResource[] reportListFiles=ReportUtils.getReportListFiles(file);
      for (      IResource res : reportListFiles) {
        IFile linkFile=ResourceManager.getRoot().getFile(res.getFullPath());
        if (linkFile.exists() && linkFile.isLinked()) {
          linkFiles.add(linkFile);
        }
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return linkFiles;
}",0.9511811023622048
137942,"private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)sourceNode);
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (isForbidNode(sourceNode)) {
    return false;
  }
  if (isSubObjectType(sourceNode,targetNode)) {
    return false;
  }
  IRepositoryViewObject object=sourceNode.getObject();
  if (object != null) {
    if (object.getProperty().getItem().getState().isLocked()) {
      return false;
    }
  }
  return true;
}","private boolean allowDND(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  if (sourceCount == 1 || targetCount == 1) {
    return false;
  }
  if (isForbidNode(sourceNode)) {
    return false;
  }
  if (isSubObjectType(sourceNode,targetNode)) {
    return false;
  }
  IRepositoryViewObject object=sourceNode.getObject();
  if (object != null) {
    if (object.getProperty().getItem().getState().isLocked()) {
      return false;
    }
  }
  return true;
}",0.976470588235294
137943,"/** 
 * rename the RepositoryNode's folder name (the RepositoryNode must be a folder).
 * @param folderNode
 * @param label
 * @throws PersistenceException
 * @deprecated use ProxyRepositoryFactory.getInstance().renameFolder() instead
 */
public void renameFolderRepNode(IRepositoryNode folderNode,String label) throws PersistenceException {
  if (folderNode == null || label == null || ""String_Node_Str"".equals(label)) {
    return;
  }
  IRepositoryViewObject object=folderNode.getObject();
  if (object == null || !(object instanceof Folder)) {
    return;
  }
 else {
    if (WorkbenchUtils.equalsOS(label,((Folder)object).getLabel())) {
      return;
    }
  }
  String path=null;
  IRepositoryNode parentNode=folderNode.getParent();
  ERepositoryObjectType objectType=folderNode.getContentType();
  try {
    path=WorkbenchUtils.getPath(folderNode).makeRelativeTo(new Path(ERepositoryObjectType.getFolderName(objectType))).removeLastSegments(1).toString();
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  path=path == null ? ""String_Node_Str"" : path;
  path=path.startsWith(String.valueOf(IPath.SEPARATOR)) ? path : IPath.SEPARATOR + path;
  ProxyRepositoryFactory.getInstance().updateLockStatus();
  if (ProxyRepositoryManager.getInstance().hasLockedItems(folderNode)) {
    MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  Folder targetFoler=ProxyRepositoryFactory.getInstance().createFolder(folderNode.getContentType(),new Path(path),label);
  RepositoryNode targetNode=new RepositoryNode(targetFoler,folderNode.getParent(),ENodeType.SIMPLE_FOLDER);
  targetNode.setParent(folderNode.getParent());
  CorePlugin.getDefault().refreshDQView(parentNode);
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)folderNode);
  List<IRepositoryNode> children=folderNode.getChildren();
  if (children != null) {
    IRepositoryNode[] array=children.toArray(new IRepositoryNode[children.size()]);
    for (    IRepositoryNode inode : array) {
      if (inode != null) {
        if (inode instanceof ConnectionRepNode) {
          moveConnectionRepNode(inode,targetNode);
        }
 else         if (inode instanceof AnalysisRepNode) {
          moveAnalysisRepNode(inode,targetNode);
        }
 else         if (inode instanceof ReportRepNode) {
          moveReportRepNode(inode,targetNode);
        }
 else         if (inode instanceof SysIndicatorDefinitionRepNode) {
          moveUDIRepNode(inode,targetNode);
        }
 else         if (inode instanceof PatternRepNode) {
          movePatternRepNode(inode,targetNode);
        }
 else         if (inode instanceof SourceFileRepNode) {
          moveSourceFileRepNode(inode,targetNode);
        }
 else {
          IRepositoryViewObject viewObj=inode.getObject();
          if (viewObj != null) {
            if (viewObj instanceof Folder) {
              moveFolderRepNode(inode,targetNode);
            }
 else {
              moveCommonRepNode(inode,targetNode);
            }
          }
        }
      }
    }
  }
  try {
    IFolder folder=ResourceManager.getRootProject().getProject().getFolder(sourcePath);
    if (folder != null && folder.exists()) {
      folder.delete(true,null);
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  CorePlugin.getDefault().refreshDQView(parentNode);
}","/** 
 * rename the RepositoryNode's folder name (the RepositoryNode must be a folder).
 * @param folderNode
 * @param label
 * @throws PersistenceException
 * @deprecated use ProxyRepositoryFactory.getInstance().renameFolder() instead
 */
@Deprecated public void renameFolderRepNode(IRepositoryNode folderNode,String label) throws PersistenceException {
  if (folderNode == null || label == null || ""String_Node_Str"".equals(label)) {
    return;
  }
  IRepositoryViewObject object=folderNode.getObject();
  if (object == null || !(object instanceof Folder)) {
    return;
  }
 else {
    if (WorkbenchUtils.equalsOS(label,((Folder)object).getLabel())) {
      return;
    }
  }
  String path=null;
  IRepositoryNode parentNode=folderNode.getParent();
  ERepositoryObjectType objectType=folderNode.getContentType();
  try {
    path=WorkbenchUtils.getPath(folderNode).makeRelativeTo(new Path(ERepositoryObjectType.getFolderName(objectType))).removeLastSegments(1).toString();
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
  path=path == null ? ""String_Node_Str"" : path;
  path=path.startsWith(String.valueOf(IPath.SEPARATOR)) ? path : IPath.SEPARATOR + path;
  ProxyRepositoryFactory.getInstance().updateLockStatus();
  if (ProxyRepositoryManager.getInstance().hasLockedItems(folderNode)) {
    MessageDialog.openError(PlatformUI.getWorkbench().getDisplay().getActiveShell(),DefaultMessagesImpl.getString(""String_Node_Str""),DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  Folder targetFoler=ProxyRepositoryFactory.getInstance().createFolder(folderNode.getContentType(),new Path(path),label);
  RepositoryNode targetNode=new RepositoryNode(targetFoler,folderNode.getParent(),ENodeType.SIMPLE_FOLDER);
  targetNode.setParent(folderNode.getParent());
  CorePlugin.getDefault().refreshDQView(parentNode);
  IPath sourcePath=WorkbenchUtils.getPath(folderNode);
  List<IRepositoryNode> children=folderNode.getChildren();
  if (children != null) {
    IRepositoryNode[] array=children.toArray(new IRepositoryNode[children.size()]);
    for (    IRepositoryNode inode : array) {
      if (inode != null) {
        if (inode instanceof ConnectionRepNode) {
          moveConnectionRepNode(inode,targetNode);
        }
 else         if (inode instanceof AnalysisRepNode) {
          moveAnalysisRepNode(inode,targetNode);
        }
 else         if (inode instanceof ReportRepNode) {
          moveReportRepNode(inode,targetNode);
        }
 else         if (inode instanceof SysIndicatorDefinitionRepNode) {
          moveUDIRepNode(inode,targetNode);
        }
 else         if (inode instanceof PatternRepNode) {
          movePatternRepNode(inode,targetNode);
        }
 else         if (inode instanceof SourceFileRepNode) {
          moveSourceFileRepNode(inode,targetNode);
        }
 else {
          IRepositoryViewObject viewObj=inode.getObject();
          if (viewObj != null) {
            if (viewObj instanceof Folder) {
              moveFolderRepNode(inode,targetNode);
            }
 else {
              moveCommonRepNode(inode,targetNode);
            }
          }
        }
      }
    }
  }
  try {
    IFolder folder=ResourceManager.getRootProject().getProject().getFolder(sourcePath);
    if (folder != null && folder.exists()) {
      folder.delete(true,null);
    }
  }
 catch (  CoreException e) {
    log.error(e,e);
  }
  CorePlugin.getDefault().refreshDQView(parentNode);
}",0.9959088252483927
137944,"/** 
 * move the IRepositoryViewObject from the sourceNode to targetNode, don't refresh the source and target node, user need to refresh the dq repository view tree by hand.
 * @param objectToMove
 * @param sourceNode
 * @param targetNode
 * @param basePath
 */
public void moveObject(IRepositoryViewObject objectToMove,IRepositoryNode sourceNode,IRepositoryNode targetNode,IPath basePath){
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  try {
    IPath makeRelativeTo=Path.EMPTY;
    if (!basePath.isEmpty()) {
      makeRelativeTo=targetPath.makeRelativeTo(basePath);
    }
    factory.moveObject(objectToMove,makeRelativeTo,Path.EMPTY);
  }
 catch (  PersistenceException e) {
    Log.error(sourceNode,e);
  }
catch (  BusinessException e) {
    Log.error(sourceNode,e);
  }
}","/** 
 * move the IRepositoryViewObject from the sourceNode to targetNode, don't refresh the source and target node, user need to refresh the dq repository view tree by hand.
 * @param objectToMove
 * @param sourceNode
 * @param targetNode
 * @param basePath
 */
public void moveObject(IRepositoryViewObject objectToMove,IRepositoryNode sourceNode,IRepositoryNode targetNode,IPath basePath){
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  try {
    IPath makeRelativeTo=Path.EMPTY;
    if (!basePath.isEmpty()) {
      makeRelativeTo=targetPath.makeRelativeTo(basePath);
    }
    factory.moveObject(objectToMove,makeRelativeTo,Path.EMPTY);
  }
 catch (  PersistenceException e) {
    Log.error(sourceNode,e);
  }
catch (  BusinessException e) {
    Log.error(sourceNode,e);
  }
}",0.9899623588456712
137945,"private void closeEditorIfOpened(IRepositoryNode fileNode){
  IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editorReferences=activePage.getEditorReferences();
  for (  IEditorReference reference : editorReferences) {
    try {
      IEditorInput editorInput=reference.getEditorInput();
      if (editorInput instanceof AbstractItemEditorInput) {
        AbstractItemEditorInput fileInput=(AbstractItemEditorInput)editorInput;
        if (fileNode.getObject().getLabel().equals(fileInput.getItem().getProperty().getLabel())) {
          activePage.closeEditor(reference.getEditor(false),false);
          break;
        }
      }
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
}","private void closeEditorIfOpened(IRepositoryNode fileNode){
  if (CorePlugin.getDefault() != null && CorePlugin.getDefault().getWorkbench() != null && CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow() != null) {
    IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
    if (activePage != null) {
      IEditorReference[] editorReferences=activePage.getEditorReferences();
      if (editorReferences != null) {
        for (        IEditorReference reference : editorReferences) {
          try {
            IEditorInput editorInput=reference.getEditorInput();
            if (editorInput instanceof AbstractItemEditorInput) {
              AbstractItemEditorInput fileInput=(AbstractItemEditorInput)editorInput;
              if (fileNode.getObject().getLabel().equals(fileInput.getItem().getProperty().getLabel())) {
                activePage.closeEditor(reference.getEditor(false),false);
                break;
              }
            }
          }
 catch (          PartInitException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
}",0.811340206185567
137946,"public void moveFolderRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  if (sourceNode instanceof SourceFileSubFolderNode) {
    SourceFileSubFolderNode folderNode=(SourceFileSubFolderNode)sourceNode;
    ReturnCode rc=WorkspaceResourceHelper.checkSourceFileSubFolderNodeOpening(folderNode);
    if (rc.isOk()) {
      WorkspaceResourceHelper.showSourceFilesOpeningWarnMessages(rc.getMessage());
      return;
    }
  }
  if (!canMoveNode(sourceNode,targetNode)) {
    return;
  }
  boolean isReportSubFolderRepNode=sourceNode instanceof ReportSubFolderRepNode;
  Map<IFolder,IFolder> reportGenDocInfoMap=new HashMap<IFolder,IFolder>();
  IFolder folder=null;
  File tarFile=null;
  if (isReportSubFolderRepNode) {
    String tempFolderName=StringUtilities.getRandomString(8);
    folder=RepositoryNodeHelper.getIFolder(sourceNode);
    File srcFile=WorkspaceUtils.ifolderToFile(folder);
    tarFile=WorkspaceUtils.ifolderToFile(folder.getParent().getFolder(new Path(tempFolderName)));
    if (!tarFile.exists()) {
      tarFile.mkdirs();
    }
    if (srcFile.exists() && tarFile.exists()) {
      FilesUtils.copyDirectory(srcFile,tarFile);
    }
    IFolder sourceFolder=RepositoryNodeHelper.getIFolder(sourceNode);
    IFolder targetFolder=RepositoryNodeHelper.getIFolder(targetNode);
    List<ReportRepNode> reportRepNodeList=new ArrayList<ReportRepNode>();
    getAllReportRepNode((ReportSubFolderRepNode)sourceNode,reportRepNodeList);
    if (!reportRepNodeList.isEmpty()) {
      buildReportGenDocInfoMap(reportRepNodeList,sourceFolder,targetFolder,reportGenDocInfoMap);
    }
  }
  RepositoryNodeBuilder instance=RepositoryNodeBuilder.getInstance();
  FolderHelper folderHelper=instance.getFolderHelper();
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)sourceNode);
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  ERepositoryObjectType objectType=targetNode.getContentType();
  IPath nodeFullPath=this.getNodeFullPath(objectType);
  IPath makeRelativeTo=nodeFullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath());
  computePath(folderHelper,sourcePath,targetPath,makeRelativeTo,objectType,sourceNode,targetNode);
  if (isReportSubFolderRepNode) {
    if (tarFile != null) {
      File file1=new File(tarFile.getAbsolutePath() + IPath.SEPARATOR + sourceNode.getLabel());
      File file2=WorkspaceUtils.ifolderToFile(RepositoryNodeHelper.getIFolder(targetNode).getFolder(new Path(sourceNode.getLabel())));
      ReportUtils.moveHiddenFolders(file1,file2);
      FilesUtils.deleteFile(tarFile,Boolean.TRUE);
    }
    if (!reportGenDocInfoMap.isEmpty()) {
      for (      IFolder outputFolder : reportGenDocInfoMap.keySet()) {
        ReportUtils.updateReportListFile(outputFolder,reportGenDocInfoMap.get(outputFolder));
      }
    }
  }
}","public void moveFolderRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  if (sourceNode instanceof JrxmlTempSubFolderNode) {
    MessageUI.openWarning(DefaultMessagesImpl.getString(""String_Node_Str""));
    return;
  }
  if (sourceNode instanceof SourceFileSubFolderNode) {
    SourceFileSubFolderNode folderNode=(SourceFileSubFolderNode)sourceNode;
    ReturnCode rc=WorkspaceResourceHelper.checkSourceFileSubFolderNodeOpening(folderNode);
    if (rc.isOk()) {
      WorkspaceResourceHelper.showSourceFilesOpeningWarnMessages(rc.getMessage());
      return;
    }
  }
  if (!canMoveNode(sourceNode,targetNode)) {
    return;
  }
  boolean isReportSubFolderRepNode=sourceNode instanceof ReportSubFolderRepNode;
  Map<IFolder,IFolder> reportGenDocInfoMap=new HashMap<IFolder,IFolder>();
  IFolder folder=null;
  File tarFile=null;
  if (isReportSubFolderRepNode) {
    String tempFolderName=StringUtilities.getRandomString(8);
    folder=RepositoryNodeHelper.getIFolder(sourceNode);
    File srcFile=WorkspaceUtils.ifolderToFile(folder);
    tarFile=WorkspaceUtils.ifolderToFile(folder.getParent().getFolder(new Path(tempFolderName)));
    if (!tarFile.exists()) {
      tarFile.mkdirs();
    }
    if (srcFile.exists() && tarFile.exists()) {
      FilesUtils.copyDirectory(srcFile,tarFile);
    }
    IFolder sourceFolder=RepositoryNodeHelper.getIFolder(sourceNode);
    IFolder targetFolder=RepositoryNodeHelper.getIFolder(targetNode);
    List<ReportRepNode> reportRepNodeList=new ArrayList<ReportRepNode>();
    getAllReportRepNode((ReportSubFolderRepNode)sourceNode,reportRepNodeList);
    if (!reportRepNodeList.isEmpty()) {
      buildReportGenDocInfoMap(reportRepNodeList,sourceFolder,targetFolder,reportGenDocInfoMap);
    }
  }
  RepositoryNodeBuilder instance=RepositoryNodeBuilder.getInstance();
  FolderHelper folderHelper=instance.getFolderHelper();
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  ERepositoryObjectType objectType=targetNode.getContentType();
  IPath nodeFullPath=this.getNodeFullPath(objectType);
  IPath makeRelativeTo=nodeFullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath());
  computePath(folderHelper,sourcePath,targetPath,makeRelativeTo,objectType,sourceNode,targetNode);
  if (isReportSubFolderRepNode) {
    if (tarFile != null) {
      File file1=new File(tarFile.getAbsolutePath() + IPath.SEPARATOR + sourceNode.getLabel());
      File file2=WorkspaceUtils.ifolderToFile(RepositoryNodeHelper.getIFolder(targetNode).getFolder(new Path(sourceNode.getLabel())));
      ReportUtils.moveHiddenFolders(file1,file2);
      FilesUtils.deleteFile(tarFile,Boolean.TRUE);
    }
    if (!reportGenDocInfoMap.isEmpty()) {
      for (      IFolder outputFolder : reportGenDocInfoMap.keySet()) {
        ReportUtils.updateReportListFile(outputFolder,reportGenDocInfoMap.get(outputFolder));
      }
    }
  }
}",0.9946236559139784
137947,"/** 
 * remove the report node (remove the report generate doc folder also).
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
private void moveReportRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  relocateJrxmlTemplates(sourceNode,targetNode);
  IFolder outputFolder=ReportUtils.getOutputFolder((ReportRepNode)sourceNode);
  File sourceFile=WorkspaceUtils.ifolderToFile(outputFolder);
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  IPath fullPath=ResourceManager.getReportsFolder().getFullPath();
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,Path.EMPTY);
  }
  IFolder targetFolder=RepositoryNodeHelper.getIFolder(targetNode);
  if (targetFolder != null) {
    File targetFile=WorkspaceUtils.ifolderToFile(targetFolder);
    FilesUtils.copyDirectory(sourceFile,targetFile);
    FilesUtils.deleteFile(sourceFile,true);
    ReportUtils.updateReportListFile(outputFolder,targetFolder);
    CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  }
}","/** 
 * remove the report node (remove the report generate doc folder also).
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
private void moveReportRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  relocateJrxmlTemplates(sourceNode,targetNode);
  IFolder outputFolder=ReportUtils.getOutputFolder((ReportRepNode)sourceNode);
  File sourceFile=WorkspaceUtils.ifolderToFile(outputFolder);
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  IPath fullPath=ResourceManager.getReportsFolder().getFullPath();
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,Path.EMPTY);
  }
  IFolder targetFolder=RepositoryNodeHelper.getIFolder(targetNode);
  if (targetFolder != null) {
    File targetFile=WorkspaceUtils.ifolderToFile(targetFolder);
    if (sourceFile.exists()) {
      if (targetFile.exists()) {
        FilesUtils.copyDirectory(sourceFile,targetFile);
      }
      FilesUtils.deleteFile(sourceFile,true);
    }
    ReportUtils.updateReportListFile(outputFolder,targetFolder);
    CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  }
}",0.9687034277198212
137948,"@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object aTarget){
  IRepositoryNode targetNode=null;
  try {
    IRepositoryNode[] selectedRepositoryNodes=null;
    targetNode=(IRepositoryNode)aTarget;
    if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
      return Status.CANCEL_STATUS;
    }
    TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
    if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
      selectedRepositoryNodes=getSelectedRepositoryNodes();
    }
    computeRepNodeType(selectedRepositoryNodes,targetNode);
    if (DQRepositoryNode.isOnFilterring()) {
      RepositoryNodeHelper.fillTreeList(null);
      RepositoryNodeHelper.setFilteredNode(RepositoryNodeHelper.getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
    }
  }
 catch (  PersistenceException e) {
    if (log.isInfoEnabled()) {
      log.info(e.toString());
    }
  }
  ProxyRepositoryManager.getInstance().refresh();
  return Status.OK_STATUS;
}","@Override public IStatus handleDrop(CommonDropAdapter aDropAdapter,DropTargetEvent aDropTargetEvent,Object aTarget){
  IRepositoryNode targetNode=null;
  try {
    IRepositoryNode[] selectedRepositoryNodes=null;
    targetNode=(IRepositoryNode)aTarget;
    if (aDropAdapter.getCurrentTarget() == null || aDropTargetEvent.data == null) {
      return Status.CANCEL_STATUS;
    }
    TransferData currentTransfer=aDropAdapter.getCurrentTransfer();
    if (LocalSelectionTransfer.getTransfer().isSupportedType(currentTransfer)) {
      selectedRepositoryNodes=getSelectedRepositoryNodes();
    }
    moveRepositoryNodes(selectedRepositoryNodes,targetNode);
    if (DQRepositoryNode.isOnFilterring()) {
      RepositoryNodeHelper.fillTreeList(null);
      RepositoryNodeHelper.setFilteredNode(RepositoryNodeHelper.getRootNode(ERepositoryObjectType.TDQ_DATA_PROFILING,true));
    }
  }
 catch (  PersistenceException e) {
    if (log.isInfoEnabled()) {
      log.info(e.toString());
    }
  }
  ProxyRepositoryManager.getInstance().refresh();
  return Status.OK_STATUS;
}",0.983575786015955
137949,"private boolean isSameType(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath((RepositoryNode)sourceNode);
  IPath targetPath=WorkbenchUtils.getPath((RepositoryNode)targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  String sourceString=sourcePath.removeLastSegments(sourceCount - 2).toOSString();
  String targetString=targetPath.removeLastSegments(targetCount - 2).toOSString();
  ERepositoryObjectType sourceType=sourceNode.getContentType();
  ERepositoryObjectType targetentType=targetNode.getContentType();
  if (sourceType == null || targetentType == null || !sourceType.equals(targetentType)) {
    return false;
  }
  return sourceString.equals(targetString);
}","private boolean isSameType(IRepositoryNode sourceNode,IRepositoryNode targetNode){
  IPath sourcePath=WorkbenchUtils.getPath(sourceNode);
  IPath targetPath=WorkbenchUtils.getPath(targetNode);
  int sourceCount=sourcePath.segmentCount();
  int targetCount=targetPath.segmentCount();
  String sourceString=sourcePath.removeLastSegments(sourceCount - 2).toOSString();
  String targetString=targetPath.removeLastSegments(targetCount - 2).toOSString();
  ERepositoryObjectType sourceType=sourceNode.getContentType();
  ERepositoryObjectType targetentType=targetNode.getContentType();
  if (sourceType == null || targetentType == null || !sourceType.equals(targetentType)) {
    return false;
  }
  return sourceString.equals(targetString);
}",0.9787516600265604
137950,"/** 
 * DOC scorreia Comment method ""setRowCountAndNullCount"".
 * @param elementToIndicator
 */
protected void setRowCountAndNullCount(Map<ModelElement,List<Indicator>> elementToIndicator){
  Set<ModelElement> analyzedElements=elementToIndicator.keySet();
  for (  ModelElement modelElement : analyzedElements) {
    RowCountIndicator rowCount=getRowCountIndicator(modelElement,elementToIndicator);
    NullCountIndicator nullCount=getNullCountIndicator(modelElement,elementToIndicator);
    List<Indicator> list=elementToIndicator.get(modelElement);
    for (    Indicator ind : list) {
      if (rowCount != null && needPercentage(ind)) {
        ind.setCount(rowCount.getCount());
      }
      if (nullCount != null) {
        ind.setNullCount(nullCount.getNullCount());
      }
    }
  }
}","/** 
 * DOC scorreia Comment method ""setRowCountAndNullCount"".
 * @param elementToIndicator
 */
protected void setRowCountAndNullCount(Map<ModelElement,List<Indicator>> elementToIndicator){
  Set<ModelElement> analyzedElements=elementToIndicator.keySet();
  for (  ModelElement modelElement : analyzedElements) {
    RowCountIndicator rowCount=IndicatorHelper.getRowCountIndicator(modelElement,elementToIndicator);
    NullCountIndicator nullCount=IndicatorHelper.getNullCountIndicator(modelElement,elementToIndicator);
    List<Indicator> list=elementToIndicator.get(modelElement);
    for (    Indicator ind : list) {
      if (rowCount != null && needPercentage(ind)) {
        ind.setCount(rowCount.getCount());
      }
      if (nullCount != null) {
        ind.setNullCount(nullCount.getNullCount());
      }
    }
  }
}",0.7506172839506173
137951,"/** 
 * DOC xqliu Comment method ""setRowCountAndNullCount"".
 * @param elementToIndicator
 */
protected void setRowCountAndNullCount(Map<ModelElement,List<Indicator>> elementToIndicator){
}","/** 
 * DOC xqliu Comment method ""setRowCountAndNullCount"".
 * @param elementToIndicator
 */
protected void setRowCountAndNullCount(Map<ModelElement,List<Indicator>> elementToIndicator){
  Set<ModelElement> analyzedElements=elementToIndicator.keySet();
  for (  ModelElement modelElement : analyzedElements) {
    RowCountIndicator rowCount=IndicatorHelper.getRowCountIndicator(modelElement,elementToIndicator);
    NullCountIndicator nullCount=IndicatorHelper.getNullCountIndicator(modelElement,elementToIndicator);
    List<Indicator> list=elementToIndicator.get(modelElement);
    for (    Indicator ind : list) {
      if (rowCount != null && needPercentage(ind)) {
        ind.setCount(rowCount.getCount());
      }
      if (nullCount != null) {
        ind.setNullCount(nullCount.getNullCount());
      }
    }
  }
}",0.3719090009891196
137952,"@Override public void handle(Object object,String[] rowValues){
  if (duplicateMap.containsKey(object)) {
    duplicateMap.get(object).add(rowValues);
  }
 else {
    List<Object[]> temp=new ArrayList<Object[]>();
    temp.add(rowValues);
    duplicateMap.put(object,temp);
  }
}","@Override public void handle(Object object,String[] rowValues){
  super.handle(object);
  if (duplicateMap.containsKey(object)) {
    duplicateMap.get(object).add(rowValues);
  }
 else {
    List<Object[]> temp=new ArrayList<Object[]>();
    temp.add(rowValues);
    duplicateMap.put(object,temp);
  }
}",0.9587628865979382
137953,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public void setDuplicateValueCount(Long newDuplicateValueCount){
  Long oldDuplicateValueCount=duplicateValueCount;
  duplicateValueCount=newDuplicateValueCount;
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,IndicatorsPackage.DUPLICATE_COUNT_INDICATOR__DUPLICATE_VALUE_COUNT,oldDuplicateValueCount,duplicateValueCount));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public void setDuplicateValueCount(Long newDuplicateValueCount){
  Long oldDuplicateValueCount=duplicateValueCount;
  duplicateValueCount=newDuplicateValueCount;
  if (eNotificationRequired()) {
    eNotify(new ENotificationImpl(this,Notification.SET,IndicatorsPackage.DUPLICATE_COUNT_INDICATOR__DUPLICATE_VALUE_COUNT,oldDuplicateValueCount,duplicateValueCount));
  }
}",0.9910514541387024
137954,"/** 
 * if these items in recycle bin are depended by others which is not in recycle bin,show a warning and return.
 * @param allNodes
 * @return
 */
public static boolean canEmptyRecyBin(List<IRepositoryNode> allNodes){
  for (  IRepositoryNode node : allNodes) {
    List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
    if (dependencies == null || dependencies.isEmpty()) {
      continue;
    }
    for (    ModelElement mod : dependencies) {
      Property property=PropertyHelper.getProperty(mod);
      if (property == null) {
        continue;
      }
      Item item=property.getItem();
      if (item != null && !item.getState().isDeleted()) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * if these items in recycle bin are depended by others which is not in recycle bin,show a warning and return.
 * @param allNodes
 * @return
 */
public static boolean canEmptyRecyBin(List<IRepositoryNode> allNodes){
  if (allNodes == null) {
    return false;
  }
  for (  IRepositoryNode node : allNodes) {
    List<ModelElement> dependencies=EObjectHelper.getDependencyClients(node);
    if (dependencies == null || dependencies.isEmpty()) {
      continue;
    }
    for (    ModelElement mod : dependencies) {
      Property property=PropertyHelper.getProperty(mod);
      if (property == null) {
        continue;
      }
      Item item=property.getItem();
      if (item != null && !item.getState().isDeleted()) {
        return false;
      }
    }
  }
  return true;
}",0.9683377308707124
137955,"/** 
 * if the report's name changed, need to update the report folder name also.
 * @param oldFolderName
 * @param repItem
 */
public static void checkAndUpdateRepFolderName4Rename(IFolder parentFolder,String oldFolderName,TDQReportItem repItem){
  String newFolderName=ReportUtils.getSimpleName(repItem.getProperty());
  if (!oldFolderName.equals(newFolderName)) {
    File oldFolder=WorkspaceUtils.ifolderToFile(parentFolder.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + oldFolderName)));
    File newFolder=WorkspaceUtils.ifolderToFile(parentFolder.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + newFolderName)));
    try {
      oldFolder.renameTo(newFolder);
      File file=new File(ReportHelper.getOutputFolderNameDefault(parentFolder,newFolderName) + File.separator + REPORT_LIST);
      if (file.exists() && file.isFile()) {
        replaceReportGenDocFilePath(file,oldFolder.toString(),newFolder.toString());
      }
      parentFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}","/** 
 * if the report's name changed, need to update the report folder name also.
 * @param parentFolder
 * @param oldFolderName
 * @param repItem
 */
public static void checkAndUpdateRepFolderName4Rename(IFolder parentFolder,String oldFolderName,TDQReportItem repItem){
  String newFolderName=ReportUtils.getSimpleName(repItem.getProperty());
  if (!oldFolderName.equals(newFolderName)) {
    File oldFolder=WorkspaceUtils.ifolderToFile(parentFolder.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + oldFolderName)));
    File newFolder=WorkspaceUtils.ifolderToFile(parentFolder.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + newFolderName)));
    try {
      oldFolder.renameTo(newFolder);
      File file=new File(ReportHelper.getOutputFolderNameDefault(parentFolder,newFolderName) + File.separator + REPORT_LIST);
      if (file.exists() && file.isFile()) {
        replaceReportGenDocFilePath(file,oldFolder.toString(),newFolder.toString());
      }
      parentFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}",0.9895407003183264
137956,"/** 
 * get the link files which link to the Report Generated Doc File.
 * @param file Report file
 * @return
 */
public static List<IFile> getRepDocLinkFiles(IFile file){
  List<IFile> linkFiles=new ArrayList<IFile>();
  try {
    IResource[] reportListFiles=ReportUtils.getReportListFiles(file);
    for (    IResource res : reportListFiles) {
      IFile linkFile=ResourceManager.getRoot().getFile(res.getFullPath());
      if (linkFile.exists() && linkFile.isLinked()) {
        linkFiles.add(linkFile);
      }
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return linkFiles;
}","/** 
 * get the link files which link to the Report Generated Doc File.
 * @param file Report file
 * @return
 */
public static List<IFile> getRepDocLinkFiles(IFile file){
  List<IFile> linkFiles=new ArrayList<IFile>();
  if (file != null) {
    try {
      IResource[] reportListFiles=ReportUtils.getReportListFiles(file);
      for (      IResource res : reportListFiles) {
        IFile linkFile=ResourceManager.getRoot().getFile(res.getFullPath());
        if (linkFile.exists() && linkFile.isLinked()) {
          linkFiles.add(linkFile);
        }
      }
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
  return linkFiles;
}",0.9511811023622048
137957,"private void closeEditorIfOpened(IRepositoryNode fileNode){
  IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  IEditorReference[] editorReferences=activePage.getEditorReferences();
  for (  IEditorReference reference : editorReferences) {
    try {
      IEditorInput editorInput=reference.getEditorInput();
      if (editorInput instanceof AbstractItemEditorInput) {
        AbstractItemEditorInput fileInput=(AbstractItemEditorInput)editorInput;
        if (fileNode.getObject().getLabel().equals(fileInput.getItem().getProperty().getLabel())) {
          activePage.closeEditor(reference.getEditor(false),false);
          break;
        }
      }
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
  }
}","private void closeEditorIfOpened(IRepositoryNode fileNode){
  if (CorePlugin.getDefault() != null && CorePlugin.getDefault().getWorkbench() != null && CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow() != null) {
    IWorkbenchPage activePage=CorePlugin.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();
    if (activePage != null) {
      IEditorReference[] editorReferences=activePage.getEditorReferences();
      if (editorReferences != null) {
        for (        IEditorReference reference : editorReferences) {
          try {
            IEditorInput editorInput=reference.getEditorInput();
            if (editorInput instanceof AbstractItemEditorInput) {
              AbstractItemEditorInput fileInput=(AbstractItemEditorInput)editorInput;
              if (fileNode.getObject().getLabel().equals(fileInput.getItem().getProperty().getLabel())) {
                activePage.closeEditor(reference.getEditor(false),false);
                break;
              }
            }
          }
 catch (          PartInitException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
}",0.811340206185567
137958,"/** 
 * Test method for   {@link org.talend.dq.indicators.ColumnSetIndicatorEvaluator#executeSqlQuery(String)} .
 */
@Test public void testExecuteSqlQuery_file() throws Exception {
  Analysis analysis=mock(Analysis.class);
  stub(method(DelimitedFileIndicatorEvaluator.class,""String_Node_Str""));
  stub(method(DelimitedFileIndicatorEvaluator.class,""String_Node_Str"",Indicator.class,EMap.class));
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DelimitedFileConnection deliFileConn=mock(DelimitedFileConnection.class);
  when(context.getConnection()).thenReturn(deliFileConn);
  when(deliFileConn.isContextMode()).thenReturn(true);
  when(deliFileConn.getFilePath()).thenReturn(context_fd1_File);
  when(deliFileConn.getFieldSeparatorValue()).thenReturn(context_fd1_FieldSeparator);
  when(deliFileConn.getEncoding()).thenReturn(context_fd1_Encoding);
  IPath iPath=mock(IPath.class);
  File file=new File(realFile);
  BufferedWriter output=new BufferedWriter(new FileWriter(file));
  String str=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  output.write(str);
  output.close();
  when(iPath.toFile()).thenReturn(file);
  assertTrue(file.exists());
  PowerMockito.mockStatic(ConnectionUtils.class);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,context_fd1_File)).thenReturn(realFile);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,context_fd1_FieldSeparator)).thenReturn(realFieldSeparator);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,context_fd1_Encoding)).thenReturn(realEncoding);
  PowerMockito.mockStatic(ResourceBundle.class);
  ResourceBundle bundle=mock(ResourceBundle.class);
  when(ResourceBundle.getBundle(""String_Node_Str"")).thenReturn(bundle);
  PowerMockito.mockStatic(Messages.class);
  when(Messages.getString(anyString())).thenReturn(""String_Node_Str"");
  AnalysisResult results=mock(AnalysisResult.class);
  when(analysis.getResults()).thenReturn(results);
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=mock(EMap.class);
  when(results.getIndicToRowMap()).thenReturn(indicToRowMap);
  when(deliFileConn.getHeaderValue()).thenReturn(context_fd1_Header);
  when(deliFileConn.getFooterValue()).thenReturn(zero);
  when(deliFileConn.getLimitValue()).thenReturn(zero);
  when(deliFileConn.getEscapeType()).thenReturn(Escape.DELIMITED);
  when(deliFileConn.getRowSeparatorValue()).thenReturn(context_fd1_RowSeparator);
  when(deliFileConn.isSplitRecord()).thenReturn(false);
  when(deliFileConn.isRemoveEmptyRow()).thenReturn(false);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,context_fd1_Header)).thenReturn(realHeading);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,zero)).thenReturn(zero);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,context_fd1_RowSeparator)).thenReturn(realRowSeparator);
  PowerMockito.mockStatic(LanguageManager.class);
  when(LanguageManager.getCurrentLanguage()).thenReturn(ECodeLanguage.JAVA);
  PowerMockito.mockStatic(ParameterUtil.class);
  when(ParameterUtil.trimParameter(realFile)).thenReturn(realFile);
  when(ParameterUtil.trimParameter(realEncoding)).thenReturn(realEncoding);
  PowerMockito.mockStatic(StringUtils.class);
  when(StringUtils.loadConvert(realFieldSeparator,ECodeLanguage.JAVA.getName())).thenReturn(realFieldSeparator);
  when(ParameterUtil.trimParameter(realFieldSeparator)).thenReturn(realFieldSeparator);
  when(StringUtils.loadConvert(realRowSeparator,ECodeLanguage.JAVA.getName())).thenReturn(realRowSeparator);
  when(ParameterUtil.trimParameter(realRowSeparator)).thenReturn(realRowSeparator);
  List<ModelElement> columnElementList=new BasicEList<ModelElement>();
  List<MetadataColumn> columnElementList2=new BasicEList<MetadataColumn>();
  MetadataColumn mc0=mock(MetadataColumn.class);
  MetadataColumn mc1=mock(MetadataColumn.class);
  MetadataColumn mc2=mock(MetadataColumn.class);
  columnElementList.add(mc0);
  columnElementList.add(mc1);
  columnElementList.add(mc2);
  columnElementList2.add(mc0);
  columnElementList2.add(mc1);
  columnElementList2.add(mc2);
  EList<ModelElement> eLs=(EList<ModelElement>)columnElementList;
  when(context.getAnalysedElements()).thenReturn(eLs);
  PowerMockito.mockStatic(ColumnHelper.class);
  MetadataTable mTable=mock(MetadataTable.class);
  when(mTable.getColumns()).thenReturn((EList<MetadataColumn>)columnElementList2);
  when(ColumnHelper.getColumnOwnerAsMetadataTable(mc0)).thenReturn(mTable);
  when(ColumnHelper.getColumnOwnerAsMetadataTable(mc1)).thenReturn(mTable);
  when(ColumnHelper.getColumnOwnerAsMetadataTable(mc2)).thenReturn(mTable);
  ColumnSetIndicatorEvaluator evaluator=new ColumnSetIndicatorEvaluator(analysis);
  ReturnCode rc=evaluator.executeSqlQuery(empty);
  assertTrue(rc.isOk());
}","/** 
 * Test method for   {@link org.talend.dq.indicators.ColumnSetIndicatorEvaluator#executeSqlQuery(String)} .
 */
@Test public void testExecuteSqlQuery_file() throws Exception {
  Analysis analysis=mock(Analysis.class);
  stub(method(DelimitedFileIndicatorEvaluator.class,""String_Node_Str""));
  stub(method(DelimitedFileIndicatorEvaluator.class,""String_Node_Str"",Indicator.class,EMap.class));
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DelimitedFileConnection deliFileConn=mock(DelimitedFileConnection.class);
  when(context.getConnection()).thenReturn(deliFileConn);
  when(deliFileConn.isContextMode()).thenReturn(true);
  when(deliFileConn.getFilePath()).thenReturn(context_fd1_File);
  when(deliFileConn.getFieldSeparatorValue()).thenReturn(context_fd1_FieldSeparator);
  when(deliFileConn.getEncoding()).thenReturn(context_fd1_Encoding);
  IPath iPath=mock(IPath.class);
  File file=new File(realFile);
  BufferedWriter output=new BufferedWriter(new FileWriter(file));
  String str=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  output.write(str);
  output.close();
  when(iPath.toFile()).thenReturn(file);
  assertTrue(file.exists());
  PowerMockito.mockStatic(ConnectionUtils.class);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,context_fd1_File)).thenReturn(realFile);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,context_fd1_FieldSeparator)).thenReturn(realFieldSeparator);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,context_fd1_Encoding)).thenReturn(realEncoding);
  PowerMockito.mockStatic(ResourceBundle.class);
  ResourceBundle bundle=mock(ResourceBundle.class);
  when(ResourceBundle.getBundle(""String_Node_Str"")).thenReturn(bundle);
  PowerMockito.mockStatic(Messages.class);
  when(Messages.getString(anyString())).thenReturn(""String_Node_Str"");
  AnalysisResult results=mock(AnalysisResult.class);
  when(analysis.getResults()).thenReturn(results);
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=mock(EMap.class);
  when(results.getIndicToRowMap()).thenReturn(indicToRowMap);
  when(deliFileConn.getHeaderValue()).thenReturn(context_fd1_Header);
  when(deliFileConn.getFooterValue()).thenReturn(zero);
  when(deliFileConn.getLimitValue()).thenReturn(zero);
  when(deliFileConn.getEscapeType()).thenReturn(Escape.DELIMITED);
  when(deliFileConn.getRowSeparatorValue()).thenReturn(context_fd1_RowSeparator);
  when(deliFileConn.isSplitRecord()).thenReturn(false);
  when(deliFileConn.isRemoveEmptyRow()).thenReturn(false);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,context_fd1_Header)).thenReturn(realHeading);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,zero)).thenReturn(zero);
  when(ConnectionUtils.getOriginalConntextValue(deliFileConn,context_fd1_RowSeparator)).thenReturn(realRowSeparator);
  PowerMockito.mockStatic(LanguageManager.class);
  when(LanguageManager.getCurrentLanguage()).thenReturn(ECodeLanguage.JAVA);
  PowerMockito.mockStatic(ParameterUtil.class);
  when(ParameterUtil.trimParameter(realFile)).thenReturn(realFile);
  when(ParameterUtil.trimParameter(realEncoding)).thenReturn(realEncoding);
  PowerMockito.mockStatic(StringUtils.class);
  when(StringUtils.loadConvert(realFieldSeparator,ECodeLanguage.JAVA.getName())).thenReturn(realFieldSeparator);
  when(ParameterUtil.trimParameter(realFieldSeparator)).thenReturn(realFieldSeparator);
  when(StringUtils.loadConvert(realRowSeparator,ECodeLanguage.JAVA.getName())).thenReturn(realRowSeparator);
  when(ParameterUtil.trimParameter(realRowSeparator)).thenReturn(realRowSeparator);
  List<ModelElement> columnElementList=new BasicEList<ModelElement>();
  List<MetadataColumn> columnElementList2=new BasicEList<MetadataColumn>();
  MetadataColumn mc0=mock(MetadataColumn.class);
  MetadataColumn mc1=mock(MetadataColumn.class);
  MetadataColumn mc2=mock(MetadataColumn.class);
  columnElementList.add(mc0);
  columnElementList.add(mc1);
  columnElementList.add(mc2);
  columnElementList2.add(mc0);
  columnElementList2.add(mc1);
  columnElementList2.add(mc2);
  EList<ModelElement> eLs=(EList<ModelElement>)columnElementList;
  when(context.getAnalysedElements()).thenReturn(eLs);
  PowerMockito.mockStatic(ColumnHelper.class);
  MetadataTable mTable=mock(MetadataTable.class);
  when(mTable.getColumns()).thenReturn((EList<MetadataColumn>)columnElementList2);
  when(ColumnHelper.getColumnOwnerAsMetadataTable(mc0)).thenReturn(mTable);
  when(ColumnHelper.getColumnOwnerAsMetadataTable(mc1)).thenReturn(mTable);
  when(ColumnHelper.getColumnOwnerAsMetadataTable(mc2)).thenReturn(mTable);
  ColumnSetIndicatorEvaluator evaluator=new ColumnSetIndicatorEvaluator(analysis);
  ColumnSetIndicatorEvaluator spyEvaluator=Mockito.spy(evaluator);
  Mockito.doReturn(true).when(spyEvaluator).continueRun();
  ReturnCode rc=spyEvaluator.executeSqlQuery(empty);
  assertTrue(rc.isOk());
}",0.984130193065804
137959,"@Test public void testExecuteSqlQuery_delimetd() throws Exception {
  String empty=""String_Node_Str"";
  Analysis analysis=mock(Analysis.class);
  DelimitedFileIndicatorEvaluator delFileIndiEvaluator=new DelimitedFileIndicatorEvaluator(analysis);
  stub(method(DelimitedFileIndicatorEvaluator.class,""String_Node_Str""));
  stub(method(DelimitedFileIndicatorEvaluator.class,""String_Node_Str"",Indicator.class,EMap.class));
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DelimitedFileConnection deliFileConn=mock(DelimitedFileConnection.class);
  when(context.getConnection()).thenReturn(deliFileConn);
  when(deliFileConn.isContextMode()).thenReturn(false);
  String path=""String_Node_Str"";
  when(deliFileConn.getFilePath()).thenReturn(path);
  IPath iPath=mock(IPath.class);
  File file=new File(path);
  BufferedWriter output=new BufferedWriter(new FileWriter(file));
  String str=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  output.write(str);
  output.close();
  when(iPath.toFile()).thenReturn(file);
  when(deliFileConn.getFieldSeparatorValue()).thenReturn(""String_Node_Str"");
  when(deliFileConn.getEncoding()).thenReturn(""String_Node_Str"");
  AnalysisResult results=mock(AnalysisResult.class);
  when(analysis.getResults()).thenReturn(results);
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=mock(EMap.class);
  when(results.getIndicToRowMap()).thenReturn(indicToRowMap);
  List<ModelElement> columnElementList=new BasicEList<ModelElement>();
  List<MetadataColumn> columnElementList2=new BasicEList<MetadataColumn>();
  MetadataColumn mc0=mock(MetadataColumn.class);
  MetadataColumn mc1=mock(MetadataColumn.class);
  MetadataColumn mc2=mock(MetadataColumn.class);
  columnElementList.add(mc0);
  columnElementList.add(mc1);
  columnElementList.add(mc2);
  columnElementList2.add(mc0);
  columnElementList2.add(mc1);
  columnElementList2.add(mc2);
  EList<ModelElement> eLs=(EList<ModelElement>)columnElementList;
  when(context.getAnalysedElements()).thenReturn(eLs);
  PowerMockito.mockStatic(ColumnHelper.class);
  MetadataTable mTable=mock(MetadataTable.class);
  when(mTable.getColumns()).thenReturn((EList<MetadataColumn>)columnElementList2);
  when(ColumnHelper.getColumnOwnerAsMetadataTable(mc0)).thenReturn(mTable);
  when(ColumnHelper.getColumnOwnerAsMetadataTable(mc1)).thenReturn(mTable);
  when(deliFileConn.getHeaderValue()).thenReturn(empty);
  when(deliFileConn.getFooterValue()).thenReturn(empty);
  when(deliFileConn.getLimitValue()).thenReturn(empty);
  when(deliFileConn.getEscapeType()).thenReturn(Escape.DELIMITED);
  when(deliFileConn.getRowSeparatorValue()).thenReturn(""String_Node_Str"");
  when(deliFileConn.isRemoveEmptyRow()).thenReturn(false);
  when(deliFileConn.isSplitRecord()).thenReturn(false);
  PowerMockito.mockStatic(LanguageManager.class);
  when(LanguageManager.getCurrentLanguage()).thenReturn(ECodeLanguage.JAVA);
  delFileIndiEvaluator.executeSqlQuery(empty);
}","@Test public void testExecuteSqlQuery_delimetd() throws Exception {
  String empty=""String_Node_Str"";
  Analysis analysis=mock(Analysis.class);
  DelimitedFileIndicatorEvaluator delFileIndiEvaluator=new DelimitedFileIndicatorEvaluator(analysis);
  DelimitedFileIndicatorEvaluator spyEvaluator=Mockito.spy(delFileIndiEvaluator);
  stub(method(DelimitedFileIndicatorEvaluator.class,""String_Node_Str""));
  stub(method(DelimitedFileIndicatorEvaluator.class,""String_Node_Str"",Indicator.class,EMap.class));
  AnalysisContext context=mock(AnalysisContext.class);
  when(analysis.getContext()).thenReturn(context);
  DelimitedFileConnection deliFileConn=mock(DelimitedFileConnection.class);
  when(context.getConnection()).thenReturn(deliFileConn);
  when(deliFileConn.isContextMode()).thenReturn(false);
  String path=""String_Node_Str"";
  when(deliFileConn.getFilePath()).thenReturn(path);
  IPath iPath=mock(IPath.class);
  File file=new File(path);
  BufferedWriter output=new BufferedWriter(new FileWriter(file));
  String str=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  output.write(str);
  output.close();
  when(iPath.toFile()).thenReturn(file);
  when(deliFileConn.getFieldSeparatorValue()).thenReturn(""String_Node_Str"");
  when(deliFileConn.getEncoding()).thenReturn(""String_Node_Str"");
  AnalysisResult results=mock(AnalysisResult.class);
  when(analysis.getResults()).thenReturn(results);
  EMap<Indicator,AnalyzedDataSet> indicToRowMap=mock(EMap.class);
  when(results.getIndicToRowMap()).thenReturn(indicToRowMap);
  List<ModelElement> columnElementList=new BasicEList<ModelElement>();
  List<MetadataColumn> columnElementList2=new BasicEList<MetadataColumn>();
  MetadataColumn mc0=mock(MetadataColumn.class);
  MetadataColumn mc1=mock(MetadataColumn.class);
  MetadataColumn mc2=mock(MetadataColumn.class);
  columnElementList.add(mc0);
  columnElementList.add(mc1);
  columnElementList.add(mc2);
  columnElementList2.add(mc0);
  columnElementList2.add(mc1);
  columnElementList2.add(mc2);
  EList<ModelElement> eLs=(EList<ModelElement>)columnElementList;
  when(context.getAnalysedElements()).thenReturn(eLs);
  PowerMockito.mockStatic(ColumnHelper.class);
  MetadataTable mTable=mock(MetadataTable.class);
  when(mTable.getColumns()).thenReturn((EList<MetadataColumn>)columnElementList2);
  when(ColumnHelper.getColumnOwnerAsMetadataTable(mc0)).thenReturn(mTable);
  when(ColumnHelper.getColumnOwnerAsMetadataTable(mc1)).thenReturn(mTable);
  when(deliFileConn.getHeaderValue()).thenReturn(empty);
  when(deliFileConn.getFooterValue()).thenReturn(empty);
  when(deliFileConn.getLimitValue()).thenReturn(empty);
  when(deliFileConn.getEscapeType()).thenReturn(Escape.DELIMITED);
  when(deliFileConn.getRowSeparatorValue()).thenReturn(""String_Node_Str"");
  when(deliFileConn.isRemoveEmptyRow()).thenReturn(false);
  when(deliFileConn.isSplitRecord()).thenReturn(false);
  PowerMockito.mockStatic(LanguageManager.class);
  when(LanguageManager.getCurrentLanguage()).thenReturn(ECodeLanguage.JAVA);
  Mockito.doReturn(true).when(spyEvaluator).continueRun();
  spyEvaluator.executeSqlQuery(empty);
}",0.975235660648666
137960,"public void keyPressed(KeyEvent e){
  SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
}","@Override public void keyPressed(KeyEvent e){
  SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
}",0.9685534591194968
137961,"protected void createActions(){
  super.createActions();
  if (!_enableContentAssist) {
    return;
  }
  Action action=new Action(""String_Node_Str""){
    public void run(){
      sqlTextViewer.showAssistance();
    }
  }
;
  action.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",action);
}","@Override protected void createActions(){
  super.createActions();
  if (!_enableContentAssist) {
    return;
  }
  Action action=new Action(""String_Node_Str""){
    @Override public void run(){
      sqlTextViewer.showAssistance();
    }
  }
;
  action.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",action);
}",0.9724517906336088
137962,"public void setNewDictionary(final Dictionary dictionary){
  if (editor.getSite() != null && editor.getSite().getShell() != null && editor.getSite().getShell().getDisplay() != null)   editor.getSite().getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      if (sqlTextViewer != null) {
        sqlTextViewer.setNewDictionary(dictionary);
      }
    }
  }
);
}","public void setNewDictionary(final Dictionary dictionary){
  if (editor.getSite() != null && editor.getSite().getShell() != null && editor.getSite().getShell().getDisplay() != null) {
    editor.getSite().getShell().getDisplay().asyncExec(new Runnable(){
      public void run(){
        if (sqlTextViewer != null) {
          sqlTextViewer.setNewDictionary(dictionary);
        }
      }
    }
);
  }
}",0.9745547073791349
137963,"protected ISourceViewer createSourceViewer(final Composite parent,IVerticalRuler ruler,int style){
  parent.setLayout(new FillLayout());
  final Composite myParent=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=layout.marginWidth=layout.horizontalSpacing=layout.verticalSpacing=0;
  myParent.setLayout(layout);
  Composite div1=new Composite(myParent,SWT.NONE);
  GridData lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=1;
  div1.setLayoutData(lgid);
  div1.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  GridData gid=new GridData();
  gid.grabExcessHorizontalSpace=gid.grabExcessVerticalSpace=true;
  gid.horizontalAlignment=gid.verticalAlignment=GridData.FILL;
  Dictionary dictionary=null;
  if (editor.getSession() != null && _enableContentAssist) {
    dictionary=editor.getSession().getUser().getMetaDataSession().getDictionary();
  }
  sqlTextViewer=new SQLTextViewer(myParent,style,store,dictionary,ruler);
  sqlTextViewer.getControl().setLayoutData(gid);
  Composite div2=new Composite(myParent,SWT.NONE);
  lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=0;
  div2.setLayoutData(lgid);
  div2.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  final SQLEditor thisEditor=editor;
  sqlTextViewer.getTextWidget().addVerifyKeyListener(new VerifyKeyListener(){
    private ExecSQLAction _execSQLAction=new ExecSQLAction(thisEditor);
    public void verifyKey(    VerifyEvent event){
      if (event.stateMask == SWT.CTRL && event.keyCode == 13) {
        event.doit=false;
        _execSQLAction.run();
      }
    }
  }
);
  sqlTextViewer.getTextWidget().addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
    }
  }
);
  myParent.layout();
  IDocument dc=new Document();
  sqlTextViewer.setDocument(dc);
  mcl.install(sqlTextViewer);
  return sqlTextViewer;
}","@Override protected ISourceViewer createSourceViewer(final Composite parent,IVerticalRuler ruler,int style){
  parent.setLayout(new FillLayout());
  final Composite myParent=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=layout.marginWidth=layout.horizontalSpacing=layout.verticalSpacing=0;
  myParent.setLayout(layout);
  Composite div1=new Composite(myParent,SWT.NONE);
  GridData lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=1;
  div1.setLayoutData(lgid);
  div1.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  GridData gid=new GridData();
  gid.grabExcessHorizontalSpace=gid.grabExcessVerticalSpace=true;
  gid.horizontalAlignment=gid.verticalAlignment=GridData.FILL;
  Dictionary dictionary=null;
  if (editor.getSession() != null && _enableContentAssist) {
    dictionary=editor.getSession().getUser().getMetaDataSession().getDictionary();
  }
  sqlTextViewer=new SQLTextViewer(myParent,style,store,dictionary,ruler);
  sqlTextViewer.getControl().setLayoutData(gid);
  Composite div2=new Composite(myParent,SWT.NONE);
  lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=0;
  div2.setLayoutData(lgid);
  div2.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  final SQLEditor thisEditor=editor;
  sqlTextViewer.getTextWidget().addVerifyKeyListener(new VerifyKeyListener(){
    private ExecSQLAction _execSQLAction=new ExecSQLAction(thisEditor);
    public void verifyKey(    VerifyEvent event){
      if (event.stateMask == SWT.CTRL && event.keyCode == 13) {
        event.doit=false;
        _execSQLAction.run();
      }
    }
  }
);
  sqlTextViewer.getTextWidget().addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
    }
  }
);
  myParent.layout();
  IDocument dc=new Document();
  sqlTextViewer.setDocument(dc);
  mcl.install(sqlTextViewer);
  return sqlTextViewer;
}",0.9956082564778216
137964,"public void dispose(){
  if (partListener != null)   editor.getEditorSite().getPage().removePartListener(partListener);
  mcl.uninstall();
  super.dispose();
}","@Override public void dispose(){
  if (partListener != null) {
    editor.getEditorSite().getPage().removePartListener(partListener);
  }
  mcl.uninstall();
  super.dispose();
}",0.9464285714285714
137965,"public void createPartControl(Composite parent){
  super.createPartControl(parent);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(getSourceViewer().getTextWidget(),SQLExplorerPlugin.PLUGIN_ID + ""String_Node_Str"");
  Object adapter=getAdapter(org.eclipse.swt.widgets.Control.class);
  if (adapter instanceof StyledText) {
    StyledText text=(StyledText)adapter;
    text.setWordWrap(SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.WORD_WRAP));
    FontData[] fData=PreferenceConverter.getFontDataArray(store,IConstants.FONT);
    if (fData.length > 0) {
      JFaceResources.getFontRegistry().put(fData[0].toString(),fData);
      text.setFont(JFaceResources.getFontRegistry().get(fData[0].toString()));
    }
  }
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(getSourceViewer().getTextWidget(),SQLExplorerPlugin.PLUGIN_ID + ""String_Node_Str"");
  Object adapter=getAdapter(org.eclipse.swt.widgets.Control.class);
  if (adapter instanceof StyledText) {
    StyledText text=(StyledText)adapter;
    text.setWordWrap(SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.WORD_WRAP));
    FontData[] fData=PreferenceConverter.getFontDataArray(store,IConstants.FONT);
    if (fData.length > 0) {
      JFaceResources.getFontRegistry().put(fData[0].toString(),fData);
      text.setFont(JFaceResources.getFontRegistry().get(fData[0].toString()));
    }
  }
}",0.993368700265252
137966,"@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  String fileName=getValidFileName(dialog.getFileName());
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(fileName);
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    while (fileExist(file)) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        filePath=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(filePath);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      file=createIFile(file,getViewer().getDocument().get());
      newInput=new FileEditorInput(file);
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}","@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null) {
      progressMonitor.setCanceled(true);
    }
    return;
  }
  Object elements=dialog.getResult()[0];
  String fileName=getValidFileName(dialog.getFileName());
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(fileName);
    if (filePath == null) {
      if (progressMonitor != null) {
        progressMonitor.setCanceled(true);
      }
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    File sourceFilesFolder=getSourceFilesFolder(file);
    while (fileNameExist(sourceFilesFolder,file.getName())) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        filePath=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(filePath);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      file=createIFile(file,getViewer().getDocument().get());
      newInput=new FileEditorInput(file);
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success) {
        setInput(newInput);
      }
    }
    if (progressMonitor != null) {
      progressMonitor.setCanceled(!success);
    }
  }
}",0.9754407111646828
137967,"public void keyPressed(KeyEvent e){
  SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
}","@Override public void keyPressed(KeyEvent e){
  SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
}",0.9685534591194968
137968,"protected void createActions(){
  super.createActions();
  if (!_enableContentAssist) {
    return;
  }
  Action action=new Action(""String_Node_Str""){
    public void run(){
      sqlTextViewer.showAssistance();
    }
  }
;
  action.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",action);
}","@Override protected void createActions(){
  super.createActions();
  if (!_enableContentAssist) {
    return;
  }
  Action action=new Action(""String_Node_Str""){
    @Override public void run(){
      sqlTextViewer.showAssistance();
    }
  }
;
  action.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",action);
}",0.9724517906336088
137969,"public void setNewDictionary(final Dictionary dictionary){
  if (editor.getSite() != null && editor.getSite().getShell() != null && editor.getSite().getShell().getDisplay() != null)   editor.getSite().getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      if (sqlTextViewer != null) {
        sqlTextViewer.setNewDictionary(dictionary);
      }
    }
  }
);
}","public void setNewDictionary(final Dictionary dictionary){
  if (editor.getSite() != null && editor.getSite().getShell() != null && editor.getSite().getShell().getDisplay() != null) {
    editor.getSite().getShell().getDisplay().asyncExec(new Runnable(){
      public void run(){
        if (sqlTextViewer != null) {
          sqlTextViewer.setNewDictionary(dictionary);
        }
      }
    }
);
  }
}",0.9745547073791349
137970,"protected ISourceViewer createSourceViewer(final Composite parent,IVerticalRuler ruler,int style){
  parent.setLayout(new FillLayout());
  final Composite myParent=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=layout.marginWidth=layout.horizontalSpacing=layout.verticalSpacing=0;
  myParent.setLayout(layout);
  Composite div1=new Composite(myParent,SWT.NONE);
  GridData lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=1;
  div1.setLayoutData(lgid);
  div1.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  GridData gid=new GridData();
  gid.grabExcessHorizontalSpace=gid.grabExcessVerticalSpace=true;
  gid.horizontalAlignment=gid.verticalAlignment=GridData.FILL;
  Dictionary dictionary=null;
  if (editor.getSession() != null && _enableContentAssist) {
    dictionary=editor.getSession().getUser().getMetaDataSession().getDictionary();
  }
  sqlTextViewer=new SQLTextViewer(myParent,style,store,dictionary,ruler);
  sqlTextViewer.getControl().setLayoutData(gid);
  Composite div2=new Composite(myParent,SWT.NONE);
  lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=0;
  div2.setLayoutData(lgid);
  div2.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  final SQLEditor thisEditor=editor;
  sqlTextViewer.getTextWidget().addVerifyKeyListener(new VerifyKeyListener(){
    private ExecSQLAction _execSQLAction=new ExecSQLAction(thisEditor);
    public void verifyKey(    VerifyEvent event){
      if (event.stateMask == SWT.CTRL && event.keyCode == 13) {
        event.doit=false;
        _execSQLAction.run();
      }
    }
  }
);
  sqlTextViewer.getTextWidget().addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
    }
  }
);
  myParent.layout();
  IDocument dc=new Document();
  sqlTextViewer.setDocument(dc);
  mcl.install(sqlTextViewer);
  return sqlTextViewer;
}","@Override protected ISourceViewer createSourceViewer(final Composite parent,IVerticalRuler ruler,int style){
  parent.setLayout(new FillLayout());
  final Composite myParent=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=layout.marginWidth=layout.horizontalSpacing=layout.verticalSpacing=0;
  myParent.setLayout(layout);
  Composite div1=new Composite(myParent,SWT.NONE);
  GridData lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=1;
  div1.setLayoutData(lgid);
  div1.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  GridData gid=new GridData();
  gid.grabExcessHorizontalSpace=gid.grabExcessVerticalSpace=true;
  gid.horizontalAlignment=gid.verticalAlignment=GridData.FILL;
  Dictionary dictionary=null;
  if (editor.getSession() != null && _enableContentAssist) {
    dictionary=editor.getSession().getUser().getMetaDataSession().getDictionary();
  }
  sqlTextViewer=new SQLTextViewer(myParent,style,store,dictionary,ruler);
  sqlTextViewer.getControl().setLayoutData(gid);
  Composite div2=new Composite(myParent,SWT.NONE);
  lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=0;
  div2.setLayoutData(lgid);
  div2.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  final SQLEditor thisEditor=editor;
  sqlTextViewer.getTextWidget().addVerifyKeyListener(new VerifyKeyListener(){
    private ExecSQLAction _execSQLAction=new ExecSQLAction(thisEditor);
    public void verifyKey(    VerifyEvent event){
      if (event.stateMask == SWT.CTRL && event.keyCode == 13) {
        event.doit=false;
        _execSQLAction.run();
      }
    }
  }
);
  sqlTextViewer.getTextWidget().addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
    }
  }
);
  myParent.layout();
  IDocument dc=new Document();
  sqlTextViewer.setDocument(dc);
  mcl.install(sqlTextViewer);
  return sqlTextViewer;
}",0.9956082564778216
137971,"public void dispose(){
  if (partListener != null)   editor.getEditorSite().getPage().removePartListener(partListener);
  mcl.uninstall();
  super.dispose();
}","@Override public void dispose(){
  if (partListener != null) {
    editor.getEditorSite().getPage().removePartListener(partListener);
  }
  mcl.uninstall();
  super.dispose();
}",0.9464285714285714
137972,"public void createPartControl(Composite parent){
  super.createPartControl(parent);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(getSourceViewer().getTextWidget(),SQLExplorerPlugin.PLUGIN_ID + ""String_Node_Str"");
  Object adapter=getAdapter(org.eclipse.swt.widgets.Control.class);
  if (adapter instanceof StyledText) {
    StyledText text=(StyledText)adapter;
    text.setWordWrap(SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.WORD_WRAP));
    FontData[] fData=PreferenceConverter.getFontDataArray(store,IConstants.FONT);
    if (fData.length > 0) {
      JFaceResources.getFontRegistry().put(fData[0].toString(),fData);
      text.setFont(JFaceResources.getFontRegistry().get(fData[0].toString()));
    }
  }
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(getSourceViewer().getTextWidget(),SQLExplorerPlugin.PLUGIN_ID + ""String_Node_Str"");
  Object adapter=getAdapter(org.eclipse.swt.widgets.Control.class);
  if (adapter instanceof StyledText) {
    StyledText text=(StyledText)adapter;
    text.setWordWrap(SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.WORD_WRAP));
    FontData[] fData=PreferenceConverter.getFontDataArray(store,IConstants.FONT);
    if (fData.length > 0) {
      JFaceResources.getFontRegistry().put(fData[0].toString(),fData);
      text.setFont(JFaceResources.getFontRegistry().get(fData[0].toString()));
    }
  }
}",0.993368700265252
137973,"@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  String fileName=getValidFileName(dialog.getFileName());
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(fileName);
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    while (fileExist(file)) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        filePath=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(filePath);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      file=createIFile(file,getViewer().getDocument().get());
      newInput=new FileEditorInput(file);
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}","@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null) {
      progressMonitor.setCanceled(true);
    }
    return;
  }
  Object elements=dialog.getResult()[0];
  String fileName=getValidFileName(dialog.getFileName());
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(fileName);
    if (filePath == null) {
      if (progressMonitor != null) {
        progressMonitor.setCanceled(true);
      }
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    File sourceFilesFolder=getSourceFilesFolder(file);
    while (fileNameExist(sourceFilesFolder,file.getName())) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        filePath=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(filePath);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      file=createIFile(file,getViewer().getDocument().get());
      newInput=new FileEditorInput(file);
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success) {
        setInput(newInput);
      }
    }
    if (progressMonitor != null) {
      progressMonitor.setCanceled(!success);
    }
  }
}",0.9754407111646828
137974,"public void keyPressed(KeyEvent e){
  SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
}","@Override public void keyPressed(KeyEvent e){
  SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
}",0.9685534591194968
137975,"protected void createActions(){
  super.createActions();
  if (!_enableContentAssist) {
    return;
  }
  Action action=new Action(""String_Node_Str""){
    public void run(){
      sqlTextViewer.showAssistance();
    }
  }
;
  action.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",action);
}","@Override protected void createActions(){
  super.createActions();
  if (!_enableContentAssist) {
    return;
  }
  Action action=new Action(""String_Node_Str""){
    @Override public void run(){
      sqlTextViewer.showAssistance();
    }
  }
;
  action.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
  setAction(""String_Node_Str"",action);
}",0.9724517906336088
137976,"public void setNewDictionary(final Dictionary dictionary){
  if (editor.getSite() != null && editor.getSite().getShell() != null && editor.getSite().getShell().getDisplay() != null)   editor.getSite().getShell().getDisplay().asyncExec(new Runnable(){
    public void run(){
      if (sqlTextViewer != null) {
        sqlTextViewer.setNewDictionary(dictionary);
      }
    }
  }
);
}","public void setNewDictionary(final Dictionary dictionary){
  if (editor.getSite() != null && editor.getSite().getShell() != null && editor.getSite().getShell().getDisplay() != null) {
    editor.getSite().getShell().getDisplay().asyncExec(new Runnable(){
      public void run(){
        if (sqlTextViewer != null) {
          sqlTextViewer.setNewDictionary(dictionary);
        }
      }
    }
);
  }
}",0.9745547073791349
137977,"protected ISourceViewer createSourceViewer(final Composite parent,IVerticalRuler ruler,int style){
  parent.setLayout(new FillLayout());
  final Composite myParent=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=layout.marginWidth=layout.horizontalSpacing=layout.verticalSpacing=0;
  myParent.setLayout(layout);
  Composite div1=new Composite(myParent,SWT.NONE);
  GridData lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=1;
  div1.setLayoutData(lgid);
  div1.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  GridData gid=new GridData();
  gid.grabExcessHorizontalSpace=gid.grabExcessVerticalSpace=true;
  gid.horizontalAlignment=gid.verticalAlignment=GridData.FILL;
  Dictionary dictionary=null;
  if (editor.getSession() != null && _enableContentAssist) {
    dictionary=editor.getSession().getUser().getMetaDataSession().getDictionary();
  }
  sqlTextViewer=new SQLTextViewer(myParent,style,store,dictionary,ruler);
  sqlTextViewer.getControl().setLayoutData(gid);
  Composite div2=new Composite(myParent,SWT.NONE);
  lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=0;
  div2.setLayoutData(lgid);
  div2.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  final SQLEditor thisEditor=editor;
  sqlTextViewer.getTextWidget().addVerifyKeyListener(new VerifyKeyListener(){
    private ExecSQLAction _execSQLAction=new ExecSQLAction(thisEditor);
    public void verifyKey(    VerifyEvent event){
      if (event.stateMask == SWT.CTRL && event.keyCode == 13) {
        event.doit=false;
        _execSQLAction.run();
      }
    }
  }
);
  sqlTextViewer.getTextWidget().addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
    }
  }
);
  myParent.layout();
  IDocument dc=new Document();
  sqlTextViewer.setDocument(dc);
  mcl.install(sqlTextViewer);
  return sqlTextViewer;
}","@Override protected ISourceViewer createSourceViewer(final Composite parent,IVerticalRuler ruler,int style){
  parent.setLayout(new FillLayout());
  final Composite myParent=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginHeight=layout.marginWidth=layout.horizontalSpacing=layout.verticalSpacing=0;
  myParent.setLayout(layout);
  Composite div1=new Composite(myParent,SWT.NONE);
  GridData lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=1;
  div1.setLayoutData(lgid);
  div1.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  GridData gid=new GridData();
  gid.grabExcessHorizontalSpace=gid.grabExcessVerticalSpace=true;
  gid.horizontalAlignment=gid.verticalAlignment=GridData.FILL;
  Dictionary dictionary=null;
  if (editor.getSession() != null && _enableContentAssist) {
    dictionary=editor.getSession().getUser().getMetaDataSession().getDictionary();
  }
  sqlTextViewer=new SQLTextViewer(myParent,style,store,dictionary,ruler);
  sqlTextViewer.getControl().setLayoutData(gid);
  Composite div2=new Composite(myParent,SWT.NONE);
  lgid=new GridData();
  lgid.grabExcessHorizontalSpace=true;
  lgid.horizontalAlignment=GridData.FILL;
  lgid.heightHint=1;
  lgid.verticalIndent=0;
  div2.setLayoutData(lgid);
  div2.setBackground(editor.getSite().getShell().getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));
  final SQLEditor thisEditor=editor;
  sqlTextViewer.getTextWidget().addVerifyKeyListener(new VerifyKeyListener(){
    private ExecSQLAction _execSQLAction=new ExecSQLAction(thisEditor);
    public void verifyKey(    VerifyEvent event){
      if (event.stateMask == SWT.CTRL && event.keyCode == 13) {
        event.doit=false;
        _execSQLAction.run();
      }
    }
  }
);
  sqlTextViewer.getTextWidget().addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      SQLTextEditor.this.editor.getEditorSite().getPage().activate(SQLTextEditor.this.editor.getEditorSite().getPart());
    }
  }
);
  myParent.layout();
  IDocument dc=new Document();
  sqlTextViewer.setDocument(dc);
  mcl.install(sqlTextViewer);
  return sqlTextViewer;
}",0.9956082564778216
137978,"public void dispose(){
  if (partListener != null)   editor.getEditorSite().getPage().removePartListener(partListener);
  mcl.uninstall();
  super.dispose();
}","@Override public void dispose(){
  if (partListener != null) {
    editor.getEditorSite().getPage().removePartListener(partListener);
  }
  mcl.uninstall();
  super.dispose();
}",0.9464285714285714
137979,"public void createPartControl(Composite parent){
  super.createPartControl(parent);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(getSourceViewer().getTextWidget(),SQLExplorerPlugin.PLUGIN_ID + ""String_Node_Str"");
  Object adapter=getAdapter(org.eclipse.swt.widgets.Control.class);
  if (adapter instanceof StyledText) {
    StyledText text=(StyledText)adapter;
    text.setWordWrap(SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.WORD_WRAP));
    FontData[] fData=PreferenceConverter.getFontDataArray(store,IConstants.FONT);
    if (fData.length > 0) {
      JFaceResources.getFontRegistry().put(fData[0].toString(),fData);
      text.setFont(JFaceResources.getFontRegistry().get(fData[0].toString()));
    }
  }
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  PlatformUI.getWorkbench().getHelpSystem().setHelp(getSourceViewer().getTextWidget(),SQLExplorerPlugin.PLUGIN_ID + ""String_Node_Str"");
  Object adapter=getAdapter(org.eclipse.swt.widgets.Control.class);
  if (adapter instanceof StyledText) {
    StyledText text=(StyledText)adapter;
    text.setWordWrap(SQLExplorerPlugin.getDefault().getPluginPreferences().getBoolean(IConstants.WORD_WRAP));
    FontData[] fData=PreferenceConverter.getFontDataArray(store,IConstants.FONT);
    if (fData.length > 0) {
      JFaceResources.getFontRegistry().put(fData[0].toString(),fData);
      text.setFont(JFaceResources.getFontRegistry().get(fData[0].toString()));
    }
  }
}",0.993368700265252
137980,"@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null)     progressMonitor.setCanceled(true);
    return;
  }
  Object elements=dialog.getResult()[0];
  String fileName=getValidFileName(dialog.getFileName());
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(fileName);
    if (filePath == null) {
      if (progressMonitor != null)       progressMonitor.setCanceled(true);
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    while (fileExist(file)) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        filePath=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(filePath);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      file=createIFile(file,getViewer().getDocument().get());
      newInput=new FileEditorInput(file);
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success)       setInput(newInput);
    }
    if (progressMonitor != null)     progressMonitor.setCanceled(!success);
  }
}","@Override protected void performSaveAs(IProgressMonitor progressMonitor){
  Shell shell=getSite().getShell();
  final IEditorInput input=getEditorInput();
  IDocumentProvider provider=getDocumentProvider();
  IEditorInput newInput;
  if (input instanceof IURIEditorInput && !(input instanceof IFileEditorInput)) {
    super.performSaveAs(progressMonitor);
    return;
  }
  IProject rootProject=ReponsitoryContextBridge.getRootProject();
  final IFolder defaultValidFolder=rootProject.getFolder(""String_Node_Str"").getFolder(""String_Node_Str"");
  ILabelProvider lp=new WorkbenchLabelProvider();
  ITreeContentProvider cp=new WorkbenchContentProvider();
  FolderSelectionDialog dialog=new FolderSelectionDialog(shell,lp,cp);
  dialog.setTitle(""String_Node_Str"");
  dialog.setMessage(""String_Node_Str"");
  dialog.setInput(rootProject);
  dialog.addFilter(new ViewerFilter(){
    @Override public boolean select(    Viewer viewer,    Object parentElement,    Object element){
      if (element instanceof IFolder) {
        IFolder folder=(IFolder)element;
        if (""String_Node_Str"".equals(folder.getName()) || ""String_Node_Str"".equals(folder.getName())) {
          return true;
        }
 else {
          return defaultValidFolder.getFullPath().isPrefixOf(folder.getFullPath()) && !folder.getName().endsWith(SVN_FOLDER_NAME);
        }
      }
      return false;
    }
  }
);
  dialog.setComparator(new ResourceComparator(ResourceComparator.NAME));
  if (dialog.open() == Window.CANCEL) {
    if (progressMonitor != null) {
      progressMonitor.setCanceled(true);
    }
    return;
  }
  Object elements=dialog.getResult()[0];
  String fileName=getValidFileName(dialog.getFileName());
  IResource elem=(IResource)elements;
  if (elem instanceof IFolder) {
    IPath filePath=((IFolder)elem).getFullPath();
    filePath=filePath.append(fileName);
    if (filePath == null) {
      if (progressMonitor != null) {
        progressMonitor.setCanceled(true);
      }
      return;
    }
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IFile file=workspace.getRoot().getFile(filePath);
    File sourceFilesFolder=getSourceFilesFolder(file);
    while (fileNameExist(sourceFilesFolder,file.getName())) {
      InputDialog inputDialog=new InputDialog(getSite().getShell(),""String_Node_Str"",""String_Node_Str"",filePath.lastSegment(),null);
      if (inputDialog.open() == InputDialog.CANCEL) {
        return;
      }
 else {
        IPath lseg=filePath.removeLastSegments(1);
        filePath=lseg.append(inputDialog.getValue());
        file=workspace.getRoot().getFile(filePath);
      }
    }
    newInput=new FileEditorInput(file);
    if (provider == null) {
      return;
    }
    boolean success=false;
    try {
      provider.aboutToChange(newInput);
      file=createIFile(file,getViewer().getDocument().get());
      newInput=new FileEditorInput(file);
      success=true;
    }
 catch (    CoreException x) {
      final IStatus status=x.getStatus();
      if (status == null || status.getSeverity() != IStatus.CANCEL) {
        String title=""String_Node_Str"";
        String msg=""String_Node_Str"";
        MessageDialog.openError(shell,title,msg);
      }
    }
 finally {
      provider.changed(newInput);
      if (success) {
        setInput(newInput);
      }
    }
    if (progressMonitor != null) {
      progressMonitor.setCanceled(!success);
    }
  }
}",0.9754407111646828
137981,"/** 
 * update the file .report.list to deal with the report generated doc folder's movement.
 * @param outputFolder source folder, the original report generated doc folder
 * @param targetFolder target folder, the new folder which source folder moved into
 */
public static void updateReportListFile(IFolder outputFolder,IFolder targetFolder){
  try {
    File oldFolder=WorkspaceUtils.ifolderToFile(outputFolder);
    File newFolder=WorkspaceUtils.ifolderToFile(targetFolder.getFolder(outputFolder.getName()));
    File file=new File(newFolder.getAbsolutePath() + File.separator + ReportUtils.REPORT_LIST);
    if (file.exists() && file.isFile()) {
      String str1=oldFolder.toString();
      String str2=newFolder.toString();
      str1=StringUtils.replace(str1,""String_Node_Str"",""String_Node_Str"");
      str2=StringUtils.replace(str2,""String_Node_Str"",""String_Node_Str"");
      FilesUtils.replaceInFile(str1,file.toString(),str2);
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
}","/** 
 * update the file .report.list to deal with the report generated doc folder's movement.
 * @param outputFolder source folder, the original report generated doc folder
 * @param targetFolder target folder, the new folder which source folder moved into
 */
public static void updateReportListFile(IFolder outputFolder,IFolder targetFolder){
  try {
    File oldFolder=WorkspaceUtils.ifolderToFile(outputFolder);
    File newFolder=WorkspaceUtils.ifolderToFile(targetFolder.getFolder(outputFolder.getName()));
    File file=new File(newFolder.getAbsolutePath() + File.separator + ReportUtils.REPORT_LIST);
    if (file.exists() && file.isFile()) {
      replaceReportGenDocFilePath(file,oldFolder.toString(),newFolder.toString());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
}",0.829050279329609
137982,"/** 
 * if the report's name changed, need to update the report folder name also.
 * @param oldFolderName
 * @param repItem
 */
public static void checkAndUpdateRepFolderName4Rename(String oldFolderName,TDQReportItem repItem){
  String newFolderName=ReportUtils.getSimpleName(repItem.getProperty());
  if (!oldFolderName.equals(newFolderName)) {
    IContainer repItemParent=PropertyHelper.getItemFile(repItem.getProperty()).getParent();
    File oldFolder=WorkspaceUtils.ifolderToFile(repItemParent.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + oldFolderName)));
    File newFolder=WorkspaceUtils.ifolderToFile(repItemParent.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + newFolderName)));
    try {
      oldFolder.renameTo(newFolder);
      File file=new File(ReportHelper.getOutputFolderNameDefault((IFolder)repItemParent,newFolderName) + File.separator + REPORT_LIST);
      if (file.exists() && file.isFile()) {
        FilesUtils.replaceInFile(oldFolder.toString(),file.toString(),newFolder.toString());
      }
      repItemParent.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}","/** 
 * if the report's name changed, need to update the report folder name also.
 * @param oldFolderName
 * @param repItem
 */
public static void checkAndUpdateRepFolderName4Rename(IFolder parentFolder,String oldFolderName,TDQReportItem repItem){
  String newFolderName=ReportUtils.getSimpleName(repItem.getProperty());
  if (!oldFolderName.equals(newFolderName)) {
    File oldFolder=WorkspaceUtils.ifolderToFile(parentFolder.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + oldFolderName)));
    File newFolder=WorkspaceUtils.ifolderToFile(parentFolder.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + newFolderName)));
    try {
      oldFolder.renameTo(newFolder);
      File file=new File(ReportHelper.getOutputFolderNameDefault(parentFolder,newFolderName) + File.separator + REPORT_LIST);
      if (file.exists() && file.isFile()) {
        replaceReportGenDocFilePath(file,oldFolder.toString(),newFolder.toString());
      }
      parentFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}",0.8615520282186949
137983,"public static IFolder fileToIFolder(File file){
  IFolder folder=null;
  String filePath=file.getAbsolutePath();
  String rootPath=ResourcesPlugin.getWorkspace().getRoot().getLocationURI().getPath();
  if (filePath.startsWith(rootPath)) {
    folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(filePath.substring(rootPath.length(),filePath.length())));
  }
  return folder;
}","public static IFolder fileToIFolder(File file){
  IFolder folder=null;
  String filePath=file.getAbsolutePath();
  String rootPath=ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString();
  if (filePath.startsWith(rootPath)) {
    folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(filePath.substring(rootPath.length(),filePath.length())));
  }
  return folder;
}",0.9667519181585678
137984,"/** 
 * update the file .report.list to deal with the report generated doc folder's movement.
 * @param outputFolder source folder, the original report generated doc folder
 * @param targetFolder target folder, the new folder which source folder moved into
 */
public static void updateReportListFile(IFolder outputFolder,IFolder targetFolder){
  try {
    File oldFolder=WorkspaceUtils.ifolderToFile(outputFolder);
    File newFolder=WorkspaceUtils.ifolderToFile(targetFolder.getFolder(outputFolder.getName()));
    File file=new File(newFolder.getAbsolutePath() + IPath.SEPARATOR + ReportUtils.REPORT_LIST);
    if (file.exists() && file.isFile()) {
      FilesUtils.replaceInFile(oldFolder.toString(),file.toString(),newFolder.toString());
    }
  }
 catch (  IOException e) {
    log.warn(e,e);
  }
}","/** 
 * update the file .report.list to deal with the report generated doc folder's movement.
 * @param outputFolder source folder, the original report generated doc folder
 * @param targetFolder target folder, the new folder which source folder moved into
 */
public static void updateReportListFile(IFolder outputFolder,IFolder targetFolder){
  try {
    File oldFolder=WorkspaceUtils.ifolderToFile(outputFolder);
    File newFolder=WorkspaceUtils.ifolderToFile(targetFolder.getFolder(outputFolder.getName()));
    File file=new File(newFolder.getAbsolutePath() + File.separator + ReportUtils.REPORT_LIST);
    if (file.exists() && file.isFile()) {
      String str1=oldFolder.toString();
      String str2=newFolder.toString();
      str1=StringUtils.replace(str1,""String_Node_Str"",""String_Node_Str"");
      str2=StringUtils.replace(str2,""String_Node_Str"",""String_Node_Str"");
      FilesUtils.replaceInFile(str1,file.toString(),str2);
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
}",0.8239866740699612
137985,"/** 
 * if the report's name changed, need to update the report folder name also.
 * @param oldFolderName
 * @param repItem
 */
public static void checkAndUpdateRepFolderName4Rename(String oldFolderName,TDQReportItem repItem){
  String newFolderName=ReportUtils.getSimpleName(repItem.getProperty());
  if (!oldFolderName.equals(newFolderName)) {
    IContainer repItemParent=PropertyHelper.getItemFile(repItem.getProperty()).getParent();
    File oldFolder=WorkspaceUtils.ifolderToFile(repItemParent.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + oldFolderName)));
    File newFolder=WorkspaceUtils.ifolderToFile(repItemParent.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + newFolderName)));
    try {
      oldFolder.renameTo(newFolder);
      File file=new File(ReportHelper.getOutputFolderNameDefault((IFolder)repItemParent,newFolderName) + IPath.SEPARATOR + REPORT_LIST);
      if (file.exists() && file.isFile()) {
        FilesUtils.replaceInFile(oldFolder.toString(),file.toString(),newFolder.toString());
      }
      repItemParent.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}","/** 
 * if the report's name changed, need to update the report folder name also.
 * @param oldFolderName
 * @param repItem
 */
public static void checkAndUpdateRepFolderName4Rename(String oldFolderName,TDQReportItem repItem){
  String newFolderName=ReportUtils.getSimpleName(repItem.getProperty());
  if (!oldFolderName.equals(newFolderName)) {
    IContainer repItemParent=PropertyHelper.getItemFile(repItem.getProperty()).getParent();
    File oldFolder=WorkspaceUtils.ifolderToFile(repItemParent.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + oldFolderName)));
    File newFolder=WorkspaceUtils.ifolderToFile(repItemParent.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + newFolderName)));
    try {
      oldFolder.renameTo(newFolder);
      File file=new File(ReportHelper.getOutputFolderNameDefault((IFolder)repItemParent,newFolderName) + File.separator + REPORT_LIST);
      if (file.exists() && file.isFile()) {
        FilesUtils.replaceInFile(oldFolder.toString(),file.toString(),newFolder.toString());
      }
      repItemParent.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}",0.987717069038543
137986,"/** 
 * DOC xqliu Comment method ""getOriginalOutoutFolderPath"".
 * @param srcFolder
 * @param file
 * @param tempFolderName
 * @return
 */
public static String getOriginalOutoutFolderPath(File srcFolder,File file,String tempFolderName){
  String path=srcFolder.getAbsolutePath() + IPath.SEPARATOR + file.getName();
  int indexOf=path.indexOf(tempFolderName);
  if (indexOf > 0) {
    path=path.substring(0,indexOf) + path.substring(indexOf + tempFolderName.length() + 1,path.length());
  }
  return path;
}","/** 
 * DOC xqliu Comment method ""getOriginalOutoutFolderPath"".
 * @param srcFolder
 * @param file
 * @param tempFolderName
 * @return
 */
public static String getOriginalOutoutFolderPath(File srcFolder,File file,String tempFolderName){
  String path=srcFolder.getAbsolutePath() + File.separator + file.getName();
  int indexOf=path.indexOf(tempFolderName);
  if (indexOf > 0) {
    path=path.substring(0,indexOf) + path.substring(indexOf + tempFolderName.length() + 1,path.length());
  }
  return path;
}",0.9713155291790306
137987,"/** 
 * DOC xqliu Comment method ""getReportListFile"".
 * @param reportFile
 * @return
 * @throws IOException
 */
public static File getReportListFile(IFile reportFile) throws IOException {
  String reportFileName=reportFile.getName();
  String simpleName=getSimpleName(reportFileName);
  File file=new File(ReportHelper.getOutputFolderNameDefault((IFolder)reportFile.getParent(),simpleName) + ""String_Node_Str"" + REPORT_LIST);
  if (!file.exists()) {
    File parentFile=file.getParentFile();
    if (parentFile != null) {
      if (!parentFile.exists()) {
        if (parentFile.mkdirs()) {
          file.createNewFile();
        }
      }
 else {
        file.createNewFile();
      }
    }
  }
  return file;
}","/** 
 * DOC xqliu Comment method ""getReportListFile"".
 * @param reportFile
 * @return
 * @throws IOException
 */
public static File getReportListFile(IFile reportFile) throws IOException {
  String reportFileName=reportFile.getName();
  String simpleName=getSimpleName(reportFileName);
  File file=new File(ReportHelper.getOutputFolderNameDefault((IFolder)reportFile.getParent(),simpleName) + File.separator + REPORT_LIST);
  if (!file.exists()) {
    File parentFile=file.getParentFile();
    if (parentFile != null) {
      if (!parentFile.exists()) {
        if (parentFile.mkdirs()) {
          file.createNewFile();
        }
      }
 else {
        file.createNewFile();
      }
    }
  }
  return file;
}",0.9782456140350876
137988,"/** 
 * DOC xqliu Comment method ""copyAndUpdateRepGenDocFileInfo"".
 * @param newFolder
 * @param tempFolder
 * @param subFolderName
 */
public static void copyAndUpdateRepGenDocFileInfo(IFolder newFolder,File tempFolder,String subFolderName){
  File srcFolder=new File(tempFolder.getAbsolutePath() + IPath.SEPARATOR + subFolderName);
  File tarFolder=WorkspaceUtils.ifolderToFile(newFolder);
  moveHiddenFolders(srcFolder,tarFolder);
  updateReportListFileInfo(srcFolder,tarFolder,tempFolder.getName());
  FilesUtils.deleteFile(tempFolder,Boolean.TRUE);
}","/** 
 * DOC xqliu Comment method ""copyAndUpdateRepGenDocFileInfo"".
 * @param newFolder
 * @param tempFolder
 * @param subFolderName
 */
public static void copyAndUpdateRepGenDocFileInfo(IFolder newFolder,File tempFolder,String subFolderName){
  File srcFolder=new File(tempFolder.getAbsolutePath() + File.separator + subFolderName);
  File tarFolder=WorkspaceUtils.ifolderToFile(newFolder);
  moveHiddenFolders(srcFolder,tarFolder);
  updateReportListFileInfo(srcFolder,tarFolder,tempFolder.getName());
  FilesUtils.deleteFile(tempFolder,Boolean.TRUE);
}",0.9738503155996392
137989,"/** 
 */
public static void initRepListFile(IFile reportFile) throws Exception {
  String reportFileName=reportFile.getName();
  String simpleName=getSimpleName(reportFileName);
  if (simpleName == null) {
    return;
  }
  IFolder reportFileFolder=((IFolder)reportFile.getParent()).getFolder(PluginConstant.DOT_STRING + simpleName);
  if (reportFileFolder != null && reportFileFolder.exists()) {
    File repListFile=new File(ReportHelper.getOutputFolderNameDefault((IFolder)reportFile.getParent(),simpleName) + ""String_Node_Str"" + REPORT_LIST);
    List<ReportListParameters> repList=new ArrayList<ReportListParameters>();
    IResource[] members=reportFileFolder.members();
    for (    IResource res : members) {
      if (res.getType() == IResource.FILE) {
        IFile repFile=(IFile)res;
        repList.add(buildRepListParams(repFile.getName(),repFile.getRawLocation().toOSString(),String.valueOf(repFile.getModificationStamp())));
      }
    }
    saveReportListFile(repListFile,repList);
  }
}","/** 
 */
public static void initRepListFile(IFile reportFile) throws Exception {
  String reportFileName=reportFile.getName();
  String simpleName=getSimpleName(reportFileName);
  if (simpleName == null) {
    return;
  }
  IFolder reportFileFolder=((IFolder)reportFile.getParent()).getFolder(PluginConstant.DOT_STRING + simpleName);
  if (reportFileFolder != null && reportFileFolder.exists()) {
    File repListFile=new File(ReportHelper.getOutputFolderNameDefault((IFolder)reportFile.getParent(),simpleName) + File.separator + REPORT_LIST);
    List<ReportListParameters> repList=new ArrayList<ReportListParameters>();
    IResource[] members=reportFileFolder.members();
    for (    IResource res : members) {
      if (res.getType() == IResource.FILE) {
        IFile repFile=(IFile)res;
        repList.add(buildRepListParams(repFile.getName(),repFile.getRawLocation().toOSString(),String.valueOf(repFile.getModificationStamp())));
      }
    }
    saveReportListFile(repListFile,repList);
  }
}",0.9845540607872446
137990,"/** 
 * update the file .report.list to deal with the report generated doc folder's movement.
 * @param outputFolder source folder, the original report generated doc folder
 * @param targetFolder target folder, the new folder which source folder moved into
 */
public static void updateReportListFile(IFolder outputFolder,IFolder targetFolder){
  try {
    File oldFolder=WorkspaceUtils.ifolderToFile(outputFolder);
    File newFolder=WorkspaceUtils.ifolderToFile(targetFolder.getFolder(outputFolder.getName()));
    File file=new File(newFolder.getAbsolutePath() + File.separator + ReportUtils.REPORT_LIST);
    if (file.exists() && file.isFile()) {
      String str1=oldFolder.toString();
      String str2=newFolder.toString();
      str1=StringUtils.replace(str1,""String_Node_Str"",""String_Node_Str"");
      str2=StringUtils.replace(str2,""String_Node_Str"",""String_Node_Str"");
      FilesUtils.replaceInFile(str1,file.toString(),str2);
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
}","/** 
 * update the file .report.list to deal with the report generated doc folder's movement.
 * @param outputFolder source folder, the original report generated doc folder
 * @param targetFolder target folder, the new folder which source folder moved into
 */
public static void updateReportListFile(IFolder outputFolder,IFolder targetFolder){
  try {
    File oldFolder=WorkspaceUtils.ifolderToFile(outputFolder);
    File newFolder=WorkspaceUtils.ifolderToFile(targetFolder.getFolder(outputFolder.getName()));
    File file=new File(newFolder.getAbsolutePath() + File.separator + ReportUtils.REPORT_LIST);
    if (file.exists() && file.isFile()) {
      replaceReportGenDocFilePath(file,oldFolder.toString(),newFolder.toString());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
}",0.829050279329609
137991,"/** 
 * if the report's name changed, need to update the report folder name also.
 * @param oldFolderName
 * @param repItem
 */
public static void checkAndUpdateRepFolderName4Rename(String oldFolderName,TDQReportItem repItem){
  String newFolderName=ReportUtils.getSimpleName(repItem.getProperty());
  if (!oldFolderName.equals(newFolderName)) {
    IContainer repItemParent=PropertyHelper.getItemFile(repItem.getProperty()).getParent();
    File oldFolder=WorkspaceUtils.ifolderToFile(repItemParent.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + oldFolderName)));
    File newFolder=WorkspaceUtils.ifolderToFile(repItemParent.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + newFolderName)));
    try {
      oldFolder.renameTo(newFolder);
      File file=new File(ReportHelper.getOutputFolderNameDefault((IFolder)repItemParent,newFolderName) + File.separator + REPORT_LIST);
      if (file.exists() && file.isFile()) {
        FilesUtils.replaceInFile(oldFolder.toString(),file.toString(),newFolder.toString());
      }
      repItemParent.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}","/** 
 * if the report's name changed, need to update the report folder name also.
 * @param parentFolder
 * @param oldFolderName
 * @param repItem
 */
public static void checkAndUpdateRepFolderName4Rename(IFolder parentFolder,String oldFolderName,TDQReportItem repItem){
  String newFolderName=ReportUtils.getSimpleName(repItem.getProperty());
  if (!oldFolderName.equals(newFolderName)) {
    File oldFolder=WorkspaceUtils.ifolderToFile(parentFolder.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + oldFolderName)));
    File newFolder=WorkspaceUtils.ifolderToFile(parentFolder.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + newFolderName)));
    try {
      oldFolder.renameTo(newFolder);
      File file=new File(ReportHelper.getOutputFolderNameDefault(parentFolder,newFolderName) + File.separator + REPORT_LIST);
      if (file.exists() && file.isFile()) {
        replaceReportGenDocFilePath(file,oldFolder.toString(),newFolder.toString());
      }
      parentFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}",0.8529026625927543
137992,"public static IFolder fileToIFolder(File file){
  IFolder folder=null;
  String filePath=file.getAbsolutePath();
  String rootPath=ResourcesPlugin.getWorkspace().getRoot().getLocationURI().getPath();
  if (filePath.startsWith(rootPath)) {
    folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(filePath.substring(rootPath.length(),filePath.length())));
  }
  return folder;
}","public static IFolder fileToIFolder(File file){
  IFolder folder=null;
  String filePath=file.getAbsolutePath();
  String rootPath=ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString();
  if (filePath.startsWith(rootPath)) {
    folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(filePath.substring(rootPath.length(),filePath.length())));
  }
  return folder;
}",0.9667519181585678
137993,"/** 
 * if the DriverClassName is empty or Jar File Path is invalid return false.
 * @param dbConn a General JDBC database connection
 * @return
 */
public static ReturnCode checkGeneralJdbcJarFilePathDriverClassName(DatabaseConnection dbConn){
  ReturnCode returnCode=new ReturnCode();
  String driverClass=dbConn.getDriverClass();
  String driverJarPath=dbConn.getDriverJarPath();
  if (driverClass == null || driverClass.trim().equals(""String_Node_Str"")) {
    returnCode.setOk(false);
    returnCode.setMessage(Messages.getString(""String_Node_Str""));
  }
 else {
    if (driverJarPath == null || driverJarPath.trim().equals(""String_Node_Str"")) {
      returnCode.setOk(false);
      returnCode.setMessage(Messages.getString(""String_Node_Str""));
    }
 else {
      File jarFile=new File(driverJarPath);
      if (!jarFile.exists() || jarFile.isDirectory()) {
        returnCode.setOk(false);
        returnCode.setMessage(Messages.getString(""String_Node_Str""));
      }
    }
  }
  return returnCode;
}","/** 
 * if the DriverClassName is empty or Jar File Path is invalid return false.
 * @param dbConn a General JDBC database connection
 * @return
 */
public static ReturnCode checkGeneralJdbcJarFilePathDriverClassName(DatabaseConnection dbConn){
  ReturnCode returnCode=new ReturnCode();
  String driverClass=dbConn.getDriverClass();
  String driverJarPath=dbConn.getDriverJarPath();
  if (driverClass == null || driverClass.trim().equals(""String_Node_Str"")) {
    returnCode.setOk(false);
    returnCode.setMessage(Messages.getString(""String_Node_Str""));
  }
 else {
    if (driverJarPath == null || driverJarPath.trim().equals(""String_Node_Str"")) {
      returnCode.setOk(false);
      returnCode.setMessage(Messages.getString(""String_Node_Str""));
    }
 else {
      String[] splits=driverJarPath.split(""String_Node_Str"");
      for (      String str : splits) {
        if (str != null && str.trim().length() > 0) {
          File jarFile=new File(str);
          if (!jarFile.exists() || jarFile.isDirectory()) {
            returnCode.setOk(false);
            returnCode.setMessage(Messages.getString(""String_Node_Str""));
            break;
          }
        }
      }
    }
  }
  return returnCode;
}",0.8966139954853273
137994,"/** 
 * remove the report node (remove the report generate doc folder also).
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
private void moveReportRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  relocateJrxmlTemplates(sourceNode,targetNode);
  IFolder outputFolder=ReportUtils.getOutputFolder((ReportRepNode)sourceNode);
  File sourceFile=WorkspaceUtils.ifolderToFile(outputFolder);
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  IPath fullPath=ResourceManager.getReportsFolder().getFullPath();
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,Path.EMPTY);
  }
  IFolder targetFolder=RepositoryNodeHelper.getIFolder(targetNode);
  File targetFile=WorkspaceUtils.ifolderToFile(targetFolder);
  FilesUtils.copyDirectory(sourceFile,targetFile);
  FilesUtils.deleteFile(sourceFile,true);
  ReportUtils.updateReportListFile(outputFolder,targetFolder);
  CorePlugin.getDefault().refreshDQView(targetNode.getParent());
}","/** 
 * remove the report node (remove the report generate doc folder also).
 * @param sourceNode
 * @param targetNode
 * @throws PersistenceException
 */
private void moveReportRepNode(IRepositoryNode sourceNode,IRepositoryNode targetNode) throws PersistenceException {
  relocateJrxmlTemplates(sourceNode,targetNode);
  IFolder outputFolder=ReportUtils.getOutputFolder((ReportRepNode)sourceNode);
  File sourceFile=WorkspaceUtils.ifolderToFile(outputFolder);
  IRepositoryViewObject objectToMove=sourceNode.getObject();
  IPath fullPath=ResourceManager.getReportsFolder().getFullPath();
  if (targetNode.getType() == ENodeType.SIMPLE_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,fullPath.makeRelativeTo(ResourceManager.getRootProject().getFullPath()));
  }
 else   if (targetNode.getType() == ENodeType.SYSTEM_FOLDER) {
    moveObject(objectToMove,sourceNode,targetNode,Path.EMPTY);
  }
  IFolder targetFolder=RepositoryNodeHelper.getIFolder(targetNode);
  if (targetFolder != null) {
    File targetFile=WorkspaceUtils.ifolderToFile(targetFolder);
    FilesUtils.copyDirectory(sourceFile,targetFile);
    FilesUtils.deleteFile(sourceFile,true);
    ReportUtils.updateReportListFile(outputFolder,targetFolder);
    CorePlugin.getDefault().refreshDQView(targetNode.getParent());
  }
}",0.9827856025039124
137995,"/** 
 * update the file .report.list to deal with the report generated doc folder's movement.
 * @param outputFolder source folder, the original report generated doc folder
 * @param targetFolder target folder, the new folder which source folder moved into
 */
public static void updateReportListFile(IFolder outputFolder,IFolder targetFolder){
  try {
    File oldFolder=WorkspaceUtils.ifolderToFile(outputFolder);
    File newFolder=WorkspaceUtils.ifolderToFile(targetFolder.getFolder(outputFolder.getName()));
    File file=new File(newFolder.getAbsolutePath() + File.separator + ReportUtils.REPORT_LIST);
    if (file.exists() && file.isFile()) {
      String str1=oldFolder.toString();
      String str2=newFolder.toString();
      str1=StringUtils.replace(str1,""String_Node_Str"",""String_Node_Str"");
      str2=StringUtils.replace(str2,""String_Node_Str"",""String_Node_Str"");
      FilesUtils.replaceInFile(str1,file.toString(),str2);
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
}","/** 
 * update the file .report.list to deal with the report generated doc folder's movement.
 * @param outputFolder source folder, the original report generated doc folder
 * @param targetFolder target folder, the new folder which source folder moved into
 */
public static void updateReportListFile(IFolder outputFolder,IFolder targetFolder){
  try {
    File oldFolder=WorkspaceUtils.ifolderToFile(outputFolder);
    File newFolder=WorkspaceUtils.ifolderToFile(targetFolder.getFolder(outputFolder.getName()));
    File file=new File(newFolder.getAbsolutePath() + File.separator + ReportUtils.REPORT_LIST);
    if (file.exists() && file.isFile()) {
      replaceReportGenDocFilePath(file,oldFolder.toString(),newFolder.toString());
    }
  }
 catch (  Exception e) {
    log.warn(e,e);
  }
}",0.829050279329609
137996,"/** 
 * if the report's name changed, need to update the report folder name also.
 * @param oldFolderName
 * @param repItem
 */
public static void checkAndUpdateRepFolderName4Rename(String oldFolderName,TDQReportItem repItem){
  String newFolderName=ReportUtils.getSimpleName(repItem.getProperty());
  if (!oldFolderName.equals(newFolderName)) {
    IContainer repItemParent=PropertyHelper.getItemFile(repItem.getProperty()).getParent();
    File oldFolder=WorkspaceUtils.ifolderToFile(repItemParent.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + oldFolderName)));
    File newFolder=WorkspaceUtils.ifolderToFile(repItemParent.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + newFolderName)));
    try {
      oldFolder.renameTo(newFolder);
      File file=new File(ReportHelper.getOutputFolderNameDefault((IFolder)repItemParent,newFolderName) + File.separator + REPORT_LIST);
      if (file.exists() && file.isFile()) {
        FilesUtils.replaceInFile(oldFolder.toString(),file.toString(),newFolder.toString());
      }
      repItemParent.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}","/** 
 * if the report's name changed, need to update the report folder name also.
 * @param parentFolder
 * @param oldFolderName
 * @param repItem
 */
public static void checkAndUpdateRepFolderName4Rename(IFolder parentFolder,String oldFolderName,TDQReportItem repItem){
  String newFolderName=ReportUtils.getSimpleName(repItem.getProperty());
  if (!oldFolderName.equals(newFolderName)) {
    File oldFolder=WorkspaceUtils.ifolderToFile(parentFolder.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + oldFolderName)));
    File newFolder=WorkspaceUtils.ifolderToFile(parentFolder.getFolder(Path.fromPortableString(PluginConstant.DOT_STRING + newFolderName)));
    try {
      oldFolder.renameTo(newFolder);
      File file=new File(ReportHelper.getOutputFolderNameDefault(parentFolder,newFolderName) + File.separator + REPORT_LIST);
      if (file.exists() && file.isFile()) {
        replaceReportGenDocFilePath(file,oldFolder.toString(),newFolder.toString());
      }
      parentFolder.refreshLocal(IResource.DEPTH_INFINITE,null);
    }
 catch (    Exception e) {
      log.warn(e,e);
    }
  }
}",0.8529026625927543
137997,"public static IFolder fileToIFolder(File file){
  IFolder folder=null;
  String filePath=file.getAbsolutePath();
  String rootPath=ResourcesPlugin.getWorkspace().getRoot().getLocationURI().getPath();
  if (filePath.startsWith(rootPath)) {
    folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(filePath.substring(rootPath.length(),filePath.length())));
  }
  return folder;
}","public static IFolder fileToIFolder(File file){
  IFolder folder=null;
  String filePath=file.getAbsolutePath();
  String rootPath=ResourcesPlugin.getWorkspace().getRoot().getLocation().toOSString();
  if (filePath.startsWith(rootPath)) {
    folder=ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(filePath.substring(rootPath.length(),filePath.length())));
  }
  return folder;
}",0.9667519181585678
137998,"/** 
 * physical delete related.
 * @param item
 */
public static ReturnCode deleteRelations(Item item){
  ReturnCode rc=new ReturnCode(Boolean.TRUE);
  if (item == null || item.getProperty() == null || item instanceof FolderItem) {
    rc.setOk(Boolean.FALSE);
    return rc;
  }
  IFile itemFile=PropertyHelper.getItemFile(item.getProperty());
  if (itemFile == null || itemFile.exists()) {
    rc.setOk(Boolean.FALSE);
    return rc;
  }
  if (item instanceof TDQReportItem) {
    return deleteRepOutputFolder(itemFile);
  }
  return rc;
}","/** 
 * physical delete related.
 * @param item
 */
public static ReturnCode deleteRelations(Item item){
  ReturnCode rc=new ReturnCode(Boolean.TRUE);
  if (item == null || item.getProperty() == null || item instanceof FolderItem) {
    rc.setOk(Boolean.FALSE);
    return rc;
  }
  IFile itemFile=PropertyHelper.getItemFile(item.getProperty());
  if (itemFile == null || itemFile.exists()) {
    rc.setOk(Boolean.FALSE);
    return rc;
  }
  if (item instanceof TDQReportItem) {
    return ReportUtils.deleteRepOutputFolder(itemFile);
  }
  return rc;
}",0.9890510948905108
137999,"@Override public EObject eResolveProxy(InternalEObject proxy){
  if (!proxy.eClass().equals(PropertiesPackage.eINSTANCE.getByteArray())) {
    return super.eResolveProxy(proxy);
  }
  URI proxyUri=proxy.eProxyURI();
  URI resourceUri=proxyUri.trimFragment();
  if (eResource() == null) {
    return super.eResolveProxy(proxy);
  }
  ResourceSet resourceSet=eResource().getResourceSet();
  ByteArrayResource byteArrayResource=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI normalizedURI=theURIConverter.normalize(resourceUri);
  if (""String_Node_Str"".equals(proxyUri.scheme()) && proxyUri.segmentCount() > 1 && ""String_Node_Str"".equals(proxyUri.segment(0))) {
    for (    Object element : resourceSet.getResources()) {
      Resource resource=(Resource)element;
      if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
        byteArrayResource=(ByteArrayResource)resource;
      }
    }
    if (byteArrayResource == null) {
      byteArrayResource=new ByteArrayResource(resourceUri);
      resourceSet.getResources().add(byteArrayResource);
    }
    try {
      byteArrayResource.load(null);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    for (    Object element : resourceSet.getResources()) {
      Resource resource=(Resource)element;
      if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
        byteArrayResource=(ByteArrayResource)resource;
      }
    }
  }
  if (byteArrayResource != null && byteArrayResource.isLoaded()) {
    EObject object=byteArrayResource.getEObject(proxyUri.fragment().toString());
    if (object != null) {
      return object;
    }
  }
  throw new UnsupportedOperationException();
}","@Override public EObject eResolveProxy(InternalEObject proxy){
  if (!proxy.eClass().equals(org.talend.core.model.properties.PropertiesPackage.eINSTANCE.getByteArray())) {
    return super.eResolveProxy(proxy);
  }
  URI proxyUri=proxy.eProxyURI();
  URI resourceUri=proxyUri.trimFragment();
  if (eResource() == null) {
    return super.eResolveProxy(proxy);
  }
  ResourceSet resourceSet=eResource().getResourceSet();
  ByteArrayResource byteArrayResource=null;
  URIConverter theURIConverter=resourceSet.getURIConverter();
  URI normalizedURI=theURIConverter.normalize(resourceUri);
  if (""String_Node_Str"".equals(proxyUri.scheme()) && proxyUri.segmentCount() > 1 && ""String_Node_Str"".equals(proxyUri.segment(0))) {
    for (    Object element : resourceSet.getResources()) {
      Resource resource=(Resource)element;
      if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
        byteArrayResource=(ByteArrayResource)resource;
      }
    }
    if (byteArrayResource == null) {
      byteArrayResource=new ByteArrayResource(resourceUri);
      resourceSet.getResources().add(byteArrayResource);
    }
    try {
      byteArrayResource.load(null);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    for (    Object element : resourceSet.getResources()) {
      Resource resource=(Resource)element;
      if (theURIConverter.normalize(resource.getURI()).equals(normalizedURI)) {
        byteArrayResource=(ByteArrayResource)resource;
      }
    }
  }
  if (byteArrayResource != null && byteArrayResource.isLoaded()) {
    EObject object=byteArrayResource.getEObject(proxyUri.fragment().toString());
    if (object != null) {
      return object;
    }
  }
  throw new UnsupportedOperationException();
}",0.9905579399141632
138000,"@Override protected String getFileExtension(){
  return null;
}","@Override protected String getFileExtension(){
  return ""String_Node_Str"";
}",0.8633093525179856
