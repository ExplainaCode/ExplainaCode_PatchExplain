record_number,buggy_code,fixed_code,code_similarity
57001,"/** 
 * Calculates the probability of the specified list of ids to belong to this IDType.
 * @param idList
 * @return Probability of affiliation as value from 0 to 1. 0 means that none of the specified ids matched thisIDType, wheras 1 means that all matched this IDType.
 */
public float calcProbabilityOfIDTypeAffiliation(List<String> idList){
  if (idList == null || idList.isEmpty())   return 0;
  IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(idCategory);
  int numMatchedIDs=0;
  for (  String currentID : idList) {
    if (getDataType().equals(EDataType.INTEGER)) {
      try {
        Integer idInt=Integer.valueOf(currentID);
        if (idMappingManager.doesElementExist(this,idInt)) {
          numMatchedIDs++;
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else     if (getDataType().equals(EDataType.INTEGER)) {
      if (idMappingManager.doesElementExist(this,currentID)) {
        numMatchedIDs++;
      }
 else       if (getTypeName().equals(""String_Node_Str"")) {
        if (currentID.contains(""String_Node_Str"")) {
          if (idMappingManager.doesElementExist(this,currentID.substring(0,currentID.indexOf(""String_Node_Str"")))) {
            numMatchedIDs++;
          }
        }
      }
    }
  }
  return (float)numMatchedIDs / (float)idList.size();
}","/** 
 * Calculates the probability of the specified list of ids to belong to this IDType.
 * @param idList
 * @return Probability of affiliation as value from 0 to 1. 0 means that none of the specified ids matched thisIDType, wheras 1 means that all matched this IDType.
 */
public float calcProbabilityOfIDTypeAffiliation(List<String> idList){
  if (idList == null || idList.isEmpty())   return 0;
  IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(idCategory);
  int numMatchedIDs=0;
  for (  String currentID : idList) {
    if (getDataType().equals(EDataType.INTEGER)) {
      try {
        Integer idInt=Integer.valueOf(currentID);
        if (idMappingManager.doesElementExist(this,idInt)) {
          numMatchedIDs++;
        }
      }
 catch (      NumberFormatException e) {
      }
    }
 else     if (getDataType().equals(EDataType.STRING)) {
      if (idMappingManager.doesElementExist(this,currentID)) {
        numMatchedIDs++;
      }
 else       if (getTypeName().equals(""String_Node_Str"")) {
        if (currentID.contains(""String_Node_Str"")) {
          if (idMappingManager.doesElementExist(this,currentID.substring(0,currentID.indexOf(""String_Node_Str"")))) {
            numMatchedIDs++;
          }
        }
      }
    }
  }
  return (float)numMatchedIDs / (float)idList.size();
}",0.9973870847331092
57002,"private void buildTable(MatrixBasedBodyDataProvider bodyDataProvider,ColumnHeaderDataProvider columnDataProvider,LineNumberRowHeaderDataProvider rowDataProvider){
  if (table != null) {
    this.table.dispose();
    this.table=null;
  }
  final DataLayer bodyDataLayer=new DataLayer(bodyDataProvider);
  SelectionLayer selectionLayer=new SelectionLayer(bodyDataLayer);
  ViewportLayer bodyLayer=new ViewportLayer(selectionLayer);
  final DataLayer columnDataLayer=new DataLayer(columnDataProvider,120,25);
  ColumnHeaderLayer columnHeaderLayer=new ColumnHeaderLayer(columnDataLayer,bodyLayer,selectionLayer);
  DataLayer rowDataLayer=new DataLayer(rowDataProvider,50,20);
  RowHeaderLayer rowHeaderLayer=new RowHeaderLayer(rowDataLayer,bodyLayer,selectionLayer);
  DefaultCornerDataProvider cornerDataProvider=new DefaultCornerDataProvider(columnDataProvider,rowDataProvider);
  CornerLayer cornerLayer=new CornerLayer(new DataLayer(cornerDataProvider),rowHeaderLayer,columnHeaderLayer);
  GridLayer gridLayer=new GridLayer(bodyLayer,columnHeaderLayer,rowHeaderLayer,cornerLayer);
  table=new NatTable(parent,gridLayer,false);
  GridData gridData=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  gridData.heightHint=300;
  gridData.widthHint=800;
  table.setLayoutData(gridData);
  IConfigLabelAccumulator cellLabelAccumulator=new IConfigLabelAccumulator(){
    @Override public void accumulateConfigLabels(    LabelStack configLabels,    int columnPosition,    int rowPosition){
      if (columnPosition == idColumnIndex || rowPosition == idRowIndex) {
        configLabels.addLabel(ID_CELL);
      }
      if (rowPosition < numberOfHeaderRows) {
        configLabels.addLabel(HEADER_LINE_CELL);
      }
      if (columnPosition == idColumnIndex && rowPosition >= numberOfHeaderRows && rowPosition != idRowIndex) {
        configLabels.addLabel(ROW_ID);
      }
      if (rowPosition == idRowIndex && columnPosition != idColumnIndex) {
        configLabels.addLabel(COLUMN_ID);
      }
    }
  }
;
  bodyDataLayer.setConfigLabelAccumulator(cellLabelAccumulator);
  table.addConfiguration(new DefaultNatTableStyleConfiguration());
  if (columnIDConverter == null)   columnIDConverter=new RegExIDConverter(null);
  if (rowIDConverter == null)   rowIDConverter=new RegExIDConverter(null);
  table.addConfiguration(new AbstractRegistryConfiguration(){
    @Override public void configureRegistry(    IConfigRegistry configRegistry){
      Style cellStyle=new Style();
      cellStyle.setAttributeValue(CellStyleAttributes.BACKGROUND_COLOR,GUIHelper.COLOR_GREEN);
      configRegistry.registerConfigAttribute(CellConfigAttributes.CELL_STYLE,cellStyle,DisplayMode.NORMAL,ID_CELL);
      cellStyle=new Style();
      cellStyle.setAttributeValue(CellStyleAttributes.BACKGROUND_COLOR,GUIHelper.COLOR_DARK_GRAY);
      configRegistry.registerConfigAttribute(CellConfigAttributes.CELL_STYLE,cellStyle,DisplayMode.NORMAL,HEADER_LINE_CELL);
      configRegistry.registerConfigAttribute(CellConfigAttributes.DISPLAY_CONVERTER,columnIDConverter,DisplayMode.NORMAL,COLUMN_ID);
      configRegistry.registerConfigAttribute(CellConfigAttributes.DISPLAY_CONVERTER,rowIDConverter,DisplayMode.NORMAL,ROW_ID);
    }
  }
);
  final ColumnHeaderCheckBoxPainter columnHeaderCheckBoxPainter=new ColumnHeaderCheckBoxPainter(columnDataLayer);
  final ICellPainter columnHeaderPainter=new BeveledBorderDecorator(new CellPainterDecorator(new ColumnNumberCellPainter(),CellEdgeEnum.LEFT,columnHeaderCheckBoxPainter));
  table.addConfiguration(new AbstractRegistryConfiguration(){
    @Override public void configureRegistry(    IConfigRegistry configRegistry){
      configRegistry.registerConfigAttribute(CellConfigAttributes.CELL_PAINTER,columnHeaderPainter,DisplayMode.NORMAL,GridRegion.COLUMN_HEADER);
    }
    @Override public void configureUiBindings(    UiBindingRegistry uiBindingRegistry){
      uiBindingRegistry.registerFirstSingleClickBinding(new CellPainterMouseEventMatcher(GridRegion.COLUMN_HEADER,MouseEventMatcher.LEFT_BUTTON,columnHeaderCheckBoxPainter),new ToggleCheckBoxColumnAction(columnHeaderCheckBoxPainter,columnDataLayer));
    }
  }
);
  table.configure();
}","private void buildTable(MatrixBasedBodyDataProvider bodyDataProvider,ColumnHeaderDataProvider columnDataProvider,LineNumberRowHeaderDataProvider rowDataProvider){
  if (table != null) {
    this.table.dispose();
    this.table=null;
  }
  final DataLayer bodyDataLayer=new DataLayer(bodyDataProvider);
  SelectionLayer selectionLayer=new SelectionLayer(bodyDataLayer);
  ViewportLayer bodyLayer=new ViewportLayer(selectionLayer);
  final DataLayer columnDataLayer=new DataLayer(columnDataProvider,120,25);
  ColumnHeaderLayer columnHeaderLayer=new ColumnHeaderLayer(columnDataLayer,bodyLayer,selectionLayer);
  DataLayer rowDataLayer=new DataLayer(rowDataProvider,50,20);
  RowHeaderLayer rowHeaderLayer=new RowHeaderLayer(rowDataLayer,bodyLayer,selectionLayer);
  DefaultCornerDataProvider cornerDataProvider=new DefaultCornerDataProvider(columnDataProvider,rowDataProvider);
  CornerLayer cornerLayer=new CornerLayer(new DataLayer(cornerDataProvider),rowHeaderLayer,columnHeaderLayer);
  GridLayer gridLayer=new GridLayer(bodyLayer,columnHeaderLayer,rowHeaderLayer,cornerLayer);
  table=new NatTable(parent,gridLayer,false);
  GridData gridData=new GridData(SWT.FILL,SWT.FILL,true,true,2,2);
  gridData.heightHint=400;
  gridData.widthHint=800;
  table.setLayoutData(gridData);
  IConfigLabelAccumulator cellLabelAccumulator=new IConfigLabelAccumulator(){
    @Override public void accumulateConfigLabels(    LabelStack configLabels,    int columnPosition,    int rowPosition){
      if (columnPosition == idColumnIndex || rowPosition == idRowIndex) {
        configLabels.addLabel(ID_CELL);
      }
      if (rowPosition < numberOfHeaderRows) {
        configLabels.addLabel(HEADER_LINE_CELL);
      }
      if (columnPosition == idColumnIndex && rowPosition >= numberOfHeaderRows && rowPosition != idRowIndex) {
        configLabels.addLabel(ROW_ID);
      }
      if (rowPosition == idRowIndex && columnPosition != idColumnIndex) {
        configLabels.addLabel(COLUMN_ID);
      }
    }
  }
;
  bodyDataLayer.setConfigLabelAccumulator(cellLabelAccumulator);
  table.addConfiguration(new DefaultNatTableStyleConfiguration());
  if (columnIDConverter == null)   columnIDConverter=new RegExIDConverter(null);
  if (rowIDConverter == null)   rowIDConverter=new RegExIDConverter(null);
  table.addConfiguration(new AbstractRegistryConfiguration(){
    @Override public void configureRegistry(    IConfigRegistry configRegistry){
      Style cellStyle=new Style();
      cellStyle.setAttributeValue(CellStyleAttributes.BACKGROUND_COLOR,GUIHelper.COLOR_GREEN);
      configRegistry.registerConfigAttribute(CellConfigAttributes.CELL_STYLE,cellStyle,DisplayMode.NORMAL,ID_CELL);
      cellStyle=new Style();
      cellStyle.setAttributeValue(CellStyleAttributes.BACKGROUND_COLOR,GUIHelper.COLOR_DARK_GRAY);
      configRegistry.registerConfigAttribute(CellConfigAttributes.CELL_STYLE,cellStyle,DisplayMode.NORMAL,HEADER_LINE_CELL);
      configRegistry.registerConfigAttribute(CellConfigAttributes.DISPLAY_CONVERTER,columnIDConverter,DisplayMode.NORMAL,COLUMN_ID);
      configRegistry.registerConfigAttribute(CellConfigAttributes.DISPLAY_CONVERTER,rowIDConverter,DisplayMode.NORMAL,ROW_ID);
    }
  }
);
  final ColumnHeaderCheckBoxPainter columnHeaderCheckBoxPainter=new ColumnHeaderCheckBoxPainter(columnDataLayer);
  final ICellPainter columnHeaderPainter=new BeveledBorderDecorator(new CellPainterDecorator(new ColumnNumberCellPainter(),CellEdgeEnum.LEFT,columnHeaderCheckBoxPainter));
  table.addConfiguration(new AbstractRegistryConfiguration(){
    @Override public void configureRegistry(    IConfigRegistry configRegistry){
      configRegistry.registerConfigAttribute(CellConfigAttributes.CELL_PAINTER,columnHeaderPainter,DisplayMode.NORMAL,GridRegion.COLUMN_HEADER);
    }
    @Override public void configureUiBindings(    UiBindingRegistry uiBindingRegistry){
      uiBindingRegistry.registerFirstSingleClickBinding(new CellPainterMouseEventMatcher(GridRegion.COLUMN_HEADER,MouseEventMatcher.LEFT_BUTTON,columnHeaderCheckBoxPainter),new ToggleCheckBoxColumnAction(columnHeaderCheckBoxPainter,columnDataLayer));
    }
  }
);
  table.configure();
}",0.9995187680461982
57003,"public void createDataPreviewTableFromFile(){
  parser.parse(dataSetDescription.getDataSourcePath(),dataSetDescription.getDelimiter(),true,MAX_PREVIEW_TABLE_ROWS);
  dataMatrix=parser.getDataMatrix();
  totalNumberOfColumns=parser.getTotalNumberOfColumns();
  totalNumberOfRows=parser.getTotalNumberOfRows();
  page.previewTable.createTableFromMatrix(dataMatrix,totalNumberOfColumns);
  updateWidgetsAccordingToTableChanges();
  determineIDTypes();
  guessNumberOfHeaderRows();
  page.previewTable.updateTableColors(dataSetDescription.getNumberOfHeaderLines(),dataSetDescription.getRowOfColumnIDs(),dataSetDescription.getColumnOfRowIds());
  page.parentComposite.pack();
}","public void createDataPreviewTableFromFile(){
  parser.parse(dataSetDescription.getDataSourcePath(),dataSetDescription.getDelimiter(),true,-1);
  dataMatrix=parser.getDataMatrix();
  totalNumberOfColumns=parser.getTotalNumberOfColumns();
  totalNumberOfRows=parser.getTotalNumberOfRows();
  page.previewTable.createTableFromMatrix(dataMatrix,totalNumberOfColumns);
  updateWidgetsAccordingToTableChanges();
  determineIDTypes();
  guessNumberOfHeaderRows();
  page.previewTable.updateTableColors(dataSetDescription.getNumberOfHeaderLines(),dataSetDescription.getRowOfColumnIDs(),dataSetDescription.getColumnOfRowIds());
}",0.9574632637277648
57004,"private void determineIDTypes(){
  List<String> rowIDList=new ArrayList<String>();
  for (int i=0; i < dataMatrix.size() && i < MAX_CONSIDERED_IDS_FOR_ID_TYPE_DETERMINATION; i++) {
    List<String> row=dataMatrix.get(i);
    rowIDList.add(row.get(dataSetDescription.getColumnOfRowIds()));
  }
  List<String> columnIDList=new ArrayList<String>();
  List<String> idRow=dataMatrix.get(dataSetDescription.getRowOfColumnIDs());
  for (int i=0; i < idRow.size() && i < MAX_CONSIDERED_IDS_FOR_ID_TYPE_DETERMINATION; i++) {
    columnIDList.add(idRow.get(i));
  }
  IDType mostProbableRowIDType=determineMostProbableIDType(rowIDList);
  IDType mostProbableColumnIDType=determineMostProbableIDType(columnIDList);
  setMostProbableIDTypes(mostProbableRowIDType,mostProbableColumnIDType);
}","private void determineIDTypes(){
  IDType mostProbableRowIDType=null;
  IDType mostProbableColumnIDType=null;
  IDSpecification rowIDSpec=dataSetDescription.getRowIDSpecification();
  IDSpecification columnIDSpec=dataSetDescription.getColumnIDSpecification();
  if (rowIDSpec != null) {
    mostProbableRowIDType=IDType.getIDType(rowIDSpec.getIdType());
  }
  if (columnIDSpec != null) {
    mostProbableColumnIDType=IDType.getIDType(columnIDSpec.getIdType());
  }
  List<String> rowIDList=new ArrayList<String>();
  for (int i=0; i < dataMatrix.size() && i < MAX_CONSIDERED_IDS_FOR_ID_TYPE_DETERMINATION; i++) {
    List<String> row=dataMatrix.get(i);
    rowIDList.add(row.get(dataSetDescription.getColumnOfRowIds()));
  }
  List<String> columnIDList=new ArrayList<String>();
  List<String> idRow=dataMatrix.get(dataSetDescription.getRowOfColumnIDs());
  for (int i=0; i < idRow.size() && i < MAX_CONSIDERED_IDS_FOR_ID_TYPE_DETERMINATION; i++) {
    columnIDList.add(idRow.get(i));
  }
  if (mostProbableRowIDType == null)   mostProbableRowIDType=determineMostProbableIDType(rowIDList);
  if (mostProbableColumnIDType == null)   mostProbableColumnIDType=determineMostProbableIDType(columnIDList);
  setMostProbableIDTypes(mostProbableRowIDType,mostProbableColumnIDType);
}",0.7462250365319045
57005,"@Override public void fillStateMachine(IStateMachine stateMachine,List<TablePerspective> existing,EWizardMode mode,TablePerspective source){
  IState start=stateMachine.get(IStateMachine.ADD_PATHWAY);
  BrowsePathwayState browse=(BrowsePathwayState)stateMachine.get(IStateMachine.BROWSE_PATHWAY);
  if (!existing.isEmpty() && mode == EWizardMode.GLOBAL) {
    IState target=stateMachine.addState(""String_Node_Str"",new CreateGSEAState(browse,true));
    stateMachine.addTransition(start,new SimpleTransition(target,""String_Node_Str""));
  }
}","@Override public void fillStateMachine(IStateMachine stateMachine,List<TablePerspective> existing,EWizardMode mode,TablePerspective source){
  IState start=stateMachine.get(IStateMachine.ADD_PATHWAY);
  BrowsePathwayState browse=(BrowsePathwayState)stateMachine.get(IStateMachine.BROWSE_PATHWAY);
  if (!existing.isEmpty() && mode == EWizardMode.GLOBAL && hasGoodOnes(existing)) {
    IState target=stateMachine.addState(""String_Node_Str"",new CreateGSEAState(browse,true));
    stateMachine.addTransition(start,new SimpleTransition(target,""String_Node_Str""));
  }
}",0.9773755656108596
57006,"public void setMatches(String matches){
  if (Objects.equals(matches,this.matches))   return;
  this.matches=matches;
  updateFilter();
}","public void setMatches(String matches){
  if (Objects.equals(matches,this.matches))   return;
  if (matches != null && matches.trim().isEmpty())   matches=null;
  this.matches=matches;
  updateFilter();
}",0.8035190615835777
57007,"public TableDataDomainElement(StratificationDataDomainQuery model){
  super(model);
  setHasFilter(true);
}","public TableDataDomainElement(StratificationDataDomainQuery model){
  super(model);
}",0.8854166666666666
57008,"private void setFilter(String filter){
  getModel().setMatches(filter);
}","private void setFilter(String filter){
  getModel().setMatches(filter);
  setHasFilter(model.hasFilter());
}",0.8066298342541437
57009,"@Override public void preWorkbenchOpen(){
  if (!rFile.inCache()) {
    try {
      new ProgressMonitorDialog(new Shell()).run(true,false,rFile);
    }
 catch (    InvocationTargetException|InterruptedException e) {
      e.printStackTrace();
    }
  }
  super.preWorkbenchOpen();
}","@Override public void preWorkbenchOpen(){
  if (!rFile.inCache(false)) {
    try {
      new ProgressMonitorDialog(new Shell()).run(true,false,rFile);
    }
 catch (    InvocationTargetException|InterruptedException e) {
      e.printStackTrace();
    }
  }
  super.preWorkbenchOpen();
}",0.9912126537785588
57010,"/** 
 * @return the caught, see {@link #caught}
 */
public Exception getCaught(){
  return caught;
}","/** 
 * the exception caught during   {@link #run(IProgressMonitor)} or null if none occurred
 * @return the caught, see {@link #caught}
 */
public Exception getCaught(){
  return caught;
}",0.6920415224913494
57011,"public static RemoteFile of(URL url){
  return new RemoteFile(url);
}","/** 
 * factory for creating a   {@link RemoteFile}
 * @param url
 * @return
 */
public static RemoteFile of(URL url){
  return new RemoteFile(url);
}",0.6301369863013698
57012,"@Override public void run(IProgressMonitor monitor){
  if (inCache()) {
    monitor.done();
    return;
  }
  successful=false;
  caught=null;
  File tmp=new File(file.getAbsolutePath() + ""String_Node_Str"");
  tmp.getParentFile().mkdirs();
  long lastModified=0;
  try (OutputStream out=new BufferedOutputStream(new FileOutputStream(tmp))){
    URLConnection connection=url.openConnection();
    connection.connect();
    int length=connection.getContentLength();
    lastModified=connection.getLastModified();
    if (length < 0)     length=IProgressMonitor.UNKNOWN;
    monitor.beginTask(""String_Node_Str"" + url,length);
    try (InputStream in=new BufferedInputStream(connection.getInputStream())){
      byte[] data=new byte[BUFFER_SIZE];
      int count=0;
      int acc=0;
      int i=0;
      while ((count=in.read(data)) != -1) {
        acc+=count;
        out.write(data,0,count);
        if (i++ >= WORK_TRIGGER_FREQUENCY) {
          i-=WORK_TRIGGER_FREQUENCY;
          if (monitor.isCanceled())           break;
          monitor.worked(acc);
          acc=0;
        }
      }
    }
     monitor.done();
    successful=true;
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + url,e);
    caught=e;
  }
  if (successful) {
    try {
      Files.move(tmp.toPath(),file.toPath(),StandardCopyOption.REPLACE_EXISTING);
      if (lastModified != 0)       file.setLastModified(lastModified);
      RemoteFileCache.putToCache(url,file);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + url,e);
      caught=e;
    }
  }
 else {
    tmp.delete();
  }
}","@Override public void run(IProgressMonitor monitor){
  if (inCache(false)) {
    monitor.done();
    return;
  }
  successful=false;
  caught=null;
  File tmp=new File(file.getAbsolutePath() + ""String_Node_Str"");
  tmp.getParentFile().mkdirs();
  long lastModified=0;
  try (OutputStream out=new BufferedOutputStream(new FileOutputStream(tmp))){
    URLConnection connection=url.openConnection();
    connection.connect();
    int length=connection.getContentLength();
    lastModified=connection.getLastModified();
    if (length < 0)     length=IProgressMonitor.UNKNOWN;
    monitor.beginTask(""String_Node_Str"" + url,length);
    try (InputStream in=new BufferedInputStream(connection.getInputStream())){
      byte[] data=new byte[BUFFER_SIZE];
      int count=0;
      int acc=0;
      int i=0;
      while ((count=in.read(data)) != -1) {
        acc+=count;
        out.write(data,0,count);
        if (i++ >= WORK_TRIGGER_FREQUENCY) {
          i-=WORK_TRIGGER_FREQUENCY;
          if (monitor.isCanceled())           break;
          monitor.worked(acc);
          acc=0;
        }
      }
    }
     monitor.done();
    successful=true;
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + url,e);
    caught=e;
  }
  if (successful) {
    try {
      Files.move(tmp.toPath(),file.toPath(),StandardCopyOption.REPLACE_EXISTING);
      if (lastModified != 0)       file.setLastModified(lastModified);
      RemoteFileCache.putToCache(url,file);
    }
 catch (    IOException e) {
      log.error(""String_Node_Str"" + url,e);
      caught=e;
    }
  }
 else {
    tmp.delete();
  }
}",0.998434074538052
57013,"/** 
 * @param local
 * @return
 */
private static String toUnique(String path,String suffix){
  Set<String> values=cacheContents.values();
  String test=(path + suffix).toLowerCase();
  if (!values.contains(test) && !cacheContentsFile.getName().equalsIgnoreCase(suffix))   return path + suffix;
  int next=0;
  do {
    test=(path + (next++) + suffix).toLowerCase();
  }
 while (values.contains(test) || cacheContentsFile.getName().equalsIgnoreCase(suffix));
  return test;
}","/** 
 * converts the given path with the given suffix to a unique derivat that doesn't yet exist
 * @param local
 * @return
 */
private static String toUnique(String path,String suffix){
  Set<String> values=cacheContents.values();
  String test=(path + suffix).toLowerCase();
  if (!values.contains(test) && !cacheContentsFile.getName().equalsIgnoreCase(suffix))   return path + suffix;
  int next=0;
  do {
    test=(path + (next++) + suffix).toLowerCase();
  }
 while (values.contains(test) || cacheContentsFile.getName().equalsIgnoreCase(suffix));
  return test;
}",0.9118773946360154
57014,"public MultiScore(String label,Color color,Color bgColor){
  setLabel(label);
  this.color=color;
  this.bgColor=bgColor;
}","public MultiScore(String label,Color color,Color bgColor,int combinedType){
  setLabel(label);
  this.color=color;
  this.bgColor=bgColor;
  this.combinedType=combinedType;
}",0.8282828282828283
57015,"@Override public void select(TablePerspective strat,Group group,IReactions reactions){
  AGSEAAlgorithm algorithm;
  if (createGSEA)   algorithm=new GSEAAlgorithm(strat.getRecordPerspective(),group,1.0f);
 else   algorithm=new PGSEAAlgorithm(strat.getRecordPerspective(),group);
  IScore gsea=new GeneSetScore(strat.getRecordPerspective().getLabel(),algorithm,false);
  IScore pValue=new GeneSetScore(gsea.getLabel() + ""String_Node_Str"",algorithm.asPValue(),true);
  reactions.addScoreToTourGuide(EDataDomainQueryMode.PATHWAYS,gsea,pValue);
  target.setUnderlying(strat.getRecordPerspective());
  reactions.switchTo(target);
}","@Override public void select(TablePerspective strat,Group group,IReactions reactions){
  MultiScore score=createScore(strat,group,createGSEA);
  reactions.addScoreToTourGuide(EDataDomainQueryMode.PATHWAYS,score);
  target.setUnderlying(strat.getRecordPerspective());
  reactions.switchTo(target);
}",0.5346320346320347
57016,"@Override protected IRegisteredScore createScore(String label,Perspective strat,Group g){
  if (parametricUI.getSelection()) {
    return createPGSEA(label,strat,g);
  }
 else   return createGSEA(label,strat,g);
}","/** 
 * @param strat
 * @param group
 * @param createGSEA
 * @return
 */
public static MultiScore createScore(TablePerspective strat,Group group,boolean createGSEA){
  AGSEAAlgorithm algorithm;
  if (createGSEA)   algorithm=new GSEAAlgorithm(strat.getRecordPerspective(),group,1.0f);
 else   algorithm=new PGSEAAlgorithm(strat.getRecordPerspective(),group);
  IScore gsea=new GeneSetScore(strat.getRecordPerspective().getLabel(),algorithm,false);
  IScore pValue=new GeneSetScore(gsea.getLabel() + ""String_Node_Str"",algorithm.asPValue(),true);
  MultiScore s=new MultiScore(gsea.getLabel(),color,bgColor,1);
  s.add(gsea);
  s.add(pValue);
  return s;
}",0.0392609699769053
57017,"@Override public void onUpdate(UpdateNumericalPreviewEvent event,IReactions adapter){
  TablePerspective numerical=event.getTablePerspective();
  adapter.replaceTemplate(new PreviewRenderer(adapter.createPreview(numerical),adapter.getGLView(),""String_Node_Str""));
  int dimId=numerical.getDimensionPerspective().getVirtualArray().get(0);
  String label=numerical.getLabel();
  LogRankMetric metric=new LogRankMetric(label,dimId,numerical.getDataDomain());
  LogRankPValue pvalue=new LogRankPValue(label + ""String_Node_Str"",metric);
  adapter.addScoreToTourGuide(STRATIFICATIONS,metric,pvalue);
  adapter.switchTo(target);
}","@Override public void onUpdate(UpdateNumericalPreviewEvent event,IReactions adapter){
  TablePerspective numerical=event.getTablePerspective();
  adapter.replaceTemplate(new PreviewRenderer(adapter.createPreview(numerical),adapter.getGLView(),""String_Node_Str""));
  MultiScore multiScore=createLogRankScore(numerical);
  adapter.addScoreToTourGuide(STRATIFICATIONS,multiScore);
  adapter.switchTo(target);
}",0.6932038834951456
57018,"public float compute(Iterable<Integer> a,Iterable<Integer> b,IProgressMonitor monitor){
  Pair<List<Float>,Integer> asp=getValues(a,this.clinicalVariable);
  List<Float> as=asp.getFirst();
  int asurvived=asp.getSecond();
  if (monitor.isCanceled())   return Float.NaN;
  Pair<List<Float>,Integer> bsp=getValues(b,this.clinicalVariable);
  List<Float> bs=bsp.getFirst();
  int bsurvived=bsp.getSecond();
  if (monitor.isCanceled())   return Float.NaN;
  return Statistics.logRank(as,asurvived,bs,bsurvived);
}","public float compute(Iterable<Integer> a,Iterable<Integer> b,IProgressMonitor monitor){
  Pair<List<Float>,Integer> asp=getValues(a,this.clinicalVariable);
  List<Float> as=asp.getFirst();
  int asurvived=asp.getSecond();
  if (monitor.isCanceled())   return Float.NaN;
  Pair<List<Float>,Integer> bsp=getValues(b,this.clinicalVariable);
  List<Float> bs=bsp.getFirst();
  int bsurvived=bsp.getSecond();
  if (monitor.isCanceled())   return Float.NaN;
  float r=Statistics.logRank(as,asurvived,bs,bsurvived);
  if (Float.isInfinite(r))   return Float.NaN;
  return r;
}",0.9313543599257884
57019,"public static float getPValue(float logRankScore){
  if (Float.isNaN(logRankScore))   return Float.NaN;
  double r=Statistics.chiSquaredProbability(logRankScore,1);
  return (float)r;
}","public static float getPValue(float logRankScore){
  if (Float.isNaN(logRankScore) || Float.isInfinite(logRankScore))   return Float.NaN;
  double r=Statistics.chiSquaredProbability(logRankScore,1);
  return (float)r;
}",0.915841584158416
57020,"@ListenTo(sendToMe=true) public void onAddColumn(AddScoreColumnEvent event){
  if (event.getScores().isEmpty())   return;
  Collection<IScore> toCompute=new ArrayList<>();
  for (  IScore s : event.getScores()) {
    if (!s.supports(this.mode))     continue;
    if (s instanceof IRegisteredScore)     ((IRegisteredScore)s).onRegistered();
    if (s instanceof MultiScore) {
      MultiScore sm=(MultiScore)s;
      MultiScore tmp=new MultiScore(sm.getLabel(),sm.getColor(),sm.getBGColor());
      for (      IScore s2 : ((MultiScore)s)) {
        if (s2 instanceof IRegisteredScore)         ((IRegisteredScore)s2).onRegistered();
        tmp.add(s2);
      }
      toCompute.add(tmp);
    }
 else     toCompute.add(s);
  }
  if (toCompute.isEmpty())   return;
  scheduleAllOf(toCompute,event.isReplaceLeadingScoreColumns());
}","@ListenTo(sendToMe=true) public void onAddColumn(AddScoreColumnEvent event){
  if (event.getScores().isEmpty())   return;
  Collection<IScore> toCompute=new ArrayList<>();
  for (  IScore s : event.getScores()) {
    if (!s.supports(this.mode))     continue;
    if (s instanceof IRegisteredScore)     ((IRegisteredScore)s).onRegistered();
    if (s instanceof MultiScore) {
      MultiScore sm=(MultiScore)s;
      MultiScore tmp=new MultiScore(sm.getLabel(),sm.getColor(),sm.getBGColor(),sm.getCombinedType());
      for (      IScore s2 : ((MultiScore)s)) {
        if (s2 instanceof IRegisteredScore)         ((IRegisteredScore)s2).onRegistered();
        tmp.add(s2);
      }
      toCompute.add(tmp);
    }
 else     toCompute.add(s);
  }
  if (toCompute.isEmpty())   return;
  scheduleAllOf(toCompute,event.isReplaceLeadingScoreColumns());
}",0.9874626865671642
57021,"private void addColumns(Collection<IScore> scores,boolean removeLeadingScoreColumns){
  if (removeLeadingScoreColumns)   removeLeadingScoreColumns();
  for (  IScore s : scores) {
    int lastLabel=findLastLabelColumn();
    if (s instanceof MultiScore) {
      ACompositeRankColumnModel combined=table.getConfig().createNewCombined(0);
      table.add(lastLabel + 1,combined);
      for (      IScore s2 : ((MultiScore)s)) {
        combined.add(new ScoreRankColumnModel(s2));
      }
      if (combined instanceof IRankableColumnMixin)       ((IRankableColumnMixin)combined).orderByMe();
    }
 else {
      ScoreRankColumnModel ss=new ScoreRankColumnModel(s);
      table.add(lastLabel + 1,ss);
      ss.orderByMe();
    }
  }
  TableBodyUI bodyUI=getTableBodyUI();
  if (bodyUI != null)   bodyUI.scrollFirst();
}","private void addColumns(Collection<IScore> scores,boolean removeLeadingScoreColumns){
  if (removeLeadingScoreColumns)   removeLeadingScoreColumns();
  for (  IScore s : scores) {
    int lastLabel=findLastLabelColumn();
    if (s instanceof MultiScore) {
      ACompositeRankColumnModel combined=table.getConfig().createNewCombined(((MultiScore)s).getCombinedType());
      table.add(lastLabel + 1,combined);
      for (      IScore s2 : ((MultiScore)s)) {
        combined.add(new ScoreRankColumnModel(s2));
      }
      if (combined instanceof IRankableColumnMixin)       ((IRankableColumnMixin)combined).orderByMe();
    }
 else {
      ScoreRankColumnModel ss=new ScoreRankColumnModel(s);
      table.add(lastLabel + 1,ss);
      ss.orderByMe();
    }
  }
  TableBodyUI bodyUI=getTableBodyUI();
  if (bodyUI != null)   bodyUI.scrollFirst();
}",0.9795673076923076
57022,"@Override public void propertyChange(PropertyChangeEvent evt){
switch (evt.getPropertyName()) {
case RankTableModel.PROP_DATA:
    @SuppressWarnings(""String_Node_Str"") Collection<IRow> news=(Collection<IRow>)evt.getNewValue();
  maskInvalid.set(getTable().getDataSize() - news.size(),getTable().getDataSize());
break;
}
}","@Override public void propertyChange(PropertyChangeEvent evt){
switch (evt.getPropertyName()) {
case RankTableModel.PROP_DATA:
    RankTableModel table=getTable();
  if (table != null) {
    @SuppressWarnings(""String_Node_Str"") Collection<IRow> news=(Collection<IRow>)evt.getNewValue();
    maskInvalid.set(table.getDataSize() - news.size(),table.getDataSize());
  }
break;
}
}",0.8624641833810889
57023,"private void createWizard(TablePerspective source,boolean independentOne){
  if (source == null) {
    wizard=factory.create(this,stratomex);
    wizardMode=EWizardMode.GLOBAL;
  }
 else   if (independentOne) {
    wizard=factory.createIndepenent(this,stratomex,source);
    wizardMode=EWizardMode.INDEPENDENT;
  }
 else {
    wizard=factory.createDependent(this,stratomex,source);
    wizardMode=EWizardMode.DEPENDENT;
  }
  stratomex.registerEventListener(wizard);
}","private void createWizard(TablePerspective source,boolean independentOne){
  if (source == null) {
    wizard=factory.create(this,stratomex);
    wizardMode=EWizardMode.GLOBAL;
  }
 else   if (independentOne) {
    wizard=factory.createIndepenent(this,stratomex,source);
    wizardMode=EWizardMode.INDEPENDENT;
  }
 else {
    wizard=factory.createDependent(this,stratomex,source);
    wizardMode=EWizardMode.DEPENDENT;
  }
  stratomex.registerEventListener(wizard);
  wizard.prepare();
}",0.9790794979079498
57024,"@ListenTo(sendToMe=true) private void onUpdatePreview(UpdatePathwayPreviewEvent event){
  if (wizard == null) {
    initIntermediateWizard();
    wizard=factory.createForPathway(this,stratomex);
    stratomex.registerEventListener(wizard);
  }
  wizard.onUpdate(event);
}","@ListenTo(sendToMe=true) private void onUpdatePreview(UpdatePathwayPreviewEvent event){
  if (wizard == null) {
    initIntermediateWizard();
    wizard=factory.createForPathway(this,stratomex);
    stratomex.registerEventListener(wizard);
    wizard.prepare();
  }
  wizard.onUpdate(event);
}",0.9609929078014184
57025,"@ListenTo(sendToMe=true) private void onUpdateNumerical(UpdateNumericalPreviewEvent event){
  if (wizard == null) {
    initIntermediateWizard();
    wizard=factory.createForOther(this,stratomex);
    stratomex.registerEventListener(wizard);
  }
  wizard.onUpdate(event);
}","@ListenTo(sendToMe=true) private void onUpdateNumerical(UpdateNumericalPreviewEvent event){
  if (wizard == null) {
    initIntermediateWizard();
    wizard=factory.createForOther(this,stratomex);
    stratomex.registerEventListener(wizard);
    wizard.prepare();
  }
  wizard.onUpdate(event);
}",0.9612676056338028
57026,"@Override public void on(IState target){
  stateMachine.getCurrent().onLeave();
  stateMachine.move(target);
  target.onEnter();
  Collection<ITransition> transitions=stateMachine.getTransitions(target);
  if (transitions.size() == 1) {
    transitions.iterator().next().apply(this);
    return;
  }
  if (target instanceof ISelectStratificationState)   adapter.selectStratification((ISelectStratificationState)target,((ISelectStratificationState)target).isAutoSelect());
 else   if (target instanceof ISelectGroupState)   adapter.selectGroup((ISelectGroupState)target);
}","@Override public void on(IState target){
  stateMachine.getCurrent().onLeave();
  stateMachine.move(target);
  target.onEnter();
  Collection<ITransition> transitions=stateMachine.getTransitions(target);
  if (transitions.size() == 1) {
    transitions.iterator().next().apply(this);
    return;
  }
  checkSelect();
}",0.701123595505618
57027,"private void createLine(Composite parent,String label,String value){
  Label l=new Label(parent,SWT.NO_BACKGROUND);
  l.setText(label + ""String_Node_Str"");
  l.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false));
  try {
    final URL url=new URL(value);
    Link v=new Link(parent,SWT.NO_BACKGROUND);
    value=url.toExternalForm();
    if (value.length() > 20)     value=value.substring(0,20) + ""String_Node_Str"";
    v.setText(""String_Node_Str"" + value + ""String_Node_Str"");
    v.setToolTipText(url.toExternalForm());
    v.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false));
    v.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        BrowserUtils.openURL(url.toExternalForm());
      }
    }
);
  }
 catch (  MalformedURLException e) {
    Label v=new Label(parent,SWT.NO_BACKGROUND);
    v.setText(value);
    v.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false));
  }
}","private void createLine(Composite parent,String label,String value){
  if (label == null || label.trim().isEmpty() || value == null || value.trim().isEmpty())   return;
  Label l=new Label(parent,SWT.NO_BACKGROUND);
  l.setText(label + ""String_Node_Str"");
  l.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false));
  try {
    final URL url=new URL(value);
    Link v=new Link(parent,SWT.NO_BACKGROUND);
    value=url.toExternalForm();
    if (value.length() > 20)     value=value.substring(0,20) + ""String_Node_Str"";
    v.setText(""String_Node_Str"" + value + ""String_Node_Str"");
    v.setToolTipText(url.toExternalForm());
    v.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false));
    v.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        BrowserUtils.openURL(url.toExternalForm());
      }
    }
);
  }
 catch (  MalformedURLException e) {
    Label v=new Label(parent,SWT.NO_BACKGROUND);
    v.setText(value);
    v.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false));
  }
}",0.9509803921568628
57028,"private boolean createProjectInfos(){
  ProjectMetaData metaData=GeneralManager.get().getMetaData();
  if (metaData.keys().isEmpty())   return false;
  Group g=new Group(parentComposite,SWT.SHADOW_ETCHED_IN | SWT.H_SCROLL | SWT.V_SCROLL);
  g.setText(""String_Node_Str"");
  g.setLayout(new GridLayout(2,false));
  createLine(g,""String_Node_Str"",metaData.getName());
  createLine(g,""String_Node_Str"",DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,Locale.ENGLISH).format(metaData.getCreationDate()));
  for (  String key : metaData.keys()) {
    createLine(g,key,metaData.get(key));
  }
  return true;
}","private boolean createProjectInfos(){
  ProjectMetaData metaData=GeneralManager.get().getMetaData();
  if (metaData.keys().isEmpty())   return false;
  Group g=new Group(parentComposite,SWT.SHADOW_ETCHED_IN | SWT.H_SCROLL | SWT.V_SCROLL);
  g.setText(""String_Node_Str"");
  g.setLayout(new GridLayout(2,false));
  if (metaData.getName() != null)   createLine(g,""String_Node_Str"",metaData.getName());
  if (metaData.getCreationDate() != null)   createLine(g,""String_Node_Str"",DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,Locale.ENGLISH).format(metaData.getCreationDate()));
  for (  String key : metaData.keys()) {
    createLine(g,key,metaData.get(key));
  }
  return true;
}",0.9420731707317072
57029,"@Override public void display(GLAutoDrawable drawable){
  eventListeners.processEvents();
  if (!visible)   return;
  final int deltaTimeMs=local.getDeltaTimeMs();
  GL2 gl=drawable.getGL().getGL2();
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
  gl.glLoadIdentity();
  gl.glTranslatef(0.375f,0.375f,0);
  final GLGraphics g=new GLGraphics(gl,local,true,deltaTimeMs);
  g.clearError();
  float paddedWidth=getWidth();
  float paddedHeight=getHeight();
  if (dirtyLayout) {
    root.setBounds(0,0,paddedWidth,paddedHeight);
    root.relayout();
    dirtyLayout=false;
  }
  Point mousePos=pickingManager.getCurrentMousePos();
  if (mousePos != null) {
    root.getMouseLayer().setBounds(mousePos.x,mousePos.y,getWidth() - mousePos.x,getHeight() - mousePos.y);
    root.getMouseLayer().relayout();
  }
  pickingManager.doPicking(g.gl,new Runnable(){
    @Override public void run(){
      root.renderPick(g);
    }
  }
);
  g.checkError();
  root.layout(deltaTimeMs);
  root.render(g);
  g.checkError();
}","@Override public void display(GLAutoDrawable drawable){
  eventListeners.processEvents();
  if (!visible)   return;
  final int deltaTimeMs=local.getDeltaTimeMs();
  GL2 gl=drawable.getGL().getGL2();
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
  gl.glBindTexture(GL.GL_TEXTURE_2D,GL.GL_NONE);
  gl.glLoadIdentity();
  gl.glTranslatef(0.375f,0.375f,0);
  final GLGraphics g=new GLGraphics(gl,local,true,deltaTimeMs);
  g.clearError();
  float paddedWidth=getWidth();
  float paddedHeight=getHeight();
  if (dirtyLayout) {
    root.setBounds(0,0,paddedWidth,paddedHeight);
    root.relayout();
    dirtyLayout=false;
  }
  Point mousePos=pickingManager.getCurrentMousePos();
  if (mousePos != null) {
    root.getMouseLayer().setBounds(mousePos.x,mousePos.y,getWidth() - mousePos.x,getHeight() - mousePos.y);
    root.getMouseLayer().relayout();
  }
  pickingManager.doPicking(g.gl,new Runnable(){
    @Override public void run(){
      root.renderPick(g);
    }
  }
);
  g.checkError();
  root.layout(deltaTimeMs);
  root.render(g);
  g.checkError();
}",0.9765662362505978
57030,"public CaleydoTextRenderer(int size){
  super(new Font(""String_Node_Str"",Font.PLAIN,size),true,true,new DefaultRenderDelegate(),true);
  referenceBounds=super.getBounds(REFERENCE_TEXT);
}","public CaleydoTextRenderer(int size){
  super(new Font(""String_Node_Str"",Font.PLAIN,size),true,true,new DefaultRenderDelegate(),false);
  referenceBounds=super.getBounds(REFERENCE_TEXT);
}",0.9813333333333332
57031,"@ListenTo(sendToMe=true) private void onUpdatePreview(UpdatePathwayPreviewEvent event){
  if (wizard != null)   wizard.onUpdate(event);
 else {
    BrickColumn selected=stratomex.getBrickColumnManager().getActiveBrickColumn();
    if (selected == null) {
    }
 else {
      createWizard(selected.getTablePerspective(),false);
      replacePathwayTemplate(selected.getTablePerspective().getRecordPerspective(),event.getPathway());
    }
  }
}","@ListenTo(sendToMe=true) private void onUpdatePreview(UpdatePathwayPreviewEvent event){
  if (wizard != null)   wizard.onUpdate(event);
 else {
    BrickColumn selected=stratomex.getBrickColumnManager().getActiveBrickColumn();
    if (selected == null) {
    }
 else {
      replacePathwayTemplate(selected.getTablePerspective().getRecordPerspective(),event.getPathway());
    }
  }
}",0.9297820823244553
57032,"@ListenTo(sendToMe=true) private void onUpdateNumerical(UpdateNumericalPreviewEvent event){
  if (wizard != null)   wizard.onUpdate(event);
 else {
    BrickColumn selected=stratomex.getBrickColumnManager().getActiveBrickColumn();
    if (selected == null) {
    }
 else {
      createWizard(selected.getTablePerspective(),false);
      replaceClinicalTemplate(selected.getTablePerspective().getRecordPerspective(),event.getTablePerspective());
    }
  }
}","@ListenTo(sendToMe=true) private void onUpdateNumerical(UpdateNumericalPreviewEvent event){
  if (wizard != null)   wizard.onUpdate(event);
 else {
    BrickColumn selected=stratomex.getBrickColumnManager().getActiveBrickColumn();
    if (selected == null) {
    }
 else {
      replaceClinicalTemplate(selected.getTablePerspective().getRecordPerspective(),event.getTablePerspective());
    }
  }
}",0.7611241217798594
57033,"public LabelRenderer(AGLView view,ILabelProvider labelProvider){
  this.view=view;
  this.labelProvider=labelProvider;
  this.isPickable=false;
}","public LabelRenderer(AGLView view,ITextRenderer textRenderer,ILabelProvider labelProvider){
  this.view=view;
  this.textRenderer=textRenderer;
  this.labelProvider=labelProvider;
  this.isPickable=false;
}",0.8262108262108262
57034,"@Override protected void renderContent(GL2 gl){
  if (labelProvider != null)   label=labelProvider.getLabel();
  if (isPickable) {
    pushNames(gl);
    gl.glColor4f(1,1,1,0);
    gl.glBegin(GL2.GL_POLYGON);
    gl.glVertex3f(0,0,0.05f);
    gl.glVertex3f(x,0,0.05f);
    gl.glVertex3f(x,y,0.05f);
    gl.glVertex3f(0,y,0.05f);
    gl.glEnd();
    popNames(gl);
  }
  CaleydoTextRenderer textRenderer=view.getTextRenderer();
  float ySpacing=view.getPixelGLConverter().getGLHeightForPixelHeight(1);
  textRenderer.setColor(0,0,0,1);
  float textWidth=textRenderer.getRequiredTextWidthWithMax(label,y - 2 * ySpacing,x);
  float padding=0;
  if (usePaddingBottom)   padding=PADDING_BOTTOM;
switch (alignment) {
case CENTER:
    textRenderer.renderTextInBounds(gl,label,x / 2.0f - textWidth / 2.0f + ySpacing + padding,2 * ySpacing + padding,0.1f,x,y - 2 * ySpacing);
  break;
case RIGHT:
textRenderer.renderTextInBounds(gl,label,x - textWidth - 4 * ySpacing,ySpacing + padding,0.1f,x,y - 2 * ySpacing + padding);
break;
default :
textRenderer.renderTextInBounds(gl,label,0,ySpacing + padding,0.1f,x,y - 2 * ySpacing + padding);
}
}","@Override protected void renderContent(GL2 gl){
  if (labelProvider != null)   label=labelProvider.getLabel();
  if (isPickable) {
    pushNames(gl);
    gl.glColor4f(1,1,1,0);
    gl.glBegin(GL2.GL_POLYGON);
    gl.glVertex3f(0,0,0.05f);
    gl.glVertex3f(x,0,0.05f);
    gl.glVertex3f(x,y,0.05f);
    gl.glVertex3f(0,y,0.05f);
    gl.glEnd();
    popNames(gl);
  }
  float ySpacing=view.getPixelGLConverter().getGLHeightForPixelHeight(1);
  textRenderer.setColor(0,0,0,1);
  float textWidth=Math.min(textRenderer.getTextWidth(label,y - 2 * ySpacing),x);
  float padding=0;
  if (usePaddingBottom)   padding=PADDING_BOTTOM;
switch (alignment) {
case CENTER:
    textRenderer.renderTextInBounds(gl,label,x / 2.0f - textWidth / 2.0f + ySpacing + padding,2 * ySpacing + padding,0.1f,x,y - 2 * ySpacing);
  break;
case RIGHT:
textRenderer.renderTextInBounds(gl,label,x - textWidth - 4 * ySpacing,ySpacing + padding,0.1f,x,y - 2 * ySpacing + padding);
break;
default :
textRenderer.renderTextInBounds(gl,label,0,ySpacing + padding,0.1f,x,y - 2 * ySpacing + padding);
}
}",0.9617486338797814
57035,"public static LabelRenderer createLabel(ILabelProvider label,AGLView view){
  return new LabelRenderer(view,label);
}","public static LabelRenderer createLabel(ILabelProvider label,AGLView view){
  return new LabelRenderer(view,view.getTextRenderer(),label);
}",0.9105058365758756
57036,"private void upload(){
  GlyphVector gv=getGlyphVector();
  Rectangle2D origBBox=preNormalize(renderDelegate.getBounds(gv,getFontRenderContext()));
  Rectangle2D bbox=normalize(origBBox);
  Point origin=new Point((int)-bbox.getMinX(),(int)-bbox.getMinY());
  Rect rect=new Rect(0,0,(int)bbox.getWidth(),(int)bbox.getHeight(),new TextData(null,origin,origBBox,unicodeID));
  packer.add(rect);
  glyphRectForTextureMapping=rect;
  Graphics2D g=getGraphics2D();
  int strx=rect.x() + origin.x;
  int stry=rect.y() + origin.y;
  g.setComposite(AlphaComposite.Clear);
  g.fillRect(rect.x(),rect.y(),rect.w(),rect.h());
  g.setComposite(AlphaComposite.Src);
  renderDelegate.drawGlyphVector(g,gv,strx,stry);
  if (DRAW_BBOXES) {
    TextData data=(TextData)rect.getUserData();
    g.drawRect(strx - data.origOriginX(),stry - data.origOriginY(),(int)data.origRect().getWidth(),(int)data.origRect().getHeight());
    g.drawRect(strx - data.origin().x,stry - data.origin().y,rect.w(),rect.h());
  }
  getBackingStore().markDirty(rect.x(),rect.y(),rect.w(),rect.h());
  producer.register(this);
}","public void upload(){
  if (glyphRectForTextureMapping != null)   return;
  GlyphVector gv=getGlyphVector();
  Rectangle2D origBBox=preNormalize(renderDelegate.getBounds(gv,getFontRenderContext()));
  Rectangle2D bbox=normalize(origBBox);
  Point origin=new Point((int)-bbox.getMinX(),(int)-bbox.getMinY());
  Rect rect=new Rect(0,0,(int)bbox.getWidth(),(int)bbox.getHeight(),new TextData(null,origin,origBBox,unicodeID));
  packer.add(rect);
  glyphRectForTextureMapping=rect;
  Graphics2D g=getGraphics2D();
  int strx=rect.x() + origin.x;
  int stry=rect.y() + origin.y;
  g.setComposite(AlphaComposite.Clear);
  g.fillRect(rect.x(),rect.y(),rect.w(),rect.h());
  g.setComposite(AlphaComposite.Src);
  renderDelegate.drawGlyphVector(g,gv,strx,stry);
  if (DRAW_BBOXES) {
    TextData data=(TextData)rect.getUserData();
    g.drawRect(strx - data.origOriginX(),stry - data.origOriginY(),(int)data.origRect().getWidth(),(int)data.origRect().getHeight());
    g.drawRect(strx - data.origin().x,stry - data.origin().y,rect.w(),rect.h());
  }
  getBackingStore().markDirty(rect.x(),rect.y(),rect.w(),rect.h());
  producer.register(this);
}",0.9707602339181286
57037,"/** 
 * Draws this glyph and returns the (x) advance for this glyph 
 */
public float draw3D(float inX,float inY,float z,float scaleFactor){
  if (str != null) {
    draw3D_ROBUST(str,inX,inY,z,scaleFactor);
    if (!needAdvance) {
      return 0;
    }
    GlyphVector gv=font.createGlyphVector(getFontRenderContext(),str);
    float totalAdvance=0;
    for (int i=0; i < gv.getNumGlyphs(); i++) {
      totalAdvance+=gv.getGlyphMetrics(i).getAdvance();
    }
    return totalAdvance;
  }
  if (glyphRectForTextureMapping == null) {
    upload();
  }
  try {
    if (mPipelinedQuadRenderer == null) {
      mPipelinedQuadRenderer=new Pipelined_QuadRenderer();
    }
    TextureRenderer renderer=getBackingStore();
    float xScale=1;
    float yScale=1;
    Rect rect=glyphRectForTextureMapping;
    TextData data=(TextData)rect.getUserData();
    data.markUsed();
    Rectangle2D origRect=data.origRect();
    float x=inX - (scaleFactor * data.origOriginX());
    float y=inY - (scaleFactor * ((float)origRect.getHeight() - data.origOriginY()));
    int texturex=rect.x() + (data.origin().x - data.origOriginX());
    int texturey=renderer.getHeight() - rect.y() - (int)origRect.getHeight()- (data.origin().y - data.origOriginY());
    int width=(int)origRect.getWidth();
    int height=(int)origRect.getHeight();
    float tx1=xScale * texturex / renderer.getWidth();
    float ty1=yScale * (1.0f - (texturey / (float)renderer.getHeight()));
    float tx2=xScale * (texturex + width) / renderer.getWidth();
    float ty2=yScale * (1.0f - ((texturey + height) / (float)renderer.getHeight()));
    mPipelinedQuadRenderer.glTexCoord2f(tx1,ty1);
    mPipelinedQuadRenderer.glVertex3f(x,y,z);
    mPipelinedQuadRenderer.glTexCoord2f(tx2,ty1);
    mPipelinedQuadRenderer.glVertex3f(x + (width * scaleFactor),y,z);
    mPipelinedQuadRenderer.glTexCoord2f(tx2,ty2);
    mPipelinedQuadRenderer.glVertex3f(x + (width * scaleFactor),y + (height * scaleFactor),z);
    mPipelinedQuadRenderer.glTexCoord2f(tx1,ty2);
    mPipelinedQuadRenderer.glVertex3f(x,y + (height * scaleFactor),z);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return advance;
}","/** 
 * Draws this glyph and returns the (x) advance for this glyph 
 */
public float draw3D(float inX,float inY,float z,float scaleFactor){
  if (str != null) {
    draw3D_ROBUST(str,inX,inY,z,scaleFactor);
    if (!needAdvance) {
      return 0;
    }
    GlyphVector gv=font.createGlyphVector(getFontRenderContext(),str);
    float totalAdvance=0;
    for (int i=0; i < gv.getNumGlyphs(); i++) {
      totalAdvance+=gv.getGlyphMetrics(i).getAdvance();
    }
    return totalAdvance;
  }
  upload();
  try {
    if (mPipelinedQuadRenderer == null) {
      mPipelinedQuadRenderer=new Pipelined_QuadRenderer();
    }
    TextureRenderer renderer=getBackingStore();
    float xScale=1;
    float yScale=1;
    Rect rect=glyphRectForTextureMapping;
    TextData data=(TextData)rect.getUserData();
    data.markUsed();
    Rectangle2D origRect=data.origRect();
    float x=inX - (scaleFactor * data.origOriginX());
    float y=inY - (scaleFactor * ((float)origRect.getHeight() - data.origOriginY()));
    int texturex=rect.x() + (data.origin().x - data.origOriginX());
    int texturey=renderer.getHeight() - rect.y() - (int)origRect.getHeight()- (data.origin().y - data.origOriginY());
    int width=(int)origRect.getWidth();
    int height=(int)origRect.getHeight();
    float tx1=xScale * texturex / renderer.getWidth();
    float ty1=yScale * (1.0f - (texturey / (float)renderer.getHeight()));
    float tx2=xScale * (texturex + width) / renderer.getWidth();
    float ty2=yScale * (1.0f - ((texturey + height) / (float)renderer.getHeight()));
    mPipelinedQuadRenderer.glTexCoord2f(tx1,ty1);
    mPipelinedQuadRenderer.glVertex3f(x,y,z);
    mPipelinedQuadRenderer.glTexCoord2f(tx2,ty1);
    mPipelinedQuadRenderer.glVertex3f(x + (width * scaleFactor),y,z);
    mPipelinedQuadRenderer.glTexCoord2f(tx2,ty2);
    mPipelinedQuadRenderer.glVertex3f(x + (width * scaleFactor),y + (height * scaleFactor),z);
    mPipelinedQuadRenderer.glTexCoord2f(tx1,ty2);
    mPipelinedQuadRenderer.glVertex3f(x,y + (height * scaleFactor),z);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return advance;
}",0.9840300610615312
57038,"/** 
 * emzic: here the call to glBindBuffer crashes on certain graphicscard/driver combinations this is why the ugly try-catch block has been added, which falls back to the old textrenderer
 * @param ortho
 * @throws GLException
 */
private void endRendering(boolean ortho) throws GLException {
  flushGlyphPipeline();
  inBeginEndPair=false;
  GL2 gl=GLContext.getCurrentGL().getGL2();
  gl.glPopClientAttrib();
  if (getUseVertexArrays() && is15Available(gl)) {
    try {
      gl.glBindBuffer(GL2.GL_ARRAY_BUFFER,0);
    }
 catch (    Exception e) {
      isExtensionAvailable_GL_VERSION_1_5=false;
    }
  }
  if (ortho) {
    getBackingStore().endOrthoRendering();
  }
 else {
    getBackingStore().end3DRendering();
  }
  if (++numRenderCycles >= 200) {
    numRenderCycles=0;
    if (DEBUG) {
      System.err.println(""String_Node_Str"");
    }
    getBackingStore().markDirty(0,0,getBackingStore().getWidth(),getBackingStore().getHeight());
  }
}","/** 
 * emzic: here the call to glBindBuffer crashes on certain graphicscard/driver combinations this is why the ugly try-catch block has been added, which falls back to the old textrenderer
 * @param ortho
 * @throws GLException
 */
private void endRendering(boolean ortho) throws GLException {
  flushGlyphPipeline();
  inBeginEndPair=false;
  GL2 gl=GLContext.getCurrentGL().getGL2();
  gl.glPopClientAttrib();
  if (getUseVertexArrays() && is15Available(gl)) {
    try {
      gl.glBindBuffer(GL2.GL_ARRAY_BUFFER,0);
    }
 catch (    Exception e) {
      isExtensionAvailable_GL_VERSION_1_5=false;
    }
  }
  if (ortho) {
    getBackingStore().endOrthoRendering();
  }
 else {
    getBackingStore().end3DRendering();
  }
}",0.8656361474435196
57039,"private void beginRendering(boolean ortho,int width,int height,boolean disableDepthTestForOrtho){
  GL2 gl=GLContext.getCurrentGL().getGL2();
  if (DEBUG && !debugged) {
    debug(gl);
  }
  inBeginEndPair=true;
  isOrthoMode=ortho;
  beginRenderingWidth=width;
  beginRenderingHeight=height;
  beginRenderingDepthTestDisabled=disableDepthTestForOrtho;
  if (ortho) {
    getBackingStore().beginOrthoRendering(width,height,disableDepthTestForOrtho);
  }
 else {
    getBackingStore().begin3DRendering();
  }
  gl.glPushClientAttrib((int)GL2.GL_ALL_CLIENT_ATTRIB_BITS);
  if (!haveMaxSize) {
    int[] sz=new int[1];
    gl.glGetIntegerv(GL2.GL_MAX_TEXTURE_SIZE,sz,0);
    packer.setMaxSize(sz[0],sz[0]);
    haveMaxSize=true;
  }
  if (needToResetColor && haveCachedColor) {
    if (cachedColor == null) {
      getBackingStore().setColor(cachedR,cachedG,cachedB,cachedA);
    }
 else {
      getBackingStore().setColor(cachedColor);
    }
    needToResetColor=false;
  }
  if (mipmap && !getBackingStore().isUsingAutoMipmapGeneration()) {
    if (DEBUG) {
      System.err.println(""String_Node_Str"");
    }
    mipmap=false;
  }
}","private void beginRendering(boolean ortho,int width,int height,boolean disableDepthTestForOrtho){
  GL2 gl=GLContext.getCurrentGL().getGL2();
  if (DEBUG && !debugged) {
    debug(gl);
  }
  inBeginEndPair=true;
  isOrthoMode=ortho;
  beginRenderingWidth=width;
  beginRenderingHeight=height;
  beginRenderingDepthTestDisabled=disableDepthTestForOrtho;
  if (ortho) {
    getBackingStore().beginOrthoRendering(width,height,disableDepthTestForOrtho);
  }
 else {
    getBackingStore().begin3DRendering();
  }
  gl.glPushClientAttrib((int)GL2.GL_ALL_CLIENT_ATTRIB_BITS);
  if (!haveMaxSize) {
    int[] sz=new int[1];
    gl.glGetIntegerv(GL2.GL_MAX_TEXTURE_SIZE,sz,0);
    packer.setMaxSize(sz[0],sz[0]);
    haveMaxSize=true;
    uploadBunchOfCharacter('!','~');
  }
  if (needToResetColor && haveCachedColor) {
    if (cachedColor == null) {
      getBackingStore().setColor(cachedR,cachedG,cachedB,cachedA);
    }
 else {
      getBackingStore().setColor(cachedColor);
    }
    needToResetColor=false;
  }
  if (mipmap && !getBackingStore().isUsingAutoMipmapGeneration()) {
    if (DEBUG) {
      System.err.println(""String_Node_Str"");
    }
    mipmap=false;
  }
}",0.983906046107003
57040,"public Point2D getAbsolutPositionOfRelativeTablePerspectiveRendererCoordinates(Point2D coordinates){
  Point2D position=graphLayout.getNodePosition(this);
  float x=pixelGLConverter.getGLWidthForPixelWidth((int)position.getX());
  float y=pixelGLConverter.getGLHeightForPixelHeight((int)position.getY());
  float width=pixelGLConverter.getGLWidthForPixelWidth(getWidthPixels());
  float height=pixelGLConverter.getGLHeightForPixelHeight(getHeightPixels());
  float spacingX=pixelGLConverter.getGLWidthForPixelWidth(SPACING_PIXELS);
  float spacingY=pixelGLConverter.getGLHeightForPixelHeight(isUpsideDown ? (3 * SPACING_PIXELS + CAPTION_HEIGHT_PIXELS + LINE_SEPARATOR_HEIGHT_PIXELS) : (SPACING_PIXELS));
  return new Point2D.Float((float)coordinates.getX() + x + spacingX - width / 2.0f,(float)coordinates.getY() + y + spacingY - height / 2.0f);
}","@Override public Point2D getAbsolutPositionOfRelativeTablePerspectiveRendererCoordinates(Point2D coordinates){
  Point2D position=graphLayout.getNodePosition(this);
  float x=pixelGLConverter.getGLWidthForPixelWidth((int)position.getX());
  float y=pixelGLConverter.getGLHeightForPixelHeight((int)position.getY());
  float width=pixelGLConverter.getGLWidthForPixelWidth(getWidthPixels());
  float height=pixelGLConverter.getGLHeightForPixelHeight(getHeightPixels());
  float spacingX=pixelGLConverter.getGLWidthForPixelWidth(SPACING_PIXELS);
  float spacingY=pixelGLConverter.getGLHeightForPixelHeight(isUpsideDown ? (3 * SPACING_PIXELS + CAPTION_HEIGHT_PIXELS + LINE_SEPARATOR_HEIGHT_PIXELS) : (SPACING_PIXELS));
  return new Point2D.Float((float)coordinates.getX() + x + spacingX - width / 2.0f,(float)coordinates.getY() + y + spacingY - height / 2.0f);
}",0.994131455399061
57041,"public float getSpacingY(IDVINode node){
  IDVINode topNode=null;
  IDVINode bottomNode=null;
  if (getPosition().getY() < node.getPosition().getY()) {
    topNode=this;
    bottomNode=node;
  }
 else {
    topNode=node;
    bottomNode=this;
  }
  return (float)((topNode.getPosition().getY() - topNode.getHeight() / 2.0f) - (bottomNode.getPosition().getY() + bottomNode.getHeight() / 2.0f));
}","@Override public float getSpacingY(IDVINode node){
  IDVINode topNode=null;
  IDVINode bottomNode=null;
  if (getPosition().getY() < node.getPosition().getY()) {
    topNode=this;
    bottomNode=node;
  }
 else {
    topNode=node;
    bottomNode=this;
  }
  return (float)((topNode.getPosition().getY() - topNode.getHeight() / 2.0f) - (bottomNode.getPosition().getY() + bottomNode.getHeight() / 2.0f));
}",0.987468671679198
57042,"public float getSpacingX(IDVINode node){
  IDVINode leftNode=null;
  IDVINode rightNode=null;
  if (getPosition().getX() < node.getPosition().getX()) {
    leftNode=this;
    rightNode=node;
  }
 else {
    leftNode=node;
    rightNode=this;
  }
  return (float)((rightNode.getPosition().getX() - rightNode.getWidth() / 2.0f) - (leftNode.getPosition().getX() + leftNode.getWidth() / 2.0f));
}","@Override public float getSpacingX(IDVINode node){
  IDVINode leftNode=null;
  IDVINode rightNode=null;
  if (getPosition().getX() < node.getPosition().getX()) {
    leftNode=this;
    rightNode=node;
  }
 else {
    leftNode=node;
    rightNode=this;
  }
  return (float)((rightNode.getPosition().getX() - rightNode.getWidth() / 2.0f) - (leftNode.getPosition().getX() + leftNode.getWidth() / 2.0f));
}",0.9874055415617128
57043,"public void recalculateNodeSize(){
  heightPixels=4 * SPACING_PIXELS + CAPTION_HEIGHT_PIXELS + LINE_SEPARATOR_HEIGHT_PIXELS + Math.max(MIN_DATA_CONTAINER_HEIGHT_PIXELS,((getTablePerspectiveRenderer() == null) ? 0 : getTablePerspectiveRenderer().getMinHeightPixels()));
  widthPixels=2 * SPACING_PIXELS + Math.max(getMinTitleBarWidthPixels(),((getTablePerspectiveRenderer() == null) ? 0 : getTablePerspectiveRenderer().getMinWidthPixels()));
}","@Override public void recalculateNodeSize(){
  heightPixels=4 * SPACING_PIXELS + CAPTION_HEIGHT_PIXELS + LINE_SEPARATOR_HEIGHT_PIXELS + Math.max(MIN_DATA_CONTAINER_HEIGHT_PIXELS,((getTablePerspectiveRenderer() == null) ? 0 : getTablePerspectiveRenderer().getMinHeightPixels()));
  widthPixels=2 * SPACING_PIXELS + Math.max(getMinTitleBarWidthPixels(),((getTablePerspectiveRenderer() == null) ? 0 : getTablePerspectiveRenderer().getMinWidthPixels()));
}",0.988814317673378
57044,"protected ElementLayout createDefaultCaptionLayout(int pickingID){
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  captionLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  captionLayout.setRatioSizeX(1);
  captionLayout.setRenderer(new LabelRenderer(view,this,createNodePickingTypeList()));
  return captionLayout;
}","protected ElementLayout createDefaultCaptionLayout(int pickingID){
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  captionLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  captionLayout.setRatioSizeX(1);
  captionLayout.setRenderer(new LabelRenderer(view,view.getTextRenderer(),this,createNodePickingTypeList()));
  return captionLayout;
}",0.9668109668109668
57045,"protected void setupLayout(){
  Column baseColumn=new Column(""String_Node_Str"");
  colorRenderer=new ColorRenderer(new float[]{1,1,1,1});
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.setColor(new float[]{0.9f,0.9f,0.9f,1});
  colorRenderer.setDrawBorder(true);
  colorRenderer.setView(view);
  colorRenderer.addPickingID(EPickingType.BRANCH_SUMMARY_NODE.name(),hashCode());
  baseColumn.addBackgroundRenderer(colorRenderer);
  baseColumn.setBottomUp(false);
  Row baseRow=new Row(""String_Node_Str"");
  int textHeight=pathwayPathRenderer.getSizeConfig().getBranchSummaryNodeTextHeight();
  baseRow.setPixelSizeY(textHeight);
  ElementLayout collapseButtonLayout=new ElementLayout(""String_Node_Str"");
  collapseButton=new Button(EPickingType.BRANCH_SUMMARY_NODE_COLLAPSE_BUTTON.name(),hashCode(),EIconTextures.GROUPER_COLLAPSE_PLUS);
  ButtonRenderer collapseButtonRenderer=new ButtonRenderer.Builder(view,collapseButton).build();
  collapseButtonLayout.setRenderer(collapseButtonRenderer);
  collapseButtonLayout.setPixelSizeX(textHeight - SPACING_PIXELS);
  collapseButtonLayout.setPixelSizeY(textHeight - SPACING_PIXELS);
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  labelRenderer=new BranchNodeLabelRenderer(this,view);
  captionLayout.setRenderer(labelRenderer);
  captionLayout.setPixelSizeY(textHeight);
  ElementLayout numNodesLabelLayout=new ElementLayout(""String_Node_Str"");
  LabelRenderer numNodesLabelRenderer=new LabelRenderer(view,this);
  numNodesLabelLayout.setRenderer(numNodesLabelRenderer);
  numNodesLabelLayout.setPixelSizeY(textHeight);
  numNodesLabelLayout.setPixelSizeX(textHeight);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(SPACING_PIXELS);
  baseRow.append(horizontalSpacing);
  baseRow.append(collapseButtonLayout);
  baseRow.append(horizontalSpacing);
  baseRow.append(captionLayout);
  baseRow.append(horizontalSpacing);
  baseRow.append(numNodesLabelLayout);
  baseRow.append(horizontalSpacing);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(SPACING_PIXELS);
  baseColumn.append(verticalSpacing);
  baseColumn.append(baseRow);
  baseColumn.append(verticalSpacing);
  layoutManager.setBaseElementLayout(baseColumn);
}","protected void setupLayout(){
  Column baseColumn=new Column(""String_Node_Str"");
  colorRenderer=new ColorRenderer(new float[]{1,1,1,1});
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.setColor(new float[]{0.9f,0.9f,0.9f,1});
  colorRenderer.setDrawBorder(true);
  colorRenderer.setView(view);
  colorRenderer.addPickingID(EPickingType.BRANCH_SUMMARY_NODE.name(),hashCode());
  baseColumn.addBackgroundRenderer(colorRenderer);
  baseColumn.setBottomUp(false);
  Row baseRow=new Row(""String_Node_Str"");
  int textHeight=pathwayPathRenderer.getSizeConfig().getBranchSummaryNodeTextHeight();
  baseRow.setPixelSizeY(textHeight);
  ElementLayout collapseButtonLayout=new ElementLayout(""String_Node_Str"");
  collapseButton=new Button(EPickingType.BRANCH_SUMMARY_NODE_COLLAPSE_BUTTON.name(),hashCode(),EIconTextures.GROUPER_COLLAPSE_PLUS);
  ButtonRenderer collapseButtonRenderer=new ButtonRenderer.Builder(view,collapseButton).build();
  collapseButtonLayout.setRenderer(collapseButtonRenderer);
  collapseButtonLayout.setPixelSizeX(textHeight - SPACING_PIXELS);
  collapseButtonLayout.setPixelSizeY(textHeight - SPACING_PIXELS);
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  labelRenderer=new BranchNodeLabelRenderer(this,view);
  captionLayout.setRenderer(labelRenderer);
  captionLayout.setPixelSizeY(textHeight);
  ElementLayout numNodesLabelLayout=new ElementLayout(""String_Node_Str"");
  LabelRenderer numNodesLabelRenderer=new LabelRenderer(view,view.getTextRenderer(),this);
  numNodesLabelLayout.setRenderer(numNodesLabelRenderer);
  numNodesLabelLayout.setPixelSizeY(textHeight);
  numNodesLabelLayout.setPixelSizeX(textHeight);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(SPACING_PIXELS);
  baseRow.append(horizontalSpacing);
  baseRow.append(collapseButtonLayout);
  baseRow.append(horizontalSpacing);
  baseRow.append(captionLayout);
  baseRow.append(horizontalSpacing);
  baseRow.append(numNodesLabelLayout);
  baseRow.append(horizontalSpacing);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(SPACING_PIXELS);
  baseColumn.append(verticalSpacing);
  baseColumn.append(baseRow);
  baseColumn.append(verticalSpacing);
  layoutManager.setBaseElementLayout(baseColumn);
}",0.9949858295182036
57046,"@Override public void apply(ALinearizableNode node){
  this.node=node;
  destroy();
  init();
  attributeRenderers.clear();
  Column baseColumn=new Column(""String_Node_Str"");
  Row baseRow=new Row(""String_Node_Str"");
  ColorRenderer colorRenderer=new ColorRenderer(new float[]{1,1,1,1});
  colorRenderer.setView(view);
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.setDrawBorder(true);
  colorRenderer.addPickingID(EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
  baseColumn.addBackgroundRenderer(colorRenderer);
  ElementLayout labelLayout=new ElementLayout(""String_Node_Str"");
  LabelRenderer labelRenderer=new LabelRenderer(view,node);
  labelRenderer.setAlignment(LabelRenderer.LabelAlignment.CENTER);
  labelLayout.setRenderer(labelRenderer);
  labelLayout.setPixelSizeY(16);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(2);
  baseRow.append(labelLayout);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(2);
  baseColumn.append(verticalSpacing);
  baseColumn.append(baseRow);
  baseColumn.append(verticalSpacing);
  layoutManager.setBaseElementLayout(baseColumn);
  for (  ALinearizableNode childNode : ((ComplexNode)node).getNodes()) {
    pathwayPathRenderer.setPreviewMode(childNode);
  }
}","@Override public void apply(ALinearizableNode node){
  this.node=node;
  destroy();
  init();
  attributeRenderers.clear();
  Column baseColumn=new Column(""String_Node_Str"");
  Row baseRow=new Row(""String_Node_Str"");
  ColorRenderer colorRenderer=new ColorRenderer(new float[]{1,1,1,1});
  colorRenderer.setView(view);
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.setDrawBorder(true);
  colorRenderer.addPickingID(EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
  baseColumn.addBackgroundRenderer(colorRenderer);
  ElementLayout labelLayout=new ElementLayout(""String_Node_Str"");
  LabelRenderer labelRenderer=new LabelRenderer(view,view.getTextRenderer(),node);
  labelRenderer.setAlignment(LabelRenderer.LabelAlignment.CENTER);
  labelLayout.setRenderer(labelRenderer);
  labelLayout.setPixelSizeY(16);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(2);
  baseRow.append(labelLayout);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(2);
  baseColumn.append(verticalSpacing);
  baseColumn.append(baseRow);
  baseColumn.append(verticalSpacing);
  layoutManager.setBaseElementLayout(baseColumn);
  for (  ALinearizableNode childNode : ((ComplexNode)node).getNodes()) {
    pathwayPathRenderer.setPreviewMode(childNode);
  }
}",0.9913109180204004
57047,"@Override public void init(GL2 gl){
  textRenderer=new CaleydoTextRenderer(24);
  baseDisplayListIndex=gl.glGenLists(1);
  layoutManager=new LayoutManager(viewFrustum,pixelGLConverter);
  layoutManager.setUseDisplayLists(true);
  setBrickLayoutTemplate(brickLayoutConfiguration);
  int rendererID=multiFormRenderer.getActiveRendererID();
  if (rendererID == -1) {
    multiFormRenderer.setActive(multiFormRenderer.getDefaultRendererID());
  }
  updateBrickSizeAccordingToRenderer(multiFormRenderer.getActiveRendererID());
  brickColumn.updateLayout();
  isInitialized=true;
}","@Override public void init(GL2 gl){
  baseDisplayListIndex=gl.glGenLists(1);
  layoutManager=new LayoutManager(viewFrustum,pixelGLConverter);
  layoutManager.setUseDisplayLists(true);
  setBrickLayoutTemplate(brickLayoutConfiguration);
  int rendererID=multiFormRenderer.getActiveRendererID();
  if (rendererID == -1) {
    multiFormRenderer.setActive(multiFormRenderer.getDefaultRendererID());
  }
  updateBrickSizeAccordingToRenderer(multiFormRenderer.getActiveRendererID());
  brickColumn.updateLayout();
  isInitialized=true;
}",0.9602169981916816
57048,"public GLBrick(IGLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  contextMenuFactories=createContextMenuFactories();
}","public GLBrick(IGLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  contextMenuFactories=createContextMenuFactories();
  textRenderer=new CaleydoTextRenderer(24);
}",0.9039301310043668
57049,"/** 
 * Create the elements which should be shown in the heading of cluster bricks.
 * @param layoutTemplate
 * @return Returns null if no header bar should be shown, else the elements for the layout
 */
protected ArrayList<ElementLayout> createHeaderBarElements(DefaultBrickLayoutTemplate layoutTemplate){
  ArrayList<ElementLayout> headerBarElements=new ArrayList<ElementLayout>();
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  captionLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  List<Pair<String,Integer>> pickingIDs=new ArrayList<>();
  pickingIDs.add(new Pair<String,Integer>(EPickingType.BRICK.name(),layoutTemplate.getBrick().getID()));
  pickingIDs.add(new Pair<String,Integer>(EPickingType.BRICK_TITLE.name(),layoutTemplate.getBrick().getID()));
  LabelRenderer captionRenderer=new LabelRenderer(layoutTemplate.getDimensionGroup().getStratomexView(),layoutTemplate.getBrick(),pickingIDs);
  captionLayout.setRenderer(captionRenderer);
  headerBarElements.add(captionLayout);
  return headerBarElements;
}","/** 
 * Create the elements which should be shown in the heading of cluster bricks.
 * @param layoutTemplate
 * @return Returns null if no header bar should be shown, else the elements for the layout
 */
protected ArrayList<ElementLayout> createHeaderBarElements(DefaultBrickLayoutTemplate layoutTemplate){
  ArrayList<ElementLayout> headerBarElements=new ArrayList<ElementLayout>();
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  captionLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  List<Pair<String,Integer>> pickingIDs=new ArrayList<>();
  pickingIDs.add(new Pair<String,Integer>(EPickingType.BRICK.name(),layoutTemplate.getBrick().getID()));
  pickingIDs.add(new Pair<String,Integer>(EPickingType.BRICK_TITLE.name(),layoutTemplate.getBrick().getID()));
  ITextRenderer textRenderer=layoutTemplate.getBrick().getTextRenderer();
  LabelRenderer captionRenderer=new LabelRenderer(layoutTemplate.getDimensionGroup().getStratomexView(),textRenderer,layoutTemplate.getBrick(),pickingIDs);
  captionLayout.setRenderer(captionRenderer);
  headerBarElements.add(captionLayout);
  return headerBarElements;
}",0.9598152424942265
57050,"private ElementLayout createCaptionLayout(ABrickLayoutConfiguration layoutTemplate,AGLView labelProvider,List<Pair<String,Integer>> pickingIDs,AGLView view){
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  captionLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  captionLayout.setFrameColor(0,0,1,1);
  LabelRenderer captionRenderer=new LabelRenderer(view,layoutTemplate.getBrick(),pickingIDs);
  captionLayout.setRenderer(captionRenderer);
  return captionLayout;
}","private ElementLayout createCaptionLayout(ABrickLayoutConfiguration layoutTemplate,AGLView labelProvider,List<Pair<String,Integer>> pickingIDs,AGLView view){
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  captionLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  captionLayout.setFrameColor(0,0,1,1);
  LabelRenderer captionRenderer=new LabelRenderer(view,layoutTemplate.getBrick().getTextRenderer(),layoutTemplate.getBrick(),pickingIDs);
  captionLayout.setRenderer(captionRenderer);
  return captionLayout;
}",0.9566074950690336
57051,"private ElementLayout createCaptionLayout(ABrickLayoutConfiguration layoutTemplate,AGLView labelProvider,List<Pair<String,Integer>> pickingIDs,AGLView view){
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  captionLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  captionLayout.setFrameColor(0,0,1,1);
  LabelRenderer captionRenderer=new LabelRenderer(view,labelProvider,pickingIDs);
  captionLayout.setRenderer(captionRenderer);
  return captionLayout;
}","private ElementLayout createCaptionLayout(ABrickLayoutConfiguration layoutTemplate,AGLView labelProvider,List<Pair<String,Integer>> pickingIDs,AGLView view){
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  captionLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  captionLayout.setFrameColor(0,0,1,1);
  ITextRenderer textRenderer=layoutTemplate.getBrick().getTextRenderer();
  LabelRenderer captionRenderer=new LabelRenderer(view,textRenderer,labelProvider,pickingIDs);
  captionLayout.setRenderer(captionRenderer);
  return captionLayout;
}",0.9157792836398838
57052,"public DataTranspositionWidget(Composite parent,DataImportWizard wizard){
  this.parentComposite=parent;
  this.wizard=wizard;
  dataTranspositionGroup=new Group(parent,SWT.SHADOW_ETCHED_IN);
  dataTranspositionGroup.setText(""String_Node_Str"");
  dataTranspositionGroup.setLayout(new GridLayout(2,false));
  dataTranspositionGroup.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));
  Label transpositionExplanationLabel=new Label(dataTranspositionGroup,SWT.WRAP);
  transpositionExplanationLabel.setText(""String_Node_Str"");
  GridData gridData=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  gridData.widthHint=600;
  transpositionExplanationLabel.setLayoutData(gridData);
  swapRowsWithColumnsButton=new Button(dataTranspositionGroup,SWT.CHECK);
  swapRowsWithColumnsButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  swapRowsWithColumnsButton.setText(""String_Node_Str"");
  swapRowsWithColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      update();
    }
  }
);
}","public DataTranspositionWidget(Composite parent,DataImportWizard wizard,boolean transposeByDefault){
  this.parentComposite=parent;
  this.wizard=wizard;
  dataTranspositionGroup=new Group(parent,SWT.SHADOW_ETCHED_IN);
  dataTranspositionGroup.setText(""String_Node_Str"");
  dataTranspositionGroup.setLayout(new GridLayout(2,false));
  dataTranspositionGroup.setLayoutData(new GridData(SWT.FILL,SWT.TOP,true,false));
  Label transpositionExplanationLabel=new Label(dataTranspositionGroup,SWT.WRAP);
  transpositionExplanationLabel.setText(""String_Node_Str"");
  GridData gridData=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  gridData.widthHint=600;
  transpositionExplanationLabel.setLayoutData(gridData);
  swapRowsWithColumnsButton=new Button(dataTranspositionGroup,SWT.CHECK);
  swapRowsWithColumnsButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  swapRowsWithColumnsButton.setText(""String_Node_Str"");
  swapRowsWithColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      update();
    }
  }
);
  swapRowsWithColumnsButton.setSelection(transposeByDefault);
}",0.96
57053,"public void update(){
  int totalNumberOfRows=wizard.getTotalNumberOfRows();
  int numColumns=swapRowsWithColumnsButton.getSelection() ? totalNumberOfRows : (wizard.getSelectedColumns().size() + 1);
  if (warningIconLabel1 != null && !warningIconLabel1.isDisposed()) {
    warningIconLabel1.dispose();
    warningDescriptionLabel1.dispose();
  }
  if (warningIconLabel2 != null && !warningIconLabel2.isDisposed()) {
    warningIconLabel2.dispose();
    warningDescriptionLabel2.dispose();
  }
  parentComposite.layout(true);
  if (numColumns > 50) {
    String warningText1=""String_Node_Str"" + numColumns + ""String_Node_Str"";
    if (warningIconLabel1 == null || warningIconLabel1.isDisposed()) {
      warningIconLabel1=createWarningIconLabel(dataTranspositionGroup);
      warningDescriptionLabel1=createWarningDescriptionLabel(dataTranspositionGroup,warningText1);
    }
  }
  if (totalNumberOfRows > 50 && numColumns > 50) {
    if (warningIconLabel2 == null || warningIconLabel2.isDisposed()) {
      warningIconLabel2=createWarningIconLabel(dataTranspositionGroup);
      warningDescriptionLabel2=createWarningDescriptionLabel(dataTranspositionGroup,""String_Node_Str"");
    }
  }
  parentComposite.layout(true);
}","public void update(){
  int numRows=swapRowsWithColumnsButton.getSelection() ? wizard.getSelectedColumns().size() + 1 : wizard.getFilteredDataMatrix().size() + 1;
  int numColumns=swapRowsWithColumnsButton.getSelection() ? wizard.getFilteredDataMatrix().size() + 1 : wizard.getSelectedColumns().size() + 1;
  if (warningIconLabel1 != null && !warningIconLabel1.isDisposed()) {
    warningIconLabel1.dispose();
    warningDescriptionLabel1.dispose();
  }
  if (warningIconLabel2 != null && !warningIconLabel2.isDisposed()) {
    warningIconLabel2.dispose();
    warningDescriptionLabel2.dispose();
  }
  parentComposite.layout(true);
  if (numColumns > 50) {
    String warningText1=""String_Node_Str"" + numColumns + ""String_Node_Str"";
    if (warningIconLabel1 == null || warningIconLabel1.isDisposed()) {
      warningIconLabel1=createWarningIconLabel(dataTranspositionGroup);
      warningDescriptionLabel1=createWarningDescriptionLabel(dataTranspositionGroup,warningText1);
    }
  }
  if (numRows > 50 && numColumns > 50) {
    if (warningIconLabel2 == null || warningIconLabel2.isDisposed()) {
      warningIconLabel2=createWarningIconLabel(dataTranspositionGroup);
      warningDescriptionLabel2=createWarningDescriptionLabel(dataTranspositionGroup,""String_Node_Str"");
    }
  }
  parentComposite.layout(true);
}",0.8911671924290221
57054,"@Override public void createControl(Composite parent){
  Composite parentComposite=new Composite(parent,SWT.NONE);
  parentComposite.setLayout(new GridLayout(1,true));
  Group categoryTypeGroup=new Group(parentComposite,SWT.SHADOW_ETCHED_IN);
  categoryTypeGroup.setText(""String_Node_Str"");
  categoryTypeGroup.setLayout(new GridLayout(1,true));
  ordinalButton=new Button(categoryTypeGroup,SWT.RADIO);
  ordinalButton.setText(""String_Node_Str"");
  ordinalButton.setSelection(true);
  nominalButton=new Button(categoryTypeGroup,SWT.RADIO);
  nominalButton.setText(""String_Node_Str"");
  Group categoriesGroup=new Group(parentComposite,SWT.SHADOW_ETCHED_IN);
  categoriesGroup.setText(""String_Node_Str"");
  categoriesGroup.setLayout(new GridLayout(1,true));
  categoriesGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  categoryTable=new CategoryTable(categoriesGroup);
  dataTranspositionWidget=new DataTranspositionWidget(parentComposite,(DataImportWizard)getWizard());
  setControl(parentComposite);
}","@Override public void createControl(Composite parent){
  Composite parentComposite=new Composite(parent,SWT.NONE);
  parentComposite.setLayout(new GridLayout(1,true));
  Group categoryTypeGroup=new Group(parentComposite,SWT.SHADOW_ETCHED_IN);
  categoryTypeGroup.setText(""String_Node_Str"");
  categoryTypeGroup.setLayout(new GridLayout(1,true));
  ordinalButton=new Button(categoryTypeGroup,SWT.RADIO);
  ordinalButton.setText(""String_Node_Str"");
  ordinalButton.setSelection(true);
  nominalButton=new Button(categoryTypeGroup,SWT.RADIO);
  nominalButton.setText(""String_Node_Str"");
  Group categoriesGroup=new Group(parentComposite,SWT.SHADOW_ETCHED_IN);
  categoriesGroup.setText(""String_Node_Str"");
  categoriesGroup.setLayout(new GridLayout(1,true));
  categoriesGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  categoryTable=new CategoryTable(categoriesGroup);
  dataTranspositionWidget=new DataTranspositionWidget(parentComposite,(DataImportWizard)getWizard(),dataSetDescription.isTransposeMatrix());
  setControl(parentComposite);
}",0.9812048192771085
57055,"public void createDataPreviewTableFromFile(){
  parser.parse(dataSetDescription.getDataSourcePath(),dataSetDescription.getDelimiter(),true,MAX_PREVIEW_TABLE_ROWS);
  dataMatrix=parser.getDataMatrix();
  totalNumberOfColumns=parser.getTotalNumberOfColumns();
  totalNumberOfRows=parser.getTotalNumberOfRows();
  DataImportWizard wizard=(DataImportWizard)page.getWizard();
  wizard.setTotalNumberOfColumns(totalNumberOfColumns);
  wizard.setTotalNumberOfRows(totalNumberOfRows);
  page.previewTable.createTableFromMatrix(dataMatrix,totalNumberOfColumns);
  updateWidgetsAccordingToTableChanges();
  determineIDTypes();
  guessNumberOfHeaderRows();
  page.previewTable.updateTableColors(dataSetDescription.getNumberOfHeaderLines(),dataSetDescription.getRowOfColumnIDs(),dataSetDescription.getColumnOfRowIds());
  page.parentComposite.pack();
}","public void createDataPreviewTableFromFile(){
  parser.parse(dataSetDescription.getDataSourcePath(),dataSetDescription.getDelimiter(),true,MAX_PREVIEW_TABLE_ROWS);
  dataMatrix=parser.getDataMatrix();
  totalNumberOfColumns=parser.getTotalNumberOfColumns();
  totalNumberOfRows=parser.getTotalNumberOfRows();
  page.previewTable.createTableFromMatrix(dataMatrix,totalNumberOfColumns);
  updateWidgetsAccordingToTableChanges();
  determineIDTypes();
  guessNumberOfHeaderRows();
  page.previewTable.updateTableColors(dataSetDescription.getNumberOfHeaderLines(),dataSetDescription.getRowOfColumnIDs(),dataSetDescription.getColumnOfRowIds());
  page.parentComposite.pack();
}",0.8888888888888888
57056,"@Override public void createControl(Composite parent){
  parentComposite=new Composite(parent,SWT.NONE);
  parentComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  parentComposite.setLayout(new GridLayout(1,true));
  createScalingGroup(parentComposite);
  createClippingGroup(parentComposite);
  createTranspositionGroup(parentComposite);
  createDataCenterGroup(parentComposite);
  setControl(parentComposite);
}","@Override public void createControl(Composite parent){
  parentComposite=new Composite(parent,SWT.NONE);
  parentComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  parentComposite.setLayout(new GridLayout(1,true));
  createScalingGroup(parentComposite);
  createClippingGroup(parentComposite);
  createDataCenterGroup(parentComposite);
  dataTranspositionWidget=new DataTranspositionWidget(parentComposite,(DataImportWizard)getWizard(),dataSetDescription.isTransposeMatrix());
  setControl(parentComposite);
}",0.7770833333333333
57057,"/** 
 * Reinitializes all widgets according to the   {@link #dataSetDescription}.
 */
public void pageActivated(){
  if (!dataSourcePath.equals(dataSetDescription.getDataSourcePath())) {
    guiCreated();
    DataImportWizard wizard=(DataImportWizard)page.getWizard();
    int totalNumberOfColumns=wizard.getTotalNumberOfColumns();
    int totalNumberOfRows=wizard.getTotalNumberOfRows();
    IDCategory tcgaSampleCategory=IDCategory.getIDCategory(""String_Node_Str"");
    if (totalNumberOfColumns > 100 && totalNumberOfColumns > totalNumberOfRows || (tcgaSampleCategory != null && (dataSetDescription.getColumnIDSpecification().getIdCategory().equals(tcgaSampleCategory.getCategoryName())))) {
      page.swapRowsWithColumnsButton.setSelection(true);
    }
 else {
      page.swapRowsWithColumnsButton.setSelection(false);
    }
    updateColumnCountWarning();
  }
  dataSourcePath=dataSetDescription.getDataSourcePath();
}","/** 
 * Reinitializes all widgets according to the   {@link #dataSetDescription}.
 */
public void pageActivated(){
  if (!dataSourcePath.equals(dataSetDescription.getDataSourcePath())) {
    guiCreated();
  }
  page.dataTranspositionWidget.update();
  dataSourcePath=dataSetDescription.getDataSourcePath();
}",0.3493095044679122
57058,"/** 
 * Initializes all widgets of the   {@link #page}. This method should be called after all widgets of the dialog were created.
 */
public void guiCreated(){
  NumericalProperties numericalProperties=dataSetDescription.getDataDescription().getNumericalProperties();
  String previousMathFiltermode=numericalProperties.getDataTransformation();
  String[] scalingOptions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  page.scalingCombo.setItems(scalingOptions);
  page.scalingCombo.setEnabled(true);
  if (previousMathFiltermode.equals(""String_Node_Str"")) {
    page.scalingCombo.select(0);
  }
 else   if (previousMathFiltermode.equals(""String_Node_Str""))   page.scalingCombo.select(1);
 else   if (previousMathFiltermode.equals(""String_Node_Str""))   page.scalingCombo.select(2);
 else   page.scalingCombo.select(0);
  dataTransformation=page.scalingCombo.getText();
  boolean maxDefined=numericalProperties.getMax() != null;
  page.maxButton.setEnabled(true);
  page.maxButton.setSelection(maxDefined);
  page.maxTextField.setEnabled(maxDefined);
  if (maxDefined)   page.maxTextField.setText(numericalProperties.getMax().toString());
  boolean minDefined=numericalProperties.getMin() != null;
  page.minButton.setEnabled(true);
  page.minButton.setSelection(minDefined);
  page.minTextField.setEnabled(minDefined);
  if (minDefined)   page.minTextField.setText(numericalProperties.getMin().toString());
  page.swapRowsWithColumnsButton.setEnabled(true);
  page.swapRowsWithColumnsButton.setSelection(dataSetDescription.isTransposeMatrix());
  page.useDataCenterButton.setSelection(false);
  page.dataCenterTextField.setEnabled(false);
  page.dataCenterTextField.setText(""String_Node_Str"");
}","/** 
 * Initializes all widgets of the   {@link #page}. This method should be called after all widgets of the dialog were created.
 */
public void guiCreated(){
  NumericalProperties numericalProperties=dataSetDescription.getDataDescription().getNumericalProperties();
  String previousMathFiltermode=numericalProperties.getDataTransformation();
  String[] scalingOptions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  page.scalingCombo.setItems(scalingOptions);
  page.scalingCombo.setEnabled(true);
  if (previousMathFiltermode.equals(""String_Node_Str"")) {
    page.scalingCombo.select(0);
  }
 else   if (previousMathFiltermode.equals(""String_Node_Str""))   page.scalingCombo.select(1);
 else   if (previousMathFiltermode.equals(""String_Node_Str""))   page.scalingCombo.select(2);
 else   page.scalingCombo.select(0);
  dataTransformation=page.scalingCombo.getText();
  boolean maxDefined=numericalProperties.getMax() != null;
  page.maxButton.setEnabled(true);
  page.maxButton.setSelection(maxDefined);
  page.maxTextField.setEnabled(maxDefined);
  if (maxDefined)   page.maxTextField.setText(numericalProperties.getMax().toString());
  boolean minDefined=numericalProperties.getMin() != null;
  page.minButton.setEnabled(true);
  page.minButton.setSelection(minDefined);
  page.minTextField.setEnabled(minDefined);
  if (minDefined)   page.minTextField.setText(numericalProperties.getMin().toString());
  page.useDataCenterButton.setSelection(false);
  page.dataCenterTextField.setEnabled(false);
  page.dataCenterTextField.setText(""String_Node_Str"");
}",0.957875457875458
57059,"/** 
 * Fills the   {@link #dataSetDescription} according to the widgets.
 */
public void fillDataSetDescription(){
  NumericalProperties numericalProperties=dataSetDescription.getDataDescription().getNumericalProperties();
  if (page.minTextField.getEnabled() && !page.minTextField.getText().isEmpty()) {
    float min=Float.parseFloat(page.minTextField.getText());
    if (!Float.isNaN(min)) {
      numericalProperties.setMin(min);
    }
  }
  if (page.maxTextField.getEnabled() && !page.maxTextField.getText().isEmpty()) {
    float max=Float.parseFloat(page.maxTextField.getText());
    if (!Float.isNaN(max)) {
      numericalProperties.setMax(max);
    }
  }
  if (page.useDataCenterButton.getSelection()) {
    numericalProperties.setDataCenter(Double.parseDouble(page.dataCenterTextField.getText()));
  }
  numericalProperties.setDataTransformation(dataTransformation);
  dataSetDescription.setTransposeMatrix(page.swapRowsWithColumnsButton.getSelection());
  ArrayList<ColumnDescription> inputPattern=new ArrayList<ColumnDescription>();
  DataImportWizard wizard=(DataImportWizard)page.getWizard();
  for (  Integer selected : wizard.getSelectedColumns()) {
    int columnIndex=selected.intValue();
    if (columnIndex == dataSetDescription.getColumnOfRowIds())     continue;
    inputPattern.add(new ColumnDescription(columnIndex,dataSetDescription.getDataDescription()));
  }
  dataSetDescription.setParsingPattern(inputPattern);
}","/** 
 * Fills the   {@link #dataSetDescription} according to the widgets.
 */
public void fillDataSetDescription(){
  NumericalProperties numericalProperties=dataSetDescription.getDataDescription().getNumericalProperties();
  if (page.minTextField.getEnabled() && !page.minTextField.getText().isEmpty()) {
    float min=Float.parseFloat(page.minTextField.getText());
    if (!Float.isNaN(min)) {
      numericalProperties.setMin(min);
    }
  }
  if (page.maxTextField.getEnabled() && !page.maxTextField.getText().isEmpty()) {
    float max=Float.parseFloat(page.maxTextField.getText());
    if (!Float.isNaN(max)) {
      numericalProperties.setMax(max);
    }
  }
  if (page.useDataCenterButton.getSelection()) {
    numericalProperties.setDataCenter(Double.parseDouble(page.dataCenterTextField.getText()));
  }
  numericalProperties.setDataTransformation(dataTransformation);
  dataSetDescription.setTransposeMatrix(page.dataTranspositionWidget.isTransposition());
  ArrayList<ColumnDescription> inputPattern=new ArrayList<ColumnDescription>();
  DataImportWizard wizard=(DataImportWizard)page.getWizard();
  for (  Integer selected : wizard.getSelectedColumns()) {
    int columnIndex=selected.intValue();
    if (columnIndex == dataSetDescription.getColumnOfRowIds())     continue;
    inputPattern.add(new ColumnDescription(columnIndex,dataSetDescription.getDataDescription()));
  }
  dataSetDescription.setParsingPattern(inputPattern);
}",0.977485278836162
57060,"@ListenTo(sendToMe=true) private void onUpdatePreview(UpdatePathwayPreviewEvent event){
  if (wizard != null)   wizard.onUpdate(event);
 else {
    BrickColumn selected=stratomex.getBrickColumnManager().getActiveBrickColumn();
    if (selected == null) {
    }
 else {
      replacePathwayTemplate(selected.getTablePerspective().getRecordPerspective(),event.getPathway());
    }
  }
}","@ListenTo(sendToMe=true) private void onUpdatePreview(UpdatePathwayPreviewEvent event){
  if (wizard != null)   wizard.onUpdate(event);
 else {
    BrickColumn selected=stratomex.getBrickColumnManager().getActiveBrickColumn();
    if (selected == null) {
    }
 else {
      createWizard(selected.getTablePerspective());
      replacePathwayTemplate(selected.getTablePerspective().getRecordPerspective(),event.getPathway());
    }
  }
}",0.9365853658536586
57061,"@ListenTo(sendToMe=true) private void onUpdateNumerical(UpdateNumericalPreviewEvent event){
  if (wizard != null)   wizard.onUpdate(event);
 else {
    BrickColumn selected=stratomex.getBrickColumnManager().getActiveBrickColumn();
    if (selected == null) {
    }
 else {
      replaceClinicalTemplate(selected.getTablePerspective().getRecordPerspective(),event.getTablePerspective());
    }
  }
}","@ListenTo(sendToMe=true) private void onUpdateNumerical(UpdateNumericalPreviewEvent event){
  if (wizard != null)   wizard.onUpdate(event);
 else {
    BrickColumn selected=stratomex.getBrickColumnManager().getActiveBrickColumn();
    if (selected == null) {
    }
 else {
      createWizard(selected.getTablePerspective());
      replaceClinicalTemplate(selected.getTablePerspective().getRecordPerspective(),event.getTablePerspective());
    }
  }
}",0.9386792452830188
57062,"@Override public void fillStateMachine(IStateMachine stateMachine,List<TablePerspective> existing,TablePerspective dependee){
  IState source=stateMachine.get(IStateMachine.ADD_OTHER);
  BrowseOtherState browse=(BrowseOtherState)stateMachine.get(IStateMachine.BROWSE_OTHER);
  if (!existing.isEmpty() && dependee == null) {
  }
 else   if (dependee != null) {
  }
}","@Override public void fillStateMachine(IStateMachine stateMachine,List<TablePerspective> existing,TablePerspective dependee){
  if (dependee != null)   return;
  IState source=stateMachine.get(IStateMachine.ADD_STRATIFICATIONS);
  IState browseStratification=stateMachine.get(IStateMachine.BROWSE_STRATIFICATIONS);
  if (hasClinicialData(existing)) {
    IState browse=stateMachine.addState(""String_Node_Str"",new UpdateAndBrowseLogRank());
    IState target=stateMachine.addState(""String_Node_Str"",new CreateLogRankState(browse));
    stateMachine.addTransition(source,new SimpleTransition(target,""String_Node_Str""));
  }
}",0.4919028340080971
57063,"@Override protected boolean permitsWrappingDisplayLists(){
  return false;
}","@Override protected boolean permitsWrappingDisplayLists(){
  return true;
}",0.9536423841059604
57064,"@Override public void renderContent(GL2 gl){
  float xoffset=x * 0.04f;
  float yoffset=y * 0.04f;
  gl.glColor4f(color[0],color[1],color[2],0.75f);
  gl.glPushAttrib(GL2.GL_LINE_BIT);
  gl.glLineWidth(3);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glBegin(GL.GL_LINE_LOOP);
{
    gl.glVertex3f(-xoffset,-yoffset,0);
    gl.glVertex3f(x + xoffset,-yoffset,0);
    gl.glVertex3f(x + xoffset,y + yoffset,0);
    gl.glVertex3f(-xoffset,y + yoffset,0);
  }
  gl.glEnd();
  gl.glPopAttrib();
}","@Override public void renderContent(GL2 gl){
  PixelGLConverter pixelGLConverter=layoutManager.getPixelGLConverter();
  float xoffset=pixelGLConverter.getGLWidthForPixelWidth(OFFSET);
  float yoffset=pixelGLConverter.getGLHeightForPixelHeight(OFFSET);
  gl.glPushAttrib(GL2.GL_LINE_BIT);
  gl.glLineWidth(3);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  gl.glColor4f(color[0],color[1],color[2],0.75f);
  gl.glBegin(GL.GL_LINE_LOOP);
{
    gl.glVertex3f(-xoffset,-yoffset,0);
    gl.glVertex3f(x + xoffset,-yoffset,0);
    gl.glVertex3f(x + xoffset,y + yoffset,0);
    gl.glVertex3f(-xoffset,y + yoffset,0);
  }
  gl.glEnd();
  gl.glPopAttrib();
}",0.7421944692239072
57065,"public BrickHighlightRenderer(float[] color){
  super(color);
}","public BrickHighlightRenderer(float[] color){
  this.color=color;
}",0.8769230769230769
57066,"@ListenTo(sendToMe=true) private void onHighlight(HighlightBrickEvent event){
  BrickColumnManager manager=stratomex.getBrickColumnManager();
  BrickColumn brickColumn=manager.getBrickColumn(event.getStratification());
  if (brickColumn == null)   return;
  ElementLayout layout=null;
  if (event.getGroup() == null) {
    layout=brickColumn.getLayout();
  }
 else {
    Group g=event.getGroup();
    for (    GLBrick brick : brickColumn.getSegmentBricks()) {
      if (g.equals(brick.getTablePerspective().getRecordGroup())) {
        layout=brick.getLayout();
        break;
      }
    }
  }
  if (layout == null)   return;
  if (!event.isHighlight()) {
    layout.clearBackgroundRenderers();
  }
 else {
    layout.addBackgroundRenderer(new BrickHighlightRenderer(event.getColor().getRGBA()));
  }
  if (layout.getLayoutManager() != null)   layout.updateSubLayout();
}","@ListenTo(sendToMe=true) private void onHighlight(HighlightBrickEvent event){
  BrickColumnManager manager=stratomex.getBrickColumnManager();
  BrickColumn brickColumn=manager.getBrickColumn(event.getStratification());
  if (brickColumn == null)   return;
  ElementLayout layout=null;
  if (event.getGroup() == null) {
    layout=brickColumn.getLayout();
  }
 else {
    Group g=event.getGroup();
    for (    GLBrick brick : brickColumn.getSegmentBricks()) {
      if (g.equals(brick.getTablePerspective().getRecordGroup())) {
        layout=brick.getLayout();
        break;
      }
    }
  }
  if (layout == null)   return;
  if (!event.isHighlight()) {
    layout.clearBackgroundRenderers();
  }
 else {
    layout.addBackgroundRenderer(new BrickHighlightRenderer(event.getColor().getColorComponents(null)));
  }
  if (layout.getLayoutManager() != null)   layout.updateSubLayout();
}",0.9857873791927232
57067,"private void updateTableBased(ITablePerspectiveScoreRow old,ITablePerspectiveScoreRow new_,Collection<IScore> visibleColumns,IScore sortedBy){
  TablePerspective strat=new_ == null ? null : new_.asTablePerspective();
  Group group=new_ == null ? null : MaxGroupCombiner.getMax(old,sortedBy);
  if (currentPreview != null && strat != null) {
    if (currentPreview.equals(strat)) {
      if (!Objects.equal(currentPreviewGroup,group)) {
        unhighlightBrick(currentPreview,currentPreviewGroup);
        hightlightBrick(currentPreview,group,true);
        currentPreviewGroup=group;
      }
    }
 else {
      if (contains(strat)) {
        unhighlightBrick(currentPreview,currentPreviewGroup);
        hightlightBrick(strat,group,true);
      }
 else {
        updatePreview(strat,group);
      }
    }
  }
 else   if (currentPreview != null) {
    removePreview();
  }
 else   if (strat != null) {
    updatePreview(strat,group);
  }
  if (strat != null)   hightlightRows(new_,visibleColumns,group);
 else   if (old != null) {
    clearHighlightRows(old.getIdType(),old.getDataDomain());
  }
}","private void updateTableBased(ITablePerspectiveScoreRow old,ITablePerspectiveScoreRow new_,Collection<IScore> visibleColumns,IScore sortedBy){
  TablePerspective strat=new_ == null ? null : new_.asTablePerspective();
  Group group=new_ == null ? null : MaxGroupCombiner.getMax(new_,sortedBy);
  if (currentPreview != null && strat != null) {
    if (currentPreview.equals(strat)) {
      if (!Objects.equal(currentPreviewGroup,group)) {
        unhighlightBrick(currentPreview,currentPreviewGroup);
        hightlightBrick(currentPreview,group,true);
        currentPreviewGroup=group;
      }
    }
 else {
      if (contains(strat)) {
        unhighlightBrick(currentPreview,currentPreviewGroup);
        hightlightBrick(strat,group,true);
      }
 else {
        updatePreview(strat,group);
      }
    }
  }
 else   if (currentPreview != null) {
    removePreview();
  }
 else   if (strat != null) {
    updatePreview(strat,group);
  }
  if (strat != null)   hightlightRows(new_,visibleColumns,group);
 else   if (old != null) {
    clearHighlightRows(old.getIdType(),old.getDataDomain());
  }
}",0.9968138370505234
57068,"private void unhighlightBrick(TablePerspective strat,Group g){
  if (g == null)   return;
  triggerEvent(new HighlightBrickEvent(strat,g,receiver,this,null));
}","private void unhighlightBrick(TablePerspective strat,Group g){
  if (g == null)   return;
  triggerEvent(new HighlightBrickEvent(strat,g,null).to(receiver.getTourguide()));
}",0.9101796407185628
57069,"private void hightlightBrick(TablePerspective strat,Group g,boolean now){
  if (g == null)   return;
  AEvent event=new HighlightBrickEvent(strat,g,receiver,this,TourGuideRenderStyle.STRATOMEX_FOUND_GROUP);
  if (now)   triggerEvent(event);
 else   triggerDelayedEvent(event);
}","private void hightlightBrick(TablePerspective strat,Group g,boolean now){
  if (g == null)   return;
  AEvent event=new HighlightBrickEvent(strat,g,TourGuideRenderStyle.STRATOMEX_FOUND_GROUP).to(receiver.getTourguide());
  if (now)   triggerEvent(event);
 else   triggerDelayedEvent(event);
}",0.9263157894736842
57070,"protected boolean scan(Object root,Object listener,String eventSpace,Predicate<? super Class<?>> scanWhile){
  final Class<?> clazz=listener.getClass();
  boolean hasOne=false;
  for (  Method m : Iterables.filter(ClassUtils.findAllDeclaredMethods(clazz,scanWhile),listenToMethod)) {
    Class<? extends AEvent> event=m.getParameterTypes()[0].asSubclass(AEvent.class);
    final ListenTo a=m.getAnnotation(ListenTo.class);
    boolean toMe=a.sendToMe() && ADirectedEvent.class.isAssignableFrom(event);
    final AnnotationBasedEventListener l=new AnnotationBasedEventListener(owner,root,listener,m,toMe);
    if (eventSpace != null && (a.restrictExclusiveToEventSpace() || a.restrictToEventSpace())) {
      if (a.restrictExclusiveToEventSpace())       l.setExclusiveEventSpace(eventSpace);
 else       l.setEventSpace(eventSpace);
    }
    register(event,l);
    hasOne=true;
  }
  for (  Field f : Iterables.filter(ClassUtils.findAllDeclaredFields(clazz,scanWhile),deepScanField)) {
    f.setAccessible(true);
    Object field;
    try {
      field=f.get(listener);
    }
 catch (    IllegalArgumentException|IllegalAccessException e) {
      e.printStackTrace();
      System.err.println(e);
      continue;
    }
    if (field == null)     continue;
    if (field instanceof Collection<?>) {
      @SuppressWarnings(""String_Node_Str"") Collection<Object> r=(Collection<Object>)field;
      boolean hasFieldOne=scanAll(root,r,eventSpace,scanWhile);
      hasOne=hasOne || hasFieldOne;
    }
 else     if (field instanceof Map<?,?>) {
      @SuppressWarnings(""String_Node_Str"") Map<?,Object> r=(Map<?,Object>)field;
      boolean hasFieldOne=scanAll(root,r.values(),eventSpace,scanWhile);
      hasOne=hasOne || hasFieldOne;
    }
 else     if (field instanceof Multimap<?,?>) {
      @SuppressWarnings(""String_Node_Str"") Multimap<?,Object> r=(Multimap<?,Object>)field;
      boolean hasFieldOne=scanAll(root,r.values(),eventSpace,scanWhile);
      hasOne=hasOne || hasFieldOne;
    }
 else {
      boolean hasFieldOne=scan(root,field,eventSpace,scanWhile);
      hasOne=hasOne || hasFieldOne;
    }
  }
  return hasOne;
}","protected boolean scan(Object root,Object listener,String eventSpace,Predicate<? super Class<?>> scanWhile){
  final Class<?> clazz=listener.getClass();
  if (nothingFounds.contains(clazz.getCanonicalName()))   return false;
  boolean scanAgain=false;
  for (  Method m : Iterables.filter(ClassUtils.findAllDeclaredMethods(clazz,scanWhile),listenToMethod)) {
    Class<? extends AEvent> event=m.getParameterTypes()[0].asSubclass(AEvent.class);
    final ListenTo a=m.getAnnotation(ListenTo.class);
    boolean toMe=a.sendToMe() && ADirectedEvent.class.isAssignableFrom(event);
    final AnnotationBasedEventListener l=new AnnotationBasedEventListener(owner,root,listener,m,toMe);
    if (eventSpace != null && (a.restrictExclusiveToEventSpace() || a.restrictToEventSpace())) {
      if (a.restrictExclusiveToEventSpace())       l.setExclusiveEventSpace(eventSpace);
 else       l.setEventSpace(eventSpace);
    }
    register(event,l);
    scanAgain=true;
  }
  for (  Field f : Iterables.filter(ClassUtils.findAllDeclaredFields(clazz,scanWhile),deepScanField)) {
    f.setAccessible(true);
    Object field;
    try {
      field=f.get(listener);
    }
 catch (    IllegalArgumentException|IllegalAccessException e) {
      e.printStackTrace();
      System.err.println(e);
      continue;
    }
    if (field == null) {
      scanAgain=true;
      continue;
    }
    if (field instanceof Collection<?>) {
      @SuppressWarnings(""String_Node_Str"") Collection<Object> r=(Collection<Object>)field;
      scanAll(root,r,eventSpace,scanWhile);
      scanAgain=true;
    }
 else     if (field instanceof Map<?,?>) {
      @SuppressWarnings(""String_Node_Str"") Map<?,Object> r=(Map<?,Object>)field;
      scanAll(root,r.values(),eventSpace,scanWhile);
      scanAgain=true;
    }
 else     if (field instanceof Multimap<?,?>) {
      @SuppressWarnings(""String_Node_Str"") Multimap<?,Object> r=(Multimap<?,Object>)field;
      scanAll(root,r.values(),eventSpace,scanWhile);
      scanAgain=true;
    }
 else {
      boolean hasFieldOne=scan(root,field,eventSpace,scanWhile);
      scanAgain=scanAgain || hasFieldOne;
    }
  }
  if (!scanAgain)   nothingFounds.add(clazz.getCanonicalName());
  return scanAgain;
}",0.8541089566020313
57071,"/** 
 * see   {@link #register(Object,String)} but with an additional speedup criteria to support early stopping ofscanning
 * @param listener
 * @param eventSpace
 * @param stopAtClass
 */
public final <T>T register(T listener,String eventSpace,Predicate<? super Class<?>> scanWhile){
  Class<?> clazz=listener.getClass();
  if (nothingFounds.contains(clazz.getCanonicalName()))   return listener;
  boolean hasOne=scan(listener,listener,eventSpace,scanWhile);
  if (!hasOne)   nothingFounds.add(clazz.getCanonicalName());
  return listener;
}","/** 
 * see   {@link #register(Object,String)} but with an additional speedup criteria to support early stopping ofscanning
 * @param listener
 * @param eventSpace
 * @param stopAtClass
 */
public final <T>T register(T listener,String eventSpace,Predicate<? super Class<?>> scanWhile){
  scan(listener,listener,eventSpace,scanWhile);
  return listener;
}",0.6948775055679287
57072,"public PreviewTable(Composite parent,MatrixDefinition spec,IPreviewCallback previewCallback){
  this.spec=spec;
  this.previewCallback=previewCallback;
  delimeter=new DelimiterWidget(parent,new ICallback<String>(){
    @Override public void on(    String delimiter){
      onDelimiterChanged(delimiter);
    }
  }
);
  delimeter.setDelimeter(spec.getDelimiter());
  selectAllNone=new SelectAllNoneWidget(parent,new BooleanCallback(){
    @Override public void on(    boolean selectAll){
      onSelectAllNone(selectAll);
    }
  }
);
  this.selectAllNone.setEnabled(false);
  previewTable=new PreviewTableWidget(parent,new BooleanCallback(){
    @Override public void on(    boolean data){
      onShowAllColumns(data);
    }
  }
);
}","public PreviewTable(Composite parent,MatrixDefinition spec,IPreviewCallback previewCallback){
  this.spec=spec;
  this.previewCallback=previewCallback;
  delimeter=new DelimiterWidget(parent,new ICallback<String>(){
    @Override public void on(    String delimiter){
      onDelimiterChanged(delimiter);
    }
  }
);
  delimeter.setDelimeter(spec.getDelimiter());
  selectAllNone=new SelectAllNoneWidget(parent,new BooleanCallback(){
    @Override public void on(    boolean selectAll){
      onSelectAllNone(selectAll);
    }
  }
);
  this.selectAllNone.setEnabled(false);
  previewTable=new PreviewTableWidget(parent);
}",0.9131075110456554
57073,"/** 
 * Creates the preview table from the file specified by   {@link #groupingParseSpecification}. Widgets of the  {@link #dialog} are updated accordingly.
 */
public void createDataPreviewTableFromFile(){
  parser.parse(spec.getDataSourcePath(),spec.getDelimiter(),false,PreviewTableWidget.MAX_PREVIEW_TABLE_ROWS);
  dataMatrix=parser.getDataMatrix();
  totalNumberOfColumns=parser.getTotalNumberOfColumns();
  this.previewTable.createDataPreviewTableFromDataMatrix(dataMatrix);
  previewCallback.on(totalNumberOfColumns,parser.getTotalNumberOfRows(),dataMatrix);
  this.previewTable.updateTableColors(spec.getNumberOfHeaderLines(),-1,spec.getColumnOfRowIds());
}","/** 
 * Creates the preview table from the file specified by   {@link #groupingParseSpecification}. Widgets of the  {@link #dialog} are updated accordingly.
 */
public void createDataPreviewTableFromFile(){
  parser.parse(spec.getDataSourcePath(),spec.getDelimiter(),false,PreviewTableWidget.MAX_PREVIEW_TABLE_ROWS);
  dataMatrix=parser.getDataMatrix();
  totalNumberOfColumns=parser.getTotalNumberOfColumns();
  this.previewTable.createDataPreviewTableFromDataMatrix(dataMatrix,totalNumberOfColumns);
  previewCallback.on(totalNumberOfColumns,parser.getTotalNumberOfRows(),dataMatrix);
  this.previewTable.updateTableColors(spec.getNumberOfHeaderLines(),-1,spec.getColumnOfRowIds());
}",0.9844559585492229
57074,"public PreviewTableWidget(Composite parent,final BooleanCallback onSelectAllColumnsCallback){
  this.parent=parent;
  bodyDataProvider=new BodyDataProvider(null,1);
  buildTable(bodyDataProvider,new ColumnHeaderDataProvider(1),new RowHeaderDataProvider(1));
}","public PreviewTableWidget(Composite parent){
  this.parent=parent;
  bodyDataProvider=new BodyDataProvider(null,1);
  buildTable(bodyDataProvider,new ColumnHeaderDataProvider(1),new RowHeaderDataProvider(1));
}",0.8955223880597015
57075,"/** 
 * Creates the   {@link #previewTable} according to the {@link #dataMatrix}.
 */
public void createDataPreviewTableFromDataMatrix(List<? extends List<String>> dataMatrix){
  if (dataMatrix == null || dataMatrix.isEmpty())   return;
  int numTableColumns=dataMatrix.get(0).size();
  columnSelectionStatus=new ArrayList<>(numTableColumns);
  for (int i=0; i < numTableColumns; i++) {
    columnSelectionStatus.add(true);
  }
  bodyDataProvider=new BodyDataProvider(dataMatrix,numTableColumns);
  buildTable(bodyDataProvider,new ColumnHeaderDataProvider(numTableColumns),new RowHeaderDataProvider(dataMatrix.size()));
}","/** 
 * Creates the   {@link #previewTable} according to the {@link #dataMatrix}.
 */
public void createDataPreviewTableFromDataMatrix(List<? extends List<String>> dataMatrix,int numColumns){
  if (dataMatrix == null || dataMatrix.isEmpty())   return;
  columnSelectionStatus=new ArrayList<>(numColumns);
  for (int i=0; i < numColumns; i++) {
    columnSelectionStatus.add(true);
  }
  bodyDataProvider=new BodyDataProvider(dataMatrix,numColumns);
  buildTable(bodyDataProvider,new ColumnHeaderDataProvider(numColumns),new RowHeaderDataProvider(dataMatrix.size()));
}",0.9015979814970564
57076,"@Override public void createControl(Composite parent){
  int numGridCols=2;
  parentComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(numGridCols,true);
  parentComposite.setLayout(layout);
  loadFile=new LoadFileWidget(parentComposite,""String_Node_Str"",new ICallback<String>(){
    @Override public void on(    String data){
      mediator.onSelectFile(data);
    }
  }
);
  label=new LabelWidget(parentComposite,""String_Node_Str"");
  createRowConfigPart(parentComposite);
  createColumnConfigPart(parentComposite);
  delimiterRadioGroup=new DelimiterWidget(parentComposite,new ICallback<String>(){
    @Override public void on(    String data){
      mediator.onDelimiterChanged(data);
    }
  }
);
  selectAllNone=new SelectAllNoneWidget(parentComposite,new BooleanCallback(){
    @Override public void on(    boolean selectAll){
      mediator.onSelectAllNone(selectAll);
    }
  }
);
  previewTable=new PreviewTableWidget(parentComposite,new BooleanCallback(){
    @Override public void on(    boolean showAllColumns){
      mediator.onShowAllColumns(showAllColumns);
    }
  }
);
  mediator.guiCreated();
  setControl(parentComposite);
}","@Override public void createControl(Composite parent){
  int numGridCols=2;
  parentComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(numGridCols,true);
  parentComposite.setLayout(layout);
  loadFile=new LoadFileWidget(parentComposite,""String_Node_Str"",new ICallback<String>(){
    @Override public void on(    String data){
      mediator.onSelectFile(data);
    }
  }
);
  label=new LabelWidget(parentComposite,""String_Node_Str"");
  createRowConfigPart(parentComposite);
  createColumnConfigPart(parentComposite);
  delimiterRadioGroup=new DelimiterWidget(parentComposite,new ICallback<String>(){
    @Override public void on(    String data){
      mediator.onDelimiterChanged(data);
    }
  }
);
  selectAllNone=new SelectAllNoneWidget(parentComposite,new BooleanCallback(){
    @Override public void on(    boolean selectAll){
      mediator.onSelectAllNone(selectAll);
    }
  }
);
  previewTable=new PreviewTableWidget(parentComposite);
  mediator.guiCreated();
  setControl(parentComposite);
}",0.8922237380627558
57077,"@Override public void on(boolean showAllColumns){
  mediator.onShowAllColumns(showAllColumns);
}","@Override public void on(boolean selectAll){
  mediator.onSelectAllNone(selectAll);
}",0.7513812154696132
57078,"public void createDataPreviewTableFromFile(){
  parser.parse(dataSetDescription.getDataSourcePath(),dataSetDescription.getDelimiter(),false,MAX_PREVIEW_TABLE_ROWS);
  dataMatrix=parser.getDataMatrix();
  totalNumberOfColumns=parser.getTotalNumberOfColumns();
  totalNumberOfRows=parser.getTotalNumberOfRows();
  DataImportWizard wizard=(DataImportWizard)page.getWizard();
  wizard.setTotalNumberOfColumns(totalNumberOfColumns);
  wizard.setTotalNumberOfRows(totalNumberOfRows);
  page.previewTable.createDataPreviewTableFromDataMatrix(dataMatrix);
  updateWidgetsAccordingToTableChanges();
  determineIDTypes();
  guessNumberOfHeaderRows();
  page.previewTable.updateTableColors(dataSetDescription.getNumberOfHeaderLines(),dataSetDescription.getRowOfColumnIDs(),dataSetDescription.getColumnOfRowIds());
  page.parentComposite.pack();
}","public void createDataPreviewTableFromFile(){
  parser.parse(dataSetDescription.getDataSourcePath(),dataSetDescription.getDelimiter(),false,MAX_PREVIEW_TABLE_ROWS);
  dataMatrix=parser.getDataMatrix();
  totalNumberOfColumns=parser.getTotalNumberOfColumns();
  totalNumberOfRows=parser.getTotalNumberOfRows();
  DataImportWizard wizard=(DataImportWizard)page.getWizard();
  wizard.setTotalNumberOfColumns(totalNumberOfColumns);
  wizard.setTotalNumberOfRows(totalNumberOfRows);
  page.previewTable.createDataPreviewTableFromDataMatrix(dataMatrix,totalNumberOfColumns);
  updateWidgetsAccordingToTableChanges();
  determineIDTypes();
  guessNumberOfHeaderRows();
  page.previewTable.updateTableColors(dataSetDescription.getNumberOfHeaderLines(),dataSetDescription.getRowOfColumnIDs(),dataSetDescription.getColumnOfRowIds());
  page.parentComposite.pack();
}",0.9875813128326434
57079,"private void hightlightRows(ITablePerspectiveScoreRow new_,Collection<IScore> visibleColumns,Group new_g){
  Pair<Collection<Integer>,IDType> intersection=new_.getIntersection(visibleColumns,new_g);
  AEvent event=new SelectElementsEvent(intersection.getFirst(),intersection.getSecond(),this.previewSelectionType).to(receiver.getTourguide());
  event.setEventSpace(new_.getDataDomain().getDataDomainID());
  triggerEvent(event);
}","private void hightlightRows(ITablePerspectiveScoreRow new_,Collection<IScore> visibleColumns,Group new_g){
  Pair<Collection<Integer>,IDType> intersection=new_.getIntersection(visibleColumns,new_g);
  AEvent event=new SelectElementsEvent(intersection.getFirst(),intersection.getSecond(),this.previewSelectionType).to(receiver);
  event.setEventSpace(new_.getDataDomain().getDataDomainID());
  triggerEvent(event);
}",0.9822485207100592
57080,"private void clearHighlightRows(IDType idType,IDataDomain dataDomain){
  AEvent event=new SelectElementsEvent(Collections.<Integer>emptyList(),idType,this.previewSelectionType).to(receiver.getTourguide());
  event.setEventSpace(dataDomain.getDataDomainID());
  triggerEvent(event);
}","private void clearHighlightRows(IDType idType,IDataDomain dataDomain){
  AEvent event=new SelectElementsEvent(Collections.<Integer>emptyList(),idType,this.previewSelectionType).to(receiver);
  event.setEventSpace(dataDomain.getDataDomainID());
  triggerEvent(event);
}",0.9727767695099818
57081,"private void scheduleAllOf(Collection<IScore> toCompute,boolean removeLeadingScoreColumns){
  ComputeForScoreJob job=new ComputeForScoreJob(toCompute,table.getData(),table.getDefaultFilter().getFilter(),this,removeLeadingScoreColumns);
  if (job.hasThingsToDo()) {
    waiting.resetJob(job);
    job.addJobChangeListener(jobListener);
    getPopupLayer().show(waiting,null,0);
    job.schedule();
  }
 else {
    addColumns(toCompute,removeLeadingScoreColumns);
  }
}","private void scheduleAllOf(Collection<IScore> toCompute,boolean removeLeadingScoreColumns){
  ComputeForScoreJob job=new ComputeForScoreJob(toCompute,table.getData(),table.getMyRanker(null).getFilter(),this,removeLeadingScoreColumns);
  if (job.hasThingsToDo()) {
    waiting.resetJob(job);
    job.addJobChangeListener(jobListener);
    getPopupLayer().show(waiting,null,0);
    job.schedule();
  }
 else {
    addColumns(toCompute,removeLeadingScoreColumns);
  }
}",0.45016077170418
57082,"public RankTableModel(RankTableModel copy){
  this.config=copy.config;
  this.selectedRow=copy.selectedRow;
  this.dataMask=copy.dataMask;
  this.data.addAll(copy.data);
  this.defaultRanker=copy.defaultRanker.clone(this);
  this.defaultFilter=copy.defaultFilter.clone(this);
  for (  ARankColumnModel c : copy.pool)   this.pool.add(c.clone());
  for (  ARankColumnModel c : copy.columns)   this.columns.add(c.clone());
}","public RankTableModel(RankTableModel copy){
  this.config=copy.config;
  this.selectedRow=copy.selectedRow;
  this.dataMask=copy.dataMask;
  this.data.addAll(copy.data);
  this.defaultRanker=copy.defaultRanker.clone(this);
  for (  ARankColumnModel c : copy.pool)   this.pool.add(c.clone());
  for (  ARankColumnModel c : copy.columns)   this.columns.add(c.clone());
}",0.7300380228136882
57083,"/** 
 * removes all columns and clears the data
 */
public void reset(){
  for (  ARankColumnModel c : this.columns)   takeDown(c);
  this.columns.clear();
  for (  ARankColumnModel c : this.pool)   takeDown(c);
  this.pool.clear();
  this.dataMask=null;
  this.data.clear();
  this.selectedRow=null;
  this.defaultFilter.reset();
}","/** 
 * removes all columns and clears the data
 */
public void reset(){
  for (  ARankColumnModel c : this.columns)   takeDown(c);
  this.columns.clear();
  for (  ARankColumnModel c : this.pool)   takeDown(c);
  this.pool.clear();
  this.dataMask=null;
  this.data.clear();
  this.selectedRow=null;
}",0.9526813880126184
57084,"@Override public void display(GL2 gl){
  checkForHits(gl);
  processEvents();
  handleBrickResize(gl);
  if (isBaseDisplayListDirty)   buildBaseDisplayList(gl);
  GLStratomex stratomex=getBrickColumn().getStratomexView();
  gl.glPushName(stratomex.getPickingManager().getPickingID(stratomex.getID(),EPickingType.BRICK.name(),getID()));
  gl.glPushName(getPickingManager().getPickingID(getID(),EPickingType.BRICK.name(),getID()));
  gl.glColor4f(1.0f,0.0f,0.0f,0.5f);
  gl.glTranslatef(0,0,0.1f);
  gl.glBegin(GL2.GL_QUADS);
  float zpos=0f;
  gl.glVertex3f(0,0,zpos);
  gl.glVertex3f(wrappingLayout.getSizeScaledX(),0,zpos);
  gl.glVertex3f(wrappingLayout.getSizeScaledX(),wrappingLayout.getSizeScaledY(),zpos);
  gl.glVertex3f(0,wrappingLayout.getSizeScaledY(),zpos);
  gl.glEnd();
  gl.glPopName();
  gl.glPopName();
  if (brickColumn.getDetailLevel() != EDetailLevel.LOW || isHeaderBrick)   layoutManager.render(gl);
  gl.glCallList(baseDisplayListIndex);
}","@Override public void display(GL2 gl){
  checkForHits(gl);
  processEvents();
  handleBrickResize(gl);
  if (isBaseDisplayListDirty)   buildBaseDisplayList(gl);
  GLStratomex stratomex=getBrickColumn().getStratomexView();
  gl.glPushName(stratomex.getPickingManager().getPickingID(stratomex.getID(),EPickingType.BRICK.name(),getID()));
  gl.glPushName(getPickingManager().getPickingID(getID(),EPickingType.BRICK.name(),getID()));
  gl.glColor4f(1.0f,0.0f,0.0f,0.5f);
  gl.glTranslatef(0,0,0.1f);
  gl.glBegin(GL2.GL_QUADS);
  float zpos=0f;
  gl.glVertex3f(0,0,zpos);
  gl.glVertex3f(wrappingLayout.getSizeScaledX(),0,zpos);
  gl.glVertex3f(wrappingLayout.getSizeScaledX(),wrappingLayout.getSizeScaledY(),zpos);
  gl.glVertex3f(0,wrappingLayout.getSizeScaledY(),zpos);
  gl.glEnd();
  gl.glPopName();
  gl.glPopName();
  if (brickColumn.getDetailLevel() != EDetailLevel.LOW || isHeaderBrick)   layoutManager.render(gl);
  gl.glCallList(baseDisplayListIndex);
  gl.glTranslatef(0,0,-0.1f);
}",0.9846153846153848
57085,"private void renderBackground(GL2 gl){
  int pickingID=stratomex.getPickingManager().getPickingID(stratomex.getID(),EPickingType.DIMENSION_GROUP_SPACER.name(),ID);
  gl.glPushName(pickingID);
  gl.glColor4f(1f,1f,1f,0);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(0,0,-0.2f);
  gl.glVertex3f(x,0,-0.2f);
  gl.glVertex3f(x,y,-0.2f);
  gl.glVertex3f(0,y,-0.2f);
  gl.glEnd();
  gl.glPopName();
}","private void renderBackground(GL2 gl){
  int pickingID=stratomex.getPickingManager().getPickingID(stratomex.getID(),EPickingType.DIMENSION_GROUP_SPACER.name(),ID);
  gl.glPushName(pickingID);
  gl.glColor4f(1f,1f,1f,0);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(0,0,0.f);
  gl.glVertex3f(x,0,0.f);
  gl.glVertex3f(x,y,0.f);
  gl.glVertex3f(0,y,0.f);
  gl.glEnd();
  gl.glPopName();
}",0.969309462915601
57086,"protected boolean scan(Object root,Object listener,String eventSpace,Predicate<? super Class<?>> scanWhile){
  final Class<?> clazz=listener.getClass();
  boolean hasOne=false;
  for (  Method m : Iterables.filter(ClassUtils.findAllDeclaredMethods(clazz,scanWhile),listenToMethod)) {
    Class<? extends AEvent> event=m.getParameterTypes()[0].asSubclass(AEvent.class);
    final ListenTo a=m.getAnnotation(ListenTo.class);
    boolean toMe=a.sendToMe() && ADirectedEvent.class.isAssignableFrom(event);
    final AnnotationBasedEventListener l=new AnnotationBasedEventListener(owner,root,listener,m,toMe);
    if (eventSpace != null && (a.restrictExclusiveToEventSpace() || a.restrictToEventSpace())) {
      if (a.restrictExclusiveToEventSpace())       l.setExclusiveEventSpace(eventSpace);
 else       l.setEventSpace(eventSpace);
    }
    register(event,l);
    hasOne=true;
  }
  for (  Field f : Iterables.filter(ClassUtils.findAllDeclaredFields(clazz,scanWhile),deepScanField)) {
    f.setAccessible(true);
    Object field;
    try {
      field=f.get(listener);
    }
 catch (    IllegalArgumentException|IllegalAccessException e) {
      e.printStackTrace();
      System.err.println(e);
      continue;
    }
    if (field == null)     continue;
    boolean hasFieldOne=scan(root,field,eventSpace,scanWhile);
    hasOne=hasOne || hasFieldOne;
  }
  return hasOne;
}","protected boolean scan(Object root,Object listener,String eventSpace,Predicate<? super Class<?>> scanWhile){
  final Class<?> clazz=listener.getClass();
  boolean hasOne=false;
  for (  Method m : Iterables.filter(ClassUtils.findAllDeclaredMethods(clazz,scanWhile),listenToMethod)) {
    Class<? extends AEvent> event=m.getParameterTypes()[0].asSubclass(AEvent.class);
    final ListenTo a=m.getAnnotation(ListenTo.class);
    boolean toMe=a.sendToMe() && ADirectedEvent.class.isAssignableFrom(event);
    final AnnotationBasedEventListener l=new AnnotationBasedEventListener(owner,root,listener,m,toMe);
    if (eventSpace != null && (a.restrictExclusiveToEventSpace() || a.restrictToEventSpace())) {
      if (a.restrictExclusiveToEventSpace())       l.setExclusiveEventSpace(eventSpace);
 else       l.setEventSpace(eventSpace);
    }
    register(event,l);
    hasOne=true;
  }
  for (  Field f : Iterables.filter(ClassUtils.findAllDeclaredFields(clazz,scanWhile),deepScanField)) {
    f.setAccessible(true);
    Object field;
    try {
      field=f.get(listener);
    }
 catch (    IllegalArgumentException|IllegalAccessException e) {
      e.printStackTrace();
      System.err.println(e);
      continue;
    }
    if (field == null)     continue;
    if (field instanceof Collection<?>) {
      @SuppressWarnings(""String_Node_Str"") Collection<Object> r=(Collection<Object>)field;
      boolean hasFieldOne=scanAll(root,r,eventSpace,scanWhile);
      hasOne=hasOne || hasFieldOne;
    }
 else     if (field instanceof Map<?,?>) {
      @SuppressWarnings(""String_Node_Str"") Map<?,Object> r=(Map<?,Object>)field;
      boolean hasFieldOne=scanAll(root,r.values(),eventSpace,scanWhile);
      hasOne=hasOne || hasFieldOne;
    }
 else     if (field instanceof Multimap<?,?>) {
      @SuppressWarnings(""String_Node_Str"") Multimap<?,Object> r=(Multimap<?,Object>)field;
      boolean hasFieldOne=scanAll(root,r.values(),eventSpace,scanWhile);
      hasOne=hasOne || hasFieldOne;
    }
 else {
      boolean hasFieldOne=scan(root,field,eventSpace,scanWhile);
      hasOne=hasOne || hasFieldOne;
    }
  }
  return hasOne;
}",0.7708571428571429
57087,"@ListenTo(sendToMe=true) private void onAddEmptyColumn(AddNewColumnEvent event){
  if (preview != null || templateColumn != null)   return;
  int index;
  if (event.getObjectId() <= 0) {
    index=-1;
  }
 else {
    BrickColumnManager brickColumnManager=stratomex.getBrickColumnManager();
    BrickColumn col=brickColumnManager.getBrickColumnSpacers().get(event.getObjectId()).getLeftDimGroup();
    index=col == null ? 0 : brickColumnManager.getBrickColumns().indexOf(col);
  }
  templateIndex=index;
  templateColumn=createTemplateElement(index + 1);
  stratomex.relayout();
}","@ListenTo(sendToMe=true) private void onAddEmptyColumn(AddNewColumnEvent event){
  if (preview != null || templateColumn != null)   return;
  int index;
  if (event.getObjectId() <= 0) {
    index=-1;
  }
 else {
    BrickColumnManager brickColumnManager=stratomex.getBrickColumnManager();
    BrickColumn col=brickColumnManager.getBrickColumnSpacers().get(event.getObjectId()).getLeftDimGroup();
    index=col == null ? -1 : brickColumnManager.getBrickColumns().indexOf(col);
  }
  templateIndex=index;
  templateColumn=createTemplateElement(index + 1);
  stratomex.relayout();
}",0.997411561691113
57088,"/** 
 * @param pick
 */
protected void onBrickPick(Pick pick){
  if (pick.getPickingMode() != PickingMode.CLICKED || selectionMode == null)   return;
  GLBrick brick=findBick(pick.getObjectID());
  if (brick == null)   return;
  boolean isHeader=brick.isHeaderBrick();
  if (isHeader != (selectionMode == ESelectionMode.STRATIFICATION))   return;
  for (  BrickColumnGlowRenderer glow : Iterables.filter(brick.getLayout().getBackgroundRenderer(),BrickColumnGlowRenderer.class)) {
    glow.setColor(Colors.YELLOW.getRGBA());
  }
  stratomex.setDisplayListDirty();
  TablePerspective tablePerspective=brick.getBrickColumn().getTablePerspective();
  if (selectionMode == ESelectionMode.GROUP) {
    Group group=brick.getTablePerspective().getRecordGroup();
    EventPublisher.trigger(new SelectGroupReplyEvent(tablePerspective,group).to(selectionReceiver).from(this));
  }
 else {
    EventPublisher.trigger(new SelectStratificationReplyEvent(tablePerspective).to(selectionReceiver).from(this));
  }
}","/** 
 * if we pick an brick
 * @param pick
 */
protected void onBrickPick(Pick pick){
  if (pick.getPickingMode() != PickingMode.CLICKED || selectionMode == null)   return;
  GLBrick brick=findBick(pick.getObjectID());
  if (brick == null)   return;
  boolean isHeader=brick.isHeaderBrick();
  if (isHeader != (selectionMode == ESelectionMode.STRATIFICATION))   return;
  if (this.selectionCurrent != null) {
    changeHighlight(this.selectionCurrent,Colors.GREEN);
  }
  changeHighlight(brick,Colors.YELLOW);
  this.selectionCurrent=brick;
  stratomex.setDisplayListDirty();
  TablePerspective tablePerspective=brick.getBrickColumn().getTablePerspective();
  if (selectionMode == ESelectionMode.GROUP) {
    Group group=brick.getTablePerspective().getRecordGroup();
    EventPublisher.trigger(new SelectGroupReplyEvent(tablePerspective,group).to(selectionReceiver).from(this));
  }
 else {
    EventPublisher.trigger(new SelectStratificationReplyEvent(tablePerspective).to(selectionReceiver).from(this));
  }
}",0.834245893479343
57089,"@ListenTo(sendToMe=true) private void onUpdatePreview(UpdatePreviewEvent event){
  if (templateColumn == null)   return;
  List<Pair<Integer,BrickColumn>> added;
  if (preview == null) {
    int index=destroyTemplate();
    BrickColumnManager bcm=stratomex.getBrickColumnManager();
    BrickColumn left=index < 0 ? null : bcm.getBrickColumns().get(bcm.getCenterColumnStartIndex() + index);
    added=stratomex.addTablePerspectives(Collections.singletonList(event.getTablePerspective()),null,left,true);
  }
 else {
    added=stratomex.addTablePerspectives(Collections.singletonList(event.getTablePerspective()),null,preview,true);
    stratomex.removeTablePerspective(preview.getTablePerspective());
  }
  preview=added.get(0).getSecond();
  preview.getLayout().addBackgroundRenderer(new ConfirmCancelLayoutRenderer(stratomex,templateIndex,this));
}","@ListenTo(sendToMe=true) private void onUpdatePreview(UpdatePreviewEvent event){
  if (templateColumn == null)   return;
  List<Pair<Integer,BrickColumn>> added;
  if (preview == null) {
    int index=destroyTemplate();
    BrickColumnManager bcm=stratomex.getBrickColumnManager();
    BrickColumn left=index < 0 ? null : bcm.getBrickColumns().get(bcm.getCenterColumnStartIndex() + index);
    added=stratomex.addTablePerspectives(Collections.singletonList(event.getTablePerspective()),null,left,false);
  }
 else {
    added=stratomex.addTablePerspectives(Collections.singletonList(event.getTablePerspective()),null,preview,true);
    stratomex.removeTablePerspective(preview.getTablePerspective());
  }
  preview=added.get(0).getSecond();
  preview.getLayout().addBackgroundRenderer(new ConfirmCancelLayoutRenderer(stratomex,templateIndex,this));
}",0.9958799293702176
57090,"@ListenTo(sendToMe=true) private void onConfirmCancelColumn(ConfirmCancelNewColumnEvent event){
  boolean confirm=event.isConfirm();
  if (templateColumn == null && preview == null)   return;
  reset();
  if (preview == null && confirm)   return;
  if (confirm) {
    preview.getLayout().clearBackgroundRenderers();
  }
 else {
    destroyTemplate();
    if (preview != null)     stratomex.removeTablePerspective(preview.getTablePerspective());
  }
  preview=null;
  stratomex.relayout();
}","@ListenTo(sendToMe=true) private void onConfirmCancelColumn(ConfirmCancelNewColumnEvent event){
  boolean confirm=event.isConfirm();
  if (templateColumn == null && preview == null)   return;
  reset();
  if (confirm) {
    if (preview != null)     preview.getLayout().clearBackgroundRenderers();
  }
 else {
    destroyTemplate();
    if (preview != null)     stratomex.removeTablePerspective(preview.getTablePerspective());
  }
  preview=null;
  stratomex.relayout();
  EventPublisher.trigger(new ConfirmedCancelNewColumnEvent().from(this));
}",0.8618357487922705
57091,"public ASelectGroupState(String label,IState target,Object receiver){
  this.label=label;
  this.receiver=receiver;
  this.target=target;
}","public ASelectGroupState(IState target,Object receiver){
  super(target);
  this.receiver=receiver;
}",0.7583333333333333
57092,"@ListenTo(sendToMe=true) private void onEvent(SelectGroupReplyEvent event){
  handleSelection(event.getTablePerspective(),event.getGroup());
  this.onAutomaticSwitch.on(target);
}","@ListenTo(sendToMe=true) private void onEvent(SelectGroupReplyEvent event){
  handleSelection(event.getTablePerspective(),event.getGroup());
  switchToTarget();
}",0.9325513196480938
57093,"public LayoutRendererAdapter(AGLView view,IResourceLocator locator,GLElement root,String eventSpace){
  this.view=view;
  this.root=new WindowGLElement(root);
  this.eventListeners=EventListenerManagers.wrap(view);
  this.eventSpace=eventSpace;
  this.local=new GLContextLocal(view.getTextRenderer(),view.getTextureManager(),locator);
  this.root.init(this);
}","public LayoutRendererAdapter(AGLView view,IResourceLocator locator,GLElement root,String eventSpace){
  this.view=view;
  this.root=new WindowGLElement(root);
  this.eventListeners=EventListenerManagers.createQueued();
  this.eventSpace=eventSpace;
  this.local=new GLContextLocal(view.getTextRenderer(),view.getTextureManager(),locator);
  this.root.init(this);
}",0.9696132596685084
57094,"@Override public void registerEventListeners(){
  super.registerEventListeners();
  enableGeneMappingListener=new EnableGeneMappingListener();
  enableGeneMappingListener.setHandler(this);
  eventPublisher.addListener(PathwayMappingEvent.class,enableGeneMappingListener);
  enRoutePathEventListener=new EnRoutePathEventListener();
  enRoutePathEventListener.setExclusiveEventSpace(pathwayPathEventSpace);
  enRoutePathEventListener.setHandler(this);
  eventPublisher.addListener(PathwayPathSelectionEvent.class,enRoutePathEventListener);
  selectPathModeEventListener=new SelectPathModeEventListener();
  selectPathModeEventListener.setExclusiveEventSpace(pathwayPathEventSpace);
  selectPathModeEventListener.setHandler(this);
  eventPublisher.addListener(EnablePathSelectionEvent.class,selectPathModeEventListener);
  addTablePerspectivesListener=new AddTablePerspectivesListener<>();
  addTablePerspectivesListener.setHandler(this);
  eventPublisher.addListener(AddTablePerspectivesEvent.class,addTablePerspectivesListener);
  sampleMappingModeListener=new SampleMappingModeListener();
  sampleMappingModeListener.setHandler(this);
  eventPublisher.addListener(SampleMappingModeEvent.class,sampleMappingModeListener);
  updateColorMappingListener=new UpdateColorMappingListener();
  updateColorMappingListener.setHandler(this);
  eventPublisher.addListener(UpdateColorMappingEvent.class,updateColorMappingListener);
  showPortalNodesEventListener=new ShowPortalNodesEventListener();
  showPortalNodesEventListener.setHandler(this);
  showPortalNodesEventListener.setEventSpace(pathwayPathEventSpace);
  listeners.register(ShowNodeContextEvent.class,showPortalNodesEventListener);
  listeners.register(this,pathwayPathEventSpace);
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  enRoutePathEventListener=new EnRoutePathEventListener();
  enRoutePathEventListener.setExclusiveEventSpace(pathwayPathEventSpace);
  enRoutePathEventListener.setHandler(this);
  eventPublisher.addListener(PathwayPathSelectionEvent.class,enRoutePathEventListener);
  selectPathModeEventListener=new SelectPathModeEventListener();
  selectPathModeEventListener.setExclusiveEventSpace(pathwayPathEventSpace);
  selectPathModeEventListener.setHandler(this);
  eventPublisher.addListener(EnablePathSelectionEvent.class,selectPathModeEventListener);
  addTablePerspectivesListener=new AddTablePerspectivesListener<>();
  addTablePerspectivesListener.setHandler(this);
  eventPublisher.addListener(AddTablePerspectivesEvent.class,addTablePerspectivesListener);
  sampleMappingModeListener=new SampleMappingModeListener();
  sampleMappingModeListener.setHandler(this);
  eventPublisher.addListener(SampleMappingModeEvent.class,sampleMappingModeListener);
  updateColorMappingListener=new UpdateColorMappingListener();
  updateColorMappingListener.setHandler(this);
  eventPublisher.addListener(UpdateColorMappingEvent.class,updateColorMappingListener);
  showPortalNodesEventListener=new ShowPortalNodesEventListener();
  showPortalNodesEventListener.setHandler(this);
  showPortalNodesEventListener.setEventSpace(pathwayPathEventSpace);
  listeners.register(ShowNodeContextEvent.class,showPortalNodesEventListener);
  listeners.register(this);
}",0.9348894348894348
57095,"private void renderGeneNode(GL2 gl,PathwayVertexRep vertexRep){
  float[] nodeColor;
  float width=pixelGLConverter.getGLWidthForPixelWidth(vertexRep.getWidth());
  float height=pixelGLConverter.getGLHeightForPixelHeight(vertexRep.getHeight());
  gl.glLineWidth(1);
  gl.glEnable(GL.GL_STENCIL_TEST);
  gl.glColorMask(false,false,false,false);
  gl.glDisable(GL.GL_DEPTH_TEST);
  gl.glDisable(GL.GL_BLEND);
  gl.glStencilFunc(GL.GL_GREATER,1,0xff);
  gl.glStencilOp(GL.GL_KEEP,GL.GL_REPLACE,GL.GL_REPLACE);
  renderQuad(gl,width,height);
  gl.glDisable(GL.GL_STENCIL_TEST);
  gl.glColorMask(true,true,true,true);
  gl.glEnable(GL.GL_DEPTH_TEST);
  gl.glEnable(GL.GL_BLEND);
  if (mappingPerspective != null) {
    Average average=getExpressionAverage(mappingPerspective,vertexRep);
    if (average != null) {
      nodeColor=mappingPerspective.getDataDomain().getColorMapper().getColor((float)average.getArithmeticMean());
    }
 else {
      nodeColor=null;
    }
    if (average != null && nodeColor != null) {
      if (glPathwayView.getDetailLevel() == EDetailLevel.HIGH) {
        gl.glEnable(GL.GL_STENCIL_TEST);
        gl.glDisable(GL.GL_DEPTH_TEST);
        gl.glDisable(GL.GL_BLEND);
        gl.glStencilFunc(GL.GL_GREATER,2,0xff);
        gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_KEEP);
        gl.glColor4f(nodeColor[0],nodeColor[1],nodeColor[2],0.8f);
        renderQuad(gl,width,height);
        gl.glEnable(GL.GL_DEPTH_TEST);
        gl.glDisable(GL.GL_STENCIL_TEST);
        Float stdDev=pixelGLConverter.getGLWidthForPixelWidth(PathwayRenderStyle.ENZYME_NODE_PIXEL_WIDTH) * (float)average.getStandardDeviation() * 2.0f;
        if (!stdDev.isNaN()) {
          renderStdDevBar(gl,width,height,stdDev);
        }
        gl.glPushMatrix();
        gl.glTranslatef(0,-(2f * thirdOfstdDevBarHeight - onePxlHeight),0);
        if (vertexSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
          nodeColor=SelectionType.SELECTION.getColor();
          gl.glColor4fv(nodeColor,0);
          renderFrame(gl,width + onePxlWidth,height + (2f * thirdOfstdDevBarHeight) - onePxlHeight);
          gl.glEnable(GL.GL_STENCIL_TEST);
          gl.glColorMask(false,false,false,false);
          gl.glDisable(GL.GL_DEPTH_TEST);
          gl.glDisable(GL.GL_BLEND);
          gl.glStencilFunc(GL.GL_GREATER,2,0xff);
          gl.glStencilOp(GL.GL_KEEP,GL.GL_REPLACE,GL.GL_REPLACE);
          renderFrame(gl,width + onePxlWidth,height + (2f * thirdOfstdDevBarHeight) - onePxlHeight);
          gl.glDisable(GL.GL_STENCIL_TEST);
          gl.glColorMask(true,true,true,true);
          gl.glEnable(GL.GL_DEPTH_TEST);
          gl.glEnable(GL.GL_BLEND);
        }
 else         if (vertexSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
          nodeColor=SelectionType.MOUSE_OVER.getColor();
          gl.glColor4fv(nodeColor,0);
          renderFrame(gl,width + onePxlWidth,height + (2f * thirdOfstdDevBarHeight) - onePxlHeight);
          gl.glEnable(GL.GL_STENCIL_TEST);
          gl.glColorMask(false,false,false,false);
          gl.glDisable(GL.GL_DEPTH_TEST);
          gl.glDisable(GL.GL_BLEND);
          gl.glStencilFunc(GL.GL_GREATER,2,0xff);
          gl.glStencilOp(GL.GL_KEEP,GL.GL_REPLACE,GL.GL_REPLACE);
          renderFrame(gl,width + onePxlWidth,height + (2f * thirdOfstdDevBarHeight) - onePxlHeight);
          gl.glDisable(GL.GL_STENCIL_TEST);
          gl.glColorMask(true,true,true,true);
          gl.glEnable(GL.GL_DEPTH_TEST);
          gl.glEnable(GL.GL_BLEND);
        }
        gl.glPopMatrix();
      }
 else {
        gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
        gl.glEnable(GL.GL_STENCIL_TEST);
        gl.glColorMask(false,false,false,false);
        gl.glDisable(GL.GL_DEPTH_TEST);
        gl.glDisable(GL.GL_BLEND);
        gl.glStencilFunc(GL.GL_ALWAYS,2,0xff);
        gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_REPLACE);
        gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
        gl.glDisable(GL.GL_STENCIL_TEST);
        gl.glColorMask(true,true,true,true);
        gl.glEnable(GL.GL_DEPTH_TEST);
        gl.glEnable(GL.GL_BLEND);
        if (vertexSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
          nodeColor=SelectionType.SELECTION.getColor();
          gl.glColor4fv(nodeColor,0);
          gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
          gl.glEnable(GL.GL_STENCIL_TEST);
          gl.glColorMask(false,false,false,false);
          gl.glDisable(GL.GL_DEPTH_TEST);
          gl.glDisable(GL.GL_BLEND);
          gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_REPLACE);
          gl.glStencilFunc(GL.GL_ALWAYS,2,0xff);
          gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
          gl.glDisable(GL.GL_STENCIL_TEST);
          gl.glColorMask(true,true,true,true);
          gl.glEnable(GL.GL_DEPTH_TEST);
          gl.glEnable(GL.GL_BLEND);
        }
 else         if (vertexSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
          nodeColor=SelectionType.MOUSE_OVER.getColor();
          gl.glColor4fv(nodeColor,0);
          gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
          gl.glEnable(GL.GL_STENCIL_TEST);
          gl.glColorMask(false,false,false,false);
          gl.glDisable(GL.GL_DEPTH_TEST);
          gl.glDisable(GL.GL_BLEND);
          gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_REPLACE);
          gl.glStencilFunc(GL.GL_ALWAYS,2,0xff);
          gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
          gl.glDisable(GL.GL_STENCIL_TEST);
          gl.glColorMask(true,true,true,true);
          gl.glEnable(GL.GL_DEPTH_TEST);
          gl.glEnable(GL.GL_BLEND);
        }
      }
    }
 else {
      gl.glColor4f(0,0,0,0);
      renderQuad(gl,width,height);
      nodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
      gl.glColor4f(nodeColor[0],nodeColor[1],nodeColor[2],0.7f);
      float boxWidth=pixelGLConverter.getGLWidthForPixelWidth(PathwayRenderStyle.COMPOUND_NODE_PIXEL_WIDTH);
      float boxHeight=pixelGLConverter.getGLHeightForPixelHeight(PathwayRenderStyle.COMPOUND_NODE_PIXEL_HEIGHT);
      float y=height;
      gl.glDisable(GL.GL_DEPTH_TEST);
      gl.glBegin(GL2.GL_QUADS);
      gl.glNormal3f(0.0f,0.0f,1.0f);
      gl.glVertex3f(0,boxHeight,PathwayRenderStyle.Z_OFFSET);
      gl.glVertex3f(boxWidth,boxHeight,PathwayRenderStyle.Z_OFFSET);
      gl.glVertex3f(boxWidth,0,PathwayRenderStyle.Z_OFFSET);
      gl.glVertex3f(0,0,PathwayRenderStyle.Z_OFFSET);
      gl.glEnd();
      gl.glEnable(GL.GL_DEPTH_TEST);
      if (vertexSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
        nodeColor=SelectionType.SELECTION.getColor();
        gl.glColor4fv(nodeColor,0);
        renderFrame(gl,width + onePxlWidth,height + thirdOfstdDevBarHeight);
        maskFramedEnzymeNode(gl,width,height);
      }
 else       if (vertexSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
        nodeColor=SelectionType.MOUSE_OVER.getColor();
        gl.glColor4fv(nodeColor,0);
        renderFrame(gl,width + onePxlWidth,height + thirdOfstdDevBarHeight);
        maskFramedEnzymeNode(gl,width,height);
      }
    }
  }
 else {
    if (vertexSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
      nodeColor=SelectionType.SELECTION.getColor();
      maskFramedEnzymeNode(gl,width,height);
    }
 else     if (vertexSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
      nodeColor=SelectionType.MOUSE_OVER.getColor();
      maskFramedEnzymeNode(gl,width,height);
    }
 else     if (vertexSelectionManager.checkStatus(SelectionType.NORMAL,vertexRep.getID())) {
      nodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
    }
 else {
      nodeColor=new float[]{0,0,0,0};
    }
    gl.glColor4fv(nodeColor,0);
    renderFrame(gl,width + onePxlWidth,height + thirdOfstdDevBarHeight);
    gl.glCallList(framedEnzymeNodeDisplayListId);
    if (!vertexSelectionManager.checkStatus(SelectionType.DESELECTED,vertexRep.getID())) {
      gl.glColor4f(0,0,0,0);
      renderQuad(gl,width,height);
    }
  }
}","private void renderGeneNode(GL2 gl,PathwayVertexRep vertexRep){
  float[] nodeColor;
  float width=pixelGLConverter.getGLWidthForPixelWidth(vertexRep.getWidth());
  float height=pixelGLConverter.getGLHeightForPixelHeight(vertexRep.getHeight());
  gl.glLineWidth(1);
  gl.glEnable(GL.GL_STENCIL_TEST);
  gl.glColorMask(false,false,false,false);
  gl.glDisable(GL.GL_DEPTH_TEST);
  gl.glDisable(GL.GL_BLEND);
  gl.glStencilFunc(GL.GL_GREATER,1,0xff);
  gl.glStencilOp(GL.GL_KEEP,GL.GL_REPLACE,GL.GL_REPLACE);
  renderQuad(gl,width,height);
  gl.glDisable(GL.GL_STENCIL_TEST);
  gl.glColorMask(true,true,true,true);
  gl.glEnable(GL.GL_DEPTH_TEST);
  gl.glEnable(GL.GL_BLEND);
  if (mappingPerspective != null) {
    Average average=getExpressionAverage(mappingPerspective,vertexRep);
    if (average != null) {
      nodeColor=mappingPerspective.getDataDomain().getColorMapper().getColor((float)average.getArithmeticMean());
    }
 else {
      nodeColor=null;
    }
    if (average != null && nodeColor != null) {
      gl.glColor4f(nodeColor[0],nodeColor[1],nodeColor[2],0.8f);
      if (glPathwayView.getDetailLevel() == EDetailLevel.HIGH) {
        gl.glEnable(GL.GL_STENCIL_TEST);
        gl.glDisable(GL.GL_DEPTH_TEST);
        gl.glDisable(GL.GL_BLEND);
        gl.glStencilFunc(GL.GL_GREATER,2,0xff);
        gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_KEEP);
        renderQuad(gl,width,height);
        gl.glEnable(GL.GL_DEPTH_TEST);
        gl.glDisable(GL.GL_STENCIL_TEST);
        Float stdDev=pixelGLConverter.getGLWidthForPixelWidth(PathwayRenderStyle.ENZYME_NODE_PIXEL_WIDTH) * (float)average.getStandardDeviation() * 2.0f;
        if (!stdDev.isNaN()) {
          renderStdDevBar(gl,width,height,stdDev);
        }
        gl.glPushMatrix();
        gl.glTranslatef(0,-(2f * thirdOfstdDevBarHeight - onePxlHeight),0);
        if (vertexSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
          nodeColor=SelectionType.SELECTION.getColor();
          gl.glColor4fv(nodeColor,0);
          renderFrame(gl,width + onePxlWidth,height + (2f * thirdOfstdDevBarHeight) - onePxlHeight);
          gl.glEnable(GL.GL_STENCIL_TEST);
          gl.glColorMask(false,false,false,false);
          gl.glDisable(GL.GL_DEPTH_TEST);
          gl.glDisable(GL.GL_BLEND);
          gl.glStencilFunc(GL.GL_GREATER,2,0xff);
          gl.glStencilOp(GL.GL_KEEP,GL.GL_REPLACE,GL.GL_REPLACE);
          renderFrame(gl,width + onePxlWidth,height + (2f * thirdOfstdDevBarHeight) - onePxlHeight);
          gl.glDisable(GL.GL_STENCIL_TEST);
          gl.glColorMask(true,true,true,true);
          gl.glEnable(GL.GL_DEPTH_TEST);
          gl.glEnable(GL.GL_BLEND);
        }
 else         if (vertexSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
          nodeColor=SelectionType.MOUSE_OVER.getColor();
          gl.glColor4fv(nodeColor,0);
          renderFrame(gl,width + onePxlWidth,height + (2f * thirdOfstdDevBarHeight) - onePxlHeight);
          gl.glEnable(GL.GL_STENCIL_TEST);
          gl.glColorMask(false,false,false,false);
          gl.glDisable(GL.GL_DEPTH_TEST);
          gl.glDisable(GL.GL_BLEND);
          gl.glStencilFunc(GL.GL_GREATER,2,0xff);
          gl.glStencilOp(GL.GL_KEEP,GL.GL_REPLACE,GL.GL_REPLACE);
          renderFrame(gl,width + onePxlWidth,height + (2f * thirdOfstdDevBarHeight) - onePxlHeight);
          gl.glDisable(GL.GL_STENCIL_TEST);
          gl.glColorMask(true,true,true,true);
          gl.glEnable(GL.GL_DEPTH_TEST);
          gl.glEnable(GL.GL_BLEND);
        }
        gl.glPopMatrix();
      }
 else {
        renderQuad(gl,width * 3,height * 3);
        gl.glEnable(GL.GL_STENCIL_TEST);
        gl.glColorMask(false,false,false,false);
        gl.glDisable(GL.GL_DEPTH_TEST);
        gl.glDisable(GL.GL_BLEND);
        gl.glStencilFunc(GL.GL_ALWAYS,2,0xff);
        gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_REPLACE);
        renderQuad(gl,width * 3,height * 3);
        gl.glDisable(GL.GL_STENCIL_TEST);
        gl.glColorMask(true,true,true,true);
        gl.glEnable(GL.GL_DEPTH_TEST);
        gl.glEnable(GL.GL_BLEND);
        if (vertexSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
          nodeColor=SelectionType.SELECTION.getColor();
          gl.glColor4fv(nodeColor,0);
          renderQuad(gl,width * 3,height * 3);
          gl.glEnable(GL.GL_STENCIL_TEST);
          gl.glColorMask(false,false,false,false);
          gl.glDisable(GL.GL_DEPTH_TEST);
          gl.glDisable(GL.GL_BLEND);
          gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_REPLACE);
          gl.glStencilFunc(GL.GL_ALWAYS,2,0xff);
          renderQuad(gl,width * 3,height * 3);
          gl.glDisable(GL.GL_STENCIL_TEST);
          gl.glColorMask(true,true,true,true);
          gl.glEnable(GL.GL_DEPTH_TEST);
          gl.glEnable(GL.GL_BLEND);
        }
 else         if (vertexSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
          nodeColor=SelectionType.MOUSE_OVER.getColor();
          gl.glColor4fv(nodeColor,0);
          renderQuad(gl,width * 3,height * 3);
          gl.glEnable(GL.GL_STENCIL_TEST);
          gl.glColorMask(false,false,false,false);
          gl.glDisable(GL.GL_DEPTH_TEST);
          gl.glDisable(GL.GL_BLEND);
          gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_REPLACE);
          gl.glStencilFunc(GL.GL_ALWAYS,2,0xff);
          renderQuad(gl,width * 3,height * 3);
          gl.glDisable(GL.GL_STENCIL_TEST);
          gl.glColorMask(true,true,true,true);
          gl.glEnable(GL.GL_DEPTH_TEST);
          gl.glEnable(GL.GL_BLEND);
        }
      }
    }
 else {
      gl.glColor4f(0,0,0,0);
      renderQuad(gl,width,height);
      nodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
      gl.glColor4f(nodeColor[0],nodeColor[1],nodeColor[2],0.7f);
      float boxWidth=pixelGLConverter.getGLWidthForPixelWidth(PathwayRenderStyle.COMPOUND_NODE_PIXEL_WIDTH);
      float boxHeight=pixelGLConverter.getGLHeightForPixelHeight(PathwayRenderStyle.COMPOUND_NODE_PIXEL_HEIGHT);
      float y=height;
      gl.glDisable(GL.GL_DEPTH_TEST);
      gl.glBegin(GL2.GL_QUADS);
      gl.glNormal3f(0.0f,0.0f,1.0f);
      gl.glVertex3f(0,boxHeight,PathwayRenderStyle.Z_OFFSET);
      gl.glVertex3f(boxWidth,boxHeight,PathwayRenderStyle.Z_OFFSET);
      gl.glVertex3f(boxWidth,0,PathwayRenderStyle.Z_OFFSET);
      gl.glVertex3f(0,0,PathwayRenderStyle.Z_OFFSET);
      gl.glEnd();
      gl.glEnable(GL.GL_DEPTH_TEST);
      if (vertexSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
        nodeColor=SelectionType.SELECTION.getColor();
        gl.glColor4fv(nodeColor,0);
        renderFrame(gl,width + onePxlWidth,height + thirdOfstdDevBarHeight);
        maskFramedEnzymeNode(gl,width,height);
      }
 else       if (vertexSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
        nodeColor=SelectionType.MOUSE_OVER.getColor();
        gl.glColor4fv(nodeColor,0);
        renderFrame(gl,width + onePxlWidth,height + thirdOfstdDevBarHeight);
        maskFramedEnzymeNode(gl,width,height);
      }
    }
  }
 else {
    if (vertexSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
      nodeColor=SelectionType.SELECTION.getColor();
      maskFramedEnzymeNode(gl,width,height);
    }
 else     if (vertexSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
      nodeColor=SelectionType.MOUSE_OVER.getColor();
      maskFramedEnzymeNode(gl,width,height);
    }
 else     if (vertexSelectionManager.checkStatus(SelectionType.NORMAL,vertexRep.getID())) {
      nodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
    }
 else {
      nodeColor=new float[]{0,0,0,0};
    }
    gl.glColor4fv(nodeColor,0);
    renderFrame(gl,width + onePxlWidth,height + thirdOfstdDevBarHeight);
    gl.glCallList(framedEnzymeNodeDisplayListId);
    if (!vertexSelectionManager.checkStatus(SelectionType.DESELECTED,vertexRep.getID())) {
      gl.glColor4f(0,0,0,0);
      renderQuad(gl,width,height);
    }
  }
}",0.9336299592139414
57096,"@Override public AGLView createRemoteView(AGLView remoteRenderingView,List<TablePerspective> tablePerspectives,String embeddingEventSpace){
  GLPathway pathwayView=(GLPathway)GeneralManager.get().getViewManager().createGLView(GLPathway.class,remoteRenderingView.getParentGLCanvas(),remoteRenderingView.getParentComposite(),new ViewFrustum(CameraProjectionMode.ORTHOGRAPHIC,0,1,0,1,-1,1));
  if (tablePerspectives.size() > 0) {
    TablePerspective tablePerspective=tablePerspectives.get(0);
    if (!(tablePerspective instanceof PathwayTablePerspective)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    pathwayView.setRemoteRenderingGLView((IGLRemoteRenderingView)remoteRenderingView);
    pathwayView.addTablePerspective(tablePerspective);
  }
  pathwayView.setPathwayPathEventSpace(embeddingEventSpace);
  pathwayView.setMinHeightPixels(120);
  pathwayView.setMinWidthPixels(120);
  pathwayView.setDynamicDetail(true);
  pathwayView.initialize();
  return pathwayView;
}","@Override public AGLView createRemoteView(AGLView remoteRenderingView,List<TablePerspective> tablePerspectives,String embeddingEventSpace){
  GLPathway pathwayView=(GLPathway)GeneralManager.get().getViewManager().createGLView(GLPathway.class,remoteRenderingView.getParentGLCanvas(),remoteRenderingView.getParentComposite(),new ViewFrustum(CameraProjectionMode.ORTHOGRAPHIC,0,1,0,1,-1,1));
  TablePerspective tablePerspective=null;
  if (tablePerspectives.size() > 0) {
    tablePerspective=tablePerspectives.get(0);
    if (!(tablePerspective instanceof PathwayTablePerspective)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    pathwayView.setRemoteRenderingGLView((IGLRemoteRenderingView)remoteRenderingView);
    pathwayView.addTablePerspective(tablePerspective);
  }
  pathwayView.setPathwayPathEventSpace(embeddingEventSpace);
  pathwayView.setMinHeightPixels(120);
  pathwayView.setMinWidthPixels(120);
  pathwayView.setDynamicDetail(true);
  pathwayView.initialize();
  PathwayMappingEvent event=new PathwayMappingEvent(tablePerspective);
  event.to(pathwayView);
  pathwayView.onMapTablePerspective(event);
  return pathwayView;
}",0.9078276980083372
57097,"@Override public void addToolBarContent(){
  SelectPathAction selectPathAction=new SelectPathAction(false,GLPathway.DEFAULT_PATHWAY_PATH_EVENT_SPACE);
  if (view instanceof GLPathway)   ((GLPathway)view).setSelectPathAction(selectPathAction);
  toolBarManager.add(selectPathAction);
  toolBarManager.add(new ClearPathAction(GLPathway.DEFAULT_PATHWAY_PATH_EVENT_SPACE));
  SampleSelectionMode sampleSelectionMode=new SampleSelectionMode(((SerializedPathwayView)serializedView).getMappingMode());
  toolBarManager.add(sampleSelectionMode);
  DatasetSelectionBox dataSelectionBox=new DatasetSelectionBox(DataDomainManager.get().getDataDomainByID(((SerializedPathwayView)serializedView).getDataDomainID()));
  toolBarManager.add(dataSelectionBox);
  PathwaySearchBox pathwaySearchBox=new PathwaySearchBox((GLPathway)view);
  toolBarManager.add(pathwaySearchBox);
  toolBarManager.add(new OpenOnlineHelpAction(""String_Node_Str"",false));
}","@Override public void addToolBarContent(){
  SelectPathAction selectPathAction=new SelectPathAction(false,GLPathway.DEFAULT_PATHWAY_PATH_EVENT_SPACE);
  if (view instanceof GLPathway)   ((GLPathway)view).setSelectPathAction(selectPathAction);
  toolBarManager.add(selectPathAction);
  toolBarManager.add(new ClearPathAction(GLPathway.DEFAULT_PATHWAY_PATH_EVENT_SPACE));
  SampleSelectionMode sampleSelectionMode=new SampleSelectionMode(((SerializedPathwayView)serializedView).getMappingMode());
  toolBarManager.add(sampleSelectionMode);
  DatasetSelectionBox dataSelectionBox=new DatasetSelectionBox(DataDomainManager.get().getDataDomainByID(((SerializedPathwayView)serializedView).getDataDomainID()),(GLPathway)view);
  toolBarManager.add(dataSelectionBox);
  PathwaySearchBox pathwaySearchBox=new PathwaySearchBox((GLPathway)view);
  toolBarManager.add(pathwaySearchBox);
  toolBarManager.add(new OpenOnlineHelpAction(""String_Node_Str"",false));
}",0.9914984059511158
57098,"@Override public void handleEvent(AEvent event){
  if (event instanceof PathwayMappingEvent) {
    PathwayMappingEvent pEvent=(PathwayMappingEvent)event;
    handler.mapTablePerspective(pEvent.getTablePerspective());
  }
}","@Override public void handleEvent(AEvent event){
  if (event instanceof PathwayMappingEvent) {
    PathwayMappingEvent pEvent=(PathwayMappingEvent)event;
  }
}",0.8346456692913385
57099,"@Override public void widgetSelected(SelectionEvent e){
  for (  AGLView view : ViewManager.get().getAllGLViews()) {
    if (view instanceof GLPathway) {
      GLPathway pwView=(GLPathway)view;
      AddTablePerspectivesEvent addTablePerspectivesEvent=new AddTablePerspectivesEvent();
      addTablePerspectivesEvent.setReceiver(pwView);
      TablePerspective tablePerspective=null;
      if (dataSetChooser.getSelectionIndex() != 0) {
        GeneticDataDomain dataDomain=candidateDataDomains.get(dataSetChooser.getSelectionIndex() - 1);
        addTablePerspectivesEvent.setEventSpace(dataDomain.getDataDomainID());
        tablePerspective=dataDomain.getDefaultTablePerspective();
        tablePerspective.setPrivate(false);
        addTablePerspectivesEvent.addTablePerspective(tablePerspective);
        GeneralManager.get().getEventPublisher().triggerEvent(addTablePerspectivesEvent);
        PathwayMappingEvent event=new PathwayMappingEvent(tablePerspective);
        event.setSender(this);
        GeneralManager.get().getEventPublisher().triggerEvent(event);
      }
 else {
        PathwayMappingEvent event=new PathwayMappingEvent();
        event.setSender(this);
        GeneralManager.get().getEventPublisher().triggerEvent(event);
      }
    }
  }
}","@Override public void widgetSelected(SelectionEvent e){
  AddTablePerspectivesEvent addTablePerspectivesEvent=new AddTablePerspectivesEvent();
  addTablePerspectivesEvent.setReceiver(pathwayView);
  TablePerspective tablePerspective=null;
  if (dataSetChooser.getSelectionIndex() != 0) {
    GeneticDataDomain dataDomain=candidateDataDomains.get(dataSetChooser.getSelectionIndex() - 1);
    addTablePerspectivesEvent.setEventSpace(dataDomain.getDataDomainID());
    tablePerspective=dataDomain.getDefaultTablePerspective();
    tablePerspective.setPrivate(false);
    addTablePerspectivesEvent.addTablePerspective(tablePerspective);
    GeneralManager.get().getEventPublisher().triggerEvent(addTablePerspectivesEvent);
    PathwayMappingEvent event=new PathwayMappingEvent(tablePerspective);
    event.setSender(this);
    event.to(pathwayView);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
  }
 else {
    PathwayMappingEvent event=new PathwayMappingEvent();
    event.setSender(this);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
  }
}",0.7561807331628303
57100,"/** 
 * constructor as requested by ControlContribution
 */
public DatasetSelectionBox(IDataDomain mappingDataDomain){
  super(""String_Node_Str"");
  this.mappingDataDomain=mappingDataDomain;
}","/** 
 * constructor as requested by ControlContribution
 */
public DatasetSelectionBox(IDataDomain mappingDataDomain,GLPathway pathwayView){
  super(""String_Node_Str"");
  this.mappingDataDomain=mappingDataDomain;
  this.pathwayView=pathwayView;
}",0.8767123287671232
57101,"@Override protected Control createControl(Composite parent){
  dataSetChooser=new Combo(parent,SWT.BORDER);
  dataSetChooser.setText(""String_Node_Str"");
  dataSetChooser.setToolTipText(""String_Node_Str"");
  GridData gd=new GridData(SWT.RIGHT,SWT.TOP,false,false);
  gd.widthHint=100;
  dataSetChooser.setLayoutData(gd);
  final List<GeneticDataDomain> candidateDataDomains=DataDomainManager.get().getDataDomainsByType(GeneticDataDomain.class);
  String[] datasetNames=new String[candidateDataDomains.size() + 1];
  datasetNames[0]=""String_Node_Str"";
  int selectionIndex=0;
  for (int datasetCount=1; datasetCount <= candidateDataDomains.size(); datasetCount++) {
    datasetNames[datasetCount]=candidateDataDomains.get(datasetCount - 1).getDataSetDescription().getDataSetName();
    if (candidateDataDomains.get(datasetCount - 1) == mappingDataDomain) {
      selectionIndex=datasetCount;
    }
  }
  dataSetChooser.setItems(datasetNames);
  dataSetChooser.select(selectionIndex);
  dataSetChooser.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (      AGLView view : ViewManager.get().getAllGLViews()) {
        if (view instanceof GLPathway) {
          GLPathway pwView=(GLPathway)view;
          AddTablePerspectivesEvent addTablePerspectivesEvent=new AddTablePerspectivesEvent();
          addTablePerspectivesEvent.setReceiver(pwView);
          TablePerspective tablePerspective=null;
          if (dataSetChooser.getSelectionIndex() != 0) {
            GeneticDataDomain dataDomain=candidateDataDomains.get(dataSetChooser.getSelectionIndex() - 1);
            addTablePerspectivesEvent.setEventSpace(dataDomain.getDataDomainID());
            tablePerspective=dataDomain.getDefaultTablePerspective();
            tablePerspective.setPrivate(false);
            addTablePerspectivesEvent.addTablePerspective(tablePerspective);
            GeneralManager.get().getEventPublisher().triggerEvent(addTablePerspectivesEvent);
            PathwayMappingEvent event=new PathwayMappingEvent(tablePerspective);
            event.setSender(this);
            GeneralManager.get().getEventPublisher().triggerEvent(event);
          }
 else {
            PathwayMappingEvent event=new PathwayMappingEvent();
            event.setSender(this);
            GeneralManager.get().getEventPublisher().triggerEvent(event);
          }
        }
      }
    }
  }
);
  return dataSetChooser;
}","@Override protected Control createControl(Composite parent){
  dataSetChooser=new Combo(parent,SWT.BORDER);
  dataSetChooser.setText(""String_Node_Str"");
  dataSetChooser.setToolTipText(""String_Node_Str"");
  GridData gd=new GridData(SWT.RIGHT,SWT.TOP,false,false);
  gd.widthHint=100;
  dataSetChooser.setLayoutData(gd);
  final List<GeneticDataDomain> candidateDataDomains=DataDomainManager.get().getDataDomainsByType(GeneticDataDomain.class);
  String[] datasetNames=new String[candidateDataDomains.size() + 1];
  datasetNames[0]=""String_Node_Str"";
  int selectionIndex=0;
  for (int datasetCount=1; datasetCount <= candidateDataDomains.size(); datasetCount++) {
    datasetNames[datasetCount]=candidateDataDomains.get(datasetCount - 1).getDataSetDescription().getDataSetName();
    if (candidateDataDomains.get(datasetCount - 1) == mappingDataDomain) {
      selectionIndex=datasetCount;
    }
  }
  dataSetChooser.setItems(datasetNames);
  dataSetChooser.select(selectionIndex);
  dataSetChooser.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      AddTablePerspectivesEvent addTablePerspectivesEvent=new AddTablePerspectivesEvent();
      addTablePerspectivesEvent.setReceiver(pathwayView);
      TablePerspective tablePerspective=null;
      if (dataSetChooser.getSelectionIndex() != 0) {
        GeneticDataDomain dataDomain=candidateDataDomains.get(dataSetChooser.getSelectionIndex() - 1);
        addTablePerspectivesEvent.setEventSpace(dataDomain.getDataDomainID());
        tablePerspective=dataDomain.getDefaultTablePerspective();
        tablePerspective.setPrivate(false);
        addTablePerspectivesEvent.addTablePerspective(tablePerspective);
        GeneralManager.get().getEventPublisher().triggerEvent(addTablePerspectivesEvent);
        PathwayMappingEvent event=new PathwayMappingEvent(tablePerspective);
        event.setSender(this);
        event.to(pathwayView);
        GeneralManager.get().getEventPublisher().triggerEvent(event);
      }
 else {
        PathwayMappingEvent event=new PathwayMappingEvent();
        event.setSender(this);
        GeneralManager.get().getEventPublisher().triggerEvent(event);
      }
    }
  }
);
  return dataSetChooser;
}",0.5040442741592167
57102,"/** 
 * Initializes the container.
 * @param size
 * @param dataType
 * @param unknownCategoryType The value used for the unknown value. Use  {@link #UNKNOWN_CATEGORY_INT} and{@link #UNKNOWN_CATEOGRY_STRING} unless there is a good reason not to do so.
 */
public CategoricalContainer(int size,EDataType dataType,CATEGORY_TYPE unknownCategoryType){
  container=new short[size];
  this.unknownCategoryType=unknownCategoryType;
  add(unknownCategoryType);
}","/** 
 * Initializes the container.
 * @param size
 * @param dataType
 * @param unknownCategoryType The value used for the unknown value. Use  {@link #UNKNOWN_CATEGORY_INT} and{@link #UNKNOWN_CATEOGRY_STRING} unless there is a good reason not to do so.
 */
public CategoricalContainer(int size,EDataType dataType,CATEGORY_TYPE unknownCategoryType){
  container=new short[size];
  this.unknownCategoryType=unknownCategoryType;
  initCategory(unknownCategoryType);
}",0.9836423118865868
57103,"@Override protected void parseFile(BufferedReader reader) throws IOException {
  initializTables();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + dataSetDescription.getDataSetName());
  float progressBarFactor=100f / numberOfLinesInFile;
  for (int countHeaderLines=0; countHeaderLines < dataSetDescription.getNumberOfHeaderLines(); countHeaderLines++) {
    reader.readLine();
  }
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getOrCreateParsingPattern();
  int lineCounter=0;
  String numberParsingErrorMessage=""String_Node_Str"" + dataSetDescription.getDataSetName() + ""String_Node_Str""+ filePath+ ""String_Node_Str"";
  boolean parsingErrorOccured=false;
  IDSpecification rowIDSpecification=dataSetDescription.getRowIDSpecification();
  IDCategory rowIDCategory=IDCategory.getIDCategory(rowIDSpecification.getIdCategory());
  IDType fromIDType=IDType.getIDType(rowIDSpecification.getIdType());
  IDType toIDType;
  if (dataDomain.isColumnDimension())   toIDType=dataDomain.getRecordIDType();
 else   toIDType=dataDomain.getDimensionIDType();
  IDMappingManager rowIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(rowIDCategory);
  int columnOfRowIDs=dataSetDescription.getColumnOfRowIds();
  MappingType mappingType=rowIDMappingManager.createMap(fromIDType,toIDType,false,true);
  IDTypeParsingRules parsingRules=null;
  if (rowIDSpecification.getIdTypeParsingRules() != null)   parsingRules=rowIDSpecification.getIdTypeParsingRules();
 else   if (toIDType.getIdTypeParsingRules() != null)   parsingRules=fromIDType.getIdTypeParsingRules();
  String line;
  DataDescription dataDescription=dataSetDescription.getDataDescription();
  while ((line=reader.readLine()) != null) {
    String splitLine[]=line.split(dataSetDescription.getDelimiter());
    String id=splitLine[columnOfRowIDs];
    id=convertID(id,parsingRules);
    rowIDMappingManager.addMapping(mappingType,id,lineCounter - startParsingAtLine);
    for (int count=0; count < parsingPattern.size(); count++) {
      ColumnDescription columnDescription=parsingPattern.get(count);
      if (columnDescription.getDataDescription() != null) {
        dataDescription=columnDescription.getDataDescription();
      }
      String cellContent=splitLine[columnDescription.getColumn()];
      try {
switch (dataDescription.getRawDataType()) {
case FLOAT:
          float floatValue;
        FloatContainer targetColumn=(FloatContainer)targetRawContainer.get(count);
      try {
        floatValue=Float.parseFloat(cellContent);
        targetColumn.add(floatValue);
      }
 catch (      NumberFormatException nfe) {
        parsingErrorOccured=true;
        numberParsingErrorMessage+=""String_Node_Str"" + (columnDescription.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
        targetColumn.addUnknown();
      }
    break;
case INTEGER:
  Integer intValue;
@SuppressWarnings(""String_Node_Str"") IContainer<Integer> targetIntColumn=(IContainer<Integer>)targetRawContainer.get(count);
try {
intValue=Integer.parseInt(cellContent);
targetIntColumn.add(intValue);
}
 catch (NumberFormatException nfe) {
parsingErrorOccured=true;
numberParsingErrorMessage+=""String_Node_Str"" + (columnDescription.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
targetIntColumn.addUnknown();
}
break;
case STRING:
String stringValue=cellContent.trim();
@SuppressWarnings(""String_Node_Str"") IContainer<String> targetStringColumn=(IContainer<String>)targetRawContainer.get(count);
if (stringValue.length() == 0) {
targetStringColumn.addUnknown();
parsingErrorOccured=true;
}
 else {
targetStringColumn.add(stringValue);
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + dataDescription.getRawDataType());
}
}
 catch (IndexOutOfBoundsException ioobe) {
Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"" + lineCounter + ""String_Node_Str""+ count));
}
}
if (lineCounter % 100 == 0) {
swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
}
lineCounter++;
}
if (parsingErrorOccured) {
Logger.log(new Status(IStatus.ERROR,GeneralManager.PLUGIN_ID,numberParsingErrorMessage));
}
}","@Override protected void parseFile(BufferedReader reader) throws IOException {
  initializTables();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + dataSetDescription.getDataSetName());
  float progressBarFactor=100f / numberOfLinesInFile;
  for (int countHeaderLines=0; countHeaderLines < dataSetDescription.getNumberOfHeaderLines(); countHeaderLines++) {
    reader.readLine();
  }
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getOrCreateParsingPattern();
  int lineCounter=0;
  String numberParsingErrorMessage=""String_Node_Str"" + dataSetDescription.getDataSetName() + ""String_Node_Str""+ filePath+ ""String_Node_Str"";
  boolean parsingErrorOccured=false;
  IDSpecification rowIDSpecification=dataSetDescription.getRowIDSpecification();
  IDCategory rowIDCategory=IDCategory.getIDCategory(rowIDSpecification.getIdCategory());
  IDType fromIDType=IDType.getIDType(rowIDSpecification.getIdType());
  IDType toIDType;
  if (dataDomain.isColumnDimension())   toIDType=dataDomain.getRecordIDType();
 else   toIDType=dataDomain.getDimensionIDType();
  IDMappingManager rowIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(rowIDCategory);
  int columnOfRowIDs=dataSetDescription.getColumnOfRowIds();
  MappingType mappingType=rowIDMappingManager.createMap(fromIDType,toIDType,false,true);
  IDTypeParsingRules parsingRules=null;
  if (rowIDSpecification.getIdTypeParsingRules() != null)   parsingRules=rowIDSpecification.getIdTypeParsingRules();
 else   if (toIDType.getIdTypeParsingRules() != null)   parsingRules=fromIDType.getIdTypeParsingRules();
  String line;
  DataDescription dataDescription=dataSetDescription.getDataDescription();
  while ((line=reader.readLine()) != null) {
    String splitLine[]=line.split(dataSetDescription.getDelimiter());
    String id=splitLine[columnOfRowIDs];
    id=convertID(id,parsingRules);
    rowIDMappingManager.addMapping(mappingType,id,lineCounter);
    for (int count=0; count < parsingPattern.size(); count++) {
      ColumnDescription columnDescription=parsingPattern.get(count);
      if (columnDescription.getDataDescription() != null) {
        dataDescription=columnDescription.getDataDescription();
      }
      String cellContent=splitLine[columnDescription.getColumn()];
      try {
switch (dataDescription.getRawDataType()) {
case FLOAT:
          float floatValue;
        FloatContainer targetColumn=(FloatContainer)targetRawContainer.get(count);
      try {
        floatValue=Float.parseFloat(cellContent);
        targetColumn.add(floatValue);
      }
 catch (      NumberFormatException nfe) {
        parsingErrorOccured=true;
        numberParsingErrorMessage+=""String_Node_Str"" + (columnDescription.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
        targetColumn.addUnknown();
      }
    break;
case INTEGER:
  Integer intValue;
@SuppressWarnings(""String_Node_Str"") IContainer<Integer> targetIntColumn=(IContainer<Integer>)targetRawContainer.get(count);
try {
intValue=Integer.parseInt(cellContent);
targetIntColumn.add(intValue);
}
 catch (NumberFormatException nfe) {
parsingErrorOccured=true;
numberParsingErrorMessage+=""String_Node_Str"" + (columnDescription.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
targetIntColumn.addUnknown();
}
break;
case STRING:
String stringValue=cellContent.trim();
@SuppressWarnings(""String_Node_Str"") IContainer<String> targetStringColumn=(IContainer<String>)targetRawContainer.get(count);
if (stringValue.length() == 0) {
targetStringColumn.addUnknown();
parsingErrorOccured=true;
}
 else {
targetStringColumn.add(stringValue);
}
break;
default :
throw new IllegalStateException(""String_Node_Str"" + dataDescription.getRawDataType());
}
}
 catch (IndexOutOfBoundsException ioobe) {
Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"" + lineCounter + ""String_Node_Str""+ count,ioobe));
}
}
if (lineCounter % 100 == 0) {
swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
}
lineCounter++;
}
if (parsingErrorOccured) {
Logger.log(new Status(IStatus.ERROR,this.toString(),numberParsingErrorMessage));
}
}",0.9879154078549848
57104,"private DataSetDescription setUpMRNAData(){
  DataSetDescription mrnaData=new DataSetDescription(ECreateDefaultProperties.NUMERICAL);
  mrnaData.setDataSetName(""String_Node_Str"");
  mrnaData.setDataSourcePath(MRNA);
  mrnaData.setNumberOfHeaderLines(2);
  mrnaData.setRowOfColumnIDs(0);
  ParsingRule parsingRule=new ParsingRule();
  parsingRule.setFromColumn(1);
  parsingRule.setParseUntilEnd(true);
  parsingRule.setColumnDescripton(new ColumnDescription());
  mrnaData.addParsingRule(parsingRule);
  mrnaData.setTransposeMatrix(true);
  IDSpecification geneIDSpecification=new IDSpecification();
  geneIDSpecification.setIDTypeGene(true);
  geneIDSpecification.setIdType(""String_Node_Str"");
  mrnaData.setRowIDSpecification(geneIDSpecification);
  mrnaData.setColumnIDSpecification(sampleIDSpecification);
  GroupingParseSpecification firehoseClustering=new GroupingParseSpecification(MRNA_GROUPING);
  firehoseClustering.setContainsColumnIDs(false);
  firehoseClustering.setRowIDSpecification(sampleIDSpecification);
  mrnaData.addColumnGroupingSpecification(firehoseClustering);
  GroupingParseSpecification groundTruthGrouping=new GroupingParseSpecification();
  groundTruthGrouping.setDataSourcePath(GROUND_TRUTH_GROUPING);
  groundTruthGrouping.addColum(2);
  groundTruthGrouping.setRowIDSpecification(sampleIDSpecification);
  mrnaData.addColumnGroupingSpecification(groundTruthGrouping);
  return mrnaData;
}","private DataSetDescription setUpMRNAData(){
  DataSetDescription mrnaData=new DataSetDescription(ECreateDefaultProperties.NUMERICAL);
  mrnaData.setDataSetName(""String_Node_Str"");
  mrnaData.setDataSourcePath(MRNA);
  mrnaData.setNumberOfHeaderLines(3);
  mrnaData.setRowOfColumnIDs(2);
  ParsingRule parsingRule=new ParsingRule();
  parsingRule.setFromColumn(1);
  parsingRule.setParseUntilEnd(true);
  parsingRule.setColumnDescripton(new ColumnDescription());
  mrnaData.addParsingRule(parsingRule);
  mrnaData.setTransposeMatrix(true);
  IDSpecification geneIDSpecification=new IDSpecification();
  geneIDSpecification.setIDTypeGene(true);
  geneIDSpecification.setIdType(""String_Node_Str"");
  mrnaData.setRowIDSpecification(geneIDSpecification);
  mrnaData.setColumnIDSpecification(sampleIDSpecification);
  GroupingParseSpecification firehoseClustering=new GroupingParseSpecification(MRNA_GROUPING);
  firehoseClustering.setContainsColumnIDs(false);
  firehoseClustering.setRowIDSpecification(sampleIDSpecification);
  mrnaData.addColumnGroupingSpecification(firehoseClustering);
  GroupingParseSpecification groundTruthGrouping=new GroupingParseSpecification();
  groundTruthGrouping.setDataSourcePath(GROUND_TRUTH_GROUPING);
  groundTruthGrouping.addColum(2);
  groundTruthGrouping.setRowIDSpecification(sampleIDSpecification);
  mrnaData.addColumnGroupingSpecification(groundTruthGrouping);
  return mrnaData;
}",0.9985905567300916
57105,"private DataSetDescription setUpCopyNumberData(){
  DataSetDescription copyNumberData=new DataSetDescription(ECreateDefaultProperties.CATEGORICAL);
  copyNumberData.setDataSetName(""String_Node_Str"");
  copyNumberData.setDataSourcePath(COPY_NUMBER);
  copyNumberData.setNumberOfHeaderLines(1);
  ParsingRule parsingRule=new ParsingRule();
  parsingRule.setFromColumn(3);
  parsingRule.setParseUntilEnd(true);
  parsingRule.setColumnDescripton(new ColumnDescription());
  copyNumberData.addParsingRule(parsingRule);
  copyNumberData.setTransposeMatrix(true);
  IDSpecification geneIDSpecification=new IDSpecification();
  geneIDSpecification.setIDTypeGene(true);
  geneIDSpecification.setIdType(""String_Node_Str"");
  copyNumberData.setRowIDSpecification(geneIDSpecification);
  copyNumberData.setColumnIDSpecification(sampleIDSpecification);
  GroupingParseSpecification groundTruthGrouping=new GroupingParseSpecification();
  groundTruthGrouping.setDataSourcePath(GROUND_TRUTH_GROUPING);
  groundTruthGrouping.addColum(2);
  groundTruthGrouping.setRowIDSpecification(sampleIDSpecification);
  copyNumberData.addColumnGroupingSpecification(groundTruthGrouping);
  return copyNumberData;
}","private DataSetDescription setUpCopyNumberData(){
  DataSetDescription copyNumberData=new DataSetDescription(ECreateDefaultProperties.CATEGORICAL);
  copyNumberData.setDataSetName(""String_Node_Str"");
  copyNumberData.setDataSourcePath(COPY_NUMBER);
  copyNumberData.setNumberOfHeaderLines(1);
  @SuppressWarnings(""String_Node_Str"") CategoricalClassDescription<Integer> categoricalClassDescription=(CategoricalClassDescription<Integer>)copyNumberData.getDataDescription().getCategoricalClassDescription();
  categoricalClassDescription.setCategoryType(ECategoryType.ORDINAL);
  categoricalClassDescription.setRawDataType(EDataType.INTEGER);
  categoricalClassDescription.addCategoryProperty(-2,""String_Node_Str"",new Color(""String_Node_Str""));
  categoricalClassDescription.addCategoryProperty(-1,""String_Node_Str"",new Color(""String_Node_Str""));
  categoricalClassDescription.addCategoryProperty(0,""String_Node_Str"",Colors.NEUTRAL_GREY);
  categoricalClassDescription.addCategoryProperty(1,""String_Node_Str"",new Color(""String_Node_Str""));
  categoricalClassDescription.addCategoryProperty(2,""String_Node_Str"",new Color(""String_Node_Str""));
  ParsingRule parsingRule=new ParsingRule();
  parsingRule.setFromColumn(3);
  parsingRule.setParseUntilEnd(true);
  parsingRule.setColumnDescripton(new ColumnDescription());
  copyNumberData.addParsingRule(parsingRule);
  copyNumberData.setTransposeMatrix(true);
  IDSpecification geneIDSpecification=new IDSpecification();
  geneIDSpecification.setIDTypeGene(true);
  geneIDSpecification.setIdType(""String_Node_Str"");
  copyNumberData.setRowIDSpecification(geneIDSpecification);
  copyNumberData.setColumnIDSpecification(sampleIDSpecification);
  return copyNumberData;
}",0.5937176389368312
57106,"@Override protected void setUpDataSetDescriptions(){
  sampleIDSpecification=new IDSpecification();
  sampleIDSpecification.setIdCategory(""String_Node_Str"");
  sampleIDSpecification.setIdType(""String_Node_Str"");
  IDTypeParsingRules idTypeParsingRules=new IDTypeParsingRules();
  idTypeParsingRules.setReplacementExpression(TCGADefinitions.TCGA_REPLACEMENT_STRING,TCGADefinitions.TCGA_REPLACING_EXPRESSIONS);
  idTypeParsingRules.setSubStringExpression(TCGADefinitions.TCGA_ID_SUBSTRING_REGEX);
  idTypeParsingRules.setDefault(true);
  sampleIDSpecification.setIdTypeParsingRules(idTypeParsingRules);
  projectDescription.add(setUpMRNAData());
  projectDescription.add(setUpCopyNumberData());
}","@Override protected void setUpDataSetDescriptions(){
  sampleIDSpecification=new IDSpecification();
  sampleIDSpecification.setIdCategory(""String_Node_Str"");
  sampleIDSpecification.setIdType(""String_Node_Str"");
  IDTypeParsingRules idTypeParsingRules=new IDTypeParsingRules();
  idTypeParsingRules.setReplacementExpression(TCGADefinitions.TCGA_REPLACEMENT_STRING,TCGADefinitions.TCGA_REPLACING_EXPRESSIONS);
  idTypeParsingRules.setSubStringExpression(TCGADefinitions.TCGA_ID_SUBSTRING_REGEX);
  idTypeParsingRules.setDefault(true);
  sampleIDSpecification.setIdTypeParsingRules(idTypeParsingRules);
  projectDescription.add(setUpMRNAData());
  projectDescription.add(setUpCopyNumberData());
  projectDescription.add(setUpMutationData());
}",0.967247386759582
57107,"private DataSetDescription setUpMutationData(){
  DataSetDescription mutationDataMetaInfo=new DataSetDescription(ECreateDefaultProperties.CATEGORICAL);
  mutationDataMetaInfo.setDataSetName(""String_Node_Str"");
  mutationDataMetaInfo.setDataSourcePath(MUTATION);
  @SuppressWarnings(""String_Node_Str"") CategoricalClassDescription<Integer> categoricalClassDescription=(CategoricalClassDescription<Integer>)mutationDataMetaInfo.getDataDescription().getCategoricalClassDescription();
  categoricalClassDescription.addCategoryProperty(0,""String_Node_Str"",Colors.NEUTRAL_GREY);
  categoricalClassDescription.addCategoryProperty(1,""String_Node_Str"",Colors.RED);
  mutationDataMetaInfo.setNumberOfHeaderLines(1);
  ParsingRule parsingRule=new ParsingRule();
  parsingRule.setFromColumn(1);
  parsingRule.setParseUntilEnd(true);
  parsingRule.setColumnDescripton(new ColumnDescription());
  mutationDataMetaInfo.addParsingRule(parsingRule);
  mutationDataMetaInfo.setTransposeMatrix(true);
  IDSpecification geneIDSpecification=new IDSpecification();
  geneIDSpecification.setIDTypeGene(true);
  geneIDSpecification.setIdType(""String_Node_Str"");
  mutationDataMetaInfo.setRowIDSpecification(geneIDSpecification);
  mutationDataMetaInfo.setColumnIDSpecification(sampleIDSpecification);
  return mutationDataMetaInfo;
}","private DataSetDescription setUpMutationData(){
  DataSetDescription mutationDataDescription=new DataSetDescription(ECreateDefaultProperties.CATEGORICAL);
  mutationDataDescription.setDataSetName(""String_Node_Str"");
  mutationDataDescription.setDataSourcePath(MUTATION);
  @SuppressWarnings(""String_Node_Str"") CategoricalClassDescription<Integer> categoricalClassDescription=(CategoricalClassDescription<Integer>)mutationDataDescription.getDataDescription().getCategoricalClassDescription();
  categoricalClassDescription.addCategoryProperty(0,""String_Node_Str"",Colors.NEUTRAL_GREY);
  categoricalClassDescription.addCategoryProperty(1,""String_Node_Str"",Colors.RED);
  mutationDataDescription.setNumberOfHeaderLines(1);
  ParsingRule parsingRule=new ParsingRule();
  parsingRule.setFromColumn(1);
  parsingRule.setParseUntilEnd(true);
  parsingRule.setColumnDescripton(new ColumnDescription());
  mutationDataDescription.addParsingRule(parsingRule);
  mutationDataDescription.setTransposeMatrix(true);
  IDSpecification geneIDSpecification=new IDSpecification();
  geneIDSpecification.setIDTypeGene(true);
  geneIDSpecification.setIdType(""String_Node_Str"");
  mutationDataDescription.setRowIDSpecification(geneIDSpecification);
  mutationDataDescription.setColumnIDSpecification(sampleIDSpecification);
  return mutationDataDescription;
}",0.854119425547997
57108,"public static ClusterResult cluster(ClusterConfiguration config){
  log.info(""String_Node_Str"" + config);
  Stopwatch w=new Stopwatch().start();
  try {
    ClusterResult clusterResult=null;
    SafeCallable<PerspectiveInitializationData> clusterer=createClusterer(config);
    if (clusterer == null) {
      log.error(""String_Node_Str"" + config);
      throw new IllegalStateException(""String_Node_Str"" + config);
    }
    PerspectiveInitializationData data=clusterer.call();
    ClusterResult result=new ClusterResult();
switch (config.getClusterTarget()) {
case DIMENSION_CLUSTERING:
      result.setDimensionResult(data);
    break;
case RECORD_CLUSTERING:
  result.setRecordResult(data);
break;
}
return clusterResult;
}
 catch (final Exception e) {
log.error(""String_Node_Str"",e);
PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
@Override public void run(){
PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
  @Override public void run(){
    MessageBox messageBox=new MessageBox(new Shell(),SWT.ERROR);
    messageBox.setText(""String_Node_Str"");
    messageBox.setMessage(""String_Node_Str"");
    messageBox.open();
  }
}
);
}
}
);
}
 finally {
log.debug(""String_Node_Str"" + w);
}
return null;
}","public static ClusterResult cluster(ClusterConfiguration config){
  log.info(""String_Node_Str"" + config);
  Stopwatch w=new Stopwatch().start();
  try {
    SafeCallable<PerspectiveInitializationData> clusterer=createClusterer(config);
    if (clusterer == null) {
      log.error(""String_Node_Str"" + config);
      throw new IllegalStateException(""String_Node_Str"" + config);
    }
    PerspectiveInitializationData data=clusterer.call();
    ClusterResult result=new ClusterResult();
switch (config.getClusterTarget()) {
case DIMENSION_CLUSTERING:
      result.setDimensionResult(data);
    break;
case RECORD_CLUSTERING:
  result.setRecordResult(data);
break;
}
return result;
}
 catch (final Exception e) {
log.error(""String_Node_Str"",e);
PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
@Override public void run(){
PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
  @Override public void run(){
    MessageBox messageBox=new MessageBox(new Shell(),SWT.ERROR);
    messageBox.setText(""String_Node_Str"");
    messageBox.setMessage(""String_Node_Str"");
    messageBox.open();
  }
}
);
}
}
);
}
 finally {
log.debug(""String_Node_Str"" + w);
}
return null;
}",0.9806025588113908
57109,"@Override protected PerspectiveInitializationData cluster(){
  if (progressAndCancel(1,false))   return canceled();
  final int nrDimensions=oppositeVA.size();
  final int[] assignments=new int[va.size()];
  Arrays.fill(assignments,-1);
  float[] vector=new float[nrDimensions];
  final List<Cluster> clusters=createClusters(nrSamples);
  if (cache != null) {
    for (int i=0; i < assignments.length; ++i) {
      Integer vid=va.get(i);
      cache.put(vid,fillVector(null,vid));
    }
  }
  int iteration=0;
  boolean converged=false;
  if (progressAndCancel(10,false))   return canceled();
  int lastP=10;
  final float scale=(80.f - 10.f) / MAX_ITERATIONS;
  for (; !converged && iteration < MAX_ITERATIONS; ++iteration) {
    converged=true;
    for (    Cluster c : clusters) {
      c.prepareRound();
    }
    for (int i=0; i < assignments.length; ++i) {
      Integer vid=va.get(i);
      vector=cache != null ? (float[])cache.get(vid) : fillVector(vector,vid);
      int best=-1;
      float distance=Float.POSITIVE_INFINITY;
      for (      Cluster cluster : clusters) {
        float dc=cluster.distance(vid,vector);
        if (dc < distance) {
          best=cluster.index;
          distance=dc;
        }
      }
      if (assignments[i] != best) {
        converged=false;
        assignments[i]=best;
      }
    }
    for (    Cluster c : clusters)     c.prepareMoving();
    for (int i=0; i < assignments.length; ++i) {
      int best=assignments[i];
      Integer vid=va.get(i);
      vector=cache != null ? (float[])cache.get(vid) : fillVector(vector,vid);
      clusters.get(best).add(vector);
    }
    eventListeners.processEvents();
    if (isClusteringCanceled) {
      return canceled();
    }
    int p=10 + Math.round(scale * iteration);
    if (p > lastP)     progress(p,false);
    lastP=p;
  }
  for (  Cluster c : clusters)   c.stopMoving();
  if (progressAndCancel(80,false))   return canceled();
  List<Integer> clusterSamples=transformClusters(assignments,clusters);
  return postProcess(assignments,clusterSamples);
}","@Override protected PerspectiveInitializationData cluster(){
  if (progressAndCancel(1,false))   return canceled();
  final int nrDimensions=oppositeVA.size();
  final int[] assignments=new int[va.size()];
  Arrays.fill(assignments,-1);
  float[] vector=new float[nrDimensions];
  final List<Cluster> clusters=createClusters(nrSamples);
  if (cache != null) {
    for (int i=0; i < assignments.length; ++i) {
      Integer vid=va.get(i);
      cache.put(vid,fillVector(null,vid));
    }
  }
  int iteration=0;
  boolean converged=false;
  if (progressAndCancel(10,false))   return canceled();
  int lastP=10;
  final float scale=(80.f - 10.f) / MAX_ITERATIONS;
  for (; !converged && iteration < MAX_ITERATIONS; ++iteration) {
    converged=true;
    for (    Cluster c : clusters) {
      c.prepareRound();
    }
    for (int i=0; i < assignments.length; ++i) {
      Integer vid=va.get(i);
      vector=getValue(vector,vid);
      int best=-1;
      float distance=Float.POSITIVE_INFINITY;
      for (      Cluster cluster : clusters) {
        float dc=cluster.distance(vid,vector);
        if (dc < distance) {
          best=cluster.index;
          distance=dc;
        }
      }
      if (assignments[i] != best) {
        converged=false;
        assignments[i]=best;
      }
    }
    for (    Cluster c : clusters)     c.prepareMoving();
    for (int i=0; i < assignments.length; ++i) {
      int best=assignments[i];
      Integer vid=va.get(i);
      vector=getValue(vector,vid);
      clusters.get(best).add(vector);
    }
    eventListeners.processEvents();
    if (isClusteringCanceled) {
      return canceled();
    }
    int p=10 + Math.round(scale * iteration);
    if (p > lastP)     progress(p,false);
    lastP=p;
  }
  for (  Cluster c : clusters)   c.stopMoving();
  if (progressAndCancel(80,false))   return canceled();
  List<Integer> clusterSamples=transformClusters(assignments,clusters);
  return postProcess(assignments,clusterSamples);
}",0.9711729622266402
57110,"private static Font advancedFeatures(Font base,boolean enable){
  HashMap<TextAttribute,Object> map=new HashMap<>(base.getAttributes());
  if (enable) {
    map.put(TextAttribute.KERNING,TextAttribute.KERNING_ON);
  }
 else {
    map.remove(TextAttribute.KERNING);
    map.put(TextAttribute.TRACKING,0.5);
  }
  return base.deriveFont(map);
}","private static Font advancedFeatures(Font base,boolean enable){
  HashMap<TextAttribute,Object> map=new HashMap<>(base.getAttributes());
  if (enable) {
    map.put(TextAttribute.KERNING,TextAttribute.KERNING_ON);
  }
 else {
    map.remove(TextAttribute.KERNING);
    map.remove(TextAttribute.LIGATURES);
    map.put(TextAttribute.TRACKING,0.3f);
  }
  return base.deriveFont(map);
}",0.9393939393939394
57111,"protected final float scale(float height){
  return height / (float)maxBounds.getHeight();
}","protected final double scale(float height){
  return height / (scaleByBaseLine ? baseLine : maxBounds.getHeight());
}",0.8038277511961722
57112,"/** 
 * @return the bounds, see {@link #bounds}
 */
public Rect getBounds(){
  return bounds;
}","/** 
 * @return the bounds, see {@link #bounds}
 */
public Rectangle2D getBounds(){
  return bounds;
}",0.964467005076142
57113,"public final float getTextWidth(String text,float height){
  GlyphVector glyphVector=get(text);
  if (glyphVector == null)   return 0;
  return (float)glyphVector.getVisualBounds().getWidth() * scale(height);
}","public final float getTextWidth(String text,float height){
  GlyphVector glyphVector=get(text);
  if (glyphVector == null)   return 0;
  return (float)(glyphVector.getVisualBounds().getWidth() * scale(height));
}",0.995260663507109
57114,"/** 
 * @param subSequence
 */
private void render(CharSequence csq){
  GlyphVector glyphVector=renderFont.createGlyphVector(frc,csq.toString());
  Rectangle bounds=glyphVector.getVisualBounds().getBounds();
  bounds.y+=baseLine;
  graphics.drawGlyphVector(glyphVector,pos.x(),pos.y());
  for (int i=0; i < csq.length(); ++i) {
    char c=csq.charAt(i);
    Rectangle gbounds=glyphVector.getGlyphPixelBounds(i,frc,pos.x(),pos.y());
    Rect r=new Rect(gbounds.x,gbounds.y,gbounds.width,gbounds.height);
    CharacterInfo info=new CharacterInfo(r);
    chars.put(c,info);
  }
  pos.setX(pos.x() + bounds.width);
  markDirty(bounds);
}","/** 
 * @param subSequence
 */
private void render(CharSequence csq){
  GlyphVector glyphVector=renderFont.createGlyphVector(frc,csq.toString());
  Rectangle bounds=glyphVector.getVisualBounds().getBounds();
  bounds.y+=baseLine;
  graphics.drawGlyphVector(glyphVector,pos.x(),pos.y());
  for (int i=0; i < csq.length(); ++i) {
    char c=csq.charAt(i);
    Rectangle gbounds=glyphVector.getGlyphPixelBounds(i,frc,pos.x(),pos.y());
    CharacterInfo info=new CharacterInfo(gbounds);
    chars.put(c,info);
  }
  pos.setX(pos.x() + bounds.width + 4);
  markDirty(bounds);
}",0.8033195020746888
57115,"public CharacterInfo(Rect bounds){
  this.bounds=bounds;
}","public CharacterInfo(Rectangle2D bounds){
  this.bounds=bounds;
}",0.943089430894309
57116,"@Override protected void renderImpl(GLGraphics g,float w,float h){
  g.color(Color.RED).fillRect(0,0,200,200);
  g.drawText(""String_Node_Str"",10,10,100,40);
}","@Override protected void renderImpl(GLGraphics g,float w,float h){
  g.color(Color.RED).fillRect(10,10,500,18);
  g.drawText(""String_Node_Str"",10,10,500,18);
}",0.9526813880126184
57117,"@Override protected ITextRenderer createTextRenderer(){
  return new BitmapTextRenderer(new Font(""String_Node_Str"",Font.PLAIN,40));
}","@Override protected ITextRenderer createTextRenderer(){
  return new BitmapTextRenderer(new Font(""String_Node_Str"",Font.PLAIN,10));
}",0.9924812030075189
57118,"public Root(Shell parentShell){
  super(parentShell,""String_Node_Str"",new GLElement(){
    @Override protected void renderImpl(    GLGraphics g,    float w,    float h){
      g.color(Color.RED).fillRect(0,0,200,200);
      g.drawText(""String_Node_Str"",10,10,100,40);
    }
  }
,GLPadding.ZERO,new Dimension(500,500));
}","public Root(Shell parentShell){
  super(parentShell,""String_Node_Str"",new GLElement(){
    @Override protected void renderImpl(    GLGraphics g,    float w,    float h){
      g.color(Color.RED).fillRect(10,10,500,18);
      g.drawText(""String_Node_Str"",10,10,500,18);
    }
  }
,GLPadding.ZERO,new Dimension(500,500));
}",0.9453978159126364
57119,"/** 
 * @param bounds
 * @return
 */
private Rect toTextureCoordinates(Rect bounds){
  float iw=1.f / texture.getWidth();
  float ih=1.f / texture.getHeight();
  return new Rect(bounds.x() * iw,bounds.y() * ih,bounds.width() * iw,bounds.height() * ih);
}","/** 
 * @param bounds
 * @return
 */
private Rectangle2D toTextureCoordinates(Rectangle2D bounds){
  double iw=1. / texture.getWidth();
  double ih=1. / texture.getHeight();
  int p=PADDING;
  return new Rectangle2D.Double((bounds.getX() - p) * iw,(bounds.getY() - p) * ih,(bounds.getWidth() + p * 2) * iw,(bounds.getHeight() + p * 2) * ih);
}",0.6566164154103853
57120,"@Override public void renderTextInBounds(GL2 gl,String text,float x,float y,float z,float w,float h){
  GlyphVector glyphVector=get(text);
  if (glyphVector == null)   return;
  upload(text);
  Texture tex=texture.getTexture();
  tex.enable(gl);
  tex.bind(gl);
  gl.glPushMatrix();
  gl.glTranslatef(x,y,z);
  float s=scale(h);
  w/=s;
  gl.glScalef(s,s,1);
  GLGraphics.checkError(gl);
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4fv(color,0);
  for (int i=0; i < text.length(); ++i) {
    char c=text.charAt(i);
    if (filterChar(c))     continue;
    final CharacterInfo info=chars.get(c);
    Rect bounds=info.getBounds();
    Rect texCoords=toTextureCoordinates(bounds);
    Point2D pos=glyphVector.getGlyphPosition(i);
    if ((pos.getX() + bounds.width() >= w)) {
      break;
    }
    float xo=(float)pos.getX();
    float yo=(float)pos.getY();
    gl.glTexCoord2f(texCoords.x(),texCoords.y());
    gl.glVertex2f(xo,yo);
    gl.glTexCoord2f(texCoords.x2(),texCoords.y());
    gl.glVertex2f(xo + bounds.width(),yo);
    gl.glTexCoord2f(texCoords.x2(),texCoords.y2());
    gl.glVertex2f(xo + bounds.width(),yo + bounds.height());
    gl.glTexCoord2f(texCoords.x(),texCoords.y2());
    gl.glVertex2f(xo,yo + bounds.height());
  }
  gl.glEnd();
  gl.glPopMatrix();
  tex.disable(gl);
}","@Override public void renderTextInBounds(GL2 gl,String text,float x,float y,float z,float w,float h){
  GlyphVector glyphVector=get(text);
  if (glyphVector == null)   return;
  upload(text);
  Texture tex=texture.getTexture();
  tex.enable(gl);
  tex.bind(gl);
  gl.glPushMatrix();
  gl.glTranslatef(x,y,z);
  double s=scale(h);
  w/=s;
  gl.glScaled(s,s,s);
  gl.glTranslatef(0,baseLine,0);
  GLGraphics.checkError(gl);
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4fv(color,0);
  final int p=PADDING;
  for (int i=0; i < text.length(); ++i) {
    char c=text.charAt(i);
    if (filterChar(c))     continue;
    final CharacterInfo info=chars.get(c);
    Rectangle2D bounds=info.getBounds();
    Rectangle2D texCoords=toTextureCoordinates(bounds);
    Rectangle2D target=glyphVector.getGlyphVisualBounds(i).getBounds2D();
    if ((target.getMaxX() >= w)) {
      break;
    }
    gl.glTexCoord2d(texCoords.getX(),texCoords.getY());
    gl.glVertex2d(target.getX() - p,target.getY() - p);
    gl.glTexCoord2d(texCoords.getMaxX(),texCoords.getY());
    gl.glVertex2d(target.getMaxX() + p,target.getY() - p);
    gl.glTexCoord2d(texCoords.getMaxX(),texCoords.getMaxY());
    gl.glVertex2d(target.getMaxX() + p,target.getMaxY() + p);
    gl.glTexCoord2d(texCoords.getX(),texCoords.getMaxY());
    gl.glVertex2d(target.getX() - p,target.getMaxY() + p);
  }
  gl.glEnd();
  gl.glPopMatrix();
  tex.disable(gl);
}",0.5603864734299517
57121,"@Override protected PerspectiveInitializationData cluster(){
  if (progressAndCancel(1,false))   return canceled();
  final int nrDimensions=oppositeVA.size();
  final int[] assignments=new int[va.size()];
  Arrays.fill(assignments,-1);
  float[] vector=new float[nrDimensions];
  final List<Cluster> clusters=createClusters(nrSamples);
  int iteration=0;
  boolean converged=false;
  if (progressAndCancel(10,false))   return canceled();
  final float scale=(80.f - 10.f) / MAX_ITERATIONS;
  for (; !converged && iteration < MAX_ITERATIONS; ++iteration) {
    converged=true;
    for (    Cluster c : clusters) {
      c.prepareRound();
    }
    for (int i=0; i < assignments.length; ++i) {
      Integer vid=va.get(i);
      vector=fillVector(vector,vid);
      int best=-1;
      float distance=Float.POSITIVE_INFINITY;
      for (      Cluster cluster : clusters) {
        float dc=cluster.distance(vid,vector);
        if (dc < distance) {
          best=cluster.index;
          distance=dc;
        }
      }
      if (assignments[i] != best) {
        converged=false;
        assignments[i]=best;
      }
    }
    for (    Cluster c : clusters)     c.prepareMoving();
    for (int i=0; i < assignments.length; ++i) {
      int best=assignments[i];
      Integer vid=va.get(i);
      vector=fillVector(vector,vid);
      clusters.get(best).add(vector);
    }
    if (progressAndCancel(10 + Math.round(scale * iteration),false))     return canceled();
  }
  for (  Cluster c : clusters)   c.stopMoving();
  if (progressAndCancel(80,false))   return canceled();
  List<Integer> clusterSamples=transformClusters(assignments,clusters);
  return postProcess(assignments,clusterSamples);
}","@Override protected PerspectiveInitializationData cluster(){
  if (progressAndCancel(1,false))   return canceled();
  final int nrDimensions=oppositeVA.size();
  final int[] assignments=new int[va.size()];
  Arrays.fill(assignments,-1);
  float[] vector=new float[nrDimensions];
  final List<Cluster> clusters=createClusters(nrSamples);
  if (cache != null) {
    for (int i=0; i < assignments.length; ++i) {
      Integer vid=va.get(i);
      cache.put(vid,fillVector(null,vid));
    }
  }
  int iteration=0;
  boolean converged=false;
  if (progressAndCancel(10,false))   return canceled();
  int lastP=10;
  final float scale=(80.f - 10.f) / MAX_ITERATIONS;
  for (; !converged && iteration < MAX_ITERATIONS; ++iteration) {
    converged=true;
    for (    Cluster c : clusters) {
      c.prepareRound();
    }
    for (int i=0; i < assignments.length; ++i) {
      Integer vid=va.get(i);
      vector=cache != null ? (float[])cache.get(vid) : fillVector(vector,vid);
      int best=-1;
      float distance=Float.POSITIVE_INFINITY;
      for (      Cluster cluster : clusters) {
        float dc=cluster.distance(vid,vector);
        if (dc < distance) {
          best=cluster.index;
          distance=dc;
        }
      }
      if (assignments[i] != best) {
        converged=false;
        assignments[i]=best;
      }
    }
    for (    Cluster c : clusters)     c.prepareMoving();
    for (int i=0; i < assignments.length; ++i) {
      int best=assignments[i];
      Integer vid=va.get(i);
      vector=cache != null ? (float[])cache.get(vid) : fillVector(vector,vid);
      clusters.get(best).add(vector);
    }
    eventListeners.processEvents();
    if (isClusteringCanceled) {
      return canceled();
    }
    int p=10 + Math.round(scale * iteration);
    if (p > lastP)     progress(p,false);
    lastP=p;
  }
  for (  Cluster c : clusters)   c.stopMoving();
  if (progressAndCancel(80,false))   return canceled();
  List<Integer> clusterSamples=transformClusters(assignments,clusters);
  return postProcess(assignments,clusterSamples);
}",0.88
57122,"/** 
 * initial random create of clusters and cluster centers
 * @param nrSamples
 * @return
 */
private List<Cluster> createClusters(final int nrSamples){
  List<Cluster> clusters=new ArrayList<>(numberOfCluster);
  Random r=new Random();
  BitSet used=new BitSet();
  for (int i=0; i < numberOfCluster; ++i) {
    int p;
    do {
      p=r.nextInt(nrSamples);
    }
 while (used.get(p));
    used.set(p);
    clusters.add(new Cluster(i,fillVector(null,va.get(p))));
  }
  return clusters;
}","/** 
 * initial random create of clusters and cluster centers
 * @param nrSamples
 * @return
 */
private List<Cluster> createClusters(final int nrSamples){
  List<Cluster> clusters=new ArrayList<>(numberOfCluster);
  Random r=new Random();
  BitSet used=new BitSet();
  for (int i=0; i < numberOfCluster; ++i) {
    int p;
    do {
      p=r.nextInt(nrSamples - 1);
    }
 while (used.get(p));
    used.set(p);
    clusters.add(new Cluster(i,fillVector(null,va.get(p))));
  }
  return clusters;
}",0.9959514170040484
57123,"public KMeansClusterer(ClusterConfiguration config,int progressMultiplier,int progressOffset){
  super(config,progressMultiplier,progressOffset);
  KMeansClusterConfiguration kMeansClusterConfiguration=(KMeansClusterConfiguration)config.getClusterAlgorithmConfiguration();
  this.numberOfCluster=kMeansClusterConfiguration.getNumberOfClusters();
}","public KMeansClusterer(ClusterConfiguration config,int progressMultiplier,int progressOffset){
  super(config,progressMultiplier,progressOffset);
  KMeansClusterConfiguration kMeansClusterConfiguration=(KMeansClusterConfiguration)config.getClusterAlgorithmConfiguration();
  this.numberOfCluster=kMeansClusterConfiguration.getNumberOfClusters();
  if (kMeansClusterConfiguration.isCacheVectors())   cache=new IntObjectHashMap();
 else   cache=null;
}",0.8707653701380176
57124,"private void createTab(){
  clusterTab=new TabItem(tabFolder,SWT.NONE);
  clusterTab.setData(this);
  clusterTab.setText(""String_Node_Str"");
  Composite composite=new Composite(tabFolder,SWT.NONE);
  clusterTab.setControl(composite);
  composite.setLayout(new GridLayout(1,false));
  final Label clusterNumberLabel=new Label(composite,SWT.NONE);
  clusterNumberLabel.setText(""String_Node_Str"");
  clusterNumberLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false));
  final Text clusterNumberText=new Text(composite,SWT.BORDER);
  clusterNumberText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  clusterNumberText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      try {
        int temp=Integer.parseInt(clusterNumberText.getText());
        if (temp > 0) {
          nrClustersRecords=temp;
        }
 else {
          throw new NumberFormatException(""String_Node_Str"");
        }
      }
 catch (      NumberFormatException e) {
        Shell shell=new Shell();
        MessageBox messageBox=new MessageBox(shell,SWT.OK);
        messageBox.setText(""String_Node_Str"");
        messageBox.setMessage(""String_Node_Str"");
        messageBox.open();
        System.out.println(""String_Node_Str"");
      }
    }
  }
);
  clusterNumberText.setText(""String_Node_Str"");
  clusterNumberText.setToolTipText(""String_Node_Str"");
}","private void createTab(){
  clusterTab=new TabItem(tabFolder,SWT.NONE);
  clusterTab.setData(this);
  clusterTab.setText(""String_Node_Str"");
  Composite composite=new Composite(tabFolder,SWT.NONE);
  clusterTab.setControl(composite);
  composite.setLayout(new GridLayout(1,false));
  final Label clusterNumberLabel=new Label(composite,SWT.NONE);
  clusterNumberLabel.setText(""String_Node_Str"");
  clusterNumberLabel.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,false,false));
  final Text clusterNumberText=new Text(composite,SWT.BORDER);
  clusterNumberText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  clusterNumberText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      try {
        int temp=Integer.parseInt(clusterNumberText.getText());
        if (temp > 0) {
          nrClustersRecords=temp;
        }
 else {
          throw new NumberFormatException(""String_Node_Str"");
        }
      }
 catch (      NumberFormatException e) {
        Shell shell=new Shell();
        MessageBox messageBox=new MessageBox(shell,SWT.OK);
        messageBox.setText(""String_Node_Str"");
        messageBox.setMessage(""String_Node_Str"");
        messageBox.open();
        System.out.println(""String_Node_Str"");
      }
    }
  }
);
  clusterNumberText.setText(""String_Node_Str"");
  clusterNumberText.setToolTipText(""String_Node_Str"");
  cacheVectors=new Button(composite,SWT.CHECK);
  cacheVectors.setText(""String_Node_Str"");
  cacheVectors.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9455897262588712
57125,"@Override public AClusterAlgorithmConfiguration getClusterConfiguration(){
  KMeansClusterConfiguration clusterConfiguration=new KMeansClusterConfiguration();
  clusterConfiguration.setNumberOfClusters(nrClustersRecords);
  return clusterConfiguration;
}","@Override public AClusterAlgorithmConfiguration getClusterConfiguration(){
  KMeansClusterConfiguration clusterConfiguration=new KMeansClusterConfiguration();
  clusterConfiguration.setNumberOfClusters(nrClustersRecords);
  clusterConfiguration.setCacheVectors(cacheVectors.getSelection());
  return clusterConfiguration;
}",0.7868284228769498
57126,"private void select(SelectionManager manager,Collection<Integer> positions,boolean row){
  manager.clearSelection(SelectionType.SELECTION);
  for (  Integer pos : positions) {
    int index=row ? table.getRowIndexByPosition(pos) : table.getColumnIndexByPosition(pos);
    int id=row ? data.getRowObject(index) : data.getColumnObject(index);
    manager.addToType(SelectionType.SELECTION,id);
  }
  selection.fireSelectionDelta(manager.getIDType());
}","private void select(SelectionManager manager,Collection<Integer> positions,boolean row){
  manager.clearSelection(SelectionType.SELECTION);
  for (  Integer pos : positions) {
    int index=row ? table.getRowIndexByPosition(pos) : table.getColumnIndexByPosition(pos);
    if (index < 0)     continue;
    int id=row ? data.getRowObject(index) : data.getColumnObject(index);
    manager.addToType(SelectionType.SELECTION,id);
  }
  selection.fireSelectionDelta(manager.getIDType());
}",0.964630225080386
57127,"@Override public void handleLayerEvent(ILayerEvent event){
  if (event instanceof CellSelectionEvent || event instanceof RowSelectionEvent || event instanceof ColumnSelectionEvent) {
    ISelectionModel model=selectionLayer.getSelectionModel();
    Collection<Integer> columns=Ints.asList(model.getSelectedColumnPositions());
    Collection<Integer> rows=new TreeSet<>();
    for (    Range r : model.getSelectedRowPositions())     rows.addAll(r.getMembers());
    int columnCount=table.getColumnCount();
    int rowCount=table.getRowCount();
    boolean allColumnsSelected=columns.size() == columnCount;
    boolean allRowsSelected=rows.size() == rowCount;
    if (allColumnsSelected == allRowsSelected) {
      select(selection.getDimensionSelectionManager(),columns,false);
      select(selection.getRecordSelectionManager(),rows,true);
    }
 else     if (allColumnsSelected) {
      select(selection.getRecordSelectionManager(),rows,true);
    }
 else     if (allRowsSelected) {
      select(selection.getDimensionSelectionManager(),columns,false);
    }
  }
}","@Override public void handleLayerEvent(ILayerEvent event){
  if (event instanceof CellSelectionEvent || event instanceof RowSelectionEvent || event instanceof ColumnSelectionEvent) {
    ISelectionModel model=selectionLayer.getSelectionModel();
    Collection<Integer> columns=Ints.asList(model.getSelectedColumnPositions());
    Collection<Integer> rows=new TreeSet<>();
    for (    Range r : model.getSelectedRowPositions())     rows.addAll(r.getMembers());
    int columnCount=data.getColumnCount();
    int rowCount=data.getRowCount();
    boolean allColumnsSelected=columns.size() == columnCount;
    boolean allRowsSelected=rows.size() == rowCount;
    if (allColumnsSelected == allRowsSelected) {
      select(selection.getDimensionSelectionManager(),columns,false);
      select(selection.getRecordSelectionManager(),rows,true);
    }
 else     if (allColumnsSelected) {
      select(selection.getRecordSelectionManager(),rows,true);
    }
 else     if (allRowsSelected) {
      select(selection.getDimensionSelectionManager(),columns,false);
    }
  }
}",0.9577067669172932
57128,"/** 
 * @param content setter, see  {@link content}
 */
public void setContent(GLElement content){
  if (this.content == content)   return;
  if (this.content != null) {
    this.content.setParent(null);
    if (context != null)     content.takeDown();
  }
  this.content=content;
  if (this.content != null) {
    this.content.setParent(this);
    if (context != null)     this.content.init(context);
  }
}","/** 
 * @param content setter, see  {@link content}
 */
public void setContent(GLElement content){
  if (this.content == content)   return;
  if (this.content != null) {
    this.content.setParent(null);
    if (context != null)     content.takeDown();
  }
  this.content=content;
  if (this.content != null) {
    this.content.setParent(this);
    if (context != null)     this.content.init(context);
  }
  relayout();
}",0.9830917874396136
57129,"private void render(GLGraphics g,float w,float h,boolean doPicking){
  final VirtualArray recordVA=tablePerspective.getRecordPerspective().getVirtualArray();
  final VirtualArray dimensionVA=tablePerspective.getDimensionPerspective().getVirtualArray();
  final ATableBasedDataDomain dataDomain=tablePerspective.getDataDomain();
  float y=0;
  final float fieldWidth=recordSpacing.getFieldWidth();
  for (int i=0; i < recordVA.size(); ++i) {
    Integer recordID=recordVA.get(i);
    if (isHidden(recordID)) {
      continue;
    }
    float fieldHeight=recordSpacing.getFieldHeight(recordID);
    y+=fieldHeight;
    float x=0;
    for (    Integer dimensionID : dimensionVA) {
      if (doPicking) {
        g.pushName(dimensionPickingIds.get(dimensionID));
        g.pushName(recordPickingIds.get(recordID));
        g.fillRect(x,y,fieldWidth,fieldHeight);
        g.popName();
        g.popName();
      }
 else {
        boolean deSelected=isDeselected(recordID);
        blockRenderer.render(g,recordID,dimensionID,dataDomain,new Rect(x,y,fieldWidth,fieldHeight),deSelected);
      }
      x+=fieldWidth;
    }
  }
  g.incZ();
  recordSelectionRenderer.render(g,w,h,recordSpacing,doPicking);
  dimensionSelectionRenderer.render(g,w,h,recordSpacing,doPicking);
  g.decZ();
}","private void render(GLGraphics g,float w,float h,boolean doPicking){
  final VirtualArray recordVA=tablePerspective.getRecordPerspective().getVirtualArray();
  final VirtualArray dimensionVA=tablePerspective.getDimensionPerspective().getVirtualArray();
  final ATableBasedDataDomain dataDomain=tablePerspective.getDataDomain();
  final float fieldWidth=recordSpacing.getFieldWidth();
  for (int i=0; i < recordVA.size(); ++i) {
    Integer recordID=recordVA.get(i);
    if (isHidden(recordID)) {
      continue;
    }
    float y=recordSpacing.getYPosition(i);
    float fieldHeight=recordSpacing.getFieldHeight(recordID);
    float x=0;
    for (    Integer dimensionID : dimensionVA) {
      if (doPicking) {
        g.pushName(dimensionPickingIds.get(dimensionID));
        g.pushName(recordPickingIds.get(recordID));
        g.fillRect(x,y,fieldWidth,fieldHeight);
        g.popName();
        g.popName();
      }
 else {
        boolean deSelected=isDeselected(recordID);
        blockRenderer.render(g,recordID,dimensionID,dataDomain,new Rect(x,y,fieldWidth,fieldHeight),deSelected);
      }
      x+=fieldWidth;
    }
  }
  g.incZ();
  recordSelectionRenderer.render(g,w,h,recordSpacing,doPicking);
  dimensionSelectionRenderer.render(g,w,h,recordSpacing,doPicking);
  g.decZ();
}",0.8020265003897116
57130,"@ListenTo private void onSelectionCommand(SelectionCommandEvent event){
  IDCategory idCategory=event.getIdCategory();
  ATableBasedDataDomain dataDomain=getDataDomain();
  if (idCategory == dataDomain.getRecordIDCategory()) {
    recordSelectionManager.executeSelectionCommand(event.getSelectionCommand());
    callback.onSelectionUpdate(recordSelectionManager);
  }
 else   if (idCategory == dataDomain.getDimensionIDCategory()) {
    dimensionSelectionManager.executeSelectionCommand(event.getSelectionCommand());
    callback.onSelectionUpdate(dimensionSelectionManager);
  }
}","@ListenTo private void onSelectionCommand(SelectionCommandEvent event){
  if (event.getSender() == this)   return;
  IDCategory idCategory=event.getIdCategory();
  ATableBasedDataDomain dataDomain=getDataDomain();
  if (idCategory == dataDomain.getRecordIDCategory()) {
    recordSelectionManager.executeSelectionCommand(event.getSelectionCommand());
    callback.onSelectionUpdate(recordSelectionManager);
  }
 else   if (idCategory == dataDomain.getDimensionIDCategory()) {
    dimensionSelectionManager.executeSelectionCommand(event.getSelectionCommand());
    callback.onSelectionUpdate(dimensionSelectionManager);
  }
}",0.9643153526970956
57131,"@Override public Collection<TablePerspective> filter(Collection<TablePerspective> tablePerspectives){
  return Collections2.filter(tablePerspectives,asTablePerspectivePredicate());
}","@Override public List<TablePerspective> filter(Collection<TablePerspective> tablePerspectives){
  return new ArrayList<>(Collections2.filter(tablePerspectives,asTablePerspectivePredicate()));
}",0.9226666666666666
57132,public Collection<TablePerspective> filter(Collection<TablePerspective> tablePerspectives);,public List<TablePerspective> filter(Collection<TablePerspective> tablePerspectives);,0.9318181818181818
57133,"@Override public void postWindowOpen(){
  IMenuManager menuManager=getWindowConfigurer().getActionBarConfigurer().getMenuManager();
  for (  IContributionItem item : menuManager.getItems()) {
    if (item.getId().contains(""String_Node_Str"")) {
      menuManager.remove(item);
    }
  }
}","@Override public void postWindowOpen(){
  IMenuManager menuManager=getWindowConfigurer().getActionBarConfigurer().getMenuManager();
  for (  IContributionItem item : menuManager.getItems()) {
    if (item.getId().contains(""String_Node_Str"") && !item.getId().contains(""String_Node_Str"")) {
      menuManager.remove(item);
    }
  }
}",0.9273021001615508
57134,"@Override protected void fillMenuBar(IMenuManager menuBar){
  super.fillMenuBar(menuBar);
  MenuManager menu2=new MenuManager(""String_Node_Str"",""String_Node_Str"");
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menuBar.add(menu2);
  menu2=new MenuManager(""String_Node_Str"",""String_Node_Str"");
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menuBar.add(menu2);
}","@Override protected void fillMenuBar(IMenuManager menuBar){
  super.fillMenuBar(menuBar);
  MenuManager menu2=new MenuManager(""String_Node_Str"",""String_Node_Str"");
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menuBar.add(menu2);
  menu2=new MenuManager(""String_Node_Str"",""String_Node_Str"");
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menu2.add(new ShowView(""String_Node_Str"",""String_Node_Str""));
  menuBar.add(menu2);
}",0.7952218430034129
57135,"@Override protected void renderImpl(GLGraphics g,float w,float h){
  renderBackground(g,w,h);
  if (get(HIST).getParent() != null)   get(HIST).render(g);
}","@Override protected void renderImpl(GLGraphics g,float w,float h){
  if (AColumnHeaderUI.this.getParent() != null)   renderBackground(g,w,h);
  if (get(HIST).getParent() != null)   get(HIST).render(g);
}",0.8659217877094972
57136,"private void takeDown(ARankColumnModel col){
  col.removePropertyChangeListener(ARankColumnModel.PROP_WIDTH,resort);
  col.removePropertyChangeListener(IMappedColumnMixin.PROP_MAPPING,refilter);
  col.removePropertyChangeListener(IFilterColumnMixin.PROP_FILTER,refilter);
}","private void takeDown(ARankColumnModel col){
  col.removePropertyChangeListener(ARankColumnModel.PROP_WIDTH,resort);
  col.removePropertyChangeListener(StackedRankColumnModel.PROP_WEIGHTS,resort);
  col.removePropertyChangeListener(IMappedColumnMixin.PROP_MAPPING,refilter);
  col.removePropertyChangeListener(IFilterColumnMixin.PROP_FILTER,refilter);
}",0.8722044728434505
57137,"private void setup(ARankColumnModel col){
  col.addPropertyChangeListener(ARankColumnModel.PROP_WIDTH,resort);
  col.addPropertyChangeListener(IMappedColumnMixin.PROP_MAPPING,refilter);
  col.addPropertyChangeListener(IFilterColumnMixin.PROP_FILTER,refilter);
}","private void setup(ARankColumnModel col){
  col.addPropertyChangeListener(ARankColumnModel.PROP_WIDTH,resort);
  col.addPropertyChangeListener(StackedRankColumnModel.PROP_WEIGHTS,resort);
  col.addPropertyChangeListener(IMappedColumnMixin.PROP_MAPPING,refilter);
  col.addPropertyChangeListener(IFilterColumnMixin.PROP_FILTER,refilter);
}",0.8714524207011686
57138,"@ListenTo(restrictExclusiveToEventSpace=true) public void onShowNodeContext(ShowNodeContextEvent event){
  currentContextVertexRep=event.getVertexRep();
  for (  PathwayMultiFormInfo info : pathwayInfos) {
    if (hasPathwayCurrentContext(info.pathway) && info.getCurrentEmbeddingID() != EEmbeddingID.PATHWAY_LEVEL1 && info.multiFormRenderer != lastUsedRenderer) {
      info.multiFormRenderer.setActive(info.embeddingIDToRendererIDs.get(EEmbeddingID.PATHWAY_LEVEL2).get(0));
    }
  }
  rankingElement.setFilter(new PathwayFilters.CommonVertexFilter(currentContextVertexRep,false));
  rankingElement.setRanking(new PathwayRankings.CommonVerticesRanking(currentContextVertexRep.getPathway()));
  wasContextChanged=true;
  updatePathwayPortals();
}","@ListenTo(restrictExclusiveToEventSpace=true) public void onShowNodeContext(ShowNodeContextEvent event){
  currentContextVertexRep=event.getVertexRep();
  if (event.getSender() == GLSubGraph.this)   return;
  for (  PathwayMultiFormInfo info : pathwayInfos) {
    if (hasPathwayCurrentContext(info.pathway) && info.getCurrentEmbeddingID() != EEmbeddingID.PATHWAY_LEVEL1 && info.multiFormRenderer != lastUsedRenderer) {
      info.multiFormRenderer.setActive(info.embeddingIDToRendererIDs.get(EEmbeddingID.PATHWAY_LEVEL2).get(0));
    }
  }
  rankingElement.setFilter(new PathwayFilters.CommonVertexFilter(currentContextVertexRep,false));
  rankingElement.setRanking(new PathwayRankings.CommonVerticesRanking(currentContextVertexRep.getPathway()));
  wasContextChanged=true;
  updatePathwayPortals();
}",0.9651162790697676
57139,"@Override public void display(GL2 gl){
  clearWindowStubSets();
  if (windowToSetActive != null) {
    windowToSetActive.setActive(true);
    windowToSetActive=null;
  }
  boolean updateAugmentation=false;
  if (isLayoutDirty)   updateAugmentation=true;
  super.display(gl);
  if (wasPathwayAdded) {
    EnablePathSelectionEvent event=new EnablePathSelectionEvent(isPathSelectionMode);
    event.setEventSpace(pathEventSpace);
    eventPublisher.triggerEvent(event);
    wasPathwayAdded=false;
  }
  if (updateAugmentation) {
    updateAugmentation();
  }
  dndController.handleDragging(gl,glMouseListener);
  contextMenuItemsToShow.clear();
}","@Override public void display(GL2 gl){
  clearWindowStubSets();
  if (windowToSetActive != null) {
    windowToSetActive.setActive(true);
    windowToSetActive=null;
  }
  boolean updateAugmentation=false;
  if (isLayoutDirty)   updateAugmentation=true;
  super.display(gl);
  if (wasPathwayAdded) {
    EnablePathSelectionEvent event=new EnablePathSelectionEvent(isPathSelectionMode);
    event.setEventSpace(pathEventSpace);
    eventPublisher.triggerEvent(event);
    if (currentContextVertexRep != null) {
      ShowNodeContextEvent e=new ShowNodeContextEvent(currentContextVertexRep);
      e.setEventSpace(pathEventSpace);
      e.setSender(this);
      eventPublisher.triggerEvent(e);
    }
    wasPathwayAdded=false;
  }
  if (updateAugmentation) {
    updateAugmentation();
  }
  dndController.handleDragging(gl,glMouseListener);
  contextMenuItemsToShow.clear();
}",0.8477257745550428
57140,"protected void updatePathwayPortals(){
  PathwayMultiFormInfo info=null;
  if (portalFocusWindow != null) {
    if (portalFocusWindow.info instanceof PathwayMultiFormInfo) {
      info=(PathwayMultiFormInfo)portalFocusWindow.info;
    }
  }
  if (info == null)   return;
  augmentation.clear();
  clearWindowStubSets();
  PathwayVertexRep lastNodeOfPrevSegment=null;
  for (  PathwayPath segment : pathSegments) {
    List<PathwayVertexRep> nodes=segment.getNodes();
    if (!nodes.isEmpty()) {
      if (lastNodeOfPrevSegment != null) {
        PathwayMultiFormInfo info1=getInfo(lastNodeOfPrevSegment);
        PathwayMultiFormInfo info2=getInfo(nodes.get(0));
        if (pathwayRow.getVisibility() == EVisibility.NONE || info1 == null || info2 == null)         continue;
        Rectangle2D loc1=getAbsoluteVertexLocation(getPathwayRepresentation(info1.multiFormRenderer,info1.multiFormRenderer.getActiveRendererID()),lastNodeOfPrevSegment,info1.container);
        Rectangle2D loc2=getAbsoluteVertexLocation(getPathwayRepresentation(info2.multiFormRenderer,info2.multiFormRenderer.getActiveRendererID()),nodes.get(0),info2.container);
        augmentation.add(new LinkRenderer(this,true,loc1,loc2,info1,info2,1,false,false,false,true,lastNodeOfPrevSegment,nodes.get(0),connectionBandRenderer));
      }
      lastNodeOfPrevSegment=nodes.get(nodes.size() - 1);
    }
  }
  for (  PathwayMultiFormInfo i : pathwayInfos) {
    if (i.getCurrentEmbeddingID() == EEmbeddingID.PATHWAY_LEVEL1) {
      highlightPathwayNodePortals(i);
    }
  }
  for (  PathwayVertexRep vertexRep : info.pathway.vertexSet()) {
    if (info.getCurrentEmbeddingID() == EEmbeddingID.PATHWAY_LEVEL1 && vertexRep.getType() == EPathwayVertexType.map) {
      addPortalHighlightRenderer(vertexRep,info);
      continue;
    }
    Pair<Rectangle2D,Boolean> sourcePair=getPortalLocation(vertexRep,info);
    for (    PathwayMultiFormInfo i : pathwayInfos) {
      if (info != i) {
        addLinkRenderers(vertexRep,info,i,sourcePair);
      }
 else {
      }
    }
  }
}","protected void updatePathwayPortals(){
  PathwayMultiFormInfo info=null;
  if (portalFocusWindow != null) {
    if (portalFocusWindow.info instanceof PathwayMultiFormInfo) {
      info=(PathwayMultiFormInfo)portalFocusWindow.info;
    }
  }
  if (info == null)   return;
  augmentation.clear();
  clearWindowStubSets();
  PathwayVertexRep lastNodeOfPrevSegment=null;
  for (  PathwayPath segment : pathSegments) {
    List<PathwayVertexRep> nodes=segment.getNodes();
    if (!nodes.isEmpty()) {
      if (lastNodeOfPrevSegment != null) {
        PathwayMultiFormInfo info1=getInfo(lastNodeOfPrevSegment);
        PathwayMultiFormInfo info2=getInfo(nodes.get(0));
        if (pathwayRow.getVisibility() == EVisibility.NONE || info1 == null || info2 == null)         continue;
        Rectangle2D loc1=getAbsoluteVertexLocation(getPathwayRepresentation(info1.multiFormRenderer,info1.multiFormRenderer.getActiveRendererID()),lastNodeOfPrevSegment,info1.container);
        Rectangle2D loc2=getAbsoluteVertexLocation(getPathwayRepresentation(info2.multiFormRenderer,info2.multiFormRenderer.getActiveRendererID()),nodes.get(0),info2.container);
        augmentation.add(new LinkRenderer(this,true,loc1,loc2,info1,info2,1,false,false,false,true,lastNodeOfPrevSegment,nodes.get(0),connectionBandRenderer));
      }
      lastNodeOfPrevSegment=nodes.get(nodes.size() - 1);
    }
  }
  if (pathwayRow.getVisibility() != EVisibility.NONE) {
    for (    PathwayMultiFormInfo i : pathwayInfos) {
      if (i.getCurrentEmbeddingID() == EEmbeddingID.PATHWAY_LEVEL1) {
        highlightPathwayNodePortals(i);
      }
    }
  }
  for (  PathwayVertexRep vertexRep : info.pathway.vertexSet()) {
    Pair<Rectangle2D,Boolean> sourcePair=getPortalLocation(vertexRep,info);
    for (    PathwayMultiFormInfo i : pathwayInfos) {
      if (info != i) {
        addLinkRenderers(vertexRep,info,i,sourcePair);
      }
 else {
      }
    }
  }
}",0.93087790110999
57141,"/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public GLSubGraph(IGLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  GLElementContainer column=new GLElementContainer(new GLSizeRestrictiveFlowLayout(false,10,GLPadding.ZERO));
  column.add(baseContainer);
  nodeInfoContainer.setSize(Float.NaN,0);
  dataMappingWindow=new GLWindow(""String_Node_Str"",this);
  dataMappingWindow.setSize(Float.NaN,80);
  dataMappingWindow.setContent(experimentalDataMappingElement);
  dataMappingWindow.setShowCloseButton(false);
  SlideInElement slideInElement=new SlideInElement(dataMappingWindow,ESlideInElementPosition.TOP);
  dataMappingWindow.addSlideInElement(slideInElement);
  vertexSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(EGeneIDTypes.PATHWAY_VERTEX_REP.name()));
  vertexSelectionManager.registerEventListeners();
  column.add(dataMappingWindow);
  rankingWindow=new GLWindow(""String_Node_Str"",this);
  rankingWindow.setSize(150,Float.NaN);
  rankingElement=new RankingElement(this);
  rankingWindow.setContent(rankingElement);
  slideInElement=new SlideInElement(rankingWindow,ESlideInElementPosition.RIGHT);
  rankingWindow.addSlideInElement(slideInElement);
  rankingWindow.setShowCloseButton(false);
  rankingElement.setWindow(rankingWindow);
  baseContainer.add(rankingWindow);
  pathwayRow.setLayout(pathwayLayout);
  baseContainer.add(pathwayRow);
  root.add(column);
  root.add(augmentation);
  connectionBandRenderer=new ColoredConnectionBandRenderer();
}","/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public GLSubGraph(IGLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  GLElementContainer column=new GLElementContainer(new GLSizeRestrictiveFlowLayout(false,10,GLPadding.ZERO));
  column.add(baseContainer);
  nodeInfoContainer.setSize(Float.NaN,0);
  dataMappingWindow=new GLWindow(""String_Node_Str"",this);
  dataMappingWindow.setSize(Float.NaN,80);
  dataMappingWindow.setContent(experimentalDataMappingElement);
  dataMappingWindow.setShowCloseButton(false);
  SlideInElement slideInElement=new SlideInElement(dataMappingWindow,ESlideInElementPosition.TOP);
  dataMappingWindow.addSlideInElement(slideInElement);
  vertexSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(EGeneIDTypes.PATHWAY_VERTEX_REP.name()));
  vertexSelectionManager.registerEventListeners();
  column.add(dataMappingWindow);
  rankingWindow=new GLWindow(""String_Node_Str"",this);
  rankingWindow.setSize(150,Float.NaN);
  rankingElement=new RankingElement(this);
  rankingWindow.setContent(rankingElement);
  slideInElement=new SlideInElement(rankingWindow,ESlideInElementPosition.RIGHT);
  slideInElement.setCallBack(new ISelectionCallback(){
    @Override public void onSelectionChanged(    GLButton button,    boolean selected){
      if (selected) {
        if (rankingElement.getNumTableColumns() > 1) {
          rankingWindow.setSize(200,Float.NaN);
        }
 else {
          rankingWindow.setSize(150,Float.NaN);
        }
        rankingWindow.background.setVisibility(EVisibility.PICKABLE);
        rankingWindow.baseContainer.setVisibility(EVisibility.VISIBLE);
      }
 else {
        rankingWindow.setSize(1,Float.NaN);
        rankingWindow.background.setVisibility(EVisibility.NONE);
        rankingWindow.baseContainer.setVisibility(EVisibility.NONE);
      }
    }
  }
);
  rankingWindow.addSlideInElement(slideInElement);
  rankingWindow.setShowCloseButton(false);
  rankingElement.setWindow(rankingWindow);
  baseContainer.add(rankingWindow);
  pathwayRow.setLayout(pathwayLayout);
  baseContainer.add(pathwayRow);
  root.add(column);
  root.add(augmentation);
  connectionBandRenderer=new ColoredConnectionBandRenderer();
}",0.8210096889342172
57142,"@Override public void propertyChange(PropertyChangeEvent evt){
  if (window == null)   return;
  if (table.getColumns().size() > 1) {
    if (window.getSize().x() != 200)     window.setSize(200,Float.NaN);
  }
 else {
    if (window.getSize().y() != 150)     window.setSize(150,Float.NaN);
    setFilter(PathwayFilters.NONE);
  }
}","@Override public void propertyChange(PropertyChangeEvent evt){
  if (window == null || window.getSize().x() < 2)   return;
  if (table.getColumns().size() > 1) {
    if (window.getSize().x() != 200)     window.setSize(200,Float.NaN);
  }
 else {
    if (window.getSize().y() != 150)     window.setSize(150,Float.NaN);
    setFilter(PathwayFilters.NONE);
  }
}",0.9594202898550724
57143,"private static boolean combine(ARankColumnModel model,ARankColumnModel with,boolean clone,int combineMode){
  final RankTableModel table=model.getTable();
  model.setCollapsed(false);
  with.setCollapsed(false);
  boolean isWithComposite=with instanceof ACompositeRankColumnModel;
  boolean isModelComposite=model instanceof ACompositeRankColumnModel;
  if (isModelComposite) {
    ACompositeRankColumnModel t=(ACompositeRankColumnModel)model;
    if (table.getConfig().canBeReusedForCombining(t,combineMode)) {
      addAll(with,clone,table,t);
    }
 else {
      createNewCombined(model,with,clone,combineMode,table);
    }
  }
 else {
    if (isWithComposite) {
      ACompositeRankColumnModel w=(ACompositeRankColumnModel)with;
      if (!clone && table.getConfig().canBeReusedForCombining(w,combineMode)) {
        model.getParent().replace(model,w);
        w.add(0,model);
      }
      createNewCombined(model,with,clone,combineMode,table);
    }
 else {
      createNewCombined(model,with,clone,combineMode,table);
    }
  }
  return true;
}","private static boolean combine(ARankColumnModel model,ARankColumnModel with,boolean clone,int combineMode){
  final RankTableModel table=model.getTable();
  model.setCollapsed(false);
  with.setCollapsed(false);
  boolean isWithComposite=with instanceof ACompositeRankColumnModel;
  boolean isModelComposite=model instanceof ACompositeRankColumnModel;
  if (isModelComposite) {
    ACompositeRankColumnModel t=(ACompositeRankColumnModel)model;
    if (table.getConfig().canBeReusedForCombining(t,combineMode)) {
      addAll(with,clone,table,t);
    }
 else {
      createNewCombined(model,with,clone,combineMode,table);
    }
  }
 else {
    if (isWithComposite) {
      ACompositeRankColumnModel w=(ACompositeRankColumnModel)with;
      if (!clone && table.getConfig().canBeReusedForCombining(w,combineMode)) {
        w.getParent().remove(w);
        model.getParent().replace(model,w);
        w.add(0,model);
      }
 else       createNewCombined(model,with,clone,combineMode,table);
    }
 else {
      createNewCombined(model,with,clone,combineMode,table);
    }
  }
  return true;
}",0.97711349836525
57144,"private static void addAll(ARankColumnModel with,boolean clone,final RankTableModel table,ACompositeRankColumnModel model){
  boolean isWithComposite=with instanceof ACompositeRankColumnModel;
  if (isWithComposite && model.isFlatAdding((ACompositeRankColumnModel)with)) {
    if (with.getParent() != null)     with.getParent().remove(with);
    ACompositeRankColumnModel w=(ACompositeRankColumnModel)with;
    Collection<ARankColumnModel> tmp=new ArrayList<>(w.getChildren());
    if (clone) {
      for (      ARankColumnModel wi : tmp)       model.add(wi.clone());
    }
 else {
      for (      ARankColumnModel wi : tmp) {
        w.remove(wi);
        model.add(wi);
      }
    }
  }
 else   if (clone)   model.add(with.clone());
 else {
    if (with.getParent() != null)     with.getParent().remove(with);
    model.add(with);
  }
}","private static void addAll(ARankColumnModel with,boolean clone,final RankTableModel table,ACompositeRankColumnModel model){
  boolean isWithComposite=with instanceof ACompositeRankColumnModel;
  if (isWithComposite && model.isFlatAdding((ACompositeRankColumnModel)with)) {
    ACompositeRankColumnModel w=(ACompositeRankColumnModel)with;
    Collection<ARankColumnModel> tmp=new ArrayList<>(w.getChildren());
    if (clone) {
      for (      ARankColumnModel wi : tmp)       model.add(wi.clone());
    }
 else {
      for (      ARankColumnModel wi : tmp) {
        w.remove(wi);
        model.add(wi);
      }
    }
    if (with.getParent() != null)     with.getParent().remove(with);
  }
 else   if (clone)   model.add(with.clone());
 else {
    if (with.getParent() != null)     with.getParent().remove(with);
    model.add(with);
  }
}",0.5892857142857143
57145,"private void overlayBubbleSets(GL2 gl){
  if (isBubbleTextureDirty) {
    this.bubbleSet.clear();
    this.alternativeBubbleSet.clear();
    this.bubbleSet.setPathwayGraph(pathway);
    this.alternativeBubbleSet.setPathwayGraph(pathway);
    for (    Pair<List<GraphPath<PathwayVertexRep,DefaultEdge>>,Integer> pathsPair : allPathsList) {
      List<GraphPath<PathwayVertexRep,DefaultEdge>> paths=pathsPair.getFirst();
      this.alternativeBubbleSet.addAllPaths(paths,pathsPair.getSecond());
    }
    this.bubbleSet.addPathSegements(pathSegments);
    this.bubbleSet.addPathSegements(pathSegments);
    this.bubbleSet.getBubbleSetGLRenderer().setSize(pathway.getWidth(),pathway.getHeight());
    this.bubbleSet.getBubbleSetGLRenderer().update(gl,null,0);
    alternativeBubbleSet.getBubbleSetGLRenderer().setSize(pathway.getWidth(),pathway.getHeight());
    alternativeBubbleSet.getBubbleSetGLRenderer().update(gl,null,0);
    isBubbleTextureDirty=false;
  }
  gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(uniqueID,EPickingType.PATHWAY_TEXTURE_SELECTION.name(),0));
  this.alternativeBubbleSet.getBubbleSetGLRenderer().render(gl,pixelGLConverter.getGLWidthForPixelWidth(pathway.getWidth()),pixelGLConverter.getGLHeightForPixelHeight(pathway.getHeight()),0.25f);
  this.bubbleSet.getBubbleSetGLRenderer().render(gl,pixelGLConverter.getGLWidthForPixelWidth(pathway.getWidth()),pixelGLConverter.getGLHeightForPixelHeight(pathway.getHeight()));
  gl.glPopName();
}","private void overlayBubbleSets(GL2 gl){
  if (isBubbleTextureDirty) {
    this.bubbleSet.clear();
    this.alternativeBubbleSet.clear();
    this.bubbleSet.setPathwayGraph(pathway);
    this.alternativeBubbleSet.setPathwayGraph(pathway);
    if (pathSegments.size() == 0) {
      allPathsList.clear();
    }
    for (    Pair<List<GraphPath<PathwayVertexRep,DefaultEdge>>,Integer> pathsPair : allPathsList) {
      List<GraphPath<PathwayVertexRep,DefaultEdge>> paths=pathsPair.getFirst();
      this.alternativeBubbleSet.addAllPaths(paths,pathsPair.getSecond());
    }
    this.bubbleSet.addPathSegements(pathSegments);
    this.bubbleSet.addPathSegements(pathSegments);
    this.bubbleSet.getBubbleSetGLRenderer().setSize(pathway.getWidth(),pathway.getHeight());
    this.bubbleSet.getBubbleSetGLRenderer().update(gl,null,0);
    alternativeBubbleSet.getBubbleSetGLRenderer().setSize(pathway.getWidth(),pathway.getHeight());
    alternativeBubbleSet.getBubbleSetGLRenderer().update(gl,null,0);
    isBubbleTextureDirty=false;
  }
  gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(uniqueID,EPickingType.PATHWAY_TEXTURE_SELECTION.name(),0));
  this.alternativeBubbleSet.getBubbleSetGLRenderer().render(gl,pixelGLConverter.getGLWidthForPixelWidth(pathway.getWidth()),pixelGLConverter.getGLHeightForPixelHeight(pathway.getHeight()),0.25f);
  this.bubbleSet.getBubbleSetGLRenderer().render(gl,pixelGLConverter.getGLWidthForPixelWidth(pathway.getWidth()),pixelGLConverter.getGLHeightForPixelHeight(pathway.getHeight()));
  gl.glPopName();
}",0.977139124755062
57146,"@ListenTo(restrictExclusiveToEventSpace=true) public void onPathSelection(PathwayPathSelectionEvent event){
  pathSegments=event.getPathSegments();
  if (pathSegments.size() > 0) {
    PathwayPath segment=pathSegments.get(pathSegments.size() - 1);
    PathwayMultiFormInfo info=getPathwayMultiFormInfo(segment.getPathway());
    if (info != null) {
      lastUsedRenderer=info.multiFormRenderer;
    }
  }
  updatePathLinks();
}","@ListenTo(restrictExclusiveToEventSpace=true) public void onPathSelection(PathwayPathSelectionEvent event){
  pathSegments=event.getPathSegments();
  if (pathSegments.size() > 0) {
    PathwayPath segment=pathSegments.get(pathSegments.size() - 1);
    PathwayMultiFormInfo info=getPathwayMultiFormInfo(segment.getPathway());
    if (info != null) {
      lastUsedRenderer=info.multiFormRenderer;
    }
  }
  updatePathwayPortals();
  updatePathLinks();
}",0.9705215419501134
57147,"protected void updatePathLinks(){
  clearWindowStubSets();
  augmentation.isDirty=true;
  augmentation.setPxlSize(this.getParentGLCanvas().getWidth(),this.getParentGLCanvas().getHeight());
  List<Rectangle2D> path=new ArrayList<>();
  IPathwayRepresentation pathwayRepresentation=null;
  PathwayMultiFormInfo pwInfo=null;
  for (  PathwayPath segment : pathSegments) {
    if (segment == null) {
      System.out.println(""String_Node_Str"");
      break;
    }
    for (    PathwayMultiFormInfo info : pathwayInfos) {
      pathwayRepresentation=getPathwayRepresentation(info.multiFormRenderer,info.multiFormRenderer.getActiveRendererID());
      if (pathwayRepresentation != null && (segment.getPathway() == pathwayRepresentation.getPathway())) {
        pwInfo=info;
        break;
      }
    }
    if (pathwayRepresentation != null && pwInfo != null) {
      for (      PathwayVertexRep v : segment.getNodes()) {
        Rectangle2D rect=getAbsoluteVertexLocation(pathwayRepresentation,v,pwInfo.container);
        if (rect != null)         path.add(rect);
      }
    }
  }
  augmentation.setPath(path);
}","protected void updatePathLinks(){
}",0.0611888111888111
57148,"protected void renderStubRight2RightSide(GL2 gl,Rectangle2D loc,Rectangle2D locTarget,boolean isWindow,PathwayMultiFormInfo info,PathwayMultiFormInfo infoTarget,boolean start){
  if (this.isAngleTooSmall) {
    renderRightOffsetStub(gl,loc,locTarget,isWindow,info,infoTarget,start);
    return;
  }
  xS=(float)loc.getX() + (float)loc.getWidth();
  yS=(float)loc.getY() + (float)loc.getHeight() / 2.0f;
  xE=(float)locTarget.getX() + (float)locTarget.getWidth();
  yE=(float)locTarget.getY() + (float)locTarget.getHeight() / 2.0f;
  float red=bandColor[0];
  float green=bandColor[1];
  float blue=bandColor[2];
  boolean renderStub=true;
  float stubConnectionPointS_X=0.0f;
  float stubConnectionPointS_Y=0.0f;
  float stubConnectionPointE_X=0.0f;
  float stubConnectionPointE_Y=0.0f;
  if (isWindow && !this.drawLink) {
    Pair<PathwayMultiFormInfo,PathwayMultiFormInfo> windowPair=new Pair<PathwayMultiFormInfo,PathwayMultiFormInfo>(info,infoTarget);
    if (this.view.containsWindowsStub(windowPair))     renderStub=false;
    float windowCenterX=(infoTarget.window.getAbsoluteLocation().get(0) + (infoTarget.window.getSize().get(0) / 2.0f));
    float windowCenterY=(infoTarget.window.getAbsoluteLocation().get(1) + (infoTarget.window.getSize().get(1) / 2.0f));
    Vec2f dirToWindowCenter=new Vec2f(windowCenterX - xS,windowCenterY - yS);
    dirToWindowCenter.normalize();
    Vec2f normalVecCenterVec=rotateVec2(dirToWindowCenter,(float)Math.PI / 2f);
    float glBandWidthOffsetX_CenterVec=normalVecCenterVec.get(0) * bandWidth / 2.0f;
    float glBandWidthOffsetY_CenterVec=normalVecCenterVec.get(1) * bandWidth / 2.0f;
    stubConnectionPointE_X=xS + (dirToWindowCenter.get(0) * (stubLength)) - glBandWidthOffsetX_CenterVec;
    stubConnectionPointE_Y=yS + (dirToWindowCenter.get(1) * (stubLength)) + glBandWidthOffsetY_CenterVec;
    stubConnectionPointS_X=xS + (dirToWindowCenter.get(0) * (stubLength)) + glBandWidthOffsetX_CenterVec;
    stubConnectionPointS_Y=yS + (dirToWindowCenter.get(1) * (stubLength)) - glBandWidthOffsetY_CenterVec;
  }
 else {
    Vec2f dirNorm=new Vec2f(xE - xS,yE - yS);
    dirNorm.normalize();
    Vec2f normalVec=rotateVec2(dirNorm,(float)Math.PI / 2f);
    float glBandWidthOffsetX=normalVec.get(0) * bandWidth / 2.0f;
    float glBandWidthOffsetY=normalVec.get(1) * bandWidth / 2.0f;
    stubConnectionPointS_X=xS + (dirNorm.get(0) * (stubLength)) - glBandWidthOffsetX;
    stubConnectionPointS_Y=yS + (dirNorm.get(1) * (stubLength)) - glBandWidthOffsetY;
    stubConnectionPointE_X=xS + (dirNorm.get(0) * (stubLength)) + glBandWidthOffsetX;
    stubConnectionPointE_Y=yS + (dirNorm.get(1) * (stubLength)) + glBandWidthOffsetY;
  }
  float p00X=xS;
  float p00Y=yS - (float)loc.getHeight() / 2.0f;
  float p01X=xS;
  float p01Y=yS + (float)loc.getHeight() / 2.0f;
  if (fadeToOpacity < linkOpacity && !renderStub)   return;
  gl.glBegin(GL2.GL_LINES);
  gl.glColor4f(red,green,blue,this.outlineOpacity);
  gl.glVertex3f(p00X,p00Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPointS_X,stubConnectionPointS_Y,z);
  gl.glColor4f(red,green,blue,this.outlineOpacity);
  gl.glVertex3f(p01X,p01Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPointE_X,stubConnectionPointE_Y,z);
  gl.glEnd();
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4f(red,green,blue,linkOpacity);
  gl.glVertex3f(p00X,p00Y,z);
  gl.glVertex3f(p01X,p01Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPointE_X,stubConnectionPointE_Y,z);
  gl.glVertex3f(stubConnectionPointS_X,stubConnectionPointS_Y,z);
  gl.glEnd();
  if (start) {
    stubConnectionPoint1_X=stubConnectionPointS_X;
    stubConnectionPoint1_Y=stubConnectionPointS_Y;
    stubConnectionPoint2_X=stubConnectionPointE_X;
    stubConnectionPoint2_Y=stubConnectionPointE_Y;
  }
 else {
    stubConnectionPoint3_X=stubConnectionPointS_X;
    stubConnectionPoint3_Y=stubConnectionPointS_Y;
    stubConnectionPoint4_X=stubConnectionPointE_X;
    stubConnectionPoint4_Y=stubConnectionPointE_Y;
  }
}","protected void renderStubRight2RightSide(GL2 gl,Rectangle2D loc,Rectangle2D locTarget,boolean isWindow,PathwayMultiFormInfo info,PathwayMultiFormInfo infoTarget,boolean start){
  if (this.isAngleTooSmall) {
    renderRightOffsetStub(gl,loc,locTarget,isWindow,info,infoTarget,start);
    return;
  }
  xS=(float)loc.getX() + (float)loc.getWidth();
  yS=(float)loc.getY() + (float)loc.getHeight() / 2.0f;
  xE=(float)locTarget.getX() + (float)locTarget.getWidth();
  yE=(float)locTarget.getY() + (float)locTarget.getHeight() / 2.0f;
  float red=bandColor[0];
  float green=bandColor[1];
  float blue=bandColor[2];
  boolean renderStub=true;
  float stubConnectionPointS_X=0.0f;
  float stubConnectionPointS_Y=0.0f;
  float stubConnectionPointE_X=0.0f;
  float stubConnectionPointE_Y=0.0f;
  float p00X=xS;
  float p00Y=yS - (float)loc.getHeight() / 2.0f;
  float p01X=xS;
  float p01Y=yS + (float)loc.getHeight() / 2.0f;
  if (isWindow) {
    Pair<PathwayMultiFormInfo,PathwayMultiFormInfo> windowPair=new Pair<PathwayMultiFormInfo,PathwayMultiFormInfo>(info,infoTarget);
    if (this.view.containsWindowsStub(windowPair))     renderStub=false;
    float windowCenterX=(infoTarget.window.getAbsoluteLocation().get(0) + (infoTarget.window.getSize().get(0) / 2.0f));
    float windowCenterY=(infoTarget.window.getAbsoluteLocation().get(1) + (infoTarget.window.getSize().get(1) / 2.0f));
    Vec2f dirToWindowCenter=new Vec2f(windowCenterX - xS,windowCenterY - yS);
    dirToWindowCenter.normalize();
    if (this.drawLink) {
      Vec2f dirNorm=new Vec2f(xE - xS,yE - yS);
      dirNorm.normalize();
      dirToWindowCenter=dirNorm;
    }
    Vec2f normalVecCenterVec=rotateVec2(dirToWindowCenter,(float)Math.PI / 2f);
    float glBandWidthOffsetX_CenterVec=normalVecCenterVec.get(0) * bandWidth / 2.0f;
    float glBandWidthOffsetY_CenterVec=normalVecCenterVec.get(1) * bandWidth / 2.0f;
    stubConnectionPointE_X=xS + (dirToWindowCenter.get(0) * (stubLength)) - glBandWidthOffsetX_CenterVec;
    stubConnectionPointE_Y=yS + (dirToWindowCenter.get(1) * (stubLength)) - glBandWidthOffsetY_CenterVec;
    stubConnectionPointS_X=xS + (dirToWindowCenter.get(0) * (stubLength)) + glBandWidthOffsetX_CenterVec;
    stubConnectionPointS_Y=yS + (dirToWindowCenter.get(1) * (stubLength)) + glBandWidthOffsetY_CenterVec;
  }
 else {
    Vec2f dirNorm=new Vec2f(xE - xS,yE - yS);
    dirNorm.normalize();
    Vec2f normalVec=rotateVec2(dirNorm,(float)Math.PI / 2f);
    float glBandWidthOffsetX=normalVec.get(0) * bandWidth / 2.0f;
    float glBandWidthOffsetY=normalVec.get(1) * bandWidth / 2.0f;
    stubConnectionPointS_X=xS + (dirNorm.get(0) * (stubLength)) - glBandWidthOffsetX;
    stubConnectionPointS_Y=yS + (dirNorm.get(1) * (stubLength)) - glBandWidthOffsetY;
    stubConnectionPointE_X=xS + (dirNorm.get(0) * (stubLength)) + glBandWidthOffsetX;
    stubConnectionPointE_Y=yS + (dirNorm.get(1) * (stubLength)) + glBandWidthOffsetY;
  }
  if (fadeToOpacity < linkOpacity && !renderStub)   return;
  gl.glBegin(GL2.GL_LINES);
  gl.glColor4f(red,green,blue,this.outlineOpacity);
  gl.glVertex3f(p00X,p00Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPointS_X,stubConnectionPointS_Y,z);
  gl.glColor4f(red,green,blue,this.outlineOpacity);
  gl.glVertex3f(p01X,p01Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPointE_X,stubConnectionPointE_Y,z);
  gl.glEnd();
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4f(red,green,blue,linkOpacity);
  gl.glVertex3f(p00X,p00Y,z);
  gl.glVertex3f(p01X,p01Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPointE_X,stubConnectionPointE_Y,z);
  gl.glVertex3f(stubConnectionPointS_X,stubConnectionPointS_Y,z);
  gl.glEnd();
  if (start) {
    stubConnectionPoint1_X=stubConnectionPointS_X;
    stubConnectionPoint1_Y=stubConnectionPointS_Y;
    stubConnectionPoint2_X=stubConnectionPointE_X;
    stubConnectionPoint2_Y=stubConnectionPointE_Y;
  }
 else {
    stubConnectionPoint3_X=stubConnectionPointS_X;
    stubConnectionPoint3_Y=stubConnectionPointS_Y;
    stubConnectionPoint4_X=stubConnectionPointE_X;
    stubConnectionPoint4_Y=stubConnectionPointE_Y;
  }
}",0.7829880043620502
57149,"protected void renderStubLeftSide(GL2 gl,Rectangle2D loc,Rectangle2D locTarget,boolean isWindow,PathwayMultiFormInfo info,PathwayMultiFormInfo infoTarget,boolean start){
  if (this.isAngleTooSmall) {
    renderLeftOffsetStub(gl,loc,locTarget,isWindow,info,infoTarget,start);
    return;
  }
  xS=(float)locTarget.getX() + (float)locTarget.getWidth();
  yS=(float)locTarget.getY() + (float)locTarget.getHeight() / 2.0f;
  yE=(float)loc.getY() + (float)loc.getHeight() / 2.0f;
  float red=bandColor[0];
  float green=bandColor[1];
  float blue=bandColor[2];
  boolean renderStub=true;
  if (isWindow && !this.drawLink) {
    Pair<PathwayMultiFormInfo,PathwayMultiFormInfo> windowPair=new Pair<PathwayMultiFormInfo,PathwayMultiFormInfo>(info,infoTarget);
    Pair<PathwayMultiFormInfo,PathwayMultiFormInfo> windowPairRev=new Pair<PathwayMultiFormInfo,PathwayMultiFormInfo>(infoTarget,info);
    if (this.view.containsWindowsStub(windowPair))     renderStub=false;
    float windowCenterX=(infoTarget.window.getAbsoluteLocation().get(0) + (infoTarget.window.getSize().get(0) / 2.0f));
    float windowCenterY=(infoTarget.window.getAbsoluteLocation().get(1) + (infoTarget.window.getSize().get(1) / 2.0f));
    Vec2f dirToWindowCenter=null;
    dirToWindowCenter=new Vec2f(windowCenterX - xE,windowCenterY - yE);
    dirToWindowCenter.normalize();
    Vec2f normalVecCenterVec=rotateVec2(dirToWindowCenter,(float)Math.PI / 2f);
    float glBandWidthOffsetX_CenterVec=normalVecCenterVec.get(0) * bandWidth / 2.0f;
    float glBandWidthOffsetY_CenterVec=normalVecCenterVec.get(1) * bandWidth / 2.0f;
    stubConnectionPoint4_X=xE + (dirToWindowCenter.get(0) * (stubLength)) - glBandWidthOffsetX_CenterVec;
    stubConnectionPoint4_Y=yE + (dirToWindowCenter.get(1) * (stubLength)) - glBandWidthOffsetY_CenterVec;
    stubConnectionPoint3_X=xE + (dirToWindowCenter.get(0) * (stubLength)) + glBandWidthOffsetX_CenterVec;
    stubConnectionPoint3_Y=yE + (dirToWindowCenter.get(1) * (stubLength)) + glBandWidthOffsetY_CenterVec;
  }
 else {
    Vec2f dirNorm=new Vec2f(xE - xS,yE - yS);
    dirNorm.normalize();
    Vec2f normalVec=rotateVec2(dirNorm,(float)Math.PI / 2f);
    float glBandWidthOffsetX=normalVec.get(0) * bandWidth / 2.0f;
    float glBandWidthOffsetY=normalVec.get(1) * bandWidth / 2.0f;
    stubConnectionPoint3_X=xE - (dirNorm.get(0) * (stubLength)) - glBandWidthOffsetX;
    stubConnectionPoint3_Y=yE - (dirNorm.get(1) * (stubLength)) - glBandWidthOffsetY;
    stubConnectionPoint4_X=xE - (dirNorm.get(0) * (stubLength)) + glBandWidthOffsetX;
    stubConnectionPoint4_Y=yE - (dirNorm.get(1) * (stubLength)) + glBandWidthOffsetY;
  }
  float stubConnectorWidth=(((float)loc1.getHeight() * 2.0f < (float)loc2.getHeight()) ? (float)loc1.getHeight() : (float)loc2.getHeight());
  float p10X=xE;
  float p10Y=yE - stubConnectorWidth / 2.0f;
  float p11X=xE;
  float p11Y=yE + stubConnectorWidth / 2.0f;
  if (fadeToOpacity < linkOpacity && !renderStub)   return;
  gl.glBegin(GL2.GL_LINES);
  gl.glColor4f(red,green,blue,this.outlineOpacity);
  gl.glVertex3f(p10X,p10Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPoint3_X,stubConnectionPoint3_Y,z);
  gl.glColor4f(red,green,blue,this.outlineOpacity);
  gl.glVertex3f(p11X,p11Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPoint4_X,stubConnectionPoint4_Y,z);
  gl.glEnd();
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4f(red,green,blue,linkOpacity);
  gl.glVertex3f(p10X,p10Y,z);
  gl.glVertex3f(p11X,p11Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPoint4_X,stubConnectionPoint4_Y,z);
  gl.glVertex3f(stubConnectionPoint3_X,stubConnectionPoint3_Y,z);
  gl.glEnd();
}","protected void renderStubLeftSide(GL2 gl,Rectangle2D loc,Rectangle2D locTarget,boolean isWindow,PathwayMultiFormInfo info,PathwayMultiFormInfo infoTarget,boolean start){
  if (this.isAngleTooSmall) {
    renderLeftOffsetStub(gl,loc,locTarget,isWindow,info,infoTarget,start);
    return;
  }
  xS=(float)locTarget.getX() + (float)locTarget.getWidth();
  yS=(float)locTarget.getY() + (float)locTarget.getHeight() / 2.0f;
  xE=(float)loc.getX();
  ;
  yE=(float)loc.getY() + (float)loc.getHeight() / 2.0f;
  float red=bandColor[0];
  float green=bandColor[1];
  float blue=bandColor[2];
  boolean renderStub=true;
  if (isWindow && !this.drawLink) {
    Pair<PathwayMultiFormInfo,PathwayMultiFormInfo> windowPair=new Pair<PathwayMultiFormInfo,PathwayMultiFormInfo>(info,infoTarget);
    Pair<PathwayMultiFormInfo,PathwayMultiFormInfo> windowPairRev=new Pair<PathwayMultiFormInfo,PathwayMultiFormInfo>(infoTarget,info);
    if (this.view.containsWindowsStub(windowPair))     renderStub=false;
    float windowCenterX=(infoTarget.window.getAbsoluteLocation().get(0) + (infoTarget.window.getSize().get(0) / 2.0f));
    float windowCenterY=(infoTarget.window.getAbsoluteLocation().get(1) + (infoTarget.window.getSize().get(1) / 2.0f));
    Vec2f dirToWindowCenter=null;
    dirToWindowCenter=new Vec2f(windowCenterX - xE,windowCenterY - yE);
    dirToWindowCenter.normalize();
    Vec2f normalVecCenterVec=rotateVec2(dirToWindowCenter,(float)Math.PI / 2f);
    float glBandWidthOffsetX_CenterVec=normalVecCenterVec.get(0) * bandWidth / 2.0f;
    float glBandWidthOffsetY_CenterVec=normalVecCenterVec.get(1) * bandWidth / 2.0f;
    stubConnectionPoint4_X=xE + (dirToWindowCenter.get(0) * (stubLength)) - glBandWidthOffsetX_CenterVec;
    stubConnectionPoint4_Y=yE + (dirToWindowCenter.get(1) * (stubLength)) - glBandWidthOffsetY_CenterVec;
    stubConnectionPoint3_X=xE + (dirToWindowCenter.get(0) * (stubLength)) + glBandWidthOffsetX_CenterVec;
    stubConnectionPoint3_Y=yE + (dirToWindowCenter.get(1) * (stubLength)) + glBandWidthOffsetY_CenterVec;
  }
 else {
    Vec2f dirNorm=new Vec2f(xE - xS,yE - yS);
    dirNorm.normalize();
    Vec2f normalVec=rotateVec2(dirNorm,(float)Math.PI / 2f);
    float glBandWidthOffsetX=normalVec.get(0) * bandWidth / 2.0f;
    float glBandWidthOffsetY=normalVec.get(1) * bandWidth / 2.0f;
    stubConnectionPoint3_X=xE - (dirNorm.get(0) * (stubLength)) - glBandWidthOffsetX;
    stubConnectionPoint3_Y=yE - (dirNorm.get(1) * (stubLength)) - glBandWidthOffsetY;
    stubConnectionPoint4_X=xE - (dirNorm.get(0) * (stubLength)) + glBandWidthOffsetX;
    stubConnectionPoint4_Y=yE - (dirNorm.get(1) * (stubLength)) + glBandWidthOffsetY;
  }
  float stubConnectorWidth=(float)loc.getHeight();
  float p10X=xE;
  float p10Y=yE - stubConnectorWidth / 2.0f;
  float p11X=xE;
  float p11Y=yE + stubConnectorWidth / 2.0f;
  if (fadeToOpacity < linkOpacity && !renderStub)   return;
  gl.glBegin(GL2.GL_LINES);
  gl.glColor4f(red,green,blue,this.outlineOpacity);
  gl.glVertex3f(p10X,p10Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPoint3_X,stubConnectionPoint3_Y,z);
  gl.glColor4f(red,green,blue,this.outlineOpacity);
  gl.glVertex3f(p11X,p11Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPoint4_X,stubConnectionPoint4_Y,z);
  gl.glEnd();
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4f(red,green,blue,linkOpacity);
  gl.glVertex3f(p10X,p10Y,z);
  gl.glVertex3f(p11X,p11Y,z);
  gl.glColor4f(red,green,blue,fadeToOpacity);
  gl.glVertex3f(stubConnectionPoint4_X,stubConnectionPoint4_Y,z);
  gl.glVertex3f(stubConnectionPoint3_X,stubConnectionPoint3_Y,z);
  gl.glEnd();
}",0.9815668202764976
57150,"@Override protected void renderContent(GL2 gl){
  if (layoutDisplayListIndex == -1)   layoutDisplayListIndex=gl.glGenLists(1);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  GLU glu=null;
  if (!isBubbleSetInitialized) {
    System.out.println(""String_Node_Str"" + isBubbleSetInitialized);
    bubbleSetRenderer.init(gl);
    isBubbleSetInitialized=true;
  }
  if (isLayoutDirty()) {
    gl.glNewList(layoutDisplayListIndex,GL2.GL_COMPILE);
    glu=new GLU();
    renderPathwayBorders(gl);
    for (    ALinearizableNode node : pathNodes) {
      node.render(gl,glu);
      renderBranchNodes(gl,glu,node);
    }
    if (expandedBranchSummaryNode != null) {
      renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
    }
    renderEdges(gl,pathNodes);
    gl.glEndList();
    setLayoutDirty(false);
  }
  updateBubbleSets(gl);
  this.bubbleSetRenderer.update(gl,null,0);
  this.bubbleSetRenderer.renderPxl(gl,this.x,this.y);
  if (glu == null)   glu=new GLU();
  for (  ALinearizableNode node : pathNodes) {
    node.renderHighlight(gl,glu);
  }
  if (expandedBranchSummaryNode != null) {
    for (    ALinearizableNode node : expandedBranchSummaryNode.getBranchNodes()) {
      node.renderHighlight(gl,glu);
    }
  }
  gl.glCallList(layoutDisplayListIndex);
}","@Override protected void renderContent(GL2 gl){
  if (layoutDisplayListIndex == -1)   layoutDisplayListIndex=gl.glGenLists(1);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  GLU glu=null;
  if (!isBubbleSetInitialized) {
    bubbleSetRenderer.init(gl);
    isBubbleSetInitialized=true;
  }
  if (isLayoutDirty()) {
    gl.glNewList(layoutDisplayListIndex,GL2.GL_COMPILE);
    glu=new GLU();
    renderPathwayBorders(gl);
    for (    ALinearizableNode node : pathNodes) {
      node.render(gl,glu);
      renderBranchNodes(gl,glu,node);
    }
    if (expandedBranchSummaryNode != null) {
      renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
    }
    renderEdges(gl,pathNodes);
    gl.glEndList();
    setLayoutDirty(false);
  }
  updateBubbleSets(gl);
  this.bubbleSetRenderer.update(gl,null,0);
  this.bubbleSetRenderer.renderPxl(gl,this.x,this.y);
  if (glu == null)   glu=new GLU();
  for (  ALinearizableNode node : pathNodes) {
    node.renderHighlight(gl,glu);
  }
  if (expandedBranchSummaryNode != null) {
    for (    ALinearizableNode node : expandedBranchSummaryNode.getBranchNodes()) {
      node.renderHighlight(gl,glu);
    }
  }
  gl.glCallList(layoutDisplayListIndex);
}",0.9739463601532568
57151,"public void updateBubbleSets(GL2 gl){
  int sizeX=Math.round(this.x);
  int sizeY=Math.round(this.y);
  if (updateStrategy != null && this.updateStrategy instanceof FixedPathUpdateStrategy && sizeX > 0 && sizeY > 0) {
    int i=0;
    this.bubbleSetRenderer.setSize(sizeX,sizeY);
    this.bubbleSetRenderer.clearBubbleSet();
    bubbleSetItems.clear();
    bubbleSetEdges.clear();
    for (    List<PathwayVertexRep> segment : ((FixedPathUpdateStrategy)this.updateStrategy).getSelectedPathSegments()) {
      Rectangle2D prevRect=new Rectangle2D.Double(0f,0f,0f,0f);
      for (      PathwayVertexRep node : segment) {
        Rectangle2D nodeRect=getVertexRepBounds(node);
        if (nodeRect != null) {
          float posx=(float)nodeRect.getCenterX();
          float posy=-(float)nodeRect.getCenterY() + this.y;
          bubbleSetItems.add(new Rectangle2D.Double(posx,posy,nodeRect.getWidth(),nodeRect.getHeight()));
          if (i > 0) {
            bubbleSetEdges.add(new Line2D.Double(posx,posy,prevRect.getCenterX(),prevRect.getCenterY()));
          }
          prevRect.setRect(posx,posy,nodeRect.getWidth(),nodeRect.getHeight());
          i++;
        }
      }
    }
    this.bubbleSetRenderer.addGroup(bubbleSetItems,bubbleSetEdges,bubbleSetColor);
    ((BubbleSet)this.bubbleSetRenderer.setOutline).useVirtualEdges(false);
  }
}","public void updateBubbleSets(GL2 gl){
  int sizeX=Math.round(this.x);
  int sizeY=Math.round(this.y);
  if (updateStrategy != null && this.updateStrategy instanceof FixedPathUpdateStrategy && sizeX > 0 && sizeY > 0) {
    int i=0;
    this.bubbleSetRenderer.setSize(sizeX,sizeY);
    this.bubbleSetRenderer.clearBubbleSet();
    for (    List<PathwayVertexRep> segment : ((FixedPathUpdateStrategy)this.updateStrategy).getSelectedPathSegments()) {
      Rectangle2D prevRect=new Rectangle2D.Double(0f,0f,0f,0f);
      bubbleSetItems.clear();
      bubbleSetEdges.clear();
      i=0;
      for (      PathwayVertexRep node : segment) {
        Rectangle2D nodeRect=getVertexRepBounds(node);
        if (nodeRect != null) {
          float posx=(float)nodeRect.getCenterX();
          float posy=-(float)nodeRect.getCenterY() + this.y;
          bubbleSetItems.add(new Rectangle2D.Double(posx,posy,nodeRect.getWidth(),nodeRect.getHeight()));
          if (i > 0) {
            bubbleSetEdges.add(new Line2D.Double(posx,posy,prevRect.getCenterX(),prevRect.getCenterY()));
          }
          prevRect.setRect(posx,posy,nodeRect.getWidth(),nodeRect.getHeight());
          i++;
        }
      }
      this.bubbleSetRenderer.addGroup(bubbleSetItems,bubbleSetEdges,bubbleSetColor);
    }
    ((BubbleSet)this.bubbleSetRenderer.setOutline).useVirtualEdges(false);
  }
}",0.8491331611951309
57152,"/** 
 * @param selectedPath setter, see  {@link #selectedPath}
 */
public void setSelectedPathSegments(List<PathwayPath> pathSegmentsBroadcasted){
  if (pathSegmentsBroadcasted == null)   return;
  pathSegments=pathSegmentsBroadcasted;
  boolean wasPathSelected=this.selectedPath != null;
  this.selectedPath=null;
  for (  PathwayPath path : pathSegments) {
    if (path.getPathway() == pathway) {
      this.selectedPath=path.getPath();
      break;
    }
  }
  allPaths=new ArrayList<GraphPath<PathwayVertexRep,DefaultEdge>>();
  if (selectedPath != null)   allPaths.add(selectedPath);
  if ((wasPathSelected && this.selectedPath == null) || this.selectedPath != null) {
    isBubbleTextureDirty=true;
    setDisplayListDirty();
  }
}","/** 
 * @param selectedPath setter, see  {@link #selectedPath}
 */
public void setSelectedPathSegments(List<PathwayPath> pathSegmentsBroadcasted){
  if (pathSegmentsBroadcasted == null)   return;
  pathSegments=pathSegmentsBroadcasted;
  boolean wasPathSelected=this.selectedPath != null;
  this.selectedPath=null;
  for (  PathwayPath path : pathSegments) {
    if (path.getPathway() == pathway) {
      this.selectedPath=path.getPath();
      break;
    }
  }
  allPaths=new ArrayList<GraphPath<PathwayVertexRep,DefaultEdge>>();
  if (selectedPath != null)   allPaths.add(selectedPath);
  if ((wasPathSelected && this.selectedPath == null) || this.selectedPath != null) {
    isBubbleTextureDirty=true;
    setDisplayListDirty();
  }
  isBubbleTextureDirty=true;
}",0.980705256154358
57153,"private void overlayBubbleSets(GL2 gl){
  if (allPathsList.size() < 1)   return;
  if (isBubbleTextureDirty) {
    this.bubbleSet.clear();
    this.bubbleSet.setPathwayGraph(pathway);
    if (selectedPathID >= 0)     allPathsList.get(allPathsList.size() - 1).setSecond(this.selectedPathID);
 else     allPathsList.get(allPathsList.size() - 1).setSecond(0);
    for (    Pair<List<GraphPath<PathwayVertexRep,DefaultEdge>>,Integer> pathsPair : allPathsList) {
      List<GraphPath<PathwayVertexRep,DefaultEdge>> paths=pathsPair.getFirst();
      this.bubbleSet.addAllPaths(paths,pathsPair.getSecond());
    }
    this.bubbleSet.getBubbleSetGLRenderer().setSize(pathway.getWidth(),pathway.getHeight());
    this.bubbleSet.getBubbleSetGLRenderer().update(gl,null,0);
    isBubbleTextureDirty=false;
  }
  gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(uniqueID,EPickingType.PATHWAY_TEXTURE_SELECTION.name(),0));
  this.bubbleSet.getBubbleSetGLRenderer().render(gl,pixelGLConverter.getGLWidthForPixelWidth(pathway.getWidth()),pixelGLConverter.getGLHeightForPixelHeight(pathway.getHeight()));
  gl.glPopName();
}","private void overlayBubbleSets(GL2 gl){
  if (allPathsList.size() < 1)   return;
  if (isBubbleTextureDirty) {
    this.bubbleSet.clear();
    this.bubbleSet.setPathwayGraph(pathway);
    if (selectedPathID >= 0)     allPathsList.get(allPathsList.size() - 1).setSecond(this.selectedPathID);
 else     allPathsList.get(allPathsList.size() - 1).setSecond(0);
    for (    Pair<List<GraphPath<PathwayVertexRep,DefaultEdge>>,Integer> pathsPair : allPathsList) {
      List<GraphPath<PathwayVertexRep,DefaultEdge>> paths=pathsPair.getFirst();
      this.bubbleSet.addAllPaths(paths,pathsPair.getSecond());
    }
    this.bubbleSet.addPathSegements(pathSegments);
    this.bubbleSet.getBubbleSetGLRenderer().setSize(pathway.getWidth(),pathway.getHeight());
    this.bubbleSet.getBubbleSetGLRenderer().update(gl,null,0);
    isBubbleTextureDirty=false;
  }
  gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(uniqueID,EPickingType.PATHWAY_TEXTURE_SELECTION.name(),0));
  this.bubbleSet.getBubbleSetGLRenderer().render(gl,pixelGLConverter.getGLWidthForPixelWidth(pathway.getWidth()),pixelGLConverter.getGLHeightForPixelHeight(pathway.getHeight()));
  gl.glPopName();
}",0.9780833691448216
57154,"@Override public void keyPressed(IKeyEvent e){
  if (e.isControlDown() && (e.isKey('o'))) {
    enablePathSelection(!isPathSelectionMode);
    getParentComposite().getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (selectPathAction != null) {
          selectPathAction.setChecked(isPathSelectionMode);
        }
      }
    }
);
  }
  isControlKeyDown=e.isControlDown();
  isShiftKeyDown=e.isShiftDown();
  if (e.isDownDown()) {
    System.out.println(""String_Node_Str"");
    selectNextPath(false);
  }
  if (e.isUpDown()) {
    System.out.println(""String_Node_Str"");
    selectNextPath(true);
  }
}","@Override public void keyPressed(IKeyEvent e){
  if (e.isControlDown() && (e.isKey('o'))) {
    enablePathSelection(!isPathSelectionMode);
    getParentComposite().getDisplay().asyncExec(new Runnable(){
      @Override public void run(){
        if (selectPathAction != null) {
          selectPathAction.setChecked(isPathSelectionMode);
        }
      }
    }
);
  }
  isControlKeyDown=e.isControlDown();
  isShiftKeyDown=e.isShiftDown();
  if (e.isDownDown()) {
    selectNextPath(false);
  }
  if (e.isUpDown()) {
    selectNextPath(true);
  }
}",0.8834459459459459
57155,"protected void registeKeyListeners(){
  parentGLCanvas.addKeyListener(new IGLKeyListener(){
    @Override public void keyPressed(    IKeyEvent e){
      if (e.isControlDown() && (e.isKey('o'))) {
        enablePathSelection(!isPathSelectionMode);
        getParentComposite().getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            if (selectPathAction != null) {
              selectPathAction.setChecked(isPathSelectionMode);
            }
          }
        }
);
      }
      isControlKeyDown=e.isControlDown();
      isShiftKeyDown=e.isShiftDown();
      if (e.isDownDown()) {
        System.out.println(""String_Node_Str"");
        selectNextPath(false);
      }
      if (e.isUpDown()) {
        System.out.println(""String_Node_Str"");
        selectNextPath(true);
      }
    }
    @Override public void keyReleased(    IKeyEvent e){
      isControlKeyDown=e.isControlDown();
      isShiftKeyDown=e.isShiftDown();
    }
  }
);
}","protected void registeKeyListeners(){
  parentGLCanvas.addKeyListener(new IGLKeyListener(){
    @Override public void keyPressed(    IKeyEvent e){
      if (e.isControlDown() && (e.isKey('o'))) {
        enablePathSelection(!isPathSelectionMode);
        getParentComposite().getDisplay().asyncExec(new Runnable(){
          @Override public void run(){
            if (selectPathAction != null) {
              selectPathAction.setChecked(isPathSelectionMode);
            }
          }
        }
);
      }
      isControlKeyDown=e.isControlDown();
      isShiftKeyDown=e.isShiftDown();
      if (e.isDownDown()) {
        selectNextPath(false);
      }
      if (e.isUpDown()) {
        selectNextPath(true);
      }
    }
    @Override public void keyReleased(    IKeyEvent e){
      isControlKeyDown=e.isControlDown();
      isShiftKeyDown=e.isShiftDown();
    }
  }
);
}",0.9490790899241603
57156,"private void overlayContextBubbleSets(GL2 gl){
  if (contextPaths.size() < 1)   return;
  if (areContextPathsDirty) {
    this.contextPathBubbleSet.clear();
    this.contextPathBubbleSet.getBubbleSetGLRenderer().setSize(pathway.getWidth(),pathway.getHeight());
    this.contextPathBubbleSet.setPathwayGraph(pathway);
    this.contextPathBubbleSet.addContextPathSegements(contextPaths);
    ((BubbleSet)(contextPathBubbleSet.getBubbleSetGLRenderer().setOutline)).setParameter(10,10,3,10.0,20.0,20.5,5.5,5.0,5);
    this.contextPathBubbleSet.getBubbleSetGLRenderer().update(gl,null,selectedPathID);
    areContextPathsDirty=false;
  }
  this.contextPathBubbleSet.getBubbleSetGLRenderer().render(gl,pixelGLConverter.getGLWidthForPixelWidth(pathway.getWidth()),pixelGLConverter.getGLHeightForPixelHeight(pathway.getHeight()),1.0f);
}","private void overlayContextBubbleSets(GL2 gl){
  if (contextPaths.size() < 1)   return;
  if (areContextPathsDirty) {
    this.contextPathBubbleSet.clear();
    this.contextPathBubbleSet.getBubbleSetGLRenderer().setSize(pathway.getWidth(),pathway.getHeight());
    this.contextPathBubbleSet.setPathwayGraph(pathway);
    this.contextPathBubbleSet.addContextPathSegements(contextPaths);
    ((BubbleSet)(contextPathBubbleSet.getBubbleSetGLRenderer().setOutline)).setParameter(10,10,3,10.0,20.0,20.5,5.5,5.0,5);
    ((BubbleSet)(contextPathBubbleSet.getBubbleSetGLRenderer().setOutline)).useVirtualEdges(false);
    this.contextPathBubbleSet.getBubbleSetGLRenderer().update(gl,null,selectedPathID);
    areContextPathsDirty=false;
  }
  this.contextPathBubbleSet.getBubbleSetGLRenderer().render(gl,pixelGLConverter.getGLWidthForPixelWidth(pathway.getWidth()),pixelGLConverter.getGLHeightForPixelHeight(pathway.getHeight()),1.0f);
}",0.9431171786120592
57157,"private void selectNextPath(boolean inc){
  System.out.println(""String_Node_Str"");
  if (this.allPathsList.size() < 1)   return;
  List<GraphPath<PathwayVertexRep,DefaultEdge>> paths=this.allPathsList.get(this.allPathsList.size() - 1).getFirst();
  if (paths.size() > 1) {
    System.out.println(""String_Node_Str"");
    if (inc)     selectedPathID++;
 else     selectedPathID--;
    if (selectedPathID < 0)     selectedPathID=0;
    if (selectedPathID > paths.size() - 1)     selectedPathID=paths.size() - 1;
    if (allPaths.size() > 0) {
      selectedPath=paths.get(selectedPathID);
      if (selectedPath.getEdgeList().size() > 0 && !isShiftKeyDown) {
        PathwayVertexRep startPrevVertex=selectedPath.getStartVertex();
        PathwayVertexRep endPrevVertex=selectedPath.getEndVertex();
        List<DefaultEdge> edgePrevList=selectedPath.getEdgeList();
        previousSelectedPath=new GraphPathImpl<PathwayVertexRep,DefaultEdge>(pathway,startPrevVertex,endPrevVertex,edgePrevList,0);
      }
    }
  }
 else {
    selectedPathID=0;
  }
  System.out.println(""String_Node_Str"" + selectedPathID);
  isBubbleTextureDirty=true;
  setDisplayListDirty();
  triggerPathUpdate();
}","private void selectNextPath(boolean inc){
  if (this.allPathsList.size() < 1)   return;
  List<GraphPath<PathwayVertexRep,DefaultEdge>> paths=this.allPathsList.get(this.allPathsList.size() - 1).getFirst();
  if (paths.size() > 1) {
    if (inc)     selectedPathID++;
 else     selectedPathID--;
    if (selectedPathID < 0)     selectedPathID=0;
    if (selectedPathID > paths.size() - 1)     selectedPathID=paths.size() - 1;
    if (allPaths.size() > 0) {
      selectedPath=paths.get(selectedPathID);
      if (selectedPath.getEdgeList().size() > 0 && !isShiftKeyDown) {
        PathwayVertexRep startPrevVertex=selectedPath.getStartVertex();
        PathwayVertexRep endPrevVertex=selectedPath.getEndVertex();
        List<DefaultEdge> edgePrevList=selectedPath.getEdgeList();
        previousSelectedPath=new GraphPathImpl<PathwayVertexRep,DefaultEdge>(pathway,startPrevVertex,endPrevVertex,edgePrevList,0);
      }
    }
  }
 else {
    selectedPathID=0;
  }
  isBubbleTextureDirty=true;
  setDisplayListDirty();
  triggerPathUpdate();
}",0.9361510791366906
57158,"public void addContextPathSegements(List<List<PathwayVertexRep>> contextPaths){
  Color contextPathColor=new Color(0.0f,0.0f,1.0f);
  for (  List<PathwayVertexRep> pathSegment : contextPaths) {
    int i=0;
    Rectangle2D prevRect=new Rectangle2D.Double(0f,0f,0f,0f);
    ArrayList<Rectangle2D> items=new ArrayList<>();
    ArrayList<Line2D> edges=new ArrayList<>();
    for (    PathwayVertexRep node : pathSegment) {
      double bbItemW=node.getWidth();
      double bbItemH=node.getHeight();
      double posX=node.getLowerLeftCornerX();
      double posY=node.getLowerLeftCornerY();
      items.add(new Rectangle2D.Double(posX,posY,bbItemW,bbItemH));
      if (i > 0) {
        edges.add(new Line2D.Double(posX,posY,prevRect.getCenterX(),prevRect.getCenterY()));
      }
      prevRect.setRect(posX,posY,bbItemW,bbItemH);
      i++;
    }
    renderer.addGroup(items,edges,contextPathColor);
  }
}","public void addContextPathSegements(List<List<PathwayVertexRep>> contextPaths){
  Color contextPathColor=new Color(0.0f,0.0f,1.0f);
  ArrayList<Rectangle2D> items=new ArrayList<>();
  ArrayList<Line2D> edges=new ArrayList<>();
  int i=0;
  for (  List<PathwayVertexRep> pathSegment : contextPaths) {
    i=0;
    Rectangle2D prevRect=new Rectangle2D.Double(0f,0f,0f,0f);
    edges.clear();
    items.clear();
    for (    PathwayVertexRep node : pathSegment) {
      double bbItemW=node.getWidth();
      double bbItemH=node.getHeight();
      double posX=node.getLowerLeftCornerX();
      double posY=node.getLowerLeftCornerY();
      items.add(new Rectangle2D.Double(posX,posY,bbItemW,bbItemH));
      if (i > 0) {
        edges.add(new Line2D.Double(posX,posY,prevRect.getCenterX(),prevRect.getCenterY()));
      }
      prevRect.setRect(posX,posY,bbItemW,bbItemH);
      i++;
    }
    renderer.addGroup(items,edges,contextPathColor);
  }
}",0.8132106118029236
57159,"public void addAllPaths(List<GraphPath<PathwayVertexRep,DefaultEdge>> allPaths,int selectionID){
  List<org.caleydo.core.util.color.Color> colorTable=(ColorManager.get()).getColorList(""String_Node_Str"");
  int id=0;
  int colorID=0;
  GraphPath<PathwayVertexRep,DefaultEdge> selPath=null;
  float[] selColor=SelectionType.SELECTION.getColor();
  for (  GraphPath<PathwayVertexRep,DefaultEdge> path : allPaths) {
    if (path == null)     break;
    if (selectionID == id) {
      addColoredPath(path,new Color(selColor[0],selColor[1],selColor[2]));
      addColoredPath(path,new Color(selColor[0],selColor[1],selColor[2]));
      break;
    }
    id++;
  }
  id=0;
  for (  GraphPath<PathwayVertexRep,DefaultEdge> path : allPaths) {
    if (id < colorTable.size() - 2) {
      colorID=id;
    }
 else     colorID=colorTable.size() - 1;
    if (path == null)     break;
    if (selectionID != id) {
      org.caleydo.core.util.color.Color c=colorTable.get(colorID);
      addColoredPath(path,new Color(c.r,c.g,c.b));
    }
    id++;
  }
}","public void addAllPaths(List<GraphPath<PathwayVertexRep,DefaultEdge>> allPaths,int selectionID){
  List<org.caleydo.core.util.color.Color> colorTable=(ColorManager.get()).getColorList(""String_Node_Str"");
  int id=0;
  int colorID=0;
  GraphPath<PathwayVertexRep,DefaultEdge> selPath=null;
  float[] selColor=SelectionType.SELECTION.getColor();
  for (  GraphPath<PathwayVertexRep,DefaultEdge> path : allPaths) {
    if (path == null)     break;
    if (selectionID == id) {
      break;
    }
    id++;
  }
  id=0;
  for (  GraphPath<PathwayVertexRep,DefaultEdge> path : allPaths) {
    if (id < colorTable.size() - 2) {
      colorID=id;
    }
 else     colorID=colorTable.size() - 1;
    if (path == null)     break;
    if (selectionID != id) {
      org.caleydo.core.util.color.Color c=colorTable.get(colorID);
      addColoredPath(path,new Color(c.r,c.g,c.b));
    }
    id++;
  }
}",0.922037422037422
57160,"@Override public void doLayout(List<? extends IGLLayoutElement> children,float w,float h){
  Map<GLPathwayWindow,IGLLayoutElement> windowToElement=new HashMap<>();
  for (  IGLLayoutElement child : children) {
    windowToElement.put((GLPathwayWindow)child.asElement(),child);
  }
  float freeSpaceVertical=h - padding.vert();
  if (!view.wasContextChanged()) {
    columns.clear();
    for (    PathwayMultiFormInfo info : view.pathwayInfos) {
      addColumn((GLPathwayWindow)info.window);
    }
    Collections.sort(columns,new ColumnPriorityComparator());
    Collections.reverse(columns);
    float level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
    List<PathwayMultiFormInfo> level1Infos=getInfosWithLevel(EEmbeddingID.PATHWAY_LEVEL1);
    Set<PathwayMultiFormInfo> undemotableInfos=new HashSet<>();
    while (undemotableInfos.size() < level1Infos.size() && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
      Collections.sort(level1Infos,new WindowDemotabilityComparator(view));
      Collections.reverse(level1Infos);
      for (      PathwayMultiFormInfo info : level1Infos) {
        if (demote(info)) {
          level1Infos.remove(info);
          break;
        }
 else {
          undemotableInfos.add(info);
        }
      }
    }
    level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
    List<PathwayColumn> level2Columns=getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
    while (level2Columns.size() >= 2 && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
      Collections.sort(level2Columns,new ColumnPriorityComparator());
      Collections.reverse(level2Columns);
      boolean columnRemoved=false;
      while (!columnRemoved) {
        for (        PathwayColumn column : level2Columns) {
          int currentColumnIndex=level2Columns.indexOf(column);
          PathwayColumn firstColumn=level2Columns.get(0);
          if (currentColumnIndex == level2Columns.size() - 1) {
            if (firstColumn != column && firstColumn.windows.isEmpty()) {
              level2Columns.remove(firstColumn);
              columns.remove(firstColumn);
              columnRemoved=true;
              break;
            }
          }
 else {
            PathwayColumn nextColumn=level2Columns.get(currentColumnIndex + 1);
            if (nextColumn.windows.size() < column.windows.size() || column == firstColumn) {
              nextColumn.windows.add(0,column.windows.get(column.windows.size() - 1));
              column.windows.remove(column.windows.size() - 1);
            }
 else             if (firstColumn.windows.isEmpty()) {
              level2Columns.remove(firstColumn);
              columns.remove(firstColumn);
              columnRemoved=true;
              break;
            }
          }
        }
      }
    }
    level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
  }
  List<PathwayMultiFormInfo> level2Infos=getInfosWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
  Set<PathwayMultiFormInfo> undemotableInfos=new HashSet<>();
  List<LayoutSnapshot> snapshots=new ArrayList<>();
  snapshots.add(new LayoutSnapshot());
  while (undemotableInfos.size() < level2Infos.size() && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
    Collections.sort(level2Infos,new WindowDemotabilityComparator(view));
    Collections.reverse(level2Infos);
    for (    PathwayMultiFormInfo info : level2Infos) {
      if (demote(info)) {
        snapshots.add(new LayoutSnapshot());
        break;
      }
 else {
        undemotableInfos.add(info);
      }
    }
  }
  Collections.reverse(snapshots);
  LayoutSnapshot previousSnapshot=null;
  for (int i=0; i < snapshots.size(); i++) {
    LayoutSnapshot snapshot=snapshots.get(i);
    if (previousSnapshot != null) {
      if (previousSnapshot.minTotalWidth < snapshot.minTotalWidth) {
        previousSnapshot.apply();
        break;
      }
 else       if (Float.compare(previousSnapshot.minTotalWidth,snapshot.minTotalWidth) == 0) {
        snapshot.apply();
      }
    }
    previousSnapshot=snapshot;
  }
  if (!view.wasContextChanged()) {
    float level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
  }
  List<PathwayColumn> level2Columns=getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
  squeezeColumns(level2Columns,freeSpaceVertical);
  Set<PathwayMultiFormInfo> unpromotableInfos=new HashSet<>(level2Infos.size());
  while (unpromotableInfos.size() < level2Infos.size()) {
    Collections.sort(level2Infos,new WindowDemotabilityComparator(view));
    for (    PathwayMultiFormInfo info : level2Infos) {
      LayoutSnapshot snapshotPriorPromotion=new LayoutSnapshot();
      if (info.getCurrentEmbeddingID() != EEmbeddingID.PATHWAY_LEVEL2 && info.multiFormRenderer != view.lastUsedRenderer && promote(info,freeSpaceVertical)) {
        LayoutSnapshot snapshotAfterPromotion=new LayoutSnapshot();
        if ((snapshotAfterPromotion.maxL2ColumnHeight > freeSpaceVertical && snapshotAfterPromotion.maxL2ColumnHeight > snapshotPriorPromotion.maxL2ColumnHeight) || (snapshotAfterPromotion.minTotalWidth > getFreeHorizontalSpace(w) && snapshotAfterPromotion.minTotalWidth > snapshotPriorPromotion.minTotalWidth)) {
          snapshotPriorPromotion.apply();
          unpromotableInfos.add(info);
        }
      }
 else {
        unpromotableInfos.add(info);
      }
    }
  }
  Set<PathwayColumn> level1Columns=new HashSet<>();
  int minTotalLevel1Size=0;
  int totalFixedSize=0;
  List<PathwayColumn> copyColumns=new ArrayList<>(columns);
  Collections.sort(copyColumns,new ColumnPriorityComparator());
  Collections.reverse(copyColumns);
  for (  PathwayColumn column : copyColumns) {
    if (column.getLevelScore() == EEmbeddingID.PATHWAY_LEVEL1.renderPriority()) {
      level1Columns.add(column);
      minTotalLevel1Size+=column.getMinWidth();
    }
 else {
      totalFixedSize+=column.getMinWidth();
    }
  }
  float currentPositionX=padding.left;
  for (  PathwayColumn column : copyColumns) {
    float columnWidth=0;
    if (minTotalLevel1Size == 0) {
      columnWidth=((float)column.getMinWidth() / (float)totalFixedSize) * getFreeHorizontalSpace(w);
    }
 else {
      if (level1Columns.contains(column)) {
        columnWidth=((float)column.getMinWidth() / (float)minTotalLevel1Size) * (getFreeHorizontalSpace(w) - totalFixedSize);
      }
 else {
        columnWidth=column.getMinWidth();
      }
    }
    column.layout(windowToElement,currentPositionX,padding.top,columnWidth,freeSpaceVertical);
    currentPositionX+=columnWidth + gap;
  }
  this.view.setLayoutDirty();
  view.setWasContextChanged(false);
}","@Override public void doLayout(List<? extends IGLLayoutElement> children,float w,float h){
  Map<GLPathwayWindow,IGLLayoutElement> windowToElement=new HashMap<>();
  for (  IGLLayoutElement child : children) {
    windowToElement.put((GLPathwayWindow)child.asElement(),child);
  }
  float freeSpaceVertical=h - padding.vert();
  if (!view.wasContextChanged()) {
    columns.clear();
    for (    PathwayMultiFormInfo info : view.pathwayInfos) {
      addColumn((GLPathwayWindow)info.window);
    }
    Collections.sort(columns,new ColumnPriorityComparator());
    Collections.reverse(columns);
    float level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
    List<PathwayColumn> level1Columns=getColumnsWithLevel(EEmbeddingID.PATHWAY_LEVEL1);
    squeezeColumns(level1Columns,freeSpaceVertical);
    List<PathwayMultiFormInfo> level1Infos=getInfosWithLevel(EEmbeddingID.PATHWAY_LEVEL1);
    Set<PathwayMultiFormInfo> undemotableInfos=new HashSet<>();
    while (undemotableInfos.size() < level1Infos.size() && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
      Collections.sort(level1Infos,new WindowDemotabilityComparator(view));
      Collections.reverse(level1Infos);
      for (      PathwayMultiFormInfo info : level1Infos) {
        if (demote(info)) {
          level1Infos.remove(info);
          break;
        }
 else {
          undemotableInfos.add(info);
        }
      }
    }
    level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
    List<PathwayColumn> level2Columns=getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
    while (level2Columns.size() >= 2 && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
      Collections.sort(level2Columns,new ColumnPriorityComparator());
      Collections.reverse(level2Columns);
      boolean columnRemoved=false;
      while (!columnRemoved) {
        for (        PathwayColumn column : level2Columns) {
          int currentColumnIndex=level2Columns.indexOf(column);
          PathwayColumn firstColumn=level2Columns.get(0);
          if (currentColumnIndex == level2Columns.size() - 1) {
            if (firstColumn != column && firstColumn.windows.isEmpty()) {
              level2Columns.remove(firstColumn);
              columns.remove(firstColumn);
              columnRemoved=true;
              break;
            }
          }
 else {
            PathwayColumn nextColumn=level2Columns.get(currentColumnIndex + 1);
            if (nextColumn.windows.size() < column.windows.size() || column == firstColumn) {
              nextColumn.windows.add(0,column.windows.get(column.windows.size() - 1));
              column.windows.remove(column.windows.size() - 1);
            }
 else             if (firstColumn.windows.isEmpty()) {
              level2Columns.remove(firstColumn);
              columns.remove(firstColumn);
              columnRemoved=true;
              break;
            }
          }
        }
      }
    }
    level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
  }
  List<PathwayMultiFormInfo> level2Infos=getInfosWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
  Set<PathwayMultiFormInfo> undemotableInfos=new HashSet<>();
  List<LayoutSnapshot> snapshots=new ArrayList<>();
  snapshots.add(new LayoutSnapshot());
  while (undemotableInfos.size() < level2Infos.size() && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
    Collections.sort(level2Infos,new WindowDemotabilityComparator(view));
    Collections.reverse(level2Infos);
    for (    PathwayMultiFormInfo info : level2Infos) {
      if (demote(info)) {
        snapshots.add(new LayoutSnapshot());
        break;
      }
 else {
        undemotableInfos.add(info);
      }
    }
  }
  Collections.reverse(snapshots);
  LayoutSnapshot previousSnapshot=null;
  for (int i=0; i < snapshots.size(); i++) {
    LayoutSnapshot snapshot=snapshots.get(i);
    if (previousSnapshot != null) {
      if (previousSnapshot.minTotalWidth < snapshot.minTotalWidth) {
        previousSnapshot.apply();
        break;
      }
 else       if (Float.compare(previousSnapshot.minTotalWidth,snapshot.minTotalWidth) == 0) {
        snapshot.apply();
      }
    }
    previousSnapshot=snapshot;
  }
  if (!view.wasContextChanged()) {
    float level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
  }
  List<PathwayColumn> level2Columns=getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
  squeezeColumns(level2Columns,freeSpaceVertical);
  Set<PathwayMultiFormInfo> unpromotableInfos=new HashSet<>(level2Infos.size());
  while (unpromotableInfos.size() < level2Infos.size()) {
    Collections.sort(level2Infos,new WindowDemotabilityComparator(view));
    for (    PathwayMultiFormInfo info : level2Infos) {
      LayoutSnapshot snapshotPriorPromotion=new LayoutSnapshot();
      if (info.getCurrentEmbeddingID() != EEmbeddingID.PATHWAY_LEVEL2 && info.multiFormRenderer != view.lastUsedRenderer && promote(info,freeSpaceVertical)) {
        LayoutSnapshot snapshotAfterPromotion=new LayoutSnapshot();
        if ((snapshotAfterPromotion.maxL2ColumnHeight > freeSpaceVertical && snapshotAfterPromotion.maxL2ColumnHeight > snapshotPriorPromotion.maxL2ColumnHeight) || (snapshotAfterPromotion.minTotalWidth > getFreeHorizontalSpace(w) && snapshotAfterPromotion.minTotalWidth > snapshotPriorPromotion.minTotalWidth)) {
          snapshotPriorPromotion.apply();
          unpromotableInfos.add(info);
        }
      }
 else {
        unpromotableInfos.add(info);
      }
    }
  }
  Set<PathwayColumn> level1Columns=new HashSet<>();
  int minTotalLevel1Size=0;
  int totalFixedSize=0;
  List<PathwayColumn> copyColumns=new ArrayList<>(columns);
  Collections.sort(copyColumns,new ColumnPriorityComparator());
  Collections.reverse(copyColumns);
  for (  PathwayColumn column : copyColumns) {
    if (column.getLevelScore() == EEmbeddingID.PATHWAY_LEVEL1.renderPriority()) {
      level1Columns.add(column);
      minTotalLevel1Size+=column.getMinWidth();
    }
 else {
      totalFixedSize+=column.getMinWidth();
    }
  }
  float currentPositionX=padding.left;
  for (  PathwayColumn column : copyColumns) {
    float columnWidth=0;
    if (minTotalLevel1Size == 0) {
      columnWidth=((float)column.getMinWidth() / (float)totalFixedSize) * getFreeHorizontalSpace(w);
    }
 else {
      if (level1Columns.contains(column)) {
        columnWidth=((float)column.getMinWidth() / (float)minTotalLevel1Size) * (getFreeHorizontalSpace(w) - totalFixedSize);
      }
 else {
        columnWidth=column.getMinWidth();
      }
    }
    column.layout(windowToElement,currentPositionX,padding.top,columnWidth,freeSpaceVertical);
    currentPositionX+=columnWidth + gap;
  }
  this.view.setLayoutDirty();
  view.setWasContextChanged(false);
}",0.9872500522538842
57161,"/** 
 * are the current changes, e.g. moving triggers changes in the filtering or ordering?
 * @param invalid
 * @param col
 */
public void checkOrderChanges(ARankColumnModel from,ARankColumnModel to){
  if (from != null && from == orderBy) {
    dirtyOrder=true;
    orderByFixed=false;
    fireInvalid();
    return;
  }
  if (findFirstRankable() != orderBy) {
    dirtyOrder=true;
    fireInvalid();
    return;
  }
}","/** 
 * are the current changes, e.g. moving triggers changes in the filtering or ordering?
 * @param invalid
 * @param col
 */
public void checkOrderChanges(ARankColumnModel from,ARankColumnModel to){
  if (from != null && from == orderBy) {
    dirtyOrder=true;
    orderByFixed=false;
    orderBy=null;
    fireInvalid();
    return;
  }
  if (findFirstRankable() != orderBy) {
    dirtyOrder=true;
    fireInvalid();
    return;
  }
}",0.9790209790209792
57162,"/** 
 * explodes the given composite model into its components, i.e children
 */
@Override public void explode(ACompositeRankColumnModel model){
  int index=this.columns.indexOf(model);
  List<ARankColumnModel> children=model.getChildren();
  for (  ARankColumnModel child : children)   child.init(this);
  this.columns.set(index,children.get(0));
  propertySupport.fireIndexedPropertyChange(PROP_COLUMNS,index,model,children.get(0));
  if (children.size() > 1) {
    this.columns.addAll(index + 1,children.subList(1,children.size()));
    propertySupport.fireIndexedPropertyChange(PROP_COLUMNS,index + 1,null,children.subList(1,children.size()));
  }
  if (!defaultFilter.checkFilterChanges(model,children.get(0)))   findCorrespondingRanker(index).checkOrderChanges(model,children.get(0));
}","/** 
 * explodes the given composite model into its components, i.e children
 */
@Override public void explode(ACompositeRankColumnModel model){
  int index=this.columns.indexOf(model);
  List<ARankColumnModel> children=model.getChildren();
  for (  ARankColumnModel child : children) {
    child.init(this);
    child.setWidth(100);
  }
  this.columns.set(index,children.get(0));
  propertySupport.fireIndexedPropertyChange(PROP_COLUMNS,index,model,children.get(0));
  if (children.size() > 1) {
    this.columns.addAll(index + 1,children.subList(1,children.size()));
    propertySupport.fireIndexedPropertyChange(PROP_COLUMNS,index + 1,null,children.subList(1,children.size()));
  }
  if (!defaultFilter.checkFilterChanges(model,children.get(0)))   findCorrespondingRanker(index).checkOrderChanges(model,children.get(0));
}",0.979591836734694
57163,"/** 
 * @param pickedPoint
 */
private EDragMode toDragMode(Point pickedPoint){
  Vec2f r=toRelative(pickedPoint);
  float v=isHorizontal ? r.y() : r.x();
  float max=isHorizontal ? getSize().y() : getSize().x();
  if (v < max * 0.25f)   return isHorizontal ? EDragMode.TO : EDragMode.FROM;
  if (v > max * 0.75f)   return !isHorizontal ? EDragMode.TO : EDragMode.FROM;
  return EDragMode.BOTH;
}","/** 
 * @param pickedPoint
 */
private EDragMode toDragMode(Point pickedPoint){
  Vec2f r=toRelative(pickedPoint);
  float v=isHorizontal ? r.y() : r.x();
  float max=isHorizontal ? getSize().y() : getSize().x();
  if (v < max * 0.15f)   return isHorizontal ? EDragMode.TO : EDragMode.FROM;
  if (v > max * 0.85f)   return !isHorizontal ? EDragMode.TO : EDragMode.FROM;
  return EDragMode.BOTH;
}",0.9949494949494948
57164,"private APathwayPathRenderer addPath(List<List<PathwayVertexRep>> pathSegments){
  VerticalPathRenderer renderer=new VerticalPathRenderer(view,tablePerspectives);
  renderer.setUpdateStrategy(new FixedPathUpdateStrategy(renderer,eventSpace,isPathSelectionMode,this,selectedPathSegments));
  renderer.pathwayPathEventSpace=eventSpace;
  renderer.setPathway(pathway);
  renderer.setBranchPathExtractionEventSpace(BRANCH_PATH_EVENTSPACE);
  renderer.setAllowBranchPathExtraction(true);
  renderer.setSampleMappingMode(sampleMappingMode);
  renderer.setMappedPerspective(mappedPerspective);
  renderer.setSizeConfig(PathSizeConfiguration.COMPACT);
  for (  VertexRepBasedContextMenuItem item : nodeContextMenuItems) {
    renderer.addVertexRepBasedContextMenuItem(item);
  }
  for (  Pair<IVertexRepBasedEventFactory,PickingMode> eventPair : nodeEvents) {
    renderer.addVertexRepBasedSelectionEvent(eventPair.getFirst(),eventPair.getSecond());
  }
  ElementLayout layout=new ElementLayout();
  layout.setDynamicSizeUnitsX(1);
  layout.setRenderer(renderer);
  pathRow.add(layout);
  renderer.init();
  renderer.setPath(pathSegments);
  renderers.put(renderer,layout);
  return renderer;
}","private APathwayPathRenderer addPath(List<List<PathwayVertexRep>> pathSegments){
  VerticalPathRenderer renderer=new VerticalPathRenderer(view,tablePerspectives);
  renderer.setUpdateStrategy(new FixedPathUpdateStrategy(renderer,eventSpace,isPathSelectionMode,this,selectedPathSegments));
  renderer.pathwayPathEventSpace=eventSpace;
  renderer.setPathway(pathway);
  renderer.setBranchPathExtractionEventSpace(BRANCH_PATH_EVENTSPACE);
  renderer.setAllowBranchPathExtraction(true);
  renderer.setSampleMappingMode(sampleMappingMode);
  renderer.setMappedPerspective(mappedPerspective);
  renderer.setSizeConfig(PathSizeConfiguration.COMPACT);
  for (  VertexRepBasedContextMenuItem item : nodeContextMenuItems) {
    renderer.addVertexRepBasedContextMenuItem(item);
  }
  for (  Pair<IVertexRepBasedEventFactory,PickingMode> eventPair : nodeEvents) {
    renderer.addVertexRepBasedSelectionEvent(eventPair.getFirst(),eventPair.getSecond());
  }
  ElementLayout layout=new ElementLayout();
  layout.setRenderer(renderer);
  pathRow.add(layout);
  renderer.init();
  renderer.setPath(pathSegments);
  layout.setDynamicSizeUnitsX(renderer.getMinWidthPixels());
  renderers.put(renderer,layout);
  return renderer;
}",0.8987077949145478
57165,"@Override protected void renderContent(GL2 gl){
  if (layoutDisplayListIndex == -1)   layoutDisplayListIndex=gl.glGenLists(1);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  GLU glu=null;
  gl.glNewList(layoutDisplayListIndex,GL2.GL_COMPILE);
  glu=new GLU();
  renderPathwayBorders(gl);
  for (  ALinearizableNode node : pathNodes) {
    node.render(gl,glu);
    renderBranchNodes(gl,glu,node);
  }
  if (expandedBranchSummaryNode != null) {
    renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
  }
  renderEdges(gl,pathNodes);
  gl.glEndList();
  setLayoutDirty(false);
  if (!isBubbleSetInitialized) {
    System.out.println(""String_Node_Str"" + isBubbleSetInitialized);
    bubbleSetRenderer.init(gl);
    isBubbleSetInitialized=true;
  }
  int sizeX=Math.round(this.x);
  int sizeY=Math.round(this.y);
  if (updateStrategy != null && this.updateStrategy instanceof FixedPathUpdateStrategy && sizeX > 0 && sizeY > 0) {
    int i=0;
    this.bubbleSetRenderer.setSize(sizeX,sizeY);
    this.bubbleSetRenderer.clearBubbleSet();
    bubbleSetItems.clear();
    bubbleSetEdges.clear();
    for (    List<PathwayVertexRep> segment : ((FixedPathUpdateStrategy)this.updateStrategy).getSelectedPathSegments()) {
      Rectangle2D prevRect=new Rectangle2D.Double(0f,0f,0f,0f);
      for (      PathwayVertexRep node : segment) {
        Rectangle2D nodeRect=getVertexRepBounds(node);
        if (nodeRect != null) {
          float posx=(float)nodeRect.getCenterX();
          float posy=-(float)nodeRect.getCenterY() + this.y;
          bubbleSetItems.add(new Rectangle2D.Double(posx,posy,nodeRect.getWidth(),nodeRect.getHeight()));
          if (i > 0) {
            bubbleSetEdges.add(new Line2D.Double(posx,posy,prevRect.getCenterX(),prevRect.getCenterY()));
          }
          prevRect.setRect(posx,posy,nodeRect.getWidth(),nodeRect.getHeight());
          i++;
        }
      }
    }
    this.bubbleSetRenderer.addGroup(bubbleSetItems,bubbleSetEdges,bubbleSetColor);
    ((BubbleSet)this.bubbleSetRenderer.setOutline).useVirtualEdges(false);
    this.bubbleSetRenderer.update(gl,null,0);
    this.bubbleSetRenderer.renderPxl(gl,this.x,this.y);
  }
  if (glu == null)   glu=new GLU();
  for (  ALinearizableNode node : pathNodes) {
    node.renderHighlight(gl,glu);
  }
  if (expandedBranchSummaryNode != null) {
    for (    ALinearizableNode node : expandedBranchSummaryNode.getBranchNodes()) {
      node.renderHighlight(gl,glu);
    }
  }
  gl.glCallList(layoutDisplayListIndex);
}","@Override protected void renderContent(GL2 gl){
  if (layoutDisplayListIndex == -1)   layoutDisplayListIndex=gl.glGenLists(1);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  GLU glu=null;
  if (isLayoutDirty()) {
    gl.glNewList(layoutDisplayListIndex,GL2.GL_COMPILE);
    glu=new GLU();
    renderPathwayBorders(gl);
    for (    ALinearizableNode node : pathNodes) {
      node.render(gl,glu);
      renderBranchNodes(gl,glu,node);
    }
    if (expandedBranchSummaryNode != null) {
      renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
    }
    renderEdges(gl,pathNodes);
    gl.glEndList();
    setLayoutDirty(false);
  }
  if (!isBubbleSetInitialized) {
    System.out.println(""String_Node_Str"" + isBubbleSetInitialized);
    bubbleSetRenderer.init(gl);
    isBubbleSetInitialized=true;
  }
  int sizeX=Math.round(this.x);
  int sizeY=Math.round(this.y);
  if (updateStrategy != null && this.updateStrategy instanceof FixedPathUpdateStrategy && sizeX > 0 && sizeY > 0) {
    int i=0;
    this.bubbleSetRenderer.setSize(sizeX,sizeY);
    this.bubbleSetRenderer.clearBubbleSet();
    bubbleSetItems.clear();
    bubbleSetEdges.clear();
    for (    List<PathwayVertexRep> segment : ((FixedPathUpdateStrategy)this.updateStrategy).getSelectedPathSegments()) {
      Rectangle2D prevRect=new Rectangle2D.Double(0f,0f,0f,0f);
      for (      PathwayVertexRep node : segment) {
        Rectangle2D nodeRect=getVertexRepBounds(node);
        if (nodeRect != null) {
          float posx=(float)nodeRect.getCenterX();
          float posy=-(float)nodeRect.getCenterY() + this.y;
          bubbleSetItems.add(new Rectangle2D.Double(posx,posy,nodeRect.getWidth(),nodeRect.getHeight()));
          if (i > 0) {
            bubbleSetEdges.add(new Line2D.Double(posx,posy,prevRect.getCenterX(),prevRect.getCenterY()));
          }
          prevRect.setRect(posx,posy,nodeRect.getWidth(),nodeRect.getHeight());
          i++;
        }
      }
    }
    this.bubbleSetRenderer.addGroup(bubbleSetItems,bubbleSetEdges,bubbleSetColor);
    ((BubbleSet)this.bubbleSetRenderer.setOutline).useVirtualEdges(false);
    this.bubbleSetRenderer.update(gl,null,0);
    this.bubbleSetRenderer.renderPxl(gl,this.x,this.y);
  }
  if (glu == null)   glu=new GLU();
  for (  ALinearizableNode node : pathNodes) {
    node.renderHighlight(gl,glu);
  }
  if (expandedBranchSummaryNode != null) {
    for (    ALinearizableNode node : expandedBranchSummaryNode.getBranchNodes()) {
      node.renderHighlight(gl,glu);
    }
  }
  gl.glCallList(layoutDisplayListIndex);
}",0.980950548393304
57166,"protected void updatePathwayPortals(){
  PathwayMultiFormInfo info=null;
  if (activeWindow instanceof GLPathwayWindow) {
    GLPathwayWindow w=(GLPathwayWindow)activeWindow;
    if (w.info instanceof PathwayMultiFormInfo) {
      info=(PathwayMultiFormInfo)w.info;
    }
  }
  for (  PathwayMultiFormInfo i : pathwayInfos) {
    i.window.setTitleBarColor(GLTitleBar.DEFAULT_COLOR);
  }
  if (info == null)   return;
  augmentation.clear();
  PathwayVertexRep lastNodeOfPrevSegment=null;
  for (  PathwayPath segment : pathSegments) {
    List<PathwayVertexRep> nodes=segment.getNodes();
    if (!nodes.isEmpty()) {
      if (lastNodeOfPrevSegment != null) {
        PathwayMultiFormInfo info1=getInfo(lastNodeOfPrevSegment);
        PathwayMultiFormInfo info2=getInfo(nodes.get(0));
        if (pathwayRow.getVisibility() == EVisibility.NONE)         continue;
        Rectangle2D loc1=getAbsoluteVertexLocation(getPathwayRepresentation(info1.multiFormRenderer,info1.multiFormRenderer.getActiveRendererID()),lastNodeOfPrevSegment,info1.container);
        Rectangle2D loc2=getAbsoluteVertexLocation(getPathwayRepresentation(info2.multiFormRenderer,info2.multiFormRenderer.getActiveRendererID()),nodes.get(0),info2.container);
        augmentation.add(new LinkRenderer(this,true,loc1,loc2,info1,info2,1,false,false,false,true,lastNodeOfPrevSegment,nodes.get(0),connectionBandRenderer));
      }
      lastNodeOfPrevSegment=nodes.get(nodes.size() - 1);
    }
  }
  if (isShowPortals) {
    Set<GLPathwayWindow> windowsToHighlight=new HashSet<>();
    for (    PathwayVertexRep vertexRep : info.pathway.vertexSet()) {
      if (info.getCurrentEmbeddingID() == EEmbeddingID.PATHWAY_LEVEL1 && vertexRep.getType() == EPathwayVertexType.map) {
        addPortalHighlightRenderer(vertexRep,info);
        continue;
      }
      Pair<Rectangle2D,Boolean> sourcePair=getPortalLocation(vertexRep,info);
      for (      PathwayMultiFormInfo i : pathwayInfos) {
        if (info != i) {
          boolean wasLinkAdded=false;
          wasLinkAdded=addLinkRenderers(vertexRep,info,i,sourcePair);
          boolean highlightAdded=highlightPathwayNodePortals(info,i);
          wasLinkAdded=wasLinkAdded || highlightAdded;
          if (wasLinkAdded) {
            windowsToHighlight.add((GLPathwayWindow)i.window);
          }
        }
 else {
        }
      }
    }
    for (    PathwayMultiFormInfo i : pathwayInfos) {
      if (windowsToHighlight.contains(i.window)) {
        i.window.setTitleBarColor(PortalRenderStyle.DEFAULT_PORTAL_COLOR);
      }
 else {
        i.window.setTitleBarColor(GLTitleBar.DEFAULT_COLOR);
      }
    }
  }
}","protected void updatePathwayPortals(){
  PathwayMultiFormInfo info=null;
  if (portalFocusWindow != null) {
    if (portalFocusWindow.info instanceof PathwayMultiFormInfo) {
      info=(PathwayMultiFormInfo)portalFocusWindow.info;
    }
  }
  for (  PathwayMultiFormInfo i : pathwayInfos) {
    i.window.setTitleBarColor(GLTitleBar.DEFAULT_COLOR);
  }
  if (info == null)   return;
  augmentation.clear();
  PathwayVertexRep lastNodeOfPrevSegment=null;
  for (  PathwayPath segment : pathSegments) {
    List<PathwayVertexRep> nodes=segment.getNodes();
    if (!nodes.isEmpty()) {
      if (lastNodeOfPrevSegment != null) {
        PathwayMultiFormInfo info1=getInfo(lastNodeOfPrevSegment);
        PathwayMultiFormInfo info2=getInfo(nodes.get(0));
        if (pathwayRow.getVisibility() == EVisibility.NONE)         continue;
        Rectangle2D loc1=getAbsoluteVertexLocation(getPathwayRepresentation(info1.multiFormRenderer,info1.multiFormRenderer.getActiveRendererID()),lastNodeOfPrevSegment,info1.container);
        Rectangle2D loc2=getAbsoluteVertexLocation(getPathwayRepresentation(info2.multiFormRenderer,info2.multiFormRenderer.getActiveRendererID()),nodes.get(0),info2.container);
        augmentation.add(new LinkRenderer(this,true,loc1,loc2,info1,info2,1,false,false,false,true,lastNodeOfPrevSegment,nodes.get(0),connectionBandRenderer));
      }
      lastNodeOfPrevSegment=nodes.get(nodes.size() - 1);
    }
  }
  if (isShowPortals) {
    Set<GLPathwayWindow> windowsToHighlight=new HashSet<>();
    for (    PathwayVertexRep vertexRep : info.pathway.vertexSet()) {
      if (info.getCurrentEmbeddingID() == EEmbeddingID.PATHWAY_LEVEL1 && vertexRep.getType() == EPathwayVertexType.map) {
        addPortalHighlightRenderer(vertexRep,info);
        continue;
      }
      Pair<Rectangle2D,Boolean> sourcePair=getPortalLocation(vertexRep,info);
      for (      PathwayMultiFormInfo i : pathwayInfos) {
        if (info != i) {
          boolean wasLinkAdded=false;
          wasLinkAdded=addLinkRenderers(vertexRep,info,i,sourcePair);
          boolean highlightAdded=highlightPathwayNodePortals(info,i);
          wasLinkAdded=wasLinkAdded || highlightAdded;
          if (wasLinkAdded) {
            windowsToHighlight.add((GLPathwayWindow)i.window);
          }
        }
 else {
        }
      }
    }
    for (    PathwayMultiFormInfo i : pathwayInfos) {
      if (windowsToHighlight.contains(i.window)) {
        i.window.setTitleBarColor(PortalRenderStyle.DEFAULT_PORTAL_COLOR);
      }
 else {
        i.window.setTitleBarColor(GLTitleBar.DEFAULT_COLOR);
      }
    }
  }
}",0.9481934620531448
57167,"/** 
 * @param currentActiveBackground setter, see  {@link currentActiveBackground}
 */
public void setActiveWindow(GLWindow activeWindow){
  if (activeWindow != null && this.activeWindow != null && activeWindow != this.activeWindow) {
    this.activeWindow.setActive(false);
  }
  this.activeWindow=activeWindow;
  isLayoutDirty=true;
}","/** 
 * @param currentActiveBackground setter, see  {@link currentActiveBackground}
 */
public void setActiveWindow(GLWindow activeWindow){
  if (activeWindow != null && this.activeWindow != null && activeWindow != this.activeWindow) {
    this.activeWindow.setActive(false);
  }
  if (activeWindow instanceof GLPathwayWindow) {
    portalFocusWindow=(GLPathwayWindow)activeWindow;
  }
  this.activeWindow=activeWindow;
  isLayoutDirty=true;
}",0.8641025641025641
57168,"@Override public void doLayout(List<? extends IGLLayoutElement> children,float w,float h){
  Map<GLPathwayWindow,IGLLayoutElement> windowToElement=new HashMap<>();
  for (  IGLLayoutElement child : children) {
    windowToElement.put((GLPathwayWindow)child.asElement(),child);
  }
  float freeSpaceVertical=h - padding.vert();
  if (!view.wasContextChanged()) {
    columns.clear();
    for (    PathwayMultiFormInfo info : view.pathwayInfos) {
      addColumn((GLPathwayWindow)info.window);
    }
    Collections.sort(columns,new ColumnPriorityComparator());
    Collections.reverse(columns);
    float level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
    List<PathwayMultiFormInfo> level1Infos=getInfosWithLevel(EEmbeddingID.PATHWAY_LEVEL1);
    Set<PathwayMultiFormInfo> undemotableInfos=new HashSet<>();
    while (undemotableInfos.size() < level1Infos.size() && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
      Collections.sort(level1Infos,new WindowDemotabilityComparator(view));
      Collections.reverse(level1Infos);
      for (      PathwayMultiFormInfo info : level1Infos) {
        if (demote(info)) {
          level1Infos.remove(info);
          break;
        }
 else {
          undemotableInfos.add(info);
        }
      }
    }
    level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
    List<PathwayColumn> level2Columns=getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
    while (level2Columns.size() >= 2 && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
      Collections.sort(level2Columns,new ColumnPriorityComparator());
      Collections.reverse(level2Columns);
      boolean columnRemoved=false;
      while (!columnRemoved) {
        for (        PathwayColumn column : level2Columns) {
          int currentColumnIndex=level2Columns.indexOf(column);
          PathwayColumn firstColumn=level2Columns.get(0);
          if (currentColumnIndex == level2Columns.size() - 1) {
            if (firstColumn != column && firstColumn.windows.isEmpty()) {
              level2Columns.remove(firstColumn);
              columns.remove(firstColumn);
              columnRemoved=true;
              break;
            }
          }
 else {
            PathwayColumn nextColumn=level2Columns.get(currentColumnIndex + 1);
            if (nextColumn.windows.size() < column.windows.size() || column == firstColumn) {
              nextColumn.windows.add(0,column.windows.get(column.windows.size() - 1));
              column.windows.remove(column.windows.size() - 1);
            }
 else             if (firstColumn.windows.isEmpty()) {
              level2Columns.remove(firstColumn);
              columns.remove(firstColumn);
              columnRemoved=true;
              break;
            }
          }
        }
      }
    }
    level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
  }
  List<PathwayMultiFormInfo> level2Infos=getInfosWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
  Set<PathwayMultiFormInfo> undemotableInfos=new HashSet<>();
  List<LayoutSnapshot> snapshots=new ArrayList<>();
  snapshots.add(new LayoutSnapshot());
  while (undemotableInfos.size() < level2Infos.size() && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
    Collections.sort(level2Infos,new WindowDemotabilityComparator(view));
    Collections.reverse(level2Infos);
    for (    PathwayMultiFormInfo info : level2Infos) {
      if (demote(info)) {
        snapshots.add(new LayoutSnapshot());
        break;
      }
 else {
        undemotableInfos.add(info);
      }
    }
  }
  Collections.reverse(snapshots);
  LayoutSnapshot previousSnapshot=null;
  for (int i=0; i < snapshots.size(); i++) {
    LayoutSnapshot snapshot=snapshots.get(i);
    if (previousSnapshot != null) {
      if (previousSnapshot.minTotalWidth < snapshot.minTotalWidth) {
        previousSnapshot.apply();
        break;
      }
 else       if (Float.compare(previousSnapshot.minTotalWidth,snapshot.minTotalWidth) == 0) {
        snapshot.apply();
      }
    }
    previousSnapshot=snapshot;
  }
  if (!view.wasContextChanged()) {
    float level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
  }
  List<PathwayColumn> level2Columns=getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
  squeezeColumns(level2Columns,freeSpaceVertical);
  Set<PathwayMultiFormInfo> unpromotableInfos=new HashSet<>(level2Infos.size());
  while (unpromotableInfos.size() < level2Infos.size()) {
    Collections.sort(level2Infos,new WindowDemotabilityComparator(view));
    for (    PathwayMultiFormInfo info : level2Infos) {
      LayoutSnapshot snapshotPriorPromotion=new LayoutSnapshot();
      if (info.getCurrentEmbeddingID() != EEmbeddingID.PATHWAY_LEVEL2 && promote(info,freeSpaceVertical)) {
        LayoutSnapshot snapshotAfterPromotion=new LayoutSnapshot();
        if ((snapshotAfterPromotion.maxColumnHeight > freeSpaceVertical && snapshotAfterPromotion.maxColumnHeight > snapshotPriorPromotion.maxColumnHeight) || (snapshotAfterPromotion.minTotalWidth > getFreeHorizontalSpace(w) && snapshotAfterPromotion.minTotalWidth > snapshotPriorPromotion.minTotalWidth)) {
          snapshotPriorPromotion.apply();
          unpromotableInfos.add(info);
        }
      }
 else {
        unpromotableInfos.add(info);
      }
    }
  }
  Set<PathwayColumn> level1Columns=new HashSet<>();
  int minTotalLevel1Size=0;
  int totalFixedSize=0;
  List<PathwayColumn> copyColumns=new ArrayList<>(columns);
  Collections.sort(copyColumns,new ColumnPriorityComparator());
  Collections.reverse(copyColumns);
  for (  PathwayColumn column : copyColumns) {
    if (column.getLevelScore() == EEmbeddingID.PATHWAY_LEVEL1.renderPriority()) {
      level1Columns.add(column);
      minTotalLevel1Size+=column.getMinWidth();
    }
 else {
      totalFixedSize+=column.getMinWidth();
    }
  }
  float currentPositionX=padding.left;
  for (  PathwayColumn column : copyColumns) {
    float columnWidth=0;
    if (minTotalLevel1Size == 0) {
      columnWidth=((float)column.getMinWidth() / (float)totalFixedSize) * getFreeHorizontalSpace(w);
    }
 else {
      if (level1Columns.contains(column)) {
        columnWidth=((float)column.getMinWidth() / (float)minTotalLevel1Size) * (getFreeHorizontalSpace(w) - totalFixedSize);
      }
 else {
        columnWidth=column.getMinWidth();
      }
    }
    column.layout(windowToElement,currentPositionX,padding.top,columnWidth,freeSpaceVertical);
    currentPositionX+=columnWidth + gap;
  }
  this.view.setLayoutDirty();
}","@Override public void doLayout(List<? extends IGLLayoutElement> children,float w,float h){
  Map<GLPathwayWindow,IGLLayoutElement> windowToElement=new HashMap<>();
  for (  IGLLayoutElement child : children) {
    windowToElement.put((GLPathwayWindow)child.asElement(),child);
  }
  float freeSpaceVertical=h - padding.vert();
  if (!view.wasContextChanged()) {
    columns.clear();
    for (    PathwayMultiFormInfo info : view.pathwayInfos) {
      addColumn((GLPathwayWindow)info.window);
    }
    Collections.sort(columns,new ColumnPriorityComparator());
    Collections.reverse(columns);
    float level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
    List<PathwayMultiFormInfo> level1Infos=getInfosWithLevel(EEmbeddingID.PATHWAY_LEVEL1);
    Set<PathwayMultiFormInfo> undemotableInfos=new HashSet<>();
    while (undemotableInfos.size() < level1Infos.size() && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
      Collections.sort(level1Infos,new WindowDemotabilityComparator(view));
      Collections.reverse(level1Infos);
      for (      PathwayMultiFormInfo info : level1Infos) {
        if (demote(info)) {
          level1Infos.remove(info);
          break;
        }
 else {
          undemotableInfos.add(info);
        }
      }
    }
    level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
    List<PathwayColumn> level2Columns=getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
    while (level2Columns.size() >= 2 && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
      Collections.sort(level2Columns,new ColumnPriorityComparator());
      Collections.reverse(level2Columns);
      boolean columnRemoved=false;
      while (!columnRemoved) {
        for (        PathwayColumn column : level2Columns) {
          int currentColumnIndex=level2Columns.indexOf(column);
          PathwayColumn firstColumn=level2Columns.get(0);
          if (currentColumnIndex == level2Columns.size() - 1) {
            if (firstColumn != column && firstColumn.windows.isEmpty()) {
              level2Columns.remove(firstColumn);
              columns.remove(firstColumn);
              columnRemoved=true;
              break;
            }
          }
 else {
            PathwayColumn nextColumn=level2Columns.get(currentColumnIndex + 1);
            if (nextColumn.windows.size() < column.windows.size() || column == firstColumn) {
              nextColumn.windows.add(0,column.windows.get(column.windows.size() - 1));
              column.windows.remove(column.windows.size() - 1);
            }
 else             if (firstColumn.windows.isEmpty()) {
              level2Columns.remove(firstColumn);
              columns.remove(firstColumn);
              columnRemoved=true;
              break;
            }
          }
        }
      }
    }
    level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
  }
  List<PathwayMultiFormInfo> level2Infos=getInfosWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
  Set<PathwayMultiFormInfo> undemotableInfos=new HashSet<>();
  List<LayoutSnapshot> snapshots=new ArrayList<>();
  snapshots.add(new LayoutSnapshot());
  while (undemotableInfos.size() < level2Infos.size() && !isSufficientHorizontalSpace(getFreeHorizontalSpace(w))) {
    Collections.sort(level2Infos,new WindowDemotabilityComparator(view));
    Collections.reverse(level2Infos);
    for (    PathwayMultiFormInfo info : level2Infos) {
      if (demote(info)) {
        snapshots.add(new LayoutSnapshot());
        break;
      }
 else {
        undemotableInfos.add(info);
      }
    }
  }
  Collections.reverse(snapshots);
  LayoutSnapshot previousSnapshot=null;
  for (int i=0; i < snapshots.size(); i++) {
    LayoutSnapshot snapshot=snapshots.get(i);
    if (previousSnapshot != null) {
      if (previousSnapshot.minTotalWidth < snapshot.minTotalWidth) {
        previousSnapshot.apply();
        break;
      }
 else       if (Float.compare(previousSnapshot.minTotalWidth,snapshot.minTotalWidth) == 0) {
        snapshot.apply();
      }
    }
    previousSnapshot=snapshot;
  }
  if (!view.wasContextChanged()) {
    float level1FreeSpaceHorizontal=w - padding.hor() - getTotalColumnWidth(getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2));
    optimizeLevel1Space(level1FreeSpaceHorizontal,freeSpaceVertical);
  }
  List<PathwayColumn> level2Columns=getColumnsWithMaxLevel(EEmbeddingID.PATHWAY_LEVEL2);
  squeezeColumns(level2Columns,freeSpaceVertical);
  Set<PathwayMultiFormInfo> unpromotableInfos=new HashSet<>(level2Infos.size());
  while (unpromotableInfos.size() < level2Infos.size()) {
    Collections.sort(level2Infos,new WindowDemotabilityComparator(view));
    for (    PathwayMultiFormInfo info : level2Infos) {
      LayoutSnapshot snapshotPriorPromotion=new LayoutSnapshot();
      if (info.getCurrentEmbeddingID() != EEmbeddingID.PATHWAY_LEVEL2 && promote(info,freeSpaceVertical)) {
        LayoutSnapshot snapshotAfterPromotion=new LayoutSnapshot();
        if ((snapshotAfterPromotion.maxL2ColumnHeight > freeSpaceVertical && snapshotAfterPromotion.maxL2ColumnHeight > snapshotPriorPromotion.maxL2ColumnHeight) || (snapshotAfterPromotion.minTotalWidth > getFreeHorizontalSpace(w) && snapshotAfterPromotion.minTotalWidth > snapshotPriorPromotion.minTotalWidth)) {
          snapshotPriorPromotion.apply();
          unpromotableInfos.add(info);
        }
      }
 else {
        unpromotableInfos.add(info);
      }
    }
  }
  Set<PathwayColumn> level1Columns=new HashSet<>();
  int minTotalLevel1Size=0;
  int totalFixedSize=0;
  List<PathwayColumn> copyColumns=new ArrayList<>(columns);
  Collections.sort(copyColumns,new ColumnPriorityComparator());
  Collections.reverse(copyColumns);
  for (  PathwayColumn column : copyColumns) {
    if (column.getLevelScore() == EEmbeddingID.PATHWAY_LEVEL1.renderPriority()) {
      level1Columns.add(column);
      minTotalLevel1Size+=column.getMinWidth();
    }
 else {
      totalFixedSize+=column.getMinWidth();
    }
  }
  float currentPositionX=padding.left;
  for (  PathwayColumn column : copyColumns) {
    float columnWidth=0;
    if (minTotalLevel1Size == 0) {
      columnWidth=((float)column.getMinWidth() / (float)totalFixedSize) * getFreeHorizontalSpace(w);
    }
 else {
      if (level1Columns.contains(column)) {
        columnWidth=((float)column.getMinWidth() / (float)minTotalLevel1Size) * (getFreeHorizontalSpace(w) - totalFixedSize);
      }
 else {
        columnWidth=column.getMinWidth();
      }
    }
    column.layout(windowToElement,currentPositionX,padding.top,columnWidth,freeSpaceVertical);
    currentPositionX+=columnWidth + gap;
  }
  this.view.setLayoutDirty();
  view.setWasContextChanged(false);
}",0.9970145009951664
57169,"public LayoutSnapshot(){
  for (  PathwayColumn column : columns) {
    PathwayColumn newColumn=new PathwayColumn();
    for (    GLPathwayWindow window : column.windows) {
      newColumn.windows.add(window);
      windowToRendererID.put(window,window.info.multiFormRenderer.getActiveRendererID());
    }
    cols.add(newColumn);
    minTotalWidth+=column.getMinWidth();
    if (newColumn.getMinHeight() > maxColumnHeight) {
      maxColumnHeight=newColumn.getMinHeight();
    }
  }
}","public LayoutSnapshot(){
  for (  PathwayColumn column : columns) {
    PathwayColumn newColumn=new PathwayColumn();
    for (    GLPathwayWindow window : column.windows) {
      newColumn.windows.add(window);
      windowToRendererID.put(window,window.info.multiFormRenderer.getActiveRendererID());
    }
    cols.add(newColumn);
    minTotalWidth+=column.getMinWidth();
    if (newColumn.getMinHeight() > maxL2ColumnHeight && !newColumn.hasLevel(EEmbeddingID.PATHWAY_LEVEL1)) {
      maxL2ColumnHeight=newColumn.getMinHeight();
    }
  }
}",0.9454191033138402
57170,"@Override public void display(GL2 gl){
  if (windowToSetActive != null) {
    windowToSetActive.setActive(true);
    windowToSetActive=null;
  }
  boolean updateAugmentation=false;
  if (isLayoutDirty)   updateAugmentation=true;
  super.display(gl);
  if (wasPathwayAdded) {
    EnablePathSelectionEvent event=new EnablePathSelectionEvent(isPathSelectionMode);
    event.setEventSpace(pathEventSpace);
    eventPublisher.triggerEvent(event);
    wasPathwayAdded=false;
  }
  if (updateAugmentation) {
    updateAugmentation();
  }
  dndController.handleDragging(gl,glMouseListener);
  contextMenuItemsToShow.clear();
  wasContextChanged=false;
}","@Override public void display(GL2 gl){
  if (windowToSetActive != null) {
    windowToSetActive.setActive(true);
    windowToSetActive=null;
  }
  boolean updateAugmentation=false;
  if (isLayoutDirty)   updateAugmentation=true;
  super.display(gl);
  if (wasPathwayAdded) {
    EnablePathSelectionEvent event=new EnablePathSelectionEvent(isPathSelectionMode);
    event.setEventSpace(pathEventSpace);
    eventPublisher.triggerEvent(event);
    wasPathwayAdded=false;
  }
  if (updateAugmentation) {
    updateAugmentation();
  }
  dndController.handleDragging(gl,glMouseListener);
  contextMenuItemsToShow.clear();
}",0.978622327790974
57171,"/** 
 * returns all colors of the given brightness
 * @param brightness
 * @return
 */
public static IColor[] get(EBrightness brightness){
switch (brightness) {
case DARK_AND_BRIGHT:
    return dark_and_bright;
case LIGHT:
  return light;
case MEDIUM:
return medium;
}
throw new IllegalStateException();
}","/** 
 * returns all colors of the given brightness
 * @param brightness
 * @return
 */
public static IColor[] get(EBrightness brightness){
switch (brightness) {
case DARK_AND_BRIGHT:
    return dark_and_bright_c;
case LIGHT:
  return light_c;
case MEDIUM:
return medium_c;
}
throw new IllegalStateException();
}",0.9902597402597404
57172,"public static StackedRankColumnModel addYear(RankTableModel table,String title,Function<IRow,WorldUniversityYear> year,boolean addStars){
  final StackedRankColumnModel stacked=new StackedRankColumnModel();
  stacked.setTitle(title);
  table.add(stacked);
  Color[] light=StephenFewColorPalette.get(EBrightness.LIGHT);
  Color[] dark=StephenFewColorPalette.get(EBrightness.MEDIUM);
  stacked.add(col(year,COL_academic,""String_Node_Str"",dark[1],light[1]));
  stacked.add(col(year,COL_employer,""String_Node_Str"",dark[2],light[2]));
  stacked.add(col(year,COL_faculty,""String_Node_Str"",dark[3],light[3]));
  stacked.add(col(year,COL_citations,""String_Node_Str"",dark[4],light[4]));
  stacked.add(col(year,COL_international,""String_Node_Str"",dark[5],light[5]));
  stacked.add(col(year,COL_internationalstudents,""String_Node_Str"",dark[6],light[6]));
  stacked.setDistributions(new float[]{40,10,20,20,5,5});
  stacked.setWidth(300);
  if (addStars) {
    StarsRankColumnModel s=new StarsRankColumnModel(new ValueGetter(year,COL_QSSTARS),GLRenderers.drawText(""String_Node_Str"",VAlign.CENTER),Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""),6);
    table.add(s);
  }
  return stacked;
}","public static StackedRankColumnModel addYear(RankTableModel table,String title,Function<IRow,WorldUniversityYear> year,boolean addStars){
  final StackedRankColumnModel stacked=new StackedRankColumnModel();
  stacked.setTitle(title);
  table.add(stacked);
  Color[] light=StephenFewColorPalette.getAsAWT(EBrightness.LIGHT);
  Color[] dark=StephenFewColorPalette.getAsAWT(EBrightness.MEDIUM);
  stacked.add(col(year,COL_academic,""String_Node_Str"",dark[1],light[1]));
  stacked.add(col(year,COL_employer,""String_Node_Str"",dark[2],light[2]));
  stacked.add(col(year,COL_faculty,""String_Node_Str"",dark[3],light[3]));
  stacked.add(col(year,COL_citations,""String_Node_Str"",dark[4],light[4]));
  stacked.add(col(year,COL_international,""String_Node_Str"",dark[5],light[5]));
  stacked.add(col(year,COL_internationalstudents,""String_Node_Str"",dark[6],light[6]));
  stacked.setDistributions(new float[]{40,10,20,20,5,5});
  stacked.setWidth(300);
  if (addStars) {
    StarsRankColumnModel s=new StarsRankColumnModel(new ValueGetter(year,COL_QSSTARS),GLRenderers.drawText(""String_Node_Str"",VAlign.CENTER),Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""),6);
    table.add(s);
  }
  return stacked;
}",0.9958298582151792
57173,"@Override public int getMinPixelHeight(){
  if (minHeightPixels != -1)   return minHeightPixels;
  if (pathway == null)   return 120;
  return (int)(pathway.getHeight() * 0.65f);
}","@Override public int getMinPixelHeight(){
  if (minHeightPixels != -1)   return minHeightPixels;
  if (pathway == null)   return 120;
  return (int)(pathway.getHeight() * 0.8f);
}",0.9916434540389972
57174,"@Override protected boolean hasPickAbles(){
  return !children.isEmpty();
}","@Override protected boolean hasPickAbles(){
  return super.hasPickAbles() || !children.isEmpty();
}",0.8620689655172413
57175,"@Override protected void init(IRankColumnParent table){
  super.init(table);
  RankTableModel t=getTable();
  t.addPropertyChangeListener(RankTableModel.PROP_DATA,listener);
  maskInvalid.set(0,t.getDataSize());
}","@Override protected void init(IRankColumnParent table){
  super.init(table);
  RankTableModel t=getTable();
  t.addPropertyChangeListener(RankTableModel.PROP_DATA,listener);
  maskInvalid.set(0,t.getDataSize());
  cacheHist=null;
}",0.9594594594594594
57176,"@Override protected void renderImpl(GLGraphics g,float w,float h){
  if (isOpen) {
    g.incZ(zDeltaList);
    listRenderer.render(g,w,h * model.size(),this);
    g.color(Color.DARK_GRAY).drawLine(0,h,w,h).drawRect(0,0,w,h * model.size() + h);
    for (int i=0; i < model.size(); ++i) {
      actRenderIndex=i;
      g.move(0,h);
      valueRenderer.render(g,w,h,this);
    }
    g.move(0,-h * model.size());
    actRenderIndex=-1;
    g.incZ(-zDeltaList);
  }
 else {
    float hi=h * 0.5f;
    g.color(Color.LIGHT_GRAY).fillPolygon(new Vec2f(w - hi - 1,(h - hi) * 0.5f),new Vec2f(w - 1,(h - hi) * 0.5f),new Vec2f(w - hi * 0.5f - 1,hi + (h - hi) * 0.5f));
  }
  if (selected >= 0 && !isOpen) {
    valueRenderer.render(g,w,h,this);
  }
 else {
    super.renderImpl(g,w,h);
  }
  if (hoveredIndex >= 0) {
    g.incZ(zDeltaList);
    g.move(0,h * (hoveredIndex + 1));
  }
  if (hovered)   hoverEffect.render(g,w,h,this);
  if (armed)   armedEffect.render(g,w,h,this);
  if (hoveredIndex >= 0) {
    g.move(0,-h * (hoveredIndex + 1));
    g.incZ(-zDeltaList);
  }
}","@Override protected void renderImpl(GLGraphics g,float w,float h){
  if (isOpen) {
    g.incZ(zDeltaList);
    g.move(0,h);
    listRenderer.render(g,w,h * model.size(),this);
    g.move(0,-h);
    g.color(Color.DARK_GRAY).drawLine(0,h,w,h).drawRect(0,0,w,h * model.size() + h);
    for (int i=0; i < model.size(); ++i) {
      actRenderIndex=i;
      g.move(0,h);
      valueRenderer.render(g,w,h,this);
    }
    g.move(0,-h * model.size());
    actRenderIndex=-1;
    g.incZ(-zDeltaList);
  }
 else {
    float hi=h * 0.5f;
    g.color(Color.LIGHT_GRAY).fillPolygon(new Vec2f(w - hi - 1,(h - hi) * 0.5f),new Vec2f(w - 1,(h - hi) * 0.5f),new Vec2f(w - hi * 0.5f - 1,hi + (h - hi) * 0.5f));
  }
  if (selected >= 0 && !isOpen) {
    valueRenderer.render(g,w,h,this);
  }
 else {
    super.renderImpl(g,w,h);
  }
  if (hoveredIndex >= 0) {
    g.incZ(zDeltaList);
    g.move(0,h * (hoveredIndex + 1));
  }
  if (hovered)   hoverEffect.render(g,w,h,this);
  if (armed)   armedEffect.render(g,w,h,this);
  if (hoveredIndex >= 0) {
    g.move(0,-h * (hoveredIndex + 1));
    g.incZ(-zDeltaList);
  }
}",0.983803794539565
57177,"@Override public void doLayout(IGLLayoutElement raw,IGLLayoutElement norm,IGLLayoutElement canvas,float x,float y,float w,float h){
  final float histHeight=HIST_HEIGHT + RenderStyle.LABEL_HEIGHT;
  Vec2f rawL;
  Vec2f normL;
  Vec2f canvasL;
  if (isNormalLeft) {
    rawL=new Vec2f(x + histHeight + GAP,y + h - histHeight);
    normL=new Vec2f(x,y + GAP + x);
    canvasL=new Vec2f(histHeight + GAP + x,y + GAP + x);
  }
 else {
    rawL=new Vec2f(x,y + h - histHeight);
    normL=new Vec2f(w - x - histHeight,y + GAP);
    canvasL=new Vec2f(x,y + GAP);
  }
  raw.setBounds(rawL.x(),rawL.y(),w - histHeight - GAP * 2,histHeight);
  raw.asElement().setLayoutData(Boolean.TRUE);
  norm.setBounds(normL.x(),normL.y(),histHeight,h - histHeight - GAP * 2);
  norm.asElement().setLayoutData(!isNormalLeft);
  float x_canvas=canvasL.x();
  float y_canvas=canvasL.y();
  float w_canvas=w - histHeight - GAP * 2;
  float h_canvas=h - histHeight - GAP * 2;
  canvas.setBounds(x_canvas,y_canvas,w_canvas,h_canvas);
}","@Override public void doLayout(IGLLayoutElement raw,IGLLayoutElement norm,IGLLayoutElement canvas,float x,float y,float w,float h){
  final float histHeight=HIST_HEIGHT + RenderStyle.LABEL_HEIGHT;
  Vec2f rawL;
  Vec2f normL;
  Vec2f canvasL;
  if (isNormalLeft) {
    rawL=new Vec2f(x + histHeight + GAP,y + h - histHeight);
    normL=new Vec2f(x,y + GAP + x);
    canvasL=new Vec2f(histHeight + GAP + x,y + GAP);
  }
 else {
    rawL=new Vec2f(x,y + h - histHeight);
    normL=new Vec2f(w - x - histHeight,y + GAP);
    canvasL=new Vec2f(x,y + GAP);
  }
  raw.setBounds(rawL.x(),rawL.y(),w - histHeight - GAP * 2,histHeight);
  raw.asElement().setLayoutData(Boolean.TRUE);
  norm.setBounds(normL.x(),normL.y(),histHeight,h - histHeight - GAP * 2);
  norm.asElement().setLayoutData(!isNormalLeft);
  float x_canvas=canvasL.x();
  float y_canvas=canvasL.y();
  float w_canvas=w - histHeight - GAP * 2;
  float h_canvas=h - histHeight - GAP * 2;
  canvas.setBounds(x_canvas,y_canvas,w_canvas,h_canvas);
}",0.9980099502487564
57178,"public GLPathwayBackground(){
}","public GLPathwayBackground(GLWindow parentWindow){
  this.parentWindow=parentWindow;
}",0.5299145299145299
57179,"private boolean setWindowActive(Point mousePosition,GLWindow window){
  Vec2f location=window.getAbsoluteLocation();
  Vec2f size=window.getSize();
  if ((mousePosition.x >= location.x() && mousePosition.x <= location.x() + size.x()) && (mousePosition.y >= location.y() && mousePosition.y <= location.y() + size.y())) {
    window.setActive(true);
    return true;
  }
  return false;
}","private boolean setWindowActive(Point mousePosition,GLWindow window){
  Vec2f location=window.getAbsoluteLocation();
  Vec2f size=window.getSize();
  if ((mousePosition.x >= location.x() && mousePosition.x <= location.x() + size.x()) && (mousePosition.y >= location.y() && mousePosition.y <= location.y() + size.y())) {
    windowToSetActive=window;
    return true;
  }
  return false;
}",0.9767441860465116
57180,"protected void registerListeners(){
  parentGLCanvas.addMouseListener(new IGLMouseListener(){
    @Override public void mouseWheelMoved(    IMouseEvent mouseEvent){
    }
    @Override public void mouseReleased(    IMouseEvent mouseEvent){
    }
    @Override public void mousePressed(    IMouseEvent mouseEvent){
    }
    @Override public void mouseMoved(    IMouseEvent mouseEvent){
      Point mousePosition=mouseEvent.getPoint();
      for (      PathwayMultiFormInfo info : pathwayInfos) {
        if (setWindowActive(mousePosition,info.window))         return;
      }
      if (setWindowActive(mousePosition,pathInfo.window))       return;
      if (setWindowActive(mousePosition,rankingWindow))       return;
      if (setWindowActive(mousePosition,dataMappingWindow))       return;
    }
    private boolean setWindowActive(    Point mousePosition,    GLWindow window){
      Vec2f location=window.getAbsoluteLocation();
      Vec2f size=window.getSize();
      if ((mousePosition.x >= location.x() && mousePosition.x <= location.x() + size.x()) && (mousePosition.y >= location.y() && mousePosition.y <= location.y() + size.y())) {
        window.setActive(true);
        return true;
      }
      return false;
    }
    @Override public void mouseExited(    IMouseEvent mouseEvent){
    }
    @Override public void mouseEntered(    IMouseEvent mouseEvent){
    }
    @Override public void mouseDragged(    IMouseEvent mouseEvent){
    }
    @Override public void mouseClicked(    IMouseEvent mouseEvent){
    }
  }
);
  parentGLCanvas.addKeyListener(new IGLKeyListener(){
    @Override public void keyPressed(    IKeyEvent e){
      update(e);
    }
    @Override public void keyReleased(    IKeyEvent e){
    }
    private void update(    IKeyEvent e){
      boolean isPPressed=e.isKeyDown('p');
      if (isPPressed) {
        ShowPortalsEvent event=new ShowPortalsEvent(!showPortalsButton.isChecked());
        showPortalsButton.setChecked(!showPortalsButton.isChecked());
        event.setEventSpace(pathEventSpace);
        EventPublisher.INSTANCE.triggerEvent(event);
      }
    }
  }
);
}","protected void registerListeners(){
  parentGLCanvas.addMouseListener(new IGLMouseListener(){
    @Override public void mouseWheelMoved(    IMouseEvent mouseEvent){
    }
    @Override public void mouseReleased(    IMouseEvent mouseEvent){
    }
    @Override public void mousePressed(    IMouseEvent mouseEvent){
    }
    @Override public void mouseMoved(    IMouseEvent mouseEvent){
      Point mousePosition=mouseEvent.getPoint();
      for (      PathwayMultiFormInfo info : pathwayInfos) {
        if (setWindowActive(mousePosition,info.window))         return;
      }
      if (setWindowActive(mousePosition,pathInfo.window))       return;
      if (setWindowActive(mousePosition,rankingWindow))       return;
      if (setWindowActive(mousePosition,dataMappingWindow))       return;
    }
    private boolean setWindowActive(    Point mousePosition,    GLWindow window){
      Vec2f location=window.getAbsoluteLocation();
      Vec2f size=window.getSize();
      if ((mousePosition.x >= location.x() && mousePosition.x <= location.x() + size.x()) && (mousePosition.y >= location.y() && mousePosition.y <= location.y() + size.y())) {
        windowToSetActive=window;
        return true;
      }
      return false;
    }
    @Override public void mouseExited(    IMouseEvent mouseEvent){
    }
    @Override public void mouseEntered(    IMouseEvent mouseEvent){
    }
    @Override public void mouseDragged(    IMouseEvent mouseEvent){
    }
    @Override public void mouseClicked(    IMouseEvent mouseEvent){
    }
  }
);
  parentGLCanvas.addKeyListener(new IGLKeyListener(){
    @Override public void keyPressed(    IKeyEvent e){
      update(e);
    }
    @Override public void keyReleased(    IKeyEvent e){
    }
    private void update(    IKeyEvent e){
      boolean isPPressed=e.isKeyDown('p');
      if (isPPressed) {
        ShowPortalsEvent event=new ShowPortalsEvent(!showPortalsButton.isChecked());
        showPortalsButton.setChecked(!showPortalsButton.isChecked());
        event.setEventSpace(pathEventSpace);
        EventPublisher.INSTANCE.triggerEvent(event);
      }
    }
  }
);
}",0.995734597156398
57181,"@Override public void display(GL2 gl){
  boolean updateAugmentation=false;
  if (isLayoutDirty)   updateAugmentation=true;
  super.display(gl);
  for (  AContextMenuItem item : contextMenuItemsToShow) {
    getContextMenuCreator().add(item);
  }
  if (wasPathwayAdded) {
    EnablePathSelectionEvent event=new EnablePathSelectionEvent(isPathSelectionMode);
    event.setEventSpace(pathEventSpace);
    eventPublisher.triggerEvent(event);
    wasPathwayAdded=false;
  }
  if (updateAugmentation) {
    updateAugmentation();
  }
  dndController.handleDragging(gl,glMouseListener);
  contextMenuItemsToShow.clear();
}","@Override public void display(GL2 gl){
  if (windowToSetActive != null) {
    windowToSetActive.setActive(true);
    windowToSetActive=null;
  }
  boolean updateAugmentation=false;
  if (isLayoutDirty)   updateAugmentation=true;
  super.display(gl);
  if (wasPathwayAdded) {
    EnablePathSelectionEvent event=new EnablePathSelectionEvent(isPathSelectionMode);
    event.setEventSpace(pathEventSpace);
    eventPublisher.triggerEvent(event);
    wasPathwayAdded=false;
  }
  if (updateAugmentation) {
    updateAugmentation();
  }
  dndController.handleDragging(gl,glMouseListener);
  contextMenuItemsToShow.clear();
}",0.8311688311688312
57182,"protected final void invalidAllFilter(){
  maskInvalid.set(0,getTable().getDataSize());
}","protected final void invalidAllFilter(){
  if (parent != null)   maskInvalid.set(0,getTable().getDataSize());
}",0.89
57183,"public void setCollapsed(boolean collapsed){
  if (this.collapsed == collapsed)   return;
  if (collapsed && !parent.isCollapseAble(this))   return;
  propertySupport.firePropertyChange(ICollapseableColumnMixin.PROP_COLLAPSED,this.collapsed,this.collapsed=collapsed);
}","public void setCollapsed(boolean collapsed){
  if (this.collapsed == collapsed)   return;
  if (collapsed && parent != null && !parent.isCollapseAble(this))   return;
  propertySupport.firePropertyChange(ICollapseableColumnMixin.PROP_COLLAPSED,this.collapsed,this.collapsed=collapsed);
}",0.9676258992805756
57184,"/** 
 * @param piecewiseMappingCrossUI
 */
public void addMode(AMappingFunctionMode<?> mode){
  modes.add(mode);
  GLButton b=new GLButton(EButtonMode.BUTTON);
  final String icon=mode.getIcon();
  b.setRenderer(GLRenderers.fillImage(icon));
  b.setSelectedRenderer(new IGLRenderer(){
    @Override public void render(    GLGraphics g,    float w,    float h,    GLElement parent){
      g.color(Color.RED).fillRect(0,0,w,h);
      g.fillImage(icon,0,0,w,h);
    }
  }
);
  b.setPickingObjectId(modes.size() - 1);
  b.setSize(RenderStyle.BUTTON_WIDTH,Float.NaN);
  ((GLElementContainer)this.get(BUTTONS)).add(modes.size() - 1,b);
  if (modes.size() == 1) {
    this.add(modes.get(0));
    b.setSelected(true);
  }
  radio.add(b);
}","/** 
 * @param piecewiseMappingCrossUI
 */
public void addMode(AMappingFunctionMode<?> mode){
  modes.add(mode);
  GLButton b=new GLButton(EButtonMode.BUTTON);
  final String icon=mode.getIcon();
  b.setRenderer(GLRenderers.fillImage(icon));
  b.setSelectedRenderer(new IGLRenderer(){
    @Override public void render(    GLGraphics g,    float w,    float h,    GLElement parent){
      g.color(Color.RED).fillRect(0,0,w,h);
      g.fillImage(icon,0,0,w,h);
    }
  }
);
  b.setTooltip(""String_Node_Str"" + mode.getName() + ""String_Node_Str"");
  b.setPickingObjectId(modes.size() - 1);
  b.setSize(RenderStyle.BUTTON_WIDTH,Float.NaN);
  ((GLElementContainer)this.get(BUTTONS)).add(modes.size() - 1,b);
  if (modes.size() == 1) {
    this.add(modes.get(0));
    b.setSelected(true);
  }
  radio.add(b);
}",0.9530638852672751
57185,"public MappingFunctionUI(IMappingFunction model,IFloatList data,Color color,Color bgColor,ICallback<? super IMappingFunction> callback){
  this.callback=callback;
  this.model=model;
  this.raw=data;
  this.color=color;
  this.backgroundColor=bgColor;
  this.add(new RawHistogramElement(raw.map(FloatFunctions.normalize(model.getActMin(),model.getActMax()))));
  this.add(new NormalizedHistogramElement());
  this.add(new CodeElement());
  ButtonBar buttons=new ButtonBar();
  buttons.addSpacer();
  GLComboBox<EStandardMappings> mappings=new GLComboBox<>(Arrays.asList(EStandardMappings.values()),GLComboBox.DEFAULT,GLRenderers.fillRect(Color.WHITE));
  mappings.setRenderer(new IGLRenderer(){
    @Override public void render(    GLGraphics g,    float w,    float h,    GLElement parent){
      g.color(Color.BLACK).drawRect(0,0,w,h);
      g.drawText(""String_Node_Str"",1,h * 0.25f,w - 2,h * 0.5f);
    }
  }
);
  mappings.setCallback(this);
  mappings.setSize(RenderStyle.BUTTON_WIDTH * 4,Float.NaN);
  mappings.setTooltip(""String_Node_Str"");
  buttons.add(mappings);
  buttons.addSpacer();
  GLButton b=new GLButton();
  b.setRenderer(GLRenderers.fillImage(RenderStyle.ICON_MAPPING_RESET));
  b.setCallback(this);
  b.setPickingObjectId(-1);
  b.setSize(RenderStyle.BUTTON_WIDTH,Float.NaN);
  buttons.add(b);
  this.add(buttons);
  setLayout(this);
}","public MappingFunctionUI(IMappingFunction model,IFloatList data,Color color,Color bgColor,ICallback<? super IMappingFunction> callback){
  this.callback=callback;
  this.model=model;
  this.raw=data;
  this.color=color;
  this.backgroundColor=bgColor;
  this.add(new RawHistogramElement(raw.map(FloatFunctions.normalize(model.getActMin(),model.getActMax()))));
  this.add(new NormalizedHistogramElement());
  this.add(new CodeElement());
  ButtonBar buttons=new ButtonBar();
  buttons.addSpacer();
  GLComboBox<EStandardMappings> mappings=new GLComboBox<>(Arrays.asList(EStandardMappings.values()),GLComboBox.DEFAULT,GLRenderers.fillRect(Color.WHITE));
  mappings.setRenderer(new IGLRenderer(){
    @Override public void render(    GLGraphics g,    float w,    float h,    GLElement parent){
      g.color(Color.BLACK).drawRect(0,0,w,h);
      g.drawText(""String_Node_Str"",1,h * 0.25f,w - 2,h * 0.5f);
    }
  }
);
  mappings.setCallback(this);
  mappings.setSize(RenderStyle.BUTTON_WIDTH * 4,Float.NaN);
  mappings.setTooltip(""String_Node_Str"");
  buttons.add(mappings);
  buttons.addSpacer();
  GLButton b=new GLButton();
  b.setRenderer(GLRenderers.fillImage(RenderStyle.ICON_MAPPING_RESET));
  b.setTooltip(""String_Node_Str"");
  b.setCallback(this);
  b.setPickingObjectId(-1);
  b.setSize(RenderStyle.BUTTON_WIDTH,Float.NaN);
  buttons.add(b);
  this.add(buttons);
  setLayout(this);
}",0.9872495446265938
57186,"private StackedRankColumnModel createPValue(RankTableModel table,final int column,final String label,Color color,Color bgColor){
  StackedRankColumnModel stacked=new StackedRankColumnModel();
  stacked.setTitle(label);
  table.add(stacked);
  for (  TumorType type : TumorType.values()) {
    stacked.add(new FloatRankColumnModel(new ValueGetter(type,column),GLRenderers.drawText(type.name() + ""String_Node_Str"" + label,VAlign.CENTER),color,bgColor,pValueMapping(),FloatInferrers.MEDIAN));
  }
  stacked.setWidth(250);
  return stacked;
}","private StackedRankColumnModel createPValue(RankTableModel table,final int column,final String label,Color color,Color bgColor){
  StackedRankColumnModel stacked=new StackedRankColumnModel();
  stacked.setTitle(label);
  table.add(stacked);
  for (  TumorType type : TumorType.values()) {
    stacked.add(pcol(type,column,label,color,bgColor));
  }
  stacked.setWidth(250);
  return stacked;
}",0.7948442534908701
57187,"private StackedRankColumnModel createUnBound(RankTableModel table,final int column,final String label,Color color,Color bgColor){
  StackedRankColumnModel stacked=new StackedRankColumnModel();
  stacked.setTitle(label);
  table.add(stacked);
  for (  TumorType type : TumorType.values()) {
    stacked.add(new FloatRankColumnModel(new ValueGetter(type,column),GLRenderers.drawText(type.name() + ""String_Node_Str"" + label,VAlign.CENTER),color,bgColor,new PiecewiseMapping(0,Float.NaN),FloatInferrers.MEDIAN));
  }
  stacked.setWidth(150);
  return stacked;
}","private StackedRankColumnModel createUnBound(RankTableModel table,final int column,final String label,Color color,Color bgColor){
  StackedRankColumnModel stacked=new StackedRankColumnModel();
  stacked.setTitle(label);
  table.add(stacked);
  for (  TumorType type : TumorType.values()) {
    stacked.add(ucol(type,column,label,color,bgColor));
  }
  stacked.setWidth(150);
  return stacked;
}",0.7802313354363828
57188,"@Override public void apply(RankTableModel table) throws Exception {
  List<GeneRow> rows=readData();
  table.addData(rows);
  RankRankColumnModel rankRankColumnModel=new RankRankColumnModel();
  table.add(rankRankColumnModel);
  table.add(new StringRankColumnModel(GLRenderers.drawText(""String_Node_Str"",VAlign.CENTER),StringRankColumnModel.DEFAULT));
  StackedRankColumnModel m=createPValue(table,TumorTypeRow.COL_p,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
  m.setFilter(0.3f,1.0f);
  createPValue(table,TumorTypeRow.COL_q,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
  createUnBound(table,TumorTypeRow.COL_nflank,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
  createUnBound(table,TumorTypeRow.COL_nsil,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
  createUnBound(table,TumorTypeRow.COL_nnon,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
  createUnBound(table,TumorTypeRow.COL_nnull,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
}","@Override public void apply(RankTableModel table) throws Exception {
  List<GeneRow> rows=readData();
  table.addData(rows);
  for (  TumorType type : TumorType.values()) {
    OrderColumn c=new OrderColumn();
    c.setTitle(type.toString());
    table.add(c);
    table.add(new RankRankColumnModel());
    table.add(new StringRankColumnModel(GLRenderers.drawText(""String_Node_Str"",VAlign.CENTER),StringRankColumnModel.DEFAULT));
    FloatRankColumnModel ci=pcol(type,TumorTypeRow.COL_p,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
    ci.setFilterNotMappedEntries(true);
    table.add(ci);
    ci=pcol(type,TumorTypeRow.COL_q,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
    ci.setCollapsed(true);
    table.add(ci);
    ci=ucol(type,TumorTypeRow.COL_nflank,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
    ci.setCollapsed(true);
    table.add(ci);
    ci=ucol(type,TumorTypeRow.COL_nsil,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
    ci.setCollapsed(true);
    table.add(ci);
    ci=ucol(type,TumorTypeRow.COL_nnon,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
    ci.setCollapsed(true);
    table.add(ci);
    ci=ucol(type,TumorTypeRow.COL_nnull,""String_Node_Str"",Color.decode(""String_Node_Str""),Color.decode(""String_Node_Str""));
    ci.setCollapsed(true);
    table.add(ci);
  }
}",0.7348942598187311
57189,"private PiecewiseMapping pValueMapping(){
  PiecewiseMapping p=new PiecewiseMapping(0,1);
  p.clear();
  p.put(0,1);
  p.put(1,0);
  return p;
}","private PiecewiseMapping pValueMapping(){
  PiecewiseMapping p=new PiecewiseMapping(0,1);
  p.clear();
  p.put(0,1);
  p.put(0.8f,0);
  return p;
}",0.9828178694158076
57190,"@Override public void mouseMoved(IMouseEvent mouseEvent){
  Point mousePosition=mouseEvent.getPoint();
  for (  PathwayMultiFormInfo info : pathwayInfos) {
    if (setWindowActive(mousePosition,info.window))     return;
  }
  if (setWindowActive(mousePosition,pathInfo.window))   return;
  if (setWindowActive(mousePosition,rankingWindow))   return;
  if (setWindowActive(mousePosition,dataMappingWindow))   return;
}","@Override public void mouseMoved(IMouseEvent mouseEvent){
  Point mousePosition=mouseEvent.getPoint();
  if (pathwayRow.getVisibility() != EVisibility.NONE) {
    for (    PathwayMultiFormInfo info : pathwayInfos) {
      if (setWindowActive(mousePosition,info.window))       return;
    }
  }
  if (setWindowActive(mousePosition,pathInfo.window))   return;
  if (setWindowActive(mousePosition,rankingWindow))   return;
  if (setWindowActive(mousePosition,dataMappingWindow))   return;
}",0.911504424778761
57191,"protected void updatePathwayPortals(){
  PathwayMultiFormInfo info=null;
  if (activeWindow instanceof GLPathwayWindow) {
    GLPathwayWindow w=(GLPathwayWindow)activeWindow;
    if (w.info instanceof PathwayMultiFormInfo) {
      info=(PathwayMultiFormInfo)w.info;
    }
  }
  if (info == null)   return;
  augmentation.clear();
  PathwayVertexRep lastNodeOfPrevSegment=null;
  for (  PathwayPath segment : pathSegments) {
    List<PathwayVertexRep> nodes=segment.getNodes();
    if (!nodes.isEmpty()) {
      if (lastNodeOfPrevSegment != null) {
        PathwayMultiFormInfo info1=getInfo(lastNodeOfPrevSegment);
        PathwayMultiFormInfo info2=getInfo(nodes.get(0));
        Rectangle2D loc1=getAbsoluteVertexLocation(getPathwayRepresentation(info1.multiFormRenderer,info1.multiFormRenderer.getActiveRendererID()),lastNodeOfPrevSegment,info1.container);
        Rectangle2D loc2=getAbsoluteVertexLocation(getPathwayRepresentation(info2.multiFormRenderer,info2.multiFormRenderer.getActiveRendererID()),nodes.get(0),info2.container);
        augmentation.add(new LinkRenderer(this,true,loc1,loc2,info1,info2,1,false,false,false,true,lastNodeOfPrevSegment,nodes.get(0)));
      }
      lastNodeOfPrevSegment=nodes.get(nodes.size() - 1);
    }
  }
  if (isShowPortals) {
    for (    PathwayVertexRep vertexRep : info.pathway.vertexSet()) {
      Pair<Rectangle2D,Boolean> sourcePair=getPortalLocation(vertexRep,info);
      for (      PathwayMultiFormInfo i : pathwayInfos) {
        if (info != i) {
          if (info.getCurrentEmbeddingID() != EEmbeddingID.PATHWAY_LEVEL1) {
            if (i.getCurrentEmbeddingID() == EEmbeddingID.PATHWAY_LEVEL1) {
              addLinkRenderers(vertexRep,info,i,sourcePair);
            }
          }
 else {
            addLinkRenderers(vertexRep,info,i,sourcePair);
          }
        }
 else {
        }
      }
    }
  }
}","protected void updatePathwayPortals(){
  PathwayMultiFormInfo info=null;
  if (activeWindow instanceof GLPathwayWindow) {
    GLPathwayWindow w=(GLPathwayWindow)activeWindow;
    if (w.info instanceof PathwayMultiFormInfo) {
      info=(PathwayMultiFormInfo)w.info;
    }
  }
  if (info == null)   return;
  augmentation.clear();
  PathwayVertexRep lastNodeOfPrevSegment=null;
  for (  PathwayPath segment : pathSegments) {
    List<PathwayVertexRep> nodes=segment.getNodes();
    if (!nodes.isEmpty()) {
      if (lastNodeOfPrevSegment != null) {
        PathwayMultiFormInfo info1=getInfo(lastNodeOfPrevSegment);
        PathwayMultiFormInfo info2=getInfo(nodes.get(0));
        if (pathwayRow.getVisibility() == EVisibility.NONE)         continue;
        Rectangle2D loc1=getAbsoluteVertexLocation(getPathwayRepresentation(info1.multiFormRenderer,info1.multiFormRenderer.getActiveRendererID()),lastNodeOfPrevSegment,info1.container);
        Rectangle2D loc2=getAbsoluteVertexLocation(getPathwayRepresentation(info2.multiFormRenderer,info2.multiFormRenderer.getActiveRendererID()),nodes.get(0),info2.container);
        augmentation.add(new LinkRenderer(this,true,loc1,loc2,info1,info2,1,false,false,false,true,lastNodeOfPrevSegment,nodes.get(0)));
      }
      lastNodeOfPrevSegment=nodes.get(nodes.size() - 1);
    }
  }
  if (isShowPortals) {
    for (    PathwayVertexRep vertexRep : info.pathway.vertexSet()) {
      Pair<Rectangle2D,Boolean> sourcePair=getPortalLocation(vertexRep,info);
      for (      PathwayMultiFormInfo i : pathwayInfos) {
        if (info != i) {
          if (info.getCurrentEmbeddingID() != EEmbeddingID.PATHWAY_LEVEL1) {
            if (i.getCurrentEmbeddingID() == EEmbeddingID.PATHWAY_LEVEL1) {
              addLinkRenderers(vertexRep,info,i,sourcePair);
            }
          }
 else {
            addLinkRenderers(vertexRep,info,i,sourcePair);
          }
        }
 else {
        }
      }
    }
  }
}",0.9795704557359874
57192,"protected void registerListeners(){
  parentGLCanvas.addMouseListener(new IGLMouseListener(){
    @Override public void mouseWheelMoved(    IMouseEvent mouseEvent){
    }
    @Override public void mouseReleased(    IMouseEvent mouseEvent){
    }
    @Override public void mousePressed(    IMouseEvent mouseEvent){
    }
    @Override public void mouseMoved(    IMouseEvent mouseEvent){
      Point mousePosition=mouseEvent.getPoint();
      for (      PathwayMultiFormInfo info : pathwayInfos) {
        if (setWindowActive(mousePosition,info.window))         return;
      }
      if (setWindowActive(mousePosition,pathInfo.window))       return;
      if (setWindowActive(mousePosition,rankingWindow))       return;
      if (setWindowActive(mousePosition,dataMappingWindow))       return;
    }
    private boolean setWindowActive(    Point mousePosition,    GLWindow window){
      Vec2f location=window.getAbsoluteLocation();
      Vec2f size=window.getSize();
      if ((mousePosition.x >= location.x() && mousePosition.x <= location.x() + size.x()) && (mousePosition.y >= location.y() && mousePosition.y <= location.y() + size.y())) {
        windowToSetActive=window;
        return true;
      }
      return false;
    }
    @Override public void mouseExited(    IMouseEvent mouseEvent){
    }
    @Override public void mouseEntered(    IMouseEvent mouseEvent){
    }
    @Override public void mouseDragged(    IMouseEvent mouseEvent){
    }
    @Override public void mouseClicked(    IMouseEvent mouseEvent){
    }
  }
);
  parentGLCanvas.addKeyListener(new IGLKeyListener(){
    @Override public void keyPressed(    IKeyEvent e){
      update(e);
    }
    @Override public void keyReleased(    IKeyEvent e){
    }
    private void update(    IKeyEvent e){
      boolean isPPressed=e.isKeyDown('p');
      if (isPPressed) {
        ShowPortalsEvent event=new ShowPortalsEvent(!showPortalsButton.isChecked());
        showPortalsButton.setChecked(!showPortalsButton.isChecked());
        event.setEventSpace(pathEventSpace);
        EventPublisher.INSTANCE.triggerEvent(event);
      }
    }
  }
);
}","protected void registerListeners(){
  parentGLCanvas.addMouseListener(new IGLMouseListener(){
    @Override public void mouseWheelMoved(    IMouseEvent mouseEvent){
    }
    @Override public void mouseReleased(    IMouseEvent mouseEvent){
    }
    @Override public void mousePressed(    IMouseEvent mouseEvent){
    }
    @Override public void mouseMoved(    IMouseEvent mouseEvent){
      Point mousePosition=mouseEvent.getPoint();
      if (pathwayRow.getVisibility() != EVisibility.NONE) {
        for (        PathwayMultiFormInfo info : pathwayInfos) {
          if (setWindowActive(mousePosition,info.window))           return;
        }
      }
      if (setWindowActive(mousePosition,pathInfo.window))       return;
      if (setWindowActive(mousePosition,rankingWindow))       return;
      if (setWindowActive(mousePosition,dataMappingWindow))       return;
    }
    private boolean setWindowActive(    Point mousePosition,    GLWindow window){
      Vec2f location=window.getAbsoluteLocation();
      Vec2f size=window.getSize();
      if ((mousePosition.x >= location.x() && mousePosition.x <= location.x() + size.x()) && (mousePosition.y >= location.y() && mousePosition.y <= location.y() + size.y())) {
        windowToSetActive=window;
        return true;
      }
      return false;
    }
    @Override public void mouseExited(    IMouseEvent mouseEvent){
    }
    @Override public void mouseEntered(    IMouseEvent mouseEvent){
    }
    @Override public void mouseDragged(    IMouseEvent mouseEvent){
    }
    @Override public void mouseClicked(    IMouseEvent mouseEvent){
    }
  }
);
  parentGLCanvas.addKeyListener(new IGLKeyListener(){
    @Override public void keyPressed(    IKeyEvent e){
      update(e);
    }
    @Override public void keyReleased(    IKeyEvent e){
    }
    private void update(    IKeyEvent e){
      boolean isPPressed=e.isKeyDown('p');
      if (isPPressed) {
        ShowPortalsEvent event=new ShowPortalsEvent(!showPortalsButton.isChecked());
        showPortalsButton.setChecked(!showPortalsButton.isChecked());
        event.setEventSpace(pathEventSpace);
        EventPublisher.INSTANCE.triggerEvent(event);
      }
    }
  }
);
}",0.98
57193,"private void addLinkRenderers(PathwayVertexRep vertexRep,PathwayMultiFormInfo sourceInfo,PathwayMultiFormInfo targetInfo,Pair<Rectangle2D,Boolean> sourcePair){
  Set<PathwayVertexRep> equivalentVertexReps=PathwayManager.get().getEquivalentVertexRepsInPathway(vertexRep,targetInfo.pathway);
  for (  PathwayVertexRep v : equivalentVertexReps) {
    if (isPathLink(vertexRep,v))     continue;
    Pair<Rectangle2D,Boolean> targetPair=getPortalLocation(v,targetInfo);
    float stubSize=Math.max(1,Math.abs(pathwayLayout.getColumnIndex((GLPathwayWindow)sourceInfo.window) - pathwayLayout.getColumnIndex((GLPathwayWindow)targetInfo.window)));
    LinkRenderer renderer=new LinkRenderer(this,vertexRep == currentPortalVertexRep || v == currentPortalVertexRep || isSelectedPortalLink(vertexRep,v),sourcePair.getFirst(),targetPair.getFirst(),sourceInfo,targetInfo,stubSize,sourcePair.getSecond(),targetPair.getSecond(),PathwayManager.get().areVerticesEquivalent(vertexRep,currentContextVertexRep),false,vertexRep,v);
    augmentation.add(renderer);
  }
}","private void addLinkRenderers(PathwayVertexRep vertexRep,PathwayMultiFormInfo sourceInfo,PathwayMultiFormInfo targetInfo,Pair<Rectangle2D,Boolean> sourcePair){
  Set<PathwayVertexRep> equivalentVertexReps=PathwayManager.get().getEquivalentVertexRepsInPathway(vertexRep,targetInfo.pathway);
  for (  PathwayVertexRep v : equivalentVertexReps) {
    if (isPathLink(vertexRep,v) || pathwayRow.getVisibility() == EVisibility.NONE)     continue;
    Pair<Rectangle2D,Boolean> targetPair=getPortalLocation(v,targetInfo);
    float stubSize=Math.max(1,Math.abs(pathwayLayout.getColumnIndex((GLPathwayWindow)sourceInfo.window) - pathwayLayout.getColumnIndex((GLPathwayWindow)targetInfo.window)));
    LinkRenderer renderer=new LinkRenderer(this,vertexRep == currentPortalVertexRep || v == currentPortalVertexRep || isSelectedPortalLink(vertexRep,v),sourcePair.getFirst(),targetPair.getFirst(),sourceInfo,targetInfo,stubSize,sourcePair.getSecond(),targetPair.getSecond(),PathwayManager.get().areVerticesEquivalent(vertexRep,currentContextVertexRep),false,vertexRep,v);
    augmentation.add(renderer);
  }
}",0.976679104477612
57194,"@Override protected void renderContent(GL2 gl){
  if (layoutDisplayListIndex == -1)   layoutDisplayListIndex=gl.glGenLists(1);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  GLU glu=null;
  gl.glNewList(layoutDisplayListIndex,GL2.GL_COMPILE);
  glu=new GLU();
  renderPathwayBorders(gl);
  for (  ALinearizableNode node : pathNodes) {
    node.render(gl,glu);
    renderBranchNodes(gl,glu,node);
  }
  if (expandedBranchSummaryNode != null) {
    renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
  }
  renderEdges(gl,pathNodes);
  gl.glEndList();
  setLayoutDirty(false);
  if (!isBubbleSetInitialized) {
    System.out.println(""String_Node_Str"" + isBubbleSetInitialized);
    bubbleSetRenderer.init(gl);
    isBubbleSetInitialized=true;
  }
  if (updateStrategy != null && this.updateStrategy instanceof FixedPathUpdateStrategy) {
    int i=0;
    this.bubbleSetRenderer.clearBubbleSet();
    this.bubbleSetRenderer.setSize(Math.round(this.x),Math.round(this.y));
    bubbleSetItems.clear();
    bubbleSetEdges.clear();
    for (    List<PathwayVertexRep> segment : ((FixedPathUpdateStrategy)this.updateStrategy).getSelectedPathSegments()) {
      Rectangle2D prevRect=new Rectangle2D.Double(0f,0f,0f,0f);
      for (      PathwayVertexRep node : segment) {
        Rectangle2D nodeRect=getVertexRepBounds(node);
        if (nodeRect != null) {
          float posx=(float)nodeRect.getCenterX();
          float posy=-(float)nodeRect.getCenterY() + this.y;
          gl.glColor4f(1,0,0,1);
          gl.glPointSize(5);
          gl.glBegin(GL2.GL_POINTS);
          gl.glVertex3f(posx,posy,5.0f);
          gl.glEnd();
          gl.glPointSize(1);
          bubbleSetItems.add(new Rectangle2D.Double(posx,posy,nodeRect.getWidth(),nodeRect.getHeight()));
          if (i > 0) {
            bubbleSetEdges.add(new Line2D.Double(posx,posy,prevRect.getCenterX(),prevRect.getCenterY()));
          }
          prevRect.setRect(posx,posy,nodeRect.getWidth(),nodeRect.getHeight());
          i++;
        }
      }
    }
    this.bubbleSetRenderer.addGroup(bubbleSetItems,bubbleSetEdges,bubbleSetColor);
    ((BubbleSet)this.bubbleSetRenderer.setOutline).useVirtualEdges(false);
    this.bubbleSetRenderer.update(gl,null,0);
    this.bubbleSetRenderer.renderPxl(gl,this.x,this.y);
  }
  if (glu == null)   glu=new GLU();
  for (  ALinearizableNode node : pathNodes) {
    node.renderHighlight(gl,glu);
  }
  if (expandedBranchSummaryNode != null) {
    for (    ALinearizableNode node : expandedBranchSummaryNode.getBranchNodes()) {
      node.renderHighlight(gl,glu);
    }
  }
  gl.glCallList(layoutDisplayListIndex);
}","@Override protected void renderContent(GL2 gl){
  if (layoutDisplayListIndex == -1)   layoutDisplayListIndex=gl.glGenLists(1);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  GLU glu=null;
  gl.glNewList(layoutDisplayListIndex,GL2.GL_COMPILE);
  glu=new GLU();
  renderPathwayBorders(gl);
  for (  ALinearizableNode node : pathNodes) {
    node.render(gl,glu);
    renderBranchNodes(gl,glu,node);
  }
  if (expandedBranchSummaryNode != null) {
    renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
  }
  renderEdges(gl,pathNodes);
  gl.glEndList();
  setLayoutDirty(false);
  if (!isBubbleSetInitialized) {
    System.out.println(""String_Node_Str"" + isBubbleSetInitialized);
    bubbleSetRenderer.init(gl);
    isBubbleSetInitialized=true;
  }
  int sizeX=Math.round(this.x);
  int sizeY=Math.round(this.y);
  if (updateStrategy != null && this.updateStrategy instanceof FixedPathUpdateStrategy && sizeX > 0 && sizeY > 0) {
    int i=0;
    this.bubbleSetRenderer.setSize(sizeX,sizeY);
    this.bubbleSetRenderer.clearBubbleSet();
    bubbleSetItems.clear();
    bubbleSetEdges.clear();
    for (    List<PathwayVertexRep> segment : ((FixedPathUpdateStrategy)this.updateStrategy).getSelectedPathSegments()) {
      Rectangle2D prevRect=new Rectangle2D.Double(0f,0f,0f,0f);
      for (      PathwayVertexRep node : segment) {
        Rectangle2D nodeRect=getVertexRepBounds(node);
        if (nodeRect != null) {
          float posx=(float)nodeRect.getCenterX();
          float posy=-(float)nodeRect.getCenterY() + this.y;
          bubbleSetItems.add(new Rectangle2D.Double(posx,posy,nodeRect.getWidth(),nodeRect.getHeight()));
          if (i > 0) {
            bubbleSetEdges.add(new Line2D.Double(posx,posy,prevRect.getCenterX(),prevRect.getCenterY()));
          }
          prevRect.setRect(posx,posy,nodeRect.getWidth(),nodeRect.getHeight());
          i++;
        }
      }
    }
    this.bubbleSetRenderer.addGroup(bubbleSetItems,bubbleSetEdges,bubbleSetColor);
    ((BubbleSet)this.bubbleSetRenderer.setOutline).useVirtualEdges(false);
    this.bubbleSetRenderer.update(gl,null,0);
    this.bubbleSetRenderer.renderPxl(gl,this.x,this.y);
  }
  if (glu == null)   glu=new GLU();
  for (  ALinearizableNode node : pathNodes) {
    node.renderHighlight(gl,glu);
  }
  if (expandedBranchSummaryNode != null) {
    for (    ALinearizableNode node : expandedBranchSummaryNode.getBranchNodes()) {
      node.renderHighlight(gl,glu);
    }
  }
  gl.glCallList(layoutDisplayListIndex);
}",0.923106132523258
57195,"private APathwayPathRenderer addPath(List<List<PathwayVertexRep>> pathSegments){
  VerticalPathRenderer renderer=new VerticalPathRenderer(view,tablePerspectives);
  renderer.setUpdateStrategy(new FixedPathUpdateStrategy(renderer,eventSpace,isPathSelectionMode,this,selectedPathSegments));
  renderer.pathwayPathEventSpace=eventSpace;
  renderer.setPathway(pathway);
  renderer.setBranchPathExtractionEventSpace(BRANCH_PATH_EVENTSPACE);
  renderer.setAllowBranchPathExtraction(true);
  renderer.setSizeConfig(PathSizeConfiguration.COMPACT);
  for (  VertexRepBasedContextMenuItem item : nodeContextMenuItems) {
    renderer.addVertexRepBasedContextMenuItem(item);
  }
  for (  Pair<VertexRepBasedEventFactory,PickingMode> eventPair : nodeEvents) {
    renderer.addVertexRepBasedSelectionEvent(eventPair.getFirst(),eventPair.getSecond());
  }
  ElementLayout layout=new ElementLayout();
  layout.setDynamicSizeUnitsX(1);
  layout.setRenderer(renderer);
  pathRow.add(layout);
  renderer.init();
  renderer.setPath(pathSegments);
  renderers.put(renderer,layout);
  return renderer;
}","private APathwayPathRenderer addPath(List<List<PathwayVertexRep>> pathSegments){
  VerticalPathRenderer renderer=new VerticalPathRenderer(view,tablePerspectives);
  renderer.setUpdateStrategy(new FixedPathUpdateStrategy(renderer,eventSpace,isPathSelectionMode,this,selectedPathSegments));
  renderer.pathwayPathEventSpace=eventSpace;
  renderer.setPathway(pathway);
  renderer.setBranchPathExtractionEventSpace(BRANCH_PATH_EVENTSPACE);
  renderer.setAllowBranchPathExtraction(true);
  renderer.setSampleMappingMode(sampleMappingMode);
  renderer.setMappedPerspective(mappedPerspective);
  renderer.setSizeConfig(PathSizeConfiguration.COMPACT);
  for (  VertexRepBasedContextMenuItem item : nodeContextMenuItems) {
    renderer.addVertexRepBasedContextMenuItem(item);
  }
  for (  Pair<VertexRepBasedEventFactory,PickingMode> eventPair : nodeEvents) {
    renderer.addVertexRepBasedSelectionEvent(eventPair.getFirst(),eventPair.getSecond());
  }
  ElementLayout layout=new ElementLayout();
  layout.setDynamicSizeUnitsX(1);
  layout.setRenderer(renderer);
  pathRow.add(layout);
  renderer.init();
  renderer.setPath(pathSegments);
  renderers.put(renderer,layout);
  return renderer;
}",0.9541041482789056
57196,"@Override protected void onMouseOver(Pick pick){
  parentWindow.setActive(true);
}","@Override protected void onMouseOver(Pick pick){
}",0.7575757575757576
57197,"/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public GLSubGraph(IGLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  GLElementContainer column=new GLElementContainer(new GLSizeRestrictiveFlowLayout(false,10,GLPadding.ZERO));
  column.add(baseContainer);
  nodeInfoContainer.setSize(Float.NaN,0);
  final GLWindow dataMappingWindow=new GLWindow(""String_Node_Str"",this);
  dataMappingWindow.setSize(Float.NaN,80);
  dataMappingWindow.setContent(experimentalDataMappingElement);
  dataMappingWindow.setShowCloseButton(false);
  SlideInElement slideInElement=new SlideInElement(dataMappingWindow,ESlideInElementPosition.TOP);
  dataMappingWindow.addSlideInElement(slideInElement);
  vertexSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(EGeneIDTypes.PATHWAY_VERTEX_REP.name()));
  vertexSelectionManager.registerEventListeners();
  column.add(dataMappingWindow);
  rankingWindow=new GLWindow(""String_Node_Str"",this);
  rankingWindow.setSize(150,Float.NaN);
  rankingElement=new RankingElement(this);
  rankingWindow.setContent(rankingElement);
  slideInElement=new SlideInElement(rankingWindow,ESlideInElementPosition.RIGHT);
  rankingWindow.addSlideInElement(slideInElement);
  rankingWindow.setShowCloseButton(false);
  rankingElement.setWindow(rankingWindow);
  baseContainer.add(rankingWindow);
  pathwayRow.setLayout(pathwayLayout);
  baseContainer.add(pathwayRow);
  root.add(column);
  root.add(augmentation);
  registeKeyListeners();
}","/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public GLSubGraph(IGLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  GLElementContainer column=new GLElementContainer(new GLSizeRestrictiveFlowLayout(false,10,GLPadding.ZERO));
  column.add(baseContainer);
  nodeInfoContainer.setSize(Float.NaN,0);
  dataMappingWindow=new GLWindow(""String_Node_Str"",this);
  dataMappingWindow.setSize(Float.NaN,80);
  dataMappingWindow.setContent(experimentalDataMappingElement);
  dataMappingWindow.setShowCloseButton(false);
  SlideInElement slideInElement=new SlideInElement(dataMappingWindow,ESlideInElementPosition.TOP);
  dataMappingWindow.addSlideInElement(slideInElement);
  vertexSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(EGeneIDTypes.PATHWAY_VERTEX_REP.name()));
  vertexSelectionManager.registerEventListeners();
  column.add(dataMappingWindow);
  rankingWindow=new GLWindow(""String_Node_Str"",this);
  rankingWindow.setSize(150,Float.NaN);
  rankingElement=new RankingElement(this);
  rankingWindow.setContent(rankingElement);
  slideInElement=new SlideInElement(rankingWindow,ESlideInElementPosition.RIGHT);
  rankingWindow.addSlideInElement(slideInElement);
  rankingWindow.setShowCloseButton(false);
  rankingElement.setWindow(rankingWindow);
  baseContainer.add(rankingWindow);
  pathwayRow.setLayout(pathwayLayout);
  baseContainer.add(pathwayRow);
  root.add(column);
  root.add(augmentation);
  registerListeners();
}",0.9939854384298829
57198,"public GLPathwayBackground(GLWindow parentWindow){
  this.parentWindow=parentWindow;
}","public GLPathwayBackground(){
}",0.5299145299145299
57199,"@Override public void mouseMoved(IMouseEvent mouseEvent){
  Point mousePosition=mouseEvent.getPoint();
  for (  PathwayMultiFormInfo info : pathwayInfos) {
    if (setWindowActive(mousePosition,info.window))     return;
  }
  if (setWindowActive(mousePosition,pathInfo.window))   return;
  if (setWindowActive(mousePosition,rankingWindow))   return;
  setWindowActive(mousePosition,dataMappingWindow);
}","@Override public void mouseMoved(IMouseEvent mouseEvent){
  Point mousePosition=mouseEvent.getPoint();
  for (  PathwayMultiFormInfo info : pathwayInfos) {
    if (setWindowActive(mousePosition,info.window))     return;
  }
  if (setWindowActive(mousePosition,pathInfo.window))   return;
  if (setWindowActive(mousePosition,rankingWindow))   return;
  if (setWindowActive(mousePosition,dataMappingWindow))   return;
}",0.9829268292682928
57200,"protected void registerListeners(){
  parentGLCanvas.addMouseListener(new IGLMouseListener(){
    @Override public void mouseWheelMoved(    IMouseEvent mouseEvent){
    }
    @Override public void mouseReleased(    IMouseEvent mouseEvent){
    }
    @Override public void mousePressed(    IMouseEvent mouseEvent){
    }
    @Override public void mouseMoved(    IMouseEvent mouseEvent){
      Point mousePosition=mouseEvent.getPoint();
      for (      PathwayMultiFormInfo info : pathwayInfos) {
        if (setWindowActive(mousePosition,info.window))         return;
      }
      if (setWindowActive(mousePosition,pathInfo.window))       return;
      if (setWindowActive(mousePosition,rankingWindow))       return;
      setWindowActive(mousePosition,dataMappingWindow);
    }
    private boolean setWindowActive(    Point mousePosition,    GLWindow window){
      Vec2f location=window.getAbsoluteLocation();
      Vec2f size=window.getSize();
      if ((mousePosition.x >= location.x() && mousePosition.x <= location.x() + size.x()) && (mousePosition.y >= location.y() && mousePosition.y <= location.y() + size.y())) {
        window.setActive(true);
        return true;
      }
      return false;
    }
    @Override public void mouseExited(    IMouseEvent mouseEvent){
    }
    @Override public void mouseEntered(    IMouseEvent mouseEvent){
    }
    @Override public void mouseDragged(    IMouseEvent mouseEvent){
    }
    @Override public void mouseClicked(    IMouseEvent mouseEvent){
    }
  }
);
  parentGLCanvas.addKeyListener(new IGLKeyListener(){
    @Override public void keyPressed(    IKeyEvent e){
      update(e);
    }
    @Override public void keyReleased(    IKeyEvent e){
    }
    private void update(    IKeyEvent e){
      boolean isPPressed=e.isKeyDown('p');
      if (isPPressed) {
        ShowPortalsEvent event=new ShowPortalsEvent(!showPortalsButton.isChecked());
        showPortalsButton.setChecked(!showPortalsButton.isChecked());
        event.setEventSpace(pathEventSpace);
        EventPublisher.INSTANCE.triggerEvent(event);
      }
    }
  }
);
}","protected void registerListeners(){
  parentGLCanvas.addMouseListener(new IGLMouseListener(){
    @Override public void mouseWheelMoved(    IMouseEvent mouseEvent){
    }
    @Override public void mouseReleased(    IMouseEvent mouseEvent){
    }
    @Override public void mousePressed(    IMouseEvent mouseEvent){
    }
    @Override public void mouseMoved(    IMouseEvent mouseEvent){
      Point mousePosition=mouseEvent.getPoint();
      for (      PathwayMultiFormInfo info : pathwayInfos) {
        if (setWindowActive(mousePosition,info.window))         return;
      }
      if (setWindowActive(mousePosition,pathInfo.window))       return;
      if (setWindowActive(mousePosition,rankingWindow))       return;
      if (setWindowActive(mousePosition,dataMappingWindow))       return;
    }
    private boolean setWindowActive(    Point mousePosition,    GLWindow window){
      Vec2f location=window.getAbsoluteLocation();
      Vec2f size=window.getSize();
      if ((mousePosition.x >= location.x() && mousePosition.x <= location.x() + size.x()) && (mousePosition.y >= location.y() && mousePosition.y <= location.y() + size.y())) {
        window.setActive(true);
        return true;
      }
      return false;
    }
    @Override public void mouseExited(    IMouseEvent mouseEvent){
    }
    @Override public void mouseEntered(    IMouseEvent mouseEvent){
    }
    @Override public void mouseDragged(    IMouseEvent mouseEvent){
    }
    @Override public void mouseClicked(    IMouseEvent mouseEvent){
    }
  }
);
  parentGLCanvas.addKeyListener(new IGLKeyListener(){
    @Override public void keyPressed(    IKeyEvent e){
      update(e);
    }
    @Override public void keyReleased(    IKeyEvent e){
    }
    private void update(    IKeyEvent e){
      boolean isPPressed=e.isKeyDown('p');
      if (isPPressed) {
        ShowPortalsEvent event=new ShowPortalsEvent(!showPortalsButton.isChecked());
        showPortalsButton.setChecked(!showPortalsButton.isChecked());
        event.setEventSpace(pathEventSpace);
        EventPublisher.INSTANCE.triggerEvent(event);
      }
    }
  }
);
}",0.9957142857142856
57201,"@Override public void display(GL2 gl){
  boolean updateAugmentation=false;
  if (isLayoutDirty)   updateAugmentation=true;
  super.display(gl);
  if (wasPathwayAdded) {
    EnablePathSelectionEvent event=new EnablePathSelectionEvent(isPathSelectionMode);
    event.setEventSpace(pathEventSpace);
    eventPublisher.triggerEvent(event);
    wasPathwayAdded=false;
  }
  if (updateAugmentation) {
    updateAugmentation();
  }
  dndController.handleDragging(gl,glMouseListener);
}","@Override public void display(GL2 gl){
  boolean updateAugmentation=false;
  if (isLayoutDirty)   updateAugmentation=true;
  super.display(gl);
  for (  AContextMenuItem item : contextMenuItemsToShow) {
    getContextMenuCreator().add(item);
  }
  if (wasPathwayAdded) {
    EnablePathSelectionEvent event=new EnablePathSelectionEvent(isPathSelectionMode);
    event.setEventSpace(pathEventSpace);
    eventPublisher.triggerEvent(event);
    wasPathwayAdded=false;
  }
  if (updateAugmentation) {
    updateAugmentation();
  }
  dndController.handleDragging(gl,glMouseListener);
  contextMenuItemsToShow.clear();
}",0.8754578754578755
57202,"/** 
 * @param currentActiveBackground setter, see  {@link currentActiveBackground}
 */
public void setActiveWindow(GLWindow activeWindow){
  if (activeWindow != null && this.activeWindow != null && activeWindow != this.activeWindow) {
    this.activeWindow.setActive(false);
  }
  this.activeWindow=activeWindow;
  clearSelectedPortalLinks();
  updatePathwayPortals();
}","/** 
 * @param currentActiveBackground setter, see  {@link currentActiveBackground}
 */
public void setActiveWindow(GLWindow activeWindow){
  if (activeWindow != null && this.activeWindow != null && activeWindow != this.activeWindow) {
    this.activeWindow.setActive(false);
  }
  this.activeWindow=activeWindow;
  isLayoutDirty=true;
}",0.903954802259887
57203,"public void setActive(boolean active){
  if (active == this.active)   return;
  if (active) {
    view.setActiveWindow(this);
    repaint();
    if (showCloseButton)     titleBar.closeButton.setVisibility(EVisibility.PICKABLE);
  }
 else {
    titleBar.closeButton.setVisibility(EVisibility.NONE);
  }
  background.setHovered(active);
  this.active=active;
}","public void setActive(boolean active){
  if (active == this.active)   return;
  if (active) {
    view.setActiveWindow(this);
    repaint();
    if (showCloseButton)     titleBar.closeButton.setVisibility(EVisibility.PICKABLE);
  }
 else {
    titleBar.closeButton.setVisibility(EVisibility.NONE);
  }
  this.active=active;
}",0.9516837481698388
57204,"@Override public void init(GL2 gl){
  super.init(gl);
  pathInfo=new MultiFormInfo();
  createMultiformRenderer(new ArrayList<>(experimentalDataMappingElement.getTablePerspectives()),EnumSet.of(EEmbeddingID.PATH_LEVEL1,EEmbeddingID.PATH_LEVEL2),baseContainer,0.3f,pathInfo);
  MultiLevelSlideInElement slideInElement=new MultiLevelSlideInElement(pathInfo.window,ESlideInElementPosition.LEFT);
  slideInElement.addWindowState(new IWindowState(){
    @Override public void apply(){
      rankingWindow.setVisibility(EVisibility.VISIBLE);
      pathwayRow.setVisibility(EVisibility.VISIBLE);
      rankingWindow.setVisibility(EVisibility.VISIBLE);
      pathInfo.window.setLayoutData(Float.NaN);
      pathInfo.window.setSize(1,Float.NaN);
      pathInfo.window.background.setVisibility(EVisibility.NONE);
      pathInfo.window.baseContainer.setVisibility(EVisibility.NONE);
      isPathWindowMaximized=false;
    }
  }
);
  IWindowState currentWindowState=new IWindowState(){
    @Override public void apply(){
      if (isPathWindowMaximized) {
        baseContainer.remove(0);
      }
      rankingWindow.setVisibility(EVisibility.VISIBLE);
      pathwayRow.setVisibility(EVisibility.VISIBLE);
      rankingWindow.setVisibility(EVisibility.VISIBLE);
      pathInfo.window.background.setVisibility(EVisibility.PICKABLE);
      pathInfo.window.baseContainer.setVisibility(EVisibility.VISIBLE);
      isPathWindowMaximized=false;
      setPathLevel(pathInfo.getEmbeddingIDFromRendererID(pathInfo.multiFormRenderer.getActiveRendererID()));
      augmentation.enable();
      isLayoutDirty=true;
    }
  }
;
  slideInElement.addWindowState(currentWindowState);
  slideInElement.addWindowState(new IWindowState(){
    @Override public void apply(){
      rankingWindow.setVisibility(EVisibility.NONE);
      GLElement element=new GLElement();
      element.setSize(0,Float.NaN);
      baseContainer.add(0,element);
      pathwayRow.setVisibility(EVisibility.NONE);
      pathInfo.window.setLayoutData(Float.NaN);
      pathInfo.window.setSize(Float.NaN,Float.NaN);
      pathInfo.window.background.setVisibility(EVisibility.PICKABLE);
      pathInfo.window.baseContainer.setVisibility(EVisibility.VISIBLE);
      isPathWindowMaximized=true;
      augmentation.disable();
      updateAugmentation();
    }
  }
);
  slideInElement.setCurrentWindowState(currentWindowState);
  pathInfo.window.addSlideInElement(slideInElement);
  pathInfo.window.setShowCloseButton(false);
  int rendererID=pathInfo.embeddingIDToRendererIDs.get(EEmbeddingID.PATH_LEVEL2).get(0);
  if (pathInfo.multiFormRenderer.getActiveRendererID() != rendererID) {
    pathInfo.multiFormRenderer.setActive(rendererID);
  }
 else {
    setPathLevel(EEmbeddingID.PATH_LEVEL2);
  }
  augmentation.init(gl);
}","@Override public void init(GL2 gl){
  super.init(gl);
  pathInfo=new MultiFormInfo();
  createMultiformRenderer(new ArrayList<>(experimentalDataMappingElement.getDmState().getTablePerspectives()),EnumSet.of(EEmbeddingID.PATH_LEVEL1,EEmbeddingID.PATH_LEVEL2),baseContainer,0.3f,pathInfo);
  MultiLevelSlideInElement slideInElement=new MultiLevelSlideInElement(pathInfo.window,ESlideInElementPosition.LEFT);
  slideInElement.addWindowState(new IWindowState(){
    @Override public void apply(){
      rankingWindow.setVisibility(EVisibility.VISIBLE);
      pathwayRow.setVisibility(EVisibility.VISIBLE);
      rankingWindow.setVisibility(EVisibility.VISIBLE);
      pathInfo.window.setLayoutData(Float.NaN);
      pathInfo.window.setSize(1,Float.NaN);
      pathInfo.window.background.setVisibility(EVisibility.NONE);
      pathInfo.window.baseContainer.setVisibility(EVisibility.NONE);
      isPathWindowMaximized=false;
    }
  }
);
  IWindowState currentWindowState=new IWindowState(){
    @Override public void apply(){
      if (isPathWindowMaximized) {
        baseContainer.remove(0);
      }
      rankingWindow.setVisibility(EVisibility.VISIBLE);
      pathwayRow.setVisibility(EVisibility.VISIBLE);
      rankingWindow.setVisibility(EVisibility.VISIBLE);
      pathInfo.window.background.setVisibility(EVisibility.PICKABLE);
      pathInfo.window.baseContainer.setVisibility(EVisibility.VISIBLE);
      isPathWindowMaximized=false;
      setPathLevel(pathInfo.getEmbeddingIDFromRendererID(pathInfo.multiFormRenderer.getActiveRendererID()));
      augmentation.enable();
      isLayoutDirty=true;
    }
  }
;
  slideInElement.addWindowState(currentWindowState);
  slideInElement.addWindowState(new IWindowState(){
    @Override public void apply(){
      rankingWindow.setVisibility(EVisibility.NONE);
      GLElement element=new GLElement();
      element.setSize(0,Float.NaN);
      baseContainer.add(0,element);
      pathwayRow.setVisibility(EVisibility.NONE);
      pathInfo.window.setLayoutData(Float.NaN);
      pathInfo.window.setSize(Float.NaN,Float.NaN);
      pathInfo.window.background.setVisibility(EVisibility.PICKABLE);
      pathInfo.window.baseContainer.setVisibility(EVisibility.VISIBLE);
      isPathWindowMaximized=true;
      augmentation.disable();
      updateAugmentation();
    }
  }
);
  slideInElement.setCurrentWindowState(currentWindowState);
  pathInfo.window.addSlideInElement(slideInElement);
  pathInfo.window.setShowCloseButton(false);
  int rendererID=pathInfo.embeddingIDToRendererIDs.get(EEmbeddingID.PATH_LEVEL2).get(0);
  if (pathInfo.multiFormRenderer.getActiveRendererID() != rendererID) {
    pathInfo.multiFormRenderer.setActive(rendererID);
  }
 else {
    setPathLevel(EEmbeddingID.PATH_LEVEL2);
  }
  augmentation.init(gl);
}",0.9976546996211438
57205,"@Override public List<TablePerspective> getTablePerspectives(){
  return experimentalDataMappingElement.getTablePerspectives();
}","@Override public List<TablePerspective> getTablePerspectives(){
  return experimentalDataMappingElement.getDmState().getTablePerspectives();
}",0.9520295202952028
57206,"public void addPathway(PathwayGraph pathway){
  PathwayDataDomain pathwayDataDomain=(PathwayDataDomain)DataDomainManager.get().getDataDomainByType(PathwayDataDomain.DATA_DOMAIN_TYPE);
  List<TablePerspective> tablePerspectives=new ArrayList<>(experimentalDataMappingElement.getTablePerspectives());
  TablePerspective tablePerspective=tablePerspectives.get(0);
  Perspective recordPerspective=tablePerspective.getRecordPerspective();
  Perspective dimensionPerspective=tablePerspective.getDimensionPerspective();
  PathwayTablePerspective pathwayTablePerspective=new PathwayTablePerspective(tablePerspective.getDataDomain(),pathwayDataDomain,recordPerspective,dimensionPerspective,pathway);
  pathwayDataDomain.addTablePerspective(pathwayTablePerspective);
  List<TablePerspective> pathwayTablePerspectives=new ArrayList<>(1);
  pathwayTablePerspectives.add(pathwayTablePerspective);
  for (int i=1; i < tablePerspectives.size(); i++) {
    pathwayTablePerspectives.add(tablePerspectives.get(i));
  }
  PathwayMultiFormInfo info=new PathwayMultiFormInfo();
  info.pathway=pathway;
  info.age=currentPathwayAge--;
  createMultiformRenderer(pathwayTablePerspectives,EnumSet.of(EEmbeddingID.PATHWAY_LEVEL1,EEmbeddingID.PATHWAY_LEVEL2,EEmbeddingID.PATHWAY_LEVEL3,EEmbeddingID.PATHWAY_LEVEL4),pathwayRow,Float.NaN,info);
  pathwayLayout.addColumn(info.window);
  for (  PathwayVertexRep vertexRep : pathway.vertexSet()) {
    allVertexReps.put(vertexRep.getID(),vertexRep);
  }
  int rendererID=info.embeddingIDToRendererIDs.get(EEmbeddingID.PATHWAY_LEVEL1).get(0);
  if (info.multiFormRenderer.getActiveRendererID() != rendererID) {
    info.multiFormRenderer.setActive(rendererID);
  }
  lastUsedLevel1Renderer=info.multiFormRenderer;
  lastUsedRenderer=info.multiFormRenderer;
  pathwayInfos.add(info);
  wasPathwayAdded=true;
}","public void addPathway(PathwayGraph pathway){
  PathwayDataDomain pathwayDataDomain=(PathwayDataDomain)DataDomainManager.get().getDataDomainByType(PathwayDataDomain.DATA_DOMAIN_TYPE);
  List<TablePerspective> tablePerspectives=new ArrayList<>(experimentalDataMappingElement.getDmState().getTablePerspectives());
  TablePerspective tablePerspective=tablePerspectives.get(0);
  Perspective recordPerspective=tablePerspective.getRecordPerspective();
  Perspective dimensionPerspective=tablePerspective.getDimensionPerspective();
  PathwayTablePerspective pathwayTablePerspective=new PathwayTablePerspective(tablePerspective.getDataDomain(),pathwayDataDomain,recordPerspective,dimensionPerspective,pathway);
  pathwayDataDomain.addTablePerspective(pathwayTablePerspective);
  List<TablePerspective> pathwayTablePerspectives=new ArrayList<>(1);
  pathwayTablePerspectives.add(pathwayTablePerspective);
  for (int i=1; i < tablePerspectives.size(); i++) {
    pathwayTablePerspectives.add(tablePerspectives.get(i));
  }
  PathwayMultiFormInfo info=new PathwayMultiFormInfo();
  info.pathway=pathway;
  info.age=currentPathwayAge--;
  createMultiformRenderer(pathwayTablePerspectives,EnumSet.of(EEmbeddingID.PATHWAY_LEVEL1,EEmbeddingID.PATHWAY_LEVEL2,EEmbeddingID.PATHWAY_LEVEL3,EEmbeddingID.PATHWAY_LEVEL4),pathwayRow,Float.NaN,info);
  pathwayLayout.addColumn(info.window);
  for (  PathwayVertexRep vertexRep : pathway.vertexSet()) {
    allVertexReps.put(vertexRep.getID(),vertexRep);
  }
  int rendererID=info.embeddingIDToRendererIDs.get(EEmbeddingID.PATHWAY_LEVEL1).get(0);
  if (info.multiFormRenderer.getActiveRendererID() != rendererID) {
    info.multiFormRenderer.setActive(rendererID);
  }
  lastUsedLevel1Renderer=info.multiFormRenderer;
  lastUsedRenderer=info.multiFormRenderer;
  PathwayMappingEvent event=new PathwayMappingEvent(experimentalDataMappingElement.getDmState().getPathwayMappedTablePerspective());
  EventPublisher.trigger(event);
  pathwayInfos.add(info);
  wasPathwayAdded=true;
}",0.953275907073871
57207,"private void updatePathwayDatasets(){
  pathwayDatasets.clear();
  pathwayDatasets.add(new GLElement(){
    @Override protected void renderImpl(    GLGraphics g,    float w,    float h){
      g.drawText(""String_Node_Str"",0,-2,w,h);
    }
  }
.setSize(100,15));
  RadioController radio=new RadioController(new ISelectionCallback(){
    @Override public void onSelectionChanged(    GLButton button,    boolean selected){
      if (selected) {
        ATableBasedDataDomain dd=button.getLayoutDataAs(ATableBasedDataDomain.class,null);
        TablePerspective perspective=dmState.getMatchingTablePerspective(dd);
        PathwayMappingEvent event=new PathwayMappingEvent(perspective);
        EventPublisher.trigger(event);
      }
    }
  }
);
  PathwayDataSetElement ddElement=new PathwayDataSetElement(""String_Node_Str"");
  pathwayDatasets.add(ddElement);
  radio.add(ddElement);
  for (  ATableBasedDataDomain dd : dmState.getDataDomains()) {
    if (dd instanceof GeneticDataDomain) {
      ddElement=new PathwayDataSetElement(dd);
      pathwayDatasets.add(ddElement);
      radio.add(ddElement);
    }
  }
}","private void updatePathwayDatasets(){
  pathwayDatasets.clear();
  pathwayDatasets.add(new GLElement(){
    @Override protected void renderImpl(    GLGraphics g,    float w,    float h){
      g.drawText(""String_Node_Str"",0,-2,w,h);
    }
  }
.setSize(150,15));
  RadioController radio=new RadioController(new ISelectionCallback(){
    @Override public void onSelectionChanged(    GLButton button,    boolean selected){
      if (selected) {
        ATableBasedDataDomain dd=button.getLayoutDataAs(ATableBasedDataDomain.class,null);
        TablePerspective perspective=dmState.getMatchingTablePerspective(dd);
        dmState.setPathwayMappedTablePerspective(perspective);
        PathwayMappingEvent event=new PathwayMappingEvent(perspective);
        EventPublisher.trigger(event);
      }
    }
  }
);
  PathwayDataSetElement noMappingElement=new PathwayDataSetElement(""String_Node_Str"");
  pathwayDatasets.add(noMappingElement);
  radio.add(noMappingElement);
  PathwayDataSetElement pwMappingElement;
  boolean wasPreviouslySelected=false;
  for (  ATableBasedDataDomain dd : dmState.getDataDomains()) {
    if (dd instanceof GeneticDataDomain) {
      pwMappingElement=new PathwayDataSetElement(dd);
      pathwayDatasets.add(pwMappingElement);
      radio.add(pwMappingElement);
      if (dmState.getPathwayMappedTablePerspective() != null && dmState.getPathwayMappedTablePerspective().getDataDomain() == dd) {
        pwMappingElement.setSelected(true);
        wasPreviouslySelected=true;
      }
    }
  }
  if (!wasPreviouslySelected) {
    noMappingElement.setSelected(true);
    EventPublisher.trigger(new PathwayMappingEvent());
  }
}",0.7482796088373778
57208,"public GLExperimentalDataMapping(GLSubGraph view){
  this.view=view;
  setLayout(new GLFlowLayout(false,2,new GLPadding(2)));
  setSize(-1,40);
  dmState=new DataMappingState(view.getPathEventSpace());
  GLElementContainer ddElements=new GLElementContainer(new GLFlowLayout(true,10,new GLPadding(5)));
  GLElementContainer stratElements=new GLElementContainer(new GLFlowLayout(true,10,new GLPadding(5)));
  pathwayDatasets=new GLElementContainer(new GLFlowLayout(true,10,new GLPadding(5)));
  addPerspectiveElements(stratElements);
  addDataDomainElements(ddElements);
  updatePathwayDatasets();
  this.add(ddElements);
  this.add(stratElements);
  this.add(pathwayDatasets);
}","public GLExperimentalDataMapping(GLSubGraph view){
  this.view=view;
  setLayout(new GLFlowLayout(true,2,new GLPadding(5)));
  setSize(-1,50);
  dmState=new DataMappingState(view.getPathEventSpace());
  GLElementContainer generalMapping=new GLElementContainer(new GLFlowLayout(false,10,new GLPadding(5)));
  GLElementContainer ddElements=new GLElementContainer(new GLFlowLayout(true,10,new GLPadding(5)));
  GLElementContainer stratElements=new GLElementContainer(new GLFlowLayout(true,10,new GLPadding(5)));
  generalMapping.add(ddElements);
  generalMapping.add(stratElements);
  pathwayDatasets=new GLElementContainer(new GLFlowLayout(true,10,new GLPadding(5)));
  addPerspectiveElements(stratElements);
  addDataDomainElements(ddElements);
  updatePathwayDatasets();
  this.add(generalMapping);
  this.add(pathwayDatasets);
}",0.8180610889774237
57209,"@ListenTo(restrictExclusiveToEventSpace=true) public void onSelectedPathChanged(PathwayPathSelectionEvent event){
  if (!isPathFromPathway(event.getPathSegments(),pathway)) {
    selectedPathRenderer=null;
    return;
  }
  List<List<PathwayVertexRep>> selectedPathSegments=event.getPathSegmentsAsVertexList();
  boolean isSelectedPathShown=false;
  if (selectedPathRenderer != null) {
    isSelectedPathShown=PathUtil.isPathShown(selectedPathRenderer.pathSegments,selectedPathSegments,pathway);
    if (isSelectedPathShown)     return;
  }
  for (  APathwayPathRenderer renderer : renderers.keySet()) {
    isSelectedPathShown=PathUtil.isPathShown(renderer.pathSegments,selectedPathSegments,pathway);
    if (isSelectedPathShown) {
      selectedPathRenderer=renderer;
      return;
    }
  }
  APathwayPathRenderer pathRendererWithMostEqualNodes=null;
  int maxEqualVertices=0;
  int selectedPathRendererEqualVertices=0;
  for (  APathwayPathRenderer renderer : renderers.keySet()) {
    int numEqualVertices=PathUtil.getNumEqualVertices(renderer.pathSegments,selectedPathSegments);
    if (maxEqualVertices < numEqualVertices) {
      pathRendererWithMostEqualNodes=renderer;
      maxEqualVertices=numEqualVertices;
    }
    if (renderer == selectedPathRenderer) {
      selectedPathRendererEqualVertices=numEqualVertices;
    }
  }
  if (pathRendererWithMostEqualNodes == null) {
    selectedPathRenderer=addPath(selectedPathSegments);
  }
 else {
    if (selectedPathRendererEqualVertices >= maxEqualVertices) {
      pathRendererWithMostEqualNodes=selectedPathRenderer;
    }
    pathRendererWithMostEqualNodes.setPath(selectedPathSegments);
  }
  triggerMinSizeUpdate();
}","@ListenTo(restrictExclusiveToEventSpace=true) public void onSelectedPathChanged(PathwayPathSelectionEvent event){
  selectedPathSegments=event.getPathSegmentsAsVertexList();
  if (!isPathFromPathway(event.getPathSegments(),pathway)) {
    selectedPathRenderer=null;
    return;
  }
  List<List<PathwayVertexRep>> selectedPathSegments=event.getPathSegmentsAsVertexList();
  boolean isSelectedPathShown=false;
  if (selectedPathRenderer != null) {
    isSelectedPathShown=PathUtil.isPathShown(selectedPathRenderer.pathSegments,selectedPathSegments,pathway);
    if (isSelectedPathShown)     return;
  }
  for (  APathwayPathRenderer renderer : renderers.keySet()) {
    isSelectedPathShown=PathUtil.isPathShown(renderer.pathSegments,selectedPathSegments,pathway);
    if (isSelectedPathShown) {
      selectedPathRenderer=renderer;
      return;
    }
  }
  APathwayPathRenderer pathRendererWithMostEqualNodes=null;
  int maxEqualVertices=0;
  int selectedPathRendererEqualVertices=0;
  for (  APathwayPathRenderer renderer : renderers.keySet()) {
    int numEqualVertices=PathUtil.getNumEqualVertices(renderer.pathSegments,selectedPathSegments);
    if (maxEqualVertices < numEqualVertices) {
      pathRendererWithMostEqualNodes=renderer;
      maxEqualVertices=numEqualVertices;
    }
    if (renderer == selectedPathRenderer) {
      selectedPathRendererEqualVertices=numEqualVertices;
    }
  }
  if (pathRendererWithMostEqualNodes == null) {
    selectedPathRenderer=addPath(selectedPathSegments);
  }
 else {
    if (selectedPathRendererEqualVertices >= maxEqualVertices) {
      pathRendererWithMostEqualNodes=selectedPathRenderer;
    }
    pathRendererWithMostEqualNodes.setPath(selectedPathSegments);
  }
  triggerMinSizeUpdate();
}",0.9824663939216832
57210,"private APathwayPathRenderer addPath(List<List<PathwayVertexRep>> pathSegments){
  VerticalPathRenderer renderer=new VerticalPathRenderer(view,tablePerspectives);
  renderer.setUpdateStrategy(new FixedPathUpdateStrategy(renderer,eventSpace,isPathSelectionMode,this));
  renderer.pathwayPathEventSpace=eventSpace;
  renderer.setPathway(pathway);
  renderer.setBranchPathExtractionEventSpace(BRANCH_PATH_EVENTSPACE);
  renderer.setAllowBranchPathExtraction(true);
  renderer.setSizeConfig(PathSizeConfiguration.COMPACT);
  for (  VertexRepBasedContextMenuItem item : nodeContextMenuItems) {
    renderer.addVertexRepBasedContextMenuItem(item);
  }
  for (  Pair<VertexRepBasedEventFactory,PickingMode> eventPair : nodeEvents) {
    renderer.addVertexRepBasedSelectionEvent(eventPair.getFirst(),eventPair.getSecond());
  }
  ElementLayout layout=new ElementLayout();
  layout.setDynamicSizeUnitsX(1);
  layout.setRenderer(renderer);
  pathRow.add(layout);
  renderer.init();
  renderer.setPath(pathSegments);
  renderers.put(renderer,layout);
  return renderer;
}","private APathwayPathRenderer addPath(List<List<PathwayVertexRep>> pathSegments){
  VerticalPathRenderer renderer=new VerticalPathRenderer(view,tablePerspectives);
  renderer.setUpdateStrategy(new FixedPathUpdateStrategy(renderer,eventSpace,isPathSelectionMode,this,selectedPathSegments));
  renderer.pathwayPathEventSpace=eventSpace;
  renderer.setPathway(pathway);
  renderer.setBranchPathExtractionEventSpace(BRANCH_PATH_EVENTSPACE);
  renderer.setAllowBranchPathExtraction(true);
  renderer.setSizeConfig(PathSizeConfiguration.COMPACT);
  for (  VertexRepBasedContextMenuItem item : nodeContextMenuItems) {
    renderer.addVertexRepBasedContextMenuItem(item);
  }
  for (  Pair<VertexRepBasedEventFactory,PickingMode> eventPair : nodeEvents) {
    renderer.addVertexRepBasedSelectionEvent(eventPair.getFirst(),eventPair.getSecond());
  }
  ElementLayout layout=new ElementLayout();
  layout.setDynamicSizeUnitsX(1);
  layout.setRenderer(renderer);
  pathRow.add(layout);
  renderer.init();
  renderer.setPath(pathSegments);
  renderers.put(renderer,layout);
  return renderer;
}",0.9901914992993928
57211,"/** 
 * @param renderer
 * @param pathwayPathEventSpace
 */
public FixedPathUpdateStrategy(APathwayPathRenderer renderer,String pathwayPathEventSpace,boolean isPathSelectionMode,ContextualPathsRenderer contextualPathsRenderer){
  super(renderer,pathwayPathEventSpace);
  this.isPathSelectionMode=isPathSelectionMode;
  this.contextualPathsRenderer=contextualPathsRenderer;
}","/** 
 * @param renderer
 * @param pathwayPathEventSpace
 */
public FixedPathUpdateStrategy(APathwayPathRenderer renderer,String pathwayPathEventSpace,boolean isPathSelectionMode,ContextualPathsRenderer contextualPathsRenderer,List<List<PathwayVertexRep>> selectedPathSegments){
  super(renderer,pathwayPathEventSpace);
  this.isPathSelectionMode=isPathSelectionMode;
  this.contextualPathsRenderer=contextualPathsRenderer;
  setSelectedPathSegments(selectedPathSegments);
}",0.8831168831168831
57212,"@Override protected void renderContent(GL2 gl){
  if (layoutDisplayListIndex == -1)   layoutDisplayListIndex=gl.glGenLists(1);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  GLU glu=null;
  if (isLayoutDirty()) {
    gl.glNewList(layoutDisplayListIndex,GL2.GL_COMPILE);
    glu=new GLU();
    renderPathwayBorders(gl);
    for (    ALinearizableNode node : pathNodes) {
      node.render(gl,glu);
      renderBranchNodes(gl,glu,node);
    }
    if (expandedBranchSummaryNode != null) {
      renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
      gl.glColor4f(1,1,1,0.9f);
      gl.glBegin(GL2.GL_QUADS);
      gl.glVertex3f(0,0,0.1f);
      gl.glVertex3f(x,0,0.1f);
      gl.glVertex3f(x,y,0.1f);
      gl.glVertex3f(0,y,0.1f);
      gl.glEnd();
    }
    renderEdges(gl,pathNodes);
    gl.glEndList();
    setLayoutDirty(false);
  }
  if (glu == null)   glu=new GLU();
  for (  ALinearizableNode node : pathNodes) {
    node.renderHighlight(gl,glu);
  }
  if (expandedBranchSummaryNode != null) {
    for (    ALinearizableNode node : expandedBranchSummaryNode.getBranchNodes()) {
      node.renderHighlight(gl,glu);
    }
  }
  gl.glCallList(layoutDisplayListIndex);
}","@Override protected void renderContent(GL2 gl){
  if (layoutDisplayListIndex == -1)   layoutDisplayListIndex=gl.glGenLists(1);
  gl.glEnable(GL.GL_BLEND);
  gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL.GL_LINE_SMOOTH);
  GLU glu=null;
  if (isLayoutDirty()) {
    gl.glNewList(layoutDisplayListIndex,GL2.GL_COMPILE);
    glu=new GLU();
    renderPathwayBorders(gl);
    for (    ALinearizableNode node : pathNodes) {
      node.render(gl,glu);
      renderBranchNodes(gl,glu,node);
    }
    if (expandedBranchSummaryNode != null) {
      renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
    }
    renderEdges(gl,pathNodes);
    gl.glEndList();
    setLayoutDirty(false);
  }
  if (glu == null)   glu=new GLU();
  for (  ALinearizableNode node : pathNodes) {
    node.renderHighlight(gl,glu);
  }
  if (expandedBranchSummaryNode != null) {
    for (    ALinearizableNode node : expandedBranchSummaryNode.getBranchNodes()) {
      node.renderHighlight(gl,glu);
    }
  }
  gl.glCallList(layoutDisplayListIndex);
}",0.9104347826086956
57213,"private void selectPath(PathwayVertexRep vertexRep,SelectionType selectionType){
  if (vertexRep == null)   return;
  boolean triggerPathUpdate=false;
  if (!isPathStartSelected) {
    if (isControlKeyDown) {
      shrinkSelectedPath(vertexRep);
      if (selectionType == SelectionType.SELECTION) {
        previousSelectedPath=selectedPath;
      }
      triggerPathUpdate=true;
    }
    if (isShiftKeyDown) {
      extendSelectedPath(vertexRep);
      if (selectionType == SelectionType.SELECTION) {
        previousSelectedPath=selectedPath;
      }
      triggerPathUpdate=true;
    }
    if (!isShiftKeyDown && !isControlKeyDown && vertexRep != null) {
      if (selectionType == SelectionType.SELECTION) {
        boolean isPortalNode=false;
        for (        PathwayVertexRep portal : portalVertexReps) {
          if (vertexRep == portal) {
            isPortalNode=true;
          }
        }
        if (!isPortalNode) {
          pathSegments.clear();
        }
        generateSingleNodePath(vertexRep);
        pathSegments.add(new PathwayPath(selectedPath));
        isPathStartSelected=true;
        triggerPathUpdate=true;
      }
    }
  }
 else {
    if (pathStartVertexRep == null)     return;
    if (!pathway.containsVertex(pathStartVertexRep)) {
      isPathStartSelected=false;
      return;
    }
    KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,pathStartVertexRep,MAX_PATHS);
    List<GraphPath<PathwayVertexRep,DefaultEdge>> allPathsTmp=null;
    if (vertexRep != null) {
      if (vertexRep != pathStartVertexRep) {
        allPathsTmp=pathAlgo.getPaths(vertexRep);
        if (allPathsTmp != null && allPathsTmp.size() > 0) {
          allPaths=allPathsTmp;
          if (allPaths.size() <= selectedPathID)           selectedPathID=0;
          selectedPath=allPaths.get(selectedPathID);
          triggerPathUpdate=true;
        }
      }
 else {
        generateSingleNodePath(vertexRep);
      }
    }
    if (pathSegments.size() > 0)     pathSegments.set(pathSegments.size() - 1,new PathwayPath(selectedPath));
    if (selectionType == SelectionType.SELECTION) {
      isPathStartSelected=false;
      previousSelectedPath=selectedPath;
    }
  }
  if (triggerPathUpdate) {
    triggerPathUpdate();
    isBubbleTextureDirty=true;
  }
}","private void selectPath(PathwayVertexRep vertexRep,SelectionType selectionType){
  if (vertexRep == null)   return;
  boolean triggerPathUpdate=false;
  if (!isPathStartSelected) {
    if (isControlKeyDown) {
      shrinkSelectedPath(vertexRep);
      if (selectionType == SelectionType.SELECTION) {
        previousSelectedPath=selectedPath;
      }
      triggerPathUpdate=true;
    }
    if (isShiftKeyDown) {
      extendSelectedPath(vertexRep);
      if (selectionType == SelectionType.SELECTION) {
        previousSelectedPath=selectedPath;
      }
      triggerPathUpdate=true;
    }
    if (!isShiftKeyDown && !isControlKeyDown && vertexRep != null) {
      if (selectionType == SelectionType.SELECTION) {
        boolean isPortalNode=false;
        portalVertexReps=PathwayManager.get().getEquivalentVertexRepsInPathway(previousSelectedPath.getEndVertex(),pathway);
        for (        PathwayVertexRep portal : portalVertexReps) {
          if (vertexRep == portal) {
            isPortalNode=true;
          }
        }
        if (!isPortalNode) {
          pathSegments.clear();
        }
        generateSingleNodePath(vertexRep);
        pathSegments.add(new PathwayPath(selectedPath));
        isPathStartSelected=true;
        triggerPathUpdate=true;
      }
    }
  }
 else {
    if (pathStartVertexRep == null)     return;
    if (!pathway.containsVertex(pathStartVertexRep)) {
      isPathStartSelected=false;
      return;
    }
    KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,pathStartVertexRep,MAX_PATHS);
    List<GraphPath<PathwayVertexRep,DefaultEdge>> allPathsTmp=null;
    if (vertexRep != null) {
      if (vertexRep != pathStartVertexRep) {
        allPathsTmp=pathAlgo.getPaths(vertexRep);
        if (allPathsTmp != null && allPathsTmp.size() > 0) {
          allPaths=allPathsTmp;
          if (allPaths.size() <= selectedPathID)           selectedPathID=0;
          selectedPath=allPaths.get(selectedPathID);
          triggerPathUpdate=true;
        }
      }
 else {
        generateSingleNodePath(vertexRep);
      }
    }
    if (pathSegments.size() > 0)     pathSegments.set(pathSegments.size() - 1,new PathwayPath(selectedPath));
    if (selectionType == SelectionType.SELECTION) {
      isPathStartSelected=false;
      previousSelectedPath=selectedPath;
    }
  }
  if (triggerPathUpdate) {
    triggerPathUpdate();
    isBubbleTextureDirty=true;
  }
}",0.9739637575505103
57214,"public void handlePathwayElementSelection(SelectionType selectionType,int externalID){
  setDisplayListDirty();
  if (vertexSelectionManager.getElements(SelectionType.SELECTION).size() == 1) {
    pathStartVertexRep=pathwayItemManager.getPathwayVertexRep((Integer)vertexSelectionManager.getElements(SelectionType.SELECTION).toArray()[0]);
  }
  vertexSelectionManager.clearSelection(selectionType);
  if (metaboliteSelectionManager.getNumberOfElements(selectionType) > 0) {
    metaboliteSelectionManager.clearSelection(selectionType);
    metaboliteSelectionManager.triggerSelectionUpdateEvent();
  }
  PathwayVertexRep vertexRep=pathwayItemManager.getPathwayVertexRep(externalID);
  if (vertexRep.getType() == EPathwayVertexType.compound) {
    metaboliteSelectionManager.addToType(selectionType,vertexRep.getName().hashCode());
    metaboliteSelectionManager.triggerSelectionUpdateEvent();
  }
  vertexSelectionManager.addToType(selectionType,vertexRep.getID());
  SelectionDelta selectionDelta=vertexSelectionManager.getDelta();
  if (isPathSelectionMode) {
    selectPath(vertexRep,selectionType);
    SelectionUpdateEvent event=new SelectionUpdateEvent();
    event.setSender(this);
    event.setSelectionDelta(selectionDelta);
    eventPublisher.triggerEvent(event);
  }
  ShowPortalNodesEvent e=new ShowPortalNodesEvent(vertexRep);
  e.setSender(this);
  e.setEventSpace(pathwayPathEventSpace);
  eventPublisher.triggerEvent(e);
  highlightPortalNodes(vertexRep);
}","public void handlePathwayElementSelection(SelectionType selectionType,int externalID){
  setDisplayListDirty();
  if (vertexSelectionManager.getElements(SelectionType.SELECTION).size() == 1) {
    pathStartVertexRep=pathwayItemManager.getPathwayVertexRep((Integer)vertexSelectionManager.getElements(SelectionType.SELECTION).toArray()[0]);
  }
  vertexSelectionManager.clearSelection(selectionType);
  if (metaboliteSelectionManager.getNumberOfElements(selectionType) > 0) {
    metaboliteSelectionManager.clearSelection(selectionType);
    metaboliteSelectionManager.triggerSelectionUpdateEvent();
  }
  PathwayVertexRep vertexRep=pathwayItemManager.getPathwayVertexRep(externalID);
  if (vertexRep.getType() == EPathwayVertexType.compound) {
    metaboliteSelectionManager.addToType(selectionType,vertexRep.getName().hashCode());
    metaboliteSelectionManager.triggerSelectionUpdateEvent();
  }
  vertexSelectionManager.addToType(selectionType,vertexRep.getID());
  SelectionDelta selectionDelta=vertexSelectionManager.getDelta();
  if (isPathSelectionMode) {
    selectPath(vertexRep,selectionType);
    SelectionUpdateEvent event=new SelectionUpdateEvent();
    event.setSender(this);
    event.setSelectionDelta(selectionDelta);
    eventPublisher.triggerEvent(event);
  }
  ShowPortalNodesEvent e=new ShowPortalNodesEvent(vertexRep);
  e.setSender(this);
  e.setEventSpace(pathwayPathEventSpace);
  eventPublisher.triggerEvent(e);
  portalVertexReps=PathwayManager.get().getEquivalentVertexRepsInPathway(vertexRep,pathway);
}",0.966711051930759
57215,"private void selectPath(PathwayVertexRep vertexRep,SelectionType selectionType){
  if (vertexRep == null)   return;
  boolean triggerPathUpdate=false;
  if (!isPathStartSelected) {
    if (isControlKeyDown) {
      shrinkSelectedPath(vertexRep);
      if (selectionType == SelectionType.SELECTION) {
        previousSelectedPath=selectedPath;
      }
      triggerPathUpdate=true;
    }
    if (isShiftKeyDown) {
      extendSelectedPath(vertexRep);
      if (selectionType == SelectionType.SELECTION) {
        previousSelectedPath=selectedPath;
      }
      triggerPathUpdate=true;
    }
    if (!isShiftKeyDown && !isControlKeyDown && vertexRep != null) {
      if (selectionType == SelectionType.SELECTION) {
        boolean isPortalNode=false;
        portalVertexReps=PathwayManager.get().getEquivalentVertexRepsInPathway(previousSelectedPath.getEndVertex(),pathway);
        for (        PathwayVertexRep portal : portalVertexReps) {
          if (vertexRep == portal) {
            isPortalNode=true;
          }
        }
        if (!isPortalNode) {
          pathSegments.clear();
        }
        generateSingleNodePath(vertexRep);
        pathSegments.add(new PathwayPath(selectedPath));
        isPathStartSelected=true;
        triggerPathUpdate=true;
      }
    }
  }
 else {
    if (pathStartVertexRep == null)     return;
    if (!pathway.containsVertex(pathStartVertexRep)) {
      isPathStartSelected=false;
      return;
    }
    KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,pathStartVertexRep,MAX_PATHS);
    List<GraphPath<PathwayVertexRep,DefaultEdge>> allPathsTmp=null;
    if (vertexRep != null) {
      if (vertexRep != pathStartVertexRep) {
        allPathsTmp=pathAlgo.getPaths(vertexRep);
        if (allPathsTmp != null && allPathsTmp.size() > 0) {
          allPaths=allPathsTmp;
          if (allPaths.size() <= selectedPathID)           selectedPathID=0;
          selectedPath=allPaths.get(selectedPathID);
          triggerPathUpdate=true;
        }
      }
 else {
        generateSingleNodePath(vertexRep);
      }
    }
    if (pathSegments.size() > 0)     pathSegments.set(pathSegments.size() - 1,new PathwayPath(selectedPath));
    if (selectionType == SelectionType.SELECTION) {
      isPathStartSelected=false;
      previousSelectedPath=selectedPath;
    }
  }
  if (triggerPathUpdate) {
    triggerPathUpdate();
    isBubbleTextureDirty=true;
  }
}","private void selectPath(PathwayVertexRep vertexRep,SelectionType selectionType){
  if (vertexRep == null)   return;
  boolean triggerPathUpdate=false;
  if (!isPathStartSelected) {
    if (isControlKeyDown) {
      shrinkSelectedPath(vertexRep);
      if (selectionType == SelectionType.SELECTION) {
        previousSelectedPath=selectedPath;
      }
      triggerPathUpdate=true;
    }
    if (isShiftKeyDown) {
      extendSelectedPath(vertexRep);
      if (selectionType == SelectionType.SELECTION) {
        previousSelectedPath=selectedPath;
      }
      triggerPathUpdate=true;
    }
    if (!isShiftKeyDown && !isControlKeyDown && vertexRep != null) {
      if (selectionType == SelectionType.SELECTION) {
        boolean isPortalNode=false;
        if (previousSelectedPath != null) {
          portalVertexReps=PathwayManager.get().getEquivalentVertexRepsInPathway(previousSelectedPath.getEndVertex(),pathway);
          for (          PathwayVertexRep portal : portalVertexReps) {
            if (vertexRep == portal) {
              isPortalNode=true;
            }
          }
        }
        if (!isPortalNode) {
          pathSegments.clear();
        }
        generateSingleNodePath(vertexRep);
        pathSegments.add(new PathwayPath(selectedPath));
        isPathStartSelected=true;
        triggerPathUpdate=true;
      }
    }
  }
 else {
    if (pathStartVertexRep == null)     return;
    if (!pathway.containsVertex(pathStartVertexRep)) {
      isPathStartSelected=false;
      return;
    }
    KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,pathStartVertexRep,MAX_PATHS);
    List<GraphPath<PathwayVertexRep,DefaultEdge>> allPathsTmp=null;
    if (vertexRep != null) {
      if (vertexRep != pathStartVertexRep) {
        allPathsTmp=pathAlgo.getPaths(vertexRep);
        if (allPathsTmp != null && allPathsTmp.size() > 0) {
          allPaths=allPathsTmp;
          if (allPaths.size() <= selectedPathID)           selectedPathID=0;
          selectedPath=allPaths.get(selectedPathID);
          triggerPathUpdate=true;
        }
      }
 else {
        generateSingleNodePath(vertexRep);
      }
    }
    if (pathSegments.size() > 0)     pathSegments.set(pathSegments.size() - 1,new PathwayPath(selectedPath));
    if (selectionType == SelectionType.SELECTION) {
      isPathStartSelected=false;
      previousSelectedPath=selectedPath;
    }
  }
  if (triggerPathUpdate) {
    triggerPathUpdate();
    isBubbleTextureDirty=true;
  }
}",0.9843812575090108
57216,"public void addPathway(PathwayGraph pathway){
  PathwayDataDomain pathwayDataDomain=(PathwayDataDomain)DataDomainManager.get().getDataDomainByType(PathwayDataDomain.DATA_DOMAIN_TYPE);
  List<TablePerspective> tablePerspectives=new ArrayList<>(experimentalDataMappingElement.getTablePerspectives());
  TablePerspective tablePerspective=tablePerspectives.get(0);
  Perspective recordPerspective=tablePerspective.getRecordPerspective();
  Perspective dimensionPerspective=tablePerspective.getDimensionPerspective();
  PathwayTablePerspective pathwayTablePerspective=new PathwayTablePerspective(tablePerspective.getDataDomain(),pathwayDataDomain,recordPerspective,dimensionPerspective,pathway);
  pathwayDataDomain.addTablePerspective(pathwayTablePerspective);
  List<TablePerspective> pathwayTablePerspectives=new ArrayList<>(1);
  pathwayTablePerspectives.add(pathwayTablePerspective);
  for (int i=1; i < tablePerspectives.size(); i++) {
    pathwayTablePerspectives.add(tablePerspectives.get(i));
  }
  PathwayMultiFormInfo info=new PathwayMultiFormInfo();
  info.pathway=pathway;
  info.age=currentPathwayAge--;
  createMultiformRenderer(pathwayTablePerspectives,EnumSet.of(EEmbeddingID.PATHWAY_LEVEL1,EEmbeddingID.PATHWAY_LEVEL2,EEmbeddingID.PATHWAY_LEVEL3,EEmbeddingID.PATHWAY_LEVEL4),pathwayRow,Float.NaN,info);
  pathwayLayout.addColumn(info.window);
  int rendererID=info.embeddingIDToRendererIDs.get(EEmbeddingID.PATHWAY_LEVEL1).get(0);
  if (info.multiFormRenderer.getActiveRendererID() != rendererID) {
    info.multiFormRenderer.setActive(rendererID);
  }
  lastUsedLevel1Renderer=info.multiFormRenderer;
  lastUsedRenderer=info.multiFormRenderer;
  addPortalsOfPathway(info);
  pathwayInfos.add(info);
  wasPathwayAdded=true;
}","public void addPathway(PathwayGraph pathway){
  PathwayDataDomain pathwayDataDomain=(PathwayDataDomain)DataDomainManager.get().getDataDomainByType(PathwayDataDomain.DATA_DOMAIN_TYPE);
  List<TablePerspective> tablePerspectives=new ArrayList<>(experimentalDataMappingElement.getTablePerspectives());
  TablePerspective tablePerspective=tablePerspectives.get(0);
  Perspective recordPerspective=tablePerspective.getRecordPerspective();
  Perspective dimensionPerspective=tablePerspective.getDimensionPerspective();
  PathwayTablePerspective pathwayTablePerspective=new PathwayTablePerspective(tablePerspective.getDataDomain(),pathwayDataDomain,recordPerspective,dimensionPerspective,pathway);
  pathwayDataDomain.addTablePerspective(pathwayTablePerspective);
  List<TablePerspective> pathwayTablePerspectives=new ArrayList<>(1);
  pathwayTablePerspectives.add(pathwayTablePerspective);
  for (int i=1; i < tablePerspectives.size(); i++) {
    pathwayTablePerspectives.add(tablePerspectives.get(i));
  }
  PathwayMultiFormInfo info=new PathwayMultiFormInfo();
  info.pathway=pathway;
  info.age=currentPathwayAge--;
  createMultiformRenderer(pathwayTablePerspectives,EnumSet.of(EEmbeddingID.PATHWAY_LEVEL1,EEmbeddingID.PATHWAY_LEVEL2,EEmbeddingID.PATHWAY_LEVEL3,EEmbeddingID.PATHWAY_LEVEL4),pathwayRow,Float.NaN,info);
  pathwayLayout.addColumn(info.window);
  int rendererID=info.embeddingIDToRendererIDs.get(EEmbeddingID.PATHWAY_LEVEL1).get(0);
  if (info.multiFormRenderer.getActiveRendererID() != rendererID) {
    info.multiFormRenderer.setActive(rendererID);
  }
  lastUsedLevel1Renderer=info.multiFormRenderer;
  lastUsedRenderer=info.multiFormRenderer;
  pathwayInfos.add(info);
  addPortalsOfPathway(info);
  wasPathwayAdded=true;
}",0.9850402761795168
57217,"public boolean hasChanged(){
  return after != null && !before.equals(after);
}","public boolean hasChanged(){
  return after != null && !before.equals(after) && !(!areValidBounds(after) && !areValidBounds(before));
}",0.7383177570093458
57218,"private void removeAnimationsOf(GLElement child,boolean checkLayoutAnimations){
  removeStyleAnimationsOf(child);
  if (checkLayoutAnimations) {
    for (Iterator<ALayoutAnimation> it=layoutAnimations.iterator(); it.hasNext(); )     if (it.next().getAnimatedElement() == child)     it.remove();
  }
}","protected final void removeAnimationsOf(GLElement child,boolean checkLayoutAnimations){
  removeStyleAnimationsOf(child);
  if (checkLayoutAnimations) {
    for (Iterator<ALayoutAnimation> it=layoutAnimations.iterator(); it.hasNext(); )     if (it.next().getAnimatedElement() == child)     it.remove();
  }
}",0.9703947368421052
57219,"public final void add(int index,GLElement child,IDuration duration,IInTransition animation){
  int startIn=0;
  if (child.getParent() == this) {
    int from=indexOf(child);
    if (from < index)     index--;
  }
  this.layoutAnimations.add(createInAnimation(child.layoutElement,startIn,duration,animation));
  setup(child);
  dirtyAnimation=true;
  if (startIn == 0)   children.add(index,child);
  animate();
}","public final void add(int index,GLElement child,IDuration duration,IInTransition animation){
  int startIn=0;
  if (child.getParent() == this) {
    int from=indexOf(child);
    if (from < index)     index--;
  }
  if (duration.getDuration() > 0)   this.layoutAnimations.add(createInAnimation(child.layoutElement,startIn,duration,animation));
  setup(child);
  dirtyAnimation=true;
  if (startIn == 0)   children.add(index,child);
  animate();
}",0.9602803738317756
57220,"@Override protected final void layout(){
  super.layout();
  Vec2f size=getSize();
  if (dirtyAnimation || forceLayout) {
    List<ALayoutAnimation> tmp=new LinkedList<>(layoutAnimations);
    Collection<GLElement> elems=asSeenIn(0);
    List<RecordingLayoutElement> l=new ArrayList<>(elems.size());
    for (    GLElement elem : elems) {
      if (elem.getVisibility() != EVisibility.NONE)       l.add(new RecordingLayoutElement(elem.layoutElement));
    }
    layout.doLayout(l,size.x(),size.y());
    outer:     for (    RecordingLayoutElement elem : l) {
      for (Iterator<ALayoutAnimation> ita=tmp.iterator(); ita.hasNext(); ) {
        ALayoutAnimation anim=ita.next();
        if (anim.getAnimated() == elem.wrappee) {
          anim.init(elem.before,elem.after);
          ita.remove();
          continue outer;
        }
      }
      if (elem.hasChanged()) {
        ALayoutAnimation anim=createMoveAnimation(elem.wrappee,elem.before,elem.after);
        layoutAnimations.add(anim);
      }
    }
  }
}","@Override protected final void layout(){
  super.layout();
  Vec2f size=getSize();
  if (dirtyAnimation || forceLayout) {
    Collection<GLElement> elems=asSeenIn(0);
    List<RecordingLayoutElement> l=new ArrayList<>(elems.size());
    for (    GLElement elem : elems) {
      if (elem.getVisibility() != EVisibility.NONE)       l.add(new RecordingLayoutElement(elem.layoutElement));
    }
    layout.doLayout(l,size.x(),size.y());
    List<ALayoutAnimation> tmp=new LinkedList<>(layoutAnimations);
    int i=0;
    outer:     for (    RecordingLayoutElement elem : l) {
      if (i == 61) {
        System.err.println();
      }
      for (Iterator<ALayoutAnimation> ita=tmp.iterator(); ita.hasNext(); ) {
        ALayoutAnimation anim=ita.next();
        if (anim.getAnimated() == elem.wrappee) {
          updateMoveAnimation(anim,elem.wrappee,elem.before,elem.after);
          ita.remove();
          continue outer;
        }
      }
      if (elem.hasChanged()) {
        ALayoutAnimation anim=createMoveAnimation(elem.wrappee,elem.before,elem.after);
        layoutAnimations.add(anim);
      }
      i++;
    }
  }
}",0.8762260625875758
57221,"protected final void removeStyleAnimationsOf(GLElement child){
  for (Iterator<StyleAnimation> it=styleAnimations.iterator(); it.hasNext(); )   if (it.next().getAnimatedElement() == child)   it.remove();
}","private void removeStyleAnimationsOf(GLElement child){
  for (Iterator<StyleAnimation> it=styleAnimations.iterator(); it.hasNext(); )   if (it.next().getAnimatedElement() == child)   it.remove();
}",0.965174129353234
57222,"@Override protected void firstTime(float w,float h){
}","@Override protected void firstTime(float w,float h){
switch (type) {
case IN:
    break;
case MOVE:
case OUT:
  animated.setBounds(from);
break;
default :
break;
}
}",0.4931506849315068
57223,"@Override public void init(Vec4f from,Vec4f to){
  this.to=to;
}","@Override public void init(Vec4f from,Vec4f to){
  this.from=from;
  this.to=to;
}",0.8767123287671232
57224,"@Override protected void firstTime(float w,float h){
}","@Override protected void firstTime(float w,float h){
  animated.setBounds(from);
}",0.7941176470588235
57225,"public MoveAnimation(int startIn,IDuration duration,IGLLayoutElement animated,IMoveTransition animation){
  super(startIn,duration,animated);
  this.from=animated.getBounds();
  this.animation=animation;
}","public MoveAnimation(int startIn,IDuration duration,IGLLayoutElement animated,IMoveTransition animation){
  super(startIn,duration,animated);
  this.animation=animation;
}",0.9095744680851064
57226,"@Override public void layout(IRowSetter setter,float x,float w,int selectedIndex){
  float y=0;
  for (int r=0; r < offset; ++r)   setter.set(order[r],x,0,w,0,order[r] == selectedIndex);
  for (int i=unused.nextSetBit(0); i >= 0; i=unused.nextSetBit(i + 1)) {
    setter.set(i,x,h,w,0,i == selectedIndex);
  }
  for (int r=offset; r < (offset + numVisibles); ++r) {
    int rowIndex=order[r];
    float hr=rowHeight(base - r);
    setter.set(rowIndex,x,y,w,hr,rowIndex == selectedIndex);
    y+=hr;
  }
}","@Override public void layout(IRowSetter setter,float x,float w,int selectedIndex){
  float y=0;
  for (int r=0; r < offset; ++r)   setter.set(order[r],x,0,w,0,false);
  for (int i=unused.nextSetBit(0); i >= 0; i=unused.nextSetBit(i + 1)) {
    setter.set(i,x,h,w,0,false);
  }
  for (int r=offset; r < (offset + numVisibles); ++r) {
    int rowIndex=order[r];
    float hr=rowHeight(base - r);
    setter.set(rowIndex,x,y,w,hr,rowIndex == selectedIndex);
    y+=hr;
  }
}",0.9456410256410256
57227,"@Override public void layout(IRowSetter setter,float x,float w,int selectedIndex){
  float y=0;
  for (int r=0; r < offset; ++r)   setter.set(order[r],x,0,w,0,order[r] == selectedIndex);
  for (int i=unused.nextSetBit(0); i >= 0; i=unused.nextSetBit(i + 1)) {
    setter.set(i,x,h,w,0,i == selectedIndex);
  }
  for (int r=offset; r < (offset + numVisibles); ++r) {
    int rowIndex=order[r];
    float hr=ROW_HEIGHT;
    setter.set(rowIndex,x,y,w,hr,rowIndex == selectedIndex);
    y+=hr;
  }
}","@Override public void layout(IRowSetter setter,float x,float w,int selectedIndex){
  float y=0;
  for (int r=0; r < offset; ++r)   setter.set(order[r],x,0,w,0,false);
  for (int i=unused.nextSetBit(0); i >= 0; i=unused.nextSetBit(i + 1)) {
    setter.set(i,x,h,w,0,false);
  }
  for (int r=offset; r < (offset + numVisibles); ++r) {
    int rowIndex=order[r];
    float hr=ROW_HEIGHT;
    setter.set(rowIndex,x,y,w,hr,rowIndex == selectedIndex);
    y+=hr;
  }
}",0.9446185997910136
57228,"@Override public void set(int rowIndex,float x,float y,float w,float h,boolean pickable){
  int at=rowIndexToGlElement.get(rowIndex);
  if (h <= 0 && at >= 0) {
    before.set(rowIndex,y <= 0);
    rowIndexToGlElement.remove(rowIndex);
    inPool.set(at);
    IGLLayoutElement row=children.get(at);
    if (h > 0)     System.err.println();
    row.setBounds(x,y,w,h);
    ValueElement elem=(ValueElement)row.asElement();
    elem.setAnimationFlag(before.get(rowIndex) ? FLAG_FROM_ABOVE : FLAG_FROM_BELOW);
    elem.setVisibility(EVisibility.VISIBLE);
  }
 else   if (h <= 0) {
    before.set(rowIndex,y <= 0);
  }
 else   if (at < 0) {
    if (inPool.isEmpty()) {
    }
 else {
      at=inPool.length() - 1;
      inPool.clear(at);
      rowIndexToGlElement.put(rowIndex,at);
      IGLLayoutElement row=children.get(at);
      row.setBounds(x,y,w,h);
      ValueElement elem=(ValueElement)row.asElement();
      elem.setLayoutData(table.getDataItem(rowIndex));
      elem.setAnimationFlag(before.get(rowIndex) ? FLAG_FROM_ABOVE : FLAG_FROM_BELOW);
      elem.setVisibility(pickable ? EVisibility.PICKABLE : EVisibility.VISIBLE);
    }
  }
 else {
    if (at > children.size()) {
      System.err.println();
    }
    IGLLayoutElement row=children.get(at);
    row.setBounds(x,y,w,h);
    ValueElement elem=(ValueElement)row.asElement();
    elem.setAnimationFlag(FLAG_NONE);
    elem.setVisibility(pickable ? EVisibility.PICKABLE : EVisibility.VISIBLE);
  }
}","@Override public void set(int rowIndex,float x,float y,float w,float h,boolean pickable){
  int at=rowIndexToGlElement.get(rowIndex);
  if (h <= 0 && at >= 0) {
    before.set(rowIndex,y <= 0);
    rowIndexToGlElement.remove(rowIndex);
    inPool.set(at);
    IGLLayoutElement row=children.get(at);
    row.setBounds(x,y,w,h);
    ValueElement elem=(ValueElement)row.asElement();
    elem.setAnimationFlag(before.get(rowIndex) ? FLAG_TO_ABOVE : FLAG_TO_BELOW);
    elem.setVisibility(EVisibility.VISIBLE);
  }
 else   if (h <= 0) {
    before.set(rowIndex,y <= 0);
  }
 else   if (at < 0) {
    if (inPool.isEmpty()) {
    }
 else {
      at=inPool.nextSetBit(0);
      inPool.clear(at);
      rowIndexToGlElement.put(rowIndex,at);
      if (rowIndex == 20)       System.err.println();
      IGLLayoutElement row=children.get(at);
      row.setBounds(x,y,w,h);
      ValueElement elem=(ValueElement)row.asElement();
      removeAnimationsOf(elem,true);
      elem.setRow(table.getDataItem(rowIndex));
      elem.setAnimationFlag(before.get(rowIndex) ? FLAG_FROM_ABOVE : FLAG_FROM_BELOW);
      elem.setVisibility(pickable ? EVisibility.PICKABLE : EVisibility.VISIBLE);
    }
  }
 else {
    IGLLayoutElement row=children.get(at);
    row.setBounds(x,y,w,h);
    ValueElement elem=(ValueElement)row.asElement();
    elem.setAnimationFlag(FLAG_NONE);
    elem.setVisibility(pickable ? EVisibility.PICKABLE : EVisibility.VISIBLE);
  }
}",0.5712309820193637
57229,"@Override public final void checkLayout(){
  int rows=getColumnParent().getNumVisibleRows(model);
  int cached=this.size();
  if (cached < rows) {
    int addItems=Math.min(20,rows - cached);
    for (int i=0; i < addItems; ++i)     add(createPoolItem(),Durations.NO);
    inPool.set(cached,cached + addItems);
  }
 else   if ((cached - rows) > 50 && inPool.cardinality() > 20) {
    int at=cached - 1;
    for (int toRemove=(inPool.cardinality() - 20); toRemove >= 0; toRemove--) {
      while (!inPool.get(at)) {
        GLElement replacement=get(at);
        int index=replacement.getLayoutDataAs(IRow.class,null).getIndex();
        rowIndexToGlElement.put(index,at - toRemove - 1);
        at--;
      }
      remove(get(at),Durations.NO);
      inPool.clear(at);
      at--;
    }
  }
  super.checkLayout();
}","@Override public final void checkLayout(){
  int rows=getColumnParent().getNumVisibleRows(model);
  int cached=this.size();
  if (cached < rows) {
    int addItems=Math.min(20,rows - cached);
    for (int i=0; i < addItems; ++i)     add(createPoolItem(),Durations.NO);
    inPool.set(cached,cached + addItems);
  }
 else   if ((cached - rows) > 50 && inPool.cardinality() > 20) {
    int at=cached - 1;
    final int itemsToRemove=Math.max(0,cached - (cached - rows) - 20);
    for (int toRemove=itemsToRemove; toRemove > 0; toRemove--) {
      while (!inPool.get(at)) {
        GLElement replacement=get(at);
        int index=replacement.getLayoutDataAs(IRow.class,null).getIndex();
        rowIndexToGlElement.put(index,at - toRemove - 1);
        at--;
      }
      remove(get(at).setVisibility(EVisibility.HIDDEN),Durations.NO);
      inPool.clear(at);
      at--;
    }
  }
  super.checkLayout();
}",0.9127906976744186
57230,"@Override protected ALayoutAnimation createMoveAnimation(IGLLayoutElement elem,Vec4f before,Vec4f after){
  if (getColumnParent().getRanker(model).isInternalReLayout()) {
    DummyAnimation d=new DummyAnimation(EAnimationType.MOVE,elem);
    d.init(before,after);
    return d;
  }
  return super.createMoveAnimation(elem,before,after);
}","@Override protected ALayoutAnimation createMoveAnimation(IGLLayoutElement elem,Vec4f before,Vec4f after){
  int flag=((ValueElement)elem.asElement()).getAnimationFlag();
switch (flag) {
case FLAG_NONE:
    break;
case FLAG_FROM_ABOVE:
  before=before.copy();
before.setY(0);
before.setW(0);
break;
case FLAG_FROM_BELOW:
before=before.copy();
before.setY(getSize().y());
before.setW(0);
break;
case FLAG_TO_ABOVE:
after=after.copy();
after.setY(0);
after.setW(0);
break;
case FLAG_TO_BELOW:
after=after.copy();
after.setY(getSize().y());
after.setW(0);
break;
}
if (getColumnParent().getRanker(model).isInternalReLayout()) {
DummyAnimation d=new DummyAnimation(EAnimationType.MOVE,elem);
d.init(before,after);
return d;
}
return super.createMoveAnimation(elem,before,after);
}",0.573225516621743
57231,"@Override public void doLayout(final List<? extends IGLLayoutElement> children,float w,float h){
  final RankTableModel table=model.getTable();
  final IColumModelLayout p=(IColumModelLayout)getParent();
  IRowSetter setter=new IRowSetter(){
    @Override public void set(    int rowIndex,    float x,    float y,    float w,    float h,    boolean pickable){
      int at=rowIndexToGlElement.get(rowIndex);
      if (h <= 0 && at >= 0) {
        before.set(rowIndex,y <= 0);
        rowIndexToGlElement.remove(rowIndex);
        inPool.set(at);
        IGLLayoutElement row=children.get(at);
        if (h > 0)         System.err.println();
        row.setBounds(x,y,w,h);
        ValueElement elem=(ValueElement)row.asElement();
        elem.setAnimationFlag(before.get(rowIndex) ? FLAG_FROM_ABOVE : FLAG_FROM_BELOW);
        elem.setVisibility(EVisibility.VISIBLE);
      }
 else       if (h <= 0) {
        before.set(rowIndex,y <= 0);
      }
 else       if (at < 0) {
        if (inPool.isEmpty()) {
        }
 else {
          at=inPool.length() - 1;
          inPool.clear(at);
          rowIndexToGlElement.put(rowIndex,at);
          IGLLayoutElement row=children.get(at);
          row.setBounds(x,y,w,h);
          ValueElement elem=(ValueElement)row.asElement();
          elem.setLayoutData(table.getDataItem(rowIndex));
          elem.setAnimationFlag(before.get(rowIndex) ? FLAG_FROM_ABOVE : FLAG_FROM_BELOW);
          elem.setVisibility(pickable ? EVisibility.PICKABLE : EVisibility.VISIBLE);
        }
      }
 else {
        if (at > children.size()) {
          System.err.println();
        }
        IGLLayoutElement row=children.get(at);
        row.setBounds(x,y,w,h);
        ValueElement elem=(ValueElement)row.asElement();
        elem.setAnimationFlag(FLAG_NONE);
        elem.setVisibility(pickable ? EVisibility.PICKABLE : EVisibility.VISIBLE);
      }
    }
  }
;
  p.layoutRows(model,setter,w,h);
}","@Override public void doLayout(final List<? extends IGLLayoutElement> children,float w,float h){
  final RankTableModel table=model.getTable();
  final IColumModelLayout p=(IColumModelLayout)getParent();
  IRowSetter setter=new IRowSetter(){
    @Override public void set(    int rowIndex,    float x,    float y,    float w,    float h,    boolean pickable){
      int at=rowIndexToGlElement.get(rowIndex);
      if (h <= 0 && at >= 0) {
        before.set(rowIndex,y <= 0);
        rowIndexToGlElement.remove(rowIndex);
        inPool.set(at);
        IGLLayoutElement row=children.get(at);
        row.setBounds(x,y,w,h);
        ValueElement elem=(ValueElement)row.asElement();
        elem.setAnimationFlag(before.get(rowIndex) ? FLAG_TO_ABOVE : FLAG_TO_BELOW);
        elem.setVisibility(EVisibility.VISIBLE);
      }
 else       if (h <= 0) {
        before.set(rowIndex,y <= 0);
      }
 else       if (at < 0) {
        if (inPool.isEmpty()) {
        }
 else {
          at=inPool.nextSetBit(0);
          inPool.clear(at);
          rowIndexToGlElement.put(rowIndex,at);
          if (rowIndex == 20)           System.err.println();
          IGLLayoutElement row=children.get(at);
          row.setBounds(x,y,w,h);
          ValueElement elem=(ValueElement)row.asElement();
          removeAnimationsOf(elem,true);
          elem.setRow(table.getDataItem(rowIndex));
          elem.setAnimationFlag(before.get(rowIndex) ? FLAG_FROM_ABOVE : FLAG_FROM_BELOW);
          elem.setVisibility(pickable ? EVisibility.PICKABLE : EVisibility.VISIBLE);
        }
      }
 else {
        IGLLayoutElement row=children.get(at);
        row.setBounds(x,y,w,h);
        ValueElement elem=(ValueElement)row.asElement();
        elem.setAnimationFlag(FLAG_NONE);
        elem.setVisibility(pickable ? EVisibility.PICKABLE : EVisibility.VISIBLE);
      }
    }
  }
;
  p.layoutRows(model,setter,w,h);
}",0.6363636363636364
57232,"@Override protected ALayoutAnimation createMoveAnimation(IGLLayoutElement elem,Vec4f before,Vec4f after){
  if (areValidBounds(after)) {
    OrderColumnUI ranker=getColumnParent().getRanker(model);
    IRow row=elem.getLayoutDataAs(IRow.class,null);
    int delta=ranker.getRankDelta(row);
    if (delta != 0 && delta != Integer.MAX_VALUE) {
      removeStyleAnimationsOf(elem.asElement());
      animate(elem.asElement(),RenderStyle.hightlightAnimationDuration(delta),ColorTransition.get(delta));
    }
  }
  return super.createMoveAnimation(elem,before,after);
}","@Override protected ALayoutAnimation createMoveAnimation(IGLLayoutElement elem,Vec4f before,Vec4f after){
  if (areValidBounds(after)) {
    OrderColumnUI ranker=getColumnParent().getRanker(model);
    IRow row=elem.getLayoutDataAs(IRow.class,null);
    int delta=ranker.getRankDelta(row);
    if (delta != 0 && delta != Integer.MAX_VALUE) {
      removeAnimationsOf(elem.asElement(),false);
      animate(elem.asElement(),RenderStyle.hightlightAnimationDuration(delta),ColorTransition.get(delta));
    }
  }
  return super.createMoveAnimation(elem,before,after);
}",0.6572187776793623
57233,"/** 
 * returns the row represented by this element of this column
 * @return
 */
protected final IRow getRow(){
  return getLayoutDataAs(IRow.class,null);
}","/** 
 * returns the row represented by this element of this column
 * @return
 */
protected final IRow getRow(){
  return row;
}",0.8912280701754386
57234,"public APathwayPathRenderer(AGLView view,List<TablePerspective> tablePerspectives){
  this.view=view;
  this.tablePerspectives=tablePerspectives;
  this.pixelGLConverter=view.getPixelGLConverter();
  this.textRenderer=new CaleydoTextRenderer(24);
  geneSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(""String_Node_Str""));
  geneSelectionManager.registerEventListeners();
  metaboliteSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(""String_Node_Str""));
  metaboliteSelectionManager.registerEventListeners();
  List<GeneticDataDomain> dataDomains=DataDomainManager.get().getDataDomainsByType(GeneticDataDomain.class);
  if (dataDomains.size() != 0) {
    IDType sampleIDType=dataDomains.get(0).getSampleIDType().getIDCategory().getPrimaryMappingType();
    sampleSelectionManager=new EventBasedSelectionManager(this,sampleIDType);
    sampleSelectionManager.registerEventListeners();
  }
}","public APathwayPathRenderer(AGLView view,List<TablePerspective> tablePerspectives){
  this.view=view;
  this.tablePerspectives=tablePerspectives;
  this.pixelGLConverter=view.getPixelGLConverter();
  this.textRenderer=view.getTextRenderer();
  geneSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(""String_Node_Str""));
  geneSelectionManager.registerEventListeners();
  metaboliteSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(""String_Node_Str""));
  metaboliteSelectionManager.registerEventListeners();
  List<GeneticDataDomain> dataDomains=DataDomainManager.get().getDataDomainsByType(GeneticDataDomain.class);
  if (dataDomains.size() != 0) {
    IDType sampleIDType=dataDomains.get(0).getSampleIDType().getIDCategory().getPrimaryMappingType();
    sampleSelectionManager=new EventBasedSelectionManager(this,sampleIDType);
    sampleSelectionManager.registerEventListeners();
  }
}",0.9908454496499732
57235,"public void addPathway(PathwayGraph pathway){
  if (tablePerspectives.size() <= 0)   return;
  PathwayDataDomain pathwayDataDomain=(PathwayDataDomain)DataDomainManager.get().getDataDomainByType(PathwayDataDomain.DATA_DOMAIN_TYPE);
  TablePerspective tablePerspective=tablePerspectives.get(0);
  Perspective oldRecordPerspective=tablePerspective.getRecordPerspective();
  Perspective newRecordPerspective=new Perspective(tablePerspective.getDataDomain(),oldRecordPerspective.getIdType());
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  data.setData(oldRecordPerspective.getVirtualArray());
  newRecordPerspective.init(data);
  Perspective oldDimensionPerspective=tablePerspective.getDimensionPerspective();
  Perspective newDimensionPerspective=new Perspective(tablePerspective.getDataDomain(),oldDimensionPerspective.getIdType());
  data=new PerspectiveInitializationData();
  data.setData(oldDimensionPerspective.getVirtualArray());
  newDimensionPerspective.init(data);
  PathwayTablePerspective pathwayTablePerspective=new PathwayTablePerspective(tablePerspective.getDataDomain(),pathwayDataDomain,newRecordPerspective,newDimensionPerspective,pathway);
  pathwayDataDomain.addTablePerspective(pathwayTablePerspective);
  List<TablePerspective> pathwayTablePerspectives=new ArrayList<>(1);
  pathwayTablePerspectives.add(pathwayTablePerspective);
  PathwayMultiFormInfo info=new PathwayMultiFormInfo();
  info.pathway=pathway;
  info.age=currentPathwayAge--;
  createMultiformRenderer(pathwayTablePerspectives,EnumSet.of(EEmbeddingID.PATHWAY_LEVEL1,EEmbeddingID.PATHWAY_LEVEL2,EEmbeddingID.PATHWAY_LEVEL3,EEmbeddingID.PATHWAY_LEVEL4),pathwayRow,Float.NaN,info);
  pathwayLayout.addColumn(info.window);
  int rendererID=info.embeddingIDToRendererIDs.get(EEmbeddingID.PATHWAY_LEVEL1).get(0);
  if (info.multiFormRenderer.getActiveRendererID() != rendererID) {
    info.multiFormRenderer.setActive(rendererID);
  }
  lastUsedLevel1Renderer=info.multiFormRenderer;
  lastUsedRenderer=info.multiFormRenderer;
  pathwayInfos.add(info);
}","public void addPathway(PathwayGraph pathway){
  if (tablePerspectives.size() <= 0)   return;
  PathwayDataDomain pathwayDataDomain=(PathwayDataDomain)DataDomainManager.get().getDataDomainByType(PathwayDataDomain.DATA_DOMAIN_TYPE);
  TablePerspective tablePerspective=tablePerspectives.get(0);
  Perspective oldRecordPerspective=tablePerspective.getRecordPerspective();
  Perspective newRecordPerspective=new Perspective(tablePerspective.getDataDomain(),oldRecordPerspective.getIdType());
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  data.setData(oldRecordPerspective.getVirtualArray());
  newRecordPerspective.init(data);
  Perspective oldDimensionPerspective=tablePerspective.getDimensionPerspective();
  Perspective newDimensionPerspective=new Perspective(tablePerspective.getDataDomain(),oldDimensionPerspective.getIdType());
  data=new PerspectiveInitializationData();
  data.setData(oldDimensionPerspective.getVirtualArray());
  newDimensionPerspective.init(data);
  PathwayTablePerspective pathwayTablePerspective=new PathwayTablePerspective(tablePerspective.getDataDomain(),pathwayDataDomain,newRecordPerspective,newDimensionPerspective,pathway);
  pathwayDataDomain.addTablePerspective(pathwayTablePerspective);
  List<TablePerspective> pathwayTablePerspectives=new ArrayList<>(1);
  pathwayTablePerspectives.add(pathwayTablePerspective);
  PathwayMultiFormInfo info=new PathwayMultiFormInfo();
  info.pathway=pathway;
  info.age=currentPathwayAge--;
  createMultiformRenderer(pathwayTablePerspectives,EnumSet.of(EEmbeddingID.PATHWAY_LEVEL1,EEmbeddingID.PATHWAY_LEVEL2,EEmbeddingID.PATHWAY_LEVEL3,EEmbeddingID.PATHWAY_LEVEL4),pathwayRow,Float.NaN,info);
  pathwayLayout.addColumn(info.window);
  int rendererID=info.embeddingIDToRendererIDs.get(EEmbeddingID.PATHWAY_LEVEL1).get(0);
  if (info.multiFormRenderer.getActiveRendererID() != rendererID) {
    info.multiFormRenderer.setActive(rendererID);
  }
  lastUsedLevel1Renderer=info.multiFormRenderer;
  lastUsedRenderer=info.multiFormRenderer;
  pathwayInfos.add(info);
  wasPathwayAdded=true;
}",0.9942140790742526
57236,"@Override public void display(GL2 gl){
  boolean updateAugmentation=false;
  if (isLayoutDirty)   updateAugmentation=true;
  super.display(gl);
  if (updateAugmentation)   updatePathLinks();
}","@Override public void display(GL2 gl){
  boolean updateAugmentation=false;
  if (isLayoutDirty)   updateAugmentation=true;
  super.display(gl);
  if (wasPathwayAdded) {
    EnablePathSelectionEvent event=new EnablePathSelectionEvent(isPathSelectionMode);
    event.setEventSpace(pathEventSpace);
    eventPublisher.triggerEvent(event);
    wasPathwayAdded=false;
  }
  if (updateAugmentation)   updatePathLinks();
}",0.6128500823723229
57237,"/** 
 * <p> Calculates the average and the standard deviation for the values of one dimension or record in the data table. Whether the average is calculated for the column or row is determined by the type of the   {@link VirtualArray}. </p> <p> The objectID has to be of the ""opposing"" type, i.e., if the virtualArray is of type   {@link VirtualArray}, the id has to be a dimension id. </p> <p> The std-dev is calculated in the same loop as the average, according to <a href=""http://www.strchr.com/standard_deviation_in_one_pass"">this blog.</a>. The problems of this method discussed there doesn not apply here since we use only values between 0 and 1.} </p>
 * @param virtualArray
 * @param table
 * @param objectID
 * @return
 */
public static Average calculateAverage(VirtualArray virtualArray,Table table,IDType objectIDType,Integer objectID){
  Average averageDimension=new Average();
  double sumOfValues=0;
  double sqrSum=0;
  int nrValidValues=0;
  ATableBasedDataDomain dataDomain=table.getDataDomain();
  IDType virtualArrayIDType=virtualArray.getIdType();
  IDType resolvedVAIDType=dataDomain.getPrimaryIDType(virtualArrayIDType);
  IDType resolvedObjectIDType=dataDomain.getPrimaryIDType(objectIDType);
  if (!resolvedVAIDType.equals(virtualArrayIDType)) {
    PerspectiveInitializationData data=new PerspectiveInitializationData();
    data.setData(virtualArray);
    Perspective tempPerspective=new Perspective(dataDomain,virtualArrayIDType);
    tempPerspective.init(data);
    virtualArray=dataDomain.convertForeignPerspective(tempPerspective).getVirtualArray();
  }
  Collection<Integer> ids;
  if (!resolvedObjectIDType.equals(objectIDType)) {
    ids=IDMappingManagerRegistry.get().getIDMappingManager(objectIDType).getID(objectIDType,resolvedObjectIDType,objectID);
  }
 else {
    ids=new ArrayList<Integer>(1);
    ids.add(objectID);
  }
  if (ids == null)   return null;
  for (  Integer virtualArrayID : virtualArray) {
    Float value;
    for (    Integer id : ids) {
      value=table.getDataDomain().getNormalizedValue(resolvedObjectIDType,id,resolvedVAIDType,virtualArrayID);
      if (value != null && !value.isNaN()) {
        sumOfValues+=value;
        sqrSum+=Math.pow(value,2);
        nrValidValues++;
      }
    }
  }
  averageDimension.arithmeticMean=sumOfValues / nrValidValues;
  averageDimension.standardDeviation=Math.sqrt(sqrSum / nrValidValues - (Math.pow(averageDimension.arithmeticMean,2)));
  return averageDimension;
}","/** 
 * <p> Calculates the average and the standard deviation for the values of one dimension or record in the data table. Whether the average is calculated for the column or row is determined by the type of the   {@link VirtualArray}. </p> <p> The objectID has to be of the ""opposing"" type, i.e., if the virtualArray is of type   {@link VirtualArray}, the id has to be a dimension id. </p> <p> The std-dev is calculated in the same loop as the average, according to <a href=""http://www.strchr.com/standard_deviation_in_one_pass"">this blog.</a>. The problems of this method discussed there doesn not apply here since we use only values between 0 and 1.} </p>
 * @param virtualArray
 * @param table
 * @param objectID
 * @return
 */
public static Average calculateAverage(VirtualArray virtualArray,Table table,IDType objectIDType,Integer objectID){
  Average averageDimension=new Average();
  double sumOfValues=0;
  double sqrSum=0;
  int nrValidValues=0;
  ATableBasedDataDomain dataDomain=table.getDataDomain();
  IDType virtualArrayIDType=virtualArray.getIdType();
  IDType resolvedVAIDType=dataDomain.getPrimaryIDType(virtualArrayIDType);
  IDType resolvedObjectIDType=dataDomain.getPrimaryIDType(objectIDType);
  if (!resolvedVAIDType.equals(virtualArrayIDType)) {
    PerspectiveInitializationData data=new PerspectiveInitializationData();
    data.setData(virtualArray);
    Perspective tempPerspective=new Perspective(dataDomain,virtualArrayIDType);
    tempPerspective.init(data);
    virtualArray=dataDomain.convertForeignPerspective(tempPerspective).getVirtualArray();
  }
  Collection<Integer> ids;
  if (!resolvedObjectIDType.equals(objectIDType)) {
    ids=IDMappingManagerRegistry.get().getIDMappingManager(objectIDType).getIDAsSet(objectIDType,resolvedObjectIDType,objectID);
  }
 else {
    ids=new ArrayList<Integer>(1);
    ids.add(objectID);
  }
  if (ids == null)   return null;
  for (  Integer virtualArrayID : virtualArray) {
    Float value;
    for (    Integer id : ids) {
      value=table.getDataDomain().getNormalizedValue(resolvedObjectIDType,id,resolvedVAIDType,virtualArrayID);
      if (value != null && !value.isNaN()) {
        sumOfValues+=value;
        sqrSum+=Math.pow(value,2);
        nrValidValues++;
      }
    }
  }
  averageDimension.arithmeticMean=sumOfValues / nrValidValues;
  averageDimension.standardDeviation=Math.sqrt(sqrSum / nrValidValues - (Math.pow(averageDimension.arithmeticMean,2)));
  return averageDimension;
}",0.9989880590973488
57238,"/** 
 * Returns all elements that are in a specific selection type
 * @param sSelectionType
 * @return the elements in the type. Null if the type does not exist yet or if no elements are contained for thistype. Note that no normal types are contained at any time.
 */
public synchronized Set<Integer> getElements(SelectionType selectionType){
  if (hashSelectionTypes.containsKey(selectionType))   return hashSelectionTypes.get(selectionType).keySet();
  return null;
}","/** 
 * Returns all elements that are in a specific selection type
 * @param sSelectionType
 * @return the elements in the type. Null if the type does not exist yet or if no elements are contained for thistype. Note that no normal types are contained at any time.
 */
public synchronized Set<Integer> getElements(SelectionType selectionType){
  if (hashSelectionTypes.containsKey(selectionType))   return new HashSet<>(hashSelectionTypes.get(selectionType).keySet());
  return null;
}",0.9842602308499476
57239,"protected void renderAdapter(GLGraphics g,float w,float h){
  if (viewFrustum.getRight() != w || viewFrustum.getTop() != h) {
    viewFrustum.setRight(w);
    viewFrustum.setTop(h);
    layout.updateLayout();
  }
  g.save();
  final GL2 gl=g.gl;
  gl.glTranslatef(0,0,g.z());
  gl.glTranslatef(0,h,0);
  gl.glScalef(1,-1,1);
  g.checkError();
  layout.render(gl);
  g.checkError();
  g.restore();
}","protected void renderAdapter(GLGraphics g,float w,float h){
  if (viewFrustum.getRight() != w || viewFrustum.getTop() != h) {
    viewFrustum.setRight(w);
    viewFrustum.setTop(h);
    layout.updateLayout();
  }
  g.save();
  final GL2 gl=g.gl;
  gl.glTranslatef(0,h,g.z());
  gl.glScalef(1,-1,1);
  g.checkError();
  layout.render(gl);
  g.checkError();
  g.restore();
}",0.9636363636363636
57240,"public void removeDataDomain(ATableBasedDataDomain dd){
  if (!hashDDToTablePerspective.containsKey(dd))   return;
  AEvent event=new RemoveTablePerspectiveEvent(hashDDToTablePerspective.get(dd));
  event.setEventSpace(eventSpace);
  event.setSender(this);
  EventPublisher.publishEvent(event);
  hashDDToTablePerspective.remove(dd);
  mappedTablePerspectives.remove(dd);
}","public void removeDataDomain(ATableBasedDataDomain dd){
  if (!hashDDToTablePerspective.containsKey(dd))   return;
  AEvent event=new RemoveTablePerspectiveEvent(hashDDToTablePerspective.get(dd));
  event.setEventSpace(eventSpace);
  event.setSender(this);
  EventPublisher.publishEvent(event);
  mappedTablePerspectives.remove(hashDDToTablePerspective.get(dd));
  hashDDToTablePerspective.remove(dd);
}",0.8015463917525774
57241,"private void addPerspectiveElements(GLElementContainer stratElements){
  stratElements.add(new GLElement(){
    @Override protected void renderImpl(    GLGraphics g,    float w,    float h){
      g.drawText(""String_Node_Str"",0,-2,w,h);
    }
  }
.setSize(100,15));
  ATableBasedDataDomain mRNAdd=null;
  for (  ATableBasedDataDomain dd : DataDomainManager.get().getDataDomainsByType(ATableBasedDataDomain.class)) {
    if (dd.getLabel().equals(""String_Node_Str"")) {
      mRNAdd=dd;
      break;
    }
  }
  if (mRNAdd == null)   return;
  RadioController radio=new RadioController(this);
  for (  String recordPerspectiveIDs : mRNAdd.getRecordPerspectiveIDs()) {
    PerspectiveElement perspective=new PerspectiveElement(mRNAdd.getTable().getRecordPerspective(recordPerspectiveIDs),dmState);
    stratElements.add(perspective);
    radio.add(perspective);
  }
  dmState.setPerspective(mRNAdd.getTable().getDefaultRecordPerspective());
  dmState.addDataDomain(mRNAdd);
}","private void addPerspectiveElements(GLElementContainer stratElements){
  stratElements.add(new GLElement(){
    @Override protected void renderImpl(    GLGraphics g,    float w,    float h){
      g.drawText(""String_Node_Str"",0,-2,w,h);
    }
  }
.setSize(100,15));
  ATableBasedDataDomain mRNAdd=null;
  for (  ATableBasedDataDomain dd : DataDomainManager.get().getDataDomainsByType(ATableBasedDataDomain.class)) {
    if (dd.getLabel().equals(""String_Node_Str"")) {
      mRNAdd=dd;
      break;
    }
  }
  if (mRNAdd == null)   return;
  RadioController radio=new RadioController(this);
  for (  String recordPerspectiveIDs : mRNAdd.getRecordPerspectiveIDs()) {
    PerspectiveElement perspective=new PerspectiveElement(mRNAdd.getTable().getRecordPerspective(recordPerspectiveIDs),dmState);
    stratElements.add(perspective);
    radio.add(perspective);
  }
  dmState.setPerspective(mRNAdd.getTable().getDefaultRecordPerspective());
}",0.9827134625458356
57242,"/** 
 * @param initializer
 */
public AContentPreviewRenderer(int davidID,TablePerspective tablePerspective,EventBasedSelectionManager geneSelectionManager,EventBasedSelectionManager sampleSelectionManager){
  this.tablePerspective=tablePerspective;
  this.davidID=davidID;
  this.geneSelectionManager=geneSelectionManager;
  this.sampleSelectionManager=sampleSelectionManager;
  dataDomain=(GeneticDataDomain)tablePerspective.getDataDomain();
  if (dataDomain.isGeneRecord()) {
    experimentPerspective=tablePerspective.getDimensionPerspective();
  }
 else {
    experimentPerspective=tablePerspective.getRecordPerspective();
  }
  IDType geneIDTYpe=dataDomain.getGeneIDType();
  Set<Integer> geneIDs=dataDomain.getGeneIDMappingManager().getIDAsSet(IDType.getIDType(""String_Node_Str""),geneIDTYpe,davidID);
  if (geneIDs == null) {
    geneID=null;
  }
 else {
    geneID=geneIDs.iterator().next();
    if (geneIDs.size() > 1) {
      Set<String> names=dataDomain.getGeneIDMappingManager().getIDAsSet(IDType.getIDType(""String_Node_Str""),IDCategory.getIDCategory(EGeneIDTypes.GENE.name()).getHumanReadableIDType(),davidID);
      System.out.println(""String_Node_Str"" + names + ""String_Node_Str""+ geneIDs);
    }
  }
}","public AContentPreviewRenderer(int rowID,TablePerspective tablePerspective,EventBasedSelectionManager geneSelectionManager,EventBasedSelectionManager sampleSelectionManager){
  this.tablePerspective=tablePerspective;
  this.rowID=rowID;
  this.rowIDType=IDType.getIDType(""String_Node_Str"");
  this.geneSelectionManager=geneSelectionManager;
  this.sampleSelectionManager=sampleSelectionManager;
  dataDomain=(GeneticDataDomain)tablePerspective.getDataDomain();
  if (dataDomain.isGeneRecord()) {
    experimentPerspective=tablePerspective.getDimensionPerspective();
  }
 else {
    experimentPerspective=tablePerspective.getRecordPerspective();
  }
  resolvedRowIDType=dataDomain.getGeneIDType();
  Set<Integer> geneIDs=dataDomain.getGeneIDMappingManager().getIDAsSet(rowIDType,resolvedRowIDType,rowID);
  if (geneIDs == null) {
    resolvedRowID=null;
  }
 else {
    resolvedRowID=geneIDs.iterator().next();
    if (geneIDs.size() > 1) {
      Set<String> names=dataDomain.getGeneIDMappingManager().getIDAsSet(rowIDType,IDCategory.getIDCategory(EGeneIDTypes.GENE.name()).getHumanReadableIDType(),rowID);
      System.out.println(""String_Node_Str"" + names + ""String_Node_Str""+ geneIDs);
    }
  }
}",0.5397350993377483
57243,"@Override public void renderContent(GL2 gl){
  if (geneID == null)   return;
  List<SelectionType> geneSelectionTypes=geneSelectionManager.getSelectionTypes(davidID);
  List<List<SelectionType>> selectionLists=new ArrayList<List<SelectionType>>();
  selectionLists.add(geneSelectionTypes);
  for (  Integer sampleID : experimentPerspective.getVirtualArray()) {
    selectionLists.add(sampleSelectionManager.getSelectionTypes(experimentPerspective.getIdType(),sampleID));
  }
  int bucketCount=0;
  int sumValues=0;
  for (int i=0; i < histogram.size(); i++) {
    sumValues+=histogram.get(i);
  }
  float step=0;
  if (sumValues != 0)   step=0.85f * y / sumValues;
  float currentPositionY=0;
  for (int bucketNumber=0; bucketNumber < histogram.size(); bucketNumber++) {
    float[] baseColor=dataDomain.getColorMapper().getColor((float)bucketCount / (histogram.size() - 1));
    colorCalculator.setBaseColor(new Color(baseColor[0],baseColor[1],baseColor[2]));
    float currentBarHeight=histogram.get(bucketNumber) * step;
    colorCalculator.calculateColors(Algorithms.mergeListsToUniqueList(selectionLists));
    float[] topBarColor=colorCalculator.getPrimaryColor().getRGBA();
    float[] bottomBarColor=colorCalculator.getSecondaryColor().getRGBA();
    gl.glBegin(GL2.GL_QUADS);
    gl.glColor3fv(topBarColor,0);
    gl.glVertex3f(0,currentPositionY,z);
    gl.glColor3fv(bottomBarColor,0);
    gl.glVertex3d(x,currentPositionY,z);
    gl.glColor3f(bottomBarColor[0] * 0.9f,bottomBarColor[1] * 0.9f,bottomBarColor[2] * 0.9f);
    gl.glVertex3d(x,currentPositionY + currentBarHeight,z);
    gl.glColor3f(topBarColor[0] * 0.9f,topBarColor[1] * 0.9f,topBarColor[2] * 0.9f);
    gl.glVertex3d(0,currentPositionY + currentBarHeight,z);
    gl.glEnd();
    gl.glColor3f(0.2f,0.2f,0.2f);
    gl.glLineWidth(0.1f);
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,currentPositionY,z);
    gl.glVertex3d(x,currentPositionY,z);
    gl.glVertex3d(x,currentPositionY + currentBarHeight,z);
    gl.glVertex3d(0,currentPositionY + currentBarHeight,z);
    gl.glEnd();
    currentPositionY+=currentBarHeight;
    bucketCount++;
  }
}","@Override public void renderContent(GL2 gl){
  if (resolvedRowID == null)   return;
  List<SelectionType> geneSelectionTypes=geneSelectionManager.getSelectionTypes(rowID);
  List<List<SelectionType>> selectionLists=new ArrayList<List<SelectionType>>();
  selectionLists.add(geneSelectionTypes);
  for (  Integer sampleID : experimentPerspective.getVirtualArray()) {
    selectionLists.add(sampleSelectionManager.getSelectionTypes(experimentPerspective.getIdType(),sampleID));
  }
  int bucketCount=0;
  int sumValues=0;
  for (int i=0; i < histogram.size(); i++) {
    sumValues+=histogram.get(i);
  }
  float step=0;
  if (sumValues != 0)   step=0.85f * y / sumValues;
  float currentPositionY=0;
  for (int bucketNumber=0; bucketNumber < histogram.size(); bucketNumber++) {
    float[] baseColor=dataDomain.getColorMapper().getColor((float)bucketCount / (histogram.size() - 1));
    colorCalculator.setBaseColor(new Color(baseColor[0],baseColor[1],baseColor[2]));
    float currentBarHeight=histogram.get(bucketNumber) * step;
    colorCalculator.calculateColors(Algorithms.mergeListsToUniqueList(selectionLists));
    float[] topBarColor=colorCalculator.getPrimaryColor().getRGBA();
    float[] bottomBarColor=colorCalculator.getSecondaryColor().getRGBA();
    gl.glBegin(GL2.GL_QUADS);
    gl.glColor3fv(topBarColor,0);
    gl.glVertex3f(0,currentPositionY,z);
    gl.glColor3fv(bottomBarColor,0);
    gl.glVertex3d(x,currentPositionY,z);
    gl.glColor3f(bottomBarColor[0] * 0.9f,bottomBarColor[1] * 0.9f,bottomBarColor[2] * 0.9f);
    gl.glVertex3d(x,currentPositionY + currentBarHeight,z);
    gl.glColor3f(topBarColor[0] * 0.9f,topBarColor[1] * 0.9f,topBarColor[2] * 0.9f);
    gl.glVertex3d(0,currentPositionY + currentBarHeight,z);
    gl.glEnd();
    gl.glColor3f(0.2f,0.2f,0.2f);
    gl.glLineWidth(0.1f);
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,currentPositionY,z);
    gl.glVertex3d(x,currentPositionY,z);
    gl.glVertex3d(x,currentPositionY + currentBarHeight,z);
    gl.glVertex3d(0,currentPositionY + currentBarHeight,z);
    gl.glEnd();
    currentPositionY+=currentBarHeight;
    bucketCount++;
  }
}",0.9946022060549168
57244,"/** 
 * @param initializor
 */
public CategoricalContentPreviewRenderer(int davidID,TablePerspective tablePerspective,EventBasedSelectionManager geneSelectionManager,EventBasedSelectionManager sampleSelectionManager){
  super(davidID,tablePerspective,geneSelectionManager,sampleSelectionManager);
  if (geneID == null)   return;
  VirtualArray geneVA=new VirtualArray(dataDomain.getGeneIDType());
  geneVA.append(geneID);
  histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),experimentPerspective.getVirtualArray(),geneVA,dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"") ? 5 : 2);
}","/** 
 * @param initializor
 */
public CategoricalContentPreviewRenderer(int davidID,TablePerspective tablePerspective,EventBasedSelectionManager geneSelectionManager,EventBasedSelectionManager sampleSelectionManager){
  super(davidID,tablePerspective,geneSelectionManager,sampleSelectionManager);
  if (resolvedRowID == null)   return;
  VirtualArray geneVA=new VirtualArray(dataDomain.getGeneIDType());
  geneVA.append(resolvedRowID);
  histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),experimentPerspective.getVirtualArray(),geneVA,dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"") ? 5 : 2);
}",0.9762282091917592
57245,"/** 
 * @param initializer
 */
public ContinuousContentPreviewRenderer(int davidID,TablePerspective tablePerspective,EventBasedSelectionManager geneSelectionManager,EventBasedSelectionManager sampleSelectionManager){
  super(davidID,tablePerspective,geneSelectionManager,sampleSelectionManager);
  colorCalculator.setBaseColor(new Color(MappedDataRenderer.SUMMARY_BAR_COLOR));
  if (geneID == null)   return;
  average=TablePerspectiveStatistics.calculateAverage(experimentPerspective.getVirtualArray(),dataDomain.getTable(),IDType.getIDType(""String_Node_Str""),geneID);
}","/** 
 * @param initializer
 */
public ContinuousContentPreviewRenderer(int rowID,TablePerspective tablePerspective,EventBasedSelectionManager geneSelectionManager,EventBasedSelectionManager sampleSelectionManager){
  super(rowID,tablePerspective,geneSelectionManager,sampleSelectionManager);
  colorCalculator.setBaseColor(new Color(MappedDataRenderer.SUMMARY_BAR_COLOR));
  if (resolvedRowID == null)   return;
  average=TablePerspectiveStatistics.calculateAverage(experimentPerspective.getVirtualArray(),dataDomain.getTable(),resolvedRowIDType,resolvedRowID);
}",0.9223985890652556
57246,"@Override public void renderContent(GL2 gl){
  if (geneID == null || average == null)   return;
  List<SelectionType> geneSelectionTypes=geneSelectionManager.getSelectionTypes(davidID);
  List<List<SelectionType>> selectionLists=new ArrayList<List<SelectionType>>();
  selectionLists.add(geneSelectionTypes);
  for (  Integer sampleID : experimentPerspective.getVirtualArray()) {
    selectionLists.add(sampleSelectionManager.getSelectionTypes(experimentPerspective.getIdType(),sampleID));
  }
  colorCalculator.calculateColors(Algorithms.mergeListsToUniqueList(selectionLists));
  float[] topBarColor=colorCalculator.getPrimaryColor().getRGBA();
  float[] bottomBarColor=colorCalculator.getSecondaryColor().getRGBA();
  float[] color=MappedDataRenderer.EVEN_BACKGROUND_COLOR;
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4fv(color,0);
  gl.glVertex3f(0,0,z);
  gl.glVertex3f(x,0,z);
  gl.glVertex3d(x,0.8f * y,z);
  gl.glVertex3d(0,0.8f * y,z);
  gl.glEnd();
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,0,z);
  gl.glVertex3f(x,0,z);
  gl.glVertex3d(x,0.8f * y,z);
  gl.glVertex3d(0,0.8f * y,z);
  gl.glEnd();
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4fv(topBarColor,0);
  gl.glVertex3f(0,0,z);
  gl.glColor4fv(bottomBarColor,0);
  gl.glVertex3f(x,0,z);
  gl.glColor3f(bottomBarColor[0] * 0.8f,bottomBarColor[1] * 0.8f,bottomBarColor[2] * 0.8f);
  gl.glVertex3d(x,average.getArithmeticMean() * 0.8f * y,z);
  gl.glColor3f(topBarColor[0] * 0.8f,topBarColor[1] * 0.8f,topBarColor[2] * 0.8f);
  gl.glVertex3d(0,average.getArithmeticMean() * 0.8f * y,z);
  gl.glEnd();
  gl.glColor3f(0.2f,0.2f,0.2f);
  gl.glLineWidth(0.1f);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,0,z);
  gl.glVertex3f(x,0,z);
  gl.glVertex3d(x,average.getArithmeticMean() * 0.8f * y,z);
  gl.glVertex3d(0,average.getArithmeticMean() * 0.8f * y,z);
  gl.glEnd();
}","@Override public void renderContent(GL2 gl){
  if (resolvedRowID == null || average == null)   return;
  List<SelectionType> geneSelectionTypes=geneSelectionManager.getSelectionTypes(rowID);
  List<List<SelectionType>> selectionLists=new ArrayList<List<SelectionType>>();
  selectionLists.add(geneSelectionTypes);
  for (  Integer sampleID : experimentPerspective.getVirtualArray()) {
    selectionLists.add(sampleSelectionManager.getSelectionTypes(experimentPerspective.getIdType(),sampleID));
  }
  colorCalculator.calculateColors(Algorithms.mergeListsToUniqueList(selectionLists));
  float[] topBarColor=colorCalculator.getPrimaryColor().getRGBA();
  float[] bottomBarColor=colorCalculator.getSecondaryColor().getRGBA();
  float[] color=MappedDataRenderer.EVEN_BACKGROUND_COLOR;
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4fv(color,0);
  gl.glVertex3f(0,0,z);
  gl.glVertex3f(x,0,z);
  gl.glVertex3d(x,0.8f * y,z);
  gl.glVertex3d(0,0.8f * y,z);
  gl.glEnd();
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,0,z);
  gl.glVertex3f(x,0,z);
  gl.glVertex3d(x,0.8f * y,z);
  gl.glVertex3d(0,0.8f * y,z);
  gl.glEnd();
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4fv(topBarColor,0);
  gl.glVertex3f(0,0,z);
  gl.glColor4fv(bottomBarColor,0);
  gl.glVertex3f(x,0,z);
  gl.glColor3f(bottomBarColor[0] * 0.8f,bottomBarColor[1] * 0.8f,bottomBarColor[2] * 0.8f);
  gl.glVertex3d(x,average.getArithmeticMean() * 0.8f * y,z);
  gl.glColor3f(topBarColor[0] * 0.8f,topBarColor[1] * 0.8f,topBarColor[2] * 0.8f);
  gl.glVertex3d(0,average.getArithmeticMean() * 0.8f * y,z);
  gl.glEnd();
  gl.glColor3f(0.2f,0.2f,0.2f);
  gl.glLineWidth(0.1f);
  gl.glBegin(GL.GL_LINE_LOOP);
  gl.glVertex3f(0,0,z);
  gl.glVertex3f(x,0,z);
  gl.glVertex3d(x,average.getArithmeticMean() * 0.8f * y,z);
  gl.glVertex3d(0,average.getArithmeticMean() * 0.8f * y,z);
  gl.glEnd();
}",0.9937449007342942
57247,"@SuppressWarnings(""String_Node_Str"") @Override protected void renderAllBars(GL2 gl,List<SelectionType> geneSelectionTypes){
  if (x / columnPerspective.getVirtualArray().size() < parentView.getPixelGLConverter().getGLWidthForPixelWidth(3)) {
    useShading=false;
  }
  float xIncrement=x / columnPerspective.getVirtualArray().size();
  int experimentCount=0;
  gl.glColor3f(0,0,0);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(0,0.5f * y,z);
  gl.glVertex3f(x,0.5f * y,z);
  gl.glEnd();
  for (  Integer columnID : columnPerspective.getVirtualArray()) {
    float value;
    if (rowID != null) {
      value=dataDomain.getNormalizedValue(rowIDType,rowID,columnIDType,columnID);
      if (value < 0.5001 && value > 0.499) {
        experimentCount++;
        continue;
      }
      List<SelectionType> experimentSelectionTypes=parent.sampleSelectionManager.getSelectionTypes(columnIDType,columnID);
      float[] baseColor=dataDomain.getColorMapper().getColor(value);
      float[] topBarColor=baseColor;
      float[] bottomBarColor=baseColor;
      colorCalculator.calculateColors(Algorithms.mergeListsToUniqueList(experimentSelectionTypes,geneSelectionTypes));
      List<SelectionType> selectionTypes=Algorithms.mergeListsToUniqueList(experimentSelectionTypes,geneSelectionTypes);
      if (isHighlightMode && !(selectionTypes.contains(SelectionType.MOUSE_OVER) || selectionTypes.contains(SelectionType.SELECTION))) {
        experimentCount++;
        continue;
      }
      if (isHighlightMode) {
        colorCalculator.setBaseColor(new Color(baseColor[0],baseColor[1],baseColor[2]));
        colorCalculator.calculateColors(selectionTypes);
        topBarColor=colorCalculator.getPrimaryColor().getRGB();
        bottomBarColor=colorCalculator.getSecondaryColor().getRGB();
      }
      float leftEdge=xIncrement * experimentCount;
      float upperEdge=value * y;
      Integer resolvedColumnID=columnIDMappingManager.getID(dataDomain.getPrimaryIDType(columnIDType),parent.sampleIDType,columnID);
      gl.glPushName(parentView.getPickingManager().getPickingID(parentView.getID(),EPickingType.SAMPLE.name(),resolvedColumnID));
      gl.glColor3fv(bottomBarColor,0);
      gl.glBegin(GL2.GL_QUADS);
      gl.glVertex3f(leftEdge,0.5f * y,z);
      if (useShading) {
        gl.glColor3f(bottomBarColor[0] * 0.9f,bottomBarColor[1] * 0.9f,bottomBarColor[2] * 0.9f);
      }
      gl.glVertex3f(leftEdge + xIncrement,0.5f * y,z);
      if (useShading) {
        gl.glColor3f(topBarColor[0] * 0.9f,topBarColor[1] * 0.9f,topBarColor[2] * 0.9f);
      }
 else {
        gl.glColor3fv(topBarColor,0);
      }
      gl.glVertex3f(leftEdge + xIncrement,upperEdge,z);
      gl.glColor3fv(topBarColor,0);
      gl.glVertex3f(leftEdge,upperEdge,z);
      gl.glEnd();
      gl.glPopName();
      experimentCount++;
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void renderAllBars(GL2 gl,List<SelectionType> geneSelectionTypes){
  if (x / columnPerspective.getVirtualArray().size() < parentView.getPixelGLConverter().getGLWidthForPixelWidth(3)) {
    useShading=false;
  }
  float xIncrement=x / columnPerspective.getVirtualArray().size();
  int experimentCount=0;
  gl.glColor3f(0,0,0);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(0,0.5f * y,z);
  gl.glVertex3f(x,0.5f * y,z);
  gl.glEnd();
  for (  Integer columnID : columnPerspective.getVirtualArray()) {
    float value;
    if (rowID != null) {
      value=dataDomain.getNormalizedValue(resolvedRowIDType,resolvedRowID,resolvedColumnIDType,columnID);
      if (value < 0.5001 && value > 0.499) {
        experimentCount++;
        continue;
      }
      List<SelectionType> experimentSelectionTypes=parent.sampleSelectionManager.getSelectionTypes(columnIDType,columnID);
      float[] baseColor=dataDomain.getColorMapper().getColor(value);
      float[] topBarColor=baseColor;
      float[] bottomBarColor=baseColor;
      colorCalculator.calculateColors(Algorithms.mergeListsToUniqueList(experimentSelectionTypes,geneSelectionTypes));
      List<SelectionType> selectionTypes=Algorithms.mergeListsToUniqueList(experimentSelectionTypes,geneSelectionTypes);
      if (isHighlightMode && !(selectionTypes.contains(SelectionType.MOUSE_OVER) || selectionTypes.contains(SelectionType.SELECTION))) {
        experimentCount++;
        continue;
      }
      if (isHighlightMode) {
        colorCalculator.setBaseColor(new Color(baseColor[0],baseColor[1],baseColor[2]));
        colorCalculator.calculateColors(selectionTypes);
        topBarColor=colorCalculator.getPrimaryColor().getRGB();
        bottomBarColor=colorCalculator.getSecondaryColor().getRGB();
      }
      float leftEdge=xIncrement * experimentCount;
      float upperEdge=value * y;
      Integer resolvedColumnID=columnIDMappingManager.getID(dataDomain.getPrimaryIDType(columnIDType),parent.sampleIDType,columnID);
      gl.glPushName(parentView.getPickingManager().getPickingID(parentView.getID(),EPickingType.SAMPLE.name(),resolvedColumnID));
      gl.glColor3fv(bottomBarColor,0);
      gl.glBegin(GL2.GL_QUADS);
      gl.glVertex3f(leftEdge,0.5f * y,z);
      if (useShading) {
        gl.glColor3f(bottomBarColor[0] * 0.9f,bottomBarColor[1] * 0.9f,bottomBarColor[2] * 0.9f);
      }
      gl.glVertex3f(leftEdge + xIncrement,0.5f * y,z);
      if (useShading) {
        gl.glColor3f(topBarColor[0] * 0.9f,topBarColor[1] * 0.9f,topBarColor[2] * 0.9f);
      }
 else {
        gl.glColor3fv(topBarColor,0);
      }
      gl.glVertex3f(leftEdge + xIncrement,upperEdge,z);
      gl.glColor3fv(topBarColor,0);
      gl.glVertex3f(leftEdge,upperEdge,z);
      gl.glEnd();
      gl.glPopName();
      experimentCount++;
    }
  }
}",0.9954112248499823
57248,"@Override public void init(){
  if (rowID == null)   return;
  VirtualArray dimensionVirtualArray=new VirtualArray(dataDomain.getPrimaryIDType(rowIDType));
  dimensionVirtualArray.append(rowID);
  histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),columnPerspective.getVirtualArray(),dimensionVirtualArray,5);
  registerPickingListener();
}","@Override public void init(){
  if (resolvedRowID == null)   return;
  VirtualArray dimensionVirtualArray=new VirtualArray(resolvedRowIDType);
  dimensionVirtualArray.append(resolvedRowID);
  histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),columnPerspective.getVirtualArray(),dimensionVirtualArray,5);
  registerPickingListener();
}",0.9245541838134432
57249,"/** 
 * Constructor
 * @param textRenderer the <code>CaleydoTextRenderer</code> of the parent GL view
 * @param pixelGLConverter the <code>PixelGLConverter</code> of the parent GL view
 * @param davidID the id used for the resolution of the human readable id type that is rendered
 * @param backgroundColor RGBA value of the background color.
 */
public RowCaptionRenderer(Integer davidID,AGLView parentView,MappedDataRenderer parent,float[] backgroundColor){
  super(parentView,new Color(backgroundColor));
  this.davidID=davidID;
  this.parent=parent;
  textRenderer=parentView.getTextRenderer();
  pixelGLConverter=parentView.getPixelGLConverter();
}","/** 
 * Constructor
 * @param textRenderer the <code>CaleydoTextRenderer</code> of the parent GL view
 * @param pixelGLConverter the <code>PixelGLConverter</code> of the parent GL view
 * @param rowID the id used for the resolution of the human readable id type that is rendered
 * @param backgroundColor RGBA value of the background color.
 */
public RowCaptionRenderer(Integer davidID,AGLView parentView,MappedDataRenderer parent,float[] backgroundColor){
  super(parentView,new Color(backgroundColor));
  this.davidID=davidID;
  this.parent=parent;
  textRenderer=parentView.getTextRenderer();
  pixelGLConverter=parentView.getPixelGLConverter();
}",0.9938650306748468
57250,"private void calcMinWidthPixels(){
  minWidthPixels=0;
  for (int i=0; i < geneTablePerspectives.size(); i++) {
    TablePerspective tablePerspective=geneTablePerspectives.get(i);
    Perspective experimentPerspective;
    GeneticDataDomain dataDomain=(GeneticDataDomain)tablePerspective.getDataDomain();
    Group group=null;
    if (dataDomain.isGeneRecord()) {
      experimentPerspective=tablePerspective.getDimensionPerspective();
      group=tablePerspective.getDimensionGroup();
    }
 else {
      experimentPerspective=tablePerspective.getRecordPerspective();
      group=tablePerspective.getRecordGroup();
    }
    if (sampleGroupSelectionManager.checkStatus(abstractGroupType,group.getID())) {
      minWidthPixels+=ABSTRACT_GROUP_PIXEL_WIDTH;
    }
 else {
      minWidthPixels+=experimentPerspective.getVirtualArray().size() * MIN_SAMPLE_PIXEL_WIDTH;
    }
  }
  minWidthPixels+=(geneTablePerspectives.size() - 1) * SPACING_PIXEL_WIDTH;
  minWidthPixels+=CAPTION_COLUMN_PIXEL_WIDTH;
}","private void calcMinWidthPixels(){
  minWidthPixels=0;
  for (int i=0; i < geneTablePerspectives.size(); i++) {
    TablePerspective tablePerspective=geneTablePerspectives.get(i);
    Perspective experimentPerspective;
    GeneticDataDomain dataDomain=(GeneticDataDomain)tablePerspective.getDataDomain();
    Group group=null;
    if (dataDomain.isGeneRecord()) {
      experimentPerspective=tablePerspective.getDimensionPerspective();
      group=tablePerspective.getDimensionGroup();
    }
 else {
      experimentPerspective=tablePerspective.getRecordPerspective();
      group=tablePerspective.getRecordGroup();
    }
    if (group == null)     continue;
    if (sampleGroupSelectionManager.checkStatus(abstractGroupType,group.getID())) {
      minWidthPixels+=ABSTRACT_GROUP_PIXEL_WIDTH;
    }
 else {
      minWidthPixels+=experimentPerspective.getVirtualArray().size() * MIN_SAMPLE_PIXEL_WIDTH;
    }
  }
  minWidthPixels+=(geneTablePerspectives.size() - 1) * SPACING_PIXEL_WIDTH;
  minWidthPixels+=CAPTION_COLUMN_PIXEL_WIDTH;
}",0.9818002951303492
57251,"@Override public void setLimits(float x,float y){
  super.setLimits(x,y);
  PixelGLConverter pixelGLConverter=view.getPixelGLConverter();
  ViewFrustum viewFrustum=view.getViewFrustum();
  if (viewFrustum == null) {
    viewFrustum=new ViewFrustum();
    viewFrustum.setProjectionMode(CameraProjectionMode.ORTHOGRAPHIC);
  }
  viewFrustum.setLeft(0);
  viewFrustum.setBottom(0);
  viewFrustum.setRight(x);
  viewFrustum.setTop(y);
  view.setFrustum(viewFrustum);
  view.setDisplayListDirty();
}","@Override public void setLimits(float x,float y){
  if (Float.compare(this.x,x) == 0 && Float.compare(this.y,y) == 0)   return;
  super.setLimits(x,y);
  PixelGLConverter pixelGLConverter=view.getPixelGLConverter();
  ViewFrustum viewFrustum=view.getViewFrustum();
  if (viewFrustum == null) {
    viewFrustum=new ViewFrustum();
    viewFrustum.setProjectionMode(CameraProjectionMode.ORTHOGRAPHIC);
  }
  viewFrustum.setLeft(0);
  viewFrustum.setBottom(0);
  viewFrustum.setRight(x);
  viewFrustum.setTop(y);
  view.setFrustum(viewFrustum);
  view.setDisplayListDirty();
}",0.926829268292683
57252,"@Override protected void prepare(){
  updateStrategy.processEvents();
}","@Override protected void prepare(){
  updateStrategy.processEvents();
  if (isDisplayListDirty()) {
    updateLayout();
  }
}",0.7244897959183674
57253,"@Override protected void prepare(){
  processEvents();
  if (isDisplayListDirty()) {
    layout.updateLayout();
  }
}","@Override protected void prepare(){
  processEvents();
}",0.6473988439306358
57254,"@Override public boolean isDisplayListDirty(){
  if (super.isDisplayListDirty())   return true;
  for (  APathwayPathRenderer renderer : renderers.keySet()) {
    if (renderer.isDisplayListDirty())     return true;
  }
  return false;
}","@Override public boolean isDisplayListDirty(){
  for (  APathwayPathRenderer renderer : renderers.keySet()) {
    if (renderer.isDisplayListDirty())     return true;
  }
  return false;
}",0.8841607565011821
57255,"public static void renderEdge(GL2 gl,ALinearizableNode node1,ALinearizableNode node2,Vec3f node1ConnectionPoint,Vec3f node2ConnectionPoint,float zCoordinate,boolean isVerticalConnection,PixelGLConverter pixelGLConverter,CaleydoTextRenderer textRenderer,PathSizeConfiguration sizeConfig){
  List<PathwayVertexRep> node1VertexReps=node1.getVertexReps();
  List<PathwayVertexRep> node2VertexReps=node2.getVertexReps();
  PathwayGraph pathway=null;
  DefaultEdge edge=null;
  PathwayVertexRep vertexRep1=null;
  for (  PathwayVertexRep node1VertexRep : node1VertexReps) {
    for (    PathwayVertexRep node2VertexRep : node2VertexReps) {
      if (node1VertexRep.getPathway() == node2VertexRep.getPathway()) {
        pathway=node1VertexRep.getPathway();
        vertexRep1=node1VertexRep;
        edge=pathway.getEdge(node1VertexRep,node2VertexRep);
        if (edge == null) {
          edge=pathway.getEdge(node2VertexRep,node1VertexRep);
        }
        if (edge != null)         break;
      }
    }
    if (edge != null)     break;
  }
  if (edge == null || pathway == null || vertexRep1 == null)   return;
  ConnectionLineRenderer connectionRenderer=new ConnectionLineRenderer();
  List<Vec3f> linePoints=new ArrayList<Vec3f>();
  boolean isNode1Target=pathway.getEdgeTarget(edge) == vertexRep1;
  Vec3f sourceConnectionPoint=(isNode1Target) ? node2ConnectionPoint : node1ConnectionPoint;
  Vec3f targetConnectionPoint=(isNode1Target) ? node1ConnectionPoint : node2ConnectionPoint;
  sourceConnectionPoint.setZ(zCoordinate);
  targetConnectionPoint.setZ(zCoordinate);
  linePoints.add(sourceConnectionPoint);
  linePoints.add(targetConnectionPoint);
  if (edge instanceof PathwayReactionEdgeRep) {
    PathwayReactionEdgeRep reactionEdge=(PathwayReactionEdgeRep)edge;
    ClosedArrowRenderer arrowRenderer=new ClosedArrowRenderer(pixelGLConverter);
    LineEndArrowRenderer lineEndArrowRenderer=new LineEndArrowRenderer(false,arrowRenderer);
    connectionRenderer.addAttributeRenderer(lineEndArrowRenderer);
    if (reactionEdge.getType() == EPathwayReactionEdgeType.reversible) {
      arrowRenderer=new ClosedArrowRenderer(pixelGLConverter);
      lineEndArrowRenderer=new LineEndArrowRenderer(true,arrowRenderer);
      connectionRenderer.addAttributeRenderer(lineEndArrowRenderer);
    }
  }
 else {
    if (edge instanceof PathwayRelationEdgeRep) {
      PathwayRelationEdgeRep relationEdgeRep=(PathwayRelationEdgeRep)edge;
      ArrayList<EPathwayRelationEdgeSubType> subtypes=relationEdgeRep.getRelationSubTypes();
      float spacing=pixelGLConverter.getGLHeightForPixelHeight(3);
      for (      EPathwayRelationEdgeSubType subtype : subtypes) {
switch (subtype) {
case compound:
          break;
case hidden_compound:
        break;
case activation:
      connectionRenderer.addAttributeRenderer(createDefaultLineEndArrowRenderer(pixelGLConverter,sizeConfig));
    break;
case inhibition:
  connectionRenderer.addAttributeRenderer(createDefaultLineEndStaticLineRenderer(isVerticalConnection,pixelGLConverter,sizeConfig));
if (isVerticalConnection) {
  targetConnectionPoint.setY(targetConnectionPoint.y() + ((isNode1Target) ? -spacing : spacing));
}
 else {
  targetConnectionPoint.setX(targetConnectionPoint.x() + ((isNode1Target) ? spacing : -spacing));
}
break;
case expression:
connectionRenderer.addAttributeRenderer(createDefaultLineEndArrowRenderer(pixelGLConverter,sizeConfig));
if (vertexRep1.getType() == EPathwayVertexType.gene && vertexRep1.getType() == EPathwayVertexType.gene) {
connectionRenderer.addAttributeRenderer(createDefaultLabelOnLineRenderer(""String_Node_Str"",pixelGLConverter,textRenderer,sizeConfig));
}
break;
case repression:
connectionRenderer.addAttributeRenderer(createDefaultLineEndArrowRenderer(pixelGLConverter,sizeConfig));
connectionRenderer.addAttributeRenderer(createDefaultLineEndStaticLineRenderer(isVerticalConnection,pixelGLConverter,sizeConfig));
targetConnectionPoint.setY(targetConnectionPoint.y() + ((isNode1Target) ? -spacing : spacing));
break;
case indirect_effect:
connectionRenderer.addAttributeRenderer(createDefaultLineEndArrowRenderer(pixelGLConverter,sizeConfig));
connectionRenderer.setLineStippled(true);
break;
case state_change:
connectionRenderer.setLineStippled(true);
break;
case binding_association:
break;
case dissociation:
connectionRenderer.addAttributeRenderer(createDefaultOrthogonalLineCrossingRenderer(pixelGLConverter,sizeConfig));
break;
case missing_interaction:
connectionRenderer.addAttributeRenderer(createDefaultLineCrossingRenderer(pixelGLConverter,sizeConfig));
break;
case phosphorylation:
connectionRenderer.addAttributeRenderer(createDefaultLabelAboveLineRenderer(EPathwayRelationEdgeSubType.phosphorylation.getSymbol(),pixelGLConverter,textRenderer,sizeConfig));
break;
case dephosphorylation:
connectionRenderer.addAttributeRenderer(createDefaultLabelAboveLineRenderer(EPathwayRelationEdgeSubType.dephosphorylation.getSymbol(),pixelGLConverter,textRenderer,sizeConfig));
break;
case glycosylation:
connectionRenderer.addAttributeRenderer(createDefaultLabelAboveLineRenderer(EPathwayRelationEdgeSubType.glycosylation.getSymbol(),pixelGLConverter,textRenderer,sizeConfig));
break;
case ubiquitination:
connectionRenderer.addAttributeRenderer(createDefaultLabelAboveLineRenderer(EPathwayRelationEdgeSubType.ubiquitination.getSymbol(),pixelGLConverter,textRenderer,sizeConfig));
break;
case methylation:
connectionRenderer.addAttributeRenderer(createDefaultLabelAboveLineRenderer(EPathwayRelationEdgeSubType.methylation.getSymbol(),pixelGLConverter,textRenderer,sizeConfig));
break;
}
}
}
}
connectionRenderer.renderLine(gl,linePoints);
}","public static void renderEdge(GL2 gl,ALinearizableNode node1,ALinearizableNode node2,Vec3f node1ConnectionPoint,Vec3f node2ConnectionPoint,float zCoordinate,boolean isVerticalConnection,PixelGLConverter pixelGLConverter,CaleydoTextRenderer textRenderer,PathSizeConfiguration sizeConfig){
  List<PathwayVertexRep> node1VertexReps=node1.getVertexReps();
  List<PathwayVertexRep> node2VertexReps=node2.getVertexReps();
  PathwayGraph pathway=null;
  DefaultEdge edge=null;
  PathwayVertexRep vertexRep1=null;
  for (  PathwayVertexRep node1VertexRep : node1VertexReps) {
    for (    PathwayVertexRep node2VertexRep : node2VertexReps) {
      if (node1VertexRep.getPathway() == node2VertexRep.getPathway()) {
        pathway=node1VertexRep.getPathway();
        vertexRep1=node1VertexRep;
        edge=pathway.getEdge(node1VertexRep,node2VertexRep);
        if (edge == null) {
          edge=pathway.getEdge(node2VertexRep,node1VertexRep);
        }
        if (edge != null)         break;
      }
    }
    if (edge != null)     break;
  }
  if (edge == null || pathway == null || vertexRep1 == null)   return;
  ConnectionLineRenderer connectionRenderer=new ConnectionLineRenderer();
  List<Vec3f> linePoints=new ArrayList<Vec3f>();
  boolean isNode1Target=pathway.getEdgeTarget(edge) == vertexRep1;
  Vec3f sourceConnectionPoint=(isNode1Target) ? node2ConnectionPoint : node1ConnectionPoint;
  Vec3f targetConnectionPoint=(isNode1Target) ? node1ConnectionPoint : node2ConnectionPoint;
  sourceConnectionPoint.setZ(zCoordinate);
  targetConnectionPoint.setZ(zCoordinate);
  linePoints.add(sourceConnectionPoint);
  linePoints.add(targetConnectionPoint);
  if (edge instanceof PathwayReactionEdgeRep) {
    PathwayReactionEdgeRep reactionEdge=(PathwayReactionEdgeRep)edge;
    LineEndArrowRenderer lineEndArrowRenderer=createDefaultLineEndArrowRenderer(pixelGLConverter,sizeConfig);
    connectionRenderer.addAttributeRenderer(lineEndArrowRenderer);
    if (reactionEdge.getType() == EPathwayReactionEdgeType.reversible) {
      lineEndArrowRenderer=createDefaultLineEndArrowRenderer(pixelGLConverter,sizeConfig);
      connectionRenderer.addAttributeRenderer(lineEndArrowRenderer);
    }
  }
 else {
    if (edge instanceof PathwayRelationEdgeRep) {
      PathwayRelationEdgeRep relationEdgeRep=(PathwayRelationEdgeRep)edge;
      ArrayList<EPathwayRelationEdgeSubType> subtypes=relationEdgeRep.getRelationSubTypes();
      float spacing=pixelGLConverter.getGLHeightForPixelHeight(3);
      for (      EPathwayRelationEdgeSubType subtype : subtypes) {
switch (subtype) {
case compound:
          break;
case hidden_compound:
        break;
case activation:
      connectionRenderer.addAttributeRenderer(createDefaultLineEndArrowRenderer(pixelGLConverter,sizeConfig));
    break;
case inhibition:
  connectionRenderer.addAttributeRenderer(createDefaultLineEndStaticLineRenderer(isVerticalConnection,pixelGLConverter,sizeConfig));
if (isVerticalConnection) {
  targetConnectionPoint.setY(targetConnectionPoint.y() + ((isNode1Target) ? -spacing : spacing));
}
 else {
  targetConnectionPoint.setX(targetConnectionPoint.x() + ((isNode1Target) ? spacing : -spacing));
}
break;
case expression:
connectionRenderer.addAttributeRenderer(createDefaultLineEndArrowRenderer(pixelGLConverter,sizeConfig));
if (vertexRep1.getType() == EPathwayVertexType.gene && vertexRep1.getType() == EPathwayVertexType.gene) {
connectionRenderer.addAttributeRenderer(createDefaultLabelOnLineRenderer(""String_Node_Str"",pixelGLConverter,textRenderer,sizeConfig));
}
break;
case repression:
connectionRenderer.addAttributeRenderer(createDefaultLineEndArrowRenderer(pixelGLConverter,sizeConfig));
connectionRenderer.addAttributeRenderer(createDefaultLineEndStaticLineRenderer(isVerticalConnection,pixelGLConverter,sizeConfig));
targetConnectionPoint.setY(targetConnectionPoint.y() + ((isNode1Target) ? -spacing : spacing));
break;
case indirect_effect:
connectionRenderer.addAttributeRenderer(createDefaultLineEndArrowRenderer(pixelGLConverter,sizeConfig));
connectionRenderer.setLineStippled(true);
break;
case state_change:
connectionRenderer.setLineStippled(true);
break;
case binding_association:
break;
case dissociation:
connectionRenderer.addAttributeRenderer(createDefaultOrthogonalLineCrossingRenderer(pixelGLConverter,sizeConfig));
break;
case missing_interaction:
connectionRenderer.addAttributeRenderer(createDefaultLineCrossingRenderer(pixelGLConverter,sizeConfig));
break;
case phosphorylation:
connectionRenderer.addAttributeRenderer(createDefaultLabelAboveLineRenderer(EPathwayRelationEdgeSubType.phosphorylation.getSymbol(),pixelGLConverter,textRenderer,sizeConfig));
break;
case dephosphorylation:
connectionRenderer.addAttributeRenderer(createDefaultLabelAboveLineRenderer(EPathwayRelationEdgeSubType.dephosphorylation.getSymbol(),pixelGLConverter,textRenderer,sizeConfig));
break;
case glycosylation:
connectionRenderer.addAttributeRenderer(createDefaultLabelAboveLineRenderer(EPathwayRelationEdgeSubType.glycosylation.getSymbol(),pixelGLConverter,textRenderer,sizeConfig));
break;
case ubiquitination:
connectionRenderer.addAttributeRenderer(createDefaultLabelAboveLineRenderer(EPathwayRelationEdgeSubType.ubiquitination.getSymbol(),pixelGLConverter,textRenderer,sizeConfig));
break;
case methylation:
connectionRenderer.addAttributeRenderer(createDefaultLabelAboveLineRenderer(EPathwayRelationEdgeSubType.methylation.getSymbol(),pixelGLConverter,textRenderer,sizeConfig));
break;
}
}
}
}
connectionRenderer.renderLine(gl,linePoints);
}",0.9741109020872524
57256,"private void updateChildrenOf(ColumnRanker ranker){
  boolean started=false;
  for (  ITableColumnUI r : Iterables.filter(this,ITableColumnUI.class)) {
    if (r instanceof OrderColumnUI) {
      OrderColumnUI cr=(OrderColumnUI)r;
      if (ranker != cr.getRanker())       continue;
      if (started)       break;
      started=true;
    }
    if (started)     r.update();
  }
  relayout();
}","private void updateChildrenOf(ColumnRanker ranker){
  boolean started=false;
  for (  ITableColumnUI r : Iterables.filter(this,ITableColumnUI.class)) {
    if (r instanceof OrderColumnUI) {
      OrderColumnUI cr=(OrderColumnUI)r;
      if (started) {
        ((OrderColumnUI)r).repaintAll();
        break;
      }
      if (ranker != cr.getRanker())       continue;
      started=true;
    }
    if (started)     r.update();
  }
  relayout();
}",0.8605482717520858
57257,"public void init(RankTableModel table,boolean interactive,IRowHeightLayout... layouts){
  setLayout(new TableLayout(layouts.length > 1));
  if (layouts.length > 1) {
    ButtonBar buttons=new ButtonBar();
    buttons.setzDelta(0.5f);
    RadioController radio=new RadioController(this);
    for (int i=0; i < layouts.length; ++i) {
      GLButton b=new GLButton();
      b.setLayoutData(layouts[i]);
      b.setRenderer(renderer);
      radio.add(b);
      buttons.addButton(b);
    }
    this.add(buttons);
  }
  this.add(new TableHeaderUI(table,interactive));
  this.add(new TableBodyUI(table,layouts.length == 0 ? RowHeightLayouts.UNIFORM : layouts[0]));
  if (interactive && !table.getConfig().isDestroyOnHide())   this.add(new ColumnPoolUI(table));
}","public void init(RankTableModel table,boolean interactive,IRowHeightLayout... layouts){
  setLayout(GLLayouts.flowVertical(0));
  if (layouts.length > 1) {
    ButtonBar buttons=new ButtonBar();
    buttons.setzDelta(0.5f);
    RadioController radio=new RadioController(this);
    for (int i=0; i < layouts.length; ++i) {
      GLButton b=new GLButton();
      b.setLayoutData(layouts[i]);
      b.setRenderer(renderer);
      radio.add(b);
      buttons.addButton(b);
    }
    this.add(buttons);
  }
  this.add(new TableHeaderUI(table,interactive));
  this.add(new TableBodyUI(table,layouts.length == 0 ? RowHeightLayouts.UNIFORM : layouts[0]));
  if (interactive && !table.getConfig().isDestroyOnHide())   this.add(new ColumnPoolUI(table));
}",0.9626666666666668
57258,"@Override protected void prepare(){
  currentRenderer.prepare();
  if (currentRenderer.isDisplayListDirty())   super.setDisplayListDirty();
}","@Override protected void prepare(){
  currentRenderer.prepare();
  super.setDisplayListDirty(currentRenderer.isDisplayListDirty());
}",0.7956204379562044
57259,"@Override public void setDisplayListDirty(){
  super.setDisplayListDirty();
  currentRenderer.setDisplayListDirty();
}","@Override public void setDisplayListDirty(boolean isDisplayListDirty){
  super.setDisplayListDirty(isDisplayListDirty);
  currentRenderer.setDisplayListDirty(isDisplayListDirty);
}",0.7919463087248322
57260,"/** 
 * Set the limits of this renderer. The view must render within only these limits.
 * @param x
 * @param y
 */
public void setLimits(float x,float y){
  this.x=x;
  this.y=y;
  setDisplayListDirty();
}","/** 
 * Set the limits of this renderer. The view must render within only these limits.
 * @param x
 * @param y
 */
public void setLimits(float x,float y){
  this.x=x;
  this.y=y;
  setDisplayListDirty(true);
}",0.9903846153846154
57261,"/** 
 * Sets the display list of this renderer dirty.
 */
public void setDisplayListDirty(){
  this.isDisplayListDirty=true;
}","/** 
 * Sets   {@link #isDisplayListDirty()}
 */
public void setDisplayListDirty(boolean isDisplayListDirty){
  this.isDisplayListDirty=isDisplayListDirty;
}",0.6925795053003534
57262,"/** 
 * Rendering method.
 * @param gl
 */
public final void render(GL2 gl){
  boolean displayListsAllowedByLayoutManager=false;
  if (layoutManager != null) {
    displayListsAllowedByLayoutManager=layoutManager.isUseDisplayLists();
  }
  if (displayListsAllowedByLayoutManager && !hasDisplayListIndex && permitsWrappingDisplayLists()) {
    displayListIndex=gl.glGenLists(1);
    hasDisplayListIndex=true;
  }
  prepare();
  if (isDisplayListDirty() && permitsWrappingDisplayLists() && displayListsAllowedByLayoutManager) {
    gl.glNewList(displayListIndex,GL2.GL_COMPILE);
    renderContent(gl);
    gl.glEndList();
    isDisplayListDirty=false;
  }
  if (permitsWrappingDisplayLists() && displayListsAllowedByLayoutManager) {
    gl.glCallList(displayListIndex);
  }
 else {
    renderContent(gl);
  }
}","/** 
 * Rendering method.
 * @param gl
 */
public final void render(GL2 gl){
  boolean displayListsAllowedByLayoutManager=false;
  if (layoutManager != null) {
    displayListsAllowedByLayoutManager=layoutManager.isUseDisplayLists();
  }
  if (displayListsAllowedByLayoutManager && !hasDisplayListIndex && permitsWrappingDisplayLists()) {
    displayListIndex=gl.glGenLists(1);
    hasDisplayListIndex=true;
  }
  prepare();
  if (isDisplayListDirty() && permitsWrappingDisplayLists() && displayListsAllowedByLayoutManager) {
    gl.glNewList(displayListIndex,GL2.GL_COMPILE);
    renderContent(gl);
    gl.glEndList();
    setDisplayListDirty(false);
  }
  if (permitsWrappingDisplayLists() && displayListsAllowedByLayoutManager) {
    gl.glCallList(displayListIndex);
  }
 else {
    renderContent(gl);
  }
}",0.9752781211372064
57263,"/** 
 * Sets the display lists of all renderers of this layout dirty.
 */
void setRenderingDirty(){
  if (isHidden)   return;
  if (foregroundRenderers != null) {
    for (    ALayoutRenderer renderer : foregroundRenderers) {
      renderer.setDisplayListDirty();
    }
  }
  if (backgroundRenderers != null) {
    for (    ALayoutRenderer renderer : backgroundRenderers) {
      renderer.setDisplayListDirty();
    }
  }
  if (renderer != null) {
    renderer.setDisplayListDirty();
  }
}","/** 
 * Sets the display lists of all renderers of this layout dirty.
 */
void setRenderingDirty(){
  if (isHidden)   return;
  if (foregroundRenderers != null) {
    for (    ALayoutRenderer renderer : foregroundRenderers) {
      renderer.setDisplayListDirty(true);
    }
  }
  if (backgroundRenderers != null) {
    for (    ALayoutRenderer renderer : backgroundRenderers) {
      renderer.setDisplayListDirty(true);
    }
  }
  if (renderer != null) {
    renderer.setDisplayListDirty(true);
  }
}",0.987878787878788
57264,"/** 
 * @param color Color with rgba values.
 */
public void setColor(float[] color){
  this.color=color;
  setDisplayListDirty();
}","/** 
 * @param color Color with rgba values.
 */
public void setColor(float[] color){
  this.color=color;
  setDisplayListDirty(true);
}",0.9850746268656716
57265,"public void setBorderColor(float[] borderColor){
  this.borderColor=borderColor;
  setDisplayListDirty();
}","public void setBorderColor(float[] borderColor){
  this.borderColor=borderColor;
  setDisplayListDirty(true);
}",0.981651376146789
57266,"/** 
 * @param showGradient setter, see  {@link #useGradient}
 */
public void setUseGradient(boolean useGradient){
  this.useGradient=useGradient;
  setDisplayListDirty();
}","/** 
 * @param showGradient setter, see  {@link #useGradient}
 */
public void setUseGradient(boolean useGradient){
  this.useGradient=useGradient;
  setDisplayListDirty(true);
}",0.9885714285714284
57267,"public void setDrawBorder(boolean drawBorder){
  this.drawBorder=drawBorder;
  setDisplayListDirty();
}","public void setDrawBorder(boolean drawBorder){
  this.drawBorder=drawBorder;
  setDisplayListDirty(true);
}",0.9809523809523808
57268,"public void setBorderWidth(int borderWidth){
  this.borderWidth=borderWidth;
  setDisplayListDirty();
}","public void setBorderWidth(int borderWidth){
  this.borderWidth=borderWidth;
  setDisplayListDirty(true);
}",0.9809523809523808
57269,"public void setColor(float[] color){
  this.color=color;
  setDisplayListDirty();
}","public void setColor(float[] color){
  this.color=color;
  setDisplayListDirty(true);
}",0.976470588235294
57270,"/** 
 * @param isHorizontalGradient setter, see  {@link #isHorizontalGradient}
 */
public void setHorizontalGradient(boolean isHorizontalGradient){
  this.isHorizontalGradient=isHorizontalGradient;
  setDisplayListDirty();
}","/** 
 * @param isHorizontalGradient setter, see  {@link #isHorizontalGradient}
 */
public void setHorizontalGradient(boolean isHorizontalGradient){
  this.isHorizontalGradient=isHorizontalGradient;
  setDisplayListDirty(true);
}",0.991150442477876
57271,"/** 
 * @param gradientColor setter, see  {@link #gradientColor}
 */
public void setGradientColor(float[] gradientColor){
  this.gradientColor=gradientColor;
  setDisplayListDirty();
}","/** 
 * @param gradientColor setter, see  {@link #gradientColor}
 */
public void setGradientColor(float[] gradientColor){
  this.gradientColor=gradientColor;
  setDisplayListDirty(true);
}",0.989247311827957
57272,"@Override protected void prepare(){
  if (labelProvider != null)   label=labelProvider.getLabel();
  if (!prevLabel.equals(label)) {
    setDisplayListDirty();
  }
  prevLabel=label;
}","@Override protected void prepare(){
  if (labelProvider != null)   label=labelProvider.getLabel();
  if (!prevLabel.equals(label)) {
    setDisplayListDirty(true);
  }
  prevLabel=label;
}",0.989247311827957
57273,"/** 
 * @param lineWidth setter, see  {@link lineWidth}
 */
public void setLineWidth(float lineWidth){
  if (lineWidth == this.lineWidth)   return;
  this.lineWidth=lineWidth;
  setDisplayListDirty();
}","/** 
 * @param lineWidth setter, see  {@link lineWidth}
 */
public void setLineWidth(float lineWidth){
  if (lineWidth == this.lineWidth)   return;
  this.lineWidth=lineWidth;
  setDisplayListDirty(true);
}",0.9901960784313726
57274,"@Override public void setDisplayListDirty(){
  if (!ensureValidRenderer())   return;
  super.setDisplayListDirty();
}","@Override public void setDisplayListDirty(boolean isDisplayListDiry){
  if (!ensureValidRenderer())   return;
  super.setDisplayListDirty(isDisplayListDiry);
}",0.8478260869565217
57275,"@Override public void repaintPick(){
  setDisplayListDirty();
}","@Override public void repaintPick(){
  setDisplayListDirty(true);
}",0.9692307692307692
57276,"@Override public void repaint(){
  setDisplayListDirty();
}","@Override public void repaint(){
  setDisplayListDirty(true);
}",0.9672131147540984
57277,"/** 
 * @param zCoordinate setter, see  {@link #zCoordinate}
 */
public ButtonRenderer setZCoordinate(float zCoordinate){
  this.zCoordinate=zCoordinate;
  setDisplayListDirty();
  return this;
}","/** 
 * @param zCoordinate setter, see  {@link #zCoordinate}
 */
public ButtonRenderer setZCoordinate(float zCoordinate){
  this.zCoordinate=zCoordinate;
  setDisplayListDirty(true);
  return this;
}",0.9898477157360406
57278,"public void setTextureRotation(ETextureRotation textureRotation){
  this.textureRotation=textureRotation;
  setDisplayListDirty();
}","public void setTextureRotation(ETextureRotation textureRotation){
  this.textureRotation=textureRotation;
  setDisplayListDirty(true);
}",0.9850746268656716
57279,"@Override protected void prepare(){
  updateStrategy.processEvents();
  if (isDisplayListDirty()) {
    updateLayout();
  }
}","@Override protected void prepare(){
  updateStrategy.processEvents();
}",0.7244897959183674
57280,"/** 
 * @param currentExpandedBranchNode setter, see  {@link #expandedBranchSummaryNode}
 */
public void setExpandedBranchSummaryNode(BranchSummaryNode expandedBranchSummaryNode){
  if (this.expandedBranchSummaryNode != expandedBranchSummaryNode) {
    this.expandedBranchSummaryNode=expandedBranchSummaryNode;
    for (    ALinearizableNode node : pathNodes) {
      node.setPickable(expandedBranchSummaryNode == null);
    }
    PathRendererChangedEvent event=new PathRendererChangedEvent(this);
    event.setSender(this);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
    updateLayout();
  }
}","/** 
 * @param currentExpandedBranchNode setter, see  {@link #expandedBranchSummaryNode}
 */
public void setExpandedBranchSummaryNode(BranchSummaryNode expandedBranchSummaryNode){
  if (this.expandedBranchSummaryNode != expandedBranchSummaryNode) {
    this.expandedBranchSummaryNode=expandedBranchSummaryNode;
    PathRendererChangedEvent event=new PathRendererChangedEvent(this);
    event.setSender(this);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
    updateLayout();
    setDisplayListDirty(true);
  }
}",0.5701830863121186
57281,"/** 
 * Selects a branch node to be linearized.
 * @param node
 */
public void selectBranch(ALinearizableNode node){
  List<List<PathwayVertexRep>> newPathSegments=getBranchPath(node);
  if (updateStrategy.isPathChangePermitted(newPathSegments)) {
    setExpandedBranchSummaryNode(null);
    setPath(newPathSegments);
    updateStrategy.triggerPathUpdate();
  }
}","/** 
 * Selects a branch node to be linearized.
 * @param node
 */
public void selectBranch(ALinearizableNode node){
  List<List<PathwayVertexRep>> newPathSegments=getBranchPath(node);
  if (updateStrategy.isPathChangePermitted(newPathSegments)) {
    setExpandedBranchSummaryNode(null);
    setPath(newPathSegments);
    updateStrategy.triggerPathUpdate();
    setDisplayListDirty(true);
  }
}",0.9590488771466316
57282,"@Override public void notifyOfSelectionChange(EventBasedSelectionManager selectionManager){
  setDisplayListDirty();
}","@Override public void notifyOfSelectionChange(EventBasedSelectionManager selectionManager){
  setDisplayListDirty(true);
}",0.9833333333333332
57283,"@ListenTo(restrictExclusiveToEventSpace=true) public void onShowPortalNodes(ShowPortalNodesEvent event){
  Set<PathwayVertexRep> vertexReps=PathwayManager.get().getEquivalentVertexRepsInPathway(event.getVertexRep(),pathway);
  if (event.getVertexRep().getPathway() == pathway) {
    vertexReps.add(event.getVertexRep());
  }
  Set<APathwayPathRenderer> renderersToRemove=new HashSet<>(renderers.keySet());
  renderersToRemove.remove(selectedPathRenderer);
  for (  PathwayVertexRep vertexRep : vertexReps) {
    boolean createNewPath=true;
    for (    APathwayPathRenderer renderer : renderers.keySet()) {
      if (PathUtility.containsVertexRep(renderer.pathSegments,vertexRep)) {
        renderersToRemove.remove(renderer);
        createNewPath=false;
        break;
      }
    }
    if (createNewPath) {
      List<PathwayVertexRep> segment=PathwayManager.get().determineDirectionalPath(vertexRep,false,5);
      segment.remove(0);
      Collections.reverse(segment);
      segment.addAll(PathwayManager.get().determineDirectionalPath(vertexRep,true,5));
      List<List<PathwayVertexRep>> pathSegments=new ArrayList<>(1);
      pathSegments.add(segment);
      addPath(pathSegments);
    }
  }
  for (  APathwayPathRenderer renderer : renderersToRemove) {
    removePath(renderer);
  }
  setDisplayListDirty();
  layout.updateLayout();
  triggerMinSizeUpdate();
}","@ListenTo(restrictExclusiveToEventSpace=true) public void onShowPortalNodes(ShowPortalNodesEvent event){
  Set<PathwayVertexRep> vertexReps=PathwayManager.get().getEquivalentVertexRepsInPathway(event.getVertexRep(),pathway);
  if (event.getVertexRep().getPathway() == pathway) {
    vertexReps.add(event.getVertexRep());
  }
  Set<APathwayPathRenderer> renderersToRemove=new HashSet<>(renderers.keySet());
  renderersToRemove.remove(selectedPathRenderer);
  for (  PathwayVertexRep vertexRep : vertexReps) {
    boolean createNewPath=true;
    for (    APathwayPathRenderer renderer : renderers.keySet()) {
      if (PathUtility.containsVertexRep(renderer.pathSegments,vertexRep)) {
        renderersToRemove.remove(renderer);
        createNewPath=false;
        break;
      }
    }
    if (createNewPath) {
      List<PathwayVertexRep> segment=PathwayManager.get().determineDirectionalPath(vertexRep,false,5);
      segment.remove(0);
      Collections.reverse(segment);
      segment.addAll(PathwayManager.get().determineDirectionalPath(vertexRep,true,5));
      List<List<PathwayVertexRep>> pathSegments=new ArrayList<>(1);
      pathSegments.add(segment);
      addPath(pathSegments);
    }
  }
  for (  APathwayPathRenderer renderer : renderersToRemove) {
    removePath(renderer);
  }
  setDisplayListDirty(true);
  layout.updateLayout();
  triggerMinSizeUpdate();
}",0.990524781341108
57284,"@Override public boolean isDisplayListDirty(){
  if (isDisplayListDirty)   return true;
  for (  APathwayPathRenderer renderer : renderers.keySet()) {
    if (renderer.isDisplayListDirty())     return true;
  }
  return false;
}","@Override public boolean isDisplayListDirty(){
  if (super.isDisplayListDirty())   return true;
  for (  APathwayPathRenderer renderer : renderers.keySet()) {
    if (renderer.isDisplayListDirty())     return true;
  }
  return false;
}",0.9827586206896552
57285,"@Override public void registerPickingListeners(){
  for (  Integer nodeId : nodeIds) {
    showButtonPickingListener=new ATimedMouseOutPickingListener(){
      @Override protected void timedMouseOut(      Pick pick){
        showRemoveButton=false;
        pathwayPathRenderer.setDisplayListDirty();
      }
      @Override public void mouseOver(      Pick pick){
        if (!node.isPickable())         return;
        if (pathwayPathRenderer.isFirstNode((ALinearizableNode)node) || pathwayPathRenderer.isLastNode((ALinearizableNode)node)) {
          super.mouseOver(pick);
          showRemoveButton=true;
          pathwayPathRenderer.setDisplayListDirty();
        }
      }
    }
;
    view.addIDPickingListener(showButtonPickingListener,EPickingType.LINEARIZABLE_NODE.name(),nodeId);
    view.addIDPickingListener(showButtonPickingListener,EPickingType.REMOVABLE_NODE.name(),nodeId);
    buttonPickingListener=new APickingListener(){
      @Override public void clicked(      Pick pick){
        if (!node.isPickable())         return;
        RemoveEnRouteNodeEvent event=new RemoveEnRouteNodeEvent((ALinearizableNode)node);
        event.setSender(this);
        GeneralManager.get().getEventPublisher().triggerEvent(event);
        pathwayPathRenderer.removeNodeFromPath((ALinearizableNode)node);
      }
    }
;
    view.addIDPickingListener(buttonPickingListener,EPickingType.REMOVE_NODE_BUTTON.name(),nodeId);
  }
}","@Override public void registerPickingListeners(){
  for (  Integer nodeId : nodeIds) {
    showButtonPickingListener=new ATimedMouseOutPickingListener(){
      @Override protected void timedMouseOut(      Pick pick){
        showRemoveButton=false;
        pathwayPathRenderer.setDisplayListDirty(true);
      }
      @Override public void mouseOver(      Pick pick){
        if (!node.isPickable())         return;
        if (pathwayPathRenderer.isFirstNode((ALinearizableNode)node) || pathwayPathRenderer.isLastNode((ALinearizableNode)node)) {
          super.mouseOver(pick);
          showRemoveButton=true;
          pathwayPathRenderer.setDisplayListDirty(true);
        }
      }
    }
;
    view.addIDPickingListener(showButtonPickingListener,EPickingType.LINEARIZABLE_NODE.name(),nodeId);
    view.addIDPickingListener(showButtonPickingListener,EPickingType.REMOVABLE_NODE.name(),nodeId);
    buttonPickingListener=new APickingListener(){
      @Override public void clicked(      Pick pick){
        if (!node.isPickable())         return;
        RemoveEnRouteNodeEvent event=new RemoveEnRouteNodeEvent((ALinearizableNode)node);
        event.setSender(this);
        GeneralManager.get().getEventPublisher().triggerEvent(event);
        pathwayPathRenderer.removeNodeFromPath((ALinearizableNode)node);
      }
    }
;
    view.addIDPickingListener(buttonPickingListener,EPickingType.REMOVE_NODE_BUTTON.name(),nodeId);
  }
}",0.9972067039106144
57286,"@Override public void mouseOver(Pick pick){
  if (!node.isPickable())   return;
  if (pathwayPathRenderer.isFirstNode((ALinearizableNode)node) || pathwayPathRenderer.isLastNode((ALinearizableNode)node)) {
    super.mouseOver(pick);
    showRemoveButton=true;
    pathwayPathRenderer.setDisplayListDirty();
  }
}","@Override public void mouseOver(Pick pick){
  if (!node.isPickable())   return;
  if (pathwayPathRenderer.isFirstNode((ALinearizableNode)node) || pathwayPathRenderer.isLastNode((ALinearizableNode)node)) {
    super.mouseOver(pick);
    showRemoveButton=true;
    pathwayPathRenderer.setDisplayListDirty(true);
  }
}",0.9936102236421726
57287,"@Override protected void timedMouseOut(Pick pick){
  showRemoveButton=false;
  pathwayPathRenderer.setDisplayListDirty();
}","@Override protected void timedMouseOut(Pick pick){
  showRemoveButton=false;
  pathwayPathRenderer.setDisplayListDirty(true);
}",0.984
57288,"@Override protected void determineBackgroundColor(EventBasedSelectionManager selectionManager){
  List<SelectionType> selectionTypes=selectionManager.getSelectionTypes(node.getPrimaryPathwayVertexRep().getName().hashCode());
  Collections.sort(selectionTypes);
  Collections.reverse(selectionTypes);
  colorCalculator.calculateColors(selectionTypes);
  backgroundColor=colorCalculator.getPrimaryColor().getRGB();
}","@Override protected void determineBackgroundColor(EventBasedSelectionManager selectionManager){
  List<SelectionType> selectionTypes=selectionManager.getSelectionTypes(node.getPrimaryPathwayVertexRep().getName().hashCode());
  Collections.sort(selectionTypes);
  Collections.reverse(selectionTypes);
  colorCalculator.calculateColors(selectionTypes);
  backgroundColor=colorCalculator.getPrimaryColor().getRGBA();
}",0.9987937273823884
57289,"protected void renderCircle(GL2 gl,GLU glu,Vec3f position,float radius){
  gl.glPushName(pickingManager.getPickingID(view.getID(),EPickingType.LINEARIZABLE_NODE.name(),node.hashCode()));
  gl.glPushMatrix();
  gl.glTranslatef(position.x(),position.y(),position.z());
  gl.glColor4f(backgroundColor[0],backgroundColor[1],backgroundColor[2],pathwayPathRenderer.getNodeAlpha());
  gl.glColor4fv(backgroundColor,0);
  GLPrimitives.renderCircle(glu,radius / 2.0f,16);
  gl.glColor4f(0,0,0,1);
  GLPrimitives.renderCircleBorder(gl,glu,radius / 2.0f,16,0.1f);
  gl.glPopMatrix();
  gl.glPopName();
}","protected void renderCircle(GL2 gl,GLU glu,Vec3f position,float radius){
  gl.glPushName(pickingManager.getPickingID(view.getID(),EPickingType.LINEARIZABLE_NODE.name(),node.hashCode()));
  gl.glPushMatrix();
  gl.glTranslatef(position.x(),position.y(),position.z());
  gl.glColor4fv(backgroundColor,0);
  GLPrimitives.renderCircle(glu,radius / 2.0f,16);
  gl.glColor4f(0,0,0,1);
  GLPrimitives.renderCircleBorder(gl,glu,radius / 2.0f,16,0.1f);
  gl.glPopMatrix();
  gl.glPopName();
}",0.8986046511627906
57290,"private void createRemoteRenderedViews(){
  if (remoteRenderedPathwayMultiformViewIDs == null) {
    pathInfo=new MultiFormInfo();
    createMultiformRenderer(tablePerspectives,EnumSet.of(EEmbeddingID.PATH_LEVEL1,EEmbeddingID.PATH_LEVEL2),baseContainer,0.3f,pathInfo);
    int rendererID=pathInfo.embeddingIDToRendererIDs.get(EEmbeddingID.PATH_LEVEL2).get(0);
    if (pathInfo.multiFormRenderer.getActiveRendererID() != rendererID) {
      pathInfo.multiFormRenderer.setActive(rendererID);
    }
 else {
      setPathLevel(EEmbeddingID.PATH_LEVEL2);
    }
  }
}","private void createRemoteRenderedViews(){
  if (remoteRenderedPathwayMultiformViewIDs == null) {
    addPathway(PathwayManager.get().getPathwayByTitle(""String_Node_Str"",EPathwayDatabaseType.KEGG));
  }
}",0.2984293193717277
57291,"@Override protected void onMouseOver(Pick pick){
  GLPathwayBackground currentActiveBackground=view.getCurrentActiveBackground();
  if (currentActiveBackground != null && currentActiveBackground != this) {
    currentActiveBackground.hovered=false;
    currentActiveBackground.repaint();
  }
  view.setCurrentActiveBackground(this);
  hovered=true;
  repaint();
}","@Override protected void onMouseOver(Pick pick){
  parentWindow.setActive(true);
}",0.3191011235955056
57292,"public GLPathwayBackground(GLSubGraph view){
  this.view=view;
}","public GLPathwayBackground(GLPathwayWindow parentWindow){
  this.parentWindow=parentWindow;
}",0.6369426751592356
57293,"private boolean demote(MultiFormInfo info){
  if (info.multiFormRenderer != view.lastUsedRenderer) {
    EEmbeddingID level=info.getEmbeddingIDFromRendererID(info.multiFormRenderer.getActiveRendererID());
    EEmbeddingID levelDown=EEmbeddingID.levelDown(level);
    if (levelDown != level) {
      int rendererID=info.embeddingIDToRendererIDs.get(levelDown).get(0);
      info.multiFormRenderer.setActive(rendererID);
      return true;
    }
  }
  return false;
}","private boolean demote(MultiFormInfo info){
  if (info.multiFormRenderer != view.lastUsedRenderer && info.multiFormRenderer != view.lastUsedLevel1Renderer) {
    EEmbeddingID level=info.getEmbeddingIDFromRendererID(info.multiFormRenderer.getActiveRendererID());
    EEmbeddingID levelDown=EEmbeddingID.levelDown(level);
    if (levelDown != level) {
      int rendererID=info.embeddingIDToRendererIDs.get(levelDown).get(0);
      info.multiFormRenderer.setActive(rendererID);
      return true;
    }
  }
  return false;
}",0.9422492401215804
57294,"public GLPathwayWindow(PathwayGraph pathway,GLSubGraph view,final MultiFormInfo info){
  setLayout(GLLayouts.LAYERS);
  this.info=info;
  GLElementContainer multiFormContainer=new GLElementContainer(new GLSizeRestrictiveFlowLayout(false,1,GLPadding.ZERO));
  GLTitleBar titleBar=new GLTitleBar(pathway == null ? ""String_Node_Str"" : pathway.getTitle());
  multiFormContainer.add(titleBar);
  GLElementAdapter container=new GLElementAdapter(view,info.multiFormRenderer,true);
  multiFormContainer.add(container);
  info.container=container;
  GLElementViewSwitchingBar viewSwitchingBar=new GLElementViewSwitchingBar(info.multiFormRenderer);
  GLPathwayBackground bg=new GLPathwayBackground(view);
  titleBar.add(viewSwitchingBar);
  add(bg);
  add(multiFormContainer);
}","public GLPathwayWindow(PathwayGraph pathway,GLSubGraph view,final MultiFormInfo info){
  setLayout(GLLayouts.LAYERS);
  this.info=info;
  this.view=view;
  GLElementContainer multiFormContainer=new GLElementContainer(new GLSizeRestrictiveFlowLayout(false,1,GLPadding.ZERO));
  GLTitleBar titleBar=new GLTitleBar(pathway == null ? ""String_Node_Str"" : pathway.getTitle());
  multiFormContainer.add(titleBar);
  GLElementAdapter container=new GLElementAdapter(view,info.multiFormRenderer,true);
  multiFormContainer.add(container);
  info.container=container;
  viewSwitchingBar=new GLElementViewSwitchingBar(info.multiFormRenderer);
  background=new GLPathwayBackground(this);
  titleBar.add(viewSwitchingBar);
  viewSwitchingBar.setVisibility(EVisibility.NONE);
  add(background);
  add(multiFormContainer);
}",0.7703045685279187
57295,"public void addPathway(PathwayGraph pathway){
  if (tablePerspectives.size() <= 0)   return;
  PathwayDataDomain pathwayDataDomain=(PathwayDataDomain)DataDomainManager.get().getDataDomainByType(PathwayDataDomain.DATA_DOMAIN_TYPE);
  TablePerspective tablePerspective=tablePerspectives.get(0);
  Perspective oldRecordPerspective=tablePerspective.getRecordPerspective();
  Perspective newRecordPerspective=new Perspective(tablePerspective.getDataDomain(),oldRecordPerspective.getIdType());
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  data.setData(oldRecordPerspective.getVirtualArray());
  newRecordPerspective.init(data);
  Perspective oldDimensionPerspective=tablePerspective.getDimensionPerspective();
  Perspective newDimensionPerspective=new Perspective(tablePerspective.getDataDomain(),oldDimensionPerspective.getIdType());
  data=new PerspectiveInitializationData();
  data.setData(oldDimensionPerspective.getVirtualArray());
  newDimensionPerspective.init(data);
  PathwayTablePerspective pathwayTablePerspective=new PathwayTablePerspective(tablePerspective.getDataDomain(),pathwayDataDomain,newRecordPerspective,newDimensionPerspective,pathway);
  pathwayDataDomain.addTablePerspective(pathwayTablePerspective);
  List<TablePerspective> pathwayTablePerspectives=new ArrayList<>(1);
  pathwayTablePerspectives.add(pathwayTablePerspective);
  PathwayMultiFormInfo info=new PathwayMultiFormInfo();
  info.pathway=pathway;
  info.age=currentPathwayAge--;
  createMultiformRenderer(pathwayTablePerspectives,EnumSet.of(EEmbeddingID.PATHWAY_LEVEL1,EEmbeddingID.PATHWAY_LEVEL2,EEmbeddingID.PATHWAY_LEVEL3,EEmbeddingID.PATHWAY_LEVEL4),pathwayRow,Float.NaN,info);
  pathwayLayout.addColumn(info.window);
  int rendererID=info.embeddingIDToRendererIDs.get(EEmbeddingID.PATHWAY_LEVEL1).get(0);
  if (info.multiFormRenderer.getActiveRendererID() != rendererID) {
    info.multiFormRenderer.setActive(rendererID);
  }
  pathwayInfos.add(info);
}","public void addPathway(PathwayGraph pathway){
  if (tablePerspectives.size() <= 0)   return;
  PathwayDataDomain pathwayDataDomain=(PathwayDataDomain)DataDomainManager.get().getDataDomainByType(PathwayDataDomain.DATA_DOMAIN_TYPE);
  TablePerspective tablePerspective=tablePerspectives.get(0);
  Perspective oldRecordPerspective=tablePerspective.getRecordPerspective();
  Perspective newRecordPerspective=new Perspective(tablePerspective.getDataDomain(),oldRecordPerspective.getIdType());
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  data.setData(oldRecordPerspective.getVirtualArray());
  newRecordPerspective.init(data);
  Perspective oldDimensionPerspective=tablePerspective.getDimensionPerspective();
  Perspective newDimensionPerspective=new Perspective(tablePerspective.getDataDomain(),oldDimensionPerspective.getIdType());
  data=new PerspectiveInitializationData();
  data.setData(oldDimensionPerspective.getVirtualArray());
  newDimensionPerspective.init(data);
  PathwayTablePerspective pathwayTablePerspective=new PathwayTablePerspective(tablePerspective.getDataDomain(),pathwayDataDomain,newRecordPerspective,newDimensionPerspective,pathway);
  pathwayDataDomain.addTablePerspective(pathwayTablePerspective);
  List<TablePerspective> pathwayTablePerspectives=new ArrayList<>(1);
  pathwayTablePerspectives.add(pathwayTablePerspective);
  PathwayMultiFormInfo info=new PathwayMultiFormInfo();
  info.pathway=pathway;
  info.age=currentPathwayAge--;
  createMultiformRenderer(pathwayTablePerspectives,EnumSet.of(EEmbeddingID.PATHWAY_LEVEL1,EEmbeddingID.PATHWAY_LEVEL2,EEmbeddingID.PATHWAY_LEVEL3,EEmbeddingID.PATHWAY_LEVEL4),pathwayRow,Float.NaN,info);
  pathwayLayout.addColumn(info.window);
  int rendererID=info.embeddingIDToRendererIDs.get(EEmbeddingID.PATHWAY_LEVEL1).get(0);
  if (info.multiFormRenderer.getActiveRendererID() != rendererID) {
    info.multiFormRenderer.setActive(rendererID);
  }
  lastUsedLevel1Renderer=info.multiFormRenderer;
  lastUsedRenderer=info.multiFormRenderer;
  pathwayInfos.add(info);
}",0.9771825396825397
57296,"private void createMultiformRenderer(List<TablePerspective> tablePerspectives,EnumSet<EEmbeddingID> embeddingIDs,AnimatedGLElementContainer parent,Object layoutData,MultiFormInfo info){
  MultiFormRenderer renderer=new MultiFormRenderer(this,false);
  renderer.addChangeListener(this);
  info.multiFormRenderer=renderer;
  PathwayGraph pathway=null;
  for (  EEmbeddingID embedding : embeddingIDs) {
    String embeddingID=embedding.id();
    Set<String> ids=ViewManager.get().getRemotePlugInViewIDs(VIEW_TYPE,embeddingID);
    for (    String viewID : ids) {
      List<Integer> rendererIDList=info.embeddingIDToRendererIDs.get(embedding);
      if (rendererIDList == null) {
        rendererIDList=new ArrayList<>(ids.size());
        info.embeddingIDToRendererIDs.put(embedding,rendererIDList);
      }
      int rendererID=renderer.addPluginVisualization(viewID,getViewType(),embeddingID,tablePerspectives,pathEventSpace);
      rendererIDList.add(rendererID);
      IPathwayRepresentation pathwayRepresentation=getPathwayRepresentation(renderer,rendererID);
      if (pathwayRepresentation != null) {
        pathway=pathwayRepresentation.getPathway();
        pathwayRepresentation.addVertexRepBasedContextMenuItem(new VertexRepBasedContextMenuItem(""String_Node_Str"",ShowNodeInfoEvent.class,pathEventSpace));
        pathwayRepresentation.addVertexRepBasedContextMenuItem(new VertexRepBasedContextMenuItem(""String_Node_Str"",ShowPathwayBrowserEvent.class,pathEventSpace));
        pathwayRepresentation.addVertexRepBasedContextMenuItem(new VertexRepBasedContextMenuItem(""String_Node_Str"",ShowPortalNodesEvent.class,pathEventSpace));
      }
    }
  }
  GLPathwayWindow window=new GLPathwayWindow(pathway,this,info);
  info.window=window;
  lastUsedRenderer=renderer;
  parent.add(window);
}","private void createMultiformRenderer(List<TablePerspective> tablePerspectives,EnumSet<EEmbeddingID> embeddingIDs,AnimatedGLElementContainer parent,Object layoutData,MultiFormInfo info){
  MultiFormRenderer renderer=new MultiFormRenderer(this,false);
  renderer.addChangeListener(this);
  info.multiFormRenderer=renderer;
  PathwayGraph pathway=null;
  for (  EEmbeddingID embedding : embeddingIDs) {
    String embeddingID=embedding.id();
    Set<String> ids=ViewManager.get().getRemotePlugInViewIDs(VIEW_TYPE,embeddingID);
    for (    String viewID : ids) {
      List<Integer> rendererIDList=info.embeddingIDToRendererIDs.get(embedding);
      if (rendererIDList == null) {
        rendererIDList=new ArrayList<>(ids.size());
        info.embeddingIDToRendererIDs.put(embedding,rendererIDList);
      }
      int rendererID=renderer.addPluginVisualization(viewID,getViewType(),embeddingID,tablePerspectives,pathEventSpace);
      rendererIDList.add(rendererID);
      IPathwayRepresentation pathwayRepresentation=getPathwayRepresentation(renderer,rendererID);
      if (pathwayRepresentation != null) {
        pathway=pathwayRepresentation.getPathway();
        pathwayRepresentation.addVertexRepBasedContextMenuItem(new VertexRepBasedContextMenuItem(""String_Node_Str"",ShowNodeInfoEvent.class,pathEventSpace));
        pathwayRepresentation.addVertexRepBasedContextMenuItem(new VertexRepBasedContextMenuItem(""String_Node_Str"",ShowPathwayBrowserEvent.class,pathEventSpace));
        pathwayRepresentation.addVertexRepBasedContextMenuItem(new VertexRepBasedContextMenuItem(""String_Node_Str"",ShowPortalNodesEvent.class,pathEventSpace));
      }
    }
  }
  GLPathwayWindow window=new GLPathwayWindow(pathway,this,info);
  info.window=window;
  parent.add(window);
}",0.9918562201628756
57297,"@Override public void activeRendererChanged(MultiFormRenderer multiFormRenderer,int rendererID,int previousRendererID,boolean wasTriggeredByUser){
  if (pathInfo == null || !pathInfo.isInitialized())   return;
  if (multiFormRenderer == pathInfo.multiFormRenderer) {
    EEmbeddingID embeddingID=pathInfo.getEmbeddingIDFromRendererID(rendererID);
    setPathLevel(embeddingID);
  }
  if (wasTriggeredByUser && rendererID != previousRendererID) {
    for (    PathwayMultiFormInfo info : pathwayInfos) {
      if (info.multiFormRenderer == multiFormRenderer) {
        if (info.getEmbeddingIDFromRendererID(rendererID) == EEmbeddingID.PATHWAY_LEVEL1) {
          pathwayLayout.setLevel1(info.window);
          info.age=currentPathwayAge--;
          lastUsedRenderer=info.multiFormRenderer;
          break;
        }
      }
    }
    pathwayRow.relayout();
  }
}","@Override public void activeRendererChanged(MultiFormRenderer multiFormRenderer,int rendererID,int previousRendererID,boolean wasTriggeredByUser){
  if (pathInfo == null || !pathInfo.isInitialized())   return;
  if (multiFormRenderer == pathInfo.multiFormRenderer) {
    EEmbeddingID embeddingID=pathInfo.getEmbeddingIDFromRendererID(rendererID);
    setPathLevel(embeddingID);
  }
  if (wasTriggeredByUser && rendererID != previousRendererID) {
    for (    PathwayMultiFormInfo info : pathwayInfos) {
      if (info.multiFormRenderer == multiFormRenderer) {
        if (info.getEmbeddingIDFromRendererID(rendererID) == EEmbeddingID.PATHWAY_LEVEL1) {
          pathwayLayout.setLevel1(info.window);
          lastUsedLevel1Renderer=info.multiFormRenderer;
        }
        info.age=currentPathwayAge--;
        lastUsedRenderer=info.multiFormRenderer;
        break;
      }
    }
    pathwayRow.relayout();
  }
}",0.927487352445194
57298,"private void createRemoteRenderedViews(){
  if (remoteRenderedPathwayMultiformViewIDs == null) {
    addPathway(PathwayManager.get().getPathwayByTitle(""String_Node_Str"",EPathwayDatabaseType.KEGG));
  }
}","private void createRemoteRenderedViews(){
  if (remoteRenderedPathwayMultiformViewIDs == null) {
    pathInfo=new MultiFormInfo();
    createMultiformRenderer(tablePerspectives,EnumSet.of(EEmbeddingID.PATH_LEVEL1,EEmbeddingID.PATH_LEVEL2),baseContainer,0.3f,pathInfo);
    int rendererID=pathInfo.embeddingIDToRendererIDs.get(EEmbeddingID.PATH_LEVEL2).get(0);
    if (pathInfo.multiFormRenderer.getActiveRendererID() != rendererID) {
      pathInfo.multiFormRenderer.setActive(rendererID);
    }
 else {
      setPathLevel(EEmbeddingID.PATH_LEVEL2);
    }
  }
}",0.3036649214659686
57299,"@Override public void activeRendererChanged(MultiFormRenderer multiFormRenderer,int rendererID,int previousRendererID,boolean wasTriggeredByUser){
  if (pathInfo == null || !pathInfo.isInitialized())   return;
  if (multiFormRenderer == pathInfo.multiFormRenderer) {
    EEmbeddingID embeddingID=pathInfo.getEmbeddingIDFromRendererID(rendererID);
    setPathLevel(embeddingID);
  }
  if (wasTriggeredByUser && rendererID != previousRendererID) {
    for (    PathwayMultiFormInfo info : pathwayInfos) {
      if (info.multiFormRenderer == multiFormRenderer) {
        if (info.getEmbeddingIDFromRendererID(rendererID) == EEmbeddingID.PATHWAY_LEVEL1) {
          pathwayLayout.setLevel1(info.window);
          lastUsedLevel1Renderer=info.multiFormRenderer;
        }
        info.age=currentPathwayAge--;
        lastUsedRenderer=info.multiFormRenderer;
        break;
      }
    }
    pathwayRow.relayout();
  }
}","@Override public void activeRendererChanged(MultiFormRenderer multiFormRenderer,int rendererID,int previousRendererID,boolean wasTriggeredByUser){
  if (pathInfo != null && pathInfo.isInitialized()) {
    if (multiFormRenderer == pathInfo.multiFormRenderer) {
      EEmbeddingID embeddingID=pathInfo.getEmbeddingIDFromRendererID(rendererID);
      setPathLevel(embeddingID);
    }
  }
  if (wasTriggeredByUser && rendererID != previousRendererID) {
    for (    PathwayMultiFormInfo info : pathwayInfos) {
      if (info.multiFormRenderer == multiFormRenderer) {
        if (info.getEmbeddingIDFromRendererID(rendererID) == EEmbeddingID.PATHWAY_LEVEL1) {
          pathwayLayout.setLevel1(info.window);
          lastUsedLevel1Renderer=info.multiFormRenderer;
        }
        info.age=currentPathwayAge--;
        lastUsedRenderer=info.multiFormRenderer;
        break;
      }
    }
    pathwayRow.relayout();
  }
}",0.9754500818330606
57300,"protected void handlePicking(String pickingType,PickingMode pickingMode,int pickedObjectID,Pick pick){
  Set<IPickingListener> pickingListeners=typePickingListeners.get(pickingType);
  if (pickingListeners != null) {
    for (    IPickingListener pickingListener : pickingListeners) {
      notifyPickingListener(pickingListener,pickingMode,pick);
    }
  }
  HashMap<Integer,Set<IPickingListener>> map=idPickingListeners.get(pickingType);
  if (map == null)   return;
  pickingListeners=map.get(pickedObjectID);
  if (pickingListeners != null) {
    for (    IPickingListener pickingListener : pickingListeners) {
      notifyPickingListener(pickingListener,pickingMode,pick);
    }
  }
}","protected void handlePicking(String pickingType,PickingMode pickingMode,int pickedObjectID,Pick pick){
  Set<IPickingListener> pickingListeners=typePickingListeners.get(pickingType);
  if (pickingListeners != null) {
    for (    IPickingListener pickingListener : new HashSet<>(pickingListeners)) {
      notifyPickingListener(pickingListener,pickingMode,pick);
    }
  }
  HashMap<Integer,Set<IPickingListener>> map=idPickingListeners.get(pickingType);
  if (map == null)   return;
  pickingListeners=map.get(pickedObjectID);
  if (pickingListeners != null) {
    for (    IPickingListener pickingListener : new HashSet<>(pickingListeners)) {
      notifyPickingListener(pickingListener,pickingMode,pick);
    }
  }
}",0.9332386363636364
57301,"@Override protected void rightClicked(Pick pick){
  addContextMenuItems(nodeContextMenuItems);
  if (allowBranchPathExtraction && branchNodesToLinearizedNodesMap.keySet().contains(node)) {
    ShowPathEvent event=new ShowPathEvent(getBranchPath(node));
    event.setEventSpace(branchPathExtractionEventSpace);
    view.getContextMenuCreator().addContextMenuItem(new GenericContextMenuItem(""String_Node_Str"",event));
  }
}","@Override protected void rightClicked(Pick pick){
  if (!node.isPickable())   return;
  addContextMenuItems(nodeContextMenuItems);
  if (allowBranchPathExtraction && branchNodesToLinearizedNodesMap.keySet().contains(node)) {
    ShowPathEvent event=new ShowPathEvent(getBranchPath(node));
    event.setEventSpace(branchPathExtractionEventSpace);
    view.getContextMenuCreator().addContextMenuItem(new GenericContextMenuItem(""String_Node_Str"",event));
  }
}",0.958997722095672
57302,"/** 
 * @param currentExpandedBranchNode setter, see  {@link #expandedBranchSummaryNode}
 */
public void setExpandedBranchSummaryNode(BranchSummaryNode expandedBranchSummaryNode){
  if (this.expandedBranchSummaryNode != expandedBranchSummaryNode) {
    this.expandedBranchSummaryNode=expandedBranchSummaryNode;
    PathRendererChangedEvent event=new PathRendererChangedEvent(this);
    event.setSender(this);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
    updateLayout();
  }
}","/** 
 * @param currentExpandedBranchNode setter, see  {@link #expandedBranchSummaryNode}
 */
public void setExpandedBranchSummaryNode(BranchSummaryNode expandedBranchSummaryNode){
  if (this.expandedBranchSummaryNode != expandedBranchSummaryNode) {
    this.expandedBranchSummaryNode=expandedBranchSummaryNode;
    for (    ALinearizableNode node : pathNodes) {
      node.setPickable(expandedBranchSummaryNode == null);
    }
    PathRendererChangedEvent event=new PathRendererChangedEvent(this);
    event.setSender(this);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
    updateLayout();
  }
}",0.8960573476702509
57303,"@Override public void registerPickingListeners(){
  for (  Integer nodeId : nodeIds) {
    showButtonPickingListener=new ATimedMouseOutPickingListener(){
      @Override protected void timedMouseOut(      Pick pick){
        showRemoveButton=false;
        pathwayPathRenderer.setDisplayListDirty();
      }
      @Override public void mouseOver(      Pick pick){
        if (pathwayPathRenderer.isFirstNode((ALinearizableNode)node) || pathwayPathRenderer.isLastNode((ALinearizableNode)node)) {
          super.mouseOver(pick);
          showRemoveButton=true;
          pathwayPathRenderer.setDisplayListDirty();
        }
      }
    }
;
    view.addIDPickingListener(showButtonPickingListener,EPickingType.LINEARIZABLE_NODE.name(),nodeId);
    view.addIDPickingListener(showButtonPickingListener,EPickingType.REMOVABLE_NODE.name(),nodeId);
    buttonPickingListener=new APickingListener(){
      @Override public void clicked(      Pick pick){
        RemoveEnRouteNodeEvent event=new RemoveEnRouteNodeEvent((ALinearizableNode)node);
        event.setSender(this);
        GeneralManager.get().getEventPublisher().triggerEvent(event);
        pathwayPathRenderer.removeNodeFromPath((ALinearizableNode)node);
      }
    }
;
    view.addIDPickingListener(buttonPickingListener,EPickingType.REMOVE_NODE_BUTTON.name(),nodeId);
  }
}","@Override public void registerPickingListeners(){
  for (  Integer nodeId : nodeIds) {
    showButtonPickingListener=new ATimedMouseOutPickingListener(){
      @Override protected void timedMouseOut(      Pick pick){
        showRemoveButton=false;
        pathwayPathRenderer.setDisplayListDirty();
      }
      @Override public void mouseOver(      Pick pick){
        if (!node.isPickable())         return;
        if (pathwayPathRenderer.isFirstNode((ALinearizableNode)node) || pathwayPathRenderer.isLastNode((ALinearizableNode)node)) {
          super.mouseOver(pick);
          showRemoveButton=true;
          pathwayPathRenderer.setDisplayListDirty();
        }
      }
    }
;
    view.addIDPickingListener(showButtonPickingListener,EPickingType.LINEARIZABLE_NODE.name(),nodeId);
    view.addIDPickingListener(showButtonPickingListener,EPickingType.REMOVABLE_NODE.name(),nodeId);
    buttonPickingListener=new APickingListener(){
      @Override public void clicked(      Pick pick){
        if (!node.isPickable())         return;
        RemoveEnRouteNodeEvent event=new RemoveEnRouteNodeEvent((ALinearizableNode)node);
        event.setSender(this);
        GeneralManager.get().getEventPublisher().triggerEvent(event);
        pathwayPathRenderer.removeNodeFromPath((ALinearizableNode)node);
      }
    }
;
    view.addIDPickingListener(buttonPickingListener,EPickingType.REMOVE_NODE_BUTTON.name(),nodeId);
  }
}",0.9652173913043478
57304,"@Override public void mouseOver(Pick pick){
  if (pathwayPathRenderer.isFirstNode((ALinearizableNode)node) || pathwayPathRenderer.isLastNode((ALinearizableNode)node)) {
    super.mouseOver(pick);
    showRemoveButton=true;
    pathwayPathRenderer.setDisplayListDirty();
  }
}","@Override public void mouseOver(Pick pick){
  if (!node.isPickable())   return;
  if (pathwayPathRenderer.isFirstNode((ALinearizableNode)node) || pathwayPathRenderer.isLastNode((ALinearizableNode)node)) {
    super.mouseOver(pick);
    showRemoveButton=true;
    pathwayPathRenderer.setDisplayListDirty();
  }
}",0.938566552901024
57305,"@Override public void clicked(Pick pick){
  RemoveEnRouteNodeEvent event=new RemoveEnRouteNodeEvent((ALinearizableNode)node);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
  pathwayPathRenderer.removeNodeFromPath((ALinearizableNode)node);
}","@Override public void clicked(Pick pick){
  if (!node.isPickable())   return;
  RemoveEnRouteNodeEvent event=new RemoveEnRouteNodeEvent((ALinearizableNode)node);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
  pathwayPathRenderer.removeNodeFromPath((ALinearizableNode)node);
}",0.9401993355481728
57306,"@Override protected void determineBackgroundColor(EventBasedSelectionManager selectionManager){
  List<SelectionType> selectionTypes=selectionManager.getSelectionTypes(node.getPrimaryPathwayVertexRep().getName().hashCode());
  Collections.sort(selectionTypes);
  Collections.reverse(selectionTypes);
  colorCalculator.calculateColors(selectionTypes);
  backgroundColor=colorCalculator.getPrimaryColor().getRGBA();
}","@Override protected void determineBackgroundColor(EventBasedSelectionManager selectionManager){
  List<SelectionType> selectionTypes=selectionManager.getSelectionTypes(node.getPrimaryPathwayVertexRep().getName().hashCode());
  Collections.sort(selectionTypes);
  Collections.reverse(selectionTypes);
  colorCalculator.calculateColors(selectionTypes);
  backgroundColor=colorCalculator.getPrimaryColor().getRGB();
}",0.9987937273823884
57307,"protected void renderCircle(GL2 gl,GLU glu,Vec3f position,float radius){
  gl.glPushName(pickingManager.getPickingID(view.getID(),EPickingType.LINEARIZABLE_NODE.name(),node.hashCode()));
  gl.glPushMatrix();
  gl.glTranslatef(position.x(),position.y(),position.z());
  gl.glColor4fv(backgroundColor,0);
  GLPrimitives.renderCircle(glu,radius / 2.0f,16);
  gl.glColor4f(0,0,0,1);
  GLPrimitives.renderCircleBorder(gl,glu,radius / 2.0f,16,0.1f);
  gl.glPopMatrix();
  gl.glPopName();
}","protected void renderCircle(GL2 gl,GLU glu,Vec3f position,float radius){
  gl.glPushName(pickingManager.getPickingID(view.getID(),EPickingType.LINEARIZABLE_NODE.name(),node.hashCode()));
  gl.glPushMatrix();
  gl.glTranslatef(position.x(),position.y(),position.z());
  gl.glColor4f(backgroundColor[0],backgroundColor[1],backgroundColor[2],pathwayPathRenderer.getNodeAlpha());
  gl.glColor4fv(backgroundColor,0);
  GLPrimitives.renderCircle(glu,radius / 2.0f,16);
  gl.glColor4f(0,0,0,1);
  GLPrimitives.renderCircleBorder(gl,glu,radius / 2.0f,16,0.1f);
  gl.glPopMatrix();
  gl.glPopName();
}",0.8986046511627906
57308,"@Override protected void init(){
  pickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      ALinearizableNode branchNode=node;
      while (branchNode.getParentNode() != null) {
        branchNode=branchNode.getParentNode();
      }
      pathwayPathRenderer.selectBranch(branchNode);
    }
  }
;
  view.addIDPickingListener(pickingListener,EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
}","@Override protected void init(){
  pickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      if (!node.isPickable())       return;
      ALinearizableNode branchNode=node;
      while (branchNode.getParentNode() != null) {
        branchNode=branchNode.getParentNode();
      }
      pathwayPathRenderer.selectBranch(branchNode);
    }
  }
;
  view.addIDPickingListener(pickingListener,EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
}",0.9520697167755992
57309,"@Override public void clicked(Pick pick){
  ALinearizableNode branchNode=node;
  while (branchNode.getParentNode() != null) {
    branchNode=branchNode.getParentNode();
  }
  pathwayPathRenderer.selectBranch(branchNode);
}","@Override public void clicked(Pick pick){
  if (!node.isPickable())   return;
  ALinearizableNode branchNode=node;
  while (branchNode.getParentNode() != null) {
    branchNode=branchNode.getParentNode();
  }
  pathwayPathRenderer.selectBranch(branchNode);
}",0.925
57310,"@Override protected void init(){
  pickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
      geneSelectionManager.clearSelection(SelectionType.SELECTION);
      selectionManager.clearSelection(SelectionType.SELECTION);
      selectionManager.addToType(SelectionType.SELECTION,node.getPrimaryPathwayVertexRep().getName().hashCode());
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.SELECTION);
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
      geneSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.addToType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.MOUSE_OVER);
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      selectionManager.removeFromType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.NORMAL);
      pathwayPathRenderer.setDisplayListDirty();
    }
  }
;
  view.addIDPickingListener(pickingListener,EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
}","@Override protected void init(){
  pickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      if (!node.isPickable())       return;
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
      geneSelectionManager.clearSelection(SelectionType.SELECTION);
      selectionManager.clearSelection(SelectionType.SELECTION);
      selectionManager.addToType(SelectionType.SELECTION,node.getPrimaryPathwayVertexRep().getName().hashCode());
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.SELECTION);
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      if (!node.isPickable())       return;
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
      geneSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.addToType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.MOUSE_OVER);
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      if (!node.isPickable())       return;
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      selectionManager.removeFromType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.NORMAL);
      pathwayPathRenderer.setDisplayListDirty();
    }
  }
;
  view.addIDPickingListener(pickingListener,EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
}",0.9672293942403176
57311,"@Override public void mouseOut(Pick pick){
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  selectionManager.removeFromType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.NORMAL);
  pathwayPathRenderer.setDisplayListDirty();
}","@Override public void mouseOut(Pick pick){
  if (!node.isPickable())   return;
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  selectionManager.removeFromType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.NORMAL);
  pathwayPathRenderer.setDisplayListDirty();
}",0.9570405727923628
57312,"@Override public void mouseOver(Pick pick){
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
  geneSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.addToType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.MOUSE_OVER);
  pathwayPathRenderer.setDisplayListDirty();
}","@Override public void mouseOver(Pick pick){
  if (!node.isPickable())   return;
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
  geneSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.addToType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.MOUSE_OVER);
  pathwayPathRenderer.setDisplayListDirty();
}",0.97196261682243
57313,"@Override public void clicked(Pick pick){
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
  geneSelectionManager.clearSelection(SelectionType.SELECTION);
  selectionManager.clearSelection(SelectionType.SELECTION);
  selectionManager.addToType(SelectionType.SELECTION,node.getPrimaryPathwayVertexRep().getName().hashCode());
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.SELECTION);
  pathwayPathRenderer.setDisplayListDirty();
}","@Override public void clicked(Pick pick){
  if (!node.isPickable())   return;
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
  geneSelectionManager.clearSelection(SelectionType.SELECTION);
  selectionManager.clearSelection(SelectionType.SELECTION);
  selectionManager.addToType(SelectionType.SELECTION,node.getPrimaryPathwayVertexRep().getName().hashCode());
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.SELECTION);
  pathwayPathRenderer.setDisplayListDirty();
}",0.9716981132075472
57314,"@Override protected void init(){
  pickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      ALinearizableNode branchNode=node;
      while (branchNode.getParentNode() != null) {
        branchNode=branchNode.getParentNode();
      }
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
      geneSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.clearSelection(SelectionType.MOUSE_OVER);
      pathwayPathRenderer.selectBranch(branchNode);
    }
    @Override public void mouseOver(    Pick pick){
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      selectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.addToType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.MOUSE_OVER);
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      selectionManager.removeFromType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.NORMAL);
      pathwayPathRenderer.setDisplayListDirty();
    }
  }
;
  view.addIDPickingListener(pickingListener,EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
}","@Override protected void init(){
  pickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      if (!node.isPickable())       return;
      ALinearizableNode branchNode=node;
      while (branchNode.getParentNode() != null) {
        branchNode=branchNode.getParentNode();
      }
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
      geneSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.clearSelection(SelectionType.MOUSE_OVER);
      pathwayPathRenderer.selectBranch(branchNode);
    }
    @Override public void mouseOver(    Pick pick){
      if (!node.isPickable())       return;
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      selectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.addToType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.MOUSE_OVER);
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      if (!node.isPickable())       return;
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      selectionManager.removeFromType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.NORMAL);
      pathwayPathRenderer.setDisplayListDirty();
    }
  }
;
  view.addIDPickingListener(pickingListener,EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
}",0.9627959413754228
57315,"@Override public void mouseOut(Pick pick){
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  selectionManager.removeFromType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.NORMAL);
  pathwayPathRenderer.setDisplayListDirty();
}","@Override public void mouseOut(Pick pick){
  if (!node.isPickable())   return;
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  selectionManager.removeFromType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.NORMAL);
  pathwayPathRenderer.setDisplayListDirty();
}",0.9570405727923628
57316,"@Override public void mouseOver(Pick pick){
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  selectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.addToType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.MOUSE_OVER);
  pathwayPathRenderer.setDisplayListDirty();
}","@Override public void mouseOver(Pick pick){
  if (!node.isPickable())   return;
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  selectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.addToType(SelectionType.MOUSE_OVER,node.getPrimaryPathwayVertexRep().getName().hashCode());
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.MOUSE_OVER);
  pathwayPathRenderer.setDisplayListDirty();
}",0.9625
57317,"@Override public void clicked(Pick pick){
  ALinearizableNode branchNode=node;
  while (branchNode.getParentNode() != null) {
    branchNode=branchNode.getParentNode();
  }
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
  geneSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.clearSelection(SelectionType.MOUSE_OVER);
  pathwayPathRenderer.selectBranch(branchNode);
}","@Override public void clicked(Pick pick){
  if (!node.isPickable())   return;
  ALinearizableNode branchNode=node;
  while (branchNode.getParentNode() != null) {
    branchNode=branchNode.getParentNode();
  }
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  EventBasedSelectionManager geneSelectionManager=pathwayPathRenderer.getGeneSelectionManager();
  geneSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.clearSelection(SelectionType.MOUSE_OVER);
  pathwayPathRenderer.selectBranch(branchNode);
}",0.9679715302491104
57318,"@Override protected void init(){
  pickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      metaboliteSelectionManager.clearSelection(SelectionType.SELECTION);
      selectionManager.clearSelection(SelectionType.SELECTION);
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.addToType(SelectionType.SELECTION,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.SELECTION);
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      metaboliteSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.clearSelection(SelectionType.MOUSE_OVER);
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.addToType(SelectionType.MOUSE_OVER,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.MOUSE_OVER);
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      pathwayPathRenderer.setDisplayListDirty();
    }
  }
;
  view.addIDPickingListener(pickingListener,EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
}","@Override protected void init(){
  pickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      if (!node.isPickable())       return;
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      metaboliteSelectionManager.clearSelection(SelectionType.SELECTION);
      selectionManager.clearSelection(SelectionType.SELECTION);
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.addToType(SelectionType.SELECTION,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.SELECTION);
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      if (!node.isPickable())       return;
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      metaboliteSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.clearSelection(SelectionType.MOUSE_OVER);
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.addToType(SelectionType.MOUSE_OVER,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      node.setSelectionType(SelectionType.MOUSE_OVER);
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      if (!node.isPickable())       return;
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      pathwayPathRenderer.setDisplayListDirty();
    }
  }
;
  view.addIDPickingListener(pickingListener,EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
}",0.9689849624060152
57319,"@Override public void mouseOut(Pick pick){
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  pathwayPathRenderer.setDisplayListDirty();
}","@Override public void mouseOut(Pick pick){
  if (!node.isPickable())   return;
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  pathwayPathRenderer.setDisplayListDirty();
}",0.955334987593052
57320,"@Override public void mouseOver(Pick pick){
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  metaboliteSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.clearSelection(SelectionType.MOUSE_OVER);
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.addToType(SelectionType.MOUSE_OVER,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.MOUSE_OVER);
  pathwayPathRenderer.setDisplayListDirty();
}","@Override public void mouseOver(Pick pick){
  if (!node.isPickable())   return;
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  metaboliteSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.clearSelection(SelectionType.MOUSE_OVER);
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.addToType(SelectionType.MOUSE_OVER,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.MOUSE_OVER);
  pathwayPathRenderer.setDisplayListDirty();
}",0.9739507959479016
57321,"@Override public void clicked(Pick pick){
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  metaboliteSelectionManager.clearSelection(SelectionType.SELECTION);
  selectionManager.clearSelection(SelectionType.SELECTION);
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.addToType(SelectionType.SELECTION,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.SELECTION);
  pathwayPathRenderer.setDisplayListDirty();
}","@Override public void clicked(Pick pick){
  if (!node.isPickable())   return;
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  metaboliteSelectionManager.clearSelection(SelectionType.SELECTION);
  selectionManager.clearSelection(SelectionType.SELECTION);
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.addToType(SelectionType.SELECTION,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  node.setSelectionType(SelectionType.SELECTION);
  pathwayPathRenderer.setDisplayListDirty();
}",0.9737226277372264
57322,"@Override protected void init(){
  pickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      ALinearizableNode branchNode=node;
      while (branchNode.getParentNode() != null) {
        branchNode=branchNode.getParentNode();
      }
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      pathwayPathRenderer.selectBranch(branchNode);
    }
    @Override public void mouseOver(    Pick pick){
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      metaboliteSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.clearSelection(SelectionType.MOUSE_OVER);
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.addToType(SelectionType.MOUSE_OVER,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      pathwayPathRenderer.setDisplayListDirty();
    }
  }
;
  view.addIDPickingListener(pickingListener,EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
}","@Override protected void init(){
  pickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      if (!node.isPickable())       return;
      ALinearizableNode branchNode=node;
      while (branchNode.getParentNode() != null) {
        branchNode=branchNode.getParentNode();
      }
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      pathwayPathRenderer.selectBranch(branchNode);
    }
    @Override public void mouseOver(    Pick pick){
      if (!node.isPickable())       return;
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
      metaboliteSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
      selectionManager.clearSelection(SelectionType.MOUSE_OVER);
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.addToType(SelectionType.MOUSE_OVER,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      pathwayPathRenderer.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      if (!node.isPickable())       return;
      EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
      for (      Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
        selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
      }
      selectionManager.triggerSelectionUpdateEvent();
      pathwayPathRenderer.setDisplayListDirty();
    }
  }
;
  view.addIDPickingListener(pickingListener,EPickingType.LINEARIZABLE_NODE.name(),node.hashCode());
}",0.9656964656964656
57323,"@Override public void mouseOut(Pick pick){
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  pathwayPathRenderer.setDisplayListDirty();
}","@Override public void mouseOut(Pick pick){
  if (!node.isPickable())   return;
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  pathwayPathRenderer.setDisplayListDirty();
}",0.955334987593052
57324,"@Override public void mouseOver(Pick pick){
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  metaboliteSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.clearSelection(SelectionType.MOUSE_OVER);
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.addToType(SelectionType.MOUSE_OVER,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  pathwayPathRenderer.setDisplayListDirty();
}","@Override public void mouseOver(Pick pick){
  if (!node.isPickable())   return;
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  EventBasedSelectionManager metaboliteSelectionManager=pathwayPathRenderer.getMetaboliteSelectionManager();
  metaboliteSelectionManager.clearSelection(SelectionType.MOUSE_OVER);
  selectionManager.clearSelection(SelectionType.MOUSE_OVER);
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.addToType(SelectionType.MOUSE_OVER,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  pathwayPathRenderer.setDisplayListDirty();
}",0.971875
57325,"@Override public void clicked(Pick pick){
  ALinearizableNode branchNode=node;
  while (branchNode.getParentNode() != null) {
    branchNode=branchNode.getParentNode();
  }
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  pathwayPathRenderer.selectBranch(branchNode);
}","@Override public void clicked(Pick pick){
  if (!node.isPickable())   return;
  ALinearizableNode branchNode=node;
  while (branchNode.getParentNode() != null) {
    branchNode=branchNode.getParentNode();
  }
  EventBasedSelectionManager selectionManager=pathwayPathRenderer.getGeneSelectionManager();
  for (  Integer davidId : node.getPrimaryPathwayVertexRep().getDavidIDs()) {
    selectionManager.removeFromType(SelectionType.MOUSE_OVER,davidId);
  }
  selectionManager.triggerSelectionUpdateEvent();
  pathwayPathRenderer.selectBranch(branchNode);
}",0.9664179104477612
57326,"@Override public void rightClicked(Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  PathwayVertexRep vertexRep=pathwayItemManager.getPathwayVertexRep(pick.getObjectID());
  if (vertexRep.getType() == EPathwayVertexType.map) {
    LoadPathwaysByPathwayItem menuItem=new LoadPathwaysByPathwayItem(PathwayManager.get().getPathwayByTitle(vertexRep.getName(),EPathwayDatabaseType.KEGG),dataDomain.getDataDomainID());
    contextMenuCreator.addContextMenuItem(menuItem);
  }
 else   if (vertexRep.getType() == EPathwayVertexType.gene) {
    for (    PathwayVertex pathwayVertex : vertexRep.getPathwayVertices()) {
      for (      Integer davidID : pathwayItemManager.getDavidIdByPathwayVertex(pathwayVertex)) {
        GeneMenuItemContainer contexMenuItemContainer=new GeneMenuItemContainer();
        contexMenuItemContainer.setDataDomain(dataDomain);
        contexMenuItemContainer.setData(pathwayDataDomain.getDavidIDType(),davidID);
        contextMenuCreator.addContextMenuItemContainer(contexMenuItemContainer);
      }
    }
    for (    VertexRepBasedContextMenuItem item : addedContextMenuItems) {
      item.setVertexRep(vertexRep);
      contextMenuCreator.addContextMenuItem(item);
    }
  }
}","@Override public void rightClicked(Pick pick){
  if (detailLevel == EDetailLevel.VERY_LOW) {
    return;
  }
  PathwayVertexRep vertexRep=pathwayItemManager.getPathwayVertexRep(pick.getObjectID());
  if (vertexRep.getType() == EPathwayVertexType.map) {
    LoadPathwaysByPathwayItem menuItem=new LoadPathwaysByPathwayItem(PathwayManager.get().getPathwayByTitle(vertexRep.getName(),EPathwayDatabaseType.KEGG),dataDomain.getDataDomainID());
    contextMenuCreator.addContextMenuItem(menuItem);
  }
 else   if (vertexRep.getType() == EPathwayVertexType.gene) {
    if (!isRenderedRemote()) {
      for (      PathwayVertex pathwayVertex : vertexRep.getPathwayVertices()) {
        for (        Integer davidID : pathwayItemManager.getDavidIdByPathwayVertex(pathwayVertex)) {
          GeneMenuItemContainer contexMenuItemContainer=new GeneMenuItemContainer();
          contexMenuItemContainer.setDataDomain(dataDomain);
          contexMenuItemContainer.setData(pathwayDataDomain.getDavidIDType(),davidID);
          contextMenuCreator.addContextMenuItemContainer(contexMenuItemContainer);
        }
      }
    }
    for (    VertexRepBasedContextMenuItem item : addedContextMenuItems) {
      item.setVertexRep(vertexRep);
      contextMenuCreator.addContextMenuItem(item);
    }
  }
}",0.974134500596896
57327,"protected void registerPickingListeners(){
  addTypePickingListener(new APickingListener(){
    @Override public void mouseOver(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      handlePathwayElementSelection(SelectionType.MOUSE_OVER,pick.getObjectID());
    }
    @Override public void clicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      if (glRemoteRenderingView != null && glRemoteRenderingView.getViewType().equals(""String_Node_Str""))       return;
      handlePathwayElementSelection(SelectionType.SELECTION,pick.getObjectID());
    }
    @Override public void doubleClicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      PathwayVertexRep vertexRep=pathwayItemManager.getPathwayVertexRep(pick.getObjectID());
      if (vertexRep.getType() == EPathwayVertexType.map) {
        PathwayGraph pathway=PathwayManager.get().getPathwayByTitle(vertexRep.getName(),EPathwayDatabaseType.KEGG);
        if (pathway != null) {
          LoadPathwayEvent event=new LoadPathwayEvent();
          event.setSender(this);
          event.setPathwayID(pathway.getID());
          event.setEventSpace(dataDomain.getDataDomainID());
          GeneralManager.get().getEventPublisher().triggerEvent(event);
        }
      }
 else {
      }
      handlePathwayElementSelection(SelectionType.SELECTION,pick.getObjectID());
    }
    @Override public void rightClicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      PathwayVertexRep vertexRep=pathwayItemManager.getPathwayVertexRep(pick.getObjectID());
      if (vertexRep.getType() == EPathwayVertexType.map) {
        LoadPathwaysByPathwayItem menuItem=new LoadPathwaysByPathwayItem(PathwayManager.get().getPathwayByTitle(vertexRep.getName(),EPathwayDatabaseType.KEGG),dataDomain.getDataDomainID());
        contextMenuCreator.addContextMenuItem(menuItem);
      }
 else       if (vertexRep.getType() == EPathwayVertexType.gene) {
        for (        PathwayVertex pathwayVertex : vertexRep.getPathwayVertices()) {
          for (          Integer davidID : pathwayItemManager.getDavidIdByPathwayVertex(pathwayVertex)) {
            GeneMenuItemContainer contexMenuItemContainer=new GeneMenuItemContainer();
            contexMenuItemContainer.setDataDomain(dataDomain);
            contexMenuItemContainer.setData(pathwayDataDomain.getDavidIDType(),davidID);
            contextMenuCreator.addContextMenuItemContainer(contexMenuItemContainer);
          }
        }
        for (        VertexRepBasedContextMenuItem item : addedContextMenuItems) {
          item.setVertexRep(vertexRep);
          contextMenuCreator.addContextMenuItem(item);
        }
      }
    }
  }
,EPickingType.PATHWAY_ELEMENT_SELECTION.name());
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      if (allPaths == null || allPaths.size() <= pick.getObjectID())       return;
      if (allPaths.size() <= selectedPathID)       selectedPathID=0;
      selectedPath=allPaths.get(selectedPathID);
      setDisplayListDirty();
      triggerPathUpdate();
    }
  }
,EPickingType.PATHWAY_PATH_SELECTION.name());
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      handlePathwayTextureSelection(SelectionType.SELECTION);
      int pickX=(int)pick.getPickedPoint().getX();
      int pickY=(int)pick.getPickedPoint().getY();
      float pathwayTextureScaling=1;
      int iImageWidth=pathway.getWidth();
      int iImageHeight=pathway.getHeight();
      if (iImageWidth == -1 || iImageHeight == -1) {
        Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str""));
      }
      pathwayTextureScaling=pathway.getHeight() / (float)pixelGLConverter.getPixelHeightForGLHeight(viewFrustum.getHeight());
      pickX=(int)((pickX - pixelGLConverter.getPixelWidthForGLWidth(vecTranslation.x())) * pathwayTextureScaling);
      pickY=(int)((pickY - pixelGLConverter.getPixelHeightForGLHeight(vecTranslation.y())) * pathwayTextureScaling);
      int[] pixels=bubbleSet.getBubbleSetGLRenderer().getPxl(pickX,pickX);
      int alpha=(pixels[0] >> 24) & 0xff;
      int red=(pixels[0] >> 16) & 0xff;
      int green=(pixels[0] >> 8) & 0xff;
      int blue=(pixels[0]) & 0xff;
      List<org.caleydo.core.util.color.Color> colorTable=(ColorManager.get()).getColorList(""String_Node_Str"");
      float[] cComponents=new float[4];
      for (int i=0; i < colorTable.size() - 2; i++) {
        org.caleydo.core.util.color.Color c=colorTable.get(i);
        int threshold=10;
        cComponents=c.getRGB();
        if (red > (int)(cComponents[0] * 255f) - threshold && red < (int)(cComponents[0] * 255f) + threshold) {
          System.out.println(""String_Node_Str"" + i);
          selectedPathID=i;
          if (selectedPathID > allPaths.size() - 1)           selectedPathID=allPaths.size() - 1;
          selectedPath=allPaths.get(selectedPathID);
          isBubbleTextureDirty=true;
          setDisplayListDirty();
          triggerPathUpdate();
          i=colorTable.size();
        }
      }
    }
  }
,EPickingType.PATHWAY_TEXTURE_SELECTION.name());
}","protected void registerPickingListeners(){
  addTypePickingListener(new APickingListener(){
    @Override public void mouseOver(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      handlePathwayElementSelection(SelectionType.MOUSE_OVER,pick.getObjectID());
    }
    @Override public void clicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      if (glRemoteRenderingView != null && glRemoteRenderingView.getViewType().equals(""String_Node_Str""))       return;
      handlePathwayElementSelection(SelectionType.SELECTION,pick.getObjectID());
    }
    @Override public void doubleClicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      PathwayVertexRep vertexRep=pathwayItemManager.getPathwayVertexRep(pick.getObjectID());
      if (vertexRep.getType() == EPathwayVertexType.map) {
        PathwayGraph pathway=PathwayManager.get().getPathwayByTitle(vertexRep.getName(),EPathwayDatabaseType.KEGG);
        if (pathway != null) {
          LoadPathwayEvent event=new LoadPathwayEvent();
          event.setSender(this);
          event.setPathwayID(pathway.getID());
          event.setEventSpace(dataDomain.getDataDomainID());
          GeneralManager.get().getEventPublisher().triggerEvent(event);
        }
      }
 else {
      }
      handlePathwayElementSelection(SelectionType.SELECTION,pick.getObjectID());
    }
    @Override public void rightClicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      PathwayVertexRep vertexRep=pathwayItemManager.getPathwayVertexRep(pick.getObjectID());
      if (vertexRep.getType() == EPathwayVertexType.map) {
        LoadPathwaysByPathwayItem menuItem=new LoadPathwaysByPathwayItem(PathwayManager.get().getPathwayByTitle(vertexRep.getName(),EPathwayDatabaseType.KEGG),dataDomain.getDataDomainID());
        contextMenuCreator.addContextMenuItem(menuItem);
      }
 else       if (vertexRep.getType() == EPathwayVertexType.gene) {
        if (!isRenderedRemote()) {
          for (          PathwayVertex pathwayVertex : vertexRep.getPathwayVertices()) {
            for (            Integer davidID : pathwayItemManager.getDavidIdByPathwayVertex(pathwayVertex)) {
              GeneMenuItemContainer contexMenuItemContainer=new GeneMenuItemContainer();
              contexMenuItemContainer.setDataDomain(dataDomain);
              contexMenuItemContainer.setData(pathwayDataDomain.getDavidIDType(),davidID);
              contextMenuCreator.addContextMenuItemContainer(contexMenuItemContainer);
            }
          }
        }
        for (        VertexRepBasedContextMenuItem item : addedContextMenuItems) {
          item.setVertexRep(vertexRep);
          contextMenuCreator.addContextMenuItem(item);
        }
      }
    }
  }
,EPickingType.PATHWAY_ELEMENT_SELECTION.name());
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      if (allPaths == null || allPaths.size() <= pick.getObjectID())       return;
      if (allPaths.size() <= selectedPathID)       selectedPathID=0;
      selectedPath=allPaths.get(selectedPathID);
      setDisplayListDirty();
      triggerPathUpdate();
    }
  }
,EPickingType.PATHWAY_PATH_SELECTION.name());
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      handlePathwayTextureSelection(SelectionType.SELECTION);
      int pickX=(int)pick.getPickedPoint().getX();
      int pickY=(int)pick.getPickedPoint().getY();
      float pathwayTextureScaling=1;
      int iImageWidth=pathway.getWidth();
      int iImageHeight=pathway.getHeight();
      if (iImageWidth == -1 || iImageHeight == -1) {
        Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str""));
      }
      pathwayTextureScaling=pathway.getHeight() / (float)pixelGLConverter.getPixelHeightForGLHeight(viewFrustum.getHeight());
      pickX=(int)((pickX - pixelGLConverter.getPixelWidthForGLWidth(vecTranslation.x())) * pathwayTextureScaling);
      pickY=(int)((pickY - pixelGLConverter.getPixelHeightForGLHeight(vecTranslation.y())) * pathwayTextureScaling);
      int[] pixels=bubbleSet.getBubbleSetGLRenderer().getPxl(pickX,pickX);
      int alpha=(pixels[0] >> 24) & 0xff;
      int red=(pixels[0] >> 16) & 0xff;
      int green=(pixels[0] >> 8) & 0xff;
      int blue=(pixels[0]) & 0xff;
      List<org.caleydo.core.util.color.Color> colorTable=(ColorManager.get()).getColorList(""String_Node_Str"");
      float[] cComponents=new float[4];
      for (int i=0; i < colorTable.size() - 2; i++) {
        org.caleydo.core.util.color.Color c=colorTable.get(i);
        int threshold=10;
        cComponents=c.getRGB();
        if (red > (int)(cComponents[0] * 255f) - threshold && red < (int)(cComponents[0] * 255f) + threshold) {
          System.out.println(""String_Node_Str"" + i);
          selectedPathID=i;
          if (selectedPathID > allPaths.size() - 1)           selectedPathID=allPaths.size() - 1;
          selectedPath=allPaths.get(selectedPathID);
          isBubbleTextureDirty=true;
          setDisplayListDirty();
          triggerPathUpdate();
          i=colorTable.size();
        }
      }
    }
  }
,EPickingType.PATHWAY_TEXTURE_SELECTION.name());
}",0.9931060534516952
57328,"private void calculatePathwayScaling(final GL2 gl,final PathwayGraph pathway){
  if (hashGLcontext2TextureManager.get(gl) == null)   return;
  int pathwayPixelWidth=pathway.getWidth();
  int pathwayPixelHeight=pathway.getHeight();
  if (pathwayPixelWidth == -1 || pathwayPixelHeight == -1) {
    Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str""));
  }
  float pathwayWidth=pixelGLConverter.getGLWidthForPixelWidth(pathwayPixelWidth);
  float pathwayHeight=pixelGLConverter.getGLHeightForPixelHeight(pathwayPixelHeight);
  float viewFrustumWidth=viewFrustum.getRight() - viewFrustum.getLeft();
  float viewFrustumHeight=viewFrustum.getTop() - viewFrustum.getBottom();
  float pathwayAspectRatio=pathwayWidth / pathwayHeight;
  float viewFrustumAspectRatio=viewFrustumWidth / viewFrustumHeight;
  boolean pathwayFitsViewFrustum=true;
  if (isRenderedRemote()) {
    if (viewFrustumAspectRatio < pathwayAspectRatio && pathwayWidth > viewFrustumWidth) {
      vecScaling.setX((viewFrustum.getRight() - viewFrustum.getLeft()) / pathwayWidth);
      vecScaling.setY(vecScaling.x());
      vecTranslation.set((viewFrustum.getRight() - viewFrustum.getLeft() - pathwayWidth * vecScaling.x()) / 2.0f,(viewFrustum.getTop() - viewFrustum.getBottom() - pathwayHeight * vecScaling.y()) / 2.0f,0);
      pathwayFitsViewFrustum=false;
    }
    if (viewFrustumAspectRatio >= pathwayAspectRatio && pathwayHeight > viewFrustumHeight) {
      vecScaling.setY((viewFrustum.getTop() - viewFrustum.getBottom()) / pathwayHeight);
      vecScaling.setX(vecScaling.y());
      vecTranslation.set((viewFrustum.getRight() - viewFrustum.getLeft() - pathwayWidth * vecScaling.x()) / 2.0f,(viewFrustum.getTop() - viewFrustum.getBottom() - pathwayHeight * vecScaling.y()) / 2.0f,0);
      pathwayFitsViewFrustum=false;
    }
    if (pathwayFitsViewFrustum) {
      vecScaling.set(1,1,1f);
      vecTranslation.set((viewFrustum.getRight() - viewFrustum.getLeft()) / 2.0f - pathwayWidth / 2.0f,(viewFrustum.getTop() - viewFrustum.getBottom()) / 2.0f - pathwayHeight / 2.0f,0);
    }
  }
  if (pathwayWidth < viewFrustumWidth) {
    vecTranslation.setX((viewFrustumWidth - pathwayWidth) / 2.0f);
  }
  if (pathwayHeight < viewFrustumWidth) {
    vecTranslation.setY((viewFrustumHeight - pathwayHeight) / 2.0f);
  }
}","private void calculatePathwayScaling(final GL2 gl,final PathwayGraph pathway){
  if (hashGLcontext2TextureManager.get(gl) == null)   return;
  int pathwayPixelWidth=pathway.getWidth();
  int pathwayPixelHeight=pathway.getHeight();
  if (pathwayPixelWidth == -1 || pathwayPixelHeight == -1) {
    Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str""));
  }
  float pathwayWidth=pixelGLConverter.getGLWidthForPixelWidth(pathwayPixelWidth);
  float pathwayHeight=pixelGLConverter.getGLHeightForPixelHeight(pathwayPixelHeight);
  float viewFrustumWidth=viewFrustum.getRight() - viewFrustum.getLeft();
  float viewFrustumHeight=viewFrustum.getTop() - viewFrustum.getBottom();
  float pathwayAspectRatio=pathwayWidth / pathwayHeight;
  float viewFrustumAspectRatio=viewFrustumWidth / viewFrustumHeight;
  if (isRenderedRemote()) {
    float renderWidth;
    float renderHeight;
    if (pathwayWidth <= viewFrustumWidth && pathwayHeight <= viewFrustumHeight) {
      vecScaling.set(1,1,1f);
      renderWidth=pathwayWidth;
      renderHeight=pathwayHeight;
    }
 else {
      if (viewFrustumAspectRatio > pathwayAspectRatio) {
        renderWidth=(viewFrustumHeight / pathwayHeight) * pathwayWidth;
        renderHeight=viewFrustumHeight;
      }
 else {
        renderWidth=viewFrustumWidth;
        renderHeight=(viewFrustumWidth / pathwayWidth) * pathwayHeight;
      }
      vecScaling.set(renderWidth / pathwayWidth,renderHeight / pathwayHeight,1);
    }
    vecTranslation.set((viewFrustumWidth - renderWidth) / 2.0f,(viewFrustumHeight - renderHeight) / 2.0f,0);
    return;
  }
  if (pathwayWidth < viewFrustumWidth) {
    vecTranslation.setX((viewFrustumWidth - pathwayWidth) / 2.0f);
  }
  if (pathwayHeight < viewFrustumWidth) {
    vecTranslation.setY((viewFrustumHeight - pathwayHeight) / 2.0f);
  }
}",0.578143930215653
57329,"@Override protected void renderContent(GL2 gl){
  if (!ensureValidRenderer())   return;
  super.renderContent(gl);
}","@Override protected void renderContent(GL2 gl){
  if (!isLazyViewCreation) {
    for (    ARendererInfo info : rendererInfos.values()) {
      if (info instanceof ViewInfo) {
        ViewInfo viewInfo=(ViewInfo)info;
        if (!viewInfo.isInitialized) {
          viewInfo.init();
        }
      }
    }
  }
  if (!ensureValidRenderer())   return;
  super.renderContent(gl);
}",0.4686868686868687
57330,"protected void onMainPick(Pick pick){
  IMouseLayer m=context.getMouseLayer();
switch (pick.getPickingMode()) {
case MOUSE_OVER:
    if (!pick.isDoDragging() && m.hasDraggable(ARankColumnModel.class)) {
      Pair<GLElement,ARankColumnModel> pair=m.getFirstDraggable(ARankColumnModel.class);
      if (model.isCombineAble(pair.getSecond())) {
        m.setDropable(ARankColumnModel.class,true);
        this.armDropColum=true;
        armDropHint=model.getTable().getConfig().getCombineStringHint(model,pair.getSecond());
        repaint();
      }
    }
 else     if (!pick.isAnyDragging()) {
      this.canDrag=true;
      this.relayout();
    }
  break;
case MOUSE_OUT:
if (armDropColum) {
  this.armDropColum=false;
  m.setDropable(ARankColumnModel.class,false);
  repaint();
}
if (this.canDrag) {
this.canDrag=false;
this.relayout();
}
break;
case MOUSE_RELEASED:
if (this.armDropColum) {
Pair<GLElement,ARankColumnModel> info=m.getFirstDraggable(ARankColumnModel.class);
m.removeDraggable(info.getFirst());
context.setCursor(-1);
if (info != null) model.combine(info.getSecond());
}
break;
default :
break;
}
}","protected void onMainPick(Pick pick){
  IMouseLayer m=context.getMouseLayer();
switch (pick.getPickingMode()) {
case MOUSE_OVER:
    if (!pick.isDoDragging() && m.hasDraggable(ARankColumnModel.class)) {
      Pair<GLElement,ARankColumnModel> pair=m.getFirstDraggable(ARankColumnModel.class);
      if (model.isCombineAble(pair.getSecond())) {
        m.setDropable(ARankColumnModel.class,true);
        this.armDropColum=true;
        armDropHint=model.getTable().getConfig().getCombineStringHint(model,pair.getSecond());
        repaint();
      }
    }
 else     if (!pick.isAnyDragging()) {
      this.canDrag=true;
      this.relayout();
    }
  break;
case MOUSE_OUT:
if (armDropColum) {
  this.armDropColum=false;
  m.setDropable(ARankColumnModel.class,false);
  repaint();
}
if (this.canDrag) {
this.canDrag=false;
this.relayout();
}
break;
case MOUSE_RELEASED:
if (this.armDropColum) {
Pair<GLElement,ARankColumnModel> info=m.getFirstDraggable(ARankColumnModel.class);
m.removeDraggable(info.getFirst());
m.setDropable(ARankColumnModel.class,false);
context.setCursor(-1);
if (info != null) model.combine(info.getSecond());
}
break;
default :
break;
}
}",0.9802371541501976
57331,"@Override public SimpleHistogram getHist(int bins){
  if (cacheHist != null)   return cacheHist;
  return cacheHist=DataUtils.getHist(bins,parent.getCurrentOrder(),this);
}","@Override public SimpleHistogram getHist(int bins){
  if (cacheHist != null && cacheHist.size() == bins)   return cacheHist;
  return cacheHist=DataUtils.getHist(bins,parent.getCurrentOrder(),this);
}",0.9247311827956988
57332,"/** 
 * the duration of the hightligh animation
 * @param delta
 * @return
 */
public static int hightlightAnimationDuration(int delta){
  return delta == Integer.MIN_VALUE ? 2000 : Math.min(Math.abs(delta) * 400,2000);
}","/** 
 * the duration of the highlight animation
 * @param delta the number of ranks the item moved up,  {@link Integer#MIN_VALUE} if it was not visible before
 * @return
 */
public static int hightlightAnimationDuration(int delta){
  return delta == Integer.MIN_VALUE ? 2000 : Math.min(Math.abs(delta) * 400,2000);
}",0.8044692737430168
57333,"@Override public void render(GLGraphics g,float w,float h,GLElement parent){
  final IRow r=parent.getLayoutDataAs(IRow.class,null);
  MultiFloat v=model.getSplittedValue(r);
  Color[] colors=model.getColors();
  if (v.repr >= 0) {
    boolean selected=model.getTable().getSelectedRow() == r;
    float[] heights=layout.compute(v.size(),v.repr,h * 0.8f);
    float y=h * 0.1f;
    for (int i=0; i < heights.length; ++i) {
      if (v.values[i] <= 0 || Float.isNaN(v.values[i]))       continue;
      float hi=heights[i];
      if (hi <= 0)       continue;
      g.color(colors[i]).fillRect(0,y,w * v.values[i],hi);
      if (selected) {
        ARankColumnModel modeli=model.get(i);
        String text=(modeli instanceof IMappedColumnMixin) ? ((IMappedColumnMixin)modeli).getRawValue(r) : Formatter.formatNumber(v.values[i]);
        ScoreBarRenderer.renderLabel(g,y,w,hi * 0.8f,text,v.values[i],parent);
      }
      y+=hi;
    }
  }
}","@Override public void render(GLGraphics g,float w,float h,GLElement parent){
  final IRow r=parent.getLayoutDataAs(IRow.class,null);
  MultiFloat v=model.getSplittedValue(r);
  if (v.repr < 0)   return;
  if (getRenderInfo(parent).isCollapsed()) {
    g.color(1 - v.get(),1 - v.get(),1 - v.get(),1);
    g.fillRect(w * 0.1f,h * 0.1f,w * 0.8f,h * 0.8f);
    return;
  }
  Color[] colors=model.getColors();
  if (v.repr >= 0) {
    boolean selected=model.getTable().getSelectedRow() == r;
    float[] heights=layout.compute(v.size(),v.repr,h * 0.8f);
    float y=h * 0.1f;
    for (int i=0; i < heights.length; ++i) {
      if (v.values[i] <= 0 || Float.isNaN(v.values[i]))       continue;
      float hi=heights[i];
      if (hi <= 0)       continue;
      g.color(colors[i]).fillRect(0,y,w * v.values[i],hi);
      if (selected) {
        ARankColumnModel modeli=model.get(i);
        String text=(modeli instanceof IMappedColumnMixin) ? ((IMappedColumnMixin)modeli).getRawValue(r) : Formatter.formatNumber(v.values[i]);
        float hli=getTextHeight(hi);
        ScoreBarRenderer.renderLabel(g,y + (hi - hli) * 0.5f,w,hli,text,v.values[i],parent);
      }
      y+=hi;
    }
  }
}",0.8769448373408769
57334,"private static IColumnRenderInfo getRenderInfo(GLElement parent){
  return (IColumnRenderInfo)parent.getParent();
}","static IColumnRenderInfo getRenderInfo(GLElement parent){
  return (IColumnRenderInfo)parent.getParent();
}",0.963963963963964
57335,"static void renderLabel(GLGraphics g,float y,float w,float h,String text,float v,GLElement parent){
  if (h < 7)   return;
  float tw=g.text.getTextWidth(text,h);
  boolean hasFreeSpace=getRenderInfo(parent).hasFreeSpace();
  VAlign alignment=getRenderInfo(parent).getAlignment();
  g.drawText(text,2,y,(hasFreeSpace && alignment == VAlign.LEFT) ? w : v - 2,h,VAlign.LEFT);
}","static void renderLabel(GLGraphics g,float y,float w,float h,String text,float v,GLElement parent){
  if (h < 5)   return;
  float tw=g.text.getTextWidth(text,h);
  boolean hasFreeSpace=getRenderInfo(parent).hasFreeSpace();
  VAlign alignment=getRenderInfo(parent).getAlignment();
  g.drawText(text,2,y,(hasFreeSpace && alignment == VAlign.LEFT) ? w : (v * w) - 2,h,VAlign.LEFT);
}",0.9894179894179894
57336,"static void renderValue(GLGraphics g,float w,float h,GLElement parent,final IRow r,float v,boolean inferred,IRankableColumnMixin model,boolean align,Color color,Color collapseColor){
  if (getRenderInfo(parent).isCollapsed()) {
    if (collapseColor == null)     g.color(1 - v,1 - v,1 - v,1);
 else {
      float[] rgb=collapseColor.getColorComponents(null);
      g.color(rgb[0],rgb[1],rgb[2],v);
    }
    g.fillRect(w * 0.1f,h * 0.1f,w * 0.8f,h * 0.8f);
    if (inferred) {
      g.gl.glLineStipple(4,(short)0xAAAA);
      g.gl.glEnable(GL2.GL_LINE_STIPPLE);
      g.color(0,0,0,.5f).drawRect(w * 0.1f + 1,h * 0.1f + 1,w * 0.8f - 2,h * 0.8f - 2);
      g.gl.glDisable(GL2.GL_LINE_STIPPLE);
    }
  }
 else {
    g.color(color).fillRect(0,h * 0.1f,w * v,h * 0.8f);
    if (inferred) {
      g.gl.glLineStipple(1,(short)0xAAAA);
      g.gl.glEnable(GL2.GL_LINE_STIPPLE);
      g.color(0,0,0,.5f).drawRect(1,h * 0.1f + 1,w * v - 1,h * 0.8f - 2);
      g.gl.glDisable(GL2.GL_LINE_STIPPLE);
    }
    if (model.getTable().getSelectedRow() == r) {
      String text=(model instanceof IMappedColumnMixin) ? ((IMappedColumnMixin)model).getRawValue(r) : Formatter.formatNumber(v);
      float hi=Math.min(h * 0.45f,12);
      renderLabel(g,(h - hi) * 0.5f,w,hi,text,v,parent);
    }
  }
}","static void renderValue(GLGraphics g,float w,float h,GLElement parent,final IRow r,float v,boolean inferred,IRankableColumnMixin model,boolean align,Color color,Color collapseColor){
  if (getRenderInfo(parent).isCollapsed()) {
    if (collapseColor == null)     g.color(1 - v,1 - v,1 - v,1);
 else {
      float[] rgb=collapseColor.getColorComponents(null);
      g.color(rgb[0],rgb[1],rgb[2],v);
    }
    g.fillRect(w * 0.1f,h * 0.1f,w * 0.8f,h * 0.8f);
    if (inferred) {
      g.gl.glLineStipple(4,(short)0xAAAA);
      g.gl.glEnable(GL2.GL_LINE_STIPPLE);
      g.color(0,0,0,.5f).drawRect(w * 0.1f + 1,h * 0.1f + 1,w * 0.8f - 2,h * 0.8f - 2);
      g.gl.glDisable(GL2.GL_LINE_STIPPLE);
    }
  }
 else {
    g.color(color).fillRect(0,h * 0.1f,w * v,h * 0.8f);
    if (inferred) {
      g.gl.glLineStipple(1,(short)0xAAAA);
      g.gl.glEnable(GL2.GL_LINE_STIPPLE);
      g.color(0,0,0,.5f).drawRect(1,h * 0.1f + 1,w * v - 1,h * 0.8f - 2);
      g.gl.glDisable(GL2.GL_LINE_STIPPLE);
    }
    if (model.getTable().getSelectedRow() == r) {
      String text=(model instanceof IMappedColumnMixin) ? ((IMappedColumnMixin)model).getRawValue(r) : Formatter.formatNumber(v);
      float hi=getTextHeight(h);
      renderLabel(g,(h - hi) * 0.5f,w,hi,text,v,parent);
    }
  }
}",0.957779515246286
57337,"@Override protected void firstTime(float w,float h){
  System.out.println(hashCode() + ""String_Node_Str"" + animated.asElement().hashCode()+ ""String_Node_Str"");
}","@Override protected void firstTime(float w,float h){
}",0.5023255813953489
57338,"@Override protected void lastTime(){
  animated.setBounds(to);
  System.out.println(hashCode() + ""String_Node_Str"" + animated.asElement().hashCode()+ ""String_Node_Str""+ to);
}","@Override protected void lastTime(){
  animated.setBounds(to);
}",0.5355648535564853
57339,"@Override public void init(Vec4f from,Vec4f to){
  this.from=from;
  this.to=to;
  System.out.println(hashCode() + ""String_Node_Str"" + animated.asElement().hashCode()+ ""String_Node_Str""+ from+ ""String_Node_Str""+ to);
}","@Override public void init(Vec4f from,Vec4f to){
  this.from=from;
  this.to=to;
}",0.5466666666666666
57340,"public final void remove(GLElement child,int duration,IOutTransition animation){
}","public final void remove(GLElement child,IDuration duration,IOutTransition animation){
}",0.9529411764705882
57341,"private ALayoutAnimation createMoveAnimation(RecordingLayoutElement elem){
  if (!animateByDefault) {
    return new DummyAnimation(EAnimationType.MOVE,elem.wrappee);
  }
  final IDuration duration=elem.getLayoutDataAs(IDuration.class,Durations.DEFAULT);
  final IMoveTransition animation=elem.getLayoutDataAs(IMoveTransition.class,defaultMoveTransition);
  MoveAnimation anim=new MoveAnimation(0,duration,elem.wrappee,animation);
  return anim;
}","protected ALayoutAnimation createMoveAnimation(IGLLayoutElement elem){
  if (defaultDuration == Durations.NO) {
    return new DummyAnimation(EAnimationType.MOVE,elem);
  }
  final IDuration duration=elem.getLayoutDataAs(IDuration.class,defaultDuration);
  final IMoveTransition animation=elem.getLayoutDataAs(IMoveTransition.class,defaultMoveTransition);
  return new MoveAnimation(0,duration,elem,animation);
}",0.2188591385331781
57342,"/** 
 * animated adding of an element
 * @param child
 */
public final void add(GLElement child,int duration,IInTransition animation){
}","public final void add(GLElement child,IDuration duration,IInTransition animation){
}",0.7
57343,"/** 
 * @param animateByDefault setter, see  {@link animateByDefault}
 */
public AnimatedGLElementContainer setAnimateByDefault(boolean animateByDefault){
  this.animateByDefault=animateByDefault;
  return this;
}","/** 
 * @param animateByDefault setter, see  {@link animateByDefault}
 */
public AnimatedGLElementContainer setAnimateByDefault(boolean animateByDefault){
  this.defaultDuration=animateByDefault ? Durations.DEFAULT : Durations.NO;
  return this;
}",0.8565217391304348
57344,"public final void clear(int duration){
  List<GLElement> seenIn=new ArrayList<>(asSeenIn(0));
  for (  GLElement s : seenIn)   remove(s,duration);
}","public final void clear(IDuration duration){
  List<GLElement> seenIn=new ArrayList<>(asSeenIn(0));
  for (  GLElement s : seenIn)   remove(s,duration);
}",0.9735099337748344
57345,"@Override protected final void layout(){
  super.layout();
  Vec2f size=getSize();
  if (dirtyAnimation || forceLayout) {
    List<AAnimation> tmp=Lists.newArrayList(animations);
    Collection<GLElement> elems=asSeenIn(0);
    List<RecordingLayoutElement> l=new ArrayList<>(elems.size());
    for (    GLElement elem : elems) {
      if (elem.getVisibility() != EVisibility.NONE)       l.add(new RecordingLayoutElement(elem.layoutElement));
    }
    layout.doLayout(l,size.x(),size.y());
    outer:     for (    RecordingLayoutElement elem : l) {
      for (Iterator<AAnimation> ita=tmp.iterator(); ita.hasNext(); ) {
        AAnimation anim=ita.next();
        if (anim.getAnimated() == elem.wrappee && anim instanceof ALayoutAnimation) {
          ((ALayoutAnimation)anim).init(elem.before,elem.after);
          ita.remove();
          continue outer;
        }
      }
      if (elem.hasChanged()) {
        ALayoutAnimation anim=createMoveAnimation(elem);
        anim.init(elem.before,elem.after);
        animations.add(anim);
      }
    }
  }
}","@Override protected final void layout(){
  super.layout();
  Vec2f size=getSize();
  if (dirtyAnimation || forceLayout) {
    List<AAnimation> tmp=Lists.newArrayList(animations);
    Collection<GLElement> elems=asSeenIn(0);
    List<RecordingLayoutElement> l=new ArrayList<>(elems.size());
    for (    GLElement elem : elems) {
      if (elem.getVisibility() != EVisibility.NONE)       l.add(new RecordingLayoutElement(elem.layoutElement));
    }
    layout.doLayout(l,size.x(),size.y());
    outer:     for (    RecordingLayoutElement elem : l) {
      for (Iterator<AAnimation> ita=tmp.iterator(); ita.hasNext(); ) {
        AAnimation anim=ita.next();
        if (anim.getAnimated() == elem.wrappee && anim instanceof ALayoutAnimation) {
          ((ALayoutAnimation)anim).init(elem.before,elem.after);
          ita.remove();
          continue outer;
        }
      }
      if (elem.hasChanged()) {
        ALayoutAnimation anim=createMoveAnimation(elem.wrappee);
        anim.init(elem.before,elem.after);
        animations.add(anim);
      }
    }
  }
}",0.996222851746931
57346,"@Override protected void renderImpl(GLGraphics g,float w,float h){
  Collection<StyleAnimation> styleAnims=doAnimation();
  super.renderImpl(g,w,h);
  g.incZ();
  for (  GLElement child : activeChildren()) {
    boolean found=false;
    for (Iterator<StyleAnimation> it=styleAnims.iterator(); it.hasNext(); ) {
      StyleAnimation a=it.next();
      if (a.getAnimatedElement() == child && a.isRunning()) {
        a.render(g);
        found=true;
        break;
      }
    }
    if (!found)     child.render(g);
  }
  for (  StyleAnimation anim : styleAnims) {
    if (anim.isDone() || anim.getAnimatedElement().getParent() != this)     animations.remove(anim);
  }
  g.decZ();
}","@Override protected void renderImpl(GLGraphics g,float w,float h){
  Collection<AAnimation> styleAnims=doAnimation();
  super.renderImpl(g,w,h);
  g.incZ();
  for (  GLElement child : activeChildren()) {
    boolean found=false;
    for (Iterator<AAnimation> it=styleAnims.iterator(); it.hasNext(); ) {
      AAnimation a=it.next();
      if (a.getAnimatedElement() == child && a.isRunning()) {
        a.render(g);
        found=true;
        break;
      }
    }
    if (!found) {
      child.render(g);
    }
  }
  for (  AAnimation anim : styleAnims) {
    if (anim.isDone() || anim.getAnimatedElement().getParent() != this)     animations.remove(anim);
  }
  if (animations.isEmpty()) {
    startTime=-1;
  }
  g.decZ();
}",0.8778409090909091
57347,"private Collection<StyleAnimation> doAnimation(){
  if (animations.isEmpty())   return Collections.emptyList();
  Vec2f size=getSize();
  int delta=nextDelta();
  Collection<StyleAnimation> styles=new LinkedList<>();
  for (Iterator<AAnimation> it=animations.iterator(); it.hasNext(); ) {
    AAnimation anim=it.next();
    if (anim.apply(delta,size.x(),size.y())) {
      GLElement elem=anim.getAnimatedElement();
switch (anim.getType()) {
case MOVE:
        it.remove();
      break;
case IN:
    it.remove();
  break;
case OUT:
takeDown(elem);
it.remove();
break;
case STYLE:
break;
}
}
if (anim instanceof StyleAnimation) styles.add((StyleAnimation)anim);
}
if (animations.isEmpty()) {
startTime=-1;
}
repaintAll();
return styles;
}","private Collection<AAnimation> doAnimation(){
  if (animations.isEmpty())   return Collections.emptyList();
  Vec2f size=getSize();
  int delta=nextDelta();
  Collection<AAnimation> styles=new LinkedList<>();
  for (Iterator<AAnimation> it=animations.iterator(); it.hasNext(); ) {
    AAnimation anim=it.next();
    if (anim.apply(delta,size.x(),size.y())) {
      GLElement elem=anim.getAnimatedElement();
switch (anim.getType()) {
case MOVE:
        break;
case IN:
      break;
case OUT:
    takeDown(elem);
  break;
case STYLE:
break;
}
if (!anim.hasRenderAnimation()) it.remove();
}
if (anim.hasRenderAnimation()) styles.add(anim);
}
if (animations.isEmpty()) {
startTime=-1;
}
repaintAll();
return styles;
}",0.8640441683919945
57348,"/** 
 * performs the animation
 * @param delta between last call in ms
 * @return whether this animation ended
 */
public boolean apply(int delta,float w,float h){
  if (startIn >= 0) {
    startIn-=delta;
    if (startIn < 0) {
      delta=-startIn;
      startIn=-1;
    }
 else {
      delta=0;
    }
    firstTime(w,h);
  }
  if (delta < 3)   return false;
  remaining-=delta;
  float alpha=0;
  if (remaining <= 0) {
    lastTime();
  }
 else {
    alpha=1 - (remaining / (float)durationValue);
    animate(alpha,w,h);
  }
  return remaining <= 0;
}","/** 
 * performs the animation
 * @param delta between last call in ms
 * @return whether this animation ended
 */
public boolean apply(int delta,float w,float h){
  if (startIn >= 0) {
    startIn-=delta;
    if (startIn <= 0) {
      delta=-startIn;
      startIn=-1;
    }
 else {
      delta=0;
    }
    firstTime(w,h);
    lastAlpha=0;
  }
  if (delta < 3)   return false;
  remaining-=delta;
  float alpha=0;
  if (remaining <= 0) {
    lastTime();
    lastAlpha=1;
  }
 else {
    alpha=1 - (remaining / (float)durationValue);
    animate(alpha,w,h);
    lastAlpha=alpha;
  }
  return remaining <= 0;
}",0.9518900343642612
57349,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  AAnimation other=(AAnimation)obj;
  if (animated == null) {
    if (other.animated != null)     return false;
  }
 else   if (!animated.equals(other.animated))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  AAnimation other=(AAnimation)obj;
  if (!Objects.equals(animated,other.animated))   return false;
  return true;
}",0.719626168224299
57350,"@Override protected void firstTime(float w,float h){
}","@Override protected void firstTime(float w,float h){
  System.out.println(hashCode() + ""String_Node_Str"" + animated.asElement().hashCode()+ ""String_Node_Str"");
}",0.5023255813953489
57351,"@Override protected void lastTime(){
  animated.setBounds(to);
}","@Override protected void lastTime(){
  animated.setBounds(to);
  System.out.println(hashCode() + ""String_Node_Str"" + animated.asElement().hashCode()+ ""String_Node_Str""+ to);
}",0.5355648535564853
57352,"@Override public void init(Vec4f from,Vec4f to){
  this.from=from;
  this.to=to;
}","@Override public void init(Vec4f from,Vec4f to){
  this.from=from;
  this.to=to;
  System.out.println(hashCode() + ""String_Node_Str"" + animated.asElement().hashCode()+ ""String_Node_Str""+ from+ ""String_Node_Str""+ to);
}",0.5466666666666666
57353,"/** 
 * <p> Creates the   {@link Table} and the {@link AColumn}s for the   {@link Table}, as well as the raw data columns to be set into the columns, which are also stored in   {@link #targetRawContainer}. </p> <p> Also creates the mapping of columnIDs to column labels in the   {@link IDMappingManager}</p>
 */
@SuppressWarnings(""String_Node_Str"") private void initializTables(){
  Table table=dataDomain.getTable();
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getOrCreateParsingPattern();
  String[] headers=null;
  if (dataSetDescription.isContainsColumnIDs()) {
    try {
      BufferedReader reader=GeneralManager.get().getResourceLoader().getResource(filePath);
      Integer rowOfColumnIDs=dataSetDescription.getNumberOfHeaderLines() - 1;
      if (dataSetDescription.getRowOfColumnIDs() != null)       rowOfColumnIDs=dataSetDescription.getRowOfColumnIDs();
      for (int rowCount=0; rowCount < rowOfColumnIDs; rowCount++) {
        reader.readLine();
      }
      String headerLine=reader.readLine();
      headers=headerLine.split(dataSetDescription.getDelimiter());
      reader.close();
    }
 catch (    Exception e) {
      Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"",e));
      throw new IllegalStateException(""String_Node_Str"" + filePath + ""String_Node_Str"",e);
    }
  }
  calculateNumberOfLinesInFile();
  int numberOfDataLines=numberOfLinesInFile - dataSetDescription.getNumberOfHeaderLines();
  IDMappingManager columnIDMappingManager;
  IDType targetColumnIDType;
  IDType sourceColumnIDType=IDType.getIDType(dataSetDescription.getColumnIDSpecification().getIdType());
  IDTypeParsingRules parsingRules=null;
  if (dataSetDescription.getColumnIDSpecification().getIdTypeParsingRules() != null)   parsingRules=dataSetDescription.getColumnIDSpecification().getIdTypeParsingRules();
 else   if (sourceColumnIDType.getIdTypeParsingRules() != null)   parsingRules=sourceColumnIDType.getIdTypeParsingRules();
  if (!dataDomain.getDataSetDescription().isTransposeMatrix()) {
    columnIDMappingManager=dataDomain.getDimensionIDMappingManager();
    targetColumnIDType=dataDomain.getDimensionIDType();
  }
 else {
    columnIDMappingManager=dataDomain.getRecordIDMappingManager();
    targetColumnIDType=dataDomain.getRecordIDType();
  }
  MappingType mappingType=columnIDMappingManager.createMap(targetColumnIDType,sourceColumnIDType,false,true);
  int columnID;
  DataDescription dataDescription=dataSetDescription.getDataDescription();
  for (  ColumnDescription columnDescription : parsingPattern) {
    if (columnDescription.getDataDescription() != null) {
      dataDescription=columnDescription.getDataDescription();
    }
switch (dataDescription.getDataClass()) {
case REAL_NUMBER:
{
        FloatContainer container=new FloatContainer(numberOfDataLines);
        targetRawContainer.add(container);
        NumericalColumn<FloatContainer,Float> column=new NumericalColumn<>(dataDescription);
        column.setRawData(container);
        columnID=table.addColumn(column);
        break;
      }
case NATURAL_NUMBER:
{
      IntContainer container=new IntContainer(numberOfDataLines);
      targetRawContainer.add(container);
      NumericalColumn<IntContainer,Integer> column;
      column=new NumericalColumn<>(dataDescription);
      column.setRawData(container);
      columnID=table.addColumn(column);
      break;
    }
case CATEGORICAL:
switch (dataDescription.getRawDataType()) {
case STRING:
    CategoricalColumn<String> categoricalColumn;
  CategoricalContainer<String> categoricalContainer;
categoricalContainer=new CategoricalContainer<String>(numberOfDataLines,EDataType.STRING,CategoricalContainer.UNKNOWN_CATEOGRY_STRING);
targetRawContainer.add(categoricalContainer);
categoricalColumn=new CategoricalColumn<String>(dataDescription);
categoricalColumn.setRawData(categoricalContainer);
if (table instanceof CategoricalTable<?>) {
categoricalColumn.setCategoryDescriptions(((CategoricalTable<String>)table).getCategoryDescriptions());
}
 else {
categoricalColumn.setCategoryDescriptions((CategoricalClassDescription<String>)dataDescription.getCategoricalClassDescription());
}
columnID=table.addColumn(categoricalColumn);
break;
case INTEGER:
CategoricalColumn<Integer> categoricalIntColumn;
CategoricalContainer<Integer> categoricalIntContainer;
categoricalIntContainer=new CategoricalContainer<Integer>(numberOfDataLines,EDataType.INTEGER,CategoricalContainer.UNKNOWN_CATEGORY_INT);
targetRawContainer.add(categoricalIntContainer);
categoricalIntColumn=new CategoricalColumn<Integer>(dataDescription);
categoricalIntColumn.setRawData(categoricalIntContainer);
if (table instanceof CategoricalTable<?>) {
categoricalIntColumn.setCategoryDescriptions(((CategoricalTable<Integer>)table).getCategoryDescriptions());
}
 else {
categoricalIntColumn.setCategoryDescriptions((CategoricalClassDescription<Integer>)dataDescription.getCategoricalClassDescription());
}
columnID=table.addColumn(categoricalIntColumn);
break;
case FLOAT:
default :
throw new IllegalStateException(""String_Node_Str"" + dataDescription.getRawDataType() + ""String_Node_Str""+ dataDescription.getDataClass());
}
break;
case UNIQUE_OBJECT:
default :
throw new IllegalStateException(""String_Node_Str"" + columnDescription + ""String_Node_Str""+ parsingPattern);
}
if (headers != null) {
String idString=headers[columnDescription.getColumn()];
idString=convertID(idString,parsingRules);
columnIDMappingManager.addMapping(mappingType,columnID,idString);
}
 else {
columnIDMappingManager.addMapping(mappingType,columnID,""String_Node_Str"" + columnID);
}
}
}","/** 
 * <p> Creates the   {@link Table} and the {@link AColumn}s for the   {@link Table}, as well as the raw data columns to be set into the columns, which are also stored in   {@link #targetRawContainer}. </p> <p> Also creates the mapping of columnIDs to column labels in the   {@link IDMappingManager}</p>
 */
@SuppressWarnings(""String_Node_Str"") private void initializTables(){
  Table table=dataDomain.getTable();
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getOrCreateParsingPattern();
  String[] headers=null;
  if (dataSetDescription.isContainsColumnIDs()) {
    try {
      BufferedReader reader=GeneralManager.get().getResourceLoader().getResource(filePath);
      Integer rowOfColumnIDs=dataSetDescription.getNumberOfHeaderLines() - 1;
      if (dataSetDescription.getRowOfColumnIDs() != null)       rowOfColumnIDs=dataSetDescription.getRowOfColumnIDs();
      for (int rowCount=0; rowCount < rowOfColumnIDs; rowCount++) {
        reader.readLine();
      }
      String headerLine=reader.readLine();
      headers=headerLine.split(dataSetDescription.getDelimiter());
      reader.close();
    }
 catch (    Exception e) {
      Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"",e));
      throw new IllegalStateException(""String_Node_Str"" + filePath + ""String_Node_Str"",e);
    }
  }
  calculateNumberOfLinesInFile();
  int numberOfDataLines=numberOfLinesInFile - dataSetDescription.getNumberOfHeaderLines();
  IDMappingManager columnIDMappingManager;
  IDType targetColumnIDType;
  IDType sourceColumnIDType=IDType.getIDType(dataSetDescription.getColumnIDSpecification().getIdType());
  IDTypeParsingRules parsingRules=null;
  if (dataSetDescription.getColumnIDSpecification().getIdTypeParsingRules() != null)   parsingRules=dataSetDescription.getColumnIDSpecification().getIdTypeParsingRules();
 else   if (sourceColumnIDType.getIdTypeParsingRules() != null)   parsingRules=sourceColumnIDType.getIdTypeParsingRules();
  if (!dataDomain.getDataSetDescription().isTransposeMatrix()) {
    columnIDMappingManager=dataDomain.getDimensionIDMappingManager();
    targetColumnIDType=dataDomain.getDimensionIDType();
  }
 else {
    columnIDMappingManager=dataDomain.getRecordIDMappingManager();
    targetColumnIDType=dataDomain.getRecordIDType();
  }
  MappingType mappingType=columnIDMappingManager.createMap(targetColumnIDType,sourceColumnIDType,false,true);
  int columnID;
  DataDescription dataDescription=dataSetDescription.getDataDescription();
  for (  ColumnDescription columnDescription : parsingPattern) {
    if (columnDescription.getDataDescription() != null) {
      dataDescription=columnDescription.getDataDescription();
    }
switch (dataDescription.getDataClass()) {
case REAL_NUMBER:
{
        FloatContainer container=new FloatContainer(numberOfDataLines);
        targetRawContainer.add(container);
        NumericalColumn<FloatContainer,Float> column=new NumericalColumn<>(dataDescription);
        column.setRawData(container);
        columnID=table.addColumn(column);
        break;
      }
case NATURAL_NUMBER:
{
      IntContainer container=new IntContainer(numberOfDataLines);
      targetRawContainer.add(container);
      NumericalColumn<IntContainer,Integer> column;
      column=new NumericalColumn<>(dataDescription);
      column.setRawData(container);
      columnID=table.addColumn(column);
      break;
    }
case CATEGORICAL:
switch (dataDescription.getRawDataType()) {
case STRING:
    CategoricalColumn<String> categoricalColumn;
  CategoricalContainer<String> categoricalContainer;
categoricalContainer=new CategoricalContainer<String>(numberOfDataLines,EDataType.STRING,CategoricalContainer.UNKNOWN_CATEOGRY_STRING);
targetRawContainer.add(categoricalContainer);
categoricalColumn=new CategoricalColumn<String>(dataDescription);
categoricalColumn.setRawData(categoricalContainer);
if (table instanceof CategoricalTable<?>) {
categoricalColumn.setCategoryDescriptions(((CategoricalTable<String>)table).getCategoryDescriptions());
}
 else if (dataDescription.getCategoricalClassDescription() != null) {
categoricalColumn.setCategoryDescriptions((CategoricalClassDescription<String>)dataDescription.getCategoricalClassDescription());
}
columnID=table.addColumn(categoricalColumn);
break;
case INTEGER:
CategoricalColumn<Integer> categoricalIntColumn;
CategoricalContainer<Integer> categoricalIntContainer;
categoricalIntContainer=new CategoricalContainer<Integer>(numberOfDataLines,EDataType.INTEGER,CategoricalContainer.UNKNOWN_CATEGORY_INT);
targetRawContainer.add(categoricalIntContainer);
categoricalIntColumn=new CategoricalColumn<Integer>(dataDescription);
categoricalIntColumn.setRawData(categoricalIntContainer);
if (table instanceof CategoricalTable<?>) {
categoricalIntColumn.setCategoryDescriptions(((CategoricalTable<Integer>)table).getCategoryDescriptions());
}
 else if (dataDescription.getCategoricalClassDescription() != null) {
categoricalIntColumn.setCategoryDescriptions((CategoricalClassDescription<Integer>)dataDescription.getCategoricalClassDescription());
}
columnID=table.addColumn(categoricalIntColumn);
break;
case FLOAT:
default :
throw new IllegalStateException(""String_Node_Str"" + dataDescription.getRawDataType() + ""String_Node_Str""+ dataDescription.getDataClass());
}
break;
case UNIQUE_OBJECT:
GenericContainer<String> container=new GenericContainer<>(numberOfDataLines);
targetRawContainer.add(container);
GenericColumn<String> column=new GenericColumn<>(dataDescription);
column.setRawData(container);
columnID=table.addColumn(column);
break;
default :
throw new IllegalStateException(""String_Node_Str"" + columnDescription + ""String_Node_Str""+ parsingPattern);
}
if (headers != null) {
String idString=headers[columnDescription.getColumn()];
idString=convertID(idString,parsingRules);
columnIDMappingManager.addMapping(mappingType,columnID,idString);
}
 else {
columnIDMappingManager.addMapping(mappingType,columnID,""String_Node_Str"" + columnID);
}
}
}",0.967591392273788
57354,"private SerializationManager(){
  addons=new ArrayList<>();
  try {
    for (    IConfigurationElement elem : RegistryFactory.getRegistry().getConfigurationElementsFor(EXTENSION_POINT)) {
      final Object o=elem.createExecutableExtension(""String_Node_Str"");
      if (o instanceof ISerializationAddon)       addons.add((ISerializationAddon)o);
    }
  }
 catch (  CoreException ex) {
    System.err.println(ex.getMessage());
  }
  try {
    Collection<Class<? extends AEvent>> eventTypes=getSerializeableEventTypes();
    Class<?>[] classes=new Class<?>[eventTypes.size()];
    classes=eventTypes.toArray(classes);
    eventContext=JAXBContext.newInstance(classes);
    serializableTypes=new ArrayList<Class<?>>();
    serializableTypes.add(SerializationData.class);
    serializableTypes.add(DataDomainSerializationData.class);
    serializableTypes.add(DataDomainList.class);
    serializableTypes.add(BasicInformation.class);
    for (    ISerializationAddon addon : addons)     serializableTypes.addAll(addon.getJAXBContextClasses());
    createNewProjectContext();
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}","private SerializationManager(){
  addons=ExtensionUtils.findImplementation(EXTENSION_POINT,""String_Node_Str"",ISerializationAddon.class);
  try {
    Collection<Class<? extends AEvent>> eventTypes=getSerializeableEventTypes();
    Class<?>[] classes=new Class<?>[eventTypes.size()];
    classes=eventTypes.toArray(classes);
    eventContext=JAXBContext.newInstance(classes);
    serializableTypes=new ArrayList<Class<?>>();
    serializableTypes.add(SerializationData.class);
    serializableTypes.add(DataDomainSerializationData.class);
    serializableTypes.add(DataDomainList.class);
    serializableTypes.add(BasicInformation.class);
    for (    ISerializationAddon addon : addons)     serializableTypes.addAll(addon.getJAXBContextClasses());
    createNewProjectContext();
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
}",0.8192534381139489
57355,"@Override public void takeDown(GLElement element){
}","@Override public void takeDown(GLElement element){
  eventListeners.unregister(element);
}",0.7323943661971831
57356,"@Override public void display(GLAutoDrawable drawable){
  GL2 gl=drawable.getGL().getGL2();
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
  gl.glLoadIdentity();
  gl.glTranslatef(0.375f,0.375f,0);
  final GLGraphics g=tracingGL ? new GLGraphicsTracing(gl,text,textures,loader,true) : new GLGraphics(gl,text,textures,loader,true);
  float paddedWidth=getWidth() - padding.left - padding.right;
  float paddedHeight=getHeight() - padding.top - padding.bottom;
  g.move(padding.left,padding.right);
  if (dirty) {
    root.setBounds(0,0,paddedWidth,paddedHeight);
    root.layout();
    dirty=false;
  }
  Runnable toRender=new Runnable(){
    @Override public void run(){
      root.renderPick(g);
    }
  }
;
  Point mousePos=pickingManager.getCurrentMousePos();
  if (mousePos != null) {
    root.getMouseLayer().setBounds(mousePos.x - padding.left,mousePos.y - padding.top,getWidth() - mousePos.x,getHeight() - mousePos.y);
    root.getMouseLayer().relayout();
  }
  pickingManager.doPicking(g.gl,toRender);
  if (renderPick)   root.renderPick(g);
 else   root.render(g);
  g.move(-padding.left,-padding.right);
  g.destroy();
  drawable.swapBuffers();
}","@Override public void display(GLAutoDrawable drawable){
  eventListeners.processEvents();
  GL2 gl=drawable.getGL().getGL2();
  gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
  gl.glLoadIdentity();
  gl.glTranslatef(0.375f,0.375f,0);
  final GLGraphics g=tracingGL ? new GLGraphicsTracing(gl,text,textures,loader,true) : new GLGraphics(gl,text,textures,loader,true);
  float paddedWidth=getWidth() - padding.left - padding.right;
  float paddedHeight=getHeight() - padding.top - padding.bottom;
  g.move(padding.left,padding.right);
  if (dirty) {
    root.setBounds(0,0,paddedWidth,paddedHeight);
    root.layout();
    dirty=false;
  }
  Runnable toRender=new Runnable(){
    @Override public void run(){
      root.renderPick(g);
    }
  }
;
  Point mousePos=pickingManager.getCurrentMousePos();
  if (mousePos != null) {
    root.getMouseLayer().setBounds(mousePos.x - padding.left,mousePos.y - padding.top,getWidth() - mousePos.x,getHeight() - mousePos.y);
    root.getMouseLayer().relayout();
  }
  pickingManager.doPicking(g.gl,toRender);
  if (renderPick)   root.renderPick(g);
 else   root.render(g);
  g.move(-padding.left,-padding.right);
  g.destroy();
  drawable.swapBuffers();
}",0.9857022708158116
57357,"@ListenTo(restrictExclusiveToEventSpace=true) public void onPathSelection(PathwayPathSelectionEvent event){
  pathSegments=event.getPathSegments();
  augmentation.clearRenderers();
  PathwayVertexRep start=null;
  PathwayVertexRep end=null;
  List<Pair<MultiFormRenderer,GLElement>> rendererList=multiFormRenderers.get(EEmbeddingID.PATHWAY_MULTIFORM.id());
  for (  PathwayPath path : pathSegments) {
    if (start == null) {
      start=path.getPath().getEndVertex();
    }
 else {
      end=path.getPath().getStartVertex();
      PathwayVertexRep referenceVertexRep=start;
      Rectangle2D referenceRectangle=null;
      for (      Pair<MultiFormRenderer,GLElement> rendererPair : rendererList) {
        MultiFormRenderer renderer=rendererPair.getFirst();
        IPathwayRepresentation pathwayRepresentation=getActivePathwayRepresentation(renderer);
        if (pathwayRepresentation != null && pathwayRepresentation.getPathway() == referenceVertexRep.getPathway()) {
          referenceRectangle=getAbsoluteVertexLocation(pathwayRepresentation,referenceVertexRep,rendererPair.getSecond());
          break;
        }
      }
      if (referenceRectangle == null)       return;
      for (      Pair<MultiFormRenderer,GLElement> rendererPair : rendererList) {
        MultiFormRenderer renderer=rendererPair.getFirst();
        IPathwayRepresentation pathwayRepresentation=getActivePathwayRepresentation(renderer);
        if (pathwayRepresentation != null) {
          Rectangle2D rect=getAbsoluteVertexLocation(pathwayRepresentation,end,rendererPair.getSecond());
          if (rect != null) {
            augmentation.addRenderer(new SubGraphAugmentation.ConnectionRenderer(referenceRectangle,rect));
          }
        }
      }
      start=path.getPath().getEndVertex();
      end=null;
    }
  }
}","@ListenTo(restrictExclusiveToEventSpace=true) public void onPathSelection(PathwayPathSelectionEvent event){
  pathSegments=event.getPathSegments();
  updatePathLinks();
}",0.1627084386053562
57358,"@Override public boolean hasNext(){
  if (methods == null && clazz == null)   return false;
  if (methods == null || !methods.hasNext()) {
    if (scanWhile != null && !scanWhile.apply(clazz))     return false;
    methods=Arrays.asList(clazz.getDeclaredMethods()).iterator();
    clazz=clazz.getSuperclass();
  }
  return methods.hasNext();
}","@Override public boolean hasNext(){
  if (methods == null && clazz == null)   return false;
  if (methods == null || !methods.hasNext()) {
    if (clazz == null || (scanWhile != null && !scanWhile.apply(clazz)))     return false;
    methods=Arrays.asList(clazz.getDeclaredMethods()).iterator();
    clazz=clazz.getSuperclass();
  }
  return methods.hasNext();
}",0.9730496453900708
57359,"/** 
 * trigger to layout this element
 */
protected void layout(){
  dirtyLayout=false;
  cache.invalidate(context.getDisplayListPool());
  pickCache.invalidate(context.getDisplayListPool());
}","/** 
 * trigger to layout this element
 */
protected void layout(){
  dirtyLayout=false;
  if (context != null) {
    cache.invalidate(context.getDisplayListPool());
    pickCache.invalidate(context.getDisplayListPool());
  }
}",0.9216152019002376
57360,"/** 
 * triggers that me and my parents get repaint the picking representation
 */
public void repaintPick(){
  pickCache.invalidate(context.getDisplayListPool());
  if (parent != null)   parent.repaintPick();
}","/** 
 * triggers that me and my parents get repaint the picking representation
 */
public void repaintPick(){
  if (context != null)   pickCache.invalidate(context.getDisplayListPool());
  if (parent != null)   parent.repaintPick();
}",0.9483146067415732
57361,"/** 
 * triggers that me and my parents get repainted
 */
public void repaint(){
  cache.invalidate(context.getDisplayListPool());
  if (parent != null)   parent.repaint();
}","/** 
 * triggers that me and my parents get repainted
 */
public void repaint(){
  if (context != null)   cache.invalidate(context.getDisplayListPool());
  if (parent != null)   parent.repaint();
}",0.9380053908355797
57362,"public GLTourGuideView(IGLCanvas glCanvas){
  super(glCanvas,VIEW_TYPE,VIEW_NAME);
  this.table=new RankTableModel(new RankTableConfigBase());
  this.table.addPropertyChangeListener(RankTableModel.PROP_SELECTED_ROW,new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      onSelectRow((PerspectiveRow)evt.getOldValue(),(PerspectiveRow)evt.getNewValue());
    }
  }
);
  this.table.addColumn(new RankRankColumnModel());
  this.table.addColumn(new PerspectiveRankColumnModel(stratomex));
  this.stacked=new StackedRankColumnModel();
  this.table.addColumn(stacked);
  this.table.addColumn(new SizeRankColumnModel());
  dataDomainQueries=new DataDomainQueries(table);
}","public GLTourGuideView(IGLCanvas glCanvas){
  super(glCanvas,VIEW_TYPE,VIEW_NAME);
  this.table=new RankTableModel(new RankTableConfigBase());
  this.table.addPropertyChangeListener(RankTableModel.PROP_SELECTED_ROW,new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      onSelectRow((PerspectiveRow)evt.getOldValue(),(PerspectiveRow)evt.getNewValue());
    }
  }
);
  this.table.addPropertyChangeListener(RankTableModel.PROP_REGISTER,new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getOldValue() != null)       eventListeners.unregister(evt.getOldValue());
      if (evt.getNewValue() != null)       eventListeners.register(evt.getNewValue());
    }
  }
);
  this.table.addColumn(new RankRankColumnModel());
  this.table.addColumn(new PerspectiveRankColumnModel(stratomex));
  this.stacked=new StackedRankColumnModel();
  this.table.addColumn(stacked);
  this.table.addColumn(new SizeRankColumnModel());
  dataDomainQueries=new DataDomainQueries(table);
}",0.7997762863534675
57363,"@Override public void propertyChange(PropertyChangeEvent evt){
  onSelectRow((PerspectiveRow)evt.getOldValue(),(PerspectiveRow)evt.getNewValue());
}","@Override public void propertyChange(PropertyChangeEvent evt){
  if (evt.getOldValue() != null)   eventListeners.unregister(evt.getOldValue());
  if (evt.getNewValue() != null)   eventListeners.register(evt.getNewValue());
}",0.4677419354838709
57364,"@Override public void render(GLGraphics g,float w,float h,GLElement parent){
  if (h < 5)   return;
  float hi=Math.min(h,18);
  PerspectiveRow r=parent.getLayoutDataAs(PerspectiveRow.class,null);
  g.drawText(r.getLabel(),1,1 + (h - hi) * 0.5f,w - 2,hi - 2);
}","@Override public void render(GLGraphics g,float w,float h,GLElement parent){
  float hint=Math.min(h - 2,12);
  if (hint <= 0)   return;
  PerspectiveRow r=parent.getLayoutDataAs(PerspectiveRow.class,null);
  g.color(r.getDataDomain().getColor()).fillRect(1,(h - hint) * 0.5f,hint,hint);
  if (h < 5)   return;
  float x=hint + 2;
  float hi=Math.min(h,18);
  g.drawText(r.getLabel(),x,1 + (h - hi) * 0.5f,w - 2,hi - 2);
}",0.4626647144948755
57365,"public boolean destroy(ARankColumnModel col){
  removeFromPool(col);
  takeDown(col);
  return true;
}","public boolean destroy(ARankColumnModel col){
  removeFromPool(col);
  takeDown(col);
  propertySupport.firePropertyChange(PROP_REGISTER,col,null);
  return true;
}",0.7669172932330827
57366,"private void setup(ARankColumnModel col){
  col.init(this);
  if (col instanceof StackedRankColumnModel)   col.addPropertyChangeListener(ARankColumnModel.PROP_WEIGHT,resort);
  col.addPropertyChangeListener(IMappedColumnMixin.PROP_MAPPING,refilter);
  col.addPropertyChangeListener(IFilterColumnMixin.PROP_FILTER,refilter);
  if (col instanceof ACompositeRankColumnModel) {
    for (    ARankColumnModel child : ((ACompositeRankColumnModel)col))     setup(child);
  }
}","private void setup(ARankColumnModel col){
  col.init(this);
  if (col instanceof StackedRankColumnModel)   col.addPropertyChangeListener(ARankColumnModel.PROP_WEIGHT,resort);
  col.addPropertyChangeListener(IMappedColumnMixin.PROP_MAPPING,refilter);
  col.addPropertyChangeListener(IFilterColumnMixin.PROP_FILTER,refilter);
  if (col instanceof ACompositeRankColumnModel) {
    for (    ARankColumnModel child : ((ACompositeRankColumnModel)col))     setup(child);
  }
  propertySupport.firePropertyChange(PROP_REGISTER,null,col);
}",0.938
57367,"@Override protected void updateMask(BitSet todo,List<IRow> data,BitSet mask){
  String regex=Pattern.quote(filter).replace(""String_Node_Str"",""String_Node_Str"");
  for (int i=todo.nextSetBit(0); i >= 0; i=todo.nextSetBit(i + 1)) {
    String v=this.data.apply(data.get(i));
    mask.set(i,Pattern.matches(regex,v));
  }
}","@Override protected void updateMask(BitSet todo,List<IRow> data,BitSet mask){
  String regex=""String_Node_Str"" + filter.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  for (int i=todo.nextSetBit(0); i >= 0; i=todo.nextSetBit(i + 1)) {
    String v=this.data.apply(data.get(i));
    mask.set(i,Pattern.matches(regex,v));
  }
}",0.9172932330827068
57368,"@Override public void activeRendererChanged(MultiFormRenderer multiFormRenderer,int rendererID,int previousRendererID){
  updatePathLinks();
}","@Override public void activeRendererChanged(MultiFormRenderer multiFormRenderer,int rendererID,int previousRendererID){
  isLayoutDirty=true;
}",0.8982456140350877
57369,"@ListenTo(restrictExclusiveToEventSpace=true) protected void onPathwayPathChanged(PathwayPathSelectionEvent event){
  List<PathwayPath> segments=event.getPathSegments();
  List<List<PathwayVertexRep>> pathSegments=new ArrayList<>(segments.size());
  for (  PathwayPath path : segments) {
    pathSegments.add(path.getNodes());
  }
  PathwayPath path=segments.get(segments.size() - 1);
  if (path != null && path.getPath() != null) {
    if (path.getNodes().size() > 0) {
      PathwayVertexRep vertexRep=path.getNodes().get(path.getNodes().size() - 1);
      Set<PathwayVertexRep> equivalentVertexReps=PathwayManager.get().getEquivalentVertexReps(vertexRep);
      PathwayVertexRep eqVertexRep=null;
      PathwayVertexRep nextVertexRep=null;
      for (      PathwayVertexRep vr : equivalentVertexReps) {
        eqVertexRep=vr;
        PathwayGraph pw=eqVertexRep.getPathway();
        if (pw.getType() == EPathwayDatabaseType.KEGG) {
          Set<DefaultEdge> edges=pw.edgesOf(eqVertexRep);
          for (          DefaultEdge edge : edges) {
            if (pw.getEdgeSource(edge) == eqVertexRep) {
              nextVertexRep=pw.getEdgeTarget(edge);
              break;
            }
          }
          if (nextVertexRep != null)           break;
        }
      }
      if (eqVertexRep != null) {
        if (nextVertexRep != null) {
          List<PathwayVertexRep> nextSegment=new ArrayList<>(2);
          nextSegment.add(eqVertexRep);
          nextSegment.add(nextVertexRep);
          pathSegments.add(nextSegment);
        }
      }
    }
    setPath(pathSegments);
  }
 else {
    setPath(new ArrayList<List<PathwayVertexRep>>());
  }
}","@ListenTo(restrictExclusiveToEventSpace=true) protected void onPathwayPathChanged(PathwayPathSelectionEvent event){
  List<PathwayPath> segments=event.getPathSegments();
  List<List<PathwayVertexRep>> pathSegments=new ArrayList<>(segments.size());
  for (  PathwayPath path : segments) {
    pathSegments.add(path.getNodes());
  }
  setPath(pathSegments);
}",0.3348236462990561
57370,"private void triggerPathUpdate(){
  if (selectedPath == null)   return;
  PathwayPathSelectionEvent pathEvent=new PathwayPathSelectionEvent();
  List<PathwayPath> pathSegments=new ArrayList<>(1);
  pathSegments.add(new PathwayPath(selectedPath));
  pathEvent.setPathSegments(pathSegments);
  pathEvent.setSender(this);
  pathEvent.setEventSpace(pathwayPathEventSpace);
  eventPublisher.triggerEvent(pathEvent);
}","private void triggerPathUpdate(){
  List<PathwayPath> pathSegments=new ArrayList<>(1);
  PathwayPathSelectionEvent pathEvent=new PathwayPathSelectionEvent();
  if (selectedPath != null) {
    pathSegments.add(new PathwayPath(selectedPath));
  }
  pathEvent.setPathSegments(pathSegments);
  pathEvent.setSender(this);
  pathEvent.setEventSpace(pathwayPathEventSpace);
  eventPublisher.triggerEvent(pathEvent);
}",0.7372262773722628
57371,"@Override public void display(GL2 gl){
  gl.glPushMatrix();
  gl.glTranslatef(0,viewFrustum.getTop(),0);
  gl.glScalef(1,-1,1);
  if (dirtyLayout) {
    root.setBounds(0,0,viewFrustum.getRight(),viewFrustum.getTop());
    root.layout();
    dirtyLayout=false;
  }
  GLGraphics g=new GLGraphics(gl,this.getTextRenderer(),this.getTextureManager(),locator,true);
  g.checkError(""String_Node_Str"");
  if (isPickingRun(gl))   root.renderPick(g);
 else   root.render(g);
  g.checkError(""String_Node_Str"");
  g.destroy();
  checkForHits(gl);
  processEvents();
  gl.glPopMatrix();
}","@Override public void display(GL2 gl){
  gl.glPushMatrix();
  gl.glTranslatef(0,viewFrustum.getTop(),0);
  gl.glScalef(1,-1,1);
  if (isLayoutDirty) {
    root.setBounds(0,0,viewFrustum.getRight(),viewFrustum.getTop());
    root.layout();
    isLayoutDirty=false;
  }
  GLGraphics g=new GLGraphics(gl,this.getTextRenderer(),this.getTextureManager(),locator,true);
  g.checkError(""String_Node_Str"");
  if (isPickingRun(gl))   root.renderPick(g);
 else   root.render(g);
  g.checkError(""String_Node_Str"");
  g.destroy();
  checkForHits(gl);
  processEvents();
  gl.glPopMatrix();
}",0.9792027729636048
57372,"@Override public void relayout(){
  dirtyLayout=true;
}","@Override public void relayout(){
  isLayoutDirty=true;
}",0.9107142857142856
57373,"@Override protected void renderPickImpl(GLGraphics g,float w,float h){
  super.renderPickImpl(g,w,h);
  if (w <= 20)   return;
  g.incZ();
  float from=selectionMin;
  if (from > 0) {
    g.pushName(cursorMinPickingID);
    if (cursorMinHovered)     g.fillRect(from * w - 8,0,16,h);
 else     g.fillRect(from * w,0,1,h);
    g.popName();
  }
  float to=selectionMax;
  if (to < 1) {
    g.pushName(cursorMaxPickingID);
    if (cursorMaxHovered)     g.fillRect(to * w - 8,0,16,h);
 else     g.fillRect(to * w,0,1,h);
    g.popName();
  }
  g.decZ();
}","@Override protected void renderPickImpl(GLGraphics g,float w,float h){
  super.renderPickImpl(g,w,h);
  if (w <= 20)   return;
  g.incZ().incZ();
  float from=selectionMin;
  if (from > 0) {
    g.pushName(cursorMinPickingID);
    if (cursorMinHovered)     g.fillRect(from * w - 8,0,16,h);
 else     g.fillRect(from * w,0,1,h);
    g.popName();
  }
  float to=selectionMax;
  if (to < 1) {
    g.pushName(cursorMaxPickingID);
    if (cursorMaxHovered)     g.fillRect(to * w - 8,0,16,h);
 else     g.fillRect(to * w,0,1,h);
    g.popName();
  }
  g.decZ().decZ();
}",0.9874326750448832
57374,"private void checkOrderChanges(int index,ARankColumnModel col){
  if (col instanceof IFilterColumnMixin && ((IFilterColumnMixin)col).isFiltered()) {
    filter();
    return;
  }
}","private void checkOrderChanges(int index,ARankColumnModel col){
  if (col instanceof IFilterColumnMixin && ((IFilterColumnMixin)col).isFiltered()) {
    dirtyFilter=true;
    fireInvalid();
    return;
  }
}",0.909560723514212
57375,"public IRow get(int index){
  checkOrder();
  return data.get(order[index]);
}","public IRow get(int index){
  if (index < 0)   return null;
  checkOrder();
  return data.get(order[index]);
}",0.8297872340425532
57376,"@Override public void propertyChange(PropertyChangeEvent evt){
  dirtyFilter=true;
}","@Override public void propertyChange(PropertyChangeEvent evt){
  dirtyFilter=true;
  fireInvalid();
}",0.9081081081081082
57377,"public StackedRankColumnModel(){
  super(Color.DARK_GRAY,new Color(0.90f,.90f,.90f));
  setWeight(0);
}","public StackedRankColumnModel(){
  super(Color.GRAY,new Color(0.90f,.90f,.90f));
  setWeight(0);
}",0.9751243781094528
57378,"@Override protected void takeDown(){
  this.table.removePropertyChangeListener(RankTableModel.PROP_SELECTED_ROW,layoutOnChange);
  this.table.removePropertyChangeListener(RankTableModel.PROP_ORDER,layoutOnChange);
  this.table.removePropertyChangeListener(RankTableModel.PROP_DATA,updateData);
  this.table.removePropertyChangeListener(RankTableModel.PROP_COLUMNS,columnsChanged);
  for (  GLElement col : this) {
    ARankColumnModel model=col.getLayoutDataAs(ARankColumnModel.class,null);
    model.removePropertyChangeListener(ARankColumnModel.PROP_WEIGHT,layoutOnChange);
    model.addPropertyChangeListener(ACompositeRankColumnModel.PROP_CHILDREN,columnsChanged);
  }
  for (  int pickingID : this.pickingIDs)   context.unregisterPickingListener(pickingID);
  this.pickingIDs=null;
  super.takeDown();
}","@Override protected void takeDown(){
  this.table.removePropertyChangeListener(RankTableModel.PROP_SELECTED_ROW,layoutOnChange);
  this.table.removePropertyChangeListener(RankTableModel.PROP_ORDER,layoutOnChange);
  this.table.removePropertyChangeListener(RankTableModel.PROP_INVALID,layoutOnChange);
  this.table.removePropertyChangeListener(RankTableModel.PROP_DATA,updateData);
  this.table.removePropertyChangeListener(RankTableModel.PROP_COLUMNS,columnsChanged);
  for (  GLElement col : this) {
    ARankColumnModel model=col.getLayoutDataAs(ARankColumnModel.class,null);
    model.removePropertyChangeListener(ARankColumnModel.PROP_WEIGHT,layoutOnChange);
    model.addPropertyChangeListener(ACompositeRankColumnModel.PROP_CHILDREN,columnsChanged);
  }
  for (  int pickingID : this.pickingIDs)   context.unregisterPickingListener(pickingID);
  this.pickingIDs=null;
  super.takeDown();
}",0.9489136817381092
57379,"public TableBodyUI(RankTableModel table,IRowHeightLayout rowLayout){
  this.table=table;
  this.rowLayout=rowLayout;
  this.table.addPropertyChangeListener(RankTableModel.PROP_SELECTED_ROW,layoutOnChange);
  this.table.addPropertyChangeListener(RankTableModel.PROP_ORDER,layoutOnChange);
  this.table.addPropertyChangeListener(RankTableModel.PROP_DATA,updateData);
  this.table.addPropertyChangeListener(RankTableModel.PROP_COLUMNS,columnsChanged);
  for (  ARankColumnModel col : table.getColumns()) {
    if (col instanceof StackedRankColumnModel) {
      StackedRankColumnModel s=(StackedRankColumnModel)col;
      TableStackedColumnUI ui=new TableStackedColumnUI(s);
      ui.setData(table.getData());
      init(col);
      this.add(ui);
    }
 else {
      this.add(wrap(col));
    }
  }
  setLayout(this);
}","public TableBodyUI(RankTableModel table,IRowHeightLayout rowLayout){
  this.table=table;
  this.rowLayout=rowLayout;
  this.table.addPropertyChangeListener(RankTableModel.PROP_SELECTED_ROW,layoutOnChange);
  this.table.addPropertyChangeListener(RankTableModel.PROP_ORDER,layoutOnChange);
  this.table.addPropertyChangeListener(RankTableModel.PROP_INVALID,layoutOnChange);
  this.table.addPropertyChangeListener(RankTableModel.PROP_DATA,updateData);
  this.table.addPropertyChangeListener(RankTableModel.PROP_COLUMNS,columnsChanged);
  for (  ARankColumnModel col : table.getColumns()) {
    if (col instanceof StackedRankColumnModel) {
      StackedRankColumnModel s=(StackedRankColumnModel)col;
      TableStackedColumnUI ui=new TableStackedColumnUI(s);
      ui.setData(table.getData());
      init(col);
      this.add(ui);
    }
 else {
      this.add(wrap(col));
    }
  }
  setLayout(this);
}",0.9509345794392524
57380,"private void init(){
  hashPathwayTitleToPathway=new HashMap<String,PathwayGraph>();
  hashPathwayDatabase=new HashMap<EPathwayDatabaseType,PathwayDatabase>();
  hashPathwayToVisibilityState=new HashMap<PathwayGraph,Boolean>();
  xmlParserManager=new PathwayParserManager();
  KgmlSaxHandler kgmlParser=new KgmlSaxHandler();
  xmlParserManager.registerAndInitSaxHandler(kgmlParser);
}","private void init(){
  mapPathwayDBToPathways=new HashMap<>();
  hashPathwayDatabase=new HashMap<EPathwayDatabaseType,PathwayDatabase>();
  hashPathwayToVisibilityState=new HashMap<PathwayGraph,Boolean>();
  xmlParserManager=new PathwayParserManager();
  KgmlSaxHandler kgmlParser=new KgmlSaxHandler();
  xmlParserManager.registerAndInitSaxHandler(kgmlParser);
}",0.9142091152815014
57381,"public PathwayGraph createPathway(final EPathwayDatabaseType type,final String sName,final String sTitle,final String sImageLink,final String sExternalLink){
  PathwayGraph pathway=new PathwayGraph(type,sName,sTitle,sImageLink,sExternalLink);
  registerItem(pathway);
  hashPathwayTitleToPathway.put(sTitle,pathway);
  hashPathwayToVisibilityState.put(pathway,false);
  currentPathwayGraph=pathway;
  return pathway;
}","public PathwayGraph createPathway(final EPathwayDatabaseType type,final String sName,final String sTitle,final String sImageLink,final String sExternalLink){
  PathwayGraph pathway=new PathwayGraph(type,sName,sTitle,sImageLink,sExternalLink);
  registerItem(pathway);
  Map<String,PathwayGraph> mapTitleToPathway=mapPathwayDBToPathways.get(type);
  if (mapTitleToPathway == null) {
    mapTitleToPathway=new HashMap<>();
    mapPathwayDBToPathways.put(type,mapTitleToPathway);
  }
  mapTitleToPathway.put(sTitle,pathway);
  hashPathwayToVisibilityState.put(pathway,false);
  currentPathwayGraph=pathway;
  return pathway;
}",0.781940441882805
57382,"public PathwayGraph getPathwayByTitle(final String pathwayTitle,EPathwayDatabaseType pathwayDatabaseType){
  waitUntilPathwayLoadingIsFinished();
  Iterator<String> iterPathwayName=hashPathwayTitleToPathway.keySet().iterator();
  Pattern pattern=Pattern.compile(pathwayTitle,Pattern.CASE_INSENSITIVE);
  Matcher regexMatcher;
  String tempPathwayTitle;
  while (iterPathwayName.hasNext()) {
    tempPathwayTitle=iterPathwayName.next();
    regexMatcher=pattern.matcher(tempPathwayTitle);
    if (regexMatcher.find()) {
      PathwayGraph pathway=hashPathwayTitleToPathway.get(tempPathwayTitle);
      if (getItem(pathway.getID()).getType() != pathwayDatabaseType) {
        continue;
      }
      return pathway;
    }
  }
  return null;
}","public PathwayGraph getPathwayByTitle(final String pathwayTitle,EPathwayDatabaseType pathwayDatabaseType){
  waitUntilPathwayLoadingIsFinished();
  Map<String,PathwayGraph> mapTitleToPathway=mapPathwayDBToPathways.get(pathwayDatabaseType);
  if (mapTitleToPathway == null)   return null;
  Iterator<String> iterPathwayName=mapTitleToPathway.keySet().iterator();
  Pattern pattern=Pattern.compile(pathwayTitle,Pattern.CASE_INSENSITIVE);
  Matcher regexMatcher;
  String tempPathwayTitle;
  while (iterPathwayName.hasNext()) {
    tempPathwayTitle=iterPathwayName.next();
    regexMatcher=pattern.matcher(tempPathwayTitle);
    if (regexMatcher.find() && tempPathwayTitle.length() == pathwayTitle.length()) {
      PathwayGraph pathway=mapTitleToPathway.get(tempPathwayTitle);
      return pathway;
    }
  }
  return null;
}",0.7549584133077415
57383,"@Override protected GLElement createRoot(){
  return baseContainer;
}","@Override protected GLElement createRoot(){
  return root;
}",0.8992248062015504
57384,"@Override public void registerEventListeners(){
  super.registerEventListeners();
  eventListeners.register(AddTablePerspectivesEvent.class,new AddTablePerspectivesListener().setHandler(this));
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  eventListeners.register(AddTablePerspectivesEvent.class,new AddTablePerspectivesListener().setHandler(this));
  eventListeners.register(pathEventSpaceHandler,pathEventSpace);
}",0.8571428571428571
57385,"private void addMultiformRenderer(List<TablePerspective> tablePerspectives,String embeddingID,GLElementContainer parent){
  GLElementContainer backgroundContainer=new GLElementContainer(GLLayouts.LAYERS);
  GLElementContainer container=new GLElementContainer(GLLayouts.flowVertical(6));
  final GLPathwayBackground bg=new GLPathwayBackground();
  backgroundContainer.add(bg);
  backgroundContainer.add(container);
  bg.onPick(new APickingListener(){
    @Override protected void mouseOver(    Pick pick){
      if (currentActiveBackground != null && currentActiveBackground != bg) {
        currentActiveBackground.hovered=false;
        currentActiveBackground.repaint();
      }
      currentActiveBackground=bg;
      bg.hovered=true;
      bg.repaint();
    }
  }
);
  remoteRenderedPathwayMultiformViewIDs=ViewManager.get().getRemotePlugInViewIDs(VIEW_TYPE,embeddingID);
  MultiFormRenderer renderer=new MultiFormRenderer(this,false);
  for (  String viewID : remoteRenderedPathwayMultiformViewIDs) {
    renderer.addPluginVisualization(viewID,getViewType(),embeddingID,tablePerspectives,pathEventSpace);
  }
  GLElementAdapter multiFormRendererAdapter=new GLElementAdapter(this,renderer);
  container.add(multiFormRendererAdapter);
  GLElementViewSwitchingBar viewSwitchingBar=new GLElementViewSwitchingBar(renderer);
  container.add(viewSwitchingBar);
  parent.add(backgroundContainer);
}","private void addMultiformRenderer(List<TablePerspective> tablePerspectives,String embeddingID,GLElementContainer parent){
  GLElementContainer backgroundContainer=new GLElementContainer(GLLayouts.LAYERS);
  GLElementContainer container=new GLElementContainer(GLLayouts.flowVertical(6));
  final GLPathwayBackground bg=new GLPathwayBackground();
  backgroundContainer.add(bg);
  backgroundContainer.add(container);
  bg.onPick(new APickingListener(){
    @Override protected void mouseOver(    Pick pick){
      if (currentActiveBackground != null && currentActiveBackground != bg) {
        currentActiveBackground.hovered=false;
        currentActiveBackground.repaint();
      }
      currentActiveBackground=bg;
      bg.hovered=true;
      bg.repaint();
    }
  }
);
  remoteRenderedPathwayMultiformViewIDs=ViewManager.get().getRemotePlugInViewIDs(VIEW_TYPE,embeddingID);
  MultiFormRenderer renderer=new MultiFormRenderer(this,false);
  for (  String viewID : remoteRenderedPathwayMultiformViewIDs) {
    renderer.addPluginVisualization(viewID,getViewType(),embeddingID,tablePerspectives,pathEventSpace);
  }
  GLElementAdapter multiFormRendererAdapter=new GLElementAdapter(this,renderer);
  container.add(multiFormRendererAdapter);
  GLElementViewSwitchingBar viewSwitchingBar=new GLElementViewSwitchingBar(renderer);
  container.add(viewSwitchingBar);
  List<Pair<MultiFormRenderer,GLElement>> embeddingSpecificRenderers=multiFormRenderers.get(embeddingID);
  if (embeddingSpecificRenderers == null) {
    embeddingSpecificRenderers=new ArrayList<>();
    multiFormRenderers.put(embeddingID,embeddingSpecificRenderers);
  }
  embeddingSpecificRenderers.add(new Pair<MultiFormRenderer,GLElement>(renderer,multiFormRendererAdapter));
  parent.add(backgroundContainer);
}",0.8763406940063091
57386,"/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public GLSubGraph(IGLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  pathEventSpace=GeneralManager.get().getEventPublisher().createUniqueEventSpace();
  baseContainer=new GLElementContainer(GLLayouts.flowHorizontal(10));
  pathwayColumn=new GLElementContainer(GLLayouts.flowVertical(10));
  baseContainer.add(pathwayColumn,0.4f);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public GLSubGraph(IGLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  pathEventSpace=GeneralManager.get().getEventPublisher().createUniqueEventSpace();
  baseContainer.add(pathwayColumn,0.4f);
  root.add(baseContainer);
  root.add(augmentation);
}",0.7939590075512406
57387,"@Override public void init(GL2 gl){
  displayListIndex=gl.glGenLists(1);
  layoutDisplayListIndex=gl.glGenLists(1);
  textRenderer=new CaleydoTextRenderer(24);
  detailLevel=EDetailLevel.HIGH;
  pathRenderer.setTextRenderer(textRenderer);
  pathRenderer.setPixelGLConverter(pixelGLConverter);
  pathRenderer.init();
  layoutManager=new LayoutManager(viewFrustum,pixelGLConverter);
  layoutManager.setUseDisplayLists(true);
  ElementLayout pathElementLayout=new ElementLayout();
  pathElementLayout.setPixelSizeX(pathRenderer.getMinWidthPixels());
  pathElementLayout.setRenderer(pathRenderer);
  layoutManager.setBaseElementLayout(pathElementLayout);
  layoutManager.updateLayout();
}","@Override public void init(GL2 gl){
  displayListIndex=gl.glGenLists(1);
  layoutDisplayListIndex=gl.glGenLists(1);
  textRenderer=new CaleydoTextRenderer(24);
  detailLevel=EDetailLevel.HIGH;
  pathRenderer.setTextRenderer(textRenderer);
  pathRenderer.setPixelGLConverter(pixelGLConverter);
  pathRenderer.init();
  mappedDataRenderer.init();
  layoutManager=new LayoutManager(viewFrustum,pixelGLConverter);
  layoutManager.setUseDisplayLists(true);
  ElementLayout pathElementLayout=new ElementLayout();
  pathElementLayout.setPixelSizeX(pathRenderer.getMinWidthPixels());
  pathElementLayout.setRenderer(pathRenderer);
  layoutManager.setBaseElementLayout(pathElementLayout);
  layoutManager.updateLayout();
}",0.9792412312097352
57388,"@Override public AGLView createRemoteView(AGLView remoteRenderingView,List<TablePerspective> tablePerspectives,String embeddingEventSpace){
  GLEnRoutePathway enRoute=(GLEnRoutePathway)GeneralManager.get().getViewManager().createGLView(GLEnRoutePathway.class,remoteRenderingView.getParentGLCanvas(),remoteRenderingView.getParentComposite(),new ViewFrustum(CameraProjectionMode.ORTHOGRAPHIC,0,1,0,1,-1,1));
  enRoute.setRemoteRenderingGLView((IGLRemoteRenderingView)remoteRenderingView);
  enRoute.addTablePerspectives(tablePerspectives);
  enRoute.setPathwayPathEventSpace(embeddingEventSpace);
  enRoute.initialize();
  return enRoute;
}","@Override public AGLView createRemoteView(AGLView remoteRenderingView,List<TablePerspective> tablePerspectives,String embeddingEventSpace){
  GLEnRoutePathway enRoute=(GLEnRoutePathway)GeneralManager.get().getViewManager().createGLView(GLEnRoutePathway.class,remoteRenderingView.getParentGLCanvas(),remoteRenderingView.getParentComposite(),new ViewFrustum(CameraProjectionMode.ORTHOGRAPHIC,0,1,0,1,-1,1));
  enRoute.setRemoteRenderingGLView((IGLRemoteRenderingView)remoteRenderingView);
  enRoute.addTablePerspectives(tablePerspectives);
  enRoute.setPathwayPathEventSpace(embeddingEventSpace);
  enRoute.initialize();
  enRoute.getPathRenderer().setSizeConfig(PathSizeConfiguration.ENROUTE_COMPACT);
  return enRoute;
}",0.9396170839469808
57389,"/** 
 * Constructor with parent view as parameter.
 */
public MappedDataRenderer(GLEnRoutePathway parentView){
  this.parentView=parentView;
  viewFrustum=new ViewFrustum();
  baseLayoutManger=new LayoutManager(viewFrustum,parentView.getPixelGLConverter());
  highlightLayoutManger=new LayoutManager(viewFrustum,parentView.getPixelGLConverter());
  geneSelectionManager=parentView.getGeneSelectionManager();
  List<GeneticDataDomain> dataDomains=DataDomainManager.get().getDataDomainsByType(GeneticDataDomain.class);
  if (dataDomains.size() != 0) {
    sampleIDType=dataDomains.get(0).getSampleIDType().getIDCategory().getPrimaryMappingType();
    sampleSelectionManager=parentView.getSampleSelectionManager();
    sampleGroupSelectionManager=new EventBasedSelectionManager(parentView,dataDomains.get(0).getSampleGroupIDType());
    SelectionTypeEvent selectionTypeEvent=new SelectionTypeEvent(abstractGroupType);
    GeneralManager.get().getEventPublisher().triggerEvent(selectionTypeEvent);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  registerPickingListeners();
}","/** 
 * Constructor with parent view as parameter.
 */
public MappedDataRenderer(GLEnRoutePathway parentView){
  this.parentView=parentView;
  geneSelectionManager=parentView.getGeneSelectionManager();
  List<GeneticDataDomain> dataDomains=DataDomainManager.get().getDataDomainsByType(GeneticDataDomain.class);
  if (dataDomains.size() != 0) {
    sampleIDType=dataDomains.get(0).getSampleIDType().getIDCategory().getPrimaryMappingType();
    sampleSelectionManager=parentView.getSampleSelectionManager();
    sampleGroupSelectionManager=new EventBasedSelectionManager(parentView,dataDomains.get(0).getSampleGroupIDType());
    SelectionTypeEvent selectionTypeEvent=new SelectionTypeEvent(abstractGroupType);
    GeneralManager.get().getEventPublisher().triggerEvent(selectionTypeEvent);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
  registerPickingListeners();
}",0.8963782696177063
57390,"/** 
 * @param sizeConfig setter, see  {@link sizeConfig}
 */
public void setSizeConfig(PathSizeConfiguration sizeConfig){
  this.sizeConfig=sizeConfig;
}","/** 
 * @param sizeConfig setter, see  {@link sizeConfig}
 */
public void setSizeConfig(PathSizeConfiguration sizeConfig){
  this.sizeConfig=sizeConfig;
  if (pathSegments != null && !pathSegments.isEmpty())   updateLayout();
}",0.8083989501312336
57391,"public EnRoutePathRenderer(AGLView view,List<TablePerspective> tablePerspectives){
  super(view,tablePerspectives);
  setSizeConfig(new PathSizeConfiguration.Builder(PathSizeConfiguration.ENROUTE_COMPACT).branchSummaryNodeWidth(50).branchAreaWidth(65).pathAreaWidth(80).minNodeSpacing(25).branchNodeToPathNodeVerticalSpacing(10).branchSummaryNodeBranchAreaSpacing(4).build());
}","public EnRoutePathRenderer(AGLView view,List<TablePerspective> tablePerspectives){
  super(view,tablePerspectives);
  setSizeConfig(PathSizeConfiguration.ENROUTE_DEFAULT);
}",0.6098003629764065
57392,"@Override public ALayoutRenderer createRemoteView(AGLView remoteRenderingView,List<TablePerspective> tablePerspectives,String embeddingEventSpace){
  APathwayPathRenderer renderer=new VerticalPathRenderer(remoteRenderingView,tablePerspectives);
  renderer.setPathwayPathEventSpace(embeddingEventSpace);
  renderer.init();
  return renderer;
}","@Override public ALayoutRenderer createRemoteView(AGLView remoteRenderingView,List<TablePerspective> tablePerspectives,String embeddingEventSpace){
  APathwayPathRenderer renderer=new VerticalPathRenderer(remoteRenderingView,tablePerspectives);
  renderer.setPathwayPathEventSpace(embeddingEventSpace);
  renderer.setSizeConfig(PathSizeConfiguration.COMPACT);
  renderer.init();
  return renderer;
}",0.8879892037786775
57393,"@Override public ALayoutRenderer createRemoteView(AGLView remoteRenderingView,List<TablePerspective> tablePerspectives,String embeddingEventSpace){
  APathwayPathRenderer renderer=new VerticalPathRenderer(remoteRenderingView,tablePerspectives);
  renderer.setPathwayPathEventSpace(embeddingEventSpace);
  if (tablePerspectives.size() > 0) {
    TablePerspective tablePerspective=tablePerspectives.get(0);
    if (!(tablePerspective instanceof PathwayTablePerspective)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    renderer.setPathway(((PathwayTablePerspective)tablePerspective).getPathway());
  }
  renderer.init();
  return renderer;
}","@Override public ALayoutRenderer createRemoteView(AGLView remoteRenderingView,List<TablePerspective> tablePerspectives,String embeddingEventSpace){
  APathwayPathRenderer renderer=new VerticalPathRenderer(remoteRenderingView,tablePerspectives);
  renderer.setPathwayPathEventSpace(embeddingEventSpace);
  if (tablePerspectives.size() > 0) {
    TablePerspective tablePerspective=tablePerspectives.get(0);
    if (!(tablePerspective instanceof PathwayTablePerspective)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    renderer.setPathway(((PathwayTablePerspective)tablePerspective).getPathway());
  }
  renderer.setSizeConfig(PathSizeConfiguration.COMPACT);
  renderer.init();
  return renderer;
}",0.951624548736462
57394,"@Override public Vec2f getAbsoluteLocation(){
  return new Vec2f(viewFrustum.getLeft(),viewFrustum.getTop());
}","@Override public Vec2f getAbsoluteLocation(){
  return new Vec2f(viewFrustum.getLeft(),viewFrustum.getBottom());
}",0.9688888888888888
57395,"public PathwayGraph getPathway(){
  return pathway;
}","@Override public PathwayGraph getPathway(){
  return pathway;
}",0.913793103448276
57396,"FirehoseProvider(String tumor,Date analysisRun,Date dataRun,Settings settings){
  this.tumor=tumor;
  this.tumorSample=guessTumorSample(tumor,analysisRun);
  this.analysisRun=analysisRun;
  this.dataRun=dataRun;
  this.settings=settings;
  String tmpDir=settings.getTemporaryDirectory();
  this.tmpAnalysisDir=createTempDirectory(tmpDir,analysisRun,tumor);
  this.tmpDataDir=createTempDirectory(tmpDir,dataRun,tumor);
}","FirehoseProvider(String tumor,Date analysisRun,Date dataRun,Settings settings){
  this.tumor=tumor;
  this.relevantDate=Calendar.getInstance();
  this.relevantDate.setTime(analysisRun);
  this.tumorSample=guessTumorSample(tumor,this.relevantDate);
  this.analysisRun=analysisRun;
  this.dataRun=dataRun;
  this.settings=settings;
  String tmpDir=settings.getTemporaryDirectory();
  this.tmpAnalysisDir=createTempDirectory(tmpDir,analysisRun,tumor);
  this.tmpDataDir=createTempDirectory(tmpDir,dataRun,tumor);
}",0.8774193548387097
57397,"public Pair<File,Integer> findMutationFile(){
  int startColumn=8;
  File mutationFile=extractAnalysisRunFile(getFileName(""String_Node_Str""),""String_Node_Str"",LEVEL);
  if (mutationFile == null)   mutationFile=extractAnalysisRunFile(getFileName(""String_Node_Str""),""String_Node_Str"",LEVEL);
  if (mutationFile == null) {
    File maf=extractAnalysisRunFile(tumor + ""String_Node_Str"",""String_Node_Str"",LEVEL);
    if (maf != null) {
      mutationFile=parseMAF(maf);
      startColumn=1;
    }
  }
  return Pair.make(mutationFile,startColumn);
}","public Pair<File,Integer> findMutationFile(){
  int startColumn=8;
  File mutationFile=null;
  if (relevantDate.get(Calendar.YEAR) < 2013) {
    mutationFile=extractAnalysisRunFile(getFileName(""String_Node_Str""),""String_Node_Str"",LEVEL);
    if (mutationFile == null)     mutationFile=extractAnalysisRunFile(getFileName(""String_Node_Str""),""String_Node_Str"",LEVEL);
  }
  if (mutationFile == null) {
    File maf=extractAnalysisRunFile(tumor + ""String_Node_Str"",""String_Node_Str"",LEVEL);
    if (maf != null) {
      mutationFile=parseMAF(maf);
      startColumn=1;
    }
  }
  return Pair.make(mutationFile,startColumn);
}",0.8892703862660944
57398,"/** 
 * logic determining the tumor sample based on the analysis run
 * @param tumor
 * @param date
 * @return
 */
private static String guessTumorSample(String tumor,Date date){
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  if (cal.get(Calendar.YEAR) >= 2013)   return tumor + ""String_Node_Str"";
  return tumor;
}","/** 
 * logic determining the tumor sample based on the analysis run
 * @param tumor
 * @param date
 * @return
 */
private static String guessTumorSample(String tumor,Calendar cal){
  if (cal.get(Calendar.YEAR) >= 2013)   return tumor + ""String_Node_Str"";
  return tumor;
}",0.8656716417910447
57399,"@Override protected String compute(){
  System.out.println(""String_Node_Str"" + tumorType + ""String_Node_Str""+ analysisRun);
  String runSpecificOutputPath=settings.getDataDirectory(Settings.format(analysisRun));
  FirehoseProvider firehoseProvider=settings.createFirehoseProvider(tumorType,analysisRun,dataRun);
  ProjectDescription project=new TCGAXMLGenerator(firehoseProvider,settings).invoke();
  if (project.getDataSetDescriptionCollection().isEmpty())   return null;
  if (settings.isDownloadOnly())   return null;
  System.out.println(""String_Node_Str"" + tumorType + ""String_Node_Str""+ analysisRun);
  String projectOutputPath=runSpecificOutputPath + analysisRun + ""String_Node_Str""+ tumorType+ ""String_Node_Str"";
  Collection<ATableBasedDataDomain> dataDomains=new XMLToProjectBuilder().buildProject(project,projectOutputPath);
  project=null;
  String projectRemoteOutputURL=settings.getTcgaServerURL() + analysisRun + ""String_Node_Str""+ analysisRun+ ""String_Node_Str""+ tumorType+ ""String_Node_Str"";
  StringBuilder report=new StringBuilder();
  String jnlpFileName=analysisRun + ""String_Node_Str"" + tumorType+ ""String_Node_Str"";
  String firehoseReportURL=firehoseProvider.getReportURL();
  generateTumorReportLine(report,dataDomains,tumorType,analysisRun,jnlpFileName,projectRemoteOutputURL,firehoseReportURL);
  generateJNLP(new File(settings.getJNLPOutputDirectory(),jnlpFileName),projectRemoteOutputURL);
  cleanUp(dataDomains);
  return report.toString();
}","@Override protected String compute(){
  System.out.println(""String_Node_Str"" + tumorType + ""String_Node_Str""+ analysisRun);
  String run=Settings.format(analysisRun);
  String runSpecificOutputPath=settings.getDataDirectory(run);
  FirehoseProvider firehoseProvider=settings.createFirehoseProvider(tumorType,analysisRun,dataRun);
  ProjectDescription project=new TCGAXMLGenerator(firehoseProvider,settings).invoke();
  if (project.getDataSetDescriptionCollection().isEmpty())   return null;
  if (settings.isDownloadOnly())   return null;
  System.out.println(""String_Node_Str"" + tumorType + ""String_Node_Str""+ analysisRun);
  String projectOutputPath=runSpecificOutputPath + run + ""String_Node_Str""+ tumorType+ ""String_Node_Str"";
  Collection<ATableBasedDataDomain> dataDomains=new XMLToProjectBuilder().buildProject(project,projectOutputPath);
  project=null;
  String projectRemoteOutputURL=settings.getTcgaServerURL() + run + ""String_Node_Str""+ run+ ""String_Node_Str""+ tumorType+ ""String_Node_Str"";
  StringBuilder report=new StringBuilder();
  String jnlpFileName=run + ""String_Node_Str"" + tumorType+ ""String_Node_Str"";
  String firehoseReportURL=firehoseProvider.getReportURL();
  generateTumorReportLine(report,dataDomains,tumorType,analysisRun,jnlpFileName,projectRemoteOutputURL,firehoseReportURL);
  generateJNLP(new File(settings.getJNLPOutputDirectory(),jnlpFileName),projectRemoteOutputURL);
  cleanUp(dataDomains);
  return report.toString();
}",0.9447098976109216
57400,"/** 
 * returns an id of a free display list index
 * @param g
 * @return
 */
public int checkOut(GLGraphics g){
  if (displayListIndices.isEmpty())   createDisplayListIndices(g);
  if (displayListIndices.isEmpty()) {
    return -1;
  }
  int i=displayListIndices.pop();
  return i;
}","/** 
 * returns an id of a free display list index
 * @param g
 * @return
 */
public int checkOut(GLGraphics g){
  if (isRecording())   return -1;
  if (displayListIndices.isEmpty())   createDisplayListIndices(g);
  if (displayListIndices.isEmpty()) {
    return -1;
  }
  int i=displayListIndices.pop();
  return i;
}",0.9435215946843852
57401,"@Override protected void takeDown(){
  IGLView view=(IGLView)context;
  GL2 gl=view.getParentGLCanvas().asGLAutoDrawAble().getGL().getGL2();
  this.layout.destroy(gl);
  super.takeDown();
}","@Override protected void takeDown(){
}",0.3348017621145374
57402,"public final void clear(){
  for (Iterator<GLElement> it=this.iterator(); it.hasNext(); ) {
    GLElement e=it.next();
    takeDown(e);
    it.remove();
  }
  relayout();
}","public final void clear(){
  for (Iterator<GLElement> it=children.iterator(); it.hasNext(); ) {
    GLElement e=it.next();
    takeDown(e);
    it.remove();
  }
  relayout();
}",0.9770114942528736
57403,"@Override public ALayoutRenderer createRemoteView(AGLView remoteRenderingView,List<TablePerspective> tablePerspectives,String embeddingEventSpace){
  APathwayPathRenderer renderer=new VerticalPathRenderer(remoteRenderingView,tablePerspectives);
  renderer.init();
  return renderer;
}","@Override public ALayoutRenderer createRemoteView(AGLView remoteRenderingView,List<TablePerspective> tablePerspectives,String embeddingEventSpace){
  APathwayPathRenderer renderer=new VerticalPathRenderer(remoteRenderingView,tablePerspectives);
  renderer.setPathwayPathEventSpace(embeddingEventSpace);
  renderer.init();
  return renderer;
}",0.9073482428115016
57404,"protected void renderPathwayBorders(GL2 gl){
  float topPathwayTitleLimit=y - pixelGLConverter.getGLHeightForPixelHeight(TOP_SPACING_PIXELS);
  int segmentIndex=0;
  for (int i=0; i < pathNodes.size(); i++) {
    ALinearizableNode node=pathNodes.get(i);
    if (node.getVertexReps().size() > 1) {
      float nodePositionY=node.getPosition().y();
      gl.glColor3f(0.95f,0.95f,0.95f);
      gl.glBegin(GL2.GL_QUADS);
      gl.glVertex3f(0,nodePositionY - pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(x,nodePositionY - pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(x,nodePositionY + pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(0,nodePositionY + pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glEnd();
      gl.glColor3f(0.5f,0.5f,0.5f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(x,nodePositionY + pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(0,nodePositionY + pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(x,nodePositionY - pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(0,nodePositionY - pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glEnd();
      renderPathwayTitle(gl,segmentIndex,topPathwayTitleLimit,nodePositionY);
      gl.glPopMatrix();
      topPathwayTitleLimit=nodePositionY;
      segmentIndex++;
    }
    if (segmentIndex == pathSegments.size() - 1) {
      renderPathwayTitle(gl,segmentIndex,topPathwayTitleLimit,y - pixelGLConverter.getGLHeightForPixelHeight(minHeightPixels));
      segmentIndex++;
    }
  }
}","protected void renderPathwayBorders(GL2 gl){
  float topPathwayTitleLimit=y - pixelGLConverter.getGLHeightForPixelHeight(TOP_SPACING_PIXELS);
  int segmentIndex=0;
  for (int i=0; i < pathNodes.size(); i++) {
    ALinearizableNode node=pathNodes.get(i);
    if (node.getVertexReps().size() > 1) {
      float nodePositionY=node.getPosition().y();
      gl.glColor3f(0.95f,0.95f,0.95f);
      gl.glBegin(GL2.GL_QUADS);
      gl.glVertex3f(0,nodePositionY - pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(x,nodePositionY - pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(x,nodePositionY + pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(0,nodePositionY + pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glEnd();
      gl.glColor3f(0.5f,0.5f,0.5f);
      gl.glBegin(GL.GL_LINES);
      gl.glVertex3f(x,nodePositionY + pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(0,nodePositionY + pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(x,nodePositionY - pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glVertex3f(0,nodePositionY - pixelGLConverter.getGLHeightForPixelHeight(5),0);
      gl.glEnd();
      renderPathwayTitle(gl,segmentIndex,topPathwayTitleLimit,nodePositionY);
      topPathwayTitleLimit=nodePositionY;
      segmentIndex++;
    }
    if (segmentIndex == pathSegments.size() - 1) {
      renderPathwayTitle(gl,segmentIndex,topPathwayTitleLimit,y - pixelGLConverter.getGLHeightForPixelHeight(minHeightPixels));
      segmentIndex++;
    }
  }
}",0.9924859110832812
57405,"protected void setupLayout(){
  Column baseColumn=new Column(""String_Node_Str"");
  colorRenderer=new ColorRenderer(new float[]{1,1,1,1});
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.setColor(new float[]{0.9f,0.9f,0.9f,1});
  colorRenderer.setView(view);
  colorRenderer.addPickingID(EPickingType.BRANCH_SUMMARY_NODE.name(),nodeId);
  baseColumn.addBackgroundRenderer(colorRenderer);
  baseColumn.setBottomUp(false);
  Row baseRow=new Row(""String_Node_Str"");
  baseRow.setPixelSizeY(LABEL_HEIGHT_PIXELS);
  ElementLayout collapseButtonLayout=new ElementLayout(""String_Node_Str"");
  collapseButton=new Button(EPickingType.BRANCH_SUMMARY_NODE_COLLAPSE_BUTTON.name(),nodeId,EIconTextures.GROUPER_COLLAPSE_PLUS);
  ButtonRenderer collapseButtonRenderer=new ButtonRenderer.Builder(view,collapseButton).build();
  collapseButtonLayout.setRenderer(collapseButtonRenderer);
  collapseButtonLayout.setPixelSizeX(COLLAPSE_BUTTON_SIZE_PIXELS);
  collapseButtonLayout.setPixelSizeY(COLLAPSE_BUTTON_SIZE_PIXELS);
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  labelRenderer=new BranchNodeLabelRenderer(this,view);
  captionLayout.setRenderer(labelRenderer);
  captionLayout.setPixelSizeY(LABEL_HEIGHT_PIXELS);
  ElementLayout numNodesLabelLayout=new ElementLayout(""String_Node_Str"");
  LabelRenderer numNodesLabelRenderer=new LabelRenderer(view,this);
  numNodesLabelLayout.setRenderer(numNodesLabelRenderer);
  numNodesLabelLayout.setPixelSizeY(LABEL_HEIGHT_PIXELS);
  numNodesLabelLayout.setPixelSizeX(NUM_NODES_LABEL_WIDTH_PIXELS);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(SPACING_PIXELS);
  baseRow.append(horizontalSpacing);
  baseRow.append(collapseButtonLayout);
  baseRow.append(horizontalSpacing);
  baseRow.append(captionLayout);
  baseRow.append(horizontalSpacing);
  baseRow.append(numNodesLabelLayout);
  baseRow.append(horizontalSpacing);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(SPACING_PIXELS);
  baseColumn.append(verticalSpacing);
  baseColumn.append(baseRow);
  baseColumn.append(verticalSpacing);
  layoutManager.setBaseElementLayout(baseColumn);
}","protected void setupLayout(){
  Column baseColumn=new Column(""String_Node_Str"");
  colorRenderer=new ColorRenderer(new float[]{1,1,1,1});
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.setColor(new float[]{0.9f,0.9f,0.9f,1});
  colorRenderer.setDrawBorder(true);
  colorRenderer.setView(view);
  colorRenderer.addPickingID(EPickingType.BRANCH_SUMMARY_NODE.name(),nodeId);
  baseColumn.addBackgroundRenderer(colorRenderer);
  baseColumn.setBottomUp(false);
  Row baseRow=new Row(""String_Node_Str"");
  baseRow.setPixelSizeY(LABEL_HEIGHT_PIXELS);
  ElementLayout collapseButtonLayout=new ElementLayout(""String_Node_Str"");
  collapseButton=new Button(EPickingType.BRANCH_SUMMARY_NODE_COLLAPSE_BUTTON.name(),nodeId,EIconTextures.GROUPER_COLLAPSE_PLUS);
  ButtonRenderer collapseButtonRenderer=new ButtonRenderer.Builder(view,collapseButton).build();
  collapseButtonLayout.setRenderer(collapseButtonRenderer);
  collapseButtonLayout.setPixelSizeX(COLLAPSE_BUTTON_SIZE_PIXELS);
  collapseButtonLayout.setPixelSizeY(COLLAPSE_BUTTON_SIZE_PIXELS);
  ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
  labelRenderer=new BranchNodeLabelRenderer(this,view);
  captionLayout.setRenderer(labelRenderer);
  captionLayout.setPixelSizeY(LABEL_HEIGHT_PIXELS);
  ElementLayout numNodesLabelLayout=new ElementLayout(""String_Node_Str"");
  LabelRenderer numNodesLabelRenderer=new LabelRenderer(view,this);
  numNodesLabelLayout.setRenderer(numNodesLabelRenderer);
  numNodesLabelLayout.setPixelSizeY(LABEL_HEIGHT_PIXELS);
  numNodesLabelLayout.setPixelSizeX(NUM_NODES_LABEL_WIDTH_PIXELS);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(SPACING_PIXELS);
  baseRow.append(horizontalSpacing);
  baseRow.append(collapseButtonLayout);
  baseRow.append(horizontalSpacing);
  baseRow.append(captionLayout);
  baseRow.append(horizontalSpacing);
  baseRow.append(numNodesLabelLayout);
  baseRow.append(horizontalSpacing);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(SPACING_PIXELS);
  baseColumn.append(verticalSpacing);
  baseColumn.append(baseRow);
  baseColumn.append(verticalSpacing);
  layoutManager.setBaseElementLayout(baseColumn);
}",0.9916421956178
57406,"@Override public void apply(ALinearizableNode node){
  this.node=node;
  destroy();
  init();
  attributeRenderers.clear();
  Column baseColumn=new Column(""String_Node_Str"");
  Row baseRow=new Row(""String_Node_Str"");
  ColorRenderer colorRenderer=new ColorRenderer(new float[]{1,1,1,1});
  colorRenderer.setView(view);
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.addPickingID(EPickingType.LINEARIZABLE_NODE.name(),node.getNodeId());
  baseColumn.addBackgroundRenderer(colorRenderer);
  ElementLayout labelLayout=new ElementLayout(""String_Node_Str"");
  LabelRenderer labelRenderer=new LabelRenderer(view,node);
  labelRenderer.setAlignment(LabelRenderer.LabelAlignment.CENTER);
  labelLayout.setRenderer(labelRenderer);
  labelLayout.setPixelSizeY(16);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(2);
  baseRow.append(labelLayout);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(2);
  baseColumn.append(verticalSpacing);
  baseColumn.append(baseRow);
  baseColumn.append(verticalSpacing);
  layoutManager.setBaseElementLayout(baseColumn);
  for (  ALinearizableNode childNode : ((ComplexNode)node).getNodes()) {
    enRoutePathRenderer.setPreviewMode(childNode);
  }
}","@Override public void apply(ALinearizableNode node){
  this.node=node;
  destroy();
  init();
  attributeRenderers.clear();
  Column baseColumn=new Column(""String_Node_Str"");
  Row baseRow=new Row(""String_Node_Str"");
  ColorRenderer colorRenderer=new ColorRenderer(new float[]{1,1,1,1});
  colorRenderer.setView(view);
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.setDrawBorder(true);
  colorRenderer.addPickingID(EPickingType.LINEARIZABLE_NODE.name(),node.getNodeId());
  baseColumn.addBackgroundRenderer(colorRenderer);
  ElementLayout labelLayout=new ElementLayout(""String_Node_Str"");
  LabelRenderer labelRenderer=new LabelRenderer(view,node);
  labelRenderer.setAlignment(LabelRenderer.LabelAlignment.CENTER);
  labelLayout.setRenderer(labelRenderer);
  labelLayout.setPixelSizeY(16);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(2);
  baseRow.append(labelLayout);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(2);
  baseColumn.append(verticalSpacing);
  baseColumn.append(baseRow);
  baseColumn.append(verticalSpacing);
  layoutManager.setBaseElementLayout(baseColumn);
  for (  ALinearizableNode childNode : ((ComplexNode)node).getNodes()) {
    enRoutePathRenderer.setPreviewMode(childNode);
  }
}",0.9857087678640402
57407,"@Override public void apply(ALinearizableNode node){
  this.node=node;
  destroy();
  init();
  attributeRenderers.clear();
  if (node.getParentNode() == null) {
    RemoveNodeButtonAttributeRenderer attributeRenderer=new RemoveNodeButtonAttributeRenderer(view,node,pathwayPathRenderer);
    attributeRenderer.addNodeId(node.getNodeId());
    addAttributeRenderer(attributeRenderer);
    attributeRenderer.registerPickingListeners();
  }
  Column baseColumn=new Column(""String_Node_Str"");
  Row baseRow=new Row(""String_Node_Str"");
  colorRenderer=new ColorRenderer(this);
  colorRenderer.setView(view);
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.addPickingID(EPickingType.LINEARIZABLE_NODE.name(),node.getNodeId());
  baseColumn.addBackgroundRenderer(colorRenderer);
  ElementLayout labelLayout=new ElementLayout(""String_Node_Str"");
  labelLayout.setRenderer(Renderers.createLabel(node,view).setAlignment(LabelAlignment.CENTER));
  labelLayout.setPixelSizeY(16);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(2);
  baseRow.append(labelLayout);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(2);
  baseColumn.append(verticalSpacing);
  baseColumn.append(baseRow);
  baseColumn.append(verticalSpacing);
  layoutManager.setBaseElementLayout(baseColumn);
}","@Override public void apply(ALinearizableNode node){
  this.node=node;
  destroy();
  init();
  attributeRenderers.clear();
  if (node.getParentNode() == null) {
    RemoveNodeButtonAttributeRenderer attributeRenderer=new RemoveNodeButtonAttributeRenderer(view,node,pathwayPathRenderer);
    attributeRenderer.addNodeId(node.getNodeId());
    addAttributeRenderer(attributeRenderer);
    attributeRenderer.registerPickingListeners();
  }
  Column baseColumn=new Column(""String_Node_Str"");
  Row baseRow=new Row(""String_Node_Str"");
  colorRenderer=new ColorRenderer(this);
  colorRenderer.setView(view);
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.setDrawBorder(true);
  colorRenderer.addPickingID(EPickingType.LINEARIZABLE_NODE.name(),node.getNodeId());
  baseColumn.addBackgroundRenderer(colorRenderer);
  ElementLayout labelLayout=new ElementLayout(""String_Node_Str"");
  labelLayout.setRenderer(Renderers.createLabel(node,view).setAlignment(LabelAlignment.CENTER));
  labelLayout.setPixelSizeY(16);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(2);
  baseRow.append(labelLayout);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(2);
  baseColumn.append(verticalSpacing);
  baseColumn.append(baseRow);
  baseColumn.append(verticalSpacing);
  layoutManager.setBaseElementLayout(baseColumn);
}",0.9865796155241204
57408,"@Override public void apply(ALinearizableNode node){
  this.node=node;
  destroy();
  init();
  attributeRenderers.clear();
  Column baseColumn=new Column(""String_Node_Str"");
  baseColumn.setBottomUp(false);
  Row titleRow=new Row(""String_Node_Str"");
  titleRow.setFrameColor(0,1,0,1);
  titleRow.setYDynamic(true);
  colorRenderer=new ColorRenderer(this);
  colorRenderer.setView(view);
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.addPickingID(EPickingType.LINEARIZABLE_NODE.name(),node.getNodeId());
  baseColumn.addBackgroundRenderer(colorRenderer);
  ElementLayout labelLayout=new ElementLayout(""String_Node_Str"");
  labelLayout.setRenderer(Renderers.createLabel(node,view).setAlignment(LabelAlignment.CENTER));
  labelLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(SPACING_PIXELS);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(SPACING_PIXELS);
  heightPixels=0;
  Column previewRow=null;
  if (node.getMappedDavidIDs().size() > 0) {
    previewRow=createPreviewRow(horizontalSpacing,verticalSpacing);
  }
  titleRow.append(labelLayout);
  baseColumn.append(verticalSpacing);
  baseColumn.append(titleRow);
  baseColumn.append(verticalSpacing);
  heightPixels+=2 * SPACING_PIXELS + CAPTION_HEIGHT_PIXELS;
  if (previewRow != null) {
    baseColumn.append(previewRow);
  }
  layoutManager.setBaseElementLayout(baseColumn);
}","@Override public void apply(ALinearizableNode node){
  this.node=node;
  destroy();
  init();
  attributeRenderers.clear();
  Column baseColumn=new Column(""String_Node_Str"");
  baseColumn.setBottomUp(false);
  Row titleRow=new Row(""String_Node_Str"");
  titleRow.setFrameColor(0,1,0,1);
  titleRow.setYDynamic(true);
  colorRenderer=new ColorRenderer(this);
  colorRenderer.setView(view);
  colorRenderer.setBorderColor(new float[]{0,0,0,1});
  colorRenderer.setDrawBorder(true);
  colorRenderer.addPickingID(EPickingType.LINEARIZABLE_NODE.name(),node.getNodeId());
  baseColumn.addBackgroundRenderer(colorRenderer);
  ElementLayout labelLayout=new ElementLayout(""String_Node_Str"");
  labelLayout.setRenderer(Renderers.createLabel(node,view).setAlignment(LabelAlignment.CENTER));
  labelLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  ElementLayout horizontalSpacing=new ElementLayout();
  horizontalSpacing.setPixelSizeX(SPACING_PIXELS);
  ElementLayout verticalSpacing=new ElementLayout();
  verticalSpacing.setPixelSizeY(SPACING_PIXELS);
  heightPixels=0;
  Column previewRow=null;
  if (node.getMappedDavidIDs().size() > 0) {
    previewRow=createPreviewRow(horizontalSpacing,verticalSpacing);
  }
  titleRow.append(labelLayout);
  baseColumn.append(verticalSpacing);
  baseColumn.append(titleRow);
  baseColumn.append(verticalSpacing);
  heightPixels+=2 * SPACING_PIXELS + CAPTION_HEIGHT_PIXELS;
  if (previewRow != null) {
    baseColumn.append(previewRow);
  }
  layoutManager.setBaseElementLayout(baseColumn);
}",0.9876543209876544
57409,"/** 
 * Render the histogram itself
 * @param gl
 */
private void renderHistogram(GL2 gl){
  if (histogram == null) {
    if (dataDomain != null && tablePerspective != null) {
      if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),tablePerspective.getRecordPerspective().getVirtualArray(),tablePerspective.getDimensionPerspective().getVirtualArray(),5);
      }
 else       if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),tablePerspective.getRecordPerspective().getVirtualArray(),tablePerspective.getDimensionPerspective().getVirtualArray(),2);
      }
 else {
        histogram=tablePerspective.getContainerStatistics().getHistogram();
      }
    }
 else     if (dataDomain != null) {
      TablePerspective defaultTablePerspective=dataDomain.getDefaultTablePerspective();
      if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),defaultTablePerspective.getRecordPerspective().getVirtualArray(),defaultTablePerspective.getDimensionPerspective().getVirtualArray(),5);
      }
 else       if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),defaultTablePerspective.getRecordPerspective().getVirtualArray(),defaultTablePerspective.getDimensionPerspective().getVirtualArray(),2);
      }
 else {
        histogram=defaultTablePerspective.getContainerStatistics().getHistogram();
      }
    }
 else {
      return;
    }
  }
  float spacing=(viewFrustum.getWidth() - 2 * sideSpacing) / histogram.size();
  float continuousColorDistance=1.0f / histogram.size();
  float fOneHeightValue=(viewFrustum.getHeight() - 2 * sideSpacing) / histogram.getLargestValue();
  int iCount=0;
  for (int bucketCount=0; bucketCount < histogram.size(); bucketCount++) {
    Integer iValue=histogram.get(bucketCount);
    if (useColor)     gl.glColor3fv(dataDomain.getColorMapper().getColor(continuousColorDistance * iCount + continuousColorDistance / 2),0);
    gl.glLineWidth(3.0f);
    gl.glBegin(GL2.GL_POLYGON);
    gl.glVertex3f(spacing * iCount + sideSpacing,sideSpacing,0);
    gl.glVertex3f(spacing * iCount + sideSpacing,sideSpacing + iValue * fOneHeightValue,0);
    gl.glVertex3f(spacing * (iCount + 1) + sideSpacing,sideSpacing + iValue * fOneHeightValue,0);
    gl.glVertex3f(spacing * (iCount + 1) + sideSpacing,sideSpacing,0);
    gl.glEnd();
    gl.glBegin(GL2GL3.GL_LINE);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(2,2,2);
    gl.glEnd();
    iCount++;
  }
}","/** 
 * Render the histogram itself
 * @param gl
 */
private void renderHistogram(GL2 gl){
  if (histogram == null) {
    if (dataDomain != null && tablePerspective != null) {
      if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),tablePerspective.getRecordPerspective().getVirtualArray(),tablePerspective.getDimensionPerspective().getVirtualArray(),5);
      }
 else       if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),tablePerspective.getRecordPerspective().getVirtualArray(),tablePerspective.getDimensionPerspective().getVirtualArray(),2);
      }
 else {
        histogram=tablePerspective.getContainerStatistics().getHistogram();
      }
    }
 else     if (dataDomain != null) {
      TablePerspective defaultTablePerspective=dataDomain.getDefaultTablePerspective();
      if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),defaultTablePerspective.getRecordPerspective().getVirtualArray(),defaultTablePerspective.getDimensionPerspective().getVirtualArray(),5);
      }
 else       if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),defaultTablePerspective.getRecordPerspective().getVirtualArray(),defaultTablePerspective.getDimensionPerspective().getVirtualArray(),2);
      }
 else {
        histogram=defaultTablePerspective.getContainerStatistics().getHistogram();
      }
    }
 else {
      return;
    }
  }
  float spacing=(viewFrustum.getWidth() - 2 * sideSpacing) / histogram.size();
  float continuousColorDistance=1.0f / histogram.size();
  float fOneHeightValue=(viewFrustum.getHeight() - 2 * sideSpacing) / histogram.getLargestValue();
  int iCount=0;
  for (int bucketCount=0; bucketCount < histogram.size(); bucketCount++) {
    Integer iValue=histogram.get(bucketCount);
    if (useColor)     gl.glColor3fv(dataDomain.getColorMapper().getColor(continuousColorDistance * iCount + continuousColorDistance / 2),0);
    gl.glLineWidth(3.0f);
    gl.glBegin(GL2.GL_POLYGON);
    gl.glVertex3f(spacing * iCount + sideSpacing,sideSpacing,0);
    gl.glVertex3f(spacing * iCount + sideSpacing,sideSpacing + iValue * fOneHeightValue,0);
    gl.glVertex3f(spacing * (iCount + 1) + sideSpacing,sideSpacing + iValue * fOneHeightValue,0);
    gl.glVertex3f(spacing * (iCount + 1) + sideSpacing,sideSpacing,0);
    gl.glEnd();
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(2,2,2);
    gl.glEnd();
    iCount++;
  }
}",0.9991015274034142
57410,"public void renderPathway(final GL2 gl,final AGLView containingView,final PathwayGraph pathway,final float fTextureTransparency,final boolean bHighlight){
  Texture tmpPathwayTexture=loadPathwayTexture(pathway);
  tmpPathwayTexture.enable(gl);
  tmpPathwayTexture.bind(gl);
  if (bHighlight) {
    gl.glColor4f(1f,0.85f,0.85f,fTextureTransparency);
  }
 else {
    gl.glColor4f(1f,1f,1f,fTextureTransparency);
  }
  TextureCoords texCoords=tmpPathwayTexture.getImageTexCoords();
  float textureWidth=containingView.getPixelGLConverter().getGLWidthForPixelWidth(pathway.getWidth());
  float textureHeight=containingView.getPixelGLConverter().getGLHeightForPixelHeight(pathway.getHeight());
  gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_MIN_FILTER,GL.GL_LINEAR_MIPMAP_LINEAR);
  gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_MAG_FILTER,GL.GL_LINEAR_MIPMAP_LINEAR);
  gl.glBegin(GL2.GL_QUADS);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(0.0f,0.0f,0.0f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(textureWidth,0.0f,0.0f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(textureWidth,textureHeight,0.0f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(0.0f,textureHeight,0.0f);
  gl.glEnd();
  tmpPathwayTexture.disable(gl);
  if (bHighlight) {
    gl.glColor4f(1,0,0,1);
    gl.glLineWidth(3);
  }
 else {
    gl.glColor4f(0.5f,0.5f,0.5f,1.0f);
    gl.glLineWidth(1);
  }
  gl.glBegin(GL.GL_LINE_STRIP);
  gl.glVertex3f(0.0f,0.0f,0.0f);
  gl.glVertex3f(textureWidth,0.0f,0.0f);
  gl.glVertex3f(textureWidth,textureHeight,0.0f);
  gl.glVertex3f(0.0f,textureHeight,0.0f);
  gl.glVertex3f(0.0f,0.0f,0.0f);
  gl.glEnd();
}","public void renderPathway(final GL2 gl,final AGLView containingView,final PathwayGraph pathway,final float fTextureTransparency,final boolean bHighlight){
  Texture tmpPathwayTexture=loadPathwayTexture(pathway);
  tmpPathwayTexture.enable(gl);
  tmpPathwayTexture.bind(gl);
  if (bHighlight) {
    gl.glColor4f(1f,0.85f,0.85f,fTextureTransparency);
  }
 else {
    gl.glColor4f(1f,1f,1f,fTextureTransparency);
  }
  TextureCoords texCoords=tmpPathwayTexture.getImageTexCoords();
  float textureWidth=containingView.getPixelGLConverter().getGLWidthForPixelWidth(pathway.getWidth());
  float textureHeight=containingView.getPixelGLConverter().getGLHeightForPixelHeight(pathway.getHeight());
  gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_MIN_FILTER,GL.GL_LINEAR_MIPMAP_LINEAR);
  gl.glTexParameteri(GL.GL_TEXTURE_2D,GL.GL_TEXTURE_MAG_FILTER,GL.GL_LINEAR);
  gl.glBegin(GL2.GL_QUADS);
  gl.glTexCoord2f(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(0.0f,0.0f,0.0f);
  gl.glTexCoord2f(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(textureWidth,0.0f,0.0f);
  gl.glTexCoord2f(texCoords.right(),texCoords.top());
  gl.glVertex3f(textureWidth,textureHeight,0.0f);
  gl.glTexCoord2f(texCoords.left(),texCoords.top());
  gl.glVertex3f(0.0f,textureHeight,0.0f);
  gl.glEnd();
  tmpPathwayTexture.disable(gl);
  if (bHighlight) {
    gl.glColor4f(1,0,0,1);
    gl.glLineWidth(3);
  }
 else {
    gl.glColor4f(0.5f,0.5f,0.5f,1.0f);
    gl.glLineWidth(1);
  }
  gl.glBegin(GL.GL_LINE_STRIP);
  gl.glVertex3f(0.0f,0.0f,0.0f);
  gl.glVertex3f(textureWidth,0.0f,0.0f);
  gl.glVertex3f(textureWidth,textureHeight,0.0f);
  gl.glVertex3f(0.0f,textureHeight,0.0f);
  gl.glVertex3f(0.0f,0.0f,0.0f);
  gl.glEnd();
}",0.9959325973271352
57411,"@Override public void registerEventListeners(){
  super.registerEventListeners();
  addTablePerspectivesListener=new AddTablePerspectivesListener();
  addTablePerspectivesListener.setHandler(this);
  eventPublisher.addListener(AddTablePerspectivesEvent.class,addTablePerspectivesListener);
}","@Override public void registerEventListeners(){
  super.registerEventListeners();
  eventListeners.register(AddTablePerspectivesEvent.class,new AddTablePerspectivesListener().setHandler(this));
}",0.6790123456790124
57412,"@Override protected void renderContent(GL2 gl){
  if (colorProvider != null) {
    color=colorProvider.getColor();
    useGradient=colorProvider.useGradient();
    gradientColor=colorProvider.getGradientColor();
    isHorizontalGradient=colorProvider.isHorizontalGradient();
  }
  pushNames(gl);
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4fv(color,0);
  gl.glVertex3f(0,0,0);
  if (useGradient && isHorizontalGradient)   gl.glColor4fv(gradientColor,0);
  gl.glVertex3f(x,0,0);
  if (useGradient)   gl.glColor4fv(gradientColor,0);
  gl.glVertex3f(x,y,0);
  if (useGradient && !isHorizontalGradient)   gl.glColor4fv(gradientColor,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
  gl.glPushAttrib(GL2.GL_LINE_BIT);
  gl.glLineWidth(borderWidth);
  gl.glColor4fv(borderColor,0);
  gl.glBegin(GL.GL_LINES);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(0,y,0);
  gl.glVertex3f(0,y,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glEnd();
  gl.glPopAttrib();
  popNames(gl);
}","@Override protected void renderContent(GL2 gl){
  if (colorProvider != null) {
    color=colorProvider.getColor();
    useGradient=colorProvider.useGradient();
    gradientColor=colorProvider.getGradientColor();
    isHorizontalGradient=colorProvider.isHorizontalGradient();
  }
  pushNames(gl);
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4fv(color,0);
  gl.glVertex3f(0,0,0);
  if (useGradient && isHorizontalGradient)   gl.glColor4fv(gradientColor,0);
  gl.glVertex3f(x,0,0);
  if (useGradient)   gl.glColor4fv(gradientColor,0);
  gl.glVertex3f(x,y,0);
  if (useGradient && !isHorizontalGradient)   gl.glColor4fv(gradientColor,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
  if (drawBorder) {
    if (borderWidth > 0) {
      gl.glPushAttrib(GL2.GL_LINE_BIT);
      gl.glLineWidth(borderWidth);
    }
    gl.glColor4fv(borderColor,0);
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(x,0,0);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(0,y,0);
    gl.glVertex3f(0,y,0);
    gl.glVertex3f(x,y,0);
    gl.glVertex3f(x,0,0);
    gl.glVertex3f(x,y,0);
    gl.glEnd();
    if (borderWidth > 0) {
      gl.glPopAttrib();
    }
  }
  popNames(gl);
}",0.9435850773430392
57413,"/** 
 * Render the histogram itself
 * @param gl
 */
private void renderHistogram(GL2 gl){
  if (histogram == null) {
    if (dataDomain != null && tablePerspective != null) {
      if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),tablePerspective.getRecordPerspective().getVirtualArray(),tablePerspective.getDimensionPerspective().getVirtualArray(),5);
      }
 else       if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),tablePerspective.getRecordPerspective().getVirtualArray(),tablePerspective.getDimensionPerspective().getVirtualArray(),2);
      }
 else {
        histogram=tablePerspective.getContainerStatistics().getHistogram();
      }
    }
 else     if (dataDomain != null) {
      TablePerspective defaultTablePerspective=dataDomain.getDefaultTablePerspective();
      if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),defaultTablePerspective.getRecordPerspective().getVirtualArray(),defaultTablePerspective.getDimensionPerspective().getVirtualArray(),5);
      }
 else       if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),defaultTablePerspective.getRecordPerspective().getVirtualArray(),defaultTablePerspective.getDimensionPerspective().getVirtualArray(),2);
      }
 else {
        histogram=defaultTablePerspective.getContainerStatistics().getHistogram();
      }
    }
 else {
      return;
    }
  }
  float spacing=(viewFrustum.getWidth() - 2 * sideSpacing) / histogram.size();
  float continuousColorDistance=1.0f / histogram.size();
  float fOneHeightValue=(viewFrustum.getHeight() - 2 * sideSpacing) / histogram.getLargestValue();
  int iCount=0;
  for (int bucketCount=0; bucketCount < histogram.size(); bucketCount++) {
    Integer iValue=histogram.get(bucketCount);
    if (useColor)     gl.glColor3fv(dataDomain.getColorMapper().getColor(continuousColorDistance * iCount + continuousColorDistance / 2),0);
    gl.glLineWidth(3.0f);
    gl.glBegin(GL2.GL_POLYGON);
    gl.glVertex3f(spacing * iCount + sideSpacing,sideSpacing,0);
    gl.glVertex3f(spacing * iCount + sideSpacing,sideSpacing + iValue * fOneHeightValue,0);
    gl.glVertex3f(spacing * (iCount + 1) + sideSpacing,sideSpacing + iValue * fOneHeightValue,0);
    gl.glVertex3f(spacing * (iCount + 1) + sideSpacing,sideSpacing,0);
    gl.glEnd();
    gl.glBegin(GL.GL_LINES);
    gl.glVertex3f(0,0,0);
    gl.glVertex3f(2,2,2);
    gl.glEnd();
    iCount++;
  }
}","/** 
 * Render the histogram itself
 * @param gl
 */
private void renderHistogram(GL2 gl){
  if (histogram == null) {
    if (dataDomain != null && tablePerspective != null) {
      if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),tablePerspective.getRecordPerspective().getVirtualArray(),tablePerspective.getDimensionPerspective().getVirtualArray(),5);
      }
 else       if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),tablePerspective.getRecordPerspective().getVirtualArray(),tablePerspective.getDimensionPerspective().getVirtualArray(),2);
      }
 else {
        histogram=tablePerspective.getContainerStatistics().getHistogram();
      }
    }
 else     if (dataDomain != null) {
      TablePerspective defaultTablePerspective=dataDomain.getDefaultTablePerspective();
      if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),defaultTablePerspective.getRecordPerspective().getVirtualArray(),defaultTablePerspective.getDimensionPerspective().getVirtualArray(),5);
      }
 else       if (dataDomain.getLabel().toLowerCase().contains(""String_Node_Str"")) {
        histogram=TablePerspectiveStatistics.calculateHistogram(dataDomain.getTable(),defaultTablePerspective.getRecordPerspective().getVirtualArray(),defaultTablePerspective.getDimensionPerspective().getVirtualArray(),2);
      }
 else {
        histogram=defaultTablePerspective.getContainerStatistics().getHistogram();
      }
    }
 else {
      return;
    }
  }
  float spacing=(viewFrustum.getWidth() - 2 * sideSpacing) / histogram.size();
  float continuousColorDistance=1.0f / histogram.size();
  float fOneHeightValue=(viewFrustum.getHeight() - 2 * sideSpacing) / histogram.getLargestValue();
  int iCount=0;
  for (int bucketCount=0; bucketCount < histogram.size(); bucketCount++) {
    Integer iValue=histogram.get(bucketCount);
    if (useColor)     gl.glColor3fv(dataDomain.getColorMapper().getColor(continuousColorDistance * iCount + continuousColorDistance / 2),0);
    gl.glLineWidth(3.0f);
    gl.glBegin(GL2.GL_POLYGON);
    gl.glVertex3f(spacing * iCount + sideSpacing,sideSpacing,0);
    gl.glVertex3f(spacing * iCount + sideSpacing,sideSpacing + iValue * fOneHeightValue,0);
    gl.glVertex3f(spacing * (iCount + 1) + sideSpacing,sideSpacing + iValue * fOneHeightValue,0);
    gl.glVertex3f(spacing * (iCount + 1) + sideSpacing,sideSpacing,0);
    gl.glEnd();
    iCount++;
  }
}",0.9822506861848124
57414,"/** 
 * renders the current element
 * @param g
 */
public final void render(GLGraphics g){
  if (dirtyLayout)   layout();
  if (!needToRender()) {
    cache.invalidate(context);
    return;
  }
  float x=x_layout + padding.left;
  float y=y_layout + padding.top;
  float w=w_layout - padding.left - padding.right;
  float h=w_layout - padding.top - padding.bottom;
  g.move(x,y);
  if (!cache.render(context,g)) {
    cache.begin(context,g,w,h);
    renderImpl(g,w,h);
    cache.end(context,g);
  }
  g.move(-x,-y);
}","/** 
 * renders the current element
 * @param g
 */
public final void render(GLGraphics g){
  if (dirtyLayout)   layout();
  if (!needToRender()) {
    cache.invalidate(context);
    return;
  }
  float x=x_layout + padding.left;
  float y=y_layout + padding.top;
  float w=w_layout - padding.left - padding.right;
  float h=h_layout - padding.top - padding.bottom;
  g.move(x,y);
  if (!cache.render(context,g)) {
    cache.begin(context,g,w,h);
    renderImpl(g,w,h);
    cache.end(context,g);
  }
  g.move(-x,-y);
}",0.998069498069498
57415,"/** 
 * triggers that the parent should be relayouted
 */
protected void relayout(){
  cache.invalidate(context);
  pickCache.invalidate(context);
  this.dirtyLayout=true;
}","/** 
 * triggers that I should be relayouted before the next run
 */
protected void relayout(){
  cache.invalidate(context);
  pickCache.invalidate(context);
  this.dirtyLayout=true;
}",0.9131652661064426
57416,"/** 
 * see   {@link #fillImage(String,float,float,float,float)} for a texture object
 */
private GLGraphics fillImage(Texture texture,float x,float y,float w,float h){
  Vec3f lowerLeftCorner=new Vec3f(x,y,z);
  Vec3f lowerRightCorner=new Vec3f(x + w,y,z);
  Vec3f upperRightCorner=new Vec3f(x + w,y + h,z);
  Vec3f upperLeftCorner=new Vec3f(x,y + h,z);
  if (originInTopLeft)   textures.renderTexture(gl,texture,upperLeftCorner,upperRightCorner,lowerRightCorner,lowerLeftCorner,1,1,1,1);
 else   textures.renderTexture(gl,texture,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,1,1,1,1);
  return this;
}","/** 
 * see   {@link #fillImage(Texture,float,float,float,float)} but with a dedicated static color to use
 * @param color
 * @return
 */
public GLGraphics fillImage(Texture texture,float x,float y,float w,float h,Color color){
  Vec3f lowerLeftCorner=new Vec3f(x,y,z);
  Vec3f lowerRightCorner=new Vec3f(x + w,y,z);
  Vec3f upperRightCorner=new Vec3f(x + w,y + h,z);
  Vec3f upperLeftCorner=new Vec3f(x,y + h,z);
  org.caleydo.core.util.color.Color tmp=new org.caleydo.core.util.color.Color(color.getRed(),color.getGreen(),color.getBlue(),color.getAlpha());
  if (originInTopLeft)   textures.renderTexture(gl,texture,upperLeftCorner,upperRightCorner,lowerRightCorner,lowerLeftCorner,tmp.r,tmp.g,tmp.b,tmp.a);
 else   textures.renderTexture(gl,texture,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,tmp.r,tmp.g,tmp.b,tmp.a);
  return this;
}",0.7803234501347709
57417,"/** 
 * returns a set of points as lines
 * @param points
 * @param closed close the path?
 * @return
 */
public GLGraphics drawPath(Iterable<Vec2f> points,boolean closed){
  return render(closed ? GL.GL_LINE_LOOP : GL.GL_LINE_STRIP,points);
}","public GLGraphics drawPath(boolean closed,Vec2f... points){
  return render(closed ? GL.GL_LINE_LOOP : GL.GL_LINE_STRIP,Arrays.asList(points));
}",0.5876288659793815
57418,"@Override public final Object start(IApplicationContext context) throws Exception {
  S settings=parseArgs(context);
  generateTCGAProjectFiles(settings);
  return context;
}","@Override public final Object start(IApplicationContext context) throws Exception {
  S settings=parseArgs(context);
  GeneralManager.get();
  generateTCGAProjectFiles(settings);
  return context;
}",0.935483870967742
57419,"private File parseMAF(File maf){
  final String TAB=""String_Node_Str"";
  try {
    List<String> lines=Files.readAllLines(maf.toPath(),Charset.defaultCharset());
    List<String> header=Arrays.asList(lines.get(0).split(TAB));
    lines=lines.subList(1,lines.size());
    int geneIndex=header.indexOf(""String_Node_Str"");
    int sampleIndex=header.indexOf(""String_Node_Str"");
    Table<String,String,Boolean> mutated=TreeBasedTable.create();
    for (    String line : lines) {
      String[] columns=line.split(TAB);
      mutated.put(columns[geneIndex],columns[sampleIndex],Boolean.TRUE);
    }
    File out=new File(maf.getParentFile(),""String_Node_Str"" + maf.getName());
    PrintWriter w=new PrintWriter(out);
    w.append(""String_Node_Str"");
    for (    String sample : mutated.columnKeySet()) {
      w.append(TAB).append(sample);
    }
    w.println();
    for (    String gene : mutated.rowKeySet()) {
      w.append(gene);
      for (      String sample : mutated.columnKeySet()) {
        w.append(TAB).append(mutated.contains(gene,sample) ? ""String_Node_Str"" : ""String_Node_Str"");
      }
      w.println();
    }
    w.close();
    return out;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}","private File parseMAF(File maf){
  File out=new File(maf.getParentFile(),""String_Node_Str"" + maf.getName());
  if (out.exists())   return out;
  final String TAB=""String_Node_Str"";
  try {
    List<String> lines=Files.readAllLines(maf.toPath(),Charset.defaultCharset());
    List<String> header=Arrays.asList(lines.get(0).split(TAB));
    lines=lines.subList(1,lines.size());
    int geneIndex=header.indexOf(""String_Node_Str"");
    int sampleIndex=header.indexOf(""String_Node_Str"");
    Table<String,String,Boolean> mutated=TreeBasedTable.create();
    for (    String line : lines) {
      String[] columns=line.split(TAB);
      mutated.put(columns[geneIndex],columns[sampleIndex],Boolean.TRUE);
    }
    PrintWriter w=new PrintWriter(out);
    w.append(""String_Node_Str"");
    for (    String sample : mutated.columnKeySet()) {
      w.append(TAB).append(sample);
    }
    w.println();
    for (    String gene : mutated.rowKeySet()) {
      w.append(gene);
      for (      String sample : mutated.columnKeySet()) {
        w.append(TAB).append(mutated.contains(gene,sample) ? ""String_Node_Str"" : ""String_Node_Str"");
      }
      w.println();
    }
    w.close();
    return out;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return null;
}",0.9246794871794872
57420,"private static void transposeCSV(String fileName,String fileNameOut){
  File in=new File(fileName);
  List<String> data;
  try {
    data=Files.readAllLines(in.toPath(),Charset.defaultCharset());
  }
 catch (  IOException e2) {
    e2.printStackTrace();
    return;
  }
  String[][] parts=new String[data.size()][];
  int maxCol=-1;
  for (int i=0; i < data.size(); ++i) {
    parts[i]=data.get(i).split(""String_Node_Str"");
    if (parts[i].length > maxCol)     maxCol=parts[i].length;
  }
  data=null;
  try (BufferedWriter writer=Files.newBufferedWriter(new File(fileNameOut).toPath(),Charset.defaultCharset())){
    for (int c=0; c < maxCol; ++c) {
      for (int i=0; i < parts.length; ++i) {
        if (i > 0)         writer.append('\t');
        String[] p=parts[i];
        if (p.length >= c)         writer.append(p[c]);
      }
      writer.newLine();
    }
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
}","private static void transposeCSV(String fileName,String fileNameOut){
  File in=new File(fileName);
  File out=new File(fileNameOut);
  if (out.exists())   return;
  List<String> data;
  try {
    data=Files.readAllLines(in.toPath(),Charset.defaultCharset());
  }
 catch (  IOException e2) {
    e2.printStackTrace();
    return;
  }
  String[][] parts=new String[data.size()][];
  int maxCol=-1;
  for (int i=0; i < data.size(); ++i) {
    parts[i]=data.get(i).split(""String_Node_Str"");
    if (parts[i].length > maxCol)     maxCol=parts[i].length;
  }
  data=null;
  try (BufferedWriter writer=Files.newBufferedWriter(new File(fileNameOut).toPath(),Charset.defaultCharset())){
    for (int c=0; c < maxCol; ++c) {
      for (int i=0; i < parts.length; ++i) {
        if (i > 0)         writer.append('\t');
        String[] p=parts[i];
        if (p.length >= c)         writer.append(p[c]);
      }
      writer.newLine();
    }
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
}",0.9667705088265836
57421,"private static boolean fireListeners(Iterable<? extends APickingEntry> entries,BitSet picked,float depth,PickingMode mode,Point mousePos,boolean anyWaiting){
  if (picked.isEmpty() && !(anyWaiting || mode == PickingMode.MOUSE_OUT))   return anyWaiting;
  anyWaiting=false;
  for (  APickingEntry entry : Lists.newArrayList(entries)) {
    if (picked.get(entry.pickingId)) {
      if (!entry.isHovered()) {
        entry.fire(PickingMode.MOUSE_OVER,mousePos,depth);
      }
      anyWaiting=true;
      entry.fire(mode,mousePos,depth);
    }
 else     if (entry.isHovered()) {
      entry.fire(PickingMode.MOUSE_OUT,mousePos,depth);
    }
 else     if (entry.isDragging() && (mode == PickingMode.MOUSE_RELEASED || mode == PickingMode.DRAGGED)) {
      entry.fire(mode,mousePos,depth);
      anyWaiting=anyWaiting || (mode == PickingMode.DRAGGED);
    }
  }
  return anyWaiting;
}","private static boolean fireListeners(Iterable<? extends APickingEntry> entries,BitSet picked,float depth,PickingMode mode,Point mousePos,boolean anyWaiting){
  if (picked.isEmpty() && !(anyWaiting || mode == PickingMode.MOUSE_OUT))   return anyWaiting;
  anyWaiting=false;
  for (  APickingEntry entry : Lists.newArrayList(entries)) {
    if (picked.get(entry.pickingId)) {
      if (!entry.isHovered()) {
        entry.fire(PickingMode.MOUSE_OVER,mousePos,depth);
      }
      anyWaiting=true;
      entry.fire(mode,mousePos,depth);
    }
 else     if (entry.isDragging() && (mode == PickingMode.MOUSE_RELEASED || mode == PickingMode.DRAGGED)) {
      entry.fire(mode,mousePos,depth);
      anyWaiting=anyWaiting || (mode == PickingMode.DRAGGED);
    }
 else     if (entry.isHovered()) {
      entry.fire(PickingMode.MOUSE_OUT,mousePos,depth);
    }
  }
  return anyWaiting;
}",0.8895216400911162
57422,"/** 
 * renders the picking part of this element
 * @param g
 */
public final void renderPick(GLGraphics g){
  if (dirtyLayout)   layout();
  if (!needToRender()) {
    pickCache.invalidate(context);
    return;
  }
  float x=x_layout;
  float y=y_layout;
  float w=w_layout;
  float h=w_layout;
  g.move(x,y);
  if (!pickCache.render(context,g)) {
    pickCache.begin(context,g,w,h);
    boolean pushed=pickingID >= 0;
    if (pushed)     g.pushName(this.pickingID);
    renderPickImpl(g,w,h);
    if (pushed)     g.popName();
    pickCache.end(context,g);
  }
  g.move(-x,-y);
}","/** 
 * renders the picking part of this element
 * @param g
 */
public final void renderPick(GLGraphics g){
  if (dirtyLayout)   layout();
  if (!needToRender()) {
    pickCache.invalidate(context);
    return;
  }
  float x=x_layout;
  float y=y_layout;
  float w=w_layout;
  float h=h_layout;
  g.move(x,y);
  if (!pickCache.render(context,g)) {
    pickCache.begin(context,g,w,h);
    boolean pushed=pickingID >= 0;
    if (pushed)     g.pushName(this.pickingID);
    renderPickImpl(g,w,h);
    if (pushed)     g.popName();
    pickCache.end(context,g);
  }
  g.move(-x,-y);
}",0.9982758620689656
57423,"private static PickingMode convert(IMouseEvent event,PickingMode type){
  if (type == PickingMode.CLICKED && event.getClickCount() > 1)   return PickingMode.DOUBLE_CLICKED;
  if (type == PickingMode.DRAGGED)   return PickingMode.DRAGGED;
  if (type == PickingMode.CLICKED && event.getButton() == 1)   return PickingMode.CLICKED;
  if (type == PickingMode.CLICKED && event.getButton() == 2)   return PickingMode.RIGHT_CLICKED;
  if (type == PickingMode.MOUSE_MOVED)   return PickingMode.MOUSE_MOVED;
  if (type == PickingMode.MOUSE_RELEASED)   return type;
  return null;
}","private static PickingMode convert(IMouseEvent event,PickingMode type){
  if (type == PickingMode.CLICKED && event.getClickCount() > 1)   return PickingMode.DOUBLE_CLICKED;
  if (type == PickingMode.DRAGGED)   return PickingMode.DRAGGED;
  if (type == PickingMode.CLICKED && event.getButton() == LEFT_MOUSE_BUTTON)   return PickingMode.CLICKED;
  if (type == PickingMode.CLICKED && event.getButton() == RIGHT_MOUSE_BUTTON)   return PickingMode.RIGHT_CLICKED;
  if (type == PickingMode.MOUSE_MOVED)   return PickingMode.MOUSE_MOVED;
  if (type == PickingMode.MOUSE_RELEASED)   return type;
  return null;
}",0.929481733220051
57424,"@Override public void setData(List<ScoringElement> data,ScoreQuery query){
  this.clearBody();
  boolean isGroupQuery=query.isGroupQuery() || (!data.isEmpty() && data.get(0).getGroup() != null);
  if ((invalidWidth && !data.isEmpty()) || wasGroupQuery != isGroupQuery) {
    recomputeWidth(data);
    updateHeader(isGroupQuery);
  }
 else   if (wasGroupQuery != isGroupQuery) {
    updateHeader(isGroupQuery);
  }
  for (int i=0; i < data.size(); ++i) {
    ScoringElement elem=data.get(i);
    Group g=elem.getGroup();
    Row r=new Row();
    r.setXDynamic(true);
    AdvancedTextureRenderer cAdd=new AdvancedTextureRenderer(null,view.getTextureManager());
    if (!this.stratomex.contains(elem.getPerspective()))     cAdd.setImagePath(TourGuideRenderStyle.ICON_ADD_TO_STRATOMEX);
    ElementLayout l=wrap(cAdd,DATADOMAIN_TYPE_WIDTH);
    PickingRenderer pick=new PickingRenderer(ScoreQueryUI.ADD_TO_STRATOMEX,i,view);
    pick.setColor(elem.getDataDomain().getColor());
    l.addBackgroundRenderer(pick);
    r.add(l);
    r.add(colSpacing);
    if (isGroupQuery) {
      r.add(createLabel(elem.getStratification(),stratWidth));
      r.add(colSpacing);
      r.add(createLabel(g,-1));
    }
 else {
      r.add(createLabel(elem.getStratification(),-1));
    }
    this.addTd(r,i);
  }
}","@Override public void setData(List<ScoringElement> data,ScoreQuery query){
  this.clearBody();
  boolean isGroupQuery=query.isGroupQuery() || (!data.isEmpty() && data.get(0).getGroup() != null);
  if ((invalidWidth && !data.isEmpty()) || wasGroupQuery != isGroupQuery) {
    recomputeWidth(data);
    updateHeader(isGroupQuery);
  }
 else   if (wasGroupQuery != isGroupQuery) {
    updateHeader(isGroupQuery);
  }
  for (int i=0; i < data.size(); ++i) {
    ScoringElement elem=data.get(i);
    Group g=elem.getGroup();
    Row r=new Row();
    r.setXDynamic(false);
    AdvancedTextureRenderer cAdd=new AdvancedTextureRenderer(null,view.getTextureManager());
    if (!this.stratomex.contains(elem.getPerspective()))     cAdd.setImagePath(TourGuideRenderStyle.ICON_ADD_TO_STRATOMEX);
    ElementLayout l=wrap(cAdd,DATADOMAIN_TYPE_WIDTH);
    PickingRenderer pick=new PickingRenderer(ScoreQueryUI.ADD_TO_STRATOMEX,i,view);
    pick.setColor(elem.getDataDomain().getColor());
    l.addBackgroundRenderer(pick);
    r.add(l);
    r.add(colSpacing);
    if (isGroupQuery) {
      r.add(createLabel(elem.getStratification(),stratWidth));
      r.add(colSpacing);
      r.add(createLabel(g,-1));
    }
 else {
      r.add(createLabel(elem.getStratification(),-1));
    }
    this.addTd(r,i);
  }
}",0.997287872917474
57425,"/** 
 * Reads the file and counts the numbers of lines to be read.
 */
protected final int calculateNumberOfLinesInFile(){
  try {
    LineNumberReader lnr=new LineNumberReader(GeneralManager.get().getResourceLoader().getResource(filePath));
    lnr.skip(Long.MAX_VALUE);
    numberOfLinesInFile=lnr.getLineNumber();
    lnr.close();
  }
 catch (  IOException ioe) {
    throw new IllegalStateException(""String_Node_Str"" + filePath);
  }
  return numberOfLinesInFile;
}","/** 
 * Reads the file and counts the numbers of lines to be read.
 */
protected final int calculateNumberOfLinesInFile(){
  try {
    LineNumberReader lnr=new LineNumberReader(loader.getResource(filePath));
    lnr.skip(Long.MAX_VALUE);
    numberOfLinesInFile=lnr.getLineNumber();
    lnr.close();
  }
 catch (  IOException ioe) {
    throw new IllegalStateException(""String_Node_Str"" + filePath);
  }
  return numberOfLinesInFile;
}",0.9491150442477876
57426,"/** 
 * Constructor.
 */
public ATextParser(final String fileName){
  this.filePath=fileName;
  this.swtGuiManager=GeneralManager.get().getSWTGUIManager();
}","public ATextParser(final String fileName,ResourceLoader loader){
  this.filePath=fileName;
  this.loader=loader;
  this.swtGuiManager=GeneralManager.get().getSWTGUIManager();
}",0.7927927927927928
57427,"/** 
 * Triggers the actual loading and parsing of the data specified.
 * @return
 */
public boolean loadData(){
  try {
    Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + filePath + ""String_Node_Str""));
    BufferedReader reader=GeneralManager.get().getResourceLoader().getResource(filePath);
    this.parseFile(reader);
    if (reader != null) {
      reader.close();
    }
  }
 catch (  Exception e) {
    Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"",e));
    throw new IllegalStateException(""String_Node_Str"" + filePath + ""String_Node_Str"",e);
  }
  Logger.log(new Status(IStatus.INFO,toString(),""String_Node_Str"" + filePath + ""String_Node_Str""));
  return true;
}","/** 
 * Triggers the actual loading and parsing of the data specified.
 * @return
 */
public boolean loadData(){
  try {
    Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + filePath + ""String_Node_Str""));
    BufferedReader reader=loader.getResource(filePath);
    this.parseFile(reader);
    if (reader != null) {
      reader.close();
    }
  }
 catch (  Exception e) {
    Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"",e));
    throw new IllegalStateException(""String_Node_Str"" + filePath + ""String_Node_Str"",e);
  }
  Logger.log(new Status(IStatus.INFO,toString(),""String_Node_Str"" + filePath + ""String_Node_Str""));
  return true;
}",0.9675599435825106
57428,"@Override protected void parseFile(BufferedReader reader) throws IOException {
  swtGuiManager.setProgressBarText(""String_Node_Str"" + targetIDType);
  float progressBarFactor=100f / numberOfLinesInFile;
  IDSpecification idSpecification=groupingSpecifications.getRowIDSpecification();
  IDType sourceIDType=IDType.getIDType(idSpecification.getIdType());
  IDTypeParsingRules parsingRules=null;
  if (idSpecification.getIdTypeParsingRules() != null)   parsingRules=idSpecification.getIdTypeParsingRules();
 else   if (sourceIDType.getIdTypeParsingRules() != null)   parsingRules=sourceIDType.getIdTypeParsingRules();
  if (!sourceIDType.getIDCategory().equals(targetIDType.getIDCategory()))   throw new IllegalArgumentException(""String_Node_Str"" + sourceIDType + ""String_Node_Str""+ targetIDType);
  IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(sourceIDType.getIDCategory());
  if (groupingSpecifications.getDataSourcePath() == null) {
    Logger.log(new Status(IStatus.INFO,this.toString(),""String_Node_Str""));
    return;
  }
  try {
    String[] headerCells=null;
    if (groupingSpecifications.isContainsColumnIDs()) {
      reader=GeneralManager.get().getResourceLoader().getResource(groupingSpecifications.getDataSourcePath());
      String headerLine=""String_Node_Str"";
      int rowOfColumnIDs=(groupingSpecifications.getRowOfColumnIDs() != null) ? groupingSpecifications.getRowOfColumnIDs() : groupingSpecifications.getNumberOfHeaderLines() - 1;
      for (int countToHeader=0; countToHeader <= rowOfColumnIDs; countToHeader++) {
        headerLine=reader.readLine();
      }
      headerCells=headerLine.split(groupingSpecifications.getDelimiter(),-1);
      reader.close();
    }
    reader=GeneralManager.get().getResourceLoader().getResource(groupingSpecifications.getDataSourcePath());
    for (int headerLineCounter=0; headerLineCounter < groupingSpecifications.getNumberOfHeaderLines(); headerLineCounter++) {
      reader.readLine();
    }
    ArrayList<Integer> columnsToRead=groupingSpecifications.getColumns();
    String firstDataLine=null;
    if (columnsToRead == null || headerCells == null) {
      firstDataLine=reader.readLine();
      String[] data=firstDataLine.split(groupingSpecifications.getDelimiter());
      if (columnsToRead == null) {
        columnsToRead=new ArrayList<Integer>(data.length);
        for (int columnCount=1; columnCount < data.length; columnCount++) {
          columnsToRead.add(columnCount);
        }
      }
      if (headerCells == null) {
        headerCells=new String[data.length];
        for (int columnCount=0; columnCount < data.length; columnCount++) {
          headerCells[columnCount]=DEFAULT_GROUP_NAME;
        }
      }
    }
    ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>> listOfGroupLists=new ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>>(columnsToRead.size());
    ArrayList<String> listOfGroupNames=new ArrayList<String>(columnsToRead.size());
    ArrayList<Pair<String,ArrayList<Integer>>> currentGroupList;
    for (    Integer columnNumber : columnsToRead) {
      currentGroupList=new ArrayList<Pair<String,ArrayList<Integer>>>();
      listOfGroupLists.add(currentGroupList);
      listOfGroupNames.add(headerCells[columnNumber]);
    }
    int lineCounter=0;
    while (true) {
      String line=null;
      if (firstDataLine == null) {
        line=reader.readLine();
      }
 else {
        line=firstDataLine;
        firstDataLine=null;
      }
      if (line == null)       break;
      String[] columns=line.split(groupingSpecifications.getDelimiter());
      String originalID=columns[groupingSpecifications.getColumnOfRowIds()];
      originalID=convertID(originalID,parsingRules);
      Integer mappedID=idMappingManager.getID(sourceIDType,targetIDType,originalID);
      if (mappedID == null) {
        Logger.log(new Status(IStatus.WARNING,this.toString(),""String_Node_Str"" + originalID));
        continue;
      }
      int groupListCounter=0;
      for (      Integer columnID : columnsToRead) {
        currentGroupList=listOfGroupLists.get(groupListCounter);
        ArrayList<Integer> group=null;
        for (        Pair<String,ArrayList<Integer>> groupPair : currentGroupList) {
          if (groupPair.getFirst().equals(columns[columnID]))           group=groupPair.getSecond();
        }
        if (group == null) {
          group=new ArrayList<Integer>();
          currentGroupList.add(new Pair<String,ArrayList<Integer>>(columns[columnID],group));
        }
        group.add(mappedID);
        groupListCounter++;
      }
      lineCounter++;
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    perspectiveInitializationDatas=new ArrayList<PerspectiveInitializationData>();
    for (int groupListCount=0; groupListCount < listOfGroupLists.size(); groupListCount++) {
      ArrayList<Pair<String,ArrayList<Integer>>> groupList=listOfGroupLists.get(groupListCount);
      ArrayList<Integer> sortedIDs=new ArrayList<Integer>();
      ArrayList<Integer> clusterSizes=new ArrayList<Integer>(groupList.size());
      ArrayList<Integer> sampleElements=new ArrayList<Integer>(groupList.size());
      ArrayList<String> clusterNames=new ArrayList<String>(groupList.size());
      int sampleIndex=0;
      for (      Pair<String,ArrayList<Integer>> groupPair : groupList) {
        ArrayList<Integer> group=groupPair.getSecond();
        sortedIDs.addAll(group);
        clusterSizes.add(group.size());
        clusterNames.add(groupPair.getFirst());
        sampleElements.add(sampleIndex);
        sampleIndex+=group.size();
      }
      PerspectiveInitializationData data=new PerspectiveInitializationData();
      data.setData(sortedIDs,clusterSizes,sampleElements,clusterNames);
      String groupLabel=listOfGroupNames.get(groupListCount);
      if (groupLabel.equals(DEFAULT_GROUP_NAME)) {
        if (groupingSpecifications.getGroupingName() != null) {
          groupLabel=clusterSizes.size() + ""String_Node_Str"" + groupingSpecifications.getGroupingName();
        }
 else {
          groupLabel=clusterSizes.size() + ""String_Node_Str"";
        }
      }
      data.setLabel(groupLabel);
      perspectiveInitializationDatas.add(data);
    }
  }
 catch (  IOException ioException) {
    throw new IllegalStateException(""String_Node_Str"" + groupingSpecifications.getDataSourcePath());
  }
}","@Override protected void parseFile(BufferedReader reader) throws IOException {
  swtGuiManager.setProgressBarText(""String_Node_Str"" + targetIDType);
  float progressBarFactor=100f / numberOfLinesInFile;
  IDSpecification idSpecification=groupingSpecifications.getRowIDSpecification();
  IDType sourceIDType=IDType.getIDType(idSpecification.getIdType());
  IDTypeParsingRules parsingRules=null;
  if (idSpecification.getIdTypeParsingRules() != null)   parsingRules=idSpecification.getIdTypeParsingRules();
 else   if (sourceIDType.getIdTypeParsingRules() != null)   parsingRules=sourceIDType.getIdTypeParsingRules();
  if (!sourceIDType.getIDCategory().equals(targetIDType.getIDCategory()))   throw new IllegalArgumentException(""String_Node_Str"" + sourceIDType + ""String_Node_Str""+ targetIDType);
  IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(sourceIDType.getIDCategory());
  if (groupingSpecifications.getDataSourcePath() == null) {
    Logger.log(new Status(IStatus.INFO,this.toString(),""String_Node_Str""));
    return;
  }
  try {
    String[] headerCells=null;
    if (groupingSpecifications.isContainsColumnIDs()) {
      reader=loader.getResource(groupingSpecifications.getDataSourcePath());
      String headerLine=""String_Node_Str"";
      int rowOfColumnIDs=(groupingSpecifications.getRowOfColumnIDs() != null) ? groupingSpecifications.getRowOfColumnIDs() : groupingSpecifications.getNumberOfHeaderLines() - 1;
      for (int countToHeader=0; countToHeader <= rowOfColumnIDs; countToHeader++) {
        headerLine=reader.readLine();
      }
      headerCells=headerLine.split(groupingSpecifications.getDelimiter(),-1);
      reader.close();
    }
    reader=loader.getResource(groupingSpecifications.getDataSourcePath());
    for (int headerLineCounter=0; headerLineCounter < groupingSpecifications.getNumberOfHeaderLines(); headerLineCounter++) {
      reader.readLine();
    }
    ArrayList<Integer> columnsToRead=groupingSpecifications.getColumns();
    String firstDataLine=null;
    if (columnsToRead == null || headerCells == null) {
      firstDataLine=reader.readLine();
      String[] data=firstDataLine.split(groupingSpecifications.getDelimiter());
      if (columnsToRead == null) {
        columnsToRead=new ArrayList<Integer>(data.length);
        for (int columnCount=1; columnCount < data.length; columnCount++) {
          columnsToRead.add(columnCount);
        }
      }
      if (headerCells == null) {
        headerCells=new String[data.length];
        for (int columnCount=0; columnCount < data.length; columnCount++) {
          headerCells[columnCount]=DEFAULT_GROUP_NAME;
        }
      }
    }
    ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>> listOfGroupLists=new ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>>(columnsToRead.size());
    ArrayList<String> listOfGroupNames=new ArrayList<String>(columnsToRead.size());
    ArrayList<Pair<String,ArrayList<Integer>>> currentGroupList;
    for (    Integer columnNumber : columnsToRead) {
      currentGroupList=new ArrayList<Pair<String,ArrayList<Integer>>>();
      listOfGroupLists.add(currentGroupList);
      listOfGroupNames.add(headerCells[columnNumber]);
    }
    int lineCounter=0;
    while (true) {
      String line=null;
      if (firstDataLine == null) {
        line=reader.readLine();
      }
 else {
        line=firstDataLine;
        firstDataLine=null;
      }
      if (line == null)       break;
      String[] columns=line.split(groupingSpecifications.getDelimiter());
      String originalID=columns[groupingSpecifications.getColumnOfRowIds()];
      originalID=convertID(originalID,parsingRules);
      Integer mappedID=idMappingManager.getID(sourceIDType,targetIDType,originalID);
      if (mappedID == null) {
        Logger.log(new Status(IStatus.WARNING,this.toString(),""String_Node_Str"" + originalID));
        continue;
      }
      int groupListCounter=0;
      for (      Integer columnID : columnsToRead) {
        currentGroupList=listOfGroupLists.get(groupListCounter);
        ArrayList<Integer> group=null;
        for (        Pair<String,ArrayList<Integer>> groupPair : currentGroupList) {
          if (groupPair.getFirst().equals(columns[columnID]))           group=groupPair.getSecond();
        }
        if (group == null) {
          group=new ArrayList<Integer>();
          currentGroupList.add(new Pair<String,ArrayList<Integer>>(columns[columnID],group));
        }
        group.add(mappedID);
        groupListCounter++;
      }
      lineCounter++;
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    perspectiveInitializationDatas=new ArrayList<PerspectiveInitializationData>();
    for (int groupListCount=0; groupListCount < listOfGroupLists.size(); groupListCount++) {
      ArrayList<Pair<String,ArrayList<Integer>>> groupList=listOfGroupLists.get(groupListCount);
      ArrayList<Integer> sortedIDs=new ArrayList<Integer>();
      ArrayList<Integer> clusterSizes=new ArrayList<Integer>(groupList.size());
      ArrayList<Integer> sampleElements=new ArrayList<Integer>(groupList.size());
      ArrayList<String> clusterNames=new ArrayList<String>(groupList.size());
      int sampleIndex=0;
      for (      Pair<String,ArrayList<Integer>> groupPair : groupList) {
        ArrayList<Integer> group=groupPair.getSecond();
        sortedIDs.addAll(group);
        clusterSizes.add(group.size());
        clusterNames.add(groupPair.getFirst());
        sampleElements.add(sampleIndex);
        sampleIndex+=group.size();
      }
      PerspectiveInitializationData data=new PerspectiveInitializationData();
      data.setData(sortedIDs,clusterSizes,sampleElements,clusterNames);
      String groupLabel=listOfGroupNames.get(groupListCount);
      if (groupLabel.equals(DEFAULT_GROUP_NAME)) {
        if (groupingSpecifications.getGroupingName() != null) {
          groupLabel=clusterSizes.size() + ""String_Node_Str"" + groupingSpecifications.getGroupingName();
        }
 else {
          groupLabel=clusterSizes.size() + ""String_Node_Str"";
        }
      }
      data.setLabel(groupLabel);
      perspectiveInitializationDatas.add(data);
    }
  }
 catch (  IOException ioException) {
    throw new IllegalStateException(""String_Node_Str"" + groupingSpecifications.getDataSourcePath());
  }
}",0.992827070014034
57429,"public static float calculateMaxAxisTime(TablePerspective tablePerspective){
  RecordVirtualArray recordVA=tablePerspective.getRecordPerspective().getVirtualArray();
  DimensionVirtualArray dimensionVA=tablePerspective.getDimensionPerspective().getVirtualArray();
  float maxAxisTime=0;
  boolean containsNegativeValues=false;
  boolean containsPositiveValues=false;
  for (  Group group : recordVA.getGroupList()) {
    List<Integer> recordIDs=recordVA.getIDsOfGroup(group.getGroupIndex());
    for (int recordID=0; recordID < recordIDs.size(); recordID++) {
      float rawValue=tablePerspective.getDataDomain().getTable().getRaw(recordIDs.get(recordID),dimensionVA.get(0));
      if (rawValue > 0)       containsPositiveValues=true;
      if (rawValue < 0)       containsNegativeValues=true;
      if (containsPositiveValues && containsNegativeValues) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (rawValue != Float.NaN && Math.abs(rawValue) > Math.abs(maxAxisTime))       maxAxisTime=rawValue;
    }
  }
  return maxAxisTime;
}","public static float calculateMaxAxisTime(TablePerspective tablePerspective){
  RecordVirtualArray recordVA=tablePerspective.getRecordPerspective().getVirtualArray();
  DimensionVirtualArray dimensionVA=tablePerspective.getDimensionPerspective().getVirtualArray();
  float maxAxisTime=0;
  boolean containsNegativeValues=false;
  boolean containsPositiveValues=false;
  final DataTable table=tablePerspective.getDataDomain().getTable();
  final Integer dimensionID=dimensionVA.get(0);
  for (  Integer recordID : recordVA) {
    float rawValue=table.getRawDxR(dimensionID,recordID);
    if (rawValue > 0)     containsPositiveValues=true;
    if (rawValue < 0)     containsNegativeValues=true;
    if (containsPositiveValues && containsNegativeValues) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (rawValue != Float.NaN && Math.abs(rawValue) > Math.abs(maxAxisTime))     maxAxisTime=rawValue;
  }
  return maxAxisTime;
}",0.661362506215813
57430,"private void renderSingleKaplanMeierCurve(GL2 gl,List<Integer> recordIDs,Color color,boolean fillCurve,int groupID){
  DimensionVirtualArray dimensionVA=tablePerspective.getDimensionPerspective().getVirtualArray();
  ArrayList<Float> dataVector=new ArrayList<Float>();
  for (int recordID=0; recordID < recordIDs.size(); recordID++) {
    float normalizedValue=tablePerspective.getDataDomain().getTable().getRaw(recordIDs.get(recordID),dimensionVA.get(0));
    dataVector.add(normalizedValue);
  }
  Float[] sortedDataVector=new Float[dataVector.size()];
  dataVector.toArray(sortedDataVector);
  Arrays.sort(sortedDataVector);
  dataVector.clear();
  for (int index=0; index < recordIDs.size(); index++) {
    dataVector.add(sortedDataVector[index]);
  }
  if (fillCurve) {
    gl.glColor3f(color.r * 1.3f,color.g * 1.3f,color.b * 1.3f);
    drawFilledCurve(gl,dataVector);
    dataVector.clear();
    for (int index=0; index < recordIDs.size(); index++) {
      dataVector.add(sortedDataVector[index]);
    }
  }
  if (!fillCurve && detailLevel == EDetailLevel.HIGH) {
    gl.glPushName(pickingManager.getPickingID(getID(),EPickingType.KM_CURVE.name(),groupID));
  }
  gl.glColor3fv(color.getRGB(),0);
  drawCurve(gl,dataVector);
  if (!fillCurve && detailLevel == EDetailLevel.HIGH) {
    gl.glPopName();
  }
}","private void renderSingleKaplanMeierCurve(GL2 gl,List<Integer> recordIDs,Color color,boolean fillCurve,int groupID){
  DimensionVirtualArray dimensionVA=tablePerspective.getDimensionPerspective().getVirtualArray();
  ArrayList<Float> dataVector=new ArrayList<Float>();
  final DataTable table=tablePerspective.getDataDomain().getTable();
  final Integer dimensionID=dimensionVA.get(0);
  for (  Integer recordID : recordIDs) {
    float normalizedValue=table.getNormalizedValue(recordID,dimensionID);
    dataVector.add(normalizedValue);
  }
  Float[] sortedDataVector=new Float[dataVector.size()];
  dataVector.toArray(sortedDataVector);
  Arrays.sort(sortedDataVector);
  dataVector.clear();
  for (int index=0; index < recordIDs.size(); index++) {
    dataVector.add(sortedDataVector[index]);
  }
  if (fillCurve) {
    gl.glColor3f(color.r * 1.3f,color.g * 1.3f,color.b * 1.3f);
    drawFilledCurve(gl,dataVector);
    dataVector.clear();
    for (int index=0; index < recordIDs.size(); index++) {
      dataVector.add(sortedDataVector[index]);
    }
  }
  if (!fillCurve && detailLevel == EDetailLevel.HIGH) {
    gl.glPushName(pickingManager.getPickingID(getID(),EPickingType.KM_CURVE.name(),groupID));
  }
  gl.glColor3fv(color.getRGB(),0);
  drawCurve(gl,dataVector);
  if (!fillCurve && detailLevel == EDetailLevel.HIGH) {
    gl.glPopName();
  }
}",0.8621722846441947
57431,"public void addSelection(Collection<IScore> scores){
  scores=Collections2.filter(scores,query.getMode().isSupportedBy());
  if (scores.isEmpty())   return;
  this.selection.addAll(scores);
  IScore last=Iterables.getLast(scores);
  sortByImpl(last,last.getDefaultSorting());
  submitComputation(scores,null);
  listeners.fireIndexedPropertyChange(PROP_SELECTION,selection.size() - 1,null,last);
}","public void addSelection(Collection<IScore> scores){
  scores=Collections2.filter(scores,query.getMode().isSupportedBy());
  if (scores.isEmpty())   return;
  this.selection.addAll(0,scores);
  IScore last=Iterables.getLast(scores);
  sortByImpl(last,last.getDefaultSorting());
  submitComputation(scores,null);
  listeners.fireIndexedPropertyChange(PROP_SELECTION,selection.size() - 1,null,last);
}",0.9974874371859296
57432,"private Pair<List<Float>,Integer> getValues(Iterable<Integer> a,Integer col){
  int survived=0;
  List<Float> r=new ArrayList<>();
  for (  Integer row : a) {
    Float v=clinical.getTable().getRaw(row,col);
    if (v == null || v.isNaN()) {
      survived++;
      continue;
    }
    r.add(v);
  }
  Collections.sort(r);
  return Pair.make(r,survived);
}","private Pair<List<Float>,Integer> getValues(Iterable<Integer> a,Integer col){
  int survived=0;
  List<Float> r=new ArrayList<>();
  for (  Integer row : a) {
    Float v=clinical.getTable().getRawDxR(col,row);
    if (v == null || v.isNaN()) {
      survived++;
      continue;
    }
    r.add(v);
  }
  Collections.sort(r);
  return Pair.make(r,survived);
}",0.9818181818181818
57433,"private void createColumns(ScoreQuery query){
  this.clear();
  this.columns.clear();
  this.columns.add(new RankColumn(view));
  this.columns.add(new MatchColumn(view,stratomex));
  int i=0;
  this.queryColumns.clear();
  for (  IScore column : query.getSelection()) {
    QueryColumn col=QueryColumn.create(column,i++,query.getSorting(column),view);
    this.columns.add(col);
    this.queryColumns.add(col);
  }
  this.columns.add(new AddQueryColumn(view));
  final ElementLayout colSpace=createXSpacer(1);
  this.add(colSpace);
  this.add(columns.get(0));
  this.add(colSpace);
  this.add(columns.get(1));
  this.add(colSpace);
  this.add(columns.get(2));
  for (  QueryColumn col : this.queryColumns) {
    final ElementLayout s=createXSeparator(5);
    s.setGrabY(true);
    this.add(s).add(col);
  }
  this.add(columns.get(columns.size() - 1));
  invalidate();
  this.setPixelSizeY(columns.get(1).getPixelSizeY());
}","private void createColumns(ScoreQuery query){
  this.clear();
  this.columns.clear();
  this.columns.add(new RankColumn(view));
  this.columns.add(new MatchColumn(view,stratomex));
  int i=0;
  this.queryColumns.clear();
  for (  IScore column : query.getSelection()) {
    QueryColumn col=QueryColumn.create(column,i++,query.getSorting(column),view);
    this.columns.add(col);
    this.queryColumns.add(col);
  }
  this.columns.add(new AddQueryColumn(view));
  final ElementLayout colSpace=createXSpacer(1);
  this.add(colSpace);
  this.add(columns.get(0));
  this.add(colSpace);
  this.add(columns.get(1));
  for (  QueryColumn col : this.queryColumns) {
    final ElementLayout s=createXSeparator(5);
    s.setGrabY(true);
    this.add(s).add(col);
  }
  this.add(columns.get(columns.size() - 1));
  invalidate();
  this.setPixelSizeY(columns.get(1).getPixelSizeY());
}",0.9721603563474388
57434,"/** 
 * filter all methods of the listener object for <code>
 * @ListenTo void xxx(<? extends AEvent> event); </code>and register an event listener for calling this method
 * @param owner
 * @param listener
 */
public final void register(IListenerOwner owner,Object listener){
  Class<?> clazz=listener.getClass();
  while (clazz != null) {
    for (    Method m : listener.getClass().getDeclaredMethods()) {
      if (!matches(m))       continue;
      Class<? extends AEvent> event=m.getParameterTypes()[0].asSubclass(AEvent.class);
      boolean toMe=m.getAnnotation(ListenTo.class).sendToMe() && ADirectedEvent.class.isAssignableFrom(event);
      register(event,new AnnotationBasedEventListener(owner,listener,m,toMe));
    }
    clazz=clazz.getSuperclass();
  }
}","/** 
 * filter all methods of the listener object for <code>
 * @ListenTo void xxx(<? extends AEvent> event); </code>and register an event listener for calling this method
 * @param owner
 * @param listener
 */
public final void register(IListenerOwner owner,Object listener){
  Class<?> clazz=listener.getClass();
  while (clazz != null) {
    for (    Method m : clazz.getDeclaredMethods()) {
      if (!matches(m))       continue;
      Class<? extends AEvent> event=m.getParameterTypes()[0].asSubclass(AEvent.class);
      boolean toMe=m.getAnnotation(ListenTo.class).sendToMe() && ADirectedEvent.class.isAssignableFrom(event);
      register(event,new AnnotationBasedEventListener(owner,listener,m,toMe));
    }
    clazz=clazz.getSuperclass();
  }
}",0.984251968503937
57435,"private static float computeJaccardIndex(Group a,BitSet aBits,Group b,BitSet bBits){
  BitSet tmp=(BitSet)bBits.clone();
  tmp.and(aBits);
  int intersection=tmp.cardinality();
  int union=a.getSize() + b.getSize() - intersection;
  float score=union == 0 ? 0.f : (float)intersection / union;
  return score;
}","private static float computeJaccardIndex(Group a,BitSet aBits,Group b,BitSet bBits){
  BitSet tmp=(BitSet)bBits.clone();
  tmp.and(aBits);
  int intersection=tmp.cardinality();
  int union=aBits.cardinality() + aBits.cardinality() - intersection;
  float score=union == 0 ? 0.f : (float)intersection / union;
  return score;
}",0.9213836477987422
57436,"private static void applyImpl(Collection<IBatchComputedGroupScore> batch,Multimap<TablePerspective,Group> stratNGroups){
  Multimap<IDType,JaccardIndexScore> byIDCat=ArrayListMultimap.create();
  for (  IBatchComputedGroupScore b : batch) {
    JaccardIndexScore s=(JaccardIndexScore)b;
    byIDCat.put(s.stratification.getRecordPerspective().getVirtualArray().getIdType(),s);
  }
  Set<TablePerspective> stratifications=stratNGroups.keySet();
  log.info(""String_Node_Str"" + stratifications.size() + ""String_Node_Str""+ stratNGroups.size()+ ""String_Node_Str""+ batch.size());
  int i=0;
  for (  TablePerspective strat : stratifications) {
    RecordVirtualArray va=strat.getRecordPerspective().getVirtualArray();
    for (    Group g : stratNGroups.get(strat)) {
      for (      IDType targetType : byIDCat.keySet()) {
        IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(targetType.getIDCategory());
        Collection<JaccardIndexScore> todo=new ArrayList<>();
        for (        JaccardIndexScore idElem : byIDCat.get(targetType)) {
          todo.add(idElem);
        }
        if (todo.isEmpty())         continue;
        boolean doMapIds=!targetType.equals(va.getIdType());
        BitSet s=doMapIds ? createMappedIds(va,g,idMappingManager,targetType) : createIds(va,g);
        for (        JaccardIndexScore idElem : todo) {
          idElem.put(g,computeJaccardIndex(idElem.group,idElem.bitSet,g,s));
        }
      }
    }
  }
  log.info(""String_Node_Str"");
}","private static void applyImpl(Collection<IBatchComputedGroupScore> batch,Multimap<TablePerspective,Group> stratNGroups){
  Multimap<IDType,JaccardIndexScore> byIDCat=ArrayListMultimap.create();
  for (  IBatchComputedGroupScore b : batch) {
    JaccardIndexScore s=(JaccardIndexScore)b;
    byIDCat.put(s.stratification.getRecordPerspective().getVirtualArray().getIdType(),s);
  }
  Set<TablePerspective> stratifications=stratNGroups.keySet();
  log.info(""String_Node_Str"" + stratifications.size() + ""String_Node_Str""+ stratNGroups.size()+ ""String_Node_Str""+ batch.size());
  int i=0;
  for (  TablePerspective strat : stratifications) {
    RecordVirtualArray va=strat.getRecordPerspective().getVirtualArray();
    for (    Group g : stratNGroups.get(strat)) {
      for (      IDType targetType : byIDCat.keySet()) {
        IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(targetType.getIDCategory());
        Collection<JaccardIndexScore> todo=new ArrayList<>();
        for (        JaccardIndexScore idElem : byIDCat.get(targetType)) {
          if (!idElem.contains(strat,g))           todo.add(idElem);
        }
        if (todo.isEmpty())         continue;
        boolean doMapIds=!targetType.equals(va.getIdType());
        BitSet s=doMapIds ? createMappedIds(va,g,idMappingManager,targetType) : createIds(va,g);
        for (        JaccardIndexScore idElem : todo) {
          idElem.put(g,computeJaccardIndex(idElem.group,idElem.bitSet,g,s));
        }
      }
    }
  }
  log.info(""String_Node_Str"");
}",0.9866318878382784
57437,"private static float computeJaccardIndex(Group a,BitSet aBits,Group b,BitSet bBits){
  BitSet tmp=(BitSet)bBits.clone();
  tmp.and(aBits);
  int intersection=tmp.cardinality();
  int union=aBits.cardinality() + aBits.cardinality() - intersection;
  float score=union == 0 ? 0.f : (float)intersection / union;
  return score;
}","private static float computeJaccardIndex(Group a,BitSet aBits,Group b,BitSet bBits){
  BitSet tmp=(BitSet)bBits.clone();
  tmp.and(aBits);
  int intersection=tmp.cardinality();
  int union=aBits.cardinality() + bBits.cardinality() - intersection;
  float score=union == 0 ? 0.f : (float)intersection / union;
  return score;
}",0.9969325153374232
57438,"public void apply(ALinearizableNode node){
  this.node=node;
  unregisterPickingListeners();
  registerPickingListeners();
  attributeRenderers.clear();
  RemoveNodeButtonAttributeRenderer attributeRenderer=new RemoveNodeButtonAttributeRenderer(view,node);
  ComplexNode complexNode=(ComplexNode)node;
  if (complexNode.getNodes() != null) {
    List<Integer> nodeIds=new ArrayList<Integer>();
    for (    ALinearizableNode n : complexNode.getNodes()) {
      nodeIds.add(n.getNodeId());
    }
    attributeRenderer.setNodeIds(nodeIds);
    attributeRenderer.registerPickingListeners();
  }
  addAttributeRenderer(attributeRenderer);
}","@Override public void apply(ALinearizableNode node){
  this.node=node;
  unregisterPickingListeners();
  registerPickingListeners();
  attributeRenderers.clear();
  RemoveNodeButtonAttributeRenderer attributeRenderer=new RemoveNodeButtonAttributeRenderer(view,node);
  ComplexNode complexNode=(ComplexNode)node;
  if (complexNode.getNodes() != null) {
    List<Integer> nodeIds=new ArrayList<Integer>();
    for (    ALinearizableNode n : complexNode.getNodes()) {
      nodeIds.add(n.getNodeId());
    }
    attributeRenderer.setNodeIds(nodeIds);
    attributeRenderer.registerPickingListeners();
  }
  addAttributeRenderer(attributeRenderer);
}",0.9921996879875196
57439,"@Override public void render(GL2 gl,GLU glu){
  ComplexNode complexNode=(ComplexNode)node;
  Vec3f position=complexNode.getPosition();
  float currentPositionY=position.y() + complexNode.getHeight() / 2.0f;
  for (  ALinearizableNode node : complexNode.getNodes()) {
    float nodeHeight=node.getHeight();
    currentPositionY-=nodeHeight / 2.0f;
    node.setPosition(new Vec3f(position.x(),currentPositionY,position.z()));
    node.render(gl,glu);
    currentPositionY-=nodeHeight / 2.0f;
  }
  for (  ANodeAttributeRenderer attributeRenderer : attributeRenderers) {
    attributeRenderer.render(gl);
  }
}","@Override public void render(GL2 gl,GLU glu){
  ComplexNode complexNode=(ComplexNode)node;
  for (  ALinearizableNode node : complexNode.getNodes()) {
    node.render(gl,glu);
  }
  for (  ANodeAttributeRenderer attributeRenderer : attributeRenderers) {
    attributeRenderer.render(gl);
  }
}",0.3666666666666666
57440,"@Override public void widgetDisposed(DisposeEvent e){
  if (!PlatformUI.getWorkbench().isClosing())   e.widget.dispose();
}","@Override public void widgetDisposed(DisposeEvent e){
  if (!PlatformUI.getWorkbench().isClosing()) {
    fireDispose(SWTGLCanvas.this.canvas);
    SWTGLCanvas.this.canvas.getContext().destroy();
    SWTGLCanvas.this.canvas.setRealized(false);
  }
}",0.5591397849462365
57441,"SWTGLCanvas(GLCanvas canvas){
  this.canvas=canvas;
  canvas.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (!PlatformUI.getWorkbench().isClosing())       e.widget.dispose();
    }
  }
);
  canvas.addGLEventListener(new GLEventListener(){
    int w=-1, h=-1;
    @Override public void reshape(    GLAutoDrawable drawable,    int x,    int y,    int width,    int height){
      this.w=width;
      this.h=height;
      fireReshape(drawable,x,y,width,height);
    }
    @Override public void init(    GLAutoDrawable drawable){
      this.w=drawable.getWidth();
      this.h=drawable.getHeight();
      fireInit(drawable);
    }
    @Override public void dispose(    GLAutoDrawable drawable){
      fireDispose(drawable);
    }
    @Override public void display(    GLAutoDrawable drawable){
      if (w != drawable.getWidth() || h != drawable.getHeight() && w != -1) {
        w=drawable.getWidth();
        h=drawable.getHeight();
        fireReshape(drawable,0,0,drawable.getWidth(),drawable.getHeight());
      }
      fireDisplay(drawable);
    }
  }
);
}","SWTGLCanvas(GLCanvas canvas){
  this.canvas=canvas;
  canvas.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (!PlatformUI.getWorkbench().isClosing()) {
        fireDispose(SWTGLCanvas.this.canvas);
        SWTGLCanvas.this.canvas.getContext().destroy();
        SWTGLCanvas.this.canvas.setRealized(false);
      }
    }
  }
);
  canvas.addGLEventListener(new GLEventListener(){
    int w=-1, h=-1;
    @Override public void reshape(    GLAutoDrawable drawable,    int x,    int y,    int width,    int height){
      this.w=width;
      this.h=height;
      fireReshape(drawable,x,y,width,height);
    }
    @Override public void init(    GLAutoDrawable drawable){
      this.w=drawable.getWidth();
      this.h=drawable.getHeight();
      fireInit(drawable);
    }
    @Override public void dispose(    GLAutoDrawable drawable){
      fireDispose(drawable);
    }
    @Override public void display(    GLAutoDrawable drawable){
      if (w != drawable.getWidth() || h != drawable.getHeight() && w != -1) {
        w=drawable.getWidth();
        h=drawable.getHeight();
        fireReshape(drawable,0,0,drawable.getWidth(),drawable.getHeight());
      }
      fireDisplay(drawable);
    }
  }
);
}",0.9212070410729254
57442,"/** 
 * Constructor
 * @param dataOKListener see  {@link #dataOKListener}
 * @param parent the parent composite
 * @param supportedDataDomains All datadomains that shall be chosen from. If null, all tablebased datadomains are available.
 * @param style the SWT style
 */
public DataChooserComposite(IDataOKListener dataOKListener,Composite parent,List<ATableBasedDataDomain> supportedDataDomains,int style){
  super(parent,style);
  if (supportedDataDomains == null) {
    supportedDataDomains=DataDomainManager.get().getDataDomainsByType(ATableBasedDataDomain.class);
  }
 else {
    this.supportedDataDomains=supportedDataDomains;
  }
  this.dataOKListener=dataOKListener;
  this.parent=parent;
  initGui();
}","/** 
 * Constructor
 * @param dataOKListener see  {@link #dataOKListener}
 * @param parent the parent composite
 * @param supportedDataDomains All datadomains that shall be chosen from. If null, all tablebased datadomains are available.
 * @param style the SWT style
 */
public DataChooserComposite(IDataOKListener dataOKListener,Composite parent,List<ATableBasedDataDomain> supportedDataDomains,int style){
  super(parent,style);
  if (supportedDataDomains == null) {
    this.supportedDataDomains=DataDomainManager.get().getDataDomainsByType(ATableBasedDataDomain.class);
  }
 else {
    this.supportedDataDomains=supportedDataDomains;
  }
  this.dataOKListener=dataOKListener;
  this.parent=parent;
  initGui();
}",0.9964961457603364
57443,"@Override protected void renderContent(GL2 gl){
  pushNames(gl);
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4f(1,1,1,0);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
  popNames(gl);
}","@Override protected void renderContent(GL2 gl){
  pushNames(gl);
  gl.glBegin(GL2.GL_QUADS);
  gl.glColor4f(1,1,1,0);
  gl.glVertex3f(0,0,-0.01f);
  gl.glVertex3f(x,0,-0.01f);
  gl.glVertex3f(x,y,-0.01f);
  gl.glVertex3f(0,y,-0.01f);
  gl.glEnd();
  popNames(gl);
}",0.8549019607843137
57444,"protected static String clean(String id){
  return id.replace(""String_Node_Str"",""String_Node_Str"");
}","protected static String clean(String id){
  return id == null ? null : id.replace(""String_Node_Str"",""String_Node_Str"");
}",0.90990990990991
57445,"@Override protected void extractArguments(JSAPResult config,TCGAQCSettings settings,JSAP jsap){
  super.extractArguments(config,settings,jsap);
  analysisRuns=config.getStringArray(""String_Node_Str"");
  tcgaServerURL=config.getString(""String_Node_Str"");
}","@Override protected void extractArguments(JSAPResult config,TCGAQCSettings settings,JSAP jsap){
  super.extractArguments(config,settings,jsap);
  settings.setRuns(config.getStringArray(""String_Node_Str""));
  settings.setTcgaServerURL(config.getString(""String_Node_Str""));
}",0.8333333333333334
57446,"public void setRuns(String[] analysisRuns,String[] dataRuns){
  this.analysisRuns=analysisRuns;
  this.dataRuns=dataRuns;
}","public void setRuns(String[] analysisRuns){
  this.analysisRuns=analysisRuns;
}",0.7821782178217822
57447,"@Override public void display(GL2 gl){
  if (!isRendered) {
    maxNodeWidthPixels=Integer.MIN_VALUE;
    maxNodeHeightPixels=Integer.MIN_VALUE;
    for (    IDVINode node : dataGraph.getNodes()) {
      node.recalculateNodeSize();
      if (node.getHeightPixels() > maxNodeHeightPixels)       maxNodeHeightPixels=node.getHeightPixels();
      if (node.getWidthPixels() > maxNodeWidthPixels)       maxNodeWidthPixels=node.getWidthPixels();
    }
  }
  if (isDisplayListDirty && !(!isMinSizeApplied && waitForMinSizeApplication)) {
    buildDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
    waitForMinSizeApplication=false;
  }
  gl.glCallList(displayListIndex);
  if (!lazyMode)   checkForHits(gl);
  dragAndDropController.handleDragging(gl,glMouseListener);
  isRendered=true;
}","@Override public void display(GL2 gl){
  if (!isRendered) {
    maxNodeWidthPixels=Integer.MIN_VALUE;
    maxNodeHeightPixels=Integer.MIN_VALUE;
    for (    IDVINode node : dataGraph.getNodes()) {
      node.recalculateNodeSize();
      if (node.getHeightPixels() > maxNodeHeightPixels)       maxNodeHeightPixels=node.getHeightPixels();
      if (node.getWidthPixels() > maxNodeWidthPixels)       maxNodeWidthPixels=node.getWidthPixels();
    }
  }
  if (isDisplayListDirty && !(!isMinSizeApplied && waitForMinSizeApplication)) {
    buildDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
    waitForMinSizeApplication=false;
    if (!isRendered) {
      for (      ViewNode viewNode : viewNodes) {
        if (viewNode instanceof MultiTablePerspectiveViewNode) {
          viewNode.update();
        }
      }
    }
  }
  gl.glCallList(displayListIndex);
  if (!lazyMode)   checkForHits(gl);
  dragAndDropController.handleDragging(gl,glMouseListener);
  isRendered=true;
}",0.8929971988795519
57448,"/** 
 * <p> Creates a column for each TablePerspective supplied </p> <p> As StratomeX can only map between data sets that share a mapping between records, the imprinting of the IDType and IDCategory for the records is done here if there is no data set yet. </p>
 * @param newTablePerspectives
 * @param brickConfigurer The brick configurer can be specified externally (e.g., pathways, kaplan meier). If null, the {@link NumericalDataConfigurer} will be used.
 */
public void addTablePerspectives(List<TablePerspective> newTablePerspectives,IBrickConfigurer brickConfigurer){
  if (newTablePerspectives == null || newTablePerspectives.size() == 0) {
    Logger.log(new Status(Status.WARNING,this.toString(),""String_Node_Str""));
    return;
  }
  if (recordIDCategory == null) {
    ATableBasedDataDomain dataDomain=newTablePerspectives.get(0).getDataDomain();
    imprintVisBricks(dataDomain);
  }
  ArrayList<BrickColumn> brickColumns=brickColumnManager.getBrickColumns();
  for (  TablePerspective tablePerspective : newTablePerspectives) {
    if (tablePerspective == null) {
      Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str""));
      continue;
    }
    if (!tablePerspective.getDataDomain().getTable().isDataHomogeneous() && brickConfigurer == null) {
      Logger.log(new Status(Status.WARNING,this.toString(),""String_Node_Str""));
      continue;
    }
    if (!tablePerspective.getDataDomain().getRecordIDCategory().equals(recordIDCategory)) {
      Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + tablePerspective + ""String_Node_Str""));
      continue;
    }
    boolean columnExists=false;
    for (    BrickColumn brickColumn : brickColumns) {
      if (brickColumn.getTablePerspective().getID() == tablePerspective.getID()) {
        columnExists=true;
        break;
      }
    }
    if (!columnExists) {
      BrickColumn brickColumn=(BrickColumn)GeneralManager.get().getViewManager().createGLView(BrickColumn.class,getParentGLCanvas(),parentComposite,new ViewFrustum(CameraProjectionMode.ORTHOGRAPHIC,0,1,0,1,-1,1));
      if (brickConfigurer == null) {
        if (tablePerspective.getNrDimensions() == 1) {
          brickConfigurer=new CategoricalDataConfigurer(tablePerspective);
        }
 else {
          brickConfigurer=new NumericalDataConfigurer(tablePerspective);
        }
      }
      brickColumn.setDetailLevel(this.getDetailLevel());
      brickColumn.setBrickConfigurer(brickConfigurer);
      brickColumn.setDataDomain(tablePerspective.getDataDomain());
      brickColumn.setTablePerspective(tablePerspective);
      brickColumn.setRemoteRenderingGLView(this);
      brickColumn.setStratomex(this);
      brickColumn.initialize();
      brickColumns.add(brickColumn);
      tablePerspectives.add(tablePerspective);
      uninitializedSubViews.add(brickColumn);
      brickColumnManager.setRightColumnStartIndex(brickColumnManager.getRightColumnStartIndex() + 1);
    }
  }
  TablePerspectivesChangedEvent event=new TablePerspectivesChangedEvent(this);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}","/** 
 * <p> Creates a column for each TablePerspective supplied </p> <p> As StratomeX can only map between data sets that share a mapping between records, the imprinting of the IDType and IDCategory for the records is done here if there is no data set yet. </p>
 * @param newTablePerspectives
 * @param brickConfigurer The brick configurer can be specified externally (e.g., pathways, kaplan meier). If null, the {@link NumericalDataConfigurer} will be used.
 */
public void addTablePerspectives(List<TablePerspective> newTablePerspectives,IBrickConfigurer brickConfigurer){
  if (newTablePerspectives == null || newTablePerspectives.size() == 0) {
    Logger.log(new Status(Status.WARNING,this.toString(),""String_Node_Str""));
    return;
  }
  if (recordIDCategory == null) {
    ATableBasedDataDomain dataDomain=newTablePerspectives.get(0).getDataDomain();
    imprintVisBricks(dataDomain);
  }
  ArrayList<BrickColumn> brickColumns=brickColumnManager.getBrickColumns();
  for (  TablePerspective tablePerspective : newTablePerspectives) {
    if (tablePerspective == null) {
      Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str""));
      continue;
    }
    if (!tablePerspective.getDataDomain().getTable().isDataHomogeneous() && brickConfigurer == null) {
      Logger.log(new Status(Status.WARNING,this.toString(),""String_Node_Str""));
      continue;
    }
    if (!tablePerspective.getDataDomain().getRecordIDCategory().equals(recordIDCategory)) {
      Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + tablePerspective + ""String_Node_Str""));
      continue;
    }
    boolean columnExists=false;
    for (    BrickColumn brickColumn : brickColumns) {
      if (brickColumn.getTablePerspective().getID() == tablePerspective.getID()) {
        columnExists=true;
        break;
      }
    }
    if (!columnExists) {
      BrickColumn brickColumn=(BrickColumn)GeneralManager.get().getViewManager().createGLView(BrickColumn.class,getParentGLCanvas(),parentComposite,new ViewFrustum(CameraProjectionMode.ORTHOGRAPHIC,0,1,0,1,-1,1));
      if (brickConfigurer == null) {
        if (tablePerspective.getNrDimensions() == 1) {
          brickConfigurer=new CategoricalDataConfigurer(tablePerspective);
        }
 else {
          brickConfigurer=new NumericalDataConfigurer(tablePerspective);
        }
      }
      brickColumn.setDetailLevel(this.getDetailLevel());
      brickColumn.setBrickConfigurer(brickConfigurer);
      brickColumn.setDataDomain(tablePerspective.getDataDomain());
      brickColumn.setTablePerspective(tablePerspective);
      brickColumn.setRemoteRenderingGLView(this);
      brickColumn.setStratomex(this);
      brickColumn.initialize();
      brickColumns.add(brickColumnManager.getRightColumnStartIndex(),brickColumn);
      tablePerspectives.add(tablePerspective);
      uninitializedSubViews.add(brickColumn);
      brickColumnManager.setRightColumnStartIndex(brickColumnManager.getRightColumnStartIndex() + 1);
    }
  }
  TablePerspectivesChangedEvent event=new TablePerspectivesChangedEvent(this);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}",0.9926868044515104
57449,"@Override public void configure(DetailBrickLayoutTemplate layoutTemplate){
  HashSet<EContainedViewType> validViewTypes=new HashSet<EContainedViewType>();
  validViewTypes.add(EContainedViewType.KAPLAN_MEIER_VIEW);
  layoutTemplate.setValidViewTypes(validViewTypes);
  layoutTemplate.setDefaultViewType(EContainedViewType.KAPLAN_MEIER_VIEW);
  ArrayList<ElementLayout> toolBarElements=new ArrayList<ElementLayout>();
  toolBarElements.add(createCaptionLayout(layoutTemplate,layoutTemplate.getBrick(),EPickingType.BRICK,layoutTemplate.getBrick().getID(),layoutTemplate.getBrick()));
  toolBarElements.add(createSpacingLayout(layoutTemplate,true));
  layoutTemplate.setToolBarElements(toolBarElements);
  layoutTemplate.showFooterBar(false);
}","@Override public void configure(DetailBrickLayoutTemplate layoutTemplate){
  HashSet<EContainedViewType> validViewTypes=new HashSet<EContainedViewType>();
  validViewTypes.add(EContainedViewType.KAPLAN_MEIER_VIEW);
  layoutTemplate.setValidViewTypes(validViewTypes);
  layoutTemplate.setDefaultViewType(EContainedViewType.KAPLAN_MEIER_VIEW);
  ArrayList<ElementLayout> toolBarElements=new ArrayList<ElementLayout>();
  ElementLayout leftPaddingLayout=new ElementLayout(""String_Node_Str"");
  leftPaddingLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
  toolBarElements.add(leftPaddingLayout);
  toolBarElements.add(createSpacingLayout(layoutTemplate,true));
  layoutTemplate.setToolBarElements(toolBarElements);
  layoutTemplate.showFooterBar(false);
}",0.6474143720617864
57450,"/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public VendingMachine(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  glKeyListener=new VendingMachineKeyListener(this);
  parentComposite.getDisplay().syncExec(new Runnable(){
    @Override public void run(){
      parentGLCanvas.removeMouseWheelListener(glMouseListener);
      parentGLCanvas.addMouseWheelListener(glMouseWheelListener);
    }
  }
);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public VendingMachine(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  glKeyListener=new VendingMachineKeyListener(this);
  parentGLCanvas.removeMouseWheelListener(glMouseListener);
  parentGLCanvas.addMouseWheelListener(glMouseWheelListener);
}",0.884453781512605
57451,"private void createJaccardRankedElement(Collection<TablePerspective> a,Collection<TablePerspective> b){
  for (  Triple<TablePerspective,TablePerspective,JaccardIndexScores> scores : JaccardIndex.createScores(a,b)) {
    TablePerspective referenceTablePerspective=scores.getFirst();
    TablePerspective against=scores.getFirst();
    for (    JaccardIndexScorePair entry : scores.getThird()) {
      RankedElement tmpRankedElement=new RankedElement(entry.getSecond(),against,entry.getFirst(),referenceTablePerspective);
      rankedElements.add(tmpRankedElement);
    }
  }
}","private void createJaccardRankedElement(Collection<TablePerspective> a,Collection<TablePerspective> b){
  for (  Triple<TablePerspective,TablePerspective,JaccardIndexScores> scores : JaccardIndex.createScores(a,b)) {
    TablePerspective referenceTablePerspective=scores.getFirst();
    TablePerspective against=scores.getSecond();
    for (    JaccardIndexScorePair entry : scores.getThird()) {
      RankedElement tmpRankedElement=new RankedElement(entry.getSecond(),against,entry.getFirst(),referenceTablePerspective);
      rankedElements.add(tmpRankedElement);
    }
  }
}",0.9904596704249784
57452,"/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public VendingMachine(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  glKeyListener=new VendingMachineKeyListener(this);
  parentGLCanvas.removeMouseWheelListener(glMouseListener);
  parentGLCanvas.addMouseWheelListener(glMouseWheelListener);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public VendingMachine(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  glKeyListener=new VendingMachineKeyListener(this);
  parentComposite.getDisplay().syncExec(new Runnable(){
    @Override public void run(){
      parentGLCanvas.removeMouseWheelListener(glMouseListener);
      parentGLCanvas.addMouseWheelListener(glMouseWheelListener);
    }
  }
);
}",0.884453781512605
57453,"private void updateSubTree(final SelectionManager selectionManager){
  if (parentComposite.isDisposed())   return;
  parentComposite.getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      IDType idType=selectionManager.getIDType();
      IDCategory idCategory=idType.getIDCategory();
      if (idType.getIDCategory().getPrimaryMappingType() == null)       return;
      Set<Integer> mouseOverIDs=selectionManager.getElements(SelectionType.MOUSE_OVER);
      Set<Integer> selectedIDs=selectionManager.getElements(SelectionType.SELECTION);
      if (!selectionManagerToSubTree.containsKey(selectionManager) && (mouseOverIDs.size() > 0 || selectedIDs.size() > 0)) {
        TreeItem idCategorySubTree=new TreeItem(selectionTree,SWT.NONE);
        idCategorySubTree.setExpanded(true);
        idCategorySubTree.setData(-1);
        idCategorySubTree.setText(idCategory.getDenominationPlural());
        selectionManagerToSubTree.put(selectionManager,idCategorySubTree);
      }
      TreeItem subTree=selectionManagerToSubTree.get(selectionManager);
      for (      TreeItem item : subTree.getItems()) {
        item.dispose();
      }
      subTree.clearAll(true);
      createItems(subTree,SelectionType.MOUSE_OVER,mouseOverIDs,idType);
      createItems(subTree,SelectionType.SELECTION,selectedIDs,idType);
      int numberElements=IDMappingManagerRegistry.get().getIDMappingManager(idType).getPrimaryTypeCounter();
      int selectedRecords=selectionManager.getNumberOfElements(SelectionType.SELECTION);
      float selectedRecordsPercentage=selectedRecords / (float)numberElements * 100f;
      if (numberElements != 0) {
        subTree.setText(idType.getIDCategory().getDenominationPlural() + ""String_Node_Str"" + selectedRecords+ ""String_Node_Str""+ numberElements+ ""String_Node_Str""+ Formatter.formatNumber(selectedRecordsPercentage)+ ""String_Node_Str"");
      }
    }
  }
);
}","private void updateSubTree(final SelectionManager selectionManager){
  if (parentComposite.isDisposed())   return;
  parentComposite.getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      IDType idType=selectionManager.getIDType();
      IDCategory idCategory=idType.getIDCategory();
      if (idType.getIDCategory().getPrimaryMappingType() == null)       return;
      Set<Integer> mouseOverIDs=selectionManager.getElements(SelectionType.MOUSE_OVER);
      Set<Integer> selectedIDs=selectionManager.getElements(SelectionType.SELECTION);
      if (!selectionManagerToSubTree.containsKey(selectionManager) && (mouseOverIDs.size() > 0 || selectedIDs.size() > 0)) {
        TreeItem idCategorySubTree=new TreeItem(selectionTree,SWT.NONE);
        idCategorySubTree.setExpanded(true);
        idCategorySubTree.setData(-1);
        idCategorySubTree.setText(idCategory.getDenominationPlural());
        selectionManagerToSubTree.put(selectionManager,idCategorySubTree);
      }
      TreeItem subTree=selectionManagerToSubTree.get(selectionManager);
      if (subTree == null)       return;
      for (      TreeItem item : subTree.getItems()) {
        item.dispose();
      }
      subTree.clearAll(true);
      createItems(subTree,SelectionType.MOUSE_OVER,mouseOverIDs,idType);
      createItems(subTree,SelectionType.SELECTION,selectedIDs,idType);
      int numberElements=IDMappingManagerRegistry.get().getIDMappingManager(idType).getPrimaryTypeCounter();
      int selectedRecords=selectionManager.getNumberOfElements(SelectionType.SELECTION);
      float selectedRecordsPercentage=selectedRecords / (float)numberElements * 100f;
      if (numberElements != 0) {
        subTree.setText(idType.getIDCategory().getDenominationPlural() + ""String_Node_Str"" + selectedRecords+ ""String_Node_Str""+ numberElements+ ""String_Node_Str""+ Formatter.formatNumber(selectedRecordsPercentage)+ ""String_Node_Str"");
      }
    }
  }
);
}",0.9893478825669004
57454,"@Override public void run(){
  IDType idType=selectionManager.getIDType();
  IDCategory idCategory=idType.getIDCategory();
  if (idType.getIDCategory().getPrimaryMappingType() == null)   return;
  Set<Integer> mouseOverIDs=selectionManager.getElements(SelectionType.MOUSE_OVER);
  Set<Integer> selectedIDs=selectionManager.getElements(SelectionType.SELECTION);
  if (!selectionManagerToSubTree.containsKey(selectionManager) && (mouseOverIDs.size() > 0 || selectedIDs.size() > 0)) {
    TreeItem idCategorySubTree=new TreeItem(selectionTree,SWT.NONE);
    idCategorySubTree.setExpanded(true);
    idCategorySubTree.setData(-1);
    idCategorySubTree.setText(idCategory.getDenominationPlural());
    selectionManagerToSubTree.put(selectionManager,idCategorySubTree);
  }
  TreeItem subTree=selectionManagerToSubTree.get(selectionManager);
  for (  TreeItem item : subTree.getItems()) {
    item.dispose();
  }
  subTree.clearAll(true);
  createItems(subTree,SelectionType.MOUSE_OVER,mouseOverIDs,idType);
  createItems(subTree,SelectionType.SELECTION,selectedIDs,idType);
  int numberElements=IDMappingManagerRegistry.get().getIDMappingManager(idType).getPrimaryTypeCounter();
  int selectedRecords=selectionManager.getNumberOfElements(SelectionType.SELECTION);
  float selectedRecordsPercentage=selectedRecords / (float)numberElements * 100f;
  if (numberElements != 0) {
    subTree.setText(idType.getIDCategory().getDenominationPlural() + ""String_Node_Str"" + selectedRecords+ ""String_Node_Str""+ numberElements+ ""String_Node_Str""+ Formatter.formatNumber(selectedRecordsPercentage)+ ""String_Node_Str"");
  }
}","@Override public void run(){
  IDType idType=selectionManager.getIDType();
  IDCategory idCategory=idType.getIDCategory();
  if (idType.getIDCategory().getPrimaryMappingType() == null)   return;
  Set<Integer> mouseOverIDs=selectionManager.getElements(SelectionType.MOUSE_OVER);
  Set<Integer> selectedIDs=selectionManager.getElements(SelectionType.SELECTION);
  if (!selectionManagerToSubTree.containsKey(selectionManager) && (mouseOverIDs.size() > 0 || selectedIDs.size() > 0)) {
    TreeItem idCategorySubTree=new TreeItem(selectionTree,SWT.NONE);
    idCategorySubTree.setExpanded(true);
    idCategorySubTree.setData(-1);
    idCategorySubTree.setText(idCategory.getDenominationPlural());
    selectionManagerToSubTree.put(selectionManager,idCategorySubTree);
  }
  TreeItem subTree=selectionManagerToSubTree.get(selectionManager);
  if (subTree == null)   return;
  for (  TreeItem item : subTree.getItems()) {
    item.dispose();
  }
  subTree.clearAll(true);
  createItems(subTree,SelectionType.MOUSE_OVER,mouseOverIDs,idType);
  createItems(subTree,SelectionType.SELECTION,selectedIDs,idType);
  int numberElements=IDMappingManagerRegistry.get().getIDMappingManager(idType).getPrimaryTypeCounter();
  int selectedRecords=selectionManager.getNumberOfElements(SelectionType.SELECTION);
  float selectedRecordsPercentage=selectedRecords / (float)numberElements * 100f;
  if (numberElements != 0) {
    subTree.setText(idType.getIDCategory().getDenominationPlural() + ""String_Node_Str"" + selectedRecords+ ""String_Node_Str""+ numberElements+ ""String_Node_Str""+ Formatter.formatNumber(selectedRecordsPercentage)+ ""String_Node_Str"");
  }
}",0.9898367724052972
57455,"@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  try {
    HandlerUtil.getActiveWorkbenchWindow(event).getActivePage().showView(GLPathway.VIEW_TYPE);
    HandlerUtil.getActiveWorkbenchWindow(event).getActivePage().showView(GLEnRoutePathway.VIEW_TYPE);
  }
 catch (  PartInitException e) {
    e.printStackTrace();
  }
  return null;
}","@Override public Object execute(ExecutionEvent event) throws ExecutionException {
  try {
    IWorkbenchWindow activeWindows=HandlerUtil.getActiveWorkbenchWindow(event);
    activeWindows.getActivePage().showView(GLPathway.VIEW_TYPE);
    activeWindows.getActivePage().showView(GLEnRoutePathway.VIEW_TYPE);
  }
 catch (  PartInitException e) {
    e.printStackTrace();
  }
  return null;
}",0.7862796833773087
57456,"@Override public IDataSupportDefinition getDataSupportDefinition(){
  return new EnRouteDataSupportDefinition();
}","@Override public IDataSupportDefinition getDataSupportDefinition(){
  return new GeneticDataSupportDefinition();
}",0.956140350877193
57457,"/** 
 * @param view
 */
public ACompoundNodeMode(GLEnRoutePathway view){
  super(view);
  this.pixelGLConverter=view.getPixelGLConverter();
}","/** 
 * @param view
 */
public ACompoundNodeMode(GLEnRoutePathway view){
  super(view);
  this.pixelGLConverter=view.getPixelGLConverter();
  colorCalculator=new SelectionColorCalculator(new Color(DEFAULT_BACKGROUND_COLOR));
}",0.7683923705722071
57458,"@Override protected void determineBackgroundColor(EventBasedSelectionManager selectionManager){
  ArrayList<SelectionType> selectionTypes=selectionManager.getSelectionTypes(node.getPathwayVertexRep().getName().hashCode());
  backgroundColor=DEFAULT_BACKGROUND_COLOR;
  Collections.sort(selectionTypes);
  Collections.reverse(selectionTypes);
  for (  SelectionType selectionType : selectionTypes) {
    if (!selectionType.equals(SelectionType.NORMAL))     backgroundColor=selectionType.getColor();
    break;
  }
}","@Override protected void determineBackgroundColor(EventBasedSelectionManager selectionManager){
  ArrayList<SelectionType> selectionTypes=selectionManager.getSelectionTypes(node.getPathwayVertexRep().getName().hashCode());
  Collections.sort(selectionTypes);
  Collections.reverse(selectionTypes);
  colorCalculator.calculateColors(selectionTypes);
  backgroundColor=colorCalculator.getPrimaryColor().getRGBA();
}",0.5307443365695793
57459,"/** 
 * @param view
 */
public AGeneNodeMode(GLEnRoutePathway view){
  super(view);
}","/** 
 * @param view
 */
public AGeneNodeMode(GLEnRoutePathway view){
  super(view);
  backgroundColor=DEFAULT_BACKGROUND_COLOR;
  colorCalculator=new SelectionColorCalculator(new Color(DEFAULT_BACKGROUND_COLOR));
}",0.568561872909699
57460,"@Override protected void determineBackgroundColor(EventBasedSelectionManager selectionManager){
  List<SelectionType> allSelectionTypes=new ArrayList<SelectionType>();
  for (  Integer davidId : node.getPathwayVertexRep().getDavidIDs()) {
    ArrayList<SelectionType> selectionTypes=selectionManager.getSelectionTypes(davidId);
    for (    SelectionType selectionType : selectionTypes) {
      if (!allSelectionTypes.contains(selectionType)) {
        allSelectionTypes.add(selectionType);
      }
    }
  }
  Collections.sort(allSelectionTypes);
  Collections.reverse(allSelectionTypes);
  backgroundColor=DEFAULT_BACKGROUND_COLOR;
  if (allSelectionTypes.size() > 0) {
    SelectionType selectionType=allSelectionTypes.get(0);
    if (!selectionType.equals(SelectionType.NORMAL))     backgroundColor=selectionType.getColor();
    gradientColor=null;
    if (allSelectionTypes.size() > 1) {
      selectionType=allSelectionTypes.get(1);
      if (!selectionType.equals(SelectionType.NORMAL))       gradientColor=selectionType.getColor();
    }
  }
}","@Override protected void determineBackgroundColor(EventBasedSelectionManager selectionManager){
  List<SelectionType> allSelectionTypes=new ArrayList<SelectionType>();
  for (  Integer davidId : node.getPathwayVertexRep().getDavidIDs()) {
    ArrayList<SelectionType> selectionTypes=selectionManager.getSelectionTypes(davidId);
    for (    SelectionType selectionType : selectionTypes) {
      if (!allSelectionTypes.contains(selectionType)) {
        allSelectionTypes.add(selectionType);
      }
    }
  }
  Collections.sort(allSelectionTypes);
  Collections.reverse(allSelectionTypes);
  colorCalculator.calculateColors(allSelectionTypes);
  backgroundColor=colorCalculator.getPrimaryColor().getRGBA();
  gradientColor=colorCalculator.getSecondaryColor().getRGBA();
}",0.6739846322722283
57461,"public void selectElementsByConnectionBandID(int connectionBandID){
  recordSelectionManager.clearSelections();
  ClearSelectionsEvent cse=new ClearSelectionsEvent();
  cse.setSender(this);
  eventPublisher.triggerEvent(cse);
  recordSelectionManager.clearSelection(recordSelectionManager.getSelectionType());
  volatileBandSelectionType=new SelectionType(""String_Node_Str"",recordSelectionManager.getSelectionType().getColor(),1,true,true,1);
  volatileBandSelectionType.setManaged(false);
  SelectionTypeEvent selectionTypeEvent=new SelectionTypeEvent(volatileBandSelectionType);
  GeneralManager.get().getEventPublisher().triggerEvent(selectionTypeEvent);
  BrickConnection connectionBand=hashConnectionBandIDToRecordVA.get(connectionBandID);
  RecordVirtualArray recordVA=connectionBand.getSharedRecordVirtualArray();
  for (  Integer recordID : recordVA) {
    recordSelectionManager.addToType(recordSelectionManager.getSelectionType(),recordVA.getIdType(),recordID);
  }
  SelectionUpdateEvent event=new SelectionUpdateEvent();
  event.setSender(this);
  SelectionDelta delta=recordSelectionManager.getDelta();
  event.setSelectionDelta(delta);
  event.setDataDomainID(connectionBand.getLeftBrick().getDataDomain().getDataDomainID());
  eventPublisher.triggerEvent(event);
  updateConnectionLinesBetweenDimensionGroups();
}","public void selectElementsByConnectionBandID(int connectionBandID){
  recordSelectionManager.clearSelection(recordSelectionManager.getSelectionType());
  volatileBandSelectionType=new SelectionType(""String_Node_Str"",recordSelectionManager.getSelectionType().getColor(),1,true,true,1);
  volatileBandSelectionType.setManaged(false);
  SelectionTypeEvent selectionTypeEvent=new SelectionTypeEvent(volatileBandSelectionType);
  GeneralManager.get().getEventPublisher().triggerEvent(selectionTypeEvent);
  BrickConnection connectionBand=hashConnectionBandIDToRecordVA.get(connectionBandID);
  RecordVirtualArray recordVA=connectionBand.getSharedRecordVirtualArray();
  for (  Integer recordID : recordVA) {
    recordSelectionManager.addToType(recordSelectionManager.getSelectionType(),recordVA.getIdType(),recordID);
  }
  SelectionUpdateEvent event=new SelectionUpdateEvent();
  event.setSender(this);
  SelectionDelta delta=recordSelectionManager.getDelta();
  event.setSelectionDelta(delta);
  event.setDataDomainID(connectionBand.getLeftBrick().getDataDomain().getDataDomainID());
  eventPublisher.triggerEvent(event);
  updateConnectionLinesBetweenDimensionGroups();
}",0.2393915132105684
57462,"/** 
 * Reinitializes all widgets according to the   {@link #dataSetDescription}.
 */
public void pageActivated(){
  if (!dataSourcePath.equals(dataSetDescription.getDataSourcePath())) {
    guiCreated();
    DataImportWizard wizard=(DataImportWizard)page.getWizard();
    int totalNumberOfColumns=wizard.getTotalNumberOfColumns();
    int totalNumberOfRows=wizard.getTotalNumberOfRows();
    IDCategory tcgaSampleCategory=IDCategory.getIDCategory(""String_Node_Str"");
    if (totalNumberOfColumns > 100 && totalNumberOfColumns > totalNumberOfRows || (dataSetDescription.getColumnIDSpecification().getIdCategory().equals(tcgaSampleCategory.getCategoryName()))) {
      page.swapRowsWithColumnsButton.setSelection(true);
    }
 else {
      page.swapRowsWithColumnsButton.setSelection(false);
    }
    updateColumnCountWarning();
  }
  dataSourcePath=dataSetDescription.getDataSourcePath();
}","/** 
 * Reinitializes all widgets according to the   {@link #dataSetDescription}.
 */
public void pageActivated(){
  if (!dataSourcePath.equals(dataSetDescription.getDataSourcePath())) {
    guiCreated();
    DataImportWizard wizard=(DataImportWizard)page.getWizard();
    int totalNumberOfColumns=wizard.getTotalNumberOfColumns();
    int totalNumberOfRows=wizard.getTotalNumberOfRows();
    IDCategory tcgaSampleCategory=IDCategory.getIDCategory(""String_Node_Str"");
    if (totalNumberOfColumns > 100 && totalNumberOfColumns > totalNumberOfRows || (tcgaSampleCategory != null && (dataSetDescription.getColumnIDSpecification().getIdCategory().equals(tcgaSampleCategory.getCategoryName())))) {
      page.swapRowsWithColumnsButton.setSelection(true);
    }
 else {
      page.swapRowsWithColumnsButton.setSelection(false);
    }
    updateColumnCountWarning();
  }
  dataSourcePath=dataSetDescription.getDataSourcePath();
}",0.9823594266813672
57463,"/** 
 * Adapts the view height to the maximum of the specified minimum view heights, if necessary.
 * @param minViewWidth Minimum width required.
 * @param minViewHeightRequiredByPath View height in pixels required by the linearized path and its rows.
 * @param minViewHeightRequiredByBranchNodes View height in pixels required by branch nodes.
 */
private void adaptViewSize(int minViewWidth,int minViewHeightRequiredByPath,int minViewHeightRequiredByBranchNodes){
  int minViewHeightPixels=0;
  boolean isViewHeightCurrentlyDeterminedByPath;
  if (minViewHeightRequiredByBranchNodes > minViewHeightRequiredByPath) {
    minViewHeightPixels=minViewHeightRequiredByBranchNodes;
    isViewHeightCurrentlyDeterminedByPath=false;
  }
 else {
    minViewHeightPixels=minViewHeightRequiredByPath;
    isViewHeightCurrentlyDeterminedByPath=true;
  }
  boolean updateWidth=minViewWidth > parentGLCanvas.getWidth();
  boolean updateHeight=false;
  if (isNewPath || (isViewHeightCurrentlyDeterminedByPath != isViewHeightDeterminedByPath) || parentGLCanvas.getHeight() < minViewHeightPixels) {
    isNewPath=false;
    updateHeight=true;
  }
  isViewHeightDeterminedByPath=isViewHeightCurrentlyDeterminedByPath;
  if (updateWidth || updateHeight) {
    setMinViewSize(updateWidth ? minViewWidth + 3 : BRANCH_COLUMN_WIDTH_PIXELS + PATHWAY_COLUMN_WIDTH_PIXELS + DATA_COLUMN_WIDTH_PIXELS,minViewHeightPixels + 3);
  }
}","/** 
 * Adapts the view height to the maximum of the specified minimum view heights, if necessary.
 * @param minViewWidth Minimum width required.
 * @param minViewHeightRequiredByPath View height in pixels required by the linearized path and its rows.
 * @param minViewHeightRequiredByBranchNodes View height in pixels required by branch nodes.
 */
private void adaptViewSize(int minViewWidth,int minViewHeightRequiredByPath,int minViewHeightRequiredByBranchNodes){
  int minViewHeightPixels=0;
  boolean isViewHeightCurrentlyDeterminedByPath;
  if (minViewHeightRequiredByBranchNodes > minViewHeightRequiredByPath) {
    minViewHeightPixels=minViewHeightRequiredByBranchNodes;
    isViewHeightCurrentlyDeterminedByPath=false;
  }
 else {
    minViewHeightPixels=minViewHeightRequiredByPath;
    isViewHeightCurrentlyDeterminedByPath=true;
  }
  boolean updateWidth=minViewWidth > parentGLCanvas.getWidth() || (minViewWidth < parentGLCanvas.getWidth() && (minViewWidth > currentMinWidth || minViewWidth + 3 < currentMinWidth));
  boolean updateHeight=false;
  if (isNewPath || (isViewHeightCurrentlyDeterminedByPath != isViewHeightDeterminedByPath) || parentGLCanvas.getHeight() < minViewHeightPixels) {
    isNewPath=false;
    updateHeight=true;
  }
  isViewHeightDeterminedByPath=isViewHeightCurrentlyDeterminedByPath;
  if (updateWidth || updateHeight) {
    currentMinWidth=updateWidth ? minViewWidth + 3 : BRANCH_COLUMN_WIDTH_PIXELS + PATHWAY_COLUMN_WIDTH_PIXELS + DATA_COLUMN_WIDTH_PIXELS;
    setMinViewSize(currentMinWidth,minViewHeightPixels + 3);
  }
}",0.9397103401818794
57464,"public void clearAllSelections(){
  recordSelectionManager.clearSelections();
  updateConnectionLinesBetweenDimensionGroups();
}","public void clearAllSelections(){
  if (recordSelectionManager != null)   recordSelectionManager.clearSelections();
  updateConnectionLinesBetweenDimensionGroups();
}",0.8707482993197279
57465,"public void handlePathwayElementSelection(SelectionType selectionType,int externalID){
  if (externalID == -1) {
    if (isPathStartSelected && selectionType == SelectionType.SELECTION && allPaths != null && allPaths.size() > 0)     isPathStartSelected=false;
  }
 else {
    setDisplayListDirty();
    PathwayVertexRep previouslySelectedVertexRep=null;
    if (geneSelectionManager.getElements(SelectionType.SELECTION).size() == 1) {
      previouslySelectedVertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep((Integer)geneSelectionManager.getElements(SelectionType.SELECTION).toArray()[0]);
    }
    geneSelectionManager.clearSelection(selectionType);
    if (metaboliteSelectionManager.getNumberOfElements(selectionType) > 0) {
      metaboliteSelectionManager.clearSelection(selectionType);
      metaboliteSelectionManager.triggerSelectionUpdateEvent();
    }
    PathwayVertexRep vertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep(externalID);
    if (vertexRep.getType() == EPathwayVertexType.compound) {
      metaboliteSelectionManager.addToType(selectionType,vertexRep.getName().hashCode());
      metaboliteSelectionManager.triggerSelectionUpdateEvent();
    }
    if (isPathSelectionMode) {
      if (isPathStartSelected) {
        if (selectionType == SelectionType.SELECTION && (allPaths != null && allPaths.size() > 0)) {
          isPathStartSelected=false;
        }
        KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,previouslySelectedVertexRep,MAX_PATHS);
        if (vertexRep != previouslySelectedVertexRep) {
          allPaths=pathAlgo.getPaths(vertexRep);
        }
        if (allPaths != null && allPaths.size() > 0) {
          if (allPaths.size() <= selectedPathID)           selectedPathID=0;
          selectedPath=allPaths.get(selectedPathID);
          triggerPathUpdate();
          isBubbleTextureDirty=true;
        }
      }
 else {
        if (isShiftKeyDown) {
          if (selectedPathID < allPaths.size()) {
            selectedPath=allPaths.get(selectedPathID);
            isPathStartSelected=true;
          }
        }
 else {
          if (selectionType == SelectionType.SELECTION && vertexRep != null) {
            System.out.println(""String_Node_Str"");
            isPathStartSelected=true;
          }
        }
      }
    }
    geneSelectionManager.addToType(selectionType,vertexRep.getID());
    int iConnectionID=generalManager.getIDCreator().createID(ManagedObjectType.CONNECTION);
    geneSelectionManager.addConnectionID(iConnectionID,vertexRep.getID());
    connectedElementRepresentationManager.clear(geneSelectionManager.getIDType(),selectionType);
    createConnectionLines(selectionType,iConnectionID);
    SelectionDelta selectionDelta=createExternalSelectionDelta(geneSelectionManager.getDelta());
    SelectionUpdateEvent event=new SelectionUpdateEvent();
    event.setSender(this);
    event.setDataDomainID(dataDomain.getDataDomainID());
    event.setSelectionDelta((SelectionDelta)selectionDelta);
    eventPublisher.triggerEvent(event);
  }
}","public void handlePathwayElementSelection(SelectionType selectionType,int externalID){
  if (externalID == -1) {
    if (isPathStartSelected && selectionType == SelectionType.SELECTION && allPaths != null && allPaths.size() > 0)     isPathStartSelected=false;
  }
 else {
    setDisplayListDirty();
    PathwayVertexRep previouslySelectedVertexRep=null;
    if (geneSelectionManager.getElements(SelectionType.SELECTION).size() == 1) {
      previouslySelectedVertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep((Integer)geneSelectionManager.getElements(SelectionType.SELECTION).toArray()[0]);
    }
    geneSelectionManager.clearSelection(selectionType);
    if (metaboliteSelectionManager.getNumberOfElements(selectionType) > 0) {
      metaboliteSelectionManager.clearSelection(selectionType);
      metaboliteSelectionManager.triggerSelectionUpdateEvent();
    }
    PathwayVertexRep vertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep(externalID);
    if (vertexRep.getType() == EPathwayVertexType.compound) {
      metaboliteSelectionManager.addToType(selectionType,vertexRep.getName().hashCode());
      metaboliteSelectionManager.triggerSelectionUpdateEvent();
    }
    if (isPathSelectionMode) {
      if (isPathStartSelected) {
        if (selectionType == SelectionType.SELECTION && (allPaths != null && allPaths.size() > 0)) {
          isPathStartSelected=false;
        }
        if (previouslySelectedVertexRep == null)         return;
        KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,previouslySelectedVertexRep,MAX_PATHS);
        if (vertexRep != previouslySelectedVertexRep) {
          allPaths=pathAlgo.getPaths(vertexRep);
        }
        if (allPaths != null && allPaths.size() > 0) {
          if (allPaths.size() <= selectedPathID)           selectedPathID=0;
          selectedPath=allPaths.get(selectedPathID);
          triggerPathUpdate();
          isBubbleTextureDirty=true;
        }
      }
 else {
        if (isShiftKeyDown) {
          if (selectedPathID < allPaths.size()) {
            selectedPath=allPaths.get(selectedPathID);
            isPathStartSelected=true;
          }
        }
 else {
          if (selectionType == SelectionType.SELECTION && vertexRep != null) {
            System.out.println(""String_Node_Str"");
            isPathStartSelected=true;
          }
        }
      }
    }
    geneSelectionManager.addToType(selectionType,vertexRep.getID());
    int iConnectionID=generalManager.getIDCreator().createID(ManagedObjectType.CONNECTION);
    geneSelectionManager.addConnectionID(iConnectionID,vertexRep.getID());
    connectedElementRepresentationManager.clear(geneSelectionManager.getIDType(),selectionType);
    createConnectionLines(selectionType,iConnectionID);
    SelectionDelta selectionDelta=createExternalSelectionDelta(geneSelectionManager.getDelta());
    SelectionUpdateEvent event=new SelectionUpdateEvent();
    event.setSender(this);
    event.setDataDomainID(dataDomain.getDataDomainID());
    event.setSelectionDelta((SelectionDelta)selectionDelta);
    eventPublisher.triggerEvent(event);
  }
}",0.9896612056624782
57466,"@Override public void display(GL2 gl){
  if (bUpdateColorPointPosition || bUpdateLeftSpread || bUpdateRightSpread)   updateColorPointPosition(gl);
  if (isDisplayListDirty) {
    buildDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
  }
  gl.glCallList(displayListIndex);
  if (!lazyMode)   checkForHits(gl);
}","@Override public void display(GL2 gl){
  if (bUpdateColorPointPosition || bUpdateLeftSpread || bUpdateRightSpread)   updateColorPointPosition(gl);
  if (true) {
    buildDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
  }
  gl.glCallList(displayListIndex);
  if (!lazyMode)   checkForHits(gl);
}",0.9654088050314464
57467,"private void updateDataSetInfo(){
  if (!isGUIInitialized) {
    initGUI();
  }
  nameLabel.setText(""String_Node_Str"" + dataDomain.getLabel());
  if (dataDomain instanceof ATableBasedDataDomain) {
    ATableBasedDataDomain tableBasedDD=(ATableBasedDataDomain)dataDomain;
    histogramExpandBar.setVisible(true);
    recordLabel.setVisible(true);
    dimensionLabel.setVisible(true);
    recordLabel.setText(tableBasedDD.getRecordDenomination(true,true) + ""String_Node_Str"" + tableBasedDD.getTable().getMetaData().depth());
    dimensionLabel.setText(tableBasedDD.getDimensionDenomination(true,true) + ""String_Node_Str"" + tableBasedDD.getTable().getMetaData().size());
    if (!tableBasedDD.getTable().isDataHomogeneous()) {
      histogramExpandBar.setVisible(false);
      return;
    }
    if (histogramView == null) {
      histogramView=new RcpGLColorMapperHistogramView();
      histogramView.setDataDomain(tableBasedDD);
      SerializedHistogramView serializedHistogramView=new SerializedHistogramView();
      serializedHistogramView.setDataDomainID(dataDomain.getDataDomainID());
      serializedHistogramView.setTablePerspectiveKey(((ASerializedSingleTablePerspectiveBasedView)serializedView).getTablePerspectiveKey());
      histogramView.setExternalSerializedView(serializedHistogramView);
      histogramView.createPartControl(histogramComposite);
      GeneralManager.get().getViewManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
      ExpandItem item2=new ExpandItem(histogramExpandBar,SWT.NONE,0);
      item2.setText(""String_Node_Str"");
      item2.setHeight(200);
      item2.setControl(histogramComposite);
      item2.setExpanded(true);
      histogramExpandBar.setSpacing(2);
    }
 else {
      if (!tableBasedDD.hasTablePerspective(tableBasedDD.getTable().getDefaultRecordPerspective().getPerspectiveID(),tableBasedDD.getTable().getDefaultDimensionPerspective().getPerspectiveID())) {
        tableBasedDD.getDefaultTablePerspective().setPrivate(true);
      }
      ((GLHistogram)histogramView.getGLView()).setHistogram(tableBasedDD.getDefaultTablePerspective().getContainerStatistics().getHistogram());
      ((GLHistogram)histogramView.getGLView()).setDisplayListDirty();
    }
  }
 else {
    histogramExpandBar.setVisible(false);
    recordLabel.setVisible(false);
    dimensionLabel.setVisible(false);
  }
  parentComposite.layout();
}","private void updateDataSetInfo(){
  if (!isGUIInitialized) {
    initGUI();
  }
  nameLabel.setText(""String_Node_Str"" + dataDomain.getLabel());
  if (dataDomain instanceof ATableBasedDataDomain) {
    ATableBasedDataDomain tableBasedDD=(ATableBasedDataDomain)dataDomain;
    histogramExpandBar.setVisible(true);
    recordLabel.setVisible(true);
    dimensionLabel.setVisible(true);
    recordLabel.setText(tableBasedDD.getRecordDenomination(true,true) + ""String_Node_Str"" + tableBasedDD.getTable().getMetaData().depth());
    dimensionLabel.setText(tableBasedDD.getDimensionDenomination(true,true) + ""String_Node_Str"" + tableBasedDD.getTable().getMetaData().size());
    if (!tableBasedDD.getTable().isDataHomogeneous()) {
      histogramExpandBar.setVisible(false);
      return;
    }
    if (histogramView == null) {
      histogramView=new RcpGLColorMapperHistogramView();
      histogramView.setDataDomain(tableBasedDD);
      SerializedHistogramView serializedHistogramView=new SerializedHistogramView();
      serializedHistogramView.setDataDomainID(dataDomain.getDataDomainID());
      serializedHistogramView.setTablePerspectiveKey(((ASerializedSingleTablePerspectiveBasedView)serializedView).getTablePerspectiveKey());
      histogramView.setExternalSerializedView(serializedHistogramView);
      histogramView.createPartControl(histogramComposite);
      GeneralManager.get().getViewManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
      ExpandItem item2=new ExpandItem(histogramExpandBar,SWT.NONE,0);
      item2.setText(""String_Node_Str"");
      item2.setHeight(200);
      item2.setControl(histogramComposite);
      item2.setExpanded(true);
      histogramExpandBar.setSpacing(2);
    }
    if (!tableBasedDD.hasTablePerspective(tableBasedDD.getTable().getDefaultRecordPerspective().getPerspectiveID(),tableBasedDD.getTable().getDefaultDimensionPerspective().getPerspectiveID())) {
      tableBasedDD.getDefaultTablePerspective().setPrivate(true);
    }
    ((GLHistogram)histogramView.getGLView()).setHistogram(tableBasedDD.getDefaultTablePerspective().getContainerStatistics().getHistogram());
    ((GLHistogram)histogramView.getGLView()).setDisplayListDirty();
  }
 else {
    histogramExpandBar.setVisible(false);
    recordLabel.setVisible(false);
    dimensionLabel.setVisible(false);
  }
  parentComposite.layout();
}",0.8970464135021097
57468,"private void updateRankedList(){
  updateScoredTablePerspectives();
  rankColumn.clear();
  rankedElementToElementLayout.clear();
  rankedElements=new ArrayList<RankedElement>();
  for (  TablePerspective scoredTablePerspective : tablePerspectives) {
    if (referenceTablePerspective.getRecordSubTablePerspectives().size() > 1) {
      float score=scoredTablePerspective.getContainerStatistics().getAdjustedRandIndex().getScore(referenceTablePerspective,true);
      RankedElement rankedElement=new RankedElement(score,scoredTablePerspective,null);
      rankedElements.add(rankedElement);
    }
 else {
      HashMap<TablePerspective,Float> subTablePerspectiveToScore=referenceTablePerspective.getContainerStatistics().getJaccardIndex().getScore(scoredTablePerspective,true);
      for (      TablePerspective subTablePerspective : subTablePerspectiveToScore.keySet()) {
        RankedElement rankedElement=new RankedElement(subTablePerspectiveToScore.get(subTablePerspective),scoredTablePerspective,subTablePerspective);
        rankedElements.add(rankedElement);
      }
    }
  }
  Collections.sort(rankedElements);
  int rank=0;
  for (  RankedElement rankedElement : rankedElements) {
    BigDecimal bd=new BigDecimal(rankedElement.getScore()).setScale(2,RoundingMode.HALF_EVEN);
    float score=bd.floatValue();
    Row rankedElementLayout=new Row(""String_Node_Str"");
    rankedElementLayout.setPixelSizeX(VENDING_MACHINE_PIXEL_WIDTH);
    rankedElementLayout.setPixelSizeY(30);
    RankNumberRenderer rankNumberRenderer=new RankNumberRenderer(""String_Node_Str"" + (++rank) + ""String_Node_Str""+ score+ ""String_Node_Str""+ rankedElement.getColumnTablePerspective().getDataDomain().getLabel()+ rankedElement.getColumnTablePerspective().getLabel()+ ""String_Node_Str""+ rankedElement.getGroupTablePerspective().getLabel(),getTextRenderer());
    rankedElementLayout.setRenderer(rankNumberRenderer);
    rankedElementToElementLayout.put(rankedElement,rankedElementLayout);
    rankColumn.append(rankedElementLayout);
    if (rank >= MAX_RANKED_ELEMENTS)     break;
  }
  TablePerspective tablePerspective=rankedElements.get(selectedTablePerspectiveIndex).getColumnTablePerspective();
  addTablePerspectiveToStratomex(tablePerspective);
  brickColumnManager.moveBrickColumn(brickColumnManager.getBrickColumn(tablePerspective),brickColumnManager.indexOfBrickColumn(brickColumnManager.getBrickColumn(referenceTablePerspective)) + 1);
  rankedElementToElementLayout.get(rankedElements.get(0)).addBackgroundRenderer(highlightRankBackgroundRenderer);
  stratomex.updateLayout();
  stratomex.setLayoutDirty();
}","private void updateRankedList(){
  updateScoredTablePerspectives();
  rankColumn.clear();
  rankedElementToElementLayout.clear();
  rankedElements=new ArrayList<RankedElement>();
  for (  TablePerspective scoredTablePerspective : tablePerspectives) {
    if (referenceTablePerspective.getRecordSubTablePerspectives().size() > 1) {
      float score=scoredTablePerspective.getContainerStatistics().getAdjustedRandIndex().getScore(referenceTablePerspective,true);
      RankedElement rankedElement=new RankedElement(score,scoredTablePerspective,null);
      rankedElements.add(rankedElement);
    }
 else {
      HashMap<TablePerspective,Float> subTablePerspectiveToScore=referenceTablePerspective.getContainerStatistics().getJaccardIndex().getScore(scoredTablePerspective,true);
      for (      TablePerspective subTablePerspective : subTablePerspectiveToScore.keySet()) {
        RankedElement rankedElement=new RankedElement(subTablePerspectiveToScore.get(subTablePerspective),scoredTablePerspective,subTablePerspective);
        rankedElements.add(rankedElement);
      }
    }
  }
  Collections.sort(rankedElements);
  int rank=0;
  for (  RankedElement rankedElement : rankedElements) {
    BigDecimal bd=new BigDecimal(rankedElement.getScore()).setScale(2,RoundingMode.HALF_EVEN);
    float score=bd.floatValue();
    Row rankedElementLayout=new Row(""String_Node_Str"");
    rankedElementLayout.setPixelSizeX(VENDING_MACHINE_PIXEL_WIDTH);
    rankedElementLayout.setPixelSizeY(30);
    RankNumberRenderer rankNumberRenderer=new RankNumberRenderer(""String_Node_Str"" + (++rank) + ""String_Node_Str""+ score+ ""String_Node_Str""+ rankedElement.getColumnTablePerspective().getDataDomain().getLabel()+ rankedElement.getColumnTablePerspective().getLabel()+ ""String_Node_Str""+ rankedElement.getGroupTablePerspective().getLabel(),getTextRenderer());
    rankedElementLayout.setRenderer(rankNumberRenderer);
    rankedElementToElementLayout.put(rankedElement,rankedElementLayout);
    rankColumn.append(rankedElementLayout);
    if (rank >= MAX_RANKED_ELEMENTS)     break;
  }
  TablePerspective tablePerspective=rankedElements.get(selectedTablePerspectiveIndex).getColumnTablePerspective();
  addTablePerspectiveToStratomex(tablePerspective);
  brickColumnManager.moveBrickColumn(brickColumnManager.getBrickColumn(tablePerspective),brickColumnManager.indexOfBrickColumn(referenceBrickColumn) + 1);
  rankedElementToElementLayout.get(rankedElements.get(0)).addBackgroundRenderer(highlightRankBackgroundRenderer);
  stratomex.updateLayout();
  stratomex.setLayoutDirty();
}",0.931501547987616
57469,"@Override public void createPartControl(Composite parent){
  parentComposite=new Composite(parent,SWT.NULL);
  parentComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  infoComposite=new Composite(parentComposite,SWT.NULL);
  infoComposite.setLayout(new GridLayout(1,false));
  infoComposite.setLayoutData(gridData);
  nameLabel=new Label(infoComposite,SWT.NONE);
  nameLabel.setText(""String_Node_Str"");
  if (dataDomain == null) {
    setDataDomain((ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(((ASerializedSingleTablePerspectiveBasedView)serializedView).getDataDomainID()));
  }
  parent.layout();
}","@Override public void createPartControl(Composite parent){
  parentComposite=new Composite(parent,SWT.NULL);
  parentComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  infoComposite=new Composite(parentComposite,SWT.NULL);
  infoComposite.setLayout(new GridLayout(1,false));
  infoComposite.setLayoutData(gridData);
  nameLabel=new Label(infoComposite,SWT.NONE);
  nameLabel.setText(""String_Node_Str"");
  nameLabel.setLayoutData(gridData);
  if (dataDomain == null) {
    setDataDomain((ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(((ASerializedSingleTablePerspectiveBasedView)serializedView).getDataDomainID()));
  }
  parent.layout();
}",0.9734004313443566
57470,"private void updateDataSetInfo(){
  if (!isGUIInitialized) {
    initGUI();
  }
  nameLabel.setText(""String_Node_Str"" + dataDomain.getLabel());
  nameLabel.pack();
  if (dataDomain instanceof ATableBasedDataDomain) {
    ATableBasedDataDomain tableBasedDD=(ATableBasedDataDomain)dataDomain;
    histogramExpandBar.setVisible(true);
    recordLabel.setVisible(true);
    dimensionLabel.setVisible(true);
    sourceLabel.setVisible(true);
    recordLabel.setText(tableBasedDD.getRecordDenomination(true,true) + ""String_Node_Str"" + tableBasedDD.getTable().getMetaData().depth());
    dimensionLabel.setText(tableBasedDD.getDimensionDenomination(true,true) + ""String_Node_Str"" + tableBasedDD.getTable().getMetaData().size());
    sourceLabel.setText(""String_Node_Str"" + dataDomain.getDataSetDescription().getDataSourcePath());
    if (!tableBasedDD.getTable().isDataHomogeneous()) {
      histogramExpandBar.setVisible(false);
      return;
    }
    if (histogramView == null) {
      histogramView=new RcpGLColorMapperHistogramView();
      histogramView.setDataDomain(tableBasedDD);
      SerializedHistogramView serializedHistogramView=new SerializedHistogramView();
      serializedHistogramView.setDataDomainID(dataDomain.getDataDomainID());
      serializedHistogramView.setTablePerspectiveKey(((ASerializedSingleTablePerspectiveBasedView)serializedView).getTablePerspectiveKey());
      histogramView.setExternalSerializedView(serializedHistogramView);
      histogramView.createPartControl(histogramComposite);
      GeneralManager.get().getViewManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
      ExpandItem item2=new ExpandItem(histogramExpandBar,SWT.NONE,0);
      item2.setText(""String_Node_Str"");
      item2.setHeight(200);
      item2.setControl(histogramComposite);
      item2.setExpanded(true);
      histogramExpandBar.setSpacing(2);
    }
 else {
      ((GLHistogram)histogramView.getGLView()).setHistogram(tableBasedDD.getDefaultTablePerspective().getContainerStatistics().getHistogram());
      ((GLHistogram)histogramView.getGLView()).setDisplayListDirty();
    }
  }
 else {
    histogramExpandBar.setVisible(false);
    recordLabel.setVisible(false);
    dimensionLabel.setVisible(false);
    sourceLabel.setVisible(false);
  }
}","private void updateDataSetInfo(){
  if (!isGUIInitialized) {
    initGUI();
  }
  nameLabel.setText(""String_Node_Str"" + dataDomain.getLabel());
  if (dataDomain instanceof ATableBasedDataDomain) {
    ATableBasedDataDomain tableBasedDD=(ATableBasedDataDomain)dataDomain;
    histogramExpandBar.setVisible(true);
    recordLabel.setVisible(true);
    dimensionLabel.setVisible(true);
    sourceLabel.setVisible(true);
    recordLabel.setText(tableBasedDD.getRecordDenomination(true,true) + ""String_Node_Str"" + tableBasedDD.getTable().getMetaData().depth());
    dimensionLabel.setText(tableBasedDD.getDimensionDenomination(true,true) + ""String_Node_Str"" + tableBasedDD.getTable().getMetaData().size());
    sourceLabel.setText(""String_Node_Str"" + dataDomain.getDataSetDescription().getDataSourcePath());
    if (!tableBasedDD.getTable().isDataHomogeneous()) {
      histogramExpandBar.setVisible(false);
      return;
    }
    if (histogramView == null) {
      histogramView=new RcpGLColorMapperHistogramView();
      histogramView.setDataDomain(tableBasedDD);
      SerializedHistogramView serializedHistogramView=new SerializedHistogramView();
      serializedHistogramView.setDataDomainID(dataDomain.getDataDomainID());
      serializedHistogramView.setTablePerspectiveKey(((ASerializedSingleTablePerspectiveBasedView)serializedView).getTablePerspectiveKey());
      histogramView.setExternalSerializedView(serializedHistogramView);
      histogramView.createPartControl(histogramComposite);
      GeneralManager.get().getViewManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
      ExpandItem item2=new ExpandItem(histogramExpandBar,SWT.NONE,0);
      item2.setText(""String_Node_Str"");
      item2.setHeight(200);
      item2.setControl(histogramComposite);
      item2.setExpanded(true);
      histogramExpandBar.setSpacing(2);
    }
 else {
      ((GLHistogram)histogramView.getGLView()).setHistogram(tableBasedDD.getDefaultTablePerspective().getContainerStatistics().getHistogram());
      ((GLHistogram)histogramView.getGLView()).setDisplayListDirty();
    }
  }
 else {
    histogramExpandBar.setVisible(false);
    recordLabel.setVisible(false);
    dimensionLabel.setVisible(false);
    sourceLabel.setVisible(false);
  }
  parentComposite.layout();
}",0.9894505494505494
57471,"/** 
 * Register a new   {@link RecordPerspective} with this DataTable
 * @param recordPerspective
 */
public void registerRecordPerspective(RecordPerspective recordPerspective){
  if (recordPerspective.getPerspectiveID() == null)   throw new IllegalStateException(""String_Node_Str"" + recordPerspective);
  if (!recordPerspective.getIdType().equals(dataDomain.getRecordIDType()))   throw new IllegalStateException(""String_Node_Str"" + recordPerspective.getIdType());
  hashRecordPerspectives.put(recordPerspective.getPerspectiveID(),recordPerspective);
  if (recordPerspective.isDefault()) {
    if (defaultRecordPerspective != null)     throw new IllegalStateException(""String_Node_Str"");
    defaultRecordPerspective=recordPerspective;
  }
  DataDomainUpdateEvent event=new DataDomainUpdateEvent(dataDomain);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}","/** 
 * Register a new   {@link RecordPerspective} with this DataTable
 * @param recordPerspective
 * @param flat determines whether a datadomain update event is triggered
 */
public void registerRecordPerspective(RecordPerspective recordPerspective,boolean triggerUpdate){
  if (recordPerspective.getPerspectiveID() == null)   throw new IllegalStateException(""String_Node_Str"" + recordPerspective);
  if (!recordPerspective.getIdType().equals(dataDomain.getRecordIDType()))   throw new IllegalStateException(""String_Node_Str"" + recordPerspective.getIdType());
  hashRecordPerspectives.put(recordPerspective.getPerspectiveID(),recordPerspective);
  if (recordPerspective.isDefault()) {
    if (defaultRecordPerspective != null)     throw new IllegalStateException(""String_Node_Str"");
    defaultRecordPerspective=recordPerspective;
  }
  if (triggerUpdate) {
    DataDomainUpdateEvent event=new DataDomainUpdateEvent(dataDomain);
    event.setSender(this);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
  }
}",0.933609958506224
57472,"/** 
 * Switch the representation of the data. When this is called the data in normalized is replaced with data calculated from the mode specified.
 * @param externalDataRep Determines how the data is visualized. For options see {@link EDataTransformation}
 * @param isTableHomogeneous Determines whether a set is homogeneous or not. Homogeneous means that the sat has a global maximum and minimum, meaning that all dimensions in the set contain equal data. If false, each dimension is treated separately, has it's own min and max etc. Sets that contain nominal data MUST be inhomogeneous.
 */
void setExternalDataRepresentation(EDataTransformation externalDataRep,boolean isTableHomogeneous){
  this.isTableHomogeneous=isTableHomogeneous;
  if (externalDataRep == this.externalDataTrans)   return;
  this.externalDataTrans=externalDataRep;
  for (  AColumn dimension : hashColumns.values()) {
    if (dimension instanceof NumericalColumn) {
      ((NumericalColumn)dimension).setExternalDataRepresentation(externalDataRep);
    }
  }
  if (isTableHomogeneous) {
switch (externalDataRep) {
case NONE:
      normalization.normalizeGlobally();
    break;
case LOG10:
  normalization.log10();
normalization.normalizeGlobally();
break;
case LOG2:
normalization.log2();
normalization.normalizeGlobally();
break;
}
}
 else {
switch (externalDataRep) {
case NONE:
normalization.normalizeLocally();
break;
case LOG10:
normalization.log10();
normalization.normalizeLocally();
break;
case LOG2:
normalization.log2();
normalization.normalizeLocally();
break;
}
}
}","/** 
 * Switch the representation of the data. When this is called the data in normalized is replaced with data calculated from the mode specified.
 * @param externalDataRep Determines how the data is visualized. For optionssee  {@link EDataTransformation}
 * @param isTableHomogeneous Determines whether a set is homogeneous or not.Homogeneous means that the sat has a global maximum and minimum, meaning that all dimensions in the set contain equal data. If false, each dimension is treated separately, has it's own min and max etc. Sets that contain nominal data MUST be inhomogeneous.
 */
void setExternalDataRepresentation(EDataTransformation externalDataRep,boolean isTableHomogeneous){
  this.isTableHomogeneous=isTableHomogeneous;
  if (externalDataRep == this.externalDataTrans)   return;
  this.externalDataTrans=externalDataRep;
  for (  AColumn dimension : hashColumns.values()) {
    if (dimension instanceof NumericalColumn) {
      ((NumericalColumn)dimension).setExternalDataRepresentation(externalDataRep);
    }
  }
  if (isTableHomogeneous) {
switch (externalDataRep) {
case NONE:
      normalization.normalizeGlobally();
    break;
case LOG10:
  normalization.log10();
normalization.normalizeGlobally();
break;
case LOG2:
normalization.log2();
normalization.normalizeGlobally();
break;
}
}
 else {
switch (externalDataRep) {
case NONE:
normalization.normalizeLocally();
break;
case LOG10:
normalization.log10();
normalization.normalizeLocally();
break;
case LOG2:
normalization.log2();
normalization.normalizeLocally();
break;
}
}
}",0.9971014492753624
57473,"/** 
 * Register a new   {@link DimensionPerspective} with this DataTable
 * @param dimensionPerspective
 */
public void registerDimensionPerspective(DimensionPerspective dimensionPerspective){
  if (dimensionPerspective.getPerspectiveID() == null)   throw new IllegalStateException(""String_Node_Str"" + dimensionPerspective);
  hashDimensionPerspectives.put(dimensionPerspective.getPerspectiveID(),dimensionPerspective);
  if (dimensionPerspective.isDefault()) {
    if (defaultDimensionPerspective != null)     throw new IllegalStateException(""String_Node_Str"");
    defaultDimensionPerspective=dimensionPerspective;
  }
  DataDomainUpdateEvent event=new DataDomainUpdateEvent(dataDomain);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}","/** 
 * Register a new   {@link DimensionPerspective} with this DataTable
 * @param dimensionPerspective
 * @param flat determines whether a datadomain update event is triggered
 */
public void registerDimensionPerspective(DimensionPerspective dimensionPerspective,boolean triggerUpdate){
  if (dimensionPerspective.getPerspectiveID() == null)   throw new IllegalStateException(""String_Node_Str"" + dimensionPerspective);
  hashDimensionPerspectives.put(dimensionPerspective.getPerspectiveID(),dimensionPerspective);
  if (dimensionPerspective.isDefault()) {
    if (defaultDimensionPerspective != null)     throw new IllegalStateException(""String_Node_Str"");
    defaultDimensionPerspective=dimensionPerspective;
  }
  if (triggerUpdate) {
    DataDomainUpdateEvent event=new DataDomainUpdateEvent(dataDomain);
    event.setSender(this);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
  }
}",0.9124260355029584
57474,"private void buildDisplayList(final GL2 gl,int iGLDisplayListIndex){
  dataRowHeight=pixelGLConverter.getGLHeightForPixelHeight(DEFAULT_DATA_ROW_HEIGHT_PIXELS);
  gl.glNewList(iGLDisplayListIndex,GL2.GL_COMPILE);
  float branchColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(BRANCH_COLUMN_WIDTH_PIXELS);
  float pathwayColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS);
  GLU glu=new GLU();
  float pathwayHeight=0;
  if (isLayoutDirty) {
    List<AnchorNodeSpacing> anchorNodeSpacings=calcAnchorNodeSpacings();
    Vec3f currentPosition=new Vec3f(branchColumnWidth + pathwayColumnWidth / 2.0f,viewFrustum.getHeight(),0.2f);
    float minNodeSpacing=pixelGLConverter.getGLHeightForPixelHeight(MIN_NODE_SPACING_PIXELS);
    int minViewHeightRequiredByBranchNodes=0;
    for (    AnchorNodeSpacing spacing : anchorNodeSpacings) {
      float currentAnchorNodeSpacing=spacing.getCurrentAnchorNodeSpacing();
      float nodeSpacing=(Float.isNaN(currentAnchorNodeSpacing) ? minNodeSpacing : (currentAnchorNodeSpacing - spacing.getTotalNodeHeight()) / ((float)spacing.getNodesInbetween().size() + 1));
      ANode startAnchorNode=spacing.getStartNode();
      float currentInbetweenNodePositionY=currentPosition.y() - ((startAnchorNode != null) ? startAnchorNode.getHeight() / 2.0f : 0);
      int minViewHeight=calculatePositionsOfBranchNodes(startAnchorNode);
      if (minViewHeight > minViewHeightRequiredByBranchNodes) {
        minViewHeightRequiredByBranchNodes=minViewHeight;
      }
      for (int i=0; i < spacing.getNodesInbetween().size(); i++) {
        ANode node=spacing.getNodesInbetween().get(i);
        node.setPosition(new Vec3f(currentPosition.x(),currentInbetweenNodePositionY - nodeSpacing - node.getHeight() / 2.0f,currentPosition.z()));
        currentInbetweenNodePositionY-=(nodeSpacing + node.getHeight());
        minViewHeight=calculatePositionsOfBranchNodes(node);
        if (minViewHeight > minViewHeightRequiredByBranchNodes) {
          minViewHeightRequiredByBranchNodes=minViewHeight;
        }
      }
      currentPosition.setY(currentPosition.y() - spacing.getCurrentAnchorNodeSpacing());
      ANode endAnchorNode=spacing.getEndNode();
      if (endAnchorNode != null) {
        endAnchorNode.setPosition(new Vec3f(currentPosition));
        minViewHeight=calculatePositionsOfBranchNodes(endAnchorNode);
        if (minViewHeight > minViewHeightRequiredByBranchNodes) {
          minViewHeightRequiredByBranchNodes=minViewHeight;
        }
      }
      pathwayHeight+=spacing.getCurrentAnchorNodeSpacing();
    }
    if (expandedBranchSummaryNode != null) {
      int minViewHeight=calculateBranchNodePosition(expandedBranchSummaryNode);
      if (minViewHeight > minViewHeightRequiredByBranchNodes) {
        minViewHeightRequiredByBranchNodes=minViewHeight;
      }
    }
    int minViewHeightPixels=Math.max(minViewHeightRequiredByBranchNodes,pixelGLConverter.getPixelHeightForGLHeight(pathwayHeight));
    System.out.println(""String_Node_Str"" + minViewHeightPixels);
    if (isNewPath) {
      System.out.println(""String_Node_Str"" + minViewHeightPixels);
      setMinSize(minViewHeightPixels + 3);
      isNewPath=false;
    }
  }
  for (  ALinearizableNode node : linearizedNodes) {
    node.render(gl,glu);
    renderBranchNodes(gl,glu,node);
  }
  if (expandedBranchSummaryNode != null) {
    renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
    float coverWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS + BRANCH_COLUMN_WIDTH_PIXELS);
    gl.glColor4f(1,1,1,0.9f);
    gl.glBegin(GL2.GL_QUADS);
    gl.glVertex3f(0,0,0.1f);
    gl.glVertex3f(coverWidth,0,0.1f);
    gl.glVertex3f(coverWidth,viewFrustum.getHeight(),0.1f);
    gl.glVertex3f(0,viewFrustum.getHeight(),0.1f);
    gl.glEnd();
  }
  float dataRowPositionX=branchColumnWidth + pathwayColumnWidth;
  float topSpacing=pixelGLConverter.getGLWidthForPixelWidth(TOP_SPACING_MAPPED_DATA);
  gl.glPushMatrix();
  if (isLayoutDirty) {
    mappedDataRenderer.setLinearizedNodes(linearizedNodes);
  }
  setMappedDataRendererGeometry();
  gl.glTranslatef(dataRowPositionX,topSpacing,0);
  mappedDataRenderer.render(gl,isLayoutDirty);
  gl.glPopMatrix();
  renderEdgesOfLinearizedNodes(gl);
  gl.glEndList();
}","private void buildDisplayList(final GL2 gl,int iGLDisplayListIndex){
  dataRowHeight=pixelGLConverter.getGLHeightForPixelHeight(DEFAULT_DATA_ROW_HEIGHT_PIXELS);
  gl.glNewList(iGLDisplayListIndex,GL2.GL_COMPILE);
  float branchColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(BRANCH_COLUMN_WIDTH_PIXELS);
  float pathwayColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS);
  GLU glu=new GLU();
  float pathwayHeight=0;
  if (isLayoutDirty) {
    List<AnchorNodeSpacing> anchorNodeSpacings=calcAnchorNodeSpacings();
    Vec3f currentPosition=new Vec3f(branchColumnWidth + pathwayColumnWidth / 2.0f,viewFrustum.getHeight(),0.2f);
    float minNodeSpacing=pixelGLConverter.getGLHeightForPixelHeight(MIN_NODE_SPACING_PIXELS);
    int minViewHeightRequiredByBranchNodes=0;
    for (    AnchorNodeSpacing spacing : anchorNodeSpacings) {
      float currentAnchorNodeSpacing=spacing.getCurrentAnchorNodeSpacing();
      float nodeSpacing=(Float.isNaN(currentAnchorNodeSpacing) ? minNodeSpacing : (currentAnchorNodeSpacing - spacing.getTotalNodeHeight()) / ((float)spacing.getNodesInbetween().size() + 1));
      ANode startAnchorNode=spacing.getStartNode();
      float currentInbetweenNodePositionY=currentPosition.y() - ((startAnchorNode != null) ? startAnchorNode.getHeight() / 2.0f : 0);
      int minViewHeight=calculatePositionsOfBranchNodes(startAnchorNode);
      if (minViewHeight > minViewHeightRequiredByBranchNodes) {
        minViewHeightRequiredByBranchNodes=minViewHeight;
      }
      for (int i=0; i < spacing.getNodesInbetween().size(); i++) {
        ANode node=spacing.getNodesInbetween().get(i);
        node.setPosition(new Vec3f(currentPosition.x(),currentInbetweenNodePositionY - nodeSpacing - node.getHeight() / 2.0f,currentPosition.z()));
        currentInbetweenNodePositionY-=(nodeSpacing + node.getHeight());
        minViewHeight=calculatePositionsOfBranchNodes(node);
        if (minViewHeight > minViewHeightRequiredByBranchNodes) {
          minViewHeightRequiredByBranchNodes=minViewHeight;
        }
      }
      currentPosition.setY(currentPosition.y() - spacing.getCurrentAnchorNodeSpacing());
      ANode endAnchorNode=spacing.getEndNode();
      if (endAnchorNode != null) {
        endAnchorNode.setPosition(new Vec3f(currentPosition));
        minViewHeight=calculatePositionsOfBranchNodes(endAnchorNode);
        if (minViewHeight > minViewHeightRequiredByBranchNodes) {
          minViewHeightRequiredByBranchNodes=minViewHeight;
        }
      }
      pathwayHeight+=spacing.getCurrentAnchorNodeSpacing();
    }
    if (expandedBranchSummaryNode != null) {
      int minViewHeight=calculateBranchNodePosition(expandedBranchSummaryNode);
      if (minViewHeight > minViewHeightRequiredByBranchNodes) {
        minViewHeightRequiredByBranchNodes=minViewHeight;
      }
    }
    int minViewHeightRequiredByPath=pixelGLConverter.getPixelHeightForGLHeight(pathwayHeight);
    int minViewHeightPixels=0;
    boolean isViewHeightCurrentlyDeterminedByPath;
    if (minViewHeightRequiredByBranchNodes > minViewHeightRequiredByPath) {
      minViewHeightPixels=minViewHeightRequiredByBranchNodes;
      isViewHeightCurrentlyDeterminedByPath=false;
    }
 else {
      minViewHeightPixels=minViewHeightRequiredByPath;
      isViewHeightCurrentlyDeterminedByPath=true;
    }
    System.out.println(""String_Node_Str"" + minViewHeightPixels);
    if (isNewPath || (isViewHeightCurrentlyDeterminedByPath != isViewHeightDeterminedByPath)) {
      System.out.println(""String_Node_Str"" + minViewHeightPixels);
      setMinSize(minViewHeightPixels + 3);
      isNewPath=false;
    }
    isViewHeightDeterminedByPath=isViewHeightCurrentlyDeterminedByPath;
  }
  for (  ALinearizableNode node : linearizedNodes) {
    node.render(gl,glu);
    renderBranchNodes(gl,glu,node);
  }
  if (expandedBranchSummaryNode != null) {
    renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
    float coverWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS + BRANCH_COLUMN_WIDTH_PIXELS);
    gl.glColor4f(1,1,1,0.9f);
    gl.glBegin(GL2.GL_QUADS);
    gl.glVertex3f(0,0,0.1f);
    gl.glVertex3f(coverWidth,0,0.1f);
    gl.glVertex3f(coverWidth,viewFrustum.getHeight(),0.1f);
    gl.glVertex3f(0,viewFrustum.getHeight(),0.1f);
    gl.glEnd();
  }
  float dataRowPositionX=branchColumnWidth + pathwayColumnWidth;
  float topSpacing=pixelGLConverter.getGLWidthForPixelWidth(TOP_SPACING_MAPPED_DATA);
  gl.glPushMatrix();
  if (isLayoutDirty) {
    mappedDataRenderer.setLinearizedNodes(linearizedNodes);
  }
  setMappedDataRendererGeometry();
  gl.glTranslatef(dataRowPositionX,topSpacing,0);
  mappedDataRenderer.render(gl,isLayoutDirty);
  gl.glPopMatrix();
  renderEdgesOfLinearizedNodes(gl);
  gl.glEndList();
}",0.9326710816777042
57475,"/** 
 * Calculates the position for a single branch node.
 * @param summaryNode
 * @return
 */
private int calculateBranchNodePosition(BranchSummaryNode summaryNode){
  boolean isIncomingNode=linearizedNodesToIncomingBranchSummaryNodesMap.get(summaryNode.getAssociatedLinearizedNode()) == summaryNode;
  ALinearizableNode linearizedNode=summaryNode.getAssociatedLinearizedNode();
  Vec3f linearizedNodePosition=linearizedNode.getPosition();
  float sideSpacing=pixelGLConverter.getGLHeightForPixelHeight(BRANCH_AREA_SIDE_SPACING_PIXELS);
  float branchSummaryNodeToLinearizedNodeDistance=pixelGLConverter.getGLHeightForPixelHeight(BRANCH_SUMMARY_NODE_TO_LINEARIZED_NODE_VERTICAL_DISTANCE_PIXELS);
  float width=summaryNode.getWidth();
  float titleAreaHeight=pixelGLConverter.getGLHeightForPixelHeight(summaryNode.getTitleAreaHeightPixels());
  float nodePositionY=linearizedNodePosition.y() + (isIncomingNode ? branchSummaryNodeToLinearizedNodeDistance : -branchSummaryNodeToLinearizedNodeDistance) - (summaryNode.getHeight() / 2.0f) + titleAreaHeight / 2.0f;
  summaryNode.setPosition(new Vec3f(sideSpacing + width / 2.0f,nodePositionY,(summaryNode.isCollapsed() ? 0 : 0.2f)));
  float bottomPositionY=nodePositionY - (summaryNode.getHeight() / 2.0f);
  int minViewHeightPixels=0;
  if (viewFrustum.getBottom() > bottomPositionY) {
    minViewHeightPixels=pixelGLConverter.getPixelHeightForGLHeight(viewFrustum.getBottom() - bottomPositionY) + parentGLCanvas.getHeight();
    setMinSize(minViewHeightPixels + 3);
  }
  return minViewHeightPixels;
}","/** 
 * Calculates the position for a single branch node.
 * @param summaryNode
 * @return
 */
private int calculateBranchNodePosition(BranchSummaryNode summaryNode){
  boolean isIncomingNode=linearizedNodesToIncomingBranchSummaryNodesMap.get(summaryNode.getAssociatedLinearizedNode()) == summaryNode;
  ALinearizableNode linearizedNode=summaryNode.getAssociatedLinearizedNode();
  Vec3f linearizedNodePosition=linearizedNode.getPosition();
  float sideSpacing=pixelGLConverter.getGLHeightForPixelHeight(BRANCH_AREA_SIDE_SPACING_PIXELS);
  float branchSummaryNodeToLinearizedNodeDistance=pixelGLConverter.getGLHeightForPixelHeight(BRANCH_SUMMARY_NODE_TO_LINEARIZED_NODE_VERTICAL_DISTANCE_PIXELS);
  float width=summaryNode.getWidth();
  float titleAreaHeight=pixelGLConverter.getGLHeightForPixelHeight(summaryNode.getTitleAreaHeightPixels());
  float nodePositionY=linearizedNodePosition.y() + (isIncomingNode ? branchSummaryNodeToLinearizedNodeDistance : -branchSummaryNodeToLinearizedNodeDistance) - (summaryNode.getHeight() / 2.0f) + titleAreaHeight / 2.0f;
  summaryNode.setPosition(new Vec3f(sideSpacing + width / 2.0f,nodePositionY,(summaryNode.isCollapsed() ? 0 : 0.2f)));
  float bottomPositionY=nodePositionY - (summaryNode.getHeight() / 2.0f);
  int minViewHeightPixels=0;
  minViewHeightPixels=pixelGLConverter.getPixelHeightForGLHeight(viewFrustum.getBottom() - bottomPositionY) + parentGLCanvas.getHeight();
  return minViewHeightPixels;
}",0.9000666222518321
57476,"@Override public void createPartControl(Composite parent){
  if (dataDomain == null) {
    dataDomain=(ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(((ASerializedSingleTablePerspectiveBasedView)serializedView).getDataDomainID());
  }
  parentComposite=new Composite(parent,SWT.NULL);
  parentComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  infoComposite=new Composite(parentComposite,SWT.NULL);
  infoComposite.setLayout(new GridLayout(1,false));
  infoComposite.setLayoutData(gridData);
  nameLabel=new Label(infoComposite,SWT.NONE);
  nameLabel.setText(""String_Node_Str"");
  parent.layout();
}","@Override public void createPartControl(Composite parent){
  parentComposite=new Composite(parent,SWT.NULL);
  parentComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  infoComposite=new Composite(parentComposite,SWT.NULL);
  infoComposite.setLayout(new GridLayout(1,false));
  infoComposite.setLayoutData(gridData);
  nameLabel=new Label(infoComposite,SWT.NONE);
  nameLabel.setText(""String_Node_Str"");
  if (dataDomain == null) {
    setDataDomain((ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(((ASerializedSingleTablePerspectiveBasedView)serializedView).getDataDomainID()));
  }
  parent.layout();
}",0.6874074074074074
57477,"@Override public void setDataDomain(ATableBasedDataDomain dataDomain){
  if (dataDomain == this.dataDomain)   return;
  this.dataDomain=dataDomain;
  ASerializedSingleTablePerspectiveBasedView dcSerializedView=(ASerializedSingleTablePerspectiveBasedView)serializedView;
  dcSerializedView.setDataDomainID(dataDomain.getDataDomainID());
  TablePerspective container=dataDomain.getDefaultTablePerspective();
  dcSerializedView.setTablePerspectiveKey(container.getTablePerspectiveKey());
  parentComposite.dispose();
  createPartControl(parent);
}","@Override public void setDataDomain(ATableBasedDataDomain dataDomain){
  if (dataDomain == this.dataDomain)   return;
  this.dataDomain=dataDomain;
  ASerializedSingleTablePerspectiveBasedView dcSerializedView=(ASerializedSingleTablePerspectiveBasedView)serializedView;
  dcSerializedView.setDataDomainID(dataDomain.getDataDomainID());
  TablePerspective container=dataDomain.getDefaultTablePerspective();
  dcSerializedView.setTablePerspectiveKey(container.getTablePerspectiveKey());
  updateDataSetInfo();
}",0.932573599240266
57478,"@Override public void createPartControl(Composite parent){
  if (dataDomain == null) {
    dataDomain=(ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(((ASerializedSingleTablePerspectiveBasedView)serializedView).getDataDomainID());
  }
  this.parent=parent;
  parentComposite=new Composite(parent,SWT.NULL);
  parentComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  Composite infoComposite=new Composite(parentComposite,SWT.NULL);
  infoComposite.setLayout(new GridLayout(1,false));
  infoComposite.setLayoutData(gridData);
  if (dataDomain == null) {
    Label label=new Label(infoComposite,SWT.NONE);
    label.setText(""String_Node_Str"");
  }
 else {
    Label label=new Label(infoComposite,SWT.NONE);
    label.setText(""String_Node_Str"" + dataDomain.getLabel());
    label=new Label(infoComposite,SWT.NONE);
    label.setText(dataDomain.getRecordDenomination(true,true) + ""String_Node_Str"" + dataDomain.getTable().getMetaData().depth());
    label=new Label(infoComposite,SWT.NONE);
    label.setText(dataDomain.getDimensionDenomination(true,true) + ""String_Node_Str"" + dataDomain.getTable().getMetaData().size());
    label=new Label(infoComposite,SWT.NONE);
    label.setText(""String_Node_Str"" + dataDomain.getDataSetDescription().getDataSourcePath());
    ExpandBar bar=new ExpandBar(parentComposite,SWT.V_SCROLL);
    gridData=new GridData(GridData.FILL_BOTH);
    bar.setLayoutData(gridData);
    Composite composite=new Composite(bar,SWT.NONE);
    composite.setLayout(new FillLayout());
    RcpGLColorMapperHistogramView histogramView=new RcpGLColorMapperHistogramView();
    histogramView.setDataDomain(dataDomain);
    SerializedHistogramView serializedHistogramView=new SerializedHistogramView();
    serializedHistogramView.setDataDomainID(dataDomain.getDataDomainID());
    serializedHistogramView.setTablePerspectiveKey(((ASerializedSingleTablePerspectiveBasedView)serializedView).getTablePerspectiveKey());
    histogramView.setExternalSerializedView(serializedHistogramView);
    histogramView.createPartControl(composite);
    GeneralManager.get().getViewManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
    ExpandItem item2=new ExpandItem(bar,SWT.NONE,0);
    item2.setText(""String_Node_Str"");
    item2.setHeight(200);
    item2.setControl(composite);
    item2.setExpanded(true);
    bar.setSpacing(2);
  }
  parent.layout();
}","@Override public void createPartControl(Composite parent){
  if (dataDomain == null) {
    dataDomain=(ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(((ASerializedSingleTablePerspectiveBasedView)serializedView).getDataDomainID());
  }
  this.parent=parent;
  parentComposite=new Composite(parent,SWT.NULL);
  parentComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  Composite infoComposite=new Composite(parentComposite,SWT.NULL);
  infoComposite.setLayout(new GridLayout(1,false));
  infoComposite.setLayoutData(gridData);
  if (dataDomain == null) {
    nameLabel=new Label(infoComposite,SWT.NONE);
    nameLabel.setText(""String_Node_Str"");
  }
 else {
    nameLabel=new Label(infoComposite,SWT.NONE);
    recordLabel=new Label(infoComposite,SWT.NONE);
    dimensionLabel=new Label(infoComposite,SWT.NONE);
    sourceLabel=new Label(infoComposite,SWT.NONE);
    ExpandBar bar=new ExpandBar(parentComposite,SWT.V_SCROLL);
    gridData=new GridData(GridData.FILL_BOTH);
    bar.setLayoutData(gridData);
    Composite composite=new Composite(bar,SWT.NONE);
    composite.setLayout(new FillLayout());
    histogramView=new RcpGLColorMapperHistogramView();
    histogramView.setDataDomain(dataDomain);
    SerializedHistogramView serializedHistogramView=new SerializedHistogramView();
    serializedHistogramView.setDataDomainID(dataDomain.getDataDomainID());
    serializedHistogramView.setTablePerspectiveKey(((ASerializedSingleTablePerspectiveBasedView)serializedView).getTablePerspectiveKey());
    histogramView.setExternalSerializedView(serializedHistogramView);
    histogramView.createPartControl(composite);
    GeneralManager.get().getViewManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
    ExpandItem item2=new ExpandItem(bar,SWT.NONE,0);
    item2.setText(""String_Node_Str"");
    item2.setHeight(200);
    item2.setControl(composite);
    item2.setExpanded(true);
    bar.setSpacing(2);
    updateDataSetInfo();
  }
  parent.layout();
}",0.8818932797499441
57479,"private void setMinSize(int minHeightPixels){
  SetMinViewSizeEvent event=new SetMinViewSizeEvent();
  event.setMinViewSize(BRANCH_COLUMN_WIDTH_PIXELS + PATHWAY_COLUMN_WIDTH_PIXELS + DATA_COLUMN_WIDTH_PIXELS,minHeightPixels);
  event.setView(this);
  eventPublisher.triggerEvent(event);
  System.out.println(""String_Node_Str"" + minHeightPixels);
  setLayoutDirty();
}","private void setMinSize(int minHeightPixels){
  SetMinViewSizeEvent event=new SetMinViewSizeEvent();
  event.setMinViewSize(BRANCH_COLUMN_WIDTH_PIXELS + PATHWAY_COLUMN_WIDTH_PIXELS + DATA_COLUMN_WIDTH_PIXELS,minHeightPixels);
  event.setView(this);
  eventPublisher.triggerEvent(event);
  setLayoutDirty();
}",0.9125925925925926
57480,"@Override public void init(GL2 gl){
  displayListIndex=gl.glGenLists(1);
  textRenderer=new CaleydoTextRenderer(24);
  super.renderStyle=renderStyle;
  detailLevel=EDetailLevel.HIGH;
  path=new ArrayList<PathwayVertexRep>();
  for (  PathwayGraph graph : PathwayManager.get().getAllItems()) {
    if (graph.getType() == EPathwayDatabaseType.KEGG && graph.getTitle().startsWith(""String_Node_Str"")) {
      pathway=graph;
      break;
    }
  }
  PathwayVertexRep currentVertex=null;
  for (  PathwayVertexRep vertex : pathway.vertexSet()) {
    currentVertex=vertex;
    break;
  }
  for (int i=0; i < 6; i++) {
    path.add(currentVertex);
    for (    DefaultEdge edge : pathway.edgesOf(currentVertex)) {
      PathwayVertexRep v2=pathway.getEdgeTarget(edge);
      currentVertex=v2;
    }
  }
  setPath(pathway,path);
  setMappedDataRendererGeometry();
}","@Override public void init(GL2 gl){
  displayListIndex=gl.glGenLists(1);
  textRenderer=new CaleydoTextRenderer(24);
  super.renderStyle=renderStyle;
  detailLevel=EDetailLevel.HIGH;
  path=new ArrayList<PathwayVertexRep>();
  for (  PathwayGraph graph : PathwayManager.get().getAllItems()) {
    if (graph.getType() == EPathwayDatabaseType.KEGG && graph.getTitle().startsWith(""String_Node_Str"")) {
      pathway=graph;
      break;
    }
  }
  PathwayVertexRep currentVertex=null;
  for (  PathwayVertexRep vertex : pathway.vertexSet()) {
    currentVertex=vertex;
    break;
  }
  for (int i=0; i < 6; i++) {
    path.add(currentVertex);
    for (    DefaultEdge edge : pathway.edgesOf(currentVertex)) {
      PathwayVertexRep v2=pathway.getEdgeTarget(edge);
      currentVertex=v2;
    }
  }
  setPath(pathway,path);
}",0.979129397734049
57481,"@Override public void addTablePerspectives(List<TablePerspective> newTablePerspectives){
  mappedDataRenderer.addTablePerspectives(newTablePerspectives);
  for (  ALinearizableNode node : linearizedNodes) {
    setMappedDavidIds(node);
  }
  for (  ANode node : branchNodes) {
    if (node instanceof ALinearizableNode) {
      setMappedDavidIds((ALinearizableNode)node);
      ((ALinearizableNode)node).update();
    }
  }
  for (  TablePerspective tablePerspective : newTablePerspectives) {
    dataDomains.add(tablePerspective.getDataDomain());
  }
  setMappedDataRendererGeometry();
  TablePerspectivesChangedEvent event=new TablePerspectivesChangedEvent(this);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
  setLayoutDirty();
}","@Override public void addTablePerspectives(List<TablePerspective> newTablePerspectives){
  mappedDataRenderer.addTablePerspectives(newTablePerspectives);
  for (  ALinearizableNode node : linearizedNodes) {
    setMappedDavidIds(node);
  }
  for (  ANode node : branchNodes) {
    if (node instanceof ALinearizableNode) {
      setMappedDavidIds((ALinearizableNode)node);
      ((ALinearizableNode)node).update();
    }
  }
  for (  TablePerspective tablePerspective : newTablePerspectives) {
    dataDomains.add(tablePerspective.getDataDomain());
  }
  TablePerspectivesChangedEvent event=new TablePerspectivesChangedEvent(this);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
  setLayoutDirty();
}",0.976928147659855
57482,"@Override public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  super.reshape(drawable,x,y,width,height);
  setLayoutDirty();
  System.out.println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height);
  setMappedDataRendererGeometry();
}","@Override public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  super.reshape(drawable,x,y,width,height);
  setLayoutDirty();
}",0.6637931034482759
57483,"@Override public void addTablePerspective(TablePerspective newTablePerspective){
  mappedDataRenderer.addTablePerspective(newTablePerspective);
  for (  ALinearizableNode node : linearizedNodes) {
    setMappedDavidIds(node);
  }
  for (  ANode node : branchNodes) {
    if (node instanceof ALinearizableNode) {
      setMappedDavidIds((ALinearizableNode)node);
      ((ALinearizableNode)node).update();
    }
  }
  dataDomains.add(newTablePerspective.getDataDomain());
  setMappedDataRendererGeometry();
  setLayoutDirty();
}","@Override public void addTablePerspective(TablePerspective newTablePerspective){
  mappedDataRenderer.addTablePerspective(newTablePerspective);
  for (  ALinearizableNode node : linearizedNodes) {
    setMappedDavidIds(node);
  }
  for (  ANode node : branchNodes) {
    if (node instanceof ALinearizableNode) {
      setMappedDavidIds((ALinearizableNode)node);
      ((ALinearizableNode)node).update();
    }
  }
  dataDomains.add(newTablePerspective.getDataDomain());
  setLayoutDirty();
}",0.9478859390363816
57484,"private void buildDisplayList(final GL2 gl,int iGLDisplayListIndex){
  dataRowHeight=pixelGLConverter.getGLHeightForPixelHeight(DEFAULT_DATA_ROW_HEIGHT_PIXELS);
  gl.glNewList(iGLDisplayListIndex,GL2.GL_COMPILE);
  float branchColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(BRANCH_COLUMN_WIDTH_PIXELS);
  float pathwayColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS);
  GLU glu=new GLU();
  float pathwayHeight=0;
  if (isLayoutDirty) {
    List<AnchorNodeSpacing> anchorNodeSpacings=calcAnchorNodeSpacings();
    Vec3f currentPosition=new Vec3f(branchColumnWidth + pathwayColumnWidth / 2.0f,viewFrustum.getHeight(),0.2f);
    float minNodeSpacing=pixelGLConverter.getGLHeightForPixelHeight(MIN_NODE_SPACING_PIXELS);
    int minViewHeightRequiredByBranchNodes=0;
    for (    AnchorNodeSpacing spacing : anchorNodeSpacings) {
      float currentAnchorNodeSpacing=spacing.getCurrentAnchorNodeSpacing();
      float nodeSpacing=(Float.isNaN(currentAnchorNodeSpacing) ? minNodeSpacing : (currentAnchorNodeSpacing - spacing.getTotalNodeHeight()) / ((float)spacing.getNodesInbetween().size() + 1));
      ANode startAnchorNode=spacing.getStartNode();
      float currentInbetweenNodePositionY=currentPosition.y() - ((startAnchorNode != null) ? startAnchorNode.getHeight() / 2.0f : 0);
      int minViewHeight=calculatePositionsOfBranchNodes(startAnchorNode);
      if (minViewHeight > minViewHeightRequiredByBranchNodes) {
        minViewHeightRequiredByBranchNodes=minViewHeight;
      }
      for (int i=0; i < spacing.getNodesInbetween().size(); i++) {
        ANode node=spacing.getNodesInbetween().get(i);
        node.setPosition(new Vec3f(currentPosition.x(),currentInbetweenNodePositionY - nodeSpacing - node.getHeight() / 2.0f,currentPosition.z()));
        currentInbetweenNodePositionY-=(nodeSpacing + node.getHeight());
        minViewHeight=calculatePositionsOfBranchNodes(node);
        if (minViewHeight > minViewHeightRequiredByBranchNodes) {
          minViewHeightRequiredByBranchNodes=minViewHeight;
        }
      }
      currentPosition.setY(currentPosition.y() - spacing.getCurrentAnchorNodeSpacing());
      ANode endAnchorNode=spacing.getEndNode();
      if (endAnchorNode != null) {
        endAnchorNode.setPosition(new Vec3f(currentPosition));
        minViewHeight=calculatePositionsOfBranchNodes(endAnchorNode);
        if (minViewHeight > minViewHeightRequiredByBranchNodes) {
          minViewHeightRequiredByBranchNodes=minViewHeight;
        }
      }
      pathwayHeight+=spacing.getCurrentAnchorNodeSpacing();
    }
    if (expandedBranchSummaryNode != null) {
      int minViewHeight=calculateBranchNodePosition(expandedBranchSummaryNode);
      if (minViewHeight > minViewHeightRequiredByBranchNodes) {
        minViewHeightRequiredByBranchNodes=minViewHeight;
      }
    }
    int minViewHeightRequiredByPath=pixelGLConverter.getPixelHeightForGLHeight(pathwayHeight);
    int minViewHeightPixels=0;
    boolean isViewHeightCurrentlyDeterminedByPath;
    if (minViewHeightRequiredByBranchNodes > minViewHeightRequiredByPath) {
      minViewHeightPixels=minViewHeightRequiredByBranchNodes;
      isViewHeightCurrentlyDeterminedByPath=false;
    }
 else {
      minViewHeightPixels=minViewHeightRequiredByPath;
      isViewHeightCurrentlyDeterminedByPath=true;
    }
    System.out.println(""String_Node_Str"" + minViewHeightPixels);
    if (isNewPath || (isViewHeightCurrentlyDeterminedByPath != isViewHeightDeterminedByPath)) {
      System.out.println(""String_Node_Str"" + minViewHeightPixels);
      setMinSize(minViewHeightPixels + 3);
      isNewPath=false;
    }
    isViewHeightDeterminedByPath=isViewHeightCurrentlyDeterminedByPath;
  }
  for (  ALinearizableNode node : linearizedNodes) {
    node.render(gl,glu);
    renderBranchNodes(gl,glu,node);
  }
  if (expandedBranchSummaryNode != null) {
    renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
    float coverWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS + BRANCH_COLUMN_WIDTH_PIXELS);
    gl.glColor4f(1,1,1,0.9f);
    gl.glBegin(GL2.GL_QUADS);
    gl.glVertex3f(0,0,0.1f);
    gl.glVertex3f(coverWidth,0,0.1f);
    gl.glVertex3f(coverWidth,viewFrustum.getHeight(),0.1f);
    gl.glVertex3f(0,viewFrustum.getHeight(),0.1f);
    gl.glEnd();
  }
  float dataRowPositionX=branchColumnWidth + pathwayColumnWidth;
  float topSpacing=pixelGLConverter.getGLWidthForPixelWidth(TOP_SPACING_MAPPED_DATA);
  gl.glPushMatrix();
  if (isLayoutDirty) {
    mappedDataRenderer.setLinearizedNodes(linearizedNodes);
  }
  setMappedDataRendererGeometry();
  gl.glTranslatef(dataRowPositionX,topSpacing,0);
  mappedDataRenderer.render(gl,isLayoutDirty);
  gl.glPopMatrix();
  renderEdgesOfLinearizedNodes(gl);
  gl.glEndList();
}","private void buildDisplayList(final GL2 gl,int iGLDisplayListIndex){
  dataRowHeight=pixelGLConverter.getGLHeightForPixelHeight(DEFAULT_DATA_ROW_HEIGHT_PIXELS);
  gl.glNewList(iGLDisplayListIndex,GL2.GL_COMPILE);
  float branchColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(BRANCH_COLUMN_WIDTH_PIXELS);
  float pathwayColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS);
  GLU glu=new GLU();
  float pathwayHeight=0;
  if (isLayoutDirty) {
    List<AnchorNodeSpacing> anchorNodeSpacings=calcAnchorNodeSpacings();
    Vec3f currentPosition=new Vec3f(branchColumnWidth + pathwayColumnWidth / 2.0f,viewFrustum.getHeight(),0.2f);
    float minNodeSpacing=pixelGLConverter.getGLHeightForPixelHeight(MIN_NODE_SPACING_PIXELS);
    int minViewHeightRequiredByBranchNodes=0;
    for (    AnchorNodeSpacing spacing : anchorNodeSpacings) {
      float currentAnchorNodeSpacing=spacing.getCurrentAnchorNodeSpacing();
      float nodeSpacing=(Float.isNaN(currentAnchorNodeSpacing) ? minNodeSpacing : (currentAnchorNodeSpacing - spacing.getTotalNodeHeight()) / ((float)spacing.getNodesInbetween().size() + 1));
      ANode startAnchorNode=spacing.getStartNode();
      float currentInbetweenNodePositionY=currentPosition.y() - ((startAnchorNode != null) ? startAnchorNode.getHeight() / 2.0f : 0);
      int minViewHeight=calculatePositionsOfBranchNodes(startAnchorNode);
      if (minViewHeight > minViewHeightRequiredByBranchNodes) {
        minViewHeightRequiredByBranchNodes=minViewHeight;
      }
      for (int i=0; i < spacing.getNodesInbetween().size(); i++) {
        ANode node=spacing.getNodesInbetween().get(i);
        node.setPosition(new Vec3f(currentPosition.x(),currentInbetweenNodePositionY - nodeSpacing - node.getHeight() / 2.0f,currentPosition.z()));
        currentInbetweenNodePositionY-=(nodeSpacing + node.getHeight());
        minViewHeight=calculatePositionsOfBranchNodes(node);
        if (minViewHeight > minViewHeightRequiredByBranchNodes) {
          minViewHeightRequiredByBranchNodes=minViewHeight;
        }
      }
      currentPosition.setY(currentPosition.y() - spacing.getCurrentAnchorNodeSpacing());
      ANode endAnchorNode=spacing.getEndNode();
      if (endAnchorNode != null) {
        endAnchorNode.setPosition(new Vec3f(currentPosition));
        minViewHeight=calculatePositionsOfBranchNodes(endAnchorNode);
        if (minViewHeight > minViewHeightRequiredByBranchNodes) {
          minViewHeightRequiredByBranchNodes=minViewHeight;
        }
      }
      pathwayHeight+=spacing.getCurrentAnchorNodeSpacing();
    }
    if (expandedBranchSummaryNode != null) {
      int minViewHeight=calculateBranchNodePosition(expandedBranchSummaryNode);
      if (minViewHeight > minViewHeightRequiredByBranchNodes) {
        minViewHeightRequiredByBranchNodes=minViewHeight;
      }
    }
    int minViewHeightRequiredByPath=pixelGLConverter.getPixelHeightForGLHeight(pathwayHeight);
    adaptViewSize(minViewHeightRequiredByPath,minViewHeightRequiredByBranchNodes);
  }
  for (  ALinearizableNode node : linearizedNodes) {
    node.render(gl,glu);
    renderBranchNodes(gl,glu,node);
  }
  if (expandedBranchSummaryNode != null) {
    renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
    float coverWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS + BRANCH_COLUMN_WIDTH_PIXELS);
    gl.glColor4f(1,1,1,0.9f);
    gl.glBegin(GL2.GL_QUADS);
    gl.glVertex3f(0,0,0.1f);
    gl.glVertex3f(coverWidth,0,0.1f);
    gl.glVertex3f(coverWidth,viewFrustum.getHeight(),0.1f);
    gl.glVertex3f(0,viewFrustum.getHeight(),0.1f);
    gl.glEnd();
  }
  float dataRowPositionX=branchColumnWidth + pathwayColumnWidth;
  float topSpacing=pixelGLConverter.getGLWidthForPixelWidth(TOP_SPACING_MAPPED_DATA);
  setMappedDataRendererGeometry();
  if (isLayoutDirty) {
    mappedDataRenderer.setLinearizedNodes(linearizedNodes);
  }
  gl.glPushMatrix();
  gl.glTranslatef(dataRowPositionX,topSpacing,0);
  mappedDataRenderer.render(gl,isLayoutDirty);
  gl.glPopMatrix();
  renderEdgesOfLinearizedNodes(gl);
  gl.glEndList();
}",0.8886386668167999
57485,"/** 
 * Same as   {@link #addTablePerspective(TablePerspective)} but for multiple datacontainers
 */
public void addTablePerspectives(List<TablePerspective> newTablePerspectives){
  tablePerspectives.addAll(newTablePerspectives);
  resolveSubTablePerspectives(newTablePerspectives);
}","/** 
 * Same as   {@link #addTablePerspective(TablePerspective)} but for multipledata containers
 */
public void addTablePerspectives(List<TablePerspective> newTablePerspectives){
  tablePerspectives.addAll(newTablePerspectives);
  resolveSubTablePerspectives(newTablePerspectives);
}",0.9823943661971832
57486,"/** 
 * @return the resolvedTablePerspectives, see {@link #resolvedTablePerspectives}
 */
public ArrayList<TablePerspective> getResolvedTablePerspectives(){
  return resolvedTablePerspectives;
}","/** 
 * @return the resolvedTablePerspectives, see{@link #resolvedTablePerspectives}
 */
public ArrayList<TablePerspective> getResolvedTablePerspectives(){
  return resolvedTablePerspectives;
}",0.9974160206718348
57487,"private static RecordPerspective binRecords(int nrBins,Integer dimensionID,RecordPerspective recordPerspective,ATableBasedDataDomain dataDomain,String label,ArrayList<String> groupLabels){
  ArrayList<ArrayList<Integer>> bins=new ArrayList<ArrayList<Integer>>(nrBins);
  for (int count=0; count < nrBins; count++) {
    bins.add(new ArrayList<Integer>());
  }
  DataTable table=dataDomain.getTable();
  for (  Integer recordID : recordPerspective.getVirtualArray()) {
    float value=table.getFloat(DataRepresentation.NORMALIZED,recordID,dimensionID);
    int bin=(int)(value * nrBins);
    if (bin == nrBins)     bin=nrBins - 1;
    bins.get(bin).add(recordID);
  }
  ArrayList<Integer> binnedIDList=new ArrayList<Integer>();
  ArrayList<Integer> clusterSizes=new ArrayList<Integer>(nrBins);
  ArrayList<Integer> sampleElements=new ArrayList<Integer>(nrBins);
  for (  ArrayList<Integer> bin : bins) {
    binnedIDList.addAll(bin);
    clusterSizes.add(bin.size());
    sampleElements.add(0);
  }
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  data.setData(binnedIDList,clusterSizes,sampleElements,groupLabels);
  RecordPerspective binnedPerspective=new RecordPerspective(dataDomain);
  binnedPerspective.init(data);
  binnedPerspective.setLabel(label,false);
  binnedPerspective.setPrivate(true);
  table.registerRecordPerspective(binnedPerspective,false);
  return binnedPerspective;
}","private static RecordPerspective binRecords(int nrBins,Integer dimensionID,RecordPerspective recordPerspective,ATableBasedDataDomain dataDomain,String label,ArrayList<String> groupLabels,boolean isTablePerspectivePrivate){
  ArrayList<ArrayList<Integer>> bins=new ArrayList<ArrayList<Integer>>(nrBins);
  for (int count=0; count < nrBins; count++) {
    bins.add(new ArrayList<Integer>());
  }
  DataTable table=dataDomain.getTable();
  for (  Integer recordID : recordPerspective.getVirtualArray()) {
    float value=table.getFloat(DataRepresentation.NORMALIZED,recordID,dimensionID);
    int bin=(int)(value * nrBins);
    if (bin == nrBins)     bin=nrBins - 1;
    bins.get(bin).add(recordID);
  }
  ArrayList<Integer> binnedIDList=new ArrayList<Integer>();
  ArrayList<Integer> clusterSizes=new ArrayList<Integer>(nrBins);
  ArrayList<Integer> sampleElements=new ArrayList<Integer>(nrBins);
  for (  ArrayList<Integer> bin : bins) {
    binnedIDList.addAll(bin);
    clusterSizes.add(bin.size());
    sampleElements.add(0);
  }
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  data.setData(binnedIDList,clusterSizes,sampleElements,groupLabels);
  RecordPerspective binnedPerspective=new RecordPerspective(dataDomain);
  binnedPerspective.init(data);
  binnedPerspective.setLabel(label,false);
  binnedPerspective.setPrivate(isTablePerspectivePrivate);
  table.registerRecordPerspective(binnedPerspective,false);
  return binnedPerspective;
}",0.9788854274835584
57488,"public void createTablePerspeciveByRowID(ATableBasedDataDomain dataDomain,int rowID,IDType sourceRowIDType,boolean isTablePerspectivePrivate){
  IDType rowIDType=null;
  if (dataDomain.isColumnDimension()) {
    rowIDType=dataDomain.getRecordIDType();
  }
 else {
    rowIDType=dataDomain.getDimensionIDType();
  }
  IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(sourceRowIDType);
  List<Integer> ids=new ArrayList<Integer>();
  Integer convertedID=idMappingManager.getID(sourceRowIDType,rowIDType,rowID);
  if (convertedID == null)   return;
  ids.add(convertedID);
  AVariablePerspective<?,?,?,?> perspective;
  if (dataDomain.isColumnDimension()) {
    perspective=new RecordPerspective(dataDomain);
    dataDomain.getTable().registerRecordPerspective((RecordPerspective)perspective,false);
  }
 else {
    perspective=new DimensionPerspective(dataDomain);
    dataDomain.getTable().registerDimensionPerspective((DimensionPerspective)perspective,false);
  }
  perspective.setPrivate(true);
  String label=idMappingManager.getID(sourceRowIDType,rowIDType.getIDCategory().getHumanReadableIDType(),rowID);
  perspective.setLabel(label,false);
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  data.setData(ids);
  perspective.init(data);
  RecordPerspective binnedPerspective=null;
  int numberOfBins=1;
  if (dataDomain.getLabel().contains(""String_Node_Str"")) {
    for (    String recordPerspectiveID : dataDomain.getTable().getRecordPerspectiveIDs()) {
      RecordPerspective recordPerspective=dataDomain.getTable().getRecordPerspective(recordPerspectiveID);
      ArrayList<String> groupLabels=new ArrayList<String>();
      groupLabels.add(""String_Node_Str"");
      groupLabels.add(""String_Node_Str"");
      groupLabels.add(""String_Node_Str"");
      groupLabels.add(""String_Node_Str"");
      groupLabels.add(""String_Node_Str"");
      numberOfBins=5;
      binnedPerspective=binRecords(numberOfBins,convertedID,recordPerspective,dataDomain,label,groupLabels);
      break;
    }
  }
  if (dataDomain.getLabel().contains(""String_Node_Str"")) {
    for (    String recordPerspectiveID : dataDomain.getTable().getRecordPerspectiveIDs()) {
      RecordPerspective recordPerspective=dataDomain.getTable().getRecordPerspective(recordPerspectiveID);
      ArrayList<String> groupLabels=new ArrayList<String>();
      groupLabels.add(""String_Node_Str"");
      groupLabels.add(""String_Node_Str"");
      numberOfBins=2;
      binnedPerspective=binRecords(numberOfBins,convertedID,recordPerspective,dataDomain,label,groupLabels);
      break;
    }
  }
  if (binnedPerspective != null) {
    boolean existsAlready=false;
    if (dataDomain.hasTablePerspective(binnedPerspective.getPerspectiveID(),perspective.getPerspectiveID()))     existsAlready=true;
    TablePerspective tablePerspective=dataDomain.getTablePerspective(binnedPerspective.getPerspectiveID(),perspective.getPerspectiveID(),false);
    tablePerspective.setLabel(label,false);
    if (!existsAlready)     tablePerspective.setPrivate(true);
    tablePerspective.getContainerStatistics().setNumberOfBucketsForHistogram(numberOfBins);
  }
}","public void createTablePerspeciveByRowID(ATableBasedDataDomain dataDomain,int rowID,IDType sourceRowIDType,boolean isTablePerspectivePrivate){
  IDType rowIDType=null;
  if (dataDomain.isColumnDimension()) {
    rowIDType=dataDomain.getRecordIDType();
  }
 else {
    rowIDType=dataDomain.getDimensionIDType();
  }
  IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(sourceRowIDType);
  List<Integer> ids=new ArrayList<Integer>();
  Integer convertedID=idMappingManager.getID(sourceRowIDType,rowIDType,rowID);
  if (convertedID == null)   return;
  ids.add(convertedID);
  AVariablePerspective<?,?,?,?> perspective;
  if (dataDomain.isColumnDimension()) {
    perspective=new RecordPerspective(dataDomain);
    dataDomain.getTable().registerRecordPerspective((RecordPerspective)perspective,false);
  }
 else {
    perspective=new DimensionPerspective(dataDomain);
    dataDomain.getTable().registerDimensionPerspective((DimensionPerspective)perspective,false);
  }
  perspective.setPrivate(isTablePerspectivePrivate);
  String label=idMappingManager.getID(sourceRowIDType,rowIDType.getIDCategory().getHumanReadableIDType(),rowID);
  perspective.setLabel(label,false);
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  data.setData(ids);
  perspective.init(data);
  RecordPerspective binnedPerspective=null;
  int numberOfBins=1;
  if (dataDomain.getLabel().contains(""String_Node_Str"")) {
    for (    String recordPerspectiveID : dataDomain.getTable().getRecordPerspectiveIDs()) {
      RecordPerspective recordPerspective=dataDomain.getTable().getRecordPerspective(recordPerspectiveID);
      ArrayList<String> groupLabels=new ArrayList<String>();
      groupLabels.add(""String_Node_Str"");
      groupLabels.add(""String_Node_Str"");
      groupLabels.add(""String_Node_Str"");
      groupLabels.add(""String_Node_Str"");
      groupLabels.add(""String_Node_Str"");
      numberOfBins=5;
      binnedPerspective=binRecords(numberOfBins,convertedID,recordPerspective,dataDomain,label,groupLabels,isTablePerspectivePrivate);
      break;
    }
  }
  if (dataDomain.getLabel().contains(""String_Node_Str"")) {
    for (    String recordPerspectiveID : dataDomain.getTable().getRecordPerspectiveIDs()) {
      RecordPerspective recordPerspective=dataDomain.getTable().getRecordPerspective(recordPerspectiveID);
      ArrayList<String> groupLabels=new ArrayList<String>();
      groupLabels.add(""String_Node_Str"");
      groupLabels.add(""String_Node_Str"");
      numberOfBins=2;
      binnedPerspective=binRecords(numberOfBins,convertedID,recordPerspective,dataDomain,label,groupLabels,isTablePerspectivePrivate);
      break;
    }
  }
  if (binnedPerspective != null) {
    boolean existsAlready=false;
    if (dataDomain.hasTablePerspective(binnedPerspective.getPerspectiveID(),perspective.getPerspectiveID()))     existsAlready=true;
    TablePerspective tablePerspective=dataDomain.getTablePerspective(binnedPerspective.getPerspectiveID(),perspective.getPerspectiveID(),false);
    tablePerspective.setLabel(label,false);
    if (!existsAlready)     tablePerspective.setPrivate(isTablePerspectivePrivate);
    tablePerspective.getContainerStatistics().setNumberOfBucketsForHistogram(numberOfBins);
  }
}",0.9834788029925188
57489,"private void createContextMenuItemsForDataDomain(Menu menu,final TableItem tableItem,final GeneticDataDomain dataDomain){
  MenuItem makeCategoryOfGene=new MenuItem(menu,SWT.PUSH);
  makeCategoryOfGene.setText(""String_Node_Str"" + dataDomain.getLabel());
  makeCategoryOfGene.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new CategoricalTablePerspectiveCreator().createTablePerspeciveByRowID(dataDomain,(Integer)tableItem.getData(),davidIDType,false);
      try {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
      }
 catch (      PartInitException e1) {
        e1.printStackTrace();
      }
    }
  }
);
}","private void createContextMenuItemsForDataDomain(Menu menu,final TableItem tableItem,final GeneticDataDomain dataDomain){
  MenuItem makeCategoryOfGene=new MenuItem(menu,SWT.PUSH);
  makeCategoryOfGene.setText(""String_Node_Str"" + dataDomain.getLabel());
  makeCategoryOfGene.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new CategoricalTablePerspectiveCreator().createTablePerspeciveByRowID(dataDomain,(Integer)tableItem.getData(),davidIDType,false);
      DataDomainUpdateEvent event=new DataDomainUpdateEvent(dataDomain);
      event.setSender(this);
      GeneralManager.get().getEventPublisher().triggerEvent(event);
      try {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
      }
 catch (      PartInitException e1) {
        e1.printStackTrace();
      }
    }
  }
);
}",0.8964677222898904
57490,"@Override protected void handleKeyPressedEvent(KeyEvent event){
  if (event.stateMask == SWT.CTRL || event.stateMask == SWT.ALT || event.stateMask == SWT.SHIFT)   return;
switch (event.keyCode) {
case SWT.ARROW_UP:
    vendingMachine.highlightNextPreviousVisBrick(false);
  break;
case SWT.ARROW_DOWN:
vendingMachine.highlightNextPreviousVisBrick(true);
break;
case SWT.CR:
vendingMachine.selectChoice();
break;
}
}","@Override protected void handleKeyPressedEvent(KeyEvent event){
  if (event.stateMask == SWT.CTRL || event.stateMask == SWT.ALT || event.stateMask == SWT.SHIFT)   return;
switch (event.keyCode) {
case SWT.ARROW_UP:
    vendingMachine.highlightRankedElement(false);
  break;
case SWT.ARROW_DOWN:
vendingMachine.highlightRankedElement(true);
break;
case SWT.CR:
vendingMachine.selectChoice();
break;
}
}",0.7843137254901961
57491,"private void updateScoredTablePerspectives(){
  tablePerspectives.clear();
  for (  Button dataDomainButton : dataDomainButtons) {
    if (!dataDomainButton.isSelected())     continue;
    ATableBasedDataDomain dataDomain=(ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(dataDomainButton.getPickingType());
    if (dataDomain.getLabel().contains(""String_Node_Str"") || dataDomain.getLabel().contains(""String_Node_Str"")) {
      tablePerspectives.addAll(dataDomain.getAllTablePerspectives());
    }
 else {
      String dimensionPerspectiveID=(String)dataDomain.getDimensionPerspectiveIDs().toArray()[0];
      Set<String> rowIDs=dataDomain.getRecordPerspectiveIDs();
      for (      String id : rowIDs) {
        boolean existsAlready=false;
        if (dataDomain.hasTablePerspective(id,dimensionPerspectiveID))         existsAlready=true;
        TablePerspective newTablePerspective=dataDomain.getTablePerspective(id,dimensionPerspectiveID);
        if (!existsAlready)         newTablePerspective.setPrivate(true);
        if (referenceTablePerspective == newTablePerspective || referenceBrickColumn.getTablePerspective() == newTablePerspective)         continue;
        tablePerspectives.add(newTablePerspective);
      }
    }
  }
}","private void updateScoredTablePerspectives(){
  tablePerspectives.clear();
  for (  Button dataDomainButton : dataDomainButtons) {
    if (!dataDomainButton.isSelected())     continue;
    ATableBasedDataDomain dataDomain=(ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(dataDomainButton.getPickingType());
    if (dataDomain.getLabel().contains(""String_Node_Str"") || dataDomain.getLabel().contains(""String_Node_Str"")) {
      tablePerspectives.addAll(dataDomain.getAllTablePerspectives());
    }
 else {
      String dimensionPerspectiveID=(String)dataDomain.getDimensionPerspectiveIDs().toArray()[0];
      Set<String> rowPerspectiveIDs=dataDomain.getRecordPerspectiveIDs();
      for (      String rowPerspectiveID : rowPerspectiveIDs) {
        boolean existsAlready=false;
        if (dataDomain.hasTablePerspective(rowPerspectiveID,dimensionPerspectiveID))         existsAlready=true;
        TablePerspective newTablePerspective=dataDomain.getTablePerspective(rowPerspectiveID,dimensionPerspectiveID);
        if (!existsAlready)         newTablePerspective.setPrivate(true);
        if (referenceTablePerspective == newTablePerspective || referenceBrickColumn.getTablePerspective() == newTablePerspective)         continue;
        tablePerspectives.add(newTablePerspective);
      }
    }
  }
}",0.9704739704739704
57492,"private void updateRankedList(){
  selectedTablePerspectiveIndex=0;
  updateScoredTablePerspectives();
  rankColumn.clear();
  rankedElementToElementLayout.clear();
  rankedElements=new ArrayList<RankedElement>();
  for (  TablePerspective scoredTablePerspective : tablePerspectives) {
    if (referenceTablePerspective.getRecordSubTablePerspectives().size() > 1) {
      float score=scoredTablePerspective.getContainerStatistics().getAdjustedRandIndex().getScore(referenceTablePerspective,true);
      RankedElement rankedElement=new RankedElement(score,scoredTablePerspective,null);
      rankedElements.add(rankedElement);
    }
 else {
      HashMap<TablePerspective,Float> subTablePerspectiveToScore=referenceTablePerspective.getContainerStatistics().getJaccardIndex().getScore(scoredTablePerspective,true);
      for (      TablePerspective subTablePerspective : subTablePerspectiveToScore.keySet()) {
        RankedElement rankedElement=new RankedElement(subTablePerspectiveToScore.get(subTablePerspective),scoredTablePerspective,subTablePerspective);
        rankedElements.add(rankedElement);
      }
    }
  }
  Collections.sort(rankedElements);
  int rank=0;
  for (  RankedElement rankedElement : rankedElements) {
    BigDecimal bd=new BigDecimal(rankedElement.getScore()).setScale(2,RoundingMode.HALF_EVEN);
    float score=bd.floatValue();
    Row rankedElementLayout=new Row(""String_Node_Str"");
    rankedElementLayout.setPixelSizeX(VENDING_MACHINE_PIXEL_WIDTH);
    rankedElementLayout.setPixelSizeY(30);
    RankNumberRenderer rankNumberRenderer=new RankNumberRenderer(""String_Node_Str"" + (++rank) + ""String_Node_Str""+ score+ ""String_Node_Str""+ rankedElement.getColumnTablePerspective().getDataDomain().getLabel()+ rankedElement.getColumnTablePerspective().getLabel()+ ""String_Node_Str""+ rankedElement.getGroupTablePerspective().getLabel(),getTextRenderer());
    rankedElementLayout.setRenderer(rankNumberRenderer);
    rankedElementToElementLayout.put(rankedElement,rankedElementLayout);
    rankColumn.append(rankedElementLayout);
    if (rank >= MAX_RANKED_ELEMENTS)     break;
  }
  TablePerspective tablePerspective=rankedElements.get(selectedTablePerspectiveIndex).getColumnTablePerspective();
  addTablePerspectiveToStratomex(tablePerspective);
  brickColumnManager.moveBrickColumn(brickColumnManager.getBrickColumn(tablePerspective),brickColumnManager.indexOfBrickColumn(referenceBrickColumn) + 1);
  rankedElementToElementLayout.get(rankedElements.get(0)).addBackgroundRenderer(highlightRankBackgroundRenderer);
  stratomex.updateLayout();
  stratomex.setLayoutDirty();
}","private void updateRankedList(){
  selectedTablePerspectiveIndex=0;
  updateScoredTablePerspectives();
  rankColumn.clear();
  rankedElementToElementLayout.clear();
  rankedElements=new ArrayList<RankedElement>();
  for (  TablePerspective scoredTablePerspective : tablePerspectives) {
    if (referenceTablePerspective.getRecordSubTablePerspectives().size() > 1) {
      float score=scoredTablePerspective.getContainerStatistics().getAdjustedRandIndex().getScore(referenceTablePerspective,true);
      RankedElement rankedElement=new RankedElement(score,scoredTablePerspective,null);
      rankedElements.add(rankedElement);
    }
 else {
      HashMap<TablePerspective,Float> subTablePerspectiveToScore=referenceTablePerspective.getContainerStatistics().getJaccardIndex().getScore(scoredTablePerspective,true);
      for (      TablePerspective subTablePerspective : subTablePerspectiveToScore.keySet()) {
        RankedElement rankedElement=new RankedElement(subTablePerspectiveToScore.get(subTablePerspective),scoredTablePerspective,subTablePerspective);
        rankedElements.add(rankedElement);
      }
    }
  }
  Collections.sort(rankedElements);
  int rank=0;
  for (  RankedElement rankedElement : rankedElements) {
    BigDecimal bd=new BigDecimal(rankedElement.getScore()).setScale(2,RoundingMode.HALF_EVEN);
    float score=bd.floatValue();
    Row rankedElementLayout=new Row(""String_Node_Str"");
    rankedElementLayout.setPixelSizeX(VENDING_MACHINE_PIXEL_WIDTH);
    rankedElementLayout.setPixelSizeY(30);
    String rankString=""String_Node_Str"" + (++rank) + ""String_Node_Str""+ score+ ""String_Node_Str""+ rankedElement.getColumnTablePerspective().getDataDomain().getLabel()+ ""String_Node_Str""+ rankedElement.getColumnTablePerspective().getRecordPerspective().getLabel();
    if (rankedElement.getGroupTablePerspective() != null)     rankString+=""String_Node_Str"" + rankedElement.getGroupTablePerspective().getLabel();
    RankNumberRenderer rankNumberRenderer=new RankNumberRenderer(rankString,getTextRenderer());
    rankedElementLayout.setRenderer(rankNumberRenderer);
    rankedElementToElementLayout.put(rankedElement,rankedElementLayout);
    rankColumn.append(rankedElementLayout);
    if (rank >= MAX_RANKED_ELEMENTS)     break;
  }
  TablePerspective tablePerspective=rankedElements.get(selectedTablePerspectiveIndex).getColumnTablePerspective();
  addTablePerspectiveToStratomex(tablePerspective);
  brickColumnManager.moveBrickColumn(brickColumnManager.getBrickColumn(tablePerspective),brickColumnManager.indexOfBrickColumn(referenceBrickColumn) + 1);
  rankedElementToElementLayout.get(rankedElements.get(0)).addBackgroundRenderer(highlightRankBackgroundRenderer);
  stratomex.updateLayout();
  stratomex.setLayoutDirty();
}",0.9291456346980744
57493,"@Override public void display(GL2 gl){
  if (!uninitializedSubViews.isEmpty()) {
    while (uninitializedSubViews.peek() != null) {
      uninitializedSubViews.poll().initRemote(gl,this,glMouseListener);
    }
    initLayouts();
  }
  if (isDisplayListDirty) {
    buildDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
  }
  vendingMachine.processEvents();
  for (  BrickColumn group : brickColumnManager.getBrickColumns()) {
    group.processEvents();
  }
  handleHorizontalColumnMove(gl);
  if (isLayoutDirty) {
    isLayoutDirty=false;
    layoutManager.updateLayout();
    float minWidth=pixelGLConverter.getGLWidthForPixelWidth(BRICK_COLUMN_SPACING_MIN_PIXEL_WIDTH);
    for (    ElementLayout layout : centerRowLayout) {
      if (!(layout.getRenderer() instanceof BrickColumnSpacingRenderer))       continue;
      if (resizeNecessary)       break;
      if (layout.getSizeScaledX() < minWidth - 0.01f) {
        resizeNecessary=true;
        break;
      }
    }
  }
  if (resizeNecessary) {
    resizeNecessary=false;
  }
  for (  BrickColumn dimensionGroup : brickColumnManager.getBrickColumns()) {
    dimensionGroup.display(gl);
  }
  if (isConnectionLinesDirty)   performConnectionLinesUpdate();
  layoutManager.render(gl);
  if (!isRightDetailShown && !isLeftDetailShown) {
    renderArch(gl);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}","@Override public void display(GL2 gl){
  if (!uninitializedSubViews.isEmpty()) {
    while (uninitializedSubViews.peek() != null) {
      uninitializedSubViews.poll().initRemote(gl,this,glMouseListener);
    }
    initLayouts();
  }
  if (isDisplayListDirty) {
    buildDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
  }
  vendingMachine.processEvents();
  for (  BrickColumn group : brickColumnManager.getBrickColumns()) {
    group.processEvents();
  }
  handleHorizontalColumnMove(gl);
  if (isLayoutDirty) {
    isLayoutDirty=false;
    vendingMachine.updatLayout();
    layoutManager.updateLayout();
    float minWidth=pixelGLConverter.getGLWidthForPixelWidth(BRICK_COLUMN_SPACING_MIN_PIXEL_WIDTH);
    for (    ElementLayout layout : centerRowLayout) {
      if (!(layout.getRenderer() instanceof BrickColumnSpacingRenderer))       continue;
      if (resizeNecessary)       break;
      if (layout.getSizeScaledX() < minWidth - 0.01f) {
        resizeNecessary=true;
        break;
      }
    }
  }
  if (resizeNecessary) {
    resizeNecessary=false;
  }
  for (  BrickColumn dimensionGroup : brickColumnManager.getBrickColumns()) {
    dimensionGroup.display(gl);
  }
  if (isConnectionLinesDirty)   performConnectionLinesUpdate();
  layoutManager.render(gl);
  if (!isRightDetailShown && !isLeftDetailShown) {
    renderArch(gl);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}",0.987900355871886
57494,"public void initLayouts(){
  brickColumnManager.getBrickColumnSpacers().clear();
  mainRow.clear();
  initLeftLayout();
  initCenterLayout();
  initRightLayout();
  if (vendingMachine.isActive())   mainRow.append(vendingMachine.getLayout());
  layoutManager.updateLayout();
  updateConnectionLinesBetweenDimensionGroups();
}","public void initLayouts(){
  brickColumnManager.getBrickColumnSpacers().clear();
  mainRow.clear();
  initLeftLayout();
  initCenterLayout();
  initRightLayout();
  mainRow.append(vendingMachine.getLayout());
  layoutManager.updateLayout();
  updateConnectionLinesBetweenDimensionGroups();
}",0.6666666666666666
57495,"public void selectChoice(){
  scoreToTablePerspective.get(selectedTablePerspectiveIndex).getSecond().setPrivate(false);
  isActive=false;
  brickColumnManager.getBrickColumn(scoreToTablePerspective.get(selectedTablePerspectiveIndex).getSecond()).getLayout().clearBackgroundRenderers();
  brickColumnManager.getBrickColumn(referenceTablePerspective).getLayout().clearBackgroundRenderers();
  stratomex.initLayouts();
  stratomex.updateLayout();
  stratomex.setLayoutDirty();
}","public void selectChoice(){
  scoreToTablePerspective.get(selectedTablePerspectiveIndex).getSecond().setPrivate(false);
  isActive=false;
  brickColumnManager.getBrickColumn(scoreToTablePerspective.get(selectedTablePerspectiveIndex).getSecond()).getLayout().clearBackgroundRenderers();
  brickColumnManager.getBrickColumn(referenceTablePerspective).getLayout().clearBackgroundRenderers();
  stratomex.updateLayout();
  stratomex.setLayoutDirty();
}",0.942578548212351
57496,"@Override public void init(){
  if (dataSetDescription.isTransposeMatrix()) {
    recordIDCategory=IDCategory.getIDCategory(dataSetDescription.getColumnIDSpecification().getIdCategory());
    dimensionIDCategory=IDCategory.getIDCategory(dataSetDescription.getRowIDSpecification().getIdCategory());
  }
 else {
    recordIDCategory=IDCategory.getIDCategory(dataSetDescription.getRowIDSpecification().getIdCategory());
    dimensionIDCategory=IDCategory.getIDCategory(dataSetDescription.getColumnIDSpecification().getIdCategory());
  }
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EDataType.INT);
  recordIDType.setInternalType(true);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EDataType.INT);
  dimensionIDType.setInternalType(true);
  recordGroupIDCategory=IDCategory.registerCategory(recordIDCategory.getCategoryName() + ""String_Node_Str"");
  recordGroupIDCategory.setInternalCategory(true);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordGroupIDCategory,EDataType.INT);
  recordGroupIDType.setInternalType(true);
  dimensionGroupIDCategory=IDCategory.registerCategory(dimensionIDCategory.getCategoryName() + ""String_Node_Str"");
  dimensionGroupIDCategory.setInternalCategory(true);
  dimensionGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionGroupIDCategory,EDataType.INT);
  recordIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory);
  dimensionIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory);
  recordSelectionManager=new RecordSelectionManager(recordIDType);
  dimensionSelectionManager=new DimensionSelectionManager(dimensionIDType);
  recordGroupSelectionManager=new SelectionManager(recordGroupIDType);
  addIDCategory(dimensionIDCategory);
  addIDCategory(recordIDCategory);
  super.init();
}","@Override public void init(){
  if (dataSetDescription.isTransposeMatrix()) {
    recordIDCategory=IDCategory.getIDCategory(dataSetDescription.getColumnIDSpecification().getIdCategory());
    dimensionIDCategory=IDCategory.getIDCategory(dataSetDescription.getRowIDSpecification().getIdCategory());
  }
 else {
    recordIDCategory=IDCategory.getIDCategory(dataSetDescription.getRowIDSpecification().getIdCategory());
    dimensionIDCategory=IDCategory.getIDCategory(dataSetDescription.getColumnIDSpecification().getIdCategory());
  }
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EDataType.INT);
  recordIDType.setInternalType(true);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EDataType.INT);
  dimensionIDType.setInternalType(true);
  recordGroupIDCategory=IDCategory.registerCategory(recordIDCategory.getCategoryName() + ""String_Node_Str"");
  recordGroupIDCategory.setInternalCategory(true);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordGroupIDCategory,EDataType.INT);
  recordGroupIDType.setInternalType(true);
  dimensionGroupIDCategory=IDCategory.registerCategory(dimensionIDCategory.getCategoryName() + ""String_Node_Str"");
  dimensionGroupIDCategory.setInternalCategory(true);
  dimensionGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionGroupIDCategory,EDataType.INT);
  dimensionGroupIDType.setInternalType(true);
  recordIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory);
  dimensionIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory);
  recordSelectionManager=new RecordSelectionManager(recordIDType);
  dimensionSelectionManager=new DimensionSelectionManager(dimensionIDType);
  recordGroupSelectionManager=new SelectionManager(recordGroupIDType);
  addIDCategory(dimensionIDCategory);
  addIDCategory(recordIDCategory);
  super.init();
}",0.988899613899614
57497,"private SerializationData loadData(String dirName) throws IOException, JAXBException {
  SerializationData serializationData=null;
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  Unmarshaller unmarshaller=projectContext.createUnmarshaller();
  GeneralManager.get().setBasicInfo((BasicInformation)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.BASIC_INFORMATION_FILE)));
  DataDomainList dataDomainList;
  dataDomainList=(DataDomainList)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.DATA_DOMAIN_FILE));
  serializationData=new SerializationData();
  for (  ADataDomain dataDomain : dataDomainList.getDataDomains()) {
    DataSetDescription dataSetDescription=dataDomain.getDataSetDescription();
    IDTypeInitializer.initIDs(dataSetDescription);
    dataDomain.init();
    DataDomainManager.get().register(dataDomain);
    Thread thread=new Thread(dataDomain,dataDomain.getDataDomainID());
    thread.start();
    if (dataDomain instanceof ATableBasedDataDomain) {
      String extendedDirName=dirName + dataDomain.getDataDomainID() + ""String_Node_Str"";
      dataDomain.getDataSetDescription().setDataSourcePath(extendedDirName + ProjectSaver.DATA_TABLE_FILE);
      DataDomainSerializationData dataInitializationData=new DataDomainSerializationData();
      dataInitializationData.setDataDomain((ATableBasedDataDomain)dataDomain);
      HashMap<String,RecordPerspective> recordPerspectives=new HashMap<String,RecordPerspective>();
      GeneralManager.get().getSWTGUIManager().setProgressBarText(""String_Node_Str"" + dataDomain.getLabel());
      Set<String> recordPerspectiveIDs=((ATableBasedDataDomain)dataDomain).getRecordPerspectiveIDs();
      Set<String> dimensionPerspectiveIDs=((ATableBasedDataDomain)dataDomain).getDimensionPerspectiveIDs();
      int nrPerspectives=recordPerspectiveIDs.size() + dimensionPerspectiveIDs.size();
      float progressBarFactor=100f / nrPerspectives;
      int perspectiveCount=0;
      for (      String recordPerspectiveID : recordPerspectiveIDs) {
        RecordPerspective recordPerspective=(RecordPerspective)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(extendedDirName + recordPerspectiveID + ""String_Node_Str""));
        recordPerspective.setDataDomain((ATableBasedDataDomain)dataDomain);
        recordPerspective.setIDType(((ATableBasedDataDomain)dataDomain).getRecordIDType());
        recordPerspectives.put(recordPerspectiveID,recordPerspective);
        ClusterTree tree=loadTree(extendedDirName + recordPerspectiveID + ""String_Node_Str"",((ATableBasedDataDomain)dataDomain).getRecordIDType());
        if (tree != null)         recordPerspective.setTree(tree);
        GeneralManager.get().getSWTGUIManager().setProgressBarPercentage((int)(progressBarFactor * perspectiveCount));
        perspectiveCount++;
      }
      dataInitializationData.setRecordPerspectiveMap(recordPerspectives);
      HashMap<String,DimensionPerspective> dimensionPerspectives=new HashMap<String,DimensionPerspective>();
      for (      String dimensionPerspectiveID : dimensionPerspectiveIDs) {
        DimensionPerspective dimensionPerspective=(DimensionPerspective)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(extendedDirName + dimensionPerspectiveID + ""String_Node_Str""));
        dimensionPerspective.setDataDomain((ATableBasedDataDomain)dataDomain);
        dimensionPerspective.setIDType(((ATableBasedDataDomain)dataDomain).getDimensionIDType());
        dimensionPerspectives.put(dimensionPerspectiveID,dimensionPerspective);
        ClusterTree tree=loadTree(extendedDirName + dimensionPerspectiveID + ""String_Node_Str"",((ATableBasedDataDomain)dataDomain).getDimensionIDType());
        dimensionPerspective.setTree(tree);
        GeneralManager.get().getSWTGUIManager().setProgressBarPercentage((int)(progressBarFactor * perspectiveCount));
        perspectiveCount++;
      }
      dataInitializationData.setDimensionPerspectiveMap(dimensionPerspectives);
      serializationData.addDataDomainSerializationData(dataInitializationData);
    }
  }
  return serializationData;
}","private SerializationData loadData(String dirName) throws IOException, JAXBException {
  SerializationData serializationData=null;
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  Unmarshaller unmarshaller=projectContext.createUnmarshaller();
  GeneralManager.get().setBasicInfo((BasicInformation)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.BASIC_INFORMATION_FILE)));
  DataDomainList dataDomainList;
  dataDomainList=(DataDomainList)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.DATA_DOMAIN_FILE));
  serializationData=new SerializationData();
  for (  ADataDomain dataDomain : dataDomainList.getDataDomains()) {
    DataSetDescription dataSetDescription=dataDomain.getDataSetDescription();
    if (dataDomain.getDataDomainType().equals(""String_Node_Str""))     DataDomainManager.get().initalizeDataDomain(""String_Node_Str"");
    IDTypeInitializer.initIDs(dataSetDescription);
    dataDomain.init();
    DataDomainManager.get().register(dataDomain);
    Thread thread=new Thread(dataDomain,dataDomain.getDataDomainID());
    thread.start();
    if (dataDomain instanceof ATableBasedDataDomain) {
      String extendedDirName=dirName + dataDomain.getDataDomainID() + ""String_Node_Str"";
      dataDomain.getDataSetDescription().setDataSourcePath(extendedDirName + ProjectSaver.DATA_TABLE_FILE);
      DataDomainSerializationData dataInitializationData=new DataDomainSerializationData();
      dataInitializationData.setDataDomain((ATableBasedDataDomain)dataDomain);
      HashMap<String,RecordPerspective> recordPerspectives=new HashMap<String,RecordPerspective>();
      GeneralManager.get().getSWTGUIManager().setProgressBarText(""String_Node_Str"" + dataDomain.getLabel());
      Set<String> recordPerspectiveIDs=((ATableBasedDataDomain)dataDomain).getRecordPerspectiveIDs();
      Set<String> dimensionPerspectiveIDs=((ATableBasedDataDomain)dataDomain).getDimensionPerspectiveIDs();
      int nrPerspectives=recordPerspectiveIDs.size() + dimensionPerspectiveIDs.size();
      float progressBarFactor=100f / nrPerspectives;
      int perspectiveCount=0;
      for (      String recordPerspectiveID : recordPerspectiveIDs) {
        RecordPerspective recordPerspective=(RecordPerspective)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(extendedDirName + recordPerspectiveID + ""String_Node_Str""));
        recordPerspective.setDataDomain((ATableBasedDataDomain)dataDomain);
        recordPerspective.setIDType(((ATableBasedDataDomain)dataDomain).getRecordIDType());
        recordPerspectives.put(recordPerspectiveID,recordPerspective);
        ClusterTree tree=loadTree(extendedDirName + recordPerspectiveID + ""String_Node_Str"",((ATableBasedDataDomain)dataDomain).getRecordIDType());
        if (tree != null)         recordPerspective.setTree(tree);
        GeneralManager.get().getSWTGUIManager().setProgressBarPercentage((int)(progressBarFactor * perspectiveCount));
        perspectiveCount++;
      }
      dataInitializationData.setRecordPerspectiveMap(recordPerspectives);
      HashMap<String,DimensionPerspective> dimensionPerspectives=new HashMap<String,DimensionPerspective>();
      for (      String dimensionPerspectiveID : dimensionPerspectiveIDs) {
        DimensionPerspective dimensionPerspective=(DimensionPerspective)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(extendedDirName + dimensionPerspectiveID + ""String_Node_Str""));
        dimensionPerspective.setDataDomain((ATableBasedDataDomain)dataDomain);
        dimensionPerspective.setIDType(((ATableBasedDataDomain)dataDomain).getDimensionIDType());
        dimensionPerspectives.put(dimensionPerspectiveID,dimensionPerspective);
        ClusterTree tree=loadTree(extendedDirName + dimensionPerspectiveID + ""String_Node_Str"",((ATableBasedDataDomain)dataDomain).getDimensionIDType());
        dimensionPerspective.setTree(tree);
        GeneralManager.get().getSWTGUIManager().setProgressBarPercentage((int)(progressBarFactor * perspectiveCount));
        perspectiveCount++;
      }
      dataInitializationData.setDimensionPerspectiveMap(dimensionPerspectives);
      serializationData.addDataDomainSerializationData(dataInitializationData);
    }
  }
  return serializationData;
}",0.9846646829938202
57498,"/** 
 * Method from http://eclipsenuggets.blogspot.com/2007/09/how-to-save-eclipse -ui-workbench-state_6644.html
 */
private IStatus saveState(final IMemento memento){
  MultiStatus result=new MultiStatus(PlatformUI.PLUGIN_ID,IStatus.OK,WorkbenchMessages.Workbench_problemsSaving,null);
  memento.putString(IWorkbenchConstants.TAG_VERSION,""String_Node_Str"");
  memento.putInteger(IWorkbenchConstants.TAG_PROGRESS_COUNT,10);
  result.add(Status.OK_STATUS);
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow[] windows=workbench.getWorkbenchWindows();
  for (int nX=0; nX < windows.length; nX++) {
    WorkbenchWindow window=(WorkbenchWindow)windows[nX];
    IMemento childMem=memento.createChild(IWorkbenchConstants.TAG_WINDOW);
    result.merge(window.saveState(childMem));
  }
  result.add(((Workbench)workbench).getEditorHistory().saveState(memento.createChild(IWorkbenchConstants.TAG_MRU_LIST)));
  return result;
}","/** 
 * Method from http://eclipsenuggets.blogspot.com/2007/09/how-to-save-eclipse -ui-workbench-state_6644.html
 */
private IStatus saveState(final IMemento memento){
  MultiStatus result=new MultiStatus(PlatformUI.PLUGIN_ID,IStatus.OK,WorkbenchMessages.Workbench_problemsSaving,null);
  memento.putString(IWorkbenchConstants.TAG_VERSION,""String_Node_Str"");
  memento.putInteger(IWorkbenchConstants.TAG_PROGRESS_COUNT,10);
  result.add(Status.OK_STATUS);
  IWorkbench workbench=PlatformUI.getWorkbench();
  IWorkbenchWindow[] windows=workbench.getWorkbenchWindows();
  result.add(((Workbench)workbench).getEditorHistory().saveState(memento.createChild(IWorkbenchConstants.TAG_MRU_LIST)));
  return result;
}",0.7846715328467153
57499,"@Override public void createIDTypesAndMapping(){
  IDCategory geneIDCategory=IDCategory.registerCategory(EGeneIDTypes.GENE.name());
  IDType david=IDType.registerType(EGeneIDTypes.DAVID.name(),geneIDCategory,EGeneIDTypes.DAVID.getColumnType());
  IDType.registerType(EGeneIDTypes.GENE_NAME.name(),geneIDCategory,EGeneIDTypes.GENE_NAME.getColumnType());
  IDType geneSymbol=IDType.registerType(EGeneIDTypes.GENE_SYMBOL.name(),geneIDCategory,EGeneIDTypes.GENE_SYMBOL.getColumnType());
  geneIDCategory.setHumanReadableIDType(geneSymbol);
  IDType.registerType(EGeneIDTypes.BIOCARTA_GENE_ID.name(),geneIDCategory,EGeneIDTypes.BIOCARTA_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.REFSEQ_MRNA.name(),geneIDCategory,EGeneIDTypes.REFSEQ_MRNA.getColumnType());
  IDType.registerType(EGeneIDTypes.ENSEMBL_GENE_ID.name(),geneIDCategory,EGeneIDTypes.ENSEMBL_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.ENTREZ_GENE_ID.name(),geneIDCategory,EGeneIDTypes.ENTREZ_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.PATHWAY_VERTEX.name(),geneIDCategory,EGeneIDTypes.PATHWAY_VERTEX.getColumnType());
  IDType.registerType(EGeneIDTypes.PATHWAY.name(),geneIDCategory,EGeneIDTypes.PATHWAY.getColumnType());
  geneIDCategory.setPrimaryMappingType(david);
  geneIDCategory.setHumanReadableIDType(geneSymbol);
  geneIDCategory.setDenomination(""String_Node_Str"");
  String fileName=""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism();
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  if (GeneralManager.get().getBasicInfo().getOrganism() == Organism.MUS_MUSCULUS) {
    IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  }
 else {
    IDMappingParser.loadMapping(""String_Node_Str"" + Organism.HOMO_SAPIENS + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,true,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""));
  }
  IDMappingParser.loadMapping(""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism() + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,true,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""));
  IDCategory sampleIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDType sampleID=IDType.registerType(""String_Node_Str"",sampleIDCategory,EDataType.STRING);
  sampleIDCategory.setHumanReadableIDType(sampleID);
  IDCategory tcgaSampleIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDType tcgaSample=IDType.registerType(""String_Node_Str"",tcgaSampleIDCategory,EDataType.STRING);
  IDTypeParsingRules tcgaIDTypeParsingRules=new IDTypeParsingRules();
  tcgaIDTypeParsingRules.setReplacementExpression(""String_Node_Str"",""String_Node_Str"");
  tcgaIDTypeParsingRules.setSubStringExpression(""String_Node_Str"");
  tcgaIDTypeParsingRules.setDefault(true);
  tcgaSample.setIdTypeParsingRules(tcgaIDTypeParsingRules);
  tcgaSampleIDCategory.setHumanReadableIDType(tcgaSample);
  if (!GeneralManager.get().isDryMode())   DataDomainManager.get().createDataDomain(""String_Node_Str"");
}","@Override public void createIDTypesAndMapping(){
  if (isAlreadyInitialized)   return;
  isAlreadyInitialized=true;
  IDCategory geneIDCategory=IDCategory.registerCategory(EGeneIDTypes.GENE.name());
  IDType david=IDType.registerType(EGeneIDTypes.DAVID.name(),geneIDCategory,EGeneIDTypes.DAVID.getColumnType());
  IDType.registerType(EGeneIDTypes.GENE_NAME.name(),geneIDCategory,EGeneIDTypes.GENE_NAME.getColumnType());
  IDType geneSymbol=IDType.registerType(EGeneIDTypes.GENE_SYMBOL.name(),geneIDCategory,EGeneIDTypes.GENE_SYMBOL.getColumnType());
  geneIDCategory.setHumanReadableIDType(geneSymbol);
  IDType.registerType(EGeneIDTypes.BIOCARTA_GENE_ID.name(),geneIDCategory,EGeneIDTypes.BIOCARTA_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.REFSEQ_MRNA.name(),geneIDCategory,EGeneIDTypes.REFSEQ_MRNA.getColumnType());
  IDType.registerType(EGeneIDTypes.ENSEMBL_GENE_ID.name(),geneIDCategory,EGeneIDTypes.ENSEMBL_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.ENTREZ_GENE_ID.name(),geneIDCategory,EGeneIDTypes.ENTREZ_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.PATHWAY_VERTEX.name(),geneIDCategory,EGeneIDTypes.PATHWAY_VERTEX.getColumnType());
  IDType.registerType(EGeneIDTypes.PATHWAY.name(),geneIDCategory,EGeneIDTypes.PATHWAY.getColumnType());
  geneIDCategory.setPrimaryMappingType(david);
  geneIDCategory.setHumanReadableIDType(geneSymbol);
  geneIDCategory.setDenomination(""String_Node_Str"");
  String fileName=""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism();
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  if (GeneralManager.get().getBasicInfo().getOrganism() == Organism.MUS_MUSCULUS) {
    IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  }
 else {
    IDMappingParser.loadMapping(""String_Node_Str"" + Organism.HOMO_SAPIENS + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,true,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""));
  }
  IDMappingParser.loadMapping(""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism() + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,true,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""));
  IDCategory sampleIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDType sampleID=IDType.registerType(""String_Node_Str"",sampleIDCategory,EDataType.STRING);
  sampleIDCategory.setHumanReadableIDType(sampleID);
  IDCategory tcgaSampleIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDType tcgaSample=IDType.registerType(""String_Node_Str"",tcgaSampleIDCategory,EDataType.STRING);
  IDTypeParsingRules tcgaIDTypeParsingRules=new IDTypeParsingRules();
  tcgaIDTypeParsingRules.setReplacementExpression(""String_Node_Str"",""String_Node_Str"");
  tcgaIDTypeParsingRules.setSubStringExpression(""String_Node_Str"");
  tcgaIDTypeParsingRules.setDefault(true);
  tcgaSample.setIdTypeParsingRules(tcgaIDTypeParsingRules);
  tcgaSampleIDCategory.setHumanReadableIDType(tcgaSample);
  if (!GeneralManager.get().isDryMode())   DataDomainManager.get().createDataDomain(""String_Node_Str"");
}",0.9918382263369472
57500,"private void setDataDependendStuff(){
  typeOptions[0]=dataDomain.getRecordDenomination(true,false);
  typeOptions[1]=dataDomain.getDimensionDenomination(true,false);
  clusterTypeCombo.setItems(typeOptions);
  clusterTypeCombo.select(0);
  clusterTypeCombo.setEnabled(true);
  clusterTargetName=typeOptions[0];
  parent.dataOK();
}","private void setDataDependendStuff(){
  typeOptions[0]=dataDomain.getRecordDenomination(true,false);
  typeOptions[1]=dataDomain.getDimensionDenomination(true,false);
  clusterTypeCombo.setItems(typeOptions);
  clusterTypeCombo.select(0);
  clusterTypeCombo.setEnabled(true);
  parent.dataOK();
}",0.9426751592356688
57501,"private void createGUI(){
  Composite composite=new Composite(parentComposite,0);
  composite.setLayout(new GridLayout(1,false));
  if (dataDomain == null) {
    Group dataChooserGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
    dataChooserGroup.setText(""String_Node_Str"");
    dataChooserGroup.setLayout(new GridLayout(1,false));
    dataChooser=new DataChooserComposite(this,dataChooserGroup,SWT.NONE);
    dataChooser.setLayout(new GridLayout(1,false));
    GridData gridData=new GridData(SWT.BEGINNING,SWT.TOP,true,false);
    gridData.minimumWidth=300;
    dataChooser.setLayoutData(gridData);
  }
  Group clusterDimensionGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  clusterDimensionGroup.setText(""String_Node_Str"");
  clusterDimensionGroup.setLayout(new GridLayout(1,false));
  clusterTypeCombo=new Combo(clusterDimensionGroup,SWT.DROP_DOWN);
  clusterTypeCombo.setItems(typeOptions);
  clusterTypeCombo.select(0);
  clusterTargetName=typeOptions[0];
  if (dataDomain == null) {
    clusterTypeCombo.setEnabled(false);
  }
  Group distanceMeasureGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  distanceMeasureGroup.setText(""String_Node_Str"");
  distanceMeasureGroup.setLayout(new GridLayout(1,false));
  final Combo distMeasureCombo=new Combo(distanceMeasureGroup,SWT.DROP_DOWN);
  distMeasureCombo.setItems(distanceMeasureOptions);
  distMeasureCombo.setEnabled(true);
  distMeasureCombo.select(0);
  distanceMeasureName=distanceMeasureOptions[0];
  distMeasureCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      distanceMeasureName=distMeasureCombo.getText();
    }
  }
);
  tabFolder=new TabFolder(composite,SWT.BORDER);
  tabFolder.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      int selectionIndex=tabFolder.getSelectionIndex();
      AClusterTab tab=(AClusterTab)tabFolder.getItem(selectionIndex).getData();
      if (tab == null)       return;
      int selectedMeasure=distMeasureCombo.getSelectionIndex();
      String[] supportedMeasures=tab.getSupportedDistanceMeasures();
      distMeasureCombo.setItems(supportedMeasures);
      if (supportedMeasures.length - 1 < selectedMeasure)       distMeasureCombo.select(0);
 else       distMeasureCombo.select(selectedMeasure);
      distanceMeasureName=distMeasureCombo.getText();
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  new KMeansTab(tabFolder);
  new AffinityTab(tabFolder);
  new TreeTab(tabFolder);
  Button helpButton=new Button(composite,SWT.PUSH);
  helpButton.setText(""String_Node_Str"");
  helpButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      LinkHandler.openLink(""String_Node_Str"");
    }
  }
);
  tabFolder.pack();
}","private void createGUI(){
  Composite composite=new Composite(parentComposite,0);
  composite.setLayout(new GridLayout(1,false));
  if (dataDomain == null) {
    Group dataChooserGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
    dataChooserGroup.setText(""String_Node_Str"");
    dataChooserGroup.setLayout(new GridLayout(1,false));
    dataChooser=new DataChooserComposite(this,dataChooserGroup,SWT.NONE);
    dataChooser.setLayout(new GridLayout(1,false));
    GridData gridData=new GridData(SWT.BEGINNING,SWT.TOP,true,false);
    gridData.minimumWidth=300;
    dataChooser.setLayoutData(gridData);
  }
  Group clusterDimensionGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  clusterDimensionGroup.setText(""String_Node_Str"");
  clusterDimensionGroup.setLayout(new GridLayout(1,false));
  clusterTypeCombo=new Combo(clusterDimensionGroup,SWT.DROP_DOWN);
  clusterTypeCombo.setItems(typeOptions);
  clusterTypeCombo.select(0);
  if (dataDomain == null) {
    clusterTypeCombo.setEnabled(false);
  }
  Group distanceMeasureGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  distanceMeasureGroup.setText(""String_Node_Str"");
  distanceMeasureGroup.setLayout(new GridLayout(1,false));
  distanceMeasureCombo=new Combo(distanceMeasureGroup,SWT.DROP_DOWN);
  distanceMeasureCombo.setItems(distanceMeasureOptions);
  distanceMeasureCombo.setEnabled(true);
  distanceMeasureCombo.select(0);
  tabFolder=new TabFolder(composite,SWT.BORDER);
  tabFolder.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent e){
      int selectionIndex=tabFolder.getSelectionIndex();
      AClusterTab tab=(AClusterTab)tabFolder.getItem(selectionIndex).getData();
      if (tab == null)       return;
      int selectedMeasure=distanceMeasureCombo.getSelectionIndex();
      String[] supportedMeasures=tab.getSupportedDistanceMeasures();
      distanceMeasureCombo.setItems(supportedMeasures);
      if (supportedMeasures.length - 1 < selectedMeasure)       distanceMeasureCombo.select(0);
 else       distanceMeasureCombo.select(selectedMeasure);
    }
    @Override public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  new KMeansTab(tabFolder);
  new AffinityTab(tabFolder);
  new TreeTab(tabFolder);
  Button helpButton=new Button(composite,SWT.PUSH);
  helpButton.setText(""String_Node_Str"");
  helpButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      LinkHandler.openLink(""String_Node_Str"");
    }
  }
);
  tabFolder.pack();
}",0.6238905325443787
57502,"public void execute(boolean cancelPressed){
  if (cancelPressed) {
    clusterConfiguration=null;
    return;
  }
  int selectionIndex=tabFolder.getSelectionIndex();
  TabItem tabItem=tabFolder.getItems()[selectionIndex];
  AClusterTab clusterTab=(AClusterTab)tabItem.getData();
  clusterConfiguration=clusterTab.getClusterConfiguration();
  if (clusterTargetName.equals(typeOptions[0]))   clusterConfiguration.setClusterTarget(EClustererTarget.RECORD_CLUSTERING);
 else   if (clusterTargetName.equals(typeOptions[1]))   clusterConfiguration.setClusterTarget(EClustererTarget.DIMENSION_CLUSTERING);
 else {
    throw new IllegalStateException(""String_Node_Str"" + clusterTargetName);
  }
  clusterConfiguration.setDistanceMeasure(EDistanceMeasure.getTypeForName(distanceMeasureName));
  clusterConfiguration.setSourceRecordPerspective(recordPerspective);
  clusterConfiguration.setSourceDimensionPerspective(dimensionPerspective);
  clusterConfiguration.setOptionalTargetRecordPerspective(parent.getTargetRecordPerspective());
  clusterConfiguration.setOptionalTargetDimensionPerspective(parent.getTargetDimensionPerspective());
  ClusteringProgressBar progressBar=new ClusteringProgressBar(clusterConfiguration.getClusterAlgorithmName());
  progressBar.run();
  if (clusterConfiguration == null)   return;
  StartClusteringEvent event=null;
  event=new StartClusteringEvent(clusterConfiguration);
  event.setDataDomainID(dataDomain.getDataDomainID());
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}","public void execute(boolean cancelPressed){
  if (cancelPressed) {
    clusterConfiguration=null;
    return;
  }
  int selectionIndex=tabFolder.getSelectionIndex();
  TabItem tabItem=tabFolder.getItems()[selectionIndex];
  AClusterTab clusterTab=(AClusterTab)tabItem.getData();
  clusterConfiguration=clusterTab.getClusterConfiguration();
  if (clusterTypeCombo.getText().equals(typeOptions[0]))   clusterConfiguration.setClusterTarget(EClustererTarget.RECORD_CLUSTERING);
 else   if (clusterTypeCombo.getText().equals(typeOptions[1]))   clusterConfiguration.setClusterTarget(EClustererTarget.DIMENSION_CLUSTERING);
 else {
    throw new IllegalStateException(""String_Node_Str"" + clusterTypeCombo.getText());
  }
  clusterConfiguration.setDistanceMeasure(EDistanceMeasure.getTypeForName(distanceMeasureCombo.getText()));
  clusterConfiguration.setSourceRecordPerspective(recordPerspective);
  clusterConfiguration.setSourceDimensionPerspective(dimensionPerspective);
  clusterConfiguration.setOptionalTargetRecordPerspective(parent.getTargetRecordPerspective());
  clusterConfiguration.setOptionalTargetDimensionPerspective(parent.getTargetDimensionPerspective());
  ClusteringProgressBar progressBar=new ClusteringProgressBar(clusterConfiguration.getClusterAlgorithmName());
  progressBar.run();
  if (clusterConfiguration == null)   return;
  StartClusteringEvent event=null;
  event=new StartClusteringEvent(clusterConfiguration);
  event.setDataDomainID(dataDomain.getDataDomainID());
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}",0.9674479166666666
57503,"@Override public void run(){
  super.run();
  StartClusteringDialog dialog=new StartClusteringDialog(new Shell());
  dialog.open();
}","@Override public void run(){
  super.run();
  ClusterDialog dialog=new ClusterDialog(new Shell());
  dialog.open();
}",0.936
57504,"@Override public void focusLost(FocusEvent e){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      splash.forceActive();
    }
  }
);
}","@Override public void focusLost(FocusEvent e){
}",0.4615384615384615
57505,"private void doEventLoop(){
  final Shell splash=getSplash();
  if (splash.getDisplay().readAndDispatch() == false) {
    splash.getDisplay().sleep();
  }
  splash.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          splash.forceActive();
        }
      }
);
    }
  }
);
}","private void doEventLoop(){
  final Shell splash=getSplash();
  if (splash.getDisplay().readAndDispatch() == false) {
    splash.getDisplay().sleep();
  }
  splash.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
    }
  }
);
}",0.8175
57506,"protected void createGLCanvas(){
  GLProfile profile=GLProfile.get(GLProfile.GL2);
  GLCapabilities glCapabilities=new GLCapabilities(profile);
  glCapabilities.setStencilBits(1);
  glCapabilities.setDoubleBuffered(true);
  glCanvas=new GLCanvas(glCapabilities);
  GeneralManager.get().getViewManager().registerGLCanvasToAnimator(glCanvas);
}","protected void createGLCanvas(){
  GLProfile profile=GLProfile.get(GLProfile.GL2);
  final GLCapabilities glCapabilities=new GLCapabilities(profile);
  glCapabilities.setStencilBits(1);
  glCapabilities.setDoubleBuffered(true);
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        glCanvas=new GLCanvas(glCapabilities);
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  GeneralManager.get().getViewManager().registerGLCanvasToAnimator(glCanvas);
}",0.7253446447507953
57507,"@Override public void focusLost(FocusEvent e){
}","@Override public void focusLost(FocusEvent e){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      splash.forceActive();
    }
  }
);
}",0.4615384615384615
57508,"private void doEventLoop(){
  final Shell splash=getSplash();
  if (splash.getDisplay().readAndDispatch() == false) {
    splash.getDisplay().sleep();
  }
  splash.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
    }
  }
);
}","private void doEventLoop(){
  final Shell splash=getSplash();
  if (splash.getDisplay().readAndDispatch() == false) {
    splash.getDisplay().sleep();
  }
  splash.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      Display.getDefault().syncExec(new Runnable(){
        public void run(){
          splash.forceActive();
        }
      }
);
    }
  }
);
}",0.8175
57509,"protected void createGLCanvas(){
  GLProfile profile=GLProfile.get(GLProfile.GL2);
  final GLCapabilities glCapabilities=new GLCapabilities(profile);
  glCapabilities.setStencilBits(1);
  glCapabilities.setDoubleBuffered(true);
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        glCanvas=new GLCanvas(glCapabilities);
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  GeneralManager.get().getViewManager().registerGLCanvasToAnimator(glCanvas);
}","protected void createGLCanvas(){
  GLProfile profile=GLProfile.get(GLProfile.GL2);
  GLCapabilities glCapabilities=new GLCapabilities(profile);
  glCapabilities.setStencilBits(1);
  glCapabilities.setDoubleBuffered(true);
  glCanvas=new GLCanvas(glCapabilities);
  GeneralManager.get().getViewManager().registerGLCanvasToAnimator(glCanvas);
}",0.6468716861081655
57510,"/** 
 * Calculates the min and max of the container and sets them to the fMin and fMax class variables
 */
private void calculateMinMax(){
  min=Float.MAX_VALUE;
  fMax=Float.MIN_VALUE;
  for (  float fCurrent : container) {
    if (Float.isNaN(fCurrent)) {
      continue;
    }
    if (fCurrent < min) {
      min=fCurrent;
      continue;
    }
    if (fCurrent > fMax) {
      fMax=fCurrent;
    }
  }
  return;
}","/** 
 * Calculates the min and max of the container and sets them to the fMin and fMax class variables
 */
private void calculateMinMax(){
  min=Float.MAX_VALUE;
  max=Float.MIN_VALUE;
  for (  float current : container) {
    if (Float.isNaN(current)) {
      continue;
    }
    if (current < min) {
      min=current;
      continue;
    }
    if (current > max) {
      max=current;
    }
  }
  if (min == Float.MAX_VALUE)   min=Float.NaN;
  if (max == Float.MIN_VALUE)   max=Float.NaN;
  return;
}",0.8618063112078346
57511,"@Override public FloatCContainer log(int base){
  float[] fArTarget=new float[container.length];
  float fTmp;
  for (int index=0; index < container.length; index++) {
    fTmp=container[index];
    fArTarget[index]=(float)Math.log(fTmp) / (float)Math.log(base);
    if (fArTarget[index] == Float.NEGATIVE_INFINITY) {
      fArTarget[index]=0;
    }
  }
  return new FloatCContainer(fArTarget);
}","@Override public FloatCContainer log(int base){
  float[] target=new float[container.length];
  float tmp;
  for (int index=0; index < container.length; index++) {
    tmp=container[index];
    target[index]=(float)Math.log(tmp) / (float)Math.log(base);
    if (target[index] == Float.NEGATIVE_INFINITY) {
      target[index]=0;
    }
  }
  return new FloatCContainer(target);
}",0.9560723514211886
57512,"@Override public double getMax(){
  if (Float.isNaN(fMax)) {
    calculateMinMax();
  }
  return fMax;
}","@Override public double getMax(){
  if (Float.isNaN(max)) {
    calculateMinMax();
  }
  return max;
}",0.970873786407767
57513,"@Override public FloatCContainer normalizeWithExternalExtrema(final double dMin,final double dMax){
  if (dMin >= dMax)   throw new IllegalArgumentException(""String_Node_Str"");
  return new FloatCContainer(ConversionTools.normalize(container,(float)dMin,(float)dMax));
}","@Override public FloatCContainer normalizeWithExternalExtrema(final double min,final double max){
  if (min >= max)   throw new IllegalArgumentException(""String_Node_Str"");
  return new FloatCContainer(ConversionTools.normalize(container,(float)min,(float)max));
}",0.9662921348314608
57514,"/** 
 * Creates a   {@link ColumnDescription} for the specified column.
 * @param columnIndex Index of the column in the file.
 * @return The ColumnDescription.
 */
private ColumnDescription createColumnDescription(int columnIndex){
  String dataType=""String_Node_Str"";
  try {
    int testSize=page.previewTable.getItemCount() - 1;
    for (int rowIndex=dataSetDescription.getNumberOfHeaderLines(); rowIndex < testSize; rowIndex++) {
      if (rowIndex != dataSetDescription.getRowOfColumnIDs()) {
        String testString=dataMatrix.get(rowIndex).get(columnIndex);
        if (!testString.isEmpty())         Float.parseFloat(testString);
      }
    }
  }
 catch (  NumberFormatException nfe) {
    dataType=""String_Node_Str"";
  }
  return new ColumnDescription(columnIndex,dataType,ColumnDescription.CONTINUOUS);
}","/** 
 * Creates a   {@link ColumnDescription} for the specified column.
 * @param columnIndex Index of the column in the file.
 * @return The ColumnDescription.
 */
private ColumnDescription createColumnDescription(int columnIndex){
  int testSize=page.previewTable.getItemCount() - 1;
  for (int rowIndex=dataSetDescription.getNumberOfHeaderLines(); rowIndex < testSize; rowIndex++) {
    if (rowIndex != dataSetDescription.getRowOfColumnIDs()) {
      String testString=dataMatrix.get(rowIndex).get(columnIndex);
      try {
        if (!testString.isEmpty()) {
          Float.parseFloat(testString);
          return new ColumnDescription(columnIndex,""String_Node_Str"",ColumnDescription.CONTINUOUS);
        }
      }
 catch (      NumberFormatException nfe) {
      }
    }
  }
  return new ColumnDescription(columnIndex,""String_Node_Str"",ColumnDescription.CONTINUOUS);
}",0.3388429752066115
57515,"@Override protected void parseFile(BufferedReader reader) throws IOException {
  initializeDataContainers();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + dataSetDescription.getDataSetName());
  float progressBarFactor=100f / numberOfLinesInFile;
  for (int countHeaderLines=0; countHeaderLines < dataSetDescription.getNumberOfHeaderLines(); countHeaderLines++) {
    reader.readLine();
  }
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  int lineCounter=0;
  String numberParsingErrorMessage=""String_Node_Str"" + dataSetDescription.getDataSetName() + ""String_Node_Str""+ filePath+ ""String_Node_Str"";
  boolean parsingErrorOccured=false;
  IDSpecification rowIDSpecification=dataSetDescription.getRowIDSpecification();
  IDCategory rowIDCategory=IDCategory.getIDCategory(rowIDSpecification.getIdCategory());
  IDType fromIDType=IDType.getIDType(rowIDSpecification.getIdType());
  IDType toIDType;
  if (dataDomain.isColumnDimension())   toIDType=dataDomain.getRecordIDType();
 else   toIDType=dataDomain.getDimensionIDType();
  IDMappingManager rowIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(rowIDCategory);
  int columnOfRowIDs=dataSetDescription.getColumnOfRowIds();
  MappingType mappingType=rowIDMappingManager.createMap(fromIDType,toIDType,false,true);
  IDTypeParsingRules parsingRules=toIDType.getIdTypeParsingRules();
  String line;
  while ((line=reader.readLine()) != null) {
    String splitLine[]=line.split(dataSetDescription.getDelimiter());
    String id=splitLine[columnOfRowIDs];
    id=convertID(id,parsingRules);
    rowIDMappingManager.addMapping(mappingType,id,lineCounter - startParsingAtLine);
    for (int count=0; count < parsingPattern.size(); count++) {
      ColumnDescription column=parsingPattern.get(count);
      String cellContent=splitLine[column.getColumn()];
      if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        float[] targetColumn=(float[])targetColumns.get(count);
        Float value;
        try {
          value=Float.parseFloat(cellContent);
        }
 catch (        NumberFormatException nfe) {
          parsingErrorOccured=true;
          numberParsingErrorMessage+=""String_Node_Str"" + (column.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
          value=Float.NaN;
        }
        if (lineCounter < targetColumn.length) {
          targetColumn[lineCounter]=value;
        }
 else {
          System.out.println(""String_Node_Str"" + lineCounter + ""String_Node_Str""+ count);
        }
      }
 else       if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        @SuppressWarnings(""String_Node_Str"") ArrayList<String> targetColumn=(ArrayList<String>)targetColumns.get(count);
        targetColumn.add(splitLine[column.getColumn()]);
      }
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    lineCounter++;
  }
  if (parsingErrorOccured) {
    Logger.log(new Status(IStatus.ERROR,GeneralManager.PLUGIN_ID,numberParsingErrorMessage));
  }
}","@Override protected void parseFile(BufferedReader reader) throws IOException {
  initializeDataContainers();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + dataSetDescription.getDataSetName());
  float progressBarFactor=100f / numberOfLinesInFile;
  for (int countHeaderLines=0; countHeaderLines < dataSetDescription.getNumberOfHeaderLines(); countHeaderLines++) {
    reader.readLine();
  }
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  int lineCounter=0;
  String numberParsingErrorMessage=""String_Node_Str"" + dataSetDescription.getDataSetName() + ""String_Node_Str""+ filePath+ ""String_Node_Str"";
  boolean parsingErrorOccured=false;
  IDSpecification rowIDSpecification=dataSetDescription.getRowIDSpecification();
  IDCategory rowIDCategory=IDCategory.getIDCategory(rowIDSpecification.getIdCategory());
  IDType fromIDType=IDType.getIDType(rowIDSpecification.getIdType());
  IDType toIDType;
  if (dataDomain.isColumnDimension())   toIDType=dataDomain.getRecordIDType();
 else   toIDType=dataDomain.getDimensionIDType();
  IDMappingManager rowIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(rowIDCategory);
  int columnOfRowIDs=dataSetDescription.getColumnOfRowIds();
  MappingType mappingType=rowIDMappingManager.createMap(fromIDType,toIDType,false,true);
  IDTypeParsingRules parsingRules=fromIDType.getIdTypeParsingRules();
  String line;
  while ((line=reader.readLine()) != null) {
    String splitLine[]=line.split(dataSetDescription.getDelimiter());
    String id=splitLine[columnOfRowIDs];
    id=convertID(id,parsingRules);
    rowIDMappingManager.addMapping(mappingType,id,lineCounter - startParsingAtLine);
    for (int count=0; count < parsingPattern.size(); count++) {
      ColumnDescription column=parsingPattern.get(count);
      String cellContent=splitLine[column.getColumn()];
      if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        float[] targetColumn=(float[])targetColumns.get(count);
        Float value;
        try {
          value=Float.parseFloat(cellContent);
        }
 catch (        NumberFormatException nfe) {
          parsingErrorOccured=true;
          numberParsingErrorMessage+=""String_Node_Str"" + (column.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
          value=Float.NaN;
        }
        if (lineCounter < targetColumn.length) {
          targetColumn[lineCounter]=value;
        }
 else {
          System.out.println(""String_Node_Str"" + lineCounter + ""String_Node_Str""+ count);
        }
      }
 else       if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        @SuppressWarnings(""String_Node_Str"") ArrayList<String> targetColumn=(ArrayList<String>)targetColumns.get(count);
        targetColumn.add(splitLine[column.getColumn()]);
      }
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    lineCounter++;
  }
  if (parsingErrorOccured) {
    Logger.log(new Status(IStatus.ERROR,GeneralManager.PLUGIN_ID,numberParsingErrorMessage));
  }
}",0.9990598558445628
57516,"public void open(final AGLView view){
  if (view.isRenderedRemote())   this.view=(AGLView)view.getRemoteRenderingGLView();
 else   this.view=view;
  this.parent=view.getParentComposite();
  final ContextMenuCreator menuCreator=this;
  parent.getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      final JPopupMenu popup=menuCreator.create();
      int cursorLocationX=MouseInfo.getPointerInfo().getLocation().x - view.getParentGLCanvas().getLocationOnScreen().x;
      int cursorLocationY=MouseInfo.getPointerInfo().getLocation().y - view.getParentGLCanvas().getLocationOnScreen().y;
      popup.show(view.getParentGLCanvas().getParent(),cursorLocationX,cursorLocationY);
    }
  }
);
}","public void open(final AGLView view){
  if (view.isRenderedRemote())   this.view=(AGLView)view.getRemoteRenderingGLView();
 else   this.view=view;
  this.parent=view.getParentComposite();
  final ContextMenuCreator menuCreator=this;
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      final JPopupMenu popup=menuCreator.create();
      int cursorLocationX=MouseInfo.getPointerInfo().getLocation().x - view.getParentGLCanvas().getLocationOnScreen().x;
      int cursorLocationY=MouseInfo.getPointerInfo().getLocation().y - view.getParentGLCanvas().getLocationOnScreen().y;
      popup.show(view.getParentGLCanvas().getParent(),cursorLocationX,cursorLocationY);
    }
  }
);
}",0.9625441696113074
57517,"private void triggerToolTipCreation(){
  if (toolTipThread != null)   return;
  toolTipThread=new ToolTipThread();
  Runnable runnable=new Runnable(){
    @Override public void run(){
      view.getParentComposite().getDisplay().asyncExec(toolTipThread);
    }
  }
;
  Thread timerThread=new Thread(runnable);
  timerThread.start();
}","private void triggerToolTipCreation(){
  if (toolTipThread != null)   return;
  toolTipThread=new ToolTipThread();
  Runnable runnable=new Runnable(){
    @Override public void run(){
      SwingUtilities.invokeLater(toolTipThread);
    }
  }
;
  Thread timerThread=new Thread(runnable);
  timerThread.start();
}",0.891640866873065
57518,"private void triggerToolTipHide(){
  view.getParentComposite().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      hideToolTip();
    }
  }
);
}","private void triggerToolTipHide(){
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      hideToolTip();
    }
  }
);
}",0.8113207547169812
57519,"/** 
 * Saves the project to the directory with the given name. The directory is created before saving.
 * @param dirName directory to save the project-files into
 */
private void saveData(String dirName) throws JAXBException, IOException {
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  Marshaller marshaller=projectContext.createMarshaller();
  File dataDomainFile=new File(dirName + DATA_DOMAIN_FILE);
  List<ADataDomain> dataDomains=new ArrayList<ADataDomain>();
  for (  IDataDomain dataDomain : DataDomainManager.get().getDataDomains()) {
    if (!dataDomain.isSerializeable())     continue;
    dataDomains.add((ADataDomain)dataDomain);
    if (dataDomain instanceof ATableBasedDataDomain) {
      String extendedDirName=dirName + dataDomain.getDataDomainID() + ""String_Node_Str"";
      String dataDomainFileName=extendedDirName + DATA_TABLE_FILE;
      DataSetDescription dataSetDescription=dataDomain.getDataSetDescription();
      String sourceFileName=dataSetDescription.getDataSourcePath();
      if (sourceFileName.contains(RECENT_PROJECT_FOLDER))       sourceFileName=sourceFileName.replace(RECENT_PROJECT_FOLDER,RECENT_PROJECT_FOLDER_TMP);
      try {
        FileOperations.writeInputStreamToFile(dataDomainFileName,GeneralManager.get().getResourceLoader().getResource(sourceFileName));
      }
 catch (      FileNotFoundException e) {
        throw new IllegalStateException(""String_Node_Str"",e);
      }
      ATableBasedDataDomain tableBasedDataDomain=(ATableBasedDataDomain)dataDomain;
      for (      String recordPerspectiveID : tableBasedDataDomain.getTable().getRecordPerspectiveIDs()) {
        saveDataPerspective(marshaller,extendedDirName,recordPerspectiveID,tableBasedDataDomain.getTable().getRecordPerspective(recordPerspectiveID));
      }
      for (      String dimensionPerspectiveID : tableBasedDataDomain.getTable().getDimensionPerspectiveIDs()) {
        saveDataPerspective(marshaller,extendedDirName,dimensionPerspectiveID,tableBasedDataDomain.getTable().getDimensionPerspective(dimensionPerspectiveID));
      }
    }
    String fileName=dirName + BASIC_INFORMATION_FILE;
    marshaller.marshal(GeneralManager.get().getBasicInfo(),new File(fileName));
  }
  DataDomainList dataDomainList=new DataDomainList();
  dataDomainList.setDataDomains(dataDomains);
  marshaller.marshal(dataDomainList,dataDomainFile);
}","/** 
 * Saves the project to the directory with the given name. The directory is created before saving.
 * @param dirName directory to save the project-files into
 */
private void saveData(String dirName) throws JAXBException, IOException {
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  Marshaller marshaller=projectContext.createMarshaller();
  File dataDomainFile=new File(dirName + DATA_DOMAIN_FILE);
  List<ADataDomain> dataDomains=new ArrayList<ADataDomain>();
  for (  IDataDomain dataDomain : DataDomainManager.get().getDataDomains()) {
    if (!dataDomain.isSerializeable())     continue;
    dataDomains.add((ADataDomain)dataDomain);
    if (dataDomain instanceof ATableBasedDataDomain) {
      String extendedDirName=dirName + dataDomain.getDataDomainID() + ""String_Node_Str"";
      String dataDomainFileName=extendedDirName + DATA_TABLE_FILE;
      DataSetDescription dataSetDescription=dataDomain.getDataSetDescription();
      String sourceFileName=dataSetDescription.getDataSourcePath();
      if (sourceFileName.contains(RECENT_PROJECT_FOLDER))       sourceFileName=sourceFileName.replace(RECENT_PROJECT_FOLDER,RECENT_PROJECT_FOLDER_TMP);
      try {
        FileOperations.writeInputStreamToFile(dataDomainFileName,GeneralManager.get().getResourceLoader().getResource(sourceFileName));
      }
 catch (      FileNotFoundException e) {
        e.printStackTrace();
        throw new IllegalStateException(""String_Node_Str"",e);
      }
      ATableBasedDataDomain tableBasedDataDomain=(ATableBasedDataDomain)dataDomain;
      for (      String recordPerspectiveID : tableBasedDataDomain.getTable().getRecordPerspectiveIDs()) {
        saveDataPerspective(marshaller,extendedDirName,recordPerspectiveID,tableBasedDataDomain.getTable().getRecordPerspective(recordPerspectiveID));
      }
      for (      String dimensionPerspectiveID : tableBasedDataDomain.getTable().getDimensionPerspectiveIDs()) {
        saveDataPerspective(marshaller,extendedDirName,dimensionPerspectiveID,tableBasedDataDomain.getTable().getDimensionPerspective(dimensionPerspectiveID));
      }
    }
    String fileName=dirName + BASIC_INFORMATION_FILE;
    marshaller.marshal(GeneralManager.get().getBasicInfo(),new File(fileName));
  }
  DataDomainList dataDomainList=new DataDomainList();
  dataDomainList.setDataDomains(dataDomains);
  marshaller.marshal(dataDomainList,dataDomainFile);
}",0.9941614656734448
57520,"@Override public Object start(IApplicationContext context) throws Exception {
  String[] runConfigParameters=(String[])context.getArguments().get(""String_Node_Str"");
  String[] tumorTypes=null;
  String analysisRunIdentifier=""String_Node_Str"";
  String dataRunIdentifier=""String_Node_Str"";
  String projectOutputFolder=""String_Node_Str"";
  JSAP jsap=new JSAP();
  try {
    FlaggedOption tumorOpt=new FlaggedOption(""String_Node_Str"").setStringParser(JSAP.STRING_PARSER).setDefault(JSAP.NO_DEFAULT).setRequired(true).setShortFlag('t').setLongFlag(JSAP.NO_LONGFLAG);
    tumorOpt.setList(true);
    tumorOpt.setListSeparator(',');
    tumorOpt.setHelp(""String_Node_Str"");
    jsap.registerParameter(tumorOpt);
    FlaggedOption analysisRunIdentifierOpt=new FlaggedOption(""String_Node_Str"").setStringParser(JSAP.STRING_PARSER).setDefault(JSAP.NO_DEFAULT).setRequired(true).setShortFlag('a').setLongFlag(JSAP.NO_LONGFLAG);
    analysisRunIdentifierOpt.setHelp(""String_Node_Str"");
    jsap.registerParameter(analysisRunIdentifierOpt);
    FlaggedOption dataRunIdentifierOpt=new FlaggedOption(""String_Node_Str"").setStringParser(JSAP.STRING_PARSER).setDefault(JSAP.NO_DEFAULT).setRequired(true).setShortFlag('d').setLongFlag(JSAP.NO_LONGFLAG);
    dataRunIdentifierOpt.setHelp(""String_Node_Str"");
    jsap.registerParameter(dataRunIdentifierOpt);
    String defaultDestinationPath=GeneralManager.CALEYDO_HOME_PATH + ""String_Node_Str"";
    FlaggedOption projectOutputFolderOpt=new FlaggedOption(""String_Node_Str"").setStringParser(JSAP.STRING_PARSER).setDefault(defaultDestinationPath).setRequired(false).setShortFlag('o').setLongFlag(JSAP.NO_LONGFLAG);
    projectOutputFolderOpt.setHelp(""String_Node_Str"");
    jsap.registerParameter(projectOutputFolderOpt);
    JSAPResult config=jsap.parse(runConfigParameters);
    if (!config.success()) {
      handleJSAPError(jsap);
    }
    tumorTypes=config.getStringArray(""String_Node_Str"");
    analysisRunIdentifier=config.getString(""String_Node_Str"");
    dataRunIdentifier=config.getString(""String_Node_Str"");
    projectOutputFolder=config.getString(""String_Node_Str"");
  }
 catch (  JSAPException e) {
    handleJSAPError(jsap);
  }
  for (int tumorIndex=0; tumorIndex < tumorTypes.length; tumorIndex++) {
    String tumorType=tumorTypes[tumorIndex];
    String xmlFilePath=projectOutputFolder + analysisRunIdentifier + ""String_Node_Str""+ tumorType+ ""String_Node_Str"";
    String projectOutputPath=projectOutputFolder + analysisRunIdentifier + ""String_Node_Str""+ tumorType+ ""String_Node_Str"";
    System.out.println(""String_Node_Str"" + tumorType + ""String_Node_Str""+ analysisRunIdentifier);
    TCGADataXMLGenerator generator=new TCGADataXMLGenerator(tumorType,analysisRunIdentifier,dataRunIdentifier,xmlFilePath,GeneralManager.CALEYDO_HOME_PATH + ""String_Node_Str"");
    generator.run();
    System.out.println(""String_Node_Str"" + tumorType + ""String_Node_Str""+ analysisRunIdentifier);
    XMLToProjectBuilder xmlToProjectBuilder=new XMLToProjectBuilder();
    xmlToProjectBuilder.buildProject(xmlFilePath,projectOutputPath);
    new File(xmlFilePath).delete();
  }
  return context;
}","@Override public Object start(IApplicationContext context) throws Exception {
  String[] runConfigParameters=(String[])context.getArguments().get(""String_Node_Str"");
  String[] tumorTypes=null;
  String analysisRunIdentifier=""String_Node_Str"";
  String dataRunIdentifier=""String_Node_Str"";
  String outputFolder=""String_Node_Str"";
  JSAP jsap=new JSAP();
  try {
    FlaggedOption tumorOpt=new FlaggedOption(""String_Node_Str"").setStringParser(JSAP.STRING_PARSER).setDefault(JSAP.NO_DEFAULT).setRequired(true).setShortFlag('t').setLongFlag(JSAP.NO_LONGFLAG);
    tumorOpt.setList(true);
    tumorOpt.setListSeparator(',');
    tumorOpt.setHelp(""String_Node_Str"");
    jsap.registerParameter(tumorOpt);
    FlaggedOption analysisRunIdentifierOpt=new FlaggedOption(""String_Node_Str"").setStringParser(JSAP.STRING_PARSER).setDefault(JSAP.NO_DEFAULT).setRequired(true).setShortFlag('a').setLongFlag(JSAP.NO_LONGFLAG);
    analysisRunIdentifierOpt.setHelp(""String_Node_Str"");
    jsap.registerParameter(analysisRunIdentifierOpt);
    FlaggedOption dataRunIdentifierOpt=new FlaggedOption(""String_Node_Str"").setStringParser(JSAP.STRING_PARSER).setDefault(JSAP.NO_DEFAULT).setRequired(true).setShortFlag('d').setLongFlag(JSAP.NO_LONGFLAG);
    dataRunIdentifierOpt.setHelp(""String_Node_Str"");
    jsap.registerParameter(dataRunIdentifierOpt);
    String defaultDestinationPath=GeneralManager.CALEYDO_HOME_PATH + ""String_Node_Str"";
    FlaggedOption outputFolderOpt=new FlaggedOption(""String_Node_Str"").setStringParser(JSAP.STRING_PARSER).setDefault(defaultDestinationPath).setRequired(false).setShortFlag('o').setLongFlag(JSAP.NO_LONGFLAG);
    outputFolderOpt.setHelp(""String_Node_Str"");
    jsap.registerParameter(outputFolderOpt);
    JSAPResult config=jsap.parse(runConfigParameters);
    if (!config.success()) {
      handleJSAPError(jsap);
    }
    tumorTypes=config.getStringArray(""String_Node_Str"");
    analysisRunIdentifier=config.getString(""String_Node_Str"");
    dataRunIdentifier=config.getString(""String_Node_Str"");
    outputFolder=config.getString(""String_Node_Str"");
  }
 catch (  JSAPException e) {
    handleJSAPError(jsap);
  }
  String tmpDataOutputPath=outputFolder + ""String_Node_Str"";
  for (int tumorIndex=0; tumorIndex < tumorTypes.length; tumorIndex++) {
    String tumorType=tumorTypes[tumorIndex];
    String xmlFilePath=outputFolder + analysisRunIdentifier + ""String_Node_Str""+ tumorType+ ""String_Node_Str"";
    String projectOutputPath=outputFolder + analysisRunIdentifier + ""String_Node_Str""+ tumorType+ ""String_Node_Str"";
    FileOperations.createDirectory(tmpDataOutputPath);
    System.out.println(""String_Node_Str"" + tumorType + ""String_Node_Str""+ analysisRunIdentifier);
    TCGADataXMLGenerator generator=new TCGADataXMLGenerator(tumorType,analysisRunIdentifier,dataRunIdentifier,xmlFilePath,tmpDataOutputPath);
    generator.run();
    System.out.println(""String_Node_Str"" + tumorType + ""String_Node_Str""+ analysisRunIdentifier);
    XMLToProjectBuilder xmlToProjectBuilder=new XMLToProjectBuilder();
    xmlToProjectBuilder.buildProject(xmlFilePath,projectOutputPath);
    new File(xmlFilePath).delete();
  }
  FileOperations.deleteDirectory(tmpDataOutputPath);
  return context;
}",0.9288755716763918
57521,"public void loadWorkbenchData(String dirName){
  try {
    FileOperations.deleteDirectory(ProjectSaver.WORKBENCH_MEMENTO_FOLDER + ProjectSaver.WORKBENCH_MEMENTO_FILE);
    File workbenchFile=new File(dirName + ProjectSaver.WORKBENCH_MEMENTO_FILE);
    if (!workbenchFile.exists()) {
      Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str"" + workbenchFile));
      return;
    }
    File f=new File(ProjectSaver.WORKBENCH_MEMENTO_FOLDER);
    if (f.exists() == false) {
      f.mkdirs();
    }
    FileOperations.copyFolder(new File(dirName + ProjectSaver.WORKBENCH_MEMENTO_FILE),new File(ProjectSaver.WORKBENCH_MEMENTO_FOLDER + ProjectSaver.WORKBENCH_MEMENTO_FILE));
  }
 catch (  IOException e) {
    Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str"" + dirName,e));
  }
}","public void loadWorkbenchData(String dirName){
  try {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    path=path.append(ProjectSaver.WORKBENCH_MEMENTO_FILE);
    FileOperations.deleteDirectory(path.toOSString());
    File workbenchFile=new File(dirName + ProjectSaver.WORKBENCH_MEMENTO_FILE);
    if (!workbenchFile.exists()) {
      Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str"" + workbenchFile));
      return;
    }
    File f=new File(ProjectSaver.WORKBENCH_MEMENTO_FOLDER);
    if (f.exists() == false) {
      f.mkdirs();
    }
    FileOperations.copyFolder(new File(dirName + ProjectSaver.WORKBENCH_MEMENTO_FILE),new File(path.toOSString()));
  }
 catch (  IOException e) {
    Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str"" + dirName,e));
  }
}",0.4734895191122071
57522,"@Override public void execute(){
  super.execute();
  DataImportWizard dataImportWizard;
  if (loadSampleData) {
    DataSetDescription dataSetDescription=new DataSetDescription();
    dataSetDescription.setDataSourcePath(REAL_DATA_SAMPLE_FILE.replace(""String_Node_Str"",File.separator));
    dataSetDescription.setMathFilterMode(EDataTransformation.LOG2.getHumanReadableRep());
    dataImportWizard=new DataImportWizard(dataSetDescription);
  }
 else {
    dataImportWizard=new DataImportWizard();
  }
  HelpButtonWizardDialog dialog=new HelpButtonWizardDialog(StartupProcessor.get().getDisplay().getActiveShell(),dataImportWizard);
  if (Window.CANCEL == dialog.open())   StartupProcessor.get().shutdown();
}","@Override public void execute(){
  super.execute();
  DataImportWizard dataImportWizard;
  if (loadSampleData) {
    DataSetDescription dataSetDescription=new DataSetDescription();
    dataSetDescription.setDataSourcePath(REAL_DATA_SAMPLE_FILE.replace(""String_Node_Str"",File.separator));
    dataSetDescription.setMathFilterMode(EDataTransformation.LOG2.getHumanReadableRep());
    dataImportWizard=new DataImportWizard(dataSetDescription);
  }
 else {
    dataImportWizard=new DataImportWizard();
  }
  IPath path=WorkbenchPlugin.getDefault().getDataLocation();
  path=path.append(ProjectSaver.WORKBENCH_MEMENTO_FILE);
  FileOperations.deleteDirectory(path.toOSString());
  HelpButtonWizardDialog dialog=new HelpButtonWizardDialog(StartupProcessor.get().getDisplay().getActiveShell(),dataImportWizard);
  if (Window.CANCEL == dialog.open())   StartupProcessor.get().shutdown();
}",0.8923851478917558
57523,"public static void createIDTypesAndMapping(){
  IDCategory geneIDCategory=IDCategory.registerCategory(EGeneIDTypes.GENE.name());
  IDType david=IDType.registerType(EGeneIDTypes.DAVID.name(),geneIDCategory,EGeneIDTypes.DAVID.getColumnType());
  IDType.registerType(EGeneIDTypes.GENE_NAME.name(),geneIDCategory,EGeneIDTypes.GENE_NAME.getColumnType());
  IDType geneSymbol=IDType.registerType(EGeneIDTypes.GENE_SYMBOL.name(),geneIDCategory,EGeneIDTypes.GENE_SYMBOL.getColumnType());
  geneIDCategory.setHumanReadableIDType(geneSymbol);
  IDType.registerType(EGeneIDTypes.BIOCARTA_GENE_ID.name(),geneIDCategory,EGeneIDTypes.BIOCARTA_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.REFSEQ_MRNA.name(),geneIDCategory,EGeneIDTypes.REFSEQ_MRNA.getColumnType());
  IDType.registerType(EGeneIDTypes.ENSEMBL_GENE_ID.name(),geneIDCategory,EGeneIDTypes.ENSEMBL_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.ENTREZ_GENE_ID.name(),geneIDCategory,EGeneIDTypes.ENTREZ_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.PATHWAY_VERTEX.name(),geneIDCategory,EGeneIDTypes.PATHWAY_VERTEX.getColumnType());
  IDType.registerType(EGeneIDTypes.PATHWAY.name(),geneIDCategory,EGeneIDTypes.PATHWAY.getColumnType());
  geneIDCategory.setPrimaryMappingType(david);
  geneIDCategory.setHumanReadableIDType(geneSymbol);
  geneIDCategory.setDenomination(""String_Node_Str"");
  String fileName=""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism();
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism() + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,true,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""));
  IDCategory sampleIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDType sampleID=IDType.registerType(""String_Node_Str"",sampleIDCategory,EDataType.STRING);
  sampleIDCategory.setHumanReadableIDType(sampleID);
  IDCategory tcgaSampleIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDType tcgaSample=IDType.registerType(""String_Node_Str"",tcgaSampleIDCategory,EDataType.STRING);
  IDTypeParsingRules tcgaIDTypeParsingRules=new IDTypeParsingRules();
  tcgaIDTypeParsingRules.setReplacementExpression(""String_Node_Str"",""String_Node_Str"");
  tcgaIDTypeParsingRules.setSubStringExpression(""String_Node_Str"");
  tcgaSample.setIdTypeParsingRules(tcgaIDTypeParsingRules);
  sampleIDCategory.setHumanReadableIDType(tcgaSample);
}","public static void createIDTypesAndMapping(){
  IDCategory geneIDCategory=IDCategory.registerCategory(EGeneIDTypes.GENE.name());
  IDType david=IDType.registerType(EGeneIDTypes.DAVID.name(),geneIDCategory,EGeneIDTypes.DAVID.getColumnType());
  IDType.registerType(EGeneIDTypes.GENE_NAME.name(),geneIDCategory,EGeneIDTypes.GENE_NAME.getColumnType());
  IDType geneSymbol=IDType.registerType(EGeneIDTypes.GENE_SYMBOL.name(),geneIDCategory,EGeneIDTypes.GENE_SYMBOL.getColumnType());
  geneIDCategory.setHumanReadableIDType(geneSymbol);
  IDType.registerType(EGeneIDTypes.BIOCARTA_GENE_ID.name(),geneIDCategory,EGeneIDTypes.BIOCARTA_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.REFSEQ_MRNA.name(),geneIDCategory,EGeneIDTypes.REFSEQ_MRNA.getColumnType());
  IDType.registerType(EGeneIDTypes.ENSEMBL_GENE_ID.name(),geneIDCategory,EGeneIDTypes.ENSEMBL_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.ENTREZ_GENE_ID.name(),geneIDCategory,EGeneIDTypes.ENTREZ_GENE_ID.getColumnType());
  IDType.registerType(EGeneIDTypes.PATHWAY_VERTEX.name(),geneIDCategory,EGeneIDTypes.PATHWAY_VERTEX.getColumnType());
  IDType.registerType(EGeneIDTypes.PATHWAY.name(),geneIDCategory,EGeneIDTypes.PATHWAY.getColumnType());
  geneIDCategory.setPrimaryMappingType(david);
  geneIDCategory.setHumanReadableIDType(geneSymbol);
  geneIDCategory.setDenomination(""String_Node_Str"");
  String fileName=""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism();
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  IDMappingParser.loadMapping(""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism() + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,true,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""));
  IDCategory sampleIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDType sampleID=IDType.registerType(""String_Node_Str"",sampleIDCategory,EDataType.STRING);
  sampleIDCategory.setHumanReadableIDType(sampleID);
  IDCategory tcgaSampleIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDType tcgaSample=IDType.registerType(""String_Node_Str"",tcgaSampleIDCategory,EDataType.STRING);
  IDTypeParsingRules tcgaIDTypeParsingRules=new IDTypeParsingRules();
  tcgaIDTypeParsingRules.setReplacementExpression(""String_Node_Str"",""String_Node_Str"");
  tcgaIDTypeParsingRules.setSubStringExpression(""String_Node_Str"");
  tcgaSample.setIdTypeParsingRules(tcgaIDTypeParsingRules);
  tcgaSampleIDCategory.setHumanReadableIDType(tcgaSample);
}",0.9991486946651532
57524,"@Override public void handleSelectionUpdate(SelectionDelta selectionDelta){
  IDType recordIDType=dataDomain.getRecordIDType();
  if (selectionDelta.getIDType().getIDCategory().equals(recordIDType.getIDCategory())) {
    if (selectionDelta.getIDType() != recordIDType) {
      selectionDelta=DeltaConverter.convertDelta(dataDomain.getRecordIDMappingManager(),recordIDType,selectionDelta);
    }
    recordSelectionManager.setDelta(selectionDelta);
    updateTree(true,recordSelectionManager,contentTree);
  }
  if (selectionDelta.getIDType() == recordSelectionManager.getIDType()) {
  }
 else   if (selectionDelta.getIDType() == dimensionSelectionManager.getIDType()) {
    dimensionSelectionManager.setDelta(selectionDelta);
    updateTree(false,dimensionSelectionManager,dimensionTree);
  }
}","@Override public void handleSelectionUpdate(SelectionDelta selectionDelta){
  IDType recordIDType=dataDomain.getRecordIDType();
  if (selectionDelta.getIDType().getIDCategory().equals(recordIDType.getIDCategory())) {
    recordSelectionManager.setDelta(selectionDelta);
    updateTree(true,recordSelectionManager,contentTree);
  }
 else   if (selectionDelta.getIDType().getIDCategory().equals(dimensionSelectionManager.getIDType().getIDCategory())) {
    dimensionSelectionManager.setDelta(selectionDelta);
    updateTree(false,dimensionSelectionManager,dimensionTree);
  }
}",0.406135865595325
57525,"/** 
 * Initializes the   {@link IDType}s and   {@link IDCategory}s associated with this dataset, loads the dataset, groupings and does the processing of the data as defined in the   {@link DataSetDescription}
 */
public static ATableBasedDataDomain loadData(DataSetDescription dataSetDescription) throws FileNotFoundException, IOException {
  IDTypeInitializer.initIDs(dataSetDescription);
  ATableBasedDataDomain dataDomain=loadDataSet(dataSetDescription);
  loadGroupings(dataDomain,dataSetDescription);
  runDataProcessing(dataDomain,dataSetDescription);
  return dataDomain;
}","/** 
 * Creates a   {@link ATableBasedDataDomain} and loads the dataset andgroupings into it. Also does the processing of the data.
 * @param dataSetDescription The information for how to create everything
 */
public static ATableBasedDataDomain loadData(DataSetDescription dataSetDescription) throws FileNotFoundException, IOException {
  IDTypeInitializer.initIDs(dataSetDescription);
  ATableBasedDataDomain dataDomain=loadDataSet(dataSetDescription);
  loadGroupings(dataDomain,dataSetDescription);
  runDataProcessing(dataDomain,dataSetDescription);
  return dataDomain;
}",0.6787564766839378
57526,"public ArrayList<PerspectiveInitializationData> parseGrouping(IDType targetIDType){
  swtGuiManager.setProgressBarText(""String_Node_Str"" + targetIDType);
  float progressBarFactor=100f / numberOfLinesInFile;
  IDSpecification idSpecification=groupingSpecifications.getRowIDSpecification();
  IDType sourceIDType=IDType.getIDType(idSpecification.getIdType());
  if (!sourceIDType.getIDCategory().equals(targetIDType.getIDCategory()))   throw new IllegalArgumentException(""String_Node_Str"" + sourceIDType + ""String_Node_Str""+ targetIDType);
  IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(sourceIDType.getIDCategory());
  if (groupingSpecifications.getDataSourcePath() == null) {
    Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str""));
    return null;
  }
  BufferedReader reader;
  try {
    String[] headerCells=null;
    if (groupingSpecifications.isContainsColumnIDs()) {
      reader=GeneralManager.get().getResourceLoader().getResource(groupingSpecifications.getDataSourcePath());
      String headerLine=""String_Node_Str"";
      int rowOfColumnIDs=(groupingSpecifications.getRowOfColumnIDs() != null) ? groupingSpecifications.getRowOfColumnIDs() : groupingSpecifications.getNumberOfHeaderLines() - 1;
      for (int countToHeader=0; countToHeader <= rowOfColumnIDs; countToHeader++) {
        headerLine=reader.readLine();
      }
      headerCells=headerLine.split(groupingSpecifications.getDelimiter(),-1);
      reader.close();
    }
    reader=GeneralManager.get().getResourceLoader().getResource(groupingSpecifications.getDataSourcePath());
    for (int headerLineCounter=0; headerLineCounter < groupingSpecifications.getNumberOfHeaderLines(); headerLineCounter++) {
      reader.readLine();
    }
    ArrayList<Integer> columnsToRead=groupingSpecifications.getColumns();
    String firstDataLine=null;
    if (columnsToRead == null || headerCells == null) {
      firstDataLine=reader.readLine();
      String[] data=firstDataLine.split(groupingSpecifications.getDelimiter());
      if (columnsToRead == null) {
        columnsToRead=new ArrayList<Integer>(data.length);
        for (int columnCount=1; columnCount < data.length; columnCount++) {
          columnsToRead.add(columnCount);
        }
      }
      if (headerCells == null) {
        headerCells=new String[data.length];
        for (int columnCount=0; columnCount < data.length; columnCount++) {
          headerCells[columnCount]=DEFAULT_GROUP_NAME;
        }
      }
    }
    ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>> listOfGroupLists=new ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>>(columnsToRead.size());
    ArrayList<String> listOfGroupNames=new ArrayList<String>(columnsToRead.size());
    ArrayList<Pair<String,ArrayList<Integer>>> currentGroupList;
    for (    Integer columnNumber : columnsToRead) {
      currentGroupList=new ArrayList<Pair<String,ArrayList<Integer>>>();
      listOfGroupLists.add(currentGroupList);
      listOfGroupNames.add(headerCells[columnNumber]);
    }
    int lineCounter=0;
    while (true) {
      String line=null;
      if (firstDataLine == null) {
        line=reader.readLine();
      }
 else {
        line=firstDataLine;
        firstDataLine=null;
      }
      if (line == null)       break;
      String[] columns=line.split(groupingSpecifications.getDelimiter());
      String originalID=columns[groupingSpecifications.getColumnOfRowIds()];
      originalID=convertID(originalID,idSpecification.getIdTypeParsingRules());
      Integer mappedID=idMappingManager.getID(sourceIDType,targetIDType,originalID);
      if (mappedID == null) {
        Logger.log(new Status(Status.WARNING,this.toString(),""String_Node_Str"" + originalID));
        continue;
      }
      int groupListCounter=0;
      for (      Integer columnID : columnsToRead) {
        currentGroupList=listOfGroupLists.get(groupListCounter);
        ArrayList<Integer> group=null;
        for (        Pair<String,ArrayList<Integer>> groupPair : currentGroupList) {
          if (groupPair.getFirst().equals(columns[columnID]))           group=groupPair.getSecond();
        }
        if (group == null) {
          group=new ArrayList<Integer>();
          currentGroupList.add(new Pair<String,ArrayList<Integer>>(columns[columnID],group));
        }
        group.add(mappedID);
        groupListCounter++;
      }
      lineCounter++;
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    reader.close();
    ArrayList<PerspectiveInitializationData> perspectiveInitializationDatas=new ArrayList<PerspectiveInitializationData>();
    for (int groupListCount=0; groupListCount < listOfGroupLists.size(); groupListCount++) {
      ArrayList<Pair<String,ArrayList<Integer>>> groupList=listOfGroupLists.get(groupListCount);
      ArrayList<Integer> sortedIDs=new ArrayList<Integer>();
      ArrayList<Integer> clusterSizes=new ArrayList<Integer>(groupList.size());
      ArrayList<Integer> sampleElements=new ArrayList<Integer>(groupList.size());
      ArrayList<String> clusterNames=new ArrayList<String>(groupList.size());
      int sampleIndex=0;
      for (      Pair<String,ArrayList<Integer>> groupPair : groupList) {
        ArrayList<Integer> group=groupPair.getSecond();
        sortedIDs.addAll(group);
        clusterSizes.add(group.size());
        clusterNames.add(groupPair.getFirst());
        sampleElements.add(sampleIndex);
        sampleIndex+=group.size();
      }
      PerspectiveInitializationData data=new PerspectiveInitializationData();
      data.setData(sortedIDs,clusterSizes,sampleElements,clusterNames);
      String groupLabel=listOfGroupNames.get(groupListCount);
      if (groupLabel.equals(DEFAULT_GROUP_NAME)) {
        if (groupingSpecifications.getGroupingName() != null) {
          groupLabel=clusterSizes.size() + ""String_Node_Str"" + groupingSpecifications.getGroupingName();
        }
 else {
          groupLabel=clusterSizes.size() + ""String_Node_Str"";
        }
      }
      data.setLabel(groupLabel);
      perspectiveInitializationDatas.add(data);
    }
    return perspectiveInitializationDatas;
  }
 catch (  IOException ioException) {
    throw new IllegalStateException(""String_Node_Str"" + groupingSpecifications.getDataSourcePath());
  }
}","public ArrayList<PerspectiveInitializationData> parseGrouping(IDType targetIDType){
  swtGuiManager.setProgressBarText(""String_Node_Str"" + targetIDType);
  float progressBarFactor=100f / numberOfLinesInFile;
  IDSpecification idSpecification=groupingSpecifications.getRowIDSpecification();
  IDType sourceIDType=IDType.getIDType(idSpecification.getIdType());
  if (!sourceIDType.getIDCategory().equals(targetIDType.getIDCategory()))   throw new IllegalArgumentException(""String_Node_Str"" + sourceIDType + ""String_Node_Str""+ targetIDType);
  IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(sourceIDType.getIDCategory());
  if (groupingSpecifications.getDataSourcePath() == null) {
    Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str""));
    return null;
  }
  BufferedReader reader;
  try {
    String[] headerCells=null;
    if (groupingSpecifications.isContainsColumnIDs()) {
      reader=GeneralManager.get().getResourceLoader().getResource(groupingSpecifications.getDataSourcePath());
      String headerLine=""String_Node_Str"";
      int rowOfColumnIDs=(groupingSpecifications.getRowOfColumnIDs() != null) ? groupingSpecifications.getRowOfColumnIDs() : groupingSpecifications.getNumberOfHeaderLines() - 1;
      for (int countToHeader=0; countToHeader <= rowOfColumnIDs; countToHeader++) {
        headerLine=reader.readLine();
      }
      headerCells=headerLine.split(groupingSpecifications.getDelimiter(),-1);
      reader.close();
    }
    reader=GeneralManager.get().getResourceLoader().getResource(groupingSpecifications.getDataSourcePath());
    for (int headerLineCounter=0; headerLineCounter < groupingSpecifications.getNumberOfHeaderLines(); headerLineCounter++) {
      reader.readLine();
    }
    ArrayList<Integer> columnsToRead=groupingSpecifications.getColumns();
    String firstDataLine=null;
    if (columnsToRead == null || headerCells == null) {
      firstDataLine=reader.readLine();
      String[] data=firstDataLine.split(groupingSpecifications.getDelimiter());
      if (columnsToRead == null) {
        columnsToRead=new ArrayList<Integer>(data.length);
        for (int columnCount=1; columnCount < data.length; columnCount++) {
          columnsToRead.add(columnCount);
        }
      }
      if (headerCells == null) {
        headerCells=new String[data.length];
        for (int columnCount=0; columnCount < data.length; columnCount++) {
          headerCells[columnCount]=DEFAULT_GROUP_NAME;
        }
      }
    }
    ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>> listOfGroupLists=new ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>>(columnsToRead.size());
    ArrayList<String> listOfGroupNames=new ArrayList<String>(columnsToRead.size());
    ArrayList<Pair<String,ArrayList<Integer>>> currentGroupList;
    for (    Integer columnNumber : columnsToRead) {
      currentGroupList=new ArrayList<Pair<String,ArrayList<Integer>>>();
      listOfGroupLists.add(currentGroupList);
      listOfGroupNames.add(headerCells[columnNumber]);
    }
    int lineCounter=0;
    while (true) {
      String line=null;
      if (firstDataLine == null) {
        line=reader.readLine();
      }
 else {
        line=firstDataLine;
        firstDataLine=null;
      }
      if (line == null)       break;
      String[] columns=line.split(groupingSpecifications.getDelimiter());
      String originalID=columns[groupingSpecifications.getColumnOfRowIds()];
      originalID=convertID(originalID,sourceIDType.getIdTypeParsingRules());
      Integer mappedID=idMappingManager.getID(sourceIDType,targetIDType,originalID);
      if (mappedID == null) {
        Logger.log(new Status(Status.WARNING,this.toString(),""String_Node_Str"" + originalID));
        continue;
      }
      int groupListCounter=0;
      for (      Integer columnID : columnsToRead) {
        currentGroupList=listOfGroupLists.get(groupListCounter);
        ArrayList<Integer> group=null;
        for (        Pair<String,ArrayList<Integer>> groupPair : currentGroupList) {
          if (groupPair.getFirst().equals(columns[columnID]))           group=groupPair.getSecond();
        }
        if (group == null) {
          group=new ArrayList<Integer>();
          currentGroupList.add(new Pair<String,ArrayList<Integer>>(columns[columnID],group));
        }
        group.add(mappedID);
        groupListCounter++;
      }
      lineCounter++;
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    reader.close();
    ArrayList<PerspectiveInitializationData> perspectiveInitializationDatas=new ArrayList<PerspectiveInitializationData>();
    for (int groupListCount=0; groupListCount < listOfGroupLists.size(); groupListCount++) {
      ArrayList<Pair<String,ArrayList<Integer>>> groupList=listOfGroupLists.get(groupListCount);
      ArrayList<Integer> sortedIDs=new ArrayList<Integer>();
      ArrayList<Integer> clusterSizes=new ArrayList<Integer>(groupList.size());
      ArrayList<Integer> sampleElements=new ArrayList<Integer>(groupList.size());
      ArrayList<String> clusterNames=new ArrayList<String>(groupList.size());
      int sampleIndex=0;
      for (      Pair<String,ArrayList<Integer>> groupPair : groupList) {
        ArrayList<Integer> group=groupPair.getSecond();
        sortedIDs.addAll(group);
        clusterSizes.add(group.size());
        clusterNames.add(groupPair.getFirst());
        sampleElements.add(sampleIndex);
        sampleIndex+=group.size();
      }
      PerspectiveInitializationData data=new PerspectiveInitializationData();
      data.setData(sortedIDs,clusterSizes,sampleElements,clusterNames);
      String groupLabel=listOfGroupNames.get(groupListCount);
      if (groupLabel.equals(DEFAULT_GROUP_NAME)) {
        if (groupingSpecifications.getGroupingName() != null) {
          groupLabel=clusterSizes.size() + ""String_Node_Str"" + groupingSpecifications.getGroupingName();
        }
 else {
          groupLabel=clusterSizes.size() + ""String_Node_Str"";
        }
      }
      data.setLabel(groupLabel);
      perspectiveInitializationDatas.add(data);
    }
    return perspectiveInitializationDatas;
  }
 catch (  IOException ioException) {
    throw new IllegalStateException(""String_Node_Str"" + groupingSpecifications.getDataSourcePath());
  }
}",0.9978731784166996
57527,"/** 
 * @param dataDomain
 * @param recordPerspective
 * @param dimensionPerspective
 */
public DataContainer(ATableBasedDataDomain dataDomain,RecordPerspective recordPerspective,DimensionPerspective dimensionPerspective){
  this.dataDomain=dataDomain;
  this.recordPerspective=recordPerspective;
  recordPerspectiveID=recordPerspective.getPerspectiveID();
  this.dimensionPerspective=dimensionPerspective;
  dimensionPerspectiveID=dimensionPerspective.getPerspectiveID();
  createKey();
}","/** 
 * @param dataDomain
 * @param recordPerspective
 * @param dimensionPerspective
 */
public DataContainer(ATableBasedDataDomain dataDomain,RecordPerspective recordPerspective,DimensionPerspective dimensionPerspective){
  this.dataDomain=dataDomain;
  this.dataDomainID=dataDomain.getDataDomainID();
  this.recordPerspective=recordPerspective;
  recordPerspectiveID=recordPerspective.getPerspectiveID();
  this.dimensionPerspective=dimensionPerspective;
  dimensionPerspectiveID=dimensionPerspective.getPerspectiveID();
  createKey();
}",0.95136186770428
57528,"/** 
 * This should be called after the rest of the data, specifically the perspectives are sucessfully deserialized. Sets the perspectives based on the serialized perspective IDs.
 */
public void postDesirialize(){
  recordPerspective=dataDomain.getTable().getRecordPerspective(recordPerspectiveID);
  dimensionPerspective=dataDomain.getTable().getDimensionPerspective(dimensionPerspectiveID);
  createKey();
}","/** 
 * This should be called after the rest of the data, specifically the perspectives are sucessfully deserialized. Sets the perspectives based on the serialized perspective IDs.
 */
public void postDesirialize(){
  dataDomain=(ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(dataDomainID);
  recordPerspective=dataDomain.getTable().getRecordPerspective(recordPerspectiveID);
  dimensionPerspective=dataDomain.getTable().getDimensionPerspective(dimensionPerspectiveID);
  createKey();
}",0.898360655737705
57529,"public void setDataDomain(ATableBasedDataDomain dataDomain){
  this.dataDomain=dataDomain;
}","public void setDataDomain(ATableBasedDataDomain dataDomain){
  this.dataDomainID=dataDomain.getDataDomainID();
  this.dataDomain=dataDomain;
}",0.7863247863247863
57530,"@Override @XmlID public String getDataDomainID(){
  return dataDomainID;
}","@Override public String getDataDomainID(){
  return dataDomainID;
}",0.950354609929078
57531,"/** 
 * <p> Creates the   {@link DataTable} and the {@link AColumn}s for the  {@link DataTable}, as well as the raw data columns to be set into the columns, which are also stored in   {@link #targetColumns}. </p> <p> Also creates the mapping of columnIDs to column labels in the  {@link IDMappingManager}</p>
 */
private void initializeDataContainers(){
  DataTable table=new DataTable(dataDomain);
  dataDomain.setTable(table);
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  String[] headers=null;
  if (dataSetDescription.isContainsColumnIDs()) {
    try {
      BufferedReader reader=GeneralManager.get().getResourceLoader().getResource(filePath);
      Integer rowOfColumnIDs=dataSetDescription.getNumberOfHeaderLines() - 1;
      if (dataSetDescription.getRowOfColumnIDs() != null)       rowOfColumnIDs=dataSetDescription.getRowOfColumnIDs();
      for (int rowCount=0; rowCount < rowOfColumnIDs; rowCount++) {
        reader.readLine();
      }
      String headerLine=reader.readLine();
      headers=headerLine.split(dataSetDescription.getDelimiter());
      reader.close();
    }
 catch (    Exception e) {
      Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"",e));
      throw new IllegalStateException(""String_Node_Str"" + filePath + ""String_Node_Str"",e);
    }
  }
  calculateNumberOfLinesInFile();
  int numberOfDataLines=numberOfLinesInFile - dataSetDescription.getNumberOfHeaderLines();
  IDMappingManager columnIDMappingManager;
  IDType columnIDType;
  IDType hrColumnIDType;
  if (!dataDomain.getDataSetDescription().isTransposeMatrix()) {
    columnIDMappingManager=dataDomain.getDimensionIDMappingManager();
    columnIDType=dataDomain.getDimensionIDType();
    hrColumnIDType=columnIDType.getIDCategory().getHumanReadableIDType();
  }
 else {
    columnIDMappingManager=dataDomain.getRecordIDMappingManager();
    columnIDType=dataDomain.getRecordIDType();
    hrColumnIDType=columnIDType.getIDCategory().getHumanReadableIDType();
  }
  MappingType mappingType=columnIDMappingManager.createMap(columnIDType,hrColumnIDType,false,true);
  int columnCount=0;
  for (  ColumnDescription parsingDetail : parsingPattern) {
    int columnID;
    if (parsingDetail.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
      float[] dataColumn=new float[numberOfDataLines];
      targetColumns.add(dataColumn);
      NumericalColumn column;
      if (parsingDetail.getColumnID() == null) {
        column=new NumericalColumn();
        parsingDetail.setColumnID(column.getID());
      }
 else {
        column=new NumericalColumn(parsingDetail.getColumnID());
      }
      columnID=column.getID();
      column.setRawData(dataColumn);
      table.addColumn(column);
    }
 else     if (parsingDetail.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
      ArrayList<String> dataColumn=new ArrayList<String>(numberOfDataLines);
      targetColumns.add(dataColumn);
      NominalColumn<String> column;
      if (parsingDetail.getColumnID() == null) {
        column=new NominalColumn<String>();
        parsingDetail.setColumnID(column.getID());
      }
 else {
        column=new NominalColumn<String>(parsingDetail.getColumnID());
      }
      columnID=column.getID();
      column.setRawNominalData(dataColumn);
      table.addColumn(column);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + parsingDetail + ""String_Node_Str""+ parsingPattern);
    }
    if (headers != null) {
      String idString=headers[parsingDetail.getColumn()];
      idString=convertID(idString,dataSetDescription.getColumnIDSpecification().getIdTypeParsingRules());
      columnIDMappingManager.addMapping(mappingType,columnID,idString);
    }
 else {
      columnIDMappingManager.addMapping(mappingType,columnID,""String_Node_Str"" + columnCount++);
    }
  }
}","/** 
 * <p> Creates the   {@link DataTable} and the {@link AColumn}s for the  {@link DataTable}, as well as the raw data columns to be set into the columns, which are also stored in   {@link #targetColumns}. </p> <p> Also creates the mapping of columnIDs to column labels in the  {@link IDMappingManager}</p>
 */
private void initializeDataContainers(){
  DataTable table=new DataTable(dataDomain);
  dataDomain.setTable(table);
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  String[] headers=null;
  if (dataSetDescription.isContainsColumnIDs()) {
    try {
      BufferedReader reader=GeneralManager.get().getResourceLoader().getResource(filePath);
      Integer rowOfColumnIDs=dataSetDescription.getNumberOfHeaderLines() - 1;
      if (dataSetDescription.getRowOfColumnIDs() != null)       rowOfColumnIDs=dataSetDescription.getRowOfColumnIDs();
      for (int rowCount=0; rowCount < rowOfColumnIDs; rowCount++) {
        reader.readLine();
      }
      String headerLine=reader.readLine();
      headers=headerLine.split(dataSetDescription.getDelimiter());
      reader.close();
    }
 catch (    Exception e) {
      Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"",e));
      throw new IllegalStateException(""String_Node_Str"" + filePath + ""String_Node_Str"",e);
    }
  }
  calculateNumberOfLinesInFile();
  int numberOfDataLines=numberOfLinesInFile - dataSetDescription.getNumberOfHeaderLines();
  IDMappingManager columnIDMappingManager;
  IDType targetColumnIDType;
  IDType sourceColumnIDType=IDType.getIDType(dataSetDescription.getColumnIDSpecification().getIdType());
  if (!dataDomain.getDataSetDescription().isTransposeMatrix()) {
    columnIDMappingManager=dataDomain.getDimensionIDMappingManager();
    targetColumnIDType=dataDomain.getDimensionIDType();
  }
 else {
    columnIDMappingManager=dataDomain.getRecordIDMappingManager();
    targetColumnIDType=dataDomain.getRecordIDType();
  }
  MappingType mappingType=columnIDMappingManager.createMap(targetColumnIDType,sourceColumnIDType,false,true);
  int columnCount=0;
  for (  ColumnDescription parsingDetail : parsingPattern) {
    int columnID;
    if (parsingDetail.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
      float[] dataColumn=new float[numberOfDataLines];
      targetColumns.add(dataColumn);
      NumericalColumn column;
      if (parsingDetail.getColumnID() == null) {
        column=new NumericalColumn();
        parsingDetail.setColumnID(column.getID());
      }
 else {
        column=new NumericalColumn(parsingDetail.getColumnID());
      }
      columnID=column.getID();
      column.setRawData(dataColumn);
      table.addColumn(column);
    }
 else     if (parsingDetail.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
      ArrayList<String> dataColumn=new ArrayList<String>(numberOfDataLines);
      targetColumns.add(dataColumn);
      NominalColumn<String> column;
      if (parsingDetail.getColumnID() == null) {
        column=new NominalColumn<String>();
        parsingDetail.setColumnID(column.getID());
      }
 else {
        column=new NominalColumn<String>(parsingDetail.getColumnID());
      }
      columnID=column.getID();
      column.setRawNominalData(dataColumn);
      table.addColumn(column);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + parsingDetail + ""String_Node_Str""+ parsingPattern);
    }
    if (headers != null) {
      String idString=headers[parsingDetail.getColumn()];
      idString=convertID(idString,sourceColumnIDType.getIdTypeParsingRules());
      columnIDMappingManager.addMapping(mappingType,columnID,idString);
    }
 else {
      columnIDMappingManager.addMapping(mappingType,columnID,""String_Node_Str"" + columnCount++);
    }
  }
}",0.4752267052175056
57532,"@Override protected void parseFile(BufferedReader reader) throws IOException {
  initializeDataContainers();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + dataSetDescription.getDataSetName());
  float progressBarFactor=100f / numberOfLinesInFile;
  for (int countHeaderLines=0; countHeaderLines < dataSetDescription.getNumberOfHeaderLines(); countHeaderLines++) {
    reader.readLine();
  }
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  int lineCounter=0;
  String numberParsingErrorMessage=""String_Node_Str"" + dataSetDescription.getDataSetName() + ""String_Node_Str""+ filePath+ ""String_Node_Str"";
  boolean parsingErrorOccured=false;
  IDSpecification rowIDSpecification=dataSetDescription.getRowIDSpecification();
  IDCategory rowIDCategory=IDCategory.getIDCategory(rowIDSpecification.getIdCategory());
  IDType fromIDType=IDType.getIDType(rowIDSpecification.getIdType());
  IDType toIDType;
  if (dataDomain.isColumnDimension())   toIDType=dataDomain.getRecordIDType();
 else   toIDType=dataDomain.getDimensionIDType();
  IDMappingManager rowIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(rowIDCategory);
  int columnOfRowIDs=dataSetDescription.getColumnOfRowIds();
  MappingType mappingType=rowIDMappingManager.createMap(fromIDType,toIDType,false,true);
  IDTypeParsingRules parsingRules=null;
  if (rowIDSpecification.getIdTypeParsingRules() != null)   parsingRules=rowIDSpecification.getIdTypeParsingRules();
 else   if (toIDType.getIdTypeParsingRules() != null)   parsingRules=toIDType.getIdTypeParsingRules();
  String line;
  while ((line=reader.readLine()) != null) {
    String splitLine[]=line.split(dataSetDescription.getDelimiter());
    String id=splitLine[columnOfRowIDs];
    id=convertID(id,parsingRules);
    rowIDMappingManager.addMapping(mappingType,id,lineCounter - startParsingAtLine);
    for (int count=0; count < parsingPattern.size(); count++) {
      ColumnDescription column=parsingPattern.get(count);
      String cellContent=splitLine[column.getColumn()];
      if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        float[] targetColumn=(float[])targetColumns.get(count);
        Float value;
        try {
          value=Float.parseFloat(cellContent);
        }
 catch (        NumberFormatException nfe) {
          parsingErrorOccured=true;
          numberParsingErrorMessage+=""String_Node_Str"" + (column.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
          value=Float.NaN;
        }
        if (lineCounter < targetColumn.length) {
          targetColumn[lineCounter]=value;
        }
 else {
          System.out.println(""String_Node_Str"" + lineCounter + ""String_Node_Str""+ count);
        }
      }
 else       if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        @SuppressWarnings(""String_Node_Str"") ArrayList<String> targetColumn=(ArrayList<String>)targetColumns.get(count);
        targetColumn.add(splitLine[column.getColumn()]);
      }
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    lineCounter++;
  }
  if (parsingErrorOccured) {
    Logger.log(new Status(IStatus.ERROR,GeneralManager.PLUGIN_ID,numberParsingErrorMessage));
  }
}","@Override protected void parseFile(BufferedReader reader) throws IOException {
  initializeDataContainers();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + dataSetDescription.getDataSetName());
  float progressBarFactor=100f / numberOfLinesInFile;
  for (int countHeaderLines=0; countHeaderLines < dataSetDescription.getNumberOfHeaderLines(); countHeaderLines++) {
    reader.readLine();
  }
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  int lineCounter=0;
  String numberParsingErrorMessage=""String_Node_Str"" + dataSetDescription.getDataSetName() + ""String_Node_Str""+ filePath+ ""String_Node_Str"";
  boolean parsingErrorOccured=false;
  IDSpecification rowIDSpecification=dataSetDescription.getRowIDSpecification();
  IDCategory rowIDCategory=IDCategory.getIDCategory(rowIDSpecification.getIdCategory());
  IDType fromIDType=IDType.getIDType(rowIDSpecification.getIdType());
  IDType toIDType;
  if (dataDomain.isColumnDimension())   toIDType=dataDomain.getRecordIDType();
 else   toIDType=dataDomain.getDimensionIDType();
  IDMappingManager rowIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(rowIDCategory);
  int columnOfRowIDs=dataSetDescription.getColumnOfRowIds();
  MappingType mappingType=rowIDMappingManager.createMap(fromIDType,toIDType,false,true);
  IDTypeParsingRules parsingRules=toIDType.getIdTypeParsingRules();
  String line;
  while ((line=reader.readLine()) != null) {
    String splitLine[]=line.split(dataSetDescription.getDelimiter());
    String id=splitLine[columnOfRowIDs];
    id=convertID(id,parsingRules);
    rowIDMappingManager.addMapping(mappingType,id,lineCounter - startParsingAtLine);
    for (int count=0; count < parsingPattern.size(); count++) {
      ColumnDescription column=parsingPattern.get(count);
      String cellContent=splitLine[column.getColumn()];
      if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        float[] targetColumn=(float[])targetColumns.get(count);
        Float value;
        try {
          value=Float.parseFloat(cellContent);
        }
 catch (        NumberFormatException nfe) {
          parsingErrorOccured=true;
          numberParsingErrorMessage+=""String_Node_Str"" + (column.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
          value=Float.NaN;
        }
        if (lineCounter < targetColumn.length) {
          targetColumn[lineCounter]=value;
        }
 else {
          System.out.println(""String_Node_Str"" + lineCounter + ""String_Node_Str""+ count);
        }
      }
 else       if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        @SuppressWarnings(""String_Node_Str"") ArrayList<String> targetColumn=(ArrayList<String>)targetColumns.get(count);
        targetColumn.add(splitLine[column.getColumn()]);
      }
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    lineCounter++;
  }
  if (parsingErrorOccured) {
    Logger.log(new Status(IStatus.ERROR,GeneralManager.PLUGIN_ID,numberParsingErrorMessage));
  }
}",0.970785149117468
57533,"@Override public void layout(Rectangle2D area){
  if (area == null)   return;
  Set<IDVINode> dataNodes=new HashSet<IDVINode>();
  Set<IDVINode> viewNodes=new HashSet<IDVINode>();
  Collection<IDVINode> nodes=graph.getNodes();
  int summedDataNodesWidthPixels=0;
  int summedViewNodesWidthPixels=0;
  maxDataNodeHeightPixels=Integer.MIN_VALUE;
  int maxViewNodeHeightPixels=Integer.MIN_VALUE;
  for (  IDVINode node : nodes) {
    if (node instanceof ADataNode) {
      dataNodes.add(node);
      summedDataNodesWidthPixels+=node.getWidthPixels();
      if (node.getHeightPixels() > maxDataNodeHeightPixels)       maxDataNodeHeightPixels=node.getHeightPixels();
    }
 else {
      viewNodes.add(node);
      summedViewNodesWidthPixels+=node.getWidthPixels();
      if (node.getHeightPixels() > maxViewNodeHeightPixels)       maxViewNodeHeightPixels=node.getHeightPixels();
    }
  }
  sortedDataNodes.clear();
  sortedViewNodes.clear();
  sortedViewNodes.addAll(viewNodes);
  relativeNodeXCoordinates.clear();
  List<Pair<String,IDVINode>> dataNodeSortingList=new ArrayList<Pair<String,IDVINode>>();
  for (  IDVINode dataNode : dataNodes) {
    dataNodeSortingList.add(new Pair<String,IDVINode>(dataNode.getCaption().toUpperCase(),dataNode));
  }
  Collections.sort(dataNodeSortingList);
  for (  Pair<String,IDVINode> pair : dataNodeSortingList) {
    sortedDataNodes.add(pair.getSecond());
  }
  applyBaryCenterReordering();
  float dataNodeSpacingPixels=(float)(area.getWidth() - summedDataNodesWidthPixels) / (float)(dataNodes.size() - 1);
  dataNodeSpacingPixels=Math.max(dataNodeSpacingPixels,MIN_NODE_SPACING_PIXELS);
  dataNodeSpacingPixels=Math.min(dataNodeSpacingPixels,MAX_NODE_SPACING_PIXELS);
  float currentDataNodePositionX=(float)Math.max((float)(area.getMinX() + (area.getWidth() - summedDataNodesWidthPixels - (dataNodes.size() - 1) * dataNodeSpacingPixels) / 2.0f),area.getMinX());
  maxBendPointOffsetYPixels=Integer.MIN_VALUE;
  for (  Edge edge : graph.getAllEdges()) {
    if (edge.getNode1() instanceof ADataNode && edge.getNode2() instanceof ADataNode) {
      int bendPointOffsetYPixels=insideLayerEdgeRoutingStrategy.calcEdgeBendPointYOffsetPixels(edge.getNode1(),edge.getNode2());
      if (bendPointOffsetYPixels > maxBendPointOffsetYPixels) {
        maxBendPointOffsetYPixels=bendPointOffsetYPixels;
      }
    }
  }
  boolean isUpsideDown=false;
  float dataNodesBottomY=0;
  float expandDirectorFactor=1;
  if (view.isRenderedRemote()) {
    isUpsideDown=false;
    dataNodesBottomY=(float)area.getMaxY();
    expandDirectorFactor=-1;
  }
 else {
    isUpsideDown=true;
    dataNodesBottomY=(float)area.getMinY() + maxBendPointOffsetYPixels;
  }
  for (  IDVINode node : sortedDataNodes) {
    if (!node.isCustomPosition()) {
      setNodePosition(node,new Point2D.Float(currentDataNodePositionX + node.getWidthPixels() / 2.0f,dataNodesBottomY + node.getHeightPixels() / 2.0f * expandDirectorFactor));
    }
    currentDataNodePositionX+=node.getWidthPixels() + dataNodeSpacingPixels;
    node.setUpsideDown(isUpsideDown);
  }
  float viewNodeSpacingPixels=(float)(area.getWidth() - summedViewNodesWidthPixels) / (float)(viewNodes.size() - 1);
  viewNodeSpacingPixels=Math.max(viewNodeSpacingPixels,MIN_NODE_SPACING_PIXELS);
  viewNodeSpacingPixels=Math.min(viewNodeSpacingPixels,MAX_NODE_SPACING_PIXELS);
  float currentViewNodePositionX=(float)Math.max((float)(area.getMinX() + (area.getWidth() - summedViewNodesWidthPixels - (viewNodes.size() - 1) * viewNodeSpacingPixels) / 2.0f),area.getMinX());
  float viewNodesTopY=(float)area.getHeight() + (float)area.getMinY();
  for (  IDVINode node : sortedViewNodes) {
    if (!node.isCustomPosition()) {
      setNodePosition(node,new Point2D.Float(currentViewNodePositionX + node.getWidthPixels() / 2.0f,viewNodesTopY - node.getHeightPixels() / 2.0f));
    }
    currentViewNodePositionX+=node.getWidthPixels() + viewNodeSpacingPixels;
  }
  for (  IDVINode node : graph.getNodes()) {
    Point2D position=getNodePosition(node);
    float relativePosX=(float)position.getX() / (float)area.getWidth();
    relativeNodeXCoordinates.put(node,relativePosX);
  }
}","@Override public void layout(Rectangle2D area){
  if (area == null)   return;
  Set<IDVINode> dataNodes=new HashSet<IDVINode>();
  Set<IDVINode> viewNodes=new HashSet<IDVINode>();
  Collection<IDVINode> nodes=graph.getNodes();
  int summedDataNodesWidthPixels=0;
  int summedViewNodesWidthPixels=0;
  maxDataNodeHeightPixels=Integer.MIN_VALUE;
  int maxViewNodeHeightPixels=Integer.MIN_VALUE;
  for (  IDVINode node : nodes) {
    if (node instanceof ADataNode) {
      dataNodes.add(node);
      summedDataNodesWidthPixels+=node.getWidthPixels();
      if (node.getHeightPixels() > maxDataNodeHeightPixels)       maxDataNodeHeightPixels=node.getHeightPixels();
    }
 else {
      viewNodes.add(node);
      summedViewNodesWidthPixels+=node.getWidthPixels();
      if (node.getHeightPixels() > maxViewNodeHeightPixels)       maxViewNodeHeightPixels=node.getHeightPixels();
    }
  }
  sortedDataNodes.clear();
  sortedViewNodes.clear();
  sortedViewNodes.addAll(viewNodes);
  relativeNodeXCoordinates.clear();
  List<Pair<String,IDVINode>> dataNodeSortingList=new ArrayList<Pair<String,IDVINode>>();
  for (  IDVINode dataNode : dataNodes) {
    dataNodeSortingList.add(new Pair<String,IDVINode>(dataNode.getCaption().toUpperCase(),dataNode));
  }
  Collections.sort(dataNodeSortingList);
  for (  Pair<String,IDVINode> pair : dataNodeSortingList) {
    sortedDataNodes.add(pair.getSecond());
  }
  applyBaryCenterReordering();
  float dataNodeSpacingPixels;
  if (dataNodes.size() == 1) {
    dataNodeSpacingPixels=0;
  }
 else {
    dataNodeSpacingPixels=(float)(area.getWidth() - summedDataNodesWidthPixels) / (float)(dataNodes.size() - 1);
  }
  dataNodeSpacingPixels=Math.max(dataNodeSpacingPixels,MIN_NODE_SPACING_PIXELS);
  dataNodeSpacingPixels=Math.min(dataNodeSpacingPixels,MAX_NODE_SPACING_PIXELS);
  float currentDataNodePositionX=(float)Math.max((float)(area.getMinX() + (area.getWidth() - summedDataNodesWidthPixels - (dataNodes.size() - 1) * dataNodeSpacingPixels) / 2.0f),area.getMinX());
  maxBendPointOffsetYPixels=0;
  for (  Edge edge : graph.getAllEdges()) {
    if (edge.getNode1() instanceof ADataNode && edge.getNode2() instanceof ADataNode) {
      int bendPointOffsetYPixels=insideLayerEdgeRoutingStrategy.calcEdgeBendPointYOffsetPixels(edge.getNode1(),edge.getNode2());
      if (bendPointOffsetYPixels > maxBendPointOffsetYPixels) {
        maxBendPointOffsetYPixels=bendPointOffsetYPixels;
      }
    }
  }
  boolean isUpsideDown=false;
  float dataNodesBottomY=0;
  float expandDirectorFactor=1;
  if (view.isRenderedRemote()) {
    isUpsideDown=false;
    dataNodesBottomY=(float)area.getMaxY();
    expandDirectorFactor=-1;
  }
 else {
    isUpsideDown=true;
    dataNodesBottomY=(float)area.getMinY() + maxBendPointOffsetYPixels;
  }
  for (  IDVINode node : sortedDataNodes) {
    if (!node.isCustomPosition()) {
      setNodePosition(node,new Point2D.Float(currentDataNodePositionX + node.getWidthPixels() / 2.0f,dataNodesBottomY + node.getHeightPixels() / 2.0f * expandDirectorFactor));
    }
    currentDataNodePositionX+=node.getWidthPixels() + dataNodeSpacingPixels;
    node.setUpsideDown(isUpsideDown);
  }
  float viewNodeSpacingPixels=(float)(area.getWidth() - summedViewNodesWidthPixels) / (float)(viewNodes.size() - 1);
  viewNodeSpacingPixels=Math.max(viewNodeSpacingPixels,MIN_NODE_SPACING_PIXELS);
  viewNodeSpacingPixels=Math.min(viewNodeSpacingPixels,MAX_NODE_SPACING_PIXELS);
  float currentViewNodePositionX=(float)Math.max((float)(area.getMinX() + (area.getWidth() - summedViewNodesWidthPixels - (viewNodes.size() - 1) * viewNodeSpacingPixels) / 2.0f),area.getMinX());
  float viewNodesTopY=(float)area.getHeight() + (float)area.getMinY();
  for (  IDVINode node : sortedViewNodes) {
    if (!node.isCustomPosition()) {
      setNodePosition(node,new Point2D.Float(currentViewNodePositionX + node.getWidthPixels() / 2.0f,viewNodesTopY - node.getHeightPixels() / 2.0f));
    }
    currentViewNodePositionX+=node.getWidthPixels() + viewNodeSpacingPixels;
  }
  for (  IDVINode node : graph.getNodes()) {
    Point2D position=getNodePosition(node);
    float relativePosX=(float)position.getX() / (float)area.getWidth();
    relativeNodeXCoordinates.put(node,relativePosX);
  }
}",0.9855522388059702
57534,"/** 
 * Creates a composite that contains the   {@link #tableInfoLabel} and the{@link #showAllColumnsButton}.
 * @param parent
 */
protected void createTableInfo(Composite parent){
  Composite tableInfoComposite=new Composite(parent,SWT.NONE);
  tableInfoComposite.setLayout(new GridLayout(4,false));
  tableInfoComposite.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,false,true,2,1));
  tableInfoLabel=new Label(tableInfoComposite,SWT.NONE);
  GridData gd=new GridData(SWT.FILL,SWT.FILL,false,true);
  gd.widthHint=100;
  tableInfoLabel.setLayoutData(gd);
  Label separator=new Label(tableInfoComposite,SWT.SEPARATOR | SWT.VERTICAL);
  GridData separatorGridData=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  separatorGridData.heightHint=16;
  separator.setLayoutData(separatorGridData);
  showAllColumnsButton=new Button(tableInfoComposite,SWT.CHECK);
  showAllColumnsButton.setSelection(false);
  showAllColumnsButton.setEnabled(false);
  showAllColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      showAllColumns=showAllColumnsButton.getSelection();
      previewTableManager.createDataPreviewTableFromDataMatrix(dataMatrix,showAllColumns ? totalNumberOfColumns : MAX_PREVIEW_TABLE_COLUMNS);
      selectedColumnButtons=previewTableManager.getSelectedColumnButtons();
      determineRowIDType();
      previewTableManager.updateTableColors(groupingParseSpecification.getNumberOfHeaderLines(),-1,groupingParseSpecification.getColumnOfRowIds() + 1);
      updateWidgetsAccordingToTableChanges();
      showAllColumnsButton.setSelection(showAllColumns);
    }
  }
);
  Label showAllColumnsLabel=new Label(tableInfoComposite,SWT.NONE);
  showAllColumnsLabel.setText(""String_Node_Str"");
}","/** 
 * Creates a composite that contains the   {@link #tableInfoLabel} and the{@link #showAllColumnsButton}.
 * @param parent
 */
protected void createTableInfo(Composite parent){
  Composite tableInfoComposite=new Composite(parent,SWT.NONE);
  tableInfoComposite.setLayout(new GridLayout(4,false));
  tableInfoComposite.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,false,true,2,1));
  tableInfoLabel=new Label(tableInfoComposite,SWT.NONE);
  tableInfoLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Label separator=new Label(tableInfoComposite,SWT.SEPARATOR | SWT.VERTICAL);
  GridData separatorGridData=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  separatorGridData.heightHint=16;
  separator.setLayoutData(separatorGridData);
  showAllColumnsButton=new Button(tableInfoComposite,SWT.CHECK);
  showAllColumnsButton.setText(""String_Node_Str"");
  showAllColumnsButton.setSelection(false);
  showAllColumnsButton.setEnabled(false);
  showAllColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      showAllColumns=showAllColumnsButton.getSelection();
      previewTableManager.createDataPreviewTableFromDataMatrix(dataMatrix,showAllColumns ? totalNumberOfColumns : MAX_PREVIEW_TABLE_COLUMNS);
      selectedColumnButtons=previewTableManager.getSelectedColumnButtons();
      determineRowIDType();
      previewTableManager.updateTableColors(groupingParseSpecification.getNumberOfHeaderLines(),-1,groupingParseSpecification.getColumnOfRowIds() + 1);
      updateWidgetsAccordingToTableChanges();
      showAllColumnsButton.setSelection(showAllColumns);
    }
  }
);
}",0.9142857142857144
57535,"protected void updateWidgetsAccordingToTableChanges(){
  columnOfRowIDSpinner.setMaximum(totalNumberOfColumns);
  numHeaderRowsSpinner.setMaximum(totalNumberOfRows);
  showAllColumnsButton.setEnabled(true);
  tableInfoLabel.setText((previewTable.getColumnCount() - 1) + ""String_Node_Str"" + totalNumberOfColumns+ ""String_Node_Str"");
}","protected void updateWidgetsAccordingToTableChanges(){
  columnOfRowIDSpinner.setMaximum(totalNumberOfColumns);
  numHeaderRowsSpinner.setMaximum(totalNumberOfRows);
  showAllColumnsButton.setEnabled(true);
  tableInfoLabel.setText((previewTable.getColumnCount() - 1) + ""String_Node_Str"" + totalNumberOfColumns+ ""String_Node_Str"");
  tableInfoLabel.pack();
  tableInfoLabel.getParent().pack(true);
  parentComposite.pack(true);
  parentComposite.layout(true);
}",0.8387909319899244
57536,"/** 
 * Creates a composite that contains the   {@link #tableInfoLabel} and the{@link #showAllColumnsButton}.
 * @param parent
 */
protected void createTableInfo(Composite parent){
  Composite tableInfoComposite=new Composite(parent,SWT.NONE);
  tableInfoComposite.setLayout(new GridLayout(4,false));
  tableInfoComposite.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,false,true,2,1));
  tableInfoLabel=new Label(tableInfoComposite,SWT.NONE);
  Label separator=new Label(tableInfoComposite,SWT.SEPARATOR | SWT.VERTICAL);
  GridData separatorGridData=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  separatorGridData.heightHint=16;
  separator.setLayoutData(separatorGridData);
  showAllColumnsButton=new Button(tableInfoComposite,SWT.CHECK);
  showAllColumnsButton.setSelection(false);
  showAllColumnsButton.setEnabled(false);
  showAllColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      showAllColumns=showAllColumnsButton.getSelection();
      previewTableManager.createDataPreviewTableFromDataMatrix(dataMatrix,showAllColumns ? totalNumberOfColumns : MAX_PREVIEW_TABLE_COLUMNS);
      selectedColumnButtons=previewTableManager.getSelectedColumnButtons();
      previewTableManager.updateTableColors(dataSetDescription.getNumberOfHeaderLines(),dataSetDescription.getRowOfColumnIDs() + 1,dataSetDescription.getColumnOfRowIds() + 1);
      updateWidgetsAccordingToTableChanges();
      showAllColumnsButton.setSelection(showAllColumns);
    }
  }
);
  Label showAllColumnsLabel=new Label(tableInfoComposite,SWT.NONE);
  showAllColumnsLabel.setText(""String_Node_Str"");
}","/** 
 * Creates a composite that contains the   {@link #tableInfoLabel} and the{@link #showAllColumnsButton}.
 * @param parent
 */
protected void createTableInfo(Composite parent){
  Composite tableInfoComposite=new Composite(parent,SWT.NONE);
  tableInfoComposite.setLayout(new GridLayout(3,false));
  tableInfoComposite.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,false,true,2,1));
  tableInfoLabel=new Label(tableInfoComposite,SWT.NONE);
  tableInfoLabel.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,false,true));
  Label separator=new Label(tableInfoComposite,SWT.SEPARATOR | SWT.VERTICAL);
  GridData separatorGridData=new GridData(SWT.RIGHT,SWT.CENTER,false,false);
  separatorGridData.heightHint=16;
  separator.setLayoutData(separatorGridData);
  showAllColumnsButton=new Button(tableInfoComposite,SWT.CHECK);
  showAllColumnsButton.setSelection(false);
  showAllColumnsButton.setText(""String_Node_Str"");
  showAllColumnsButton.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,false,true));
  showAllColumnsButton.setEnabled(false);
  showAllColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      showAllColumns=showAllColumnsButton.getSelection();
      previewTableManager.createDataPreviewTableFromDataMatrix(dataMatrix,showAllColumns ? totalNumberOfColumns : MAX_PREVIEW_TABLE_COLUMNS);
      selectedColumnButtons=previewTableManager.getSelectedColumnButtons();
      previewTableManager.updateTableColors(dataSetDescription.getNumberOfHeaderLines(),dataSetDescription.getRowOfColumnIDs() + 1,dataSetDescription.getColumnOfRowIds() + 1);
      updateWidgetsAccordingToTableChanges();
      showAllColumnsButton.setSelection(showAllColumns);
    }
  }
);
}",0.8997641509433962
57537,"protected void updateWidgetsAccordingToTableChanges(){
  columnOfRowIDSpinner.setMaximum(totalNumberOfColumns);
  rowOfColumnIDSpinner.setMaximum(totalNumberOfRows);
  numHeaderRowsSpinner.setMaximum(totalNumberOfRows);
  showAllColumnsButton.setEnabled(true);
  tableInfoLabel.setText((previewTable.getColumnCount() - 1) + ""String_Node_Str"" + totalNumberOfColumns+ ""String_Node_Str"");
}","protected void updateWidgetsAccordingToTableChanges(){
  columnOfRowIDSpinner.setMaximum(totalNumberOfColumns);
  rowOfColumnIDSpinner.setMaximum(totalNumberOfRows);
  numHeaderRowsSpinner.setMaximum(totalNumberOfRows);
  showAllColumnsButton.setEnabled(true);
  tableInfoLabel.setText((previewTable.getColumnCount() - 1) + ""String_Node_Str"" + totalNumberOfColumns+ ""String_Node_Str"");
  tableInfoLabel.pack();
  tableInfoLabel.getParent().pack(true);
  parentComposite.pack(true);
  parentComposite.layout(true);
}",0.8580931263858093
57538,"/** 
 * Creates a composite that contains the   {@link #tableInfoLabel} and the{@link #showAllColumnsButton}.
 * @param parent
 */
protected void createTableInfo(Composite parent){
  Composite tableInfoComposite=new Composite(parent,SWT.NONE);
  tableInfoComposite.setLayout(new GridLayout(4,false));
  tableInfoComposite.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,false,true,2,1));
  tableInfoLabel=new Label(tableInfoComposite,SWT.NONE);
  Label separator=new Label(tableInfoComposite,SWT.SEPARATOR | SWT.VERTICAL);
  GridData separatorGridData=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  separatorGridData.heightHint=16;
  separator.setLayoutData(separatorGridData);
  showAllColumnsButton=new Button(tableInfoComposite,SWT.CHECK);
  showAllColumnsButton.setSelection(false);
  showAllColumnsButton.setEnabled(false);
  showAllColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      showAllColumns=showAllColumnsButton.getSelection();
      previewTableManager.createDataPreviewTableFromDataMatrix(dataMatrix,showAllColumns ? totalNumberOfColumns : MAX_PREVIEW_TABLE_COLUMNS);
      selectedColumnButtons=previewTableManager.getSelectedColumnButtons();
      determineIDTypes();
      previewTableManager.updateTableColors(dataSetDescription.getNumberOfHeaderLines(),dataSetDescription.getRowOfColumnIDs() + 1,dataSetDescription.getColumnOfRowIds() + 1);
      updateWidgetsAccordingToTableChanges();
      showAllColumnsButton.setSelection(showAllColumns);
    }
  }
);
  Label showAllColumnsLabel=new Label(tableInfoComposite,SWT.NONE);
  showAllColumnsLabel.setText(""String_Node_Str"");
}","/** 
 * Creates a composite that contains the   {@link #tableInfoLabel} and the{@link #showAllColumnsButton}.
 * @param parent
 */
protected void createTableInfo(Composite parent){
  Composite tableInfoComposite=new Composite(parent,SWT.NONE);
  tableInfoComposite.setLayout(new GridLayout(4,false));
  tableInfoComposite.setLayoutData(new GridData(SWT.RIGHT,SWT.FILL,false,true,2,1));
  tableInfoLabel=new Label(tableInfoComposite,SWT.NONE);
  Label separator=new Label(tableInfoComposite,SWT.SEPARATOR | SWT.VERTICAL);
  GridData separatorGridData=new GridData(SWT.CENTER,SWT.CENTER,false,false);
  separatorGridData.heightHint=16;
  separator.setLayoutData(separatorGridData);
  showAllColumnsButton=new Button(tableInfoComposite,SWT.CHECK);
  showAllColumnsButton.setSelection(false);
  showAllColumnsButton.setEnabled(false);
  showAllColumnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      showAllColumns=showAllColumnsButton.getSelection();
      previewTableManager.createDataPreviewTableFromDataMatrix(dataMatrix,showAllColumns ? totalNumberOfColumns : MAX_PREVIEW_TABLE_COLUMNS);
      selectedColumnButtons=previewTableManager.getSelectedColumnButtons();
      previewTableManager.updateTableColors(dataSetDescription.getNumberOfHeaderLines(),dataSetDescription.getRowOfColumnIDs() + 1,dataSetDescription.getColumnOfRowIds() + 1);
      updateWidgetsAccordingToTableChanges();
      showAllColumnsButton.setSelection(showAllColumns);
    }
  }
);
  Label showAllColumnsLabel=new Label(tableInfoComposite,SWT.NONE);
  showAllColumnsLabel.setText(""String_Node_Str"");
}",0.9921828021647624
57539,"/** 
 * <p> Initializes   {@link IDType}s and   {@link IDCategory} based on theinformation provides in the  {@link DataSetDescription}. </p> <p> Creates default values as specified in the   {@link IDSpecification}, or creates default values for <code>IDSpecification</code>s themselves if necessary. </p>
 * @param dataSetDescription the  {@link DataSetDescription} containing the externallyspecified information about IDs
 * @return the {@link DataSetDescription} enriched by default values
 */
public static DataSetDescription initIDs(DataSetDescription dataSetDescription){
  String dimensionIDCategoryName;
  String dimensionIDTypeName;
  String recordIDCategoryName;
  String recordIDTypeName;
  IDSpecification rowIDSpecification=dataSetDescription.getRowIDSpecification();
  if (rowIDSpecification == null) {
    rowIDSpecification=new IDSpecification();
    rowIDSpecification.setIDSpecification(dataSetDescription.getDataSetName() + ""String_Node_Str"",dataSetDescription.getDataSetName() + ""String_Node_Str"");
    dataSetDescription.setRowIDSpecification(rowIDSpecification);
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + dataSetDescription.getDataSetName()));
  }
  IDSpecification columnIDSpecification=dataSetDescription.getColumnIDSpecification();
  if (columnIDSpecification == null) {
    columnIDSpecification=new IDSpecification();
    columnIDSpecification.setIDSpecification(dataSetDescription.getDataSetName() + ""String_Node_Str"",dataSetDescription.getDataSetName() + ""String_Node_Str"");
    dataSetDescription.setColumnIDSpecification(columnIDSpecification);
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + dataSetDescription.getDataSetName()));
  }
  if (rowIDSpecification.getIdCategory() == null) {
    rowIDSpecification.setIdCategory(rowIDSpecification.getIdType());
  }
  if (columnIDSpecification.getIdCategory() == null) {
    columnIDSpecification.setIdCategory(columnIDSpecification.getIdType());
  }
  if (dataSetDescription.isTransposeMatrix()) {
    dimensionIDTypeName=rowIDSpecification.getIdType();
    dimensionIDCategoryName=rowIDSpecification.getIdCategory();
    recordIDTypeName=columnIDSpecification.getIdType();
    recordIDCategoryName=columnIDSpecification.getIdCategory();
  }
 else {
    dimensionIDTypeName=columnIDSpecification.getIdType();
    dimensionIDCategoryName=columnIDSpecification.getIdCategory();
    recordIDTypeName=rowIDSpecification.getIdType();
    recordIDCategoryName=rowIDSpecification.getIdCategory();
  }
  if (dimensionIDCategoryName == null)   dimensionIDCategoryName=dimensionIDTypeName;
  if (recordIDCategoryName == null)   recordIDCategoryName=recordIDTypeName;
  IDCategory dimensionIDCategory=IDCategory.getIDCategory(dimensionIDCategoryName);
  if (dimensionIDCategory == null) {
    dimensionIDCategory=IDCategory.registerCategory(dimensionIDCategoryName);
  }
  IDCategory recodIDCategory=IDCategory.getIDCategory(recordIDCategoryName);
  if (recodIDCategory == null) {
    recodIDCategory=IDCategory.registerCategory(recordIDCategoryName);
  }
  IDType recordIDType=IDType.getIDType(recordIDTypeName);
  if (recordIDType == null) {
    recordIDType=IDType.registerType(recordIDTypeName,recodIDCategory,EDataType.STRING);
  }
  IDType dimensionIDType=IDType.getIDType(dimensionIDTypeName);
  if (dimensionIDType == null) {
    dimensionIDType=IDType.registerType(dimensionIDTypeName,dimensionIDCategory,EDataType.STRING);
  }
  return dataSetDescription;
}","/** 
 * <p> Initializes   {@link IDType}s and   {@link IDCategory} based on theinformation provides in the  {@link DataSetDescription}. </p> <p> Creates default values as specified in the   {@link IDSpecification}, or creates default values for <code>IDSpecification</code>s themselves if necessary. </p>
 * @param dataSetDescription the  {@link DataSetDescription} containing the externallyspecified information about IDs
 * @return the {@link DataSetDescription} enriched by default values
 */
public static DataSetDescription initIDs(DataSetDescription dataSetDescription){
  String dimensionIDCategoryName;
  String dimensionIDTypeName;
  String recordIDCategoryName;
  String recordIDTypeName;
  IDTypeParsingRules recordIDTypeParsingRules;
  IDTypeParsingRules dimensionIDTypeParsingRules;
  IDSpecification rowIDSpecification=dataSetDescription.getRowIDSpecification();
  if (rowIDSpecification == null) {
    rowIDSpecification=new IDSpecification();
    rowIDSpecification.setIDSpecification(dataSetDescription.getDataSetName() + ""String_Node_Str"",dataSetDescription.getDataSetName() + ""String_Node_Str"");
    dataSetDescription.setRowIDSpecification(rowIDSpecification);
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + dataSetDescription.getDataSetName()));
  }
  IDSpecification columnIDSpecification=dataSetDescription.getColumnIDSpecification();
  if (columnIDSpecification == null) {
    columnIDSpecification=new IDSpecification();
    columnIDSpecification.setIDSpecification(dataSetDescription.getDataSetName() + ""String_Node_Str"",dataSetDescription.getDataSetName() + ""String_Node_Str"");
    dataSetDescription.setColumnIDSpecification(columnIDSpecification);
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + dataSetDescription.getDataSetName()));
  }
  if (rowIDSpecification.getIdCategory() == null) {
    rowIDSpecification.setIdCategory(rowIDSpecification.getIdType());
  }
  if (columnIDSpecification.getIdCategory() == null) {
    columnIDSpecification.setIdCategory(columnIDSpecification.getIdType());
  }
  if (dataSetDescription.isTransposeMatrix()) {
    dimensionIDTypeName=rowIDSpecification.getIdType();
    dimensionIDCategoryName=rowIDSpecification.getIdCategory();
    dimensionIDTypeParsingRules=rowIDSpecification.getIdTypeParsingRules();
    recordIDTypeName=columnIDSpecification.getIdType();
    recordIDCategoryName=columnIDSpecification.getIdCategory();
    recordIDTypeParsingRules=columnIDSpecification.getIdTypeParsingRules();
  }
 else {
    dimensionIDTypeName=columnIDSpecification.getIdType();
    dimensionIDCategoryName=columnIDSpecification.getIdCategory();
    dimensionIDTypeParsingRules=columnIDSpecification.getIdTypeParsingRules();
    recordIDTypeName=rowIDSpecification.getIdType();
    recordIDCategoryName=rowIDSpecification.getIdCategory();
    recordIDTypeParsingRules=rowIDSpecification.getIdTypeParsingRules();
  }
  if (dimensionIDCategoryName == null)   dimensionIDCategoryName=dimensionIDTypeName;
  if (recordIDCategoryName == null)   recordIDCategoryName=recordIDTypeName;
  IDCategory dimensionIDCategory=IDCategory.getIDCategory(dimensionIDCategoryName);
  if (dimensionIDCategory == null) {
    dimensionIDCategory=IDCategory.registerCategory(dimensionIDCategoryName);
  }
  IDCategory recodIDCategory=IDCategory.getIDCategory(recordIDCategoryName);
  if (recodIDCategory == null) {
    recodIDCategory=IDCategory.registerCategory(recordIDCategoryName);
  }
  IDType recordIDType=IDType.getIDType(recordIDTypeName);
  if (recordIDType == null) {
    recordIDType=IDType.registerType(recordIDTypeName,recodIDCategory,EDataType.STRING);
    recordIDType.setIdTypeParsingRules(recordIDTypeParsingRules);
  }
  IDType dimensionIDType=IDType.getIDType(dimensionIDTypeName);
  if (dimensionIDType == null) {
    dimensionIDType=IDType.registerType(dimensionIDTypeName,dimensionIDCategory,EDataType.STRING);
    dimensionIDType.setIdTypeParsingRules(dimensionIDTypeParsingRules);
  }
  return dataSetDescription;
}",0.8986585203878337
57540,"/** 
 * Starts the plugin org.caleydo.plex, retrieves the deskotheque-manager from it and starts this application as a groupware-client.
 * @param serverAddress TODO should better be obtained from deskotheque
 * @return intiialization data retrieved from the groupware server to complete application startup
 */
public static SerializationData startPlexClient(String serverAddress){
  IGroupwareManager groupwareManager=GroupwareUtils.createDeskothequeManager();
  GeneralManager.get().setGroupwareManager(groupwareManager);
  groupwareManager.setServerAddress(serverAddress);
  groupwareManager.startClient();
  GeneralManager.get().getViewManager().getDisplayLoopExecution().executeMultiple(groupwareManager);
  return (groupwareManager.getSerializationData());
}","/** 
 * Starts the plugin org.caleydo.plex, retrieves the deskotheque-manager from it and starts this application as a groupware-client.
 * @param serverAddress TODO should better be obtained from deskotheque
 * @return initialization data retrieved from the groupware server to complete application startup
 */
public static SerializationData startPlexClient(String serverAddress){
  IGroupwareManager groupwareManager=GroupwareUtils.createDeskothequeManager();
  GeneralManager.get().setGroupwareManager(groupwareManager);
  groupwareManager.setServerAddress(serverAddress);
  groupwareManager.startClient();
  GeneralManager.get().getViewManager().getDisplayLoopExecution().executeMultiple(groupwareManager);
  return (groupwareManager.getSerializationData());
}",0.9973856209150328
57541,"public void shutdown(){
  GeneralManager generalManager=GeneralManager.get();
  try {
    Logger.log(new Status(IStatus.WARNING,this.toString(),""String_Node_Str""));
    generalManager.getPreferenceStore().save();
  }
 catch (  IOException ioException) {
    throw new IllegalStateException(""String_Node_Str"" + PreferenceManager.getPreferencePath(),ioException);
  }
  IGroupwareManager groupwareManager=generalManager.getGroupwareManager();
  if (groupwareManager != null) {
    groupwareManager.stop();
    generalManager.setGroupwareManager(null);
  }
  generalManager.getViewManager().stopAnimator();
  Logger.log(new Status(IStatus.INFO,this.toString(),""String_Node_Str""));
  System.exit(0);
}","public void shutdown(){
  GeneralManager generalManager=GeneralManager.get();
  try {
    Logger.log(new Status(IStatus.WARNING,this.toString(),""String_Node_Str""));
    generalManager.getPreferenceStore().save();
  }
 catch (  IOException ioException) {
    throw new IllegalStateException(""String_Node_Str"" + PreferenceManager.getPreferencePath(),ioException);
  }
  IGroupwareManager groupwareManager=generalManager.getGroupwareManager();
  if (groupwareManager != null) {
    groupwareManager.stop();
    generalManager.setGroupwareManager(null);
  }
  generalManager.getViewManager().stopAnimator();
  System.out.println(jogamp.nativewindow.x11.X11Util.getPendingDisplayConnectionNumber());
  jogamp.nativewindow.x11.X11Util.closeDisplay(jogamp.nativewindow.x11.X11Util.getPendingDisplayConnectionNumber());
  Logger.log(new Status(IStatus.INFO,this.toString(),""String_Node_Str""));
  System.exit(0);
}",0.8701622971285893
57542,"/** 
 * Handle view exceptions.
 * @param exception
 */
public void handleViewException(RuntimeException exception,final AGLView glEventListener){
  Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"" + exception.getMessage(),exception));
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      IViewPart viewToClose=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(glEventListener.getViewType());
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().hideView(viewToClose);
    }
  }
);
}","/** 
 * Handle view exceptions.
 * @param exception
 */
public void handleViewException(RuntimeException exception,final AGLView glEventListener){
  Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"" + exception.getMessage(),exception));
  GeneralManager.get().getViewManager().unregisterGLCanvas(glEventListener.getParentGLCanvas());
  PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      CaleydoRCPViewPart viewToClose=ViewManager.get().getViewPartFromView(glEventListener);
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().hideView(viewToClose);
      MessageBox messageBox=new MessageBox(new Shell(),SWT.OK);
      messageBox.setText(""String_Node_Str"");
      messageBox.setMessage(""String_Node_Str"" + glEventListener.getViewName() + ""String_Node_Str"");
      messageBox.open();
    }
  }
);
}",0.6450742240215924
57543,"@Override public void run(){
  IViewPart viewToClose=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(glEventListener.getViewType());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().hideView(viewToClose);
}","@Override public void run(){
  CaleydoRCPViewPart viewToClose=ViewManager.get().getViewPartFromView(glEventListener);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().hideView(viewToClose);
  MessageBox messageBox=new MessageBox(new Shell(),SWT.OK);
  messageBox.setText(""String_Node_Str"");
  messageBox.setMessage(""String_Node_Str"" + glEventListener.getViewName() + ""String_Node_Str"");
  messageBox.open();
}",0.4238026124818577
57544,"/** 
 * Constructor. If the glCanvas object is null - then the view is rendered remote.
 * @param viewType TODO
 * @param viewName TODO
 */
protected AGLView(GLCanvas glCanvas,final Composite parentComposite,final ViewFrustum viewFrustum,String viewType,String viewName){
  super(GeneralManager.get().getIDCreator().createID(ManagedObjectType.GL_VIEW),parentComposite,viewType,viewName);
  GeneralManager.get().getViewManager().registerGLView(this);
  parentGLCanvas=glCanvas;
  glMouseListener=new GLMouseListener();
  glMouseListener.setNavigationModes(false,false,false);
  glCanvas.addMouseListener(glMouseListener);
  glCanvas.addMouseMotionListener(glMouseListener);
  glCanvas.addMouseWheelListener(glMouseListener);
  glCanvas.addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
    }
    @Override public void focusGained(    FocusEvent e){
      focusGained=true;
    }
  }
);
  idPickingListeners=new HashMap<String,HashMap<Integer,Set<IPickingListener>>>();
  typePickingListeners=new HashMap<String,Set<IPickingListener>>();
  this.viewFrustum=viewFrustum;
  viewCamera=new ViewCameraBase(uniqueID);
  pickingManager=generalManager.getViewManager().getPickingManager();
  textureManager=new TextureManager();
  glMouseWheelListener=new GLMouseWheelListener(this);
  pixelGLConverter=new PixelGLConverter(viewFrustum,parentGLCanvas);
  mouseWheelListeners=new HashSet<IMouseWheelHandler>();
}","/** 
 * Constructor. If the glCanvas object is null - then the view is rendered remote.
 * @param viewType TODO
 * @param viewName TODO
 */
protected AGLView(GLCanvas glCanvas,final Composite parentComposite,final ViewFrustum viewFrustum,String viewType,String viewName){
  super(GeneralManager.get().getIDCreator().createID(ManagedObjectType.GL_VIEW),parentComposite,viewType,viewName);
  parentGLCanvas=glCanvas;
  glMouseListener=new GLMouseListener();
  glMouseListener.setNavigationModes(false,false,false);
  glCanvas.addMouseListener(glMouseListener);
  glCanvas.addMouseMotionListener(glMouseListener);
  glCanvas.addMouseWheelListener(glMouseListener);
  glCanvas.addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
    }
    @Override public void focusGained(    FocusEvent e){
      focusGained=true;
    }
  }
);
  idPickingListeners=new HashMap<String,HashMap<Integer,Set<IPickingListener>>>();
  typePickingListeners=new HashMap<String,Set<IPickingListener>>();
  this.viewFrustum=viewFrustum;
  viewCamera=new ViewCameraBase(uniqueID);
  pickingManager=generalManager.getViewManager().getPickingManager();
  textureManager=new TextureManager();
  glMouseWheelListener=new GLMouseWheelListener(this);
  pixelGLConverter=new PixelGLConverter(viewFrustum,parentGLCanvas);
  mouseWheelListeners=new HashSet<IMouseWheelHandler>();
}",0.978076379066478
57545,"@Override public void initialize(){
  registerEventListeners();
  if (glRemoteRenderingView == null)   GeneralManager.get().getViewManager().registerGLEventListenerByGLCanvas(parentGLCanvas,this);
}","@Override public void initialize(){
  GeneralManager.get().getViewManager().registerGLView(this);
  registerEventListeners();
  if (glRemoteRenderingView == null)   GeneralManager.get().getViewManager().registerGLEventListenerByGLCanvas(parentGLCanvas,this);
}",0.8646288209606987
57546,"@Override public Set<IDataDomain> getDataDomains(){
  Set<IDataDomain> dataDomains=new HashSet<IDataDomain>();
  for (  DataContainer dataContainer : dataContainers) {
    if (dataContainer instanceof PathwayDataContainer) {
      dataDomains.add(((PathwayDataContainer)dataContainer).getPathwayDataDomain());
    }
 else {
      dataDomains.add(dataContainer.getDataDomain());
    }
  }
  return dataDomains;
}","@Override public Set<IDataDomain> getDataDomains(){
  Set<IDataDomain> dataDomains=new HashSet<IDataDomain>();
  if (dataContainers == null) {
    System.out.println(""String_Node_Str"");
    return dataDomains;
  }
  for (  DataContainer dataContainer : dataContainers) {
    if (dataContainer instanceof PathwayDataContainer) {
      dataDomains.add(((PathwayDataContainer)dataContainer).getPathwayDataDomain());
    }
 else {
      dataDomains.add(dataContainer.getDataDomain());
    }
  }
  return dataDomains;
}",0.8886486486486487
57547,"public static String convertID(String sourceID,IDTypeParsingRules idTypeParsingRules){
  if (idTypeParsingRules == null)   return sourceID;
  if (idTypeParsingRules.getReplacingExpression() != null) {
    sourceID=sourceID.replaceAll(idTypeParsingRules.getReplacingExpression(),idTypeParsingRules.getReplacementString());
  }
  if (idTypeParsingRules.getSubStringExpression() != null) {
    String[] splitID=sourceID.split(idTypeParsingRules.getSubStringExpression());
    for (    String result : splitID) {
      if (!result.isEmpty()) {
        sourceID=result;
        break;
      }
    }
  }
  return sourceID;
}","/** 
 * Converts a sourceID based on the   {@link IDTypeParsingRules} specified andreturns a new string with the converted ID
 * @param sourceID
 * @param idTypeParsingRules
 * @return a new String with the converted ID
 */
public static String convertID(String sourceID,IDTypeParsingRules idTypeParsingRules){
  if (idTypeParsingRules == null)   return sourceID;
  if (idTypeParsingRules.getReplacingExpression() != null) {
    sourceID=sourceID.replaceAll(idTypeParsingRules.getReplacingExpression(),idTypeParsingRules.getReplacementString());
  }
  if (idTypeParsingRules.getSubStringExpression() != null) {
    String[] splitID=sourceID.split(idTypeParsingRules.getSubStringExpression());
    for (    String result : splitID) {
      if (!result.isEmpty()) {
        sourceID=result;
        break;
      }
    }
  }
  return sourceID;
}",0.8465753424657534
57548,"@Override protected void parseFile(BufferedReader reader) throws IOException {
  initializeDataContainers();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + dataSetDescription.getDataSetName());
  float progressBarFactor=100f / numberOfLinesInFile;
  for (int countHeaderLines=0; countHeaderLines < dataSetDescription.getNumberOfHeaderLines(); countHeaderLines++) {
    reader.readLine();
  }
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  int lineCounter=0;
  String numberParsingErrorMessage=""String_Node_Str"" + dataSetDescription.getDataSetName() + ""String_Node_Str""+ filePath+ ""String_Node_Str"";
  boolean parsingErrorOccured=false;
  IDSpecification rowIDSpecification=dataSetDescription.getRowIDSpecification();
  IDCategory rowIDCategory=IDCategory.getIDCategory(rowIDSpecification.getIdCategory());
  IDType fromIDType=IDType.getIDType(rowIDSpecification.getIdType());
  IDType toIDType;
  if (dataDomain.isColumnDimension())   toIDType=dataDomain.getRecordIDType();
 else   toIDType=dataDomain.getDimensionIDType();
  IDMappingManager rowIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(rowIDCategory);
  int columnOfRowIDs=dataSetDescription.getColumnOfRowIds();
  MappingType mappingType=rowIDMappingManager.createMap(fromIDType,toIDType,false,true);
  IDTypeParsingRules parsingRules=null;
  if (rowIDSpecification.getIdTypeParsingRules() != null)   parsingRules=rowIDSpecification.getIdTypeParsingRules();
 else   if (toIDType.getIdTypeParsingRules() != null)   parsingRules=toIDType.getIdTypeParsingRules();
  String line;
  while ((line=reader.readLine()) != null) {
    String splitLine[]=line.split(dataSetDescription.getDelimiter());
    String id=splitLine[columnOfRowIDs];
    convertID(id,parsingRules);
    rowIDMappingManager.addMapping(mappingType,id,lineCounter - startParsingAtLine);
    for (int count=0; count < parsingPattern.size(); count++) {
      ColumnDescription column=parsingPattern.get(count);
      String cellContent=splitLine[column.getColumn()];
      if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        float[] targetColumn=(float[])targetColumns.get(count);
        Float value;
        try {
          value=Float.parseFloat(cellContent);
        }
 catch (        NumberFormatException nfe) {
          parsingErrorOccured=true;
          numberParsingErrorMessage+=""String_Node_Str"" + (column.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
          value=Float.NaN;
        }
        if (lineCounter < targetColumn.length) {
          targetColumn[lineCounter]=value;
        }
 else {
          System.out.println(""String_Node_Str"" + lineCounter + ""String_Node_Str""+ count);
        }
      }
 else       if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        @SuppressWarnings(""String_Node_Str"") ArrayList<String> targetColumn=(ArrayList<String>)targetColumns.get(count);
        targetColumn.add(splitLine[column.getColumn()]);
      }
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    lineCounter++;
  }
  if (parsingErrorOccured) {
    Logger.log(new Status(IStatus.ERROR,GeneralManager.PLUGIN_ID,numberParsingErrorMessage));
  }
}","@Override protected void parseFile(BufferedReader reader) throws IOException {
  initializeDataContainers();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + dataSetDescription.getDataSetName());
  float progressBarFactor=100f / numberOfLinesInFile;
  for (int countHeaderLines=0; countHeaderLines < dataSetDescription.getNumberOfHeaderLines(); countHeaderLines++) {
    reader.readLine();
  }
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  int lineCounter=0;
  String numberParsingErrorMessage=""String_Node_Str"" + dataSetDescription.getDataSetName() + ""String_Node_Str""+ filePath+ ""String_Node_Str"";
  boolean parsingErrorOccured=false;
  IDSpecification rowIDSpecification=dataSetDescription.getRowIDSpecification();
  IDCategory rowIDCategory=IDCategory.getIDCategory(rowIDSpecification.getIdCategory());
  IDType fromIDType=IDType.getIDType(rowIDSpecification.getIdType());
  IDType toIDType;
  if (dataDomain.isColumnDimension())   toIDType=dataDomain.getRecordIDType();
 else   toIDType=dataDomain.getDimensionIDType();
  IDMappingManager rowIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(rowIDCategory);
  int columnOfRowIDs=dataSetDescription.getColumnOfRowIds();
  MappingType mappingType=rowIDMappingManager.createMap(fromIDType,toIDType,false,true);
  IDTypeParsingRules parsingRules=null;
  if (rowIDSpecification.getIdTypeParsingRules() != null)   parsingRules=rowIDSpecification.getIdTypeParsingRules();
 else   if (toIDType.getIdTypeParsingRules() != null)   parsingRules=toIDType.getIdTypeParsingRules();
  String line;
  while ((line=reader.readLine()) != null) {
    String splitLine[]=line.split(dataSetDescription.getDelimiter());
    String id=splitLine[columnOfRowIDs];
    id=convertID(id,parsingRules);
    rowIDMappingManager.addMapping(mappingType,id,lineCounter - startParsingAtLine);
    for (int count=0; count < parsingPattern.size(); count++) {
      ColumnDescription column=parsingPattern.get(count);
      String cellContent=splitLine[column.getColumn()];
      if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        float[] targetColumn=(float[])targetColumns.get(count);
        Float value;
        try {
          value=Float.parseFloat(cellContent);
        }
 catch (        NumberFormatException nfe) {
          parsingErrorOccured=true;
          numberParsingErrorMessage+=""String_Node_Str"" + (column.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
          value=Float.NaN;
        }
        if (lineCounter < targetColumn.length) {
          targetColumn[lineCounter]=value;
        }
 else {
          System.out.println(""String_Node_Str"" + lineCounter + ""String_Node_Str""+ count);
        }
      }
 else       if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        @SuppressWarnings(""String_Node_Str"") ArrayList<String> targetColumn=(ArrayList<String>)targetColumns.get(count);
        targetColumn.add(splitLine[column.getColumn()]);
      }
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    lineCounter++;
  }
  if (parsingErrorOccured) {
    Logger.log(new Status(IStatus.ERROR,GeneralManager.PLUGIN_ID,numberParsingErrorMessage));
  }
}",0.9995562786570034
57549,"public static void main(String[] args){
  String inputString=""String_Node_Str"";
  IDTypeParsingRules idTypeParsingRules=new IDTypeParsingRules();
  idTypeParsingRules.setSubStringExpression(""String_Node_Str"");
  String outputString=TabularDataParser.convertID(inputString,idTypeParsingRules);
  System.out.println(""String_Node_Str"" + outputString);
}","public static void main(String[] args){
  String inputString=""String_Node_Str"";
  IDTypeParsingRules idTypeParsingRules=new IDTypeParsingRules();
  idTypeParsingRules.setSubStringExpression(TCGATestDataXMLGenerator.TCGA_ID_SUBSTRING_REGEX);
  String outputString=TabularDataParser.convertID(inputString,idTypeParsingRules);
  System.out.println(""String_Node_Str"" + outputString);
}",0.6183310533515732
57550,"@Override public int getDataAmount(){
  if (table == null)   return 0;
  return table.getMetaData().size() * table.getMetaData().depth();
}","@Override public int getDataAmount(){
  if (table == null)   return 0;
  try {
    return table.getMetaData().size() * table.getMetaData().depth();
  }
 catch (  NoSuchElementException e) {
    return 0;
  }
}",0.7988505747126436
57551,"@Override public boolean performFinish(){
  if (visitedPages.contains(loadDataSetPage) || getContainer().getCurrentPage().equals(loadDataSetPage))   loadDataSetPage.fillDataSetDescription();
  if (visitedPages.contains(transformDataPage) || getContainer().getCurrentPage().equals(transformDataPage))   transformDataPage.fillDataSetDescription();
  if (visitedPages.contains(addGroupingsPage) || getContainer().getCurrentPage().equals(addGroupingsPage))   addGroupingsPage.fillDataSetDescription();
  ATableBasedDataDomain dataDomain;
  try {
    dataDomain=DataLoader.loadData(dataSetDescription);
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
    throw new IllegalStateException();
  }
catch (  IOException e1) {
    e1.printStackTrace();
    throw new IllegalStateException();
  }
  try {
    String secondaryID=UUID.randomUUID().toString();
    RCPViewInitializationData rcpViewInitData=new RCPViewInitializationData();
    rcpViewInitData.setDataDomainID(dataDomain.getDataDomainID());
    RCPViewManager.get().addRCPView(secondaryID,rcpViewInitData);
    if (PlatformUI.getWorkbench().getActiveWorkbenchWindow() != null) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(dataDomain.getDefaultStartViewType(),secondaryID,IWorkbenchPage.VIEW_ACTIVATE);
    }
  }
 catch (  PartInitException e) {
    e.printStackTrace();
  }
  return true;
}","@Override public boolean performFinish(){
  if (visitedPages.contains(loadDataSetPage) || getContainer().getCurrentPage().equals(loadDataSetPage))   loadDataSetPage.fillDataSetDescription();
  if (visitedPages.contains(transformDataPage) || getContainer().getCurrentPage().equals(transformDataPage))   transformDataPage.fillDataSetDescription();
  if (visitedPages.contains(addGroupingsPage) || getContainer().getCurrentPage().equals(addGroupingsPage))   addGroupingsPage.fillDataSetDescription();
  ATableBasedDataDomain dataDomain;
  try {
    dataDomain=DataLoader.loadData(dataSetDescription);
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
    throw new IllegalStateException();
  }
catch (  IOException e1) {
    e1.printStackTrace();
    throw new IllegalStateException();
  }
  return true;
}",0.7269455690508322
57552,"void createDefaultRecordPerspective(){
  defaultRecordPerspective=new RecordPerspective(dataDomain);
  defaultRecordPerspective.setDefault(true);
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  if (isColumnDimension)   data.setData(getRowIDList());
 else   data.setData(getColumnIDList());
  defaultRecordPerspective.init(data);
  defaultRecordPerspective.setLabel(""String_Node_Str"",true);
  hashRecordPerspectives.put(defaultRecordPerspective.getID(),defaultRecordPerspective);
}","void createDefaultRecordPerspective(){
  defaultRecordPerspective=new RecordPerspective(dataDomain);
  defaultRecordPerspective.setDefault(true);
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  if (isColumnDimension)   data.setData(getRowIDList());
 else   data.setData(getColumnIDList());
  defaultRecordPerspective.init(data);
  defaultRecordPerspective.setLabel(""String_Node_Str"",true);
  hashRecordPerspectives.put(defaultRecordPerspective.getPerspectiveID(),defaultRecordPerspective);
}",0.9892891918208374
57553,"/** 
 * Register a new   {@link RecordPerspective} with this DataTable
 * @param recordPerspective
 */
public void registerRecordPerspective(RecordPerspective recordPerspective){
  if (recordPerspective.getID() == null)   throw new IllegalStateException(""String_Node_Str"" + recordPerspective);
  if (!recordPerspective.getIdType().equals(dataDomain.getRecordIDType()))   throw new IllegalStateException(""String_Node_Str"" + recordPerspective.getIdType());
  hashRecordPerspectives.put(recordPerspective.getID(),recordPerspective);
  if (recordPerspective.isDefault()) {
    if (defaultRecordPerspective != null)     throw new IllegalStateException(""String_Node_Str"");
    defaultRecordPerspective=recordPerspective;
  }
  DataDomainUpdateEvent event=new DataDomainUpdateEvent(dataDomain);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}","/** 
 * Register a new   {@link RecordPerspective} with this DataTable
 * @param recordPerspective
 */
public void registerRecordPerspective(RecordPerspective recordPerspective){
  if (recordPerspective.getPerspectiveID() == null)   throw new IllegalStateException(""String_Node_Str"" + recordPerspective);
  if (!recordPerspective.getIdType().equals(dataDomain.getRecordIDType()))   throw new IllegalStateException(""String_Node_Str"" + recordPerspective.getIdType());
  hashRecordPerspectives.put(recordPerspective.getPerspectiveID(),recordPerspective);
  if (recordPerspective.isDefault()) {
    if (defaultRecordPerspective != null)     throw new IllegalStateException(""String_Node_Str"");
    defaultRecordPerspective=recordPerspective;
  }
  DataDomainUpdateEvent event=new DataDomainUpdateEvent(dataDomain);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}",0.9876265466816648
57554,"/** 
 * Register a new   {@link DimensionPerspective} with this DataTable
 * @param dimensionPerspective
 */
public void registerDimensionPerspective(DimensionPerspective dimensionPerspective){
  if (dimensionPerspective.getID() == null)   throw new IllegalStateException(""String_Node_Str"" + dimensionPerspective);
  hashDimensionPerspectives.put(dimensionPerspective.getID(),dimensionPerspective);
  if (dimensionPerspective.isDefault()) {
    if (defaultDimensionPerspective != null)     throw new IllegalStateException(""String_Node_Str"");
    defaultDimensionPerspective=dimensionPerspective;
  }
  DataDomainUpdateEvent event=new DataDomainUpdateEvent(dataDomain);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}","/** 
 * Register a new   {@link DimensionPerspective} with this DataTable
 * @param dimensionPerspective
 */
public void registerDimensionPerspective(DimensionPerspective dimensionPerspective){
  if (dimensionPerspective.getPerspectiveID() == null)   throw new IllegalStateException(""String_Node_Str"" + dimensionPerspective);
  hashDimensionPerspectives.put(dimensionPerspective.getPerspectiveID(),dimensionPerspective);
  if (dimensionPerspective.isDefault()) {
    if (defaultDimensionPerspective != null)     throw new IllegalStateException(""String_Node_Str"");
    defaultDimensionPerspective=dimensionPerspective;
  }
  DataDomainUpdateEvent event=new DataDomainUpdateEvent(dataDomain);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}",0.9857142857142858
57555,"void createDefaultDimensionPerspective(){
  defaultDimensionPerspective=new DimensionPerspective(dataDomain);
  defaultDimensionPerspective.setDefault(true);
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  if (isColumnDimension)   data.setData(getColumnIDList());
 else   data.setData(getRowIDList());
  defaultDimensionPerspective.init(data);
  defaultDimensionPerspective.setLabel(""String_Node_Str"",true);
  hashDimensionPerspectives.put(defaultDimensionPerspective.getID(),defaultDimensionPerspective);
}","void createDefaultDimensionPerspective(){
  defaultDimensionPerspective=new DimensionPerspective(dataDomain);
  defaultDimensionPerspective.setDefault(true);
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  if (isColumnDimension)   data.setData(getColumnIDList());
 else   data.setData(getRowIDList());
  defaultDimensionPerspective.init(data);
  defaultDimensionPerspective.setLabel(""String_Node_Str"",true);
  hashDimensionPerspectives.put(defaultDimensionPerspective.getPerspectiveID(),defaultDimensionPerspective);
}",0.9898242368177612
57556,"/** 
 * Same as   {@link #hasRecordPerspective(String)} for dimensions
 * @param dimensionPerspectiveID
 * @return true if the specified id equals the id of the perspective in thiscontainer
 */
public boolean hasDimensionPerspective(String dimensionPerspectiveID){
  return dimensionPerspective.getID().equals(dimensionPerspectiveID);
}","/** 
 * Same as   {@link #hasRecordPerspective(String)} for dimensions
 * @param dimensionPerspectiveID
 * @return true if the specified id equals the id of the perspective in thiscontainer
 */
public boolean hasDimensionPerspective(String dimensionPerspectiveID){
  return dimensionPerspective.getPerspectiveID().equals(dimensionPerspectiveID);
}",0.9838945827232796
57557,"/** 
 * @return the recordPerspective, see {@link #recordPerspective}
 */
public RecordPerspective getRecordPerspective(){
  return recordPerspective;
}","/** 
 * @return the recordPerspective, see {@link #recordPerspective}
 */
@XmlTransient public RecordPerspective getRecordPerspective(){
  return recordPerspective;
}",0.9559748427672956
57558,"/** 
 * @param dataDomain
 * @param recordPerspective
 * @param dimensionPerspective
 */
public DataContainer(ATableBasedDataDomain dataDomain,RecordPerspective recordPerspective,DimensionPerspective dimensionPerspective){
  this.dataDomain=dataDomain;
  this.recordPerspective=recordPerspective;
  this.dimensionPerspective=dimensionPerspective;
  createKey();
}","/** 
 * @param dataDomain
 * @param recordPerspective
 * @param dimensionPerspective
 */
public DataContainer(ATableBasedDataDomain dataDomain,RecordPerspective recordPerspective,DimensionPerspective dimensionPerspective){
  this.dataDomain=dataDomain;
  this.recordPerspective=recordPerspective;
  recordPerspectiveID=recordPerspective.getPerspectiveID();
  this.dimensionPerspective=dimensionPerspective;
  dimensionPerspectiveID=dimensionPerspective.getPerspectiveID();
  createKey();
}",0.852112676056338
57559,"/** 
 * @return the dimensionPerspective, see {@link #dimensionPerspective}
 */
public DimensionPerspective getDimensionPerspective(){
  return dimensionPerspective;
}","/** 
 * @return the dimensionPerspective, see {@link #dimensionPerspective}
 */
@XmlTransient public DimensionPerspective getDimensionPerspective(){
  return dimensionPerspective;
}",0.9597701149425288
57560,"/** 
 * @param recordPerspective setter, see  {@link #recordPerspective}
 */
public void setRecordPerspective(RecordPerspective recordPerspective){
  if (this.recordPerspective != null)   throw new IllegalStateException(""String_Node_Str"");
  this.recordPerspective=recordPerspective;
  createKey();
}","/** 
 * @param recordPerspective setter, see  {@link #recordPerspective}
 */
public void setRecordPerspective(RecordPerspective recordPerspective){
  if (this.recordPerspective != null)   throw new IllegalStateException(""String_Node_Str"");
  this.recordPerspective=recordPerspective;
  this.recordPerspectiveID=recordPerspective.getPerspectiveID();
  createKey();
}",0.9022556390977444
57561,"/** 
 * Checks whether the specified container id matches to the record perspective in this   {@link DataContainer}
 * @param recordPerspectiveID
 * @return true if the specified id equals the id of the perspective in thiscontainer
 */
public boolean hasRecordPerspective(String recordPerspectiveID){
  return recordPerspective.getID().equals(recordPerspectiveID);
}","/** 
 * Checks whether the specified container id matches to the record perspective in this   {@link DataContainer}
 * @param recordPerspectiveID
 * @return true if the specified id equals the id of the perspective in thiscontainer
 */
public boolean hasRecordPerspective(String recordPerspectiveID){
  return recordPerspective.getPerspectiveID().equals(recordPerspectiveID);
}",0.9851951547779272
57562,"/** 
 * @param dimensionPerspective setter, see  {@link #dimensionPerspective}
 */
public void setDimensionPerspective(DimensionPerspective dimensionPerspective){
  if (this.dimensionPerspective != null)   throw new IllegalStateException(""String_Node_Str"");
  this.dimensionPerspective=dimensionPerspective;
  createKey();
}","/** 
 * @param dimensionPerspective setter, see  {@link #dimensionPerspective}
 */
public void setDimensionPerspective(DimensionPerspective dimensionPerspective){
  if (this.dimensionPerspective != null)   throw new IllegalStateException(""String_Node_Str"");
  this.dimensionPerspective=dimensionPerspective;
  dimensionPerspectiveID=dimensionPerspective.getPerspectiveID();
  createKey();
}",0.907563025210084
57563,"/** 
 * Initiates clustering based on the parameters passed. Sends out an event to all affected views upon positive completion to replace their VA.
 * @param tableID ID of the set to cluster
 * @param clusterState
 */
public ClusterResult startClustering(AClusterConfiguration clusterState){
  ClusterManager clusterManager=new ClusterManager(this);
  ClusterResult result=clusterManager.cluster(clusterState);
  if (result == null)   return null;
  if (clusterState.getClusterTarget() == EClustererTarget.DIMENSION_CLUSTERING) {
    PerspectiveInitializationData dimensionResult=result.getDimensionResult();
    DimensionPerspective dimensionPerspective=clusterState.getTargetDimensionPerspective();
    dimensionPerspective.init(dimensionResult);
    eventPublisher.triggerEvent(new DimensionVAUpdateEvent(dataDomainID,dimensionPerspective.getID(),this));
  }
  if (clusterState.getClusterTarget() == EClustererTarget.RECORD_CLUSTERING) {
    PerspectiveInitializationData recordResult=result.getRecordResult();
    RecordPerspective recordPerspective=clusterState.getTargetRecordPerspective();
    recordPerspective.init(recordResult);
    eventPublisher.triggerEvent(new RecordVAUpdateEvent(dataDomainID,recordPerspective.getID(),this));
  }
  return result;
}","/** 
 * Initiates clustering based on the parameters passed. Sends out an event to all affected views upon positive completion to replace their VA.
 * @param tableID ID of the set to cluster
 * @param clusterState
 */
public ClusterResult startClustering(AClusterConfiguration clusterState){
  ClusterManager clusterManager=new ClusterManager(this);
  ClusterResult result=clusterManager.cluster(clusterState);
  if (result == null)   return null;
  if (clusterState.getClusterTarget() == EClustererTarget.DIMENSION_CLUSTERING) {
    PerspectiveInitializationData dimensionResult=result.getDimensionResult();
    DimensionPerspective dimensionPerspective=clusterState.getTargetDimensionPerspective();
    dimensionPerspective.init(dimensionResult);
    eventPublisher.triggerEvent(new DimensionVAUpdateEvent(dataDomainID,dimensionPerspective.getPerspectiveID(),this));
  }
  if (clusterState.getClusterTarget() == EClustererTarget.RECORD_CLUSTERING) {
    PerspectiveInitializationData recordResult=result.getRecordResult();
    RecordPerspective recordPerspective=clusterState.getTargetRecordPerspective();
    recordPerspective.init(recordResult);
    eventPublisher.triggerEvent(new RecordVAUpdateEvent(dataDomainID,recordPerspective.getPerspectiveID(),this));
  }
  return result;
}",0.9913725490196078
57564,"@Override public void handleRecordVADelta(RecordVADelta vaDelta,String info){
  IDCategory targetCategory=vaDelta.getIDType().getIDCategory();
  if (targetCategory != recordIDCategory)   return;
  if (targetCategory == recordIDCategory && vaDelta.getIDType() != recordIDType)   vaDelta=DeltaConverter.convertDelta(recordIDMappingManager,recordIDType,vaDelta);
  RecordPerspective recordData=table.getRecordPerspective(vaDelta.getVAType());
  recordData.setVADelta(vaDelta);
  RecordVAUpdateEvent event=new RecordVAUpdateEvent(dataDomainID,recordData.getID(),this);
  eventPublisher.triggerEvent(event);
}","@Override public void handleRecordVADelta(RecordVADelta vaDelta,String info){
  IDCategory targetCategory=vaDelta.getIDType().getIDCategory();
  if (targetCategory != recordIDCategory)   return;
  if (targetCategory == recordIDCategory && vaDelta.getIDType() != recordIDType)   vaDelta=DeltaConverter.convertDelta(recordIDMappingManager,recordIDType,vaDelta);
  RecordPerspective recordData=table.getRecordPerspective(vaDelta.getVAType());
  recordData.setVADelta(vaDelta);
  RecordVAUpdateEvent event=new RecordVAUpdateEvent(dataDomainID,recordData.getPerspectiveID(),this);
  eventPublisher.triggerEvent(event);
}",0.9909762100082036
57565,"public void handleCombineFilter(Filter<?> filter,Collection<? extends RecordFilter> combineFilters){
  int index=filterPipe.indexOf(filter);
  if (index < 0)   throw new RuntimeException(""String_Node_Str"");
  RecordMetaOrFilter metaFilter=null;
  if (filter instanceof RecordMetaOrFilter) {
    metaFilter=(RecordMetaOrFilter)filter;
  }
 else {
    metaFilter=new RecordMetaOrFilter(perspective.getID());
    metaFilter.setDataDomain(filter.getDataDomain());
    metaFilter.getFilterList().add((RecordFilter)filter);
  }
  metaFilter.getFilterList().addAll(combineFilters);
  metaFilter.updateDelta(perspective.getID());
  filterPipe.set(index,(FilterType)metaFilter);
  filterPipe.removeAll(combineFilters);
  reEvaluateFilters();
  triggerFilterUpdatedEvent();
}","public void handleCombineFilter(Filter<?> filter,Collection<? extends RecordFilter> combineFilters){
  int index=filterPipe.indexOf(filter);
  if (index < 0)   throw new RuntimeException(""String_Node_Str"");
  RecordMetaOrFilter metaFilter=null;
  if (filter instanceof RecordMetaOrFilter) {
    metaFilter=(RecordMetaOrFilter)filter;
  }
 else {
    metaFilter=new RecordMetaOrFilter(perspective.getPerspectiveID());
    metaFilter.setDataDomain(filter.getDataDomain());
    metaFilter.getFilterList().add((RecordFilter)filter);
  }
  metaFilter.getFilterList().addAll(combineFilters);
  metaFilter.updateDelta(perspective.getPerspectiveID());
  filterPipe.set(index,(FilterType)metaFilter);
  filterPipe.removeAll(combineFilters);
  reEvaluateFilters();
  triggerFilterUpdatedEvent();
}",0.9858247422680412
57566,"public ADataPerspective(ATableBasedDataDomain dataDomain){
  this.dataDomain=dataDomain;
  init();
}","public ADataPerspective(ATableBasedDataDomain dataDomain){
  this.dataDomain=dataDomain;
  System.out.println(""String_Node_Str"");
  init();
}",0.8298755186721992
57567,"@Override protected void parseFile(BufferedReader reader) throws IOException {
  initializeDataContainers();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + fileName);
  String line;
  float progressBarFactor=100f / numberOfLinesInFile;
  for (int countHeaderLines=0; countHeaderLines < dataSetDescription.getNumberOfHeaderLines(); countHeaderLines++) {
    reader.readLine();
  }
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  int lineCounter=0;
  String numberParsingErrorMessage=""String_Node_Str"" + dataSetDescription.getDataSetName() + ""String_Node_Str""+ fileName+ ""String_Node_Str"";
  boolean parsingErrorOccured=false;
  while ((line=reader.readLine()) != null) {
    String splitLine[]=line.split(dataSetDescription.getDelimiter());
    for (int count=0; count < parsingPattern.size(); count++) {
      ColumnDescription column=parsingPattern.get(count);
      String cellContent=splitLine[column.getColumn()];
      if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        float[] targetColumn=(float[])targetColumns.get(count);
        Float value;
        try {
          value=Float.parseFloat(cellContent);
        }
 catch (        NumberFormatException nfe) {
          parsingErrorOccured=true;
          numberParsingErrorMessage+=""String_Node_Str"" + (column.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
          value=Float.NaN;
        }
        if (lineCounter < targetColumn.length) {
          targetColumn[lineCounter]=value;
        }
 else {
          System.out.println(""String_Node_Str"" + lineCounter + ""String_Node_Str""+ count);
        }
      }
 else       if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        @SuppressWarnings(""String_Node_Str"") ArrayList<String> targetColumn=(ArrayList<String>)targetColumns.get(count);
        targetColumn.add(splitLine[column.getColumn()]);
      }
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    lineCounter++;
  }
  if (parsingErrorOccured) {
    Logger.log(new Status(IStatus.ERROR,GeneralManager.PLUGIN_ID,numberParsingErrorMessage));
  }
}","@Override protected void parseFile(BufferedReader reader) throws IOException {
  initializeDataContainers();
  swtGuiManager.setProgressBarText(""String_Node_Str"" + dataSetDescription.getDataSetName());
  String line;
  float progressBarFactor=100f / numberOfLinesInFile;
  for (int countHeaderLines=0; countHeaderLines < dataSetDescription.getNumberOfHeaderLines(); countHeaderLines++) {
    reader.readLine();
  }
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  int lineCounter=0;
  String numberParsingErrorMessage=""String_Node_Str"" + dataSetDescription.getDataSetName() + ""String_Node_Str""+ fileName+ ""String_Node_Str"";
  boolean parsingErrorOccured=false;
  while ((line=reader.readLine()) != null) {
    String splitLine[]=line.split(dataSetDescription.getDelimiter());
    for (int count=0; count < parsingPattern.size(); count++) {
      ColumnDescription column=parsingPattern.get(count);
      String cellContent=splitLine[column.getColumn()];
      if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        float[] targetColumn=(float[])targetColumns.get(count);
        Float value;
        try {
          value=Float.parseFloat(cellContent);
        }
 catch (        NumberFormatException nfe) {
          parsingErrorOccured=true;
          numberParsingErrorMessage+=""String_Node_Str"" + (column.getColumn()) + ""String_Node_Str""+ (lineCounter + dataSetDescription.getNumberOfHeaderLines())+ ""String_Node_Str""+ cellContent+ ""String_Node_Str"";
          value=Float.NaN;
        }
        if (lineCounter < targetColumn.length) {
          targetColumn[lineCounter]=value;
        }
 else {
          System.out.println(""String_Node_Str"" + lineCounter + ""String_Node_Str""+ count);
        }
      }
 else       if (column.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
        @SuppressWarnings(""String_Node_Str"") ArrayList<String> targetColumn=(ArrayList<String>)targetColumns.get(count);
        targetColumn.add(splitLine[column.getColumn()]);
      }
      if (lineCounter % 100 == 0) {
        swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * lineCounter));
      }
    }
    lineCounter++;
  }
  if (parsingErrorOccured) {
    Logger.log(new Status(IStatus.ERROR,GeneralManager.PLUGIN_ID,numberParsingErrorMessage));
  }
}",0.9924028652051228
57568,"@Override public void run(){
  parentComposite.addKeyListener(fpsKeyListener);
}","@Override public void run(){
  parentGLCanvas.requestFocus();
}",0.6713286713286714
57569,"public synchronized void startAnimator(){
  if (fpsAnimator == null)   fpsAnimator=new FPSAnimator(30);
  if (!fpsAnimator.isAnimating())   fpsAnimator.start();
  fpsAnimator.setIgnoreExceptions(true);
  fpsAnimator.setPrintExceptions(true);
  Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str""));
}","public void startAnimator(){
  if (fpsAnimator == null)   fpsAnimator=new FPSAnimator(30);
  if (!fpsAnimator.isAnimating())   fpsAnimator.start();
  fpsAnimator.setIgnoreExceptions(true);
  fpsAnimator.setPrintExceptions(true);
  Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str""));
}",0.9796557120500784
57570,"public synchronized void unregisterGLCanvasFromAnimator(final GLCanvas glCanvas){
  fpsAnimator.remove(glCanvas);
}","public void unregisterGLCanvasFromAnimator(final GLCanvas glCanvas){
  fpsAnimator.remove(glCanvas);
}",0.9400921658986175
57571,"public synchronized PickingManager getPickingManager(){
  return pickingManager;
}","public PickingManager getPickingManager(){
  return pickingManager;
}",0.913907284768212
57572,"/** 
 * Retrieves the   {@link DisplayLoopExecution} related to the{@link ViewManager}'s display loop.
 * @return {@link DisplayLoopExecution} for executing code in the displayloop
 */
public synchronized DisplayLoopExecution getDisplayLoopExecution(){
  if (displayLoopExecution == null) {
    startAnimator();
    displayLoopExecution=DisplayLoopExecution.get();
    fpsAnimator.add((GLAutoDrawable)displayLoopExecution.getDisplayLoopCanvas());
    displayLoopExecution.executeMultiple(connectedElementRepManager);
  }
  return displayLoopExecution;
}","/** 
 * Retrieves the   {@link DisplayLoopExecution} related to the{@link ViewManager}'s display loop.
 * @return {@link DisplayLoopExecution} for executing code in the displayloop
 */
public DisplayLoopExecution getDisplayLoopExecution(){
  if (displayLoopExecution == null) {
    startAnimator();
    displayLoopExecution=DisplayLoopExecution.get();
    fpsAnimator.add((GLAutoDrawable)displayLoopExecution.getDisplayLoopCanvas());
    displayLoopExecution.executeMultiple(connectedElementRepManager);
  }
  return displayLoopExecution;
}",0.9881061299176578
57573,"/** 
 * Remove association between an RCP view and the Caleydo view contained inside the RCP view.
 * @param rcpView
 * @param view
 */
public synchronized void unregisterRCPView(final ARcpGLViewPart rcpView,final IView view){
  if (hashRCP2View.containsKey(rcpView))   hashRCP2View.remove(rcpView);
  if (hashView2RCP.containsKey(view))   hashView2RCP.remove(view);
}","/** 
 * Remove association between an RCP view and the Caleydo view contained inside the RCP view.
 * @param rcpView
 * @param view
 */
public void unregisterRCPView(final ARcpGLViewPart rcpView,final IView view){
  if (hashRCP2View.containsKey(rcpView))   hashRCP2View.remove(rcpView);
  if (hashView2RCP.containsKey(view))   hashView2RCP.remove(view);
}",0.9820193637621024
57574,"public synchronized void registerGLView(AGLView glView){
  hashGLViewID2GLView.put(glView.getID(),glView);
  NewViewEvent event=new NewViewEvent(glView);
  event.setSender(this);
  generalManager.getEventPublisher().triggerEvent(event);
}","public void registerGLView(AGLView glView){
  hashGLViewID2GLView.put(glView.getID(),glView);
  NewViewEvent event=new NewViewEvent(glView);
  event.setSender(this);
  generalManager.getEventPublisher().triggerEvent(event);
}",0.9719222462203024
57575,"public synchronized Collection<AGLView> getAllGLViews(){
  return hashGLViewID2GLView.values();
}","public Collection<AGLView> getAllGLViews(){
  return hashGLViewID2GLView.values();
}",0.9281767955801103
57576,"public static ViewManager get(){
  if (instance == null) {
synchronized (ViewManager.class) {
      if (instance == null)       instance=new ViewManager();
    }
  }
  return instance;
}","public static ViewManager get(){
  if (instance == null) {
synchronized (ViewManager.class) {
      if (instance == null) {
        instance=new ViewManager();
      }
    }
  }
  return instance;
}",0.96875
57577,"public synchronized void registerGLEventListenerByGLCanvas(final GLCanvas glCanvas,final AGLView glView){
  if (glCanvas == null)   return;
  if (!hashGLCanvas2GLView.containsKey(glCanvas)) {
    hashGLCanvas2GLView.put(glCanvas,new ArrayList<AGLView>());
  }
  hashGLCanvas2GLView.get(glCanvas).add(glView);
  glCanvas.addGLEventListener(glView);
}","public void registerGLEventListenerByGLCanvas(final GLCanvas glCanvas,final AGLView glView){
  if (glCanvas == null)   return;
  if (!hashGLCanvas2GLView.containsKey(glCanvas)) {
    hashGLCanvas2GLView.put(glCanvas,new ArrayList<AGLView>());
  }
  hashGLCanvas2GLView.get(glCanvas).add(glView);
  glCanvas.addGLEventListener(glView);
}",0.981021897810219
57578,"public synchronized GLInfoAreaManager getInfoAreaManager(){
  return infoAreaManager;
}","public GLInfoAreaManager getInfoAreaManager(){
  return infoAreaManager;
}",0.9192546583850932
57579,"public synchronized void stopAnimator(){
  if (fpsAnimator != null && fpsAnimator.isAnimating())   fpsAnimator.stop();
  Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str""));
}","public void stopAnimator(){
  if (fpsAnimator != null && fpsAnimator.isAnimating())   fpsAnimator.stop();
  Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str""));
}",0.9669211195928752
57580,"/** 
 * Requests busy mode for the application. This method should be called whenever a process needs to stop any user interaction with the application, e.g. when starting up or when loading multiple pathways. Usually this should result disabling user events and showing a loading screen animation.
 * @param requestInstance object that wants to request busy mode
 */
public synchronized void requestBusyMode(Object requestInstance){
  if (requestInstance == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (busyRequests) {
    if (busyRequests.isEmpty()) {
      for (      AGLView tmpGLEventListener : getAllGLViews()) {
        if (!tmpGLEventListener.isRenderedRemote()) {
          tmpGLEventListener.enableBusyMode(true);
        }
      }
    }
    if (!busyRequests.contains(requestInstance)) {
      busyRequests.add(requestInstance);
    }
  }
}","/** 
 * Requests busy mode for the application. This method should be called whenever a process needs to stop any user interaction with the application, e.g. when starting up or when loading multiple pathways. Usually this should result disabling user events and showing a loading screen animation.
 * @param requestInstance object that wants to request busy mode
 */
public void requestBusyMode(Object requestInstance){
  if (requestInstance == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (busyRequests) {
    if (busyRequests.isEmpty()) {
      for (      AGLView tmpGLEventListener : getAllGLViews()) {
        if (!tmpGLEventListener.isRenderedRemote()) {
          tmpGLEventListener.enableBusyMode(true);
        }
      }
    }
    if (!busyRequests.contains(requestInstance)) {
      busyRequests.add(requestInstance);
    }
  }
}",0.9926512153759186
57581,"public synchronized void createSWTView(final ASerializedView serializedView){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      try {
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        ARcpGLViewPart viewPart=(ARcpGLViewPart)page.showView(serializedView.getViewType());
        AGLView view=viewPart.getGLView();
        view.initFromSerializableRepresentation(serializedView);
      }
 catch (      PartInitException ex) {
        throw new RuntimeException(""String_Node_Str"" + serializedView.getViewType(),ex);
      }
    }
  }
);
}","public void createSWTView(final ASerializedView serializedView){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      try {
        IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        ARcpGLViewPart viewPart=(ARcpGLViewPart)page.showView(serializedView.getViewType());
        AGLView view=viewPart.getGLView();
        view.initFromSerializableRepresentation(serializedView);
      }
 catch (      PartInitException ex) {
        throw new RuntimeException(""String_Node_Str"" + serializedView.getViewType(),ex);
      }
    }
  }
);
}",0.989541432019308
57582,"@SuppressWarnings(""String_Node_Str"") public synchronized AGLView createGLView(Class<? extends AGLView> viewClass,GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  AGLView view;
  try {
    Class[] argTypes={GLCanvas.class,Composite.class,ViewFrustum.class};
    Constructor aConstructor=viewClass.getConstructor(argTypes);
    view=(AGLView)aConstructor.newInstance(glCanvas,parentComposite,viewFrustum);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IllegalStateException(""String_Node_Str"" + viewClass);
  }
  return view;
}","@SuppressWarnings(""String_Node_Str"") public AGLView createGLView(Class<? extends AGLView> viewClass,GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  AGLView view;
  try {
    Class[] argTypes={GLCanvas.class,Composite.class,ViewFrustum.class};
    Constructor aConstructor=viewClass.getConstructor(argTypes);
    view=(AGLView)aConstructor.newInstance(glCanvas,parentComposite,viewFrustum);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IllegalStateException(""String_Node_Str"" + viewClass);
  }
  return view;
}",0.9884444444444443
57583,"/** 
 * Releases a previously requested busy mode. Releases are only performed by passing the originally requesting object to this method.
 * @param requestInstance the object that requested the busy mode
 */
public synchronized void releaseBusyMode(Object requestInstance){
  if (requestInstance == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (busyRequests) {
    if (busyRequests.contains(requestInstance)) {
      busyRequests.remove(requestInstance);
    }
    if (busyRequests.isEmpty()) {
      for (      AGLView tmpGLEventListener : getAllGLViews()) {
        if (!tmpGLEventListener.isRenderedRemote()) {
          tmpGLEventListener.enableBusyMode(false);
        }
      }
    }
  }
}","/** 
 * Releases a previously requested busy mode. Releases are only performed by passing the originally requesting object to this method.
 * @param requestInstance the object that requested the busy mode
 */
public void releaseBusyMode(Object requestInstance){
  if (requestInstance == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (busyRequests) {
    if (busyRequests.contains(requestInstance)) {
      busyRequests.remove(requestInstance);
    }
    if (busyRequests.isEmpty()) {
      for (      AGLView tmpGLEventListener : getAllGLViews()) {
        if (!tmpGLEventListener.isRenderedRemote()) {
          tmpGLEventListener.enableBusyMode(false);
        }
      }
    }
  }
}",0.9910775566231984
57584,"public synchronized void unregisterGLView(final AGLView glView){
  if (glView == null)   return;
  GLCanvas parentGLCanvas=(glView).getParentGLCanvas();
  if (parentGLCanvas != null) {
    parentGLCanvas.removeGLEventListener(glView);
    if (hashGLCanvas2GLView.containsKey(parentGLCanvas)) {
      hashGLCanvas2GLView.get(parentGLCanvas).remove(glView);
    }
  }
  hashGLViewID2GLView.remove(glView.getID());
  ViewClosedEvent event=new ViewClosedEvent(glView);
  event.setSender(this);
  generalManager.getEventPublisher().triggerEvent(event);
}","public void unregisterGLView(final AGLView glView){
  if (glView == null)   return;
  GLCanvas parentGLCanvas=(glView).getParentGLCanvas();
  if (parentGLCanvas != null) {
    parentGLCanvas.removeGLEventListener(glView);
    if (hashGLCanvas2GLView.containsKey(parentGLCanvas)) {
      hashGLCanvas2GLView.get(parentGLCanvas).remove(glView);
    }
  }
  hashGLViewID2GLView.remove(glView.getID());
  ViewClosedEvent event=new ViewClosedEvent(glView);
  event.setSender(this);
  generalManager.getEventPublisher().triggerEvent(event);
}",0.9880184331797236
57585,"public synchronized boolean unregisterGLCanvas(final GLCanvas glCanvas){
  if (glCanvas == null)   return false;
  fpsAnimator.remove(glCanvas);
  hashGLCanvas2GLView.remove(glCanvas);
  return true;
}","public boolean unregisterGLCanvas(final GLCanvas glCanvas){
  if (glCanvas == null)   return false;
  fpsAnimator.remove(glCanvas);
  hashGLCanvas2GLView.remove(glCanvas);
  return true;
}",0.9665809768637532
57586,"public synchronized AGLView getGLView(int iItemID){
  return hashGLViewID2GLView.get(iItemID);
}","public AGLView getGLView(int iItemID){
  return hashGLViewID2GLView.get(iItemID);
}",0.9273743016759776
57587,"public synchronized ARcpGLViewPart getViewPartFromView(IView view){
  return hashView2RCP.get(view);
}","public ARcpGLViewPart getViewPartFromView(IView view){
  return hashView2RCP.get(view);
}",0.9319371727748692
57588,"/** 
 * Removes all views, canvas and GL2 event listeners
 */
public synchronized void cleanup(){
  hashGLCanvas2GLView.clear();
  hashGLViewID2GLView.clear();
  hashItems.clear();
}","/** 
 * Removes all views, canvas and GL2 event listeners
 */
public void cleanup(){
  hashGLCanvas2GLView.clear();
  hashGLViewID2GLView.clear();
  hashItems.clear();
}",0.9629629629629628
57589,"/** 
 * Associate an RCP view with the Caleydo view contained inside the RCP view.
 * @param rcpView
 * @param view
 */
public synchronized void registerRCPView(final ARcpGLViewPart rcpView,final IView view){
  if (!hashRCP2View.containsKey(rcpView))   hashRCP2View.put(rcpView,view);
  if (!hashView2RCP.containsKey(view))   hashView2RCP.put(view,rcpView);
}","/** 
 * Associate an RCP view with the Caleydo view contained inside the RCP view.
 * @param rcpView
 * @param view
 */
public void registerRCPView(final ARcpGLViewPart rcpView,final IView view){
  if (!hashRCP2View.containsKey(rcpView))   hashRCP2View.put(rcpView,view);
  if (!hashView2RCP.containsKey(view))   hashView2RCP.put(view,rcpView);
}",0.9815602836879432
57590,"public synchronized void registerGLCanvasToAnimator(final GLCanvas glCaleydoCanvas){
  if (fpsAnimator == null) {
    startAnimator();
  }
  fpsAnimator.add(glCaleydoCanvas);
  Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str""));
}","public void registerGLCanvasToAnimator(final GLCanvas glCaleydoCanvas){
  if (fpsAnimator == null) {
    startAnimator();
  }
  fpsAnimator.add(glCaleydoCanvas);
  Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str""));
}",0.9742574257425742
57591,"public synchronized ConnectedElementRepresentationManager getConnectedElementRepresentationManager(){
  return connectedElementRepManager;
}","public ConnectedElementRepresentationManager getConnectedElementRepresentationManager(){
  return connectedElementRepManager;
}",0.951310861423221
57592,"public synchronized IView getViewFromViewPart(ARcpGLViewPart viewPart){
  return hashRCP2View.get(viewPart);
}","public IView getViewFromViewPart(ARcpGLViewPart viewPart){
  return hashRCP2View.get(viewPart);
}",0.9371980676328504
57593,"/** 
 * Make sure that all views get initialized (i.e., constructor and createPartControl created) Otherwise views will not show up
 */
private void initializeViews(){
  IViewReference[] views=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getViewReferences();
  IWorkbenchPart activeView=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart();
  try {
    for (    IViewReference view : views) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(view.getId());
    }
    if (activeView instanceof CaleydoRCPViewPart) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(((CaleydoRCPViewPart)activeView).getSite().getId());
    }
  }
 catch (  PartInitException e) {
    throw new IllegalStateException();
  }
}","/** 
 * Make sure that all views get initialized (i.e., constructor and createPartControl created) Otherwise views will not show up
 */
private void initializeViews(){
  IViewReference[] views=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getViewReferences();
  try {
    for (    IViewReference view : views) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(view.getId(),view.getSecondaryId(),IWorkbenchPage.VIEW_VISIBLE);
    }
  }
 catch (  PartInitException e) {
    throw new IllegalStateException();
  }
}",0.5924339757316203
57594,"/** 
 * Reads the min and max values (if set) from the dialog
 */
private void fillLoadDataParameters(){
  if (txtMin.getEnabled() && !txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      dataSetDescription.setMin(fMin);
    }
  }
  if (txtMax.getEnabled() && !txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      dataSetDescription.setMax(fMax);
    }
  }
  IDSpecification rowIDSpecification=new IDSpecification();
  IDType rowIDType=recordIDTypes.get(recordIDCombo.getSelectionIndex());
  rowIDSpecification.setIdType(rowIDType.toString());
  if (rowIDType.getIDCategory().getCategoryName().equals(""String_Node_Str""))   rowIDSpecification.setIDTypeGene(true);
  rowIDSpecification.setIdCategory(rowIDType.getIDCategory().toString());
  if (rowIDType.getTypeName().equalsIgnoreCase(""String_Node_Str"")) {
    rowIDSpecification.setSubStringExpression(""String_Node_Str"");
  }
  IDSpecification columnIDSpecification=new IDSpecification();
  IDType columnIDType=dimensionIDTypes.get(dimensionIDCombo.getSelectionIndex());
  columnIDSpecification.setIdType(columnIDType.toString());
  if (columnIDType.getIDCategory().getCategoryName().equals(""String_Node_Str""))   columnIDSpecification.setIDTypeGene(true);
  columnIDSpecification.setIdCategory(columnIDType.getIDCategory().toString());
  dataSetDescription.setRowIDSpecification(rowIDSpecification);
  dataSetDescription.setMathFilterMode(mathFilterMode);
  dataSetDescription.setDataHomogeneous(buttonHomogeneous.getSelection());
  dataSetDescription.setTransposeMatrix(buttonSwapRowsWithColumns.getSelection());
  dataSetDescription.setDataSetName(txtDataSetLabel.getText());
}","/** 
 * Reads the min and max values (if set) from the dialog
 */
private void fillLoadDataParameters(){
  if (txtMin.getEnabled() && !txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      dataSetDescription.setMin(fMin);
    }
  }
  if (txtMax.getEnabled() && !txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      dataSetDescription.setMax(fMax);
    }
  }
  IDSpecification rowIDSpecification=new IDSpecification();
  IDType rowIDType=recordIDTypes.get(recordIDCombo.getSelectionIndex());
  rowIDSpecification.setIdType(rowIDType.toString());
  if (rowIDType.getIDCategory().getCategoryName().equals(""String_Node_Str""))   rowIDSpecification.setIDTypeGene(true);
  rowIDSpecification.setIdCategory(rowIDType.getIDCategory().toString());
  if (rowIDType.getTypeName().equalsIgnoreCase(""String_Node_Str"")) {
    rowIDSpecification.setSubStringExpression(""String_Node_Str"");
  }
  IDSpecification columnIDSpecification=new IDSpecification();
  IDType columnIDType=dimensionIDTypes.get(dimensionIDCombo.getSelectionIndex());
  columnIDSpecification.setIdType(columnIDType.toString());
  if (columnIDType.getIDCategory().getCategoryName().equals(""String_Node_Str""))   columnIDSpecification.setIDTypeGene(true);
  columnIDSpecification.setIdCategory(columnIDType.getIDCategory().toString());
  dataSetDescription.setRowIDSpecification(rowIDSpecification);
  dataSetDescription.setMathFilterMode(mathFilterMode);
  dataSetDescription.setDataHomogeneous(buttonHomogeneous.getSelection());
  dataSetDescription.setTransposeMatrix(buttonSwapRowsWithColumns.getSelection());
  dataSetDescription.setDataSetName(txtDataSetLabel.getText());
  dataSetDescription.setColumnGroupingSpecifications(columnGroupingSpecifications);
  dataSetDescription.setRowGroupingSpecifications(rowGroupingSpecifications);
}",0.955930359085963
57595,"private String determineDataSetLabel(){
  if (inputFile == null || inputFile.isEmpty())   return ""String_Node_Str"";
  return inputFile.substring(inputFile.lastIndexOf(""String_Node_Str"") + 1,inputFile.lastIndexOf(""String_Node_Str""));
}","private String determineDataSetLabel(){
  if (inputFile == null || inputFile.isEmpty())   return ""String_Node_Str"";
  return inputFile.substring(inputFile.lastIndexOf(File.separator) + 1,inputFile.lastIndexOf(""String_Node_Str""));
}",0.9376344086021504
57596,"private void createDelimiterGroup(){
  Group delimiterGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  delimiterGroup.setText(""String_Node_Str"");
  delimiterGroup.setLayout(new RowLayout());
  final Button[] buttonDelimiter=new Button[6];
  buttonDelimiter[0]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[0].setSelection(true);
  buttonDelimiter[0].setText(""String_Node_Str"");
  buttonDelimiter[0].setBounds(10,5,75,30);
  buttonDelimiter[1]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[1].setText(""String_Node_Str"");
  buttonDelimiter[1].setBounds(10,30,75,30);
  buttonDelimiter[2]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[2].setText(""String_Node_Str"");
  buttonDelimiter[2].setBounds(10,55,75,30);
  buttonDelimiter[3]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[3].setText(""String_Node_Str"");
  buttonDelimiter[3].setBounds(10,55,75,30);
  buttonDelimiter[4]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[4].setText(""String_Node_Str"");
  buttonDelimiter[4].setBounds(10,55,75,30);
  buttonDelimiter[5]=new Button(delimiterGroup,SWT.CHECK);
  buttonDelimiter[5].setText(""String_Node_Str"");
  buttonDelimiter[5].setBounds(10,55,75,30);
  final Text txtCustomizedDelimiter=new Text(delimiterGroup,SWT.BORDER);
  txtCustomizedDelimiter.setBounds(0,0,75,30);
  txtCustomizedDelimiter.setTextLimit(1);
  txtCustomizedDelimiter.setEnabled(false);
  txtCustomizedDelimiter.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      createDataPreviewTable(txtCustomizedDelimiter.getText());
    }
  }
);
  buttonDelimiter[0].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      if (dataSetDescription.getDataSourcePath().isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
    }
  }
);
  buttonDelimiter[1].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (dataSetDescription.getDataSourcePath().isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
    }
  }
);
  buttonDelimiter[2].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (dataSetDescription.getDataSourcePath().isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
    }
  }
);
  buttonDelimiter[3].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (dataSetDescription.getDataSourcePath().isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
    }
  }
);
  buttonDelimiter[4].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[5].setSelection(false);
      txtCustomizedDelimiter.setEnabled(false);
      if (dataSetDescription.getDataSourcePath().isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
    }
  }
);
  buttonDelimiter[5].addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      buttonDelimiter[0].setSelection(false);
      buttonDelimiter[1].setSelection(false);
      buttonDelimiter[2].setSelection(false);
      buttonDelimiter[3].setSelection(false);
      buttonDelimiter[4].setSelection(false);
      txtCustomizedDelimiter.setEnabled(true);
      if (dataSetDescription.getDataSourcePath().isEmpty())       return;
      createDataPreviewTable(""String_Node_Str"");
    }
  }
);
}","private void createDelimiterGroup(Composite parent){
  Group delimiterGroup=new Group(parent,SWT.SHADOW_ETCHED_IN);
  delimiterGroup.setText(""String_Node_Str"");
  delimiterGroup.setLayout(new RowLayout());
  final Button[] delimiterButtons=new Button[6];
  delimiterButtons[0]=new Button(delimiterGroup,SWT.RADIO);
  delimiterButtons[0].setSelection(true);
  delimiterButtons[0].setText(""String_Node_Str"");
  delimiterButtons[0].setData(""String_Node_Str"");
  delimiterButtons[0].setBounds(10,5,75,30);
  delimiterButtons[1]=new Button(delimiterGroup,SWT.RADIO);
  delimiterButtons[1].setText(""String_Node_Str"");
  delimiterButtons[1].setData(""String_Node_Str"");
  delimiterButtons[1].setBounds(10,30,75,30);
  delimiterButtons[2]=new Button(delimiterGroup,SWT.RADIO);
  delimiterButtons[2].setText(""String_Node_Str"");
  delimiterButtons[2].setData(""String_Node_Str"");
  delimiterButtons[2].setBounds(10,55,75,30);
  delimiterButtons[3]=new Button(delimiterGroup,SWT.RADIO);
  delimiterButtons[3].setText(""String_Node_Str"");
  delimiterButtons[3].setData(""String_Node_Str"");
  delimiterButtons[3].setBounds(10,55,75,30);
  delimiterButtons[4]=new Button(delimiterGroup,SWT.RADIO);
  delimiterButtons[4].setText(""String_Node_Str"");
  delimiterButtons[4].setData(""String_Node_Str"");
  delimiterButtons[4].setBounds(10,55,75,30);
  delimiterButtons[5]=new Button(delimiterGroup,SWT.RADIO);
  delimiterButtons[5].setText(""String_Node_Str"");
  delimiterButtons[5].setBounds(10,55,75,30);
  final Text customizedDelimiterTextField=new Text(delimiterGroup,SWT.BORDER);
  customizedDelimiterTextField.setBounds(0,0,75,30);
  customizedDelimiterTextField.setTextLimit(1);
  customizedDelimiterTextField.setEnabled(false);
  customizedDelimiterTextField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      createDataPreviewTable(customizedDelimiterTextField.getText());
    }
  }
);
  SelectionAdapter radioGroupSelectionListener=new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      Button selectedButton=(Button)e.getSource();
      if (selectedButton != delimiterButtons[5]) {
        createDataPreviewTable((String)selectedButton.getData());
        customizedDelimiterTextField.setEnabled(false);
      }
 else {
        customizedDelimiterTextField.setEnabled(true);
        createDataPreviewTable(""String_Node_Str"");
      }
    }
  }
;
  for (int i=0; i < delimiterButtons.length; i++) {
    delimiterButtons[i].addSelectionListener(radioGroupSelectionListener);
  }
}",0.3400216919739696
57597,"@Override public void modifyText(ModifyEvent e){
  createDataPreviewTable(txtCustomizedDelimiter.getText());
}","@Override public void modifyText(ModifyEvent e){
  createDataPreviewTable(customizedDelimiterTextField.getText());
}",0.9380530973451328
57598,"private void createGUI(Composite parent){
  int numGridCols=4;
  composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(numGridCols,false);
  composite.setLayout(layout);
  Group inputFileGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  inputFileGroup.setText(""String_Node_Str"");
  inputFileGroup.setLayout(new GridLayout(2,false));
  GridData gridData=new GridData(SWT.BEGINNING);
  gridData.horizontalSpan=2;
  inputFileGroup.setLayoutData(gridData);
  Button buttonFileChooser=new Button(inputFileGroup,SWT.PUSH);
  buttonFileChooser.setText(""String_Node_Str"");
  txtFileName=new Text(inputFileGroup,SWT.BORDER);
  txtFileName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  buttonFileChooser.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      FileDialog fileDialog=new FileDialog(new Shell());
      fileDialog.setText(""String_Node_Str"");
      fileDialog.setFilterPath(filePath);
      String[] filterExt={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      fileDialog.setFilterExtensions(filterExt);
      inputFile=fileDialog.open();
      if (inputFile == null)       return;
      dataSetDescription.setDataSourcePath(inputFile);
      txtFileName.setText(inputFile);
      txtDataSetLabel.setText(determineDataSetLabel());
      createDataPreviewTable(""String_Node_Str"");
    }
  }
);
  Composite groupingComposite=new Composite(composite,SWT.NONE);
  groupingComposite.setLayout(new GridLayout(2,true));
  groupingComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,3));
  Group columnGroupingsGroup=new Group(groupingComposite,SWT.SHADOW_ETCHED_IN);
  columnGroupingsGroup.setText(""String_Node_Str"");
  columnGroupingsGroup.setLayout(new GridLayout(2,false));
  columnGroupingsGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  listColumnGroupings=new List(columnGroupingsGroup,SWT.SINGLE);
  listColumnGroupings.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Button addColumnGroupingButton=new Button(columnGroupingsGroup,SWT.PUSH);
  addColumnGroupingButton.setText(""String_Node_Str"");
  addColumnGroupingButton.setLayoutData(new GridData(SWT.CENTER,SWT.TOP,false,false));
  addColumnGroupingButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      ImportGroupingDialog groupingDialog=new ImportGroupingDialog(new Shell());
      groupingDialog.open();
    }
  }
);
  Group rowGroupingsGroup=new Group(groupingComposite,SWT.SHADOW_ETCHED_IN);
  rowGroupingsGroup.setText(""String_Node_Str"");
  rowGroupingsGroup.setLayout(new GridLayout(2,false));
  rowGroupingsGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  listRowGroupings=new List(rowGroupingsGroup,SWT.SINGLE);
  listRowGroupings.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  Button addRowGroupingButton=new Button(rowGroupingsGroup,SWT.PUSH);
  addRowGroupingButton.setText(""String_Node_Str"");
  addRowGroupingButton.setLayoutData(new GridData(SWT.CENTER,SWT.TOP,false,false));
  addRowGroupingButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      ImportGroupingDialog groupingDialog=new ImportGroupingDialog(new Shell());
      groupingDialog.open();
    }
  }
);
  allRegisteredIDCategories.clear();
  allRegisteredIDCategories.addAll(IDCategory.getAllRegisteredIDCategories());
  Composite idComposite=new Composite(composite,SWT.NONE);
  idComposite.setLayout(new GridLayout(4,false));
  idComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  createRowIDCategoryGroup(idComposite);
  createRecordIDTypeGroup(idComposite);
  createColumnIDCategoryGroup(idComposite);
  createDimensionIDTypeGroup(idComposite);
  Group dataSetLabelGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  dataSetLabelGroup.setText(""String_Node_Str"");
  dataSetLabelGroup.setLayout(new GridLayout(1,false));
  gridData=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dataSetLabelGroup.setLayoutData(gridData);
  txtDataSetLabel=new Text(dataSetLabelGroup,SWT.BORDER);
  txtDataSetLabel.setText(determineDataSetLabel());
  txtDataSetLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Group startParseAtLineGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  startParseAtLineGroup.setText(""String_Node_Str"");
  startParseAtLineGroup.setLayout(new GridLayout(1,false));
  txtStartParseAtLine=new Text(startParseAtLineGroup,SWT.BORDER);
  txtStartParseAtLine.setLayoutData(new GridData(50,15));
  txtStartParseAtLine.setText(""String_Node_Str"");
  txtStartParseAtLine.setTextLimit(2);
  txtStartParseAtLine.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      dataSetDescription.setNumberOfHeaderLines(Integer.valueOf(txtStartParseAtLine.getText()));
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  createDelimiterGroup();
  createFilterGroup();
  createDataPropertiesGroup();
  previewTable=new Table(composite,SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
  previewTable.setLinesVisible(true);
  previewTable.setHeaderVisible(true);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=numGridCols;
  gridData.heightHint=400;
  gridData.widthHint=800;
  previewTable.setLayoutData(gridData);
  if (!inputFile.isEmpty()) {
    txtFileName.setText(inputFile);
    dataSetDescription.setDataSourcePath(inputFile);
    mathFilterMode=""String_Node_Str"";
    createDataPreviewTable(""String_Node_Str"");
  }
}","private void createGUI(Composite parent){
  int numGridCols=4;
  composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(numGridCols,false);
  composite.setLayout(layout);
  Group inputFileGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  inputFileGroup.setText(""String_Node_Str"");
  inputFileGroup.setLayout(new GridLayout(2,false));
  GridData gridData=new GridData(SWT.BEGINNING);
  gridData.horizontalSpan=2;
  inputFileGroup.setLayoutData(gridData);
  Button buttonFileChooser=new Button(inputFileGroup,SWT.PUSH);
  buttonFileChooser.setText(""String_Node_Str"");
  txtFileName=new Text(inputFileGroup,SWT.BORDER);
  txtFileName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  buttonFileChooser.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      FileDialog fileDialog=new FileDialog(new Shell());
      fileDialog.setText(""String_Node_Str"");
      fileDialog.setFilterPath(filePath);
      String[] filterExt={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
      fileDialog.setFilterExtensions(filterExt);
      inputFile=fileDialog.open();
      if (inputFile == null)       return;
      dataSetDescription.setDataSourcePath(inputFile);
      txtFileName.setText(inputFile);
      txtDataSetLabel.setText(determineDataSetLabel());
      createDataPreviewTable(""String_Node_Str"");
    }
  }
);
  Composite groupingComposite=new Composite(composite,SWT.NONE);
  groupingComposite.setLayout(new GridLayout(2,true));
  groupingComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,3));
  createGroupingGroup(groupingComposite,""String_Node_Str"",columnGroupingSpecifications,true);
  createGroupingGroup(groupingComposite,""String_Node_Str"",rowGroupingSpecifications,false);
  allRegisteredIDCategories.clear();
  allRegisteredIDCategories.addAll(IDCategory.getAllRegisteredIDCategories());
  Composite idComposite=new Composite(composite,SWT.NONE);
  idComposite.setLayout(new GridLayout(4,false));
  idComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true,2,1));
  createRowIDCategoryGroup(idComposite);
  createRecordIDTypeGroup(idComposite);
  createColumnIDCategoryGroup(idComposite);
  createDimensionIDTypeGroup(idComposite);
  Group dataSetLabelGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  dataSetLabelGroup.setText(""String_Node_Str"");
  dataSetLabelGroup.setLayout(new GridLayout(1,false));
  gridData=new GridData(SWT.FILL,SWT.FILL,true,true,2,1);
  dataSetLabelGroup.setLayoutData(gridData);
  txtDataSetLabel=new Text(dataSetLabelGroup,SWT.BORDER);
  txtDataSetLabel.setText(determineDataSetLabel());
  txtDataSetLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Group startParseAtLineGroup=new Group(composite,SWT.SHADOW_ETCHED_IN);
  startParseAtLineGroup.setText(""String_Node_Str"");
  startParseAtLineGroup.setLayout(new GridLayout(1,false));
  txtStartParseAtLine=new Text(startParseAtLineGroup,SWT.BORDER);
  txtStartParseAtLine.setLayoutData(new GridData(50,15));
  txtStartParseAtLine.setText(""String_Node_Str"");
  txtStartParseAtLine.setTextLimit(2);
  txtStartParseAtLine.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      dataSetDescription.setNumberOfHeaderLines(Integer.valueOf(txtStartParseAtLine.getText()));
      createDataPreviewTable(""String_Node_Str"");
      composite.pack();
    }
  }
);
  createDelimiterGroup(composite);
  createFilterGroup();
  createDataPropertiesGroup();
  previewTable=new Table(composite,SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
  previewTable.setLinesVisible(true);
  previewTable.setHeaderVisible(true);
  gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=numGridCols;
  gridData.heightHint=400;
  gridData.widthHint=800;
  previewTable.setLayoutData(gridData);
  if (!inputFile.isEmpty()) {
    txtFileName.setText(inputFile);
    dataSetDescription.setDataSourcePath(inputFile);
    mathFilterMode=""String_Node_Str"";
    createDataPreviewTable(""String_Node_Str"");
  }
}",0.809390836694591
57599,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLBookmarkView(glCanvas,parent,serializedView.getViewFrustum());
  view.initFromSerializableRepresentation(serializedView);
  if (view instanceof IDataDomainBasedView<?>) {
    IDataDomain dataDomain=DataDomainManager.get().getDataDomainByID(((ASerializedSingleDataContainerBasedView)serializedView).getDataDomainID());
    @SuppressWarnings(""String_Node_Str"") IDataDomainBasedView<IDataDomain> dataDomainBasedView=(IDataDomainBasedView<IDataDomain>)view;
    dataDomainBasedView.setDataDomain(dataDomain);
  }
  view.initialize();
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLBookmarkView(glCanvas,parent,serializedView.getViewFrustum());
  initializeView();
  createPartControlGL();
}",0.4940152339499456
57600,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLBucket(glCanvas,parentComposite,serializedView.getViewFrustum());
  if (view instanceof IDataDomainBasedView<?>) {
    IDataDomain dataDomain=DataDomainManager.get().getDataDomainByID(((ASerializedSingleDataContainerBasedView)serializedView).getDataDomainID());
    @SuppressWarnings(""String_Node_Str"") IDataDomainBasedView<IDataDomain> dataDomainBasedView=(IDataDomainBasedView<IDataDomain>)view;
    dataDomainBasedView.setDataDomain(dataDomain);
  }
  view.initFromSerializableRepresentation(serializedView);
  view.initialize();
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLBucket(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  createPartControlGL();
}",0.4972972972972973
57601,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLDataViewIntegrator(glCanvas,parentComposite,serializedView.getViewFrustum());
  view.initFromSerializableRepresentation(serializedView);
  view.initialize();
  minSizeComposite.setView((AGLView)view);
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLDataViewIntegrator(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  minSizeComposite.setView((AGLView)view);
  createPartControlGL();
}",0.7962962962962963
57602,"@Override public ASerializedView getSerializableRepresentation(){
  SerializedEnRoutePathwayView serializedForm=new SerializedEnRoutePathwayView();
  serializedForm.setViewID(this.getID());
  return serializedForm;
}","@Override public ASerializedMultiDataContainerBasedView getSerializableRepresentation(){
  SerializedEnRoutePathwayView serializedForm=new SerializedEnRoutePathwayView();
  serializedForm.setViewID(this.getID());
  return serializedForm;
}",0.9494505494505494
57603,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLEnRoutePathway(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  view.initFromSerializableRepresentation(serializedView);
  minSizeComposite.setView((AGLView)view);
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLEnRoutePathway(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  minSizeComposite.setView((AGLView)view);
  createPartControlGL();
}",0.8575899843505478
57604,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLFilterPipeline(glCanvas,parentComposite,serializedView.getViewFrustum());
  view.initFromSerializableRepresentation(serializedView);
  if (view instanceof IDataDomainBasedView<?>) {
    IDataDomain dataDomain=DataDomainManager.get().getDataDomainByID(((ASerializedSingleDataContainerBasedView)serializedView).getDataDomainID());
    @SuppressWarnings(""String_Node_Str"") IDataDomainBasedView<IDataDomain> dataDomainBasedView=(IDataDomainBasedView<IDataDomain>)view;
    dataDomainBasedView.setDataDomain(dataDomain);
  }
  view.initialize();
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLFilterPipeline(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  createPartControlGL();
}",0.5143464399574921
57605,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLHierarchicalHeatMap(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  view.initFromSerializableRepresentation(serializedView);
  view.initialize();
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLHierarchicalHeatMap(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  createPartControlGL();
}",0.863013698630137
57606,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLKaplanMeier(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  view.initFromSerializableRepresentation(serializedView);
  view.initialize();
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLKaplanMeier(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  createPartControlGL();
}",0.8591549295774648
57607,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLRadialHierarchy(glCanvas,parentComposite,serializedView.getViewFrustum());
  view.initFromSerializableRepresentation(serializedView);
  if (view instanceof IDataDomainBasedView<?>) {
    IDataDomain dataDomain=DataDomainManager.get().getDataDomainByID(((ASerializedSingleDataContainerBasedView)serializedView).getDataDomainID());
    @SuppressWarnings(""String_Node_Str"") IDataDomainBasedView<IDataDomain> dataDomainBasedView=(IDataDomainBasedView<IDataDomain>)view;
    dataDomainBasedView.setDataDomain(dataDomain);
  }
  view.initialize();
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLRadialHierarchy(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  createPartControlGL();
}",0.5153764581124072
57608,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLBrick(glCanvas,parentComposite,serializedView.getViewFrustum());
  view.initFromSerializableRepresentation(serializedView);
  if (view instanceof IDataDomainBasedView<?>) {
    IDataDomain dataDomain=DataDomainManager.get().getDataDomainByID(((ASerializedSingleDataContainerBasedView)serializedView).getDataDomainID());
    if (dataDomain == null)     throw new IllegalStateException(""String_Node_Str"");
    @SuppressWarnings(""String_Node_Str"") IDataDomainBasedView<IDataDomain> dataDomainBasedView=(IDataDomainBasedView<IDataDomain>)view;
    dataDomainBasedView.setDataDomain(dataDomain);
  }
  view.initialize();
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLBrick(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  createPartControlGL();
}",0.4627606752730884
57609,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLTagCloud(glCanvas,parentComposite,serializedView.getViewFrustum());
  view.initFromSerializableRepresentation(serializedView);
  if (view instanceof IDataDomainBasedView<?>) {
    IDataDomain dataDomain=DataDomainManager.get().getDataDomainByID(((ASerializedSingleDataContainerBasedView)serializedView).getDataDomainID());
    if (dataDomain == null)     throw new IllegalStateException(""String_Node_Str"");
    @SuppressWarnings(""String_Node_Str"") IDataDomainBasedView<IDataDomain> dataDomainBasedView=(IDataDomainBasedView<IDataDomain>)view;
    dataDomainBasedView.setDataDomain(dataDomain);
  }
  view.initialize();
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLTagCloud(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  createPartControlGL();
}",0.4659427443237907
57610,"@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLTemplate(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  view.initFromSerializableRepresentation(serializedView);
  view.initialize();
  createPartControlGL();
}","@Override public void createPartControl(Composite parent){
  super.createPartControl(parent);
  createGLCanvas();
  view=new GLTemplate(glCanvas,parentComposite,serializedView.getViewFrustum());
  initializeView();
  createPartControlGL();
}",0.8576512455516014
57611,"/** 
 * Handle view exceptions.
 * @param exception
 */
public void handleViewException(RuntimeException exception,final AGLView glEventListener){
  Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"" + exception.getMessage(),exception));
  glEventListener.getParentComposite().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      MessageBox messageBox=new MessageBox(glEventListener.getParentComposite().getShell(),SWT.OK);
      messageBox.setText(""String_Node_Str"");
      messageBox.setMessage(""String_Node_Str"" + glEventListener.getViewName() + ""String_Node_Str"");
      messageBox.open();
    }
  }
);
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      IViewPart viewToClose=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(glEventListener.getViewType());
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().hideView(viewToClose);
    }
  }
);
  GeneralManager.get().getViewManager().unregisterGLCanvas(glEventListener.getParentGLCanvas());
}","/** 
 * Handle view exceptions.
 * @param exception
 */
public void handleViewException(RuntimeException exception,final AGLView glEventListener){
  Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"" + exception.getMessage(),exception));
  glEventListener.getParentComposite().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      MessageBox messageBox=new MessageBox(glEventListener.getParentComposite().getShell(),SWT.OK);
      messageBox.setText(""String_Node_Str"");
      messageBox.setMessage(""String_Node_Str"" + glEventListener.getViewName() + ""String_Node_Str"");
      messageBox.open();
    }
  }
);
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      IViewPart viewToClose=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(glEventListener.getViewType());
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().hideView(viewToClose);
    }
  }
);
}",0.952981095492002
57612,"/** 
 * Destroys this view by removing data common in all views and calling  {@link #destroyViewSpecificContent(GL2)}.
 * @param gl
 */
public final void destroy(GL2 gl){
  this.broadcastElements(EVAOperation.REMOVE_ELEMENT);
  pickingManager.removeViewSpecificData(uniqueID);
  generalManager.getViewManager().getConnectedElementRepresentationManager().clearAll();
  unregisterEventListeners();
  destroyViewSpecificContent(gl);
}","/** 
 * Destroys this view by removing data common in all views and calling  {@link #destroyViewSpecificContent(GL2)}.
 * @param gl
 */
public final void destroy(GL2 gl){
  System.out.println(""String_Node_Str"" + label);
  this.broadcastElements(EVAOperation.REMOVE_ELEMENT);
  pickingManager.removeViewSpecificData(uniqueID);
  generalManager.getViewManager().getConnectedElementRepresentationManager().clearAll();
  unregisterEventListeners();
  destroyViewSpecificContent(gl);
}",0.946212952799122
57613,"@Override public void dispose(GLAutoDrawable drawable){
  GL2 gl=drawable.getGL().getGL2();
  ViewManager.get().destroyRemoteViews(gl,this);
  ViewManager.get().unregisterGLView(this);
  destroy(gl);
}","@Override public void dispose(GLAutoDrawable drawable){
  System.out.println(""String_Node_Str"" + label);
  GL2 gl=drawable.getGL().getGL2();
  ViewManager.get().destroyRemoteViews(gl,this);
  ViewManager.get().unregisterGLView(this);
  destroy(gl);
}",0.8913525498891353
57614,"public void updateView(AGLView view){
  if (view.isRenderedRemote())   return;
  ViewNode viewNode=null;
  for (  ViewNode node : viewNodes) {
    if (node.getRepresentedView() == view) {
      viewNode=node;
      break;
    }
  }
  if (viewNode == null)   return;
  Set<IDataDomain> dataDomainsOfView=view.getDataDomains();
  if (dataDomainsOfView != null) {
    updateGraphEdgesOfViewNode(viewNode);
    viewNode.update();
  }
}","public void updateView(AGLView view){
  if (view.isRenderedRemote())   return;
  ViewNode viewNode=null;
  for (  ViewNode node : viewNodes) {
    if (node.getRepresentedView() == view) {
      viewNode=node;
      break;
    }
  }
  if (viewNode == null)   return;
  Set<IDataDomain> dataDomainsOfView=view.getDataDomains();
  if (dataDomainsOfView != null) {
    viewNode.update();
    updateGraphEdgesOfViewNode(viewNode);
  }
}",0.9466357308584686
57615,"@Override public void update(){
  retrieveDataContainers();
  dataContainerListRenderer.setDataContainers(getDataContainers());
  recalculateNodeSize();
  graphLayout.fitNodesToDrawingArea(view.calculateGraphDrawingArea());
  view.setDisplayListDirty();
}","@Override public void update(){
  dataDomains=representedView.getDataDomains();
  retrieveDataContainers();
  dataContainerListRenderer.setDataContainers(getDataContainers());
  recalculateNodeSize();
  graphLayout.fitNodesToDrawingArea(view.calculateGraphDrawingArea());
  view.setDisplayListDirty();
}",0.913978494623656
57616,"@Override public void update(){
  recalculateNodeSize();
}","@Override public void update(){
  dataDomains=representedView.getDataDomains();
  recalculateNodeSize();
}",0.7073170731707317
57617,"/** 
 * <p> Creates a column for each DataContainer supplied </p> <p> As StratomeX can only map between data sets that share a mapping between records, the imprinting of the IDType and IDCategory for the records is done here if there is no data set yet. </p>
 * @param newDataContainers
 * @param brickConfigurer The brick configurer can be specified externally (e.g., pathways, kaplan meier). If null, the {@link NumericalDataConfigurer} will be used.
 */
public void addDataContainers(List<DataContainer> newDataContainers,IBrickConfigurer brickConfigurer){
  if (newDataContainers == null || newDataContainers.size() == 0) {
    Logger.log(new Status(Status.WARNING,this.toString(),""String_Node_Str""));
    return;
  }
  if (recordIDCategory == null) {
    ATableBasedDataDomain dataDomain=newDataContainers.get(0).getDataDomain();
    imprintVisBricks(dataDomain);
  }
  ArrayList<BrickColumn> brickColumns=brickColumnManager.getBrickColumns();
  for (  DataContainer dataContainer : newDataContainers) {
    if (!dataContainer.getDataDomain().getRecordIDCategory().equals(recordIDCategory)) {
      Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + dataContainer + ""String_Node_Str""));
    }
    boolean dimensionGroupExists=false;
    for (    BrickColumn brickColumn : brickColumns) {
      if (brickColumn.getDataContainer().getID() == dataContainer.getID()) {
        dimensionGroupExists=true;
        break;
      }
    }
    if (!dimensionGroupExists) {
      BrickColumn dimensionGroup=(BrickColumn)GeneralManager.get().getViewManager().createGLView(BrickColumn.class,getParentGLCanvas(),parentComposite,new ViewFrustum(CameraProjectionMode.ORTHOGRAPHIC,0,1,0,1,-1,1));
      if (brickConfigurer == null) {
        if (dataContainer.getNrDimensions() == 1) {
          brickConfigurer=new CategoricalDataConfigurer(dataContainer);
        }
 else {
          brickConfigurer=new NumericalDataConfigurer(dataContainer);
        }
      }
      dimensionGroup.setDetailLevel(this.getDetailLevel());
      dimensionGroup.setBrickConfigurer(brickConfigurer);
      dimensionGroup.setDataDomain(dataContainer.getDataDomain());
      dimensionGroup.setDataContainer(dataContainer);
      dimensionGroup.setRemoteRenderingGLView(this);
      dimensionGroup.setStratomex(this);
      dimensionGroup.initialize();
      brickColumns.add(dimensionGroup);
      dataContainers.add(dataContainer);
      uninitializedBrickColumns.add(dimensionGroup);
      brickColumnManager.setRightGroupStartIndex(brickColumnManager.getRightGroupStartIndex() + 1);
    }
  }
  DataContainersChangedEvent event=new DataContainersChangedEvent(this);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}","/** 
 * <p> Creates a column for each DataContainer supplied </p> <p> As StratomeX can only map between data sets that share a mapping between records, the imprinting of the IDType and IDCategory for the records is done here if there is no data set yet. </p>
 * @param newDataContainers
 * @param brickConfigurer The brick configurer can be specified externally (e.g., pathways, kaplan meier). If null, the {@link NumericalDataConfigurer} will be used.
 */
public void addDataContainers(List<DataContainer> newDataContainers,IBrickConfigurer brickConfigurer){
  if (newDataContainers == null || newDataContainers.size() == 0) {
    Logger.log(new Status(Status.WARNING,this.toString(),""String_Node_Str""));
    return;
  }
  if (recordIDCategory == null) {
    ATableBasedDataDomain dataDomain=newDataContainers.get(0).getDataDomain();
    imprintVisBricks(dataDomain);
  }
  ArrayList<BrickColumn> brickColumns=brickColumnManager.getBrickColumns();
  for (  DataContainer dataContainer : newDataContainers) {
    if (!dataContainer.getDataDomain().getRecordIDCategory().equals(recordIDCategory)) {
      Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + dataContainer + ""String_Node_Str""));
    }
    boolean dimensionGroupExists=false;
    for (    BrickColumn brickColumn : brickColumns) {
      if (brickColumn.getDataContainer().getID() == dataContainer.getID()) {
        dimensionGroupExists=true;
        break;
      }
    }
    if (!dimensionGroupExists) {
      BrickColumn brickColumn=(BrickColumn)GeneralManager.get().getViewManager().createGLView(BrickColumn.class,getParentGLCanvas(),parentComposite,new ViewFrustum(CameraProjectionMode.ORTHOGRAPHIC,0,1,0,1,-1,1));
      if (brickConfigurer == null) {
        if (dataContainer.getNrDimensions() == 1) {
          brickConfigurer=new CategoricalDataConfigurer(dataContainer);
        }
 else {
          brickConfigurer=new NumericalDataConfigurer(dataContainer);
        }
      }
      brickColumn.setDetailLevel(this.getDetailLevel());
      brickColumn.setBrickConfigurer(brickConfigurer);
      brickColumn.setDataDomain(dataContainer.getDataDomain());
      brickColumn.setDataContainer(dataContainer);
      brickColumn.setRemoteRenderingGLView(this);
      brickColumn.setStratomex(this);
      brickColumn.initialize();
      brickColumns.add(brickColumn);
      dataContainers.add(dataContainer);
      uninitializedBrickColumns.add(brickColumn);
      brickColumnManager.setRightGroupStartIndex(brickColumnManager.getRightGroupStartIndex() + 1);
    }
  }
  DataContainersChangedEvent event=new DataContainersChangedEvent(this);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}",0.95422922006591
57618,"@Override public void dispose(GLAutoDrawable drawable){
  System.out.println(""String_Node_Str"" + label);
  GL2 gl=drawable.getGL().getGL2();
  ViewManager.get().destroyRemoteViews(gl,this);
  ViewManager.get().unregisterGLView(this);
  destroy(gl);
}","@Override public void dispose(GLAutoDrawable drawable){
  if (PlatformUI.getWorkbench().isClosing())   return;
  System.out.println(""String_Node_Str"" + label);
  GL2 gl=drawable.getGL().getGL2();
  ViewManager.get().destroyRemoteViews(gl,this);
  ViewManager.get().unregisterGLView(this);
  destroy(gl);
}",0.9009009009009008
57619,"@Override protected void destroyViewSpecificContent(GL2 gl){
  layoutManager.destroy(gl);
}","@Override protected void destroyViewSpecificContent(GL2 gl){
  if (layoutManager != null)   layoutManager.destroy(gl);
}",0.8625592417061612
57620,"protected void retrieveDataContainers(){
  dataContainers=new ArrayList<DataContainer>();
  List<DataContainer> containers=((IDataContainerBasedView)representedView).getDataContainers();
  if (containers == null)   return;
  Set<IDataDomain> dataDomains=new HashSet<IDataDomain>();
  for (  DataContainer container : containers) {
    if (container instanceof PathwayDataContainer) {
      dataDomains.add(((PathwayDataContainer)container).getPathwayDataDomain());
    }
 else {
      dataDomains.add(container.getDataDomain());
    }
  }
  List<Pair<Float,ADataNode>> sortedDataNodes=new ArrayList<Pair<Float,ADataNode>>();
  for (  IDataDomain dataDomain : dataDomains) {
    ADataNode dataNode=view.getDataNode(dataDomain);
    if (dataNode != null) {
      sortedDataNodes.add(new Pair<Float,ADataNode>((float)dataNode.getPosition().getX(),dataNode));
    }
  }
  Collections.sort(sortedDataNodes);
  for (  Pair<Float,ADataNode> dataNodePair : sortedDataNodes) {
    ADataNode dataNode=dataNodePair.getSecond();
    List<DataContainer> sortedNodeDataContainers=dataNode.getDataContainers();
    for (    DataContainer nodeContainer : sortedNodeDataContainers) {
      for (      DataContainer container : containers) {
        if (nodeContainer == container) {
          dataContainers.add(container);
          break;
        }
      }
    }
  }
}","protected void retrieveDataContainers(){
  dataContainers=new ArrayList<DataContainer>(((IDataContainerBasedView)representedView).getDataContainers());
  if (dataContainers == null) {
    dataContainers=new ArrayList<DataContainer>();
    return;
  }
  Set<IDataDomain> dataDomains=new HashSet<IDataDomain>();
  for (  DataContainer container : dataContainers) {
    if (container instanceof PathwayDataContainer) {
      dataDomains.add(((PathwayDataContainer)container).getPathwayDataDomain());
    }
 else {
      dataDomains.add(container.getDataDomain());
    }
  }
  sortDataContainers();
}",0.517188301693176
57621,"@Override public void handleDrop(GL2 gl,Set<IDraggable> draggables,float mouseCoordinateX,float mouseCoordinateY,DragAndDropController dragAndDropController){
  ArrayList<DataContainer> dataContainers=new ArrayList<DataContainer>();
  for (  IDraggable draggable : draggables) {
    if (draggable instanceof DimensionGroupRenderer) {
      DimensionGroupRenderer dimensionGroupRenderer=(DimensionGroupRenderer)draggable;
      dataContainers.add(dimensionGroupRenderer.getDataContainer());
    }
  }
  if (!dataContainers.isEmpty()) {
    DataContainer dataContainer=dataContainers.get(0);
    AddDataContainersEvent event=new AddDataContainersEvent(dataContainer);
    event.setReceiver(representedView);
    event.setSender(this);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
    getDataContainers().add(dataContainer);
    dataDomains.add(dataContainer.getDataDomain());
    dataContainerListRenderer.setDataContainers(getDataContainers());
    view.updateGraphEdgesOfViewNode(this);
    recalculateNodeSize();
    graphLayout.fitNodesToDrawingArea(view.calculateGraphDrawingArea());
    view.setDisplayListDirty();
  }
}","@Override public void handleDrop(GL2 gl,Set<IDraggable> draggables,float mouseCoordinateX,float mouseCoordinateY,DragAndDropController dragAndDropController){
  ArrayList<DataContainer> dataContainers=new ArrayList<DataContainer>();
  for (  IDraggable draggable : draggables) {
    if (draggable instanceof DimensionGroupRenderer) {
      DimensionGroupRenderer dimensionGroupRenderer=(DimensionGroupRenderer)draggable;
      dataContainers.add(dimensionGroupRenderer.getDataContainer());
    }
  }
  if (!dataContainers.isEmpty()) {
    DataContainer dataContainer=dataContainers.get(0);
    AddDataContainersEvent event=new AddDataContainersEvent(dataContainer);
    event.setReceiver(representedView);
    event.setSender(this);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
    if (dataContainer instanceof PathwayDataContainer) {
      dataDomains.add(((PathwayDataContainer)dataContainer).getPathwayDataDomain());
    }
 else {
      dataDomains.add(dataContainer.getDataDomain());
    }
    getDataContainers().add(dataContainer);
    sortDataContainers();
    dataContainerListRenderer.setDataContainers(getDataContainers());
    view.updateGraphEdgesOfViewNode(this);
    recalculateNodeSize();
    graphLayout.fitNodesToDrawingArea(view.calculateGraphDrawingArea());
    view.setDisplayListDirty();
  }
}",0.8774193548387097
57622,"@Override public void registerEventListeners(){
  addSelectionTypeListener=new SelectionTypeListener();
  addSelectionTypeListener.setHandler(this);
  GeneralManager.get().getEventPublisher().addListener(SelectionTypeEvent.class,addSelectionTypeListener);
  removeManagedSelectionTypesListener=new RemoveManagedSelectionTypesListener();
  removeManagedSelectionTypesListener.setHandler(this);
  GeneralManager.get().getEventPublisher().addListener(RemoveManagedSelectionTypesEvent.class,removeManagedSelectionTypesListener);
}","@Override public synchronized void registerEventListeners(){
  addSelectionTypeListener=new SelectionTypeListener();
  addSelectionTypeListener.setHandler(this);
  GeneralManager.get().getEventPublisher().addListener(SelectionTypeEvent.class,addSelectionTypeListener);
  removeManagedSelectionTypesListener=new RemoveManagedSelectionTypesListener();
  removeManagedSelectionTypesListener.setHandler(this);
  GeneralManager.get().getEventPublisher().addListener(RemoveManagedSelectionTypesEvent.class,removeManagedSelectionTypesListener);
}",0.9877934272300468
57623,"/** 
 * Changes the current selection type. By default the selection type is set to SelectionType.SELECTION. Should only be called via a  {@link SelectionTypeEvent}.
 * @param selectionType
 */
public void setSelectionType(SelectionType selectionType){
  this.selectionType=selectionType;
}","/** 
 * Changes the current selection type. By default the selection type is set to SelectionType.SELECTION. Should only be called via a  {@link SelectionTypeEvent}.
 * @param selectionType
 */
public synchronized void setSelectionType(SelectionType selectionType){
  this.selectionType=selectionType;
}",0.9780775716694772
57624,"/** 
 * Returns the current selection type. By default this is SelectionType.SELECTION.
 * @return
 */
public SelectionType getSelectionType(){
  return selectionType;
}","/** 
 * Returns the current selection type. By default this is SelectionType.SELECTION.
 * @return
 */
public synchronized SelectionType getSelectionType(){
  return selectionType;
}",0.9629629629629628
57625,"@Override public void unregisterEventListeners(){
  if (addSelectionTypeListener != null) {
    GeneralManager.get().getEventPublisher().removeListener(addSelectionTypeListener);
    addSelectionTypeListener=null;
  }
  if (removeManagedSelectionTypesListener != null) {
    GeneralManager.get().getEventPublisher().removeListener(removeManagedSelectionTypesListener);
    removeManagedSelectionTypesListener=null;
  }
}","@Override public synchronized void unregisterEventListeners(){
  if (addSelectionTypeListener != null) {
    GeneralManager.get().getEventPublisher().removeListener(addSelectionTypeListener);
    addSelectionTypeListener=null;
  }
  if (removeManagedSelectionTypesListener != null) {
    GeneralManager.get().getEventPublisher().removeListener(removeManagedSelectionTypesListener);
    removeManagedSelectionTypesListener=null;
  }
}",0.984759671746776
57626,"/** 
 * Removes a custom selection type from the selection manager. Should only be called via a   {@link SelectionTypeEvent}
 */
void removeSelectionType(SelectionType selectionType){
  hashSelectionTypes.remove(selectionType);
  selectionTypes.remove(selectionType);
}","/** 
 * Removes a custom selection type from the selection manager. Should only be called via a   {@link SelectionTypeEvent}
 */
synchronized void removeSelectionType(SelectionType selectionType){
  hashSelectionTypes.remove(selectionType);
  selectionTypes.remove(selectionType);
}",0.9764065335753176
57627,"/** 
 * <p> Returns a semi-deep copy of the selection manager. That means that all containers have been cloned to be modifiable without affecting the source manager, however the elements themselves such as Integers or SelectionTypes are the same (this is necessary for SelectionTypes and should be fine for other values since they are not changed). </p> <p> Notice that the clone does not contain a virtual array! <b>It must be explicitly set by the receiver.</b> </p>
 */
@Override @SuppressWarnings(""String_Node_Str"") public SelectionManager clone(){
  SelectionManager clone;
  try {
    clone=(SelectionManager)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    throw new IllegalStateException(""String_Node_Str"" + e.getMessage());
  }
  clone.registerEventListeners();
  clone.hashConnectionToElementID=(HashMap<Integer,ArrayList<Integer>>)this.hashConnectionToElementID.clone();
  for (  Integer id : clone.hashConnectionToElementID.keySet()) {
    clone.hashConnectionToElementID.put(id,(ArrayList<Integer>)this.hashConnectionToElementID.get(id).clone());
  }
  clone.hashSelectionTypes=(HashMap<SelectionType,HashMap<Integer,Integer>>)this.hashSelectionTypes.clone();
  for (  SelectionType selectionType : clone.hashSelectionTypes.keySet()) {
    clone.hashSelectionTypes.put(selectionType,(HashMap<Integer,Integer>)this.hashSelectionTypes.get(selectionType).clone());
  }
  clone.deltaBlackList=(HashMap<SelectionType,Boolean>)this.deltaBlackList.clone();
  clone.selectionTypes=(ArrayList<SelectionType>)this.selectionTypes.clone();
  clone.selectionDelta=new SelectionDelta(idType);
  return clone;
}","/** 
 * <p> Returns a semi-deep copy of the selection manager. That means that all containers have been cloned to be modifiable without affecting the source manager, however the elements themselves such as Integers or SelectionTypes are the same (this is necessary for SelectionTypes and should be fine for other values since they are not changed). </p> <p> Notice that the clone does not contain a virtual array! <b>It must be explicitly set by the receiver.</b> </p>
 */
@Override @SuppressWarnings(""String_Node_Str"") public synchronized SelectionManager clone(){
  SelectionManager clone;
  try {
    clone=(SelectionManager)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    throw new IllegalStateException(""String_Node_Str"" + e.getMessage());
  }
  clone.registerEventListeners();
  clone.hashConnectionToElementID=(HashMap<Integer,ArrayList<Integer>>)this.hashConnectionToElementID.clone();
  for (  Integer id : clone.hashConnectionToElementID.keySet()) {
    clone.hashConnectionToElementID.put(id,(ArrayList<Integer>)this.hashConnectionToElementID.get(id).clone());
  }
  clone.hashSelectionTypes=(HashMap<SelectionType,HashMap<Integer,Integer>>)this.hashSelectionTypes.clone();
  for (  SelectionType selectionType : clone.hashSelectionTypes.keySet()) {
    clone.hashSelectionTypes.put(selectionType,(HashMap<Integer,Integer>)this.hashSelectionTypes.get(selectionType).clone());
  }
  clone.deltaBlackList=(HashMap<SelectionType,Boolean>)this.deltaBlackList.clone();
  clone.selectionTypes=(ArrayList<SelectionType>)this.selectionTypes.clone();
  clone.selectionDelta=new SelectionDelta(idType);
  return clone;
}",0.99601593625498
57628,"@Override public String toString(){
  String result=""String_Node_Str"" + idType + ""String_Node_Str"";
  for (  SelectionType selectionType : hashSelectionTypes.keySet()) {
    result=result + ""String_Node_Str"" + selectionType+ ""String_Node_Str""+ hashSelectionTypes.get(selectionType).size()+ ""String_Node_Str"";
  }
  return result;
}","@Override public synchronized String toString(){
  String result=""String_Node_Str"" + idType + ""String_Node_Str"";
  for (  SelectionType selectionType : hashSelectionTypes.keySet()) {
    result=result + ""String_Node_Str"" + selectionType+ ""String_Node_Str""+ hashSelectionTypes.get(selectionType).size()+ ""String_Node_Str"";
  }
  return result;
}",0.9807407407407408
57629,"public void createPathwayResourceLoader(PathwayDatabaseType type){
  IExtensionRegistry reg=Platform.getExtensionRegistry();
  if (type == PathwayDatabaseType.KEGG) {
    IExtensionPoint ep=reg.getExtensionPoint(""String_Node_Str"");
    IExtension ext=ep.getExtension(""String_Node_Str"");
    IConfigurationElement[] ce=ext.getConfigurationElements();
    try {
      keggPathwayResourceLoader=(IPathwayResourceLoader)ce[0].createExecutableExtension(""String_Node_Str"");
    }
 catch (    Exception ex) {
      throw new RuntimeException(""String_Node_Str"",ex);
    }
  }
 else   if (type == PathwayDatabaseType.BIOCARTA) {
    IExtensionPoint ep=reg.getExtensionPoint(""String_Node_Str"");
    IExtension ext=ep.getExtension(""String_Node_Str"");
    IConfigurationElement[] ce=ext.getConfigurationElements();
    try {
      biocartaPathwayResourceLoader=(IPathwayResourceLoader)ce[0].createExecutableExtension(""String_Node_Str"");
    }
 catch (    Exception ex) {
      throw new RuntimeException(""String_Node_Str"",ex);
    }
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + type);
  }
}","public void createPathwayResourceLoader(PathwayDatabaseType type){
  IExtensionRegistry reg=Platform.getExtensionRegistry();
  try {
    if (type == PathwayDatabaseType.KEGG) {
      IExtensionPoint ep=reg.getExtensionPoint(""String_Node_Str"");
      IExtension ext=ep.getExtension(""String_Node_Str"");
      IConfigurationElement[] ce=ext.getConfigurationElements();
      keggPathwayResourceLoader=(IPathwayResourceLoader)ce[0].createExecutableExtension(""String_Node_Str"");
    }
 else     if (type == PathwayDatabaseType.BIOCARTA) {
      IExtensionPoint ep=reg.getExtensionPoint(""String_Node_Str"");
      IExtension ext=ep.getExtension(""String_Node_Str"");
      IConfigurationElement[] ce=ext.getConfigurationElements();
      biocartaPathwayResourceLoader=(IPathwayResourceLoader)ce[0].createExecutableExtension(""String_Node_Str"");
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + type);
    }
  }
 catch (  Exception ex) {
    Logger.log(new Status(IStatus.INFO,""String_Node_Str"",""String_Node_Str"" + type.getName() + ""String_Node_Str""));
  }
}",0.7821280515891295
57630,"public void loadPathwaysByType(PathwayDatabase pathwayDatabase){
  GeneralManager generalManager=GeneralManager.get();
  Logger.log(new Status(IStatus.INFO,""String_Node_Str"",""String_Node_Str"" + pathwayDatabase.getName() + ""String_Node_Str""));
  BufferedReader file=null;
  String line=null;
  String fileName=""String_Node_Str"";
  String pathwayPath=pathwayDatabase.getXMLPath();
  IPathwayResourceLoader pathwayResourceLoader=null;
  Organism organism=GeneralManager.get().getBasicInfo().getOrganism();
  if (pathwayDatabase.getType() == PathwayDatabaseType.KEGG) {
    if (organism == Organism.HOMO_SAPIENS) {
      fileName=""String_Node_Str"";
    }
 else     if (organism == Organism.MUS_MUSCULUS) {
      fileName=""String_Node_Str"";
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + organism);
    }
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
 else   if (pathwayDatabase.getType() == PathwayDatabaseType.BIOCARTA) {
    if (organism == Organism.HOMO_SAPIENS) {
      fileName=""String_Node_Str"";
    }
 else     if (organism == Organism.MUS_MUSCULUS) {
      fileName=""String_Node_Str"";
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + organism);
    }
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
  PathwayManager.get().createPathwayResourceLoader(pathwayDatabase.getType());
  pathwayResourceLoader=PathwayManager.get().getPathwayResourceLoader(pathwayDatabase.getType());
  try {
    if (pathwayDatabase.getType() == PathwayDatabaseType.KEGG || pathwayDatabase.getType() == PathwayDatabaseType.BIOCARTA)     file=pathwayResourceLoader.getResource(fileName);
 else     file=GeneralManager.get().getResourceLoader().getResource(fileName);
    StringTokenizer tokenizer;
    String pathwayName;
    while ((line=file.readLine()) != null) {
      tokenizer=new StringTokenizer(line,""String_Node_Str"");
      pathwayName=tokenizer.nextToken();
      if (!pathwayName.endsWith(""String_Node_Str"") && !line.contains(""String_Node_Str"") && !line.contains(""String_Node_Str"")) {
        continue;
      }
      PathwayManager.get().getXmlParserManager().parseXmlFileByName(pathwayPath + pathwayName);
      currentPathwayGraph.setWidth(Integer.valueOf(tokenizer.nextToken()).intValue());
      currentPathwayGraph.setHeight(Integer.valueOf(tokenizer.nextToken()).intValue());
      int iImageWidth=currentPathwayGraph.getWidth();
      int iImageHeight=currentPathwayGraph.getHeight();
      if (iImageWidth == -1 || iImageHeight == -1) {
        Logger.log(new Status(IStatus.INFO,""String_Node_Str"",""String_Node_Str"" + iImageWidth + ""String_Node_Str""+ iImageHeight));
      }
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(""String_Node_Str"" + fileName + ""String_Node_Str"");
  }
catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"" + fileName);
  }
  Logger.log(new Status(IStatus.INFO,""String_Node_Str"",""String_Node_Str"" + pathwayDatabase.getName() + ""String_Node_Str""));
}","public void loadPathwaysByType(PathwayDatabase pathwayDatabase){
  GeneralManager generalManager=GeneralManager.get();
  Logger.log(new Status(IStatus.INFO,""String_Node_Str"",""String_Node_Str"" + pathwayDatabase.getName() + ""String_Node_Str""));
  BufferedReader file=null;
  String line=null;
  String fileName=""String_Node_Str"";
  String pathwayPath=pathwayDatabase.getXMLPath();
  IPathwayResourceLoader pathwayResourceLoader=null;
  Organism organism=GeneralManager.get().getBasicInfo().getOrganism();
  if (pathwayDatabase.getType() == PathwayDatabaseType.KEGG) {
    if (organism == Organism.HOMO_SAPIENS) {
      fileName=""String_Node_Str"";
    }
 else     if (organism == Organism.MUS_MUSCULUS) {
      fileName=""String_Node_Str"";
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + organism);
    }
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
 else   if (pathwayDatabase.getType() == PathwayDatabaseType.BIOCARTA) {
    if (organism == Organism.HOMO_SAPIENS) {
      fileName=""String_Node_Str"";
    }
 else     if (organism == Organism.MUS_MUSCULUS) {
      fileName=""String_Node_Str"";
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + organism);
    }
    generalManager.getSWTGUIManager().setProgressBarTextFromExternalThread(""String_Node_Str"");
  }
  PathwayManager.get().createPathwayResourceLoader(pathwayDatabase.getType());
  pathwayResourceLoader=PathwayManager.get().getPathwayResourceLoader(pathwayDatabase.getType());
  if (pathwayResourceLoader == null)   return;
  try {
    if (pathwayDatabase.getType() == PathwayDatabaseType.KEGG || pathwayDatabase.getType() == PathwayDatabaseType.BIOCARTA)     file=pathwayResourceLoader.getResource(fileName);
 else     file=GeneralManager.get().getResourceLoader().getResource(fileName);
    StringTokenizer tokenizer;
    String pathwayName;
    while ((line=file.readLine()) != null) {
      tokenizer=new StringTokenizer(line,""String_Node_Str"");
      pathwayName=tokenizer.nextToken();
      if (!pathwayName.endsWith(""String_Node_Str"") && !line.contains(""String_Node_Str"") && !line.contains(""String_Node_Str"")) {
        continue;
      }
      PathwayManager.get().getXmlParserManager().parseXmlFileByName(pathwayPath + pathwayName);
      currentPathwayGraph.setWidth(Integer.valueOf(tokenizer.nextToken()).intValue());
      currentPathwayGraph.setHeight(Integer.valueOf(tokenizer.nextToken()).intValue());
      int iImageWidth=currentPathwayGraph.getWidth();
      int iImageHeight=currentPathwayGraph.getHeight();
      if (iImageWidth == -1 || iImageHeight == -1) {
        Logger.log(new Status(IStatus.INFO,""String_Node_Str"",""String_Node_Str"" + iImageWidth + ""String_Node_Str""+ iImageHeight));
      }
    }
  }
 catch (  FileNotFoundException e) {
    throw new IllegalStateException(""String_Node_Str"" + fileName + ""String_Node_Str"");
  }
catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"" + fileName);
  }
  Logger.log(new Status(IStatus.INFO,""String_Node_Str"",""String_Node_Str"" + pathwayDatabase.getName() + ""String_Node_Str""));
}",0.9924400836416278
57631,"/** 
 * Constructor. If the glCanvas object is null - then the view is rendered remote.
 * @param viewType TODO
 * @param viewName TODO
 */
protected AGLView(GLCanvas glCanvas,Composite parentComposite,final ViewFrustum viewFrustum,String viewType,String viewName){
  super(GeneralManager.get().getIDCreator().createID(ManagedObjectType.GL_VIEW),parentComposite,viewType,viewName);
  GeneralManager.get().getViewManager().registerGLView(this);
  parentGLCanvas=glCanvas;
  glMouseListener=new GLMouseListener();
  glMouseListener.setNavigationModes(false,false,false);
  parentComposite.addKeyListener(new GLFPSKeyListener(this));
  glCanvas.addMouseListener(glMouseListener);
  glCanvas.addMouseMotionListener(glMouseListener);
  glCanvas.addMouseWheelListener(glMouseListener);
  idPickingListeners=new HashMap<String,HashMap<Integer,Set<IPickingListener>>>();
  typePickingListeners=new HashMap<String,Set<IPickingListener>>();
  this.viewFrustum=viewFrustum;
  viewCamera=new ViewCameraBase(uniqueID);
  pickingManager=generalManager.getViewManager().getPickingManager();
  textureManager=new TextureManager();
  glMouseWheelListener=new GLMouseWheelListener(this);
  pixelGLConverter=new PixelGLConverter(viewFrustum,parentGLCanvas);
  mouseWheelListeners=new HashSet<IMouseWheelHandler>();
}","/** 
 * Constructor. If the glCanvas object is null - then the view is rendered remote.
 * @param viewType TODO
 * @param viewName TODO
 */
protected AGLView(GLCanvas glCanvas,final Composite parentComposite,final ViewFrustum viewFrustum,String viewType,String viewName){
  super(GeneralManager.get().getIDCreator().createID(ManagedObjectType.GL_VIEW),parentComposite,viewType,viewName);
  GeneralManager.get().getViewManager().registerGLView(this);
  parentGLCanvas=glCanvas;
  glMouseListener=new GLMouseListener();
  glMouseListener.setNavigationModes(false,false,false);
  glCanvas.addMouseListener(glMouseListener);
  glCanvas.addMouseMotionListener(glMouseListener);
  glCanvas.addMouseWheelListener(glMouseListener);
  idPickingListeners=new HashMap<String,HashMap<Integer,Set<IPickingListener>>>();
  typePickingListeners=new HashMap<String,Set<IPickingListener>>();
  this.viewFrustum=viewFrustum;
  viewCamera=new ViewCameraBase(uniqueID);
  pickingManager=generalManager.getViewManager().getPickingManager();
  textureManager=new TextureManager();
  glMouseWheelListener=new GLMouseWheelListener(this);
  pixelGLConverter=new PixelGLConverter(viewFrustum,parentGLCanvas);
  mouseWheelListeners=new HashSet<IMouseWheelHandler>();
}",0.9732072498029944
57632,"@Override public void partActivated(IWorkbenchPartReference partRef){
  IWorkbenchPart activePart=partRef.getPart(false);
  if (!(activePart instanceof CaleydoRCPViewPart)) {
    return;
  }
  CaleydoRCPViewPart viewPart=(CaleydoRCPViewPart)activePart;
  if (viewPart.getSWTComposite() != null)   viewPart.getSWTComposite().forceFocus();
  drawInlineToolBar(viewPart);
  updateSupportViews(viewPart);
}","@Override public void partActivated(IWorkbenchPartReference partRef){
  IWorkbenchPart activePart=partRef.getPart(false);
  if (!(activePart instanceof CaleydoRCPViewPart)) {
    return;
  }
  CaleydoRCPViewPart viewPart=(CaleydoRCPViewPart)activePart;
  drawInlineToolBar(viewPart);
  updateSupportViews(viewPart);
  if (viewPart.getSWTComposite() != null) {
    viewPart.getSWTComposite().forceFocus();
  }
}",0.8399014778325123
57633,"/** 
 * Set whether this view is visible.
 * @param isVisible true if the view is visible
 */
public void setVisible(boolean isVisible){
  this.isVisible=isVisible;
}","/** 
 * Set whether this view is visible.
 * @param isVisible true if the view is visible
 */
public void setVisible(boolean isVisible){
  this.isVisible=isVisible;
  if (!isVisible) {
    focusGained=false;
  }
}",0.8759894459102903
57634,"/** 
 * Constructor. If the glCanvas object is null - then the view is rendered remote.
 * @param viewType TODO
 * @param viewName TODO
 */
protected AGLView(GLCanvas glCanvas,final Composite parentComposite,final ViewFrustum viewFrustum,String viewType,String viewName){
  super(GeneralManager.get().getIDCreator().createID(ManagedObjectType.GL_VIEW),parentComposite,viewType,viewName);
  GeneralManager.get().getViewManager().registerGLView(this);
  parentGLCanvas=glCanvas;
  glMouseListener=new GLMouseListener();
  glMouseListener.setNavigationModes(false,false,false);
  glCanvas.addMouseListener(glMouseListener);
  glCanvas.addMouseMotionListener(glMouseListener);
  glCanvas.addMouseWheelListener(glMouseListener);
  idPickingListeners=new HashMap<String,HashMap<Integer,Set<IPickingListener>>>();
  typePickingListeners=new HashMap<String,Set<IPickingListener>>();
  this.viewFrustum=viewFrustum;
  viewCamera=new ViewCameraBase(uniqueID);
  pickingManager=generalManager.getViewManager().getPickingManager();
  textureManager=new TextureManager();
  glMouseWheelListener=new GLMouseWheelListener(this);
  pixelGLConverter=new PixelGLConverter(viewFrustum,parentGLCanvas);
  mouseWheelListeners=new HashSet<IMouseWheelHandler>();
}","/** 
 * Constructor. If the glCanvas object is null - then the view is rendered remote.
 * @param viewType TODO
 * @param viewName TODO
 */
protected AGLView(GLCanvas glCanvas,final Composite parentComposite,final ViewFrustum viewFrustum,String viewType,String viewName){
  super(GeneralManager.get().getIDCreator().createID(ManagedObjectType.GL_VIEW),parentComposite,viewType,viewName);
  GeneralManager.get().getViewManager().registerGLView(this);
  parentGLCanvas=glCanvas;
  glMouseListener=new GLMouseListener();
  glMouseListener.setNavigationModes(false,false,false);
  glCanvas.addMouseListener(glMouseListener);
  glCanvas.addMouseMotionListener(glMouseListener);
  glCanvas.addMouseWheelListener(glMouseListener);
  glCanvas.addFocusListener(new FocusListener(){
    @Override public void focusLost(    FocusEvent e){
    }
    @Override public void focusGained(    FocusEvent e){
      focusGained=true;
    }
  }
);
  idPickingListeners=new HashMap<String,HashMap<Integer,Set<IPickingListener>>>();
  typePickingListeners=new HashMap<String,Set<IPickingListener>>();
  this.viewFrustum=viewFrustum;
  viewCamera=new ViewCameraBase(uniqueID);
  pickingManager=generalManager.getViewManager().getPickingManager();
  textureManager=new TextureManager();
  glMouseWheelListener=new GLMouseWheelListener(this);
  pixelGLConverter=new PixelGLConverter(viewFrustum,parentGLCanvas);
  mouseWheelListeners=new HashSet<IMouseWheelHandler>();
}",0.9240506329113924
57635,"public final boolean wasMouseDoubleClicked(){
  return mouseDoubleClick;
}","public final boolean wasMouseDoubleClicked(){
  boolean bTmp=mouseDoubleClick;
  mouseDoubleClick=false;
  return bTmp;
}",0.717948717948718
57636,"@Override public void run(){
  parentComposite.addKeyListener(glKeyListener);
}","@Override public void run(){
  parentComposite.addKeyListener(fpsKeyListener);
}",0.9685534591194968
57637,"public void loadWorkbenchData(String dirName){
  try {
    FileOperations.deleteDirectory(ProjectSaver.WORKBENCH_MEMENTO_FOLDER + ProjectSaver.WORKBENCH_MEMENTO_FILE);
    File workbenchFile=new File(dirName + ProjectSaver.WORKBENCH_MEMENTO_FILE);
    if (!workbenchFile.exists()) {
      Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str"" + workbenchFile));
      return;
    }
    FileOperations.copyFolder(new File(dirName + ProjectSaver.WORKBENCH_MEMENTO_FILE),new File(ProjectSaver.WORKBENCH_MEMENTO_FOLDER + ProjectSaver.WORKBENCH_MEMENTO_FILE));
  }
 catch (  IOException e) {
    Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str"" + dirName,e));
  }
}","public void loadWorkbenchData(String dirName){
  try {
    FileOperations.deleteDirectory(ProjectSaver.WORKBENCH_MEMENTO_FOLDER + ProjectSaver.WORKBENCH_MEMENTO_FILE);
    File workbenchFile=new File(dirName + ProjectSaver.WORKBENCH_MEMENTO_FILE);
    if (!workbenchFile.exists()) {
      Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str"" + workbenchFile));
      return;
    }
    File f=new File(ProjectSaver.WORKBENCH_MEMENTO_FOLDER);
    if (f.exists() == false) {
      f.mkdirs();
    }
    FileOperations.copyFolder(new File(dirName + ProjectSaver.WORKBENCH_MEMENTO_FILE),new File(ProjectSaver.WORKBENCH_MEMENTO_FOLDER + ProjectSaver.WORKBENCH_MEMENTO_FILE));
  }
 catch (  IOException e) {
    Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str"" + dirName,e));
  }
}",0.9233844103930712
57638,"@Override public void rightClicked(Pick pick){
  hideToolTip();
}","@Override public void rightClicked(Pick pick){
  triggerToolTipHide();
}",0.9197080291970804
57639,"@Override public void mouseOver(Pick pick){
  if (labelProvider != null) {
    toolTipMessage=labelProvider.getLabel();
  }
  thread=new ToolTipThread();
  Runnable runnable=new Runnable(){
    @Override public void run(){
      view.getParentComposite().getDisplay().asyncExec(thread);
    }
  }
;
  Thread timerThread=new Thread(runnable);
  timerThread.start();
}","@Override public void mouseOver(Pick pick){
  if (labelProvider != null) {
    toolTipMessage=labelProvider.getLabel();
  }
  triggerToolTipCreation();
}",0.5664739884393064
57640,"@Override public void run(){
  if (thread != null)   thread.hideToolTip();
}","@Override public void run(){
  hideToolTip();
}",0.7642276422764228
57641,"@Override public void clicked(Pick pick){
  hideToolTip();
}","@Override public void clicked(Pick pick){
  triggerToolTipHide();
}",0.9133858267716536
57642,"private synchronized void createToolTip(){
  if (hideToolTip)   return;
  System.out.println(""String_Node_Str"");
  PointerInfo pointerInfo=MouseInfo.getPointerInfo();
  swingTip=new ToolTipp(toolTipMessage,new JFrame());
  swingTip.setLocation(pointerInfo.getLocation().x,pointerInfo.getLocation().y + MOUSE_POSITION_TOOLTIP_SPACING_PIXELS);
  swingTip.setVisible(true);
}","private synchronized void createToolTip(){
  if (toolTipThread.hideToolTip)   return;
  toolTipThread.create();
}",0.3752577319587629
57643,"public ToolTipp(String message,JFrame frame){
  super(frame);
  setType(Type.POPUP);
  FlowLayout layout=new FlowLayout(FlowLayout.CENTER);
  layout.setHgap(0);
  layout.setVgap(0);
  setLayout(layout);
  JLabel label=new JLabel(message);
  JPanel panel=new JPanel();
  panel.setBorder(BorderFactory.createLineBorder(Color.black));
  FlowLayout panelLayout=new FlowLayout(FlowLayout.CENTER);
  panelLayout.setHgap(2);
  panelLayout.setVgap(1);
  panel.setLayout(panelLayout);
  panel.add(label);
  getContentPane().add(panel);
  getContentPane().setBackground(new Color(225,225,225));
  getContentPane().setFocusable(false);
  pack();
}","public ToolTipp(String message,JFrame frame){
  super(frame);
  FlowLayout layout=new FlowLayout(FlowLayout.CENTER);
  layout.setHgap(0);
  layout.setVgap(0);
  setLayout(layout);
  JLabel label=new JLabel(message);
  JPanel panel=new JPanel();
  panel.setBorder(BorderFactory.createLineBorder(Color.black));
  FlowLayout panelLayout=new FlowLayout(FlowLayout.CENTER);
  panelLayout.setHgap(2);
  panelLayout.setVgap(1);
  panel.setLayout(panelLayout);
  panel.add(label);
  getContentPane().add(panel);
  getContentPane().setBackground(new Color(225,225,225));
  getContentPane().setFocusable(false);
  pack();
}",0.9815852682145716
57644,"@Override public void mouseOut(Pick pick){
  hideToolTip();
}","@Override public void mouseOut(Pick pick){
  triggerToolTipHide();
}",0.9147286821705426
57645,"public ToolTipPickingListener(AGLView view,String toolTipTitle,String toolTipMessage){
  this.view=view;
  this.toolTipTitle=toolTipTitle;
  this.toolTipMessage=toolTipMessage;
}","public ToolTipPickingListener(AGLView view,ILabelProvider labelProvider){
  this.view=view;
  this.labelProvider=labelProvider;
}",0.5537459283387622
57646,"private void hideToolTip(){
  view.getParentComposite().getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      if (thread != null)       thread.hideToolTip();
    }
  }
);
}","private synchronized void hideToolTip(){
  if (toolTipThread != null) {
    toolTipThread.hide();
  }
  toolTipThread=null;
}",0.4610591900311526
57647,"private void createPickingListeners(){
  RecordVirtualArray recordVA=dataContainer.getRecordPerspective().getVirtualArray();
  for (  Group group : recordVA.getGroupList()) {
    ToolTipPickingListener toolTipPickingListener=new ToolTipPickingListener(this,group.getLabel());
    addIDPickingListener(toolTipPickingListener,EPickingType.KM_CURVE.name(),group.getID());
  }
}","private void createPickingListeners(){
  RecordVirtualArray recordVA=dataContainer.getRecordPerspective().getVirtualArray();
  for (  Group group : recordVA.getGroupList()) {
    ToolTipPickingListener toolTipPickingListener=new ToolTipPickingListener(this,group.getLabel());
    addIDPickingListener(toolTipPickingListener,EPickingType.KM_CURVE.name(),group.getID());
  }
  addTypePickingListener(new APickingListener(){
    @Override public void mouseOver(    Pick pick){
      if (mouseOverGroupID != pick.getObjectID()) {
        mouseOverGroupID=pick.getObjectID();
        setDisplayListDirty();
      }
    }
    @Override public void mouseOut(    Pick pick){
      if (mouseOverGroupID == pick.getObjectID()) {
        mouseOverGroupID=-1;
        setDisplayListDirty();
      }
    }
  }
,EPickingType.KM_CURVE.name());
}",0.6212624584717608
57648,"private void drawFilledCurve(GL2 gl,ArrayList<Float> dataVector){
  float plotHeight=getPlotHeight();
  float plotWidth=getPlotWidth();
  float bottomAxisSpacing=(detailLevel == EDetailLevel.HIGH ? pixelGLConverter.getGLWidthForPixelWidth(BOTTOM_AXIS_SPACING_PIXELS) : 0);
  float leftAxisSpacing=(detailLevel == EDetailLevel.HIGH ? pixelGLConverter.getGLWidthForPixelWidth(LEFT_AXIS_SPACING_PIXELS) : 0);
  float TIME_BINS=maxAxisTime;
  float timeBinStepSize=1 / TIME_BINS;
  float currentTimeBin=0;
  int remainingItemCount=dataVector.size();
  float ySingleSampleSize=plotHeight / dataVector.size();
  for (int binIndex=0; binIndex < TIME_BINS; binIndex++) {
    while (dataVector.size() > 0 && dataVector.get(0) <= currentTimeBin) {
      dataVector.remove(0);
      remainingItemCount--;
    }
    float y=(float)remainingItemCount * ySingleSampleSize;
    gl.glBegin(GL2.GL_QUADS);
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing,0);
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing + y,0);
    currentTimeBin+=timeBinStepSize;
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing + y,0);
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing,0);
    gl.glEnd();
  }
}","private void drawFilledCurve(GL2 gl,ArrayList<Float> dataVector){
  float plotHeight=getPlotHeight();
  float plotWidth=getPlotWidth();
  float bottomAxisSpacing=(detailLevel == EDetailLevel.HIGH ? pixelGLConverter.getGLWidthForPixelWidth(BOTTOM_AXIS_SPACING_PIXELS) : 0);
  float leftAxisSpacing=(detailLevel == EDetailLevel.HIGH ? pixelGLConverter.getGLWidthForPixelWidth(LEFT_AXIS_SPACING_PIXELS) : 0);
  float timeBinStepSize=1 / maxAxisTime;
  float currentTimeBin=0;
  int remainingItemCount=dataVector.size();
  float ySingleSampleSize=plotHeight / dataVector.size();
  for (int binIndex=0; binIndex < maxAxisTime; binIndex++) {
    while (dataVector.size() > 0 && dataVector.get(0) <= currentTimeBin) {
      dataVector.remove(0);
      remainingItemCount--;
    }
    float y=(float)remainingItemCount * ySingleSampleSize;
    gl.glBegin(GL2.GL_QUADS);
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing,0);
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing + y,0);
    currentTimeBin+=timeBinStepSize;
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing + y,0);
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing,0);
    gl.glEnd();
  }
}",0.8388607101053454
57649,"private void buildDisplayList(final GL2 gl,int displayListIndex){
  gl.glNewList(displayListIndex,GL2.GL_COMPILE);
  RecordVirtualArray recordVA=dataContainer.getRecordPerspective().getVirtualArray();
  boolean fillCurve=recordVA.getGroupList().size() > 1 ? false : true;
  List<Color> colors=ColorManager.get().getColorList(ColorManager.QUALITATIVE_COLORS);
  for (  Group group : recordVA.getGroupList()) {
    List<Integer> recordIDs=recordVA.getIDsOfGroup(group.getGroupIndex());
    int colorIndex=0;
    if (dataContainer.getRecordGroup() != null)     colorIndex=dataContainer.getRecordGroup().getGroupIndex();
 else     colorIndex=group.getGroupIndex();
    colorIndex=colorIndex % 10;
    int lineWidth=1;
    if (recordGroupSelectionManager.getElements(SelectionType.SELECTION).size() == 1 && (Integer)recordGroupSelectionManager.getElements(SelectionType.SELECTION).toArray()[0] == group.getID()) {
      lineWidth=2;
    }
    if (detailLevel == EDetailLevel.HIGH)     lineWidth*=2;
    gl.glLineWidth(lineWidth);
    renderSingleKaplanMeierCurve(gl,recordIDs,colors.get(colorIndex),fillCurve,group.getID());
  }
  if (detailLevel == EDetailLevel.HIGH) {
    renderAxes(gl);
  }
  gl.glEndList();
}","private void buildDisplayList(final GL2 gl,int displayListIndex){
  gl.glNewList(displayListIndex,GL2.GL_COMPILE);
  RecordVirtualArray recordVA=dataContainer.getRecordPerspective().getVirtualArray();
  boolean fillCurve=recordVA.getGroupList().size() > 1 ? false : true;
  List<Color> colors=ColorManager.get().getColorList(ColorManager.QUALITATIVE_COLORS);
  for (  Group group : recordVA.getGroupList()) {
    List<Integer> recordIDs=recordVA.getIDsOfGroup(group.getGroupIndex());
    int colorIndex=0;
    if (dataContainer.getRecordGroup() != null)     colorIndex=dataContainer.getRecordGroup().getGroupIndex();
 else     colorIndex=group.getGroupIndex();
    colorIndex=colorIndex % 10;
    int lineWidth=1;
    if ((recordGroupSelectionManager.getElements(SelectionType.SELECTION).size() == 1 && (Integer)recordGroupSelectionManager.getElements(SelectionType.SELECTION).toArray()[0] == group.getID()) || (group.getID() == mouseOverGroupID)) {
      lineWidth=2;
    }
    if (detailLevel == EDetailLevel.HIGH)     lineWidth*=2;
    gl.glLineWidth(lineWidth);
    renderSingleKaplanMeierCurve(gl,recordIDs,colors.get(colorIndex),fillCurve,group.getID());
  }
  if (detailLevel == EDetailLevel.HIGH) {
    renderAxes(gl);
  }
  gl.glEndList();
}",0.98332655551037
57650,"@Override public void display(GL2 gl){
  buildDisplayList(gl,displayListIndex);
  isDisplayListDirty=false;
  gl.glCallList(displayListIndex);
  checkForHits(gl);
}","@Override public void display(GL2 gl){
  if (isDisplayListDirty) {
    buildDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
  }
  gl.glCallList(displayListIndex);
  checkForHits(gl);
}",0.9010989010989012
57651,"private void drawCurve(GL2 gl,ArrayList<Float> dataVector){
  float plotHeight=getPlotHeight();
  float plotWidth=getPlotWidth();
  float bottomAxisSpacing=(detailLevel == EDetailLevel.HIGH ? pixelGLConverter.getGLWidthForPixelWidth(BOTTOM_AXIS_SPACING_PIXELS) : 0);
  float leftAxisSpacing=(detailLevel == EDetailLevel.HIGH ? pixelGLConverter.getGLWidthForPixelWidth(LEFT_AXIS_SPACING_PIXELS) : 0);
  float TIME_BINS=maxAxisTime;
  float timeBinStepSize=1 / TIME_BINS;
  float currentTimeBin=0;
  int remainingItemCount=dataVector.size();
  float ySingleSampleSize=plotHeight / dataVector.size();
  gl.glBegin(GL2.GL_LINE_STRIP);
  gl.glVertex3f(leftAxisSpacing,bottomAxisSpacing + plotHeight,1);
  for (int binIndex=0; binIndex < TIME_BINS; binIndex++) {
    while (dataVector.size() > 0 && dataVector.get(0) <= currentTimeBin) {
      dataVector.remove(0);
      remainingItemCount--;
    }
    float y=(float)remainingItemCount * ySingleSampleSize;
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing + y,1);
    currentTimeBin+=timeBinStepSize;
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing + y,1);
  }
  gl.glEnd();
}","private void drawCurve(GL2 gl,ArrayList<Float> dataVector){
  float plotHeight=getPlotHeight();
  float plotWidth=getPlotWidth();
  float bottomAxisSpacing=(detailLevel == EDetailLevel.HIGH ? pixelGLConverter.getGLWidthForPixelWidth(BOTTOM_AXIS_SPACING_PIXELS) : 0);
  float leftAxisSpacing=(detailLevel == EDetailLevel.HIGH ? pixelGLConverter.getGLWidthForPixelWidth(LEFT_AXIS_SPACING_PIXELS) : 0);
  float timeBinStepSize=1 / maxAxisTime;
  float currentTimeBin=0;
  int remainingItemCount=dataVector.size();
  float ySingleSampleSize=plotHeight / dataVector.size();
  gl.glBegin(GL2.GL_LINE_STRIP);
  gl.glVertex3f(leftAxisSpacing,bottomAxisSpacing + plotHeight,1);
  for (int binIndex=0; binIndex < maxAxisTime; binIndex++) {
    while (dataVector.size() > 0 && dataVector.get(0) <= currentTimeBin) {
      dataVector.remove(0);
      remainingItemCount--;
    }
    float y=(float)remainingItemCount * ySingleSampleSize;
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing + y,1);
    currentTimeBin+=timeBinStepSize;
    gl.glVertex3f(leftAxisSpacing + currentTimeBin * plotWidth,bottomAxisSpacing + y,1);
  }
  gl.glEnd();
}",0.9544098849595228
57652,"public void open(final AGLView view){
  if (view.isRenderedRemote())   this.view=(AGLView)view.getRemoteRenderingGLView();
 else   this.view=view;
  this.parent=view.getParentComposite();
  final ContextMenuCreator menuCreator=this;
  final JPopupMenu popup=menuCreator.create();
  view.getParentGLCanvas().addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      if (SwingUtilities.isRightMouseButton(e) || e.isPopupTrigger()) {
        int cursorLocationX=MouseInfo.getPointerInfo().getLocation().x - view.getParentGLCanvas().getLocationOnScreen().x;
        int cursorLocationY=MouseInfo.getPointerInfo().getLocation().y - view.getParentGLCanvas().getLocationOnScreen().y;
        popup.show(view.getParentGLCanvas().getParent(),cursorLocationX,cursorLocationY);
      }
    }
  }
);
}","public void open(final AGLView view){
  if (view.isRenderedRemote())   this.view=(AGLView)view.getRemoteRenderingGLView();
 else   this.view=view;
  this.parent=view.getParentComposite();
  final ContextMenuCreator menuCreator=this;
  final JPopupMenu popup=menuCreator.create();
  int cursorLocationX=MouseInfo.getPointerInfo().getLocation().x - view.getParentGLCanvas().getLocationOnScreen().x;
  int cursorLocationY=MouseInfo.getPointerInfo().getLocation().y - view.getParentGLCanvas().getLocationOnScreen().y;
  popup.show(view.getParentGLCanvas().getParent(),cursorLocationX,cursorLocationY);
}",0.5642458100558659
57653,"/** 
 * Check whether we had a picking hit somewhere during the previous run
 * @param gl
 */
protected final void checkForHits(final GL2 gl){
  Set<String> hitTypes=pickingManager.getHitTypes(uniqueID);
  if (hitTypes == null)   return;
  contextMenuCreator.clear();
  for (  String pickingType : hitTypes) {
    ArrayList<Pick> alHits=null;
    alHits=pickingManager.getHits(uniqueID,pickingType);
    if (alHits != null && alHits.size() != 0) {
      for (int iCount=0; iCount < alHits.size(); iCount++) {
        Pick tempPick=alHits.get(iCount);
        int pickedObjectID=tempPick.getObjectID();
        if (pickedObjectID == -1) {
          continue;
        }
        PickingMode ePickingMode=tempPick.getPickingMode();
        handlePicking(pickingType,ePickingMode,pickedObjectID,tempPick);
        try {
          PickingType type=PickingType.valueOf(pickingType);
          try {
            handlePickingEvents(type,ePickingMode,pickedObjectID,tempPick);
          }
 catch (          Exception e) {
            Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"",e));
          }
        }
 catch (        IllegalArgumentException e) {
        }
      }
      pickingManager.flushHits(uniqueID,pickingType);
    }
  }
  if (contextMenuCreator.hasMenuItems())   contextMenuCreator.open(this);
}","/** 
 * Check whether we had a picking hit somewhere during the previous run
 * @param gl
 */
protected final void checkForHits(final GL2 gl){
  contextMenuCreator.clear();
  Set<String> hitTypes=pickingManager.getHitTypes(uniqueID);
  if (hitTypes == null)   return;
  for (  String pickingType : hitTypes) {
    ArrayList<Pick> alHits=null;
    alHits=pickingManager.getHits(uniqueID,pickingType);
    if (alHits != null && alHits.size() != 0) {
      for (int iCount=0; iCount < alHits.size(); iCount++) {
        Pick tempPick=alHits.get(iCount);
        int pickedObjectID=tempPick.getObjectID();
        if (pickedObjectID == -1) {
          continue;
        }
        PickingMode ePickingMode=tempPick.getPickingMode();
        handlePicking(pickingType,ePickingMode,pickedObjectID,tempPick);
        try {
          PickingType type=PickingType.valueOf(pickingType);
          try {
            handlePickingEvents(type,ePickingMode,pickedObjectID,tempPick);
          }
 catch (          Exception e) {
            Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"",e));
          }
        }
 catch (        IllegalArgumentException e) {
        }
      }
      pickingManager.flushHits(uniqueID,pickingType);
    }
  }
  if (contextMenuCreator.hasMenuItems())   contextMenuCreator.open(this);
}",0.9773413897280968
57654,"/** 
 * Sets the   {@link ABrickLayoutConfiguration} for this brick, specifying itsappearance. If the specified view type is valid, it will be set, otherwise the default view type will be set.
 * @param newBrickLayout
 * @param viewType
 */
public void setBrickLayoutTemplate(ABrickLayoutConfiguration newBrickLayout,EContainedViewType viewType){
  if (brickLayoutConfiguration != null && brickLayoutConfiguration != newBrickLayout)   brickLayoutConfiguration.destroy();
  brickLayoutConfiguration=newBrickLayout;
  if ((brickLayoutConfiguration instanceof CollapsedBrickLayoutTemplate) || (brickLayoutConfiguration instanceof CompactHeaderBrickLayoutTemplate))   isInOverviewMode=true;
 else   isInOverviewMode=false;
  if (layoutManager != null) {
    if (brickLayoutConfiguration.isViewTypeValid(viewType)) {
      setBrickViewTypeAndConfigureSize(viewType);
    }
 else {
      setBrickViewTypeAndConfigureSize(brickLayoutConfiguration.getDefaultViewType());
    }
  }
}","/** 
 * Sets the   {@link ABrickLayoutConfiguration} for this brick, specifying itsappearance. If the specified view type is valid, it will be set, otherwise the default view type will be set.
 * @param newBrickLayout
 * @param viewType
 */
public void setBrickLayoutTemplate(ABrickLayoutConfiguration newBrickLayout,EContainedViewType viewType){
  if (brickLayoutConfiguration != null && brickLayoutConfiguration != newBrickLayout)   brickLayoutConfiguration.destroy();
  brickLayoutConfiguration=newBrickLayout;
  if ((brickLayoutConfiguration instanceof CollapsedBrickLayoutTemplate) || (brickLayoutConfiguration instanceof CompactHeaderBrickLayoutTemplate))   isInOverviewMode=true;
 else   isInOverviewMode=false;
  if (layoutManager != null) {
    layoutManager.setStaticLayoutConfiguration(brickLayoutConfiguration);
    if (brickLayoutConfiguration.isViewTypeValid(viewType)) {
      setBrickViewTypeAndConfigureSize(viewType);
    }
 else {
      setBrickViewTypeAndConfigureSize(brickLayoutConfiguration.getDefaultViewType());
    }
  }
}",0.9357072205736894
57655,"/** 
 * Creates the toolbar containing buttons for view switching.
 * @param pixelHeight
 * @return
 */
protected Row createToolBar(){
  System.out.println(this.toString());
  Row toolBar=new ToolBar(""String_Node_Str"",brick);
  toolBar.setPixelSizeY(0);
  ElementLayout spacingLayoutX=new ElementLayout(""String_Node_Str"");
  spacingLayoutX.setPixelSizeX(SPACING_PIXELS);
  spacingLayoutX.setRatioSizeY(0);
  toolBar.append(spacingLayoutX);
  for (  ElementLayout element : toolBarElements) {
    toolBar.append(element);
  }
  ElementLayout greedyXLayout=new ElementLayout(""String_Node_Str"");
  greedyXLayout.setGrabX(true);
  greedyXLayout.setRatioSizeY(0);
  toolBar.append(greedyXLayout);
  Button clusterButton=new Button(EPickingType.DIMENSION_GROUP_CLUSTER_BUTTON.name(),CLUSTER_BUTTON_ID,EIconTextures.CLUSTER_ICON);
  ElementLayout clusterButtonLayout=new ElementLayout(""String_Node_Str"");
  clusterButtonLayout.setPixelSizeX(BUTTON_WIDTH_PIXELS);
  clusterButtonLayout.setPixelSizeY(BUTTON_HEIGHT_PIXELS);
  clusterButtonLayout.setRenderer(new ButtonRenderer(clusterButton,brick,brick.getTextureManager(),DefaultBrickLayoutTemplate.BUTTON_Z));
  toolBar.append(clusterButtonLayout);
  toolBar.append(spacingLayoutX);
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      System.out.println(""String_Node_Str"" + this);
      brick.getParentComposite().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          StartClusteringDialog dialog=new StartClusteringDialog(new Shell(),brick.getDataDomain());
          DataContainer data=brick.getDimensionGroup().getDataContainer();
          dialog.setSourceDimensionPerspective(data.getDimensionPerspective());
          dialog.setSourceRecordPerspective(data.getRecordPerspective());
          dialog.open();
          AClusterConfiguration clusterState=dialog.getClusterState();
          if (clusterState == null)           return;
          RecordPerspective newRecordPerspective=new RecordPerspective(data.getDataDomain());
          newRecordPerspective.setVirtualArray(data.getRecordPerspective().getVirtualArray());
          data.getDataDomain().getTable().registerRecordPerspective(newRecordPerspective);
          data.setRecordPerspective(newRecordPerspective);
          clusterState.setOptionalTargetRecordPerspective(newRecordPerspective);
        }
      }
);
    }
  }
,EPickingType.DIMENSION_GROUP_CLUSTER_BUTTON.name(),CLUSTER_BUTTON_ID);
  return toolBar;
}","/** 
 * Creates the toolbar containing buttons for view switching.
 * @param pixelHeight
 * @return
 */
protected Row createToolBar(){
  System.out.println(this.toString());
  Row toolBar=new ToolBar(""String_Node_Str"",brick);
  toolBar.setPixelSizeY(0);
  ElementLayout spacingLayoutX=new ElementLayout(""String_Node_Str"");
  spacingLayoutX.setPixelSizeX(SPACING_PIXELS);
  spacingLayoutX.setRatioSizeY(0);
  toolBar.append(spacingLayoutX);
  for (  ElementLayout element : toolBarElements) {
    toolBar.append(element);
  }
  ElementLayout greedyXLayout=new ElementLayout(""String_Node_Str"");
  greedyXLayout.setGrabX(true);
  greedyXLayout.setRatioSizeY(0);
  toolBar.append(greedyXLayout);
  Button clusterButton=new Button(EPickingType.DIMENSION_GROUP_CLUSTER_BUTTON.name(),CLUSTER_BUTTON_ID,EIconTextures.CLUSTER_ICON);
  ElementLayout clusterButtonLayout=new ElementLayout(""String_Node_Str"");
  clusterButtonLayout.setPixelSizeX(BUTTON_WIDTH_PIXELS);
  clusterButtonLayout.setPixelSizeY(BUTTON_HEIGHT_PIXELS);
  clusterButtonLayout.setRenderer(new ButtonRenderer(clusterButton,brick,brick.getTextureManager(),DefaultBrickLayoutTemplate.BUTTON_Z));
  toolBar.append(clusterButtonLayout);
  toolBar.append(spacingLayoutX);
  brick.removeAllTypePickingListeners(EPickingType.DIMENSION_GROUP_CLUSTER_BUTTON.name());
  brick.addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      System.out.println(""String_Node_Str"" + this);
      brick.getParentComposite().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          StartClusteringDialog dialog=new StartClusteringDialog(new Shell(),brick.getDataDomain());
          DataContainer data=brick.getDimensionGroup().getDataContainer();
          dialog.setSourceDimensionPerspective(data.getDimensionPerspective());
          dialog.setSourceRecordPerspective(data.getRecordPerspective());
          dialog.open();
          AClusterConfiguration clusterState=dialog.getClusterState();
          if (clusterState == null)           return;
          RecordPerspective newRecordPerspective=new RecordPerspective(data.getDataDomain());
          newRecordPerspective.setVirtualArray(data.getRecordPerspective().getVirtualArray());
          data.getDataDomain().getTable().registerRecordPerspective(newRecordPerspective);
          data.setRecordPerspective(newRecordPerspective);
          clusterState.setOptionalTargetRecordPerspective(newRecordPerspective);
        }
      }
);
    }
  }
,EPickingType.DIMENSION_GROUP_CLUSTER_BUTTON.name());
  return toolBar;
}",0.520494214551873
57656,"@Override public void display(GL2 gl){
  if (!uninitializedDimensionGroups.isEmpty()) {
    while (uninitializedDimensionGroups.peek() != null) {
      uninitializedDimensionGroups.poll().initRemote(gl,this,glMouseListener);
    }
    initLayouts();
  }
  if (isDisplayListDirty) {
    buildDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
  }
  for (  DimensionGroup group : dimensionGroupManager.getDimensionGroups()) {
    group.processEvents();
  }
  handleHorizontalMoveDragging(gl);
  if (isLayoutDirty) {
    isLayoutDirty=false;
    centerLayoutManager.updateLayout();
    float minWidth=pixelGLConverter.getGLWidthForPixelWidth(DIMENSION_GROUP_SPACING_MIN_PIXEL_WIDTH);
    for (    ElementLayout layout : centerRowLayout) {
      if (!(layout.getRenderer() instanceof DimensionGroupSpacingRenderer))       continue;
      if (resizeNecessary)       break;
      if (layout.getSizeScaledX() < minWidth - 0.01f) {
        resizeNecessary=true;
        break;
      }
    }
  }
  if (resizeNecessary) {
    int size=centerRowLayout.size();
    if (size >= 3) {
      if (lastResizeDirectionWasToLeft) {
        dimensionGroupManager.setCenterGroupStartIndex(dimensionGroupManager.getCenterGroupStartIndex() + 1);
        float width=centerRowLayout.getElements().get(0).getSizeScaledX() + centerRowLayout.getElements().get(1).getSizeScaledX() + centerRowLayout.getElements().get(2).getSizeScaledX();
        centerRowLayout.remove(0);
        centerRowLayout.remove(0);
        leftDimensionGroupSpacing=centerRowLayout.getElements().get(0);
        leftDimensionGroupSpacing.setAbsoluteSizeX(width);
        ((DimensionGroupSpacingRenderer)leftDimensionGroupSpacing.getRenderer()).setLeftDimGroup(null);
        initLeftLayout();
      }
 else {
        dimensionGroupManager.setRightGroupStartIndex(dimensionGroupManager.getRightGroupStartIndex() - 1);
        centerRowLayout.remove(centerRowLayout.size() - 1);
        centerRowLayout.remove(centerRowLayout.size() - 1);
        rightDimensionGroupSpacing=centerRowLayout.getElements().get(centerRowLayout.size() - 1);
        rightDimensionGroupSpacing.setGrabX(true);
        ((DimensionGroupSpacingRenderer)rightDimensionGroupSpacing.getRenderer()).setRightDimGroup(null);
        initRightLayout();
      }
    }
    centerLayoutManager.updateLayout();
    resizeNecessary=false;
  }
  for (  DimensionGroup dimensionGroup : dimensionGroupManager.getDimensionGroups()) {
    dimensionGroup.display(gl);
  }
  if (isConnectionLinesDirty)   performConnectionLinesUpdate();
  if (showArchSides && !isRightDetailShown && !isLeftDetailShown) {
    leftLayoutManager.render(gl);
  }
  gl.glTranslatef(archInnerWidth,0,0);
  centerLayoutManager.render(gl);
  gl.glTranslatef(-archInnerWidth,0,0);
  if (showArchSides && !isRightDetailShown && !isLeftDetailShown) {
    float rightArchStand=(1 - ARCH_STAND_WIDTH_PERCENT) * viewFrustum.getWidth();
    gl.glTranslatef(rightArchStand,0,0);
    rightLayoutManager.render(gl);
    gl.glTranslatef(-rightArchStand,0,0);
  }
  if (showArchSides && !isRightDetailShown && !isLeftDetailShown) {
    renderArch(gl);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}","@Override public void display(GL2 gl){
  if (!uninitializedDimensionGroups.isEmpty()) {
    while (uninitializedDimensionGroups.peek() != null) {
      uninitializedDimensionGroups.poll().initRemote(gl,this,glMouseListener);
    }
    initLayouts();
  }
  if (isDisplayListDirty) {
    buildDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
  }
  for (  DimensionGroup group : dimensionGroupManager.getDimensionGroups()) {
    group.processEvents();
  }
  handleHorizontalColumnMove(gl);
  if (isLayoutDirty) {
    isLayoutDirty=false;
    centerLayoutManager.updateLayout();
    float minWidth=pixelGLConverter.getGLWidthForPixelWidth(DIMENSION_GROUP_SPACING_MIN_PIXEL_WIDTH);
    for (    ElementLayout layout : centerRowLayout) {
      if (!(layout.getRenderer() instanceof DimensionGroupSpacingRenderer))       continue;
      if (resizeNecessary)       break;
      if (layout.getSizeScaledX() < minWidth - 0.01f) {
        resizeNecessary=true;
        break;
      }
    }
  }
  if (resizeNecessary) {
    resizeNecessary=false;
  }
  for (  DimensionGroup dimensionGroup : dimensionGroupManager.getDimensionGroups()) {
    dimensionGroup.display(gl);
  }
  if (isConnectionLinesDirty)   performConnectionLinesUpdate();
  if (showArchSides && !isRightDetailShown && !isLeftDetailShown) {
    leftLayoutManager.render(gl);
  }
  gl.glTranslatef(archInnerWidth,0,0);
  centerLayoutManager.render(gl);
  gl.glTranslatef(-archInnerWidth,0,0);
  if (showArchSides && !isRightDetailShown && !isLeftDetailShown) {
    float rightArchStand=(1 - ARCH_STAND_WIDTH_PERCENT) * viewFrustum.getWidth();
    gl.glTranslatef(rightArchStand,0,0);
    rightLayoutManager.render(gl);
    gl.glTranslatef(-rightArchStand,0,0);
  }
  if (showArchSides && !isRightDetailShown && !isLeftDetailShown) {
    renderArch(gl);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}",0.739763779527559
57657,"/** 
 * Tries to find the mapping from the source IDType to the destination IDType of the specified sourceID along a path of IDTypes where mappings exist. If no such path is found, null is returned. If the path includes multimappings, a Set of values is returned. Note that there will always be chosen a path that does not include multimappings over paths that include multimappings if more than one path exists.
 * @param < K > Type of the sourceID
 * @param < V > Type of the expected result of the mapping
 * @param source IDType of the source data
 * @param destination IDType of the destination data
 * @param sourceID ID for which the mapping shall be found
 * @return If no mapping is found, null, otherwise the corresponding ID, or Set of IDs.
 * @deprecated use {@link #getIDAsSet(IDType,IDType,Object)} instead
 */
@SuppressWarnings(""String_Node_Str"") @Deprecated public <K,V>V getID(IDType source,IDType destination,K sourceID){
  if (source.equals(destination))   return (V)sourceID;
  List<MappingType> path;
  try {
    path=DijkstraShortestPath.findPathBetween(mappingGraph,source,destination);
  }
 catch (  IllegalArgumentException e) {
    Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + source + ""String_Node_Str""+ destination+ ""String_Node_Str""));
    return null;
  }
  if (path == null) {
    Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + source + ""String_Node_Str""+ destination));
    return null;
  }
  Object currentID=sourceID;
  Set<Object> keys=null;
  Collection<Object> values=new ArrayList<Object>();
  for (  MappingType edge : path) {
    Map<?,?> currentMap=hashMappingType2Map.get(edge);
    if (keys != null) {
      for (      Object key : keys) {
        if (edge.isMultiMap()) {
          Set<Object> temp=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(key);
          if (temp != null)           values.addAll(temp);
        }
 else {
          Object value=currentMap.get(key);
          if (value != null)           values.add(value);
        }
      }
      if (values.isEmpty())       return null;
      keys=new HashSet<Object>();
      for (      Object value : values) {
        keys.add(value);
      }
      values.clear();
    }
 else {
      if (edge.isMultiMap()) {
        keys=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(currentID);
        if ((keys == null) || (keys.isEmpty()))         return null;
      }
 else {
        currentID=currentMap.get(currentID);
        if (currentID == null)         return null;
      }
    }
  }
  if (keys != null)   return (V)keys;
  return (V)currentID;
}","/** 
 * Tries to find the mapping from the source IDType to the destination IDType of the specified sourceID along a path of IDTypes where mappings exist. If no such path is found, null is returned. If the path includes multimappings, a Set of values is returned. Note that there will always be chosen a path that does not include multimappings over paths that include multimappings if more than one path exists.
 * @param < K > Type of the sourceID
 * @param < V > Type of the expected result of the mapping
 * @param source IDType of the source data
 * @param destination IDType of the destination data
 * @param sourceID ID for which the mapping shall be found
 * @return If no mapping is found, null, otherwise the corresponding ID, or Set of IDs.
 * @deprecated use {@link #getIDAsSet(IDType,IDType,Object)} instead
 */
@SuppressWarnings(""String_Node_Str"") public <K,V>V getID(IDType source,IDType destination,K sourceID){
  if (source.equals(destination))   return (V)sourceID;
  List<MappingType> path;
  try {
    path=DijkstraShortestPath.findPathBetween(mappingGraph,source,destination);
  }
 catch (  IllegalArgumentException e) {
    Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + source + ""String_Node_Str""+ destination+ ""String_Node_Str""));
    return null;
  }
  if (path == null) {
    Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + source + ""String_Node_Str""+ destination));
    return null;
  }
  Object currentID=sourceID;
  Set<Object> keys=null;
  Collection<Object> values=new ArrayList<Object>();
  for (  MappingType edge : path) {
    Map<?,?> currentMap=hashMappingType2Map.get(edge);
    if (keys != null) {
      for (      Object key : keys) {
        if (edge.isMultiMap()) {
          Set<Object> temp=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(key);
          if (temp != null)           values.addAll(temp);
        }
 else {
          Object value=currentMap.get(key);
          if (value != null)           values.add(value);
        }
      }
      if (values.isEmpty())       return null;
      keys=new HashSet<Object>();
      for (      Object value : values) {
        keys.add(value);
      }
      values.clear();
    }
 else {
      if (edge.isMultiMap()) {
        keys=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(currentID);
        if ((keys == null) || (keys.isEmpty()))         return null;
      }
 else {
        currentID=currentMap.get(currentID);
        if (currentID == null)         return null;
      }
    }
  }
  if (keys != null)   return (V)keys;
  return (V)currentID;
}",0.9976993865030674
57658,"protected void registerPickingListeners(){
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      selectedConnectionBandID=pick.getObjectID();
      selectElementsByConnectionBandID(selectedConnectionBandID);
    }
    @Override public void rightClicked(    Pick pick){
      contextMenuCreator.addContextMenuItem(new SplitBrickItem(pick.getObjectID(),true));
      contextMenuCreator.addContextMenuItem(new SplitBrickItem(pick.getObjectID(),false));
    }
  }
,EPickingType.BRICK_CONNECTION_BAND.name());
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      dragAndDropController.clearDraggables();
      dragAndDropController.setDraggingStartPosition(pick.getPickedPoint());
      dragAndDropController.addDraggable((DimensionGroup)generalManager.getViewManager().getGLView(pick.getObjectID()));
      dragAndDropController.setDraggingMode(""String_Node_Str"");
    }
  }
,EPickingType.DIMENSION_GROUP.name());
  addTypePickingListener(new APickingListener(){
    @Override public void dragged(    Pick pick){
      if (dragAndDropController.isDragging() && dragAndDropController.getDraggingMode() != null && dragAndDropController.getDraggingMode().equals(""String_Node_Str"")) {
        dragAndDropController.setDropArea(dimensionGroupManager.getDimensionGroupSpacers().get(pick.getObjectID()));
      }
 else {
        if (dragAndDropController.isDragging()) {
          int i=0;
        }
      }
    }
  }
,EPickingType.DIMENSION_GROUP_SPACER.name());
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      isHorizontalMoveDraggingActive=true;
      movedDimensionGroup=pick.getObjectID();
    }
  }
,EPickingType.MOVE_HORIZONTALLY_HANDLE.name());
}","protected void registerPickingListeners(){
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      selectedConnectionBandID=pick.getObjectID();
      selectElementsByConnectionBandID(selectedConnectionBandID);
    }
    @Override public void rightClicked(    Pick pick){
      contextMenuCreator.addContextMenuItem(new SplitBrickItem(pick.getObjectID(),true));
      contextMenuCreator.addContextMenuItem(new SplitBrickItem(pick.getObjectID(),false));
    }
  }
,EPickingType.BRICK_CONNECTION_BAND.name());
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      dragAndDropController.clearDraggables();
      dragAndDropController.setDraggingStartPosition(pick.getPickedPoint());
      dragAndDropController.addDraggable((DimensionGroup)generalManager.getViewManager().getGLView(pick.getObjectID()));
      dragAndDropController.setDraggingMode(""String_Node_Str"");
    }
  }
,EPickingType.DIMENSION_GROUP.name());
  addTypePickingListener(new APickingListener(){
    @Override public void dragged(    Pick pick){
      if (dragAndDropController.isDragging() && dragAndDropController.getDraggingMode() != null && dragAndDropController.getDraggingMode().equals(""String_Node_Str"")) {
        dragAndDropController.setDropArea(dimensionGroupManager.getDimensionGroupSpacers().get(pick.getObjectID()));
      }
 else {
        if (dragAndDropController.isDragging()) {
        }
      }
    }
  }
,EPickingType.DIMENSION_GROUP_SPACER.name());
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      isHorizontalMoveDraggingActive=true;
      movedDimensionGroup=pick.getObjectID();
    }
  }
,EPickingType.MOVE_HORIZONTALLY_HANDLE.name());
}",0.9947030945079454
57659,"@Override public void dragged(Pick pick){
  if (dragAndDropController.isDragging() && dragAndDropController.getDraggingMode() != null && dragAndDropController.getDraggingMode().equals(""String_Node_Str"")) {
    dragAndDropController.setDropArea(dimensionGroupManager.getDimensionGroupSpacers().get(pick.getObjectID()));
  }
 else {
    if (dragAndDropController.isDragging()) {
      int i=0;
    }
  }
}","@Override public void dragged(Pick pick){
  if (dragAndDropController.isDragging() && dragAndDropController.getDraggingMode() != null && dragAndDropController.getDraggingMode().equals(""String_Node_Str"")) {
    dragAndDropController.setDropArea(dimensionGroupManager.getDimensionGroupSpacers().get(pick.getObjectID()));
  }
 else {
    if (dragAndDropController.isDragging()) {
    }
  }
}",0.9810366624525916
57660,"/** 
 * Shows a detailed brick.
 * @param brick The brick for which a detailed version shall be shown.
 * @param expandLeft Specifies, whether the detail brick shall be expanded on the left or on the right.
 */
public void showDetailedBrick(GLBrick brick,boolean expandLeft){
  if (detailBrick != null) {
    GeneralManager.get().getViewManager().unregisterGLView(detailBrick);
    detailBrick.unregisterEventListeners();
    detailBrick.destroy();
    detailBrick=null;
  }
  detailBrickLayout=new Column(""String_Node_Str"");
  detailBrick=createBrick(detailBrickLayout,brick.getDataContainer());
  detailBrick.setHeaderBrick(brick.isHeaderBrick());
  detailBrick.setBrickHeigthMode(EBrickHeightMode.STATIC);
  detailBrick.setBrickWidthMode(EBrickWidthMode.STATIC);
  int detailBrickWidth=getDetailBrickWidthPixels(!expandLeft);
  detailBrick.setStaticBrickWidth(detailBrickWidth);
  detailBrick.setStaticBrickHeight(getDetailBrickHeightPixels());
  detailBrick.setBrickLayoutTemplate(new DetailBrickLayoutTemplate(detailBrick,this,stratomex,detailBrick.getBrickConfigurer()),brick.getCurrentViewType());
  overviewDetailGapLayout=new ElementLayout(""String_Node_Str"");
  overviewDetailGapLayout.setPixelSizeX(OVERVIEW_DETAIL_GAP_PIXEL);
  overviewDetailGapLayout.setRatioSizeY(1);
  if (expandLeft) {
    overviewDetailGapLayout.setRenderer(new OverviewDetailBandRenderer(detailBrick,brick,false));
  }
 else {
    overviewDetailGapLayout.setRenderer(new OverviewDetailBandRenderer(brick,detailBrick,true));
  }
  DimensionGroup otherDetailDimensionGroup=getOtherDetailDimensionGroup(!expandLeft);
  if (otherDetailDimensionGroup != null && otherDetailDimensionGroup.isDetailBrickShown()) {
    otherDetailDimensionGroup.setDetailBrickWidth(detailBrickWidth);
  }
  showDetailBrick=true;
  this.expandLeft=expandLeft;
}","/** 
 * Shows a detailed brick.
 * @param brick The brick for which a detailed version shall be shown.
 * @param expandLeft Specifies, whether the detail brick shall be expanded on the left or on the right.
 */
public void showDetailedBrick(GLBrick brick,boolean expandLeft){
  if (detailBrick != null) {
    GeneralManager.get().getViewManager().unregisterGLView(detailBrick);
    detailBrick.unregisterEventListeners();
    detailBrick.destroy();
    detailBrick=null;
    if (this.expandLeft != expandLeft) {
      if (this.isDetailBrickShown && this.expandLeft)       stratomex.switchToOverviewModeLeft();
 else       if (this.isDetailBrickShown && !this.expandLeft)       stratomex.switchToOverviewModeRight();
    }
  }
  detailBrickLayout=new Column(""String_Node_Str"");
  detailBrick=createBrick(detailBrickLayout,brick.getDataContainer());
  detailBrick.setHeaderBrick(brick.isHeaderBrick());
  detailBrick.setBrickHeigthMode(EBrickHeightMode.STATIC);
  detailBrick.setBrickWidthMode(EBrickWidthMode.STATIC);
  int detailBrickWidth=getDetailBrickWidthPixels(!expandLeft);
  detailBrick.setStaticBrickWidth(detailBrickWidth);
  detailBrick.setStaticBrickHeight(getDetailBrickHeightPixels());
  detailBrick.setBrickLayoutTemplate(new DetailBrickLayoutTemplate(detailBrick,this,stratomex,detailBrick.getBrickConfigurer()),brick.getCurrentViewType());
  overviewDetailGapLayout=new ElementLayout(""String_Node_Str"");
  overviewDetailGapLayout.setPixelSizeX(OVERVIEW_DETAIL_GAP_PIXEL);
  overviewDetailGapLayout.setRatioSizeY(1);
  if (expandLeft) {
    overviewDetailGapLayout.setRenderer(new OverviewDetailBandRenderer(detailBrick,brick,false));
  }
 else {
    overviewDetailGapLayout.setRenderer(new OverviewDetailBandRenderer(brick,detailBrick,true));
  }
  DimensionGroup otherDetailDimensionGroup=getOtherDetailDimensionGroup(!expandLeft);
  if (otherDetailDimensionGroup != null && otherDetailDimensionGroup.isDetailBrickShown()) {
    otherDetailDimensionGroup.setDetailBrickWidth(detailBrickWidth);
  }
  showDetailBrick=true;
  this.expandLeft=expandLeft;
}",0.935458986886089
57661,"@Override public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  super.reshape(drawable,x,y,width,height);
  if (!waitForMinSizeApplication && isRendered) {
    int drawingAreaWidth=pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getWidth()) - 2 * BOUNDS_SPACING_PIXELS;
    int drawingAreaHeight=pixelGLConverter.getPixelHeightForGLHeight(viewFrustum.getHeight()) - 2 * BOUNDS_SPACING_PIXELS;
    for (    IDVINode node : dataGraph.getNodes()) {
      Pair<Float,Float> relativePosition=relativeNodePositions.get(node);
      graphLayout.setNodePosition(node,new Point2D.Double(relativePosition.getFirst() * drawingAreaWidth,relativePosition.getSecond() * drawingAreaHeight));
    }
  }
}","@Override public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  super.reshape(drawable,x,y,width,height);
  if (!waitForMinSizeApplication && isRendered) {
    Rectangle2D drawingArea=calculateGraphDrawingArea();
    graphLayout.applyIncrementalLayout(drawingArea);
  }
}",0.3889980353634578
57662,"/** 
 * Constructor.
 */
public GLDataViewIntegrator(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  connectionBandRenderer=new ConnectionBandRenderer();
  VIEW_TYPE=GLDataViewIntegrator.VIEW_TYPE;
  glKeyListener=new GLDVIKeyListener();
  relativeNodePositions=new HashMap<IDVINode,Pair<Float,Float>>();
  dragAndDropController=new DragAndDropController(this);
  dataNodes=new HashSet<ADataNode>();
  viewNodes=new HashSet<ViewNode>();
  viewNodesOfDataDomains=new HashMap<IDataDomain,Set<ViewNode>>();
  dataNodesOfDataDomains=new HashMap<IDataDomain,ADataNode>();
  nodeCreator=new NodeCreator();
}","/** 
 * Constructor.
 */
public GLDataViewIntegrator(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum,VIEW_TYPE,VIEW_NAME);
  connectionBandRenderer=new ConnectionBandRenderer();
  VIEW_TYPE=GLDataViewIntegrator.VIEW_TYPE;
  glKeyListener=new GLDVIKeyListener();
  dragAndDropController=new DragAndDropController(this);
  dataNodes=new HashSet<ADataNode>();
  viewNodes=new HashSet<ViewNode>();
  viewNodesOfDataDomains=new HashMap<IDataDomain,Set<ViewNode>>();
  dataNodesOfDataDomains=new HashMap<IDataDomain,ADataNode>();
  nodeCreator=new NodeCreator();
}",0.6757782839787395
57663,"/** 
 * Builds the display list for a given display list index.
 * @param gl Instance of GL2.
 * @param iGLDisplayListIndex Index of the display list.
 */
private void buildDisplayList(final GL2 gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL2.GL_COMPILE);
  int drawingAreaWidth=pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getWidth()) - 2 * BOUNDS_SPACING_PIXELS;
  int drawingAreaHeight=pixelGLConverter.getPixelHeightForGLHeight(viewFrustum.getHeight()) - 2 * BOUNDS_SPACING_PIXELS;
  if (applyAutomaticLayout) {
    for (    IDVINode node : dataGraph.getNodes()) {
      node.setCustomPosition(false);
    }
    for (    Edge edge : dataGraph.getAllEdges()) {
      AEdgeRenderer edgeRenderer=graphLayout.getLayoutSpecificEdgeRenderer(edge);
      edge.setEdgeRenderer(edgeRenderer);
    }
    Rectangle2D rect=new Rectangle();
    rect.setFrame(BOUNDS_SPACING_PIXELS,BOUNDS_SPACING_PIXELS,drawingAreaWidth,drawingAreaHeight);
    graphLayout.clearNodePositions();
    graphLayout.layout(rect);
    updateMinWindowSize(true);
  }
 else {
  }
  for (  IDVINode node : dataGraph.getNodes()) {
    Point2D position=graphLayout.getNodePosition(node);
    node.render(gl);
    float relativePosX=(float)position.getX() / drawingAreaWidth;
    float relativePosY=(float)position.getY() / drawingAreaHeight;
    relativeNodePositions.put(node,new Pair<Float,Float>(relativePosX,relativePosY));
  }
  renderEdges(gl);
  gl.glEndList();
  applyAutomaticLayout=false;
  nodePositionsUpdated=false;
}","/** 
 * Builds the display list for a given display list index.
 * @param gl Instance of GL2.
 * @param iGLDisplayListIndex Index of the display list.
 */
private void buildDisplayList(final GL2 gl,int iGLDisplayListIndex){
  gl.glNewList(iGLDisplayListIndex,GL2.GL_COMPILE);
  Rectangle2D drawingArea=calculateGraphDrawingArea();
  if (applyAutomaticLayout) {
    for (    IDVINode node : dataGraph.getNodes()) {
      node.setCustomPosition(false);
    }
    for (    Edge edge : dataGraph.getAllEdges()) {
      AEdgeRenderer edgeRenderer=graphLayout.getLayoutSpecificEdgeRenderer(edge);
      edge.setEdgeRenderer(edgeRenderer);
    }
    graphLayout.clearNodePositions();
    graphLayout.layout(drawingArea);
    updateMinWindowSize(true);
  }
 else {
  }
  for (  IDVINode node : dataGraph.getNodes()) {
    node.render(gl);
  }
  renderEdges(gl);
  gl.glEndList();
  applyAutomaticLayout=false;
  nodePositionsUpdated=false;
}",0.5843520782396088
57664,"/** 
 * Render the color bars for selecting the color mapping
 * @param gl
 */
private void renderColorBars(GL2 gl){
  fRenderWidth=(viewFrustum.getWidth() - 2 * sideSpacing);
  ArrayList<ColorMarkerPoint> markerPoints=dataDomain.getColorMapper().getMarkerPoints();
  int iCount=0;
  for (  ColorMarkerPoint markerPoint : markerPoints) {
    int iColorLinePickingID=pickingManager.getPickingID(uniqueID,PickingType.HISTOGRAM_COLOR_LINE,iCount);
    boolean bIsFirstOrLast=false;
    float fPickingScaling=0.8f;
    if (iCount == 0 || iCount == markerPoints.size() - 1)     bIsFirstOrLast=true;
    if (markerPoint.hasLeftSpread()) {
      float fLeftSpread=markerPoint.getLeftSpread();
      int iLeftSpreadPickingID=pickingManager.getPickingID(uniqueID,PickingType.HISTOGRAM_LEFT_SPREAD_COLOR_LINE,iCount);
      gl.glColor4f(markerPoint.getColor()[0],markerPoint.getColor()[1],markerPoint.getColor()[2],0.3f);
      float fLeft=sideSpacing + (markerPoint.getMappingValue() - fLeftSpread) * fRenderWidth;
      float fRight=sideSpacing + markerPoint.getMappingValue() * fRenderWidth;
      if (!bIsFirstOrLast)       gl.glPushName(iColorLinePickingID);
      gl.glBegin(GL2.GL_POLYGON);
      gl.glVertex3f(fRight + fPickingScaling * (fLeft - fRight),sideSpacing,-0.1f);
      gl.glVertex3f(fRight + fPickingScaling * (fLeft - fRight),viewFrustum.getHeight() - sideSpacing,-0.1f);
      gl.glVertex3f(fRight,viewFrustum.getHeight() - sideSpacing,-0.1f);
      gl.glVertex3f(fRight,sideSpacing,-0.001f);
      gl.glEnd();
      if (!bIsFirstOrLast)       gl.glPopName();
      gl.glPushName(iLeftSpreadPickingID);
      gl.glBegin(GL2.GL_POLYGON);
      gl.glVertex3f(fLeft,sideSpacing,-0.1f);
      gl.glVertex3f(fLeft,viewFrustum.getHeight() - sideSpacing,-0.1f);
      gl.glVertex3f(fRight + fPickingScaling * (fLeft - fRight),viewFrustum.getHeight() - sideSpacing,-0.1f);
      gl.glVertex3f(fRight + fPickingScaling * (fLeft - fRight),sideSpacing,-0.001f);
      gl.glEnd();
      gl.glPopName();
      gl.glColor3fv(SPREAD_LINE_COLOR,0);
      gl.glPushName(iLeftSpreadPickingID);
      gl.glBegin(GL2.GL_LINES);
      gl.glVertex3f(sideSpacing + (markerPoint.getMappingValue() - fLeftSpread) * fRenderWidth,0,0);
      gl.glVertex3f(sideSpacing + (markerPoint.getMappingValue() - fLeftSpread) * fRenderWidth,viewFrustum.getHeight(),0);
      gl.glEnd();
      gl.glPopName();
      if (fLeftSpread > HistogramRenderStyle.SPREAD_CAPTION_THRESHOLD)       renderCaption(gl,markerPoint.getMappingValue() - fLeftSpread);
    }
    if (markerPoint.hasRightSpread()) {
      float fRightSpread=markerPoint.getRightSpread();
      float fLeft=sideSpacing + markerPoint.getMappingValue() * fRenderWidth;
      float fRight=sideSpacing + (markerPoint.getMappingValue() + fRightSpread) * fRenderWidth;
      int iRightSpreadPickingID=pickingManager.getPickingID(uniqueID,PickingType.HISTOGRAM_RIGHT_SPREAD_COLOR_LINE,iCount);
      gl.glColor4f(markerPoint.getColor()[0],markerPoint.getColor()[1],markerPoint.getColor()[2],0.3f);
      if (!bIsFirstOrLast)       gl.glPushName(iColorLinePickingID);
      gl.glBegin(GL2.GL_POLYGON);
      gl.glVertex3f(fLeft,sideSpacing,-0.011f);
      gl.glVertex3f(fLeft,viewFrustum.getHeight() - sideSpacing,-0.1f);
      gl.glVertex3f(fLeft + fPickingScaling * (fRight - fLeft),viewFrustum.getHeight() - sideSpacing,-0.1f);
      gl.glVertex3f(fLeft + fPickingScaling * (fRight - fLeft),sideSpacing,-0.1f);
      gl.glEnd();
      if (!bIsFirstOrLast)       gl.glPopName();
      gl.glPushName(iRightSpreadPickingID);
      gl.glBegin(GL2.GL_POLYGON);
      gl.glVertex3f(fLeft + fPickingScaling * (fRight - fLeft),sideSpacing,-0.011f);
      gl.glVertex3f(fLeft + fPickingScaling * (fRight - fLeft),viewFrustum.getHeight() - sideSpacing,-0.1f);
      gl.glVertex3f(fRight,viewFrustum.getHeight() - sideSpacing,-0.1f);
      gl.glVertex3f(fRight,sideSpacing,-0.1f);
      gl.glEnd();
      gl.glPopName();
      gl.glColor3fv(SPREAD_LINE_COLOR,0);
      gl.glPushName(iRightSpreadPickingID);
      gl.glBegin(GL2.GL_LINES);
      gl.glVertex3f(sideSpacing + (markerPoint.getMappingValue() + fRightSpread) * fRenderWidth,0,0);
      gl.glVertex3f(sideSpacing + (markerPoint.getMappingValue() + fRightSpread) * fRenderWidth,viewFrustum.getHeight(),0);
      gl.glEnd();
      gl.glPopName();
      if (fRightSpread > HistogramRenderStyle.SPREAD_CAPTION_THRESHOLD)       renderCaption(gl,markerPoint.getMappingValue() + fRightSpread);
    }
    renderCaption(gl,markerPoint.getMappingValue());
    iCount++;
  }
}","/** 
 * Render the color bars for selecting the color mapping
 * @param gl
 */
private void renderColorBars(GL2 gl){
  fRenderWidth=(viewFrustum.getWidth() - 2 * sideSpacing);
  ArrayList<ColorMarkerPoint> markerPoints=dataDomain.getColorMapper().getMarkerPoints();
  int iCount=0;
  for (  ColorMarkerPoint markerPoint : markerPoints) {
    int iColorLinePickingID=pickingManager.getPickingID(uniqueID,EPickingType.HISTOGRAM_COLOR_LINE.name(),iCount);
    boolean bIsFirstOrLast=false;
    float fPickingScaling=0.8f;
    if (iCount == 0 || iCount == markerPoints.size() - 1)     bIsFirstOrLast=true;
    if (markerPoint.hasLeftSpread()) {
      float fLeftSpread=markerPoint.getLeftSpread();
      int iLeftSpreadPickingID=pickingManager.getPickingID(uniqueID,EPickingType.HISTOGRAM_LEFT_SPREAD_COLOR_LINE.name(),iCount);
      gl.glColor4f(markerPoint.getColor()[0],markerPoint.getColor()[1],markerPoint.getColor()[2],0.3f);
      float fLeft=sideSpacing + (markerPoint.getMappingValue() - fLeftSpread) * fRenderWidth;
      float fRight=sideSpacing + markerPoint.getMappingValue() * fRenderWidth;
      if (!bIsFirstOrLast)       gl.glPushName(iColorLinePickingID);
      gl.glBegin(GL2.GL_POLYGON);
      gl.glVertex3f(fRight + fPickingScaling * (fLeft - fRight),sideSpacing,0.01f);
      gl.glVertex3f(fRight + fPickingScaling * (fLeft - fRight),viewFrustum.getHeight() - sideSpacing,0.01f);
      gl.glVertex3f(fRight,viewFrustum.getHeight() - sideSpacing,0.01f);
      gl.glVertex3f(fRight,sideSpacing,0.01f);
      gl.glEnd();
      if (!bIsFirstOrLast)       gl.glPopName();
      gl.glPushName(iLeftSpreadPickingID);
      gl.glBegin(GL2.GL_POLYGON);
      gl.glVertex3f(fLeft,sideSpacing,0.01f);
      gl.glVertex3f(fLeft,viewFrustum.getHeight() - sideSpacing,0.01f);
      gl.glVertex3f(fRight + fPickingScaling * (fLeft - fRight),viewFrustum.getHeight() - sideSpacing,0.01f);
      gl.glVertex3f(fRight + fPickingScaling * (fLeft - fRight),sideSpacing,0.01f);
      gl.glEnd();
      gl.glPopName();
      gl.glColor3fv(SPREAD_LINE_COLOR,0);
      gl.glPushName(iLeftSpreadPickingID);
      gl.glBegin(GL2.GL_LINES);
      gl.glVertex3f(sideSpacing + (markerPoint.getMappingValue() - fLeftSpread) * fRenderWidth,0,0.1f);
      gl.glVertex3f(sideSpacing + (markerPoint.getMappingValue() - fLeftSpread) * fRenderWidth,viewFrustum.getHeight(),0.1f);
      gl.glEnd();
      gl.glPopName();
      if (fLeftSpread > HistogramRenderStyle.SPREAD_CAPTION_THRESHOLD)       renderCaption(gl,markerPoint.getMappingValue() - fLeftSpread);
    }
    if (markerPoint.hasRightSpread()) {
      float fRightSpread=markerPoint.getRightSpread();
      float fLeft=sideSpacing + markerPoint.getMappingValue() * fRenderWidth;
      float fRight=sideSpacing + (markerPoint.getMappingValue() + fRightSpread) * fRenderWidth;
      int iRightSpreadPickingID=pickingManager.getPickingID(uniqueID,EPickingType.HISTOGRAM_RIGHT_SPREAD_COLOR_LINE.name(),iCount);
      gl.glColor4f(markerPoint.getColor()[0],markerPoint.getColor()[1],markerPoint.getColor()[2],0.3f);
      if (!bIsFirstOrLast)       gl.glPushName(iColorLinePickingID);
      gl.glBegin(GL2.GL_POLYGON);
      gl.glVertex3f(fLeft,sideSpacing,0.01f);
      gl.glVertex3f(fLeft,viewFrustum.getHeight() - sideSpacing,0.01f);
      gl.glVertex3f(fLeft + fPickingScaling * (fRight - fLeft),viewFrustum.getHeight() - sideSpacing,0.01f);
      gl.glVertex3f(fLeft + fPickingScaling * (fRight - fLeft),sideSpacing,0.01f);
      gl.glEnd();
      if (!bIsFirstOrLast)       gl.glPopName();
      gl.glPushName(iRightSpreadPickingID);
      gl.glBegin(GL2.GL_POLYGON);
      gl.glVertex3f(fLeft + fPickingScaling * (fRight - fLeft),sideSpacing,0.01f);
      gl.glVertex3f(fLeft + fPickingScaling * (fRight - fLeft),viewFrustum.getHeight() - sideSpacing,0.01f);
      gl.glVertex3f(fRight,viewFrustum.getHeight() - sideSpacing,0.01f);
      gl.glVertex3f(fRight,sideSpacing,0.01f);
      gl.glEnd();
      gl.glPopName();
      gl.glColor3fv(SPREAD_LINE_COLOR,0);
      gl.glPushName(iRightSpreadPickingID);
      gl.glBegin(GL2.GL_LINES);
      gl.glVertex3f(sideSpacing + (markerPoint.getMappingValue() + fRightSpread) * fRenderWidth,0,0.01f);
      gl.glVertex3f(sideSpacing + (markerPoint.getMappingValue() + fRightSpread) * fRenderWidth,viewFrustum.getHeight(),0.01f);
      gl.glEnd();
      gl.glPopName();
      if (fRightSpread > HistogramRenderStyle.SPREAD_CAPTION_THRESHOLD)       renderCaption(gl,markerPoint.getMappingValue() + fRightSpread);
    }
    renderCaption(gl,markerPoint.getMappingValue());
    iCount++;
  }
}",0.9848651019960518
57665,"@Override public void init(GL2 gl){
  displayListIndex=gl.glGenLists(1);
  textRenderer=new CaleydoTextRenderer(18);
}","@Override public void init(GL2 gl){
  displayListIndex=gl.glGenLists(1);
  textRenderer=new CaleydoTextRenderer(18);
  createPickingListeners();
}",0.8939393939393939
57666,"@Override public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  super.reshape(drawable,x,y,width,height);
}","@Override public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  super.reshape(drawable,x,y,width,height);
  if (!waitForMinSizeApplication && isRendered) {
    int drawingAreaWidth=pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getWidth()) - 2 * BOUNDS_SPACING_PIXELS;
    int drawingAreaHeight=pixelGLConverter.getPixelHeightForGLHeight(viewFrustum.getHeight()) - 2 * BOUNDS_SPACING_PIXELS;
    for (    IDVINode node : dataGraph.getNodes()) {
      Pair<Float,Float> relativePosition=relativeNodePositions.get(node);
      graphLayout.setNodePosition(node,new Point2D.Double(relativePosition.getFirst() * drawingAreaWidth,relativePosition.getSecond() * drawingAreaHeight));
    }
  }
}",0.3138173302107728
57667,"/** 
 * Register a new IDType. Checks whether whether the columnType is legal. If the typeName is already registered, a check is conducted whether the registered and the new one match, and if they do, the previously registered type is returned. Else an exception is thrown.
 * @param typeName see  {@link #typeName}
 * @param idCategory see  {@link #idCategory}
 * @param columnType see  {@link #columnType}
 * @return the created ID Type
 */
public static IDType registerType(String typeName,IDCategory idCategory,EColumnType columnType){
  if (!(columnType == EColumnType.STRING || columnType == EColumnType.INT))   throw new IllegalStateException(""String_Node_Str"" + columnType);
  IDType idType=registeredTypes.get(typeName);
  if (idType != null) {
    if (!idType.getIDCategory().equals(idCategory) || !idType.getColumnType().equals(columnType))     throw new IllegalStateException(""String_Node_Str"" + typeName + ""String_Node_Str""+ idCategory+ ""String_Node_Str""+ columnType+ ""String_Node_Str""+ ""String_Node_Str""+ idType+ ""String_Node_Str""+ idType.getIDCategory()+ ""String_Node_Str""+ idType.getColumnType());
  }
 else {
    idType=new IDType(typeName,idCategory,columnType);
    registeredTypes.put(typeName,idType);
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + typeName));
  }
  return idType;
}","/** 
 * Register a new IDType. Checks whether whether the columnType is legal. If the typeName is already registered, a check is conducted whether the registered and the new one match, and if they do, the previously registered type is returned. Else an exception is thrown.
 * @param typeName see {@link #typeName}
 * @param idCategory see {@link #idCategory}
 * @param columnType see {@link #columnType}
 * @return the created ID Type
 */
public static IDType registerType(String typeName,IDCategory idCategory,EColumnType columnType){
  if (!(columnType == EColumnType.STRING || columnType == EColumnType.INT))   throw new IllegalStateException(""String_Node_Str"" + columnType);
  IDType idType=registeredTypes.get(typeName);
  if (idType != null) {
    if (!idType.getIDCategory().equals(idCategory) || !idType.getColumnType().equals(columnType))     throw new IllegalStateException(""String_Node_Str"" + typeName + ""String_Node_Str""+ idCategory+ ""String_Node_Str""+ columnType+ ""String_Node_Str""+ ""String_Node_Str""+ idType+ ""String_Node_Str""+ idType.getIDCategory()+ ""String_Node_Str""+ idType.getColumnType());
  }
 else {
    idType=new IDType(typeName,idCategory,columnType);
    registeredTypes.put(typeName,idType);
    idCategory.addIDType(idType);
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + typeName));
  }
  return idType;
}",0.9862810530218762
57668,"/** 
 * @param isInternalType setter, see  {@link #isInternalType}
 */
public void setInternalType(boolean isInternalType){
  this.isInternalType=isInternalType;
}","/** 
 * @param isInternalType setter, see {@link #isInternalType}
 */
public void setInternalType(boolean isInternalType){
  this.isInternalType=isInternalType;
}",0.9969230769230768
57669,"/** 
 * Unregister an IDType. Checks whether the IDType is registered.
 * @param idType see  {@link #idType}
 */
public static void unregisterType(IDType idType){
  if (idType == null)   return;
  if (registeredTypes.containsKey(idType.getTypeName())) {
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + idType.getTypeName()));
    registeredTypes.remove(idType.getTypeName());
    idType.setTypeName(""String_Node_Str"");
  }
 else {
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + idType.getTypeName() + ""String_Node_Str""));
  }
}","/** 
 * Unregister an IDType. Checks whether the IDType is registered.
 * @param idType see {@link #idType}
 */
public static void unregisterType(IDType idType){
  if (idType == null)   return;
  if (registeredTypes.containsKey(idType.getTypeName())) {
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + idType.getTypeName()));
    registeredTypes.remove(idType.getTypeName());
    idType.setTypeName(""String_Node_Str"");
    idType.getIDCategory().removeIDType(idType);
  }
 else {
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + idType.getTypeName() + ""String_Node_Str""));
  }
}",0.9588815789473684
57670,"/** 
 * @param typeName setter, see  {@link #typeName}
 */
public void setTypeName(String typeName){
  this.typeName=typeName;
}","/** 
 * @param typeName setter, see {@link #typeName}
 */
public void setTypeName(String typeName){
  this.typeName=typeName;
}",0.996078431372549
57671,"private void fillDimensionIDTypeCombo(){
  HashSet<IDType> tempIDTypes=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory).getIDTypes();
  dimensionIDTypes.clear();
  for (  IDType idType : tempIDTypes) {
    if (!idType.isInternalType())     dimensionIDTypes.add(idType);
  }
  String[] idTypesAsString=new String[dimensionIDTypes.size()];
  int index=0;
  for (  IDType idType : dimensionIDTypes) {
    idTypesAsString[index]=idType.getTypeName();
    index++;
  }
  dimensionIDCombo.setItems(idTypesAsString);
  dimensionIDCombo.setEnabled(true);
  dimensionIDCombo.select(0);
}","private void fillDimensionIDTypeCombo(){
  ArrayList<IDType> tempIDTypes=dimensionIDCategory.getIdTypes();
  dimensionIDTypes.clear();
  for (  IDType idType : tempIDTypes) {
    if (!idType.isInternalType())     dimensionIDTypes.add(idType);
  }
  String[] idTypesAsString=new String[dimensionIDTypes.size()];
  int index=0;
  for (  IDType idType : dimensionIDTypes) {
    idTypesAsString[index]=idType.getTypeName();
    index++;
  }
  dimensionIDCombo.setItems(idTypesAsString);
  dimensionIDCombo.setEnabled(true);
  dimensionIDCombo.select(0);
}",0.9322916666666666
57672,"/** 
 * Reads the min and max values (if set) from the dialog
 */
private void fillLoadDataParameters(){
  if (txtMin.getEnabled() && !txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      dataSetDescription.setMin(fMin);
    }
  }
  if (txtMax.getEnabled() && !txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      dataSetDescription.setMax(fMax);
    }
  }
  IDSpecification rowIDSpecification=new IDSpecification();
  IDType rowIDType=recordIDTypes.get(recordIDCombo.getSelectionIndex());
  rowIDSpecification.setIdType(rowIDType.toString());
  if (rowIDType.getTypeName().equalsIgnoreCase(""String_Node_Str"")) {
    rowIDSpecification.setSubStringExpression(""String_Node_Str"");
  }
  dataSetDescription.setRowIDSpecification(rowIDSpecification);
  dataSetDescription.setMathFilterMode(mathFilterMode);
  dataSetDescription.setDataHomogeneous(buttonHomogeneous.getSelection());
  dataSetDescription.setTransposeMatrix(buttonSwapRowsWithColumns.getSelection());
  dataSetDescription.setDataSetName(txtDataSetLabel.getText());
}","/** 
 * Reads the min and max values (if set) from the dialog
 */
private void fillLoadDataParameters(){
  if (txtMin.getEnabled() && !txtMin.getText().isEmpty()) {
    float fMin=Float.parseFloat(txtMin.getText());
    if (!Float.isNaN(fMin)) {
      dataSetDescription.setMin(fMin);
    }
  }
  if (txtMax.getEnabled() && !txtMax.getText().isEmpty()) {
    float fMax=Float.parseFloat(txtMax.getText());
    if (!Float.isNaN(fMax)) {
      dataSetDescription.setMax(fMax);
    }
  }
  IDSpecification rowIDSpecification=new IDSpecification();
  IDType rowIDType=recordIDTypes.get(recordIDCombo.getSelectionIndex());
  rowIDSpecification.setIdType(rowIDType.toString());
  rowIDSpecification.setIdCategory(rowIDType.getIDCategory().toString());
  if (rowIDType.getTypeName().equalsIgnoreCase(""String_Node_Str"")) {
    rowIDSpecification.setSubStringExpression(""String_Node_Str"");
  }
  IDSpecification columnIDSpecification=new IDSpecification();
  IDType columnIDType=dimensionIDTypes.get(dimensionIDCombo.getSelectionIndex());
  columnIDSpecification.setIdType(columnIDType.toString());
  columnIDSpecification.setIdCategory(rowIDType.getIDCategory().toString());
  dataSetDescription.setRowIDSpecification(rowIDSpecification);
  dataSetDescription.setMathFilterMode(mathFilterMode);
  dataSetDescription.setDataHomogeneous(buttonHomogeneous.getSelection());
  dataSetDescription.setTransposeMatrix(buttonSwapRowsWithColumns.getSelection());
  dataSetDescription.setDataSetName(txtDataSetLabel.getText());
}",0.8663663663663663
57673,"/** 
 * prepares the dimension creation definition from the preview table. The dimension creation definition consists of the definition which columns in the data-CSV-file should be read, which should be skipped and the dimension-labels.
 * @return <code>true</code> if the preparation was successful,<code>false</code> otherwise
 */
private boolean readDimensionDefinition(){
  ArrayList<String> dimensionLabels=new ArrayList<String>();
  ArrayList<ColumnDescription> inputPattern=new ArrayList<ColumnDescription>();
  for (int columnIndex=2; columnIndex < previewTable.getColumnCount(); columnIndex++) {
    if (!skipColumn.get(columnIndex - 2).getSelection()) {
    }
 else {
      if (buttonUncertaintyDataProvided.getSelection() && (columnIndex % 2 != 0)) {
        inputPattern.add(new ColumnDescription(columnIndex - 1,""String_Node_Str"",ColumnDescription.CONTINUOUS));
        continue;
      }
      String dataType=""String_Node_Str"";
      try {
        int testSize=previewTable.getItemCount() - dataSetDescription.getNumberOfHeaderLines() - 1;
        for (int rowCount=1; rowCount < testSize; rowCount++) {
          String testString=previewTable.getItem(rowCount).getText(columnIndex);
          if (!testString.isEmpty())           Float.parseFloat(testString);
        }
      }
 catch (      NumberFormatException nfe) {
        dataType=""String_Node_Str"";
      }
      inputPattern.add(new ColumnDescription(columnIndex - 1,dataType,ColumnDescription.CONTINUOUS));
      String labelText=previewTable.getColumn(columnIndex).getText();
      dimensionLabels.add(labelText);
    }
  }
  dataSetDescription.setParsingPattern(inputPattern);
  dataSetDescription.setDataSourcePath(txtFileName.getText());
  if (dataSetDescription.getDataSourcePath().equals(""String_Node_Str"")) {
    MessageDialog.openError(new Shell(),""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  return true;
}","/** 
 * prepares the dimension creation definition from the preview table. The dimension creation definition consists of the definition which columns in the data-CSV-file should be read, which should be skipped and the dimension-labels.
 * @return <code>true</code> if the preparation was successful,<code>false</code> otherwise
 */
private boolean readDimensionDefinition(){
  ArrayList<String> dimensionLabels=new ArrayList<String>();
  ArrayList<ColumnDescription> inputPattern=new ArrayList<ColumnDescription>();
  for (int columnIndex=2; columnIndex < previewTable.getColumnCount(); columnIndex++) {
    if (!skipColumn.get(columnIndex - 2).getSelection()) {
    }
 else {
      if (buttonUncertaintyDataProvided.getSelection() && (columnIndex % 2 != 0)) {
        inputPattern.add(new ColumnDescription(columnIndex - 1,""String_Node_Str"",ColumnDescription.CONTINUOUS));
        continue;
      }
      String dataType=""String_Node_Str"";
      try {
        int testSize=previewTable.getItemCount() - dataSetDescription.getNumberOfHeaderLines() - 1;
        for (int rowCount=1; rowCount < testSize; rowCount++) {
          String testString=previewTable.getItem(rowCount).getText(columnIndex);
          if (!testString.isEmpty())           Float.parseFloat(testString);
        }
      }
 catch (      NumberFormatException nfe) {
        dataType=""String_Node_Str"";
      }
      inputPattern.add(new ColumnDescription(columnIndex - 1,dataType,ColumnDescription.CONTINUOUS));
      String labelText=previewTable.getColumn(columnIndex).getText();
      dimensionLabels.add(labelText);
    }
  }
  dataSetDescription.setParsingPattern(inputPattern);
  dataSetDescription.setDataSourcePath(txtFileName.getText());
  return true;
}",0.945085118066996
57674,"@Override protected void okPressed(){
  ATableBasedDataDomain dataDomain=(ATableBasedDataDomain)DataDomainManager.get().createDataDomain(""String_Node_Str"");
  fillLoadDataParameters();
  IDSpecification recordIDSpecification=new IDSpecification();
  recordIDSpecification.setIDTypeGene(true);
  recordIDSpecification.setIdType(""String_Node_Str"");
  dataSetDescription.setRowIDSpecification(recordIDSpecification);
  IDSpecification dimensionIDSpecification=new IDSpecification();
  dimensionIDSpecification.setIdType(""String_Node_Str"");
  dataDomain.setDataSetDescription(dataSetDescription);
  boolean success=readDimensionDefinition();
  if (success) {
    DataTableUtils.loadData(dataDomain,dataSetDescription,true,true);
  }
  try {
    String secondaryID=UUID.randomUUID().toString();
    RCPViewInitializationData rcpViewInitData=new RCPViewInitializationData();
    rcpViewInitData.setDataDomainID(dataDomain.getDataDomainID());
    RCPViewManager.get().addRCPView(secondaryID,rcpViewInitData);
    if (PlatformUI.getWorkbench().getActiveWorkbenchWindow() != null) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(dataDomain.getDefaultStartViewType(),secondaryID,IWorkbenchPage.VIEW_ACTIVATE);
    }
  }
 catch (  PartInitException e) {
    e.printStackTrace();
  }
  super.okPressed();
}","@Override protected void okPressed(){
  if (txtFileName.getText().isEmpty()) {
    MessageDialog.openError(new Shell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (recordIDCombo.getSelectionIndex() == -1) {
    MessageDialog.openError(new Shell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  if (dimensionIDCombo.getSelectionIndex() == -1) {
    MessageDialog.openError(new Shell(),""String_Node_Str"",""String_Node_Str"");
    return;
  }
  ATableBasedDataDomain dataDomain=(ATableBasedDataDomain)DataDomainManager.get().createDataDomain(""String_Node_Str"");
  fillLoadDataParameters();
  IDSpecification recordIDSpecification=new IDSpecification();
  recordIDSpecification.setIDTypeGene(true);
  recordIDSpecification.setIdType(""String_Node_Str"");
  dataSetDescription.setRowIDSpecification(recordIDSpecification);
  IDSpecification dimensionIDSpecification=new IDSpecification();
  dimensionIDSpecification.setIdType(""String_Node_Str"");
  dataDomain.setDataSetDescription(dataSetDescription);
  boolean success=readDimensionDefinition();
  if (success) {
    DataTableUtils.loadData(dataDomain,dataSetDescription,true,true);
    try {
      String secondaryID=UUID.randomUUID().toString();
      RCPViewInitializationData rcpViewInitData=new RCPViewInitializationData();
      rcpViewInitData.setDataDomainID(dataDomain.getDataDomainID());
      RCPViewManager.get().addRCPView(secondaryID,rcpViewInitData);
      if (PlatformUI.getWorkbench().getActiveWorkbenchWindow() != null) {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(dataDomain.getDefaultStartViewType(),secondaryID,IWorkbenchPage.VIEW_ACTIVATE);
      }
    }
 catch (    PartInitException e) {
      e.printStackTrace();
    }
    super.okPressed();
  }
}",0.8542068079640334
57675,"private void fillRecordIDTypeCombo(){
  HashSet<IDType> tempIDTypes=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory).getIDTypes();
  recordIDTypes.clear();
  for (  IDType idType : tempIDTypes) {
    if (!idType.isInternalType())     recordIDTypes.add(idType);
  }
  String[] idTypesAsString=new String[recordIDTypes.size()];
  int index=0;
  for (  IDType idType : recordIDTypes) {
    idTypesAsString[index]=idType.getTypeName();
    index++;
  }
  recordIDCombo.setItems(idTypesAsString);
  recordIDCombo.setEnabled(true);
  recordIDCombo.select(0);
  recordIDCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TableColumn idColumn=previewTable.getColumn(1);
      idColumn.setText(recordIDCombo.getText());
    }
  }
);
}","private void fillRecordIDTypeCombo(){
  ArrayList<IDType> tempIDTypes=recordIDCategory.getIdTypes();
  recordIDTypes.clear();
  for (  IDType idType : tempIDTypes) {
    if (!idType.isInternalType())     recordIDTypes.add(idType);
  }
  String[] idTypesAsString=new String[recordIDTypes.size()];
  int index=0;
  for (  IDType idType : recordIDTypes) {
    idTypesAsString[index]=idType.getTypeName();
    index++;
  }
  recordIDCombo.setItems(idTypesAsString);
  recordIDCombo.setEnabled(true);
  recordIDCombo.select(0);
  recordIDCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      TableColumn idColumn=previewTable.getColumn(1);
      idColumn.setText(recordIDCombo.getText());
    }
  }
);
}",0.930379746835443
57676,"/** 
 * <p> Creates the   {@link DataTable} and the {@link AColumn}s for the  {@link DataTable}, as well as the raw data columns to be set into the columns, which are also stored in   {@link #targetColumns}. </p> <p> Also creates the mapping of columnIDs to column labels in the  {@link IDMappingManager}</p>
 */
private void initializeDataContainers(){
  DataTable table=new DataTable(dataDomain);
  dataDomain.setTable(table);
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  String[] headers=null;
  if (dataSetDescription.isContainsColumnIDs()) {
    try {
      BufferedReader reader=GeneralManager.get().getResourceLoader().getResource(fileName);
      Integer rowOfColumnIDs=dataSetDescription.getNumberOfHeaderLines() - 1;
      if (dataSetDescription.getRowOfColumnIDs() != null)       rowOfColumnIDs=dataSetDescription.getRowOfColumnIDs();
      for (int rowCount=0; rowCount < rowOfColumnIDs; rowCount++) {
        reader.readLine();
      }
      String headerLine=reader.readLine();
      headers=headerLine.split(dataSetDescription.getDelimiter());
      reader.close();
    }
 catch (    Exception e) {
      Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"",e));
      throw new IllegalStateException(""String_Node_Str"" + fileName + ""String_Node_Str"",e);
    }
  }
  calculateNumberOfLinesInFile();
  int numberOfDataLines=numberOfLinesInFile - dataSetDescription.getNumberOfHeaderLines();
  IDMappingManager columnIDMappingManager;
  IDType columnIDType;
  IDType hrColumnIDType;
  if (!dataDomain.getDataSetDescription().isTransposeMatrix()) {
    columnIDMappingManager=dataDomain.getDimensionIDMappingManager();
    columnIDType=dataDomain.getDimensionIDType();
    hrColumnIDType=dataDomain.getHumanReadableDimensionIDType();
  }
 else {
    columnIDMappingManager=dataDomain.getRecordIDMappingManager();
    columnIDType=dataDomain.getRecordIDType();
    hrColumnIDType=dataDomain.getHumanReadableRecordIDType();
  }
  MappingType mappingType=columnIDMappingManager.createMap(columnIDType,hrColumnIDType,false);
  Map<Integer,String> columnIDMap=columnIDMappingManager.getMap(mappingType);
  int columnCount=0;
  for (  ColumnDescription parsingDetail : parsingPattern) {
    int columnID;
    if (parsingDetail.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
      float[] dataColumn=new float[numberOfDataLines];
      targetColumns.add(dataColumn);
      NumericalColumn column;
      if (parsingDetail.getColumnID() == null) {
        column=new NumericalColumn();
        parsingDetail.setColumnID(column.getID());
      }
 else {
        column=new NumericalColumn(parsingDetail.getColumnID());
      }
      columnID=column.getID();
      column.setRawData(dataColumn);
      table.addColumn(column);
    }
 else     if (parsingDetail.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
      ArrayList<String> dataColumn=new ArrayList<String>(numberOfDataLines);
      targetColumns.add(dataColumn);
      NominalColumn<String> column;
      if (parsingDetail.getColumnID() == null) {
        column=new NominalColumn<String>();
        parsingDetail.setColumnID(column.getID());
      }
 else {
        column=new NominalColumn<String>(parsingDetail.getColumnID());
      }
      columnID=column.getID();
      column.setRawNominalData(dataColumn);
      table.addColumn(column);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + parsingDetail + ""String_Node_Str""+ parsingPattern);
    }
    if (headers != null) {
      String idString=headers[parsingDetail.getColumn()];
      idString=convertID(idString,dataSetDescription.getColumnIDSpecification());
      columnIDMap.put(columnID,idString);
    }
 else {
      columnIDMap.put(columnID,""String_Node_Str"" + columnCount++);
    }
  }
  columnIDMappingManager.createReverseMap(mappingType);
}","/** 
 * <p> Creates the   {@link DataTable} and the {@link AColumn}s for the  {@link DataTable}, as well as the raw data columns to be set into the columns, which are also stored in   {@link #targetColumns}. </p> <p> Also creates the mapping of columnIDs to column labels in the  {@link IDMappingManager}</p>
 */
private void initializeDataContainers(){
  DataTable table=new DataTable(dataDomain);
  dataDomain.setTable(table);
  ArrayList<ColumnDescription> parsingPattern=dataSetDescription.getParsingPattern();
  String[] headers=null;
  if (dataSetDescription.isContainsColumnIDs()) {
    try {
      BufferedReader reader=GeneralManager.get().getResourceLoader().getResource(fileName);
      Integer rowOfColumnIDs=dataSetDescription.getNumberOfHeaderLines() - 1;
      if (dataSetDescription.getRowOfColumnIDs() != null)       rowOfColumnIDs=dataSetDescription.getRowOfColumnIDs();
      for (int rowCount=0; rowCount < rowOfColumnIDs; rowCount++) {
        reader.readLine();
      }
      String headerLine=reader.readLine();
      headers=headerLine.split(dataSetDescription.getDelimiter());
      reader.close();
    }
 catch (    Exception e) {
      Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"",e));
      throw new IllegalStateException(""String_Node_Str"" + fileName + ""String_Node_Str"",e);
    }
  }
  calculateNumberOfLinesInFile();
  int numberOfDataLines=numberOfLinesInFile - dataSetDescription.getNumberOfHeaderLines();
  IDMappingManager columnIDMappingManager;
  IDType columnIDType;
  IDType hrColumnIDType;
  if (!dataDomain.getDataSetDescription().isTransposeMatrix()) {
    columnIDMappingManager=dataDomain.getDimensionIDMappingManager();
    columnIDType=dataDomain.getDimensionIDType();
    hrColumnIDType=columnIDType.getIDCategory().getHumanReadableIDType();
  }
 else {
    columnIDMappingManager=dataDomain.getRecordIDMappingManager();
    columnIDType=dataDomain.getRecordIDType();
    hrColumnIDType=columnIDType.getIDCategory().getHumanReadableIDType();
  }
  MappingType mappingType=columnIDMappingManager.createMap(columnIDType,hrColumnIDType,false);
  Map<Integer,String> columnIDMap=columnIDMappingManager.getMap(mappingType);
  int columnCount=0;
  for (  ColumnDescription parsingDetail : parsingPattern) {
    int columnID;
    if (parsingDetail.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
      float[] dataColumn=new float[numberOfDataLines];
      targetColumns.add(dataColumn);
      NumericalColumn column;
      if (parsingDetail.getColumnID() == null) {
        column=new NumericalColumn();
        parsingDetail.setColumnID(column.getID());
      }
 else {
        column=new NumericalColumn(parsingDetail.getColumnID());
      }
      columnID=column.getID();
      column.setRawData(dataColumn);
      table.addColumn(column);
    }
 else     if (parsingDetail.getDataType().equalsIgnoreCase(""String_Node_Str"")) {
      ArrayList<String> dataColumn=new ArrayList<String>(numberOfDataLines);
      targetColumns.add(dataColumn);
      NominalColumn<String> column;
      if (parsingDetail.getColumnID() == null) {
        column=new NominalColumn<String>();
        parsingDetail.setColumnID(column.getID());
      }
 else {
        column=new NominalColumn<String>(parsingDetail.getColumnID());
      }
      columnID=column.getID();
      column.setRawNominalData(dataColumn);
      table.addColumn(column);
    }
 else {
      throw new IllegalStateException(""String_Node_Str"" + parsingDetail + ""String_Node_Str""+ parsingPattern);
    }
    if (headers != null) {
      String idString=headers[parsingDetail.getColumn()];
      idString=convertID(idString,dataSetDescription.getColumnIDSpecification());
      columnIDMap.put(columnID,idString);
    }
 else {
      columnIDMap.put(columnID,""String_Node_Str"" + columnCount++);
    }
  }
  columnIDMappingManager.createReverseMap(mappingType);
}",0.9363460296965784
57677,"public static void createIDTypesAndMapping(){
  IDCategory geneIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDCategory sampleIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.INT);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.STRING);
  IDType geneSymbol=IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.STRING);
  geneIDCategory.setHumanReadableIDType(geneSymbol);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.STRING);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.STRING);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.STRING);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.INT);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.INT);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.INT);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.INT);
  String fileName=""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism();
  IDType.registerType(""String_Node_Str"",sampleIDCategory,EColumnType.INT);
  IDType sampleID=IDType.registerType(""String_Node_Str"",sampleIDCategory,EColumnType.STRING);
  sampleIDCategory.setHumanReadableIDType(sampleID);
  IDMappingCreator idMappingCreator=new IDMappingCreator();
  idMappingCreator.createMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,false,null,null);
  idMappingCreator.createMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  idMappingCreator.createMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  idMappingCreator.createMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  idMappingCreator.createMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  idMappingCreator.createMapping(""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism() + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,true,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""));
}","public static void createIDTypesAndMapping(){
  IDCategory geneIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDCategory sampleIDCategory=IDCategory.registerCategory(""String_Node_Str"");
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.INT);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.STRING);
  IDType geneSymbol=IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.STRING);
  geneIDCategory.setHumanReadableIDType(geneSymbol);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.STRING);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.STRING);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.STRING);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.INT);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.INT);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.INT);
  IDType.registerType(""String_Node_Str"",geneIDCategory,EColumnType.INT);
  String fileName=""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism();
  IDType sampleIntIDType=IDType.registerType(""String_Node_Str"",sampleIDCategory,EColumnType.INT);
  sampleIntIDType.setInternalType(true);
  IDType sampleIDType=IDType.registerType(""String_Node_Str"",sampleIDCategory,EColumnType.STRING);
  sampleIDCategory.setHumanReadableIDType(sampleIDType);
  IDMappingCreator idMappingCreator=new IDMappingCreator();
  idMappingCreator.createMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,false,null,null);
  idMappingCreator.createMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  idMappingCreator.createMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  idMappingCreator.createMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  idMappingCreator.createMapping(fileName + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,false,true,false,null,null);
  idMappingCreator.createMapping(""String_Node_Str"" + GeneralManager.get().getBasicInfo().getOrganism() + ""String_Node_Str"",0,-1,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""),""String_Node_Str"",geneIDCategory,true,true,true,IDType.getIDType(""String_Node_Str""),IDType.getIDType(""String_Node_Str""));
}",0.9545454545454546
57678,"@Override protected Control createContents(Composite parent){
  Control control=super.createContents(parent);
  getButton(IDialogConstants.OK_ID).setEnabled(false);
  return control;
}","@Override protected Control createContents(Composite parent){
  Control control=super.createContents(parent);
  if (dataDomain == null)   getButton(IDialogConstants.OK_ID).setEnabled(false);
  return control;
}",0.934010152284264
57679,"@Override public void dataOK(){
  dataDomain=dataChooser.getDataDomain();
  recordPerspective=dataChooser.getRecordPerspective();
  dimensionPerspective=dataChooser.getDimensionPerspective();
  typeOptions[0]=dataDomain.getRecordDenomination(true,false);
  typeOptions[1]=dataDomain.getDimensionDenomination(true,false);
  clusterTypeCombo.setItems(typeOptions);
  clusterTypeCombo.select(0);
  clusterTypeCombo.setEnabled(true);
  clusterTargetName=typeOptions[0];
  parent.dataOK();
}","@Override public void dataOK(){
  dataDomain=dataChooser.getDataDomain();
  recordPerspective=dataChooser.getRecordPerspective();
  dimensionPerspective=dataChooser.getDimensionPerspective();
  setDataDependendStuff();
}",0.5722379603399433
57680,"/** 
 * Constructor.
 */
public StartClusteringDialogAction(IDataOKListener parent,final Composite parentComposite,ATableBasedDataDomain dataDomain,DimensionPerspective dimensionPerspective,RecordPerspective recordPerspective){
  super(TEXT);
  setId(ID);
  setToolTipText(TEXT);
  setImageDescriptor(ImageDescriptor.createFromImage(new ResourceLoader().getImage(PlatformUI.getWorkbench().getDisplay(),ICON)));
  this.parent=parent;
  this.parentComposite=parentComposite;
  if (dataDomain == null) {
    ArrayList<ATableBasedDataDomain> availableDomains=DataDomainManager.get().getDataDomainsByType(ATableBasedDataDomain.class);
    ArrayList<ATableBasedDataDomain> tableBasedDataDomains=new ArrayList<ATableBasedDataDomain>();
    for (    ATableBasedDataDomain tempDataDomain : availableDomains) {
      tableBasedDataDomains.add(tempDataDomain);
    }
    DataConfiguration config=DataConfigurationChooser.determineDataConfiguration(tableBasedDataDomains,""String_Node_Str"",false);
    this.dataDomain=config.getDataDomain();
    dimensionPerspective=config.getDimensionPerspective();
    recordPerspective=config.getRecordPerspective();
  }
  this.dimensionPerspective=dimensionPerspective;
  this.recordPerspective=recordPerspective;
  if (this.dataDomain != null) {
    typeOptions[0]=this.dataDomain.getRecordDenomination(true,false);
    typeOptions[1]=this.dataDomain.getDimensionDenomination(true,false);
  }
}","/** 
 * Constructor.
 */
public StartClusteringDialogAction(IDataOKListener parent,final Composite parentComposite,ATableBasedDataDomain dataDomain,DimensionPerspective dimensionPerspective,RecordPerspective recordPerspective){
  super(TEXT);
  setId(ID);
  setToolTipText(TEXT);
  setImageDescriptor(ImageDescriptor.createFromImage(new ResourceLoader().getImage(PlatformUI.getWorkbench().getDisplay(),ICON)));
  this.parent=parent;
  this.parentComposite=parentComposite;
  if (dataDomain == null) {
    ArrayList<ATableBasedDataDomain> availableDomains=DataDomainManager.get().getDataDomainsByType(ATableBasedDataDomain.class);
    ArrayList<ATableBasedDataDomain> tableBasedDataDomains=new ArrayList<ATableBasedDataDomain>();
    for (    ATableBasedDataDomain tempDataDomain : availableDomains) {
      tableBasedDataDomains.add(tempDataDomain);
    }
    DataConfiguration config=DataConfigurationChooser.determineDataConfiguration(tableBasedDataDomains,""String_Node_Str"",false);
    this.dataDomain=config.getDataDomain();
    dimensionPerspective=config.getDimensionPerspective();
    recordPerspective=config.getRecordPerspective();
  }
 else {
    this.dataDomain=dataDomain;
  }
  this.dimensionPerspective=dimensionPerspective;
  this.recordPerspective=recordPerspective;
  if (this.dataDomain != null) {
    typeOptions[0]=this.dataDomain.getRecordDenomination(true,false);
    typeOptions[1]=this.dataDomain.getDimensionDenomination(true,false);
  }
}",0.984743411927878
57681,"@Override public void handleRecordVAUpdate(String recordPerspectiveID){
  if (dataContainer.hasRecordPerspective(recordPerspectiveID)) {
    reactOnRecordVAChanges();
    setDisplayListDirty();
  }
}","@Override public void handleRecordVAUpdate(String recordPerspectiveID){
  if (dataContainer != null && dataContainer.hasRecordPerspective(recordPerspectiveID)) {
    reactOnRecordVAChanges();
    setDisplayListDirty();
  }
}",0.9408983451536644
57682,"/** 
 * Sets the   {@link ABrickLayoutConfiguration} for this brick, specifying itsappearance. If the specified view type is valid, it will be set, otherwise the default view type will be set.
 * @param newBrickLayout
 * @param viewType
 */
public void setBrickLayoutTemplate(ABrickLayoutConfiguration newBrickLayout,EContainedViewType viewType){
  if (brickLayoutConfiguration != null && brickLayoutConfiguration != newBrickLayout)   brickLayoutConfiguration.destroy();
  brickLayoutConfiguration=newBrickLayout;
  if ((brickLayoutConfiguration instanceof CollapsedBrickLayoutTemplate) || (brickLayoutConfiguration instanceof CompactHeaderBrickLayoutTemplate))   isInOverviewMode=true;
 else   isInOverviewMode=false;
  if (layoutManager != null) {
    layoutManager.setStaticLayoutConfiguration(brickLayoutConfiguration);
    if (brickLayoutConfiguration.isViewTypeValid(viewType)) {
      setBrickViewTypeAndConfigureSize(viewType);
    }
 else {
      setBrickViewTypeAndConfigureSize(brickLayoutConfiguration.getDefaultViewType());
    }
  }
}","/** 
 * Sets the   {@link ABrickLayoutConfiguration} for this brick, specifying itsappearance. If the specified view type is valid, it will be set, otherwise the default view type will be set.
 * @param newBrickLayout
 * @param viewType
 */
public void setBrickLayoutTemplate(ABrickLayoutConfiguration newBrickLayout,EContainedViewType viewType){
  if (brickLayoutConfiguration != null && brickLayoutConfiguration != newBrickLayout)   brickLayoutConfiguration.destroy();
  brickLayoutConfiguration=newBrickLayout;
  if ((brickLayoutConfiguration instanceof CollapsedBrickLayoutTemplate) || (brickLayoutConfiguration instanceof CompactHeaderBrickLayoutTemplate))   isInOverviewMode=true;
 else   isInOverviewMode=false;
  if (layoutManager != null) {
    if (brickLayoutConfiguration.isViewTypeValid(viewType)) {
      setBrickViewTypeAndConfigureSize(viewType);
    }
 else {
      setBrickViewTypeAndConfigureSize(brickLayoutConfiguration.getDefaultViewType());
    }
  }
}",0.8021760633036598
57683,"@Override public void init(GL2 gl){
  textRenderer=new CaleydoTextRenderer(24);
  baseDisplayListIndex=gl.glGenLists(1);
  layoutManager=new LayoutManager(viewFrustum,pixelGLConverter);
  if (brickLayoutConfiguration == null) {
    brickLayoutConfiguration=new DefaultBrickLayoutTemplate(this,stratomex,dimensionGroup,brickConfigurer);
  }
  brickConfigurer.setBrickViews(this,gl,glMouseListener,brickLayoutConfiguration);
  currentViewType=brickLayoutConfiguration.getDefaultViewType();
  setBrickLayoutTemplate(brickLayoutConfiguration,currentViewType);
  brickLayoutConfiguration.setViewRenderer(containedViewRenderers.get(currentViewType));
  currentRemoteView=views.get(currentViewType);
  if (brickLayoutConfiguration.getViewRenderer() instanceof IMouseWheelHandler) {
    stratomex.registerMouseWheelListener((IMouseWheelHandler)brickLayoutConfiguration.getViewRenderer());
  }
  layoutManager.setStaticLayoutConfiguration(brickLayoutConfiguration);
  dimensionGroup.updateLayout();
  isInitialized=true;
}","@Override public void init(GL2 gl){
  textRenderer=new CaleydoTextRenderer(24);
  baseDisplayListIndex=gl.glGenLists(1);
  layoutManager=new LayoutManager(viewFrustum,pixelGLConverter);
  if (brickLayoutConfiguration == null) {
    brickLayoutConfiguration=new DefaultBrickLayoutTemplate(this,stratomex,dimensionGroup,brickConfigurer);
  }
  brickConfigurer.setBrickViews(this,gl,glMouseListener,brickLayoutConfiguration);
  currentViewType=brickLayoutConfiguration.getDefaultViewType();
  setBrickLayoutTemplate(brickLayoutConfiguration,currentViewType);
  brickLayoutConfiguration.setViewRenderer(containedViewRenderers.get(currentViewType));
  currentRemoteView=views.get(currentViewType);
  if (brickLayoutConfiguration.getViewRenderer() instanceof IMouseWheelHandler) {
    stratomex.registerMouseWheelListener((IMouseWheelHandler)brickLayoutConfiguration.getViewRenderer());
  }
  dimensionGroup.updateLayout();
  isInitialized=true;
}",0.9488229273285568
57684,"/** 
 * Creates the toolbar containing buttons for view switching.
 * @param pixelHeight
 * @return
 */
protected Row createToolBar(){
  Row toolBar=new ToolBar(""String_Node_Str"",brick);
  toolBar.setPixelSizeY(0);
  ElementLayout spacingLayoutX=new ElementLayout(""String_Node_Str"");
  spacingLayoutX.setPixelSizeX(SPACING_PIXELS);
  spacingLayoutX.setRatioSizeY(0);
  toolBar.append(spacingLayoutX);
  for (  ElementLayout element : toolBarElements) {
    toolBar.append(element);
  }
  ElementLayout greedyXLayout=new ElementLayout(""String_Node_Str"");
  greedyXLayout.setGrabX(true);
  greedyXLayout.setRatioSizeY(0);
  toolBar.append(greedyXLayout);
  Button clusterButton=new Button(EPickingType.DIMENSION_GROUP_CLUSTER_BUTTON.name(),CLUSTER_BUTTON_ID,EIconTextures.CLUSTER_ICON);
  ElementLayout clusterButtonLayout=new ElementLayout(""String_Node_Str"");
  clusterButtonLayout.setPixelSizeX(BUTTON_WIDTH_PIXELS);
  clusterButtonLayout.setPixelSizeY(BUTTON_HEIGHT_PIXELS);
  clusterButtonLayout.setRenderer(new ButtonRenderer(clusterButton,brick,brick.getTextureManager(),DefaultBrickLayoutTemplate.BUTTON_Z));
  toolBar.append(clusterButtonLayout);
  toolBar.append(spacingLayoutX);
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      System.out.println(""String_Node_Str"");
      brick.getParentComposite().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          StartClusteringDialog dialog=new StartClusteringDialog(new Shell(),brick.getDataDomain());
          DataContainer data=brick.getDimensionGroup().getDataContainer();
          dialog.setDimensionPerspective(data.getDimensionPerspective());
          dialog.setRecordPerspective(data.getRecordPerspective());
          dialog.open();
          AClusterConfiguration clusterState=dialog.getClusterState();
          if (clusterState == null)           return;
          RecordPerspective newRecordPerspective=new RecordPerspective(data.getDataDomain());
          newRecordPerspective.setVirtualArray(data.getRecordPerspective().getVirtualArray());
          data.setRecordPerspective(newRecordPerspective);
          clusterState.setOptionalTargetRecordPerspective(newRecordPerspective);
          StartClusteringEvent event=new StartClusteringEvent(clusterState);
          event.setDataDomainID(brick.getDataDomain().getDataDomainID());
          GeneralManager.get().getEventPublisher().triggerEvent(event);
        }
      }
);
    }
  }
,EPickingType.DIMENSION_GROUP_CLUSTER_BUTTON.name(),CLUSTER_BUTTON_ID);
  return toolBar;
}","/** 
 * Creates the toolbar containing buttons for view switching.
 * @param pixelHeight
 * @return
 */
protected Row createToolBar(){
  System.out.println(this.toString());
  Row toolBar=new ToolBar(""String_Node_Str"",brick);
  toolBar.setPixelSizeY(0);
  ElementLayout spacingLayoutX=new ElementLayout(""String_Node_Str"");
  spacingLayoutX.setPixelSizeX(SPACING_PIXELS);
  spacingLayoutX.setRatioSizeY(0);
  toolBar.append(spacingLayoutX);
  for (  ElementLayout element : toolBarElements) {
    toolBar.append(element);
  }
  ElementLayout greedyXLayout=new ElementLayout(""String_Node_Str"");
  greedyXLayout.setGrabX(true);
  greedyXLayout.setRatioSizeY(0);
  toolBar.append(greedyXLayout);
  Button clusterButton=new Button(EPickingType.DIMENSION_GROUP_CLUSTER_BUTTON.name(),CLUSTER_BUTTON_ID,EIconTextures.CLUSTER_ICON);
  ElementLayout clusterButtonLayout=new ElementLayout(""String_Node_Str"");
  clusterButtonLayout.setPixelSizeX(BUTTON_WIDTH_PIXELS);
  clusterButtonLayout.setPixelSizeY(BUTTON_HEIGHT_PIXELS);
  clusterButtonLayout.setRenderer(new ButtonRenderer(clusterButton,brick,brick.getTextureManager(),DefaultBrickLayoutTemplate.BUTTON_Z));
  toolBar.append(clusterButtonLayout);
  toolBar.append(spacingLayoutX);
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      System.out.println(""String_Node_Str"" + this);
      brick.getParentComposite().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          StartClusteringDialog dialog=new StartClusteringDialog(new Shell(),brick.getDataDomain());
          DataContainer data=brick.getDimensionGroup().getDataContainer();
          dialog.setDimensionPerspective(data.getDimensionPerspective());
          dialog.setRecordPerspective(data.getRecordPerspective());
          dialog.open();
          AClusterConfiguration clusterState=dialog.getClusterState();
          if (clusterState == null)           return;
          RecordPerspective newRecordPerspective=new RecordPerspective(data.getDataDomain());
          newRecordPerspective.setVirtualArray(data.getRecordPerspective().getVirtualArray());
          data.setRecordPerspective(newRecordPerspective);
          clusterState.setOptionalTargetRecordPerspective(newRecordPerspective);
          StartClusteringEvent event=new StartClusteringEvent(clusterState);
          event.setDataDomainID(brick.getDataDomain().getDataDomainID());
          GeneralManager.get().getEventPublisher().triggerEvent(event);
        }
      }
);
    }
  }
,EPickingType.DIMENSION_GROUP_CLUSTER_BUTTON.name(),CLUSTER_BUTTON_ID);
  return toolBar;
}",0.9911843618244538
57685,"/** 
 * <p> Set the spacing of the arch in pixel. </p> <p> This is only used if the group is not collapsed. If it is collapsed, the values are irrelevant. </p>
 * @param archHeight the pixel height of the arch
 */
public void setArchHeight(int archHeight){
  if (headerBrick != null)   headerBrick.setStaticBrickHeight(archHeight);
}","/** 
 * <p> Set the spacing of the arch in pixel. </p> <p> This is only used if the group is not collapsed. If it is collapsed, the values are irrelevant. </p>
 * @param archHeight the pixel height of the arch
 */
public void setArchHeight(int archHeight){
  if (headerBrick != null) {
    headerBrick.setStaticBrickHeight(archHeight);
    headerBrick.setBrickHeigthMode(EBrickHeightMode.STATIC);
  }
}",0.9061224489795918
57686,"/** 
 * This method has to be called in every display step. It is responsible for the ray tracing which does the actual picking. It needs the ID of the calling view and a gl context. It calls the display() method of the calling view, therefore only elements rendered in the display() can be picked.
 * @param glView a reference to the calling view
 * @param gl the GL2 context
 */
public void handlePicking(final AGLView glView,final GL2 gl){
  if (enablePicking == false)   return;
  GLMouseListener glMouseListener=glView.getGLMouseListener();
  Point pickPoint=null;
  PickingMode ePickingMode=PickingMode.CLICKED;
  if (glMouseListener.wasMouseDoubleClicked()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=PickingMode.DOUBLE_CLICKED;
  }
 else   if (glMouseListener.wasMouseDragged()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=PickingMode.DRAGGED;
  }
 else   if (glMouseListener.wasLeftMouseButtonPressed()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=PickingMode.CLICKED;
  }
 else   if (glMouseListener.wasRightMouseButtonPressed()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=PickingMode.RIGHT_CLICKED;
  }
 else   if (glMouseListener.wasMouseMoved()) {
    hashViewIDToIsMouseOverPickingEvent.put(glView.getID(),true);
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=PickingMode.MOUSE_OVER;
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(glView.getID()) != null && hashViewIDToIsMouseOverPickingEvent.get(glView.getID()) == true) {
  }
  if (pickPoint == null)   return;
  hashViewIDToIsMouseOverPickingEvent.put(glView.getID(),false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=Buffers.newDirectIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL2.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL2.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix(pickPoint.x,(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  ViewFrustum viewFrustum=glView.getViewFrustum();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  glView.display(gl);
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL2.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,ePickingMode,tmpPickPoint,glMouseListener.getPickedPointDragStart());
  }
 else {
    GLCanvas parentCanvas=glView.getParentGLCanvas();
    for (    int viewID : hashViewIDToPreviousViewSpecificHitListContainer.keySet()) {
      AGLView currentView=GeneralManager.get().getViewManager().getGLView(viewID);
      if (currentView != null && currentView.getParentGLCanvas() == parentCanvas) {
        ViewSpecificHitListContainer previousHitContainer=hashViewIDToPreviousViewSpecificHitListContainer.get(viewID);
        if (previousHitContainer != null) {
          for (          String pickingType : previousHitContainer.getPickingTypes()) {
            for (            Pick previousPick : previousHitContainer.getPicksForPickingType(pickingType)) {
              ViewSpecificHitListContainer hitContainer=hashViewIDToViewSpecificHitListContainer.get(viewID);
              if (hitContainer == null) {
                hitContainer=new ViewSpecificHitListContainer();
                hashViewIDToViewSpecificHitListContainer.put(viewID,hitContainer);
              }
              Pick pick=new Pick(previousPick.getObjectID(),PickingMode.MOUSE_OUT,tmpPickPoint,glMouseListener.getPickedPointDragStart(),fMinimumZValue);
              hitContainer.addPicksForPickingType(pickingType,pick,true);
            }
          }
        }
        hashViewIDToPreviousViewSpecificHitListContainer.put(viewID,new ViewSpecificHitListContainer());
      }
    }
  }
}","/** 
 * This method has to be called in every display step. It is responsible for the ray tracing which does the actual picking. It needs the ID of the calling view and a gl context. It calls the display() method of the calling view, therefore only elements rendered in the display() can be picked.
 * @param glView a reference to the calling view
 * @param gl the GL2 context
 */
public void handlePicking(final AGLView glView,final GL2 gl){
  if (enablePicking == false)   return;
  GLMouseListener glMouseListener=glView.getGLMouseListener();
  Point pickPoint=null;
  PickingMode ePickingMode=PickingMode.CLICKED;
  if (glMouseListener.wasMouseDoubleClicked()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=PickingMode.DOUBLE_CLICKED;
  }
 else   if (glMouseListener.wasMouseDragged()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=PickingMode.DRAGGED;
  }
 else   if (glMouseListener.wasLeftMouseButtonPressed()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=PickingMode.CLICKED;
  }
 else   if (glMouseListener.wasRightMouseButtonPressed()) {
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=PickingMode.RIGHT_CLICKED;
  }
 else   if (glMouseListener.wasMouseMoved()) {
    hashViewIDToIsMouseOverPickingEvent.put(glView.getID(),true);
    pickPoint=glMouseListener.getPickedPoint();
    ePickingMode=PickingMode.MOUSE_OVER;
  }
 else   if (hashViewIDToIsMouseOverPickingEvent.get(glView.getID()) != null && hashViewIDToIsMouseOverPickingEvent.get(glView.getID()) == true) {
  }
  if (pickPoint == null)   return;
  hashViewIDToIsMouseOverPickingEvent.put(glView.getID(),false);
  int PICKING_BUFSIZE=1024;
  int iArPickingBuffer[]=new int[PICKING_BUFSIZE];
  IntBuffer pickingBuffer=Buffers.newDirectIntBuffer(PICKING_BUFSIZE);
  int iHitCount=-1;
  int viewport[]=new int[4];
  gl.glGetIntegerv(GL2.GL_VIEWPORT,viewport,0);
  gl.glSelectBuffer(PICKING_BUFSIZE,pickingBuffer);
  gl.glRenderMode(GL2.GL_SELECT);
  gl.glInitNames();
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glPushMatrix();
  gl.glLoadIdentity();
  GLU glu=new GLU();
  glu.gluPickMatrix(pickPoint.x,(viewport[3] - pickPoint.y),5.0,5.0,viewport,0);
  float fAspectRatio=(float)(viewport[3] - viewport[1]) / (float)(viewport[2] - viewport[0]);
  ViewFrustum viewFrustum=glView.getViewFrustum();
  viewFrustum.setProjectionMatrix(gl,fAspectRatio);
  Point tmpPickPoint=(Point)pickPoint.clone();
  pickPoint=null;
  glView.display(gl);
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glPopMatrix();
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  iHitCount=gl.glRenderMode(GL2.GL_RENDER);
  pickingBuffer.get(iArPickingBuffer);
  ArrayList<Integer> iAlPickedObjectId=processHits(iHitCount,iArPickingBuffer);
  GLCanvas parentCanvas=glView.getParentGLCanvas();
  if (iAlPickedObjectId.size() > 0) {
    processPicks(iAlPickedObjectId,ePickingMode,tmpPickPoint,glMouseListener.getPickedPointDragStart());
    Set<Integer> processedViews=new HashSet<Integer>();
    for (    int pickingID : iAlPickedObjectId) {
      Pair<Integer,String> pickAssociatedValues=hashPickingIDToViewID.get(pickingID);
      int pickedViewID=pickAssociatedValues.getFirst();
      for (      int viewID : hashViewIDToPreviousViewSpecificHitListContainer.keySet()) {
        if (viewID != pickedViewID && !processedViews.contains(viewID)) {
          AGLView currentView=GeneralManager.get().getViewManager().getGLView(viewID);
          if (currentView != null && currentView.getParentGLCanvas() == parentCanvas && !isParentViewOfView(pickedViewID,viewID)) {
            ViewSpecificHitListContainer previousHitContainer=hashViewIDToPreviousViewSpecificHitListContainer.get(viewID);
            if (previousHitContainer != null) {
              for (              String pickingType : previousHitContainer.getPickingTypes()) {
                for (                Pick previousPick : previousHitContainer.getPicksForPickingType(pickingType)) {
                  if (!pickingType.equals(pickAssociatedValues.getSecond()) && previousPick.getObjectID() != getPickedObjectIDFromPickingID(pickedViewID,pickAssociatedValues.getSecond(),pickingID)) {
                    ViewSpecificHitListContainer hitContainer=hashViewIDToViewSpecificHitListContainer.get(viewID);
                    if (hitContainer == null) {
                      hitContainer=new ViewSpecificHitListContainer();
                      hashViewIDToViewSpecificHitListContainer.put(viewID,hitContainer);
                    }
                    Pick pick=new Pick(previousPick.getObjectID(),PickingMode.MOUSE_OUT,tmpPickPoint,glMouseListener.getPickedPointDragStart(),fMinimumZValue);
                    hitContainer.addPicksForPickingType(pickingType,pick,true);
                    processedViews.add(viewID);
                  }
                }
              }
            }
            hashViewIDToPreviousViewSpecificHitListContainer.put(viewID,new ViewSpecificHitListContainer());
          }
        }
      }
    }
  }
 else {
    Set<Integer> remoteRenderedViewIDs=new HashSet<Integer>();
    for (    int viewID : hashViewIDToPreviousViewSpecificHitListContainer.keySet()) {
      AGLView currentView=GeneralManager.get().getViewManager().getGLView(viewID);
      if (currentView != null && currentView.getParentGLCanvas() == parentCanvas) {
        remoteRenderedViewIDs.add(viewID);
      }
    }
    addMouseOutForPicksOfSpecifiedViews(remoteRenderedViewIDs,glMouseListener,tmpPickPoint);
  }
}",0.8603054217484882
57687,"@Override public void mouseOver(Pick pick){
  if (labelProvider != null) {
    toolTipMessage=labelProvider.getLabel();
  }
  System.out.println(""String_Node_Str"");
  thread=new ToolTipThread();
  Runnable runnable=new Runnable(){
    @Override public void run(){
      view.getParentComposite().getDisplay().asyncExec(thread);
    }
  }
;
  Thread timerThread=new Thread(runnable);
  timerThread.start();
}","@Override public void mouseOver(Pick pick){
  if (labelProvider != null) {
    toolTipMessage=labelProvider.getLabel();
  }
  System.out.println(""String_Node_Str"");
  thread=new ToolTipThread(new Point(pick.getPickedPoint().x,pick.getPickedPoint().y));
  Runnable runnable=new Runnable(){
    @Override public void run(){
      view.getParentComposite().getDisplay().asyncExec(thread);
    }
  }
;
  Thread timerThread=new Thread(runnable);
  timerThread.start();
}",0.93348623853211
57688,"private synchronized void createToolTip(){
  if (hideToolTip)   return;
  System.out.println(""String_Node_Str"");
  toolTip=new ToolTip(new Shell(),0);
  toolTip.setText(toolTipTitle == null ? ""String_Node_Str"" : toolTipTitle);
  toolTip.setMessage(toolTipMessage == null ? ""String_Node_Str"" : toolTipMessage);
  toolTip.setAutoHide(true);
  toolTip.setVisible(true);
}","private synchronized void createToolTip(){
  if (hideToolTip)   return;
  System.out.println(""String_Node_Str"");
  toolTip=new ToolTip(new Shell(),0);
  toolTip.setText(toolTipTitle == null ? ""String_Node_Str"" : toolTipTitle);
  toolTip.setMessage(toolTipMessage == null ? ""String_Node_Str"" : toolTipMessage);
  PointerInfo pointerInfo=MouseInfo.getPointerInfo();
  toolTip.setLocation(pointerInfo.getLocation().x,pointerInfo.getLocation().y + MOUSE_POSITION_TOOLTIP_SPACING_PIXELS);
  toolTip.setAutoHide(true);
  toolTip.setVisible(true);
}",0.7846153846153846
57689,"private void createPickingListeners(){
  RecordVirtualArray recordVA=dataContainer.getRecordPerspective().getVirtualArray();
  for (  Group group : recordVA.getGroupList()) {
    ToolTipPickingListener toolTipPickingListener=new ToolTipPickingListener(this,""String_Node_Str"");
    addIDPickingListener(toolTipPickingListener,EPickingType.KM_CURVE.name(),group.getID());
  }
}","private void createPickingListeners(){
  RecordVirtualArray recordVA=dataContainer.getRecordPerspective().getVirtualArray();
  for (  Group group : recordVA.getGroupList()) {
    ToolTipPickingListener toolTipPickingListener=new ToolTipPickingListener(this,group.getLabel());
    addIDPickingListener(toolTipPickingListener,EPickingType.KM_CURVE.name(),group.getID());
  }
}",0.9559412550066756
57690,"/** 
 * Creates the   {@link DataTable} from a previously prepared dimensiondefinition.
 * @param dataDomain
 * @param createDefaultDimensionPerspectives
 * @param createDefaultRecordPerspective
 * @return
 */
public static void loadData(ATableBasedDataDomain dataDomain,DataSetDescription dataSetDescription,boolean createDefaultDimensionPerspectives,boolean createDefaultRecordPerspective){
  IDType rowTargetIDType;
  if (dataDomain.isColumnDimension())   rowTargetIDType=dataDomain.getRecordIDType();
 else   rowTargetIDType=dataDomain.getDimensionIDType();
  IDMappingCreator idMappingCreator=new IDMappingCreator();
  idMappingCreator.createMapping(dataSetDescription.getDataSourcePath(),dataSetDescription.getNumberOfHeaderLines(),-1,IDType.getIDType(dataSetDescription.getRowIDSpecification().getIdType()),rowTargetIDType,""String_Node_Str"",rowTargetIDType.getIDCategory(),true,true,false,null,null);
  idMappingCreator.setIdSpecification(dataSetDescription.getRowIDSpecification());
  TabularDataParser parser=new TabularDataParser(dataDomain,dataSetDescription);
  parser.loadData();
  DataTable table=dataDomain.getTable();
  if (createDefaultDimensionPerspectives)   table.createDefaultDimensionPerspective();
  if (createDefaultRecordPerspective)   table.createDefaultRecordPerspective();
  if (dataSetDescription.getMin() != null) {
    table.getMetaData().setMin(dataSetDescription.getMin());
  }
  if (dataSetDescription.getMax() != null) {
    table.getMetaData().setMax(dataSetDescription.getMax());
  }
  boolean isSetHomogeneous=dataSetDescription.isDataHomogeneous();
  if (dataSetDescription.getMathFilterMode().equalsIgnoreCase(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.NORMAL,isSetHomogeneous);
  }
 else   if (dataSetDescription.getMathFilterMode().equalsIgnoreCase(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG10,isSetHomogeneous);
  }
 else   if (dataSetDescription.getMathFilterMode().equalsIgnoreCase(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG2,isSetHomogeneous);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}","/** 
 * Creates the   {@link DataTable} from a previously prepared dimensiondefinition.
 * @param dataDomain
 * @param createDefaultDimensionPerspectives
 * @param createDefaultRecordPerspective
 * @return
 */
public static void loadData(ATableBasedDataDomain dataDomain,DataSetDescription dataSetDescription,boolean createDefaultDimensionPerspectives,boolean createDefaultRecordPerspective){
  IDType rowTargetIDType;
  if (dataDomain.isColumnDimension())   rowTargetIDType=dataDomain.getRecordIDType();
 else   rowTargetIDType=dataDomain.getDimensionIDType();
  IDMappingCreator idMappingCreator=new IDMappingCreator();
  idMappingCreator.setIdSpecification(dataSetDescription.getRowIDSpecification());
  idMappingCreator.createMapping(dataSetDescription.getDataSourcePath(),dataSetDescription.getNumberOfHeaderLines(),-1,IDType.getIDType(dataSetDescription.getRowIDSpecification().getIdType()),rowTargetIDType,""String_Node_Str"",rowTargetIDType.getIDCategory(),true,true,false,null,null);
  TabularDataParser parser=new TabularDataParser(dataDomain,dataSetDescription);
  parser.loadData();
  DataTable table=dataDomain.getTable();
  if (createDefaultDimensionPerspectives)   table.createDefaultDimensionPerspective();
  if (createDefaultRecordPerspective)   table.createDefaultRecordPerspective();
  if (dataSetDescription.getMin() != null) {
    table.getMetaData().setMin(dataSetDescription.getMin());
  }
  if (dataSetDescription.getMax() != null) {
    table.getMetaData().setMax(dataSetDescription.getMax());
  }
  boolean isSetHomogeneous=dataSetDescription.isDataHomogeneous();
  if (dataSetDescription.getMathFilterMode().equalsIgnoreCase(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.NORMAL,isSetHomogeneous);
  }
 else   if (dataSetDescription.getMathFilterMode().equalsIgnoreCase(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG10,isSetHomogeneous);
  }
 else   if (dataSetDescription.getMathFilterMode().equalsIgnoreCase(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG2,isSetHomogeneous);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
}",0.9622898682417084
57691,"/** 
 * <p> Converts a   {@link RecordPerspective} with an IDType that is not the{@link #recordIDType} to a new RecordPerspective with the recordIDType.</p> <p> Grouping, and naming is preserved, sample elements and trees are not. </p>
 */
public RecordPerspective convertForeignRecordPerspective(RecordPerspective foreignPerspective){
  if (foreignPerspective.getIdType().getIDCategory() != recordIDCategory) {
    throw new IllegalArgumentException(""String_Node_Str"" + foreignPerspective.getIdType() + ""String_Node_Str""+ recordIDType);
  }
  if (foreignPerspective.getIdType() == recordIDType)   return foreignPerspective;
  RecordVirtualArray foreignRecordVA=foreignPerspective.getVirtualArray();
  RecordGroupList recordGroupList=foreignRecordVA.getGroupList();
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  ArrayList<Integer> indices=new ArrayList<Integer>(foreignRecordVA.size());
  ArrayList<Integer> groupSizes=new ArrayList<Integer>(recordGroupList.size());
  ArrayList<Integer> sampleElements=new ArrayList<Integer>(recordGroupList.size());
  ArrayList<String> groupNames=new ArrayList<String>(recordGroupList.size());
  for (  Group foreignGroup : recordGroupList) {
    groupSizes.add(0);
    sampleElements.add(0);
    groupNames.add(foreignGroup.getLabel());
  }
  int count=0;
  for (  Integer foreignVAID : foreignRecordVA) {
    Integer localVAID=recordIDMappingManager.getID(foreignRecordVA.getIdType(),recordIDType,foreignVAID);
    if (localVAID == null)     continue;
    indices.add(localVAID);
    int groupIndex=recordGroupList.getGroupOfVAIndex(foreignRecordVA.indexOf(foreignVAID)).getGroupIndex();
    groupSizes.set(groupIndex,groupSizes.get(groupIndex) + 1);
    sampleElements.set(groupIndex,count);
    count++;
  }
  data.setData(indices,groupSizes,sampleElements,groupNames);
  RecordPerspective localRecordPerspective=new RecordPerspective(this);
  localRecordPerspective.setIDType(recordIDType);
  localRecordPerspective.init(data);
  localRecordPerspective.setLabel(foreignPerspective.getLabel(),foreignPerspective.isDefaultLabel());
  return localRecordPerspective;
}","/** 
 * <p> Converts a   {@link RecordPerspective} with an IDType that is not the{@link #recordIDType} to a new RecordPerspective with the recordIDType.</p> <p> Grouping, and naming is preserved, sample elements and trees are not. </p>
 */
public RecordPerspective convertForeignRecordPerspective(RecordPerspective foreignPerspective){
  if (foreignPerspective.getIdType().getIDCategory() != recordIDCategory) {
    throw new IllegalArgumentException(""String_Node_Str"" + foreignPerspective.getIdType() + ""String_Node_Str""+ recordIDType);
  }
  if (foreignPerspective.getIdType() == recordIDType)   return foreignPerspective;
  RecordVirtualArray foreignRecordVA=foreignPerspective.getVirtualArray();
  RecordGroupList recordGroupList=foreignRecordVA.getGroupList();
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  ArrayList<Integer> indices=new ArrayList<Integer>(foreignRecordVA.size());
  ArrayList<Integer> groupSizes=new ArrayList<Integer>(recordGroupList.size());
  ArrayList<Integer> sampleElements=new ArrayList<Integer>(recordGroupList.size());
  ArrayList<String> groupNames=new ArrayList<String>(recordGroupList.size());
  for (  Group foreignGroup : recordGroupList) {
    groupSizes.add(0);
    sampleElements.add(0);
    groupNames.add(foreignGroup.getLabel());
  }
  int count=0;
  for (  Integer foreignVAID : foreignRecordVA) {
    Set<Integer> localVAIDS=recordIDMappingManager.getIDAsSet(foreignRecordVA.getIdType(),recordIDType,foreignVAID);
    for (    Integer localVAID : localVAIDS) {
      if (localVAID == null)       continue;
      indices.add(localVAID);
      int groupIndex=recordGroupList.getGroupOfVAIndex(foreignRecordVA.indexOf(foreignVAID)).getGroupIndex();
      groupSizes.set(groupIndex,groupSizes.get(groupIndex) + 1);
      sampleElements.set(groupIndex,count);
      count++;
    }
  }
  data.setData(indices,groupSizes,sampleElements,groupNames);
  RecordPerspective localRecordPerspective=new RecordPerspective(this);
  localRecordPerspective.setIDType(recordIDType);
  localRecordPerspective.init(data);
  localRecordPerspective.setLabel(foreignPerspective.getLabel(),foreignPerspective.isDefaultLabel());
  return localRecordPerspective;
}",0.9742291762540268
57692,"/** 
 * This method is called by the   {@link ForeignSelectionUpdateListener}, signaling that a selection form another dataDomain is available. If possible, it is converted to be compatible with the local dataDomain and then sent out via a   {@link SelectionUpdateEvent}.
 * @param dataDomainType the type of the dataDomain for which thisselectionUpdate is intended
 * @param delta
 * @param scrollToSelection
 * @param info
 */
public void handleForeignSelectionUpdate(String dataDomainType,SelectionDelta delta){
}","/** 
 * This method is called by the   {@link ForeignSelectionUpdateListener}, signaling that a selection form another dataDomain is available. If possible, it is converted to be compatible with the local dataDomain and then sent out via a   {@link SelectionUpdateEvent}.
 * @param dataDomainType the type of the dataDomain for which this selectionUpdate is intended
 * @param delta
 * @param scrollToSelection
 * @param info
 */
public void handleForeignSelectionUpdate(String dataDomainType,SelectionDelta delta){
}",0.999031945788964
57693,"/** 
 * @param colorMapper setter, see {@link #colorMapper}
 */
public void setColorMapper(ColorMapper colorMapper){
  this.colorMapper=colorMapper;
}","/** 
 * @param colorMapper setter, see  {@link #colorMapper}
 */
public void setColorMapper(ColorMapper colorMapper){
  this.colorMapper=colorMapper;
}",0.9966777408637874
57694,"/** 
 * Returns the denomination for the records. For genetic data for example this would be ""Gene""
 * @param capitalized if true, the label is returned capitalized, e.g.,""Gene"", if false it would be ""gene""
 * @param plural if true, the label is returned in the plural form of theword, e.g., ""genes"" instead of the singular form, e.g., ""gene""
 * @return the denomination formatted according to the parameters passed
 */
public String getRecordDenomination(boolean capitalized,boolean plural){
  String recordDenomination;
  if (plural)   recordDenomination=recordDenominationPlural;
 else   recordDenomination=recordDenominationSingular;
  if (capitalized) {
    recordDenomination=recordDenomination.substring(0,1).toUpperCase() + recordDenomination.substring(1,recordDenomination.length());
  }
  return recordDenomination;
}","/** 
 * Returns the denomination for the records. For genetic data for example this would be ""Gene""
 * @param capitalized if true, the label is returned capitalized, e.g., ""Gene"", if false it would be ""gene""
 * @param plural if true, the label is returned in the plural form of the word, e.g., ""genes"" instead of the singular form, e.g., ""gene""
 * @return the denomination formatted according to the parameters passed
 */
public String getRecordDenomination(boolean capitalized,boolean plural){
  String recordDenomination;
  if (plural)   recordDenomination=recordDenominationPlural;
 else   recordDenomination=recordDenominationSingular;
  if (capitalized) {
    recordDenomination=recordDenomination.substring(0,1).toUpperCase() + recordDenomination.substring(1,recordDenomination.length());
  }
  return recordDenomination;
}",0.998792270531401
57695,"/** 
 * @param configuration setter, see {@link #configuration}
 */
public void setConfiguration(DataDomainConfiguration configuration){
  this.configuration=configuration;
}","/** 
 * @param configuration setter, see  {@link #configuration}
 */
public void setConfiguration(DataDomainConfiguration configuration){
  this.configuration=configuration;
}",0.997134670487106
57696,"void calculateSimilarity(){
  for (int vaIndex=group.getStartIndex(); vaIndex < group.getStartIndex() + group.getSize(); vaIndex++) {
    Integer id=va1.get(vaIndex);
    Integer origianlID=id;
    if (va1.getIdType() != va2.getIdType()) {
      IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(va1.getIdType().getIDCategory());
      id=idMappingManager.getID(va1.getIdType(),va2.getIdType(),id);
    }
    List<Group> groups2=va2.getGroupOf(id);
    if (groups2.size() > 1) {
      System.out.println(""String_Node_Str"" + groups2.size());
    }
    for (    Group group2 : groups2) {
      scores[group2.getGroupIndex()]+=1;
      if (createSimilarityVAs) {
        similarityVAs.get(group2.getGroupIndex()).append(id);
      }
    }
  }
  int sum=0;
  similarities=new float[scores.length];
  for (int count=0; count < scores.length; count++) {
    sum+=scores[count];
    similarities[count]=((float)scores[count]) / group.getSize();
  }
  if (sum != group.getSize()) {
    System.out.println(""String_Node_Str"" + sum + ""String_Node_Str""+ group.getSize());
  }
}","void calculateSimilarity(){
  for (int vaIndex=group.getStartIndex(); vaIndex < group.getStartIndex() + group.getSize(); vaIndex++) {
    Integer id=va1.get(vaIndex);
    if (va1.getIdType() != va2.getIdType()) {
      IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(va1.getIdType().getIDCategory());
      Set<Integer> ids=idMappingManager.getIDAsSet(va1.getIdType(),va2.getIdType(),id);
      id=ids.iterator().next();
      if (ids.size() > 2) {
        System.out.println(""String_Node_Str"");
      }
    }
    List<Group> groups2=va2.getGroupOf(id);
    if (groups2.size() > 1) {
      System.out.println(""String_Node_Str"" + groups2.size());
    }
    for (    Group group2 : groups2) {
      scores[group2.getGroupIndex()]+=1;
      if (createSimilarityVAs) {
        similarityVAs.get(group2.getGroupIndex()).append(id);
      }
    }
  }
  int sum=0;
  similarities=new float[scores.length];
  for (int count=0; count < scores.length; count++) {
    sum+=scores[count];
    similarities[count]=((float)scores[count]) / group.getSize();
  }
  if (sum != group.getSize()) {
    System.out.println(""String_Node_Str"" + sum + ""String_Node_Str""+ group.getSize());
  }
}",0.9284785435630688
57697,"/** 
 * Tries to find the mapping from the source IDType to the destination IDType of the specified sourceID along a path of IDTypes where mappings exist. If no such path is found, null is returned. If the path includes multimappings, a Set of values is returned. Note that there will always be chosen a path that does not include multimappings over paths that include multimappings if more than one path exists.
 * @param < K > Type of the sourceID
 * @param < V > Type of the expected result of the mapping
 * @param source IDType of the source data
 * @param destination IDType of the destination data
 * @param sourceID ID for which the mapping shall be found
 * @return If no mapping is found, null, otherwise the corresponding ID, or Set of IDs.
 */
@SuppressWarnings(""String_Node_Str"") public <K,V>V getID(IDType source,IDType destination,K sourceID){
  if (source.equals(destination))   return (V)sourceID;
  List<MappingType> path;
  try {
    path=DijkstraShortestPath.findPathBetween(mappingGraph,source,destination);
  }
 catch (  IllegalArgumentException e) {
    Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + source + ""String_Node_Str""+ destination+ ""String_Node_Str""));
    return null;
  }
  if (path == null) {
    Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + source + ""String_Node_Str""+ destination));
    return null;
  }
  Object currentID=sourceID;
  Set<Object> keys=null;
  Collection<Object> values=new ArrayList<Object>();
  for (  MappingType edge : path) {
    Map<?,?> currentMap=hashMappingType2Map.get(edge);
    if (keys != null) {
      for (      Object key : keys) {
        if (edge.isMultiMap()) {
          Set<Object> temp=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(key);
          if (temp != null)           values.addAll(temp);
        }
 else {
          Object value=currentMap.get(key);
          if (value != null)           values.add(value);
        }
      }
      if (values.isEmpty())       return null;
      keys=new HashSet<Object>();
      for (      Object value : values) {
        keys.add(value);
      }
      values.clear();
    }
 else {
      if (edge.isMultiMap()) {
        keys=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(currentID);
        if ((keys == null) || (keys.isEmpty()))         return null;
      }
 else {
        currentID=currentMap.get(currentID);
        if (currentID == null)         return null;
      }
    }
  }
  if (keys != null)   return (V)keys;
  return (V)currentID;
}","/** 
 * Tries to find the mapping from the source IDType to the destination IDType of the specified sourceID along a path of IDTypes where mappings exist. If no such path is found, null is returned. If the path includes multimappings, a Set of values is returned. Note that there will always be chosen a path that does not include multimappings over paths that include multimappings if more than one path exists.
 * @param < K > Type of the sourceID
 * @param < V > Type of the expected result of the mapping
 * @param source IDType of the source data
 * @param destination IDType of the destination data
 * @param sourceID ID for which the mapping shall be found
 * @return If no mapping is found, null, otherwise the corresponding ID, or Set of IDs.
 * @deprecated use {@link #getIDAsSet(IDType,IDType,Object)} instead
 */
@SuppressWarnings(""String_Node_Str"") @Deprecated public <K,V>V getID(IDType source,IDType destination,K sourceID){
  if (source.equals(destination))   return (V)sourceID;
  List<MappingType> path;
  try {
    path=DijkstraShortestPath.findPathBetween(mappingGraph,source,destination);
  }
 catch (  IllegalArgumentException e) {
    Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + source + ""String_Node_Str""+ destination+ ""String_Node_Str""));
    return null;
  }
  if (path == null) {
    Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + source + ""String_Node_Str""+ destination));
    return null;
  }
  Object currentID=sourceID;
  Set<Object> keys=null;
  Collection<Object> values=new ArrayList<Object>();
  for (  MappingType edge : path) {
    Map<?,?> currentMap=hashMappingType2Map.get(edge);
    if (keys != null) {
      for (      Object key : keys) {
        if (edge.isMultiMap()) {
          Set<Object> temp=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(key);
          if (temp != null)           values.addAll(temp);
        }
 else {
          Object value=currentMap.get(key);
          if (value != null)           values.add(value);
        }
      }
      if (values.isEmpty())       return null;
      keys=new HashSet<Object>();
      for (      Object value : values) {
        keys.add(value);
      }
      values.clear();
    }
 else {
      if (edge.isMultiMap()) {
        keys=(Set<Object>)((MultiHashMap<?,?>)(currentMap)).getAll(currentID);
        if ((keys == null) || (keys.isEmpty()))         return null;
      }
 else {
        currentID=currentMap.get(currentID);
        if (currentID == null)         return null;
      }
    }
  }
  if (keys != null)   return (V)keys;
  return (V)currentID;
}",0.9842626772877404
57698,"@Override protected void parseFile(BufferedReader reader) throws IOException {
  String line;
  int currentLine=0;
  progressBarFactor=100f / stopParsingAtLine;
  while ((line=reader.readLine()) != null && currentLine <= stopParsingAtLine) {
    if (currentLine >= parsingStartLine) {
      boolean maintainLoop=true;
      StringTokenizer textTokens=new StringTokenizer(line,tokenSeperator);
      try {
        while (textTokens.hasMoreTokens() && maintainLoop) {
          String token=textTokens.nextToken();
          if (mappingType.getToIDType().isInternalType()) {
            if (idSpecification != null) {
              token=convertID(token,idSpecification);
            }
            idMappingManager.getMap(mappingType).put(token,currentLine - parsingStartLine);
            break;
          }
 else {
            try {
              if (mappingType.getFromIDType().getColumnType() == EColumnType.INT) {
                if (mappingType.getToIDType().getColumnType() == EColumnType.INT) {
                  idMappingManager.getMap(mappingType).put(Integer.valueOf(token),Integer.valueOf(textTokens.nextToken()));
                }
 else                 if (mappingType.getToIDType().getColumnType() == EColumnType.STRING) {
                  idMappingManager.getMap(mappingType).put(Integer.valueOf(token),textTokens.nextToken());
                }
 else                 throw new IllegalStateException(""String_Node_Str"");
              }
 else               if (mappingType.getFromIDType().getColumnType() == EColumnType.STRING) {
                if (mappingType.getToIDType().getColumnType() == EColumnType.INT) {
                  idMappingManager.getMap(mappingType).put(token,Integer.valueOf(textTokens.nextToken()));
                }
 else                 if (mappingType.getToIDType().getColumnType() == EColumnType.STRING) {
                  idMappingManager.getMap(mappingType).put(token,textTokens.nextToken());
                }
 else                 throw new IllegalStateException(""String_Node_Str"");
              }
 else               throw new IllegalStateException(""String_Node_Str"");
            }
 catch (            NumberFormatException nfe) {
              Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + mappingType,nfe));
            }
          }
          break;
        }
      }
 catch (      NoSuchElementException nsee) {
        maintainLoop=false;
        stopParsingAtLine=-1;
      }
    }
    currentLine++;
    if (currentLine % 1000 == 0) {
      swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * currentLine));
    }
  }
}","@Override protected void parseFile(BufferedReader reader) throws IOException {
  String line;
  int currentLine=0;
  progressBarFactor=100f / stopParsingAtLine;
  while ((line=reader.readLine()) != null && currentLine <= stopParsingAtLine) {
    if (currentLine >= parsingStartLine) {
      boolean maintainLoop=true;
      StringTokenizer textTokens=new StringTokenizer(line,tokenSeperator);
      try {
        while (textTokens.hasMoreTokens() && maintainLoop) {
          String token=textTokens.nextToken();
          if (idSpecification != null) {
            token=convertID(token,idSpecification);
          }
          if (mappingType.getToIDType().isInternalType()) {
            idMappingManager.getMap(mappingType).put(token,currentLine - parsingStartLine);
            break;
          }
 else {
            try {
              if (mappingType.getFromIDType().getColumnType() == EColumnType.INT) {
                if (mappingType.getToIDType().getColumnType() == EColumnType.INT) {
                  idMappingManager.getMap(mappingType).put(Integer.valueOf(token),Integer.valueOf(textTokens.nextToken()));
                }
 else                 if (mappingType.getToIDType().getColumnType() == EColumnType.STRING) {
                  idMappingManager.getMap(mappingType).put(Integer.valueOf(token),textTokens.nextToken());
                }
 else                 throw new IllegalStateException(""String_Node_Str"");
              }
 else               if (mappingType.getFromIDType().getColumnType() == EColumnType.STRING) {
                if (mappingType.getToIDType().getColumnType() == EColumnType.INT) {
                  idMappingManager.getMap(mappingType).put(token,Integer.valueOf(textTokens.nextToken()));
                }
 else                 if (mappingType.getToIDType().getColumnType() == EColumnType.STRING) {
                  idMappingManager.getMap(mappingType).put(token,textTokens.nextToken());
                }
 else                 throw new IllegalStateException(""String_Node_Str"");
              }
 else               throw new IllegalStateException(""String_Node_Str"");
            }
 catch (            NumberFormatException nfe) {
              Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"" + mappingType,nfe));
            }
          }
          break;
        }
      }
 catch (      NoSuchElementException nsee) {
        maintainLoop=false;
        stopParsingAtLine=-1;
      }
    }
    currentLine++;
    if (currentLine % 1000 == 0) {
      swtGuiManager.setProgressBarPercentage((int)(progressBarFactor * currentLine));
    }
  }
}",0.9486393254120352
57699,"void calculateSimilarity(){
  for (int vaIndex=group.getStartIndex(); vaIndex < group.getStartIndex() + group.getSize(); vaIndex++) {
    Integer id=va1.get(vaIndex);
    if (va1.getIdType() != va2.getIdType()) {
      IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(va1.getIdType().getIDCategory());
      Set<Integer> ids=idMappingManager.getIDAsSet(va1.getIdType(),va2.getIdType(),id);
      id=ids.iterator().next();
      if (ids.size() > 2) {
        System.out.println(""String_Node_Str"");
      }
    }
    List<Group> groups2=va2.getGroupOf(id);
    if (groups2.size() > 1) {
      System.out.println(""String_Node_Str"" + groups2.size());
    }
    for (    Group group2 : groups2) {
      scores[group2.getGroupIndex()]+=1;
      if (createSimilarityVAs) {
        similarityVAs.get(group2.getGroupIndex()).append(id);
      }
    }
  }
  int sum=0;
  similarities=new float[scores.length];
  for (int count=0; count < scores.length; count++) {
    sum+=scores[count];
    similarities[count]=((float)scores[count]) / group.getSize();
  }
  if (sum != group.getSize()) {
    System.out.println(""String_Node_Str"" + sum + ""String_Node_Str""+ group.getSize());
  }
}","void calculateSimilarity(){
  for (int vaIndex=group.getStartIndex(); vaIndex < group.getStartIndex() + group.getSize(); vaIndex++) {
    Integer id=va1.get(vaIndex);
    if (va1.getIdType() != va2.getIdType()) {
      IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(va1.getIdType().getIDCategory());
      Set<Integer> ids=idMappingManager.getIDAsSet(va1.getIdType(),va2.getIdType(),id);
      if (ids != null) {
        id=ids.iterator().next();
        if (ids.size() > 2) {
          System.out.println(""String_Node_Str"");
        }
      }
    }
    List<Group> groups2=va2.getGroupOf(id);
    if (groups2.size() > 1) {
      System.out.println(""String_Node_Str"" + groups2.size());
    }
    for (    Group group2 : groups2) {
      scores[group2.getGroupIndex()]+=1;
      if (createSimilarityVAs) {
        similarityVAs.get(group2.getGroupIndex()).append(id);
      }
    }
  }
  int sum=0;
  similarities=new float[scores.length];
  for (int count=0; count < scores.length; count++) {
    sum+=scores[count];
    similarities[count]=((float)scores[count]) / group.getSize();
  }
  if (sum != group.getSize()) {
    System.out.println(""String_Node_Str"" + sum + ""String_Node_Str""+ group.getSize());
  }
}",0.9832993890020366
57700,"protected void renderLabel(GL2 gl,Vec3f centerPoint){
  PixelGLConverter pixelGLConverter=view.getPixelGLConverter();
  CaleydoTextRenderer textRenderer=view.getTextRenderer();
  float height=pixelGLConverter.getGLHeightForPixelHeight(14);
  float requiredWidth=textRenderer.getRequiredTextWidth(label,height);
  textRenderer.renderTextInBounds(gl,label,centerPoint.x() - (requiredWidth / 2.0f),centerPoint.y() - (height / 2.0f),centerPoint.z() + 0.1f,requiredWidth,height);
}","protected void renderLabel(GL2 gl,Vec3f centerPoint){
  PixelGLConverter pixelGLConverter=view.getPixelGLConverter();
  CaleydoTextRenderer textRenderer=view.getTextRenderer();
  float height=pixelGLConverter.getGLHeightForPixelHeight(14);
  float requiredWidth=textRenderer.getRequiredTextWidth(label,height);
  textRenderer.renderTextInBounds(gl,label,centerPoint.x() - (requiredWidth / 2.0f),centerPoint.y() - (height / 2.0f),centerPoint.z() + 0.1f,requiredWidth + pixelGLConverter.getGLWidthForPixelWidth(1),height);
}",0.9539078156312624
57701,"public ArrayList<PerspectiveInitializationData> parseGrouping(IDType targetIDType){
  IDSpecification idSpecification=groupingSpecifications.getRowIDSpecification();
  IDType sourceIDType=IDType.getIDType(idSpecification.getIdType());
  if (!sourceIDType.getIDCategory().equals(targetIDType.getIDCategory()))   throw new IllegalArgumentException(""String_Node_Str"" + sourceIDType + ""String_Node_Str""+ targetIDType);
  IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(sourceIDType.getIDCategory());
  if (groupingSpecifications.getDataSourcePath() == null) {
    Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str""));
    return null;
  }
  BufferedReader reader;
  try {
    String[] headerCells=null;
    if (groupingSpecifications.isContainsColumnIDs()) {
      reader=GeneralManager.get().getResourceLoader().getResource(groupingSpecifications.getDataSourcePath());
      String headerLine=""String_Node_Str"";
      int rowOfColumnIDs=(groupingSpecifications.getRowOfColumnIDs() != null) ? groupingSpecifications.getRowOfColumnIDs() : groupingSpecifications.getNumberOfHeaderLines() - 1;
      for (int countToHeader=0; countToHeader <= rowOfColumnIDs; countToHeader++) {
        headerLine=reader.readLine();
      }
      headerCells=headerLine.split(groupingSpecifications.getDelimiter(),-1);
      reader.close();
    }
    reader=GeneralManager.get().getResourceLoader().getResource(groupingSpecifications.getDataSourcePath());
    for (int headerLineCounter=0; headerLineCounter < groupingSpecifications.getNumberOfHeaderLines(); headerLineCounter++) {
      reader.readLine();
    }
    ArrayList<Integer> columnsToRead=groupingSpecifications.getColumns();
    String firstDataLine=null;
    if (columnsToRead == null) {
      firstDataLine=reader.readLine();
      String[] data=firstDataLine.split(groupingSpecifications.getDelimiter());
      columnsToRead=new ArrayList<Integer>(data.length);
      if (headerCells == null) {
        headerCells=new String[data.length];
      }
      for (int columnCount=1; columnCount < data.length; columnCount++) {
        columnsToRead.add(columnCount);
        headerCells[columnCount]=""String_Node_Str"" + columnCount;
      }
    }
    ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>> listOfGroupLists=new ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>>(columnsToRead.size());
    ArrayList<String> listOfGroupNames=new ArrayList<String>(columnsToRead.size());
    ArrayList<Pair<String,ArrayList<Integer>>> currentGroupList;
    for (    Integer columnCount : columnsToRead) {
      currentGroupList=new ArrayList<Pair<String,ArrayList<Integer>>>();
      listOfGroupLists.add(currentGroupList);
      listOfGroupNames.add(headerCells[columnCount]);
    }
    while (true) {
      String line=null;
      if (firstDataLine == null) {
        line=reader.readLine();
      }
 else {
        line=firstDataLine;
        firstDataLine=null;
      }
      if (line == null)       break;
      String[] columns=line.split(groupingSpecifications.getDelimiter());
      String originalID=columns[groupingSpecifications.getColumnOfRowIds()];
      originalID=convertID(originalID,idSpecification);
      Integer mappedID=idMappingManager.getID(sourceIDType,targetIDType,originalID);
      if (mappedID == null) {
        Logger.log(new Status(Status.WARNING,this.toString(),""String_Node_Str"" + originalID));
        continue;
      }
      int groupListCounter=0;
      for (      Integer columnID : columnsToRead) {
        currentGroupList=listOfGroupLists.get(groupListCounter);
        ArrayList<Integer> group=null;
        for (        Pair<String,ArrayList<Integer>> groupPair : currentGroupList) {
          if (groupPair.getFirst().equals(columns[columnID]))           group=groupPair.getSecond();
        }
        if (group == null) {
          group=new ArrayList<Integer>();
          currentGroupList.add(new Pair<String,ArrayList<Integer>>(columns[columnID],group));
        }
        group.add(mappedID);
        groupListCounter++;
      }
    }
    reader.close();
    ArrayList<PerspectiveInitializationData> perspectiveInitializationDatas=new ArrayList<PerspectiveInitializationData>();
    for (int groupListCount=0; groupListCount < listOfGroupLists.size(); groupListCount++) {
      ArrayList<Pair<String,ArrayList<Integer>>> groupList=listOfGroupLists.get(groupListCount);
      ArrayList<Integer> sortedIDs=new ArrayList<Integer>();
      ArrayList<Integer> clusterSizes=new ArrayList<Integer>(groupList.size());
      ArrayList<Integer> sampleElements=new ArrayList<Integer>(groupList.size());
      ArrayList<String> clusterNames=new ArrayList<String>(groupList.size());
      int sampleIndex=0;
      for (      Pair<String,ArrayList<Integer>> groupPair : groupList) {
        ArrayList<Integer> group=groupPair.getSecond();
        sortedIDs.addAll(group);
        clusterSizes.add(group.size());
        clusterNames.add(groupPair.getFirst());
        sampleElements.add(sampleIndex);
        sampleIndex+=group.size();
      }
      PerspectiveInitializationData data=new PerspectiveInitializationData();
      data.setData(sortedIDs,clusterSizes,sampleElements,clusterNames);
      data.setLabel(listOfGroupNames.get(groupListCount));
      perspectiveInitializationDatas.add(data);
    }
    return perspectiveInitializationDatas;
  }
 catch (  IOException ioException) {
    throw new IllegalStateException(""String_Node_Str"" + groupingSpecifications.getDataSourcePath());
  }
}","public ArrayList<PerspectiveInitializationData> parseGrouping(IDType targetIDType){
  IDSpecification idSpecification=groupingSpecifications.getRowIDSpecification();
  IDType sourceIDType=IDType.getIDType(idSpecification.getIdType());
  if (!sourceIDType.getIDCategory().equals(targetIDType.getIDCategory()))   throw new IllegalArgumentException(""String_Node_Str"" + sourceIDType + ""String_Node_Str""+ targetIDType);
  IDMappingManager idMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(sourceIDType.getIDCategory());
  if (groupingSpecifications.getDataSourcePath() == null) {
    Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str""));
    return null;
  }
  BufferedReader reader;
  try {
    String[] headerCells=null;
    if (groupingSpecifications.isContainsColumnIDs()) {
      reader=GeneralManager.get().getResourceLoader().getResource(groupingSpecifications.getDataSourcePath());
      String headerLine=""String_Node_Str"";
      int rowOfColumnIDs=(groupingSpecifications.getRowOfColumnIDs() != null) ? groupingSpecifications.getRowOfColumnIDs() : groupingSpecifications.getNumberOfHeaderLines() - 1;
      for (int countToHeader=0; countToHeader <= rowOfColumnIDs; countToHeader++) {
        headerLine=reader.readLine();
      }
      headerCells=headerLine.split(groupingSpecifications.getDelimiter(),-1);
      reader.close();
    }
    reader=GeneralManager.get().getResourceLoader().getResource(groupingSpecifications.getDataSourcePath());
    for (int headerLineCounter=0; headerLineCounter < groupingSpecifications.getNumberOfHeaderLines(); headerLineCounter++) {
      reader.readLine();
    }
    ArrayList<Integer> columnsToRead=groupingSpecifications.getColumns();
    String firstDataLine=null;
    if (columnsToRead == null) {
      firstDataLine=reader.readLine();
      String[] data=firstDataLine.split(groupingSpecifications.getDelimiter());
      columnsToRead=new ArrayList<Integer>(data.length);
      if (headerCells == null) {
        headerCells=new String[data.length];
        for (int columnCount=1; columnCount < data.length; columnCount++) {
          headerCells[columnCount]=""String_Node_Str"" + columnCount;
        }
      }
      for (int columnCount=1; columnCount < data.length; columnCount++) {
        columnsToRead.add(columnCount);
      }
    }
    ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>> listOfGroupLists=new ArrayList<ArrayList<Pair<String,ArrayList<Integer>>>>(columnsToRead.size());
    ArrayList<String> listOfGroupNames=new ArrayList<String>(columnsToRead.size());
    ArrayList<Pair<String,ArrayList<Integer>>> currentGroupList;
    for (    Integer columnCount : columnsToRead) {
      currentGroupList=new ArrayList<Pair<String,ArrayList<Integer>>>();
      listOfGroupLists.add(currentGroupList);
      listOfGroupNames.add(headerCells[columnCount]);
    }
    while (true) {
      String line=null;
      if (firstDataLine == null) {
        line=reader.readLine();
      }
 else {
        line=firstDataLine;
        firstDataLine=null;
      }
      if (line == null)       break;
      String[] columns=line.split(groupingSpecifications.getDelimiter());
      String originalID=columns[groupingSpecifications.getColumnOfRowIds()];
      originalID=convertID(originalID,idSpecification);
      Integer mappedID=idMappingManager.getID(sourceIDType,targetIDType,originalID);
      if (mappedID == null) {
        Logger.log(new Status(Status.WARNING,this.toString(),""String_Node_Str"" + originalID));
        continue;
      }
      int groupListCounter=0;
      for (      Integer columnID : columnsToRead) {
        currentGroupList=listOfGroupLists.get(groupListCounter);
        ArrayList<Integer> group=null;
        for (        Pair<String,ArrayList<Integer>> groupPair : currentGroupList) {
          if (groupPair.getFirst().equals(columns[columnID]))           group=groupPair.getSecond();
        }
        if (group == null) {
          group=new ArrayList<Integer>();
          currentGroupList.add(new Pair<String,ArrayList<Integer>>(columns[columnID],group));
        }
        group.add(mappedID);
        groupListCounter++;
      }
    }
    reader.close();
    ArrayList<PerspectiveInitializationData> perspectiveInitializationDatas=new ArrayList<PerspectiveInitializationData>();
    for (int groupListCount=0; groupListCount < listOfGroupLists.size(); groupListCount++) {
      ArrayList<Pair<String,ArrayList<Integer>>> groupList=listOfGroupLists.get(groupListCount);
      ArrayList<Integer> sortedIDs=new ArrayList<Integer>();
      ArrayList<Integer> clusterSizes=new ArrayList<Integer>(groupList.size());
      ArrayList<Integer> sampleElements=new ArrayList<Integer>(groupList.size());
      ArrayList<String> clusterNames=new ArrayList<String>(groupList.size());
      int sampleIndex=0;
      for (      Pair<String,ArrayList<Integer>> groupPair : groupList) {
        ArrayList<Integer> group=groupPair.getSecond();
        sortedIDs.addAll(group);
        clusterSizes.add(group.size());
        clusterNames.add(groupPair.getFirst());
        sampleElements.add(sampleIndex);
        sampleIndex+=group.size();
      }
      PerspectiveInitializationData data=new PerspectiveInitializationData();
      data.setData(sortedIDs,clusterSizes,sampleElements,clusterNames);
      data.setLabel(listOfGroupNames.get(groupListCount));
      perspectiveInitializationDatas.add(data);
    }
    return perspectiveInitializationDatas;
  }
 catch (  IOException ioException) {
    throw new IllegalStateException(""String_Node_Str"" + groupingSpecifications.getDataSourcePath());
  }
}",0.9841840402588066
57702,"private void buildDisplayList(final GL2 gl,int iGLDisplayListIndex){
  dataRowHeight=pixelGLConverter.getGLHeightForPixelHeight(DEFAULT_DATA_ROW_HEIGHT_PIXELS);
  gl.glNewList(iGLDisplayListIndex,GL2.GL_COMPILE);
  float branchColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(BRANCH_COLUMN_WIDTH_PIXELS);
  float pathwayColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS);
  GLU glu=new GLU();
  List<AnchorNodeSpacing> anchorNodeSpacings=calcAnchorNodeSpacings();
  Vec3f currentPosition=new Vec3f(branchColumnWidth + pathwayColumnWidth / 2.0f,viewFrustum.getHeight(),0.2f);
  float pathwayHeight=0;
  float minNodeSpacing=pixelGLConverter.getGLHeightForPixelHeight(MIN_NODE_SPACING_PIXELS);
  for (  AnchorNodeSpacing spacing : anchorNodeSpacings) {
    float currentAnchorNodeSpacing=spacing.getCurrentAnchorNodeSpacing();
    float nodeSpacing=(Float.isNaN(currentAnchorNodeSpacing) ? minNodeSpacing : (spacing.getCurrentAnchorNodeSpacing() - spacing.getTotalNodeHeight()) / ((float)spacing.getNodesInbetween().size() + 1));
    ANode startAnchorNode=spacing.getStartNode();
    float currentInbetweenNodePositionY=currentPosition.y() - ((startAnchorNode != null) ? startAnchorNode.getHeight() / 2.0f : 0);
    for (int i=0; i < spacing.getNodesInbetween().size(); i++) {
      ANode node=spacing.getNodesInbetween().get(i);
      node.setPosition(new Vec3f(currentPosition.x(),currentInbetweenNodePositionY - nodeSpacing - node.getHeight() / 2.0f,currentPosition.z()));
      node.render(gl,glu);
      currentInbetweenNodePositionY-=(nodeSpacing + node.getHeight());
      renderBranchNodes(gl,glu,node);
    }
    currentPosition.setY(currentPosition.y() - spacing.getCurrentAnchorNodeSpacing());
    ANode endAnchorNode=spacing.getEndNode();
    if (endAnchorNode != null) {
      endAnchorNode.setPosition(new Vec3f(currentPosition));
      endAnchorNode.render(gl,glu);
      renderBranchNodes(gl,glu,endAnchorNode);
    }
    pathwayHeight+=spacing.getCurrentAnchorNodeSpacing();
  }
  if (expandedBranchSummaryNode != null) {
    renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
    float coverWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS + BRANCH_COLUMN_WIDTH_PIXELS);
    gl.glColor4f(1,1,1,0.9f);
    gl.glBegin(GL2.GL_QUADS);
    gl.glVertex3f(0,0,0.1f);
    gl.glVertex3f(coverWidth,0,0.1f);
    gl.glVertex3f(coverWidth,viewFrustum.getHeight(),0.1f);
    gl.glVertex3f(0,viewFrustum.getHeight(),0.1f);
    gl.glEnd();
  }
  int minViewHeightPixels=pixelGLConverter.getPixelHeightForGLHeight(pathwayHeight);
  if (minViewHeightPixels > parentGLCanvas.getHeight()) {
    setMinSize(minViewHeightPixels);
  }
  float dataRowPositionX=branchColumnWidth + pathwayColumnWidth;
  float topSpacing=pixelGLConverter.getGLWidthForPixelWidth(TOP_SPACING_MAPPED_DATA);
  gl.glPushMatrix();
  mappedDataRenderer.setLinearizedNodes(linearizedNodes);
  gl.glTranslatef(dataRowPositionX,topSpacing,0);
  mappedDataRenderer.render(gl);
  gl.glPopMatrix();
  renderEdgesOfLinearizedNodes(gl);
  gl.glEndList();
}","private void buildDisplayList(final GL2 gl,int iGLDisplayListIndex){
  dataRowHeight=pixelGLConverter.getGLHeightForPixelHeight(DEFAULT_DATA_ROW_HEIGHT_PIXELS);
  setMappedDataRendererGeometry();
  gl.glNewList(iGLDisplayListIndex,GL2.GL_COMPILE);
  float branchColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(BRANCH_COLUMN_WIDTH_PIXELS);
  float pathwayColumnWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS);
  GLU glu=new GLU();
  List<AnchorNodeSpacing> anchorNodeSpacings=calcAnchorNodeSpacings();
  Vec3f currentPosition=new Vec3f(branchColumnWidth + pathwayColumnWidth / 2.0f,viewFrustum.getHeight(),0.2f);
  float pathwayHeight=0;
  float minNodeSpacing=pixelGLConverter.getGLHeightForPixelHeight(MIN_NODE_SPACING_PIXELS);
  for (  AnchorNodeSpacing spacing : anchorNodeSpacings) {
    float currentAnchorNodeSpacing=spacing.getCurrentAnchorNodeSpacing();
    float nodeSpacing=(Float.isNaN(currentAnchorNodeSpacing) ? minNodeSpacing : (spacing.getCurrentAnchorNodeSpacing() - spacing.getTotalNodeHeight()) / ((float)spacing.getNodesInbetween().size() + 1));
    ANode startAnchorNode=spacing.getStartNode();
    float currentInbetweenNodePositionY=currentPosition.y() - ((startAnchorNode != null) ? startAnchorNode.getHeight() / 2.0f : 0);
    for (int i=0; i < spacing.getNodesInbetween().size(); i++) {
      ANode node=spacing.getNodesInbetween().get(i);
      node.setPosition(new Vec3f(currentPosition.x(),currentInbetweenNodePositionY - nodeSpacing - node.getHeight() / 2.0f,currentPosition.z()));
      node.render(gl,glu);
      currentInbetweenNodePositionY-=(nodeSpacing + node.getHeight());
      renderBranchNodes(gl,glu,node);
    }
    currentPosition.setY(currentPosition.y() - spacing.getCurrentAnchorNodeSpacing());
    ANode endAnchorNode=spacing.getEndNode();
    if (endAnchorNode != null) {
      endAnchorNode.setPosition(new Vec3f(currentPosition));
      endAnchorNode.render(gl,glu);
      renderBranchNodes(gl,glu,endAnchorNode);
    }
    pathwayHeight+=spacing.getCurrentAnchorNodeSpacing();
  }
  if (expandedBranchSummaryNode != null) {
    renderBranchSummaryNode(gl,glu,expandedBranchSummaryNode);
    float coverWidth=pixelGLConverter.getGLWidthForPixelWidth(PATHWAY_COLUMN_WIDTH_PIXELS + BRANCH_COLUMN_WIDTH_PIXELS);
    gl.glColor4f(1,1,1,0.9f);
    gl.glBegin(GL2.GL_QUADS);
    gl.glVertex3f(0,0,0.1f);
    gl.glVertex3f(coverWidth,0,0.1f);
    gl.glVertex3f(coverWidth,viewFrustum.getHeight(),0.1f);
    gl.glVertex3f(0,viewFrustum.getHeight(),0.1f);
    gl.glEnd();
  }
  int minViewHeightPixels=pixelGLConverter.getPixelHeightForGLHeight(pathwayHeight);
  if (minViewHeightPixels > parentGLCanvas.getHeight()) {
    setMinSize(minViewHeightPixels);
  }
  float dataRowPositionX=branchColumnWidth + pathwayColumnWidth;
  float topSpacing=pixelGLConverter.getGLWidthForPixelWidth(TOP_SPACING_MAPPED_DATA);
  gl.glPushMatrix();
  mappedDataRenderer.setLinearizedNodes(linearizedNodes);
  gl.glTranslatef(dataRowPositionX,topSpacing,0);
  mappedDataRenderer.render(gl);
  gl.glPopMatrix();
  renderEdgesOfLinearizedNodes(gl);
  gl.glEndList();
}",0.9943612050910262
57703,"/** 
 * Sets the list of nodes that are used as the basis for rendering the mapped data. Triggers a complete re-build of the layout. Creates the layout used for the rendering.
 * @param linearizedNodes setter, see  {@link #linearizedNodes}
 */
public void setLinearizedNodes(List<ALinearizableNode> linearizedNodes){
  float[] color;
  relationShipRenderers=new ArrayList<RelationshipRenderer>(linearizedNodes.size());
  Row baseRow=new Row(""String_Node_Str"");
  layoutManger.setBaseElementLayout(baseRow);
  Column dataSetColumn=new Column(""String_Node_Str"");
  dataSetColumn.setBottomUp(false);
  baseRow.append(dataSetColumn);
  Column captionColumn=new Column(""String_Node_Str"");
  captionColumn.setBottomUp(false);
  captionColumn.setPixelSizeX(100);
  ElementLayout columnCaptionSpacing=new ElementLayout();
  columnCaptionSpacing.setPixelSizeY(50);
  captionColumn.append(columnCaptionSpacing);
  baseRow.append(captionColumn);
  this.linearizedNodes=linearizedNodes;
  int nodeCount=0;
  float previousNodePosition=viewFrustum.getHeight() + yOffset - parentView.getPixelGLConverter().getGLHeightForPixelHeight(50);
  int previousNrDavids=0;
  ArrayList<ArrayList<ElementLayout>> rowListForDataContainers=new ArrayList<ArrayList<ElementLayout>>((int)(usedDataContainers.size() * 1.6));
  for (  DataContainer dataContainer : usedDataContainers) {
    rowListForDataContainers.add(new ArrayList<ElementLayout>(linearizedNodes.size() * 2));
  }
  ArrayList<Integer> davidIDs=new ArrayList<Integer>(linearizedNodes.size() * 2);
  ElementLayout xSpacing=new ElementLayout();
  xSpacing.setPixelSizeX(1);
  ArrayList<ALinearizableNode> resolvedNodes=new ArrayList<ALinearizableNode>();
  for (  ALinearizableNode node : linearizedNodes) {
    if (node instanceof ComplexNode) {
      List<ALinearizableNode> embeddedNodes=((ComplexNode)node).getNodes();
      resolvedNodes.addAll(embeddedNodes);
    }
 else     resolvedNodes.add(node);
  }
  for (  ALinearizableNode node : resolvedNodes) {
    if (node.getNumAssociatedRows() == 0)     continue;
    List<Integer> subDavidIDs=node.getMappedDavidIDs();
    int currentNrDavids=subDavidIDs.size();
    davidIDs.addAll(subDavidIDs);
    float currentNodePositionY=node.getPosition().y();
    float deviation;
    if (node.getParentNode() != null) {
      currentNodePositionY=node.getParentNode().getPosition().y();
      currentNrDavids=node.getParentNode().getNumAssociatedRows();
    }
    float previousLowerHeight=previousNodePosition - rowHeight * ((float)previousNrDavids) / 2;
    float currentUpperHeight=(currentNodePositionY + rowHeight * ((float)currentNrDavids) / 2);
    deviation=previousLowerHeight - currentUpperHeight;
    if (previousNodePosition > 0 && deviation > 0) {
      ElementLayout spacing=new ElementLayout();
      spacing.setAbsoluteSizeY(deviation);
      dataSetColumn.append(spacing);
      captionColumn.append(spacing);
    }
    previousNodePosition=currentNodePositionY;
    previousNrDavids=currentNrDavids;
    if (nodeCount % 2 == 0)     color=EVEN_BACKGROUND_COLOR;
 else     color=ODD_BACKGROUND_COLOR;
    RelationshipRenderer relationShipRenderer=new RelationshipRenderer(color);
    relationShipRenderers.add(relationShipRenderer);
    float x=node.getPosition().x() + parentView.getPixelGLConverter().getGLWidthForPixelWidth(node.getWidthPixels()) / 2;
    float height=parentView.getPixelGLConverter().getGLHeightForPixelHeight(node.getHeightPixels());
    relationShipRenderer.topLeft[0]=x - xOffset;
    relationShipRenderer.topLeft[1]=node.getPosition().y() + height / 2 - yOffset;
    relationShipRenderer.bottomLeft[0]=x - xOffset;
    relationShipRenderer.bottomLeft[1]=node.getPosition().y() - height / 2 - yOffset;
    nodeCount++;
    int idCount=0;
    for (    Integer davidID : subDavidIDs) {
      Row row=new Row(""String_Node_Str"" + davidID);
      row.setAbsoluteSizeY(rowHeight);
      dataSetColumn.append(row);
      for (int dataContainerCount=0; dataContainerCount < usedDataContainers.size(); dataContainerCount++) {
        ElementLayout dataContainerLayout=new ElementLayout(""String_Node_Str"" + dataContainerCount + ""String_Node_Str""+ idCount);
        dataContainerLayout.addBackgroundRenderer(new RowBackgroundRenderer(color));
        row.append(dataContainerLayout);
        rowListForDataContainers.get(dataContainerCount).add(dataContainerLayout);
        if (dataContainerCount != usedDataContainers.size() - 1) {
          row.append(xSpacing);
        }
      }
      ElementLayout rowCaption=new ElementLayout();
      rowCaption.setAbsoluteSizeY(rowHeight);
      RowCaptionRenderer captionRenderer=new RowCaptionRenderer(davidID,parentView,this,color);
      rowCaption.setRenderer(captionRenderer);
      captionColumn.append(rowCaption);
      if (idCount == 0)       relationShipRenderer.topRightLayout=row;
      if (idCount == subDavidIDs.size() - 1)       relationShipRenderer.bottomRightLayout=row;
      idCount++;
    }
  }
  ElementLayout ySpacing=new ElementLayout();
  ySpacing.setPixelSizeY(5);
  dataSetColumn.append(ySpacing);
  Row topCaptionRow=new Row(""String_Node_Str"");
  topCaptionRow.setPixelSizeY(50);
  dataSetColumn.add(0,topCaptionRow);
  Row bottomCaptionRow=new Row(""String_Node_Str"");
  bottomCaptionRow.setPixelSizeY(50);
  dataSetColumn.append(bottomCaptionRow);
  for (int dataContainerCount=0; dataContainerCount < usedDataContainers.size(); dataContainerCount++) {
    ColumnCaptionLayout topCaptionLayout=new ColumnCaptionLayout(parentView,this);
    topCaptionRow.append(topCaptionLayout);
    ColumnCaptionLayout bottomCaptionLayout=new ColumnCaptionLayout(parentView,this);
    bottomCaptionRow.append(bottomCaptionLayout);
    if (dataContainerCount != usedDataContainers.size() - 1) {
      bottomCaptionRow.append(xSpacing);
      topCaptionRow.append(xSpacing);
    }
    prepareData(usedDataContainers.get(dataContainerCount),rowListForDataContainers.get(dataContainerCount),topCaptionLayout,bottomCaptionLayout,davidIDs);
  }
}","/** 
 * Sets the list of nodes that are used as the basis for rendering the mapped data. Triggers a complete re-build of the layout. Creates the layout used for the rendering.
 * @param linearizedNodes setter, see  {@link #linearizedNodes}
 */
public void setLinearizedNodes(List<ALinearizableNode> linearizedNodes){
  float[] color;
  relationShipRenderers=new ArrayList<RelationshipRenderer>(linearizedNodes.size());
  Row baseRow=new Row(""String_Node_Str"");
  layoutManger.setBaseElementLayout(baseRow);
  Column dataSetColumn=new Column(""String_Node_Str"");
  dataSetColumn.setBottomUp(false);
  baseRow.append(dataSetColumn);
  Column captionColumn=new Column(""String_Node_Str"");
  captionColumn.setBottomUp(false);
  captionColumn.setPixelSizeX(100);
  ElementLayout columnCaptionSpacing=new ElementLayout();
  columnCaptionSpacing.setPixelSizeY(50);
  captionColumn.append(columnCaptionSpacing);
  baseRow.append(captionColumn);
  this.linearizedNodes=linearizedNodes;
  int nodeCount=0;
  float previousNodePosition=viewFrustum.getHeight() + yOffset - parentView.getPixelGLConverter().getGLHeightForPixelHeight(50);
  int previousNrDavids=0;
  ArrayList<ArrayList<ElementLayout>> rowListForDataContainers=new ArrayList<ArrayList<ElementLayout>>((int)(usedDataContainers.size() * 1.6));
  for (  DataContainer dataContainer : usedDataContainers) {
    rowListForDataContainers.add(new ArrayList<ElementLayout>(linearizedNodes.size() * 2));
  }
  ArrayList<Integer> davidIDs=new ArrayList<Integer>(linearizedNodes.size() * 2);
  ElementLayout xSpacing=new ElementLayout();
  xSpacing.setPixelSizeX(1);
  ArrayList<ALinearizableNode> resolvedNodes=new ArrayList<ALinearizableNode>();
  for (  ALinearizableNode node : linearizedNodes) {
    if (node instanceof ComplexNode) {
      List<ALinearizableNode> embeddedNodes=((ComplexNode)node).getNodes();
      resolvedNodes.addAll(embeddedNodes);
    }
 else     resolvedNodes.add(node);
  }
  for (  ALinearizableNode node : resolvedNodes) {
    if (node.getNumAssociatedRows() == 0)     continue;
    List<Integer> subDavidIDs=node.getMappedDavidIDs();
    int currentNrDavids=subDavidIDs.size();
    davidIDs.addAll(subDavidIDs);
    float currentNodePositionY=node.getPosition().y();
    float deviation;
    if (node.getParentNode() != null) {
      currentNodePositionY=node.getParentNode().getPosition().y();
      currentNrDavids=node.getParentNode().getNumAssociatedRows();
    }
    float previousLowerHeight=previousNodePosition - rowHeight * ((float)previousNrDavids) / 2;
    float currentUpperHeight=(currentNodePositionY + rowHeight * ((float)currentNrDavids) / 2);
    deviation=previousLowerHeight - currentUpperHeight;
    if (previousNodePosition > 0 && deviation > 0) {
      ElementLayout spacing=new ElementLayout();
      spacing.setAbsoluteSizeY(deviation);
      dataSetColumn.append(spacing);
      captionColumn.append(spacing);
    }
    previousNodePosition=currentNodePositionY;
    previousNrDavids=currentNrDavids;
    if (nodeCount % 2 == 0)     color=EVEN_BACKGROUND_COLOR;
 else     color=ODD_BACKGROUND_COLOR;
    RelationshipRenderer relationShipRenderer=new RelationshipRenderer(color,parentView);
    relationShipRenderers.add(relationShipRenderer);
    float x=node.getPosition().x() + parentView.getPixelGLConverter().getGLWidthForPixelWidth(node.getWidthPixels()) / 2;
    float height=parentView.getPixelGLConverter().getGLHeightForPixelHeight(node.getHeightPixels());
    relationShipRenderer.topLeft[0]=x - xOffset;
    relationShipRenderer.topLeft[1]=node.getPosition().y() + height / 2 - yOffset;
    relationShipRenderer.bottomLeft[0]=x - xOffset;
    relationShipRenderer.bottomLeft[1]=node.getPosition().y() - height / 2 - yOffset;
    nodeCount++;
    int idCount=0;
    for (    Integer davidID : subDavidIDs) {
      Row row=new Row(""String_Node_Str"" + davidID);
      row.setAbsoluteSizeY(rowHeight);
      dataSetColumn.append(row);
      for (int dataContainerCount=0; dataContainerCount < usedDataContainers.size(); dataContainerCount++) {
        ElementLayout dataContainerLayout=new ElementLayout(""String_Node_Str"" + dataContainerCount + ""String_Node_Str""+ idCount);
        dataContainerLayout.addBackgroundRenderer(new RowBackgroundRenderer(color));
        row.append(dataContainerLayout);
        rowListForDataContainers.get(dataContainerCount).add(dataContainerLayout);
        if (dataContainerCount != usedDataContainers.size() - 1) {
          row.append(xSpacing);
        }
      }
      ElementLayout rowCaption=new ElementLayout();
      rowCaption.setAbsoluteSizeY(rowHeight);
      RowCaptionRenderer captionRenderer=new RowCaptionRenderer(davidID,parentView,this,color);
      rowCaption.setRenderer(captionRenderer);
      captionColumn.append(rowCaption);
      if (idCount == 0)       relationShipRenderer.topRightLayout=row;
      if (idCount == subDavidIDs.size() - 1)       relationShipRenderer.bottomRightLayout=row;
      idCount++;
    }
  }
  ElementLayout ySpacing=new ElementLayout();
  ySpacing.setPixelSizeY(5);
  dataSetColumn.append(ySpacing);
  Row topCaptionRow=new Row(""String_Node_Str"");
  topCaptionRow.setPixelSizeY(50);
  dataSetColumn.add(0,topCaptionRow);
  Row bottomCaptionRow=new Row(""String_Node_Str"");
  bottomCaptionRow.setPixelSizeY(50);
  dataSetColumn.append(bottomCaptionRow);
  for (int dataContainerCount=0; dataContainerCount < usedDataContainers.size(); dataContainerCount++) {
    ColumnCaptionLayout topCaptionLayout=new ColumnCaptionLayout(parentView,this);
    topCaptionRow.append(topCaptionLayout);
    ColumnCaptionLayout bottomCaptionLayout=new ColumnCaptionLayout(parentView,this);
    bottomCaptionRow.append(bottomCaptionLayout);
    if (dataContainerCount != usedDataContainers.size() - 1) {
      bottomCaptionRow.append(xSpacing);
      topCaptionRow.append(xSpacing);
    }
    prepareData(usedDataContainers.get(dataContainerCount),rowListForDataContainers.get(dataContainerCount),topCaptionLayout,bottomCaptionLayout,davidIDs);
  }
}",0.9990850869167428
57704,"/** 
 * Constructor
 * @param color the color of the connection band
 */
public RelationshipRenderer(float[] color){
  this.color=color;
}","/** 
 * Constructor
 * @param color the color of the connection band
 */
public RelationshipRenderer(float[] color,GLLinearizedPathway view){
  this.color=color;
  this.view=view;
}",0.8652037617554859
57705,"/** 
 * Renders a connection band based on the provided coordinates 
 */
public void render(GL2 gl){
  if (connectionBandRenderer == null) {
    init(gl);
  }
  float lineWidthCompensation=0.005f;
  topRight[0]=topRightLayout.getTranslateX();
  topRight[1]=topRightLayout.getTranslateY() + topRightLayout.getSizeScaledY() - lineWidthCompensation;
  bottomRight[0]=bottomRightLayout.getTranslateX();
  bottomRight[1]=bottomRightLayout.getTranslateY() + lineWidthCompensation;
  connectionBandRenderer.renderSingleBand(gl,topLeft,bottomLeft,topRight,bottomRight,false,0.07f,0,color);
}","/** 
 * Renders a connection band based on the provided coordinates 
 */
public void render(GL2 gl){
  if (connectionBandRenderer == null) {
    init(gl);
  }
  float lineWidthCompensation=0.005f;
  topRight[0]=topRightLayout.getTranslateX();
  topRight[1]=topRightLayout.getTranslateY() + topRightLayout.getSizeScaledY() - lineWidthCompensation;
  bottomRight[0]=bottomRightLayout.getTranslateX();
  bottomRight[1]=bottomRightLayout.getTranslateY() + lineWidthCompensation;
  float xOffset=view.getPixelGLConverter().getGLWidthForPixelWidth(20);
  connectionBandRenderer.renderSingleBand(gl,topLeft,bottomLeft,topRight,bottomRight,false,xOffset,0,color);
}",0.9306451612903226
57706,"private void registerPickingListener(){
  groupPickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      parent.sampleGroupSelectionManager.clearSelection(SelectionType.SELECTION);
      parent.sampleGroupSelectionManager.addToType(SelectionType.SELECTION,pick.getObjectID());
      parent.sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parent.sampleSelectionManager.clearSelection(SelectionType.SELECTION);
      parent.sampleSelectionManager.addToType(SelectionType.SELECTION,samplePerspective.getIdType(),samplePerspective.getVirtualArray().getIDs());
      parent.sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      parent.sampleGroupSelectionManager.addToType(SelectionType.MOUSE_OVER,pick.getObjectID());
      parent.sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      parent.sampleGroupSelectionManager.removeFromType(SelectionType.MOUSE_OVER,pick.getObjectID());
      parent.sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
  }
;
  parentView.addIDPickingListener(groupPickingListener,PickingType.SAMPLE_GROUP.name(),group.getID());
}","private void registerPickingListener(){
  groupPickingListener=new APickingListener(){
    @Override public void clicked(    Pick pick){
      parent.sampleGroupSelectionManager.clearSelection(SelectionType.SELECTION);
      parent.sampleGroupSelectionManager.addToType(SelectionType.SELECTION,pick.getObjectID());
      parent.sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parent.sampleSelectionManager.clearSelection(SelectionType.SELECTION);
      parent.sampleSelectionManager.addToType(SelectionType.SELECTION,samplePerspective.getIdType(),samplePerspective.getVirtualArray().getIDs());
      parent.sampleSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      parent.sampleGroupSelectionManager.addToType(SelectionType.MOUSE_OVER,pick.getObjectID());
      parent.sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      parent.sampleGroupSelectionManager.removeFromType(SelectionType.MOUSE_OVER,pick.getObjectID());
      parent.sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
  }
;
  parentView.addIDPickingListener(groupPickingListener,PickingType.SAMPLE_GROUP.name(),group.getID());
}",0.9981811567842852
57707,"@Override public void clicked(Pick pick){
  parent.sampleGroupSelectionManager.clearSelection(SelectionType.SELECTION);
  parent.sampleGroupSelectionManager.addToType(SelectionType.SELECTION,pick.getObjectID());
  parent.sampleGroupSelectionManager.triggerSelectionUpdateEvent();
  parent.sampleSelectionManager.clearSelection(SelectionType.SELECTION);
  parent.sampleSelectionManager.addToType(SelectionType.SELECTION,samplePerspective.getIdType(),samplePerspective.getVirtualArray().getIDs());
  parent.sampleGroupSelectionManager.triggerSelectionUpdateEvent();
  parentView.setDisplayListDirty();
}","@Override public void clicked(Pick pick){
  parent.sampleGroupSelectionManager.clearSelection(SelectionType.SELECTION);
  parent.sampleGroupSelectionManager.addToType(SelectionType.SELECTION,pick.getObjectID());
  parent.sampleGroupSelectionManager.triggerSelectionUpdateEvent();
  parent.sampleSelectionManager.clearSelection(SelectionType.SELECTION);
  parent.sampleSelectionManager.addToType(SelectionType.SELECTION,samplePerspective.getIdType(),samplePerspective.getVirtualArray().getIDs());
  parent.sampleSelectionManager.triggerSelectionUpdateEvent();
  parentView.setDisplayListDirty();
}",0.9958228905597326
57708,"@Override public void addDataContainers(List<DataContainer> newDataContainers){
  mappedDataRenderer.addDataContainers(newDataContainers);
  for (  ALinearizableNode node : linearizedNodes) {
    setMappedDavidIds(node);
  }
  for (  ANode node : branchNodes) {
    if (node instanceof ALinearizableNode) {
      setMappedDavidIds((ALinearizableNode)node);
      ((ALinearizableNode)node).update();
    }
  }
  setMappedDataRendererGeometry();
  setDisplayListDirty();
}","@Override public void addDataContainers(List<DataContainer> newDataContainers){
  mappedDataRenderer.addDataContainers(newDataContainers);
  for (  ALinearizableNode node : linearizedNodes) {
    setMappedDavidIds(node);
  }
  for (  ANode node : branchNodes) {
    if (node instanceof ALinearizableNode) {
      setMappedDavidIds((ALinearizableNode)node);
      ((ALinearizableNode)node).update();
    }
  }
  for (  DataContainer dataContainer : newDataContainers) {
    dataDomains.add(dataContainer.getDataDomain());
  }
  setMappedDataRendererGeometry();
  DataContainersChangedEvent event=new DataContainersChangedEvent(this);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
  setDisplayListDirty();
}",0.7717569786535303
57709,"@Override public void addDataContainer(DataContainer newDataContainer){
  mappedDataRenderer.addDataContainer(newDataContainer);
  for (  ALinearizableNode node : linearizedNodes) {
    setMappedDavidIds(node);
  }
  for (  ANode node : branchNodes) {
    if (node instanceof ALinearizableNode) {
      setMappedDavidIds((ALinearizableNode)node);
      ((ALinearizableNode)node).update();
    }
  }
  setMappedDataRendererGeometry();
  setDisplayListDirty();
}","@Override public void addDataContainer(DataContainer newDataContainer){
  mappedDataRenderer.addDataContainer(newDataContainer);
  for (  ALinearizableNode node : linearizedNodes) {
    setMappedDavidIds(node);
  }
  for (  ANode node : branchNodes) {
    if (node instanceof ALinearizableNode) {
      setMappedDavidIds((ALinearizableNode)node);
      ((ALinearizableNode)node).update();
    }
  }
  dataDomains.add(newDataContainer.getDataDomain());
  setMappedDataRendererGeometry();
  setDisplayListDirty();
}",0.9455292908530318
57710,"/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public GLLinearizedPathway(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum);
  viewType=GLLinearizedPathway.VIEW_TYPE;
  viewLabel=""String_Node_Str"";
  List<IDataDomain> dataDomains=DataDomainManager.get().getDataDomainsByType(""String_Node_Str"");
  for (  IDataDomain dataDomain : dataDomains) {
    geneticDataDomains.add((GeneticDataDomain)dataDomain);
  }
  mappedDataRenderer=new MappedDataRenderer(this);
  geneSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(""String_Node_Str""));
  geneSelectionManager.registerEventListeners();
  metaboliteSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(""String_Node_Str""));
  metaboliteSelectionManager.registerEventListeners();
}","/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public GLLinearizedPathway(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum);
  viewType=GLLinearizedPathway.VIEW_TYPE;
  viewLabel=""String_Node_Str"";
  mappedDataRenderer=new MappedDataRenderer(this);
  geneSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(""String_Node_Str""));
  geneSelectionManager.registerEventListeners();
  metaboliteSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(""String_Node_Str""));
  metaboliteSelectionManager.registerEventListeners();
}",0.8631303208906352
57711,"private void createVertex(final GL2 gl,final IUniqueObject containingView,PathwayVertexRep vertexRep,PathwayGraph containingPathway){
  float[] tmpNodeColor=null;
  gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(containingView.getID(),PickingType.PATHWAY_ELEMENT_SELECTION.name(),vertexRep.getID()));
  EPathwayVertexShape shape=vertexRep.getShapeType();
  if (shape.equals(EPathwayVertexShape.poly))   renderPolyVertex(gl,vertexRep);
  float canvasXPos=vertexRep.getCenterX() * PathwayRenderStyle.SCALING_FACTOR_X;
  float canvasYPos=vertexRep.getCenterY() * PathwayRenderStyle.SCALING_FACTOR_Y;
  float nodeWidth=vertexRep.getWidth() * PathwayRenderStyle.SCALING_FACTOR_X;
  float nodeHeight=vertexRep.getHeight() * PathwayRenderStyle.SCALING_FACTOR_Y;
  gl.glTranslatef(canvasXPos,-canvasYPos,0);
  EPathwayVertexType vertexType=vertexRep.getType();
switch (vertexType) {
case map:
    if (vertexRep.getName().contains(""String_Node_Str"")) {
      gl.glTranslatef(-canvasXPos,canvasYPos,0);
      gl.glPopName();
      return;
    }
  tmpNodeColor=new float[]{0f,0f,0f,0.25f};
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayList(gl,nodeWidth,nodeHeight);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayListFrame(gl,nodeWidth,nodeHeight);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayListFrame(gl,nodeWidth,nodeHeight);
}
break;
case compound:
EventBasedSelectionManager metabolicSelectionManager=glPathwayView.getMetaboliteSelectionManager();
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID()) || metabolicSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getName().hashCode())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedCompoundNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID()) || metabolicSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getName().hashCode())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedCompoundNodeDisplayListId);
}
tmpNodeColor=PathwayRenderStyle.COMPOUND_NODE_COLOR;
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(compoundNodeDisplayListId);
break;
case group:
break;
case gene:
case enzyme:
case other:
gl.glLineWidth(1);
if (enableGeneMapping) {
Average average=getExpressionAverage(vertexRep);
if (average != null) tmpNodeColor=colorMapper.getColor((float)average.getArithmeticMean());
if (tmpNodeColor != null) {
if (glPathwayView.getDetailLevel() == EDetailLevel.HIGH) {
gl.glColor4f(tmpNodeColor[0],tmpNodeColor[1],tmpNodeColor[2],0.7f);
gl.glCallList(enzymeNodeDisplayListId);
Float stdDev=PathwayRenderStyle.ENZYME_NODE_HEIGHT * (float)average.getStandardDeviation() * 5.0f;
float x=PathwayRenderStyle.ENZYME_NODE_WIDTH + 0.000f;
float y=-PathwayRenderStyle.ENZYME_NODE_HEIGHT + 0.002f;
if (!stdDev.isNaN()) {
gl.glColor4f(1,1,1,1f);
gl.glBegin(GL2.GL_QUADS);
gl.glVertex3f(x,y - .001f,Z_OFFSET);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,y - .001f,Z_OFFSET);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,0 + .001f,Z_OFFSET);
gl.glVertex3f(x,0 + 0.001f,Z_OFFSET);
gl.glEnd();
gl.glColor4fv(PathwayRenderStyle.STD_DEV_COLOR,0);
gl.glBegin(GL2.GL_QUADS);
gl.glVertex3f(x,y,Z_OFFSET + 0.01f);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,y,Z_OFFSET + 0.01f);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,y + stdDev,Z_OFFSET + 0.01f);
gl.glVertex3f(x,y + stdDev,Z_OFFSET + 0.01f);
gl.glEnd();
gl.glColor4f(0,0,0,1f);
gl.glBegin(GL2.GL_LINE_LOOP);
gl.glVertex3f(x,y - .001f,Z_OFFSET + 0.02f);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,y - .001f,Z_OFFSET + 0.02f);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,0 + .001f,Z_OFFSET + 0.02f);
gl.glVertex3f(x,0 + 0.001f,Z_OFFSET + 0.02f);
gl.glEnd();
}
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
}
 else {
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
}
}
}
 else {
gl.glColor4f(0,0,0,0);
gl.glCallList(enzymeNodeDisplayListId);
tmpNodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
gl.glColor4f(tmpNodeColor[0],tmpNodeColor[1],tmpNodeColor[2],0.7f);
gl.glCallList(compoundNodeDisplayListId);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
}
}
 else {
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
}
 else if (internalSelectionManager.checkStatus(SelectionType.NORMAL,vertexRep.getID())) {
tmpNodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
}
 else {
tmpNodeColor=new float[]{0,0,0,0};
}
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
if (!internalSelectionManager.checkStatus(SelectionType.DESELECTED,vertexRep.getID())) {
gl.glColor4f(0,0,0,0);
gl.glCallList(enzymeNodeDisplayListId);
}
}
break;
}
gl.glTranslatef(-canvasXPos,canvasYPos,0);
gl.glPopName();
}","private void createVertex(final GL2 gl,final IUniqueObject containingView,PathwayVertexRep vertexRep,PathwayGraph containingPathway){
  float[] tmpNodeColor=null;
  gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(containingView.getID(),PickingType.PATHWAY_ELEMENT_SELECTION.name(),vertexRep.getID()));
  EPathwayVertexShape shape=vertexRep.getShapeType();
  if (shape.equals(EPathwayVertexShape.poly))   renderPolyVertex(gl,vertexRep);
  float canvasXPos=vertexRep.getCenterX() * PathwayRenderStyle.SCALING_FACTOR_X;
  float canvasYPos=vertexRep.getCenterY() * PathwayRenderStyle.SCALING_FACTOR_Y;
  float nodeWidth=vertexRep.getWidth() * PathwayRenderStyle.SCALING_FACTOR_X;
  float nodeHeight=vertexRep.getHeight() * PathwayRenderStyle.SCALING_FACTOR_Y;
  gl.glTranslatef(canvasXPos,-canvasYPos,0);
  EPathwayVertexType vertexType=vertexRep.getType();
switch (vertexType) {
case map:
    if (vertexRep.getName().contains(""String_Node_Str"")) {
      gl.glTranslatef(-canvasXPos,canvasYPos,0);
      gl.glPopName();
      return;
    }
  tmpNodeColor=new float[]{0f,0f,0f,0.25f};
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayList(gl,nodeWidth,nodeHeight);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayListFrame(gl,nodeWidth,nodeHeight);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayListFrame(gl,nodeWidth,nodeHeight);
}
break;
case compound:
EventBasedSelectionManager metabolicSelectionManager=glPathwayView.getMetaboliteSelectionManager();
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID()) || metabolicSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getName().hashCode())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedCompoundNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID()) || metabolicSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getName().hashCode())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedCompoundNodeDisplayListId);
}
tmpNodeColor=PathwayRenderStyle.COMPOUND_NODE_COLOR;
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(compoundNodeDisplayListId);
break;
case group:
break;
case gene:
case enzyme:
case other:
gl.glLineWidth(1);
if (enableGeneMapping) {
Average average=getExpressionAverage(vertexRep);
if (average != null) tmpNodeColor=colorMapper.getColor((float)average.getArithmeticMean());
if (tmpNodeColor != null) {
if (glPathwayView.getDetailLevel() == EDetailLevel.HIGH) {
gl.glColor4f(tmpNodeColor[0],tmpNodeColor[1],tmpNodeColor[2],0.7f);
gl.glBlendFunc(GL2.GL_SRC_ALPHA,GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glCallList(enzymeNodeDisplayListId);
Float stdDev=PathwayRenderStyle.ENZYME_NODE_HEIGHT * (float)average.getStandardDeviation() * 5.0f;
float x=PathwayRenderStyle.ENZYME_NODE_WIDTH + 0.000f;
float y=-PathwayRenderStyle.ENZYME_NODE_HEIGHT + 0.002f;
if (!stdDev.isNaN()) {
gl.glColor4f(1,1,1,1f);
gl.glBegin(GL2.GL_QUADS);
gl.glVertex3f(x,y - .001f,Z_OFFSET);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,y - .001f,Z_OFFSET);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,0 + .001f,Z_OFFSET);
gl.glVertex3f(x,0 + 0.001f,Z_OFFSET);
gl.glEnd();
gl.glColor4fv(PathwayRenderStyle.STD_DEV_COLOR,0);
gl.glBegin(GL2.GL_QUADS);
gl.glVertex3f(x,y,Z_OFFSET + 0.01f);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,y,Z_OFFSET + 0.01f);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,y + stdDev,Z_OFFSET + 0.01f);
gl.glVertex3f(x,y + stdDev,Z_OFFSET + 0.01f);
gl.glEnd();
gl.glColor4f(0,0,0,1f);
gl.glBegin(GL2.GL_LINE_LOOP);
gl.glVertex3f(x,y - .001f,Z_OFFSET + 0.02f);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,y - .001f,Z_OFFSET + 0.02f);
gl.glVertex3f(x + PathwayRenderStyle.STD_DEV_BAR_WIDTH,0 + .001f,Z_OFFSET + 0.02f);
gl.glVertex3f(x,0 + 0.001f,Z_OFFSET + 0.02f);
gl.glEnd();
}
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
}
 else {
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
}
}
}
 else {
gl.glColor4f(0,0,0,0);
gl.glCallList(enzymeNodeDisplayListId);
tmpNodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
gl.glColor4f(tmpNodeColor[0],tmpNodeColor[1],tmpNodeColor[2],0.7f);
gl.glCallList(compoundNodeDisplayListId);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
}
}
 else {
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
}
 else if (internalSelectionManager.checkStatus(SelectionType.NORMAL,vertexRep.getID())) {
tmpNodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
}
 else {
tmpNodeColor=new float[]{0,0,0,0};
}
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
if (!internalSelectionManager.checkStatus(SelectionType.DESELECTED,vertexRep.getID())) {
gl.glColor4f(0,0,0,0);
gl.glCallList(enzymeNodeDisplayListId);
}
}
break;
}
gl.glTranslatef(-canvasXPos,canvasYPos,0);
gl.glPopName();
}",0.9953735305271142
57712,"@Override public void init(){
  if (configuration == null || configuration.isDefaultConfiguration()) {
    if (dataSetDescription != null && dataSetDescription.isTransposeMatrix()) {
      if (configuration.isDefaultConfiguration()) {
        IDType.unregisterType(recordIDType);
        IDType.unregisterType(dimensionIDType);
        IDType.unregisterType(recordGroupIDType);
        IDType.unregisterType(dimensionGroupIDType);
      }
      createDefaultConfigurationWithColumnsAsRecords();
    }
 else     createDefaultConfiguration();
  }
  boolean externalMappingLoaded=false;
  if (configuration.mappingFile != null) {
    IDMappingLoader.get().loadMappingFile(configuration.mappingFile);
    externalMappingLoaded=true;
  }
  if (externalMappingLoaded) {
    recordIDCategory=IDCategory.getIDCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.getIDCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.getIDType(configuration.humanReadableRecordIDType);
    humanReadableDimensionIDType=IDType.getIDType(configuration.humanReadableDimensionIDType);
  }
 else {
    recordIDCategory=IDCategory.registerCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.registerCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.registerType(configuration.humanReadableRecordIDType,recordIDCategory,EColumnType.STRING);
    humanReadableDimensionIDType=IDType.registerType(configuration.humanReadableDimensionIDType,dimensionIDCategory,EColumnType.STRING);
  }
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordIDType.setInternalType(true);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EColumnType.INT);
  dimensionIDType.setInternalType(true);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordGroupIDType.setInternalType(true);
  dimensionGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EColumnType.INT);
  IDType primaryRecordMappingType;
  if (configuration.primaryRecordMappingType != null) {
    IDType.getIDType(configuration.primaryRecordMappingType);
    primaryRecordMappingType=IDType.getIDType(configuration.primaryRecordMappingType);
  }
 else   primaryRecordMappingType=recordIDType;
  recordIDCategory.setPrimaryMappingType(primaryRecordMappingType);
  IDType primaryDimensionMappingType;
  if (configuration.primaryDimensionMappingType != null)   primaryDimensionMappingType=IDType.getIDType(configuration.primaryDimensionMappingType);
 else   primaryDimensionMappingType=dimensionIDType;
  dimensionIDCategory.setPrimaryMappingType(primaryDimensionMappingType);
  recordDenominationPlural=configuration.recordDenominationPlural;
  recordDenominationSingular=configuration.recordDenominationSingular;
  dimensionDenominationPlural=configuration.dimensionDenominationPlural;
  dimensionDenominationSingular=configuration.dimensionDenominationSingular;
  recordIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory);
  dimensionIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory);
  recordSelectionManager=new RecordSelectionManager(recordIDType);
  dimensionSelectionManager=new DimensionSelectionManager(dimensionIDType);
  recordGroupSelectionManager=new SelectionManager(recordGroupIDType);
  addIDCategory(dimensionIDCategory);
  addIDCategory(recordIDCategory);
  super.init();
}","@Override public void init(){
  if (configuration == null || configuration.isDefaultConfiguration()) {
    if (dataSetDescription != null && dataSetDescription.isTransposeMatrix()) {
      if (configuration.isDefaultConfiguration()) {
        IDType.unregisterType(recordIDType);
        IDType.unregisterType(dimensionIDType);
        IDType.unregisterType(recordGroupIDType);
        IDType.unregisterType(dimensionGroupIDType);
      }
      createDefaultConfigurationWithColumnsAsRecords();
    }
 else     createDefaultConfiguration();
  }
  boolean externalMappingLoaded=false;
  if (configuration.mappingFile != null) {
    IDMappingLoader.get().loadMappingFile(configuration.mappingFile);
    externalMappingLoaded=true;
  }
  if (externalMappingLoaded) {
    recordIDCategory=IDCategory.getIDCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.getIDCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.getIDType(configuration.humanReadableRecordIDType);
    humanReadableDimensionIDType=IDType.getIDType(configuration.humanReadableDimensionIDType);
  }
 else {
    recordIDCategory=IDCategory.registerCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.registerCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.registerType(configuration.humanReadableRecordIDType,recordIDCategory,EColumnType.STRING);
    humanReadableDimensionIDType=IDType.registerType(configuration.humanReadableDimensionIDType,dimensionIDCategory,EColumnType.STRING);
  }
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordIDType.setInternalType(true);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EColumnType.INT);
  dimensionIDType.setInternalType(true);
  recordGroupIDCategory=IDCategory.registerCategory(recordIDCategory.getCategoryName() + ""String_Node_Str"");
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordGroupIDCategory,EColumnType.INT);
  recordGroupIDType.setInternalType(true);
  dimensionGroupIDCategory=IDCategory.registerCategory(dimensionIDCategory.getCategoryName() + ""String_Node_Str"");
  dimensionGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionGroupIDCategory,EColumnType.INT);
  IDType primaryRecordMappingType;
  if (configuration.primaryRecordMappingType != null) {
    IDType.getIDType(configuration.primaryRecordMappingType);
    primaryRecordMappingType=IDType.getIDType(configuration.primaryRecordMappingType);
  }
 else   primaryRecordMappingType=recordIDType;
  recordIDCategory.setPrimaryMappingType(primaryRecordMappingType);
  IDType primaryDimensionMappingType;
  if (configuration.primaryDimensionMappingType != null)   primaryDimensionMappingType=IDType.getIDType(configuration.primaryDimensionMappingType);
 else   primaryDimensionMappingType=dimensionIDType;
  dimensionIDCategory.setPrimaryMappingType(primaryDimensionMappingType);
  recordDenominationPlural=configuration.recordDenominationPlural;
  recordDenominationSingular=configuration.recordDenominationSingular;
  dimensionDenominationPlural=configuration.dimensionDenominationPlural;
  dimensionDenominationSingular=configuration.dimensionDenominationSingular;
  recordIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory);
  dimensionIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory);
  recordSelectionManager=new RecordSelectionManager(recordIDType);
  dimensionSelectionManager=new DimensionSelectionManager(dimensionIDType);
  recordGroupSelectionManager=new SelectionManager(recordGroupIDType);
  addIDCategory(dimensionIDCategory);
  addIDCategory(recordIDCategory);
  super.init();
}",0.9484832635983264
57713,"/** 
 * Fills the layout with data specific for the data containers 
 */
private void prepareData(DataContainer dataContainer,ArrayList<ElementLayout> rowLayouts,ColumnCaptionLayout captionLayout,ArrayList<Integer> davidIDs){
  GeneticDataDomain dataDomain=(GeneticDataDomain)dataContainer.getDataDomain();
  ADataPerspective<?,?,?,?> experimentPerspective;
  if (dataDomain.isGeneRecord()) {
    experimentPerspective=dataContainer.getDimensionPerspective();
  }
 else {
    experimentPerspective=dataContainer.getRecordPerspective();
  }
  Group group=null;
  if (dataDomain.isGeneRecord()) {
    group=dataContainer.getDimensionGroup();
    if (group == null) {
      dataContainer.getDimensionPerspective().getVirtualArray().getGroupList().get(0);
    }
  }
 else {
    group=dataContainer.getRecordGroup();
    if (group == null) {
      dataContainer.getRecordPerspective().getVirtualArray().getGroupList().get(0);
    }
  }
  captionLayout.init(group,experimentPerspective);
  IDType geneIDTYpe=dataDomain.getGeneIDType();
  for (int rowCount=0; rowCount < davidIDs.size(); rowCount++) {
    Integer davidID=davidIDs.get(rowCount);
    Set<Integer> geneIDs=dataDomain.getGeneIDMappingManager().getIDAsSet(IDType.getIDType(""String_Node_Str""),geneIDTYpe,davidID);
    Integer geneID;
    if (geneIDs == null) {
      System.out.println(""String_Node_Str"" + davidID);
      geneID=null;
    }
 else {
      geneID=geneIDs.iterator().next();
      if (geneIDs.size() > 1) {
        Set<String> names=dataDomain.getGeneIDMappingManager().getIDAsSet(IDType.getIDType(""String_Node_Str""),dataDomain.getHumanReadableGeneIDType(),davidID);
        System.out.println(""String_Node_Str"" + names + ""String_Node_Str""+ geneIDs);
      }
    }
    ElementLayout dataContainerLayout=rowLayouts.get(rowCount);
    if (sampleGroupSelectionManager.checkStatus(abstractGroupType,group.getID())) {
      dataContainerLayout.setPixelSizeX(ABSTRACT_GROUP_PIXEL_SIZE);
      captionLayout.setPixelSizeX(ABSTRACT_GROUP_PIXEL_SIZE);
    }
 else {
      dataContainerLayout.setDynamicSizeUnitsX(experimentPerspective.getVirtualArray().size());
      captionLayout.setDynamicSizeUnitsX(experimentPerspective.getVirtualArray().size());
    }
    if (!dataDomain.getLabel().contains(""String_Node_Str"")) {
      dataContainerLayout.setRenderer(new ContinuousContentRenderer(geneID,davidID,dataDomain,dataContainer,experimentPerspective,parentView,this,group));
    }
 else {
      dataContainerLayout.setRenderer(new CategoricalRowContentRenderer(geneID,davidID,dataDomain,dataContainer,experimentPerspective,parentView,this,group));
    }
  }
}","/** 
 * Fills the layout with data specific for the data containers 
 */
private void prepareData(DataContainer dataContainer,ArrayList<ElementLayout> rowLayouts,ColumnCaptionLayout captionLayout,ArrayList<Integer> davidIDs){
  GeneticDataDomain dataDomain=(GeneticDataDomain)dataContainer.getDataDomain();
  ADataPerspective<?,?,?,?> experimentPerspective;
  if (dataDomain.isGeneRecord()) {
    experimentPerspective=dataContainer.getDimensionPerspective();
  }
 else {
    experimentPerspective=dataContainer.getRecordPerspective();
  }
  Group group=null;
  if (dataDomain.isGeneRecord()) {
    group=dataContainer.getDimensionGroup();
    if (group == null) {
      dataContainer.getDimensionPerspective().getVirtualArray().getGroupList().get(0);
    }
  }
 else {
    group=dataContainer.getRecordGroup();
    if (group == null) {
      dataContainer.getRecordPerspective().getVirtualArray().getGroupList().get(0);
    }
  }
  captionLayout.init(group,experimentPerspective);
  IDType geneIDTYpe=dataDomain.getGeneIDType();
  for (int rowCount=0; rowCount < davidIDs.size(); rowCount++) {
    Integer davidID=davidIDs.get(rowCount);
    Set<Integer> geneIDs=dataDomain.getGeneIDMappingManager().getIDAsSet(IDType.getIDType(""String_Node_Str""),geneIDTYpe,davidID);
    Integer geneID;
    if (geneIDs == null) {
      geneID=null;
    }
 else {
      geneID=geneIDs.iterator().next();
      if (geneIDs.size() > 1) {
        Set<String> names=dataDomain.getGeneIDMappingManager().getIDAsSet(IDType.getIDType(""String_Node_Str""),dataDomain.getHumanReadableGeneIDType(),davidID);
        System.out.println(""String_Node_Str"" + names + ""String_Node_Str""+ geneIDs);
      }
    }
    ElementLayout dataContainerLayout=rowLayouts.get(rowCount);
    if (sampleGroupSelectionManager.checkStatus(abstractGroupType,group.getID())) {
      dataContainerLayout.setPixelSizeX(ABSTRACT_GROUP_PIXEL_SIZE);
      captionLayout.setPixelSizeX(ABSTRACT_GROUP_PIXEL_SIZE);
    }
 else {
      dataContainerLayout.setDynamicSizeUnitsX(experimentPerspective.getVirtualArray().size());
      captionLayout.setDynamicSizeUnitsX(experimentPerspective.getVirtualArray().size());
    }
    if (!dataDomain.getLabel().contains(""String_Node_Str"")) {
      dataContainerLayout.setRenderer(new ContinuousContentRenderer(geneID,davidID,dataDomain,dataContainer,experimentPerspective,parentView,this,group));
    }
 else {
      dataContainerLayout.setRenderer(new CategoricalRowContentRenderer(geneID,davidID,dataDomain,dataContainer,experimentPerspective,parentView,this,group));
    }
  }
}",0.9893883851051516
57714,"private void createVertex(final GL2 gl,final IUniqueObject containingView,PathwayVertexRep vertexRep,PathwayGraph containingPathway){
  float[] tmpNodeColor=null;
  gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(containingView.getID(),PickingType.PATHWAY_ELEMENT_SELECTION.name(),vertexRep.getID()));
  EPathwayVertexShape shape=vertexRep.getShapeType();
  if (shape.equals(EPathwayVertexShape.poly))   renderPolyVertex(gl,vertexRep);
  float canvasXPos=vertexRep.getCenterX() * PathwayRenderStyle.SCALING_FACTOR_X;
  float canvasYPos=vertexRep.getCenterY() * PathwayRenderStyle.SCALING_FACTOR_Y;
  float nodeWidth=vertexRep.getWidth() * PathwayRenderStyle.SCALING_FACTOR_X;
  float nodeHeight=vertexRep.getHeight() * PathwayRenderStyle.SCALING_FACTOR_Y;
  gl.glTranslatef(canvasXPos,-canvasYPos,0);
  EPathwayVertexType vertexType=vertexRep.getType();
switch (vertexType) {
case map:
    if (vertexRep.getName().contains(""String_Node_Str"")) {
      gl.glTranslatef(-canvasXPos,canvasYPos,0);
      gl.glPopName();
      return;
    }
  tmpNodeColor=new float[]{0f,0f,0f,0.25f};
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayList(gl,nodeWidth,nodeHeight);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayListFrame(gl,nodeWidth,nodeHeight);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayListFrame(gl,nodeWidth,nodeHeight);
}
break;
case compound:
EventBasedSelectionManager metabolicSelectionManager=glPathwayView.getMetaboliteSelectionManager();
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID()) || metabolicSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getName().hashCode())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedCompoundNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID()) || metabolicSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getName().hashCode())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedCompoundNodeDisplayListId);
}
tmpNodeColor=PathwayRenderStyle.COMPOUND_NODE_COLOR;
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(compoundNodeDisplayListId);
break;
case group:
break;
case gene:
case enzyme:
case other:
gl.glLineWidth(1);
if (enableGeneMapping) {
Average average=getExpressionAverage(vertexRep);
if (average != null) tmpNodeColor=colorMapper.getColor((float)average.getArithmeticMean());
if (tmpNodeColor != null) {
if (glPathwayView.getDetailLevel() == EDetailLevel.HIGH) {
gl.glColor4f(tmpNodeColor[0],tmpNodeColor[1],tmpNodeColor[2],0.7f);
gl.glEnable(GL2.GL_BLEND);
gl.glBlendFunc(GL2.GL_SRC_ALPHA,GL2.GL_ONE_MINUS_SRC_ALPHA);
gl.glCallList(enzymeNodeDisplayListId);
gl.glEnable(GL2.GL_DEPTH_TEST);
gl.glColor3f(0,1,0);
float stdDev=PathwayRenderStyle.ENZYME_NODE_HEIGHT * (float)average.getStandardDeviation() * 5.0f;
gl.glBegin(GL2.GL_QUADS);
gl.glVertex3f(PathwayRenderStyle.ENZYME_NODE_WIDTH,-PathwayRenderStyle.ENZYME_NODE_HEIGHT,Z_OFFSET);
gl.glVertex3f(PathwayRenderStyle.ENZYME_NODE_WIDTH + 0.02f,-PathwayRenderStyle.ENZYME_NODE_HEIGHT,Z_OFFSET);
gl.glVertex3f(PathwayRenderStyle.ENZYME_NODE_WIDTH + 0.02f,-PathwayRenderStyle.ENZYME_NODE_HEIGHT + stdDev,Z_OFFSET);
gl.glVertex3f(PathwayRenderStyle.ENZYME_NODE_WIDTH,-PathwayRenderStyle.ENZYME_NODE_HEIGHT + stdDev,Z_OFFSET);
gl.glEnd();
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
}
 else {
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
}
}
}
 else {
gl.glColor4f(0,0,0,0);
gl.glCallList(enzymeNodeDisplayListId);
tmpNodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
gl.glColor4f(tmpNodeColor[0],tmpNodeColor[1],tmpNodeColor[2],0.7f);
gl.glCallList(compoundNodeDisplayListId);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
}
}
 else {
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
}
 else if (internalSelectionManager.checkStatus(SelectionType.NORMAL,vertexRep.getID())) {
tmpNodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
}
 else {
tmpNodeColor=new float[]{0,0,0,0};
}
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
if (!internalSelectionManager.checkStatus(SelectionType.DESELECTED,vertexRep.getID())) {
gl.glColor4f(0,0,0,0);
gl.glCallList(enzymeNodeDisplayListId);
}
}
break;
}
gl.glTranslatef(-canvasXPos,canvasYPos,0);
gl.glPopName();
}","private void createVertex(final GL2 gl,final IUniqueObject containingView,PathwayVertexRep vertexRep,PathwayGraph containingPathway){
  float[] tmpNodeColor=null;
  gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(containingView.getID(),PickingType.PATHWAY_ELEMENT_SELECTION.name(),vertexRep.getID()));
  EPathwayVertexShape shape=vertexRep.getShapeType();
  if (shape.equals(EPathwayVertexShape.poly))   renderPolyVertex(gl,vertexRep);
  float canvasXPos=vertexRep.getCenterX() * PathwayRenderStyle.SCALING_FACTOR_X;
  float canvasYPos=vertexRep.getCenterY() * PathwayRenderStyle.SCALING_FACTOR_Y;
  float nodeWidth=vertexRep.getWidth() * PathwayRenderStyle.SCALING_FACTOR_X;
  float nodeHeight=vertexRep.getHeight() * PathwayRenderStyle.SCALING_FACTOR_Y;
  gl.glTranslatef(canvasXPos,-canvasYPos,0);
  EPathwayVertexType vertexType=vertexRep.getType();
switch (vertexType) {
case map:
    if (vertexRep.getName().contains(""String_Node_Str"")) {
      gl.glTranslatef(-canvasXPos,canvasYPos,0);
      gl.glPopName();
      return;
    }
  tmpNodeColor=new float[]{0f,0f,0f,0.25f};
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayList(gl,nodeWidth,nodeHeight);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayListFrame(gl,nodeWidth,nodeHeight);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
fillNodeDisplayListFrame(gl,nodeWidth,nodeHeight);
}
break;
case compound:
EventBasedSelectionManager metabolicSelectionManager=glPathwayView.getMetaboliteSelectionManager();
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID()) || metabolicSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getName().hashCode())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedCompoundNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID()) || metabolicSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getName().hashCode())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedCompoundNodeDisplayListId);
}
tmpNodeColor=PathwayRenderStyle.COMPOUND_NODE_COLOR;
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(compoundNodeDisplayListId);
break;
case group:
break;
case gene:
case enzyme:
case other:
gl.glLineWidth(1);
if (enableGeneMapping) {
Average average=getExpressionAverage(vertexRep);
if (average != null) tmpNodeColor=colorMapper.getColor((float)average.getArithmeticMean());
if (tmpNodeColor != null) {
if (glPathwayView.getDetailLevel() == EDetailLevel.HIGH) {
gl.glColor4f(tmpNodeColor[0],tmpNodeColor[1],tmpNodeColor[2],0.7f);
gl.glCallList(enzymeNodeDisplayListId);
gl.glColor3f(0,1,0);
Float stdDev=PathwayRenderStyle.ENZYME_NODE_HEIGHT * (float)average.getStandardDeviation() * 5.0f;
if (!stdDev.isNaN()) {
gl.glBegin(GL2.GL_QUADS);
gl.glVertex3f(PathwayRenderStyle.ENZYME_NODE_WIDTH,-PathwayRenderStyle.ENZYME_NODE_HEIGHT,Z_OFFSET);
gl.glVertex3f(PathwayRenderStyle.ENZYME_NODE_WIDTH + 0.02f,-PathwayRenderStyle.ENZYME_NODE_HEIGHT,Z_OFFSET);
gl.glVertex3f(PathwayRenderStyle.ENZYME_NODE_WIDTH + 0.02f,-PathwayRenderStyle.ENZYME_NODE_HEIGHT + stdDev,Z_OFFSET);
gl.glVertex3f(PathwayRenderStyle.ENZYME_NODE_WIDTH,-PathwayRenderStyle.ENZYME_NODE_HEIGHT + stdDev,Z_OFFSET);
gl.glEnd();
}
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
}
 else {
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(upscaledFilledEnzymeNodeDisplayListId);
}
}
}
 else {
gl.glColor4f(0,0,0,0);
gl.glCallList(enzymeNodeDisplayListId);
tmpNodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
gl.glColor4f(tmpNodeColor[0],tmpNodeColor[1],tmpNodeColor[2],0.7f);
gl.glCallList(compoundNodeDisplayListId);
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
}
}
}
 else {
if (internalSelectionManager.checkStatus(SelectionType.SELECTION,vertexRep.getID())) {
tmpNodeColor=SelectionType.SELECTION.getColor();
}
 else if (internalSelectionManager.checkStatus(SelectionType.MOUSE_OVER,vertexRep.getID())) {
tmpNodeColor=SelectionType.MOUSE_OVER.getColor();
}
 else if (internalSelectionManager.checkStatus(SelectionType.NORMAL,vertexRep.getID())) {
tmpNodeColor=PathwayRenderStyle.ENZYME_NODE_COLOR;
}
 else {
tmpNodeColor=new float[]{0,0,0,0};
}
gl.glColor4fv(tmpNodeColor,0);
gl.glCallList(framedEnzymeNodeDisplayListId);
if (!internalSelectionManager.checkStatus(SelectionType.DESELECTED,vertexRep.getID())) {
gl.glColor4f(0,0,0,0);
gl.glCallList(enzymeNodeDisplayListId);
}
}
break;
}
gl.glTranslatef(-canvasXPos,canvasYPos,0);
gl.glPopName();
}",0.9787515502273668
57715,"private Average getExpressionAverage(PathwayVertexRep vertexRep){
  int davidID=pathwayItemManager.getDavidIdByPathwayVertex((PathwayVertex)vertexRep.getPathwayVertices().get(0));
  if (davidID == -1 || davidID == 0)   return null;
 else {
    Set<Integer> selectedSamples=glPathwayView.getSampleSelectionManager().getElements(SelectionType.SELECTION);
    List<Integer> selectedSamplesArray=new ArrayList<Integer>();
    selectedSamplesArray.addAll(selectedSamples);
    VirtualArray<?,?,?> selectedSamplesVA;
    if (!geneticDataDomain.isGeneRecord())     selectedSamplesVA=new RecordVirtualArray(glPathwayView.getSampleSelectionManager().getIDType(),selectedSamplesArray);
 else     selectedSamplesVA=new DimensionVirtualArray(glPathwayView.getSampleSelectionManager().getIDType(),selectedSamplesArray);
    Set<Integer> expressionIndices=idMappingManager.<Integer,Integer>getIDAsSet(glPathwayView.getPathwayDataDomain().getDavidIDType(),glPathwayView.getGeneSelectionManager().getIDType(),davidID);
    if (expressionIndices == null)     return null;
    for (    Integer expressionIndex : expressionIndices) {
      Average average=ContainerStatistics.calculateAverage(selectedSamplesVA,geneticDataDomain.getTable(),expressionIndex);
      return average;
    }
  }
  return null;
}","private Average getExpressionAverage(PathwayVertexRep vertexRep){
  int davidID=pathwayItemManager.getDavidIdByPathwayVertex((PathwayVertex)vertexRep.getPathwayVertices().get(0));
  if (davidID == -1 || davidID == 0)   return null;
 else {
    Set<Integer> selectedSamples=glPathwayView.getSampleSelectionManager().getElements(SelectionType.SELECTION);
    List<Integer> selectedSamplesArray=new ArrayList<Integer>();
    selectedSamplesArray.addAll(selectedSamples);
    if (selectedSamplesArray.size() == 0) {
      if (!geneticDataDomain.isGeneRecord())       selectedSamplesArray.addAll(glPathwayView.getDataContainer().getRecordPerspective().getVirtualArray().getIDs());
 else       selectedSamplesArray.addAll(glPathwayView.getDataContainer().getDimensionPerspective().getVirtualArray().getIDs());
    }
    VirtualArray<?,?,?> selectedSamplesVA;
    if (!geneticDataDomain.isGeneRecord())     selectedSamplesVA=new RecordVirtualArray(glPathwayView.getSampleSelectionManager().getIDType(),selectedSamplesArray);
 else     selectedSamplesVA=new DimensionVirtualArray(glPathwayView.getSampleSelectionManager().getIDType(),selectedSamplesArray);
    Set<Integer> expressionIndices=idMappingManager.<Integer,Integer>getIDAsSet(glPathwayView.getPathwayDataDomain().getDavidIDType(),glPathwayView.getGeneSelectionManager().getIDType(),davidID);
    if (expressionIndices == null)     return null;
    for (    Integer expressionIndex : expressionIndices) {
      Average average=ContainerStatistics.calculateAverage(selectedSamplesVA,geneticDataDomain.getTable(),expressionIndex);
      return average;
    }
  }
  return null;
}",0.8827160493827161
57716,"public void handlePathwayElementSelection(SelectionType selectionType,int externalID){
  setDisplayListDirty();
  if (geneSelectionManager.checkStatus(selectionType,externalID)) {
    return;
  }
  PathwayVertexRep previouslySelectedVertexRep=null;
  if (geneSelectionManager.getElements(SelectionType.SELECTION).size() == 1) {
    previouslySelectedVertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep((Integer)geneSelectionManager.getElements(SelectionType.SELECTION).toArray()[0]);
  }
  geneSelectionManager.clearSelection(selectionType);
  if (metaboliteSelectionManager.getNumberOfElements(selectionType) > 0) {
    metaboliteSelectionManager.clearSelection(selectionType);
    metaboliteSelectionManager.triggerSelectionUpdateEvent();
  }
  PathwayVertexRep vertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep(externalID);
  if (vertexRep.getType() == EPathwayVertexType.compound) {
    metaboliteSelectionManager.addToType(selectionType,vertexRep.getName().hashCode());
    metaboliteSelectionManager.triggerSelectionUpdateEvent();
  }
  if (previouslySelectedVertexRep != null && selectionType == SelectionType.SELECTION) {
    if (!isControlKeyDown) {
      KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,previouslySelectedVertexRep,MAX_PATHS);
      if (vertexRep != previouslySelectedVertexRep)       allPaths=pathAlgo.getPaths(vertexRep);
      if (allPaths != null && allPaths.size() > 0) {
        selectedPath=allPaths.get(selectedPathID);
        allPaths.clear();
        selectedPathID=0;
        allPaths.add(selectedPath);
        triggerPathUpdate();
        isBubbleTextureDirty=true;
      }
    }
 else     if (selectedPath != null) {
      KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,selectedPath.getStartVertex(),MAX_PATHS);
      allPaths=pathAlgo.getPaths(vertexRep);
      if (allPaths != null && allPaths.size() > 0) {
        selectedPath=allPaths.get(selectedPathID);
        allPaths.clear();
        selectedPathID=0;
        allPaths.add(selectedPath);
        triggerPathUpdate();
        isBubbleTextureDirty=true;
      }
    }
  }
 else   if (previouslySelectedVertexRep != null && selectionType == SelectionType.MOUSE_OVER) {
    KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,previouslySelectedVertexRep,MAX_PATHS);
    if (vertexRep != previouslySelectedVertexRep) {
      List<GraphPath<PathwayVertexRep,DefaultEdge>> mouseOverPaths=pathAlgo.getPaths(vertexRep);
      if (mouseOverPaths != null && mouseOverPaths.size() > 0) {
        allPaths=mouseOverPaths;
        selectedPath=allPaths.get(selectedPathID);
        if (selectedPath != null && isControlKeyDown)         allPaths.add(selectedPath);
        isBubbleTextureDirty=true;
      }
    }
  }
  geneSelectionManager.addToType(selectionType,vertexRep.getID());
  int iConnectionID=generalManager.getIDCreator().createID(ManagedObjectType.CONNECTION);
  geneSelectionManager.addConnectionID(iConnectionID,vertexRep.getID());
  connectedElementRepresentationManager.clear(geneSelectionManager.getIDType(),selectionType);
  createConnectionLines(selectionType,iConnectionID);
  SelectionDelta selectionDelta=createExternalSelectionDelta(geneSelectionManager.getDelta());
  SelectionUpdateEvent event=new SelectionUpdateEvent();
  event.setSender(this);
  event.setDataDomainID(dataDomain.getDataDomainID());
  event.setSelectionDelta((SelectionDelta)selectionDelta);
  eventPublisher.triggerEvent(event);
}","public void handlePathwayElementSelection(SelectionType selectionType,int externalID){
  setDisplayListDirty();
  if (geneSelectionManager.checkStatus(selectionType,externalID)) {
    return;
  }
  PathwayVertexRep previouslySelectedVertexRep=null;
  if (geneSelectionManager.getElements(SelectionType.SELECTION).size() == 1) {
    previouslySelectedVertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep((Integer)geneSelectionManager.getElements(SelectionType.SELECTION).toArray()[0]);
  }
  geneSelectionManager.clearSelection(selectionType);
  if (metaboliteSelectionManager.getNumberOfElements(selectionType) > 0) {
    metaboliteSelectionManager.clearSelection(selectionType);
    metaboliteSelectionManager.triggerSelectionUpdateEvent();
  }
  PathwayVertexRep vertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep(externalID);
  if (vertexRep.getType() == EPathwayVertexType.compound) {
    metaboliteSelectionManager.addToType(selectionType,vertexRep.getName().hashCode());
    metaboliteSelectionManager.triggerSelectionUpdateEvent();
  }
  if (previouslySelectedVertexRep != null && selectionType == SelectionType.SELECTION) {
    if (!isControlKeyDown) {
      KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,previouslySelectedVertexRep,MAX_PATHS);
      if (vertexRep != previouslySelectedVertexRep)       allPaths=pathAlgo.getPaths(vertexRep);
      if (allPaths != null && allPaths.size() > 0) {
        if (allPaths.size() <= selectedPathID)         selectedPathID=0;
        selectedPath=allPaths.get(selectedPathID);
        allPaths.clear();
        selectedPathID=0;
        allPaths.add(selectedPath);
        triggerPathUpdate();
        isBubbleTextureDirty=true;
      }
    }
 else     if (selectedPath != null) {
      KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,selectedPath.getStartVertex(),MAX_PATHS);
      allPaths=pathAlgo.getPaths(vertexRep);
      if (allPaths != null && allPaths.size() > 0) {
        if (allPaths.size() <= selectedPathID)         selectedPathID=0;
        selectedPath=allPaths.get(selectedPathID);
        allPaths.clear();
        selectedPathID=0;
        allPaths.add(selectedPath);
        triggerPathUpdate();
        isBubbleTextureDirty=true;
      }
    }
  }
 else   if (previouslySelectedVertexRep != null && selectionType == SelectionType.MOUSE_OVER) {
    KShortestPaths<PathwayVertexRep,DefaultEdge> pathAlgo=new KShortestPaths<PathwayVertexRep,DefaultEdge>(pathway,previouslySelectedVertexRep,MAX_PATHS);
    if (vertexRep != previouslySelectedVertexRep) {
      List<GraphPath<PathwayVertexRep,DefaultEdge>> mouseOverPaths=pathAlgo.getPaths(vertexRep);
      if (mouseOverPaths != null && mouseOverPaths.size() > 0) {
        allPaths=mouseOverPaths;
        if (allPaths.size() <= selectedPathID)         selectedPathID=0;
        selectedPath=allPaths.get(selectedPathID);
        if (selectedPath != null && isControlKeyDown)         allPaths.add(selectedPath);
        isBubbleTextureDirty=true;
      }
    }
  }
  geneSelectionManager.addToType(selectionType,vertexRep.getID());
  int iConnectionID=generalManager.getIDCreator().createID(ManagedObjectType.CONNECTION);
  geneSelectionManager.addConnectionID(iConnectionID,vertexRep.getID());
  connectedElementRepresentationManager.clear(geneSelectionManager.getIDType(),selectionType);
  createConnectionLines(selectionType,iConnectionID);
  SelectionDelta selectionDelta=createExternalSelectionDelta(geneSelectionManager.getDelta());
  SelectionUpdateEvent event=new SelectionUpdateEvent();
  event.setSender(this);
  event.setDataDomainID(dataDomain.getDataDomainID());
  event.setSelectionDelta((SelectionDelta)selectionDelta);
  eventPublisher.triggerEvent(event);
}",0.9707336629693972
57717,"private void updateBubbleSetsTexture(GL2 gl){
  int groupID=bubblesetCanvas.getGroupCount() - 1;
  while (bubblesetCanvas.getGroupCount() > 0) {
    bubblesetCanvas.setCurrentGroup(groupID);
    bubblesetCanvas.removeCurrentGroup();
    groupID--;
  }
  int bbGroupID=-1;
  HashSet<PathwayVertexRep> visitedNodes=new HashSet();
  for (  GraphPath<PathwayVertexRep,DefaultEdge> path : allPaths) {
    if (path == null)     return;
    double bbItemW=10;
    double bbItemH=10;
    gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(uniqueID,PickingType.PATHWAY_PATH_SELECTION.name(),allPaths.indexOf(path)));
    float[] colorValues=new float[3];
    Integer outlineThickness;
    bbGroupID++;
    if (path == selectedPath) {
      colorValues=SelectionType.SELECTION.getColor();
      outlineThickness=3;
      bubblesetCanvas.addGroup(new Color(colorValues[0],colorValues[1],colorValues[2]),outlineThickness,true);
    }
 else {
      List<org.caleydo.core.util.color.Color> colorTable=(ColorManager.get()).getColorList(""String_Node_Str"");
      int colorID;
      if (bbGroupID < colorTable.size() - 2)       colorID=bbGroupID;
 else       colorID=colorTable.size() - 1;
      org.caleydo.core.util.color.Color c=colorTable.get(colorID);
      outlineThickness=1;
      bubblesetCanvas.addGroup(new Color(c.r,c.g,c.b),outlineThickness,true);
    }
    DefaultEdge lastEdge=null;
    for (    DefaultEdge edge : path.getEdgeList()) {
      PathwayVertexRep sourceVertexRep=pathway.getEdgeSource(edge);
      PathwayVertexRep targetVertexRep=pathway.getEdgeTarget(edge);
      bbItemW=sourceVertexRep.getWidth();
      bbItemH=sourceVertexRep.getHeight();
      double posX=sourceVertexRep.getLowerLeftCornerX();
      double posY=sourceVertexRep.getLowerLeftCornerY();
      double tX=targetVertexRep.getLowerLeftCornerX();
      double tY=targetVertexRep.getLowerLeftCornerY();
      bubblesetCanvas.addItem(bbGroupID,posX,posY,bbItemW,bbItemH);
      bubblesetCanvas.addEdge(bbGroupID,posX,posY,tX,tY);
      lastEdge=edge;
      visitedNodes.add(sourceVertexRep);
    }
    if (lastEdge != null) {
      PathwayVertexRep targetVertexRep=pathway.getEdgeTarget(lastEdge);
      double posX=targetVertexRep.getLowerLeftCornerX();
      double posY=targetVertexRep.getLowerLeftCornerY();
      bbItemW=targetVertexRep.getWidth();
      bbItemH=targetVertexRep.getHeight();
      bubblesetCanvas.addItem(bbGroupID,posX,posY,bbItemW,bbItemH);
      visitedNodes.add(targetVertexRep);
    }
    gl.glPopName();
  }
  bubblesetCanvas.setSelection(selectedPathID);
  texRenderer.setSize(pathway.getWidth(),pathway.getHeight());
  Graphics2D g2d=texRenderer.createGraphics();
  bubblesetCanvas.paint(g2d);
  g2d.dispose();
}","private void updateBubbleSetsTexture(GL2 gl){
  int groupID=bubblesetCanvas.getGroupCount() - 1;
  while (bubblesetCanvas.getGroupCount() > 0) {
    bubblesetCanvas.setCurrentGroup(groupID);
    bubblesetCanvas.removeCurrentGroup();
    groupID--;
  }
  int bbGroupID=-1;
  HashSet<PathwayVertexRep> visitedNodes=new HashSet();
  for (  GraphPath<PathwayVertexRep,DefaultEdge> path : allPaths) {
    if (path == null)     return;
    double bbItemW=10;
    double bbItemH=10;
    gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(uniqueID,PickingType.PATHWAY_PATH_SELECTION.name(),allPaths.indexOf(path)));
    float[] colorValues=new float[3];
    Integer outlineThickness;
    bbGroupID++;
    if (path == selectedPath) {
      colorValues=SelectionType.SELECTION.getColor();
      outlineThickness=3;
      bubblesetCanvas.addGroup(new Color(colorValues[0],colorValues[1],colorValues[2]),outlineThickness,true);
    }
 else {
      List<org.caleydo.core.util.color.Color> colorTable=(ColorManager.get()).getColorList(""String_Node_Str"");
      int colorID;
      if (bbGroupID < colorTable.size() - 2)       colorID=bbGroupID;
 else       colorID=colorTable.size() - 1;
      org.caleydo.core.util.color.Color c=colorTable.get(colorID);
      outlineThickness=1;
      bubblesetCanvas.addGroup(new Color(c.r,c.g,c.b),outlineThickness,true);
    }
    DefaultEdge lastEdge=null;
    for (    DefaultEdge edge : path.getEdgeList()) {
      PathwayVertexRep sourceVertexRep=pathway.getEdgeSource(edge);
      PathwayVertexRep targetVertexRep=pathway.getEdgeTarget(edge);
      bbItemW=sourceVertexRep.getWidth();
      bbItemH=sourceVertexRep.getHeight();
      double posX=sourceVertexRep.getLowerLeftCornerX();
      double posY=sourceVertexRep.getLowerLeftCornerY();
      double tX=targetVertexRep.getLowerLeftCornerX();
      double tY=targetVertexRep.getLowerLeftCornerY();
      bubblesetCanvas.addItem(bbGroupID,posX,posY,bbItemW,bbItemH);
      bubblesetCanvas.addEdge(bbGroupID,posX,posY,tX,tY);
      lastEdge=edge;
      visitedNodes.add(sourceVertexRep);
    }
    if (lastEdge != null) {
      PathwayVertexRep targetVertexRep=pathway.getEdgeTarget(lastEdge);
      double posX=targetVertexRep.getLowerLeftCornerX();
      double posY=targetVertexRep.getLowerLeftCornerY();
      bbItemW=targetVertexRep.getWidth();
      bbItemH=targetVertexRep.getHeight();
      bubblesetCanvas.addItem(bbGroupID,posX,posY,bbItemW,bbItemH);
      visitedNodes.add(targetVertexRep);
    }
    gl.glPopName();
  }
  if (allPaths.size() <= selectedPathID)   selectedPathID=0;
  bubblesetCanvas.setSelection(selectedPathID);
  texRenderer.setSize(pathway.getWidth(),pathway.getHeight());
  Graphics2D g2d=texRenderer.createGraphics();
  bubblesetCanvas.paint(g2d);
  g2d.dispose();
}",0.9890149468755628
57718,"protected void registerPickingListeners(){
  addTypePickingListener(new APickingListener(){
    @Override public void mouseOver(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      handlePathwayElementSelection(SelectionType.MOUSE_OVER,pick.getObjectID());
    }
    @Override public void clicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      if (glRemoteRenderingView != null && glRemoteRenderingView.getViewType().equals(""String_Node_Str""))       return;
      handlePathwayElementSelection(SelectionType.SELECTION,pick.getObjectID());
    }
    @Override public void doubleClicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      PathwayVertexRep vertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep(pick.getObjectID());
      if (vertexRep.getType() == EPathwayVertexType.map) {
        PathwayGraph pathway=PathwayManager.get().searchPathwayByName(vertexRep.getName(),PathwayDatabaseType.KEGG);
        if (pathway != null) {
          LoadPathwayEvent event=new LoadPathwayEvent();
          event.setSender(this);
          event.setPathwayID(pathway.getID());
          event.setDataDomainID(dataDomain.getDataDomainID());
          GeneralManager.get().getEventPublisher().triggerEvent(event);
        }
      }
 else {
      }
      handlePathwayElementSelection(SelectionType.SELECTION,pick.getObjectID());
    }
    @Override public void rightClicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      PathwayVertexRep vertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep(pick.getObjectID());
      if (vertexRep.getType() == EPathwayVertexType.map) {
        LoadPathwaysByPathwayItem menuItem=new LoadPathwaysByPathwayItem(PathwayManager.get().searchPathwayByName(vertexRep.getName(),PathwayDatabaseType.KEGG),dataDomain.getDataDomainID());
        contextMenuCreator.addContextMenuItem(menuItem);
      }
 else       if (vertexRep.getType() == EPathwayVertexType.gene) {
        for (        PathwayVertex pathwayVertex : vertexRep.getPathwayVertices()) {
          GeneMenuItemContainer contexMenuItemContainer=new GeneMenuItemContainer();
          contexMenuItemContainer.setDataDomain((ATableBasedDataDomain)dataDomain);
          contexMenuItemContainer.setData(pathwayDataDomain.getDavidIDType(),pathwayItemManager.getDavidIdByPathwayVertex((PathwayVertex)pathwayVertex));
          contextMenuCreator.addContextMenuItemContainer(contexMenuItemContainer);
        }
      }
      handlePathwayElementSelection(SelectionType.SELECTION,pick.getObjectID());
    }
  }
,PickingType.PATHWAY_ELEMENT_SELECTION.name());
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      if (allPaths == null || allPaths.size() <= pick.getObjectID())       return;
      selectedPath=allPaths.get(selectedPathID);
      setDisplayListDirty();
      triggerPathUpdate();
    }
  }
,PickingType.PATHWAY_PATH_SELECTION.name());
}","protected void registerPickingListeners(){
  addTypePickingListener(new APickingListener(){
    @Override public void mouseOver(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      handlePathwayElementSelection(SelectionType.MOUSE_OVER,pick.getObjectID());
    }
    @Override public void clicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      if (glRemoteRenderingView != null && glRemoteRenderingView.getViewType().equals(""String_Node_Str""))       return;
      handlePathwayElementSelection(SelectionType.SELECTION,pick.getObjectID());
    }
    @Override public void doubleClicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      PathwayVertexRep vertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep(pick.getObjectID());
      if (vertexRep.getType() == EPathwayVertexType.map) {
        PathwayGraph pathway=PathwayManager.get().searchPathwayByName(vertexRep.getName(),PathwayDatabaseType.KEGG);
        if (pathway != null) {
          LoadPathwayEvent event=new LoadPathwayEvent();
          event.setSender(this);
          event.setPathwayID(pathway.getID());
          event.setDataDomainID(dataDomain.getDataDomainID());
          GeneralManager.get().getEventPublisher().triggerEvent(event);
        }
      }
 else {
      }
      handlePathwayElementSelection(SelectionType.SELECTION,pick.getObjectID());
    }
    @Override public void rightClicked(    Pick pick){
      if (detailLevel == EDetailLevel.VERY_LOW) {
        return;
      }
      PathwayVertexRep vertexRep=(PathwayVertexRep)pathwayItemManager.getPathwayVertexRep(pick.getObjectID());
      if (vertexRep.getType() == EPathwayVertexType.map) {
        LoadPathwaysByPathwayItem menuItem=new LoadPathwaysByPathwayItem(PathwayManager.get().searchPathwayByName(vertexRep.getName(),PathwayDatabaseType.KEGG),dataDomain.getDataDomainID());
        contextMenuCreator.addContextMenuItem(menuItem);
      }
 else       if (vertexRep.getType() == EPathwayVertexType.gene) {
        for (        PathwayVertex pathwayVertex : vertexRep.getPathwayVertices()) {
          GeneMenuItemContainer contexMenuItemContainer=new GeneMenuItemContainer();
          contexMenuItemContainer.setDataDomain((ATableBasedDataDomain)dataDomain);
          contexMenuItemContainer.setData(pathwayDataDomain.getDavidIDType(),pathwayItemManager.getDavidIdByPathwayVertex((PathwayVertex)pathwayVertex));
          contextMenuCreator.addContextMenuItemContainer(contexMenuItemContainer);
        }
      }
      handlePathwayElementSelection(SelectionType.SELECTION,pick.getObjectID());
    }
  }
,PickingType.PATHWAY_ELEMENT_SELECTION.name());
  addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      if (allPaths == null || allPaths.size() <= pick.getObjectID())       return;
      if (allPaths.size() <= selectedPathID)       selectedPathID=0;
      selectedPath=allPaths.get(selectedPathID);
      setDisplayListDirty();
      triggerPathUpdate();
    }
  }
,PickingType.PATHWAY_PATH_SELECTION.name());
}",0.9889582333173308
57719,"@Override public void clicked(Pick pick){
  if (allPaths == null || allPaths.size() <= pick.getObjectID())   return;
  selectedPath=allPaths.get(selectedPathID);
  setDisplayListDirty();
  triggerPathUpdate();
}","@Override public void clicked(Pick pick){
  if (allPaths == null || allPaths.size() <= pick.getObjectID())   return;
  if (allPaths.size() <= selectedPathID)   selectedPathID=0;
  selectedPath=allPaths.get(selectedPathID);
  setDisplayListDirty();
  triggerPathUpdate();
}",0.8737060041407867
57720,"@Override public void init(){
  if (configuration == null || configuration.isDefaultConfiguration()) {
    if (dataSetDescription != null && dataSetDescription.isTransposeMatrix()) {
      if (configuration.isDefaultConfiguration()) {
        IDType.unregisterType(recordIDType);
        IDType.unregisterType(dimensionIDType);
        IDType.unregisterType(recordGroupIDType);
      }
      createDefaultConfigurationWithColumnsAsRecords();
    }
 else     createDefaultConfiguration();
  }
  boolean externalMappingLoaded=false;
  if (configuration.mappingFile != null) {
    IDMappingLoader.get().loadMappingFile(configuration.mappingFile);
    externalMappingLoaded=true;
  }
  if (externalMappingLoaded) {
    recordIDCategory=IDCategory.getIDCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.getIDCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.getIDType(configuration.humanReadableRecordIDType);
    humanReadableDimensionIDType=IDType.getIDType(configuration.humanReadableDimensionIDType);
  }
 else {
    recordIDCategory=IDCategory.registerCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.registerCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.registerType(configuration.humanReadableRecordIDType,recordIDCategory,EColumnType.STRING);
    humanReadableDimensionIDType=IDType.registerType(configuration.humanReadableDimensionIDType,dimensionIDCategory,EColumnType.STRING);
  }
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordIDType.setInternalType(true);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EColumnType.INT);
  dimensionIDType.setInternalType(true);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordGroupIDType.setInternalType(true);
  dimensionGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EColumnType.INT);
  IDType primaryRecordMappingType;
  if (configuration.primaryRecordMappingType != null) {
    IDType.getIDType(configuration.primaryRecordMappingType);
    primaryRecordMappingType=IDType.getIDType(configuration.primaryRecordMappingType);
  }
 else   primaryRecordMappingType=recordIDType;
  recordIDCategory.setPrimaryMappingType(primaryRecordMappingType);
  IDType primaryDimensionMappingType;
  if (configuration.primaryDimensionMappingType != null)   primaryDimensionMappingType=IDType.getIDType(configuration.primaryDimensionMappingType);
 else   primaryDimensionMappingType=dimensionIDType;
  dimensionIDCategory.setPrimaryMappingType(primaryDimensionMappingType);
  recordDenominationPlural=configuration.recordDenominationPlural;
  recordDenominationSingular=configuration.recordDenominationSingular;
  dimensionDenominationPlural=configuration.dimensionDenominationPlural;
  dimensionDenominationSingular=configuration.dimensionDenominationSingular;
  recordIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory);
  dimensionIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory);
  recordSelectionManager=new RecordSelectionManager(recordIDType);
  dimensionSelectionManager=new DimensionSelectionManager(dimensionIDType);
  recordGroupSelectionManager=new SelectionManager(recordGroupIDType);
  addIDCategory(dimensionIDCategory);
  addIDCategory(recordIDCategory);
  super.init();
}","@Override public void init(){
  if (configuration == null || configuration.isDefaultConfiguration()) {
    if (dataSetDescription != null && dataSetDescription.isTransposeMatrix()) {
      if (configuration.isDefaultConfiguration()) {
        IDType.unregisterType(recordIDType);
        IDType.unregisterType(dimensionIDType);
        IDType.unregisterType(recordGroupIDType);
        IDType.unregisterType(dimensionGroupIDType);
      }
      createDefaultConfigurationWithColumnsAsRecords();
    }
 else     createDefaultConfiguration();
  }
  boolean externalMappingLoaded=false;
  if (configuration.mappingFile != null) {
    IDMappingLoader.get().loadMappingFile(configuration.mappingFile);
    externalMappingLoaded=true;
  }
  if (externalMappingLoaded) {
    recordIDCategory=IDCategory.getIDCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.getIDCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.getIDType(configuration.humanReadableRecordIDType);
    humanReadableDimensionIDType=IDType.getIDType(configuration.humanReadableDimensionIDType);
  }
 else {
    recordIDCategory=IDCategory.registerCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.registerCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.registerType(configuration.humanReadableRecordIDType,recordIDCategory,EColumnType.STRING);
    humanReadableDimensionIDType=IDType.registerType(configuration.humanReadableDimensionIDType,dimensionIDCategory,EColumnType.STRING);
  }
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordIDType.setInternalType(true);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EColumnType.INT);
  dimensionIDType.setInternalType(true);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordGroupIDType.setInternalType(true);
  dimensionGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EColumnType.INT);
  IDType primaryRecordMappingType;
  if (configuration.primaryRecordMappingType != null) {
    IDType.getIDType(configuration.primaryRecordMappingType);
    primaryRecordMappingType=IDType.getIDType(configuration.primaryRecordMappingType);
  }
 else   primaryRecordMappingType=recordIDType;
  recordIDCategory.setPrimaryMappingType(primaryRecordMappingType);
  IDType primaryDimensionMappingType;
  if (configuration.primaryDimensionMappingType != null)   primaryDimensionMappingType=IDType.getIDType(configuration.primaryDimensionMappingType);
 else   primaryDimensionMappingType=dimensionIDType;
  dimensionIDCategory.setPrimaryMappingType(primaryDimensionMappingType);
  recordDenominationPlural=configuration.recordDenominationPlural;
  recordDenominationSingular=configuration.recordDenominationSingular;
  dimensionDenominationPlural=configuration.dimensionDenominationPlural;
  dimensionDenominationSingular=configuration.dimensionDenominationSingular;
  recordIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory);
  dimensionIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory);
  recordSelectionManager=new RecordSelectionManager(recordIDType);
  dimensionSelectionManager=new DimensionSelectionManager(dimensionIDType);
  recordGroupSelectionManager=new SelectionManager(recordGroupIDType);
  addIDCategory(dimensionIDCategory);
  addIDCategory(recordIDCategory);
  super.init();
}",0.9927998913191144
57721,"/** 
 * Returns the IDType for the typeName specified, or null if no such type is registered 
 */
public static IDType getIDType(String typeName){
  IDType requestedType=registeredTypes.get(typeName);
  if (requestedType == null)   throw new IllegalStateException(""String_Node_Str"" + typeName + ""String_Node_Str"");
  return requestedType;
}","/** 
 * Returns the IDType for the typeName specified, or null if no such type is registered
 */
public static IDType getIDType(String typeName){
  IDType requestedType=registeredTypes.get(typeName);
  if (requestedType == null)   throw new IllegalStateException(""String_Node_Str"" + typeName + ""String_Node_Str"");
  return requestedType;
}",0.9985272459499264
57722,"/** 
 * Register a new IDType. Checks whether whether the columnType is legal. If the typeName is already registered, a check is conducted whether the registered and the new one match, and if they do, the previously registered type is returned. Else an exception is thrown.
 * @param typeName see  {@link #typeName}
 * @param idCategory see  {@link #idCategory}
 * @param columnType see  {@link #columnType}
 * @return the created ID Type
 */
public static IDType registerType(String typeName,IDCategory idCategory,EColumnType columnType){
  if (!(columnType == EColumnType.STRING || columnType == EColumnType.INT))   throw new IllegalStateException(""String_Node_Str"" + columnType);
  IDType idType=registeredTypes.get(typeName);
  if (idType != null) {
    if (!idType.getIDCategory().equals(idCategory) || !idType.getColumnType().equals(columnType))     throw new IllegalStateException(""String_Node_Str"" + typeName + ""String_Node_Str""+ idType+ ""String_Node_Str""+ idCategory+ ""String_Node_Str""+ columnType);
  }
 else {
    idType=new IDType(typeName,idCategory,columnType);
    registeredTypes.put(typeName,idType);
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + typeName));
  }
  return idType;
}","/** 
 * Register a new IDType. Checks whether whether the columnType is legal. If the typeName is already registered, a check is conducted whether the registered and the new one match, and if they do, the previously registered type is returned. Else an exception is thrown.
 * @param typeName see  {@link #typeName}
 * @param idCategory see  {@link #idCategory}
 * @param columnType see  {@link #columnType}
 * @return the created ID Type
 */
public static IDType registerType(String typeName,IDCategory idCategory,EColumnType columnType){
  if (!(columnType == EColumnType.STRING || columnType == EColumnType.INT))   throw new IllegalStateException(""String_Node_Str"" + columnType);
  IDType idType=registeredTypes.get(typeName);
  if (idType != null) {
    if (!idType.getIDCategory().equals(idCategory) || !idType.getColumnType().equals(columnType))     throw new IllegalStateException(""String_Node_Str"" + typeName + ""String_Node_Str""+ idCategory+ ""String_Node_Str""+ columnType+ ""String_Node_Str""+ ""String_Node_Str""+ idType+ ""String_Node_Str""+ idType.getIDCategory()+ ""String_Node_Str""+ idType.getColumnType());
  }
 else {
    idType=new IDType(typeName,idCategory,columnType);
    registeredTypes.put(typeName,idType);
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + typeName));
  }
  return idType;
}",0.940257711831316
57723,"public ArrayList<ColumnDescription> getParsingPattern(){
  if (parsingPattern != null && !(parsingPattern.size() == 0))   return parsingPattern;
  if (parsingRules == null)   return null;
  parsingPattern=new ArrayList<ColumnDescription>();
  Collections.sort(parsingRules);
  int numberOfColumns=0;
  try {
    BufferedReader reader=GeneralManager.get().getResourceLoader().getResource(dataSourcePath);
    for (int countHeaderLines=0; countHeaderLines < numberOfHeaderLines; countHeaderLines++) {
      reader.readLine();
    }
    String dataLine=reader.readLine();
    String[] columns=dataLine.split(delimiter);
    numberOfColumns=columns.length;
  }
 catch (  IOException e) {
    Logger.log(new Status(Status.ERROR,""String_Node_Str"",""String_Node_Str"" + dataSourcePath));
    throw new IllegalStateException(""String_Node_Str"" + dataSourcePath);
  }
  ParsingRule currentParsingRule=null;
  ParsingRule previousParsingRule=null;
  Iterator<ParsingRule> parsingRuleIterator=parsingRules.iterator();
  for (int columnCount=0; columnCount < numberOfColumns; columnCount++) {
    if (currentParsingRule == null) {
      if (parsingRuleIterator.hasNext()) {
        currentParsingRule=parsingRuleIterator.next();
        if (currentParsingRule.getFromColumn() < 0 || currentParsingRule.getToColumn() > numberOfColumns || (currentParsingRule.getToColumn() >= 0 && currentParsingRule.isParseUntilEnd())) {
          throw new IllegalStateException(""String_Node_Str"" + dataSourcePath + ""String_Node_Str""+ currentParsingRule);
        }
        if (previousParsingRule != null) {
          if (previousParsingRule.getToColumn() >= currentParsingRule.getFromColumn()) {
            throw new IllegalStateException(""String_Node_Str"" + previousParsingRule + ""String_Node_Str""+ currentParsingRule);
          }
        }
      }
 else {
        break;
      }
    }
    if (columnCount < currentParsingRule.getFromColumn()) {
      continue;
    }
    if (currentParsingRule.getToColumn() < 0 && !currentParsingRule.isParseUntilEnd()) {
      parsingPattern.add(new ColumnDescription(columnCount,currentParsingRule.getColumnDescripton().getDataType(),currentParsingRule.getColumnDescripton().getColumnType()));
      previousParsingRule=currentParsingRule;
      currentParsingRule=null;
      continue;
    }
    if (columnCount < currentParsingRule.getToColumn() || currentParsingRule.isParseUntilEnd()) {
      parsingPattern.add(new ColumnDescription(columnCount,currentParsingRule.getColumnDescripton().getDataType(),currentParsingRule.getColumnDescripton().getColumnType()));
      continue;
    }
    if (columnCount == currentParsingRule.getToColumn()) {
      parsingPattern.add(new ColumnDescription(columnCount,currentParsingRule.getColumnDescripton().getDataType(),currentParsingRule.getColumnDescripton().getColumnType()));
      previousParsingRule=currentParsingRule;
      currentParsingRule=null;
      continue;
    }
  }
  if (parsingPattern.size() == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return parsingPattern;
}","public ArrayList<ColumnDescription> getParsingPattern(){
  if (parsingPattern != null && !(parsingPattern.size() == 0))   return parsingPattern;
  if (parsingRules == null)   return null;
  parsingPattern=new ArrayList<ColumnDescription>();
  Collections.sort(parsingRules);
  int numberOfColumns=0;
  try {
    BufferedReader reader=GeneralManager.get().getResourceLoader().getResource(dataSourcePath);
    for (int countHeaderLines=0; countHeaderLines < numberOfHeaderLines; countHeaderLines++) {
      reader.readLine();
    }
    String dataLine=reader.readLine();
    String[] columns=dataLine.split(delimiter);
    numberOfColumns=columns.length;
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"" + dataSourcePath);
  }
  ParsingRule currentParsingRule=null;
  ParsingRule previousParsingRule=null;
  Iterator<ParsingRule> parsingRuleIterator=parsingRules.iterator();
  for (int columnCount=0; columnCount < numberOfColumns; columnCount++) {
    if (currentParsingRule == null) {
      if (parsingRuleIterator.hasNext()) {
        currentParsingRule=parsingRuleIterator.next();
        if (currentParsingRule.getFromColumn() < 0 || currentParsingRule.getToColumn() > numberOfColumns || (currentParsingRule.getToColumn() >= 0 && currentParsingRule.isParseUntilEnd())) {
          throw new IllegalStateException(""String_Node_Str"" + dataSourcePath + ""String_Node_Str""+ currentParsingRule);
        }
        if (previousParsingRule != null) {
          if (previousParsingRule.getToColumn() >= currentParsingRule.getFromColumn()) {
            throw new IllegalStateException(""String_Node_Str"" + previousParsingRule + ""String_Node_Str""+ currentParsingRule);
          }
        }
      }
 else {
        break;
      }
    }
    if (columnCount < currentParsingRule.getFromColumn()) {
      continue;
    }
    if (currentParsingRule.getToColumn() < 0 && !currentParsingRule.isParseUntilEnd()) {
      parsingPattern.add(new ColumnDescription(columnCount,currentParsingRule.getColumnDescripton().getDataType(),currentParsingRule.getColumnDescripton().getColumnType()));
      previousParsingRule=currentParsingRule;
      currentParsingRule=null;
      continue;
    }
    if (columnCount < currentParsingRule.getToColumn() || currentParsingRule.isParseUntilEnd()) {
      parsingPattern.add(new ColumnDescription(columnCount,currentParsingRule.getColumnDescripton().getDataType(),currentParsingRule.getColumnDescripton().getColumnType()));
      continue;
    }
    if (columnCount == currentParsingRule.getToColumn()) {
      parsingPattern.add(new ColumnDescription(columnCount,currentParsingRule.getColumnDescripton().getDataType(),currentParsingRule.getColumnDescripton().getColumnType()));
      previousParsingRule=currentParsingRule;
      currentParsingRule=null;
      continue;
    }
  }
  if (parsingPattern.size() == 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  return parsingPattern;
}",0.3098919368246051
57724,"@Override public Object start(IApplicationContext context) throws Exception {
  String[] runConfigParameters=(String[])context.getArguments().get(""String_Node_Str"");
  String outputCaleydoProjectFilePath=""String_Node_Str"";
  if (runConfigParameters == null || runConfigParameters.length != 2) {
    dataSetDescriptionFilePath=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
    outputCaleydoProjectFilePath=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ (new SimpleDateFormat(""String_Node_Str"").format(new Date()))+ ""String_Node_Str"";
  }
 else {
    outputCaleydoProjectFilePath=runConfigParameters[0];
    dataSetDescriptionFilePath=runConfigParameters[1];
  }
  GeneralManager.get().init();
  GeneralManager.get().getBasicInfo().setOrganism(Organism.MUS_MUSCULUS);
  createJAXBContext();
  DataSetDescriptionCollection dataSetMetInfoCollection=deserialzeDataSetMetaInfo();
  for (  DataSetDescription dataTypeSet : dataSetMetInfoCollection.getDataSetDescriptionCollection())   loadSources(dataTypeSet);
  new ProjectSaver().save(outputCaleydoProjectFilePath,true);
  return IApplication.EXIT_OK;
}","@Override public Object start(IApplicationContext context) throws Exception {
  String[] runConfigParameters=(String[])context.getArguments().get(""String_Node_Str"");
  String outputCaleydoProjectFilePath=""String_Node_Str"";
  if (runConfigParameters == null || runConfigParameters.length != 2) {
    dataSetDescriptionFilePath=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str"";
    outputCaleydoProjectFilePath=System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ (new SimpleDateFormat(""String_Node_Str"").format(new Date()))+ ""String_Node_Str"";
  }
 else {
    outputCaleydoProjectFilePath=runConfigParameters[0];
    dataSetDescriptionFilePath=runConfigParameters[1];
  }
  GeneralManager.get().init();
  createJAXBContext();
  DataSetDescriptionCollection dataSetMetInfoCollection=deserialzeDataSetMetaInfo();
  for (  DataSetDescription dataTypeSet : dataSetMetInfoCollection.getDataSetDescriptionCollection())   loadSources(dataTypeSet);
  new ProjectSaver().save(outputCaleydoProjectFilePath,true);
  return IApplication.EXIT_OK;
}",0.9682675814751286
57725,"private void loadSources(DataSetDescription dataSetDescription) throws FileNotFoundException, IOException {
  ATableBasedDataDomain dataDomain=loadData(dataSetDescription);
  loadGroupings(dataDomain,dataSetDescription);
  createSampleOfGenes(dataDomain,runClusteringOnDimensions(dataDomain,true,5).getDimensionResult());
  runClusteringOnDimensions(dataDomain,true,6);
  runClusteringOnRecords(dataDomain,true,6);
}","private void loadSources(DataSetDescription dataSetDescription) throws FileNotFoundException, IOException {
  ATableBasedDataDomain dataDomain=loadData(dataSetDescription);
  loadGroupings(dataDomain,dataSetDescription);
}",0.6959247648902821
57726,"private void overlayBubbleSets(GL2 gl){
  if (allPaths == null)   return;
  updateBubbleSetsTexture(gl);
  isBubbleTextureDirty=false;
  float textureWidth=PathwayRenderStyle.SCALING_FACTOR_X * pathway.getWidth();
  float textureHeight=PathwayRenderStyle.SCALING_FACTOR_Y * pathway.getHeight();
  Texture tex=texRenderer.getTexture();
  gl.glEnable(GL2.GL_BLEND);
  gl.glBlendFunc(GL2.GL_ONE,GL2.GL_ONE_MINUS_SRC_ALPHA);
  tex.enable();
  tex.bind();
  gl.glBegin(GL2.GL_QUADS);
  gl.glTexCoord2f(0,1);
  gl.glVertex3f(0.0f,0.0f,0.0f);
  gl.glTexCoord2f(1,1);
  gl.glVertex3f(textureWidth,0.0f,0.0f);
  gl.glTexCoord2f(1,0);
  gl.glVertex3f(textureWidth,textureHeight,0.0f);
  gl.glTexCoord2f(0,0);
  gl.glVertex3f(0.0f,textureHeight,0.0f);
  gl.glEnd();
  tex.disable();
}","private void overlayBubbleSets(GL2 gl){
  if (allPaths == null)   return;
  texRenderer.setColor(1.0f,1.0f,1.0f,0.75f);
  if (isBubbleTextureDirty) {
    updateBubbleSetsTexture(gl);
    isBubbleTextureDirty=false;
  }
  bubbleSetsTexture=texRenderer.getTexture();
  float textureWidth=PathwayRenderStyle.SCALING_FACTOR_X * pathway.getWidth();
  float textureHeight=PathwayRenderStyle.SCALING_FACTOR_Y * pathway.getHeight();
  gl.glEnable(GL2.GL_BLEND);
  gl.glBlendFunc(GL2.GL_ONE,GL2.GL_ONE_MINUS_SRC_ALPHA);
  bubbleSetsTexture.enable();
  bubbleSetsTexture.bind();
  gl.glBegin(GL2.GL_QUADS);
  gl.glTexCoord2f(0,1);
  gl.glVertex3f(0.0f,0.0f,0.0f);
  gl.glTexCoord2f(1,1);
  gl.glVertex3f(textureWidth,0.0f,0.0f);
  gl.glTexCoord2f(1,0);
  gl.glVertex3f(textureWidth,textureHeight,0.0f);
  gl.glTexCoord2f(0,0);
  gl.glVertex3f(0.0f,textureHeight,0.0f);
  gl.glEnd();
  bubbleSetsTexture.disable();
}",0.8474374255065554
57727,"private void updateBubbleSetsTexture(GL2 gl){
  int groupID=bubblesetCanvas.getGroupCount() - 1;
  while (bubblesetCanvas.getGroupCount() > 0) {
    bubblesetCanvas.setCurrentGroup(groupID);
    bubblesetCanvas.removeCurrentGroup();
    groupID--;
  }
  final double bbItemW=10;
  final double bbItemH=10;
  int bbGroupID=0;
  for (  GraphPath<PathwayVertexRep,DefaultEdge> path : allPaths) {
    bubblesetCanvas.addGroup();
    gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(uniqueID,PickingType.PATHWAY_PATH_SELECTION.name(),allPaths.indexOf(path)));
    if (path == selectedPath)     gl.glColor4fv(PathwayRenderStyle.PATH_COLOR_SELECTED,0);
 else     gl.glColor4fv(PathwayRenderStyle.PATH_COLOR,0);
    DefaultEdge lastEdge=null;
    for (    DefaultEdge edge : path.getEdgeList()) {
      PathwayVertexRep sourceVertexRep=pathway.getEdgeSource(edge);
      double posX=sourceVertexRep.getXOrigin();
      double posY=sourceVertexRep.getYOrigin();
      bubblesetCanvas.addItem(bbGroupID,posX,posY,bbItemW,bbItemH);
      lastEdge=edge;
    }
    if (lastEdge != null) {
      PathwayVertexRep targetVertexRep=pathway.getEdgeTarget(lastEdge);
      double posX=targetVertexRep.getXOrigin();
      double posY=targetVertexRep.getYOrigin();
      bubblesetCanvas.addItem(bbGroupID,posX,posY,bbItemW,bbItemH);
    }
    gl.glPopName();
    bbGroupID++;
  }
  texRenderer.setSize(pathway.getWidth(),pathway.getHeight());
  texRenderer.setColor(1.0f,1.0f,1.0f,0.75f);
  Graphics2D g2d=texRenderer.createGraphics();
  bubblesetCanvas.paint(g2d);
  g2d.dispose();
}","private void updateBubbleSetsTexture(GL2 gl){
  int groupID=bubblesetCanvas.getGroupCount() - 1;
  while (bubblesetCanvas.getGroupCount() > 0) {
    bubblesetCanvas.setCurrentGroup(groupID);
    bubblesetCanvas.removeCurrentGroup();
    groupID--;
  }
  final double bbItemW=10;
  final double bbItemH=10;
  int bbGroupID=0;
  for (  GraphPath<PathwayVertexRep,DefaultEdge> path : allPaths) {
    bubblesetCanvas.addGroup();
    gl.glPushName(generalManager.getViewManager().getPickingManager().getPickingID(uniqueID,PickingType.PATHWAY_PATH_SELECTION.name(),allPaths.indexOf(path)));
    if (path == selectedPath)     gl.glColor4fv(PathwayRenderStyle.PATH_COLOR_SELECTED,0);
 else     gl.glColor4fv(PathwayRenderStyle.PATH_COLOR,0);
    DefaultEdge lastEdge=null;
    for (    DefaultEdge edge : path.getEdgeList()) {
      PathwayVertexRep sourceVertexRep=pathway.getEdgeSource(edge);
      double posX=sourceVertexRep.getXOrigin();
      double posY=sourceVertexRep.getYOrigin();
      bubblesetCanvas.addItem(bbGroupID,posX,posY,bbItemW,bbItemH);
      lastEdge=edge;
    }
    if (lastEdge != null) {
      PathwayVertexRep targetVertexRep=pathway.getEdgeTarget(lastEdge);
      double posX=targetVertexRep.getXOrigin();
      double posY=targetVertexRep.getYOrigin();
      bubblesetCanvas.addItem(bbGroupID,posX,posY,bbItemW,bbItemH);
    }
    gl.glPopName();
    bbGroupID++;
  }
  texRenderer.setSize(pathway.getWidth(),pathway.getHeight());
  Graphics2D g2d=texRenderer.createGraphics();
  bubblesetCanvas.paint(g2d);
  g2d.dispose();
}",0.9503184713375796
57728,"@Override public void initLocal(final GL2 gl){
  init(gl);
  texRenderer=new TextureRenderer(1280,768,true);
  texRenderer.setColor(1.0f,1.0f,1.0f,0.75f);
}","@Override public void initLocal(final GL2 gl){
  init(gl);
  texRenderer=new TextureRenderer(1280,768,true);
}",0.8270676691729323
57729,"@Override public void destroyHandler(){
  super.destroyHandler();
  hashKgmlEntryIdToVertexRep.clear();
  hashKgmlNameToVertexRep.clear();
  hashKgmlReactionNameToVertexRep.clear();
}","@Override public void destroyHandler(){
  super.destroyHandler();
  hashKgmlEntryIdToVertexRep.clear();
  hashKgmlReactionNameToVertexRep.clear();
}",0.8942598187311178
57730,"/** 
 * Reacts on the elements of the pathway tag. An example pathway tag looks like this: <pathway name=""path:map00271"" org=""map"" number=""00271"" title=""Methionine metabolism"" image=""http://www.genome.jp/kegg/pathway/map/map00271.gif"" link=""http://www.genome.jp/dbget-bin/show_pathway?map00271"">
 */
protected void handlePathwayTag(){
  String name=""String_Node_Str"";
  String title=""String_Node_Str"";
  String sImageLink=""String_Node_Str"";
  String externalLink=""String_Node_Str"";
  for (int attributeIndex=0; attributeIndex < attributes.getLength(); attributeIndex++) {
    attributeName=attributes.getLocalName(attributeIndex);
    if (""String_Node_Str"".equals(attributeName)) {
      attributeName=attributes.getQName(attributeIndex);
    }
    if (attributeName.equals(""String_Node_Str"")) {
      name=attributes.getValue(attributeIndex);
    }
 else     if (attributeName.equals(""String_Node_Str"")) {
      title=attributes.getValue(attributeIndex);
    }
 else     if (attributeName.equals(""String_Node_Str"")) {
      sImageLink=attributes.getValue(attributeIndex);
    }
 else     if (attributeName.equals(""String_Node_Str"")) {
      externalLink=attributes.getValue(attributeIndex);
    }
  }
  if (title.length() == 0) {
    title=""String_Node_Str"";
  }
  String pathwayTexturePath=sImageLink.substring(sImageLink.lastIndexOf('/') + 1,sImageLink.length());
  pathwayTexturePath=pathwayTexturePath.replace(""String_Node_Str"",""String_Node_Str"");
  currentPathway=pathwayManager.createPathway(PathwayDatabaseType.KEGG,name,title,pathwayTexturePath,externalLink);
  hashKgmlEntryIdToVertexRep.clear();
  hashKgmlNameToVertexRep.clear();
  hashKgmlReactionNameToVertexRep.clear();
  currentEntryId=-1;
  currentReactionName=null;
  currentReactionType=null;
  currentVertices.clear();
  currentVertexGroupRep=null;
}","/** 
 * Reacts on the elements of the pathway tag. An example pathway tag looks like this: <pathway name=""path:map00271"" org=""map"" number=""00271"" title=""Methionine metabolism"" image=""http://www.genome.jp/kegg/pathway/map/map00271.gif"" link=""http://www.genome.jp/dbget-bin/show_pathway?map00271"">
 */
protected void handlePathwayTag(){
  String name=""String_Node_Str"";
  String title=""String_Node_Str"";
  String sImageLink=""String_Node_Str"";
  String externalLink=""String_Node_Str"";
  for (int attributeIndex=0; attributeIndex < attributes.getLength(); attributeIndex++) {
    attributeName=attributes.getLocalName(attributeIndex);
    if (""String_Node_Str"".equals(attributeName)) {
      attributeName=attributes.getQName(attributeIndex);
    }
    if (attributeName.equals(""String_Node_Str"")) {
      name=attributes.getValue(attributeIndex);
    }
 else     if (attributeName.equals(""String_Node_Str"")) {
      title=attributes.getValue(attributeIndex);
    }
 else     if (attributeName.equals(""String_Node_Str"")) {
      sImageLink=attributes.getValue(attributeIndex);
    }
 else     if (attributeName.equals(""String_Node_Str"")) {
      externalLink=attributes.getValue(attributeIndex);
    }
  }
  if (title.length() == 0) {
    title=""String_Node_Str"";
  }
  String pathwayTexturePath=sImageLink.substring(sImageLink.lastIndexOf('/') + 1,sImageLink.length());
  pathwayTexturePath=pathwayTexturePath.replace(""String_Node_Str"",""String_Node_Str"");
  currentPathway=pathwayManager.createPathway(PathwayDatabaseType.KEGG,name,title,pathwayTexturePath,externalLink);
  hashKgmlEntryIdToVertexRep.clear();
  hashKgmlReactionNameToVertexRep.clear();
  currentEntryId=-1;
  currentReactionName=null;
  currentReactionType=null;
  currentVertices.clear();
  currentVertexGroupRep=null;
}",0.9902912621359224
57731,"/** 
 * Reacts on the elements of the reaction product tag. An example reaction product tag looks like this: <product name=""cpd:C02291""/>
 */
protected void handleReactionProductTag(){
  String reactionProductName=""String_Node_Str"";
  for (int attributeIndex=0; attributeIndex < attributes.getLength(); attributeIndex++) {
    attributeName=attributes.getLocalName(attributeIndex);
    if (""String_Node_Str"".equals(attributeName)) {
      attributeName=attributes.getQName(attributeIndex);
    }
    if (attributeName.equals(""String_Node_Str"")) {
      reactionProductName=attributes.getValue(attributeIndex);
    }
  }
  PathwayVertexRep sourceVertexRep=hashKgmlReactionNameToVertexRep.get(currentReactionName);
  PathwayVertexRep targetVertexRep=hashKgmlNameToVertexRep.get(reactionProductName);
  if (currentPathway.getEdge(sourceVertexRep,targetVertexRep) != null && sourceVertexRep.getType().equals(EPathwayVertexType.group))   return;
  PathwayReactionEdgeRep pathwayReactionEdgeRep=new PathwayReactionEdgeRep(currentReactionType);
  try {
    currentPathway.addEdge(sourceVertexRep,targetVertexRep,pathwayReactionEdgeRep);
    if (currentReactionType == EPathwayReactionEdgeType.reversible) {
      pathwayReactionEdgeRep=new PathwayReactionEdgeRep(currentReactionType);
      currentPathway.addEdge(targetVertexRep,sourceVertexRep,pathwayReactionEdgeRep);
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * Reacts on the elements of the reaction product tag. An example reaction product tag looks like this: <product name=""cpd:C02291""/>
 */
protected void handleReactionProductTag(){
  Integer reactionProductID=-1;
  for (int attributeIndex=0; attributeIndex < attributes.getLength(); attributeIndex++) {
    attributeName=attributes.getLocalName(attributeIndex);
    if (""String_Node_Str"".equals(attributeName)) {
      attributeName=attributes.getQName(attributeIndex);
    }
    if (attributeName.equals(""String_Node_Str"")) {
      reactionProductID=Integer.valueOf(attributes.getValue(attributeIndex));
    }
  }
  PathwayVertexRep sourceVertexRep=hashKgmlReactionNameToVertexRep.get(currentReactionName);
  PathwayVertexRep targetVertexRep=hashKgmlEntryIdToVertexRep.get(reactionProductID);
  if (currentPathway.getEdge(sourceVertexRep,targetVertexRep) != null && sourceVertexRep.getType().equals(EPathwayVertexType.group))   return;
  PathwayReactionEdgeRep pathwayReactionEdgeRep=new PathwayReactionEdgeRep(currentReactionType);
  try {
    currentPathway.addEdge(sourceVertexRep,targetVertexRep,pathwayReactionEdgeRep);
    if (currentReactionType == EPathwayReactionEdgeType.reversible) {
      pathwayReactionEdgeRep=new PathwayReactionEdgeRep(currentReactionType);
      currentPathway.addEdge(targetVertexRep,sourceVertexRep,pathwayReactionEdgeRep);
    }
  }
 catch (  Exception e) {
  }
}",0.8240740740740741
57732,"/** 
 * Reacts on the elements of the reaction substrate tag. An example reaction substrate tag looks like this: <substrate name=""cpd:C01118""/>
 */
protected void handleReactionSubstrateTag(){
  String reactionSubstrateName=""String_Node_Str"";
  for (int attributeIndex=0; attributeIndex < attributes.getLength(); attributeIndex++) {
    attributeName=attributes.getLocalName(attributeIndex);
    if (""String_Node_Str"".equals(attributeName)) {
      attributeName=attributes.getQName(attributeIndex);
    }
    if (attributeName.equals(""String_Node_Str"")) {
      reactionSubstrateName=attributes.getValue(attributeIndex);
    }
  }
  PathwayVertexRep sourceVertexRep=hashKgmlNameToVertexRep.get(reactionSubstrateName);
  PathwayVertexRep targetVertexRep=hashKgmlReactionNameToVertexRep.get(currentReactionName);
  if (currentPathway.getEdge(sourceVertexRep,targetVertexRep) != null && targetVertexRep.getType().equals(EPathwayVertexType.group))   return;
  PathwayReactionEdgeRep pathwayReactionEdgeRep=new PathwayReactionEdgeRep(currentReactionType);
  try {
    currentPathway.addEdge(sourceVertexRep,targetVertexRep,pathwayReactionEdgeRep);
    if (currentReactionType == EPathwayReactionEdgeType.reversible) {
      pathwayReactionEdgeRep=new PathwayReactionEdgeRep(currentReactionType);
      currentPathway.addEdge(targetVertexRep,sourceVertexRep,pathwayReactionEdgeRep);
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * Reacts on the elements of the reaction substrate tag. An example reaction substrate tag looks like this: <substrate name=""cpd:C01118""/>
 */
protected void handleReactionSubstrateTag(){
  Integer reactionSubstrateID=-1;
  for (int attributeIndex=0; attributeIndex < attributes.getLength(); attributeIndex++) {
    attributeName=attributes.getLocalName(attributeIndex);
    if (""String_Node_Str"".equals(attributeName)) {
      attributeName=attributes.getQName(attributeIndex);
    }
    if (attributeName.equals(""String_Node_Str"")) {
      reactionSubstrateID=Integer.valueOf(attributes.getValue(attributeIndex));
    }
  }
  PathwayVertexRep sourceVertexRep=hashKgmlEntryIdToVertexRep.get(reactionSubstrateID);
  PathwayVertexRep targetVertexRep=hashKgmlReactionNameToVertexRep.get(currentReactionName);
  if (currentPathway.getEdge(sourceVertexRep,targetVertexRep) != null && targetVertexRep.getType().equals(EPathwayVertexType.group))   return;
  PathwayReactionEdgeRep pathwayReactionEdgeRep=new PathwayReactionEdgeRep(currentReactionType);
  try {
    currentPathway.addEdge(sourceVertexRep,targetVertexRep,pathwayReactionEdgeRep);
    if (currentReactionType == EPathwayReactionEdgeType.reversible) {
      pathwayReactionEdgeRep=new PathwayReactionEdgeRep(currentReactionType);
      currentPathway.addEdge(targetVertexRep,sourceVertexRep,pathwayReactionEdgeRep);
    }
  }
 catch (  Exception e) {
  }
}",0.8765867418899859
57733,"/** 
 * Reacts on the elements of the graphics tag. An example graphics tag looks like this: <graphics name=""1.8.4.1"" fgcolor=""#000000"" bgcolor=""#FFFFFF"" type=""rectangle"" x=""142"" y=""304"" width=""45"" height=""17""/>
 */
protected void handleGraphicsTag(){
  String name=""String_Node_Str"";
  String shapeType=""String_Node_Str"";
  short height=0;
  short width=0;
  short x=0;
  short y=0;
  for (int attributeIndex=0; attributeIndex < attributes.getLength(); attributeIndex++) {
    attributeName=attributes.getLocalName(attributeIndex);
    try {
      if (""String_Node_Str"".equals(attributeName)) {
        attributeName=attributes.getQName(attributeIndex);
      }
      if (attributeName.equals(""String_Node_Str"")) {
        name=attributes.getValue(attributeIndex);
      }
 else       if (attributeName.equals(""String_Node_Str"")) {
        height=new Short(attributes.getValue(attributeIndex));
      }
 else       if (attributeName.equals(""String_Node_Str"")) {
        width=new Short(attributes.getValue(attributeIndex));
      }
 else       if (attributeName.equals(""String_Node_Str"")) {
        x=new Short(attributes.getValue(attributeIndex));
      }
 else       if (attributeName.equals(""String_Node_Str"")) {
        y=new Short(attributes.getValue(attributeIndex));
      }
 else       if (attributeName.equals(""String_Node_Str"")) {
        shapeType=attributes.getValue(attributeIndex);
      }
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
  }
  if (currentVertices.isEmpty()) {
    return;
  }
  if (currentVertices.get(0).getType().equals(EPathwayVertexType.group)) {
    currentVertexGroupRep=pathwayItemManager.createVertexGroupRep(currentPathway);
    hashKgmlEntryIdToVertexRep.put(currentEntryId,currentVertexGroupRep);
    hashKgmlNameToVertexRep.put(currentVertices.get(0).getName(),currentVertexGroupRep);
  }
 else {
    PathwayVertexRep vertexRep=pathwayItemManager.createVertexRep(currentPathway,currentVertices,name,shapeType,x,y,width,height);
    hashKgmlEntryIdToVertexRep.put(currentEntryId,vertexRep);
    hashKgmlNameToVertexRep.put(currentVertices.get(0).getName(),vertexRep);
    if (currentReactionName != null && !currentReactionName.isEmpty()) {
      if (hashKgmlReactionNameToVertexRep.get(currentReactionName) != null) {
        PathwayVertexRep alreadyPresentReactionNode=hashKgmlReactionNameToVertexRep.get(currentReactionName);
        if (alreadyPresentReactionNode instanceof PathwayVertexGroupRep) {
          ((PathwayVertexGroupRep)alreadyPresentReactionNode).addVertexRep(vertexRep);
        }
 else {
          PathwayVertexGroupRep vertexGroupRep=pathwayItemManager.createVertexGroupRep(currentPathway);
          vertexGroupRep.addVertexRep(alreadyPresentReactionNode);
          vertexGroupRep.addVertexRep(vertexRep);
          hashKgmlReactionNameToVertexRep.remove(alreadyPresentReactionNode);
          hashKgmlReactionNameToVertexRep.put(currentReactionName,vertexGroupRep);
        }
      }
 else {
        hashKgmlReactionNameToVertexRep.put(currentReactionName,vertexRep);
      }
    }
  }
}","/** 
 * Reacts on the elements of the graphics tag. An example graphics tag looks like this: <graphics name=""1.8.4.1"" fgcolor=""#000000"" bgcolor=""#FFFFFF"" type=""rectangle"" x=""142"" y=""304"" width=""45"" height=""17""/>
 */
protected void handleGraphicsTag(){
  String name=""String_Node_Str"";
  String shapeType=""String_Node_Str"";
  short height=0;
  short width=0;
  short x=0;
  short y=0;
  for (int attributeIndex=0; attributeIndex < attributes.getLength(); attributeIndex++) {
    attributeName=attributes.getLocalName(attributeIndex);
    try {
      if (""String_Node_Str"".equals(attributeName)) {
        attributeName=attributes.getQName(attributeIndex);
      }
      if (attributeName.equals(""String_Node_Str"")) {
        name=attributes.getValue(attributeIndex);
      }
 else       if (attributeName.equals(""String_Node_Str"")) {
        height=new Short(attributes.getValue(attributeIndex));
      }
 else       if (attributeName.equals(""String_Node_Str"")) {
        width=new Short(attributes.getValue(attributeIndex));
      }
 else       if (attributeName.equals(""String_Node_Str"")) {
        x=new Short(attributes.getValue(attributeIndex));
      }
 else       if (attributeName.equals(""String_Node_Str"")) {
        y=new Short(attributes.getValue(attributeIndex));
      }
 else       if (attributeName.equals(""String_Node_Str"")) {
        shapeType=attributes.getValue(attributeIndex);
      }
    }
 catch (    NumberFormatException e) {
      e.printStackTrace();
    }
  }
  if (currentVertices.isEmpty()) {
    return;
  }
  if (currentVertices.get(0).getType().equals(EPathwayVertexType.group)) {
    currentVertexGroupRep=pathwayItemManager.createVertexGroupRep(currentPathway);
    hashKgmlEntryIdToVertexRep.put(currentEntryId,currentVertexGroupRep);
  }
 else {
    PathwayVertexRep vertexRep=pathwayItemManager.createVertexRep(currentPathway,currentVertices,name,shapeType,x,y,width,height);
    hashKgmlEntryIdToVertexRep.put(currentEntryId,vertexRep);
    if (currentReactionName != null && !currentReactionName.isEmpty()) {
      if (hashKgmlReactionNameToVertexRep.get(currentReactionName) != null) {
        PathwayVertexRep alreadyPresentReactionNode=hashKgmlReactionNameToVertexRep.get(currentReactionName);
        if (alreadyPresentReactionNode instanceof PathwayVertexGroupRep) {
          ((PathwayVertexGroupRep)alreadyPresentReactionNode).addVertexRep(vertexRep);
        }
 else {
          PathwayVertexGroupRep vertexGroupRep=pathwayItemManager.createVertexGroupRep(currentPathway);
          vertexGroupRep.addVertexRep(alreadyPresentReactionNode);
          vertexGroupRep.addVertexRep(vertexRep);
          hashKgmlReactionNameToVertexRep.remove(alreadyPresentReactionNode);
          hashKgmlReactionNameToVertexRep.put(currentReactionName,vertexGroupRep);
        }
      }
 else {
        hashKgmlReactionNameToVertexRep.put(currentReactionName,vertexRep);
      }
    }
  }
}",0.7068620919387075
57734,"@Override public void render(GL2 gl){
  pushNames(gl);
  gl.glColor4fv(color,0);
  gl.glBegin(GL2.GL_QUADS);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
  gl.glPushAttrib(GL2.GL_LINE_BIT);
  gl.glLineWidth(borderWidth);
  gl.glColor4fv(borderColor,0);
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(0,y,0);
  gl.glVertex3f(0,y,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glEnd();
  gl.glPopAttrib();
  popNames(gl);
}","@Override public void render(GL2 gl){
  pushNames(gl);
  gl.glColor4fv(colorProvider == null ? color : colorProvider.getColor(),0);
  gl.glBegin(GL2.GL_QUADS);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
  gl.glPushAttrib(GL2.GL_LINE_BIT);
  gl.glLineWidth(borderWidth);
  gl.glColor4fv(borderColor,0);
  gl.glBegin(GL2.GL_LINES);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(0,y,0);
  gl.glVertex3f(0,y,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glEnd();
  gl.glPopAttrib();
  popNames(gl);
}",0.9585028478437754
57735,"/** 
 * Constructor.
 * @param color Color of the rendered rectangle. The array must have a length of 4 specifying the RGBA values of the color.
 * @param borderColor Color of the rendered rectangle's border. The array must have a length of 4 specifying the RGBA values of the color.
 * @param borderWidth Width of the rendered rectangle's border.
 */
public ColorRenderer(float[] color,float[] borderColor,int borderWidth){
  this.color=color;
  this.borderColor=borderColor;
  this.borderWidth=borderWidth;
  drawBorder=true;
}","public ColorRenderer(IColorProvider colorProvider){
  this.colorProvider=colorProvider;
}",0.1974110032362459
57736,"@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (linearizePathwayPathEventListener != null) {
    eventPublisher.removeListener(linearizePathwayPathEventListener);
    linearizePathwayPathEventListener=null;
  }
  if (addDataContainersListener != null) {
    eventPublisher.removeListener(addDataContainersListener);
    addDataContainersListener=null;
  }
  if (removeLinearizedNodeEventListener != null) {
    eventPublisher.removeListener(removeLinearizedNodeEventListener);
    removeLinearizedNodeEventListener=null;
  }
}","@Override public void unregisterEventListeners(){
  super.unregisterEventListeners();
  if (linearizePathwayPathEventListener != null) {
    eventPublisher.removeListener(linearizePathwayPathEventListener);
    linearizePathwayPathEventListener=null;
  }
  if (addDataContainersListener != null) {
    eventPublisher.removeListener(addDataContainersListener);
    addDataContainersListener=null;
  }
  if (removeLinearizedNodeEventListener != null) {
    eventPublisher.removeListener(removeLinearizedNodeEventListener);
    removeLinearizedNodeEventListener=null;
  }
  geneSelectionManager.unregisterEventListeners();
}",0.9571788413098236
57737,"private void createNodes(){
  linearizedNodes.clear();
  branchNodes.clear();
  branchNodesToLinearizedNodesMap.clear();
  linearizedNodesToIncomingBranchSummaryNodesMap.clear();
  linearizedNodesToOutgoingBranchSummaryNodesMap.clear();
  createNodesForList(linearizedNodes,path);
  for (int i=0; i < linearizedNodes.size(); i++) {
    ALinearizableNode currentNode=linearizedNodes.get(i);
    PathwayVertexRep currentVertexRep=currentNode.getPathwayVertexRep();
    PathwayVertexRep prevVertexRep=null;
    PathwayVertexRep nextVertexRep=null;
    if (i > 0) {
      ALinearizableNode prevNode=linearizedNodes.get(i - 1);
      prevVertexRep=prevNode.getPathwayVertexRep();
    }
    if (i != linearizedNodes.size() - 1) {
      ALinearizableNode nextNode=linearizedNodes.get(i + 1);
      nextVertexRep=nextNode.getPathwayVertexRep();
    }
    BranchSummaryNode incomingNode=new BranchSummaryNode(this,lastNodeId++,currentNode);
    BranchSummaryNode outgoingNode=new BranchSummaryNode(this,lastNodeId++,currentNode);
    List<PathwayVertexRep> sourceVertexReps=Graphs.successorListOf(pathway,currentVertexRep);
    sourceVertexReps.remove(prevVertexRep);
    List<PathwayVertexRep> targetVertexReps=Graphs.predecessorListOf(pathway,currentVertexRep);
    targetVertexReps.remove(nextVertexRep);
    if (sourceVertexReps.size() > 0) {
      List<ALinearizableNode> sourceNodes=new ArrayList<ALinearizableNode>();
      createNodesForList(sourceNodes,sourceVertexReps);
      incomingNode.setBranchNodes(sourceNodes);
      linearizedNodesToIncomingBranchSummaryNodesMap.put(currentNode,incomingNode);
      branchNodes.add(incomingNode);
      branchNodes.addAll(sourceNodes);
      for (      ANode node : sourceNodes) {
        ((ALinearizableNode)node).setPreviewMode(true);
        branchNodesToLinearizedNodesMap.put(node,currentNode);
      }
    }
    if (targetVertexReps.size() > 0) {
      List<ALinearizableNode> targetNodes=new ArrayList<ALinearizableNode>();
      createNodesForList(targetNodes,targetVertexReps);
      outgoingNode.setBranchNodes(targetNodes);
      linearizedNodesToOutgoingBranchSummaryNodesMap.put(currentNode,outgoingNode);
      branchNodes.add(outgoingNode);
      branchNodes.addAll(targetNodes);
      for (      ANode node : targetNodes) {
        ((ALinearizableNode)node).setPreviewMode(true);
        branchNodesToLinearizedNodesMap.put(node,currentNode);
      }
    }
  }
}","private void createNodes(){
  linearizedNodes.clear();
  branchNodes.clear();
  branchNodesToLinearizedNodesMap.clear();
  linearizedNodesToIncomingBranchSummaryNodesMap.clear();
  linearizedNodesToOutgoingBranchSummaryNodesMap.clear();
  createNodesForList(linearizedNodes,path);
  for (int i=0; i < linearizedNodes.size(); i++) {
    ALinearizableNode currentNode=linearizedNodes.get(i);
    PathwayVertexRep currentVertexRep=currentNode.getPathwayVertexRep();
    PathwayVertexRep prevVertexRep=null;
    PathwayVertexRep nextVertexRep=null;
    if (i > 0) {
      ALinearizableNode prevNode=linearizedNodes.get(i - 1);
      prevVertexRep=prevNode.getPathwayVertexRep();
    }
    if (i != linearizedNodes.size() - 1) {
      ALinearizableNode nextNode=linearizedNodes.get(i + 1);
      nextVertexRep=nextNode.getPathwayVertexRep();
    }
    BranchSummaryNode incomingNode=new BranchSummaryNode(this,lastNodeId++,currentNode);
    BranchSummaryNode outgoingNode=new BranchSummaryNode(this,lastNodeId++,currentNode);
    List<PathwayVertexRep> sourceVertexReps=Graphs.predecessorListOf(pathway,currentVertexRep);
    sourceVertexReps.remove(prevVertexRep);
    List<PathwayVertexRep> targetVertexReps=Graphs.successorListOf(pathway,currentVertexRep);
    targetVertexReps.remove(nextVertexRep);
    if (sourceVertexReps.size() > 0) {
      List<ALinearizableNode> sourceNodes=new ArrayList<ALinearizableNode>();
      createNodesForList(sourceNodes,sourceVertexReps);
      incomingNode.setBranchNodes(sourceNodes);
      linearizedNodesToIncomingBranchSummaryNodesMap.put(currentNode,incomingNode);
      branchNodes.add(incomingNode);
      branchNodes.addAll(sourceNodes);
      for (      ANode node : sourceNodes) {
        ((ALinearizableNode)node).setPreviewMode(true);
        branchNodesToLinearizedNodesMap.put(node,currentNode);
      }
    }
    if (targetVertexReps.size() > 0) {
      List<ALinearizableNode> targetNodes=new ArrayList<ALinearizableNode>();
      createNodesForList(targetNodes,targetVertexReps);
      outgoingNode.setBranchNodes(targetNodes);
      linearizedNodesToOutgoingBranchSummaryNodesMap.put(currentNode,outgoingNode);
      branchNodes.add(outgoingNode);
      branchNodes.addAll(targetNodes);
      for (      ANode node : targetNodes) {
        ((ALinearizableNode)node).setPreviewMode(true);
        branchNodesToLinearizedNodesMap.put(node,currentNode);
      }
    }
  }
}",0.9966969446738232
57738,"/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public GLLinearizedPathway(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum);
  viewType=GLLinearizedPathway.VIEW_TYPE;
  viewLabel=""String_Node_Str"";
  List<IDataDomain> dataDomains=DataDomainManager.get().getDataDomainsByType(""String_Node_Str"");
  for (  IDataDomain dataDomain : dataDomains) {
    geneticDataDomains.add((GeneticDataDomain)dataDomain);
  }
  mappedDataRenderer=new MappedDataRenderer(this);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param viewLabel
 * @param viewFrustum
 */
public GLLinearizedPathway(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum);
  viewType=GLLinearizedPathway.VIEW_TYPE;
  viewLabel=""String_Node_Str"";
  List<IDataDomain> dataDomains=DataDomainManager.get().getDataDomainsByType(""String_Node_Str"");
  for (  IDataDomain dataDomain : dataDomains) {
    geneticDataDomains.add((GeneticDataDomain)dataDomain);
  }
  mappedDataRenderer=new MappedDataRenderer(this);
  geneSelectionManager=new EventBasedSelectionManager(this,IDType.getIDType(""String_Node_Str""));
  geneSelectionManager.registerEventListeners();
}",0.8854003139717426
57739,"/** 
 * Sets the list of nodes that are used as the basis for rendering the mapped data. Triggers a complete re-build of the layout. Creates the layout used for the rendering.
 * @param linearizedNodes setter, see  {@link #linearizedNodes}
 */
public void setLinearizedNodes(List<ALinearizableNode> linearizedNodes){
  float[] color;
  relationShipRenderers=new ArrayList<RelationshipRenderer>(linearizedNodes.size());
  Row baseRow=new Row(""String_Node_Str"");
  layoutManger.setBaseElementLayout(baseRow);
  Column dataSetColumn=new Column(""String_Node_Str"");
  dataSetColumn.setBottomUp(false);
  baseRow.append(dataSetColumn);
  Column captionColumn=new Column(""String_Node_Str"");
  captionColumn.setBottomUp(false);
  captionColumn.setPixelSizeX(100);
  baseRow.append(captionColumn);
  this.linearizedNodes=linearizedNodes;
  int nodeCount=0;
  float previousNodePosition=viewFrustum.getHeight() + yOffset;
  int previousNrDavids=0;
  ArrayList<ArrayList<Row>> rowListForDataContainers=new ArrayList<ArrayList<Row>>((int)(usedDataContainers.size() * 1.6));
  for (  DataContainer dataContainer : usedDataContainers) {
    rowListForDataContainers.add(new ArrayList<Row>(linearizedNodes.size() * 2));
  }
  ArrayList<Integer> davidIDs=new ArrayList<Integer>(linearizedNodes.size() * 2);
  ElementLayout xSpacing=new ElementLayout();
  xSpacing.setPixelSizeX(5);
  ArrayList<ALinearizableNode> resolvedNodes=new ArrayList<ALinearizableNode>();
  for (  ALinearizableNode node : linearizedNodes) {
    if (node instanceof ComplexNode) {
      List<ALinearizableNode> embeddedNodes=((ComplexNode)node).getNodes();
      resolvedNodes.addAll(embeddedNodes);
    }
 else     resolvedNodes.add(node);
  }
  for (  ALinearizableNode node : resolvedNodes) {
    if (node.getNumAssociatedRows() == 0)     continue;
    List<Integer> subDavidIDs=node.getDavidIDs();
    int currentNrDavids=subDavidIDs.size();
    davidIDs.addAll(subDavidIDs);
    float currentNodePositionY=node.getPosition().y();
    float deviation;
    if (node.getParentNode() != null) {
      currentNodePositionY=node.getParentNode().getPosition().y();
      currentNrDavids=node.getParentNode().getNumAssociatedRows();
    }
    float previousLowerHeight=previousNodePosition - rowHeight * ((float)previousNrDavids) / 2;
    float currentUpperHeight=(currentNodePositionY + rowHeight * ((float)currentNrDavids) / 2);
    deviation=previousLowerHeight - currentUpperHeight;
    if (previousNodePosition > 0 && deviation > 0) {
      Row spacing=new Row();
      spacing.setAbsoluteSizeY(deviation);
      dataSetColumn.append(spacing);
      captionColumn.append(spacing);
    }
    previousNodePosition=currentNodePositionY;
    previousNrDavids=currentNrDavids;
    if (nodeCount % 2 == 0)     color=EVEN_BACKGROUND_COLOR;
 else     color=ODD_BACKGROUND_COLOR;
    RelationshipRenderer relationShipRenderer=new RelationshipRenderer(color);
    relationShipRenderers.add(relationShipRenderer);
    float x=node.getPosition().x() + parentView.getPixelGLConverter().getGLWidthForPixelWidth(node.getWidthPixels()) / 2;
    float height=parentView.getPixelGLConverter().getGLHeightForPixelHeight(node.getHeightPixels());
    relationShipRenderer.topLeft[0]=x - xOffset;
    relationShipRenderer.topLeft[1]=node.getPosition().y() + height / 2 - yOffset;
    relationShipRenderer.bottomLeft[0]=x - xOffset;
    relationShipRenderer.bottomLeft[1]=node.getPosition().y() - height / 2 - yOffset;
    nodeCount++;
    int idCount=0;
    for (    Integer davidID : subDavidIDs) {
      Row row=new Row();
      RowBackgroundRenderer rowBackgroundRenderer=new RowBackgroundRenderer(color);
      row.addBackgroundRenderer(rowBackgroundRenderer);
      row.setAbsoluteSizeY(rowHeight);
      dataSetColumn.append(row);
      for (int dataContainerCount=0; dataContainerCount < usedDataContainers.size(); dataContainerCount++) {
        Row dataContainerRow=new Row(""String_Node_Str"" + dataContainerCount + ""String_Node_Str""+ idCount);
        row.append(dataContainerRow);
        rowListForDataContainers.get(dataContainerCount).add(dataContainerRow);
        if (dataContainerCount != usedDataContainers.size() - 1) {
          row.append(xSpacing);
        }
      }
      ElementLayout rowCaption=new ElementLayout();
      rowCaption.setAbsoluteSizeY(rowHeight);
      RowCaptionRenderer captionRenderer=new RowCaptionRenderer(davidID,parentView,this,color);
      rowCaption.setRenderer(captionRenderer);
      captionColumn.append(rowCaption);
      if (idCount == 0)       relationShipRenderer.topRightLayout=row;
      if (idCount == subDavidIDs.size() - 1)       relationShipRenderer.bottomRightLayout=row;
      idCount++;
    }
  }
  ElementLayout ySpacing=new ElementLayout();
  ySpacing.setPixelSizeY(5);
  dataSetColumn.append(ySpacing);
  Row captionRow=new Row(""String_Node_Str"");
  captionRow.setPixelSizeY(40);
  dataSetColumn.append(captionRow);
  for (int dataContainerCount=0; dataContainerCount < usedDataContainers.size(); dataContainerCount++) {
    ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
    captionRow.append(captionLayout);
    if (dataContainerCount != usedDataContainers.size() - 1) {
      captionRow.append(xSpacing);
    }
    prepareData(usedDataContainers.get(dataContainerCount),rowListForDataContainers.get(dataContainerCount),captionLayout,davidIDs);
  }
}","/** 
 * Sets the list of nodes that are used as the basis for rendering the mapped data. Triggers a complete re-build of the layout. Creates the layout used for the rendering.
 * @param linearizedNodes setter, see  {@link #linearizedNodes}
 */
public void setLinearizedNodes(List<ALinearizableNode> linearizedNodes){
  float[] color;
  relationShipRenderers=new ArrayList<RelationshipRenderer>(linearizedNodes.size());
  Row baseRow=new Row(""String_Node_Str"");
  layoutManger.setBaseElementLayout(baseRow);
  Column dataSetColumn=new Column(""String_Node_Str"");
  dataSetColumn.setBottomUp(false);
  baseRow.append(dataSetColumn);
  Column captionColumn=new Column(""String_Node_Str"");
  captionColumn.setBottomUp(false);
  captionColumn.setPixelSizeX(100);
  baseRow.append(captionColumn);
  this.linearizedNodes=linearizedNodes;
  int nodeCount=0;
  float previousNodePosition=viewFrustum.getHeight() + yOffset;
  int previousNrDavids=0;
  ArrayList<ArrayList<Row>> rowListForDataContainers=new ArrayList<ArrayList<Row>>((int)(usedDataContainers.size() * 1.6));
  for (  DataContainer dataContainer : usedDataContainers) {
    rowListForDataContainers.add(new ArrayList<Row>(linearizedNodes.size() * 2));
  }
  ArrayList<Integer> davidIDs=new ArrayList<Integer>(linearizedNodes.size() * 2);
  ElementLayout xSpacing=new ElementLayout();
  xSpacing.setPixelSizeX(5);
  ArrayList<ALinearizableNode> resolvedNodes=new ArrayList<ALinearizableNode>();
  for (  ALinearizableNode node : linearizedNodes) {
    if (node instanceof ComplexNode) {
      List<ALinearizableNode> embeddedNodes=((ComplexNode)node).getNodes();
      resolvedNodes.addAll(embeddedNodes);
    }
 else     resolvedNodes.add(node);
  }
  for (  ALinearizableNode node : resolvedNodes) {
    if (node.getNumAssociatedRows() == 0)     continue;
    List<Integer> subDavidIDs=node.getMappedDavidIDs();
    int currentNrDavids=subDavidIDs.size();
    davidIDs.addAll(subDavidIDs);
    float currentNodePositionY=node.getPosition().y();
    float deviation;
    if (node.getParentNode() != null) {
      currentNodePositionY=node.getParentNode().getPosition().y();
      currentNrDavids=node.getParentNode().getNumAssociatedRows();
    }
    float previousLowerHeight=previousNodePosition - rowHeight * ((float)previousNrDavids) / 2;
    float currentUpperHeight=(currentNodePositionY + rowHeight * ((float)currentNrDavids) / 2);
    deviation=previousLowerHeight - currentUpperHeight;
    if (previousNodePosition > 0 && deviation > 0) {
      Row spacing=new Row();
      spacing.setAbsoluteSizeY(deviation);
      dataSetColumn.append(spacing);
      captionColumn.append(spacing);
    }
    previousNodePosition=currentNodePositionY;
    previousNrDavids=currentNrDavids;
    if (nodeCount % 2 == 0)     color=EVEN_BACKGROUND_COLOR;
 else     color=ODD_BACKGROUND_COLOR;
    RelationshipRenderer relationShipRenderer=new RelationshipRenderer(color);
    relationShipRenderers.add(relationShipRenderer);
    float x=node.getPosition().x() + parentView.getPixelGLConverter().getGLWidthForPixelWidth(node.getWidthPixels()) / 2;
    float height=parentView.getPixelGLConverter().getGLHeightForPixelHeight(node.getHeightPixels());
    relationShipRenderer.topLeft[0]=x - xOffset;
    relationShipRenderer.topLeft[1]=node.getPosition().y() + height / 2 - yOffset;
    relationShipRenderer.bottomLeft[0]=x - xOffset;
    relationShipRenderer.bottomLeft[1]=node.getPosition().y() - height / 2 - yOffset;
    nodeCount++;
    int idCount=0;
    for (    Integer davidID : subDavidIDs) {
      Row row=new Row();
      RowBackgroundRenderer rowBackgroundRenderer=new RowBackgroundRenderer(color);
      row.addBackgroundRenderer(rowBackgroundRenderer);
      row.setAbsoluteSizeY(rowHeight);
      dataSetColumn.append(row);
      for (int dataContainerCount=0; dataContainerCount < usedDataContainers.size(); dataContainerCount++) {
        Row dataContainerRow=new Row(""String_Node_Str"" + dataContainerCount + ""String_Node_Str""+ idCount);
        row.append(dataContainerRow);
        rowListForDataContainers.get(dataContainerCount).add(dataContainerRow);
        if (dataContainerCount != usedDataContainers.size() - 1) {
          row.append(xSpacing);
        }
      }
      ElementLayout rowCaption=new ElementLayout();
      rowCaption.setAbsoluteSizeY(rowHeight);
      RowCaptionRenderer captionRenderer=new RowCaptionRenderer(davidID,parentView,this,color);
      rowCaption.setRenderer(captionRenderer);
      captionColumn.append(rowCaption);
      if (idCount == 0)       relationShipRenderer.topRightLayout=row;
      if (idCount == subDavidIDs.size() - 1)       relationShipRenderer.bottomRightLayout=row;
      idCount++;
    }
  }
  ElementLayout ySpacing=new ElementLayout();
  ySpacing.setPixelSizeY(5);
  dataSetColumn.append(ySpacing);
  Row captionRow=new Row(""String_Node_Str"");
  captionRow.setPixelSizeY(40);
  dataSetColumn.append(captionRow);
  for (int dataContainerCount=0; dataContainerCount < usedDataContainers.size(); dataContainerCount++) {
    ElementLayout captionLayout=new ElementLayout(""String_Node_Str"");
    captionRow.append(captionLayout);
    if (dataContainerCount != usedDataContainers.size() - 1) {
      captionRow.append(xSpacing);
    }
    prepareData(usedDataContainers.get(dataContainerCount),rowListForDataContainers.get(dataContainerCount),captionLayout,davidIDs);
  }
}",0.9994423791821562
57740,"protected void registerPickingListeners(){
  parentView.addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      geneSelectionManager.clearSelection(SelectionType.SELECTION);
      geneSelectionManager.addToType(SelectionType.SELECTION,pick.getObjectID());
      geneSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      geneSelectionManager.addToType(SelectionType.MOUSE_OVER,pick.getObjectID());
      geneSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      geneSelectionManager.removeFromType(SelectionType.MOUSE_OVER,pick.getObjectID());
      parentView.setDisplayListDirty();
    }
  }
,PickingType.GENE.name());
  parentView.addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      sampleSelectionManager.clearSelection(SelectionType.SELECTION);
      sampleSelectionManager.addToType(SelectionType.SELECTION,pick.getObjectID());
      sampleSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      sampleSelectionManager.addToType(SelectionType.MOUSE_OVER,pick.getObjectID());
      sampleSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      sampleSelectionManager.removeFromType(SelectionType.MOUSE_OVER,pick.getObjectID());
      parentView.setDisplayListDirty();
    }
  }
,PickingType.SAMPLE.name());
  parentView.addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      sampleGroupSelectionManager.clearSelection(SelectionType.SELECTION);
      sampleGroupSelectionManager.addToType(SelectionType.SELECTION,pick.getObjectID());
      sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      sampleGroupSelectionManager.addToType(SelectionType.MOUSE_OVER,pick.getObjectID());
      sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      sampleGroupSelectionManager.removeFromType(SelectionType.MOUSE_OVER,pick.getObjectID());
      parentView.setDisplayListDirty();
    }
  }
,PickingType.SAMPLE_GROUP.name());
}","protected void registerPickingListeners(){
  parentView.addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      geneSelectionManager.clearSelection(SelectionType.SELECTION);
      geneSelectionManager.addToType(SelectionType.SELECTION,pick.getObjectID());
      geneSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      geneSelectionManager.addToType(SelectionType.MOUSE_OVER,pick.getObjectID());
      geneSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      geneSelectionManager.removeFromType(SelectionType.MOUSE_OVER,pick.getObjectID());
      geneSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
  }
,PickingType.GENE.name());
  parentView.addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      sampleSelectionManager.clearSelection(SelectionType.SELECTION);
      sampleSelectionManager.addToType(SelectionType.SELECTION,pick.getObjectID());
      sampleSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      sampleSelectionManager.addToType(SelectionType.MOUSE_OVER,pick.getObjectID());
      sampleSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      sampleSelectionManager.removeFromType(SelectionType.MOUSE_OVER,pick.getObjectID());
      sampleSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
  }
,PickingType.SAMPLE.name());
  parentView.addTypePickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      sampleGroupSelectionManager.clearSelection(SelectionType.SELECTION);
      sampleGroupSelectionManager.addToType(SelectionType.SELECTION,pick.getObjectID());
      sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      sampleGroupSelectionManager.addToType(SelectionType.MOUSE_OVER,pick.getObjectID());
      sampleGroupSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      sampleGroupSelectionManager.removeFromType(SelectionType.MOUSE_OVER,pick.getObjectID());
      sampleSelectionManager.triggerSelectionUpdateEvent();
      parentView.setDisplayListDirty();
    }
  }
,PickingType.SAMPLE_GROUP.name());
}",0.96646571213263
57741,"@Override public void mouseOut(Pick pick){
  sampleGroupSelectionManager.removeFromType(SelectionType.MOUSE_OVER,pick.getObjectID());
  parentView.setDisplayListDirty();
}","@Override public void mouseOut(Pick pick){
  sampleGroupSelectionManager.removeFromType(SelectionType.MOUSE_OVER,pick.getObjectID());
  sampleSelectionManager.triggerSelectionUpdateEvent();
  parentView.setDisplayListDirty();
}",0.8592964824120602
57742,"private void createNodes(){
  linearizedNodes.clear();
  branchNodes.clear();
  branchNodesToLinearizedNodesMap.clear();
  linearizedNodesToIncomingBranchSummaryNodesMap.clear();
  linearizedNodesToOutgoingBranchSummaryNodesMap.clear();
  createNodesForList(linearizedNodes,path);
  for (int i=0; i < linearizedNodes.size(); i++) {
    ALinearizableNode currentNode=linearizedNodes.get(i);
    PathwayVertexRep currentVertexRep=currentNode.getPathwayVertexRep();
    DefaultEdge prevEdge=null;
    DefaultEdge nextEdge=null;
    if (i > 0) {
      ALinearizableNode prevNode=linearizedNodes.get(i - 1);
      prevEdge=pathway.getEdge(prevNode.getPathwayVertexRep(),currentVertexRep);
      if (prevEdge == null)       prevEdge=pathway.getEdge(currentVertexRep,prevNode.getPathwayVertexRep());
    }
    if (i != linearizedNodes.size() - 1) {
      ALinearizableNode nextNode=linearizedNodes.get(i + 1);
      nextEdge=pathway.getEdge(nextNode.getPathwayVertexRep(),currentVertexRep);
      if (nextEdge == null)       nextEdge=pathway.getEdge(currentVertexRep,nextNode.getPathwayVertexRep());
    }
    Set<DefaultEdge> edges=pathway.edgesOf(currentVertexRep);
    BranchSummaryNode incomingNode=new BranchSummaryNode(this,lastNodeId++,currentNode);
    BranchSummaryNode outgoingNode=new BranchSummaryNode(this,lastNodeId++,currentNode);
    List<PathwayVertexRep> sourceVertexReps=new ArrayList<PathwayVertexRep>();
    List<PathwayVertexRep> targetVertexReps=new ArrayList<PathwayVertexRep>();
    for (    DefaultEdge edge : edges) {
      if ((edge != prevEdge) && (edge != nextEdge)) {
        if (pathway.getEdgeTarget(edge) == currentVertexRep) {
          sourceVertexReps.add(pathway.getEdgeSource(edge));
        }
 else {
          targetVertexReps.add(pathway.getEdgeTarget(edge));
        }
      }
    }
    if (sourceVertexReps.size() > 0) {
      List<ALinearizableNode> sourceNodes=new ArrayList<ALinearizableNode>();
      createNodesForList(sourceNodes,sourceVertexReps);
      incomingNode.setBranchNodes(sourceNodes);
      linearizedNodesToIncomingBranchSummaryNodesMap.put(currentNode,incomingNode);
      branchNodes.add(incomingNode);
      branchNodes.addAll(sourceNodes);
      for (      ANode node : sourceNodes) {
        ((ALinearizableNode)node).setPreviewMode(true);
        branchNodesToLinearizedNodesMap.put(node,currentNode);
      }
    }
    if (targetVertexReps.size() > 0) {
      List<ALinearizableNode> targetNodes=new ArrayList<ALinearizableNode>();
      createNodesForList(targetNodes,targetVertexReps);
      outgoingNode.setBranchNodes(targetNodes);
      linearizedNodesToOutgoingBranchSummaryNodesMap.put(currentNode,outgoingNode);
      branchNodes.add(outgoingNode);
      branchNodes.addAll(targetNodes);
      for (      ANode node : targetNodes) {
        ((ALinearizableNode)node).setPreviewMode(true);
        branchNodesToLinearizedNodesMap.put(node,currentNode);
      }
    }
  }
}","private void createNodes(){
  linearizedNodes.clear();
  branchNodes.clear();
  branchNodesToLinearizedNodesMap.clear();
  linearizedNodesToIncomingBranchSummaryNodesMap.clear();
  linearizedNodesToOutgoingBranchSummaryNodesMap.clear();
  createNodesForList(linearizedNodes,path);
  for (int i=0; i < linearizedNodes.size(); i++) {
    ALinearizableNode currentNode=linearizedNodes.get(i);
    PathwayVertexRep currentVertexRep=currentNode.getPathwayVertexRep();
    PathwayVertexRep prevVertexRep=null;
    PathwayVertexRep nextVertexRep=null;
    if (i > 0) {
      ALinearizableNode prevNode=linearizedNodes.get(i - 1);
      prevVertexRep=prevNode.getPathwayVertexRep();
    }
    if (i != linearizedNodes.size() - 1) {
      ALinearizableNode nextNode=linearizedNodes.get(i + 1);
      nextVertexRep=nextNode.getPathwayVertexRep();
    }
    BranchSummaryNode incomingNode=new BranchSummaryNode(this,lastNodeId++,currentNode);
    BranchSummaryNode outgoingNode=new BranchSummaryNode(this,lastNodeId++,currentNode);
    List<PathwayVertexRep> sourceVertexReps=Graphs.successorListOf(pathway,currentVertexRep);
    sourceVertexReps.remove(prevVertexRep);
    List<PathwayVertexRep> targetVertexReps=Graphs.predecessorListOf(pathway,currentVertexRep);
    targetVertexReps.remove(nextVertexRep);
    if (sourceVertexReps.size() > 0) {
      List<ALinearizableNode> sourceNodes=new ArrayList<ALinearizableNode>();
      createNodesForList(sourceNodes,sourceVertexReps);
      incomingNode.setBranchNodes(sourceNodes);
      linearizedNodesToIncomingBranchSummaryNodesMap.put(currentNode,incomingNode);
      branchNodes.add(incomingNode);
      branchNodes.addAll(sourceNodes);
      for (      ANode node : sourceNodes) {
        ((ALinearizableNode)node).setPreviewMode(true);
        branchNodesToLinearizedNodesMap.put(node,currentNode);
      }
    }
    if (targetVertexReps.size() > 0) {
      List<ALinearizableNode> targetNodes=new ArrayList<ALinearizableNode>();
      createNodesForList(targetNodes,targetVertexReps);
      outgoingNode.setBranchNodes(targetNodes);
      linearizedNodesToOutgoingBranchSummaryNodesMap.put(currentNode,outgoingNode);
      branchNodes.add(outgoingNode);
      branchNodes.addAll(targetNodes);
      for (      ANode node : targetNodes) {
        ((ALinearizableNode)node).setPreviewMode(true);
        branchNodesToLinearizedNodesMap.put(node,currentNode);
      }
    }
  }
}",0.7718120805369127
57743,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void createRankedVisBricksViews(){
  List<DataContainer> fixedDataContainers=new ArrayList<DataContainer>();
  for (  DimensionGroup dimGroup : dimGroupManager.getDimensionGroups()) {
    if (!dataContainers.contains(dimGroup.getDataContainer()))     fixedDataContainers.add(dimGroup.getDataContainer());
  }
  hashVisBricks2DataContainerChoice.clear();
  List<Pair<Float,DataContainer>> score2DataContainerList=new ArrayList<Pair<Float,DataContainer>>();
  for (  DataContainer referenceDataContainer : dataContainers) {
    float scoreSum=0;
    int scoreCount=0;
    for (    DataContainer fixedDataContainer : fixedDataContainers) {
      scoreSum+=referenceDataContainer.getContainerStatistics().adjustedRandIndex().getScore(fixedDataContainer,false);
      scoreCount++;
    }
    score2DataContainerList.add(new Pair(scoreSum / scoreCount,referenceDataContainer));
  }
  Collections.sort(score2DataContainerList);
  int rank=score2DataContainerList.size();
  for (  Pair<Float,DataContainer> score2DataContainer : score2DataContainerList) {
    DataContainer dataContainer=score2DataContainer.getSecond();
    Row vendingMachineElementLayout=new Row(""String_Node_Str"");
    vendingMachineElementLayout.setGrabY(true);
    ElementLayout rankElementLayout=new ElementLayout(""String_Node_Str"");
    rankElementLayout.setPixelSizeX(70);
    RankNumberRenderer rankNumberRenderer=new RankNumberRenderer(""String_Node_Str"" + rank--,getTextRenderer());
    rankElementLayout.setRenderer(rankNumberRenderer);
    ElementLayout visBricksElementLayout=new ElementLayout(""String_Node_Str"");
    GLVisBricks visBricks=createVisBricks(visBricksElementLayout);
    visBricks.setDataContainer(dataContainer);
    visBricksStack.add(0,visBricks);
    hashVisBricks2DataContainerChoice.put(visBricks,dataContainer);
    if (visBricksStack.size() == score2DataContainerList.size()) {
      selectedVisBricksChoice=visBricksStack.get(0);
      vendingMachineElementLayout.addBackgroundRenderer(new ColorRenderer(new float[]{1,1,0,1}));
    }
    if (fixedDataContainers != null && fixedDataContainers.size() > 0)     visBricks.addDimensionGroups(fixedDataContainers,null);
    uninitializedVisBrickViews.add(visBricks);
    vendingMachineElementLayout.append(rankElementLayout);
    vendingMachineElementLayout.append(visBricksElementLayout);
    mainColumn.add(0,vendingMachineElementLayout);
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void createRankedVisBricksViews(){
  List<DataContainer> fixedDataContainers=new ArrayList<DataContainer>();
  for (  DimensionGroup dimGroup : dimGroupManager.getDimensionGroups()) {
    if (!dataContainers.contains(dimGroup.getDataContainer()))     fixedDataContainers.add(dimGroup.getDataContainer());
  }
  hashVisBricks2DataContainerChoice.clear();
  List<Pair<Float,DataContainer>> score2DataContainerList=new ArrayList<Pair<Float,DataContainer>>();
  for (  DataContainer referenceDataContainer : dataContainers) {
    float scoreSum=0;
    int scoreCount=0;
    for (    DataContainer fixedDataContainer : fixedDataContainers) {
      scoreSum+=referenceDataContainer.getContainerStatistics().adjustedRandIndex().getScore(fixedDataContainer,false);
      scoreCount++;
    }
    score2DataContainerList.add(new Pair(scoreSum / scoreCount,referenceDataContainer));
  }
  Collections.sort(score2DataContainerList);
  int rank=score2DataContainerList.size();
  for (  Pair<Float,DataContainer> score2DataContainer : score2DataContainerList) {
    DataContainer dataContainer=score2DataContainer.getSecond();
    Row vendingMachineElementLayout=new Row(""String_Node_Str"");
    vendingMachineElementLayout.setGrabY(true);
    ElementLayout rankElementLayout=new ElementLayout(""String_Node_Str"");
    rankElementLayout.setPixelSizeX(70);
    RankNumberRenderer rankNumberRenderer=new RankNumberRenderer(""String_Node_Str"" + rank--,getTextRenderer());
    rankElementLayout.setRenderer(rankNumberRenderer);
    ElementLayout visBricksElementLayout=new ElementLayout(""String_Node_Str"");
    GLVisBricks visBricks=createVisBricks(visBricksElementLayout);
    visBricks.setDataContainer(dataContainer);
    visBricksStack.add(0,visBricks);
    hashVisBricks2DataContainerChoice.put(visBricks,dataContainer);
    if (visBricksStack.size() == score2DataContainerList.size()) {
      selectedVisBricksChoice=visBricksStack.get(0);
      vendingMachineElementLayout.addBackgroundRenderer(new ColorRenderer(new float[]{1,1,0,1}));
    }
    if (fixedDataContainers != null && fixedDataContainers.size() > 0)     visBricks.addDataContainers(fixedDataContainers,null);
    uninitializedVisBrickViews.add(visBricks);
    vendingMachineElementLayout.append(rankElementLayout);
    vendingMachineElementLayout.append(visBricksElementLayout);
    mainColumn.add(0,vendingMachineElementLayout);
  }
}",0.99489900020404
57744,"public void handleOpenVendingMachineEvent(IDataDomain dataDomain){
  ATableBasedDataDomain tableBasedDataDomain=(ATableBasedDataDomain)dataDomain;
  DataContainer dataContainer=tableBasedDataDomain.getDataContainer(tableBasedDataDomain.getTable().getDefaultRecordPerspective().getID(),tableBasedDataDomain.getTable().getDefaultDimensionPerspective().getID());
  List<DataContainer> dataContainerWrapper=new ArrayList<DataContainer>();
  dataContainerWrapper.add(dataContainer);
  addDimensionGroups(dataContainerWrapper,null);
  visBricks.addDimensionGroups(dataContainerWrapper,null);
  vendingMachine.setDataContainer(dataContainer);
}","public void handleOpenVendingMachineEvent(IDataDomain dataDomain){
  ATableBasedDataDomain tableBasedDataDomain=(ATableBasedDataDomain)dataDomain;
  DataContainer dataContainer=tableBasedDataDomain.getDataContainer(tableBasedDataDomain.getTable().getDefaultRecordPerspective().getID(),tableBasedDataDomain.getTable().getDefaultDimensionPerspective().getID());
  List<DataContainer> dataContainerWrapper=new ArrayList<DataContainer>();
  dataContainerWrapper.add(dataContainer);
  addDimensionGroups(dataContainerWrapper,null);
  visBricks.addDataContainers(dataContainerWrapper,null);
  vendingMachine.setDataContainer(dataContainer);
}",0.9803613511390415
57745,"public void addDimensionGroups(List<DataContainer> dataContainers,IBrickConfigurer dataConfigurer){
  visBricks.addDimensionGroups(dataContainers,dataConfigurer);
  for (  DimensionGroup dimGroup : visBricks.getDimensionGroupManager().getDimensionGroups()) {
    if (dataContainers.get(0) == dimGroup.getDataContainer()) {
      detailDimensionGroup=dimGroup;
      detailDimensionGroup.showDetailedBrick(vendingMachine,false);
      break;
    }
  }
  layoutManager.updateLayout();
}","public void addDimensionGroups(List<DataContainer> dataContainers,IBrickConfigurer dataConfigurer){
  visBricks.addDataContainers(dataContainers,dataConfigurer);
  for (  DimensionGroup dimGroup : visBricks.getDimensionGroupManager().getDimensionGroups()) {
    if (dataContainers.get(0) == dimGroup.getDataContainer()) {
      detailDimensionGroup=dimGroup;
      detailDimensionGroup.showDetailedBrick(vendingMachine,false);
      break;
    }
  }
  layoutManager.updateLayout();
}",0.9741468459152016
57746,"private boolean isComplexNode(List<PathwayVertexRep> vertexReps){
  for (  PathwayVertexRep vertexRep : vertexReps) {
    for (    PathwayVertexRep vRep : vertexReps) {
      if (vertexRep != vRep) {
        Set<DefaultEdge> edges1=pathway.edgesOf(vertexRep);
        Set<DefaultEdge> edges2=pathway.edgesOf(vRep);
        List<PathwayVertexRep> edgeSources1=new ArrayList<PathwayVertexRep>();
        List<PathwayVertexRep> edgeTargets1=new ArrayList<PathwayVertexRep>();
        for (        DefaultEdge edge : edges1) {
          PathwayVertexRep target=pathway.getEdgeTarget(edge);
          if (target == vertexRep) {
            edgeSources1.add(pathway.getEdgeSource(edge));
          }
 else {
            edgeTargets1.add(target);
          }
        }
        List<PathwayVertexRep> edgeSources2=new ArrayList<PathwayVertexRep>();
        List<PathwayVertexRep> edgeTargets2=new ArrayList<PathwayVertexRep>();
        for (        DefaultEdge edge : edges2) {
          PathwayVertexRep target=pathway.getEdgeTarget(edge);
          if (target == vertexRep) {
            edgeSources2.add(pathway.getEdgeSource(edge));
          }
 else {
            edgeTargets2.add(target);
          }
        }
        if ((edgeSources1.size() != edgeSources2.size()) || (edgeTargets1.size() != edgeTargets2.size()) || !(edgeTargets1.containsAll(edgeTargets2))|| !(edgeSources1.containsAll(edgeSources2))) {
          return false;
        }
      }
    }
  }
  return true;
}","/** 
 * Determines whether the specified list of   {@link PathwayVertexRep}s represents one complex node.
 * @param vertexReps
 * @return
 */
private boolean isComplexNode(List<PathwayVertexRep> vertexReps){
  for (  PathwayVertexRep vertexRep : vertexReps) {
    for (    PathwayVertexRep vRep : vertexReps) {
      if (vertexRep != vRep) {
        List<PathwayVertexRep> edgeSources1=new ArrayList<PathwayVertexRep>();
        List<PathwayVertexRep> edgeTargets1=new ArrayList<PathwayVertexRep>();
        List<PathwayVertexRep> edgeSources2=new ArrayList<PathwayVertexRep>();
        List<PathwayVertexRep> edgeTargets2=new ArrayList<PathwayVertexRep>();
        getEdgeEnds(edgeSources1,edgeTargets1,vertexRep);
        getEdgeEnds(edgeSources2,edgeTargets2,vRep);
        if ((edgeSources1.size() != edgeSources2.size()) || (edgeTargets1.size() != edgeTargets2.size()) || !(edgeTargets1.containsAll(edgeTargets2))|| !(edgeSources1.containsAll(edgeSources2))) {
          return false;
        }
      }
    }
  }
  return true;
}",0.4776714513556618
57747,"private List<ComplexNode> createComplexBranchNodes(List<PathwayVertexRep> vertexReps){
  List<ComplexNode> complexNodes=new ArrayList<ComplexNode>();
  for (  PathwayVertexRep vertexRep : vertexReps) {
    ComplexNode complexNode=null;
    for (    PathwayVertexRep vRep : vertexReps) {
      if (vertexRep != vRep) {
        Set<DefaultEdge> edges1=pathway.edgesOf(vertexRep);
        Set<DefaultEdge> edges2=pathway.edgesOf(vRep);
        if ((edges1.containsAll(edges2)) && (edges1.size() == edges2.size())) {
          if (complexNode == null) {
            complexNode=new ComplexNode(pixelGLConverter,textRenderer,this,lastNodeId++);
            complexNode.addVertexRep(vertexRep);
            complexNodes.add(complexNode);
          }
          complexNode.addVertexRep(vRep);
        }
      }
    }
  }
  return complexNodes;
}","/** 
 * Determines the   {@link ComplexNode}s for the specified  {@link PathwayVertexRep}s.
 * @param vertexReps
 * @return
 */
private List<ComplexNode> createComplexBranchNodes(List<PathwayVertexRep> vertexReps){
  List<PathwayVertexRep> vertexRepsLeft=new ArrayList<PathwayVertexRep>(vertexReps);
  List<ComplexNode> complexNodes=new ArrayList<ComplexNode>();
  while (vertexRepsLeft.size() > 0) {
    PathwayVertexRep vertexRep=vertexRepsLeft.get(0);
    ComplexNode complexNode=null;
    for (    PathwayVertexRep vRep : vertexRepsLeft) {
      if (vertexRep != vRep) {
        List<PathwayVertexRep> edgeSources1=new ArrayList<PathwayVertexRep>();
        List<PathwayVertexRep> edgeTargets1=new ArrayList<PathwayVertexRep>();
        List<PathwayVertexRep> edgeSources2=new ArrayList<PathwayVertexRep>();
        List<PathwayVertexRep> edgeTargets2=new ArrayList<PathwayVertexRep>();
        getEdgeEnds(edgeSources1,edgeTargets1,vertexRep);
        getEdgeEnds(edgeSources2,edgeTargets2,vRep);
        if ((edgeSources1.size() == edgeSources2.size()) && (edgeTargets1.size() == edgeTargets2.size()) && (edgeTargets1.containsAll(edgeTargets2))&& (edgeSources1.containsAll(edgeSources2))) {
          if (complexNode == null) {
            complexNode=new ComplexNode(pixelGLConverter,textRenderer,this,lastNodeId++);
            complexNode.addVertexRep(vertexRep);
            complexNodes.add(complexNode);
          }
          complexNode.addVertexRep(vRep);
        }
      }
    }
    if (complexNode == null)     break;
    for (    PathwayVertexRep vRep : complexNode.getVertexReps()) {
      vertexRepsLeft.remove(vRep);
    }
  }
  return complexNodes;
}",0.4487843762455161
57748,"public PathwayRelationEdgeRep(final String relationType){
  this.relationType=EPathwayRelationEdgeType.valueOf(relationType);
}","public PathwayRelationEdgeRep(final EPathwayRelationEdgeType relationType){
  this.relationType=relationType;
}",0.7647058823529411
57749,"private void renderPathway(final GL2 gl,final PathwayGraph pathway){
  gl.glPushMatrix();
  gl.glTranslatef(vecTranslation.x(),vecTranslation.y(),vecTranslation.z());
  gl.glScalef(vecScaling.x(),vecScaling.y(),vecScaling.z());
  if (bEnablePathwayTexture) {
    float fPathwayTransparency=1.0f;
    hashGLcontext2TextureManager.get(gl).renderPathway(gl,this,pathway,fPathwayTransparency,false);
  }
  float tmp=PathwayRenderStyle.SCALING_FACTOR_Y * pathway.getHeight();
  gl.glTranslatef(0,tmp,0);
  gLPathwayContentCreator.renderPathway(gl,pathway,false);
  renderSelectedPath(gl);
  gl.glTranslatef(0,-tmp,0);
  gl.glScalef(1 / vecScaling.x(),1 / vecScaling.y(),1 / vecScaling.z());
  gl.glTranslatef(-vecTranslation.x(),-vecTranslation.y(),-vecTranslation.z());
  gl.glPopMatrix();
}","private void renderPathway(final GL2 gl,final PathwayGraph pathway){
  gl.glPushMatrix();
  gl.glTranslatef(vecTranslation.x(),vecTranslation.y(),vecTranslation.z());
  gl.glScalef(vecScaling.x(),vecScaling.y(),vecScaling.z());
  if (enablePathwayTexture) {
    float fPathwayTransparency=1.0f;
    hashGLcontext2TextureManager.get(gl).renderPathway(gl,this,pathway,fPathwayTransparency,false);
  }
  float tmp=PathwayRenderStyle.SCALING_FACTOR_Y * pathway.getHeight();
  gl.glTranslatef(0,tmp,0);
  gLPathwayContentCreator.renderPathway(gl,pathway,false);
  renderSelectedPath(gl);
  gl.glTranslatef(0,-tmp,0);
  gl.glScalef(1 / vecScaling.x(),1 / vecScaling.y(),1 / vecScaling.z());
  gl.glTranslatef(-vecTranslation.x(),-vecTranslation.y(),-vecTranslation.z());
  gl.glPopMatrix();
}",0.9980928162746344
57750,"public void enablePathwayTextures(final boolean bEnablePathwayTexture){
  gLPathwayContentCreator.enableEdgeRendering(!bEnablePathwayTexture);
  setDisplayListDirty();
  this.bEnablePathwayTexture=bEnablePathwayTexture;
}","public void enablePathwayTextures(final boolean bEnablePathwayTexture){
  gLPathwayContentCreator.enableEdgeRendering(!bEnablePathwayTexture);
  setDisplayListDirty();
  this.enablePathwayTexture=bEnablePathwayTexture;
}",0.9931972789115646
57751,"protected void initPathwayData(final GL2 gl){
  gLPathwayContentCreator.init(gl,geneSelectionManager);
  if (!hashGLcontext2TextureManager.containsKey(gl)) {
    hashGLcontext2TextureManager.put(gl,new GLPathwayTextureManager());
  }
  calculatePathwayScaling(gl,pathway);
  pathwayManager.setPathwayVisibilityState(pathway,true);
}","protected void initPathwayData(final GL2 gl){
  isPathwayDataDirty=false;
  geneSelectionManager.clearSelections();
  selectedPath=null;
  gLPathwayContentCreator.init(gl,geneSelectionManager);
  if (!hashGLcontext2TextureManager.containsKey(gl)) {
    hashGLcontext2TextureManager.put(gl,new GLPathwayTextureManager());
  }
  calculatePathwayScaling(gl,pathway);
  pathwayManager.setPathwayVisibilityState(pathway,true);
}",0.8794701986754967
57752,"@Override public void displayLocal(final GL2 gl){
  if (pathway == null || !pathwayManager.hasItem(pathway.getID()))   return;
  initPathwayData(gl);
  pickingManager.handlePicking(this,gl);
  if (isDisplayListDirty) {
    rebuildPathwayDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
  }
  display(gl);
}","@Override public void displayLocal(final GL2 gl){
  if (pathway == null || !pathwayManager.hasItem(pathway.getID()))   return;
  if (isPathwayDataDirty)   initPathwayData(gl);
  pickingManager.handlePicking(this,gl);
  if (isDisplayListDirty) {
    rebuildPathwayDisplayList(gl,displayListIndex);
    isDisplayListDirty=false;
  }
  display(gl);
}",0.9610778443113772
57753,"/** 
 * Constructor.
 * @param color Color of the rendered rectangle. The array must have alength of 4 specifying the RGBA values of the color.
 * @param imagePath Path to the image that shall be used as texture.
 * @param textureManager
 */
public ViewNodeBackGroundRenderer(float[] color,String imagePath,TextureManager textureManager){
  this.color=color;
  this.imagePath=imagePath;
  this.textureManager=textureManager;
}","/** 
 * Constructor.
 * @param color Color of the rendered rectangle. The array must have a length of 4 specifying the RGBA values of the color.
 * @param imagePath Path to the image that shall be used as texture.
 * @param textureManager
 */
public ViewNodeBackGroundRenderer(float[] color,String imagePath,TextureManager textureManager){
  this.color=color;
  this.imagePath=imagePath;
  this.textureManager=textureManager;
}",0.9988276670574444
57754,"@Override public void render(GL2 gl){
  gl.glColor4fv(color,0);
  gl.glBegin(GL2.GL_QUADS);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
  float textureSize=Math.min(x,y);
  float posX=x / 2.0f - textureSize / 2.0f;
  float posY=y / 2.0f - textureSize / 2.0f;
  Vec3f lowerLeftCorner=new Vec3f(posX,posY,0);
  Vec3f lowerRightCorner=new Vec3f(posX + textureSize,posY,0);
  Vec3f upperRightCorner=new Vec3f(posX + textureSize,posY + textureSize,0);
  Vec3f upperLeftCorner=new Vec3f(posX,posY + textureSize,0);
  textureManager.renderTexture(gl,imagePath,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,color[0],color[1],color[2],0.5f);
}","@Override public void render(GL2 gl){
  gl.glColor4fv(color,0);
  gl.glBegin(GL2.GL_QUADS);
  gl.glVertex3f(0,0,0);
  gl.glVertex3f(x,0,0);
  gl.glVertex3f(x,y,0);
  gl.glVertex3f(0,y,0);
  gl.glEnd();
  if (imagePath != null) {
    float textureSize=Math.min(x,y);
    float posX=x / 2.0f - textureSize / 2.0f;
    float posY=y / 2.0f - textureSize / 2.0f;
    Vec3f lowerLeftCorner=new Vec3f(posX,posY,0);
    Vec3f lowerRightCorner=new Vec3f(posX + textureSize,posY,0);
    Vec3f upperRightCorner=new Vec3f(posX + textureSize,posY + textureSize,0);
    Vec3f upperLeftCorner=new Vec3f(posX,posY + textureSize,0);
    textureManager.renderTexture(gl,imagePath,lowerLeftCorner,lowerRightCorner,upperRightCorner,upperLeftCorner,color[0],color[1],color[2],0.5f);
  }
}",0.968392737054472
57755,"public ViewNode createViewNode(AGraphLayout graphLayout,GLDataViewIntegrator view,DragAndDropController dragAndDropController,int id,AGLView representedView){
  Class<? extends ViewNode> nodeClass=viewNodeClasses.get(representedView.getClass());
  if (nodeClass == null) {
    for (    Class<? extends AGLView> c : viewNodeClasses.keySet()) {
      if (c.isAssignableFrom(representedView.getClass())) {
        nodeClass=viewNodeClasses.get(c);
        break;
      }
    }
  }
  if (nodeClass != null) {
    try {
      ViewNode node=nodeClass.getConstructor(AGraphLayout.class,view.getClass(),dragAndDropController.getClass(),Integer.class,AGLView.class).newInstance(graphLayout,view,dragAndDropController,id,representedView);
      node.init();
      return node;
    }
 catch (    Exception e) {
      Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"",e));
    }
  }
  return null;
}","public ViewNode createViewNode(AGraphLayout graphLayout,GLDataViewIntegrator view,DragAndDropController dragAndDropController,int id,AGLView representedView){
  Class<? extends ViewNode> nodeClass=viewNodeClasses.get(representedView.getClass());
  if (nodeClass == null) {
    for (    Class<? extends IDataContainerBasedView> c : viewNodeClasses.keySet()) {
      if (c.isAssignableFrom(representedView.getClass())) {
        nodeClass=viewNodeClasses.get(c);
        break;
      }
    }
  }
  if (nodeClass != null) {
    try {
      ViewNode node=nodeClass.getConstructor(AGraphLayout.class,view.getClass(),dragAndDropController.getClass(),Integer.class,AGLView.class).newInstance(graphLayout,view,dragAndDropController,id,representedView);
      node.init();
      return node;
    }
 catch (    Exception e) {
      Logger.log(new Status(Status.ERROR,this.toString(),""String_Node_Str"",e));
    }
  }
  return null;
}",0.9879649890590808
57756,"public NodeCreator(){
  dataNodeClasses.put(ATableBasedDataDomain.class,TableBasedDataNode.class);
  dataNodeClasses.put(PathwayDataDomain.class,PathwayDataNode.class);
  viewNodeClasses.put(AGLView.class,ViewNode.class);
  viewNodeClasses.put(GLVisBricks.class,VisBricksNode.class);
}","public NodeCreator(){
  dataNodeClasses.put(ATableBasedDataDomain.class,TableBasedDataNode.class);
  dataNodeClasses.put(PathwayDataDomain.class,PathwayDataNode.class);
  viewNodeClasses.put(ISingleDataContainerBasedView.class,ViewNode.class);
  viewNodeClasses.put(IMultiDataContainerBasedView.class,MultiDataContainerViewNode.class);
}",0.8553054662379421
57757,"@Override public void addDefaultStartViews(){
  List<Pair<String,String>> startViewWithDataDomain=appInitData.getAppArgumentStartViewWithDataDomain();
  if (!startViewWithDataDomain.isEmpty())   return;
  startViewWithDataDomain.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
  if (appInitData.isLoadPathways()) {
    startViewWithDataDomain.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
  }
}","@Override public void addDefaultStartViews(){
  List<Pair<String,String>> startViewWithDataDomain=appInitData.getAppArgumentStartViewWithDataDomain();
  if (!startViewWithDataDomain.isEmpty())   return;
  startViewWithDataDomain.add(new Pair<String,String>(""String_Node_Str"",""String_Node_Str""));
}",0.8125854993160054
57758,"protected String convertID(String sourceID,IDSpecification idSpecification){
  if (idSpecification.getReplacingExpression() != null) {
    sourceID=sourceID.replaceAll(idSpecification.getReplacingExpression(),idSpecification.getReplacementString());
  }
  if (idSpecification.getSubStringExpression() != null) {
    String[] splitID=sourceID.split(idSpecification.getSubStringExpression());
    for (    String result : splitID) {
      if (!result.isEmpty()) {
        sourceID=result;
        break;
      }
    }
  }
  return sourceID;
}","protected String convertID(String sourceID,IDSpecification idSpecification){
  if (idSpecification == null)   return sourceID;
  if (idSpecification.getReplacingExpression() != null) {
    sourceID=sourceID.replaceAll(idSpecification.getReplacingExpression(),idSpecification.getReplacementString());
  }
  if (idSpecification.getSubStringExpression() != null) {
    String[] splitID=sourceID.split(idSpecification.getSubStringExpression());
    for (    String result : splitID) {
      if (!result.isEmpty()) {
        sourceID=result;
        break;
      }
    }
  }
  return sourceID;
}",0.9557522123893806
57759,"private int determineNumberOfMappedValues(PathwayVertexRep vertexRep){
  List<PathwayVertex> vertices=vertexRep.getPathwayVertices();
  if (vertices == null)   return 0;
  Set<Integer> allIDs=new HashSet<Integer>();
  for (  PathwayVertex vertex : vertices) {
    int davidId=PathwayItemManager.get().getDavidIdByPathwayVertex(vertex);
    for (    GeneticDataDomain dataDomain : geneticDataDomains) {
      Set<Integer> ids=dataDomain.getGeneIDMappingManager().getIDAsSet(pathwayDataDomain.getDavidIDType(),dataDomain.getGeneIDType(),davidId);
      if (ids != null && !ids.isEmpty()) {
        allIDs.addAll(ids);
      }
    }
  }
  return allIDs.size();
}","private int determineNumberOfMappedValues(PathwayVertexRep vertexRep){
  List<PathwayVertex> vertices=vertexRep.getPathwayVertices();
  if (vertices == null)   return 0;
  Set<Integer> allIDs=new HashSet<Integer>();
  for (  PathwayVertex vertex : vertices) {
    int davidId=PathwayItemManager.get().getDavidIdByPathwayVertex(vertex);
    for (    GeneticDataDomain dataDomain : geneticDataDomains) {
      Set<Integer> ids=dataDomain.getGeneIDMappingManager().getIDAsSet(pathwayDataDomain.getDavidIDType(),dataDomain.getGeneIDType(),davidId);
      if (ids != null && !ids.isEmpty()) {
        allIDs.add(davidId);
      }
    }
  }
  return allIDs.size();
}",0.9886277482941622
57760,"private Row createPreviewRow(ElementLayout horizontalSpacing,ElementLayout verticalSpacing){
  PathwayVertexRep vertexRep=node.getPathwayVertexRep();
  List<IDataDomain> dataDomains=DataDomainManager.get().getDataDomainsByType(""String_Node_Str"");
  List<GeneticDataDomain> geneticDataDomains=new ArrayList<GeneticDataDomain>();
  for (  IDataDomain dataDomain : dataDomains) {
    geneticDataDomains.add((GeneticDataDomain)dataDomain);
  }
  PathwayDataDomain pathwayDataDomain=(PathwayDataDomain)DataDomainManager.get().getDataDomainByType(""String_Node_Str"");
  Map<Integer,Set<GeneticDataDomain>> geneIDsToDataDomains=new HashMap<Integer,Set<GeneticDataDomain>>();
  Set<GeneticDataDomain> dataDomainsWithMappedGenes=new HashSet<GeneticDataDomain>();
  List<PathwayVertex> vertices=vertexRep.getPathwayVertices();
  if (vertices != null) {
    for (    PathwayVertex vertex : vertices) {
      int davidId=PathwayItemManager.get().getDavidIdByPathwayVertex(vertex);
      for (      GeneticDataDomain dataDomain : geneticDataDomains) {
        Set<Integer> ids=dataDomain.getGeneIDMappingManager().getIDAsSet(pathwayDataDomain.getDavidIDType(),dataDomain.getGeneIDType(),davidId);
        if (ids != null && !ids.isEmpty()) {
          for (          Integer id : ids) {
            Set<GeneticDataDomain> set=geneIDsToDataDomains.get(id);
            if (set == null) {
              set=new HashSet<GeneticDataDomain>();
              geneIDsToDataDomains.put(id,set);
            }
            set.add(dataDomain);
            dataDomainsWithMappedGenes.add(dataDomain);
          }
        }
      }
    }
  }
  Row previewRow=new Row(""String_Node_Str"");
  previewRow.setFrameColor(1,0,0,1);
  List<GeneticDataDomain> mappedGeneticDataDomainList=new ArrayList<GeneticDataDomain>(dataDomainsWithMappedGenes.size());
  List<Column> dataDomainColumns=new ArrayList<Column>(dataDomainsWithMappedGenes.size());
  previewRow.append(horizontalSpacing);
  for (  GeneticDataDomain dataDomain : geneticDataDomains) {
    if (dataDomainsWithMappedGenes.contains(dataDomain)) {
      mappedGeneticDataDomainList.add(dataDomain);
      Column column=new Column(""String_Node_Str"");
      dataDomainColumns.add(column);
      previewRow.append(column);
      previewRow.append(horizontalSpacing);
    }
  }
  List<Integer> geneIDList=new ArrayList<Integer>(geneIDsToDataDomains.keySet());
  Collections.sort(geneIDList);
  for (int i=0; i < mappedGeneticDataDomainList.size(); i++) {
    GeneticDataDomain currentDataDomain=mappedGeneticDataDomainList.get(i);
    Column column=dataDomainColumns.get(i);
    for (int j=0; j < geneIDList.size(); j++) {
      Integer id=geneIDList.get(j);
      Set<GeneticDataDomain> mappedDataDomains=geneIDsToDataDomains.get(id);
      if (mappedDataDomains.contains(currentDataDomain)) {
        Row geneRow=new Row(""String_Node_Str"" + i + ""String_Node_Str"");
        ColorRenderer geneRowColorRenderer=new ColorRenderer(new float[]{1,1,1,1},new float[]{0,0,0,1},1);
        geneRow.setRenderer(geneRowColorRenderer);
        geneRow.setPixelSizeY(GENE_ROW_HEIGHT_PIXELS);
        column.append(geneRow);
      }
 else {
        Row emptyRow=new Row(""String_Node_Str"" + i + ""String_Node_Str"");
        emptyRow.setPixelSizeY(GENE_ROW_HEIGHT_PIXELS);
        column.append(emptyRow);
      }
      if (i == 0)       heightPixels+=GENE_ROW_HEIGHT_PIXELS;
      if (j != geneIDList.size()) {
        column.append(verticalSpacing);
        if (i == 0)         heightPixels+=SPACING_PIXELS;
      }
    }
  }
  return previewRow;
}","private Row createPreviewRow(ElementLayout horizontalSpacing,ElementLayout verticalSpacing){
  PathwayVertexRep vertexRep=node.getPathwayVertexRep();
  List<IDataDomain> dataDomains=DataDomainManager.get().getDataDomainsByType(""String_Node_Str"");
  List<GeneticDataDomain> geneticDataDomains=new ArrayList<GeneticDataDomain>();
  for (  IDataDomain dataDomain : dataDomains) {
    geneticDataDomains.add((GeneticDataDomain)dataDomain);
  }
  PathwayDataDomain pathwayDataDomain=(PathwayDataDomain)DataDomainManager.get().getDataDomainByType(""String_Node_Str"");
  Map<Integer,Set<GeneticDataDomain>> geneIDsToDataDomains=new HashMap<Integer,Set<GeneticDataDomain>>();
  Set<GeneticDataDomain> dataDomainsWithMappedGenes=new HashSet<GeneticDataDomain>();
  List<PathwayVertex> vertices=vertexRep.getPathwayVertices();
  if (vertices != null) {
    for (    PathwayVertex vertex : vertices) {
      int davidId=PathwayItemManager.get().getDavidIdByPathwayVertex(vertex);
      for (      GeneticDataDomain dataDomain : geneticDataDomains) {
        Set<Integer> ids=dataDomain.getGeneIDMappingManager().getIDAsSet(pathwayDataDomain.getDavidIDType(),dataDomain.getGeneIDType(),davidId);
        if (ids != null && !ids.isEmpty()) {
          Set<GeneticDataDomain> set=geneIDsToDataDomains.get(davidId);
          if (set == null) {
            set=new HashSet<GeneticDataDomain>();
            geneIDsToDataDomains.put(davidId,set);
          }
          set.add(dataDomain);
          dataDomainsWithMappedGenes.add(dataDomain);
        }
      }
    }
  }
  Row previewRow=new Row(""String_Node_Str"");
  previewRow.setFrameColor(1,0,0,1);
  List<GeneticDataDomain> mappedGeneticDataDomainList=new ArrayList<GeneticDataDomain>(dataDomainsWithMappedGenes.size());
  List<Column> dataDomainColumns=new ArrayList<Column>(dataDomainsWithMappedGenes.size());
  previewRow.append(horizontalSpacing);
  for (  GeneticDataDomain dataDomain : geneticDataDomains) {
    if (dataDomainsWithMappedGenes.contains(dataDomain)) {
      mappedGeneticDataDomainList.add(dataDomain);
      Column column=new Column(""String_Node_Str"");
      column.setBottomUp(false);
      dataDomainColumns.add(column);
      ElementLayout labelLayout=new ElementLayout(""String_Node_Str"");
      LabelRenderer labelRenderer=new LabelRenderer(view,dataDomain.getLabel());
      labelRenderer.setAlignment(LabelRenderer.ALIGN_CENTER);
      labelLayout.setRenderer(labelRenderer);
      labelLayout.setPixelSizeY(CAPTION_HEIGHT_PIXELS);
      column.append(labelLayout);
      column.append(verticalSpacing);
      column.append(verticalSpacing);
      previewRow.append(column);
      previewRow.append(horizontalSpacing);
    }
  }
  List<Integer> davidIdList=new ArrayList<Integer>(geneIDsToDataDomains.keySet());
  Collections.sort(davidIdList);
  for (int i=0; i < mappedGeneticDataDomainList.size(); i++) {
    GeneticDataDomain currentDataDomain=mappedGeneticDataDomainList.get(i);
    Column column=dataDomainColumns.get(i);
    column.setRatioSizeX(1.0f / (float)dataDomainColumns.size());
    if (i == 0) {
      heightPixels+=CAPTION_HEIGHT_PIXELS + SPACING_PIXELS + SPACING_PIXELS;
    }
    for (int j=0; j < davidIdList.size(); j++) {
      Integer davidId=davidIdList.get(j);
      Set<GeneticDataDomain> mappedDataDomains=geneIDsToDataDomains.get(davidId);
      if (mappedDataDomains.contains(currentDataDomain)) {
        Row geneRow=new Row(""String_Node_Str"" + i + ""String_Node_Str"");
        ColorRenderer geneRowColorRenderer=new ColorRenderer(new float[]{1,1,1,1},new float[]{0,0,0,1},1);
        geneRow.setRenderer(geneRowColorRenderer);
        geneRow.setPixelSizeY(GENE_ROW_HEIGHT_PIXELS);
        column.append(geneRow);
      }
 else {
        Row emptyRow=new Row(""String_Node_Str"" + i + ""String_Node_Str"");
        emptyRow.setPixelSizeY(GENE_ROW_HEIGHT_PIXELS);
        column.append(emptyRow);
      }
      if (i == 0)       heightPixels+=GENE_ROW_HEIGHT_PIXELS;
      if (j != davidIdList.size()) {
        column.append(verticalSpacing);
        if (i == 0)         heightPixels+=SPACING_PIXELS;
      }
    }
  }
  return previewRow;
}",0.8828196124333464
57761,"/** 
 * Returns all pathways where a specific gene is contained at least once.
 * @param idType
 * @param id
 * @return a Set of PathwayGraphs or null if no such mapping exists
 */
public Set<PathwayGraph> getPathwayGraphsByGeneID(IDType idType,int id){
  Set<PathwayGraph> pathways=new HashSet<PathwayGraph>();
  PathwayVertex pathwayVertexGraphItem;
  if (idType == IDType.getIDType(""String_Node_Str""))   pathwayVertexGraphItem=PathwayItemManager.get().getPathwayVertexGraphItemByDavidId(id);
 else   throw new IllegalStateException(""String_Node_Str"");
  if (pathwayVertexGraphItem == null)   return null;
  for (  PathwayVertexRep pathwayItemRep : pathwayVertexGraphItem.getPathwayVertexReps()) {
    PathwayGraph pathwayGraph=(PathwayGraph)pathwayItemRep.getPathways();
    pathways.add(pathwayGraph);
  }
  return pathways;
}","/** 
 * Returns all pathways where a specific gene is contained at least once.
 * @param idType
 * @param id
 * @return a Set of PathwayGraphs or null if no such mapping exists
 */
public Set<PathwayGraph> getPathwayGraphsByGeneID(IDType idType,int id){
  Set<PathwayGraph> pathways=new HashSet<PathwayGraph>();
  PathwayVertex pathwayVertexGraphItem;
  if (idType == IDType.getIDType(""String_Node_Str""))   pathwayVertexGraphItem=PathwayItemManager.get().getPathwayVertexGraphItemByDavidId(id);
 else   throw new IllegalStateException(""String_Node_Str"");
  if (pathwayVertexGraphItem == null)   return null;
  for (  PathwayVertexRep pathwayItemRep : pathwayVertexGraphItem.getPathwayVertexReps()) {
    pathways.addAll(pathwayItemRep.getPathways());
  }
  return pathways;
}",0.9208722741433022
57762,"/** 
 * Returns a clone of the record selection manager. This is the preferred way to initialize SelectionManagers.
 * @return a clone of the record selection manager
 */
public RecordSelectionManager getRecordSelectionManager(){
  return (RecordSelectionManager)recordSelectionManager.clone();
}","/** 
 * Returns a clone of the record selection manager. This is the preferred way to initialize SelectionManagers.
 * @return a clone of the record selection manager
 */
public synchronized RecordSelectionManager getRecordSelectionManager(){
  return (RecordSelectionManager)recordSelectionManager.clone();
}",0.9785123966942147
57763,"/** 
 * Returns a clone of the dimension selection manager. This is the preferred way to initialize SelectionManagers.
 * @return a clone of the dimension selection manager
 */
public DimensionSelectionManager getDimensionSelectionManager(){
  return (DimensionSelectionManager)dimensionSelectionManager.clone();
}","/** 
 * Returns a clone of the dimension selection manager. This is the preferred way to initialize SelectionManagers.
 * @return a clone of the dimension selection manager
 */
public synchronized DimensionSelectionManager getDimensionSelectionManager(){
  return (DimensionSelectionManager)dimensionSelectionManager.clone();
}",0.9797191887675508
57764,"@Override public void handleClearSelections(){
  contentTree.removeAll();
  dimensionTree.removeAll();
  recordSelectionManager.clearSelections();
  dimensionSelectionManager.clearSelections();
}","@Override public void handleClearSelections(){
  if (!contentTree.isDisposed())   contentTree.removeAll();
  if (!dimensionTree.isDisposed())   dimensionTree.removeAll();
  recordSelectionManager.clearSelections();
  dimensionSelectionManager.clearSelections();
}",0.851528384279476
57765,"@Override public void handleSelectionUpdate(final SelectionDelta selectionDelta,final boolean scrollToSelection,final String info){
  recordSelectionManager.setDelta(selectionDelta);
  parentComposite.getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      updateContentTree();
    }
  }
);
}","@Override public void handleSelectionUpdate(final SelectionDelta selectionDelta,final boolean scrollToSelection,final String info){
  if (!selectionDelta.getIDType().getIDCategory().equals(recordSelectionManager.getIDType().getIDCategory()))   return;
  recordSelectionManager.setDelta(selectionDelta);
  parentComposite.getDisplay().asyncExec(new Runnable(){
    @Override public void run(){
      updateContentTree();
    }
  }
);
}",0.839572192513369
57766,"@Override public void setDetailLevel(DetailLevel detailLevel){
  if (detailLevel.equals(this.detailLevel))   return;
  super.setDetailLevel(detailLevel);
  if (detailLevel == DetailLevel.HIGH || detailLevel == DetailLevel.MEDIUM) {
    layoutManager.setStaticLayoutConfiguration(detailedRenderingTemplate);
    detailedRenderingTemplate.setStaticLayouts();
    showCaptions=true;
  }
 else {
    layoutManager.setStaticLayoutConfiguration(textureTemplate);
    showCaptions=false;
  }
}","@Override public void setDetailLevel(DetailLevel detailLevel){
  if (detailLevel.equals(this.detailLevel))   return;
  super.setDetailLevel(detailLevel);
  if (dataContainer.getNrDimensions() > 1 && (detailLevel == DetailLevel.HIGH || detailLevel == DetailLevel.MEDIUM)) {
    layoutManager.setStaticLayoutConfiguration(detailedRenderingTemplate);
    detailedRenderingTemplate.setStaticLayouts();
    showCaptions=true;
  }
 else {
    layoutManager.setStaticLayoutConfiguration(textureTemplate);
    showCaptions=false;
  }
}",0.9595261599210266
57767,"/** 
 * Registers a   {@link IPickingListener} for this view that is called when objects with the specifiedpickingType <b>and</b> ID are picked.
 * @param pickingListener the picking listener that should be called on picking event
 * @param pickingType the picking type. Take care that the type is unique for a view.
 * @param pickedObjectID the id identifying the picked object
 */
public void addIDPickingListener(IPickingListener pickingListener,String pickingType,int pickedObjectID){
  HashMap<Integer,Set<IPickingListener>> map=idPickingListeners.get(pickingType);
  if (map == null) {
    map=new HashMap<Integer,Set<IPickingListener>>();
    idPickingListeners.put(pickingType,map);
  }
  Set<IPickingListener> pickingListeners=map.get(pickedObjectID);
  if (pickingListeners == null) {
    pickingListeners=new HashSet<IPickingListener>();
  }
  for (  IPickingListener listener : pickingListeners) {
    if (listener.getClass() == pickingListener.getClass()) {
      return;
    }
  }
  pickingListeners.add(pickingListener);
  map.put(pickedObjectID,pickingListeners);
}","/** 
 * Registers a   {@link IPickingListener} for this view that is called when objects with the specifiedpickingType <b>and</b> ID are picked.
 * @param pickingListener the picking listener that should be called on picking event
 * @param pickingType the picking type. Take care that the type is unique for a view.
 * @param pickedObjectID the id identifying the picked object
 */
public void addIDPickingListener(IPickingListener pickingListener,String pickingType,int pickedObjectID){
  HashMap<Integer,Set<IPickingListener>> map=idPickingListeners.get(pickingType);
  if (map == null) {
    map=new HashMap<Integer,Set<IPickingListener>>();
    idPickingListeners.put(pickingType,map);
  }
  Set<IPickingListener> pickingListeners=map.get(pickedObjectID);
  if (pickingListeners == null) {
    pickingListeners=new HashSet<IPickingListener>();
  }
  for (  IPickingListener listener : pickingListeners) {
    if (listener == pickingListener) {
      return;
    }
  }
  pickingListeners.add(pickingListener);
  map.put(pickedObjectID,pickingListeners);
}",0.9897196261682244
57768,"/** 
 * Sets the   {@link ABrickLayoutConfiguration} for this brick, specifying itsappearance. If the specified view type is valid, it will be set, otherwise the default view type will be set.
 * @param brickLayoutTemplate
 * @param viewType
 */
public void setBrickLayoutTemplate(ABrickLayoutConfiguration brickLayoutTemplate,EContainedViewType viewType){
  if (brickLayout != null)   brickLayout.destroy();
  brickLayout=brickLayoutTemplate;
  if ((brickLayout instanceof CompactBrickLayoutTemplate) || (brickLayout instanceof CompactHeaderBrickLayoutTemplate))   isInOverviewMode=true;
 else   isInOverviewMode=false;
  if (layoutManager != null) {
    layoutManager.setStaticLayoutConfiguration(brickLayout);
    if (brickLayout.isViewTypeValid(viewType)) {
      setContainedView(viewType);
    }
 else {
      setContainedView(brickLayout.getDefaultViewType());
    }
  }
}","/** 
 * Sets the   {@link ABrickLayoutConfiguration} for this brick, specifying itsappearance. If the specified view type is valid, it will be set, otherwise the default view type will be set.
 * @param newBrickLayout
 * @param viewType
 */
public void setBrickLayoutTemplate(ABrickLayoutConfiguration newBrickLayout,EContainedViewType viewType){
  if (brickLayout != null && brickLayout != newBrickLayout)   brickLayout.destroy();
  brickLayout=newBrickLayout;
  if ((brickLayout instanceof CompactBrickLayoutTemplate) || (brickLayout instanceof CompactHeaderBrickLayoutTemplate))   isInOverviewMode=true;
 else   isInOverviewMode=false;
  if (layoutManager != null) {
    layoutManager.setStaticLayoutConfiguration(brickLayout);
    if (brickLayout.isViewTypeValid(viewType)) {
      setContainedView(viewType);
    }
 else {
      setContainedView(brickLayout.getDefaultViewType());
    }
  }
}",0.9256756756756755
57769,"@Override public void displayRemote(GL2 gl){
  checkForHits(gl);
  display(gl);
}","@Override public void displayRemote(GL2 gl){
  display(gl);
}",0.8591549295774648
57770,"public GLBrick(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum);
  viewType=GLBrick.VIEW_TYPE;
  viewLabel=""String_Node_Str"";
  views=new HashMap<EContainedViewType,AGLView>();
  containedViewRenderers=new HashMap<EContainedViewType,LayoutRenderer>();
}","public GLBrick(GLCanvas glCanvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(glCanvas,parentComposite,viewFrustum);
  viewType=GLBrick.VIEW_TYPE;
  viewLabel=""String_Node_Str"";
  views=new HashMap<EContainedViewType,AGLView>();
  containedViewRenderers=new HashMap<EContainedViewType,LayoutRenderer>();
  System.out.println(getID());
}",0.9538002980625933
57771,"@Override public void display(GL2 gl){
  if (currentRemoteView != null)   currentRemoteView.processEvents();
  processEvents();
  handleBrickResize(gl);
  if (isBaseDisplayListDirty)   buildBaseDisplayList(gl);
  GLVisBricks visBricks=getDimensionGroup().getVisBricksView();
  gl.glPushName(visBricks.getPickingManager().getPickingID(visBricks.getID(),PickingType.BRICK.name(),getID()));
  gl.glPushName(getPickingManager().getPickingID(getID(),PickingType.BRICK.name(),getID()));
  gl.glColor4f(1.0f,0.0f,0.0f,0.5f);
  gl.glTranslatef(0,0,0.1f);
  gl.glBegin(GL2.GL_QUADS);
  float zpos=0f;
  gl.glVertex3f(0,0,zpos);
  gl.glVertex3f(wrappingLayout.getSizeScaledX(),0,zpos);
  gl.glVertex3f(wrappingLayout.getSizeScaledX(),wrappingLayout.getSizeScaledY(),zpos);
  gl.glVertex3f(0,wrappingLayout.getSizeScaledY(),zpos);
  gl.glEnd();
  gl.glPopName();
  gl.glPopName();
  layoutManager.render(gl);
  gl.glCallList(baseDisplayListIndex);
}","@Override public void display(GL2 gl){
  if (currentRemoteView != null)   currentRemoteView.processEvents();
  checkForHits(gl);
  processEvents();
  handleBrickResize(gl);
  if (isBaseDisplayListDirty)   buildBaseDisplayList(gl);
  GLVisBricks visBricks=getDimensionGroup().getVisBricksView();
  gl.glPushName(visBricks.getPickingManager().getPickingID(visBricks.getID(),PickingType.BRICK.name(),getID()));
  gl.glPushName(getPickingManager().getPickingID(getID(),PickingType.BRICK.name(),getID()));
  gl.glColor4f(1.0f,0.0f,0.0f,0.5f);
  gl.glTranslatef(0,0,0.1f);
  gl.glBegin(GL2.GL_QUADS);
  float zpos=0f;
  gl.glVertex3f(0,0,zpos);
  gl.glVertex3f(wrappingLayout.getSizeScaledX(),0,zpos);
  gl.glVertex3f(wrappingLayout.getSizeScaledX(),wrappingLayout.getSizeScaledY(),zpos);
  gl.glVertex3f(0,wrappingLayout.getSizeScaledY(),zpos);
  gl.glEnd();
  gl.glPopName();
  gl.glPopName();
  layoutManager.render(gl);
  gl.glCallList(baseDisplayListIndex);
}",0.989451476793249
57772,"@Override protected void displayLocal(GL2 gl){
  pickingManager.handlePicking(this,gl);
  checkForHits(gl);
  display(gl);
}","@Override protected void displayLocal(GL2 gl){
  pickingManager.handlePicking(this,gl);
  display(gl);
}",0.912280701754386
57773,"@Override protected void registerPickingListeners(){
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
    }
  }
,PickingType.BRICK_LOCK_RESIZING_BUTTON.name(),LOCK_RESIZING_BUTTON_ID);
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      boolean isGlobalViewSwitching=!viewSwitchingModeButton.isSelected();
      dimensionGroup.setGlobalViewSwitching(isGlobalViewSwitching);
      viewSwitchingModeButton.setSelected(isGlobalViewSwitching);
    }
  }
,PickingType.BRICK_VIEW_SWITCHING_MODE_BUTTON.name(),VIEW_SWITCHING_MODE_BUTTON_ID);
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      brick.collapse();
      dimensionGroup.updateLayout();
    }
  }
,PickingType.BRICK_COLLAPSE_BUTTON.name(),COLLAPSE_BUTTON_ID);
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      dimensionGroup.showDetailedBrick(brick,false);
    }
  }
,PickingType.EXPAND_RIGHT_HANDLE.name(),brick.getID());
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      dimensionGroup.showDetailedBrick(brick,true);
    }
  }
,PickingType.EXPAND_LEFT_HANDLE.name(),brick.getID());
}","@Override protected void registerPickingListeners(){
  System.out.println(""String_Node_Str"" + brick.getID());
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
    }
  }
,PickingType.BRICK_LOCK_RESIZING_BUTTON.name(),LOCK_RESIZING_BUTTON_ID);
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      boolean isGlobalViewSwitching=!viewSwitchingModeButton.isSelected();
      dimensionGroup.setGlobalViewSwitching(isGlobalViewSwitching);
      viewSwitchingModeButton.setSelected(isGlobalViewSwitching);
    }
  }
,PickingType.BRICK_VIEW_SWITCHING_MODE_BUTTON.name(),VIEW_SWITCHING_MODE_BUTTON_ID);
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      brick.collapse();
      dimensionGroup.updateLayout();
    }
  }
,PickingType.BRICK_COLLAPSE_BUTTON.name(),COLLAPSE_BUTTON_ID);
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      dimensionGroup.showDetailedBrick(brick,false);
    }
  }
,PickingType.EXPAND_RIGHT_HANDLE.name(),brick.getID());
  brick.addIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      dimensionGroup.showDetailedBrick(brick,true);
    }
  }
,PickingType.EXPAND_LEFT_HANDLE.name(),brick.getID());
}",0.9789590254706534
57774,"@Override public void destroy(){
  brick.removeAllIDPickingListeners(PickingType.BRICK_LOCK_RESIZING_BUTTON.name(),LOCK_RESIZING_BUTTON_ID);
  brick.removeAllIDPickingListeners(PickingType.BRICK_VIEW_SWITCHING_MODE_BUTTON.name(),VIEW_SWITCHING_MODE_BUTTON_ID);
  brick.removeAllIDPickingListeners(PickingType.BRICK_COLLAPSE_BUTTON.name(),COLLAPSE_BUTTON_ID);
  brick.removeAllIDPickingListeners(PickingType.EXPAND_RIGHT_HANDLE.name(),brick.getID());
  brick.removeAllIDPickingListeners(PickingType.EXPAND_LEFT_HANDLE.name(),brick.getID());
  toolBar.destroy();
  super.destroy();
}","@Override public void destroy(){
  System.out.println(""String_Node_Str"" + brick.getID());
  brick.removeAllIDPickingListeners(PickingType.BRICK_LOCK_RESIZING_BUTTON.name(),LOCK_RESIZING_BUTTON_ID);
  brick.removeAllIDPickingListeners(PickingType.BRICK_VIEW_SWITCHING_MODE_BUTTON.name(),VIEW_SWITCHING_MODE_BUTTON_ID);
  brick.removeAllIDPickingListeners(PickingType.BRICK_COLLAPSE_BUTTON.name(),COLLAPSE_BUTTON_ID);
  brick.removeAllIDPickingListeners(PickingType.EXPAND_RIGHT_HANDLE.name(),brick.getID());
  brick.removeAllIDPickingListeners(PickingType.EXPAND_LEFT_HANDLE.name(),brick.getID());
  super.destroy();
}",0.9282136894824708
57775,"public DimensionGroup(GLCanvas canvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(canvas,parentComposite,viewFrustum);
  viewType=VIEW_TYPE;
  mainRow=new Row(""String_Node_Str"");
  mainRow.setRenderingPriority(1);
  mainRow.setXDynamic(true);
  mainRow.setFrameColor(1,0,1,1);
  mainRow.sethAlign(HAlign.CENTER);
  mainColumn=new Column(""String_Node_Str"");
  mainColumn.setPriorityRendereing(true);
  mainColumn.setBottomUp(false);
  mainColumn.setXDynamic(true);
  mainColumn.setVAlign(VAlign.CENTER);
  clusterBrickWrapperColumn=new Column(""String_Node_Str"");
  clusterBrickWrapperColumn.setXDynamic(true);
  clusterBrickColumn=new Column(""String_Node_Str"");
  clusterBrickColumn.setFrameColor(1,0,1,1);
  clusterBrickColumn.setBottomUp(false);
  clusterBrickColumn.setXDynamic(true);
  clusterBrickColumn.setIDs(uniqueID,BOTTOM_COLUMN_ID);
  clusterBrickColumn.setVAlign(VAlign.CENTER);
  clusterBrickWrapperColumn.append(clusterBrickColumn);
  clusterBricks=new ArrayList<GLBrick>(20);
  headerBrickLayout=new Column(""String_Node_Str"");
  headerBrickLayout.setXDynamic(true);
  headerBrickLayout.setYDynamic(true);
  headerBrickLayout.setFrameColor(1,1,0,1);
  headerBrickLayout.setRenderingPriority(10);
  initMainColumn();
  mainRow.append(mainColumn);
}","public DimensionGroup(GLCanvas canvas,Composite parentComposite,ViewFrustum viewFrustum){
  super(canvas,parentComposite,viewFrustum);
  viewType=VIEW_TYPE;
  mainRow=new Row(""String_Node_Str"");
  mainRow.setRenderingPriority(1);
  mainRow.setXDynamic(true);
  mainRow.setFrameColor(1,0,1,1);
  mainRow.sethAlign(HAlign.CENTER);
  mainColumn=new Column(""String_Node_Str"");
  mainColumn.setPriorityRendereing(true);
  mainColumn.setBottomUp(false);
  mainColumn.setXDynamic(true);
  mainColumn.setVAlign(VAlign.CENTER);
  clusterBrickWrapperColumn=new Column(""String_Node_Str"");
  clusterBrickWrapperColumn.setXDynamic(true);
  clusterBrickColumn=new Column(""String_Node_Str"");
  clusterBrickColumn.setFrameColor(1,0,1,1);
  clusterBrickColumn.setBottomUp(false);
  clusterBrickColumn.setXDynamic(true);
  clusterBrickColumn.setIDs(uniqueID,BOTTOM_COLUMN_ID);
  clusterBrickColumn.setVAlign(VAlign.CENTER);
  clusterBrickWrapperColumn.append(clusterBrickColumn);
  clusterBricks=new ArrayList<GLBrick>(20);
  headerBrickLayout=new Column(""String_Node_Str"");
  headerBrickLayout.setXDynamic(true);
  headerBrickLayout.setYDynamic(true);
  headerBrickLayout.setFrameColor(1,1,0,1);
  headerBrickLayout.setRenderingPriority(10);
  isCollapsed=true;
  initMainColumn();
  mainRow.append(mainColumn);
}",0.9922239502332816
57776,"/** 
 * @return Returns a new list of all record ids in the order they were initialized
 */
public List<Integer> getRowIDList(){
  ArrayList<Integer> list=new ArrayList<Integer>(metaData.depth);
  for (int count=0; count < metaData.depth(); count++) {
    list.add(count);
  }
  return list;
}","/** 
 * @return Returns a new list of all record ids in the order they were initialized
 */
public List<Integer> getRowIDList(){
  ArrayList<Integer> list=new ArrayList<Integer>(metaData.nrColumns);
  for (int count=0; count < metaData.depth(); count++) {
    list.add(count);
  }
  return list;
}",0.976271186440678
57777,"/** 
 * Gets the minimum value in the set in the specified data representation.
 * @param dataRepresentation Data representation the minimum value shall be returned in.
 * @throws OperationNotSupportedException when executed on nominal data
 * @return The absolute minimum value in the set in the specified data representation.
 */
public double getMinAs(ExternalDataRepresentation dataRepresentation){
  if (min == Double.MAX_VALUE) {
    calculateGlobalExtrema();
  }
  if (dataRepresentation == table.externalDataRep)   return min;
  double result=getRawFromExternalDataRep(min);
  return getDataRepFromRaw(result,dataRepresentation);
}","/** 
 * Gets the minimum value in the set in the specified data representation.
 * @param dataRepresentation Data representation the minimum value shall be returned in.
 * @throws OperationNotSupportedException when executed on nominal data
 * @return The absolute minimum value in the set in the specified datarepresentation.
 */
public double getMinAs(ExternalDataRepresentation dataRepresentation){
  if (min == Double.MAX_VALUE) {
    calculateGlobalExtrema();
  }
  if (dataRepresentation == table.externalDataRep)   return min;
  double result=getRawFromExternalDataRep(min);
  return getDataRepFromRaw(result,dataRepresentation);
}",0.999216914643696
57778,"/** 
 * Get the depth of the set, which is the length of the dimensions (i.e. the number of content elements)
 * @return the number of elements in the dimensions contained in the list
 */
public int depth(){
  if (depth == 0) {
    for (    AColumn dimension : table.hashColumns.values()) {
      if (depth == 0)       depth=dimension.size();
 else {
        if (depth != dimension.size())         throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  return depth;
}","/** 
 * Get the depth of the set, which is the number of records, the length of the dimensions
 * @return the number of elements in the dimensions contained in the list
 */
public int depth(){
  if (table.isColumnDimension)   return getNrColumns();
 else   return getNrRows();
}",0.2637075718015665
57779,"/** 
 * Get the number of dimensions in a set
 * @return
 */
public int size(){
  return table.hashColumns.size();
}","/** 
 * Get the number of dimensions in a set
 * @return
 */
public int size(){
  if (table.isColumnDimension)   return getNrRows();
 else   return getNrColumns();
}",0.7402135231316725
57780,"/** 
 * Gets the maximum value in the set in the specified data representation.
 * @param dataRepresentation Data representation the maximum value shall be returned in.
 * @throws OperationNotSupportedException when executed on nominal data
 * @return The absolute maximum value in the set in the specified data representation.
 */
public double getMaxAs(ExternalDataRepresentation dataRepresentation){
  if (max == Double.MIN_VALUE) {
    calculateGlobalExtrema();
  }
  if (dataRepresentation == table.externalDataRep)   return max;
  double result=getRawFromExternalDataRep(max);
  return getDataRepFromRaw(result,dataRepresentation);
}","/** 
 * Gets the maximum value in the set in the specified data representation.
 * @param dataRepresentation Data representation the maximum value shall be returned in.
 * @throws OperationNotSupportedException when executed on nominal data
 * @return The absolute maximum value in the set in the specified datarepresentation.
 */
public double getMaxAs(ExternalDataRepresentation dataRepresentation){
  if (max == Double.MIN_VALUE) {
    calculateGlobalExtrema();
  }
  if (dataRepresentation == table.externalDataRep)   return max;
  double result=getRawFromExternalDataRep(max);
  return getDataRepFromRaw(result,dataRepresentation);
}",0.999216914643696
57781,"/** 
 * Converts a raw value to the specified data representation.
 * @param dRaw Raw value that shall be converted
 * @param dataRepresentation Data representation the raw value shall be converted to.
 * @return Value in the specified data representation converted from the raw value.
 */
private double getDataRepFromRaw(double dRaw,ExternalDataRepresentation dataRepresentation){
switch (dataRepresentation) {
case NORMAL:
    return dRaw;
case LOG2:
  return Math.log(dRaw) / Math.log(2);
case LOG10:
return Math.log10(dRaw);
default :
throw new IllegalStateException(""String_Node_Str"" + dataRepresentation);
}
}","/** 
 * Converts a raw value to the specified data representation.
 * @param dRaw Raw value that shall be converted
 * @param dataRepresentation Data representation the raw value shall be converted to.
 * @return Value in the specified data representation converted from the rawvalue.
 */
private double getDataRepFromRaw(double dRaw,ExternalDataRepresentation dataRepresentation){
switch (dataRepresentation) {
case NORMAL:
    return dRaw;
case LOG2:
  return Math.log(dRaw) / Math.log(2);
case LOG10:
return Math.log10(dRaw);
default :
throw new IllegalStateException(""String_Node_Str"" + dataRepresentation);
}
}",0.9991876523151908
57782,"/** 
 * Render the text at the position specified (lower left corner) within the bounding box The height is scaled to fit, the string is truncated to fit the width
 * @param gl
 * @param text
 * @param xPosition x of lower left corner
 * @param yPosition y of lower left corner
 * @param zPositon
 * @param width width fo the bounding box
 * @param height height of the bounding box
 */
public void renderTextInBounds(GL2 gl,String text,float xPosition,float yPosition,float zPositon,float width,float height){
  Rectangle2D bounds=super.getBounds(text);
  double scaling=height / bounds.getHeight();
  double requiredWidth=bounds.getWidth() * scaling;
  if (requiredWidth > width + 0.001) {
    double truncateFactor=width / requiredWidth;
    int length=(int)(text.length() * truncateFactor);
    if (length >= 0)     text=text.substring(0,length);
  }
  begin3DRendering();
  draw3D(text,xPosition,yPosition,zPositon,(float)scaling);
  flush();
  end3DRendering();
}","/** 
 * Render the text at the position specified (lower left corner) within the bounding box The height is scaled to fit, the string is truncated to fit the width
 * @param gl
 * @param text
 * @param xPosition x of lower left corner
 * @param yPosition y of lower left corner
 * @param zPositon
 * @param width width fo the bounding box
 * @param height height of the bounding box
 */
public void renderTextInBounds(GL2 gl,String text,float xPosition,float yPosition,float zPositon,float width,float height){
  double scaling=height / super.getBounds(""String_Node_Str"").getHeight();
  ;
  Rectangle2D boundsForWidth=super.getBounds(text);
  double requiredWidth=boundsForWidth.getWidth() * scaling;
  if (requiredWidth > width + 0.001) {
    double truncateFactor=width / requiredWidth;
    int length=(int)(text.length() * truncateFactor);
    if (length >= 0)     text=text.substring(0,length);
  }
  begin3DRendering();
  draw3D(text,xPosition,yPosition,zPositon,(float)scaling);
  flush();
  end3DRendering();
}",0.9154078549848944
57783,"/** 
 * Renders text with a specified minimum size. Use this only if you want to render several instances at a time. If you have only one string, use  {@link #renderText(GL2,String,float,float,float,float,int)} instead.
 * @param gl GL2 context.
 * @param text Text to render
 * @param x X coordinate of the text.
 * @param y Y coordinate of the text.
 * @param z Z coordinate of the text.
 * @param scaling Factor the text is scaled with.
 * @param minSize Minimum size of the text. Note that the minimum size is scaled with the specified scaling vector.
 */
public void draw3D(GL2 gl,String text,float x,float y,float z,float scaling,int minSize){
  scaling=calculateScaling(gl,scaling,minSize);
  draw3D(text,x,y,z,scaling);
}","/** 
 * Renders text with a specified minimum size. Use this only if you want to render several instances at a time. If you have only one string, use  {@link #renderText(GL2,String,float,float,float,float,int)}instead.
 * @param gl GL2 context.
 * @param text Text to render
 * @param x X coordinate of the text.
 * @param y Y coordinate of the text.
 * @param z Z coordinate of the text.
 * @param scaling Factor the text is scaled with.
 * @param minSize Minimum size of the text. Note that the minimum size is scaled with the specified scaling vector.
 */
public void draw3D(GL2 gl,String text,float x,float y,float z,float scaling,int minSize){
  scaling=calculateScaling(gl,scaling,minSize);
  draw3D(text,x,y,z,scaling);
}",0.9993136582017844
57784,"/** 
 * Calculates the min and max of the container and sets them to the fMin and fMax class variables
 */
private void calculateMinMax(){
  fMin=Float.MAX_VALUE;
  fMax=Float.MIN_VALUE;
  for (  float fCurrent : fArContainer) {
    if (Float.isNaN(fCurrent)) {
      continue;
    }
    if (fCurrent < fMin) {
      fMin=fCurrent;
      continue;
    }
    if (fCurrent > fMax) {
      fMax=fCurrent;
    }
  }
  return;
}","/** 
 * Calculates the min and max of the container and sets them to the fMin and fMax class variables
 */
private void calculateMinMax(){
  fMin=Float.MAX_VALUE;
  fMax=Float.MIN_VALUE;
  for (  float fCurrent : container) {
    if (Float.isNaN(fCurrent)) {
      continue;
    }
    if (fCurrent < fMin) {
      fMin=fCurrent;
      continue;
    }
    if (fCurrent > fMax) {
      fMax=fCurrent;
    }
  }
  return;
}",0.9940688018979834
57785,"@Override public int size(){
  return fArContainer.length;
}","@Override public int size(){
  return container.length;
}",0.9572649572649572
57786,"@Override public FloatCContainer log(int iBase){
  float[] fArTarget=new float[fArContainer.length];
  float fTmp;
  for (int index=0; index < fArContainer.length; index++) {
    fTmp=fArContainer[index];
    fArTarget[index]=(float)Math.log(fTmp) / (float)Math.log(iBase);
    if (fArTarget[index] == Float.NEGATIVE_INFINITY) {
      fArTarget[index]=0;
    }
  }
  return new FloatCContainer(fArTarget);
}","@Override public FloatCContainer log(int iBase){
  float[] fArTarget=new float[container.length];
  float fTmp;
  for (int index=0; index < container.length; index++) {
    fTmp=container[index];
    fArTarget[index]=(float)Math.log(fTmp) / (float)Math.log(iBase);
    if (fArTarget[index] == Float.NEGATIVE_INFINITY) {
      fArTarget[index]=0;
    }
  }
  return new FloatCContainer(fArTarget);
}",0.9813664596273292
57787,"/** 
 * Constructor Pass a float array. The length of the array can not be modified after initialization
 * @param fArContainer the float array
 */
public FloatCContainer(final float[] fArContainer){
  this.fArContainer=fArContainer;
}","/** 
 * Constructor Pass a float array. The length of the array can not be modified after initialization
 * @param fArContainer the float array
 */
public FloatCContainer(final float[] fArContainer){
  this.container=fArContainer;
}",0.9507494646680942
57788,"/** 
 * Returns the value associated with the index
 * @throws IndexOutOfBoundsException if index out of range
 * @param iIndex index of element to return
 * @return the element at the specified position in this list
 */
public float get(final int iIndex){
  return fArContainer[iIndex];
}","/** 
 * Returns the value associated with the index
 * @throws IndexOutOfBoundsException if index out of range
 * @param index index of element to return
 * @return the element at the specified position in this list
 */
public float get(final int index){
  return container[index];
}",0.986013986013986
57789,"@Override public FloatCContainer normalize(){
  return new FloatCContainer(ConversionTools.normalize(fArContainer,(int)getMin(),(int)getMax()));
}","@Override public FloatCContainer normalize(){
  return new FloatCContainer(ConversionTools.normalize(container,(int)getMin(),(int)getMax()));
}",0.9826989619377162
57790,"@Override public FloatCContainer normalizeWithExternalExtrema(final double dMin,final double dMax){
  if (dMin >= dMax)   throw new IllegalArgumentException(""String_Node_Str"");
  return new FloatCContainer(ConversionTools.normalize(fArContainer,(float)dMin,(float)dMax));
}","@Override public FloatCContainer normalizeWithExternalExtrema(final double dMin,final double dMax){
  if (dMin >= dMax)   throw new IllegalArgumentException(""String_Node_Str"");
  return new FloatCContainer(ConversionTools.normalize(container,(float)dMin,(float)dMax));
}",0.990791896869245
57791,"@Override public String toString(){
  String string=""String_Node_Str"";
  for (  float value : fArContainer)   string+=value + ""String_Node_Str"";
  return string;
}","@Override public String toString(){
  String string=""String_Node_Str"";
  for (  float value : container)   string+=value + ""String_Node_Str"";
  return string;
}",0.9845201238390092
57792,"/** 
 * @return Returns a new list of all record ids in the order they were initialized
 */
public List<Integer> getRowIDList(){
  ArrayList<Integer> list=new ArrayList<Integer>(metaData.nrColumns);
  for (int count=0; count < metaData.depth(); count++) {
    list.add(count);
  }
  return list;
}","/** 
 * @return Returns a new list of all record ids in the order they were initialized
 */
public List<Integer> getRowIDList(){
  ArrayList<Integer> list=new ArrayList<Integer>(metaData.nrColumns);
  for (int count=0; count < metaData.getNrRows(); count++) {
    list.add(count);
  }
  return list;
}",0.9765886287625418
57793,"/** 
 * Set an artificial maximum for the datatable. All elements smaller than that are clipped to this value in the representation. This only affects the normalization, does not alter the raw data
 */
void setMax(double dMax){
  bArtificialMax=true;
  this.max=dMax;
}","/** 
 * Set an artificial maximum for the DataTable. All elements smaller than that are clipped to this value in the representation. This only affects the normalization, does not alter the raw data
 */
void setMax(double dMax){
  bArtificialMax=true;
  this.max=dMax;
}",0.9814126394052044
57794,"/** 
 * Get the number of rows in the table 
 */
private int getNrRows(){
  return table.hashColumns.size();
}","/** 
 * Get the number of rows in the table 
 */
int getNrRows(){
  return table.hashColumns.values().iterator().next().size();
}",0.8535564853556485
57795,"/** 
 * Get the number of columns in the table 
 */
private int getNrColumns(){
  if (nrColumns == 0) {
    for (    AColumn dimension : table.hashColumns.values()) {
      if (nrColumns == 0)       nrColumns=dimension.size();
 else {
        if (nrColumns != dimension.size())         throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  return nrColumns;
}","/** 
 * Get the number of columns in the table 
 */
int getNrColumns(){
  if (nrColumns == 0) {
    for (    AColumn dimension : table.hashColumns.values()) {
      if (nrColumns == 0)       nrColumns=dimension.size();
 else {
        if (nrColumns != dimension.size())         throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  return nrColumns;
}",0.9893617021276596
57796,"/** 
 * <p> Converts a   {@link RecordPerspective} with an IDType that is not the {@link #recordIDType} to a newRecordPerspective with the recordIDType. </p> <p> Grouping, and naming is preserved, sample elements and trees are not. </p>
 */
public RecordPerspective convertForeignRecordPerspective(RecordPerspective foreignPerspective){
  if (foreignPerspective.getIdType().getIDCategory() != recordIDCategory) {
    throw new IllegalArgumentException(""String_Node_Str"" + foreignPerspective.getIdType() + ""String_Node_Str""+ recordIDType);
  }
  if (foreignPerspective.getIdType() == recordIDType)   return foreignPerspective;
  RecordVirtualArray foreignRecordVA=foreignPerspective.getVirtualArray();
  RecordGroupList recordGroupList=foreignRecordVA.getGroupList();
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  ArrayList<Integer> indices=new ArrayList<Integer>(foreignRecordVA.size());
  ArrayList<Integer> groupSizes=new ArrayList<Integer>(recordGroupList.size());
  ArrayList<Integer> sampleElements=new ArrayList<Integer>(recordGroupList.size());
  ArrayList<String> groupNames=new ArrayList<String>(recordGroupList.size());
  for (  Group foreignGroup : recordGroupList) {
    groupSizes.add(0);
    sampleElements.add(0);
    groupNames.add(foreignGroup.getClusterNode().getLabel());
  }
  for (  Integer foreignVAID : foreignRecordVA) {
    Integer localVAID=recordIDMappingManager.getID(foreignRecordVA.getIdType(),recordIDType,foreignVAID);
    if (localVAID == null)     continue;
    indices.add(localVAID);
    int groupIndex=recordGroupList.getGroupOfVAIndex(foreignRecordVA.indexOf(foreignVAID)).getGroupID();
    groupSizes.set(groupIndex,sampleElements.get(groupIndex) + 1);
    sampleElements.set(groupIndex,localVAID);
  }
  data.setData(indices,groupSizes,sampleElements,groupNames);
  RecordPerspective localRecordPerspective=new RecordPerspective(this);
  localRecordPerspective.setIDType(recordIDType);
  localRecordPerspective.init(data);
  return localRecordPerspective;
}","/** 
 * <p> Converts a   {@link RecordPerspective} with an IDType that is not the {@link #recordIDType} to a newRecordPerspective with the recordIDType. </p> <p> Grouping, and naming is preserved, sample elements and trees are not. </p>
 */
public RecordPerspective convertForeignRecordPerspective(RecordPerspective foreignPerspective){
  if (foreignPerspective.getIdType().getIDCategory() != recordIDCategory) {
    throw new IllegalArgumentException(""String_Node_Str"" + foreignPerspective.getIdType() + ""String_Node_Str""+ recordIDType);
  }
  if (foreignPerspective.getIdType() == recordIDType)   return foreignPerspective;
  RecordVirtualArray foreignRecordVA=foreignPerspective.getVirtualArray();
  RecordGroupList recordGroupList=foreignRecordVA.getGroupList();
  PerspectiveInitializationData data=new PerspectiveInitializationData();
  ArrayList<Integer> indices=new ArrayList<Integer>(foreignRecordVA.size());
  ArrayList<Integer> groupSizes=new ArrayList<Integer>(recordGroupList.size());
  ArrayList<Integer> sampleElements=new ArrayList<Integer>(recordGroupList.size());
  ArrayList<String> groupNames=new ArrayList<String>(recordGroupList.size());
  for (  Group foreignGroup : recordGroupList) {
    groupSizes.add(0);
    sampleElements.add(0);
    groupNames.add(foreignGroup.getClusterNode().getLabel());
  }
  int count=0;
  for (  Integer foreignVAID : foreignRecordVA) {
    Integer localVAID=recordIDMappingManager.getID(foreignRecordVA.getIdType(),recordIDType,foreignVAID);
    if (localVAID == null)     continue;
    indices.add(localVAID);
    int groupIndex=recordGroupList.getGroupOfVAIndex(foreignRecordVA.indexOf(foreignVAID)).getGroupID();
    groupSizes.set(groupIndex,groupSizes.get(groupIndex) + 1);
    sampleElements.set(groupIndex,count);
    count++;
  }
  data.setData(indices,groupSizes,sampleElements,groupNames);
  RecordPerspective localRecordPerspective=new RecordPerspective(this);
  localRecordPerspective.setIDType(recordIDType);
  localRecordPerspective.init(data);
  return localRecordPerspective;
}",0.98379970544919
57797,"/** 
 * Init the layout for the center region, showing the horizontal bar of the arch plus all sub-bricks above and below
 */
private void initCenterLayout(){
  archSideThickness=viewFrustum.getWidth() * ARCH_STAND_WIDTH_PERCENT;
  if (isLeftDetailShown || isRightDetailShown) {
    archInnerWidth=0;
  }
 else {
    archInnerWidth=viewFrustum.getWidth() * (ARCH_STAND_WIDTH_PERCENT + 0.024f);
  }
  archHeight=pixelGLConverter.getGLHeightForPixelHeight(ARCH_PIXEL_HEIGHT);
  archBottomY=viewFrustum.getHeight() * ARCH_BOTTOM_PERCENT - archHeight / 2f;
  archTopY=archBottomY + archHeight;
  int dimensionGroupCountInCenter=dimensionGroupManager.getRightGroupStartIndex() - dimensionGroupManager.getCenterGroupStartIndex();
  float centerLayoutWidth=viewFrustum.getWidth() - 2 * (archInnerWidth);
  centerRowLayout=new Row(""String_Node_Str"");
  centerRowLayout.setPriorityRendereing(true);
  centerRowLayout.setFrameColor(1,1,0,1);
  leftDimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=null;
  if (dimensionGroupCountInCenter < 1) {
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,null,null,this);
  }
 else {
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,null,dimensionGroupManager.getDimensionGroups().get(dimensionGroupManager.getCenterGroupStartIndex()),this);
  }
  leftDimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacingRenderer.setLineLength(archHeight);
  if (dimensionGroupCountInCenter > 1)   leftDimensionGroupSpacing.setPixelSizeX(DIMENSION_GROUP_SIDE_SPACING);
 else   leftDimensionGroupSpacing.setGrabX(true);
  centerRowLayout.append(leftDimensionGroupSpacing);
  for (int dimensionGroupIndex=dimensionGroupManager.getCenterGroupStartIndex(); dimensionGroupIndex < dimensionGroupManager.getRightGroupStartIndex(); dimensionGroupIndex++) {
    ElementLayout dynamicDimensionGroupSpacing;
    DimensionGroup group=dimensionGroupManager.getDimensionGroups().get(dimensionGroupIndex);
    group.setCollapsed(false);
    group.setArchHeight(ARCH_PIXEL_HEIGHT);
    centerRowLayout.append(group.getLayout());
    if (dimensionGroupIndex != dimensionGroupManager.getRightGroupStartIndex() - 1) {
      dynamicDimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
      dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(relationAnalyzer,connectionRenderer,group,dimensionGroupManager.getDimensionGroups().get(dimensionGroupIndex + 1),this);
      dynamicDimensionGroupSpacing.setGrabX(true);
      dynamicDimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
      centerRowLayout.append(dynamicDimensionGroupSpacing);
    }
 else {
      rightDimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
      dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,group,null,this);
      if (dimensionGroupCountInCenter > 1)       rightDimensionGroupSpacing.setPixelSizeX(DIMENSION_GROUP_SIDE_SPACING);
 else       rightDimensionGroupSpacing.setGrabX(true);
      rightDimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
      centerRowLayout.append(rightDimensionGroupSpacing);
    }
    dimensionGroupSpacingRenderer.setLineLength(archHeight);
  }
  ViewFrustum centerArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,centerLayoutWidth,0,viewFrustum.getHeight(),0,1);
  centerLayoutManager=new LayoutManager(centerArchFrustum,pixelGLConverter);
  centerLayoutManager.setBaseElementLayout(centerRowLayout);
  centerLayoutManager.updateLayout();
}","/** 
 * Init the layout for the center region, showing the horizontal bar of the arch plus all sub-bricks above and below
 */
private void initCenterLayout(){
  archSideThickness=viewFrustum.getWidth() * ARCH_STAND_WIDTH_PERCENT;
  if (isLeftDetailShown || isRightDetailShown) {
    archInnerWidth=0;
  }
 else {
    archInnerWidth=viewFrustum.getWidth() * (ARCH_STAND_WIDTH_PERCENT + 0.024f);
  }
  archHeight=pixelGLConverter.getGLHeightForPixelHeight(ARCH_PIXEL_HEIGHT);
  archBottomY=viewFrustum.getHeight() * ARCH_BOTTOM_PERCENT - archHeight / 2f;
  archTopY=archBottomY + archHeight;
  int dimensionGroupCountInCenter=dimensionGroupManager.getRightGroupStartIndex() - dimensionGroupManager.getCenterGroupStartIndex();
  float centerLayoutWidth=viewFrustum.getWidth() - 2 * (archInnerWidth);
  centerRowLayout=new Row(""String_Node_Str"");
  centerRowLayout.setDebug(true);
  centerRowLayout.setPriorityRendereing(true);
  centerRowLayout.setFrameColor(1,1,0,1);
  leftDimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
  DimensionGroupSpacingRenderer dimensionGroupSpacingRenderer=null;
  if (dimensionGroupCountInCenter < 1) {
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,null,null,this);
  }
 else {
    dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,null,dimensionGroupManager.getDimensionGroups().get(dimensionGroupManager.getCenterGroupStartIndex()),this);
  }
  leftDimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
  dimensionGroupSpacingRenderer.setLineLength(archHeight);
  if (dimensionGroupCountInCenter > 1)   leftDimensionGroupSpacing.setPixelSizeX(DIMENSION_GROUP_SIDE_SPACING);
 else   leftDimensionGroupSpacing.setGrabX(true);
  centerRowLayout.append(leftDimensionGroupSpacing);
  for (int dimensionGroupIndex=dimensionGroupManager.getCenterGroupStartIndex(); dimensionGroupIndex < dimensionGroupManager.getRightGroupStartIndex(); dimensionGroupIndex++) {
    ElementLayout dynamicDimensionGroupSpacing;
    DimensionGroup group=dimensionGroupManager.getDimensionGroups().get(dimensionGroupIndex);
    group.setCollapsed(false);
    group.setArchHeight(ARCH_PIXEL_HEIGHT);
    centerRowLayout.append(group.getLayout());
    if (dimensionGroupIndex != dimensionGroupManager.getRightGroupStartIndex() - 1) {
      dynamicDimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
      dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(relationAnalyzer,connectionRenderer,group,dimensionGroupManager.getDimensionGroups().get(dimensionGroupIndex + 1),this);
      dynamicDimensionGroupSpacing.setGrabX(true);
      dynamicDimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
      centerRowLayout.append(dynamicDimensionGroupSpacing);
    }
 else {
      rightDimensionGroupSpacing=new ElementLayout(""String_Node_Str"");
      dimensionGroupSpacingRenderer=new DimensionGroupSpacingRenderer(null,connectionRenderer,group,null,this);
      if (dimensionGroupCountInCenter > 1)       rightDimensionGroupSpacing.setPixelSizeX(DIMENSION_GROUP_SIDE_SPACING);
 else       rightDimensionGroupSpacing.setGrabX(true);
      rightDimensionGroupSpacing.setRenderer(dimensionGroupSpacingRenderer);
      centerRowLayout.append(rightDimensionGroupSpacing);
    }
    dimensionGroupSpacingRenderer.setLineLength(archHeight);
  }
  ViewFrustum centerArchFrustum=new ViewFrustum(viewFrustum.getProjectionMode(),0,centerLayoutWidth,0,viewFrustum.getHeight(),0,1);
  centerLayoutManager=new LayoutManager(centerArchFrustum,pixelGLConverter);
  centerLayoutManager.setBaseElementLayout(centerRowLayout);
  centerLayoutManager.updateLayout();
}",0.995361527967258
57798,"/** 
 * Sets the type of view that should be rendered in the brick. The view type is not set, if it is not valid for the current brick layout.
 * @param viewType
 */
public void setContainedView(EContainedViewType viewType){
  currentViewType=viewType;
  LayoutRenderer viewRenderer=containedViewRenderers.get(viewType);
  if (viewRenderer == null)   return;
  if (!brickLayout.isViewTypeValid(viewType))   return;
  currentRemoteView=views.get(viewType);
  brickLayout.setViewRenderer(viewRenderer);
  brickLayout.viewTypeChanged(viewType);
  if (viewType.isUseProportionalHeight())   brickHeigthMode=EBrickHeightMode.PROPORTIONAL;
switch (brickHeigthMode) {
case STATIC:
    break;
case VIEW_DEPENDENT:
  int defaultHeightPixels=brickLayout.getDefaultHeightPixels();
wrappingLayout.setPixelSizeY(defaultHeightPixels);
break;
case PROPORTIONAL:
double proportionalHeight=dimensionGroup.getProportionalHeightPerRecord() * dataContainer.getNrRecords();
wrappingLayout.setPixelSizeY((int)proportionalHeight);
break;
}
switch (brickWidthMode) {
case STATIC:
break;
case VIEW_DEPENDENT:
int defaultWidthPixels=brickLayout.getDefaultWidthPixels();
wrappingLayout.setPixelSizeX(defaultWidthPixels);
break;
}
layoutManager.setStaticLayoutConfiguration(brickLayout);
layoutManager.updateLayout();
visBricks.updateLayout();
visBricks.updateConnectionLinesBetweenDimensionGroups();
}","/** 
 * Sets the type of view that should be rendered in the brick. The view type is not set, if it is not valid for the current brick layout.
 * @param viewType
 */
public void setContainedView(EContainedViewType viewType){
  currentViewType=viewType;
  LayoutRenderer viewRenderer=containedViewRenderers.get(viewType);
  if (viewRenderer == null)   return;
  if (!brickLayout.isViewTypeValid(viewType))   return;
  currentRemoteView=views.get(viewType);
  brickLayout.setViewRenderer(viewRenderer);
  brickLayout.viewTypeChanged(viewType);
  if (viewType.isUseProportionalHeight())   brickHeigthMode=EBrickHeightMode.PROPORTIONAL;
switch (brickHeigthMode) {
case STATIC:
    wrappingLayout.setPixelSizeY(staticBrickHeight);
  break;
case VIEW_DEPENDENT:
int defaultHeightPixels=brickLayout.getDefaultHeightPixels();
wrappingLayout.setPixelSizeY(defaultHeightPixels);
break;
case PROPORTIONAL:
double proportionalHeight=dimensionGroup.getProportionalHeightPerRecord() * dataContainer.getNrRecords();
wrappingLayout.setPixelSizeY((int)proportionalHeight);
break;
}
switch (brickWidthMode) {
case STATIC:
wrappingLayout.setPixelSizeX(staticBrickWidth);
break;
case VIEW_DEPENDENT:
int defaultWidthPixels=brickLayout.getDefaultWidthPixels();
wrappingLayout.setPixelSizeX(defaultWidthPixels);
break;
}
layoutManager.setStaticLayoutConfiguration(brickLayout);
layoutManager.updateLayout();
visBricks.updateLayout();
visBricks.updateConnectionLinesBetweenDimensionGroups();
}",0.9644741470277876
57799,"/** 
 * Creates all bricks of the dimension group
 */
protected void createBricks(){
  mainColumn.addBackgroundRenderer(new DimensionGroupBackgroundColorRenderer(dataContainer.getDataDomain().getColor().getRGBA()));
  headerBrick=createBrick(headerBrickLayout,dataContainer);
  headerBrick.setBrickHeigthMode(EBrickHeightMode.STATIC);
  ABrickLayoutConfiguration layoutTemplate;
  if (isCollapsed) {
    layoutTemplate=new CompactHeaderBrickLayoutTemplate(headerBrick,this,visBricks,headerBrick.getBrickConfigurer());
  }
 else {
    layoutTemplate=new HeaderBrickLayoutTemplate(headerBrick,this,visBricks,headerBrick.getBrickConfigurer());
  }
  headerBrick.setBrickLayoutTemplate(layoutTemplate,layoutTemplate.getDefaultViewType());
  creatClusterBricks();
}","/** 
 * Creates all bricks of the dimension group
 */
protected void createBricks(){
  mainColumn.addBackgroundRenderer(new DimensionGroupBackgroundColorRenderer(dataContainer.getDataDomain().getColor().getRGBA()));
  headerBrick=createBrick(headerBrickLayout,dataContainer);
  ABrickLayoutConfiguration layoutTemplate;
  if (isCollapsed) {
    layoutTemplate=new CompactHeaderBrickLayoutTemplate(headerBrick,this,visBricks,headerBrick.getBrickConfigurer());
  }
 else {
    layoutTemplate=new HeaderBrickLayoutTemplate(headerBrick,this,visBricks,headerBrick.getBrickConfigurer());
  }
  headerBrick.setBrickLayoutTemplate(layoutTemplate,layoutTemplate.getDefaultViewType());
  creatClusterBricks();
}",0.9596167008898016
57800,"/** 
 * Handles the up-down dragging of the whole dimension group
 * @param gl
 */
private void handleVerticalMoveDragging(GL2 gl){
  if (!isVerticalMoveDraggingActive)   return;
  if (glMouseListener.wasMouseReleased()) {
    isVerticalMoveDraggingActive=false;
    previousYCoordinate=Float.NaN;
    return;
  }
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] pointCordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  if (Float.isNaN(previousYCoordinate)) {
    previousYCoordinate=pointCordinates[1];
    return;
  }
  float change=pointCordinates[1] - previousYCoordinate;
  previousYCoordinate=pointCordinates[1];
  float bottomSize=clusterBrickColumn.getSizeScaledY();
  clusterBrickColumn.setAbsoluteSizeY(bottomSize + change);
  float centerSize=headerBrickLayout.getSizeScaledY();
  headerBrickLayout.setAbsoluteSizeY(centerSize);
  headerBrickLayout.updateSubLayout();
  mainRow.updateSubLayout();
  visBricks.updateConnectionLinesBetweenDimensionGroups();
}","/** 
 * Handles the up-down dragging of the whole dimension group
 * @param gl
 */
private void handleVerticalMoveDragging(GL2 gl){
  if (!isVerticalMoveDraggingActive)   return;
  if (glMouseListener.wasMouseReleased()) {
    isVerticalMoveDraggingActive=false;
    previousYCoordinate=Float.NaN;
    return;
  }
  Point currentPoint=glMouseListener.getPickedPoint();
  float[] pointCordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,currentPoint.x,currentPoint.y);
  if (Float.isNaN(previousYCoordinate)) {
    previousYCoordinate=pointCordinates[1];
    return;
  }
  float change=pointCordinates[1] - previousYCoordinate;
  previousYCoordinate=pointCordinates[1];
  float bottomSize=clusterBrickColumn.getSizeScaledY();
  clusterBrickColumn.setAbsoluteSizeY(bottomSize + change);
  mainRow.updateSubLayout();
  visBricks.updateConnectionLinesBetweenDimensionGroups();
}",0.8771929824561403
57801,"/** 
 * <p> Set the spacing of the arch in pixel. </p> <p> This is only used if the group is not collapsed. If it is collapsed, the values are irrelevant. </p>
 * @param archHeight the pixel height of the arch
 */
public void setArchHeight(int archHeight){
  if (isCollapsed) {
    headerBrickLayout.setRatioSizeY(1);
  }
 else {
    if (!(headerBrickLayout.getSizeScaledY() > 0)) {
      clusterBrickColumn.setRatioSizeY(1f);
      headerBrickLayout.setPixelSizeY(archHeight);
    }
  }
}","/** 
 * <p> Set the spacing of the arch in pixel. </p> <p> This is only used if the group is not collapsed. If it is collapsed, the values are irrelevant. </p>
 * @param archHeight the pixel height of the arch
 */
public void setArchHeight(int archHeight){
  if (isCollapsed) {
    headerBrick.setBrickHeigthMode(EBrickHeightMode.VIEW_DEPENDENT);
  }
 else {
    headerBrick.setBrickHeigthMode(EBrickHeightMode.STATIC);
    headerBrick.setStaticBrickHeight(archHeight);
  }
}",0.7116182572614108
57802,"protected void loadData(DataSetMetaInfo dataSetMetaInfo) throws FileNotFoundException, IOException {
  LoadDataParameters loadDataParameters=dataSetMetaInfo.getLoadDataParameters();
  loadDataParameters.setColumnHeaderStringConverter(new TCGAIDStringConverter());
  dataDomain=(ATableBasedDataDomain)DataDomainManager.get().createDataDomain(dataSetMetaInfo.getDataDomainType(),dataSetMetaInfo.getDataDomainConfiguration());
  loadDataParameters.setDataDomain(dataDomain);
  dataDomain.setColorMapper(ColorMapper.createDefaultMapper(EDefaultColorSchemes.valueOf(dataSetMetaInfo.getColorScheme())));
  dataDomain.init();
  loadDataParameters.setFileIDType(dataDomain.getHumanReadableDimensionIDType());
  Thread thread=new Thread(dataDomain,dataDomain.getDataDomainType());
  thread.start();
  DataTableUtils.createColumns(loadDataParameters);
  boolean createDefaultRecordPerspective=false;
  if (dataSetMetaInfo.getGroupingPath() == null)   createDefaultRecordPerspective=true;
  DataTable table=DataTableUtils.createData(dataDomain,true,createDefaultRecordPerspective);
  if (table == null)   throw new IllegalStateException(""String_Node_Str"");
}","protected void loadData(DataSetMetaInfo dataSetMetaInfo) throws FileNotFoundException, IOException {
  LoadDataParameters loadDataParameters=dataSetMetaInfo.getLoadDataParameters();
  loadDataParameters.setColumnHeaderStringConverter(new TCGAIDStringConverter());
  dataDomain=(ATableBasedDataDomain)DataDomainManager.get().createDataDomain(dataSetMetaInfo.getDataDomainType(),dataSetMetaInfo.getDataDomainConfiguration());
  loadDataParameters.setDataDomain(dataDomain);
  dataDomain.setColorMapper(ColorMapper.createDefaultMapper(EDefaultColorSchemes.valueOf(dataSetMetaInfo.getColorScheme())));
  dataDomain.init();
  if (dataDomain.isColumnDimension())   loadDataParameters.setFileIDType(dataDomain.getHumanReadableRecordIDType());
 else   loadDataParameters.setFileIDType(dataDomain.getHumanReadableDimensionIDType());
  Thread thread=new Thread(dataDomain,dataDomain.getDataDomainType());
  thread.start();
  DataTableUtils.createColumns(loadDataParameters);
  boolean createDefaultRecordPerspective=false;
  if (dataSetMetaInfo.getGroupingPath() == null)   createDefaultRecordPerspective=true;
  DataTable table=DataTableUtils.createData(dataDomain,true,createDefaultRecordPerspective);
  if (table == null)   throw new IllegalStateException(""String_Node_Str"");
}",0.9416632188663632
57803,"@Override public void setBrickViews(GLBrick brick,GL2 gl,GLMouseListener glMouseListener,ABrickLayoutConfiguration brickLayout){
  HashMap<EContainedViewType,AGLView> views=new HashMap<EContainedViewType,AGLView>();
  HashMap<EContainedViewType,LayoutRenderer> containedViewRenderers=new HashMap<EContainedViewType,LayoutRenderer>();
  KaplanMeierCreator pathwayCreator=new KaplanMeierCreator();
  AGLView kaplanMeier=pathwayCreator.createRemoteView(brick,gl,glMouseListener);
  LayoutRenderer kaplanMeierRenderer=new ViewLayoutRenderer(kaplanMeier);
  views.put(EContainedViewType.KAPLAN_MEIER_VIEW,kaplanMeier);
  containedViewRenderers.put(EContainedViewType.KAPLAN_MEIER_VIEW,kaplanMeierRenderer);
  String label=""String_Node_Str"";
  brick.setLabel(label);
  LayoutRenderer pathwaysSummaryRenderer=new PathwaysSummaryRenderer(brick,label,PickingType.BRICK.name(),brick.getID());
  containedViewRenderers.put(EContainedViewType.PATHWAYS_SUMMARY,pathwaysSummaryRenderer);
  LayoutRenderer pathwaysSummaryCompactRenderer=new PathwaysSummaryRenderer(brick,""String_Node_Str"",PickingType.BRICK.name(),brick.getID());
  containedViewRenderers.put(EContainedViewType.PATHWAYS_SUMMARY_COMPACT,pathwaysSummaryCompactRenderer);
  if (brick.getDataContainer() instanceof PathwayDataContainer) {
    PathwayDataContainer brickData=(PathwayDataContainer)brick.getDataContainer();
    if (brickData.getPathway() != null) {
      PathwayDatabaseType dataBaseType=brickData.getPathway().getType();
      EIconTextures texture;
      if (dataBaseType == PathwayDatabaseType.KEGG) {
        texture=EIconTextures.CM_KEGG;
      }
 else {
        texture=EIconTextures.CM_BIOCARTA;
      }
      LayoutRenderer compactPathwayRenderer=new CompactPathwayRenderer(brick,brick.getDataContainer().getLabel(),PickingType.BRICK.name(),brick.getID(),brick.getTextureManager(),texture);
      containedViewRenderers.put(EContainedViewType.PATHWAY_VIEW_COMPACT,compactPathwayRenderer);
    }
  }
  brick.setViews(views);
  brick.setContainedViewRenderers(containedViewRenderers);
}","@Override public void setBrickViews(GLBrick brick,GL2 gl,GLMouseListener glMouseListener,ABrickLayoutConfiguration brickLayout){
  HashMap<EContainedViewType,AGLView> views=new HashMap<EContainedViewType,AGLView>();
  HashMap<EContainedViewType,LayoutRenderer> containedViewRenderers=new HashMap<EContainedViewType,LayoutRenderer>();
  KaplanMeierCreator viewCreator=new KaplanMeierCreator();
  AGLView kaplanMeier=viewCreator.createRemoteView(brick,gl,glMouseListener);
  LayoutRenderer kaplanMeierRenderer=new ViewLayoutRenderer(kaplanMeier);
  views.put(EContainedViewType.KAPLAN_MEIER_VIEW,kaplanMeier);
  containedViewRenderers.put(EContainedViewType.KAPLAN_MEIER_VIEW,kaplanMeierRenderer);
  String label=""String_Node_Str"";
  brick.setLabel(label);
  LayoutRenderer kaplanMeierSummaryRenderer=new KaplanMeierSummaryRenderer(brick,label,PickingType.BRICK.name(),brick.getID());
  containedViewRenderers.put(EContainedViewType.KAPLAN_MEIER_SUMMARY,kaplanMeierSummaryRenderer);
  LayoutRenderer kaplanMeierSummaryCompactRenderer=new KaplanMeierSummaryRenderer(brick,""String_Node_Str"",PickingType.BRICK.name(),brick.getID());
  containedViewRenderers.put(EContainedViewType.KAPLAN_MEIER_SUMMARY,kaplanMeierSummaryCompactRenderer);
  brick.setViews(views);
  brick.setContainedViewRenderers(containedViewRenderers);
}",0.6765490661132523
57804,"@Override public int getMinWidthPixels(){
  return 110;
}","@Override public int getMinWidthPixels(){
  return 140;
}",0.9824561403508772
57805,"@Override public void handleEvent(AEvent event){
  if (event instanceof OpenCreatePathwaySmallMultiplesGroupDialogEvent) {
    if (((OpenCreatePathwaySmallMultiplesGroupDialogEvent)event).getDimensionGroupDataContainer() != handler.getDataContainer())     return;
    OpenCreatePathwaySmallMultiplesGroupDialogEvent openCreateSmallPathwayMultiplesGroupDialogevent=(OpenCreatePathwaySmallMultiplesGroupDialogEvent)event;
    handler.openCreateKaplanMeierSmallMultiplesGroupDialog(openCreateSmallPathwayMultiplesGroupDialogevent.getDimensionGroupDataContainer(),openCreateSmallPathwayMultiplesGroupDialogevent.getDimensionPerspective());
  }
}","@Override public void handleEvent(AEvent event){
  if (event instanceof OpenCreatePathwaySmallMultiplesGroupDialogEvent) {
    if (((OpenCreatePathwaySmallMultiplesGroupDialogEvent)event).getDimensionGroupDataContainer() != handler.getDataContainer())     return;
    OpenCreatePathwaySmallMultiplesGroupDialogEvent openCreatePathwaySmallMultiplesGroupDialogevent=(OpenCreatePathwaySmallMultiplesGroupDialogEvent)event;
    handler.openCreatePathwaySmallMultiplesGroupDialog(openCreatePathwaySmallMultiplesGroupDialogevent.getDimensionGroupDataContainer(),openCreatePathwaySmallMultiplesGroupDialogevent.getDimensionPerspective());
  }
}",0.8732394366197183
57806,"@Override public void setDataDomain(ATableBasedDataDomain dataDomain){
  if (!(dataDomain instanceof GeneticDataDomain))   throw new IllegalArgumentException(""String_Node_Str"" + dataDomain);
  if (pathwayDataDomain.getGeneIDMappingManager().hasMapping(pathwayDataDomain.getDavidIDType(),dataDomain.getRecordIDType())) {
    geneSelectionManager=dataDomain.getRecordSelectionManager();
  }
 else {
    geneSelectionManager=dataDomain.getDimensionSelectionManager();
  }
  super.setDataDomain(dataDomain);
}","@Override public void setDataDomain(ATableBasedDataDomain dataDomain){
  if (!(dataDomain instanceof GeneticDataDomain))   throw new IllegalArgumentException(""String_Node_Str"" + dataDomain);
  if (pathwayDataDomain.getGeneIDMappingManager().hasMapping(pathwayDataDomain.getDavidIDType(),dataDomain.getRecordIDType())) {
    geneSelectionManager=dataDomain.getRecordSelectionManager();
    sampleSelectionManager=dataDomain.getDimensionSelectionManager();
  }
 else {
    geneSelectionManager=dataDomain.getDimensionSelectionManager();
    sampleSelectionManager=dataDomain.getRecordSelectionManager();
  }
  super.setDataDomain(dataDomain);
}",0.8805579773321709
57807,"@Override public void handleSelectionUpdate(SelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (pathway == null)   return;
  if (selectionDelta.getIDType().getIDCategory() == geneSelectionManager.getIDType().getIDCategory()) {
    SelectionDelta resolvedDelta=resolveExternalSelectionDelta(selectionDelta);
    geneSelectionManager.setDelta(resolvedDelta);
    setDisplayListDirty();
    int pathwayHeight=pathway.getHeight();
    for (    SelectionDeltaItem item : resolvedDelta) {
      if (item.getSelectionType() != SelectionType.MOUSE_OVER && item.getSelectionType() != SelectionType.SELECTION) {
        continue;
      }
      PathwayVertexGraphItemRep vertexRep=(PathwayVertexGraphItemRep)pathwayItemManager.getItem(item.getID());
      int viewID=uniqueID;
      SelectedElementRep elementRep=new SelectedElementRep(dataDomain.getRecordIDType(),viewID,vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X * vecScaling.x() + vecTranslation.x(),(pathwayHeight - vertexRep.getYOrigin()) * PathwayRenderStyle.SCALING_FACTOR_Y * vecScaling.y() + vecTranslation.y(),0);
      for (      Integer iConnectionID : item.getConnectionIDs()) {
        connectedElementRepresentationManager.addSelection(iConnectionID,elementRep,item.getSelectionType());
      }
    }
  }
 else   if (selectionDelta.getIDType().getIDCategory() == dimensionSelectionManager.getIDType().getIDCategory()) {
    for (    SelectionDeltaItem item : selectionDelta.getAllItems()) {
      if (item.getSelectionType() == SelectionType.MOUSE_OVER && !item.isRemove()) {
        selectedSampleIndex=item.getID();
        break;
      }
    }
    setDisplayListDirty();
  }
}","@Override public void handleSelectionUpdate(SelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (pathway == null)   return;
  if (selectionDelta.getIDType().getIDCategory() == geneSelectionManager.getIDType().getIDCategory()) {
    SelectionDelta resolvedDelta=resolveExternalSelectionDelta(selectionDelta);
    geneSelectionManager.setDelta(resolvedDelta);
    setDisplayListDirty();
    int pathwayHeight=pathway.getHeight();
    for (    SelectionDeltaItem item : resolvedDelta) {
      if (item.getSelectionType() != SelectionType.MOUSE_OVER && item.getSelectionType() != SelectionType.SELECTION) {
        continue;
      }
      PathwayVertexGraphItemRep vertexRep=(PathwayVertexGraphItemRep)pathwayItemManager.getItem(item.getID());
      int viewID=uniqueID;
      SelectedElementRep elementRep=new SelectedElementRep(dataDomain.getRecordIDType(),viewID,vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X * vecScaling.x() + vecTranslation.x(),(pathwayHeight - vertexRep.getYOrigin()) * PathwayRenderStyle.SCALING_FACTOR_Y * vecScaling.y() + vecTranslation.y(),0);
      for (      Integer iConnectionID : item.getConnectionIDs()) {
        connectedElementRepresentationManager.addSelection(iConnectionID,elementRep,item.getSelectionType());
      }
    }
  }
 else   if (selectionDelta.getIDType().getIDCategory() == sampleSelectionManager.getIDType().getIDCategory()) {
    for (    SelectionDeltaItem item : selectionDelta.getAllItems()) {
      if (item.getSelectionType() == SelectionType.MOUSE_OVER && !item.isRemove()) {
        selectedSampleIndex=item.getID();
        break;
      }
    }
    setDisplayListDirty();
  }
}",0.995518374663878
57808,"protected void fillNodeDisplayListFrame(final GL2 gl,final float fNodeWidth,final float fNodeHeight){
  gl.glLineWidth(7);
  gl.glBegin(GL2.GL_LINE_LOOP);
  gl.glVertex3f(-fNodeWidth,fNodeHeight,0.02f);
  gl.glVertex3f(fNodeWidth,fNodeHeight,0.02f);
  gl.glVertex3f(fNodeWidth,-fNodeHeight,0.02f);
  gl.glVertex3f(-fNodeWidth,-fNodeHeight,0.02f);
  gl.glEnd();
}","protected void fillNodeDisplayListFrame(final GL2 gl,final float fNodeWidth,final float fNodeHeight){
  gl.glLineWidth(7);
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(-fNodeWidth,fNodeHeight,0.02f);
  gl.glVertex3f(fNodeWidth,fNodeHeight,0.02f);
  gl.glVertex3f(fNodeWidth,-fNodeHeight,0.02f);
  gl.glVertex3f(-fNodeWidth,-fNodeHeight,0.02f);
  gl.glEnd();
}",0.9833795013850416
57809,"public void handleDragging(GL2 gl,GLMouseListener glMouseListener){
  if (isDragging) {
    Point mouseWinCoords=glMouseListener.getPickedPoint();
    float[] fArTargetWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,mouseWinCoords.x,mouseWinCoords.y);
    if (dropArea != null) {
      dropArea.handleDragOver(gl,draggables,fArTargetWorldCoordinates[0],fArTargetWorldCoordinates[1]);
    }
    for (    IDraggable draggable : draggables) {
      if (isDraggingFirstTime) {
        float[] fArStartDraggingWorldCoordinates=GLCoordinateUtils.convertWindowCoordinatesToWorldCoordinates(gl,startDraggingWindowCoords.x,startDraggingWindowCoords.y);
        draggable.setDraggingStartPoint(fArStartDraggingWorldCoordinates[0],fArStartDraggingWorldCoordinates[1]);
      }
      draggable.handleDragging(gl,fArTargetWorldCoordinates[0],fArTargetWorldCoordinates[1]);
    }
    if (glMouseListener.wasMouseReleased()) {
      isDragging=false;
      for (      IDraggable draggable : draggables) {
        draggable.handleDrop(gl,fArTargetWorldCoordinates[0],fArTargetWorldCoordinates[1]);
      }
      if (dropArea != null) {
        dropArea.handleDrop(gl,draggables,fArTargetWorldCoordinates[0],fArTargetWorldCoordinates[1],this);
      }
      draggingMode=null;
      view.setDisplayListDirty();
    }
    isDraggingFirstTime=false;
  }
}","public void handleDragging(GL2 gl,GLMouseListener glMouseListener){
  if (isDragging) {
    Point mouseWinCoords=glMouseListener.getPickedPoint();
    float[] fArTargetWorldCoordinates=new float[]{0,0};
    PixelGLConverter pixelGLConverter=view.getPixelGLConverter();
    fArTargetWorldCoordinates[0]=pixelGLConverter.getGLWidthForPixelWidth(mouseWinCoords.x);
    fArTargetWorldCoordinates[1]=pixelGLConverter.getGLHeightForPixelHeight(view.getParentGLCanvas().getHeight() - mouseWinCoords.y);
    if (dropArea != null) {
      dropArea.handleDragOver(gl,draggables,fArTargetWorldCoordinates[0],fArTargetWorldCoordinates[1]);
    }
    for (    IDraggable draggable : draggables) {
      if (isDraggingFirstTime) {
        float[] fArStartDraggingWorldCoordinates=new float[]{0,0};
        fArStartDraggingWorldCoordinates[0]=pixelGLConverter.getGLWidthForPixelWidth(startDraggingWindowCoords.x);
        fArStartDraggingWorldCoordinates[1]=pixelGLConverter.getGLHeightForPixelHeight(view.getParentGLCanvas().getHeight() - startDraggingWindowCoords.y);
        draggable.setDraggingStartPoint(fArStartDraggingWorldCoordinates[0],fArStartDraggingWorldCoordinates[1]);
      }
      draggable.handleDragging(gl,fArTargetWorldCoordinates[0],fArTargetWorldCoordinates[1]);
    }
    if (glMouseListener.wasMouseReleased()) {
      isDragging=false;
      for (      IDraggable draggable : draggables) {
        draggable.handleDrop(gl,fArTargetWorldCoordinates[0],fArTargetWorldCoordinates[1]);
      }
      if (dropArea != null) {
        dropArea.handleDrop(gl,draggables,fArTargetWorldCoordinates[0],fArTargetWorldCoordinates[1],this);
      }
      draggingMode=null;
      view.setDisplayListDirty();
    }
    isDraggingFirstTime=false;
  }
}",0.7984595635430038
57810,"/** 
 * Constructor.
 */
public ViewManager(){
  registerEventListeners();
  try {
    UIManager.setLookAndFeel(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  UnsupportedLookAndFeelException e) {
    e.printStackTrace();
  }
}","/** 
 * Constructor.
 */
public ViewManager(){
  registerEventListeners();
}",0.3121149897330595
57811,"/** 
 * Creates a default tree of depth 1 and a   {@link GroupList} with one group 
 */
private void createDefaultTreeAndGroupList(){
  isTreeDefaultTree=true;
  tree=new ClusterTree(idType,virtualArray.size());
  ClusterNode root=new ClusterNode(tree,""String_Node_Str"",0,true,-1);
  tree.setRootNode(root);
  for (  Integer id : virtualArray) {
    tree.addChild(root,new ClusterNode(tree,getElementLabel(id),id,false,id));
  }
  GroupType groupList=createGroupList();
  Group group=new Group(virtualArray.size(),0);
  groupList.add(0,group);
  virtualArray.setGroupList(groupList);
}","/** 
 * Creates a default tree of depth 1 and a   {@link GroupList} with one group 
 */
private void createDefaultTreeAndGroupList(){
  isTreeDefaultTree=true;
  tree=new ClusterTree(idType,virtualArray.size());
  ClusterNode root=new ClusterNode(tree,""String_Node_Str"",0,true,-1);
  tree.setRootNode(root);
  for (  Integer id : virtualArray) {
    tree.addChild(root,new ClusterNode(tree,getElementLabel(id),id,false,id));
  }
  GroupType groupList=createGroupList();
  Group group=new Group(virtualArray.size(),0,root);
  groupList.append(group);
  virtualArray.setGroupList(groupList);
}",0.9863945578231292
57812,"private void createGroupListAndDefaultTreeFromClusterSizes(PerspectiveInitializationData data){
  GroupType groupList=createGroupList();
  int groupCounter=0;
  isTreeDefaultTree=true;
  tree=new ClusterTree(idType,data.getIndices().size());
  int clusterNr=0;
  ClusterNode root=new ClusterNode(tree,""String_Node_Str"",clusterNr++,true,-1);
  tree.setRootNode(root);
  ClusterNode node;
  int from=0;
  int to=0;
  for (  Integer clusterSize : data.getClusterSizes()) {
    node=new ClusterNode(tree,""String_Node_Str"" + clusterNr,clusterNr++,true,-1);
    Group temp=new Group(clusterSize,data.getSampleElements().get(groupCounter),node);
    tree.addChild(root,node);
    groupList.append(temp);
    groupCounter++;
    to+=clusterSize;
    ClusterNode leaf;
    for (int vaIndex=from; vaIndex < to; vaIndex++) {
      Integer id=virtualArray.get(vaIndex);
      leaf=new ClusterNode(tree,""String_Node_Str"" + id,clusterNr++,true,id);
      tree.addChild(node,leaf);
    }
    from=to;
  }
  virtualArray.setGroupList(groupList);
}","private void createGroupListAndDefaultTreeFromClusterSizes(PerspectiveInitializationData data){
  GroupType groupList=createGroupList();
  int groupCounter=0;
  isTreeDefaultTree=true;
  tree=new ClusterTree(idType,data.getIndices().size());
  int clusterNr=0;
  ClusterNode root=new ClusterNode(tree,""String_Node_Str"",clusterNr++,true,-1);
  tree.setRootNode(root);
  ClusterNode node;
  int from=0;
  int to=0;
  for (  Integer clusterSize : data.getClusterSizes()) {
    node=new ClusterNode(tree,""String_Node_Str"" + clusterNr,clusterNr++,false,-1);
    Group temp=new Group(clusterSize,data.getSampleElements().get(groupCounter),node);
    tree.addChild(root,node);
    groupList.append(temp);
    groupCounter++;
    to+=clusterSize;
    ClusterNode leaf;
    for (int vaIndex=from; vaIndex < to; vaIndex++) {
      Integer id=virtualArray.get(vaIndex);
      leaf=new ClusterNode(tree,""String_Node_Str"" + id,clusterNr++,false,id);
      tree.addChild(node,leaf);
    }
    from=to;
  }
  virtualArray.setGroupList(groupList);
}",0.993217054263566
57813,"public void setGroupID(Integer groupID){
  this.groupID=groupID;
}","/** 
 * @param groupID setter, see {@link #groupID}
 */
public void setGroupID(Integer groupID){
  this.groupID=groupID;
}",0.7021276595744681
57814,"/** 
 * Returns the groupID of this group, which is equivalent to the index of this group in the  {@link GroupList}. For a unique ID of the group see the   {@link #getID()} method.
 */
public int getGroupID(){
  return groupID;
}","/** 
 * @return the groupID, see {@link #groupID}
 */
public Integer getGroupID(){
  return groupID;
}",0.5498489425981873
57815,"/** 
 * Constructor
 * @param groupList the group list on which the iterator is executed
 */
public GroupIterator(GroupList groupList){
  this.groupList=groupList;
}","/** 
 * Constructor
 * @param groupList the group list on which the iterator is executed
 */
public GroupIterator(GroupType groupList){
  this.groupList=groupList;
}",0.9757575757575756
57816,"/** 
 * Returns an Iterator<Group> of type GroupIterator, which allows to iterate over the group list
 */
@Override public GroupIterator iterator(){
  return new GroupIterator(this);
}","/** 
 * Returns an Iterator<Group> of type GroupIterator, which allows to iterate over the group list
 */
@Override @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public GroupIterator<ConcreteType> iterator(){
  return new GroupIterator(this);
}",0.8382687927107062
57817,"@Override public void init(){
  if (configuration == null)   createDefaultConfiguration();
 else   if (loadDataParameters != null && !loadDataParameters.isColumnDimension())   createDefaultConfigurationWithSamplesAsRows();
  boolean externalMappingLoaded=false;
  if (configuration.mappingFile != null) {
    IDMappingLoader.get().loadMappingFile(configuration.mappingFile);
    externalMappingLoaded=true;
  }
  if (externalMappingLoaded) {
    recordIDCategory=IDCategory.getIDCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.getIDCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.getIDType(configuration.humanReadableRecordIDType);
    humanReadableDimensionIDType=IDType.getIDType(configuration.humanReadableDimensionIDType);
  }
 else {
    recordIDCategory=IDCategory.registerCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.registerCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.registerType(configuration.humanReadableRecordIDType,recordIDCategory,EColumnType.STRING);
    humanReadableDimensionIDType=IDType.registerType(configuration.humanReadableDimensionIDType,dimensionIDCategory,EColumnType.STRING);
  }
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordIDType.setInternalType(true);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EColumnType.INT);
  dimensionIDType.setInternalType(true);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordGroupIDType.setInternalType(true);
  if (configuration.primaryRecordMappingType != null)   primaryRecordMappingType=IDType.getIDType(configuration.primaryRecordMappingType);
 else   primaryRecordMappingType=recordIDType;
  if (configuration.primaryDimensionMappingType != null)   primaryDimensionMappingType=IDType.getIDType(configuration.primaryDimensionMappingType);
 else   primaryDimensionMappingType=dimensionIDType;
  recordDenominationPlural=configuration.recordDenominationPlural;
  recordDenominationSingular=configuration.recordDenominationSingular;
  dimensionDenominationPlural=configuration.dimensionDenominationPlural;
  dimensionDenominationSingular=configuration.dimensionDenominationSingular;
  recordIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory);
  dimensionIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory);
  recordSelectionManager=new RecordSelectionManager(recordIDMappingManager,recordIDType);
  dimensionSelectionManager=new DimensionSelectionManager(dimensionIDMappingManager,dimensionIDType);
  recordGroupSelectionManager=new SelectionManager(recordGroupIDType);
  addIDCategory(dimensionIDCategory);
  addIDCategory(recordIDCategory);
  super.init();
}","@Override public void init(){
  if (configuration == null || configuration.isDefaultConfiguration()) {
    if (loadDataParameters != null && !loadDataParameters.isColumnDimension()) {
      if (configuration.isDefaultConfiguration()) {
        IDType.unregisterType(recordIDType);
        IDType.unregisterType(dimensionIDType);
        IDType.unregisterType(recordGroupIDType);
      }
      createDefaultConfigurationWithColumnsAsRecords();
    }
 else     createDefaultConfiguration();
  }
  boolean externalMappingLoaded=false;
  if (configuration.mappingFile != null) {
    IDMappingLoader.get().loadMappingFile(configuration.mappingFile);
    externalMappingLoaded=true;
  }
  if (externalMappingLoaded) {
    recordIDCategory=IDCategory.getIDCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.getIDCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.getIDType(configuration.humanReadableRecordIDType);
    humanReadableDimensionIDType=IDType.getIDType(configuration.humanReadableDimensionIDType);
  }
 else {
    recordIDCategory=IDCategory.registerCategory(configuration.recordIDCategory);
    dimensionIDCategory=IDCategory.registerCategory(configuration.dimensionIDCategory);
    humanReadableRecordIDType=IDType.registerType(configuration.humanReadableRecordIDType,recordIDCategory,EColumnType.STRING);
    humanReadableDimensionIDType=IDType.registerType(configuration.humanReadableDimensionIDType,dimensionIDCategory,EColumnType.STRING);
  }
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordIDType.setInternalType(true);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EColumnType.INT);
  dimensionIDType.setInternalType(true);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordGroupIDType.setInternalType(true);
  if (configuration.primaryRecordMappingType != null)   primaryRecordMappingType=IDType.getIDType(configuration.primaryRecordMappingType);
 else   primaryRecordMappingType=recordIDType;
  if (configuration.primaryDimensionMappingType != null)   primaryDimensionMappingType=IDType.getIDType(configuration.primaryDimensionMappingType);
 else   primaryDimensionMappingType=dimensionIDType;
  recordDenominationPlural=configuration.recordDenominationPlural;
  recordDenominationSingular=configuration.recordDenominationSingular;
  dimensionDenominationPlural=configuration.dimensionDenominationPlural;
  dimensionDenominationSingular=configuration.dimensionDenominationSingular;
  recordIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory);
  dimensionIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory);
  recordSelectionManager=new RecordSelectionManager(recordIDMappingManager,recordIDType);
  dimensionSelectionManager=new DimensionSelectionManager(dimensionIDMappingManager,dimensionIDType);
  recordGroupSelectionManager=new SelectionManager(recordGroupIDType);
  addIDCategory(dimensionIDCategory);
  addIDCategory(recordIDCategory);
  super.init();
}",0.9407265774378584
57818,public abstract void createDefaultConfiguration();,"/** 
 * Create a default   {@link DataDomainConfiguration} where the columns are the dimensions 
 */
public abstract void createDefaultConfiguration();",0.4975124378109453
57819,"/** 
 * Register a new IDType. Checks whether whether the columnType is legal. If the typeName is already registered, it is replaced with the newly created one.
 * @param typeName see  {@link #typeName}
 * @param idCategory see  {@link #idCategory}
 * @param columnType see  {@link #columnType}
 * @return the created ID Type
 */
public static IDType registerType(String typeName,IDCategory idCategory,EColumnType columnType){
  if (!(columnType == EColumnType.STRING || columnType == EColumnType.INT))   throw new IllegalStateException(""String_Node_Str"" + columnType);
  IDType idType=new IDType(typeName,idCategory,columnType);
  registeredTypes.put(typeName,idType);
  Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + typeName));
  return idType;
}","/** 
 * Register a new IDType. Checks whether whether the columnType is legal. If the typeName is already registered, it is replaced with the newly created one.
 * @param typeName see  {@link #typeName}
 * @param idCategory see  {@link #idCategory}
 * @param columnType see  {@link #columnType}
 * @return the created ID Type
 */
public static IDType registerType(String typeName,IDCategory idCategory,EColumnType columnType){
  if (!(columnType == EColumnType.STRING || columnType == EColumnType.INT))   throw new IllegalStateException(""String_Node_Str"" + columnType);
  IDType idType=registeredTypes.get(typeName);
  if (idType != null) {
    if (!idType.getIDCategory().equals(idCategory) || !idType.getColumnType().equals(columnType))     throw new IllegalStateException(""String_Node_Str"" + typeName + ""String_Node_Str""+ idType+ ""String_Node_Str""+ idCategory+ ""String_Node_Str""+ columnType);
  }
 else {
    idType=new IDType(typeName,idCategory,columnType);
    registeredTypes.put(typeName,idType);
    Logger.log(new Status(Status.INFO,""String_Node_Str"",""String_Node_Str"" + typeName));
  }
  return idType;
}",0.8173636844891476
57820,"public static ColorMapper createDefaultMapper(EDefaultColorSchemes colorSchema){
  return colorSchema.getDefaultColorMapper();
}","/** 
 * Returns a new   {@link ColorMapper} for the schema specified
 * @param colorSchema
 * @return
 */
public static ColorMapper createDefaultMapper(EDefaultColorSchemes colorSchema){
  return colorSchema.getDefaultColorMapper();
}",0.7071823204419889
57821,"@Override public void createDefaultConfiguration(){
  configuration=new DataDomainConfiguration();
  configuration.setRecordIDCategory(""String_Node_Str"");
  configuration.setDimensionIDCategory(""String_Node_Str"");
  configuration.setHumanReadableRecordIDType(""String_Node_Str"");
  configuration.setHumanReadableDimensionIDType(""String_Node_Str"");
  configuration.setRecordDenominationPlural(""String_Node_Str"");
  configuration.setRecordDenominationSingular(""String_Node_Str"");
  configuration.setDimensionDenominationPlural(""String_Node_Str"");
  configuration.setDimensionDenominationSingular(""String_Node_Str"");
}","@Override public void createDefaultConfiguration(){
  configuration=new DataDomainConfiguration();
  configuration.setDefaultConfiguration(true);
  configuration.setRecordIDCategory(""String_Node_Str"");
  configuration.setDimensionIDCategory(""String_Node_Str"");
  configuration.setHumanReadableRecordIDType(""String_Node_Str"");
  configuration.setHumanReadableDimensionIDType(""String_Node_Str"");
  configuration.setRecordDenominationPlural(""String_Node_Str"");
  configuration.setRecordDenominationSingular(""String_Node_Str"");
  configuration.setDimensionDenominationPlural(""String_Node_Str"");
  configuration.setDimensionDenominationSingular(""String_Node_Str"");
}",0.9631372549019608
57822,"public void createDefaultConfiguration(){
  configuration=new DataDomainConfiguration();
  configuration.setMappingFile(""String_Node_Str"");
  configuration.setRecordIDCategory(""String_Node_Str"");
  configuration.setDimensionIDCategory(""String_Node_Str"");
  configuration.setPrimaryRecordMappingType(""String_Node_Str"");
  configuration.setPrimaryDimensionMappingType(""String_Node_Str"");
  configuration.setHumanReadableRecordIDType(""String_Node_Str"");
  configuration.setHumanReadableDimensionIDType(""String_Node_Str"");
  configuration.setRecordDenominationPlural(""String_Node_Str"");
  configuration.setRecordDenominationSingular(""String_Node_Str"");
  configuration.setDimensionDenominationPlural(""String_Node_Str"");
  configuration.setDimensionDenominationSingular(""String_Node_Str"");
  pathwayViewerMode=false;
}","@Override public void createDefaultConfiguration(){
  configuration=new DataDomainConfiguration();
  configuration.setDefaultConfiguration(true);
  configuration.setMappingFile(""String_Node_Str"");
  configuration.setRecordIDCategory(""String_Node_Str"");
  configuration.setDimensionIDCategory(""String_Node_Str"");
  configuration.setPrimaryRecordMappingType(""String_Node_Str"");
  configuration.setPrimaryDimensionMappingType(""String_Node_Str"");
  configuration.setHumanReadableRecordIDType(""String_Node_Str"");
  configuration.setHumanReadableDimensionIDType(""String_Node_Str"");
  configuration.setRecordDenominationPlural(""String_Node_Str"");
  configuration.setRecordDenominationSingular(""String_Node_Str"");
  configuration.setDimensionDenominationPlural(""String_Node_Str"");
  configuration.setDimensionDenominationSingular(""String_Node_Str"");
  pathwayViewerMode=false;
}",0.966131907308378
57823,"/** 
 * Returns the   {@link DataContainer} for the {@link RecordPerspective} and the{@link DimensionPerspective} specified. </p><p> If such a container exists already, the existing container is returned. If not, a new container is created. </p>
 * @param recordPerspectiveID
 * @param dimensionPerspectiveID
 * @return
 */
public DataContainer getDataContainer(String recordPerspectiveID,String dimensionPerspectiveID){
  DataContainer container=dataContainers.get(createKey(recordPerspectiveID,dimensionPerspectiveID));
  if (container == null) {
    RecordPerspective recordPerspective=table.getRecordPerspective(recordPerspectiveID);
    if (recordPerspective == null)     throw new IllegalArgumentException(""String_Node_Str"" + recordPerspectiveID);
    DimensionPerspective dimensionPerspective=table.getDimensionPerspective(dimensionPerspectiveID);
    if (dimensionPerspective == null)     throw new IllegalArgumentException(""String_Node_Str"" + dimensionPerspectiveID);
    container=new DataContainer(this,recordPerspective,dimensionPerspective);
    dataContainers.put(createKey(recordPerspectiveID,dimensionPerspectiveID),container);
  }
  return container;
}","/** 
 * Returns the   {@link DataContainer} for the {@link RecordPerspective} and the{@link DimensionPerspective} specified. </p><p> If such a container exists already, the existing container is returned. If not, a new container is created. </p>
 * @param recordPerspectiveID
 * @param dimensionPerspectiveID
 * @return
 */
public DataContainer getDataContainer(String recordPerspectiveID,String dimensionPerspectiveID){
  DataContainer container=dataContainers.get(createKey(recordPerspectiveID,dimensionPerspectiveID));
  if (container == null) {
    RecordPerspective recordPerspective=table.getRecordPerspective(recordPerspectiveID);
    if (recordPerspective == null)     throw new IllegalArgumentException(""String_Node_Str"" + recordPerspectiveID);
    DimensionPerspective dimensionPerspective=table.getDimensionPerspective(dimensionPerspectiveID);
    if (dimensionPerspective == null)     throw new IllegalArgumentException(""String_Node_Str"" + dimensionPerspectiveID);
    container=new DataContainer(this,recordPerspective,dimensionPerspective);
    dataContainers.put(createKey(recordPerspectiveID,dimensionPerspectiveID),container);
    DimensionGroupsChangedEvent event=new DimensionGroupsChangedEvent(this);
    event.setSender(this);
    GeneralManager.get().getEventPublisher().triggerEvent(event);
  }
  return container;
}",0.9322169059011164
57824,"public void addDataDomain(IDataDomain dataDomain){
  if (dataDomainGraph.containsVertex(dataDomain))   return;
  dataDomainGraph.addVertex(dataDomain);
  for (  IDataDomain vertex : dataDomainGraph.vertexSet()) {
    if (vertex != dataDomain) {
      for (      IDCategory category : vertex.getIDCategories()) {
        for (        IDCategory currentCategory : dataDomain.getIDCategories()) {
          if (category == currentCategory) {
            Edge edge=new Edge(dataDomain,vertex,category);
            if (dataDomain instanceof ATableBasedDataDomain && vertex instanceof ATableBasedDataDomain) {
              ATableBasedDataDomain tableBasedDataDomain=(ATableBasedDataDomain)dataDomain;
              ATableBasedDataDomain previouslyRegisteredDataDomain=(ATableBasedDataDomain)vertex;
              if (currentCategory == tableBasedDataDomain.getDimensionIDCategory()) {
                edge.setInfoVertex1(""String_Node_Str"");
              }
 else               if (currentCategory == tableBasedDataDomain.getRecordIDCategory()) {
                edge.setInfoVertex1(""String_Node_Str"");
              }
              if (currentCategory == previouslyRegisteredDataDomain.getDimensionIDCategory()) {
                edge.setInfoVertex2(""String_Node_Str"");
              }
 else               if (currentCategory == previouslyRegisteredDataDomain.getRecordIDCategory()) {
                edge.setInfoVertex2(""String_Node_Str"");
              }
            }
            dataDomainGraph.addEdge(dataDomain,vertex,edge);
          }
        }
      }
    }
  }
}","public synchronized void addDataDomain(IDataDomain dataDomain){
  if (dataDomainGraph.containsVertex(dataDomain))   return;
  dataDomainGraph.addVertex(dataDomain);
  for (  IDataDomain vertex : dataDomainGraph.vertexSet()) {
    if (vertex != dataDomain) {
      for (      IDCategory category : vertex.getIDCategories()) {
        for (        IDCategory currentCategory : dataDomain.getIDCategories()) {
          if (category == currentCategory) {
            Edge edge=new Edge(dataDomain,vertex,category);
            if (dataDomain instanceof ATableBasedDataDomain && vertex instanceof ATableBasedDataDomain) {
              ATableBasedDataDomain tableBasedDataDomain=(ATableBasedDataDomain)dataDomain;
              ATableBasedDataDomain previouslyRegisteredDataDomain=(ATableBasedDataDomain)vertex;
              if (currentCategory == tableBasedDataDomain.getDimensionIDCategory()) {
                edge.setInfoVertex1(""String_Node_Str"");
              }
 else               if (currentCategory == tableBasedDataDomain.getRecordIDCategory()) {
                edge.setInfoVertex1(""String_Node_Str"");
              }
              if (currentCategory == previouslyRegisteredDataDomain.getDimensionIDCategory()) {
                edge.setInfoVertex2(""String_Node_Str"");
              }
 else               if (currentCategory == previouslyRegisteredDataDomain.getRecordIDCategory()) {
                edge.setInfoVertex2(""String_Node_Str"");
              }
            }
            dataDomainGraph.addEdge(dataDomain,vertex,edge);
          }
        }
      }
    }
  }
}",0.9958743256109172
57825,"public Set<IDataDomain> getNeighboursOf(IDataDomain vertex){
  Set<Edge> edges=dataDomainGraph.edgesOf(vertex);
  Set<IDataDomain> vertices=new HashSet<IDataDomain>();
  for (  Edge edge : edges) {
    vertices.add(edge.getOtherSideOf(vertex));
  }
  return vertices;
}","public synchronized Set<IDataDomain> getNeighboursOf(IDataDomain vertex){
  Set<Edge> edges=dataDomainGraph.edgesOf(vertex);
  Set<IDataDomain> vertices=new HashSet<IDataDomain>();
  for (  Edge edge : edges) {
    vertices.add(edge.getOtherSideOf(vertex));
  }
  return vertices;
}",0.9764065335753176
57826,"public Multigraph<IDataDomain,Edge> getGraph(){
  return dataDomainGraph;
}","public synchronized Multigraph<IDataDomain,Edge> getGraph(){
  return dataDomainGraph;
}",0.9202453987730062
57827,"public Set<Edge> getEdges(IDataDomain dataDomain1,IDataDomain dataDomain2){
  return dataDomainGraph.getAllEdges(dataDomain1,dataDomain2);
}","public Set<Edge> getEdges(IDataDomain dataDomain1,IDataDomain dataDomain2){
  return new HashSet<Edge>(dataDomainGraph.getAllEdges(dataDomain1,dataDomain2));
}",0.9364548494983278
57828,"public void removeDataDomain(IDataDomain dataDomain){
  if (dataDomainGraph.containsVertex(dataDomain)) {
    dataDomainGraph.removeAllEdges(dataDomainGraph.edgesOf(dataDomain));
    dataDomainGraph.removeVertex(dataDomain);
  }
}","public synchronized void removeDataDomain(IDataDomain dataDomain){
  if (dataDomainGraph.containsVertex(dataDomain)) {
    dataDomainGraph.removeAllEdges(dataDomainGraph.edgesOf(dataDomain));
    dataDomainGraph.removeVertex(dataDomain);
  }
}",0.9725158562367864
57829,"public Set<IDataDomain> getDataDomains(){
  return dataDomainGraph.vertexSet();
}","public Set<IDataDomain> getDataDomains(){
  return new HashSet<IDataDomain>(dataDomainGraph.vertexSet());
}",0.8617021276595744
57830,"private void createPickingListeners(){
  view.addMultiIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      DimensionGroupRenderer dimensionGroupRenderer=getDimensionGroupRenderer(pick.getID());
      if (dimensionGroupRenderer == null)       return;
      dimensionGroupRenderer.setSelectionType(SelectionType.SELECTION);
      dragAndDropController.clearDraggables();
      dragAndDropController.setDraggingStartPosition(pick.getPickedPoint());
      dragAndDropController.addDraggable(dimensionGroupRenderer);
      view.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      DimensionGroupRenderer dimensionGroupRenderer=getDimensionGroupRenderer(pick.getID());
      if (dimensionGroupRenderer == null)       return;
      dimensionGroupRenderer.setColor(dimensionGroupRenderer.getBorderColor());
    }
    @Override public void mouseOut(    Pick pick){
      DimensionGroupRenderer dimensionGroupRenderer=getDimensionGroupRenderer(pick.getID());
      if (dimensionGroupRenderer == null)       return;
      dimensionGroupRenderer.setColor(dataDomain.getColor().getRGBA());
    }
    @Override public void dragged(    Pick pick){
      if (!dragAndDropController.isDragging()) {
        dragAndDropController.startDragging(""String_Node_Str"");
      }
    }
    private DimensionGroupRenderer getDimensionGroupRenderer(    int id){
      for (      DimensionGroupRenderer dimensionGroupRenderer : dimensionGroupRenderers) {
        if (dimensionGroupRenderer.getDimensionGroupData().getID() == id) {
          return dimensionGroupRenderer;
        }
      }
      return null;
    }
  }
,DIMENSION_GROUP_PICKING_TYPE + node.getID());
  view.addMultiIDPickingListener(new APickingListener(){
    @Override public void mouseOver(    Pick pick){
      EmptyCellRenderer emptyCellRenderer=getEmptyCellRenderer(pick.getID());
      if (emptyCellRenderer == null)       return;
      emptyCellRenderer.setColor(emptyCellRenderer.getBorderColor());
      view.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      EmptyCellRenderer emptyCellRenderer=getEmptyCellRenderer(pick.getID());
      if (emptyCellRenderer == null)       return;
      emptyCellRenderer.setColor(EmptyCellRenderer.DEFAULT_COLOR);
      view.setDisplayListDirty();
    }
    @Override public void rightClicked(    Pick pick){
      Pair<CellContainer,CellContainer> rowAndColumn=null;
      for (      EmptyCellRenderer emptyCellRenderer : emptyCellRenderers.keySet()) {
        if (emptyCellRenderer.getID() == pick.getID()) {
          rowAndColumn=emptyCellRenderers.get(emptyCellRenderer);
          break;
        }
      }
      if (rowAndColumn != null) {
        String recordPerspectiveID=rowAndColumn.getFirst().id;
        CellContainer column=rowAndColumn.getSecond();
        String dimensionPerspectiveID=column.id;
        Group group=null;
        DimensionVirtualArray dimensionVA=null;
        boolean createDimensionPerspective=false;
        if (!dataDomain.getTable().containsDimensionPerspective(dimensionPerspectiveID)) {
          DimensionPerspective perspective=dataDomain.getTable().getDimensionPerspective(column.parentContainer.id);
          int groupIndex=column.parentContainer.childContainers.indexOf(column);
          dimensionVA=perspective.getVirtualArray();
          DimensionGroupList groupList=dimensionVA.getGroupList();
          group=groupList.get(groupIndex);
          createDimensionPerspective=true;
        }
        view.getContextMenuCreator().addContextMenuItem(new AddDataContainerItem(dataDomain,recordPerspectiveID,dimensionPerspectiveID,createDimensionPerspective,dimensionVA,group));
      }
    }
    private EmptyCellRenderer getEmptyCellRenderer(    int id){
      for (      EmptyCellRenderer emptyCellRenderer : emptyCellRenderers.keySet()) {
        if (emptyCellRenderer.getID() == id) {
          return emptyCellRenderer;
        }
      }
      return null;
    }
  }
,EMPTY_CELL_PICKING_TYPE + node.getID());
}","private void createPickingListeners(){
  view.addMultiIDPickingListener(new APickingListener(){
    @Override public void clicked(    Pick pick){
      DimensionGroupRenderer dimensionGroupRenderer=getDimensionGroupRenderer(pick.getID());
      if (dimensionGroupRenderer == null)       return;
      dimensionGroupRenderer.setSelectionType(SelectionType.SELECTION);
      dragAndDropController.clearDraggables();
      dragAndDropController.setDraggingStartPosition(pick.getPickedPoint());
      dragAndDropController.addDraggable(dimensionGroupRenderer);
      view.setDisplayListDirty();
    }
    @Override public void mouseOver(    Pick pick){
      DimensionGroupRenderer dimensionGroupRenderer=getDimensionGroupRenderer(pick.getID());
      if (dimensionGroupRenderer == null)       return;
      dimensionGroupRenderer.setColor(dimensionGroupRenderer.getBorderColor());
      view.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      DimensionGroupRenderer dimensionGroupRenderer=getDimensionGroupRenderer(pick.getID());
      if (dimensionGroupRenderer == null)       return;
      dimensionGroupRenderer.setColor(dataDomain.getColor().getRGBA());
      view.setDisplayListDirty();
    }
    @Override public void dragged(    Pick pick){
      if (!dragAndDropController.isDragging()) {
        dragAndDropController.startDragging(""String_Node_Str"");
      }
    }
    private DimensionGroupRenderer getDimensionGroupRenderer(    int id){
      for (      DimensionGroupRenderer dimensionGroupRenderer : dimensionGroupRenderers) {
        if (dimensionGroupRenderer.getDimensionGroupData().getID() == id) {
          return dimensionGroupRenderer;
        }
      }
      return null;
    }
  }
,DIMENSION_GROUP_PICKING_TYPE + node.getID());
  view.addMultiIDPickingListener(new APickingListener(){
    @Override public void mouseOver(    Pick pick){
      EmptyCellRenderer emptyCellRenderer=getEmptyCellRenderer(pick.getID());
      if (emptyCellRenderer == null)       return;
      emptyCellRenderer.setColor(emptyCellRenderer.getBorderColor());
      view.setDisplayListDirty();
    }
    @Override public void mouseOut(    Pick pick){
      EmptyCellRenderer emptyCellRenderer=getEmptyCellRenderer(pick.getID());
      if (emptyCellRenderer == null)       return;
      emptyCellRenderer.setColor(EmptyCellRenderer.DEFAULT_COLOR);
      view.setDisplayListDirty();
    }
    @Override public void rightClicked(    Pick pick){
      Pair<CellContainer,CellContainer> rowAndColumn=null;
      for (      EmptyCellRenderer emptyCellRenderer : emptyCellRenderers.keySet()) {
        if (emptyCellRenderer.getID() == pick.getID()) {
          rowAndColumn=emptyCellRenderers.get(emptyCellRenderer);
          break;
        }
      }
      if (rowAndColumn != null) {
        String recordPerspectiveID=rowAndColumn.getFirst().id;
        CellContainer column=rowAndColumn.getSecond();
        String dimensionPerspectiveID=column.id;
        Group group=null;
        DimensionVirtualArray dimensionVA=null;
        boolean createDimensionPerspective=false;
        if (!dataDomain.getTable().containsDimensionPerspective(dimensionPerspectiveID)) {
          DimensionPerspective perspective=dataDomain.getTable().getDimensionPerspective(column.parentContainer.id);
          int groupIndex=column.parentContainer.childContainers.indexOf(column);
          dimensionVA=perspective.getVirtualArray();
          DimensionGroupList groupList=dimensionVA.getGroupList();
          group=groupList.get(groupIndex);
          createDimensionPerspective=true;
        }
        view.getContextMenuCreator().addContextMenuItem(new AddDataContainerItem(dataDomain,recordPerspectiveID,dimensionPerspectiveID,createDimensionPerspective,dimensionVA,group));
      }
    }
    private EmptyCellRenderer getEmptyCellRenderer(    int id){
      for (      EmptyCellRenderer emptyCellRenderer : emptyCellRenderers.keySet()) {
        if (emptyCellRenderer.getID() == id) {
          return emptyCellRenderer;
        }
      }
      return null;
    }
  }
,EMPTY_CELL_PICKING_TYPE + node.getID());
}",0.991693134620083
57831,"@Override public void render(GL2 gl){
  float captionColumnWidth=calcMaxTextWidth(rows);
  float captionRowHeight=calcMaxTextWidth(columns);
  CaleydoTextRenderer textRenderer=view.getTextRenderer();
  PixelGLConverter pixelGLConverter=view.getPixelGLConverter();
  float currentPositionX=(x / 2.0f) - pixelGLConverter.getGLWidthForPixelWidth(getMinWidthPixels() / 2);
  float rowHeight=pixelGLConverter.getGLHeightForPixelHeight(ROW_HEIGHT_PIXELS);
  float currentPositionY=y - captionRowHeight - pixelGLConverter.getGLHeightForPixelHeight(CAPTION_SPACING_PIXELS);
  float textHeight=pixelGLConverter.getGLHeightForPixelHeight(TEXT_HEIGHT_PIXELS);
  for (  CellContainer row : rows) {
    float textPositionY=currentPositionY - rowHeight + (rowHeight - textHeight) / 2.0f + pixelGLConverter.getGLHeightForPixelHeight(2);
    textRenderer.setColor(new float[]{0,0,0});
    textRenderer.renderTextInBounds(gl,row.caption,currentPositionX,textPositionY,0,captionColumnWidth,textHeight);
    gl.glPushAttrib(GL2.GL_COLOR_BUFFER_BIT | GL2.GL_LINE_BIT);
    gl.glColor3f(0,0,0);
    gl.glLineWidth(1);
    gl.glBegin(GL2.GL_LINES);
    gl.glVertex3f(0,currentPositionY,0);
    gl.glVertex3f(x,currentPositionY,0);
    gl.glEnd();
    gl.glPopAttrib();
    row.position=currentPositionY;
    currentPositionY-=rowHeight;
  }
  float columnWidth=pixelGLConverter.getGLWidthForPixelWidth(COLUMN_WIDTH_PIXELS);
  currentPositionX+=captionColumnWidth + pixelGLConverter.getGLWidthForPixelWidth(CAPTION_SPACING_PIXELS);
  for (  CellContainer column : columns) {
    if (!column.isVisible) {
      continue;
    }
    float currentColumnWidth=columnWidth * column.numSubdivisions;
    float textPositionX=currentPositionX + (currentColumnWidth - textHeight) / 2.0f + pixelGLConverter.getGLHeightForPixelHeight(2);
    gl.glPushMatrix();
    gl.glTranslatef(textPositionX,y,0);
    gl.glRotatef(-90,0,0,1);
    textRenderer.setColor(new float[]{0,0,0});
    textRenderer.renderTextInBounds(gl,column.caption,0,0,0,captionRowHeight,textHeight);
    gl.glPopMatrix();
    gl.glPushAttrib(GL2.GL_COLOR_BUFFER_BIT | GL2.GL_LINE_BIT);
    gl.glColor3f(0,0,0);
    gl.glLineWidth(1);
    gl.glBegin(GL2.GL_LINES);
    gl.glVertex3f(currentPositionX,0,0);
    gl.glVertex3f(currentPositionX,y,0);
    for (int i=1; i < column.numSubdivisions; i++) {
      gl.glVertex3f(currentPositionX + i * columnWidth,0,0);
      gl.glVertex3f(currentPositionX + i * columnWidth,y - captionRowHeight - pixelGLConverter.getGLHeightForPixelHeight(CAPTION_SPACING_PIXELS),0);
    }
    gl.glEnd();
    float currentDimGroupPositionX=currentPositionX;
    for (    CellContainer row : rows) {
      float cellSpacingX=pixelGLConverter.getGLWidthForPixelWidth(CELL_SPACING_PIXELS);
      float cellSpacingY=pixelGLConverter.getGLHeightForPixelHeight(CELL_SPACING_PIXELS);
      float emptyCellPositionX=currentPositionX + currentColumnWidth - columnWidth;
      ColorRenderer cell=cells.get(row.id + column.id);
      gl.glPushMatrix();
      int pickingID=0;
      if (cell instanceof DimensionGroupRenderer) {
        pickingID=view.getPickingManager().getPickingID(view.getID(),DIMENSION_GROUP_PICKING_TYPE + node.getID(),((DimensionGroupRenderer)cell).getDimensionGroupData().getID());
        gl.glTranslatef(currentDimGroupPositionX + cellSpacingX,row.position - rowHeight + cellSpacingY,0);
        Point2D position1=new Point2D.Float(currentDimGroupPositionX + cellSpacingX,row.position - rowHeight + cellSpacingY);
        Point2D position2=new Point2D.Float((float)position1.getX() + pixelGLConverter.getGLWidthForPixelWidth(CELL_SIZE_PIXELS),(float)position1.getY());
        dimensionGroupPositions.put(((DimensionGroupRenderer)cell).getDimensionGroupData().getID(),new Pair<Point2D,Point2D>(position1,position2));
        currentDimGroupPositionX+=columnWidth;
      }
 else {
        pickingID=view.getPickingManager().getPickingID(view.getID(),EMPTY_CELL_PICKING_TYPE + node.getID(),((EmptyCellRenderer)cell).getID());
        gl.glTranslatef(emptyCellPositionX + cellSpacingX,row.position - rowHeight + cellSpacingY,0);
      }
      cell.setLimits(pixelGLConverter.getGLWidthForPixelWidth(CELL_SIZE_PIXELS),pixelGLConverter.getGLHeightForPixelHeight(CELL_SIZE_PIXELS));
      gl.glPushName(pickingID);
      cell.render(gl);
      gl.glPopName();
      gl.glPopMatrix();
    }
    gl.glPopAttrib();
    column.position=currentPositionX;
    currentPositionX+=currentColumnWidth;
  }
}","@Override public void render(GL2 gl){
  float captionColumnWidth=calcMaxTextWidth(rows);
  float captionRowHeight=calcMaxTextWidth(columns);
  CaleydoTextRenderer textRenderer=view.getTextRenderer();
  PixelGLConverter pixelGLConverter=view.getPixelGLConverter();
  float currentPositionX=(x / 2.0f) - pixelGLConverter.getGLWidthForPixelWidth(getMinWidthPixels() / 2);
  float rowHeight=pixelGLConverter.getGLHeightForPixelHeight(ROW_HEIGHT_PIXELS);
  float captionSpacingY=pixelGLConverter.getGLHeightForPixelHeight(CAPTION_SPACING_PIXELS);
  float captionSpacingX=pixelGLConverter.getGLWidthForPixelWidth(CAPTION_SPACING_PIXELS);
  float currentPositionY=y - captionRowHeight - captionSpacingY;
  float textHeight=pixelGLConverter.getGLHeightForPixelHeight(TEXT_HEIGHT_PIXELS);
  for (  CellContainer row : rows) {
    float textPositionY=currentPositionY - rowHeight + (rowHeight - textHeight) / 2.0f + pixelGLConverter.getGLHeightForPixelHeight(2);
    if (row.parentContainer == null) {
      gl.glColor3f(0.7f,0.7f,0.7f);
      gl.glBegin(GL2.GL_QUADS);
      gl.glVertex3f(currentPositionX,currentPositionY - rowHeight,0);
      gl.glVertex3f(currentPositionX + captionColumnWidth + pixelGLConverter.getGLWidthForPixelWidth(CAPTION_SPACING_PIXELS),currentPositionY - rowHeight,0);
      gl.glVertex3f(currentPositionX + captionColumnWidth + pixelGLConverter.getGLWidthForPixelWidth(CAPTION_SPACING_PIXELS),currentPositionY,0);
      gl.glVertex3f(currentPositionX,currentPositionY,0);
      gl.glEnd();
    }
    textRenderer.setColor(new float[]{0,0,0});
    textRenderer.renderTextInBounds(gl,row.caption,currentPositionX + captionSpacingX,textPositionY,0,captionColumnWidth - 2 * captionSpacingX,textHeight);
    gl.glPushAttrib(GL2.GL_COLOR_BUFFER_BIT | GL2.GL_LINE_BIT);
    gl.glColor3f(0,0,0);
    gl.glLineWidth(1);
    gl.glBegin(GL2.GL_LINES);
    gl.glVertex3f(0,currentPositionY,0.1f);
    gl.glVertex3f(x,currentPositionY,0.1f);
    gl.glEnd();
    gl.glPopAttrib();
    row.position=currentPositionY;
    currentPositionY-=rowHeight;
  }
  float columnWidth=pixelGLConverter.getGLWidthForPixelWidth(COLUMN_WIDTH_PIXELS);
  currentPositionX+=captionColumnWidth + pixelGLConverter.getGLWidthForPixelWidth(CAPTION_SPACING_PIXELS);
  for (  CellContainer column : columns) {
    if (!column.isVisible) {
      continue;
    }
    float currentColumnWidth=columnWidth * column.numSubdivisions;
    gl.glPushAttrib(GL2.GL_COLOR_BUFFER_BIT | GL2.GL_LINE_BIT);
    float childIndent=0;
    gl.glColor3f(0.7f,0.7f,0.7f);
    if (column.parentContainer == null) {
      gl.glBegin(GL2.GL_QUADS);
      gl.glVertex3f(currentPositionX,y - captionRowHeight - captionSpacingY,0);
      gl.glVertex3f(currentPositionX + currentColumnWidth,y - captionRowHeight - captionSpacingY,0);
      gl.glVertex3f(currentPositionX + currentColumnWidth,y,0);
      gl.glVertex3f(currentPositionX,y,0);
      gl.glEnd();
    }
 else {
      childIndent=captionSpacingY * 2;
      gl.glColor3f(0.8f,0.8f,0.8f);
      gl.glBegin(GL2.GL_QUADS);
      gl.glVertex3f(currentPositionX,y - captionRowHeight - captionSpacingY,0);
      gl.glVertex3f(currentPositionX + currentColumnWidth,y - captionRowHeight - captionSpacingY,0);
      gl.glVertex3f(currentPositionX + currentColumnWidth,y,0);
      gl.glVertex3f(currentPositionX,y,0);
      gl.glColor3f(0.7f,0.7f,0.7f);
      gl.glVertex3f(currentPositionX,y - childIndent,0);
      gl.glVertex3f(currentPositionX + currentColumnWidth,y - childIndent,0);
      gl.glVertex3f(currentPositionX + currentColumnWidth,y,0);
      gl.glVertex3f(currentPositionX,y,0);
      gl.glEnd();
    }
    float textPositionX=currentPositionX + (currentColumnWidth - textHeight) / 2.0f + pixelGLConverter.getGLHeightForPixelHeight(2);
    gl.glPushMatrix();
    gl.glTranslatef(textPositionX,y - childIndent - captionSpacingY,0);
    gl.glRotatef(-90,0,0,1);
    textRenderer.setColor(new float[]{0,0,0});
    textRenderer.renderTextInBounds(gl,column.caption,0,0,0,captionRowHeight - childIndent - 2 * captionSpacingY,textHeight);
    gl.glPopMatrix();
    gl.glColor3f(0,0,0);
    gl.glLineWidth(1);
    gl.glBegin(GL2.GL_LINES);
    gl.glVertex3f(currentPositionX,0,0);
    gl.glVertex3f(currentPositionX,y - childIndent,0);
    for (int i=1; i < column.numSubdivisions; i++) {
      gl.glVertex3f(currentPositionX + i * columnWidth,0,0);
      gl.glVertex3f(currentPositionX + i * columnWidth,y - captionRowHeight - captionSpacingY,0);
    }
    gl.glEnd();
    float currentDimGroupPositionX=currentPositionX;
    for (    CellContainer row : rows) {
      float cellSpacingX=pixelGLConverter.getGLWidthForPixelWidth(CELL_SPACING_PIXELS);
      float cellSpacingY=pixelGLConverter.getGLHeightForPixelHeight(CELL_SPACING_PIXELS);
      float emptyCellPositionX=currentPositionX + currentColumnWidth - columnWidth;
      ColorRenderer cell=cells.get(row.id + column.id);
      gl.glPushMatrix();
      int pickingID=0;
      if (cell instanceof DimensionGroupRenderer) {
        pickingID=view.getPickingManager().getPickingID(view.getID(),DIMENSION_GROUP_PICKING_TYPE + node.getID(),((DimensionGroupRenderer)cell).getDimensionGroupData().getID());
        gl.glTranslatef(currentDimGroupPositionX + cellSpacingX,row.position - rowHeight + cellSpacingY,0);
        Point2D position1=new Point2D.Float(currentDimGroupPositionX + cellSpacingX,row.position - rowHeight + cellSpacingY);
        Point2D position2=new Point2D.Float((float)position1.getX() + pixelGLConverter.getGLWidthForPixelWidth(CELL_SIZE_PIXELS),(float)position1.getY());
        dimensionGroupPositions.put(((DimensionGroupRenderer)cell).getDimensionGroupData().getID(),new Pair<Point2D,Point2D>(position1,position2));
        currentDimGroupPositionX+=columnWidth;
      }
 else {
        pickingID=view.getPickingManager().getPickingID(view.getID(),EMPTY_CELL_PICKING_TYPE + node.getID(),((EmptyCellRenderer)cell).getID());
        gl.glTranslatef(emptyCellPositionX + cellSpacingX,row.position - rowHeight + cellSpacingY,0);
      }
      cell.setLimits(pixelGLConverter.getGLWidthForPixelWidth(CELL_SIZE_PIXELS),pixelGLConverter.getGLHeightForPixelHeight(CELL_SIZE_PIXELS));
      gl.glPushName(pickingID);
      cell.render(gl);
      gl.glPopName();
      gl.glPopMatrix();
    }
    gl.glPopAttrib();
    column.position=currentPositionX;
    currentPositionX+=currentColumnWidth;
  }
}",0.7333394782929302
57832,"/** 
 * Init textures, build array of textures used for holding the whole samples
 */
public void init(DataTable table,DimensionVirtualArray dimensionVA,RecordVirtualArray recordVA,DataRepresentation dataRepresentation){
  this.table=table;
  this.dimensionVA=dimensionVA;
  this.recordVA=recordVA;
  ColorMapper colorMapper=heatMap.getDataDomain().getColorMapper();
  int textureHeight=numberOfRecords=recordVA.size();
  int textureWidth=numberOfDimensions=dimensionVA.size();
  numberOfTextures=(int)Math.ceil((double)numberOfRecords / MAX_SAMPLES_PER_TEXTURE);
  if (numberOfTextures <= 1)   samplesPerTexture=numberOfRecords;
 else   samplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
  textures.clear();
  numberSamples.clear();
  Texture tempTexture;
  samplesPerTexture=(int)Math.ceil((double)textureHeight / numberOfTextures);
  float lookupValue=0;
  floatBuffer=new FloatBuffer[numberOfTextures];
  for (int texture=0; texture < numberOfTextures; texture++) {
    if (texture == numberOfTextures - 1) {
      numberSamples.add(textureHeight - samplesPerTexture * texture);
      floatBuffer[texture]=FloatBuffer.allocate((textureHeight - samplesPerTexture * texture) * textureWidth * 4);
    }
 else {
      numberSamples.add(samplesPerTexture);
      floatBuffer[texture]=FloatBuffer.allocate(samplesPerTexture * textureWidth * 4);
    }
  }
  int recordCount=0;
  int textureCounter=0;
  float opacity=1;
  for (  Integer recordID : recordVA) {
    recordCount++;
    for (    Integer dimensionID : dimensionVA) {
      lookupValue=table.getFloat(dataRepresentation,dimensionID,recordID);
      float[] mappingColor=colorMapper.getColor(lookupValue);
      float[] rgba={mappingColor[0],mappingColor[1],mappingColor[2],opacity};
      floatBuffer[textureCounter].put(rgba);
    }
    if (recordCount >= numberSamples.get(textureCounter)) {
      floatBuffer[textureCounter].rewind();
      TextureData texData=new TextureData(GLProfile.getDefault(),GL2.GL_RGBA,textureWidth,numberSamples.get(textureCounter),0,GL2.GL_RGBA,GL2.GL_FLOAT,true,false,false,floatBuffer[textureCounter],null);
      tempTexture=TextureIO.newTexture(0);
      tempTexture.updateImage(texData);
      textures.add(tempTexture);
      textureCounter++;
      recordCount=0;
    }
  }
}","/** 
 * Init textures, build array of textures used for holding the whole samples
 */
public void init(DataTable table,DimensionVirtualArray dimensionVA,RecordVirtualArray recordVA,DataRepresentation dataRepresentation){
  this.table=table;
  this.dimensionVA=dimensionVA;
  this.recordVA=recordVA;
  int textureHeight=numberOfRecords=recordVA.size();
  int textureWidth=numberOfDimensions=dimensionVA.size();
  numberOfTextures=(int)Math.ceil((double)numberOfRecords / MAX_SAMPLES_PER_TEXTURE);
  if (numberOfTextures <= 1)   samplesPerTexture=numberOfRecords;
 else   samplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
  textures.clear();
  numberSamples.clear();
  Texture tempTexture;
  samplesPerTexture=(int)Math.ceil((double)textureHeight / numberOfTextures);
  float lookupValue=0;
  floatBuffer=new FloatBuffer[numberOfTextures];
  for (int texture=0; texture < numberOfTextures; texture++) {
    if (texture == numberOfTextures - 1) {
      numberSamples.add(textureHeight - samplesPerTexture * texture);
      floatBuffer[texture]=FloatBuffer.allocate((textureHeight - samplesPerTexture * texture) * textureWidth * 4);
    }
 else {
      numberSamples.add(samplesPerTexture);
      floatBuffer[texture]=FloatBuffer.allocate(samplesPerTexture * textureWidth * 4);
    }
  }
  int recordCount=0;
  int textureCounter=0;
  float opacity=1;
  for (  Integer recordID : recordVA) {
    recordCount++;
    for (    Integer dimensionID : dimensionVA) {
      lookupValue=table.getFloat(dataRepresentation,dimensionID,recordID);
      float[] mappingColor=colorMapper.getColor(lookupValue);
      float[] rgba={mappingColor[0],mappingColor[1],mappingColor[2],opacity};
      floatBuffer[textureCounter].put(rgba);
    }
    if (recordCount >= numberSamples.get(textureCounter)) {
      floatBuffer[textureCounter].rewind();
      TextureData texData=new TextureData(GLProfile.getDefault(),GL2.GL_RGBA,textureWidth,numberSamples.get(textureCounter),0,GL2.GL_RGBA,GL2.GL_FLOAT,true,false,false,floatBuffer[textureCounter],null);
      tempTexture=TextureIO.newTexture(0);
      tempTexture.updateImage(texData);
      textures.add(tempTexture);
      textureCounter++;
      recordCount=0;
    }
  }
}",0.9847465231045311
57833,"/** 
 * Constructor for uncertainty heat map where no GLHeatMap parent exists.
 */
public HeatMapTextureRenderer(GLUncertaintyHeatMap uncertaintyHeatMap){
  super(null);
  viewID=uncertaintyHeatMap.getID();
}","/** 
 * Constructor for uncertainty heat map where no GLHeatMap parent exists.
 */
public HeatMapTextureRenderer(GLUncertaintyHeatMap uncertaintyHeatMap){
  super(null);
  colorMapper=uncertaintyHeatMap.getColorMapper();
  viewID=uncertaintyHeatMap.getID();
}",0.8907922912205567
57834,"@Override public void destroy(){
  selectionTransformer.destroy();
  super.destroy();
}","@Override public void destroy(){
  super.destroy();
}",0.7571428571428571
57835,"/** 
 * Constructor. Pass the length of the managed collection and a predefined array list of indices on the collection. This will serve as the starting point for the virtual array.
 * @param initialList
 */
public VirtualArray(String vaType,List<Integer> initialList){
  super(GeneralManager.get().getIDCreator().createID(ManagedObjectType.VIRTUAL_ARRAY));
  this.vaType=vaType;
  virtualArrayList.addAll(initialList);
}","/** 
 * Constructor. Pass the length of the managed collection and a predefined array list of indices on the collection. This will serve as the starting point for the virtual array.
 * @param initialList
 */
public VirtualArray(String vaType,List<Integer> initialList){
  super(GeneralManager.get().getIDCreator().createID(ManagedObjectType.VIRTUAL_ARRAY));
  this.vaType=vaType;
  if (initialList != null)   virtualArrayList.addAll(initialList);
}",0.9689298043728424
57836,"/** 
 * Creates and initializes a new view based on its serialized form. The view is already added to the list of event receivers and senders.
 * @param gl
 * @param serView serialized form of the view to create
 * @return the created view ready to be used within the application
 */
@SuppressWarnings(""String_Node_Str"") private AGLView createView(GL2 gl,ASerializedView serView){
  @SuppressWarnings(""String_Node_Str"") Class viewClass;
  try {
    viewClass=Class.forName(serView.getViewClassType());
  }
 catch (  ClassNotFoundException e) {
    throw new IllegalStateException(""String_Node_Str"" + serView.getViewType());
  }
  AGLView glView=GeneralManager.get().getViewManager().createGLView(viewClass,parentGLCanvas,parentComposite,serView.getViewFrustum());
  glView.setRemoteRenderingGLView(this);
  if (glView instanceof GLHeatMap) {
    GLHeatMap heatMap=((GLHeatMap)glView);
    heatMap.setRenderTemplate(new BucketTemplate(heatMap));
  }
  if (glView instanceof ITableBasedDataDomainView) {
    ITableBasedDataDomainView tableBasedView=(ITableBasedDataDomainView)glView;
    tableBasedView.setRecordPerspectiveID(recordPerspectiveID);
    tableBasedView.setDimensionPerspectiveID(dimensionPerspectiveID);
  }
  if (glView instanceof IDataDomainBasedView<?>) {
    ((IDataDomainBasedView<IDataDomain>)glView).setDataDomain(DataDomainManager.get().getDataDomainByID(((ASerializedTopLevelDataView)serView).getDataDomainID()));
  }
  if (glView instanceof GLPathway) {
    GLPathway glPathway=(GLPathway)glView;
    glPathway.setPathway(((SerializedPathwayView)serView).getPathwayID());
    glPathway.setPathwayDataDomain((PathwayDataDomain)DataDomainManager.get().getDataDomainByType(PathwayDataDomain.DATA_DOMAIN_TYPE));
    glPathway.enablePathwayTextures(pathwayTexturesEnabled);
    glPathway.enableNeighborhood(neighborhoodEnabled);
    glPathway.enableGeneMapping(geneMappingEnabled);
    glPathway.setRecordPerspectiveID(recordPerspectiveID);
    glPathway.setDimensionPerspectiveID(dimensionPerspectiveID);
  }
  glView.initialize();
  triggerMostRecentDelta();
  return glView;
}","/** 
 * Creates and initializes a new view based on its serialized form. The view is already added to the list of event receivers and senders.
 * @param gl
 * @param serView serialized form of the view to create
 * @return the created view ready to be used within the application
 */
@SuppressWarnings(""String_Node_Str"") private AGLView createView(GL2 gl,ASerializedView serView){
  @SuppressWarnings(""String_Node_Str"") Class viewClass;
  try {
    viewClass=Class.forName(serView.getViewClassType());
  }
 catch (  ClassNotFoundException e) {
    throw new IllegalStateException(""String_Node_Str"" + serView.getViewType());
  }
  AGLView glView=GeneralManager.get().getViewManager().createGLView(viewClass,parentGLCanvas,parentComposite,serView.getViewFrustum());
  glView.setRemoteRenderingGLView(this);
  if (glView instanceof ITableBasedDataDomainView) {
    ITableBasedDataDomainView tableBasedView=(ITableBasedDataDomainView)glView;
    tableBasedView.setRecordPerspectiveID(recordPerspectiveID);
    tableBasedView.setDimensionPerspectiveID(dimensionPerspectiveID);
  }
  if (glView instanceof IDataDomainBasedView<?>) {
    ((IDataDomainBasedView<IDataDomain>)glView).setDataDomain(DataDomainManager.get().getDataDomainByID(((ASerializedTopLevelDataView)serView).getDataDomainID()));
  }
  if (glView instanceof GLHeatMap) {
    GLHeatMap heatMap=((GLHeatMap)glView);
    heatMap.setRenderTemplate(new BucketTemplate(heatMap));
  }
  if (glView instanceof GLPathway) {
    GLPathway glPathway=(GLPathway)glView;
    glPathway.setPathway(((SerializedPathwayView)serView).getPathwayID());
    glPathway.setPathwayDataDomain((PathwayDataDomain)DataDomainManager.get().getDataDomainByType(PathwayDataDomain.DATA_DOMAIN_TYPE));
    glPathway.enablePathwayTextures(pathwayTexturesEnabled);
    glPathway.enableNeighborhood(neighborhoodEnabled);
    glPathway.enableGeneMapping(geneMappingEnabled);
    glPathway.setRecordPerspectiveID(recordPerspectiveID);
    glPathway.setDimensionPerspectiveID(dimensionPerspectiveID);
  }
  glView.initialize();
  triggerMostRecentDelta();
  return glView;
}",0.7662213740458015
57837,"@Override public void setParameterHandler(final ParameterHandler parameterHandler){
  super.setParameterHandler(parameterHandler);
  typeName=detail;
  idCategory=IDCategory.getIDCategory(attrib1);
  dimensionType=EDimensionType.valueOf(attrib2);
}","@Override public void setParameterHandler(final ParameterHandler parameterHandler){
  super.setParameterHandler(parameterHandler);
  typeName=detail;
  idCategory=IDCategory.getIDCategory(attrib1);
  dimensionType=EColumnType.valueOf(attrib2);
}",0.973630831643002
57838,"public void setAttributes(String typeName,IDCategory idCategory,EDimensionType dimensionType){
  this.typeName=typeName;
  this.idCategory=idCategory;
  this.dimensionType=dimensionType;
}","public void setAttributes(String typeName,IDCategory idCategory,EColumnType dimensionType){
  this.typeName=typeName;
  this.idCategory=idCategory;
  this.dimensionType=dimensionType;
}",0.970509383378016
57839,"/** 
 * Creates the dimensions from a previously prepared dimension definition.
 * @param loadDataParameters definition how to create the dimensions
 * @return <code>true</code>if the creation was successful, <code>false</code> otherwise
 */
public static boolean createColumns(LoadDataParameters loadDataParameters){
  ArrayList<Integer> columnIds=null;
  boolean createColumnsFromExistingIDs=false;
  if (loadDataParameters.getColumnIds() == null)   columnIds=new ArrayList<Integer>();
 else {
    columnIds=loadDataParameters.getColumnIds();
    createColumnsFromExistingIDs=true;
  }
  TabularAsciiDataReader reader=new TabularAsciiDataReader(null,loadDataParameters.getDataDomain());
  reader.setTokenPattern(loadDataParameters.getInputPattern());
  ArrayList<EDimensionType> dataTypes=reader.getColumnDataTypes();
  boolean abort=false;
  Iterator<String> columnLabelIterator=loadDataParameters.getColumnLabels().iterator();
  CmdDataCreateColumn cmdCreateColumn;
  String columnLabel;
  ATableBasedDataDomain dataDomain=loadDataParameters.getDataDomain();
  IDMappingManager columnIDMappingManager;
  IDType columnIDType;
  IDType hrColumnIDType;
  if (dataDomain.isColumnDimension()) {
    columnIDMappingManager=dataDomain.getDimensionIDMappingManager();
    columnIDType=dataDomain.getDimensionIDType();
    hrColumnIDType=dataDomain.getHumanReadableDimensionIDType();
  }
 else {
    columnIDMappingManager=dataDomain.getRecordIDMappingManager();
    columnIDType=dataDomain.getRecordIDType();
    hrColumnIDType=dataDomain.getHumanReadableRecordIDType();
  }
  MappingType mappingType=columnIDMappingManager.createMap(columnIDType,hrColumnIDType,false);
  Map<Integer,String> dimensionIDMap=columnIDMappingManager.getMap(mappingType);
  int columnCount=0;
  for (  EDimensionType dataType : dataTypes) {
switch (dataType) {
case FLOAT:
      cmdCreateColumn=(CmdDataCreateColumn)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_COLUMN);
    if (createColumnsFromExistingIDs)     cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NUMERICAL,columnIds.get(columnCount++));
 else     cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NUMERICAL);
  cmdCreateColumn.doCommand();
columnLabel=columnLabelIterator.next();
NumericalColumn column=(NumericalColumn)cmdCreateColumn.getCreatedObject();
column.setLabel(columnLabel);
dimensionIDMap.put(column.getID(),columnLabel);
if (!createColumnsFromExistingIDs) columnIds.add(column.getID());
break;
case STRING:
cmdCreateColumn=(CmdDataCreateColumn)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_COLUMN);
if (createColumnsFromExistingIDs) cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NOMINAL,columnIds.get(columnCount++));
 else cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NOMINAL);
cmdCreateColumn.doCommand();
columnLabel=columnLabelIterator.next();
NominalColumn<?> nominalColumn=(NominalColumn<?>)cmdCreateColumn.getCreatedObject();
nominalColumn.setLabel(columnLabel);
if (!createColumnsFromExistingIDs) columnIds.add(nominalColumn.getID());
case SKIP:
break;
case ABORT:
abort=true;
break;
default :
break;
}
if (abort) {
break;
}
}
columnIDMappingManager.createReverseMap(mappingType);
loadDataParameters.setDimensionIds(columnIds);
return true;
}","/** 
 * Creates the dimensions from a previously prepared dimension definition.
 * @param loadDataParameters definition how to create the dimensions
 * @return <code>true</code>if the creation was successful, <code>false</code> otherwise
 */
public static boolean createColumns(LoadDataParameters loadDataParameters){
  ArrayList<Integer> columnIds=null;
  boolean createColumnsFromExistingIDs=false;
  if (loadDataParameters.getColumnIds() == null)   columnIds=new ArrayList<Integer>();
 else {
    columnIds=loadDataParameters.getColumnIds();
    createColumnsFromExistingIDs=true;
  }
  TabularAsciiDataReader reader=new TabularAsciiDataReader(null,loadDataParameters.getDataDomain());
  reader.setTokenPattern(loadDataParameters.getInputPattern());
  ArrayList<EColumnType> dataTypes=reader.getColumnDataTypes();
  boolean abort=false;
  Iterator<String> columnLabelIterator=loadDataParameters.getColumnLabels().iterator();
  CmdDataCreateColumn cmdCreateColumn;
  String columnLabel;
  ATableBasedDataDomain dataDomain=loadDataParameters.getDataDomain();
  IDMappingManager columnIDMappingManager;
  IDType columnIDType;
  IDType hrColumnIDType;
  if (dataDomain.isColumnDimension()) {
    columnIDMappingManager=dataDomain.getDimensionIDMappingManager();
    columnIDType=dataDomain.getDimensionIDType();
    hrColumnIDType=dataDomain.getHumanReadableDimensionIDType();
  }
 else {
    columnIDMappingManager=dataDomain.getRecordIDMappingManager();
    columnIDType=dataDomain.getRecordIDType();
    hrColumnIDType=dataDomain.getHumanReadableRecordIDType();
  }
  MappingType mappingType=columnIDMappingManager.createMap(columnIDType,hrColumnIDType,false);
  Map<Integer,String> dimensionIDMap=columnIDMappingManager.getMap(mappingType);
  int columnCount=0;
  for (  EColumnType dataType : dataTypes) {
switch (dataType) {
case FLOAT:
      cmdCreateColumn=(CmdDataCreateColumn)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_COLUMN);
    if (createColumnsFromExistingIDs)     cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NUMERICAL,columnIds.get(columnCount++));
 else     cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NUMERICAL);
  cmdCreateColumn.doCommand();
columnLabel=columnLabelIterator.next();
NumericalColumn column=(NumericalColumn)cmdCreateColumn.getCreatedObject();
column.setLabel(columnLabel);
dimensionIDMap.put(column.getID(),columnLabel);
if (!createColumnsFromExistingIDs) columnIds.add(column.getID());
break;
case STRING:
cmdCreateColumn=(CmdDataCreateColumn)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_COLUMN);
if (createColumnsFromExistingIDs) cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NOMINAL,columnIds.get(columnCount++));
 else cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NOMINAL);
cmdCreateColumn.doCommand();
columnLabel=columnLabelIterator.next();
NominalColumn<?> nominalColumn=(NominalColumn<?>)cmdCreateColumn.getCreatedObject();
nominalColumn.setLabel(columnLabel);
if (!createColumnsFromExistingIDs) columnIds.add(nominalColumn.getID());
case SKIP:
break;
case ABORT:
abort=true;
break;
default :
break;
}
if (abort) {
break;
}
}
columnIDMappingManager.createReverseMap(mappingType);
loadDataParameters.setDimensionIds(columnIds);
return true;
}",0.9960594119430132
57840,"/** 
 * Creates the set from a previously prepared dimension definition.
 */
public static DataTable createData(ATableBasedDataDomain dataDomain,boolean createDefaultPerspectives){
  LoadDataParameters loadDataParameters=dataDomain.getLoadDataParameters();
  ArrayList<Integer> dimensionIDs=loadDataParameters.getColumnIds();
  CmdDataCreateTable cmdCreateSet=(CmdDataCreateTable)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_DATA_TABLE);
  cmdCreateSet.setAttributes(dimensionIDs,dataDomain);
  cmdCreateSet.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(CommandType.LOAD_LOOKUP_TABLE_FILE);
  String lookupTableInfo=loadDataParameters.getFileIDTypeName() + ""String_Node_Str"" + dataDomain.getRecordIDType().getTypeName()+ ""String_Node_Str"";
  cmdLoadLookupTableFile.setAttributes(loadDataParameters.getFileName(),loadDataParameters.getStartParseFileAtLine(),-1,lookupTableInfo,loadDataParameters.getDelimiter(),""String_Node_Str"",dataDomain.getRecordIDCategory());
  cmdLoadLookupTableFile.doCommand();
  CmdLoadFileNDimensions cmdLoadCSV=(CmdLoadFileNDimensions)GeneralManager.get().getCommandManager().createCommandByType(CommandType.LOAD_DATA_FILE);
  cmdLoadCSV.setAttributes(dimensionIDs,loadDataParameters);
  cmdLoadCSV.doCommand();
  if (!cmdLoadCSV.isParsingOK()) {
    return null;
  }
  DataTable table=dataDomain.getTable();
  if (createDefaultPerspectives) {
    table.createDefaultRecordPerspective();
    table.createDefaultDimensionPerspective();
  }
  if (loadDataParameters.isMinDefined()) {
    table.getMetaData().setMin(loadDataParameters.getMin());
  }
  if (loadDataParameters.isMaxDefined()) {
    table.getMetaData().setMax(loadDataParameters.getMax());
  }
  boolean isSetHomogeneous=loadDataParameters.isDataHomogeneous();
  if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.NORMAL,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG10,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG2,isSetHomogeneous);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
  return table;
}","/** 
 * Creates the set from a previously prepared dimension definition.
 */
public static DataTable createData(ATableBasedDataDomain dataDomain,boolean createDefaultPerspectives){
  LoadDataParameters loadDataParameters=dataDomain.getLoadDataParameters();
  ArrayList<Integer> dimensionIDs=loadDataParameters.getColumnIds();
  CmdDataCreateTable cmdCreateSet=(CmdDataCreateTable)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_DATA_TABLE);
  cmdCreateSet.setAttributes(dimensionIDs,dataDomain);
  cmdCreateSet.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(CommandType.LOAD_LOOKUP_TABLE_FILE);
  IDType rowIDType;
  if (dataDomain.isColumnDimension())   rowIDType=dataDomain.getRecordIDType();
 else   rowIDType=dataDomain.getDimensionIDType();
  String lookupTableInfo=loadDataParameters.getFileIDTypeName() + ""String_Node_Str"" + rowIDType+ ""String_Node_Str"";
  cmdLoadLookupTableFile.setAttributes(loadDataParameters.getFileName(),loadDataParameters.getStartParseFileAtLine(),-1,lookupTableInfo,loadDataParameters.getDelimiter(),""String_Node_Str"",rowIDType.getIDCategory());
  cmdLoadLookupTableFile.doCommand();
  CmdLoadFileNDimensions cmdLoadCSV=(CmdLoadFileNDimensions)GeneralManager.get().getCommandManager().createCommandByType(CommandType.LOAD_DATA_FILE);
  cmdLoadCSV.setAttributes(dimensionIDs,loadDataParameters);
  cmdLoadCSV.doCommand();
  if (!cmdLoadCSV.isParsingOK()) {
    return null;
  }
  DataTable table=dataDomain.getTable();
  if (createDefaultPerspectives) {
    table.createDefaultRecordPerspective();
    table.createDefaultDimensionPerspective();
  }
  if (loadDataParameters.isMinDefined()) {
    table.getMetaData().setMin(loadDataParameters.getMin());
  }
  if (loadDataParameters.isMaxDefined()) {
    table.getMetaData().setMax(loadDataParameters.getMax());
  }
  boolean isSetHomogeneous=loadDataParameters.isDataHomogeneous();
  if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.NORMAL,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG10,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG2,isSetHomogeneous);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
  return table;
}",0.9560591133004926
57841,"private final void initDataPerspectiveChoosers(Composite parent){
  if (dataDomain != null) {
    possibleRecordPerspectives=dataDomain.getRecordPerspectiveIDs().toArray(new String[0]);
    possibleDimensionPerspectives=dataDomain.getDimensionPerspectiveIDs().toArray(new String[0]);
  }
 else {
    possibleRecordPerspectives=new String[]{""String_Node_Str""};
    possibleDimensionPerspectives=new String[]{""String_Node_Str""};
  }
  recordPerspectiveChooser.removeAll();
  for (int index=0; index < possibleRecordPerspectives.length; index++) {
    String possibleDataPerspective=possibleRecordPerspectives[index];
    recordPerspectiveChooser.add(possibleDataPerspective,index);
  }
  dimensionPerspectiveChooser.removeAll();
  for (int index=0; index < possibleDimensionPerspectives.length; index++) {
    String possibleDataPerspective=possibleDimensionPerspectives[index];
    dimensionPerspectiveChooser.add(possibleDataPerspective,index);
  }
  if (dataDomain == null) {
    recordPerspectiveChooser.setEnabled(false);
    dimensionPerspectiveChooser.setEnabled(false);
  }
 else {
    selectRecordPerspective(0);
    recordPerspectiveChooser.select(0);
    selectDimensionPerspective(0);
    dimensionPerspectiveChooser.select(0);
    recordPerspectiveChooser.setEnabled(true);
    dimensionPerspectiveChooser.setEnabled(true);
  }
}","private final void initDataPerspectiveChoosers(Composite parent){
  if (dataDomain != null) {
    possibleRecordPerspectives=dataDomain.getRecordPerspectiveIDs().toArray(new String[0]);
    possibleDimensionPerspectives=dataDomain.getDimensionPerspectiveIDs().toArray(new String[0]);
  }
 else {
    possibleRecordPerspectives=new String[]{""String_Node_Str""};
    possibleDimensionPerspectives=new String[]{""String_Node_Str""};
  }
  recordPerspectiveChooser.removeAll();
  for (int index=0; index < possibleRecordPerspectives.length; index++) {
    String possibleDataPerspective=possibleRecordPerspectives[index];
    String recordPerspectiveLabel=dataDomain.getTable().getRecordPerspective(possibleDataPerspective).getLabel();
    recordPerspectiveChooser.add(recordPerspectiveLabel,index);
  }
  dimensionPerspectiveChooser.removeAll();
  for (int index=0; index < possibleDimensionPerspectives.length; index++) {
    String possibleDataPerspective=possibleDimensionPerspectives[index];
    String dimensionPerspectiveLabel=dataDomain.getTable().getDimensionPerspective(possibleDataPerspective).getLabel();
    dimensionPerspectiveChooser.add(dimensionPerspectiveLabel,index);
  }
  if (dataDomain == null) {
    recordPerspectiveChooser.setEnabled(false);
    dimensionPerspectiveChooser.setEnabled(false);
  }
 else {
    selectRecordPerspective(0);
    recordPerspectiveChooser.select(0);
    selectDimensionPerspective(0);
    dimensionPerspectiveChooser.select(0);
    recordPerspectiveChooser.setEnabled(true);
    dimensionPerspectiveChooser.setEnabled(true);
  }
}",0.8878216123499142
57842,protected abstract void initIDMappings();,"/** 
 * Load ID mappings in concrete implementing classes. This is called by   {@link #init()}.
 */
protected abstract void initIDMappings();",0.4505494505494505
57843,"public ADataDomain(String dataDomainType,String dataDomainID){
  this.dataDomainType=dataDomainType;
  this.dataDomainID=dataDomainID;
  initIDMappings();
}","public ADataDomain(String dataDomainType,String dataDomainID){
  this.dataDomainType=dataDomainType;
  this.dataDomainID=dataDomainID;
}",0.9315068493150684
57844,"public String getDimensionLabel(IDType idType,Object id){
  String label=dimensionIDMappingManager.getID(idType,humanReadableDimensionIDType,id);
  if (label == null)   label=""String_Node_Str"";
  return label;
}","public String getDimensionLabel(IDType idType,Object id){
  Set<String> ids=dimensionIDMappingManager.getIDAsSet(idType,humanReadableDimensionIDType,id);
  String label=""String_Node_Str"";
  if (ids != null && ids.size() > 0) {
    label=ids.iterator().next();
  }
  return label;
}",0.6747967479674797
57845,"private void init(){
  assignIDCategories();
  if (recordIDCategory == null || dimensionIDCategory == null) {
    throw new IllegalStateException(""String_Node_Str"" + toString() + ""String_Node_Str""+ recordIDCategory+ ""String_Node_Str""+ dimensionIDCategory);
  }
  recordIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory);
  dimensionIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory);
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EDimensionType.INT);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EDimensionType.INT);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EDimensionType.INT);
  recordSelectionManager=new RecordSelectionManager(recordIDMappingManager,recordIDType);
  dimensionSelectionManager=new DimensionSelectionManager(dimensionIDMappingManager,dimensionIDType);
  recordGroupSelectionManager=new SelectionManager(recordGroupIDType);
}","@Override public void init(){
  super.init();
  assignIDCategories();
  if (recordIDCategory == null || dimensionIDCategory == null) {
    throw new IllegalStateException(""String_Node_Str"" + toString() + ""String_Node_Str""+ recordIDCategory+ ""String_Node_Str""+ dimensionIDCategory);
  }
  recordIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(recordIDCategory);
  dimensionIDMappingManager=IDMappingManagerRegistry.get().getIDMappingManager(dimensionIDCategory);
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordIDType.setInternalType(true);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,EColumnType.INT);
  dimensionIDType.setInternalType(true);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,EColumnType.INT);
  recordGroupIDType.setInternalType(true);
  recordSelectionManager=new RecordSelectionManager(recordIDMappingManager,recordIDType);
  dimensionSelectionManager=new DimensionSelectionManager(dimensionIDMappingManager,dimensionIDType);
  recordGroupSelectionManager=new SelectionManager(recordGroupIDType);
}",0.9185185185185184
57846,"public String getRecordLabel(IDType idType,Object id){
  Set<String> ids=recordIDMappingManager.getIDAsSet(idType,humanReadableRecordIDType,id);
  String resolvedID=""String_Node_Str"";
  if (ids != null && ids.size() > 0) {
    resolvedID=ids.iterator().next();
  }
  return resolvedID;
}","public String getRecordLabel(IDType idType,Object id){
  Set<String> ids=recordIDMappingManager.getIDAsSet(idType,humanReadableRecordIDType,id);
  String label=""String_Node_Str"";
  if (ids != null && ids.size() > 0) {
    label=ids.iterator().next();
  }
  return label;
}",0.9194991055456172
57847,"public ATableBasedDataDomain(String dataDomainType,String dataDomainID){
  super(dataDomainType,dataDomainID);
  init();
}","public ATableBasedDataDomain(String dataDomainType,String dataDomainID){
  super(dataDomainType,dataDomainID);
}",0.9572649572649572
57848,"/** 
 * Initiates clustering based on the parameters passed. Sends out an event to all affected views upon positive completion to replace their VA.
 * @param tableID ID of the set to cluster
 * @param clusterState
 */
public void startClustering(ClusterConfiguration clusterState){
  ClusterManager clusterManager=new ClusterManager(this);
  ClusterResult result=clusterManager.cluster(clusterState);
  if (clusterState.getClustererType() == ClustererType.DIMENSION_CLUSTERING || clusterState.getClustererType() == ClustererType.BI_CLUSTERING) {
    PerspectiveInitializationData dimensionResult=result.getDimensionResult();
    DimensionPerspective dimensionPerspective=clusterState.getTargetDimensionPerspective();
    dimensionPerspective.init(dimensionResult);
    eventPublisher.triggerEvent(new DimensionVAUpdateEvent(dataDomainID,dimensionPerspective.getPerspectiveID(),this));
  }
  if (clusterState.getClustererType() == ClustererType.RECORD_CLUSTERING || clusterState.getClustererType() == ClustererType.BI_CLUSTERING) {
    PerspectiveInitializationData recordResult=result.getRecordResult();
    RecordPerspective recordPerspective=clusterState.getTargetRecordPerspective();
    recordPerspective.init(recordResult);
    eventPublisher.triggerEvent(new RecordVAUpdateEvent(dataDomainID,recordPerspective.getPerspectiveID(),this));
  }
}","/** 
 * Initiates clustering based on the parameters passed. Sends out an event to all affected views upon positive completion to replace their VA.
 * @param tableID ID of the set to cluster
 * @param clusterState
 */
public void startClustering(ClusterConfiguration clusterState){
  ClusterManager clusterManager=new ClusterManager(this);
  ClusterResult result=clusterManager.cluster(clusterState);
  if (result == null)   return;
  if (clusterState.getClustererType() == ClustererType.DIMENSION_CLUSTERING || clusterState.getClustererType() == ClustererType.BI_CLUSTERING) {
    PerspectiveInitializationData dimensionResult=result.getDimensionResult();
    DimensionPerspective dimensionPerspective=clusterState.getTargetDimensionPerspective();
    dimensionPerspective.init(dimensionResult);
    eventPublisher.triggerEvent(new DimensionVAUpdateEvent(dataDomainID,dimensionPerspective.getPerspectiveID(),this));
  }
  if (clusterState.getClustererType() == ClustererType.RECORD_CLUSTERING || clusterState.getClustererType() == ClustererType.BI_CLUSTERING) {
    PerspectiveInitializationData recordResult=result.getRecordResult();
    RecordPerspective recordPerspective=clusterState.getTargetRecordPerspective();
    recordPerspective.init(recordResult);
    eventPublisher.triggerEvent(new RecordVAUpdateEvent(dataDomainID,recordPerspective.getPerspectiveID(),this));
  }
}",0.9882697947214076
57849,"private void loadPluginData(String dirName) throws JAXBException, BundleException {
  JAXBContext context;
  PlugInList plugInList=null;
  context=JAXBContext.newInstance(PlugInList.class);
  Unmarshaller unmarshaller=context.createUnmarshaller();
  File pluginFile=new File(dirName + ProjectSaver.PLUG_IN_LIST_FILE);
  if (!pluginFile.exists()) {
    Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str"" + pluginFile));
    return;
  }
  plugInList=(PlugInList)unmarshaller.unmarshal(pluginFile);
  ArrayList<String> plugIns=plugInList.plugIns;
  for (  String plugIn : plugIns) {
    Bundle bundle=Platform.getBundle(plugIn);
    if (bundle == null) {
      Logger.log(new Status(IStatus.WARNING,toString(),""String_Node_Str"" + bundle));
      continue;
    }
    bundle.start();
  }
}","private void loadPluginData(String dirName) throws JAXBException, BundleException {
  JAXBContext context;
  PlugInList plugInList=null;
  context=JAXBContext.newInstance(PlugInList.class);
  Unmarshaller unmarshaller=context.createUnmarshaller();
  File pluginFile=new File(dirName + ProjectSaver.PLUG_IN_LIST_FILE);
  if (!pluginFile.exists()) {
    Logger.log(new Status(Status.INFO,this.toString(),""String_Node_Str"" + pluginFile));
    return;
  }
  plugInList=(PlugInList)unmarshaller.unmarshal(pluginFile);
  ArrayList<String> plugIns=plugInList.plugIns;
  for (  String plugIn : plugIns) {
    Bundle bundle=Platform.getBundle(plugIn);
    if (bundle == null) {
      Logger.log(new Status(IStatus.WARNING,toString(),""String_Node_Str"" + plugIn));
      continue;
    }
    bundle.start();
  }
}",0.9425717852684145
57850,"public ADataDomain(String dataDomainType,String dataDomainID){
  this.dataDomainType=dataDomainType;
  this.dataDomainID=dataDomainID;
}","public ADataDomain(String dataDomainType,String dataDomainID){
  this.dataDomainType=dataDomainType;
  this.dataDomainID=dataDomainID;
  System.out.println(""String_Node_Str"" + this);
}",0.85
57851,"/** 
 * Returns the IDType for the typeName specified, or null if no such type is registered 
 */
public static IDType getIDType(String typeName){
  return registeredTypes.get(typeName);
}","/** 
 * Returns the IDType for the typeName specified, or null if no such type is registered 
 */
public static IDType getIDType(String typeName){
  IDType requestedType=registeredTypes.get(typeName);
  if (requestedType == null)   throw new IllegalStateException(""String_Node_Str"" + typeName + ""String_Node_Str"");
  return requestedType;
}",0.6856060606060606
57852,"/** 
 * Returns the   {@link IDMappingManager} for the {@link IDCategory} specified. If no such{@link IDMappingManager} exists, a new one is created and registered.
 * @param idCategory
 * @return
 */
public IDMappingManager getIDMappingManager(IDCategory idCategory){
  if (!hashIDMappingManagers.containsKey(idCategory)) {
    hashIDMappingManagers.put(idCategory,new IDMappingManager(idCategory));
  }
  return hashIDMappingManagers.get(idCategory);
}","/** 
 * Returns the   {@link IDMappingManager} for the {@link IDCategory} specified. If no such{@link IDMappingManager} exists, a new one is created and registered.
 * @param idCategory
 * @return
 */
public IDMappingManager getIDMappingManager(IDCategory idCategory){
  if (idCategory == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (!hashIDMappingManagers.containsKey(idCategory)) {
    hashIDMappingManagers.put(idCategory,new IDMappingManager(idCategory));
  }
  return hashIDMappingManagers.get(idCategory);
}",0.9162462159434914
57853,"/** 
 * <p> Returns the cluster tree showing the relations between the elements indexed by the virtual array. </p> <p> Depending on whether or not a cluster tree has been set, this method either returns a tree with real relations, or a tree with one root and all leafs as children of the root (the default tree). You can check whether the tree is the default tree using   {@link #isTreeDefaultTree()}. </p>
 * @return
 */
@XmlTransient public ClusterTree getTree(){
  return tree;
}","/** 
 * <p> Returns the cluster tree showing the relations between the elements indexed by the virtual array. </p> <p> Depending on whether or not a cluster tree has been set, this method either returns a tree with real relations, or a tree with one root and all leafs as children of the root (the default tree). You can check whether the tree is the default tree using   {@link #isTreeDefaultTree()}. </p>
 * @return
 */
@XmlTransient public ClusterTree getTree(){
  if (tree == null)   createDefaultTree();
  return tree;
}",0.93545183714002
57854,"private SerializationData loadData(String dirName) throws IOException, JAXBException {
  SerializationData serializationData=null;
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  Unmarshaller unmarshaller=projectContext.createUnmarshaller();
  GeneralManager.get().setBasicInfo((BasicInformation)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.BASIC_INFORMATION_FILE)));
  DataDomainList dataDomainList;
  dataDomainList=(DataDomainList)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.DATA_DOMAIN_FILE));
  serializationData=new SerializationData();
  for (  ADataDomain dataDomain : dataDomainList.getDataDomains()) {
    DataDomainManager.get().register(dataDomain);
    dataDomain.init();
    Thread thread=new Thread(dataDomain,dataDomain.getDataDomainID());
    thread.start();
    if (dataDomain instanceof ATableBasedDataDomain) {
      String extendedDirName=dirName + dataDomain.getDataDomainID() + ""String_Node_Str"";
      dataDomain.setFileName(extendedDirName + ProjectSaver.DATA_TABLE_FILE);
      dataDomain.getLoadDataParameters().setFileName(extendedDirName + ProjectSaver.DATA_TABLE_FILE);
      DataDomainSerializationData dataInitializationData=new DataDomainSerializationData();
      dataInitializationData.setDataDomain((ATableBasedDataDomain)dataDomain);
      HashMap<String,RecordPerspective> recordPerspectives=new HashMap<String,RecordPerspective>();
      for (      String recordPerspectiveID : ((ATableBasedDataDomain)dataDomain).getRecordPerspectiveIDs()) {
        RecordPerspective recordPerspective=(RecordPerspective)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(extendedDirName + recordPerspectiveID + ""String_Node_Str""));
        recordPerspective.setIDType(((ATableBasedDataDomain)dataDomain).getRecordIDType());
        recordPerspectives.put(recordPerspectiveID,recordPerspective);
        if (!recordPerspective.isTreeDefaultTree()) {
          ClusterTree tree=loadTree(extendedDirName + recordPerspectiveID + ""String_Node_Str"",((ATableBasedDataDomain)dataDomain).getRecordIDType());
          recordPerspective.setTree(tree);
        }
      }
      dataInitializationData.setRecordPerspectiveMap(recordPerspectives);
      HashMap<String,DimensionPerspective> dimensionPerspectives=new HashMap<String,DimensionPerspective>();
      for (      String dimensionPerspectiveID : ((ATableBasedDataDomain)dataDomain).getDimensionPerspectiveIDs()) {
        DimensionPerspective dimensionPerspective=(DimensionPerspective)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(extendedDirName + dimensionPerspectiveID + ""String_Node_Str""));
        dimensionPerspective.setIDType(((ATableBasedDataDomain)dataDomain).getDimensionIDType());
        dimensionPerspectives.put(dimensionPerspectiveID,dimensionPerspective);
        if (!dimensionPerspective.isTreeDefaultTree()) {
          ClusterTree tree=loadTree(extendedDirName + dimensionPerspectiveID + ""String_Node_Str"",((ATableBasedDataDomain)dataDomain).getDimensionIDType());
          dimensionPerspective.setTree(tree);
        }
      }
      dataInitializationData.setDimensionPerspectiveMap(dimensionPerspectives);
      serializationData.addDataDomainSerializationData(dataInitializationData);
    }
  }
  return serializationData;
}","private SerializationData loadData(String dirName) throws IOException, JAXBException {
  SerializationData serializationData=null;
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  Unmarshaller unmarshaller=projectContext.createUnmarshaller();
  GeneralManager.get().setBasicInfo((BasicInformation)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.BASIC_INFORMATION_FILE)));
  DataDomainList dataDomainList;
  dataDomainList=(DataDomainList)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.DATA_DOMAIN_FILE));
  serializationData=new SerializationData();
  for (  ADataDomain dataDomain : dataDomainList.getDataDomains()) {
    DataDomainManager.get().register(dataDomain);
    dataDomain.init();
    Thread thread=new Thread(dataDomain,dataDomain.getDataDomainID());
    thread.start();
    if (dataDomain instanceof ATableBasedDataDomain) {
      String extendedDirName=dirName + dataDomain.getDataDomainID() + ""String_Node_Str"";
      dataDomain.setFileName(extendedDirName + ProjectSaver.DATA_TABLE_FILE);
      dataDomain.getLoadDataParameters().setFileName(extendedDirName + ProjectSaver.DATA_TABLE_FILE);
      DataDomainSerializationData dataInitializationData=new DataDomainSerializationData();
      dataInitializationData.setDataDomain((ATableBasedDataDomain)dataDomain);
      HashMap<String,RecordPerspective> recordPerspectives=new HashMap<String,RecordPerspective>();
      for (      String recordPerspectiveID : ((ATableBasedDataDomain)dataDomain).getRecordPerspectiveIDs()) {
        RecordPerspective recordPerspective=(RecordPerspective)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(extendedDirName + recordPerspectiveID + ""String_Node_Str""));
        recordPerspective.setDataDomain((ATableBasedDataDomain)dataDomain);
        recordPerspective.setIDType(((ATableBasedDataDomain)dataDomain).getRecordIDType());
        recordPerspectives.put(recordPerspectiveID,recordPerspective);
        if (!recordPerspective.isTreeDefaultTree()) {
          ClusterTree tree=loadTree(extendedDirName + recordPerspectiveID + ""String_Node_Str"",((ATableBasedDataDomain)dataDomain).getRecordIDType());
          recordPerspective.setTree(tree);
        }
      }
      dataInitializationData.setRecordPerspectiveMap(recordPerspectives);
      HashMap<String,DimensionPerspective> dimensionPerspectives=new HashMap<String,DimensionPerspective>();
      for (      String dimensionPerspectiveID : ((ATableBasedDataDomain)dataDomain).getDimensionPerspectiveIDs()) {
        DimensionPerspective dimensionPerspective=(DimensionPerspective)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(extendedDirName + dimensionPerspectiveID + ""String_Node_Str""));
        dimensionPerspective.setDataDomain((ATableBasedDataDomain)dataDomain);
        dimensionPerspective.setIDType(((ATableBasedDataDomain)dataDomain).getDimensionIDType());
        dimensionPerspectives.put(dimensionPerspectiveID,dimensionPerspective);
        if (!dimensionPerspective.isTreeDefaultTree()) {
          ClusterTree tree=loadTree(extendedDirName + dimensionPerspectiveID + ""String_Node_Str"",((ATableBasedDataDomain)dataDomain).getDimensionIDType());
          dimensionPerspective.setTree(tree);
        }
      }
      dataInitializationData.setDimensionPerspectiveMap(dimensionPerspectives);
      serializationData.addDataDomainSerializationData(dataInitializationData);
    }
  }
  return serializationData;
}",0.978348931415002
57855,"public String getRecordLabel(IDType idType,Object id){
  String resolvedID=recordIDMappingManager.getID(idType,humanReadableRecordIDType,id);
  return resolvedID;
}","public String getRecordLabel(IDType idType,Object id){
  Set<String> ids=recordIDMappingManager.getIDAsSet(idType,humanReadableRecordIDType,id);
  String resolvedID=""String_Node_Str"";
  if (ids != null && ids.size() > 0) {
    resolvedID=ids.iterator().next();
  }
  return resolvedID;
}",0.6208425720620843
57856,"/** 
 * @param isColumnDimension setter, see {@link #isColumnDimension}
 */
public void setColumnDimension(boolean isColumnDimension){
  this.isColumnDimension=isColumnDimension;
}","/** 
 * @param isColumnDimension setter, see  {@link #isColumnDimension}
 */
public void setColumnDimension(boolean isColumnDimension){
  this.isColumnDimension=isColumnDimension;
}",0.997229916897507
57857,"protected void renderVerticalBand(GL2 gl,IDataGraphNode bottomNode,IDataGraphNode topNode,IEdgeRoutingStrategy edgeRoutingStrategy,ConnectionBandRenderer connectionBandRenderer,Color color){
  Point2D positionBottom=bottomNode.getPosition();
  Point2D positionTop=topNode.getPosition();
  float spacingY=(float)((positionTop.getY() - topNode.getHeight() / 2.0f) - (positionBottom.getY() + bottomNode.getHeight() / 2.0f));
  float deltaX=(float)(positionBottom.getX() - positionTop.getX());
  ArrayList<Point2D> edgePoints=new ArrayList<Point2D>();
  Pair<Point2D,Point2D> anchorPointsBottom=bottomNode.getTopAnchorPoints();
  Pair<Point2D,Point2D> anchorPointsTop=topNode.getBottomAnchorPoints();
  float ratioX=deltaX / viewFrustum.getWidth();
  float bottomEdgeAnchorX=(float)positionBottom.getX() - ratioX * bottomNode.getWidth() / 2.0f;
  float bottomEdgeAnchorY=(float)(anchorPointsBottom.getFirst().getY() + Math.min(0.2f * spacingY,pixelGLConverter.getGLHeightForPixelHeight(MAX_NODE_EDGE_ANCHOR_DISTANCE_PIXELS)));
  Point2D edgeAnchorPointBottom=new Point2D.Float(bottomEdgeAnchorX,bottomEdgeAnchorY);
  float topEdgeAnchorX=(float)positionTop.getX() + ratioX * topNode.getWidth() / 2.0f;
  float topEdgeAnchorY=(float)(anchorPointsTop.getFirst().getY() - Math.min(0.2f * spacingY,pixelGLConverter.getGLHeightForPixelHeight(MAX_NODE_EDGE_ANCHOR_DISTANCE_PIXELS)));
  Point2D edgeAnchorPointTop=new Point2D.Float(topEdgeAnchorX,topEdgeAnchorY);
  edgePoints.add(edgeAnchorPointBottom);
  edgePoints.add(edgeAnchorPointTop);
  edgeRoutingStrategy.createEdge(edgePoints);
  Point2D edgeRoutingHelperPointBottom=new Point2D.Float((float)edgeAnchorPointBottom.getX(),(float)anchorPointsBottom.getFirst().getY());
  Point2D edgeRoutingHelperPointTop=new Point2D.Float((float)edgeAnchorPointTop.getX(),(float)anchorPointsTop.getFirst().getY());
  edgePoints.add(edgeRoutingHelperPointTop);
  edgePoints.add(0,edgeRoutingHelperPointBottom);
  float nodeEdgeAnchorSpacingBottom=(float)edgeAnchorPointBottom.getY() - (float)anchorPointsBottom.getFirst().getY();
  Pair<Point2D,Point2D> offsetAnchorPointsBottom=new Pair<Point2D,Point2D>();
  offsetAnchorPointsBottom.setFirst(new Point2D.Float((float)anchorPointsBottom.getFirst().getX(),(float)anchorPointsBottom.getFirst().getY() + 0.3f * nodeEdgeAnchorSpacingBottom));
  offsetAnchorPointsBottom.setSecond(new Point2D.Float((float)anchorPointsBottom.getSecond().getX(),(float)anchorPointsBottom.getSecond().getY() + 0.3f * nodeEdgeAnchorSpacingBottom));
  float nodeEdgeAnchorSpacingTop=(float)Math.abs(edgeAnchorPointTop.getY() - (float)anchorPointsTop.getFirst().getY());
  Pair<Point2D,Point2D> offsetAnchorPointsTop=new Pair<Point2D,Point2D>();
  offsetAnchorPointsTop.setFirst(new Point2D.Float((float)anchorPointsTop.getFirst().getX(),(float)anchorPointsTop.getFirst().getY() - 0.3f * nodeEdgeAnchorSpacingTop));
  offsetAnchorPointsTop.setSecond(new Point2D.Float((float)anchorPointsTop.getSecond().getX(),(float)anchorPointsTop.getSecond().getY() - 0.3f * nodeEdgeAnchorSpacingTop));
  List<Vec3f> bandPoints=connectionBandRenderer.calcInterpolatedBand(gl,edgePoints,20,pixelGLConverter);
  renderBand(gl,connectionBandRenderer,bandPoints,color);
  Point2D bandAnchorPoint1Bottom=new Point2D.Float(bandPoints.get(0).x(),bandPoints.get(0).y());
  Point2D bandAnchorPoint2Bottom=new Point2D.Float(bandPoints.get(bandPoints.size() - 1).x(),bandPoints.get(bandPoints.size() - 1).y());
  Pair<Point2D,Point2D> bandAnchorPointsBottom=new Pair<Point2D,Point2D>(bandAnchorPoint2Bottom,bandAnchorPoint1Bottom);
  float vecXPoint1Bottom=(float)bandAnchorPoint1Bottom.getX() - bandPoints.get(1).x();
  float vecYPoint1Bottom=(float)bandAnchorPoint1Bottom.getY() - bandPoints.get(1).y();
  float vecXPoint2Bottom=(float)bandAnchorPoint2Bottom.getX() - bandPoints.get(bandPoints.size() - 2).x();
  float vecYPoint2Bottom=(float)bandAnchorPoint2Bottom.getY() - bandPoints.get(bandPoints.size() - 2).y();
  Point2D bandOffsetAnchorPoint1Bottom=calcPointOnLineWithFixedY(bandAnchorPoint1Bottom,vecXPoint1Bottom,vecYPoint1Bottom,(float)offsetAnchorPointsBottom.getFirst().getY(),(float)offsetAnchorPointsBottom.getFirst().getX(),(float)offsetAnchorPointsBottom.getSecond().getX(),(float)offsetAnchorPointsBottom.getSecond().getX(),(float)offsetAnchorPointsBottom.getSecond().getX());
  Point2D bandOffsetAnchorPoint2Bottom=calcPointOnLineWithFixedY(bandAnchorPoint2Bottom,vecXPoint2Bottom,vecYPoint2Bottom,(float)offsetAnchorPointsBottom.getSecond().getY(),(float)offsetAnchorPointsBottom.getFirst().getX(),(float)offsetAnchorPointsBottom.getSecond().getX(),(float)offsetAnchorPointsBottom.getFirst().getX(),(float)offsetAnchorPointsBottom.getFirst().getX());
  Pair<Point2D,Point2D> bandOffsetAnchorPointsBottom=new Pair<Point2D,Point2D>(bandOffsetAnchorPoint2Bottom,bandOffsetAnchorPoint1Bottom);
  Point2D bandAnchorPoint1Top=new Point2D.Float(bandPoints.get(bandPoints.size() / 2 - 1).x(),bandPoints.get(bandPoints.size() / 2 - 1).y());
  Point2D bandAnchorPoint2Top=new Point2D.Float(bandPoints.get(bandPoints.size() / 2).x(),bandPoints.get(bandPoints.size() / 2).y());
  Pair<Point2D,Point2D> bandAnchorPointsTop=new Pair<Point2D,Point2D>(bandAnchorPoint2Top,bandAnchorPoint1Top);
  float vecXPoint1Top=(float)bandAnchorPoint1Top.getX() - bandPoints.get(bandPoints.size() / 2 - 2).x();
  float vecYPoint1Top=(float)bandAnchorPoint1Top.getY() - bandPoints.get(bandPoints.size() / 2 - 2).y();
  float vecXPoint2Top=(float)bandAnchorPoint2Top.getX() - bandPoints.get(bandPoints.size() / 2 + 1).x();
  float vecYPoint2Top=(float)bandAnchorPoint2Top.getY() - bandPoints.get(bandPoints.size() / 2 + 1).y();
  Point2D bandOffsetAnchorPoint1Top=calcPointOnLineWithFixedY(bandAnchorPoint1Top,vecXPoint1Top,vecYPoint1Top,(float)offsetAnchorPointsTop.getFirst().getY(),(float)offsetAnchorPointsTop.getFirst().getX(),(float)offsetAnchorPointsTop.getSecond().getX(),(float)offsetAnchorPointsTop.getSecond().getX(),(float)offsetAnchorPointsTop.getSecond().getX());
  Point2D bandOffsetAnchorPoint2Top=calcPointOnLineWithFixedY(bandAnchorPoint2Top,vecXPoint2Top,vecYPoint2Top,(float)offsetAnchorPointsTop.getSecond().getY(),(float)offsetAnchorPointsTop.getFirst().getX(),(float)offsetAnchorPointsTop.getSecond().getX(),(float)offsetAnchorPointsTop.getFirst().getX(),(float)offsetAnchorPointsTop.getFirst().getX());
  Pair<Point2D,Point2D> bandOffsetAnchorPointsTop=new Pair<Point2D,Point2D>(bandOffsetAnchorPoint2Top,bandOffsetAnchorPoint1Top);
  List<Pair<Point2D,Point2D>> bottomBandConnectionPoints=new ArrayList<Pair<Point2D,Point2D>>();
  bottomBandConnectionPoints.add(anchorPointsBottom);
  bottomBandConnectionPoints.add(offsetAnchorPointsBottom);
  bottomBandConnectionPoints.add(bandOffsetAnchorPointsBottom);
  bottomBandConnectionPoints.add(bandAnchorPointsBottom);
  List<Pair<Point2D,Point2D>> topBandConnectionPoints=new ArrayList<Pair<Point2D,Point2D>>();
  topBandConnectionPoints.add(anchorPointsTop);
  topBandConnectionPoints.add(offsetAnchorPointsTop);
  topBandConnectionPoints.add(bandOffsetAnchorPointsTop);
  topBandConnectionPoints.add(bandAnchorPointsTop);
  connectionBandRenderer.renderComplexBand(gl,bottomBandConnectionPoints,false,color.getRGB(),0.5f);
  connectionBandRenderer.renderComplexBand(gl,topBandConnectionPoints,false,new float[]{(251f / 255f),(128f / 255f),(114f / 255f)},0.5f);
}","protected void renderVerticalBand(GL2 gl,IDataGraphNode bottomNode,IDataGraphNode topNode,IEdgeRoutingStrategy edgeRoutingStrategy,ConnectionBandRenderer connectionBandRenderer,Color color){
  Point2D positionBottom=bottomNode.getPosition();
  Point2D positionTop=topNode.getPosition();
  float spacingY=(float)((positionTop.getY() - topNode.getHeight() / 2.0f) - (positionBottom.getY() + bottomNode.getHeight() / 2.0f));
  float deltaX=(float)(positionBottom.getX() - positionTop.getX());
  ArrayList<Point2D> edgePoints=new ArrayList<Point2D>();
  Pair<Point2D,Point2D> anchorPointsBottom=bottomNode.getTopAnchorPoints();
  Pair<Point2D,Point2D> anchorPointsTop=topNode.getBottomAnchorPoints();
  float ratioX=deltaX / viewFrustum.getWidth();
  float bottomEdgeAnchorX=(float)positionBottom.getX() - ratioX * bottomNode.getWidth() / 2.0f;
  float bottomEdgeAnchorY=(float)(anchorPointsBottom.getFirst().getY() + Math.min(0.2f * spacingY,pixelGLConverter.getGLHeightForPixelHeight(MAX_NODE_EDGE_ANCHOR_DISTANCE_PIXELS)));
  Point2D edgeAnchorPointBottom=new Point2D.Float(bottomEdgeAnchorX,bottomEdgeAnchorY);
  float topEdgeAnchorX=(float)positionTop.getX() + ratioX * topNode.getWidth() / 2.0f;
  float topEdgeAnchorY=(float)(anchorPointsTop.getFirst().getY() - Math.min(0.2f * spacingY,pixelGLConverter.getGLHeightForPixelHeight(MAX_NODE_EDGE_ANCHOR_DISTANCE_PIXELS)));
  Point2D edgeAnchorPointTop=new Point2D.Float(topEdgeAnchorX,topEdgeAnchorY);
  edgePoints.add(edgeAnchorPointBottom);
  edgePoints.add(edgeAnchorPointTop);
  edgeRoutingStrategy.createEdge(edgePoints);
  Point2D edgeRoutingHelperPointBottom=new Point2D.Float((float)edgeAnchorPointBottom.getX(),(float)anchorPointsBottom.getFirst().getY());
  Point2D edgeRoutingHelperPointTop=new Point2D.Float((float)edgeAnchorPointTop.getX(),(float)anchorPointsTop.getFirst().getY());
  edgePoints.add(edgeRoutingHelperPointTop);
  edgePoints.add(0,edgeRoutingHelperPointBottom);
  float nodeEdgeAnchorSpacingBottom=(float)edgeAnchorPointBottom.getY() - (float)anchorPointsBottom.getFirst().getY();
  Pair<Point2D,Point2D> offsetAnchorPointsBottom=new Pair<Point2D,Point2D>();
  offsetAnchorPointsBottom.setFirst(new Point2D.Float((float)anchorPointsBottom.getFirst().getX(),(float)anchorPointsBottom.getFirst().getY() + 0.3f * nodeEdgeAnchorSpacingBottom));
  offsetAnchorPointsBottom.setSecond(new Point2D.Float((float)anchorPointsBottom.getSecond().getX(),(float)anchorPointsBottom.getSecond().getY() + 0.3f * nodeEdgeAnchorSpacingBottom));
  float nodeEdgeAnchorSpacingTop=(float)Math.abs(edgeAnchorPointTop.getY() - (float)anchorPointsTop.getFirst().getY());
  Pair<Point2D,Point2D> offsetAnchorPointsTop=new Pair<Point2D,Point2D>();
  offsetAnchorPointsTop.setFirst(new Point2D.Float((float)anchorPointsTop.getFirst().getX(),(float)anchorPointsTop.getFirst().getY() - 0.3f * nodeEdgeAnchorSpacingTop));
  offsetAnchorPointsTop.setSecond(new Point2D.Float((float)anchorPointsTop.getSecond().getX(),(float)anchorPointsTop.getSecond().getY() - 0.3f * nodeEdgeAnchorSpacingTop));
  List<Vec3f> bandPoints=connectionBandRenderer.calcInterpolatedBand(gl,edgePoints,20,pixelGLConverter);
  renderBand(gl,connectionBandRenderer,bandPoints,color);
  Point2D bandAnchorPoint1Bottom=new Point2D.Float(bandPoints.get(0).x(),bandPoints.get(0).y());
  Point2D bandAnchorPoint2Bottom=new Point2D.Float(bandPoints.get(bandPoints.size() - 1).x(),bandPoints.get(bandPoints.size() - 1).y());
  Pair<Point2D,Point2D> bandAnchorPointsBottom=new Pair<Point2D,Point2D>(bandAnchorPoint2Bottom,bandAnchorPoint1Bottom);
  float vecXPoint1Bottom=(float)bandAnchorPoint1Bottom.getX() - bandPoints.get(1).x();
  float vecYPoint1Bottom=(float)bandAnchorPoint1Bottom.getY() - bandPoints.get(1).y();
  float vecXPoint2Bottom=(float)bandAnchorPoint2Bottom.getX() - bandPoints.get(bandPoints.size() - 2).x();
  float vecYPoint2Bottom=(float)bandAnchorPoint2Bottom.getY() - bandPoints.get(bandPoints.size() - 2).y();
  Point2D bandOffsetAnchorPoint1Bottom=calcPointOnLineWithFixedY(bandAnchorPoint1Bottom,vecXPoint1Bottom,vecYPoint1Bottom,(float)offsetAnchorPointsBottom.getFirst().getY(),(float)offsetAnchorPointsBottom.getFirst().getX(),(float)offsetAnchorPointsBottom.getSecond().getX(),(float)offsetAnchorPointsBottom.getSecond().getX(),(float)offsetAnchorPointsBottom.getSecond().getX());
  Point2D bandOffsetAnchorPoint2Bottom=calcPointOnLineWithFixedY(bandAnchorPoint2Bottom,vecXPoint2Bottom,vecYPoint2Bottom,(float)offsetAnchorPointsBottom.getSecond().getY(),(float)offsetAnchorPointsBottom.getFirst().getX(),(float)offsetAnchorPointsBottom.getSecond().getX(),(float)offsetAnchorPointsBottom.getFirst().getX(),(float)offsetAnchorPointsBottom.getFirst().getX());
  Pair<Point2D,Point2D> bandOffsetAnchorPointsBottom=new Pair<Point2D,Point2D>(bandOffsetAnchorPoint2Bottom,bandOffsetAnchorPoint1Bottom);
  Point2D bandAnchorPoint1Top=new Point2D.Float(bandPoints.get(bandPoints.size() / 2 - 1).x(),bandPoints.get(bandPoints.size() / 2 - 1).y());
  Point2D bandAnchorPoint2Top=new Point2D.Float(bandPoints.get(bandPoints.size() / 2).x(),bandPoints.get(bandPoints.size() / 2).y());
  Pair<Point2D,Point2D> bandAnchorPointsTop=new Pair<Point2D,Point2D>(bandAnchorPoint2Top,bandAnchorPoint1Top);
  float vecXPoint1Top=(float)bandAnchorPoint1Top.getX() - bandPoints.get(bandPoints.size() / 2 - 2).x();
  float vecYPoint1Top=(float)bandAnchorPoint1Top.getY() - bandPoints.get(bandPoints.size() / 2 - 2).y();
  float vecXPoint2Top=(float)bandAnchorPoint2Top.getX() - bandPoints.get(bandPoints.size() / 2 + 1).x();
  float vecYPoint2Top=(float)bandAnchorPoint2Top.getY() - bandPoints.get(bandPoints.size() / 2 + 1).y();
  Point2D bandOffsetAnchorPoint1Top=calcPointOnLineWithFixedY(bandAnchorPoint1Top,vecXPoint1Top,vecYPoint1Top,(float)offsetAnchorPointsTop.getFirst().getY(),(float)offsetAnchorPointsTop.getFirst().getX(),(float)offsetAnchorPointsTop.getSecond().getX(),(float)offsetAnchorPointsTop.getSecond().getX(),(float)offsetAnchorPointsTop.getSecond().getX());
  Point2D bandOffsetAnchorPoint2Top=calcPointOnLineWithFixedY(bandAnchorPoint2Top,vecXPoint2Top,vecYPoint2Top,(float)offsetAnchorPointsTop.getSecond().getY(),(float)offsetAnchorPointsTop.getFirst().getX(),(float)offsetAnchorPointsTop.getSecond().getX(),(float)offsetAnchorPointsTop.getFirst().getX(),(float)offsetAnchorPointsTop.getFirst().getX());
  Pair<Point2D,Point2D> bandOffsetAnchorPointsTop=new Pair<Point2D,Point2D>(bandOffsetAnchorPoint2Top,bandOffsetAnchorPoint1Top);
  List<Pair<Point2D,Point2D>> bottomBandConnectionPoints=new ArrayList<Pair<Point2D,Point2D>>();
  bottomBandConnectionPoints.add(anchorPointsBottom);
  bottomBandConnectionPoints.add(offsetAnchorPointsBottom);
  bottomBandConnectionPoints.add(bandOffsetAnchorPointsBottom);
  bottomBandConnectionPoints.add(bandAnchorPointsBottom);
  List<Pair<Point2D,Point2D>> topBandConnectionPoints=new ArrayList<Pair<Point2D,Point2D>>();
  topBandConnectionPoints.add(anchorPointsTop);
  topBandConnectionPoints.add(offsetAnchorPointsTop);
  topBandConnectionPoints.add(bandOffsetAnchorPointsTop);
  topBandConnectionPoints.add(bandAnchorPointsTop);
  connectionBandRenderer.renderComplexBand(gl,bottomBandConnectionPoints,false,color.getRGB(),0.5f);
  connectionBandRenderer.renderComplexBand(gl,topBandConnectionPoints,false,color.getRGB(),0.5f);
}",0.995366584900518
57858,"/** 
 * Generic method for   {@link #getRecordPerspectiveCandidates(DataTable,boolean)} and{@link #getDimensionPerspectiveCandidates(DataTable,boolean)}
 * @param table
 * @param considerOnlyPublic
 * @param isRecord
 * @return
 */
private static ArrayList<String> getPerspectiveCandidates(DataTable table,boolean considerOnlyPublic,boolean isRecord){
  Set<String> dataPerspectiveIDs;
  if (isRecord)   dataPerspectiveIDs=table.getRecordPerspectiveIDs();
 else   dataPerspectiveIDs=table.getDimensionPerspectiveIDs();
  ArrayList<String> candidates=new ArrayList<String>(dataPerspectiveIDs);
  if (!considerOnlyPublic)   return candidates;
 else {
    Iterator<String> iterator=candidates.iterator();
    while (iterator.hasNext()) {
      String tempPerspectiveID=iterator.next();
      DataPerspective<?,?,?,?> perspective;
      if (isRecord)       perspective=table.getRecordPerspective(tempPerspectiveID);
 else       perspective=table.getDimensionPerspective(tempPerspectiveID);
      if (!perspective.isPrivate()) {
        iterator.remove();
      }
    }
    return candidates;
  }
}","/** 
 * Generic method for   {@link #getRecordPerspectiveCandidates(DataTable,boolean)} and{@link #getDimensionPerspectiveCandidates(DataTable,boolean)}
 * @param table
 * @param considerOnlyPublic
 * @param isRecord
 * @return
 */
private static ArrayList<String> getPerspectiveCandidates(DataTable table,boolean considerOnlyPublic,boolean isRecord){
  Set<String> dataPerspectiveIDs;
  if (isRecord)   dataPerspectiveIDs=table.getRecordPerspectiveIDs();
 else   dataPerspectiveIDs=table.getDimensionPerspectiveIDs();
  ArrayList<String> candidates=new ArrayList<String>(dataPerspectiveIDs);
  if (!considerOnlyPublic)   return candidates;
 else {
    Iterator<String> iterator=candidates.iterator();
    while (iterator.hasNext()) {
      String tempPerspectiveID=iterator.next();
      ADataPerspective<?,?,?,?> perspective;
      if (isRecord)       perspective=table.getRecordPerspective(tempPerspectiveID);
 else       perspective=table.getDimensionPerspective(tempPerspectiveID);
      if (!perspective.isPrivate()) {
        iterator.remove();
      }
    }
    return candidates;
  }
}",0.9995427526291724
57859,"/** 
 * <p> Checks if there is only one   {@link RecordPerspective} from those registered with the {@link DataTable}a possible match considering the parameters. If so, this one match is returned, else null is returned. </p> <p> As   {@link DataPerspective}s can be either private or public (see  {@link DataPerspective#setIsPrivate(boolean)}, it is possible to let the chooser only chose from those that are public. </p>
 * @param table the data table from which to choose the available perspectives
 * @param considerOnlyPublic whether only public perspectives shall be used (true) or whether to also include private perspectives
 * @return the chosen perspectiveID if a unique ID could be identified, or null
 */
private static Collection<String> getRecordPerspectiveCandidates(DataTable table,boolean considerOnlyPublic){
  return getPerspectiveCandidates(table,considerOnlyPublic,true);
}","/** 
 * <p> Checks if there is only one   {@link RecordPerspective} from those registered with the {@link DataTable}a possible match considering the parameters. If so, this one match is returned, else null is returned. </p> <p> As   {@link ADataPerspective}s can be either private or public (see  {@link ADataPerspective#setIsPrivate(boolean)}, it is possible to let the chooser only chose from those that are public. </p>
 * @param table the data table from which to choose the available perspectives
 * @param considerOnlyPublic whether only public perspectives shall be used (true) or whether to also include private perspectives
 * @return the chosen perspectiveID if a unique ID could be identified, or null
 */
private static Collection<String> getRecordPerspectiveCandidates(DataTable table,boolean considerOnlyPublic){
  return getPerspectiveCandidates(table,considerOnlyPublic,true);
}",0.9988801791713324
57860,"/** 
 * Creates a new   {@link TableBasedDimensionGroupData} object with a new dataPerspective class. The newdataPerspective is created using the clusterNode (all leaves of the clusterNode eg are in the VA of the new perspective). Since nodes and trees are independent of the perspective's data type, we need the dataPersperctivClass parameter to tell us which perspective should be created.
 * @param dataDomain
 * @param recordPerspective
 * @param dimensionPerspective
 * @param rootNode
 * @param dataPerspectiveClass the class type of the newly generated perspective
 */
public TableBasedDimensionGroupData(ATableBasedDataDomain dataDomain,RecordPerspective recordPerspective,DimensionPerspective dimensionPerspective,ClusterNode rootNode,Class<? extends DataPerspective<?,?,?,?>> dataPerspectiveClass){
  super(dataDomain,recordPerspective,dimensionPerspective);
  label=rootNode.getLabel();
  if (dataPerspectiveClass.equals(RecordPerspective.class)) {
    this.recordPerspective=new RecordPerspective();
    this.recordPerspective.createVA(rootNode.getLeaveIds());
    this.recordPerspective.setTree((ClusterTree)rootNode.getTree());
    this.recordPerspective.setTreeRoot(rootNode);
    this.recordPerspective.finish();
    dataDomain.getTable().registerRecordPerspecive(recordPerspective);
  }
 else   if (dataPerspectiveClass.equals(DimensionPerspective.class)) {
    this.dimensionPerspective=new DimensionPerspective(dataDomain);
    this.dimensionPerspective.createVA(rootNode.getLeaveIds());
    this.dimensionPerspective.setTree((ClusterTree)rootNode.getTree());
    this.dimensionPerspective.setTreeRoot(rootNode);
    this.dimensionPerspective.finish();
    dataDomain.getTable().registerDimensionPerspective(this.dimensionPerspective);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + dataPerspectiveClass);
  }
}","/** 
 * Creates a new   {@link TableBasedDimensionGroupData} object with a new dataPerspective class. The newdataPerspective is created using the clusterNode (all leaves of the clusterNode eg are in the VA of the new perspective). Since nodes and trees are independent of the perspective's data type, we need the dataPersperctivClass parameter to tell us which perspective should be created.
 * @param dataDomain
 * @param recordPerspective
 * @param dimensionPerspective
 * @param rootNode
 * @param dataPerspectiveClass the class type of the newly generated perspective
 */
public TableBasedDimensionGroupData(ATableBasedDataDomain dataDomain,RecordPerspective recordPerspective,DimensionPerspective dimensionPerspective,ClusterNode rootNode,Class<? extends ADataPerspective<?,?,?,?>> dataPerspectiveClass){
  super(dataDomain,recordPerspective,dimensionPerspective);
  label=rootNode.getLabel();
  if (dataPerspectiveClass.equals(RecordPerspective.class)) {
    this.recordPerspective=new RecordPerspective();
    this.recordPerspective.createVA(rootNode.getLeaveIds());
    this.recordPerspective.setTree((ClusterTree)rootNode.getTree());
    this.recordPerspective.setTreeRoot(rootNode);
    this.recordPerspective.finish();
    dataDomain.getTable().registerRecordPerspecive(recordPerspective);
  }
 else   if (dataPerspectiveClass.equals(DimensionPerspective.class)) {
    this.dimensionPerspective=new DimensionPerspective(dataDomain);
    this.dimensionPerspective.createVA(rootNode.getLeaveIds());
    this.dimensionPerspective.setTree((ClusterTree)rootNode.getTree());
    this.dimensionPerspective.setTreeRoot(rootNode);
    this.dimensionPerspective.finish();
    dataDomain.getTable().registerDimensionPerspective(this.dimensionPerspective);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"" + dataPerspectiveClass);
  }
}",0.9997299486902512
57861,"/** 
 * Initiates clustering based on the parameters passed. Sends out an event to all affected views upon positive completion to replace their VA.
 * @param tableID ID of the set to cluster
 * @param clusterState
 */
public void startClustering(ClusterConfiguration clusterState){
  ClusterManager clusterManager=new ClusterManager(this);
  ClusterResult result=clusterManager.cluster(clusterState);
  if (clusterState.getClustererType() == ClustererType.DIMENSION_CLUSTERING || clusterState.getClustererType() == ClustererType.BI_CLUSTERING) {
    TempResult dimensionResult=result.getDimensionResult();
    DimensionPerspective dimensionPerspective=clusterState.getTargetDimensionPerspective();
    dimensionPerspective.createVA(dimensionResult.getIndices());
    dimensionPerspective.setClusterSizes(dimensionResult.getClusterSizes());
    dimensionPerspective.setTree(dimensionResult.getTree());
    dimensionPerspective.setSampleElements(dimensionResult.getSampleElements());
    dimensionPerspective.finish();
    eventPublisher.triggerEvent(new DimensionVAUpdateEvent(dataDomainID,dimensionPerspective.getPerspectiveID(),this));
  }
  if (clusterState.getClustererType() == ClustererType.RECORD_CLUSTERING || clusterState.getClustererType() == ClustererType.BI_CLUSTERING) {
    TempResult recordResult=result.getRecordResult();
    RecordPerspective recordPerspective=clusterState.getTargetRecordPerspective();
    recordPerspective.createVA(recordResult.getIndices());
    recordPerspective.setClusterSizes(recordResult.getClusterSizes());
    recordPerspective.setTree(recordResult.getTree());
    recordPerspective.setSampleElements(recordResult.getSampleElements());
    recordPerspective.finish();
    eventPublisher.triggerEvent(new RecordVAUpdateEvent(dataDomainID,recordPerspective.getPerspectiveID(),this));
  }
}","/** 
 * Initiates clustering based on the parameters passed. Sends out an event to all affected views upon positive completion to replace their VA.
 * @param tableID ID of the set to cluster
 * @param clusterState
 */
public void startClustering(ClusterConfiguration clusterState){
  ClusterManager clusterManager=new ClusterManager(this);
  ClusterResult result=clusterManager.cluster(clusterState);
  if (clusterState.getClustererType() == ClustererType.DIMENSION_CLUSTERING || clusterState.getClustererType() == ClustererType.BI_CLUSTERING) {
    PerspectiveInitializationData dimensionResult=result.getDimensionResult();
    DimensionPerspective dimensionPerspective=clusterState.getTargetDimensionPerspective();
    dimensionPerspective.createVA(dimensionResult.getIndices());
    dimensionPerspective.setClusterSizes(dimensionResult.getClusterSizes());
    dimensionPerspective.setTree(dimensionResult.getTree());
    dimensionPerspective.setSampleElements(dimensionResult.getSampleElements());
    dimensionPerspective.finish();
    eventPublisher.triggerEvent(new DimensionVAUpdateEvent(dataDomainID,dimensionPerspective.getPerspectiveID(),this));
  }
  if (clusterState.getClustererType() == ClustererType.RECORD_CLUSTERING || clusterState.getClustererType() == ClustererType.BI_CLUSTERING) {
    PerspectiveInitializationData recordResult=result.getRecordResult();
    RecordPerspective recordPerspective=clusterState.getTargetRecordPerspective();
    recordPerspective.createVA(recordResult.getIndices());
    recordPerspective.setClusterSizes(recordResult.getClusterSizes());
    recordPerspective.setTree(recordResult.getTree());
    recordPerspective.setSampleElements(recordResult.getSampleElements());
    recordPerspective.finish();
    eventPublisher.triggerEvent(new RecordVAUpdateEvent(dataDomainID,recordPerspective.getPerspectiveID(),this));
  }
}",0.9789189189189188
57862,"/** 
 * Creates a meta-set for this node
 * @param set
 */
public void fillDataPerspective(DataPerspective<?,?,?,?> dataPerspective){
  dataPerspective.createVA(getLeaveIds());
  dataPerspective.setTreeRoot(this);
  dataPerspective.setTree((ClusterTree)tree);
  this.dataPerspective=dataPerspective;
}","/** 
 * Creates a meta-set for this node
 * @param set
 */
public void fillDataPerspective(ADataPerspective<?,?,?,?> dataPerspective){
  dataPerspective.createVA(getLeaveIds());
  dataPerspective.setTreeRoot(this);
  dataPerspective.setTree((ClusterTree)tree);
  this.dataPerspective=dataPerspective;
}",0.9983416252072967
57863,"public DataPerspective<?,?,?,?> getPerspective(){
  return dataPerspective;
}","public ADataPerspective<?,?,?,?> getPerspective(){
  return dataPerspective;
}",0.9935483870967742
57864,"/** 
 * Set the ID of the   {@link DataPerspective} the virtual array to be updated is associated with
 * @param perspectiveID
 */
public void setPerspectiveID(String perspectiveID){
  this.perspectiveID=perspectiveID;
}","/** 
 * Set the ID of the   {@link ADataPerspective} the virtual array to be updated is associated with
 * @param perspectiveID
 */
public void setPerspectiveID(String perspectiveID){
  this.perspectiveID=perspectiveID;
}",0.9977324263038548
57865,"/** 
 * Saves the   {@link VirtualArray} of the given type. The filename is created from the type.
 * @param dir directory to save the  {@link VirtualArray} in.
 * @param useCase {@link IDataDomain} to retrieve the {@link VirtualArray} from.
 * @param perspectiveID type of the virtual array within the given  {@link IDataDomain}.
 */
private void saveDataPerspective(Marshaller marshaller,String dir,String perspectiveID,DataPerspective<?,?,?,?> perspective) throws JAXBException, IOException {
  String fileName=dir + perspectiveID + ""String_Node_Str"";
  marshaller.marshal(perspective,new File(fileName));
  if (!perspective.isTreeDefaultTree()) {
    TreePorter treePorter=new TreePorter();
    Tree<ClusterNode> tree=perspective.getTree();
    if (tree != null) {
      treePorter.exportTree(dir + perspectiveID + ""String_Node_Str"",tree);
    }
  }
}","/** 
 * Saves the   {@link VirtualArray} of the given type. The filename is created from the type.
 * @param dir directory to save the  {@link VirtualArray} in.
 * @param useCase {@link IDataDomain} to retrieve the {@link VirtualArray} from.
 * @param perspectiveID type of the virtual array within the given  {@link IDataDomain}.
 */
private void saveDataPerspective(Marshaller marshaller,String dir,String perspectiveID,ADataPerspective<?,?,?,?> perspective) throws JAXBException, IOException {
  String fileName=dir + perspectiveID + ""String_Node_Str"";
  marshaller.marshal(perspective,new File(fileName));
  if (!perspective.isTreeDefaultTree()) {
    TreePorter treePorter=new TreePorter();
    Tree<ClusterNode> tree=perspective.getTree();
    if (tree != null) {
      treePorter.exportTree(dir + perspectiveID + ""String_Node_Str"",tree);
    }
  }
}",0.999415546464056
57866,"private void runContentClustering(AClusterer clusterer,ClusterConfiguration clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(dataDomain,clusterState,progressBarOffset,progressBarMulti);
  if (tempResult == null) {
    Logger.log(new Status(IStatus.ERROR,toString(),""String_Node_Str"" + clusterer.toString()));
    return;
  }
  result.setRecordResult(tempResult);
}","private void runContentClustering(AClusterer clusterer,ClusterConfiguration clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  PerspectiveInitializationData tempResult=clusterer.getSortedVA(dataDomain,clusterState,progressBarOffset,progressBarMulti);
  if (tempResult == null) {
    Logger.log(new Status(IStatus.ERROR,toString(),""String_Node_Str"" + clusterer.toString()));
    return;
  }
  result.setRecordResult(tempResult);
}",0.9604060913705584
57867,"private void runDimensionClustering(AClusterer clusterer,ClusterConfiguration clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  TempResult tempResult=clusterer.getSortedVA(dataDomain,clusterState,progressBarOffset,progressBarMulti);
  result.setDimensionResult(tempResult);
}","private void runDimensionClustering(AClusterer clusterer,ClusterConfiguration clusterState,ClusterResult result,int progressBarOffset,int progressBarMulti){
  clusterer.setClusterState(clusterState);
  PerspectiveInitializationData tempResult=clusterer.getSortedVA(dataDomain,clusterState,progressBarOffset,progressBarMulti);
  result.setDimensionResult(tempResult);
}",0.9456066945606696
57868,"@Override public void display(GL2 gl){
  templateRenderer.render(gl);
  if (updateVisualUncertainty) {
    for (    ClusterRenderer clusterRenderer : overviewHeatMap.getClusterRendererList()) {
      if (clusterRenderer.textureRenderer != null && clusterRenderer.textureRenderer.heatmapLayout != null && clusterRenderer.visUncBarTextureRenderer != null) {
        clusterRenderer.visUncBarTextureRenderer.initTextures(VisualUncertaintyUtil.calcVisualUncertainty(gl,pixelGLConverter,clusterRenderer.textureRenderer.heatmapLayout,clusterRenderer.textureRenderer));
      }
    }
    updateVisualUncertainty=false;
  }
}","@Override public void display(GL2 gl){
  templateRenderer.render(gl);
  if (updateVisualUncertainty) {
    for (    ClusterRenderer clusterRenderer : overviewHeatMap.getClusterRendererList()) {
      clusterRenderer.updateVisualUncertainty(gl,pixelGLConverter);
    }
    updateVisualUncertainty=false;
  }
}",0.652972972972973
57869,"@Override protected void reactOnRecordVAChanges(){
  super.reactOnRecordVAChanges();
  setDisplayListDirty();
  initMultiLevelUncertainty();
  overviewHeatMap.init();
}","@Override protected void reactOnRecordVAChanges(){
  super.reactOnRecordVAChanges();
  setDisplayListDirty();
  initMultiLevelUncertainty();
  updateVisualUncertainty=true;
  overviewHeatMap.init();
}",0.9130434782608696
57870,"/** 
 * Creates the dimensions from a previously prepared dimension definition.
 * @param loadDataParameters definition how to create the dimensions
 * @return <code>true</code>if the creation was successful, <code>false</code> otherwise
 */
public static boolean createColumns(LoadDataParameters loadDataParameters){
  ArrayList<Integer> columnIds=null;
  boolean createColumnsFromExistingIDs=false;
  if (loadDataParameters.getColumnIds() == null)   columnIds=new ArrayList<Integer>();
 else {
    columnIds=loadDataParameters.getColumnIds();
    createColumnsFromExistingIDs=true;
  }
  TabularDataParser reader=new TabularDataParser(null,loadDataParameters.getDataDomain());
  reader.setTokenPattern(loadDataParameters.getInputPattern());
  ArrayList<EColumnType> dataTypes=reader.getColumnDataTypes();
  boolean abort=false;
  Iterator<String> columnLabelIterator=loadDataParameters.getColumnLabels().iterator();
  CmdDataCreateColumn cmdCreateColumn;
  String columnLabel;
  ATableBasedDataDomain dataDomain=loadDataParameters.getDataDomain();
  AStringConverter columnHeaderStringConverter=loadDataParameters.getColumnHeaderStringConverter();
  IDMappingManager columnIDMappingManager;
  IDType columnIDType;
  IDType hrColumnIDType;
  if (dataDomain.isColumnDimension()) {
    columnIDMappingManager=dataDomain.getDimensionIDMappingManager();
    columnIDType=dataDomain.getDimensionIDType();
    hrColumnIDType=dataDomain.getHumanReadableDimensionIDType();
  }
 else {
    columnIDMappingManager=dataDomain.getRecordIDMappingManager();
    columnIDType=dataDomain.getRecordIDType();
    hrColumnIDType=dataDomain.getHumanReadableRecordIDType();
  }
  MappingType mappingType=columnIDMappingManager.createMap(columnIDType,hrColumnIDType,false);
  Map<Integer,String> columnIDMap=columnIDMappingManager.getMap(mappingType);
  int columnCount=0;
  for (  EColumnType dataType : dataTypes) {
switch (dataType) {
case FLOAT:
      cmdCreateColumn=(CmdDataCreateColumn)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_COLUMN);
    if (createColumnsFromExistingIDs)     cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NUMERICAL,columnIds.get(columnCount++));
 else     cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NUMERICAL);
  cmdCreateColumn.doCommand();
columnLabel=columnLabelIterator.next();
if (columnHeaderStringConverter != null) columnLabel=columnHeaderStringConverter.convert(columnLabel);
NumericalColumn column=(NumericalColumn)cmdCreateColumn.getCreatedObject();
column.setLabel(columnLabel);
columnIDMap.put(column.getID(),columnLabel);
if (!createColumnsFromExistingIDs) columnIds.add(column.getID());
break;
case STRING:
cmdCreateColumn=(CmdDataCreateColumn)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_COLUMN);
if (createColumnsFromExistingIDs) cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NOMINAL,columnIds.get(columnCount++));
 else cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NOMINAL);
cmdCreateColumn.doCommand();
columnLabel=columnLabelIterator.next();
NominalColumn<?> nominalColumn=(NominalColumn<?>)cmdCreateColumn.getCreatedObject();
nominalColumn.setLabel(columnLabel);
if (!createColumnsFromExistingIDs) columnIds.add(nominalColumn.getID());
case SKIP:
break;
case ABORT:
abort=true;
break;
default :
break;
}
if (abort) {
break;
}
}
columnIDMappingManager.createReverseMap(mappingType);
loadDataParameters.setDimensionIds(columnIds);
return true;
}","/** 
 * Creates the dimensions from a previously prepared dimension definition.
 * @param loadDataParameters definition how to create the dimensions
 * @return <code>true</code>if the creation was successful, <code>false</code> otherwise
 */
public static boolean createColumns(LoadDataParameters loadDataParameters){
  ArrayList<Integer> columnIDs=null;
  boolean createColumnsFromExistingIDs=false;
  if (loadDataParameters.getColumnIDs() == null)   columnIDs=new ArrayList<Integer>();
 else {
    columnIDs=loadDataParameters.getColumnIDs();
    createColumnsFromExistingIDs=true;
  }
  TabularDataParser reader=new TabularDataParser(null,loadDataParameters.getDataDomain());
  reader.setTokenPattern(loadDataParameters.getInputPattern());
  ArrayList<EColumnType> dataTypes=reader.getColumnDataTypes();
  boolean abort=false;
  Iterator<String> columnLabelIterator=loadDataParameters.getColumnLabels().iterator();
  CmdDataCreateColumn cmdCreateColumn;
  String columnLabel;
  ATableBasedDataDomain dataDomain=loadDataParameters.getDataDomain();
  AStringConverter columnHeaderStringConverter=loadDataParameters.getColumnHeaderStringConverter();
  IDMappingManager columnIDMappingManager;
  IDType columnIDType;
  IDType hrColumnIDType;
  if (dataDomain.isColumnDimension()) {
    columnIDMappingManager=dataDomain.getDimensionIDMappingManager();
    columnIDType=dataDomain.getDimensionIDType();
    hrColumnIDType=dataDomain.getHumanReadableDimensionIDType();
  }
 else {
    columnIDMappingManager=dataDomain.getRecordIDMappingManager();
    columnIDType=dataDomain.getRecordIDType();
    hrColumnIDType=dataDomain.getHumanReadableRecordIDType();
  }
  MappingType mappingType=columnIDMappingManager.createMap(columnIDType,hrColumnIDType,false);
  Map<Integer,String> columnIDMap=columnIDMappingManager.getMap(mappingType);
  int columnCount=0;
  for (  EColumnType dataType : dataTypes) {
switch (dataType) {
case FLOAT:
      cmdCreateColumn=(CmdDataCreateColumn)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_COLUMN);
    if (createColumnsFromExistingIDs)     cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NUMERICAL,columnIDs.get(columnCount++));
 else     cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NUMERICAL);
  cmdCreateColumn.doCommand();
columnLabel=columnLabelIterator.next();
if (columnHeaderStringConverter != null) columnLabel=columnHeaderStringConverter.convert(columnLabel);
NumericalColumn column=(NumericalColumn)cmdCreateColumn.getCreatedObject();
column.setLabel(columnLabel);
columnIDMap.put(column.getID(),columnLabel);
if (!createColumnsFromExistingIDs) columnIDs.add(column.getID());
break;
case STRING:
cmdCreateColumn=(CmdDataCreateColumn)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_COLUMN);
if (createColumnsFromExistingIDs) cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NOMINAL,columnIDs.get(columnCount++));
 else cmdCreateColumn.setAttributes(ManagedObjectType.COLUMN_NOMINAL);
cmdCreateColumn.doCommand();
columnLabel=columnLabelIterator.next();
NominalColumn<?> nominalColumn=(NominalColumn<?>)cmdCreateColumn.getCreatedObject();
nominalColumn.setLabel(columnLabel);
if (!createColumnsFromExistingIDs) columnIDs.add(nominalColumn.getID());
case SKIP:
break;
case ABORT:
abort=true;
break;
default :
break;
}
if (abort) {
break;
}
}
columnIDMappingManager.createReverseMap(mappingType);
loadDataParameters.setColumnIDs(columnIDs);
return true;
}",0.991813873330461
57871,"public static DataTable createData(ATableBasedDataDomain dataDomain,boolean createDefaultPerspectives,AStringConverter stringConverter){
  LoadDataParameters loadDataParameters=dataDomain.getLoadDataParameters();
  ArrayList<Integer> columnIDs=loadDataParameters.getColumnIds();
  CmdDataCreateTable cmdCreateTable=(CmdDataCreateTable)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_DATA_TABLE);
  cmdCreateTable.setAttributes(columnIDs,dataDomain);
  cmdCreateTable.doCommand();
  CmdParseIDMapping cmdParseIDMapping=(CmdParseIDMapping)GeneralManager.get().getCommandManager().createCommandByType(CommandType.PARSE_ID_MAPPING);
  IDType rowIDType;
  if (dataDomain.isColumnDimension())   rowIDType=dataDomain.getRecordIDType();
 else   rowIDType=dataDomain.getDimensionIDType();
  String lookupTableInfo=loadDataParameters.getFileIDTypeName() + ""String_Node_Str"" + rowIDType+ ""String_Node_Str"";
  cmdParseIDMapping.setAttributes(loadDataParameters.getFileName(),loadDataParameters.getStartParseFileAtLine(),-1,lookupTableInfo,loadDataParameters.getDelimiter(),""String_Node_Str"",rowIDType.getIDCategory());
  cmdParseIDMapping.setStringConverter(stringConverter);
  cmdParseIDMapping.doCommand();
  CmdLoadFileNDimensions cmdLoadCSV=(CmdLoadFileNDimensions)GeneralManager.get().getCommandManager().createCommandByType(CommandType.LOAD_DATA_FILE);
  cmdLoadCSV.setAttributes(columnIDs,loadDataParameters);
  cmdLoadCSV.doCommand();
  if (!cmdLoadCSV.isParsingOK()) {
    return null;
  }
  DataTable table=dataDomain.getTable();
  if (createDefaultPerspectives) {
    table.createDefaultRecordPerspective();
    table.createDefaultDimensionPerspective();
  }
  if (loadDataParameters.isMinDefined()) {
    table.getMetaData().setMin(loadDataParameters.getMin());
  }
  if (loadDataParameters.isMaxDefined()) {
    table.getMetaData().setMax(loadDataParameters.getMax());
  }
  boolean isSetHomogeneous=loadDataParameters.isDataHomogeneous();
  if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.NORMAL,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG10,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG2,isSetHomogeneous);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
  return table;
}","public static DataTable createData(ATableBasedDataDomain dataDomain,boolean createDefaultPerspectives,AStringConverter stringConverter){
  LoadDataParameters loadDataParameters=dataDomain.getLoadDataParameters();
  ArrayList<Integer> columnIDs=loadDataParameters.getColumnIDs();
  CmdDataCreateTable cmdCreateTable=(CmdDataCreateTable)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_DATA_TABLE);
  cmdCreateTable.setAttributes(columnIDs,dataDomain);
  cmdCreateTable.doCommand();
  CmdParseIDMapping cmdParseIDMapping=(CmdParseIDMapping)GeneralManager.get().getCommandManager().createCommandByType(CommandType.PARSE_ID_MAPPING);
  IDType rowIDType;
  if (dataDomain.isColumnDimension())   rowIDType=dataDomain.getRecordIDType();
 else   rowIDType=dataDomain.getDimensionIDType();
  String lookupTableInfo=loadDataParameters.getFileIDTypeName() + ""String_Node_Str"" + rowIDType+ ""String_Node_Str"";
  cmdParseIDMapping.setAttributes(loadDataParameters.getFileName(),loadDataParameters.getStartParseFileAtLine(),-1,lookupTableInfo,loadDataParameters.getDelimiter(),""String_Node_Str"",rowIDType.getIDCategory());
  cmdParseIDMapping.setStringConverter(stringConverter);
  cmdParseIDMapping.doCommand();
  CmdLoadFileNDimensions cmdLoadCSV=(CmdLoadFileNDimensions)GeneralManager.get().getCommandManager().createCommandByType(CommandType.LOAD_DATA_FILE);
  cmdLoadCSV.setAttributes(columnIDs,loadDataParameters);
  cmdLoadCSV.doCommand();
  if (!cmdLoadCSV.isParsingOK()) {
    return null;
  }
  DataTable table=dataDomain.getTable();
  if (createDefaultPerspectives) {
    table.createDefaultRecordPerspective();
    table.createDefaultDimensionPerspective();
  }
  if (loadDataParameters.isMinDefined()) {
    table.getMetaData().setMin(loadDataParameters.getMin());
  }
  if (loadDataParameters.isMaxDefined()) {
    table.getMetaData().setMax(loadDataParameters.getMax());
  }
  boolean isSetHomogeneous=loadDataParameters.isDataHomogeneous();
  if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.NORMAL,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG10,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG2,isSetHomogeneous);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
  return table;
}",0.999611197511664
57872,"/** 
 * @param columnHeaderStringConverter setter, see {@link #columnHeaderStringConverter}
 */
public void setColumnHeaderStringConverter(AStringConverter columnHeaderStringConverter){
  this.columnHeaderStringConverter=columnHeaderStringConverter;
}","/** 
 * @param columnHeaderStringConverter setter, see  {@link #columnHeaderStringConverter}
 */
public void setColumnHeaderStringConverter(AStringConverter columnHeaderStringConverter){
  this.columnHeaderStringConverter=columnHeaderStringConverter;
}",0.9980119284294234
57873,"@Override public String toString(){
  boolean hasGrouping=false;
  if (groupList != null)   hasGrouping=true;
  return ""String_Node_Str"" + getID() + ""String_Node_Str""+ vaType+ ""String_Node_Str""+ virtualArrayList.size()+ ""String_Node_Str""+ hasGrouping;
}","@Override public String toString(){
  boolean hasGrouping=false;
  if (groupList != null)   hasGrouping=true;
  return ""String_Node_Str"" + getID() + ""String_Node_Str""+ vaType+ ""String_Node_Str""+ virtualArrayList.size()+ ""String_Node_Str""+ hasGrouping+ virtualArrayList;
}",0.965648854961832
57874,"@Override public Object start(IApplicationContext context) throws Exception {
  GeneralManager.get().init();
  DataDomainConfiguration mrnaConfiguration=GeneticDataDomain.getConfigurationWithSamplesAsRows();
  loadSources(MRNA,MRNA_GROUPING,""String_Node_Str"",ColorMapper.createDefaultMapper(EDefaultColorSchemes.BROWN_WHITE_GREEN),mrnaConfiguration);
  DataDomainConfiguration methylationConfiguration=new DataDomainConfiguration();
  methylationConfiguration.setColumnDimension(false);
  methylationConfiguration.setRecordIDCategory(""String_Node_Str"");
  methylationConfiguration.setDimensionIDCategory(""String_Node_Str"");
  methylationConfiguration.setHumanReadableRecordIDType(""String_Node_Str"");
  methylationConfiguration.setHumanReadableDimensionIDType(""String_Node_Str"");
  methylationConfiguration.setRecordDenominationPlural(""String_Node_Str"");
  methylationConfiguration.setRecordDenominationSingular(""String_Node_Str"");
  methylationConfiguration.setDimensionDenominationPlural(""String_Node_Str"");
  methylationConfiguration.setDimensionDenominationSingular(""String_Node_Str"");
  loadSources(METHYLATION,METHYLATION_GROUPING,""String_Node_Str"",ColorMapper.createDefaultMapper(EDefaultColorSchemes.RED_WHITE_GREY),methylationConfiguration);
  new ProjectSaver().save(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ (new SimpleDateFormat(""String_Node_Str"").format(new Date()))+ ""String_Node_Str"",true);
  return IApplication.EXIT_OK;
}","@Override public Object start(IApplicationContext context) throws Exception {
  GeneralManager.get().init();
  DataDomainConfiguration mrnaConfiguration=GeneticDataDomain.getConfigurationWithSamplesAsRows();
  loadSources(MRNA,MRNA_GROUPING,""String_Node_Str"",ColorMapper.createDefaultMapper(EDefaultColorSchemes.BROWN_WHITE_GREEN),mrnaConfiguration);
  DataDomainConfiguration mirnaConfiguration=new DataDomainConfiguration();
  mirnaConfiguration.setColumnDimension(false);
  mirnaConfiguration.setRecordIDCategory(""String_Node_Str"");
  mirnaConfiguration.setDimensionIDCategory(""String_Node_Str"");
  mirnaConfiguration.setHumanReadableRecordIDType(""String_Node_Str"");
  mirnaConfiguration.setHumanReadableDimensionIDType(""String_Node_Str"");
  mirnaConfiguration.setRecordDenominationPlural(""String_Node_Str"");
  mirnaConfiguration.setRecordDenominationSingular(""String_Node_Str"");
  mirnaConfiguration.setDimensionDenominationPlural(""String_Node_Str"");
  mirnaConfiguration.setDimensionDenominationSingular(""String_Node_Str"");
  loadSources(MI_RNA,MI_RNA_GROUPING,""String_Node_Str"",ColorMapper.createDefaultMapper(EDefaultColorSchemes.RED_YELLOW_BLUE),mirnaConfiguration);
  DataDomainConfiguration methylationConfiguration=new DataDomainConfiguration();
  methylationConfiguration.setColumnDimension(false);
  methylationConfiguration.setRecordIDCategory(""String_Node_Str"");
  methylationConfiguration.setDimensionIDCategory(""String_Node_Str"");
  methylationConfiguration.setHumanReadableRecordIDType(""String_Node_Str"");
  methylationConfiguration.setHumanReadableDimensionIDType(""String_Node_Str"");
  methylationConfiguration.setRecordDenominationPlural(""String_Node_Str"");
  methylationConfiguration.setRecordDenominationSingular(""String_Node_Str"");
  methylationConfiguration.setDimensionDenominationPlural(""String_Node_Str"");
  methylationConfiguration.setDimensionDenominationSingular(""String_Node_Str"");
  loadSources(METHYLATION,METHYLATION_GROUPING,""String_Node_Str"",ColorMapper.createDefaultMapper(EDefaultColorSchemes.RED_WHITE_GREY),methylationConfiguration);
  new ProjectSaver().save(System.getProperty(""String_Node_Str"") + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ (new SimpleDateFormat(""String_Node_Str"").format(new Date()))+ ""String_Node_Str"",true);
  return IApplication.EXIT_OK;
}",0.7838405036726128
57875,"@Override protected void initLists(){
  recordVA=dataDomain.getRecordVA(recordPerspectiveID);
  dimensionVA=dataDomain.getDimensionVA(dimensionPerspectiveID);
  setDisplayListDirty();
}","@Override protected void initLists(){
  recordVA=dataDomain.getRecordVA(recordPerspectiveID);
  dimensionVA=dataDomain.getDimensionVA(dimensionPerspectiveID);
  System.out.println(dataDomain.getRecordVA(recordPerspectiveID));
  System.out.println(table.getRecordPerspective(recordPerspectiveID));
  System.out.println(table.getColumnIDList());
  System.out.println(dataDomain.getTable());
  System.out.println(table);
  setDisplayListDirty();
}",0.5564387917329093
57876,"/** 
 * Create a new command assigned to a cmdType.
 * @param cmdType specify the ICommand to be created.
 * @return new ICommand
 */
public ICommand createCommandByType(final CommandType cmdType){
  ICommand createdCommand=null;
switch (cmdType) {
case CREATE_ID_CATEGORY:
{
      createdCommand=new CmdCreateIDCategory();
      break;
    }
case CREATE_ID_TYPE:
{
    createdCommand=new CmdCreateIDType();
    break;
  }
case LOAD_LOOKUP_TABLE_FILE:
{
  createdCommand=new CmdLoadFileLookupTable();
  break;
}
case LOAD_DATA_FILE:
{
createdCommand=new CmdLoadFileNDimensions();
break;
}
case CREATE_DIMENSION:
{
createdCommand=new CmdDataCreateDimension();
break;
}
case CREATE_DATA_TABLE:
{
createdCommand=new CmdDataCreateTable();
break;
}
default :
throw new IllegalStateException(""String_Node_Str"" + cmdType + ""String_Node_Str"");
}
return createdCommand;
}","/** 
 * Create a new command assigned to a cmdType.
 * @param cmdType specify the ICommand to be created.
 * @return new ICommand
 */
public ICommand createCommandByType(final CommandType cmdType){
  ICommand createdCommand=null;
switch (cmdType) {
case CREATE_ID_CATEGORY:
{
      createdCommand=new CmdCreateIDCategory();
      break;
    }
case CREATE_ID_TYPE:
{
    createdCommand=new CmdCreateIDType();
    break;
  }
case LOAD_LOOKUP_TABLE_FILE:
{
  createdCommand=new CmdLoadFileLookupTable();
  break;
}
case LOAD_DATA_FILE:
{
createdCommand=new CmdLoadFileNDimensions();
break;
}
case CREATE_COLUMN:
{
createdCommand=new CmdDataCreateColumn();
break;
}
case CREATE_DATA_TABLE:
{
createdCommand=new CmdDataCreateTable();
break;
}
default :
throw new IllegalStateException(""String_Node_Str"" + cmdType + ""String_Node_Str"");
}
return createdCommand;
}",0.9860302677532014
57877,"/** 
 * Creates the set from a previously prepared dimension definition.
 */
public static DataTable createData(ATableBasedDataDomain dataDomain,boolean createDefaultPerspectives){
  LoadDataParameters loadDataParameters=dataDomain.getLoadDataParameters();
  ArrayList<Integer> dimensionIDs=loadDataParameters.getDimensionIds();
  CmdDataCreateTable cmdCreateSet=(CmdDataCreateTable)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_DATA_TABLE);
  cmdCreateSet.setAttributes(dimensionIDs,dataDomain);
  cmdCreateSet.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(CommandType.LOAD_LOOKUP_TABLE_FILE);
  String lookupTableInfo=loadDataParameters.getFileIDTypeName() + ""String_Node_Str"" + dataDomain.getRecordIDType().getTypeName()+ ""String_Node_Str"";
  cmdLoadLookupTableFile.setAttributes(loadDataParameters.getFileName(),loadDataParameters.getStartParseFileAtLine(),-1,lookupTableInfo,loadDataParameters.getDelimiter(),""String_Node_Str"",dataDomain.getRecordIDCategory());
  cmdLoadLookupTableFile.doCommand();
  CmdLoadFileNDimensions cmdLoadCSV=(CmdLoadFileNDimensions)GeneralManager.get().getCommandManager().createCommandByType(CommandType.LOAD_DATA_FILE);
  cmdLoadCSV.setAttributes(dimensionIDs,loadDataParameters);
  cmdLoadCSV.doCommand();
  if (!cmdLoadCSV.isParsingOK()) {
    return null;
  }
  DataTable table=dataDomain.getTable();
  if (createDefaultPerspectives) {
    table.createDefaultRecordPerspective();
    table.createDefaultDimensionPerspective();
  }
  if (loadDataParameters.isMinDefined()) {
    table.getMetaData().setMin(loadDataParameters.getMin());
  }
  if (loadDataParameters.isMaxDefined()) {
    table.getMetaData().setMax(loadDataParameters.getMax());
  }
  boolean isSetHomogeneous=loadDataParameters.isDataHomogeneous();
  if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.NORMAL,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG10,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG2,isSetHomogeneous);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
  return table;
}","/** 
 * Creates the set from a previously prepared dimension definition.
 */
public static DataTable createData(ATableBasedDataDomain dataDomain,boolean createDefaultPerspectives){
  LoadDataParameters loadDataParameters=dataDomain.getLoadDataParameters();
  ArrayList<Integer> dimensionIDs=loadDataParameters.getColumnIds();
  CmdDataCreateTable cmdCreateSet=(CmdDataCreateTable)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_DATA_TABLE);
  cmdCreateSet.setAttributes(dimensionIDs,dataDomain);
  cmdCreateSet.doCommand();
  CmdLoadFileLookupTable cmdLoadLookupTableFile=(CmdLoadFileLookupTable)GeneralManager.get().getCommandManager().createCommandByType(CommandType.LOAD_LOOKUP_TABLE_FILE);
  String lookupTableInfo=loadDataParameters.getFileIDTypeName() + ""String_Node_Str"" + dataDomain.getRecordIDType().getTypeName()+ ""String_Node_Str"";
  cmdLoadLookupTableFile.setAttributes(loadDataParameters.getFileName(),loadDataParameters.getStartParseFileAtLine(),-1,lookupTableInfo,loadDataParameters.getDelimiter(),""String_Node_Str"",dataDomain.getRecordIDCategory());
  cmdLoadLookupTableFile.doCommand();
  CmdLoadFileNDimensions cmdLoadCSV=(CmdLoadFileNDimensions)GeneralManager.get().getCommandManager().createCommandByType(CommandType.LOAD_DATA_FILE);
  cmdLoadCSV.setAttributes(dimensionIDs,loadDataParameters);
  cmdLoadCSV.doCommand();
  if (!cmdLoadCSV.isParsingOK()) {
    return null;
  }
  DataTable table=dataDomain.getTable();
  if (createDefaultPerspectives) {
    table.createDefaultRecordPerspective();
    table.createDefaultDimensionPerspective();
  }
  if (loadDataParameters.isMinDefined()) {
    table.getMetaData().setMin(loadDataParameters.getMin());
  }
  if (loadDataParameters.isMaxDefined()) {
    table.getMetaData().setMax(loadDataParameters.getMax());
  }
  boolean isSetHomogeneous=loadDataParameters.isDataHomogeneous();
  if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.NORMAL,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG10,isSetHomogeneous);
  }
 else   if (loadDataParameters.getMathFilterMode().equals(""String_Node_Str"")) {
    table.setExternalDataRepresentation(ExternalDataRepresentation.LOG2,isSetHomogeneous);
  }
 else   throw new IllegalStateException(""String_Node_Str"");
  return table;
}",0.9973827259915442
57878,"public LoadDataParameters(){
  this.fileName=null;
  this.inputPattern=""String_Node_Str"";
  this.dimensionLabels=new ArrayList<String>();
  this.delimiter=""String_Node_Str"";
  this.startParseFileAtLine=1;
  this.stopParseFileAtLine=-1;
  this.dataDomain=null;
}","public LoadDataParameters(){
  this.fileName=null;
  this.inputPattern=""String_Node_Str"";
  this.columnLabels=new ArrayList<String>();
  this.delimiter=""String_Node_Str"";
  this.startParseFileAtLine=1;
  this.stopParseFileAtLine=-1;
  this.dataDomain=null;
}",0.97495183044316
57879,"@Override public void handleEvent(AEvent event){
  if (event instanceof StartClusteringEvent) {
    StartClusteringEvent startClusteringEvent=(StartClusteringEvent)event;
    if (handler.getDataDomainID() == startClusteringEvent.getDataDomainID())     handler.startClustering(startClusteringEvent.getClusterState());
  }
}","@Override public void handleEvent(AEvent event){
  if (event instanceof StartClusteringEvent) {
    StartClusteringEvent startClusteringEvent=(StartClusteringEvent)event;
    if (handler.getDataDomainID() == startClusteringEvent.getDataDomainID())     handler.startClustering(startClusteringEvent.getClusteConfiguration());
  }
}",0.9708141321044548
57880,"public AColumn createDimension(final ManagedObjectType type,int dimensionID){
switch (type) {
case DIMENSION_NUMERICAL:
    return new NumericalColumn(dimensionID);
case DIMENSION_NOMINAL:
  return new NominalColumn<String>(dimensionID);
default :
throw new IllegalStateException(""String_Node_Str"" + type.toString() + ""String_Node_Str"");
}
}","public AColumn createDimension(final ManagedObjectType type,int dimensionID){
switch (type) {
case COLUMN_NUMERICAL:
    return new NumericalColumn(dimensionID);
case COLUMN_NOMINAL:
  return new NominalColumn<String>(dimensionID);
default :
throw new IllegalStateException(""String_Node_Str"" + type.toString() + ""String_Node_Str"");
}
}",0.9674556213017752
57881,"public static void showMenu(final ContextMenuCreator menuCreator,final int retriesLeft){
  if (retriesLeft == 0)   return;
  if (System.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
    final Shell activeShell=menuCreator.getParent().getShell();
    popupMenu(menuCreator,retriesLeft,activeShell);
  }
 else {
    final Shell activeShell=menuCreator.getParent().getShell();
    popupShell=new Shell(activeShell,SWT.NO_TRIM | SWT.NO_FOCUS | SWT.ON_TOP);
    Point l=menuCreator.getParent().getDisplay().getCursorLocation();
    l.x-=2;
    l.y-=2;
    popupShell.setLocation(l);
    popupShell.setSize(4,4);
    popupShell.open();
    popupMenu(menuCreator,retriesLeft,activeShell);
  }
}","public static void showMenu(final ContextMenuCreator menuCreator,final int retriesLeft){
  if (retriesLeft == 0)   return;
  if (System.getProperty(""String_Node_Str"").contains(""String_Node_Str"") || System.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
    final Shell activeShell=popupShell=menuCreator.getParent().getShell();
    popupMenu(menuCreator,retriesLeft,activeShell);
  }
 else {
    final Shell activeShell=menuCreator.getParent().getShell();
    popupShell=new Shell(activeShell,SWT.NO_TRIM | SWT.NO_FOCUS | SWT.ON_TOP);
    Point l=menuCreator.getParent().getDisplay().getCursorLocation();
    l.x-=2;
    l.y-=2;
    popupShell.setLocation(l);
    popupShell.setSize(4,4);
    popupShell.open();
    popupMenu(menuCreator,retriesLeft,activeShell);
  }
}",0.946164199192463
57882,"private static void popupMenu(final ContextMenuCreator menuCreator,final int retriesLeft,final Shell activeShell){
  final Display display=menuCreator.getParent().getDisplay();
  final int[] count=new int[1];
  Runnable r=new Runnable(){
    public void run(){
      popupShell.setActive();
      final Menu menu=menuCreator.create(popupShell);
      menu.addListener(SWT.Hide,new Listener(){
        public void handleEvent(        Event e){
          activeShell.setActive();
        }
      }
);
      menu.addListener(SWT.Show,new Listener(){
        public void handleEvent(        Event e){
          count[0]++;
          if (!menu.isVisible() && count[0] > MAX_ATTEMPTS) {
            Runnable r=new Runnable(){
              public void run(){
                System.err.println(""String_Node_Str"" + MAX_ATTEMPTS + ""String_Node_Str"");
                menu.setVisible(false);
                menu.dispose();
                System.err.println(""String_Node_Str"");
                showMenu(menuCreator,retriesLeft - 1);
              }
            }
;
            display.asyncExec(r);
            return;
          }
          Runnable runnable=new Runnable(){
            public void run(){
              if (!menu.isDisposed() && !menu.isVisible())               menu.setVisible(true);
 else {
              }
            }
          }
;
          display.asyncExec(runnable);
        }
      }
);
      popupShell.addListener(SWT.Deactivate,new Listener(){
        @Override public void handleEvent(        Event event){
          if (!popupShell.isDisposed()) {
            popupShell.close();
            popupShell.dispose();
          }
          menuCreator.getView().setLazyMode(false);
        }
      }
);
      menu.setVisible(true);
    }
  }
;
  display.asyncExec(r);
}","private static void popupMenu(final ContextMenuCreator menuCreator,final int retriesLeft,final Shell activeShell){
  final Display display=menuCreator.getParent().getDisplay();
  final int[] count=new int[1];
  Runnable r=new Runnable(){
    public void run(){
      popupShell.setActive();
      final Menu menu=menuCreator.create(popupShell);
      menu.addListener(SWT.Hide,new Listener(){
        public void handleEvent(        Event e){
          activeShell.setActive();
        }
      }
);
      menu.addListener(SWT.Show,new Listener(){
        public void handleEvent(        Event e){
          count[0]++;
          if (!menu.isVisible() && count[0] > MAX_ATTEMPTS) {
            Runnable r=new Runnable(){
              public void run(){
                System.err.println(""String_Node_Str"" + MAX_ATTEMPTS + ""String_Node_Str"");
                menu.setVisible(false);
                menu.dispose();
                System.err.println(""String_Node_Str"");
                showMenu(menuCreator,retriesLeft - 1);
              }
            }
;
            display.asyncExec(r);
            return;
          }
          Runnable runnable=new Runnable(){
            public void run(){
              if (!menu.isDisposed() && !menu.isVisible())               menu.setVisible(true);
 else {
              }
            }
          }
;
          display.asyncExec(runnable);
        }
      }
);
      if (!System.getProperty(""String_Node_Str"").contains(""String_Node_Str"") && !System.getProperty(""String_Node_Str"").contains(""String_Node_Str"")) {
        popupShell.addListener(SWT.Deactivate,new Listener(){
          @Override public void handleEvent(          Event event){
            if (!popupShell.isDisposed()) {
              popupShell.close();
              popupShell.dispose();
            }
            menuCreator.getView().setLazyMode(false);
          }
        }
);
      }
      menu.setVisible(true);
    }
  }
;
  display.asyncExec(r);
}",0.9526091586794462
57883,"@Override public void createEdge(List<Point2D> edgePoints){
  if (edgePoints == null || edgePoints.size() < 2)   return;
  Map<Point2D,IDataGraphNode> pointsOnBoundingBoxes=new HashMap<Point2D,IDataGraphNode>();
  for (int i=1; i < edgePoints.size(); i++) {
    Point2D point1=edgePoints.get(i - 1);
    Point2D point2=edgePoints.get(i);
    for (    IDataGraphNode node : dataGraph.getNodes()) {
      Rectangle2D box=node.getBoundingBox();
      int code1=box.outcode(point1);
      int code2=box.outcode(point2);
      boolean isPoint1OnBoundingBox=(pointsOnBoundingBoxes.get(point1) == node);
      boolean isPoint2OnBoundingBox=(pointsOnBoundingBoxes.get(point2) == node);
      if (((code1 & code2) != 0) || (code1 == 0 && !isPoint1OnBoundingBox) || (code2 == 0 && !isPoint2OnBoundingBox)|| (isPoint1OnBoundingBox && isPoint2OnBoundingBox)) {
        continue;
      }
      Point2D intersection1=(isPoint1OnBoundingBox) ? (point1) : (calcIntersectionPoint(point1,point2,box,code1));
      Point2D intersection2=(isPoint2OnBoundingBox) ? (point2) : (calcIntersectionPoint(point2,point1,box,code2));
      if (intersection1 != null && intersection2 != null) {
        if (intersection1.getX() == intersection2.getX() && intersection1.getY() == intersection2.getY()) {
          continue;
        }
        Point2D[] corners=new Point2D[4];
        corners[0]=new Point2D.Double(box.getMinX(),box.getMinY());
        corners[1]=new Point2D.Double(box.getMaxX(),box.getMinY());
        corners[2]=new Point2D.Double(box.getMaxX(),box.getMaxY());
        corners[3]=new Point2D.Double(box.getMinX(),box.getMaxY());
        double minDistance=Double.MAX_VALUE;
        Point2D bendPoint=null;
        for (int j=0; j < 4; j++) {
          if ((corners[j].getX() == point1.getX() && corners[j].getY() == point1.getY() && isPoint1OnBoundingBox) || (corners[j].getX() == point2.getX() && corners[j].getY() == point2.getY()) && isPoint2OnBoundingBox) {
            continue;
          }
          double currentSummedDistance=intersection1.distanceSq(corners[j]) + intersection2.distanceSq(corners[j]);
          if (currentSummedDistance < minDistance) {
            minDistance=currentSummedDistance;
            bendPoint=corners[j];
          }
        }
        if (bendPoint == null) {
          System.out.println(""String_Node_Str"");
        }
        boolean isPointAlreadyAdded=false;
        for (        Point2D point : edgePoints) {
          if (point.getX() == bendPoint.getX() && point.getY() == bendPoint.getY()) {
            isPointAlreadyAdded=true;
            break;
          }
        }
        if (isPointAlreadyAdded) {
          continue;
        }
        edgePoints.add(i,bendPoint);
        pointsOnBoundingBoxes.put(bendPoint,node);
        i--;
        break;
      }
    }
  }
  for (int step=edgePoints.size() - 2; step >= 2; step--) {
    for (int i=0; i + step < edgePoints.size(); i++) {
      Point2D point1=edgePoints.get(i);
      Point2D point2=edgePoints.get(i + step);
      boolean hasIntersection=false;
      for (      IDataGraphNode node : dataGraph.getNodes()) {
        Rectangle2D box=node.getBoundingBox();
        int code1=box.outcode(point1);
        int code2=box.outcode(point2);
        boolean isPoint1OnBoundingBox=(pointsOnBoundingBoxes.get(point1) == node);
        boolean isPoint2OnBoundingBox=(pointsOnBoundingBoxes.get(point2) == node);
        if ((code1 & code2) != 0) {
          continue;
        }
        if ((code1 == 0 && !isPoint1OnBoundingBox) || (code2 == 0 && !isPoint2OnBoundingBox) || (isPoint1OnBoundingBox && isPoint2OnBoundingBox)) {
          hasIntersection=true;
          break;
        }
        Point2D intersection1=(isPoint1OnBoundingBox) ? (point1) : (calcIntersectionPoint(point1,point2,box,code1));
        Point2D intersection2=(isPoint2OnBoundingBox) ? (point2) : (calcIntersectionPoint(point2,point1,box,code2));
        if (intersection1 == null || intersection2 == null) {
          continue;
        }
        if (intersection1.distance(intersection2) < 0.000001 && (isPoint1OnBoundingBox || isPoint2OnBoundingBox)) {
          continue;
        }
        hasIntersection=true;
        break;
      }
      if (!hasIntersection) {
        for (int j=i + 1; j < i + step; j++) {
          edgePoints.remove(i + 1);
        }
        step=edgePoints.size() - 2;
        break;
      }
    }
  }
}","@Override public void createEdge(List<Point2D> edgePoints){
  if (edgePoints == null || edgePoints.size() < 2)   return;
  Map<Point2D,IDataGraphNode> pointsOnBoundingBoxes=new HashMap<Point2D,IDataGraphNode>();
  for (int i=1; i < edgePoints.size(); i++) {
    Point2D point1=edgePoints.get(i - 1);
    Point2D point2=edgePoints.get(i);
    for (    IDataGraphNode node : dataGraph.getNodes()) {
      Rectangle2D box=node.getBoundingBox();
      int code1=box.outcode(point1);
      int code2=box.outcode(point2);
      boolean isPoint1OnBoundingBox=(pointsOnBoundingBoxes.get(point1) == node);
      boolean isPoint2OnBoundingBox=(pointsOnBoundingBoxes.get(point2) == node);
      if (((code1 & code2) != 0) || (code1 == 0 && !isPoint1OnBoundingBox) || (code2 == 0 && !isPoint2OnBoundingBox)|| (isPoint1OnBoundingBox && isPoint2OnBoundingBox)) {
        continue;
      }
      Point2D intersection1=(isPoint1OnBoundingBox) ? (point1) : (calcIntersectionPoint(point1,point2,box,code1));
      Point2D intersection2=(isPoint2OnBoundingBox) ? (point2) : (calcIntersectionPoint(point2,point1,box,code2));
      if (intersection1 != null && intersection2 != null) {
        if (intersection1.getX() <= intersection2.getX() + 0.0000001 && intersection1.getX() >= intersection2.getX() - 0.0000001 && intersection1.getY() <= intersection2.getY() + 0.0000001 && intersection1.getY() >= intersection2.getY() - 0.0000001) {
          continue;
        }
        Point2D[] corners=new Point2D[4];
        corners[0]=new Point2D.Double(box.getMinX(),box.getMinY());
        corners[1]=new Point2D.Double(box.getMaxX(),box.getMinY());
        corners[2]=new Point2D.Double(box.getMaxX(),box.getMaxY());
        corners[3]=new Point2D.Double(box.getMinX(),box.getMaxY());
        double minDistance=Double.MAX_VALUE;
        Point2D bendPoint=null;
        for (int j=0; j < 4; j++) {
          if ((corners[j].getX() == point1.getX() && corners[j].getY() == point1.getY() && isPoint1OnBoundingBox) || (corners[j].getX() == point2.getX() && corners[j].getY() == point2.getY()) && isPoint2OnBoundingBox) {
            continue;
          }
          double currentSummedDistance=intersection1.distanceSq(corners[j]) + intersection2.distanceSq(corners[j]);
          if (currentSummedDistance < minDistance) {
            minDistance=currentSummedDistance;
            bendPoint=corners[j];
          }
        }
        if (bendPoint == null) {
          System.out.println(""String_Node_Str"");
        }
        boolean isPointAlreadyAdded=false;
        for (        Point2D point : edgePoints) {
          if (point.getX() == bendPoint.getX() && point.getY() == bendPoint.getY()) {
            isPointAlreadyAdded=true;
            break;
          }
        }
        if (isPointAlreadyAdded) {
          continue;
        }
        edgePoints.add(i,bendPoint);
        pointsOnBoundingBoxes.put(bendPoint,node);
        i--;
        break;
      }
    }
  }
  for (int step=edgePoints.size() - 2; step >= 2; step--) {
    for (int i=0; i + step < edgePoints.size(); i++) {
      Point2D point1=edgePoints.get(i);
      Point2D point2=edgePoints.get(i + step);
      boolean hasIntersection=false;
      for (      IDataGraphNode node : dataGraph.getNodes()) {
        Rectangle2D box=node.getBoundingBox();
        int code1=box.outcode(point1);
        int code2=box.outcode(point2);
        boolean isPoint1OnBoundingBox=(pointsOnBoundingBoxes.get(point1) == node);
        boolean isPoint2OnBoundingBox=(pointsOnBoundingBoxes.get(point2) == node);
        if ((code1 & code2) != 0) {
          continue;
        }
        if ((code1 == 0 && !isPoint1OnBoundingBox && edgePoints.indexOf(point1) != 0 && edgePoints.indexOf(point1) != edgePoints.size() - 1) || (code2 == 0 && !isPoint2OnBoundingBox && edgePoints.indexOf(point2) != 0 && edgePoints.indexOf(point2) != edgePoints.size() - 1) || (isPoint1OnBoundingBox && isPoint2OnBoundingBox)) {
          hasIntersection=true;
          break;
        }
        Point2D intersection1=(isPoint1OnBoundingBox) ? (point1) : (calcIntersectionPoint(point1,point2,box,code1));
        Point2D intersection2=(isPoint2OnBoundingBox) ? (point2) : (calcIntersectionPoint(point2,point1,box,code2));
        if (intersection1 == null || intersection2 == null) {
          continue;
        }
        if (intersection1.distance(intersection2) < 0.000001 && (isPoint1OnBoundingBox || isPoint2OnBoundingBox)) {
          continue;
        }
        hasIntersection=true;
        break;
      }
      if (!hasIntersection) {
        for (int j=i + 1; j < i + step; j++) {
          edgePoints.remove(i + 1);
        }
        step=edgePoints.size() - 2;
        break;
      }
    }
  }
}",0.9639718804920914
57884,"/** 
 * Returns an ArrayList with indexes of one group (genes/experiments) determined by iGroupIdx.
 * @param groupID index of group in groupList
 * @return ArrayList<Integer> containing all indexes of one group determined by iGroupIdx. Null will bereturned in case of groupList is null.
 */
public ArrayList<Integer> getIDsOfGroup(int groupID){
  if (groupList == null)   return null;
  ArrayList<Integer> alGeneIds=new ArrayList<Integer>();
  Group group=null;
  int iCounter=0;
  int offset=0;
  for (  Group igroup : groupList) {
    if (igroup.getID() < groupID) {
      offset+=igroup.getSize();
    }
 else     if (igroup.getGroupID() == groupID) {
      group=igroup;
      break;
    }
  }
  for (int i=offset; i < group.getSize() + offset; i++) {
    alGeneIds.add(iCounter,get(i));
    iCounter++;
  }
  return alGeneIds;
}","/** 
 * Returns an ArrayList with indexes of one group (genes/experiments) determined by iGroupIdx.
 * @param groupID index of group in groupList
 * @return ArrayList<Integer> containing all indexes of one group determined by iGroupIdx. Null will bereturned in case of groupList is null.
 */
public ArrayList<Integer> getIDsOfGroup(int groupID){
  if (groupList == null)   return null;
  ArrayList<Integer> alGeneIds=new ArrayList<Integer>();
  Group group=null;
  int iCounter=0;
  int offset=0;
  for (  Group igroup : groupList) {
    if (igroup.getGroupID() < groupID) {
      offset+=igroup.getSize();
    }
 else     if (igroup.getGroupID() == groupID) {
      group=igroup;
      break;
    }
  }
  for (int i=offset; i < group.getSize() + offset; i++) {
    alGeneIds.add(iCounter,get(i));
    iCounter++;
  }
  return alGeneIds;
}",0.9970113568439928
57885,"public void initTextures(ArrayList<Float> uncertaintyVA){
  if (dimensionVA == null || recordVA == null)   return;
  int textureWidth=dimensionVA.size();
  int textureHeight=numberOfElements=recordVA.size();
  if (uncertaintyVA != null) {
    textureHeight=numberOfElements=uncertaintyVA.size();
  }
  numberOfTextures=(int)Math.ceil((double)numberOfElements / MAX_SAMPLES_PER_TEXTURE);
  if (numberOfTextures <= 1)   samplesPerTexture=numberOfElements;
 else   samplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
  textures.clear();
  numberSamples.clear();
  Texture tempTexture;
  samplesPerTexture=(int)Math.ceil((double)textureHeight / numberOfTextures);
  FloatBuffer[] floatBuffer=new FloatBuffer[numberOfTextures];
  for (int iTexture=0; iTexture < numberOfTextures; iTexture++) {
    if (iTexture == numberOfTextures - 1) {
      numberSamples.add(textureHeight - samplesPerTexture * iTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate((textureHeight - samplesPerTexture * iTexture) * textureWidth * 4);
    }
 else {
      numberSamples.add(samplesPerTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate(samplesPerTexture * textureWidth * 4);
    }
  }
  int contentCount=0;
  int textureCounter=0;
  for (int index=0; index < numberOfElements; index++) {
    float uncertainty;
    contentCount++;
    if (uncertaintyVA != null) {
      uncertainty=uncertaintyVA.get(index);
    }
 else {
      uncertainty=glUncHeatmap.getMaxUncertainty(recordVA.get(index));
    }
    for (int i=0; i < textureWidth; i++) {
      float[] rgba=new float[4];
      if (((float)i / textureWidth) > uncertainty) {
        if (uncertainty >= 1)         rgba=this.lightCertain;
 else         rgba=this.lightUncertain;
      }
 else {
        rgba=GLUncertaintyHeatMap.BACKGROUND;
      }
      floatBuffer[textureCounter].put(rgba);
    }
    if (contentCount >= numberSamples.get(textureCounter)) {
      floatBuffer[textureCounter].rewind();
      TextureData texData=new TextureData(GLProfile.getDefault(),GL2.GL_RGBA,textureWidth,numberSamples.get(textureCounter),0,GL2.GL_RGBA,GL2.GL_FLOAT,false,false,false,floatBuffer[textureCounter],null);
      tempTexture=TextureIO.newTexture(0);
      tempTexture.updateImage(texData);
      textures.add(tempTexture);
      textureCounter++;
      contentCount=0;
    }
  }
}","public void initTextures(ArrayList<Float> uncertaintyVA){
  if (dimensionVA == null || recordVA == null)   return;
  int textureWidth=dimensionVA.size();
  int textureHeight=numberOfElements=recordVA.size();
  if (uncertaintyVA != null) {
    textureHeight=numberOfElements=uncertaintyVA.size();
  }
  numberOfTextures=(int)Math.ceil((double)numberOfElements / MAX_SAMPLES_PER_TEXTURE);
  if (numberOfTextures <= 1)   samplesPerTexture=numberOfElements;
 else   samplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
  textures.clear();
  numberSamples.clear();
  Texture tempTexture;
  samplesPerTexture=(int)Math.ceil((double)textureHeight / numberOfTextures);
  FloatBuffer[] floatBuffer=new FloatBuffer[numberOfTextures];
  for (int iTexture=0; iTexture < numberOfTextures; iTexture++) {
    if (iTexture == numberOfTextures - 1) {
      numberSamples.add(textureHeight - samplesPerTexture * iTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate((textureHeight - samplesPerTexture * iTexture) * textureWidth * 4);
    }
 else {
      numberSamples.add(samplesPerTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate(samplesPerTexture * textureWidth * 4);
    }
  }
  int contentCount=0;
  int textureCounter=0;
  for (int index=0; index < numberOfElements; index++) {
    float uncertainty;
    contentCount++;
    if (uncertaintyVA != null) {
      uncertainty=uncertaintyVA.get(index);
    }
 else     if (glUncHeatmap.isMaxUncertaintyCalculated()) {
      uncertainty=glUncHeatmap.getMaxUncertainty(recordVA.get(index));
    }
 else     uncertainty=1;
    for (int i=0; i < textureWidth; i++) {
      float[] rgba=new float[4];
      if (((float)i / textureWidth) > uncertainty) {
        if (uncertainty >= 1)         rgba=this.lightCertain;
 else         rgba=this.lightUncertain;
      }
 else {
        rgba=GLUncertaintyHeatMap.BACKGROUND;
      }
      floatBuffer[textureCounter].put(rgba);
    }
    if (contentCount >= numberSamples.get(textureCounter)) {
      floatBuffer[textureCounter].rewind();
      TextureData texData=new TextureData(GLProfile.getDefault(),GL2.GL_RGBA,textureWidth,numberSamples.get(textureCounter),0,GL2.GL_RGBA,GL2.GL_FLOAT,true,false,false,floatBuffer[textureCounter],null);
      tempTexture=TextureIO.newTexture(0);
      tempTexture.updateImage(texData);
      textures.add(tempTexture);
      textureCounter++;
      contentCount=0;
    }
  }
}",0.982366687911621
57886,"@Override public void render(GL2 gl){
  float yOffset=0.0f;
  float elementHeight=y / numberOfElements;
  float step=0;
  for (int i=0; i < numberOfTextures; i++) {
    step=elementHeight * numberSamples.get(numberOfTextures - i - 1);
    textures.get(numberOfTextures - i - 1).enable();
    textures.get(numberOfTextures - i - 1).bind();
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=textures.get(numberOfTextures - i - 1).getImageTexCoords();
    float x1, x2=0;
    if (orientation) {
      x1=0;
      x2=x;
    }
 else {
      x1=x;
      x2=0;
    }
    gl.glBegin(GL2.GL_QUADS);
    gl.glColor4f(1f,1f,1f,1f);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(x1,yOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(x1,yOffset + step,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(x2,yOffset + step,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(x2,yOffset,0);
    gl.glEnd();
    yOffset+=step;
    textures.get(numberOfTextures - i - 1).disable();
  }
}","@Override public void render(GL2 gl){
  float yOffset=0.0f;
  float elementHeight=y / numberOfElements;
  float step=0;
  for (int i=0; i < numberOfTextures; i++) {
    step=elementHeight * numberSamples.get(numberOfTextures - i - 1);
    textures.get(numberOfTextures - i - 1).enable();
    textures.get(numberOfTextures - i - 1).bind();
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_DECAL);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=textures.get(numberOfTextures - i - 1).getImageTexCoords();
    float x1, x2=0;
    if (orientation) {
      x1=0;
      x2=x;
    }
 else {
      x1=x;
      x2=0;
    }
    gl.glBegin(GL2.GL_QUADS);
    gl.glColor4f(1f,1f,1f,1f);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(x1,yOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(x1,yOffset + step,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(x2,yOffset + step,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(x2,yOffset,0);
    gl.glEnd();
    yOffset+=step;
    textures.get(numberOfTextures - i - 1).disable();
  }
}",0.9737486874343716
57887,"public void init(GLUncertaintyHeatMap uncertaintyHeatMap,DataTable table,RecordVirtualArray recordVA,DimensionVirtualArray dimensionVA,int groupIndex){
  this.recordVA=recordVA;
  this.dimensionVA=dimensionVA;
  this.table=table;
  this.uncertaintyHeatMap=uncertaintyHeatMap;
  ColorMapper colorMapper=uncertaintyHeatMap.getColorMapper();
  this.groupIndex=groupIndex;
  int textureHeight=numberOfElements=recordVA.size();
  int textureWidth=numberOfExpirments=dimensionVA.size();
  numberOfTextures=(int)Math.ceil((double)numberOfElements / MAX_SAMPLES_PER_TEXTURE);
  if (numberOfTextures <= 1)   samplesPerTexture=numberOfElements;
 else   samplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
  textures.clear();
  numberSamples.clear();
  Texture tempTexture;
  samplesPerTexture=(int)Math.ceil((double)textureHeight / numberOfTextures);
  float fLookupValue=0;
  floatBuffer=new FloatBuffer[numberOfTextures];
  for (int itextures=0; itextures < numberOfTextures; itextures++) {
    if (itextures == numberOfTextures - 1) {
      numberSamples.add(textureHeight - samplesPerTexture * itextures);
      floatBuffer[itextures]=FloatBuffer.allocate((textureHeight - samplesPerTexture * itextures) * textureWidth * 4);
    }
 else {
      numberSamples.add(samplesPerTexture);
      floatBuffer[itextures]=FloatBuffer.allocate(samplesPerTexture * textureWidth * 4);
    }
  }
  int contentCount=0;
  int textureCounter=0;
  float opacity=1;
  for (  Integer recordIndex : recordVA) {
    contentCount++;
    for (    Integer dimensionIndex : dimensionVA) {
      fLookupValue=table.get(dimensionIndex).getFloat(uncertaintyHeatMap.getRenderingRepresentation(),recordIndex);
      float[] mappingColor=colorMapper.getColor(fLookupValue);
      float[] rgba={mappingColor[0],mappingColor[1],mappingColor[2],opacity};
      floatBuffer[textureCounter].put(rgba);
    }
    if (contentCount >= numberSamples.get(textureCounter)) {
      floatBuffer[textureCounter].rewind();
      TextureData texData=new TextureData(GLProfile.getDefault(),GL2.GL_RGBA,textureWidth,numberSamples.get(textureCounter),0,GL2.GL_RGBA,GL2.GL_FLOAT,false,false,false,floatBuffer[textureCounter],null);
      tempTexture=TextureIO.newTexture(0);
      tempTexture.updateImage(texData);
      textures.add(tempTexture);
      textureCounter++;
      contentCount=0;
    }
  }
}","public void init(GLUncertaintyHeatMap uncertaintyHeatMap,DataTable table,RecordVirtualArray recordVA,DimensionVirtualArray dimensionVA,int groupIndex){
  this.recordVA=recordVA;
  this.dimensionVA=dimensionVA;
  this.table=table;
  this.uncertaintyHeatMap=uncertaintyHeatMap;
  ColorMapper colorMapper=uncertaintyHeatMap.getColorMapper();
  this.groupIndex=groupIndex;
  int textureHeight=numberOfElements=recordVA.size();
  int textureWidth=numberOfExpirments=dimensionVA.size();
  numberOfTextures=(int)Math.ceil((double)numberOfElements / MAX_SAMPLES_PER_TEXTURE);
  if (numberOfTextures <= 1)   samplesPerTexture=numberOfElements;
 else   samplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
  textures.clear();
  numberSamples.clear();
  Texture tempTexture;
  samplesPerTexture=(int)Math.ceil((double)textureHeight / numberOfTextures);
  float lookupValue=0;
  floatBuffer=new FloatBuffer[numberOfTextures];
  for (int itextures=0; itextures < numberOfTextures; itextures++) {
    if (itextures == numberOfTextures - 1) {
      numberSamples.add(textureHeight - samplesPerTexture * itextures);
      floatBuffer[itextures]=FloatBuffer.allocate((textureHeight - samplesPerTexture * itextures) * textureWidth * 4);
    }
 else {
      numberSamples.add(samplesPerTexture);
      floatBuffer[itextures]=FloatBuffer.allocate(samplesPerTexture * textureWidth * 4);
    }
  }
  int contentCount=0;
  int textureCounter=0;
  float opacity=1;
  for (  Integer recordIndex : recordVA) {
    contentCount++;
    for (    Integer dimensionIndex : dimensionVA) {
      lookupValue=table.get(dimensionIndex).getFloat(uncertaintyHeatMap.getRenderingRepresentation(),recordIndex);
      float[] mappingColor=colorMapper.getColor(lookupValue);
      float[] rgba={mappingColor[0],mappingColor[1],mappingColor[2],opacity};
      floatBuffer[textureCounter].put(rgba);
    }
    if (contentCount >= numberSamples.get(textureCounter)) {
      floatBuffer[textureCounter].rewind();
      TextureData texData=new TextureData(GLProfile.getDefault(),GL2.GL_RGBA,textureWidth,numberSamples.get(textureCounter),0,GL2.GL_RGBA,GL2.GL_FLOAT,true,false,false,floatBuffer[textureCounter],null);
      tempTexture=TextureIO.newTexture(0);
      tempTexture.updateImage(texData);
      textures.add(tempTexture);
      textureCounter++;
      contentCount=0;
    }
  }
}",0.9965753424657534
57888,"private void renderTexture(GL2 gl,Texture texture,float x,float y,float width,float height){
  texture.enable();
  texture.bind();
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
  TextureCoords texCoords=texture.getImageTexCoords();
  gl.glPushName(pickingManager.getPickingID(uncertaintyHeatMap.getID(),PickingType.HEAT_MAP_RECORD_GROUP,groupIndex));
  gl.glBegin(GL2.GL_QUADS);
  gl.glTexCoord2d(texCoords.left(),texCoords.top());
  gl.glVertex3f(x,y,0);
  gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(x,y + height,0);
  gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(x + width,y + height,0);
  gl.glTexCoord2d(texCoords.right(),texCoords.top());
  gl.glVertex3f(x + width,y,0);
  gl.glEnd();
  gl.glPopName();
  texture.disable();
}","private void renderTexture(GL2 gl,Texture texture,float x,float y,float width,float height){
  texture.enable();
  texture.bind();
  gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_DECAL);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
  TextureCoords texCoords=texture.getImageTexCoords();
  gl.glPushName(pickingManager.getPickingID(uncertaintyHeatMap.getID(),PickingType.HEAT_MAP_RECORD_GROUP,groupIndex));
  gl.glBegin(GL2.GL_QUADS);
  gl.glTexCoord2d(texCoords.left(),texCoords.top());
  gl.glVertex3f(x,y,0);
  gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(x,y + height,0);
  gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(x + width,y + height,0);
  gl.glTexCoord2d(texCoords.right(),texCoords.top());
  gl.glVertex3f(x + width,y,0);
  gl.glEnd();
  gl.glPopName();
  texture.disable();
}",0.9664983937586048
57889,"public UncertaintyDetailHeatMapTemplate(GLHeatMap heatMap,GLUncertaintyHeatMap glUncertaintyHeatMap){
  super(heatMap);
  barPlotRenderer=new BarPlotRenderer(heatMap,glUncertaintyHeatMap);
  barPlotRenderer.setContentSpacing(contentSpacing);
  minSelectedFieldHeight*=2;
}","public UncertaintyDetailHeatMapTemplate(GLHeatMap heatMap,GLUncertaintyHeatMap uncertaintyHeatMap){
  super(heatMap);
  this.uncertaintyHeatMap=uncertaintyHeatMap;
  if (uncertaintyHeatMap.isMaxUncertaintyCalculated()) {
    barPlotRenderer=new BarPlotRenderer(heatMap,uncertaintyHeatMap);
    barPlotRenderer.setContentSpacing(contentSpacing);
  }
  minSelectedFieldHeight*=2;
}",0.685099846390169
57890,"@Override public void setStaticLayouts(){
  pixelGLConverter=heatMap.getPixelGLConverter();
  Column mainColumn=new Column(""String_Node_Str"");
  setBaseElementLayout(mainColumn);
  mainColumn.setRatioSizeX(1);
  mainColumn.setRatioSizeY(1);
  mainColumn.setBottomUp(false);
  Row mainRow=new Row(""String_Node_Str"");
  mainRow.setGrabY(true);
  mainRow.setRatioSizeX(1);
  int barPlotPixelWidth=60;
  barPlotLayout=new ElementLayout(""String_Node_Str"");
  barPlotLayout.setRenderer(barPlotRenderer);
  barPlotLayout.setPixelGLConverter(heatMap.getPixelGLConverter());
  barPlotLayout.setPixelSizeX(barPlotPixelWidth);
  mainRow.append(barPlotLayout);
  heatMapLayout=new ElementLayout(""String_Node_Str"");
  heatMapLayout.setRenderer(heatMapRenderer);
  heatMapLayout.addForeGroundRenderer(recordSelectionRenderer);
  heatMapLayout.addForeGroundRenderer(dimensionSelectionRenderer);
  mainRow.append(heatMapLayout);
  ElementLayout spacing=new ElementLayout();
  spacing.setAbsoluteSizeX(0.12f);
  mainRow.append(spacing);
  int contentCaptionPixelWidth=200;
  ElementLayout contentCaptionLayout=new ElementLayout(""String_Node_Str"");
  contentCaptionLayout.setPixelGLConverter(pixelGLConverter);
  contentCaptionLayout.setPixelSizeX(contentCaptionPixelWidth);
  contentCaptionLayout.setRenderer(recordCaptionRenderer);
  mainRow.append(contentCaptionLayout);
  mainColumn.append(mainRow);
  ElementLayout ySpacing=new ElementLayout();
  ySpacing.setAbsoluteSizeY(0.05f);
  mainColumn.append(ySpacing);
  Row dimensionCaptionRow=new Row(""String_Node_Str"");
  dimensionCaptionRow.setAbsoluteSizeY(0.35f);
  ElementLayout dimensionCaptionLayout=new ElementLayout(""String_Node_Str"");
  dimensionCaptionLayout.setRatioSizeY(1);
  dimensionCaptionLayout.setGrabX(true);
  dimensionCaptionLayout.setRenderer(dimensionCaptionRenderer);
  ElementLayout leadSpacingLayout=new ElementLayout();
  leadSpacingLayout.setPixelGLConverter(heatMap.getPixelGLConverter());
  leadSpacingLayout.setPixelSizeX(barPlotPixelWidth);
  dimensionCaptionRow.append(leadSpacingLayout);
  dimensionCaptionRow.append(dimensionCaptionLayout);
  ElementLayout postSpacingLayout=new ElementLayout();
  postSpacingLayout.setPixelGLConverter(pixelGLConverter);
  postSpacingLayout.setPixelSizeX(contentCaptionPixelWidth);
  dimensionCaptionRow.append(postSpacingLayout);
  mainColumn.append(dimensionCaptionRow);
}","@Override public void setStaticLayouts(){
  pixelGLConverter=heatMap.getPixelGLConverter();
  Column mainColumn=new Column(""String_Node_Str"");
  setBaseElementLayout(mainColumn);
  mainColumn.setRatioSizeX(1);
  mainColumn.setRatioSizeY(1);
  mainColumn.setBottomUp(false);
  Row mainRow=new Row(""String_Node_Str"");
  mainRow.setGrabY(true);
  mainRow.setRatioSizeX(1);
  int barPlotPixelWidth=60;
  if (uncertaintyHeatMap.isMaxUncertaintyCalculated()) {
    barPlotLayout=new ElementLayout(""String_Node_Str"");
    barPlotLayout.setRenderer(barPlotRenderer);
    barPlotLayout.setPixelGLConverter(heatMap.getPixelGLConverter());
    barPlotLayout.setPixelSizeX(barPlotPixelWidth);
    mainRow.append(barPlotLayout);
  }
  heatMapLayout=new ElementLayout(""String_Node_Str"");
  heatMapLayout.setRenderer(heatMapRenderer);
  heatMapLayout.addForeGroundRenderer(recordSelectionRenderer);
  heatMapLayout.addForeGroundRenderer(dimensionSelectionRenderer);
  mainRow.append(heatMapLayout);
  ElementLayout spacing=new ElementLayout();
  spacing.setAbsoluteSizeX(0.12f);
  mainRow.append(spacing);
  int contentCaptionPixelWidth=200;
  ElementLayout contentCaptionLayout=new ElementLayout(""String_Node_Str"");
  contentCaptionLayout.setPixelGLConverter(pixelGLConverter);
  contentCaptionLayout.setPixelSizeX(contentCaptionPixelWidth);
  contentCaptionLayout.setRenderer(recordCaptionRenderer);
  mainRow.append(contentCaptionLayout);
  mainColumn.append(mainRow);
  ElementLayout ySpacing=new ElementLayout();
  ySpacing.setAbsoluteSizeY(0.05f);
  mainColumn.append(ySpacing);
  Row dimensionCaptionRow=new Row(""String_Node_Str"");
  dimensionCaptionRow.setAbsoluteSizeY(0.35f);
  ElementLayout dimensionCaptionLayout=new ElementLayout(""String_Node_Str"");
  dimensionCaptionLayout.setRatioSizeY(1);
  dimensionCaptionLayout.setGrabX(true);
  dimensionCaptionLayout.setRenderer(dimensionCaptionRenderer);
  if (uncertaintyHeatMap.isMaxUncertaintyCalculated()) {
    ElementLayout leadSpacingLayout=new ElementLayout();
    leadSpacingLayout.setPixelGLConverter(heatMap.getPixelGLConverter());
    leadSpacingLayout.setPixelSizeX(barPlotPixelWidth);
    dimensionCaptionRow.append(leadSpacingLayout);
  }
  dimensionCaptionRow.append(dimensionCaptionLayout);
  ElementLayout postSpacingLayout=new ElementLayout();
  postSpacingLayout.setPixelGLConverter(pixelGLConverter);
  postSpacingLayout.setPixelSizeX(contentCaptionPixelWidth);
  dimensionCaptionRow.append(postSpacingLayout);
  mainColumn.append(dimensionCaptionRow);
}",0.9713818479149632
57891,"/** 
 * Render the first stage of the hierarchy (OverviewBar)
 * @param gl
 */
private void renderLevel1(GL2 gl){
  float fHeight;
  float fWidth;
  float fyOffset=0.0f;
  fHeight=viewFrustum.getHeight();
  fWidth=renderStyle.getWidthLevel1();
  float fHeightElem=fHeight / iNumberOfElements;
  float fStep=0;
  gl.glColor4f(1f,1f,0f,1f);
  for (int i=0; i < iNrTextures; i++) {
    fStep=fHeightElem * numberSamples.get(iNrTextures - i - 1);
    textures.get(iNrTextures - i - 1).enable();
    textures.get(iNrTextures - i - 1).bind();
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=textures.get(iNrTextures - i - 1).getImageTexCoords();
    gl.glPushName(pickingManager.getPickingID(uniqueID,PickingType.HEAT_MAP_TEXTURE_SELECTION,iNrTextures - i));
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(0,fyOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fWidth,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(fWidth,fyOffset,0);
    gl.glEnd();
    gl.glPopName();
    fyOffset+=fStep;
    textures.get(iNrTextures - i - 1).disable();
  }
}","/** 
 * Render the first stage of the hierarchy (OverviewBar)
 * @param gl
 */
private void renderLevel1(GL2 gl){
  float fHeight;
  float fWidth;
  float fyOffset=0.0f;
  fHeight=viewFrustum.getHeight();
  fWidth=renderStyle.getWidthLevel1();
  float fHeightElem=fHeight / iNumberOfElements;
  float fStep=0;
  gl.glColor4f(1f,1f,0f,1f);
  for (int i=0; i < iNrTextures; i++) {
    fStep=fHeightElem * numberSamples.get(iNrTextures - i - 1);
    textures.get(iNrTextures - i - 1).enable();
    textures.get(iNrTextures - i - 1).bind();
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_DECAL);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=textures.get(iNrTextures - i - 1).getImageTexCoords();
    gl.glPushName(pickingManager.getPickingID(uniqueID,PickingType.HEAT_MAP_TEXTURE_SELECTION,iNrTextures - i));
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(0,fyOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fWidth,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(fWidth,fyOffset,0);
    gl.glEnd();
    gl.glPopName();
    fyOffset+=fStep;
    textures.get(iNrTextures - i - 1).disable();
  }
}",0.9768732654949122
57892,"/** 
 * Render the second stage of the hierarchy (Texture)
 * @param gl
 */
private void renderLevel2(GL2 gl){
  float fHeight;
  fHeight=viewFrustum.getHeight();
  float fWidthLevel2=renderStyle.getWidthLevel2() * fScalingLevel2;
  int iFirstTexture=0;
  int iLastTexture=0;
  int iFirstElementFirstTexture=iFirstSampleLevel1;
  int iLastElementLastTexture=iLastSampleLevel1;
  int iNrTexturesInUse=0;
  gl.glPushAttrib(GL2.GL_CURRENT_BIT | GL2.GL_LINE_BIT);
  gl.glPushName(pickingManager.getPickingID(uniqueID,PickingType.HIER_HEAT_MAP_FIELD_SELECTION,1));
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
  if (bSkipLevel1) {
    Texture TexTemp1=textures.get(0);
    TexTemp1.enable();
    TexTemp1.bind();
    TextureCoords texCoords1=TexTemp1.getImageTexCoords();
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
    gl.glVertex3f(0,0,0);
    gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom());
    gl.glVertex3f(0,fHeight,0);
    gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom());
    gl.glVertex3f(fWidthLevel2,fHeight,0);
    gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
    gl.glVertex3f(fWidthLevel2,0,0);
    gl.glEnd();
    TexTemp1.disable();
  }
 else {
    while (numberSamples.get(iFirstTexture) < iFirstElementFirstTexture) {
      iFirstElementFirstTexture-=numberSamples.get(iFirstTexture);
      if (iFirstTexture < numberSamples.size() - 1)       iFirstTexture++;
    }
    while (iLastElementLastTexture > numberSamples.get(iLastTexture)) {
      iLastElementLastTexture-=numberSamples.get(iLastTexture);
      iLastTexture++;
      if (iLastTexture == numberSamples.size() - 1) {
        if (iLastElementLastTexture > iSamplesPerTexture)         iLastElementLastTexture=iSamplesPerTexture;
        break;
      }
    }
    iNrTexturesInUse=iLastTexture - iFirstTexture + 1;
    if (iNrTexturesInUse == 1) {
      float fScalingFirstElement=(float)iFirstElementFirstTexture / numberSamples.get(iFirstTexture);
      float fScalingLastElement=(float)(iLastElementLastTexture + 1) / numberSamples.get(iFirstTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top() * fScalingLastElement);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + fScalingFirstElement);
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + fScalingFirstElement);
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top() * fScalingLastElement);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp1.disable();
    }
 else     if (iNrTexturesInUse == 2) {
      float fScalingLastTexture=(float)(iLastElementLastTexture + 1) / iSamplesLevel2;
      float fRatioFirstTexture=(float)(numberSamples.get(iFirstTexture) - iFirstElementFirstTexture) / numberSamples.get(iFirstTexture);
      float fRatioLastTexture=(float)(iLastElementLastTexture + 1) / numberSamples.get(iLastTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glEnd();
      TexTemp1.disable();
      Texture TexTemp2=textures.get(iLastTexture);
      TexTemp2.enable();
      TexTemp2.bind();
      TextureCoords texCoords2=TexTemp2.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.top() * fRatioLastTexture);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.bottom());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.top() * fRatioLastTexture);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp2.disable();
    }
 else     if (iNrTexturesInUse == 3) {
      float fScalingFirstTexture=(float)(iSamplesPerTexture - iFirstElementFirstTexture) / iSamplesLevel2;
      float fScalingLastTexture=(float)(iLastElementLastTexture + 1) / iSamplesLevel2;
      float fRatioFirstTexture=(float)(numberSamples.get(iLastTexture) - iFirstElementFirstTexture) / numberSamples.get(iFirstTexture);
      float fRatioLastTexture=(float)(iLastElementLastTexture + 1) / numberSamples.get(iLastTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
      gl.glVertex3f(0,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
      gl.glVertex3f(fWidthLevel2,fHeight * (1 - fScalingFirstTexture),0);
      gl.glEnd();
      TexTemp1.disable();
      Texture TexTemp2=textures.get(iFirstTexture + 1);
      TexTemp2.enable();
      TexTemp2.bind();
      TextureCoords texCoords2=TexTemp2.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.top());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.bottom());
      gl.glVertex3f(0,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.top());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glEnd();
      TexTemp2.disable();
      Texture TexTemp3=textures.get(iLastTexture);
      TexTemp3.enable();
      TexTemp3.bind();
      TextureCoords texCoords3=TexTemp3.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords3.left(),texCoords3.top() * fRatioLastTexture);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords3.left(),texCoords3.bottom());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords3.right(),texCoords3.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords3.right(),texCoords3.top() * fRatioLastTexture);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp3.disable();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  gl.glPopName();
  gl.glPopAttrib();
}","/** 
 * Render the second stage of the hierarchy (Texture)
 * @param gl
 */
private void renderLevel2(GL2 gl){
  float fHeight;
  fHeight=viewFrustum.getHeight();
  float fWidthLevel2=renderStyle.getWidthLevel2() * fScalingLevel2;
  int iFirstTexture=0;
  int iLastTexture=0;
  int iFirstElementFirstTexture=iFirstSampleLevel1;
  int iLastElementLastTexture=iLastSampleLevel1;
  int iNrTexturesInUse=0;
  gl.glPushAttrib(GL2.GL_CURRENT_BIT | GL2.GL_LINE_BIT);
  gl.glPushName(pickingManager.getPickingID(uniqueID,PickingType.HIER_HEAT_MAP_FIELD_SELECTION,1));
  gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_DECAL);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
  if (bSkipLevel1) {
    Texture TexTemp1=textures.get(0);
    TexTemp1.enable();
    TexTemp1.bind();
    TextureCoords texCoords1=TexTemp1.getImageTexCoords();
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
    gl.glVertex3f(0,0,0);
    gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom());
    gl.glVertex3f(0,fHeight,0);
    gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom());
    gl.glVertex3f(fWidthLevel2,fHeight,0);
    gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
    gl.glVertex3f(fWidthLevel2,0,0);
    gl.glEnd();
    TexTemp1.disable();
  }
 else {
    while (numberSamples.get(iFirstTexture) < iFirstElementFirstTexture) {
      iFirstElementFirstTexture-=numberSamples.get(iFirstTexture);
      if (iFirstTexture < numberSamples.size() - 1)       iFirstTexture++;
    }
    while (iLastElementLastTexture > numberSamples.get(iLastTexture)) {
      iLastElementLastTexture-=numberSamples.get(iLastTexture);
      iLastTexture++;
      if (iLastTexture == numberSamples.size() - 1) {
        if (iLastElementLastTexture > iSamplesPerTexture)         iLastElementLastTexture=iSamplesPerTexture;
        break;
      }
    }
    iNrTexturesInUse=iLastTexture - iFirstTexture + 1;
    if (iNrTexturesInUse == 1) {
      float fScalingFirstElement=(float)iFirstElementFirstTexture / numberSamples.get(iFirstTexture);
      float fScalingLastElement=(float)(iLastElementLastTexture + 1) / numberSamples.get(iFirstTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top() * fScalingLastElement);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + fScalingFirstElement);
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + fScalingFirstElement);
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top() * fScalingLastElement);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp1.disable();
    }
 else     if (iNrTexturesInUse == 2) {
      float fScalingLastTexture=(float)(iLastElementLastTexture + 1) / iSamplesLevel2;
      float fRatioFirstTexture=(float)(numberSamples.get(iFirstTexture) - iFirstElementFirstTexture) / numberSamples.get(iFirstTexture);
      float fRatioLastTexture=(float)(iLastElementLastTexture + 1) / numberSamples.get(iLastTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glEnd();
      TexTemp1.disable();
      Texture TexTemp2=textures.get(iLastTexture);
      TexTemp2.enable();
      TexTemp2.bind();
      TextureCoords texCoords2=TexTemp2.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.top() * fRatioLastTexture);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.bottom());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.top() * fRatioLastTexture);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp2.disable();
    }
 else     if (iNrTexturesInUse == 3) {
      float fScalingFirstTexture=(float)(iSamplesPerTexture - iFirstElementFirstTexture) / iSamplesLevel2;
      float fScalingLastTexture=(float)(iLastElementLastTexture + 1) / iSamplesLevel2;
      float fRatioFirstTexture=(float)(numberSamples.get(iLastTexture) - iFirstElementFirstTexture) / numberSamples.get(iFirstTexture);
      float fRatioLastTexture=(float)(iLastElementLastTexture + 1) / numberSamples.get(iLastTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
      gl.glVertex3f(0,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
      gl.glVertex3f(fWidthLevel2,fHeight * (1 - fScalingFirstTexture),0);
      gl.glEnd();
      TexTemp1.disable();
      Texture TexTemp2=textures.get(iFirstTexture + 1);
      TexTemp2.enable();
      TexTemp2.bind();
      TextureCoords texCoords2=TexTemp2.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.top());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.bottom());
      gl.glVertex3f(0,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.top());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glEnd();
      TexTemp2.disable();
      Texture TexTemp3=textures.get(iLastTexture);
      TexTemp3.enable();
      TexTemp3.bind();
      TextureCoords texCoords3=TexTemp3.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords3.left(),texCoords3.top() * fRatioLastTexture);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords3.left(),texCoords3.bottom());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords3.right(),texCoords3.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords3.right(),texCoords3.top() * fRatioLastTexture);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp3.disable();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  gl.glPopName();
  gl.glPopAttrib();
}",0.9952833236415326
57893,"public static void renderHeatmapTextures(GL2 gl,ArrayList<Texture> textures,float height,float width){
  int numElements=0;
  for (  Texture texture : textures) {
    numElements+=texture.getHeight();
  }
  float yOffset=0.0f;
  float elementHeight=height / numElements;
  float textureDrawingHeight=0;
  gl.glColor4f(1.0f,1.0f,0.0f,1.0f);
  for (int i=0; i < textures.size(); i++) {
    Texture texture=textures.get(textures.size() - i - 1);
    textureDrawingHeight=elementHeight * texture.getHeight();
    texture.enable();
    texture.bind();
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=texture.getImageTexCoords();
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(0,yOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0,yOffset + textureDrawingHeight,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(width,yOffset + textureDrawingHeight,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(width,yOffset,0);
    gl.glEnd();
    yOffset+=textureDrawingHeight;
    texture.disable();
  }
}","public static void renderHeatmapTextures(GL2 gl,ArrayList<Texture> textures,float height,float width){
  int numElements=0;
  for (  Texture texture : textures) {
    numElements+=texture.getHeight();
  }
  float yOffset=0.0f;
  float elementHeight=height / numElements;
  float textureDrawingHeight=0;
  gl.glColor4f(1.0f,1.0f,0.0f,1.0f);
  for (int i=0; i < textures.size(); i++) {
    Texture texture=textures.get(textures.size() - i - 1);
    textureDrawingHeight=elementHeight * texture.getHeight();
    texture.enable();
    texture.bind();
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_DECAL);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=texture.getImageTexCoords();
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(0,yOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0,yOffset + textureDrawingHeight,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(width,yOffset + textureDrawingHeight,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(width,yOffset,0);
    gl.glEnd();
    yOffset+=textureDrawingHeight;
    texture.disable();
  }
}",0.9747389693499496
57894,"public void init(){
  DimensionVirtualArray dimensionVA=uncertaintyHeatMap.getDimensionVA();
  DataTable set=uncertaintyHeatMap.getDataDomain().getTable();
  clusterHeatMapLayout=new Column(""String_Node_Str"");
  clusterHeatMapLayout.setRatioSizeX(1f);
  clusterDataUncBarLayout=new Column(""String_Node_Str"");
  clusterDataUncBarLayout.setPixelGLConverter(uncertaintyHeatMap.getPixelGLConverter());
  clusterDataUncBarLayout.setPixelSizeX(50);
  clusterVisUncBarLayout=new Column(""String_Node_Str"");
  clusterVisUncBarLayout.setPixelGLConverter(uncertaintyHeatMap.getPixelGLConverter());
  clusterVisUncBarLayout.setPixelSizeX(50);
  textureRenderer=new HeatMapTextureRenderer(uncertaintyHeatMap,clusterHeatMapLayout);
  clusterHeatMapLayout.setRenderer(textureRenderer);
  dataUncBarTextureRenderer=new BarplotTextureRenderer();
  clusterDataUncBarLayout.setRenderer(dataUncBarTextureRenderer);
  dataUncBarTextureRenderer.setOrientationLeft(true);
  visUncBarTextureRenderer=new BarplotTextureRenderer();
  clusterVisUncBarLayout.setRenderer(visUncBarTextureRenderer);
  clusterLayout.append(clusterVisUncBarLayout);
{
    ElementLayout lineSeparatorLayout=new ElementLayout(""String_Node_Str"");
    PixelGLConverter pixelGLConverter=uncertaintyHeatMap.getPixelGLConverter();
    lineSeparatorLayout.setPixelGLConverter(pixelGLConverter);
    lineSeparatorLayout.setPixelSizeX(2);
    lineSeparatorLayout.setRenderer(new SpacerRenderer(false));
    lineSeparatorLayout.setFrameColor(0.0f,0.0f,0.0f,0.2f);
    clusterLayout.append(lineSeparatorLayout);
  }
  clusterLayout.append(clusterDataUncBarLayout);
{
    ElementLayout lineSeparatorLayout=new ElementLayout(""String_Node_Str"");
    PixelGLConverter pixelGLConverter=uncertaintyHeatMap.getPixelGLConverter();
    lineSeparatorLayout.setPixelGLConverter(pixelGLConverter);
    lineSeparatorLayout.setPixelSizeX(2);
    lineSeparatorLayout.setRenderer(new SpacerRenderer(false));
    lineSeparatorLayout.setFrameColor(0.0f,0.0f,0.0f,0.8f);
    clusterLayout.append(lineSeparatorLayout);
  }
  clusterLayout.append(clusterHeatMapLayout);
{
    ElementLayout lineSeparatorLayout=new ElementLayout(""String_Node_Str"");
    lineSeparatorLayout.setPixelGLConverter(uncertaintyHeatMap.getPixelGLConverter());
    lineSeparatorLayout.setPixelSizeX(2);
    lineSeparatorLayout.setRenderer(new SpacerRenderer(false));
    lineSeparatorLayout.setFrameColor(0.0f,0.0f,0.0f,0.3f);
    clusterLayout.append(lineSeparatorLayout);
  }
  textureRenderer.init(uncertaintyHeatMap,set,clusterVA,dimensionVA,clusterIndex);
  dataUncBarTextureRenderer.init(uncertaintyHeatMap,set,clusterVA,dimensionVA,uncertaintyHeatMap.getColorMapper());
  visUncBarTextureRenderer.init(uncertaintyHeatMap,set,clusterVA,dimensionVA,uncertaintyHeatMap.getColorMapper());
  visUncBarTextureRenderer.setLightCertainColor(GLUncertaintyHeatMap.VIS_UNC);
  visUncBarTextureRenderer.setLightUnCertainColor(GLUncertaintyHeatMap.VIS_UNC);
}","public void init(){
  DimensionVirtualArray dimensionVA=uncertaintyHeatMap.getDimensionVA();
  DataTable set=uncertaintyHeatMap.getDataDomain().getTable();
  clusterHeatMapLayout=new Column(""String_Node_Str"");
  clusterHeatMapLayout.setRatioSizeX(1f);
  clusterVisUncBarLayout=new Column(""String_Node_Str"");
  clusterVisUncBarLayout.setPixelGLConverter(uncertaintyHeatMap.getPixelGLConverter());
  clusterVisUncBarLayout.setPixelSizeX(50);
  textureRenderer=new HeatMapTextureRenderer(uncertaintyHeatMap,clusterHeatMapLayout);
  clusterHeatMapLayout.setRenderer(textureRenderer);
  visUncBarTextureRenderer=new BarplotTextureRenderer();
  clusterVisUncBarLayout.setRenderer(visUncBarTextureRenderer);
  clusterLayout.append(clusterVisUncBarLayout);
{
    ElementLayout lineSeparatorLayout=new ElementLayout(""String_Node_Str"");
    PixelGLConverter pixelGLConverter=uncertaintyHeatMap.getPixelGLConverter();
    lineSeparatorLayout.setPixelGLConverter(pixelGLConverter);
    lineSeparatorLayout.setPixelSizeX(2);
    lineSeparatorLayout.setRenderer(new SpacerRenderer(false));
    lineSeparatorLayout.setFrameColor(0.0f,0.0f,0.0f,0.2f);
    clusterLayout.append(lineSeparatorLayout);
  }
  if (uncertaintyHeatMap.isMaxUncertaintyCalculated()) {
    clusterDataUncBarLayout=new Column(""String_Node_Str"");
    clusterDataUncBarLayout.setPixelGLConverter(uncertaintyHeatMap.getPixelGLConverter());
    clusterDataUncBarLayout.setPixelSizeX(50);
    dataUncBarTextureRenderer=new BarplotTextureRenderer();
    clusterDataUncBarLayout.setRenderer(dataUncBarTextureRenderer);
    dataUncBarTextureRenderer.setOrientationLeft(true);
    clusterLayout.append(clusterDataUncBarLayout);
{
      ElementLayout lineSeparatorLayout=new ElementLayout(""String_Node_Str"");
      PixelGLConverter pixelGLConverter=uncertaintyHeatMap.getPixelGLConverter();
      lineSeparatorLayout.setPixelGLConverter(pixelGLConverter);
      lineSeparatorLayout.setPixelSizeX(2);
      lineSeparatorLayout.setRenderer(new SpacerRenderer(false));
      lineSeparatorLayout.setFrameColor(0.0f,0.0f,0.0f,0.8f);
      clusterLayout.append(lineSeparatorLayout);
    }
    dataUncBarTextureRenderer.init(uncertaintyHeatMap,set,clusterVA,dimensionVA,uncertaintyHeatMap.getColorMapper());
  }
  clusterLayout.append(clusterHeatMapLayout);
{
    ElementLayout lineSeparatorLayout=new ElementLayout(""String_Node_Str"");
    lineSeparatorLayout.setPixelGLConverter(uncertaintyHeatMap.getPixelGLConverter());
    lineSeparatorLayout.setPixelSizeX(2);
    lineSeparatorLayout.setRenderer(new SpacerRenderer(false));
    lineSeparatorLayout.setFrameColor(0.0f,0.0f,0.0f,0.3f);
    clusterLayout.append(lineSeparatorLayout);
  }
  textureRenderer.init(uncertaintyHeatMap,set,clusterVA,dimensionVA,clusterIndex);
  visUncBarTextureRenderer.init(uncertaintyHeatMap,set,clusterVA,dimensionVA,uncertaintyHeatMap.getColorMapper());
  visUncBarTextureRenderer.setLightCertainColor(GLUncertaintyHeatMap.VIS_UNC);
  visUncBarTextureRenderer.setLightUnCertainColor(GLUncertaintyHeatMap.VIS_UNC);
}",0.7502088554720133
57895,"/** 
 * Renders a curve by interpolating the specified line points.
 * @param gl
 * @param linePoints Points that shall be interpolated with a curve. Note that the list must at least contain 4 points and the first and the last point of the list are not interpolated but used to direct the curve at their ends.
 */
public void renderInterpolatedCurve(GL2 gl,List<Point2D> linePoints){
  for (int i=0; i < linePoints.size() - 3; i++) {
    List<Vec3f> curvePoints=computeInterpolatedSpline(linePoints.get(i),linePoints.get(i + 1),linePoints.get(i + 2),linePoints.get(i + 3));
    gl.glBegin(GL2.GL_POINTS);
    for (int j=0; j < curvePoints.size(); j++) {
      gl.glVertex3f(curvePoints.get(j).x(),curvePoints.get(j).y(),curvePoints.get(j).z());
    }
    gl.glEnd();
  }
}","/** 
 * Renders a curve by interpolating the specified line points.
 * @param gl
 * @param linePoints Points that shall be interpolated with a curve. Note that the list must at least contain 4 points and the first and the last point of the list are not interpolated but used to direct the curve at their ends.
 */
public void renderInterpolatedCurve(GL2 gl,List<Point2D> linePoints){
  for (int i=0; i < linePoints.size() - 3; i++) {
    List<Vec3f> curvePoints=computeInterpolatedSpline(linePoints.get(i),linePoints.get(i + 1),linePoints.get(i + 2),linePoints.get(i + 3));
    gl.glBegin(GL2.GL_LINE_STRIP);
    for (int j=0; j < curvePoints.size(); j++) {
      gl.glVertex3f(curvePoints.get(j).x(),curvePoints.get(j).y(),curvePoints.get(j).z());
    }
    gl.glEnd();
  }
}",0.9935400516795866
57896,"@Override public void render(GL2 gl){
  float yOffset=0.0f;
  float elementHeight=y / numberOfElements;
  float step=0;
  for (int i=0; i < numberOfTextures; i++) {
    step=elementHeight * numberSamples.get(numberOfTextures - i - 1);
    textures.get(numberOfTextures - i - 1).enable();
    textures.get(numberOfTextures - i - 1).bind();
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_DECAL);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=textures.get(numberOfTextures - i - 1).getImageTexCoords();
    float x1, x2=0;
    if (orientation) {
      x1=0;
      x2=x;
    }
 else {
      x1=x;
      x2=0;
    }
    gl.glBegin(GL2.GL_QUADS);
    gl.glColor4f(1f,1f,1f,1f);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(x1,yOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(x1,yOffset + step,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(x2,yOffset + step,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(x2,yOffset,0);
    gl.glEnd();
    yOffset+=step;
    textures.get(numberOfTextures - i - 1).disable();
  }
}","@Override public void render(GL2 gl){
  float yOffset=0.0f;
  float elementHeight=y / numberOfElements;
  float step=0;
  for (int i=0; i < numberOfTextures; i++) {
    step=elementHeight * numberSamples.get(numberOfTextures - i - 1);
    textures.get(numberOfTextures - i - 1).enable();
    textures.get(numberOfTextures - i - 1).bind();
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=textures.get(numberOfTextures - i - 1).getImageTexCoords();
    float x1, x2=0;
    if (orientation) {
      x1=0;
      x2=x;
    }
 else {
      x1=x;
      x2=0;
    }
    gl.glBegin(GL2.GL_QUADS);
    gl.glColor4f(1f,1f,1f,1f);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(x1,yOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(x1,yOffset + step,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(x2,yOffset + step,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(x2,yOffset,0);
    gl.glEnd();
    yOffset+=step;
    textures.get(numberOfTextures - i - 1).disable();
  }
}",0.996591683708248
57897,"private void renderTexture(GL2 gl,Texture texture,float x,float y,float width,float height){
  texture.enable();
  texture.bind();
  gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_DECAL);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
  TextureCoords texCoords=texture.getImageTexCoords();
  gl.glPushName(pickingManager.getPickingID(uncertaintyHeatMap.getID(),PickingType.HEAT_MAP_RECORD_GROUP,groupIndex));
  gl.glBegin(GL2.GL_QUADS);
  gl.glTexCoord2d(texCoords.left(),texCoords.top());
  gl.glVertex3f(x,y,0);
  gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(x,y + height,0);
  gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(x + width,y + height,0);
  gl.glTexCoord2d(texCoords.right(),texCoords.top());
  gl.glVertex3f(x + width,y,0);
  gl.glEnd();
  gl.glPopName();
  texture.disable();
}","private void renderTexture(GL2 gl,Texture texture,float x,float y,float width,float height){
  texture.enable();
  texture.bind();
  gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
  TextureCoords texCoords=texture.getImageTexCoords();
  gl.glPushName(pickingManager.getPickingID(uncertaintyHeatMap.getID(),PickingType.HEAT_MAP_RECORD_GROUP,groupIndex));
  gl.glBegin(GL2.GL_QUADS);
  gl.glTexCoord2d(texCoords.left(),texCoords.top());
  gl.glVertex3f(x,y,0);
  gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
  gl.glVertex3f(x,y + height,0);
  gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
  gl.glVertex3f(x + width,y + height,0);
  gl.glTexCoord2d(texCoords.right(),texCoords.top());
  gl.glVertex3f(x + width,y,0);
  gl.glEnd();
  gl.glPopName();
  texture.disable();
}",0.9955634427684116
57898,"/** 
 * Render the first stage of the hierarchy (OverviewBar)
 * @param gl
 */
private void renderLevel1(GL2 gl){
  float fHeight;
  float fWidth;
  float fyOffset=0.0f;
  fHeight=viewFrustum.getHeight();
  fWidth=renderStyle.getWidthLevel1();
  float fHeightElem=fHeight / iNumberOfElements;
  float fStep=0;
  gl.glColor4f(1f,1f,0f,1f);
  for (int i=0; i < iNrTextures; i++) {
    fStep=fHeightElem * numberSamples.get(iNrTextures - i - 1);
    textures.get(iNrTextures - i - 1).enable();
    textures.get(iNrTextures - i - 1).bind();
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_DECAL);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=textures.get(iNrTextures - i - 1).getImageTexCoords();
    gl.glPushName(pickingManager.getPickingID(uniqueID,PickingType.HEAT_MAP_TEXTURE_SELECTION,iNrTextures - i));
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(0,fyOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fWidth,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(fWidth,fyOffset,0);
    gl.glEnd();
    gl.glPopName();
    fyOffset+=fStep;
    textures.get(iNrTextures - i - 1).disable();
  }
}","/** 
 * Render the first stage of the hierarchy (OverviewBar)
 * @param gl
 */
private void renderLevel1(GL2 gl){
  float fHeight;
  float fWidth;
  float fyOffset=0.0f;
  fHeight=viewFrustum.getHeight();
  fWidth=renderStyle.getWidthLevel1();
  float fHeightElem=fHeight / iNumberOfElements;
  float fStep=0;
  gl.glColor4f(1f,1f,0f,1f);
  for (int i=0; i < iNrTextures; i++) {
    fStep=fHeightElem * numberSamples.get(iNrTextures - i - 1);
    textures.get(iNrTextures - i - 1).enable();
    textures.get(iNrTextures - i - 1).bind();
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=textures.get(iNrTextures - i - 1).getImageTexCoords();
    gl.glPushName(pickingManager.getPickingID(uniqueID,PickingType.HEAT_MAP_TEXTURE_SELECTION,iNrTextures - i));
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(0,fyOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(fWidth,fyOffset + fStep,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(fWidth,fyOffset,0);
    gl.glEnd();
    gl.glPopName();
    fyOffset+=fStep;
    textures.get(iNrTextures - i - 1).disable();
  }
}",0.9969879518072288
57899,"/** 
 * Render the second stage of the hierarchy (Texture)
 * @param gl
 */
private void renderLevel2(GL2 gl){
  float fHeight;
  fHeight=viewFrustum.getHeight();
  float fWidthLevel2=renderStyle.getWidthLevel2() * fScalingLevel2;
  int iFirstTexture=0;
  int iLastTexture=0;
  int iFirstElementFirstTexture=iFirstSampleLevel1;
  int iLastElementLastTexture=iLastSampleLevel1;
  int iNrTexturesInUse=0;
  gl.glPushAttrib(GL2.GL_CURRENT_BIT | GL2.GL_LINE_BIT);
  gl.glPushName(pickingManager.getPickingID(uniqueID,PickingType.HIER_HEAT_MAP_FIELD_SELECTION,1));
  gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_DECAL);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
  if (bSkipLevel1) {
    Texture TexTemp1=textures.get(0);
    TexTemp1.enable();
    TexTemp1.bind();
    TextureCoords texCoords1=TexTemp1.getImageTexCoords();
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
    gl.glVertex3f(0,0,0);
    gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom());
    gl.glVertex3f(0,fHeight,0);
    gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom());
    gl.glVertex3f(fWidthLevel2,fHeight,0);
    gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
    gl.glVertex3f(fWidthLevel2,0,0);
    gl.glEnd();
    TexTemp1.disable();
  }
 else {
    while (numberSamples.get(iFirstTexture) < iFirstElementFirstTexture) {
      iFirstElementFirstTexture-=numberSamples.get(iFirstTexture);
      if (iFirstTexture < numberSamples.size() - 1)       iFirstTexture++;
    }
    while (iLastElementLastTexture > numberSamples.get(iLastTexture)) {
      iLastElementLastTexture-=numberSamples.get(iLastTexture);
      iLastTexture++;
      if (iLastTexture == numberSamples.size() - 1) {
        if (iLastElementLastTexture > iSamplesPerTexture)         iLastElementLastTexture=iSamplesPerTexture;
        break;
      }
    }
    iNrTexturesInUse=iLastTexture - iFirstTexture + 1;
    if (iNrTexturesInUse == 1) {
      float fScalingFirstElement=(float)iFirstElementFirstTexture / numberSamples.get(iFirstTexture);
      float fScalingLastElement=(float)(iLastElementLastTexture + 1) / numberSamples.get(iFirstTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top() * fScalingLastElement);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + fScalingFirstElement);
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + fScalingFirstElement);
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top() * fScalingLastElement);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp1.disable();
    }
 else     if (iNrTexturesInUse == 2) {
      float fScalingLastTexture=(float)(iLastElementLastTexture + 1) / iSamplesLevel2;
      float fRatioFirstTexture=(float)(numberSamples.get(iFirstTexture) - iFirstElementFirstTexture) / numberSamples.get(iFirstTexture);
      float fRatioLastTexture=(float)(iLastElementLastTexture + 1) / numberSamples.get(iLastTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glEnd();
      TexTemp1.disable();
      Texture TexTemp2=textures.get(iLastTexture);
      TexTemp2.enable();
      TexTemp2.bind();
      TextureCoords texCoords2=TexTemp2.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.top() * fRatioLastTexture);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.bottom());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.top() * fRatioLastTexture);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp2.disable();
    }
 else     if (iNrTexturesInUse == 3) {
      float fScalingFirstTexture=(float)(iSamplesPerTexture - iFirstElementFirstTexture) / iSamplesLevel2;
      float fScalingLastTexture=(float)(iLastElementLastTexture + 1) / iSamplesLevel2;
      float fRatioFirstTexture=(float)(numberSamples.get(iLastTexture) - iFirstElementFirstTexture) / numberSamples.get(iFirstTexture);
      float fRatioLastTexture=(float)(iLastElementLastTexture + 1) / numberSamples.get(iLastTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
      gl.glVertex3f(0,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
      gl.glVertex3f(fWidthLevel2,fHeight * (1 - fScalingFirstTexture),0);
      gl.glEnd();
      TexTemp1.disable();
      Texture TexTemp2=textures.get(iFirstTexture + 1);
      TexTemp2.enable();
      TexTemp2.bind();
      TextureCoords texCoords2=TexTemp2.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.top());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.bottom());
      gl.glVertex3f(0,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.top());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glEnd();
      TexTemp2.disable();
      Texture TexTemp3=textures.get(iLastTexture);
      TexTemp3.enable();
      TexTemp3.bind();
      TextureCoords texCoords3=TexTemp3.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords3.left(),texCoords3.top() * fRatioLastTexture);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords3.left(),texCoords3.bottom());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords3.right(),texCoords3.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords3.right(),texCoords3.top() * fRatioLastTexture);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp3.disable();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  gl.glPopName();
  gl.glPopAttrib();
}","/** 
 * Render the second stage of the hierarchy (Texture)
 * @param gl
 */
private void renderLevel2(GL2 gl){
  float fHeight;
  fHeight=viewFrustum.getHeight();
  float fWidthLevel2=renderStyle.getWidthLevel2() * fScalingLevel2;
  int iFirstTexture=0;
  int iLastTexture=0;
  int iFirstElementFirstTexture=iFirstSampleLevel1;
  int iLastElementLastTexture=iLastSampleLevel1;
  int iNrTexturesInUse=0;
  gl.glPushAttrib(GL2.GL_CURRENT_BIT | GL2.GL_LINE_BIT);
  gl.glPushName(pickingManager.getPickingID(uniqueID,PickingType.HIER_HEAT_MAP_FIELD_SELECTION,1));
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
  gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
  if (bSkipLevel1) {
    Texture TexTemp1=textures.get(0);
    TexTemp1.enable();
    TexTemp1.bind();
    TextureCoords texCoords1=TexTemp1.getImageTexCoords();
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
    gl.glVertex3f(0,0,0);
    gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom());
    gl.glVertex3f(0,fHeight,0);
    gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom());
    gl.glVertex3f(fWidthLevel2,fHeight,0);
    gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
    gl.glVertex3f(fWidthLevel2,0,0);
    gl.glEnd();
    TexTemp1.disable();
  }
 else {
    while (numberSamples.get(iFirstTexture) < iFirstElementFirstTexture) {
      iFirstElementFirstTexture-=numberSamples.get(iFirstTexture);
      if (iFirstTexture < numberSamples.size() - 1)       iFirstTexture++;
    }
    while (iLastElementLastTexture > numberSamples.get(iLastTexture)) {
      iLastElementLastTexture-=numberSamples.get(iLastTexture);
      iLastTexture++;
      if (iLastTexture == numberSamples.size() - 1) {
        if (iLastElementLastTexture > iSamplesPerTexture)         iLastElementLastTexture=iSamplesPerTexture;
        break;
      }
    }
    iNrTexturesInUse=iLastTexture - iFirstTexture + 1;
    if (iNrTexturesInUse == 1) {
      float fScalingFirstElement=(float)iFirstElementFirstTexture / numberSamples.get(iFirstTexture);
      float fScalingLastElement=(float)(iLastElementLastTexture + 1) / numberSamples.get(iFirstTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top() * fScalingLastElement);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + fScalingFirstElement);
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + fScalingFirstElement);
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top() * fScalingLastElement);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp1.disable();
    }
 else     if (iNrTexturesInUse == 2) {
      float fScalingLastTexture=(float)(iLastElementLastTexture + 1) / iSamplesLevel2;
      float fRatioFirstTexture=(float)(numberSamples.get(iFirstTexture) - iFirstElementFirstTexture) / numberSamples.get(iFirstTexture);
      float fRatioLastTexture=(float)(iLastElementLastTexture + 1) / numberSamples.get(iLastTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glEnd();
      TexTemp1.disable();
      Texture TexTemp2=textures.get(iLastTexture);
      TexTemp2.enable();
      TexTemp2.bind();
      TextureCoords texCoords2=TexTemp2.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.top() * fRatioLastTexture);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.bottom());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.top() * fRatioLastTexture);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp2.disable();
    }
 else     if (iNrTexturesInUse == 3) {
      float fScalingFirstTexture=(float)(iSamplesPerTexture - iFirstElementFirstTexture) / iSamplesLevel2;
      float fScalingLastTexture=(float)(iLastElementLastTexture + 1) / iSamplesLevel2;
      float fRatioFirstTexture=(float)(numberSamples.get(iLastTexture) - iFirstElementFirstTexture) / numberSamples.get(iFirstTexture);
      float fRatioLastTexture=(float)(iLastElementLastTexture + 1) / numberSamples.get(iLastTexture);
      Texture TexTemp1=textures.get(iFirstTexture);
      TexTemp1.enable();
      TexTemp1.bind();
      TextureCoords texCoords1=TexTemp1.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.top());
      gl.glVertex3f(0,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords1.left(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(0,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.bottom() + (1 - fRatioFirstTexture));
      gl.glVertex3f(fWidthLevel2,fHeight,0);
      gl.glTexCoord2d(texCoords1.right(),texCoords1.top());
      gl.glVertex3f(fWidthLevel2,fHeight * (1 - fScalingFirstTexture),0);
      gl.glEnd();
      TexTemp1.disable();
      Texture TexTemp2=textures.get(iFirstTexture + 1);
      TexTemp2.enable();
      TexTemp2.bind();
      TextureCoords texCoords2=TexTemp2.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.top());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords2.left(),texCoords2.bottom());
      gl.glVertex3f(0,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * (1 - fScalingFirstTexture),0);
      gl.glTexCoord2d(texCoords2.right(),texCoords2.top());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glEnd();
      TexTemp2.disable();
      Texture TexTemp3=textures.get(iLastTexture);
      TexTemp3.enable();
      TexTemp3.bind();
      TextureCoords texCoords3=TexTemp3.getImageTexCoords();
      gl.glBegin(GL2.GL_QUADS);
      gl.glTexCoord2d(texCoords3.left(),texCoords3.top() * fRatioLastTexture);
      gl.glVertex3f(0,0,0);
      gl.glTexCoord2d(texCoords3.left(),texCoords3.bottom());
      gl.glVertex3f(0,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords3.right(),texCoords3.bottom());
      gl.glVertex3f(fWidthLevel2,fHeight * fScalingLastTexture,0);
      gl.glTexCoord2d(texCoords3.right(),texCoords3.top() * fRatioLastTexture);
      gl.glVertex3f(fWidthLevel2,0,0);
      gl.glEnd();
      TexTemp3.disable();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  gl.glPopName();
  gl.glPopAttrib();
}",0.9952833236415326
57900,"public static void renderHeatmapTextures(GL2 gl,ArrayList<Texture> textures,float height,float width){
  int numElements=0;
  for (  Texture texture : textures) {
    numElements+=texture.getHeight();
  }
  float yOffset=0.0f;
  float elementHeight=height / numElements;
  float textureDrawingHeight=0;
  gl.glColor4f(1.0f,1.0f,0.0f,1.0f);
  for (int i=0; i < textures.size(); i++) {
    Texture texture=textures.get(textures.size() - i - 1);
    textureDrawingHeight=elementHeight * texture.getHeight();
    texture.enable();
    texture.bind();
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_DECAL);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=texture.getImageTexCoords();
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(0,yOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0,yOffset + textureDrawingHeight,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(width,yOffset + textureDrawingHeight,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(width,yOffset,0);
    gl.glEnd();
    yOffset+=textureDrawingHeight;
    texture.disable();
  }
}","public static void renderHeatmapTextures(GL2 gl,ArrayList<Texture> textures,float height,float width){
  int numElements=0;
  for (  Texture texture : textures) {
    numElements+=texture.getHeight();
  }
  float yOffset=0.0f;
  float elementHeight=height / numElements;
  float textureDrawingHeight=0;
  gl.glColor4f(1.0f,1.0f,0.0f,1.0f);
  for (int i=0; i < textures.size(); i++) {
    Texture texture=textures.get(textures.size() - i - 1);
    textureDrawingHeight=elementHeight * texture.getHeight();
    texture.enable();
    texture.bind();
    gl.glTexEnvi(GL2.GL_TEXTURE_ENV,GL2.GL_TEXTURE_ENV_MODE,GL2.GL_REPLACE);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_S,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_WRAP_T,GL2.GL_CLAMP);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MAG_FILTER,GL2.GL_NEAREST);
    gl.glTexParameteri(GL2.GL_TEXTURE_2D,GL2.GL_TEXTURE_MIN_FILTER,GL2.GL_NEAREST);
    TextureCoords texCoords=texture.getImageTexCoords();
    gl.glBegin(GL2.GL_QUADS);
    gl.glTexCoord2d(texCoords.left(),texCoords.top());
    gl.glVertex3f(0,yOffset,0);
    gl.glTexCoord2d(texCoords.left(),texCoords.bottom());
    gl.glVertex3f(0,yOffset + textureDrawingHeight,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.bottom());
    gl.glVertex3f(width,yOffset + textureDrawingHeight,0);
    gl.glTexCoord2d(texCoords.right(),texCoords.top());
    gl.glVertex3f(width,yOffset,0);
    gl.glEnd();
    yOffset+=textureDrawingHeight;
    texture.disable();
  }
}",0.9967170059093894
57901,"public static void copyFolder(File src,File dest) throws IOException {
  if (src.isDirectory()) {
    if (!dest.exists()) {
      dest.mkdir();
      System.out.println(""String_Node_Str"" + src + ""String_Node_Str""+ dest);
    }
    String files[]=src.list();
    for (    String file : files) {
      File srcFile=new File(src,file);
      File destFile=new File(dest,file);
      copyFolder(srcFile,destFile);
    }
  }
 else {
    InputStream in=new FileInputStream(src);
    OutputStream out=new FileOutputStream(dest);
    byte[] buffer=new byte[1024];
    int length;
    while ((length=in.read(buffer)) > 0) {
      out.write(buffer,0,length);
    }
    in.close();
    out.close();
    System.out.println(""String_Node_Str"" + src + ""String_Node_Str""+ dest);
  }
}","public static void copyFolder(File src,File dest) throws IOException {
  if (src.isDirectory()) {
    if (!dest.exists()) {
      dest.mkdir();
      System.out.println(""String_Node_Str"" + src + ""String_Node_Str""+ dest);
    }
    String files[]=src.list();
    for (    String file : files) {
      File srcFile=new File(src,file);
      File destFile=new File(dest,file);
      copyFolder(srcFile,destFile);
    }
  }
 else {
    InputStream in=new FileInputStream(src);
    OutputStream out=new FileOutputStream(dest);
    byte[] buffer=new byte[1024];
    int length;
    while ((length=in.read(buffer)) > 0) {
      out.write(buffer,0,length);
    }
    in.close();
    out.close();
    Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + src + ""String_Node_Str""+ dest));
  }
}",0.9493029150823828
57902,"public void handleEvent(Event e){
  count[0]++;
  if (!menu.isVisible() && count[0] > MAX_ATTEMPTS) {
    Runnable r=new Runnable(){
      public void run(){
        System.err.println(""String_Node_Str"" + MAX_ATTEMPTS + ""String_Node_Str"");
        menu.setVisible(false);
        menu.dispose();
        popupShell.dispose();
        System.err.println(""String_Node_Str"");
        showMenu(menuCreator,retriesLeft - 1);
      }
    }
;
    display.asyncExec(r);
    return;
  }
  Runnable runnable=new Runnable(){
    public void run(){
      if (!menu.isVisible())       menu.setVisible(true);
 else {
      }
    }
  }
;
  display.asyncExec(runnable);
}","@Override public void handleEvent(Event event){
  popupShell.close();
  popupShell.dispose();
  menuCreator.getView().setLazyMode(false);
}",0.2670025188916876
57903,"public static void showMenu(final ContextMenuCreator menuCreator,final int retriesLeft){
  if (retriesLeft == 0)   return;
  final Display display=menuCreator.getParent().getDisplay();
  final Shell activeShell=menuCreator.getParent().getShell();
  popupShell=new Shell(display,SWT.NO_TRIM | SWT.NO_FOCUS | SWT.ON_TOP);
  Point l=display.getCursorLocation();
  l.x-=2;
  l.y-=2;
  popupShell.setLocation(l);
  popupShell.setSize(4,4);
  popupShell.open();
  final int[] count=new int[1];
  Runnable r=new Runnable(){
    public void run(){
      popupShell.setActive();
      final Menu menu=menuCreator.create(popupShell);
      menu.addListener(SWT.Hide,new Listener(){
        public void handleEvent(        Event e){
          activeShell.setActive();
        }
      }
);
      menu.addListener(SWT.Show,new Listener(){
        public void handleEvent(        Event e){
          count[0]++;
          if (!menu.isVisible() && count[0] > MAX_ATTEMPTS) {
            Runnable r=new Runnable(){
              public void run(){
                System.err.println(""String_Node_Str"" + MAX_ATTEMPTS + ""String_Node_Str"");
                menu.setVisible(false);
                menu.dispose();
                popupShell.dispose();
                System.err.println(""String_Node_Str"");
                showMenu(menuCreator,retriesLeft - 1);
              }
            }
;
            display.asyncExec(r);
            return;
          }
          Runnable runnable=new Runnable(){
            public void run(){
              if (!menu.isVisible())               menu.setVisible(true);
 else {
              }
            }
          }
;
          display.asyncExec(runnable);
        }
      }
);
      menu.setVisible(true);
    }
  }
;
  display.asyncExec(r);
}","public static void showMenu(final ContextMenuCreator menuCreator,final int retriesLeft){
  if (retriesLeft == 0)   return;
  final Display display=menuCreator.getParent().getDisplay();
  final Shell activeShell=menuCreator.getParent().getShell();
  popupShell=new Shell(activeShell,SWT.NO_TRIM | SWT.NO_FOCUS | SWT.ON_TOP);
  Point l=display.getCursorLocation();
  l.x-=2;
  l.y-=2;
  popupShell.setLocation(l);
  popupShell.setSize(4,4);
  popupShell.open();
  final int[] count=new int[1];
  Runnable r=new Runnable(){
    public void run(){
      popupShell.setActive();
      final Menu menu=menuCreator.create(popupShell);
      menu.addListener(SWT.Hide,new Listener(){
        public void handleEvent(        Event e){
          activeShell.setActive();
        }
      }
);
      menu.addListener(SWT.Show,new Listener(){
        public void handleEvent(        Event e){
          count[0]++;
          if (!menu.isVisible() && count[0] > MAX_ATTEMPTS) {
            Runnable r=new Runnable(){
              public void run(){
                System.err.println(""String_Node_Str"" + MAX_ATTEMPTS + ""String_Node_Str"");
                menu.setVisible(false);
                menu.dispose();
                popupShell.dispose();
                System.err.println(""String_Node_Str"");
                showMenu(menuCreator,retriesLeft - 1);
              }
            }
;
            display.asyncExec(r);
            return;
          }
          Runnable runnable=new Runnable(){
            public void run(){
              if (!menu.isVisible())               menu.setVisible(true);
 else {
              }
            }
          }
;
          display.asyncExec(runnable);
        }
      }
);
      popupShell.addListener(SWT.Deactivate,new Listener(){
        @Override public void handleEvent(        Event event){
          popupShell.close();
          popupShell.dispose();
          menuCreator.getView().setLazyMode(false);
        }
      }
);
      menu.setVisible(true);
    }
  }
;
  display.asyncExec(r);
}",0.9270476692125362
57904,"public void open(Composite parent){
  this.parent=parent;
  final ContextMenuCreator menuCreator=this;
  Runnable runnable=new Runnable(){
    public void run(){
      AWTBridgePopupFix.showMenu(menuCreator);
    }
  }
;
  parent.getDisplay().asyncExec(runnable);
}","public void open(AGLView view){
  if (view.isRenderedRemote())   this.view=(AGLView)view.getRemoteRenderingGLView();
 else   this.view=view;
  this.parent=view.getParentComposite();
  final ContextMenuCreator menuCreator=this;
  Runnable runnable=new Runnable(){
    public void run(){
      AWTBridgePopupFix.showMenu(menuCreator);
    }
  }
;
  parent.getDisplay().asyncExec(runnable);
}",0.7064220183486238
57905,"/** 
 * The variaton of   {@link #getDetailedInfo()} which must be called locally. This takes care of integratingpossible information from a remote rendering view.
 * @return the info string
 */
protected String getDetailInfoLocal(){
  if (isRenderedRemote())   return (((AGLView)getRemoteRenderingGLCanvas()).getDetailedInfo());
 else   return getDetailedInfo();
}","/** 
 * The variaton of   {@link #getDetailedInfo()} which must be called locally. This takes care of integratingpossible information from a remote rendering view.
 * @return the info string
 */
protected String getDetailInfoLocal(){
  if (isRenderedRemote())   return (((AGLView)getRemoteRenderingGLView()).getDetailedInfo());
 else   return getDetailedInfo();
}",0.9862637362637364
57906,"/** 
 * The variaton of   {@link #getShortInfo()} which must be called locally. This takes care of integratingpossible information from a remote rendering view.
 * @return the info string
 */
protected String getShortInfoLocal(){
  if (isRenderedRemote())   return (((AGLView)getRemoteRenderingGLCanvas()).getShortInfo());
 else   return getShortInfo();
}","/** 
 * The variaton of   {@link #getShortInfo()} which must be called locally. This takes care of integratingpossible information from a remote rendering view.
 * @return the info string
 */
protected String getShortInfoLocal(){
  if (isRenderedRemote())   return (((AGLView)getRemoteRenderingGLView()).getShortInfo());
 else   return getShortInfo();
}",0.9858757062146892
57907,"public final GLCanvas getParentGLCanvas(){
  if (this.isRenderedRemote())   return getRemoteRenderingGLCanvas().getParentGLCanvas();
  return parentGLCanvas;
}","public final GLCanvas getParentGLCanvas(){
  if (this.isRenderedRemote())   return getRemoteRenderingGLView().getParentGLCanvas();
  return parentGLCanvas;
}",0.9683544303797468
57908,"/** 
 * This class uses the pickingManager to check if any events have occurred it calls the abstract handleEvents method where the events should be handled
 * @param gl
 */
protected final void checkForHits(final GL2 gl){
  Set<String> hitTypes=pickingManager.getHitTypes(uniqueID);
  if (hitTypes == null)   return;
  contextMenuCreator.clear();
  for (  String pickingType : hitTypes) {
    ArrayList<Pick> alHits=null;
    alHits=pickingManager.getHits(uniqueID,pickingType);
    if (alHits != null && alHits.size() != 0) {
      for (int iCount=0; iCount < alHits.size(); iCount++) {
        Pick tempPick=alHits.get(iCount);
        int externalID=tempPick.getID();
        if (externalID == -1) {
          continue;
        }
        PickingMode ePickingMode=tempPick.getPickingMode();
        handlePicking(pickingType,ePickingMode,externalID,tempPick);
        try {
          handlePickingEvents(PickingType.valueOf(pickingType),ePickingMode,externalID,tempPick);
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"" + e.toString());
        }
        pickingManager.flushHits(uniqueID,pickingType);
      }
    }
  }
  if (contextMenuCreator.hasMenuItems())   contextMenuCreator.open(parentComposite);
}","/** 
 * This class uses the pickingManager to check if any events have occurred it calls the abstract handleEvents method where the events should be handled
 * @param gl
 */
protected final void checkForHits(final GL2 gl){
  Set<String> hitTypes=pickingManager.getHitTypes(uniqueID);
  if (hitTypes == null)   return;
  contextMenuCreator.clear();
  for (  String pickingType : hitTypes) {
    ArrayList<Pick> alHits=null;
    alHits=pickingManager.getHits(uniqueID,pickingType);
    if (alHits != null && alHits.size() != 0) {
      for (int iCount=0; iCount < alHits.size(); iCount++) {
        Pick tempPick=alHits.get(iCount);
        int externalID=tempPick.getID();
        if (externalID == -1) {
          continue;
        }
        PickingMode ePickingMode=tempPick.getPickingMode();
        handlePicking(pickingType,ePickingMode,externalID,tempPick);
        try {
          handlePickingEvents(PickingType.valueOf(pickingType),ePickingMode,externalID,tempPick);
        }
 catch (        Exception e) {
          System.out.println(""String_Node_Str"" + e.toString());
        }
        pickingManager.flushHits(uniqueID,pickingType);
      }
    }
  }
  if (contextMenuCreator.hasMenuItems())   contextMenuCreator.open(this);
}",0.9923664122137404
57909,"@Override public String toString(){
  return ""String_Node_Str"" + isRenderedRemote() + ""String_Node_Str""+ recordVA.size()+ ""String_Node_Str""+ dimensionVA.size()+ ""String_Node_Str""+ recordVAType+ ""String_Node_Str""+ getRemoteRenderingGLCanvas();
}","@Override public String toString(){
  return ""String_Node_Str"" + isRenderedRemote() + ""String_Node_Str""+ recordVA.size()+ ""String_Node_Str""+ dimensionVA.size()+ ""String_Node_Str""+ recordVAType+ ""String_Node_Str""+ getRemoteRenderingGLView();
}",0.9794238683127572
57910,"@Override public void handleRadialMenuSelection(int externalId,int selection){
  ignoredFilter=-1;
  if (externalId >= filterList.size() || externalId < 0)   return;
  FilterItem<?> filter=filterList.get(externalId);
switch (selection) {
case 0:
    filter.triggerRemove();
  selectionManager.removeFromType(SelectionType.SELECTION,externalId);
break;
case 1:
try {
filter.showDetailsDialog();
}
 catch (Exception e) {
System.out.println(""String_Node_Str"" + e);
}
break;
}
}","@Override public void handleRadialMenuSelection(int externalId,int selection){
  ignoredFilter=-1;
  if (externalId >= filterList.size() || externalId < 0)   return;
  FilterItem<?> filter=filterList.get(externalId);
switch (selection) {
case 0:
    filter.triggerRemove();
  selectionManager.removeFromType(SelectionType.SELECTION,externalId);
break;
case 1:
filter.showDetailsDialog();
break;
}
}",0.8967889908256881
57911,"/** 
 * Rebuild the filter pipeline
 */
public void updateFilterPipeline(){
  pipelineNeedsUpdate=false;
  Logger.log(new Status(IStatus.INFO,this.toString(),""String_Node_Str"" + filterType));
  filterList.clear();
  int filterID=0;
  for (  Filter<?> filter : filterType == FilterType.RECORD ? dataDomain.getRecordFilterManager().getFilterPipe() : dataDomain.getDimensionFilterManager().getFilterPipe()) {
    FilterItem<?> filterItem=new FilterItem(filterID++,filter,pickingManager,uniqueID);
    if (filter instanceof RecordMetaOrFilter)     filterItem.setRepresentation(new FilterRepresentationMetaOrAdvanced(renderStyle,pickingManager,uniqueID));
 else     filterItem.setRepresentation(new FilterRepresentation(renderStyle,pickingManager,uniqueID));
    filterList.add(filterItem);
  }
  VirtualArray<?,?,?> currentVA=filterType == FilterType.RECORD ? dataDomain.getRecordFilterManager().getBaseVA().clone() : dataDomain.getDimensionFilterManager().getBaseVA().clone();
  for (  FilterItem<?> filter : filterList) {
    filter.setInput(currentVA);
    currentVA=filter.getOutput().clone();
  }
  updateFilterSize();
}","/** 
 * Rebuild the filter pipeline
 */
public void updateFilterPipeline(){
  pipelineNeedsUpdate=false;
  filterList.clear();
  int filterID=0;
  for (  Filter<?> filter : filterType == FilterType.RECORD ? dataDomain.getRecordFilterManager().getFilterPipe() : dataDomain.getDimensionFilterManager().getFilterPipe()) {
    FilterItem<?> filterItem=new FilterItem(filterID++,filter,pickingManager,uniqueID);
    if (filter instanceof RecordMetaOrFilter)     filterItem.setRepresentation(new FilterRepresentationMetaOrAdvanced(renderStyle,pickingManager,uniqueID));
 else     filterItem.setRepresentation(new FilterRepresentation(renderStyle,pickingManager,uniqueID));
    filterList.add(filterItem);
  }
  VirtualArray<?,?,?> currentVA=filterType == FilterType.RECORD ? dataDomain.getRecordFilterManager().getBaseVA().clone() : dataDomain.getDimensionFilterManager().getBaseVA().clone();
  for (  FilterItem<?> filter : filterList) {
    filter.setInput(currentVA);
    currentVA=filter.getOutput().clone();
  }
  updateFilterSize();
}",0.959628770301624
57912,"@Override public String toString(){
  if (tree == null)   return new String(""String_Node_Str"");
  return ""String_Node_Str"" + ((bRenderContentTree) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ isRenderedRemote()+ ""String_Node_Str""+ rootNode.getNrLeaves()+ ((bRenderContentTree) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ getRemoteRenderingGLCanvas();
}","@Override public String toString(){
  if (tree == null)   return new String(""String_Node_Str"");
  return ""String_Node_Str"" + ((bRenderContentTree) ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ isRenderedRemote()+ ""String_Node_Str""+ rootNode.getNrLeaves()+ ((bRenderContentTree) ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ getRemoteRenderingGLView();
}",0.987012987012987
57913,"@Override protected void initLists(){
  if (recordVAType.equals(CONTENT_EMBEDDED_VA)) {
    table.setRecordVA(recordVAType,new RecordVirtualArray(recordVAType));
  }
 else {
    if (bRenderOnlyContext)     recordVAType=DataTable.RECORD_CONTEXT;
 else     recordVAType=DataTable.RECORD;
  }
  if (recordVA == null)   recordVA=table.getRecordData(recordVAType).getRecordVA();
  if (dimensionVA == null)   dimensionVA=table.getDimensionData(dimensionVAType).getDimensionVA();
  recordSelectionManager.setVA(recordVA);
  dimensionSelectionManager.setVA(dimensionVA);
  renderStyle=new HeatMapRenderStyle(this,viewFrustum);
  if (getRemoteRenderingGLCanvas() instanceof GLHierarchicalHeatMap)   renderStyle.setUseFishEye(false);
}","@Override protected void initLists(){
  if (recordVAType.equals(CONTENT_EMBEDDED_VA)) {
    table.setRecordVA(recordVAType,new RecordVirtualArray(recordVAType));
  }
 else {
    if (bRenderOnlyContext)     recordVAType=DataTable.RECORD_CONTEXT;
 else     recordVAType=DataTable.RECORD;
  }
  if (recordVA == null)   recordVA=table.getRecordData(recordVAType).getRecordVA();
  if (dimensionVA == null)   dimensionVA=table.getDimensionData(dimensionVAType).getDimensionVA();
  recordSelectionManager.setVA(recordVA);
  dimensionSelectionManager.setVA(dimensionVA);
  renderStyle=new HeatMapRenderStyle(this,viewFrustum);
  if (getRemoteRenderingGLView() instanceof GLHierarchicalHeatMap)   renderStyle.setUseFishEye(false);
}",0.9930939226519336
57914,"@Override public String toString(){
  return ""String_Node_Str"" + isRenderedRemote() + ""String_Node_Str""+ recordVA.size()+ ""String_Node_Str""+ dimensionVA.size()+ ""String_Node_Str""+ recordVAType+ ""String_Node_Str""+ getRemoteRenderingGLCanvas();
}","@Override public String toString(){
  return ""String_Node_Str"" + isRenderedRemote() + ""String_Node_Str""+ recordVA.size()+ ""String_Node_Str""+ dimensionVA.size()+ ""String_Node_Str""+ recordVAType+ ""String_Node_Str""+ getRemoteRenderingGLView();
}",0.9794238683127572
57915,"@Override public void displayLocal(GL2 gl){
  if (glExperimentDendrogramView != null)   glExperimentDendrogramView.processEvents();
  if (glContentDendrogramView != null)   glContentDendrogramView.processEvents();
  if (glHeatMapView != null)   glHeatMapView.processEvents();
  if (table == null)   return;
  if (!lazyMode)   pickingManager.handlePicking(this,gl);
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  if (!lazyMode)   checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF) {
    renderBusyMode(gl);
  }
}","@Override public void displayLocal(GL2 gl){
  if (glExperimentDendrogramView != null)   glExperimentDendrogramView.processEvents();
  if (glContentDendrogramView != null)   glContentDendrogramView.processEvents();
  if (glHeatMapView != null)   glHeatMapView.processEvents();
  if (table == null)   return;
  if (!lazyMode) {
    pickingManager.handlePicking(this,gl);
  }
  if (bIsDisplayListDirtyLocal) {
    buildDisplayList(gl,iGLDisplayListIndexLocal);
    bIsDisplayListDirtyLocal=false;
  }
  iGLDisplayListToCall=iGLDisplayListIndexLocal;
  display(gl);
  if (!lazyMode)   checkForHits(gl);
  if (eBusyModeState != EBusyModeState.OFF) {
    renderBusyMode(gl);
  }
}",0.9940298507462688
57916,"@Override public String toString(){
  return ""String_Node_Str"" + isRenderedRemote() + ""String_Node_Str""+ recordVA.size()+ ""String_Node_Str""+ dimensionVA.size()+ ""String_Node_Str""+ recordVAType+ ""String_Node_Str""+ getRemoteRenderingGLCanvas();
}","@Override public String toString(){
  return ""String_Node_Str"" + isRenderedRemote() + ""String_Node_Str""+ recordVA.size()+ ""String_Node_Str""+ dimensionVA.size()+ ""String_Node_Str""+ recordVAType+ ""String_Node_Str""+ getRemoteRenderingGLView();
}",0.9794238683127572
57917,"@Override public String getDetailedInfo(){
  if (isRenderedRemote())   return (((AGLView)getRemoteRenderingGLCanvas()).getDetailedInfo());
  StringBuffer sInfoText=new StringBuffer();
  sInfoText.append(""String_Node_Str"" + pathway.getTitle() + ""String_Node_Str""+ pathway.getType().getName());
  return sInfoText.toString();
}","@Override public String getDetailedInfo(){
  if (isRenderedRemote())   return (((AGLView)getRemoteRenderingGLView()).getDetailedInfo());
  StringBuffer sInfoText=new StringBuffer();
  sInfoText.append(""String_Node_Str"" + pathway.getTitle() + ""String_Node_Str""+ pathway.getType().getName());
  return sInfoText.toString();
}",0.984567901234568
57918,"@Override public String toString(){
  return ""String_Node_Str"" + isRenderedRemote() + ""String_Node_Str""+ recordVA.size()+ ""String_Node_Str""+ dimensionVA.size()+ ""String_Node_Str""+ recordVAType+ ""String_Node_Str""+ getRemoteRenderingGLCanvas();
}","@Override public String toString(){
  return ""String_Node_Str"" + isRenderedRemote() + ""String_Node_Str""+ recordVA.size()+ ""String_Node_Str""+ dimensionVA.size()+ ""String_Node_Str""+ recordVAType+ ""String_Node_Str""+ getRemoteRenderingGLView();
}",0.9794238683127572
57919,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void handleEvent(final AEvent event){
  try {
    if ((event instanceof LoadPathwayEvent || event instanceof LoadPathwaysByGeneEvent) && PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(""String_Node_Str"") == null && PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(""String_Node_Str"") == null) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
    }
 else     if (event instanceof OpenMatchmakerViewEvent) {
      try {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
      }
 catch (      PartInitException e) {
        e.printStackTrace();
      }
      CompareGroupsEvent compareGroupsEvent=new CompareGroupsEvent(((OpenMatchmakerViewEvent)event).getTablesToCompare());
      compareGroupsEvent.setSender(this);
      GeneralManager.get().getEventPublisher().triggerEvent(compareGroupsEvent);
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          StartClusteringAction startClusteringAction=new StartClusteringAction();
          startClusteringAction.setTables(((OpenMatchmakerViewEvent)event).getTablesToCompare());
          startClusteringAction.run();
        }
      }
);
    }
 else     if (event instanceof BookmarkEvent<?>) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
      event.setSender(handler);
      GeneralManager.get().getEventPublisher().triggerEvent(event);
    }
 else     if (event instanceof OpenViewEvent) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(((OpenViewEvent)event).getViewType());
    }
  }
 catch (  PartInitException e) {
    e.printStackTrace();
    Logger.log(new Status(IStatus.INFO,this.toString(),""String_Node_Str"",e));
  }
}","@Override public void handleEvent(final AEvent event){
  try {
    if ((event instanceof LoadPathwayEvent || event instanceof LoadPathwaysByGeneEvent) && PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(""String_Node_Str"") == null && PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(""String_Node_Str"") == null) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
    }
 else     if (event instanceof OpenMatchmakerViewEvent) {
      try {
        PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
      }
 catch (      PartInitException e) {
        e.printStackTrace();
      }
      CompareGroupsEvent compareGroupsEvent=new CompareGroupsEvent(((OpenMatchmakerViewEvent)event).getTablesToCompare());
      compareGroupsEvent.setSender(this);
      GeneralManager.get().getEventPublisher().triggerEvent(compareGroupsEvent);
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          StartClusteringAction startClusteringAction=new StartClusteringAction();
          startClusteringAction.setTables(((OpenMatchmakerViewEvent)event).getTablesToCompare());
          startClusteringAction.run();
        }
      }
);
    }
 else     if (event instanceof BookmarkEvent<?>) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""String_Node_Str"");
      event.setSender(handler);
      GeneralManager.get().getEventPublisher().triggerEvent(event);
    }
 else     if (event instanceof OpenViewEvent) {
      PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(((OpenViewEvent)event).getViewType());
    }
  }
 catch (  PartInitException e) {
    e.printStackTrace();
    Logger.log(new Status(IStatus.INFO,this.toString(),""String_Node_Str"",e));
  }
}",0.9853883619584722
57920,"@Override public void mousePressed(MouseEvent mouseEvent){
  mouseReleased=false;
  leftMouseButtonPressed=false;
  rightMouseButtonPressed=false;
  pickedPointDragStart.setLocation(mouseEvent.getPoint());
  prevMouseX=mouseEvent.getX();
  prevMouseY=mouseEvent.getY();
  if (mouseEvent.getClickCount() > 1) {
    mouseDoubleClick=true;
    return;
  }
  if (mouseEvent.getButton() == MouseEvent.BUTTON1) {
    leftMouseButtonPressed=true;
  }
}","@Override public void mousePressed(MouseEvent mouseEvent){
  mouseReleased=false;
  leftMouseButtonPressed=false;
  rightMouseButtonPressed=false;
  pickedPointDragStart.setLocation(mouseEvent.getPoint());
  prevMouseX=mouseEvent.getX();
  prevMouseY=mouseEvent.getY();
  if (mouseEvent.getClickCount() > 1) {
    mouseDoubleClick=true;
    return;
  }
  if (mouseEvent.getButton() == MouseEvent.BUTTON1)   leftMouseButtonPressed=true;
 else   if (mouseEvent.getButton() == MouseEvent.BUTTON3)   rightMouseButtonPressed=true;
}",0.8353909465020576
57921,"@Override public void handleSelectionUpdate(ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (pathway == null)   return;
  if (selectionDelta.getIDType() == mappingDataDomain.getDimensionIDType()) {
    for (    SelectionDeltaItem item : selectionDelta.getAllItems()) {
      if (item.getSelectionType() == SelectionType.MOUSE_OVER) {
        iCurrentDimensionIndex=item.getPrimaryID();
        break;
      }
    }
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType().getIDCategory() == mappingDataDomain.getRecordIDCategory()) {
    ISelectionDelta resolvedDelta=resolveExternalSelectionDelta(selectionDelta);
    selectionManager.setDelta(resolvedDelta);
    setDisplayListDirty();
    int iPathwayHeight=pathway.getHeight();
    for (    SelectionDeltaItem item : resolvedDelta) {
      if (item.getSelectionType() != SelectionType.MOUSE_OVER && item.getSelectionType() != SelectionType.SELECTION) {
        continue;
      }
      PathwayVertexGraphItemRep vertexRep=(PathwayVertexGraphItemRep)pathwayItemManager.getItem(item.getPrimaryID());
      int viewID=uniqueID;
      SelectedElementRep elementRep=new SelectedElementRep(mappingDataDomain.getRecordIDType(),viewID,vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X * vecScaling.x() + vecTranslation.x(),(iPathwayHeight - vertexRep.getYOrigin()) * PathwayRenderStyle.SCALING_FACTOR_Y * vecScaling.y() + vecTranslation.y(),0);
      for (      Integer iConnectionID : item.getConnectionIDs()) {
        connectedElementRepresentationManager.addSelection(iConnectionID,elementRep,item.getSelectionType());
      }
    }
  }
}","@Override public void handleSelectionUpdate(ISelectionDelta selectionDelta,boolean scrollToSelection,String info){
  if (pathway == null)   return;
  if (selectionDelta.getIDType() == mappingDataDomain.getDimensionIDType()) {
    for (    SelectionDeltaItem item : selectionDelta.getAllItems()) {
      if (item.getSelectionType() == SelectionType.MOUSE_OVER && !item.isRemove()) {
        iCurrentDimensionIndex=item.getPrimaryID();
        System.out.println(item);
        break;
      }
    }
    setDisplayListDirty();
  }
 else   if (selectionDelta.getIDType().getIDCategory() == mappingDataDomain.getRecordIDCategory()) {
    ISelectionDelta resolvedDelta=resolveExternalSelectionDelta(selectionDelta);
    selectionManager.setDelta(resolvedDelta);
    setDisplayListDirty();
    int iPathwayHeight=pathway.getHeight();
    for (    SelectionDeltaItem item : resolvedDelta) {
      if (item.getSelectionType() != SelectionType.MOUSE_OVER && item.getSelectionType() != SelectionType.SELECTION) {
        continue;
      }
      PathwayVertexGraphItemRep vertexRep=(PathwayVertexGraphItemRep)pathwayItemManager.getItem(item.getPrimaryID());
      int viewID=uniqueID;
      SelectedElementRep elementRep=new SelectedElementRep(mappingDataDomain.getRecordIDType(),viewID,vertexRep.getXOrigin() * PathwayRenderStyle.SCALING_FACTOR_X * vecScaling.x() + vecTranslation.x(),(iPathwayHeight - vertexRep.getYOrigin()) * PathwayRenderStyle.SCALING_FACTOR_Y * vecScaling.y() + vecTranslation.y(),0);
      for (      Integer iConnectionID : item.getConnectionIDs()) {
        connectedElementRepresentationManager.addSelection(iConnectionID,elementRep,item.getSelectionType());
      }
    }
  }
}",0.9837935174069627
57922,"@Override public void mouseReleased(MouseEvent mouseEvent){
  bMouseDragged=false;
  if (mouseEvent.getButton() == MouseEvent.BUTTON1) {
    pickedPointCurrent=mouseEvent.getPoint();
  }
  bMouseReleased=true;
  bMouseDoubleClick=false;
  if ((mouseEvent.getModifiers() & InputEvent.BUTTON1_MASK) != 0) {
    bMouseLeft_StandbyZoom=false;
    bMouseMiddleButtonPressed=false;
    if (bMouseRight_StandbyRotate) {
      bRightMouseButtonPressed=true;
    }
  }
  if ((mouseEvent.getModifiers() & InputEvent.BUTTON3_MASK) != 0) {
    if (bMouseLeft_StandbyZoom) {
      bMouseMiddleButtonPressed=false;
    }
 else {
      bRightMouseButtonPressed=false;
      bMouseRight_StandbyRotate=false;
    }
  }
  if ((mouseEvent.getModifiers() & InputEvent.BUTTON2_MASK) != 0) {
    bMouseMiddleButtonPressed=false;
  }
}","@Override public void mouseReleased(MouseEvent mouseEvent){
  bMouseDragged=false;
  if (mouseEvent.getButton() == MouseEvent.BUTTON1) {
    pickedPointCurrent=mouseEvent.getPoint();
  }
  bMouseReleased=true;
  bMouseDoubleClick=false;
  if ((mouseEvent.getModifiers() & InputEvent.BUTTON2_MASK) != 0) {
    bMouseMiddleButtonPressed=false;
  }
}",0.5987920621225195
57923,"/** 
 * Handles the picking events and triggers selection events
 * @param pickingMode for example mouse-over or clicked
 * @param externalID the id specified when calling {@link PickingIDManager#getPickingID(ABookmarkContainer,int)}Internal to the specific BookmarkContainer
 */
void handleEvents(PickingType ePickingType,PickingMode pickingMode,Integer externalID,final Pick pick){
  SelectionType selectionType;
switch (ePickingType) {
case BOOKMARK_ELEMENT:
switch (pickingMode) {
case CLICKED:
      selectionType=SelectionType.SELECTION;
    break;
case MOUSE_OVER:
  selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
BookmarkContextMenuItemContainer bookmarkContextMenuItemContainer=new BookmarkContextMenuItemContainer();
bookmarkContextMenuItemContainer.tableID(internalIDType,externalID);
ContextMenu contextMenu=manager.getContextMenu();
contextMenu.addItemContanier(bookmarkContextMenuItemContainer);
if (manager.isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),manager.getParentGLCanvas().getWidth(),manager.getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(manager);
}
break;
default :
return;
}
if (selectionType == SelectionType.SELECTION) {
}
selectionManager.clearSelection(selectionType);
selectionManager.addToType(selectionType,externalID);
ISelectionDelta selectionDelta=selectionManager.getDelta();
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainID(manager.getDataDomain().getDataDomainID());
event.setSelectionDelta((SelectionDelta)selectionDelta);
GeneralManager.get().getEventPublisher().triggerEvent(event);
break;
case BOOKMARK_CONTAINER_HEADING:
break;
}
}","/** 
 * Handles the picking events and triggers selection events
 * @param pickingMode for example mouse-over or clicked
 * @param externalID the id specified when calling {@link PickingIDManager#getPickingID(ABookmarkContainer,int)}Internal to the specific BookmarkContainer
 */
void handleEvents(PickingType ePickingType,PickingMode pickingMode,Integer externalID,final Pick pick){
  SelectionType selectionType;
  System.out.println(pickingMode);
switch (ePickingType) {
case BOOKMARK_ELEMENT:
switch (pickingMode) {
case CLICKED:
      selectionType=SelectionType.SELECTION;
    break;
case MOUSE_OVER:
  selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
@Override public void run(){
final Shell shell=manager.getParentComposite().getShell();
final Menu menu=new Menu(shell,SWT.POP_UP);
Point point=manager.getParentComposite().toDisplay(0,0);
System.out.println(point);
menu.setLocation(point.x + pick.getPickedPoint().x,point.y + pick.getPickedPoint().y);
MenuItem item=new MenuItem(menu,SWT.PUSH);
item.setText(""String_Node_Str"");
item=new MenuItem(menu,SWT.PUSH);
item.setText(""String_Node_Str"");
item=new MenuItem(menu,SWT.PUSH);
item.setText(""String_Node_Str"");
item=new MenuItem(menu,SWT.PUSH);
item.setText(""String_Node_Str"");
item=new MenuItem(menu,SWT.PUSH);
item.setText(""String_Node_Str"");
item=new MenuItem(menu,SWT.PUSH);
item.setText(""String_Node_Str"");
shell.setMenu(menu);
menu.setVisible(true);
}
}
);
break;
default :
return;
}
if (selectionType == SelectionType.SELECTION) {
}
selectionManager.clearSelection(selectionType);
selectionManager.addToType(selectionType,externalID);
ISelectionDelta selectionDelta=selectionManager.getDelta();
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainID(manager.getDataDomain().getDataDomainID());
event.setSelectionDelta((SelectionDelta)selectionDelta);
GeneralManager.get().getEventPublisher().triggerEvent(event);
break;
case BOOKMARK_CONTAINER_HEADING:
break;
}
}",0.6499083529719822
57924,"@Override public void postStartup(){
  super.postStartup();
  filterPreferencePages();
}","@Override public void postStartup(){
  super.postStartup();
  filterPreferencePages();
  autoSaver=new AutoSaver();
  GeneralManager.get().getViewManager().getDisplayLoopExecution().executeMultiple(autoSaver);
}",0.5886287625418061
57925,"@Override public void init(ApplicationInitData appInitData){
  if (loadSampleData) {
    appInitData.setLoadPathways(true);
    GeneralManager.get().getPreferenceStore().setValue(PreferenceConstants.LAST_CHOSEN_PATHWAY_DATA_SOURCES,""String_Node_Str"");
    GeneralManager.get().getBasicInfo().setOrganism(Organism.HOMO_SAPIENS);
    FileOperations.deleteDirectory(GeneralManager.CALEYDO_HOME_PATH + ""String_Node_Str"");
  }
  this.dataDomain=(ATableBasedDataDomain)DataDomainManager.get().createDataDomain(""String_Node_Str"");
  super.init(appInitData);
}","@Override public void init(ApplicationInitData appInitData){
  if (loadSampleData) {
    appInitData.setLoadPathways(true);
    GeneralManager.get().getPreferenceStore().setValue(PreferenceConstants.LAST_CHOSEN_PATHWAY_DATA_SOURCES,""String_Node_Str"");
    GeneralManager.get().getBasicInfo().setOrganism(Organism.HOMO_SAPIENS);
  }
  this.dataDomain=(ATableBasedDataDomain)DataDomainManager.get().createDataDomain(""String_Node_Str"");
  super.init(appInitData);
}",0.7120315581854043
57926,"public SetBasedSegmentData(ATableBasedDataDomain dataDomain,DataTable table,RecordVirtualArray recordVA,Group group,SetBasedDimensionGroupData dimensionGroupData){
  this.table=table;
  this.dataDomain=dataDomain;
  this.recordVA=recordVA;
  this.group=group;
  this.dimensionGroupData=dimensionGroupData;
}","public SetBasedSegmentData(ATableBasedDataDomain dataDomain,DataTable table,RecordVirtualArray recordVA,Group group,TableBasedDimensionGroupData dimensionGroupData){
  this.table=table;
  this.dataDomain=dataDomain;
  this.recordVA=recordVA;
  this.group=group;
  this.dimensionGroupData=dimensionGroupData;
}",0.987012987012987
57927,"private void init(){
  dimensionGroups=new ArrayList<ADimensionGroupData>();
  assignIDCategories();
  if (recordIDCategory == null || dimensionIDCategory == null) {
    throw new IllegalStateException(""String_Node_Str"" + toString() + ""String_Node_Str""+ recordIDCategory+ ""String_Node_Str""+ dimensionIDCategory);
  }
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,DimensionType.INT);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,DimensionType.INT);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,DimensionType.INT);
}","private void init(){
  assignIDCategories();
  if (recordIDCategory == null || dimensionIDCategory == null) {
    throw new IllegalStateException(""String_Node_Str"" + toString() + ""String_Node_Str""+ recordIDCategory+ ""String_Node_Str""+ dimensionIDCategory);
  }
  recordIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,DimensionType.INT);
  dimensionIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),dimensionIDCategory,DimensionType.INT);
  recordGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainID + ""String_Node_Str""+ hashCode(),recordIDCategory,DimensionType.INT);
}",0.9606741573033708
57928,"private void createDimensionGroupsFromDimensionTree(ClusterNode parent){
  for (  ClusterNode child : parent.getChildren()) {
    if (child.hasChildren()) {
      dimensionGroups.add(new SetBasedDimensionGroupData(this,child.getSubDataTable()));
      createDimensionGroupsFromDimensionTree(child);
    }
  }
  DimensionGroupsChangedEvent event=new DimensionGroupsChangedEvent(this);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}","private void createDimensionGroupsFromDimensionTree(ClusterNode parent){
  for (  ClusterNode child : parent.getChildren()) {
    if (child.hasChildren()) {
      dimensionGroups.add(new TableBasedDimensionGroupData(this,child.getSubDataTable()));
      createDimensionGroupsFromDimensionTree(child);
    }
  }
  DimensionGroupsChangedEvent event=new DimensionGroupsChangedEvent(this);
  event.setSender(this);
  GeneralManager.get().getEventPublisher().triggerEvent(event);
}",0.4147368421052632
57929,"/** 
 * Method from http://eclipsenuggets.blogspot.com/2007/09/how-to-save-eclipse-ui-workbench-state_6644.html
 */
private File getWorkbenchStateFile(){
  IPath path=WorkbenchPlugin.getDefault().getDataLocation();
  if (path == null) {
    return null;
  }
  path=path.append(""String_Node_Str"");
  return path.toFile();
}","/** 
 * Method from http://eclipsenuggets.blogspot.com/2007/09/how-to-save-eclipse-ui-workbench-state_6644.html
 */
private File getWorkbenchStateFile(){
  IPath path=WorkbenchPlugin.getDefault().getDataLocation();
  if (path == null) {
    return null;
  }
  path=path.append(WORKBENCH_MEMENTO_FILE);
  return path.toFile();
}",0.9491525423728814
57930,"@Override public void postStartup(){
  super.postStartup();
  filterPreferencePages();
  autoSaver=new AutoSaver();
  GeneralManager.get().getViewManager().getDisplayLoopExecution().executeMultiple(autoSaver);
}","@Override public void postStartup(){
  super.postStartup();
  filterPreferencePages();
}",0.5886287625418061
57931,"private void setTableContent(String pathwayDatabase){
  List<PathwayGraph> pathways=pathwayMap.get(pathwayDatabase);
  if (pathways == null)   return;
  pathwayTable.removeAll();
  for (  PathwayGraph pathway : pathways) {
    TableItem item=new TableItem(pathwayTable,SWT.NONE);
    item.setText(0,pathway.getTitle());
    item.setText(1,pathway.getType().getName());
    item.setData(pathway);
  }
  pathwayTableSorter.sort(0,true);
  for (  TableColumn column : pathwayTable.getColumns()) {
    column.pack();
  }
  pathwayTable.pack();
}","private void setTableContent(String pathwayDatabase){
  List<PathwayGraph> pathways=pathwayMap.get(pathwayDatabase);
  if (pathways == null)   return;
  pathwayTable.removeAll();
  for (  PathwayGraph pathway : pathways) {
    TableItem item=new TableItem(pathwayTable,SWT.NONE);
    item.setText(0,pathway.getTitle());
    item.setText(1,pathway.getType().getName());
    item.setData(pathway);
  }
  pathwayTableSorter.sort(0,true);
  for (  TableColumn column : pathwayTable.getColumns()) {
    column.pack();
  }
  pathwayTable.pack();
  parent.layout();
}",0.9827429609445958
57932,"private void fillDataTables(DataTable newSet){
  if (dimensionIDs.isEmpty())   throw new IllegalStateException(""String_Node_Str"");
  DataTableUtils.setTables(newSet,dimensionIDs);
}","private void fillDataTables(DataTable newTable){
  if (dimensionIDs.isEmpty())   throw new IllegalStateException(""String_Node_Str"");
  DataTableUtils.setTables(newTable,dimensionIDs);
}",0.9672131147540984
57933,"@Override public void setParameterHandler(final ParameterHandler parameterHandler){
  super.setParameterHandler(parameterHandler);
  loadDataParameters.setFileName(parameterHandler.getValueString(CommandType.TAG_DETAIL.getXmlKey()));
  loadDataParameters.setInputPattern(parameterHandler.getValueString(CommandType.TAG_ATTRIBUTE1.getXmlKey()));
  StringTokenizer tokenizer=new StringTokenizer(parameterHandler.getValueString(CommandType.TAG_ATTRIBUTE2.getXmlKey()),GeneralManager.sDelimiter_Parser_DataItems);
  dimensionIDs=new ArrayList<Integer>();
  while (tokenizer.hasMoreTokens()) {
    dimensionIDs.add(Integer.valueOf(tokenizer.nextToken()).intValue());
  }
  dimensionIDs=GeneralManager.get().getIDCreator().convertExternalToInternalIDs(dimensionIDs);
  int[] iArrayStartStop=ConversionTools.convertStringToIntArray(parameterHandler.getValueString(CommandType.TAG_ATTRIBUTE3.getXmlKey()),""String_Node_Str"");
  if (iArrayStartStop.length > 0) {
    loadDataParameters.setStartParseFileAtLine(iArrayStartStop[0]);
    if (iArrayStartStop.length > 1) {
      if (iArrayStartStop[0] > iArrayStartStop[1] && iArrayStartStop[1] != -1) {
        Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"" + iArrayStartStop[1] + ""String_Node_Str""+ iArrayStartStop[0]));
        return;
      }
      loadDataParameters.setStopParseFileAtLine(iArrayStartStop[1]);
    }
  }
  dataDomain=(ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(parameterHandler.getValueString(CommandType.TAG_ATTRIBUTE4.getXmlKey()));
  loadDataParameters.setDataDomain(dataDomain);
}","@Override public void setParameterHandler(final ParameterHandler parameterHandler){
  super.setParameterHandler(parameterHandler);
  loadDataParameters.setFileName(parameterHandler.getValueString(CommandType.TAG_DETAIL.getXmlKey()));
  loadDataParameters.setInputPattern(parameterHandler.getValueString(CommandType.TAG_ATTRIBUTE1.getXmlKey()));
  StringTokenizer tokenizer=new StringTokenizer(parameterHandler.getValueString(CommandType.TAG_ATTRIBUTE2.getXmlKey()),GeneralManager.sDelimiter_Parser_DataItems);
  dimensionIDs=new ArrayList<Integer>();
  while (tokenizer.hasMoreTokens()) {
    dimensionIDs.add(Integer.valueOf(tokenizer.nextToken()).intValue());
  }
  dimensionIDs=GeneralManager.get().getIDCreator().convertExternalToInternalIDs(dimensionIDs);
  int[] iArrayStartStop=ConversionTools.convertStringToIntArray(parameterHandler.getValueString(CommandType.TAG_ATTRIBUTE3.getXmlKey()),""String_Node_Str"");
  if (iArrayStartStop.length > 0) {
    loadDataParameters.setStartParseFileAtLine(iArrayStartStop[0]);
    if (iArrayStartStop.length > 1) {
      if (iArrayStartStop[0] > iArrayStartStop[1] && iArrayStartStop[1] != -1) {
        Logger.log(new Status(IStatus.ERROR,this.toString(),""String_Node_Str"" + iArrayStartStop[1] + ""String_Node_Str""+ iArrayStartStop[0]));
        return;
      }
      loadDataParameters.setStopParseFileAtLine(iArrayStartStop[1]);
    }
  }
  dataDomain=(ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(parameterHandler.getValueString(CommandType.TAG_ATTRIBUTE4.getXmlKey()));
  loadDataParameters.setDataDomain(dataDomain);
  dataDomain.setLoadDataParameters(loadDataParameters);
}",0.9826517967781908
57934,"@Override public void doCommand(){
  Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + loadDataParameters.getFileName() + ""String_Node_Str""+ loadDataParameters.getInputPattern()+ ""String_Node_Str""+ dimensionIDs.toString()));
  TabularAsciiDataReader loader=new TabularAsciiDataReader(loadDataParameters.getFileName(),dataDomain);
  loader.setTokenPattern(loadDataParameters.getInputPattern());
  loader.setTargetDimensions(dimensionIDs);
  if (loadDataParameters.isUseExperimentClusterInfo())   loader.enableExperimentClusterInfo();
  loader.setStartParsingStopParsingAtLine(loadDataParameters.getStartParseFileAtLine(),loadDataParameters.getStopParseFileAtLine());
  if (loadDataParameters.getDelimiter() != null && !loadDataParameters.getDelimiter().isEmpty()) {
    loader.setTokenSeperator(loadDataParameters.getDelimiter());
  }
  bParsingOK=loader.loadData();
  dataDomain.setLoadDataParameters(loadDataParameters);
  dataDomain.updateSetInViews();
}","@Override public void doCommand(){
  Logger.log(new Status(IStatus.INFO,GeneralManager.PLUGIN_ID,""String_Node_Str"" + loadDataParameters.getFileName() + ""String_Node_Str""+ loadDataParameters.getInputPattern()+ ""String_Node_Str""+ dimensionIDs.toString()));
  TabularAsciiDataReader loader=new TabularAsciiDataReader(loadDataParameters.getFileName(),dataDomain);
  loader.setTokenPattern(loadDataParameters.getInputPattern());
  loader.setTargetDimensions(dimensionIDs);
  if (loadDataParameters.isUseExperimentClusterInfo())   loader.enableExperimentClusterInfo();
  loader.setStartParsingStopParsingAtLine(loadDataParameters.getStartParseFileAtLine(),loadDataParameters.getStopParseFileAtLine());
  if (loadDataParameters.getDelimiter() != null && !loadDataParameters.getDelimiter().isEmpty()) {
    loader.setTokenSeperator(loadDataParameters.getDelimiter());
  }
  parsingOK=loader.loadData();
  dataDomain.updateSetInViews();
}",0.9514360313315928
57935,"public boolean isParsingOK(){
  return bParsingOK;
}","public boolean isParsingOK(){
  return parsingOK;
}",0.970873786407767
57936,"/** 
 * Creates the dimensions from a previously prepared dimension definition.
 * @param loadDataParameters definition how to create the dimensions
 * @return <code>true</code>if the creation was successful, <code>false</code> otherwise
 */
public static boolean createDimensions(LoadDataParameters loadDataParameters){
  ArrayList<Integer> dimensionIds=null;
  boolean createDimensionsFromExistingIDs=false;
  if (loadDataParameters.getDimensionIds() == null)   dimensionIds=new ArrayList<Integer>();
 else {
    dimensionIds=loadDataParameters.getDimensionIds();
    createDimensionsFromExistingIDs=true;
  }
  TabularAsciiDataReader reader=new TabularAsciiDataReader(null,loadDataParameters.getDataDomain());
  reader.setTokenPattern(loadDataParameters.getInputPattern());
  ArrayList<DimensionType> dataTypes=reader.getColumnDataTypes();
  boolean abort=false;
  Iterator<String> dimensionLabelIterator=loadDataParameters.getDimensionLabels().iterator();
  CmdDataCreateDimension cmdCreateDimension;
  String dimensionLabel;
  for (int tableIndex=0; tableIndex < dataTypes.size(); tableIndex++) {
    DimensionType dataType=dataTypes.get(tableIndex);
switch (dataType) {
case FLOAT:
      cmdCreateDimension=(CmdDataCreateDimension)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_DIMENSION);
    if (createDimensionsFromExistingIDs)     cmdCreateDimension.setAttributes(ManagedObjectType.DIMENSION_NUMERICAL,dimensionIds.get(tableIndex));
 else     cmdCreateDimension.setAttributes(ManagedObjectType.DIMENSION_NUMERICAL);
  cmdCreateDimension.doCommand();
dimensionLabel=dimensionLabelIterator.next();
NumericalDimension dimension=(NumericalDimension)cmdCreateDimension.getCreatedObject();
dimension.setLabel(dimensionLabel);
if (!createDimensionsFromExistingIDs) dimensionIds.add(dimension.getID());
break;
case STRING:
cmdCreateDimension=(CmdDataCreateDimension)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_DIMENSION);
if (createDimensionsFromExistingIDs) cmdCreateDimension.setAttributes(ManagedObjectType.DIMENSION_NOMINAL,dimensionIds.get(tableIndex));
 else {
cmdCreateDimension.setAttributes(ManagedObjectType.DIMENSION_NOMINAL);
}
cmdCreateDimension.doCommand();
dimensionLabel=dimensionLabelIterator.next();
NominalDimension<?> nominalDimension=(NominalDimension<?>)cmdCreateDimension.getCreatedObject();
nominalDimension.setLabel(dimensionLabel);
if (!createDimensionsFromExistingIDs) dimensionIds.add(nominalDimension.getID());
case SKIP:
break;
case ABORT:
abort=true;
break;
default :
break;
}
if (abort) {
break;
}
}
loadDataParameters.setDimensionIds(dimensionIds);
return true;
}","/** 
 * Creates the dimensions from a previously prepared dimension definition.
 * @param loadDataParameters definition how to create the dimensions
 * @return <code>true</code>if the creation was successful, <code>false</code> otherwise
 */
public static boolean createDimensions(LoadDataParameters loadDataParameters){
  ArrayList<Integer> dimensionIds=null;
  boolean createDimensionsFromExistingIDs=false;
  if (loadDataParameters.getDimensionIds() == null)   dimensionIds=new ArrayList<Integer>();
 else {
    dimensionIds=loadDataParameters.getDimensionIds();
    createDimensionsFromExistingIDs=true;
  }
  TabularAsciiDataReader reader=new TabularAsciiDataReader(null,loadDataParameters.getDataDomain());
  reader.setTokenPattern(loadDataParameters.getInputPattern());
  ArrayList<DimensionType> dataTypes=reader.getColumnDataTypes();
  boolean abort=false;
  Iterator<String> dimensionLabelIterator=loadDataParameters.getDimensionLabels().iterator();
  CmdDataCreateDimension cmdCreateDimension;
  String dimensionLabel;
  int dimensionCount=0;
  for (  DimensionType dataType : dataTypes) {
switch (dataType) {
case FLOAT:
      cmdCreateDimension=(CmdDataCreateDimension)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_DIMENSION);
    if (createDimensionsFromExistingIDs)     cmdCreateDimension.setAttributes(ManagedObjectType.DIMENSION_NUMERICAL,dimensionIds.get(dimensionCount++));
 else     cmdCreateDimension.setAttributes(ManagedObjectType.DIMENSION_NUMERICAL);
  cmdCreateDimension.doCommand();
dimensionLabel=dimensionLabelIterator.next();
NumericalDimension dimension=(NumericalDimension)cmdCreateDimension.getCreatedObject();
dimension.setLabel(dimensionLabel);
if (!createDimensionsFromExistingIDs) dimensionIds.add(dimension.getID());
break;
case STRING:
cmdCreateDimension=(CmdDataCreateDimension)GeneralManager.get().getCommandManager().createCommandByType(CommandType.CREATE_DIMENSION);
if (createDimensionsFromExistingIDs) cmdCreateDimension.setAttributes(ManagedObjectType.DIMENSION_NOMINAL,dimensionIds.get(dimensionCount++));
 else cmdCreateDimension.setAttributes(ManagedObjectType.DIMENSION_NOMINAL);
cmdCreateDimension.doCommand();
dimensionLabel=dimensionLabelIterator.next();
NominalDimension<?> nominalDimension=(NominalDimension<?>)cmdCreateDimension.getCreatedObject();
nominalDimension.setLabel(dimensionLabel);
if (!createDimensionsFromExistingIDs) dimensionIds.add(nominalDimension.getID());
case SKIP:
break;
case ABORT:
abort=true;
break;
default :
break;
}
if (abort) {
break;
}
}
loadDataParameters.setDimensionIds(dimensionIds);
return true;
}",0.9570644978248534
57937,"public Integer getID(){
  return id;
}","public Integer getID(){
  if (id == null)   return 0;
  return id;
}",0.7169811320754716
57938,"/** 
 * Returns a list of children of parentNode. The returned list is sorted based on the compare method of the children.
 * @param parentNode the node of which the childs are requested
 * @return the sorted list of children
 */
public ArrayList<NodeType> getChildren(NodeType parentNode){
  Set<DefaultEdge> setEdges=null;
  try {
    setEdges=graph.outgoingEdgesOf(parentNode);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  ArrayList<NodeType> alNodes=new ArrayList<NodeType>();
  for (  DefaultEdge tempEdge : setEdges) {
    alNodes.add(graph.getEdgeTarget(tempEdge));
  }
  Collections.sort(alNodes);
  if (alNodes.isEmpty())   return null;
 else   return alNodes;
}","/** 
 * Returns a list of children of parentNode. The returned list is sorted based on the compare method of the children.
 * @param parentNode the node of which the children are requested
 * @return the sorted list of children
 */
public ArrayList<NodeType> getChildren(NodeType parentNode){
  Set<DefaultEdge> setEdges=null;
  try {
    setEdges=graph.outgoingEdgesOf(parentNode);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  ArrayList<NodeType> alNodes=new ArrayList<NodeType>();
  for (  DefaultEdge tempEdge : setEdges) {
    alNodes.add(graph.getEdgeTarget(tempEdge));
  }
  Collections.sort(alNodes);
  if (alNodes.isEmpty())   return null;
 else   return alNodes;
}",0.9970887918486172
57939,"public ClusterTree importDimensionTree(String fileName) throws JAXBException, FileNotFoundException {
  ClusterTree tree=importTree(fileName,dataDomain.getDimensionIDType());
  org.caleydo.core.data.collection.table.DataTable set=(org.caleydo.core.data.collection.table.DataTable)dataDomain.getTable();
  tree.createSubDataTables(set);
  return tree;
}","public ClusterTree importDimensionTree(String fileName) throws JAXBException, FileNotFoundException {
  ClusterTree tree=importTree(fileName,dataDomain.getDimensionIDType());
  org.caleydo.core.data.collection.table.DataTable table=(org.caleydo.core.data.collection.table.DataTable)dataDomain.getTable();
  tree.createSubDataTables(table);
  return tree;
}",0.9774011299435028
57940,"@Override @SuppressWarnings(""String_Node_Str"") protected void setArraysToDimensions(){
  int iIntArrayIndex=0;
  int iFloatArrayIndex=0;
  int iStringArrayIndex=0;
  int dimensionIndex=0;
  DataTable set=dataDomain.getTable();
  for (  DimensionType dimensionType : columnDataTypes) {
switch (dimensionType) {
case INT:
      targetDimensions.get(dimensionIndex).setRawData(intArrays.get(iIntArrayIndex));
    iIntArrayIndex++;
  dimensionIndex++;
break;
case FLOAT:
targetDimensions.get(dimensionIndex).setRawData(floatArrays.get(iFloatArrayIndex));
iFloatArrayIndex++;
dimensionIndex++;
break;
case CERTAINTY:
targetDimensions.get(dimensionIndex - 1).setUncertaintyData(floatArrays.get(iFloatArrayIndex));
dataDomain.getTable().setContainsUncertaintyData(true);
iFloatArrayIndex++;
break;
case STRING:
ArrayList<String> rawStringData=stringLists.get(iStringArrayIndex);
rawStringData=fillUp(rawStringData);
((NominalDimension<String>)targetDimensions.get(dimensionIndex)).setRawNominalData(rawStringData);
iStringArrayIndex++;
dimensionIndex++;
break;
case SKIP:
break;
case GROUP_NUMBER:
int[] iArGroupInfo=groupInfo.get(0);
DataTableUtils.setContentGroupList((DataTable)set,DataTable.RECORD,iArGroupInfo);
iIntArrayIndex++;
break;
case GROUP_REPRESENTATIVE:
int[] iArGroupRepr=groupInfo.get(1);
DataTableUtils.setContentGroupRepresentatives((DataTable)set,DataTable.RECORD,iArGroupRepr);
iIntArrayIndex++;
break;
case ABORT:
if (useExperimentClusterInfo) {
iArGroupInfo=groupInfo.get(2);
DataTableUtils.setDimensionGroupList((DataTable)set,DataTable.DIMENSION,iArGroupInfo);
iArGroupRepr=groupInfo.get(3);
DataTableUtils.setDimensionGroupRepresentatives((DataTable)set,DataTable.DIMENSION,iArGroupRepr);
}
return;
default :
throw new IllegalStateException(""String_Node_Str"" + dimensionType.toString());
}
}
}","@Override @SuppressWarnings(""String_Node_Str"") protected void setArraysToDimensions(){
  int iIntArrayIndex=0;
  int iFloatArrayIndex=0;
  int iStringArrayIndex=0;
  int dimensionIndex=0;
  DataTable table=dataDomain.getTable();
  for (  DimensionType dimensionType : columnDataTypes) {
switch (dimensionType) {
case INT:
      targetDimensions.get(dimensionIndex).setRawData(intArrays.get(iIntArrayIndex));
    iIntArrayIndex++;
  dimensionIndex++;
break;
case FLOAT:
targetDimensions.get(dimensionIndex).setRawData(floatArrays.get(iFloatArrayIndex));
iFloatArrayIndex++;
dimensionIndex++;
break;
case CERTAINTY:
targetDimensions.get(dimensionIndex - 1).setUncertaintyData(floatArrays.get(iFloatArrayIndex));
dataDomain.getTable().setContainsUncertaintyData(true);
iFloatArrayIndex++;
break;
case STRING:
ArrayList<String> rawStringData=stringLists.get(iStringArrayIndex);
rawStringData=fillUp(rawStringData);
((NominalDimension<String>)targetDimensions.get(dimensionIndex)).setRawNominalData(rawStringData);
iStringArrayIndex++;
dimensionIndex++;
break;
case SKIP:
break;
case GROUP_NUMBER:
int[] iArGroupInfo=groupInfo.get(0);
DataTableUtils.setContentGroupList((DataTable)table,DataTable.RECORD,iArGroupInfo);
iIntArrayIndex++;
break;
case GROUP_REPRESENTATIVE:
int[] iArGroupRepr=groupInfo.get(1);
DataTableUtils.setContentGroupRepresentatives((DataTable)table,DataTable.RECORD,iArGroupRepr);
iIntArrayIndex++;
break;
case ABORT:
if (useExperimentClusterInfo) {
iArGroupInfo=groupInfo.get(2);
DataTableUtils.setDimensionGroupList((DataTable)table,DataTable.DIMENSION,iArGroupInfo);
iArGroupRepr=groupInfo.get(3);
DataTableUtils.setDimensionGroupRepresentatives((DataTable)table,DataTable.DIMENSION,iArGroupRepr);
}
return;
default :
throw new IllegalStateException(""String_Node_Str"" + dimensionType.toString());
}
}
}",0.9889928453494772
57941,"/** 
 * Loads the project from a directory
 * @param dirName name of the directory to load the project from
 * @return initialization data for the application from which it can restore itself
 */
public SerializationData loadDirectory(String dirName){
  loadPlugins(dirName);
  SerializationData serializationData=null;
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Unmarshaller unmarshaller=projectContext.createUnmarshaller();
    try {
      GeneralManager.get().setBasicInfo((BasicInformation)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.BASIC_INFORMATION_FILE_NAME)));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    DataDomainList dataDomainList;
    try {
      dataDomainList=(DataDomainList)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.DATA_DOMAIN_FILE_NAME));
    }
 catch (    FileNotFoundException e1) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    serializationData=new SerializationData();
    for (    ADataDomain dataDomain : dataDomainList.getDataDomains()) {
      Thread thread=new Thread(dataDomain,dataDomain.getDataDomainID());
      thread.start();
      if (dataDomain instanceof ATableBasedDataDomain) {
        String extendedDirName=dirName + dataDomain.getDataDomainID() + ""String_Node_Str"";
        String setFileName=extendedDirName + ProjectSaver.DATA_TABLE_FILE_NAME;
        DataDomainSerializationData dataInitializationData=new DataDomainSerializationData();
        LoadDataParameters loadingParameters=dataDomain.getLoadDataParameters();
        loadingParameters.setFileName(setFileName);
        loadingParameters.setDataDomain((ATableBasedDataDomain)dataDomain);
        HashMap<String,RecordVirtualArray> recordVAMap=new HashMap<String,RecordVirtualArray>(6);
        String tmpType=DataTable.RECORD;
        recordVAMap.put(DataTable.RECORD,loadContentVirtualArray(unmarshaller,extendedDirName,tmpType));
        HashMap<String,DimensionVirtualArray> dimensionVAMap=new HashMap<String,DimensionVirtualArray>(2);
        String tempDimensionType=DataTable.DIMENSION;
        dimensionVAMap.put(tempDimensionType,loadDimensionVirtualArray(unmarshaller,extendedDirName,tempDimensionType));
        dataInitializationData.setDataDomain((ATableBasedDataDomain)dataDomain);
        dataInitializationData.setRecordVAMap(recordVAMap);
        dataInitializationData.setDimensionVAMap(dimensionVAMap);
        dataDomain.getLoadDataParameters().setGeneTreeFileName(extendedDirName + ProjectSaver.GENE_TREE_FILE_NAME);
        dataDomain.getLoadDataParameters().setExperimentsFileName(extendedDirName + ProjectSaver.EXP_TREE_FILE_NAME);
        serializationData.addDataSerializationData(dataInitializationData);
      }
    }
    ViewList loadViews=null;
    try {
      loadViews=(ViewList)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.VIEWS_FILE_NAME));
    }
 catch (    FileNotFoundException e) {
    }
    if (loadViews != null) {
      serializationData.setViews(loadViews.getViews());
    }
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  return serializationData;
}","/** 
 * Loads the project from a directory
 * @param dirName name of the directory to load the project from
 * @return initialization data for the application from which it can restore itself
 */
public SerializationData loadDirectory(String dirName){
  loadPlugins(dirName);
  SerializationData serializationData=null;
  SerializationManager serializationManager=GeneralManager.get().getSerializationManager();
  JAXBContext projectContext=serializationManager.getProjectContext();
  try {
    Unmarshaller unmarshaller=projectContext.createUnmarshaller();
    try {
      GeneralManager.get().setBasicInfo((BasicInformation)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.BASIC_INFORMATION_FILE_NAME)));
    }
 catch (    FileNotFoundException e) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    DataDomainList dataDomainList;
    try {
      dataDomainList=(DataDomainList)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.DATA_DOMAIN_FILE_NAME));
    }
 catch (    FileNotFoundException e1) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    serializationData=new SerializationData();
    for (    ADataDomain dataDomain : dataDomainList.getDataDomains()) {
      Thread thread=new Thread(dataDomain,dataDomain.getDataDomainID());
      thread.start();
      if (dataDomain instanceof ATableBasedDataDomain) {
        String extendedDirName=dirName + dataDomain.getDataDomainID() + ""String_Node_Str"";
        String setFileName=extendedDirName + ProjectSaver.DATA_TABLE_FILE_NAME;
        DataDomainSerializationData dataInitializationData=new DataDomainSerializationData();
        HashMap<String,RecordVirtualArray> recordVAMap=new HashMap<String,RecordVirtualArray>(6);
        String tmpType=DataTable.RECORD;
        recordVAMap.put(DataTable.RECORD,loadContentVirtualArray(unmarshaller,extendedDirName,tmpType));
        HashMap<String,DimensionVirtualArray> dimensionVAMap=new HashMap<String,DimensionVirtualArray>(2);
        String tempDimensionType=DataTable.DIMENSION;
        dimensionVAMap.put(tempDimensionType,loadDimensionVirtualArray(unmarshaller,extendedDirName,tempDimensionType));
        dimensionVAMap.put(tempDimensionType,loadDimensionVirtualArray(unmarshaller,extendedDirName,tempDimensionType));
        dataInitializationData.setDataDomain((ATableBasedDataDomain)dataDomain);
        dataInitializationData.setRecordVAMap(recordVAMap);
        dataInitializationData.setDimensionVAMap(dimensionVAMap);
        dataDomain.getLoadDataParameters().setGeneTreeFileName(extendedDirName + ProjectSaver.GENE_TREE_FILE_NAME);
        dataDomain.getLoadDataParameters().setExperimentsFileName(extendedDirName + ProjectSaver.EXP_TREE_FILE_NAME);
        serializationData.addDataSerializationData(dataInitializationData);
      }
    }
    ViewList loadViews=null;
    try {
      loadViews=(ViewList)unmarshaller.unmarshal(GeneralManager.get().getResourceLoader().getResource(dirName + ProjectSaver.VIEWS_FILE_NAME));
    }
 catch (    FileNotFoundException e) {
    }
    if (loadViews != null) {
      serializationData.setViews(loadViews.getViews());
    }
  }
 catch (  JAXBException ex) {
    throw new RuntimeException(""String_Node_Str"",ex);
  }
  return serializationData;
}",0.9512843224092116
57942,"@Override public void init(ApplicationInitData appInitData){
  this.appInitData=appInitData;
  SerializationData serializationDataList;
  Logger.log(new Status(IStatus.INFO,this.toString(),""String_Node_Str""));
  ProjectLoader loader=new ProjectLoader();
  if (loadSampleProject) {
    serializationDataList=loader.load(SAMPLE_PROJECT_LOCATION);
    Application.bDeleteRestoredWorkbenchState=true;
  }
 else {
    if (loadRecentProject) {
      serializationDataList=loader.loadRecent();
    }
 else     if (projectLocation != null || projectLocation.isEmpty()) {
      serializationDataList=loader.load(projectLocation);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  for (  DataDomainSerializationData dataSerializationData : serializationDataList.getDataSerializationDataList()) {
    ADataDomain dataDomain=dataSerializationData.getDataDomain();
    DataDomainManager.get().register(dataDomain);
    if (dataDomain instanceof ATableBasedDataDomain) {
      ATableBasedDataDomain setBasedDataDomain=(ATableBasedDataDomain)dataDomain;
      LoadDataParameters loadDataParameters=dataDomain.getLoadDataParameters();
      DataTableUtils.createDimensions(loadDataParameters);
      DataTable table=DataTableUtils.createData(setBasedDataDomain);
      HashMap<String,RecordVirtualArray> recordVAMap=dataSerializationData.getRecordVAMap();
      for (      Entry<String,RecordVirtualArray> entry : recordVAMap.entrySet()) {
        setBasedDataDomain.setRecordVirtualArray(entry.getKey(),entry.getValue());
      }
      HashMap<String,DimensionVirtualArray> dimensionVAMap=dataSerializationData.getDimensionVAMap();
      for (      Entry<String,DimensionVirtualArray> entry : dimensionVAMap.entrySet()) {
        setBasedDataDomain.setDimensionVirtualArray(entry.getKey(),entry.getValue());
      }
      DataTableUtils.loadTrees(loadDataParameters,table);
    }
  }
}","@Override public void init(ApplicationInitData appInitData){
  this.appInitData=appInitData;
  SerializationData serializationDataList;
  Logger.log(new Status(IStatus.INFO,this.toString(),""String_Node_Str""));
  ProjectLoader loader=new ProjectLoader();
  if (loadSampleProject) {
    serializationDataList=loader.load(SAMPLE_PROJECT_LOCATION);
    Application.bDeleteRestoredWorkbenchState=true;
  }
 else {
    if (loadRecentProject) {
      serializationDataList=loader.loadRecent();
    }
 else     if (projectLocation != null || projectLocation.isEmpty()) {
      serializationDataList=loader.load(projectLocation);
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  for (  DataDomainSerializationData dataSerializationData : serializationDataList.getDataSerializationDataList()) {
    ADataDomain dataDomain=dataSerializationData.getDataDomain();
    DataDomainManager.get().register(dataDomain);
    if (dataDomain instanceof ATableBasedDataDomain) {
      ATableBasedDataDomain setBasedDataDomain=(ATableBasedDataDomain)dataDomain;
      LoadDataParameters loadDataParameters=dataDomain.getLoadDataParameters();
      loadDataParameters.setDataDomain(setBasedDataDomain);
      DataTableUtils.createDimensions(loadDataParameters);
      DataTable table=DataTableUtils.createData(setBasedDataDomain);
      HashMap<String,RecordVirtualArray> recordVAMap=dataSerializationData.getRecordVAMap();
      for (      Entry<String,RecordVirtualArray> entry : recordVAMap.entrySet()) {
        setBasedDataDomain.setRecordVirtualArray(entry.getKey(),entry.getValue());
      }
      HashMap<String,DimensionVirtualArray> dimensionVAMap=dataSerializationData.getDimensionVAMap();
      for (      Entry<String,DimensionVirtualArray> entry : dimensionVAMap.entrySet()) {
        setBasedDataDomain.setDimensionVirtualArray(entry.getKey(),entry.getValue());
      }
      DataTableUtils.loadTrees(loadDataParameters,table);
    }
  }
}",0.9845121321631388
57943,"@Override public int getComparableValue(){
  return id;
}","@Override public int getComparableValue(){
  if (id == null)   return 0;
  return id;
}",0.7916666666666666
57944,"private Integer convertClinicalExperimentToGeneticExperiment(Integer clinicalContentIndex){
  DataTable clinicalSet=((ATableBasedDataDomain)DataDomainManager.get().getDataDomainByID(CLINICAL_DATADOMAIN_TYPE)).getTable();
  int dimensionID=clinicalSet.getDimensionData(DataTable.DIMENSION).getDimensionVA().get(1);
  NominalDimension clinicalDimension=(NominalDimension<String>)clinicalSet.get(dimensionID);
  DimensionVirtualArray origianlGeneticDimensionVA=table.getDimensionData(DataTable.DIMENSION).getDimensionVA();
  String label=(String)clinicalDimension.getRaw(clinicalContentIndex);
  label=label.replace(""String_Node_Str"",""String_Node_Str"");
  for (  Integer dimensionIndex : origianlGeneticDimensionVA) {
    if (label.equals(table.get(dimensionIndex).getLabel()))     return dimensionIndex;
  }
  return null;
}","private Integer convertClinicalExperimentToGeneticExperiment(Integer clinicalContentIndex){
  DataTable clinicalSet=((ATableBasedDataDomain)DataDomainManager.get().getDataDomainByType(CLINICAL_DATADOMAIN_TYPE)).getTable();
  int dimensionID=clinicalSet.getDimensionData(DataTable.DIMENSION).getDimensionVA().get(1);
  NominalDimension clinicalDimension=(NominalDimension<String>)clinicalSet.get(dimensionID);
  DimensionVirtualArray origianlGeneticDimensionVA=table.getDimensionData(DataTable.DIMENSION).getDimensionVA();
  String label=(String)clinicalDimension.getRaw(clinicalContentIndex);
  label=label.replace(""String_Node_Str"",""String_Node_Str"");
  for (  Integer dimensionIndex : origianlGeneticDimensionVA) {
    if (label.equals(table.get(dimensionIndex).getLabel()))     return dimensionIndex;
  }
  return null;
}",0.9963547995139732
57945,"public void initMultiLevelUncertainty(){
  float[] SNR=table.getUncertainty().getNormalizedUncertainty();
  aggregatedUncertainty=new double[SNR.length];
  multiLevelUncertainty.clear();
  double[] convertedSNR=new double[SNR.length];
  for (int index=0; index < SNR.length; index++) {
    convertedSNR[index]=(double)(SNR[index]);
  }
  for (int index=0; index < aggregatedUncertainty.length; index++) {
    aggregatedUncertainty[index]=1f;
  }
  multiLevelUncertainty.add(convertedSNR);
  Collection<double[]> statisticsUncertainties=this.table.getStatisticsResult().getAllFoldChangeUncertainties();
  multiLevelUncertainty.addAll(statisticsUncertainties);
  for (  Integer recordID : recordVA) {
    for (    double[] uncertaintyLevel : multiLevelUncertainty) {
      double uncertainty=uncertaintyLevel[recordID];
      if (uncertainty < aggregatedUncertainty[recordID])       aggregatedUncertainty[recordID]=uncertainty;
    }
  }
  table.getStatisticsResult().setAggregatedUncertainty(aggregatedUncertainty);
}","public void initMultiLevelUncertainty(){
  if (table.getUncertainty() == null)   return;
  float[] SNR=table.getUncertainty().getNormalizedUncertainty();
  aggregatedUncertainty=new double[SNR.length];
  multiLevelUncertainty.clear();
  double[] convertedSNR=new double[SNR.length];
  for (int index=0; index < SNR.length; index++) {
    convertedSNR[index]=(double)(SNR[index]);
  }
  for (int index=0; index < aggregatedUncertainty.length; index++) {
    aggregatedUncertainty[index]=1f;
  }
  multiLevelUncertainty.add(convertedSNR);
  Collection<double[]> statisticsUncertainties=this.table.getStatisticsResult().getAllFoldChangeUncertainties();
  multiLevelUncertainty.addAll(statisticsUncertainties);
  for (  Integer recordID : recordVA) {
    for (    double[] uncertaintyLevel : multiLevelUncertainty) {
      double uncertainty=uncertaintyLevel[recordID];
      if (uncertainty < aggregatedUncertainty[recordID])       aggregatedUncertainty[recordID]=uncertainty;
    }
  }
  table.getStatisticsResult().setAggregatedUncertainty(aggregatedUncertainty);
}",0.9769230769230768
57946,"@Override protected void handlePickingEvents(final PickingType pickingType,final PickingMode pickingMode,final int pickingID,final Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  SelectionType selectionType;
switch (pickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (pickingMode) {
case CLICKED:
    selectionType=SelectionType.SELECTION;
  if (bAngularBrushingSelectPolyline) {
    bAngularBrushingSelectPolyline=false;
    bIsAngularBrushingActive=true;
    iSelectedLineID=pickingID;
    linePick=pick;
    bIsAngularBrushingFirstTime=true;
  }
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
RecordContextMenuItemContainer recordContextMenuItemContainer=new RecordContextMenuItemContainer();
recordContextMenuItemContainer.setDataDomain(dataDomain);
recordContextMenuItemContainer.tableID(recordIDType,pickingID);
contextMenu.addItemContanier(recordContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
default :
return;
}
if (recordSelectionManager.checkStatus(selectionType,pickingID)) {
break;
}
connectedElementRepresentationManager.clear(recordSelectionManager.getIDType(),selectionType);
recordSelectionManager.clearSelection(selectionType);
recordSelectionManager.addToType(selectionType,pickingID);
recordSelectionManager.addConnectionID(generalManager.getIDCreator().createID(ManagedObjectType.CONNECTION),pickingID);
if (!bAngularBrushingSelectPolyline) {
ISelectionDelta selectionDelta=recordSelectionManager.getDelta();
handleConnectedElementReps(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainID(dataDomain.getDataDomainID());
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfoLocal());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
DimensionContextMenuItemContainer experimentContextMenuItemContainer=new DimensionContextMenuItemContainer();
experimentContextMenuItemContainer.setDataDomain(dataDomain);
experimentContextMenuItemContainer.tableID(dimensionIDType,pickingID);
contextMenu.addItemContanier(experimentContextMenuItemContainer);
default :
return;
}
dimensionSelectionManager.clearSelection(selectionType);
dimensionSelectionManager.addToType(selectionType,pickingID);
dimensionSelectionManager.addConnectionID(generalManager.getIDCreator().createID(ManagedObjectType.CONNECTION),pickingID);
connectedElementRepresentationManager.clear(dimensionSelectionManager.getIDType(),selectionType);
ISelectionDelta selectionDelta=dimensionSelectionManager.getDelta();
handleConnectedElementReps(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainID(dataDomain.getDataDomainID());
event.setSelectionDelta((SelectionDelta)selectionDelta);
eventPublisher.triggerEvent(event);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=PickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=PickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=PickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=PickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=PickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=PickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case PC_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (pickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=pickingID;
break;
case CLICKED:
if (dimensionVA.occurencesOf(dimensionVA.get(pickingID)) == 1) {
removeGate(dimensionVA.get(pickingID));
}
Integer dimensionID=dimensionVA.get(pickingID);
dimensionSelectionManager.remove(pickingID);
DimensionVADelta vaDelta=new DimensionVADelta(DataTable.DIMENSION,dimensionIDType);
vaDelta.add(VADeltaItem.remove(pickingID));
triggerDimensionFilterEvent(vaDelta,""String_Node_Str"" + dataDomain.getDimensionLabel(dimensionID));
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (pickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=pickingID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=pickingID;
setDisplayListDirty();
break;
}
break;
case DUPLICATE_AXIS:
switch (pickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=pickingID;
break;
case CLICKED:
if (pickingID >= 0) {
DimensionVADelta vaDelta=new DimensionVADelta(DataTable.DIMENSION,dimensionIDType);
vaDelta.add(VADeltaItem.copy(pickingID));
triggerDimensionFilterEvent(vaDelta,""String_Node_Str"" + dataDomain.getDimensionLabel(dimensionVA.get(pickingID)));
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
AGate gate;
if (table.isSetHomogeneous()) {
gate=new Gate(++iGateCounter,pickingID,(float)table.getRawForNormalized(0),(float)table.getRawForNormalized(0.5f),table,renderStyle);
}
 else {
gate=new NominalGate(++iGateCounter,pickingID,0,0.5f,table,renderStyle);
}
hashGates.put(this.iGateCounter,gate);
hashIsGateBlocking.put(this.iGateCounter,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
Gate gate=new Gate(++iGateCounter,-1,(float)table.getRawForNormalized(0),(float)table.getRawForNormalized(0.5f),table,renderStyle);
gate.setMasterGate(true);
hashMasterGates.put(iGateCounter,gate);
hashIsGateBlocking.put(iGateCounter,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
if (hashGates.remove(pickingID) == null) hashMasterGates.remove(pickingID);
hashIsGateBlocking.remove(pickingID);
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ANGULAR_UPPER:
switch (pickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (pickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
if (hashExcludeNAN.containsKey(pickingID)) {
hashExcludeNAN.remove(pickingID);
}
 else {
hashExcludeNAN.put(pickingID,null);
}
setDisplayListDirty();
break;
}
break;
}
}","@Override protected void handlePickingEvents(final PickingType pickingType,final PickingMode pickingMode,final int pickingID,final Pick pick){
  if (detailLevel == DetailLevel.VERY_LOW || bIsDraggingActive || bWasAxisMoved) {
    return;
  }
  SelectionType selectionType;
switch (pickingType) {
case PCS_VIEW_SELECTION:
    break;
case POLYLINE_SELECTION:
switch (pickingMode) {
case CLICKED:
    selectionType=SelectionType.SELECTION;
  if (bAngularBrushingSelectPolyline) {
    bAngularBrushingSelectPolyline=false;
    bIsAngularBrushingActive=true;
    iSelectedLineID=pickingID;
    linePick=pick;
    bIsAngularBrushingFirstTime=true;
  }
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
RecordContextMenuItemContainer recordContextMenuItemContainer=new RecordContextMenuItemContainer();
recordContextMenuItemContainer.setDataDomain(dataDomain);
recordContextMenuItemContainer.tableID(recordIDType,pickingID);
contextMenu.addItemContanier(recordContextMenuItemContainer);
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
break;
default :
return;
}
if (recordSelectionManager.checkStatus(selectionType,pickingID)) {
break;
}
connectedElementRepresentationManager.clear(recordSelectionManager.getIDType(),selectionType);
recordSelectionManager.clearSelection(selectionType);
recordSelectionManager.addToType(selectionType,pickingID);
recordSelectionManager.addConnectionID(generalManager.getIDCreator().createID(ManagedObjectType.CONNECTION),pickingID);
if (!bAngularBrushingSelectPolyline) {
ISelectionDelta selectionDelta=recordSelectionManager.getDelta();
handleConnectedElementReps(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainID(dataDomain.getDataDomainID());
event.setSelectionDelta((SelectionDelta)selectionDelta);
event.setInfo(getShortInfoLocal());
eventPublisher.triggerEvent(event);
}
setDisplayListDirty();
break;
case X_AXIS_SELECTION:
break;
case Y_AXIS_SELECTION:
switch (pickingMode) {
case CLICKED:
selectionType=SelectionType.SELECTION;
break;
case MOUSE_OVER:
selectionType=SelectionType.MOUSE_OVER;
break;
case RIGHT_CLICKED:
selectionType=SelectionType.SELECTION;
if (!isRenderedRemote()) {
contextMenu.setLocation(pick.getPickedPoint(),getParentGLCanvas().getWidth(),getParentGLCanvas().getHeight());
contextMenu.setMasterGLView(this);
}
DimensionContextMenuItemContainer experimentContextMenuItemContainer=new DimensionContextMenuItemContainer();
experimentContextMenuItemContainer.setDataDomain(dataDomain);
experimentContextMenuItemContainer.tableID(dimensionIDType,pickingID);
contextMenu.addItemContanier(experimentContextMenuItemContainer);
default :
return;
}
dimensionSelectionManager.clearSelection(selectionType);
dimensionSelectionManager.addToType(selectionType,pickingID);
dimensionSelectionManager.addConnectionID(generalManager.getIDCreator().createID(ManagedObjectType.CONNECTION),pickingID);
connectedElementRepresentationManager.clear(dimensionSelectionManager.getIDType(),selectionType);
ISelectionDelta selectionDelta=dimensionSelectionManager.getDelta();
handleConnectedElementReps(selectionDelta);
SelectionUpdateEvent event=new SelectionUpdateEvent();
event.setSender(this);
event.setDataDomainID(dataDomain.getDataDomainID());
event.setSelectionDelta((SelectionDelta)selectionDelta);
eventPublisher.triggerEvent(event);
setDisplayListDirty();
break;
case GATE_TIP_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=PickingType.GATE_TIP_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=PickingType.GATE_TIP_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case GATE_BOTTOM_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=PickingType.GATE_BOTTOM_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
draggedObject=PickingType.GATE_BOTTOM_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case GATE_BODY_SELECTION:
switch (pickingMode) {
case MOUSE_OVER:
iDraggedGateNumber=pickingID;
draggedObject=PickingType.GATE_BODY_SELECTION;
setDisplayListDirty();
break;
case CLICKED:
bIsDraggingActive=true;
bIsGateDraggingFirstTime=true;
draggedObject=PickingType.GATE_BODY_SELECTION;
iDraggedGateNumber=pickingID;
break;
}
break;
case PC_ICON_SELECTION:
switch (pickingMode) {
case CLICKED:
break;
}
break;
case REMOVE_AXIS:
switch (pickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DELETE;
iChangeDropOnAxisNumber=pickingID;
break;
case CLICKED:
if (dimensionVA.occurencesOf(dimensionVA.get(pickingID)) == 1) {
removeGate(dimensionVA.get(pickingID));
}
DimensionVADelta vaDelta=new DimensionVADelta(DataTable.DIMENSION,dimensionIDType);
vaDelta.add(VADeltaItem.remove(pickingID));
Integer dimensionID=dimensionVA.get(pickingID);
triggerDimensionFilterEvent(vaDelta,""String_Node_Str"" + dataDomain.getDimensionLabel(dimensionID));
setDisplayListDirty();
resetAxisSpacing();
break;
}
break;
case MOVE_AXIS:
switch (pickingMode) {
case CLICKED:
bWasAxisMoved=true;
bWasAxisDraggedFirstTime=true;
iMovedAxisPosition=pickingID;
setDisplayListDirty();
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_MOVE;
iChangeDropOnAxisNumber=pickingID;
setDisplayListDirty();
break;
}
break;
case DUPLICATE_AXIS:
switch (pickingMode) {
case MOUSE_OVER:
dropTexture=EIconTextures.DROP_DUPLICATE;
iChangeDropOnAxisNumber=pickingID;
break;
case CLICKED:
if (pickingID >= 0) {
DimensionVADelta vaDelta=new DimensionVADelta(DataTable.DIMENSION,dimensionIDType);
vaDelta.add(VADeltaItem.copy(pickingID));
triggerDimensionFilterEvent(vaDelta,""String_Node_Str"" + dataDomain.getDimensionLabel(dimensionVA.get(pickingID)));
setDisplayListDirty();
resetAxisSpacing();
break;
}
}
break;
case ADD_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
AGate gate;
if (table.isSetHomogeneous()) {
gate=new Gate(++iGateCounter,pickingID,(float)table.getRawForNormalized(0),(float)table.getRawForNormalized(0.5f),table,renderStyle);
}
 else {
gate=new NominalGate(++iGateCounter,pickingID,0,0.5f,table,renderStyle);
}
hashGates.put(this.iGateCounter,gate);
hashIsGateBlocking.put(this.iGateCounter,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ADD_MASTER_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
Gate gate=new Gate(++iGateCounter,-1,(float)table.getRawForNormalized(0),(float)table.getRawForNormalized(0.5f),table,renderStyle);
gate.setMasterGate(true);
hashMasterGates.put(iGateCounter,gate);
hashIsGateBlocking.put(iGateCounter,new ArrayList<Integer>());
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case REMOVE_GATE:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
if (hashGates.remove(pickingID) == null) hashMasterGates.remove(pickingID);
hashIsGateBlocking.remove(pickingID);
handleUnselection();
triggerSelectionUpdate();
setDisplayListDirty();
break;
}
break;
case ANGULAR_UPPER:
switch (pickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case ANGULAR_LOWER:
switch (pickingMode) {
case CLICKED:
bIsAngularDraggingActive=true;
case DRAGGED:
bIsAngularDraggingActive=true;
}
break;
case REMOVE_NAN:
switch (pickingMode) {
case CLICKED:
hasFilterChanged=true;
if (hashExcludeNAN.containsKey(pickingID)) {
hashExcludeNAN.remove(pickingID);
}
 else {
hashExcludeNAN.put(pickingID,null);
}
setDisplayListDirty();
break;
}
break;
}
}",0.9909073321725672
57947,"@Override public void run(){
  toolBarView.removeAllViewSpecificToolBars();
}","@Override public void run(){
}",0.5607476635514018
57948,"/** 
 * Retrieves the singleton reference of this class. If no singleton exists yet, it will be created.
 * @return
 */
public static DisplayLoopExecution get(){
  if (displayLoopExecution == null) {
    displayLoopExecution=new DisplayLoopExecution();
  }
  return displayLoopExecution;
}","/** 
 * Retrieves the singleton reference of this class. If no singleton exists yet, it will be created.
 * @return
 */
public static DisplayLoopExecution get(){
  if (displayLoopExecution == null) {
    displayLoopExecution=new DisplayLoopExecution();
    GLCapabilities glCapabilities=new GLCapabilities(GLProfile.get(GLProfile.GL2));
    glCapabilities.setStencilBits(1);
    displayLoopExecution.displayLoopCanvas=new GLCanvas(glCapabilities);
    displayLoopExecution.displayLoopCanvas.addGLEventListener(displayLoopExecution);
    displayLoopExecution.displayLoopShell=new Shell(SWT.EMBEDDED | SWT.NO_TRIM | SWT.ON_TOP);
    displayLoopExecution.displayLoopShell.setSize(1,1);
    displayLoopExecution.displayLoopShell.open();
    Region region=new Region();
    displayLoopExecution.displayLoopShell.setRegion(region);
    Frame frame=SWT_AWT.new_Frame(displayLoopExecution.displayLoopShell);
    frame.add(displayLoopExecution.displayLoopCanvas);
  }
  return displayLoopExecution;
}",0.4515625
57949,"public void init(){
  fpsAnimator=new FPSAnimator(60);
  displayLoopExecution=DisplayLoopExecution.get();
}","public void init(){
}",0.328125
57950,"public void registerGLCanvasToAnimator(final GLCanvas glCaleydoCanvas){
  fpsAnimator.add(glCaleydoCanvas);
}","public void registerGLCanvasToAnimator(final GLCanvas glCaleydoCanvas){
  if (fpsAnimator == null) {
    fpsAnimator=new FPSAnimator(60);
    displayLoopExecution=DisplayLoopExecution.get();
    fpsAnimator.add((GLAutoDrawable)displayLoopExecution.getDisplayLoopCanvas());
    displayLoopExecution.executeMultiple(connectedElementRepManager);
  }
  fpsAnimator.add(glCaleydoCanvas);
}",0.3042596348884381
57951,"/** 
 * Returns a float value from a storage of which the kind has to be specified Use iterator when you want to iterate over the whole field, it has better performance
 * @param storageKind Specify which kind of storage (eg: raw, normalized)
 * @param iIndex The index of the requested Element
 * @return The associated value
 */
public float getFloat(EDataRepresentation storageKind,int iIndex){
  if (!hashCContainers.containsKey(storageKind))   throw new IllegalArgumentException(""String_Node_Str"");
  if (!(hashCContainers.get(storageKind) instanceof FloatCContainer))   throw new IllegalArgumentException(""String_Node_Str"");
  FloatCContainer container=(FloatCContainer)hashCContainers.get(storageKind);
  return container.get(iIndex);
}","/** 
 * Returns a float value from a storage of which the kind has to be specified Use iterator when you want to iterate over the whole field, it has better performance
 * @param storageKind Specify which kind of storage (eg: raw, normalized)
 * @param iIndex The index of the requested Element
 * @return The associated value
 */
public float getFloat(EDataRepresentation storageKind,int iIndex){
  if (!hashCContainers.containsKey(storageKind))   throw new IllegalArgumentException(""String_Node_Str"" + storageKind + ""String_Node_Str"");
  if (!(hashCContainers.get(storageKind) instanceof FloatCContainer))   throw new IllegalArgumentException(""String_Node_Str"");
  FloatCContainer container=(FloatCContainer)hashCContainers.get(storageKind);
  return container.get(iIndex);
}",0.9776315789473684
57952,"private void renderSingleLine(GL2 gl,Integer contentID,SelectionType selectionType,PolyLineState renderState,boolean renderCaption){
  gl.glColor4fv(renderState.color,0);
  gl.glLineWidth(renderState.lineWidth);
  if (!(detailLevel == DetailLevel.HIGH || detailLevel == DetailLevel.MEDIUM))   renderCaption=false;
  AStorage currentStorage=null;
  float previousX=0;
  float previousY=0;
  float currentX=0;
  float currentY=0;
  if (selectionType != SelectionType.DESELECTED) {
    gl.glPushName(pickingManager.getPickingID(uniqueID,PickingType.POLYLINE_SELECTION,contentID));
  }
  if (!renderCaption) {
    gl.glBegin(GL2.GL_LINE_STRIP);
  }
  for (int storageCount=0; storageCount < storageVA.size(); storageCount++) {
    currentStorage=table.get(storageVA.get(storageCount));
    currentX=axisSpacings.get(storageCount);
    currentY=currentStorage.getFloat(EDataRepresentation.NORMALIZED,contentID);
    if (Float.isNaN(currentY)) {
      currentY=NAN_Y_OFFSET / renderStyle.getAxisHeight();
    }
    if (storageCount != 0) {
      if (renderCaption) {
        gl.glBegin(GL2.GL_LINES);
      }
      gl.glVertex3f(previousX,previousY * renderStyle.getAxisHeight(),renderState.zDepth);
      gl.glVertex3f(currentX,currentY * renderStyle.getAxisHeight(),renderState.zDepth);
      if (renderCaption) {
        gl.glEnd();
      }
    }
    if (renderCaption) {
      String sRawValue;
      if (currentStorage instanceof NumericalStorage) {
        sRawValue=Formatter.formatNumber(currentStorage.getFloat(EDataRepresentation.FOLD_CHANGE_RAW,contentID));
      }
 else       if (currentStorage instanceof NominalStorage) {
        sRawValue=((NominalStorage<String>)currentStorage).getRaw(contentID);
      }
 else       throw new IllegalStateException(""String_Node_Str"");
      renderBoxedYValues(gl,currentX,currentY * renderStyle.getAxisHeight(),sRawValue,selectionType);
    }
    previousX=currentX;
    previousY=currentY;
  }
  if (!renderCaption) {
    gl.glEnd();
  }
  if (selectionType != SelectionType.DESELECTED) {
    gl.glPopName();
  }
}","private void renderSingleLine(GL2 gl,Integer contentID,SelectionType selectionType,PolyLineState renderState,boolean renderCaption){
  gl.glColor4fv(renderState.color,0);
  gl.glLineWidth(renderState.lineWidth);
  if (!(detailLevel == DetailLevel.HIGH || detailLevel == DetailLevel.MEDIUM))   renderCaption=false;
  AStorage currentStorage=null;
  float previousX=0;
  float previousY=0;
  float currentX=0;
  float currentY=0;
  if (selectionType != SelectionType.DESELECTED) {
    gl.glPushName(pickingManager.getPickingID(uniqueID,PickingType.POLYLINE_SELECTION,contentID));
  }
  if (!renderCaption) {
    gl.glBegin(GL2.GL_LINE_STRIP);
  }
  for (int storageCount=0; storageCount < storageVA.size(); storageCount++) {
    currentStorage=table.get(storageVA.get(storageCount));
    currentX=axisSpacings.get(storageCount);
    currentY=currentStorage.getFloat(EDataRepresentation.NORMALIZED,contentID);
    if (Float.isNaN(currentY)) {
      currentY=NAN_Y_OFFSET / renderStyle.getAxisHeight();
    }
    if (storageCount != 0) {
      if (renderCaption) {
        gl.glBegin(GL2.GL_LINES);
      }
      gl.glVertex3f(previousX,previousY * renderStyle.getAxisHeight(),renderState.zDepth);
      gl.glVertex3f(currentX,currentY * renderStyle.getAxisHeight(),renderState.zDepth);
      if (renderCaption) {
        gl.glEnd();
      }
    }
    if (renderCaption) {
      String sRawValue;
      if (currentStorage instanceof NumericalStorage) {
        sRawValue=Formatter.formatNumber(currentStorage.getFloat(EDataRepresentation.RAW,contentID));
      }
 else       if (currentStorage instanceof NominalStorage) {
        sRawValue=((NominalStorage<String>)currentStorage).getRaw(contentID);
      }
 else       throw new IllegalStateException(""String_Node_Str"");
      renderBoxedYValues(gl,currentX,currentY * renderStyle.getAxisHeight(),sRawValue,selectionType);
    }
    previousX=currentX;
    previousY=currentY;
  }
  if (!renderCaption) {
    gl.glEnd();
  }
  if (selectionType != SelectionType.DESELECTED) {
    gl.glPopName();
  }
}",0.997080291970803
57953,"@Override public void render(final GL2 gl){
  contentSpacing.getYDistances().clear();
  float yPosition=y;
  float xPosition=0;
  float fieldHeight=0;
  float fieldWidth=x;
  int iCount=0;
  for (  Integer contentID : heatMap.getContentVA()) {
    iCount++;
    fieldHeight=contentSpacing.getFieldHeight(contentID);
    if (heatMap.isHideElements() && heatMap.getContentSelectionManager().checkStatus(GLHeatMap.SELECTION_HIDDEN,contentID)) {
      contentSpacing.getYDistances().add(yPosition);
      continue;
    }
    yPosition-=fieldHeight;
    xPosition=0;
    ISet set=heatMap.getSet();
    if (set == null)     return;
    float[] certainty=new float[3];
    certainty[0]=set.getNormalizedUncertainty(contentID);
    certainty[1]=set.getNormalizedUncertainty(contentID);
    certainty[2]=set.getNormalizedUncertainty(contentID);
    PixelGLConverter conv=heatMap.getParentGLCanvas().getPixelGLConverter();
    int screenHeight=conv.getPixelHeightForGLHeight(fieldHeight);
    if (screenHeight < 3) {
      int i=0;
      certainty[i]=certainty[i] > 1 ? 1 : certainty[i];
      certainty[i]=certainty[i] < 0 ? 0 : certainty[i];
      renderLine(gl,yPosition,xPosition,fieldHeight,fieldWidth,certainty[i],GLUncertaintyHeatMap.lightLight);
    }
 else {
      for (int i=0; i < certainty.length; i++) {
        float height=fieldHeight / (float)certainty.length;
        float yPos=yPosition + height * i;
        certainty[i]=certainty[i] > 1 ? 1 : certainty[i];
        certainty[i]=certainty[i] < 0 ? 0 : certainty[i];
        renderLine(gl,yPos,xPosition,height,fieldWidth,certainty[i],GLUncertaintyHeatMap.levelLightColor[i]);
      }
    }
    contentSpacing.getYDistances().add(yPosition);
  }
}","@Override public void render(final GL2 gl){
  contentSpacing.getYDistances().clear();
  float yPosition=y;
  float xPosition=0;
  float fieldHeight=0;
  float fieldWidth=x;
  int iCount=0;
  for (  Integer contentID : heatMap.getContentVA()) {
    iCount++;
    fieldHeight=contentSpacing.getFieldHeight(contentID);
    if (heatMap.isHideElements() && heatMap.getContentSelectionManager().checkStatus(GLHeatMap.SELECTION_HIDDEN,contentID)) {
      contentSpacing.getYDistances().add(yPosition);
      continue;
    }
    yPosition-=fieldHeight;
    xPosition=0;
    ISet set=heatMap.getSet();
    if (set == null)     return;
    float[] certainty=new float[3];
    try {
      certainty[0]=set.getNormalizedUncertainty(contentID);
      certainty[1]=set.getNormalizedUncertainty(contentID);
      certainty[2]=set.getNormalizedUncertainty(contentID);
    }
 catch (    IllegalStateException ex) {
      certainty[0]=1f;
      certainty[1]=1f;
      certainty[2]=1f;
    }
    PixelGLConverter conv=heatMap.getParentGLCanvas().getPixelGLConverter();
    int screenHeight=conv.getPixelHeightForGLHeight(fieldHeight);
    if (screenHeight < 3) {
      int i=0;
      certainty[i]=certainty[i] > 1 ? 1 : certainty[i];
      certainty[i]=certainty[i] < 0 ? 0 : certainty[i];
      renderLine(gl,yPosition,xPosition,fieldHeight,fieldWidth,certainty[i],GLUncertaintyHeatMap.lightLight);
    }
 else {
      for (int i=0; i < certainty.length; i++) {
        float height=fieldHeight / (float)certainty.length;
        float yPos=yPosition + height * i;
        certainty[i]=certainty[i] > 1 ? 1 : certainty[i];
        certainty[i]=certainty[i] < 0 ? 0 : certainty[i];
        renderLine(gl,yPos,xPosition,height,fieldWidth,certainty[i],GLUncertaintyHeatMap.levelLightColor[i]);
      }
    }
    contentSpacing.getYDistances().add(yPosition);
  }
}",0.9613975767821922
57954,"@Override public void render(final GL2 gl){
  contentSpacing.getYDistances().clear();
  float yPosition=y;
  float xPosition=0;
  float fieldHeight=0;
  float fieldWidth=x;
  int iCount=0;
  for (  Integer contentID : heatMap.getContentVA()) {
    iCount++;
    fieldHeight=contentSpacing.getFieldHeight(contentID);
    if (heatMap.isHideElements() && heatMap.getContentSelectionManager().checkStatus(GLHeatMap.SELECTION_HIDDEN,contentID)) {
      contentSpacing.getYDistances().add(yPosition);
      continue;
    }
    yPosition-=fieldHeight;
    xPosition=0;
    renderLine(gl,contentID,yPosition,xPosition,fieldHeight,fieldWidth);
    contentSpacing.getYDistances().add(yPosition);
  }
}","@Override public void render(final GL2 gl){
}",0.1222826086956521
57955,"public void initTextures(ISet set,ContentVirtualArray contentVA,StorageVirtualArray storageVA){
  int textureWidth=storageVA.size();
  int textureHeight=numberOfElements=contentVA.size();
  this.storageVA=storageVA;
  this.contentVA=contentVA;
  this.set=set;
  numberOfTextures=(int)Math.ceil((double)numberOfElements / MAX_SAMPLES_PER_TEXTURE);
  if (numberOfTextures <= 1)   samplesPerTexture=numberOfElements;
 else   samplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
  textures.clear();
  numberSamples.clear();
  Texture tempTexture;
  samplesPerTexture=(int)Math.ceil((double)textureHeight / numberOfTextures);
  FloatBuffer[] floatBuffer=new FloatBuffer[numberOfTextures];
  for (int iTexture=0; iTexture < numberOfTextures; iTexture++) {
    if (iTexture == numberOfTextures - 1) {
      numberSamples.add(textureHeight - samplesPerTexture * iTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate((textureHeight - samplesPerTexture * iTexture) * textureWidth * 4);
    }
 else {
      numberSamples.add(samplesPerTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate(samplesPerTexture * textureWidth * 4);
    }
  }
  int contentCount=0;
  int textureCounter=0;
  for (  Integer contentIndex : contentVA) {
    contentCount++;
    float uncertainty=set.getNormalizedUncertainty(contentIndex);
    for (int i=0; i < textureWidth; i++) {
      float[] rgba=new float[4];
      if ((float)i / textureWidth > uncertainty) {
        rgba=light;
      }
 else {
        rgba=dark;
      }
      floatBuffer[textureCounter].put(rgba);
    }
    if (contentCount >= numberSamples.get(textureCounter)) {
      floatBuffer[textureCounter].rewind();
      TextureData texData=new TextureData(GLProfile.getDefault(),GL2.GL_RGBA,textureWidth,numberSamples.get(textureCounter),0,GL2.GL_RGBA,GL2.GL_FLOAT,false,false,false,floatBuffer[textureCounter],null);
      tempTexture=TextureIO.newTexture(0);
      tempTexture.updateImage(texData);
      textures.add(tempTexture);
      textureCounter++;
      contentCount=0;
    }
  }
}","public void initTextures(ISet set,ContentVirtualArray contentVA,StorageVirtualArray storageVA){
  int textureWidth=storageVA.size();
  int textureHeight=numberOfElements=contentVA.size();
  this.storageVA=storageVA;
  this.contentVA=contentVA;
  this.set=set;
  numberOfTextures=(int)Math.ceil((double)numberOfElements / MAX_SAMPLES_PER_TEXTURE);
  if (numberOfTextures <= 1)   samplesPerTexture=numberOfElements;
 else   samplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
  textures.clear();
  numberSamples.clear();
  Texture tempTexture;
  samplesPerTexture=(int)Math.ceil((double)textureHeight / numberOfTextures);
  FloatBuffer[] floatBuffer=new FloatBuffer[numberOfTextures];
  for (int iTexture=0; iTexture < numberOfTextures; iTexture++) {
    if (iTexture == numberOfTextures - 1) {
      numberSamples.add(textureHeight - samplesPerTexture * iTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate((textureHeight - samplesPerTexture * iTexture) * textureWidth * 4);
    }
 else {
      numberSamples.add(samplesPerTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate(samplesPerTexture * textureWidth * 4);
    }
  }
  int contentCount=0;
  int textureCounter=0;
  for (  Integer contentIndex : contentVA) {
    contentCount++;
    float uncertainty;
    try {
      uncertainty=set.getNormalizedUncertainty(contentIndex);
    }
 catch (    IllegalStateException ex) {
      uncertainty=0;
    }
    for (int i=0; i < textureWidth; i++) {
      float[] rgba=new float[4];
      if ((float)i / textureWidth > uncertainty) {
        rgba=light;
      }
 else {
        rgba=dark;
      }
      floatBuffer[textureCounter].put(rgba);
    }
    if (contentCount >= numberSamples.get(textureCounter)) {
      floatBuffer[textureCounter].rewind();
      TextureData texData=new TextureData(GLProfile.getDefault(),GL2.GL_RGBA,textureWidth,numberSamples.get(textureCounter),0,GL2.GL_RGBA,GL2.GL_FLOAT,false,false,false,floatBuffer[textureCounter],null);
      tempTexture=TextureIO.newTexture(0);
      tempTexture.updateImage(texData);
      textures.add(tempTexture);
      textureCounter++;
      contentCount=0;
    }
  }
}",0.9754689754689756
57956,"public boolean containsUncertaintyData(){
  return isCertaintyDataSet;
}","public boolean containsUncertaintyData(){
  return (isCertaintyDataSet && hashCContainers.containsKey(EDataRepresentation.UNCERTAINTY_NORMALIZED));
}",0.6515837104072398
57957,"private void renderElement(final GL2 gl,final int iStorageIndex,final int iContentIndex,final float fYPosition,final float fXPosition,final float fFieldHeight,final float fFieldWidth){
  AStorage storage=heatMap.getSet().get(iStorageIndex);
  if (storage == null)   return;
  float value=storage.getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float fOpacity=1.0f;
  if (storage.containsUncertaintyData())   fOpacity=storage.getFloat(EDataRepresentation.UNCERTAINTY_NORMALIZED,iContentIndex);
 else   if (heatMap.getContentSelectionManager().checkStatus(SelectionType.DESELECTED,iContentIndex)) {
    fOpacity=0.3f;
  }
  float[] fArMappingColor=colorMapper.getColor(value);
  gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
  gl.glPushName(heatMap.getPickingManager().getPickingID(heatMap.getID(),EPickingType.HEAT_MAP_STORAGE_SELECTION,iStorageIndex));
  gl.glPushName(heatMap.getPickingManager().getPickingID(heatMap.getID(),EPickingType.HEAT_MAP_LINE_SELECTION,iContentIndex));
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(fXPosition,fYPosition,FIELD_Z);
  gl.glVertex3f(fXPosition + fFieldWidth,fYPosition,FIELD_Z);
  gl.glVertex3f(fXPosition + fFieldWidth,fYPosition + fFieldHeight,FIELD_Z);
  gl.glVertex3f(fXPosition,fYPosition + fFieldHeight,FIELD_Z);
  gl.glEnd();
  gl.glPopName();
  gl.glPopName();
}","private void renderElement(final GL2 gl,final int iStorageIndex,final int iContentIndex,final float fYPosition,final float fXPosition,final float fFieldHeight,final float fFieldWidth){
  AStorage storage=heatMap.getSet().get(iStorageIndex);
  if (storage == null)   return;
  float value=storage.getFloat(EDataRepresentation.NORMALIZED,iContentIndex);
  float fOpacity=1.0f;
  float[] fArMappingColor=colorMapper.getColor(value);
  gl.glColor4f(fArMappingColor[0],fArMappingColor[1],fArMappingColor[2],fOpacity);
  gl.glPushName(heatMap.getPickingManager().getPickingID(heatMap.getID(),EPickingType.HEAT_MAP_STORAGE_SELECTION,iStorageIndex));
  gl.glPushName(heatMap.getPickingManager().getPickingID(heatMap.getID(),EPickingType.HEAT_MAP_LINE_SELECTION,iContentIndex));
  gl.glBegin(GL2.GL_POLYGON);
  gl.glVertex3f(fXPosition,fYPosition,FIELD_Z);
  gl.glVertex3f(fXPosition + fFieldWidth,fYPosition,FIELD_Z);
  gl.glVertex3f(fXPosition + fFieldWidth,fYPosition + fFieldHeight,FIELD_Z);
  gl.glVertex3f(fXPosition,fYPosition + fFieldHeight,FIELD_Z);
  gl.glEnd();
  gl.glPopName();
  gl.glPopName();
}",0.8962148962148963
57958,"public void init(ISet set,ContentVirtualArray contentVA,StorageVirtualArray storageVA,ColorMapper colorMapper){
  dark=GLUncertaintyHeatMap.darkDark;
  light=GLUncertaintyHeatMap.lightLight;
  initTextures(set,contentVA,storageVA);
}","public void init(ISet set,ContentVirtualArray contentVA,StorageVirtualArray storageVA,ColorMapper colorMapper){
  dark=GLUncertaintyHeatMap.darkDark;
  light=GLUncertaintyHeatMap.lightLight;
  this.storageVA=storageVA;
  this.contentVA=contentVA;
  this.set=set;
  initTextures(null);
}",0.8092485549132948
57959,"public void initTextures(ISet set,ContentVirtualArray contentVA,StorageVirtualArray storageVA){
  int textureWidth=storageVA.size();
  int textureHeight=numberOfElements=contentVA.size();
  this.storageVA=storageVA;
  this.contentVA=contentVA;
  this.set=set;
  numberOfTextures=(int)Math.ceil((double)numberOfElements / MAX_SAMPLES_PER_TEXTURE);
  if (numberOfTextures <= 1)   samplesPerTexture=numberOfElements;
 else   samplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
  textures.clear();
  numberSamples.clear();
  Texture tempTexture;
  samplesPerTexture=(int)Math.ceil((double)textureHeight / numberOfTextures);
  FloatBuffer[] floatBuffer=new FloatBuffer[numberOfTextures];
  for (int iTexture=0; iTexture < numberOfTextures; iTexture++) {
    if (iTexture == numberOfTextures - 1) {
      numberSamples.add(textureHeight - samplesPerTexture * iTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate((textureHeight - samplesPerTexture * iTexture) * textureWidth * 4);
    }
 else {
      numberSamples.add(samplesPerTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate(samplesPerTexture * textureWidth * 4);
    }
  }
  int contentCount=0;
  int textureCounter=0;
  for (  Integer contentIndex : contentVA) {
    contentCount++;
    float uncertainty;
    try {
      uncertainty=set.getNormalizedUncertainty(contentIndex);
    }
 catch (    IllegalStateException ex) {
      uncertainty=0;
    }
    for (int i=0; i < textureWidth; i++) {
      float[] rgba=new float[4];
      if ((float)i / textureWidth > uncertainty) {
        rgba=light;
      }
 else {
        rgba=dark;
      }
      floatBuffer[textureCounter].put(rgba);
    }
    if (contentCount >= numberSamples.get(textureCounter)) {
      floatBuffer[textureCounter].rewind();
      TextureData texData=new TextureData(GLProfile.getDefault(),GL2.GL_RGBA,textureWidth,numberSamples.get(textureCounter),0,GL2.GL_RGBA,GL2.GL_FLOAT,false,false,false,floatBuffer[textureCounter],null);
      tempTexture=TextureIO.newTexture(0);
      tempTexture.updateImage(texData);
      textures.add(tempTexture);
      textureCounter++;
      contentCount=0;
    }
  }
}","public void initTextures(ArrayList<Float> uncertaintyVA){
  if (storageVA == null || contentVA == null)   return;
  int textureWidth=storageVA.size();
  int textureHeight=numberOfElements=contentVA.size();
  if (uncertaintyVA != null) {
    textureHeight=numberOfElements=uncertaintyVA.size();
  }
  numberOfTextures=(int)Math.ceil((double)numberOfElements / MAX_SAMPLES_PER_TEXTURE);
  if (numberOfTextures <= 1)   samplesPerTexture=numberOfElements;
 else   samplesPerTexture=MAX_SAMPLES_PER_TEXTURE;
  textures.clear();
  numberSamples.clear();
  Texture tempTexture;
  samplesPerTexture=(int)Math.ceil((double)textureHeight / numberOfTextures);
  FloatBuffer[] floatBuffer=new FloatBuffer[numberOfTextures];
  for (int iTexture=0; iTexture < numberOfTextures; iTexture++) {
    if (iTexture == numberOfTextures - 1) {
      numberSamples.add(textureHeight - samplesPerTexture * iTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate((textureHeight - samplesPerTexture * iTexture) * textureWidth * 4);
    }
 else {
      numberSamples.add(samplesPerTexture);
      floatBuffer[iTexture]=FloatBuffer.allocate(samplesPerTexture * textureWidth * 4);
    }
  }
  int contentCount=0;
  int textureCounter=0;
  float[] middle1={(light[0] + dark[0]) / 2f,(light[1] + dark[1]) * 0.66f,(light[2] + dark[2]) * 0.66f,(light[3] + dark[3]) * 0.66f};
  float[] middle2={(light[0] + dark[0]) / 2f,(light[1] + dark[1]) * 0.33f,(light[2] + dark[2]) * 0.33f,(light[3] + dark[3]) * 0.33f};
  for (int index=0; index < numberOfElements; index++) {
    float uncertainty;
    contentCount++;
    if (uncertaintyVA != null) {
      uncertainty=uncertaintyVA.get(index);
    }
 else {
      try {
        uncertainty=set.getNormalizedUncertainty(contentVA.get(index));
      }
 catch (      IllegalStateException ex) {
        uncertainty=0;
      }
    }
    for (int i=0; i < textureWidth; i++) {
      float[] rgba=new float[4];
      if ((((float)i / textureWidth) * 0.25) > (uncertainty)) {
        rgba=light;
      }
 else       if ((((float)i / textureWidth) * 0.5) > (uncertainty)) {
        rgba=light;
      }
 else       if ((((float)i / textureWidth) * 0.75) > (uncertainty)) {
        rgba=light;
      }
 else       if (((float)i / textureWidth) > (uncertainty)) {
        rgba=light;
      }
 else {
        rgba=dark;
      }
      floatBuffer[textureCounter].put(rgba);
    }
    if (contentCount >= numberSamples.get(textureCounter)) {
      floatBuffer[textureCounter].rewind();
      TextureData texData=new TextureData(GLProfile.getDefault(),GL2.GL_RGBA,textureWidth,numberSamples.get(textureCounter),0,GL2.GL_RGBA,GL2.GL_FLOAT,false,false,false,floatBuffer[textureCounter],null);
      tempTexture=TextureIO.newTexture(0);
      tempTexture.updateImage(texData);
      textures.add(tempTexture);
      textureCounter++;
      contentCount=0;
    }
  }
}",0.7167467948717948
57960,"/** 
 * Constructor.
 * @param glCanvas
 * @param label
 * @param viewFrustum
 */
public GLUncertaintyHeatMap(GLCaleydoCanvas glCanvas,final ViewFrustum viewFrustum){
  super(glCanvas,viewFrustum);
  viewType=GLUncertaintyHeatMap.VIEW_ID;
  parentGLCanvas.removeMouseWheelListener(glMouseListener);
  parentGLCanvas.addMouseWheelListener(glMouseWheelListener);
}","/** 
 * Constructor.
 * @param glCanvas
 * @param label
 * @param viewFrustum
 */
public GLUncertaintyHeatMap(GLCaleydoCanvas glCanvas,final ViewFrustum viewFrustum){
  super(glCanvas,viewFrustum);
  viewType=GLUncertaintyHeatMap.VIEW_ID;
}",0.7973421926910299
57961,"@Override public void init(GL2 gl){
  templateRenderer=new LayoutManager(this.viewFrustum);
  if (template == null)   template=new LayoutTemplate();
  templateRenderer.setTemplate(template);
  baseRow=new Row(""String_Node_Str"");
  template.setBaseElementLayout(baseRow);
  overviewLayout=new Column(""String_Node_Str"");
  overviewLayout.setDebug(false);
  overviewLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  overviewLayout.setPixelSizeX(90);
  overviewDetailConnectorLayout=new Column(""String_Node_Str"");
  overviewDetailConnectorLayout.setDebug(false);
  overviewDetailConnectorLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  overviewDetailConnectorLayout.setPixelSizeX(60);
  detailLayout=new ElementLayout(""String_Node_Str"");
  detailLayout.setDebug(false);
  baseRow.append(overviewLayout);
  baseRow.append(overviewDetailConnectorLayout);
  baseRow.append(detailLayout);
  super.renderStyle=renderStyle;
  detailLevel=DetailLevel.HIGH;
  createOverviewHeatMap(gl);
  createDetailHeatMap(gl);
  OverviewDetailConnectorRenderer overviewDetailConnectorRenderer=new OverviewDetailConnectorRenderer(overviewHeatMap,detailHeatMap);
  overviewDetailConnectorLayout.setRenderer(overviewDetailConnectorRenderer);
}","@Override public void init(GL2 gl){
  templateRenderer=new LayoutManager(this.viewFrustum);
  if (template == null)   template=new LayoutTemplate();
  templateRenderer.setTemplate(template);
  baseRow=new Row(""String_Node_Str"");
  template.setBaseElementLayout(baseRow);
  overviewLayout=new Column(""String_Node_Str"");
  overviewLayout.setDebug(false);
  overviewLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  overviewLayout.setPixelSizeX(90);
  overviewDetailConnectorLayout=new Column(""String_Node_Str"");
  overviewDetailConnectorLayout.setDebug(false);
  overviewDetailConnectorLayout.setPixelGLConverter(parentGLCanvas.getPixelGLConverter());
  overviewDetailConnectorLayout.setPixelSizeX(60);
  detailLayout=new ElementLayout(""String_Node_Str"");
  detailLayout.setDebug(false);
  baseRow.append(overviewLayout);
  baseRow.append(overviewDetailConnectorLayout);
  baseRow.append(detailLayout);
  super.renderStyle=renderStyle;
  detailLevel=DetailLevel.HIGH;
  createOverviewHeatMap(gl);
  createDetailHeatMap(gl);
  OverviewDetailConnectorRenderer overviewDetailConnectorRenderer=new OverviewDetailConnectorRenderer(overviewHeatMap,detailHeatMap);
  overviewDetailConnectorLayout.setRenderer(overviewDetailConnectorRenderer);
  templateRenderer.updateLayout();
}",0.9862258953168044
57962,"@Override public void display(GL2 gl){
  baseRow.render(gl);
  PixelGLConverter pc=this.getParentGLCanvas().getPixelGLConverter();
  if (updateVisualUncertainty) {
    for (    ClusterRenderer clusterRenderer : overviewHeatMap.getClusterRendererList()) {
      ArrayList<Float> uncertaintyVA=new ArrayList<Float>();
      if (clusterRenderer.textureRenderer != null && clusterRenderer.textureRenderer.heatmapLayout != null && clusterRenderer.visUncBarTextureRenderer != null) {
        VisualUncertaintyUtil.calcVisualUncertainty(gl,pc,clusterRenderer.textureRenderer.heatmapLayout,clusterRenderer.textureRenderer,uncertaintyVA);
        clusterRenderer.visUncBarTextureRenderer.updateTexture(uncertaintyVA);
      }
    }
    updateVisualUncertainty=false;
  }
}","@Override public void display(GL2 gl){
  baseRow.render(gl);
  PixelGLConverter pc=this.getParentGLCanvas().getPixelGLConverter();
  if (updateVisualUncertainty) {
    for (    ClusterRenderer clusterRenderer : overviewHeatMap.getClusterRendererList()) {
      ArrayList<Float> uncertaintyVA=new ArrayList<Float>();
      if (clusterRenderer.textureRenderer != null && clusterRenderer.textureRenderer.heatmapLayout != null && clusterRenderer.visUncBarTextureRenderer != null) {
        VisualUncertaintyUtil.calcVisualUncertainty(gl,pc,clusterRenderer.textureRenderer.heatmapLayout,clusterRenderer.textureRenderer,uncertaintyVA);
        clusterRenderer.visUncBarTextureRenderer.initTextures(uncertaintyVA);
      }
    }
    updateVisualUncertainty=false;
  }
}",0.9927868852459016
57963,"public void updateVABasedOnSortingStrategy(){
  ContentGroupList groupList=contentVA.getGroupList();
  contentVA=new ContentVirtualArray(Set.CONTENT,contentTree.getRoot().getLeaveIds());
  contentVA.setGroupList(groupList);
}","public void updateVABasedOnSortingStrategy(){
  contentVA=new ContentVirtualArray(Set.CONTENT,contentTree.getRoot().getLeaveIds());
  contentVA.buildNewGroupList(contentTree.getRoot().getChildren());
}",0.7417840375586855
57964,"/** 
 * Creates a new group list based on the cluster nodes supplied and sets it to the group list memeber of this virtual array
 * @param iAlClusterNodes the list of cluster nodes on which the group list is based
 * @return a reference to the local groupList variable
 */
public ContentGroupList buildNewGroupList(ArrayList<ClusterNode> iAlClusterNodes){
  groupList=(ContentGroupList)buildNewGroupList(new ContentGroupList(),iAlClusterNodes);
  return groupList;
}","/** 
 * Creates a new group list based on the cluster nodes supplied and sets it to the group list memeber of this virtual array
 * @param clusterNodes the list of cluster nodes on which the group list is based
 * @return a reference to the local groupList variable
 */
public ContentGroupList buildNewGroupList(ArrayList<ClusterNode> clusterNodes){
  groupList=(ContentGroupList)buildNewGroupList(new ContentGroupList(),clusterNodes);
  return groupList;
}",0.9837486457204768
57965,"/** 
 * Function which merges the clusters determined by the cut off value to group lists used for rendering the clusters assignments in   {@link GLHierarchicalHeatMap}.
 */
protected GroupList<GroupType,ConcreteType,VADelta> buildNewGroupList(GroupList<GroupType,ConcreteType,VADelta> groupList,ArrayList<ClusterNode> clusterNodes){
  int cnt=0;
  int iExample=0;
  for (  ClusterNode node : clusterNodes) {
    Group temp=new Group(node.getNrLeaves(),this.indexOf(iExample),node);
    groupList.append(temp);
    cnt++;
    iExample+=node.getNrLeaves();
  }
  return groupList;
}","/** 
 * Function which merges the clusters determined by the cut off value to group lists used for rendering the clusters assignments in   {@link GLHierarchicalHeatMap}.
 */
protected GroupList<GroupType,ConcreteType,VADelta> buildNewGroupList(GroupList<GroupType,ConcreteType,VADelta> groupList,ArrayList<ClusterNode> clusterNodes){
  int sampleElementIndex=0;
  for (  ClusterNode node : clusterNodes) {
    Group temp=new Group(node.getNrLeaves(),sampleElementIndex,node);
    groupList.append(temp);
    sampleElementIndex+=node.getNrLeaves();
  }
  return groupList;
}",0.9098786828422876
57966,"@Override public void createPartControl(Composite parent){
  dataDomain=(ASetBasedDataDomain)DataDomainManager.get().getDataDomain(serializedView.getDataDomainType());
  set=dataDomain.getSet();
  parentComposite=new Composite(parent,SWT.NULL);
  parentComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  Composite infoComposite=new Composite(parentComposite,SWT.NULL);
  infoComposite.setLayout(new GridLayout(1,false));
  infoComposite.setLayoutData(gridData);
  Label label=new Label(infoComposite,SWT.NONE);
  label.setText(""String_Node_Str"" + set.depth());
  label=new Label(infoComposite,SWT.NONE);
  label.setText(""String_Node_Str"" + set.size());
  label=new Label(infoComposite,SWT.NONE);
  label.setText(""String_Node_Str"" + dataDomain.getFileName());
  label=new Label(infoComposite,SWT.NONE);
  label.setText(""String_Node_Str"" + dataDomain.getHumanReadableContentIDType().getTypeName());
  ExpandBar bar=new ExpandBar(parentComposite,SWT.V_SCROLL);
  gridData=new GridData(GridData.FILL_BOTH);
  bar.setLayoutData(gridData);
  Composite composite=new Composite(bar,SWT.NONE);
  composite.setLayout(new FillLayout());
  RcpGLColorMapperHistogramView histogramView=new RcpGLColorMapperHistogramView();
  histogramView.setDataDomain(dataDomain);
  histogramView.createDefaultSerializedView();
  histogramView.createPartControl(composite);
  GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
  ExpandItem item2=new ExpandItem(bar,SWT.NONE,0);
  item2.setText(""String_Node_Str"");
  item2.setHeight(200);
  item2.setControl(composite);
  composite=new Composite(bar,SWT.NONE);
  composite.setLayout(new FillLayout());
  RcpGLFilterPipelineView filterPipelineView=new RcpGLFilterPipelineView();
  filterPipelineView.createDefaultSerializedView();
  filterPipelineView.createPartControl(composite);
  GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(filterPipelineView.getGLCanvas());
  ExpandItem item3=new ExpandItem(bar,SWT.NONE,1);
  item3.setText(""String_Node_Str"");
  item3.setHeight(200);
  item3.setControl(composite);
  composite=new Composite(bar,SWT.NONE);
  composite.setLayout(new FillLayout());
  RcpGLGrouperView grouperView=new RcpGLGrouperView();
  grouperView.createDefaultSerializedView();
  grouperView.createPartControl(composite);
  GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(grouperView.getGLCanvas());
  ExpandItem item4=new ExpandItem(bar,SWT.NONE,2);
  item4.setText(""String_Node_Str"");
  item4.setHeight(200);
  item4.setControl(composite);
  item2.setExpanded(true);
  item3.setExpanded(true);
  item4.setExpanded(true);
  bar.setSpacing(2);
}","@Override public void createPartControl(Composite parent){
  dataDomain=(ASetBasedDataDomain)DataDomainManager.get().getDataDomain(serializedView.getDataDomainType());
  set=dataDomain.getSet();
  parentComposite=new Composite(parent,SWT.NULL);
  parentComposite.setLayout(new GridLayout(1,false));
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  Composite infoComposite=new Composite(parentComposite,SWT.NULL);
  infoComposite.setLayout(new GridLayout(1,false));
  infoComposite.setLayoutData(gridData);
  Label label=new Label(infoComposite,SWT.NONE);
  label.setText(""String_Node_Str"" + set.depth());
  label=new Label(infoComposite,SWT.NONE);
  label.setText(""String_Node_Str"" + set.size());
  label=new Label(infoComposite,SWT.NONE);
  label.setText(""String_Node_Str"" + dataDomain.getFileName());
  label=new Label(infoComposite,SWT.NONE);
  label.setText(""String_Node_Str"" + dataDomain.getHumanReadableContentIDType().getTypeName());
  ExpandBar bar=new ExpandBar(parentComposite,SWT.V_SCROLL);
  gridData=new GridData(GridData.FILL_BOTH);
  bar.setLayoutData(gridData);
  Composite composite=new Composite(bar,SWT.NONE);
  composite.setLayout(new FillLayout());
  RcpGLColorMapperHistogramView histogramView=new RcpGLColorMapperHistogramView();
  histogramView.setDataDomain(dataDomain);
  histogramView.createDefaultSerializedView();
  histogramView.createPartControl(composite);
  GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(histogramView.getGLCanvas());
  ExpandItem item2=new ExpandItem(bar,SWT.NONE,0);
  item2.setText(""String_Node_Str"");
  item2.setHeight(200);
  item2.setControl(composite);
  composite=new Composite(bar,SWT.NONE);
  composite.setLayout(new FillLayout());
  RcpGLFilterPipelineView filterPipelineView=new RcpGLFilterPipelineView();
  filterPipelineView.createDefaultSerializedView();
  filterPipelineView.createPartControl(composite);
  GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(filterPipelineView.getGLCanvas());
  ExpandItem item3=new ExpandItem(bar,SWT.NONE,1);
  item3.setText(""String_Node_Str"");
  item3.setHeight(200);
  item3.setControl(composite);
  composite=new Composite(bar,SWT.NONE);
  composite.setLayout(new FillLayout());
  RcpGLGrouperView grouperView=new RcpGLGrouperView();
  grouperView.createDefaultSerializedView();
  grouperView.createPartControl(composite);
  GeneralManager.get().getViewGLCanvasManager().registerGLCanvasToAnimator(grouperView.getGLCanvas());
  ExpandItem item4=new ExpandItem(bar,SWT.NONE,2);
  item4.setText(""String_Node_Str"");
  item4.setHeight(800);
  item4.setControl(composite);
  item2.setExpanded(true);
  item3.setExpanded(true);
  item4.setExpanded(true);
  bar.setSpacing(2);
}",0.9996345029239766
57967,"/** 
 * Constructor.
 */
public HTMLBrowser(int iViewID,Composite parentComposite){
  super(iViewID,parentComposite);
}","/** 
 * Constructor.
 */
public HTMLBrowser(int iViewID,Composite parentComposite){
  super(iViewID,parentComposite);
  parentComposite.addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      unregisterEventListeners();
    }
  }
);
}",0.5847665847665847
57968,"public void setUrl(String sUrl){
  this.url=sUrl;
  draw();
}","public void setUrl(String url){
  this.url=url;
  browser.setUrl(url);
  textURL.setText(url);
  browser.update();
}",0.6214689265536724
57969,"/** 
 * Returns the   {@link RelationAnalyzer} of this dataDomain, or null if it has not been created (via{@link #createContentRelationAnalyzer()}).
 * @return
 */
@Override public java.util.Set<IDimensionGroupData> getDimensionGroups(){
  return dimensionGroups;
}","/** 
 * Returns the   {@link RelationAnalyzer} of this dataDomain, or null if it has not been created (via{@link #createContentRelationAnalyzer()}).
 * @return
 */
@Override public java.util.Set<ADimensionGroupData> getDimensionGroups(){
  return dimensionGroups;
}",0.9962264150943396
57970,"@Override public void setDimensionGroups(java.util.Set<IDimensionGroupData> dimensionGroups){
  this.dimensionGroups=dimensionGroups;
}","@Override public void setDimensionGroups(java.util.Set<ADimensionGroupData> dimensionGroups){
  this.dimensionGroups=dimensionGroups;
}",0.9925925925925926
57971,"@Override public void addDimensionGroup(IDimensionGroupData dimensionGroup){
  dimensionGroups.add(dimensionGroup);
}","@Override public void addDimensionGroup(ADimensionGroupData dimensionGroup){
  dimensionGroups.add(dimensionGroup);
}",0.9914529914529916
57972,"private void init(){
  dimensionGroups=new HashSet<IDimensionGroupData>();
  assignIDCategories();
  if (contentIDCategory == null || storageIDCategory == null) {
    throw new IllegalStateException(""String_Node_Str"" + toString() + ""String_Node_Str""+ contentIDCategory+ ""String_Node_Str""+ storageIDCategory);
  }
  contentIDType=IDType.registerType(""String_Node_Str"" + dataDomainType + ""String_Node_Str""+ hashCode(),contentIDCategory,EStorageType.INT);
  storageIDType=IDType.registerType(""String_Node_Str"" + dataDomainType + ""String_Node_Str""+ hashCode(),storageIDCategory,EStorageType.INT);
  contentGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainType + ""String_Node_Str""+ hashCode(),contentIDCategory,EStorageType.INT);
}","private void init(){
  dimensionGroups=new HashSet<ADimensionGroupData>();
  assignIDCategories();
  if (contentIDCategory == null || storageIDCategory == null) {
    throw new IllegalStateException(""String_Node_Str"" + toString() + ""String_Node_Str""+ contentIDCategory+ ""String_Node_Str""+ storageIDCategory);
  }
  contentIDType=IDType.registerType(""String_Node_Str"" + dataDomainType + ""String_Node_Str""+ hashCode(),contentIDCategory,EStorageType.INT);
  storageIDType=IDType.registerType(""String_Node_Str"" + dataDomainType + ""String_Node_Str""+ hashCode(),storageIDCategory,EStorageType.INT);
  contentGroupIDType=IDType.registerType(""String_Node_Str"" + dataDomainType + ""String_Node_Str""+ hashCode(),contentIDCategory,EStorageType.INT);
}",0.9986468200270636
57973,"/** 
 * @return The dimension groups that have been created for this IDataDomain object (data set).
 */
public Set<IDimensionGroupData> getDimensionGroups();","/** 
 * @return The dimension groups that have been created for this IDataDomain object (data set).
 */
public Set<ADimensionGroupData> getDimensionGroups();",0.9936305732484076
57974,"/** 
 * Sets the dimension groups for this IDataDomain object (data set).
 * @param dimensionGroups
 */
public void setDimensionGroups(Set<IDimensionGroupData> dimensionGroups);","/** 
 * Sets the dimension groups for this IDataDomain object (data set).
 * @param dimensionGroups
 */
public void setDimensionGroups(Set<ADimensionGroupData> dimensionGroups);",0.9943502824858758
57975,"/** 
 * Adds a dimension group to this IDataDomain object (data set).
 * @param dimensionGroup
 */
public void addDimensionGroup(IDimensionGroupData dimensionGroup);","/** 
 * Adds a dimension group to this IDataDomain object (data set).
 * @param dimensionGroup
 */
public void addDimensionGroup(ADimensionGroupData dimensionGroup);",0.993939393939394
57976,"@Override public Set<IDimensionGroupData> getDimensionGroups(){
  return dimensionGroups;
}","@Override public Set<ADimensionGroupData> getDimensionGroups(){
  return dimensionGroups;
}",0.989010989010989
57977,"@Override public void setDimensionGroups(Set<IDimensionGroupData> dimensionGroups){
  this.dimensionGroups=dimensionGroups;
}","@Override public void setDimensionGroups(Set<ADimensionGroupData> dimensionGroups){
  this.dimensionGroups=dimensionGroups;
}",0.992
57978,"/** 
 * Constructor.
 */
public PathwayDataDomain(){
  super(DATA_DOMAIN_TYPE);
  icon=EIconTextures.DATA_DOMAIN_PATHWAY;
  PathwayManager.get().triggerParsingPathwayDatabases();
  new PathwayLoadingProgressIndicatorAction().run(null);
  primaryIDType=IDType.getIDType(""String_Node_Str"");
  dimensionGroups=new HashSet<IDimensionGroupData>();
}","/** 
 * Constructor.
 */
public PathwayDataDomain(){
  super(DATA_DOMAIN_TYPE);
  icon=EIconTextures.DATA_DOMAIN_PATHWAY;
  PathwayManager.get().triggerParsingPathwayDatabases();
  new PathwayLoadingProgressIndicatorAction().run(null);
  primaryIDType=IDType.getIDType(""String_Node_Str"");
  dimensionGroups=new HashSet<ADimensionGroupData>();
}",0.997093023255814
57979,"@Override public void addDimensionGroup(IDimensionGroupData dimensionGroup){
  dimensionGroups.add(dimensionGroup);
}","@Override public void addDimensionGroup(ADimensionGroupData dimensionGroup){
  dimensionGroups.add(dimensionGroup);
}",0.9914529914529916
57980,"@Override public Set<IDimensionGroupData> getDimensionGroups(){
  return dimensionGroups;
}","@Override public Set<ADimensionGroupData> getDimensionGroups(){
  return dimensionGroups;
}",0.989010989010989
57981,"/** 
 * Constructor.
 */
public TissueDataDomain(){
  super(DATA_DOMAIN_TYPE);
  icon=EIconTextures.DATA_DOMAIN_TISSUE;
  dimensionGroups=new HashSet<IDimensionGroupData>();
}","/** 
 * Constructor.
 */
public TissueDataDomain(){
  super(DATA_DOMAIN_TYPE);
  icon=EIconTextures.DATA_DOMAIN_TISSUE;
  dimensionGroups=new HashSet<ADimensionGroupData>();
}",0.9942857142857144
57982,"@Override public void setDimensionGroups(Set<IDimensionGroupData> dimensionGroups){
  this.dimensionGroups=dimensionGroups;
}","@Override public void setDimensionGroups(Set<ADimensionGroupData> dimensionGroups){
  this.dimensionGroups=dimensionGroups;
}",0.992
57983,"@Override public void addDimensionGroup(IDimensionGroupData dimensionGroup){
  dimensionGroups.add(dimensionGroup);
}","@Override public void addDimensionGroup(ADimensionGroupData dimensionGroup){
  dimensionGroups.add(dimensionGroup);
}",0.9914529914529916
57984,"public ComparisonGroupOverviewRenderer(List<IDimensionGroupData> dimensionGroupData,AGLView view){
  this.dimensionGroupData=dimensionGroupData;
  this.view=view;
}","public ComparisonGroupOverviewRenderer(List<ADimensionGroupData> dimensionGroupData,AGLView view){
  this.dimensionGroupData=dimensionGroupData;
  this.view=view;
}",0.9939024390243902
57985,"@Override public List<IDimensionGroupData> getDimensionGroups(){
  List<IDimensionGroupData> groups=new ArrayList<IDimensionGroupData>();
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  return groups;
}","@Override public List<ADimensionGroupData> getDimensionGroups(){
  List<ADimensionGroupData> groups=new ArrayList<ADimensionGroupData>();
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  return groups;
}",0.98828125
57986,public List<IDimensionGroupData> getDimensionGroups();,public List<ADimensionGroupData> getDimensionGroups();,0.9814814814814816
57987,"@Override public List<IDimensionGroupData> getDimensionGroups(){
  List<IDimensionGroupData> groups=new ArrayList<IDimensionGroupData>();
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  return groups;
}","@Override public List<ADimensionGroupData> getDimensionGroups(){
  List<ADimensionGroupData> groups=new ArrayList<ADimensionGroupData>();
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  groups.add(null);
  return groups;
}",0.993421052631579
57988,"public AddGroupsToVisBricksItem(ArrayList<ISet> setsToShow){
  super();
  setText(""String_Node_Str"");
  ArrayList<IDimensionGroupData> dimensionGroupData=new ArrayList<IDimensionGroupData>(setsToShow.size());
  for (  ISet set : setsToShow) {
    SetBasedDimensionGroupData data=new SetBasedDimensionGroupData(set.getDataDomain(),set);
    dimensionGroupData.add(data);
  }
  AddGroupsToVisBricksEvent event=new AddGroupsToVisBricksEvent();
  event.setDimensionGroupData(dimensionGroupData);
  event.setSender(this);
  registerEvent(event);
}","public AddGroupsToVisBricksItem(ArrayList<ISet> setsToShow){
  super();
  setText(""String_Node_Str"");
  ArrayList<ADimensionGroupData> dimensionGroupData=new ArrayList<ADimensionGroupData>(setsToShow.size());
  for (  ISet set : setsToShow) {
    SetBasedDimensionGroupData data=new SetBasedDimensionGroupData(set.getDataDomain(),set);
    dimensionGroupData.add(data);
  }
  AddGroupsToVisBricksEvent event=new AddGroupsToVisBricksEvent();
  event.setDimensionGroupData(dimensionGroupData);
  event.setSender(this);
  registerEvent(event);
}",0.996309963099631
57989,"/** 
 * This method shall be called before the view is rendered in order to be zoomed.
 * @param gl
 */
public void beginZoom(GL2 gl){
  if (currentZoomScale == 1.0f) {
    relativeViewTranlateX=0;
    relativeViewTranlateY=0;
    return;
  }
  float viewTranslateX=relativeViewTranlateX * viewFrustum.getWidth();
  float viewTranslateY=relativeViewTranlateY * viewFrustum.getHeight();
  if (wasMouseWheeled) {
    PixelGLConverter pixelGLConverter=parentGLCanvas.getPixelGLConverter();
    float viewPositionX=pixelGLConverter.getGLWidthForCurrentGLTransform(gl);
    float viewPositionY=pixelGLConverter.getGLHeightForCurrentGLTransform(gl);
    float wheelPositionX=pixelGLConverter.getGLWidthForPixelWidth(mouseWheelPosition.x);
    float wheelPositionY=pixelGLConverter.getGLHeightForPixelHeight(parentGLCanvas.getHeight() - mouseWheelPosition.y);
    float zoomCenterMouseX=wheelPositionX - viewPositionX;
    float zoomCenterMouseY=wheelPositionY - viewPositionY;
    float relativeImageCenterX=(-viewTranslateX + zoomCenterMouseX) / (viewFrustum.getWidth() * previousZoomScale);
    float relativeImageCenterY=(-viewTranslateY + zoomCenterMouseY) / (viewFrustum.getHeight() * previousZoomScale);
    float zoomCenterX=relativeImageCenterX * viewFrustum.getWidth();
    float zoomCenterY=relativeImageCenterY * viewFrustum.getHeight();
    viewTranslateX=(viewFrustum.getWidth() / 2.0f) - zoomCenterX - (currentZoomScale - 1) * zoomCenterX;
    viewTranslateY=(viewFrustum.getHeight() / 2.0f) - zoomCenterY - (currentZoomScale - 1) * zoomCenterY;
    if (viewTranslateX > 0)     viewTranslateX=0;
    if (viewTranslateY > 0)     viewTranslateY=0;
    if (viewTranslateX < -(viewFrustum.getWidth() * (currentZoomScale - 1)))     viewTranslateX=-(viewFrustum.getWidth() * (currentZoomScale - 1));
    if (viewTranslateY < -(viewFrustum.getHeight() * (currentZoomScale - 1)))     viewTranslateY=-(viewFrustum.getHeight() * (currentZoomScale - 1));
    relativeImageCenterX=(-viewTranslateX + viewFrustum.getWidth() / 2.0f) / (viewFrustum.getWidth() * currentZoomScale);
    relativeImageCenterY=(-viewTranslateY + viewFrustum.getHeight() / 2.0f) / (viewFrustum.getHeight() * currentZoomScale);
    zoomCenterX=relativeImageCenterX * viewFrustum.getWidth();
    zoomCenterY=relativeImageCenterY * viewFrustum.getHeight();
    hScrollBar.setPageSize(pixelGLConverter.getPixelWidthForGLWidth((viewFrustum.getWidth() - viewFrustum.getWidth() / currentZoomScale) / currentZoomScale));
    hScrollBar.setMaxValue(pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getWidth() - viewFrustum.getWidth() / (currentZoomScale * 2.0f)));
    hScrollBar.setMinValue(pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getWidth() / (currentZoomScale * 2.0f)));
    hScrollBar.setSelection(pixelGLConverter.getPixelWidthForGLWidth(zoomCenterX));
    vScrollBar.setPageSize(pixelGLConverter.getPixelWidthForGLWidth((viewFrustum.getHeight() - viewFrustum.getHeight() / currentZoomScale) / currentZoomScale));
    vScrollBar.setMaxValue(pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getHeight() - viewFrustum.getHeight() / (currentZoomScale * 2.0f)));
    vScrollBar.setMinValue(pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getHeight() / (currentZoomScale * 2.0f)));
    vScrollBar.setSelection(pixelGLConverter.getPixelWidthForGLWidth(zoomCenterY));
    relativeViewTranlateX=viewTranslateX / viewFrustum.getWidth();
    relativeViewTranlateY=viewTranslateY / viewFrustum.getHeight();
  }
  gl.glPushMatrix();
  gl.glTranslatef(viewTranslateX,viewTranslateY,0);
  gl.glScalef(currentZoomScale,currentZoomScale,1);
}","/** 
 * This method shall be called before the view is rendered in order to be zoomed.
 * @param gl
 */
public void beginZoom(GL2 gl){
  if (currentZoomScale == 1.0f) {
    relativeViewTranlateX=0;
    relativeViewTranlateY=0;
    return;
  }
  float viewTranslateX=relativeViewTranlateX * viewFrustum.getWidth();
  float viewTranslateY=relativeViewTranlateY * viewFrustum.getHeight();
  PixelGLConverter pixelGLConverter=parentGLCanvas.getPixelGLConverter();
  if (wasMouseWheeled) {
    float viewPositionX=pixelGLConverter.getGLWidthForCurrentGLTransform(gl);
    float viewPositionY=pixelGLConverter.getGLHeightForCurrentGLTransform(gl);
    float wheelPositionX=pixelGLConverter.getGLWidthForPixelWidth(mouseWheelPosition.x);
    float wheelPositionY=pixelGLConverter.getGLHeightForPixelHeight(parentGLCanvas.getHeight() - mouseWheelPosition.y);
    float zoomCenterMouseX=wheelPositionX - viewPositionX;
    float zoomCenterMouseY=wheelPositionY - viewPositionY;
    float relativeImageCenterX=(-viewTranslateX + zoomCenterMouseX) / (viewFrustum.getWidth() * previousZoomScale);
    float relativeImageCenterY=(-viewTranslateY + zoomCenterMouseY) / (viewFrustum.getHeight() * previousZoomScale);
    float zoomCenterX=relativeImageCenterX * viewFrustum.getWidth();
    float zoomCenterY=relativeImageCenterY * viewFrustum.getHeight();
    viewTranslateX=(viewFrustum.getWidth() / 2.0f) - zoomCenterX - (currentZoomScale - 1) * zoomCenterX;
    viewTranslateY=(viewFrustum.getHeight() / 2.0f) - zoomCenterY - (currentZoomScale - 1) * zoomCenterY;
    if (viewTranslateX > 0)     viewTranslateX=0;
    if (viewTranslateY > 0)     viewTranslateY=0;
    if (viewTranslateX < -(viewFrustum.getWidth() * (currentZoomScale - 1)))     viewTranslateX=-(viewFrustum.getWidth() * (currentZoomScale - 1));
    if (viewTranslateY < -(viewFrustum.getHeight() * (currentZoomScale - 1)))     viewTranslateY=-(viewFrustum.getHeight() * (currentZoomScale - 1));
    relativeViewTranlateX=viewTranslateX / viewFrustum.getWidth();
    relativeViewTranlateY=viewTranslateY / viewFrustum.getHeight();
  }
  float relativeImageCenterX=(-viewTranslateX + viewFrustum.getWidth() / 2.0f) / (viewFrustum.getWidth() * currentZoomScale);
  float relativeImageCenterY=(-viewTranslateY + viewFrustum.getHeight() / 2.0f) / (viewFrustum.getHeight() * currentZoomScale);
  float zoomCenterX=relativeImageCenterX * viewFrustum.getWidth();
  float zoomCenterY=relativeImageCenterY * viewFrustum.getHeight();
  hScrollBar.setPageSize(pixelGLConverter.getPixelWidthForGLWidth((viewFrustum.getWidth() - viewFrustum.getWidth() / currentZoomScale) / currentZoomScale));
  hScrollBar.setMaxValue(pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getWidth() - viewFrustum.getWidth() / (currentZoomScale * 2.0f)));
  hScrollBar.setMinValue(pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getWidth() / (currentZoomScale * 2.0f)));
  hScrollBar.setSelection(pixelGLConverter.getPixelWidthForGLWidth(zoomCenterX));
  vScrollBar.setPageSize(pixelGLConverter.getPixelWidthForGLWidth((viewFrustum.getHeight() - viewFrustum.getHeight() / currentZoomScale) / currentZoomScale));
  vScrollBar.setMaxValue(pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getHeight() - viewFrustum.getHeight() / (currentZoomScale * 2.0f)));
  vScrollBar.setMinValue(pixelGLConverter.getPixelWidthForGLWidth(viewFrustum.getHeight() / (currentZoomScale * 2.0f)));
  vScrollBar.setSelection(pixelGLConverter.getPixelWidthForGLWidth(zoomCenterY));
  gl.glPushMatrix();
  gl.glTranslatef(viewTranslateX,viewTranslateY,0);
  gl.glScalef(currentZoomScale,currentZoomScale,1);
}",0.9461028192371476
57990,"/** 
 * Calls the displayRemote of the view to be rendered plus pushes the ID of the Brick.
 */
@Override public void render(GL2 gl){
  viewportPositionX=pixelGLConverter.getPixelWidthForCurrentGLTransform(gl);
  viewportPositionY=pixelGLConverter.getPixelHeightForCurrentGLTransform(gl);
  view.clipToFrustum(gl);
  view.beginZoom(gl);
  view.displayRemote(gl);
  view.endZoom(gl);
  gl.glDisable(GL2.GL_STENCIL_TEST);
}","/** 
 * Calls the displayRemote of the view to be rendered plus pushes the ID of the Brick.
 */
@Override public void render(GL2 gl){
  viewportPositionX=pixelGLConverter.getPixelWidthForCurrentGLTransform(gl);
  viewportPositionY=pixelGLConverter.getPixelHeightForCurrentGLTransform(gl);
  int viewportWidth=pixelGLConverter.getPixelWidthForGLWidth(x);
  int viewportHeight=pixelGLConverter.getPixelHeightForGLHeight(y);
  double[] clipPlane1=new double[]{0.0,1.0,0.0,0.0};
  double[] clipPlane2=new double[]{1.0,0.0,0.0,0.0};
  double[] clipPlane3=new double[]{-1.0,0.0,0.0,x};
  double[] clipPlane4=new double[]{0.0,-1.0,0.0,y};
  gl.glClipPlane(GL2.GL_CLIP_PLANE0,clipPlane1,0);
  gl.glClipPlane(GL2.GL_CLIP_PLANE1,clipPlane2,0);
  gl.glClipPlane(GL2.GL_CLIP_PLANE2,clipPlane3,0);
  gl.glClipPlane(GL2.GL_CLIP_PLANE3,clipPlane4,0);
  gl.glEnable(GL2.GL_CLIP_PLANE0);
  gl.glEnable(GL2.GL_CLIP_PLANE1);
  gl.glEnable(GL2.GL_CLIP_PLANE2);
  gl.glEnable(GL2.GL_CLIP_PLANE3);
  view.beginZoom(gl);
  view.displayRemote(gl);
  view.endZoom(gl);
  gl.glDisable(GL2.GL_CLIP_PLANE0);
  gl.glDisable(GL2.GL_CLIP_PLANE1);
  gl.glDisable(GL2.GL_CLIP_PLANE2);
  gl.glDisable(GL2.GL_CLIP_PLANE3);
}",0.493167701863354
57991,"public DetailToolBar(GLHeatMap heatMap){
  this.heatMap=heatMap;
  iconManager=new TextureManager();
}","public DetailToolBar(GLHeatMap heatMap){
  this.heatMap=heatMap;
  iconManager=new TextureManager();
  textRender=heatMap.getTextRenderer();
}",0.8360655737704918
57992,"@Override public void display(GL2 gl){
  handleHorizontalMoveDragging(gl);
  if (isLayoutDirty) {
    isLayoutDirty=false;
    centerLayoutManager.updateLayout();
    float minWidth=parentGLCanvas.getPixelGLConverter().getGLWidthForPixelWidth(DIMENSION_GROUP_SPACING_MIN_PIXEL_WIDTH);
    for (    ElementLayout layout : centerRowLayout) {
      if (!(layout.getRenderer() instanceof DimensionGroupSpacingRenderer))       continue;
      if (resizeNecessary)       break;
      if (layout.getSizeScaledX() < minWidth - 0.01f) {
        resizeNecessary=true;
        break;
      }
    }
  }
  if (resizeNecessary) {
    int size=centerRowLayout.size();
    if (size >= 3) {
      if (lastResizeDirectionWasToLeft) {
        dimensionGroupManager.setCenterGroupStartIndex(dimensionGroupManager.getCenterGroupStartIndex() + 1);
        float width=centerRowLayout.getElements().get(0).getSizeScaledX() + centerRowLayout.getElements().get(1).getSizeScaledX() + centerRowLayout.getElements().get(2).getSizeScaledX();
        centerRowLayout.remove(0);
        centerRowLayout.remove(0);
        leftDimensionGroupSpacing=centerRowLayout.getElements().get(0);
        leftDimensionGroupSpacing.setAbsoluteSizeX(width);
        ((DimensionGroupSpacingRenderer)leftDimensionGroupSpacing.getRenderer()).setLeftDimGroup(null);
        initLeftLayout();
      }
 else {
        dimensionGroupManager.setRightGroupStartIndex(dimensionGroupManager.getRightGroupStartIndex() - 1);
        float width=centerRowLayout.getElements().get(size - 1).getSizeScaledX() + centerRowLayout.getElements().get(size - 2).getSizeScaledX() + centerRowLayout.getElements().get(size - 3).getSizeScaledX();
        centerRowLayout.remove(centerRowLayout.size() - 1);
        centerRowLayout.remove(centerRowLayout.size() - 1);
        rightDimensionGroupSpacing=centerRowLayout.getElements().get(centerRowLayout.size() - 1);
        rightDimensionGroupSpacing.setGrabX(true);
        ((DimensionGroupSpacingRenderer)rightDimensionGroupSpacing.getRenderer()).setRightDimGroup(null);
        initRightLayout();
      }
    }
    centerLayoutManager.updateLayout();
    resizeNecessary=false;
  }
  for (  DimensionGroup dimensionGroup : dimensionGroupManager.getDimensionGroups()) {
    dimensionGroup.display(gl);
  }
  if (!isLeftDetailShown && !isRightDetailShown) {
    renderArch(gl);
  }
  if (!isLeftDetailShown && !isRightDetailShown) {
    leftLayoutManager.render(gl);
  }
  gl.glTranslatef(archInnerWidth,0,0);
  centerLayoutManager.render(gl);
  gl.glTranslatef(-archInnerWidth,0,0);
  if (!isLeftDetailShown && !isRightDetailShown) {
    float rightArchStand=(1 - ARCH_STAND_WIDTH_PERCENT) * viewFrustum.getWidth();
    gl.glTranslatef(rightArchStand,0,0);
    rightLayoutManager.render(gl);
    gl.glTranslatef(-rightArchStand,0,0);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}","@Override public void display(GL2 gl){
  handleHorizontalMoveDragging(gl);
  if (isLayoutDirty) {
    isLayoutDirty=false;
    centerLayoutManager.updateLayout();
    float minWidth=parentGLCanvas.getPixelGLConverter().getGLWidthForPixelWidth(DIMENSION_GROUP_SPACING_MIN_PIXEL_WIDTH);
    for (    ElementLayout layout : centerRowLayout) {
      if (!(layout.getRenderer() instanceof DimensionGroupSpacingRenderer))       continue;
      if (resizeNecessary)       break;
      if (layout.getSizeScaledX() < minWidth - 0.01f) {
        resizeNecessary=true;
        break;
      }
    }
  }
  if (resizeNecessary) {
    int size=centerRowLayout.size();
    if (size >= 3) {
      if (lastResizeDirectionWasToLeft) {
        dimensionGroupManager.setCenterGroupStartIndex(dimensionGroupManager.getCenterGroupStartIndex() + 1);
        float width=centerRowLayout.getElements().get(0).getSizeScaledX() + centerRowLayout.getElements().get(1).getSizeScaledX() + centerRowLayout.getElements().get(2).getSizeScaledX();
        centerRowLayout.remove(0);
        centerRowLayout.remove(0);
        leftDimensionGroupSpacing=centerRowLayout.getElements().get(0);
        leftDimensionGroupSpacing.setAbsoluteSizeX(width);
        ((DimensionGroupSpacingRenderer)leftDimensionGroupSpacing.getRenderer()).setLeftDimGroup(null);
        initLeftLayout();
      }
 else {
        dimensionGroupManager.setRightGroupStartIndex(dimensionGroupManager.getRightGroupStartIndex() - 1);
        float width=centerRowLayout.getElements().get(size - 1).getSizeScaledX() + centerRowLayout.getElements().get(size - 2).getSizeScaledX() + centerRowLayout.getElements().get(size - 3).getSizeScaledX();
        centerRowLayout.remove(centerRowLayout.size() - 1);
        centerRowLayout.remove(centerRowLayout.size() - 1);
        rightDimensionGroupSpacing=centerRowLayout.getElements().get(centerRowLayout.size() - 1);
        rightDimensionGroupSpacing.setGrabX(true);
        ((DimensionGroupSpacingRenderer)rightDimensionGroupSpacing.getRenderer()).setRightDimGroup(null);
        initRightLayout();
      }
    }
    centerLayoutManager.updateLayout();
    resizeNecessary=false;
  }
  if (isConnectionLinesDirty)   performConnectionLinesUpdate();
  for (  DimensionGroup dimensionGroup : dimensionGroupManager.getDimensionGroups()) {
    dimensionGroup.display(gl);
  }
  if (!isLeftDetailShown && !isRightDetailShown) {
    renderArch(gl);
  }
  if (!isLeftDetailShown && !isRightDetailShown) {
    leftLayoutManager.render(gl);
  }
  gl.glTranslatef(archInnerWidth,0,0);
  centerLayoutManager.render(gl);
  gl.glTranslatef(-archInnerWidth,0,0);
  if (!isLeftDetailShown && !isRightDetailShown) {
    float rightArchStand=(1 - ARCH_STAND_WIDTH_PERCENT) * viewFrustum.getWidth();
    gl.glTranslatef(rightArchStand,0,0);
    rightLayoutManager.render(gl);
    gl.glTranslatef(-rightArchStand,0,0);
  }
  dragAndDropController.handleDragging(gl,glMouseListener);
}",0.9890072140158022
57993,"public void updateConnectionLinesBetweenDimensionGroups(){
  connectionBandIDCounter=0;
  if (centerRowLayout != null) {
    for (    ElementLayout elementLayout : centerRowLayout.getElements()) {
      if (elementLayout.getRenderer() instanceof DimensionGroupSpacingRenderer) {
        ((DimensionGroupSpacingRenderer)elementLayout.getRenderer()).init();
      }
    }
  }
}","public void updateConnectionLinesBetweenDimensionGroups(){
  isConnectionLinesDirty=true;
}",0.3304721030042918
57994,"void render(GL2 gl){
  gl.glTranslatef(getTranslateX(),getTranslateY(),0);
  if (debug) {
    float yPositionDebugText=0;
    float[] color;
    if (frameColor == null)     color=new float[]{0,0.5f,0.5f,1};
 else {
      color=frameColor;
    }
    gl.glColor4fv(color,0);
    if (this instanceof LayoutContainer) {
      gl.glLineWidth(6);
      yPositionDebugText=getSizeScaledY() / 2;
    }
 else {
      gl.glLineWidth(2);
    }
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,0,0.2f);
    gl.glVertex3f(getSizeScaledX(),0,0.2f);
    gl.glVertex3f(getSizeScaledX(),getSizeScaledY(),0.2f);
    gl.glVertex3f(0,getSizeScaledY(),0.2f);
    gl.glEnd();
    if (textRenderer == null) {
      textRenderer=new CaleydoTextRenderer(24);
    }
    textRenderer.setColor(color[0],color[1],color[2],color[3]);
    textRenderer.renderText(gl,layoutName,0,yPositionDebugText,0.4f);
  }
  if (backgroundRenderers != null) {
    for (    LayoutRenderer backgroundRenderer : backgroundRenderers) {
      backgroundRenderer.render(gl);
    }
  }
  renderer.render(gl);
  if (foregroundRenderers != null) {
    for (    LayoutRenderer foregroundRenderer : foregroundRenderers) {
      foregroundRenderer.render(gl);
    }
  }
  gl.glTranslatef(-getTranslateX(),-getTranslateY(),0);
}","void render(GL2 gl){
  gl.glTranslatef(getTranslateX(),getTranslateY(),0);
  if (debug) {
    float yPositionDebugText=0;
    float[] color;
    if (frameColor == null)     color=new float[]{0,0.5f,0.5f,1};
 else {
      color=frameColor;
    }
    gl.glColor4fv(color,0);
    if (this instanceof LayoutContainer) {
      gl.glLineWidth(6);
      yPositionDebugText=getSizeScaledY() / 2;
    }
 else {
      gl.glLineWidth(2);
    }
    gl.glBegin(GL.GL_LINE_LOOP);
    gl.glVertex3f(0,0,0.2f);
    gl.glVertex3f(getSizeScaledX(),0,0.2f);
    gl.glVertex3f(getSizeScaledX(),getSizeScaledY(),0.2f);
    gl.glVertex3f(0,getSizeScaledY(),0.2f);
    gl.glEnd();
    if (textRenderer == null) {
      textRenderer=new CaleydoTextRenderer(24);
    }
    textRenderer.setColor(color[0],color[1],color[2],color[3]);
    textRenderer.renderText(gl,layoutName,0,yPositionDebugText,0.4f,0.03f,3);
  }
  if (backgroundRenderers != null) {
    for (    LayoutRenderer backgroundRenderer : backgroundRenderers) {
      backgroundRenderer.render(gl);
    }
  }
  renderer.render(gl);
  if (foregroundRenderers != null) {
    for (    LayoutRenderer foregroundRenderer : foregroundRenderers) {
      foregroundRenderer.render(gl);
    }
  }
  gl.glTranslatef(-getTranslateX(),-getTranslateY(),0);
}",0.9968701095461658
57995,"private void calculateWidthAndHeight(){
  String sCurrent;
  Rectangle2D box;
  float fTemp;
  Iterator<String> contentIterator=sContent.iterator();
  int iCount=0;
  float fFontScalingFactor=renderStyle.getHeadingFontScalingFactor();
  while (contentIterator.hasNext()) {
    sCurrent=contentIterator.next();
    if (iCount == 1) {
      fFontScalingFactor=renderStyle.getSmallFontScalingFactor();
    }
    box=textRenderer.getBounds(sCurrent).getBounds2D();
    fHeight+=box.getHeight() * fFontScalingFactor;
    fTemp=(float)box.getWidth() * fFontScalingFactor;
    if (fTemp > fWidth) {
      fWidth=fTemp;
    }
    fHeight+=fSpacing;
    iCount++;
  }
  fWidth+=2 * fSpacing;
  fHeight+=2 * fSpacing;
  fTextWidth=fWidth;
  if (miniView != null) {
    fWidth+=miniView.getWidth() + fSpacing * 2;
    if (fHeight < miniView.getHeight()) {
      fHeight=miniView.getHeight();
    }
    fHeight+=fSpacing * 2;
  }
  vecSize.set(fWidth,fHeight);
}","private void calculateWidthAndHeight(){
  String sCurrent;
  Rectangle2D box;
  float fTemp;
  Iterator<String> contentIterator=sContent.iterator();
  int iCount=0;
  float fFontScalingFactor=0.01f;
  while (contentIterator.hasNext()) {
    sCurrent=contentIterator.next();
    if (iCount == 1) {
      fFontScalingFactor=0.005f;
    }
    box=textRenderer.getBounds(sCurrent).getBounds2D();
    fHeight+=box.getHeight() * fFontScalingFactor;
    fTemp=(float)box.getWidth() * fFontScalingFactor;
    if (fTemp > fWidth) {
      fWidth=fTemp;
    }
    fHeight+=fSpacing;
    iCount++;
  }
  fWidth+=2 * fSpacing;
  fHeight+=2 * fSpacing;
  fTextWidth=fWidth;
  if (miniView != null) {
    fWidth+=miniView.getWidth() + fSpacing * 2;
    if (fHeight < miniView.getHeight()) {
      fHeight=miniView.getHeight();
    }
    fHeight+=fSpacing * 2;
  }
  vecSize.set(fWidth,fHeight);
}",0.9503003823047516
57996,"/** 
 * Render the data previously set
 * @param gl
 * @param bFirstTime this has to be true only the first time you render it and can never be true after that
 */
public void renderInfoArea(GL2 gl,Vec3f vecLowerLeft,boolean bFirstTime,float fZValue){
  String sCurrent;
  float fXLowerLeft=vecLowerLeft.x();
  float fYLowerLeft=vecLowerLeft.y();
  int iCount=0;
  while (iCount < 2) {
    if (iCount == 0) {
      gl.glColor4fv(InfoAreaRenderStyle.INFO_AREA_COLOR,0);
      gl.glBegin(GL2.GL_POLYGON);
    }
 else {
      gl.glColor4fv(InfoAreaRenderStyle.INFO_AREA_BORDER_COLOR,0);
      gl.glLineWidth(InfoAreaRenderStyle.INFO_AREA_BORDER_WIDTH);
      gl.glBegin(GL2.GL_LINE_STRIP);
    }
    gl.glVertex3f(fXLowerLeft,fYLowerLeft,fZValue);
    gl.glVertex3f(fXLowerLeft + fWidth,fYLowerLeft,fZValue);
    gl.glVertex3f(fXLowerLeft + fWidth,fYLowerLeft + fHeight,fZValue);
    gl.glVertex3f(fXLowerLeft,fYLowerLeft + fHeight,fZValue);
    if (iCount == 1) {
      gl.glVertex3f(fXLowerLeft,fYLowerLeft,fZValue);
    }
    gl.glEnd();
    iCount++;
  }
  textRenderer.setColor(1f,1f,1f,1);
  float fYUpperLeft=fYLowerLeft + fHeight;
  float fNextLineHeight=fYUpperLeft;
  textRenderer.begin3DRendering();
  Iterator<String> contentIterator=sContent.iterator();
  iCount=0;
  float fFontScaling=renderStyle.getHeadingFontScalingFactor();
  while (contentIterator.hasNext()) {
    if (iCount == 1) {
      fFontScaling=renderStyle.getSmallFontScalingFactor();
    }
    sCurrent=contentIterator.next();
    fNextLineHeight-=(float)textRenderer.getBounds(sCurrent).getHeight() * fFontScaling + fSpacing;
    textRenderer.draw3D(sCurrent,fXLowerLeft + fSpacing,fNextLineHeight,fZValue + 0.001f,fFontScaling);
    iCount++;
  }
  textRenderer.end3DRendering();
  if (miniView != null) {
    miniView.render(gl,fXLowerLeft + fTextWidth + fSpacing,fYLowerLeft + fSpacing,0);
  }
}","/** 
 * Render the data previously set
 * @param gl
 * @param bFirstTime this has to be true only the first time you render it and can never be true after that
 */
public void renderInfoArea(GL2 gl,Vec3f vecLowerLeft,boolean bFirstTime,float fZValue){
  String sCurrent;
  float fXLowerLeft=vecLowerLeft.x();
  float fYLowerLeft=vecLowerLeft.y();
  int iCount=0;
  while (iCount < 2) {
    if (iCount == 0) {
      gl.glColor4fv(InfoAreaRenderStyle.INFO_AREA_COLOR,0);
      gl.glBegin(GL2.GL_POLYGON);
    }
 else {
      gl.glColor4fv(InfoAreaRenderStyle.INFO_AREA_BORDER_COLOR,0);
      gl.glLineWidth(InfoAreaRenderStyle.INFO_AREA_BORDER_WIDTH);
      gl.glBegin(GL2.GL_LINE_STRIP);
    }
    gl.glVertex3f(fXLowerLeft,fYLowerLeft,fZValue);
    gl.glVertex3f(fXLowerLeft + fWidth,fYLowerLeft,fZValue);
    gl.glVertex3f(fXLowerLeft + fWidth,fYLowerLeft + fHeight,fZValue);
    gl.glVertex3f(fXLowerLeft,fYLowerLeft + fHeight,fZValue);
    if (iCount == 1) {
      gl.glVertex3f(fXLowerLeft,fYLowerLeft,fZValue);
    }
    gl.glEnd();
    iCount++;
  }
  textRenderer.setColor(1f,1f,1f,1);
  float fYUpperLeft=fYLowerLeft + fHeight;
  float fNextLineHeight=fYUpperLeft;
  textRenderer.begin3DRendering();
  Iterator<String> contentIterator=sContent.iterator();
  iCount=0;
  float fFontScaling=0.01f;
  while (contentIterator.hasNext()) {
    if (iCount == 1) {
      fFontScaling=0.005f;
    }
    sCurrent=contentIterator.next();
    fNextLineHeight-=(float)textRenderer.getBounds(sCurrent).getHeight() * fFontScaling + fSpacing;
    textRenderer.draw3D(sCurrent,fXLowerLeft + fSpacing,fNextLineHeight,fZValue + 0.001f,fFontScaling);
    iCount++;
  }
  textRenderer.end3DRendering();
  if (miniView != null) {
    miniView.render(gl,fXLowerLeft + fTextWidth + fSpacing,fYLowerLeft + fSpacing,0);
  }
}",0.937279391800163
57997,"public void setColor(float[] color){
  setColor(color[0],color[1],color[2],1);
}","/** 
 * Set the color of the text
 * @param color
 */
public void setColor(float[] color){
  setColor(color[0],color[1],color[2],1);
}",0.7476635514018691
57998,"/** 
 * Renders a text with specified pixel height.
 * @param gl GL2 context.
 * @param text Text to render
 * @param x X coordinate of the text.
 * @param y Y coordinate of the text.
 * @param z Z coordinate of the text.
 * @param scaling Factor the text is scaled with.
 * @param minSize Minimum size of the text. Note that the minimum size is scaled with the specified scaling vector.
 * @param pixelHeight Height of the text in pixels.
 * @param pixelGLConverter
 */
public void renderText(GL2 gl,String text,float x,float y,float z,int pixelHeight,PixelGLConverter pixelGLConverter){
  int fontSize=getFont().getSize();
  float glFontHeight=pixelGLConverter.getGLHeightForPixelHeight(fontSize);
  float scaling=(float)(glFontHeight * (float)((float)pixelHeight / (float)fontSize)) / (float)fontSize;
  begin3DRendering();
  draw3D(text,x,y,z,scaling);
  flush();
  end3DRendering();
}","/** 
 * Convenience method to render text with a specified minimum size without having to call begin3DRendering and end3DRendering.
 * @param gl GL2 context.
 * @param text Text to render
 * @param x X coordinate of the text.
 * @param y Y coordinate of the text.
 * @param z Z coordinate of the text.
 * @param scaling Factor the text is scaled with.
 * @param minSize Minimum size of the text. Note that the minimum size is scaled with the specified scaling vector.
 */
public void renderText(GL2 gl,String text,float x,float y,float z,float scaling,int minSize){
  scaling=calculateScaling(gl,scaling,minSize);
  begin3DRendering();
  draw3D(text,x,y,z,scaling);
  flush();
  end3DRendering();
}",0.6502835538752363
57999,"/** 
 * The constructor takes a TextRenderer which is used to render all text
 * @param textRenderer
 */
public ABookmark(GLBookmarkView manager,ABookmarkContainer<?> parentContainer,IDType idType,CaleydoTextRenderer textRenderer){
  this.textRenderer=textRenderer;
  this.manager=manager;
  this.idType=idType;
  this.parentContainer=parentContainer;
}","/** 
 * The constructor takes a TextRenderer which is used to render all text
 * @param textRenderer
 */
public ABookmark(GLBookmarkView manager,ABookmarkContainer<?> parentContainer,IDType idType,CaleydoTextRenderer textRenderer){
  this.textRenderer=textRenderer;
  this.manager=manager;
  this.idType=idType;
  this.parentContainer=parentContainer;
  pixelGLConverter=manager.getParentGLCanvas().getPixelGLConverter();
}",0.9097938144329896
58000,"public void render(GL2 gl){
  super.render(gl);
  float[] highlightColor=null;
  ArrayList<SelectionType> selectionTypes=parentContainer.selectionManager.getSelectionTypes(this.id);
  if (selectionTypes == null)   return;
  SelectionType topLevelType=null;
  for (  SelectionType selectionType : selectionTypes) {
    if (!selectionType.isVisible())     continue;
    if (selectionType == SelectionType.NORMAL)     continue;
    if (topLevelType == null)     topLevelType=selectionType;
 else     if (topLevelType.getPriority() < selectionType.getPriority())     topLevelType=selectionType;
  }
  if (topLevelType == null)   return;
  highlightColor=topLevelType.getColor();
  ElementLayout layout=getLayout();
  if (highlightColor != null) {
    float xOrigin=0;
    float yOrigin=0;
    float width=layout.getSizeScaledX();
    float height=layout.getSizeScaledY();
    gl.glColor3fv(highlightColor,0);
    gl.glBegin(GL2.GL_LINE_LOOP);
    gl.glVertex3f(xOrigin,yOrigin,0);
    gl.glVertex3f(xOrigin + width,yOrigin,0);
    gl.glVertex3f(xOrigin + width,yOrigin + height,0);
    gl.glVertex3f(xOrigin,yOrigin + height,0);
    gl.glEnd();
  }
}","public void render(GL2 gl){
  super.render(gl);
  ySpacing=pixelGLConverter.getGLHeightForPixelHeight(Y_SPACING_PIXEL);
  xSpacing=pixelGLConverter.getGLWidthForPixelWidth(X_SPACING_PIXEL);
  float[] highlightColor=null;
  ArrayList<SelectionType> selectionTypes=parentContainer.selectionManager.getSelectionTypes(this.id);
  if (selectionTypes == null)   return;
  SelectionType topLevelType=null;
  for (  SelectionType selectionType : selectionTypes) {
    if (!selectionType.isVisible())     continue;
    if (selectionType == SelectionType.NORMAL)     continue;
    if (topLevelType == null)     topLevelType=selectionType;
 else     if (topLevelType.getPriority() < selectionType.getPriority())     topLevelType=selectionType;
  }
  if (topLevelType == null)   return;
  highlightColor=topLevelType.getColor();
  ElementLayout layout=getLayout();
  if (highlightColor != null) {
    float xOrigin=0;
    float yOrigin=0;
    float width=layout.getSizeScaledX();
    float height=layout.getSizeScaledY();
    gl.glLineWidth(1);
    gl.glColor3fv(highlightColor,0);
    gl.glBegin(GL2.GL_LINE_LOOP);
    gl.glVertex3f(xOrigin,yOrigin,0);
    gl.glVertex3f(xOrigin + width,yOrigin,0);
    gl.glVertex3f(xOrigin + width,yOrigin + height,0);
    gl.glVertex3f(xOrigin,yOrigin + height,0);
    gl.glEnd();
  }
}",0.9328449328449328
